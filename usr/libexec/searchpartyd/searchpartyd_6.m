uint64_t sub_1003700FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  _BYTE v18[16];
  uint64_t v19;
  int v20;
  uint64_t v21[3];
  __int128 v22;

  v22 = xmmword_100E22FC0;
  v1 = type metadata accessor for OwnedBeaconGroup(0);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 40)));
  v3 = sub_10037316C(v2);
  swift_bridgeObjectRelease();
  v4 = (_QWORD *)sub_100369558(v3);
  swift_release();
  if (v4[2])
  {
    swift_bridgeObjectRetain(v4);
    v5 = v4[5];
    v21[0] = v4[4];
    v21[1] = v5;
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B7DF8);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(32, -1);
    v21[0] = v11;
    *(_DWORD *)v10 = 141558275;
    v19 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    swift_beginAccess(&v22, &v19, 0, 0);
    v12 = v22;
    sub_10001BBBC(v22, *((unint64_t *)&v22 + 1));
    v13 = Data.hexString.getter(v12, *((_QWORD *)&v12 + 1));
    v15 = v14;
    sub_10001BC14(v12, *((unint64_t *)&v12 + 1));
    v17 = sub_100016940(v13, v15, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "unpairedSerialNumbersData: %{private,mask.hash}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  swift_beginAccess(&v22, v21, 0, 0);
  return v22;
}

uint64_t sub_100370730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t *v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t result;
  int64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  char *v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;

  v1 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v1);
  v63 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v59 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010F7830);
  v7 = __chkstk_darwin(v6);
  v9 = (int64_t *)((char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v11 = (int64_t *)((char *)&v56 - v10);
  v12 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40));
  v13 = *(_QWORD *)(v12 + 64);
  v57 = v12 + 64;
  v14 = 1 << *(_BYTE *)(v12 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v58 = (unint64_t)(v14 + 63) >> 6;
  v56 = v58 - 1;
  v60 = v12;
  swift_bridgeObjectRetain(v12);
  v64 = 0;
  v17 = &_swiftEmptyDictionarySingleton;
  v61 = v11;
  v62 = v9;
  while (1)
  {
    if (v16)
    {
      v66 = (v16 - 1) & v16;
      v20 = __clz(__rbit64(v16)) | (v64 << 6);
LABEL_8:
      v21 = *(_QWORD *)(v60 + 56);
      v22 = (uint64_t *)(*(_QWORD *)(v60 + 48) + 16 * v20);
      v23 = *v22;
      v24 = v22[1];
      *v9 = *v22;
      v9[1] = v24;
      v25 = v21 + *(_QWORD *)(v59 + 72) * v20;
      v26 = sub_10001A9A8((uint64_t *)&unk_1010F9880);
      sub_10005972C(v25, (uint64_t)v9 + *(int *)(v26 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v9, 0, 1, v26);
      sub_10001BBBC(v23, v24);
      goto LABEL_27;
    }
    v27 = v64 + 1;
    if (__OFADD__(v64, 1))
      goto LABEL_44;
    if (v27 < v58)
    {
      v28 = *(_QWORD *)(v57 + 8 * v27);
      if (v28)
        goto LABEL_12;
      v29 = v64 + 2;
      ++v64;
      if (v27 + 1 < v58)
      {
        v28 = *(_QWORD *)(v57 + 8 * v29);
        if (v28)
          goto LABEL_15;
        v64 = v27 + 1;
        if (v27 + 2 < v58)
        {
          v28 = *(_QWORD *)(v57 + 8 * (v27 + 2));
          if (v28)
          {
            v27 += 2;
            goto LABEL_12;
          }
          v29 = v27 + 3;
          v64 = v27 + 2;
          if (v27 + 3 < v58)
            break;
        }
      }
    }
LABEL_26:
    v30 = sub_10001A9A8((uint64_t *)&unk_1010F9880);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v9, 1, 1, v30);
    v66 = 0;
LABEL_27:
    sub_100005CF0((uint64_t)v9, (uint64_t)v11, (uint64_t *)&unk_1010F7830);
    v31 = sub_10001A9A8((uint64_t *)&unk_1010F9880);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v11, 1, v31) == 1)
    {
      swift_release(v60);
      return (uint64_t)v17;
    }
    v32 = *v11;
    v33 = v11[1];
    v34 = sub_1000126EC((uint64_t)v11 + *(int *)(v31 + 48), (uint64_t)v5, type metadata accessor for OwnedBeaconGroup.PairingState);
    v35 = v63;
    static String.Encoding.utf8.getter(v34);
    v36 = String.init(data:encoding:)(v32, v33, v35);
    v65 = v32;
    if (!v37)
      v36 = Data.hexString.getter(v32, v33);
    v38 = v36;
    v39 = v37;
    v40 = (uint64_t)v5;
    v41 = sub_100370C5C();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    v67 = v17;
    v44 = sub_100518DA0(v38, v39);
    v45 = v17[2];
    v46 = (v43 & 1) == 0;
    v47 = v45 + v46;
    if (__OFADD__(v45, v46))
    {
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    v48 = v43;
    if (v17[3] >= v47)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v17 = v67;
        if ((v43 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_100A9C820();
        v17 = v67;
        if ((v48 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_100A8A640(v47, isUniquelyReferenced_nonNull_native);
      v49 = sub_100518DA0(v38, v39);
      if ((v48 & 1) != (v50 & 1))
        goto LABEL_46;
      v44 = v49;
      v17 = v67;
      if ((v48 & 1) != 0)
      {
LABEL_4:
        v18 = v17[7];
        v19 = 8 * v44;

        *(_QWORD *)(v18 + v19) = v41;
        goto LABEL_5;
      }
    }
    v17[(v44 >> 6) + 8] |= 1 << v44;
    v51 = (uint64_t *)(v17[6] + 16 * v44);
    *v51 = v38;
    v51[1] = v39;
    *(_QWORD *)(v17[7] + 8 * v44) = v41;
    v52 = v17[2];
    v53 = __OFADD__(v52, 1);
    v54 = v52 + 1;
    if (v53)
      goto LABEL_43;
    v17[2] = v54;
    swift_bridgeObjectRetain(v39);
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(v65, v33);
    v5 = (char *)v40;
    sub_1000126B0(v40, type metadata accessor for OwnedBeaconGroup.PairingState);
    v11 = v61;
    v9 = v62;
    v16 = v66;
  }
  v28 = *(_QWORD *)(v57 + 8 * v29);
  if (v28)
  {
LABEL_15:
    v27 = v29;
LABEL_12:
    v66 = (v28 - 1) & v28;
    v20 = __clz(__rbit64(v28)) + (v27 << 6);
    v64 = v27;
    goto LABEL_8;
  }
  while (1)
  {
    v27 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v27 >= v58)
    {
      v64 = v56;
      goto LABEL_26;
    }
    v28 = *(_QWORD *)(v57 + 8 * v27);
    ++v29;
    if (v28)
      goto LABEL_12;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

id sub_100370C5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  id v23;
  unsigned int v24;
  NSString v25;
  unsigned __int8 v26;
  int EnumCaseMultiPayload;
  int *v29;
  uint64_t v30;
  char *v31;
  char v32;
  unsigned __int8 *v33;
  unsigned __int8 v34;
  int v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  NSNumber v47;
  unsigned __int8 *v48;
  unsigned __int8 v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  id v57;
  unint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  unint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;

  v1 = type metadata accessor for UUID(0);
  v68 = *(_QWORD *)(v1 - 8);
  v69 = v1;
  __chkstk_darwin(v1);
  v67 = (char *)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_1010ED860);
  v4 = __chkstk_darwin(v3);
  v66 = (uint64_t)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v64 - v6;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v65 = (uint64_t)&v64 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v64 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v64 - v17;
  v19 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v22 = (void *)qword_1011B7C08;
  v23 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v24 = objc_msgSend(v23, "isInternalBuild");

  if (v24)
  {
    v25 = String._bridgeToObjectiveC()();
    v26 = objc_msgSend(v22, "BOOLForKey:", v25);

    if ((v26 & 1) != 0)
      return objc_msgSend(objc_allocWithZone((Class)SPPairingState), "initWithStatus:beaconIdentifier:macAddress:pairingEpoch:partId:pairingType:", 2, 0, 0, 0, 255, -1);
  }
  sub_10005972C(v0, (uint64_t)v21, type metadata accessor for OwnedBeaconGroup.PairingState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v21, v19);
  if (!EnumCaseMultiPayload)
  {
    v48 = (unsigned __int8 *)&v21[*(int *)(sub_10001A9A8((uint64_t *)&unk_1010F98D0) + 48)];
    v49 = *v48;
    v50 = v48[1];
    v51 = (char)v48[2];
    sub_100005CF0((uint64_t)v21, (uint64_t)v18, (uint64_t *)&unk_1010F9890);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v7, 1, 1, v69);
    sub_100035464((uint64_t)v18, (uint64_t)v16);
    v52 = type metadata accessor for MACAddress(0);
    v53 = *(_QWORD *)(v52 - 8);
    v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48))(v16, 1, v52);
    if ((_DWORD)v54 == 1)
    {
      sub_100004048((uint64_t)v16, (uint64_t *)&unk_1010F9890);
      v55 = 0;
      v56 = 0xF000000000000000;
    }
    else
    {
      v55 = MACAddress.data.getter(v54);
      v56 = v61;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v16, v52);
    }
    if (v50)
      v62 = -1;
    else
      v62 = v49;
    v63 = qword_100E3B728[v51];
    sub_10000F4A0(0, (unint64_t *)&unk_1010F9900, SPPairingState_ptr);
    v57 = sub_100372E40(0, (uint64_t)v7, v55, v56, 0, v62, v63);
    sub_100004048((uint64_t)v18, (uint64_t *)&unk_1010F9890);
    return v57;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v29 = (int *)sub_10001A9A8(&qword_1010F5DC0);
    v30 = (uint64_t)&v21[v29[12]];
    sub_10001EF3C(*(_QWORD *)&v21[v29[16]], *(_QWORD *)&v21[v29[16] + 8]);
    v31 = &v21[v29[20]];
    v64 = *(_QWORD *)v31;
    v32 = v31[8];
    v33 = (unsigned __int8 *)&v21[v29[24]];
    v34 = *v33;
    v35 = v33[1];
    v36 = (char)v33[2];
    v37 = v67;
    v38 = v68;
    v39 = v69;
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v67, v21, v69);
    v40 = v65;
    sub_100005CF0(v30, v65, (uint64_t *)&unk_1010F9890);
    v41 = v66;
    (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v66, v37, v39);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v41, 0, 1, v39);
    sub_100035464(v40, (uint64_t)v11);
    v42 = type metadata accessor for MACAddress(0);
    v43 = *(_QWORD *)(v42 - 8);
    v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48))(v11, 1, v42);
    if ((_DWORD)v44 == 1)
    {
      sub_100004048((uint64_t)v11, (uint64_t *)&unk_1010F9890);
      v45 = 0;
      v46 = 0xF000000000000000;
      if ((v32 & 1) == 0)
      {
LABEL_10:
        v47.super.super.isa = Int64._bridgeToObjectiveC()().super.super.isa;
LABEL_16:
        if (v35)
          v59 = -1;
        else
          v59 = v34;
        v60 = qword_100E3B728[v36];
        sub_10000F4A0(0, (unint64_t *)&unk_1010F9900, SPPairingState_ptr);
        v57 = sub_100372E40(1, v66, v45, v46, v47.super.super.isa, v59, v60);
        sub_100004048(v65, (uint64_t *)&unk_1010F9890);
        (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v69);
        return v57;
      }
    }
    else
    {
      v45 = MACAddress.data.getter(v44);
      v46 = v58;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v42);
      if ((v32 & 1) == 0)
        goto LABEL_10;
    }
    v47.super.super.isa = 0;
    goto LABEL_16;
  }
  return objc_msgSend(objc_allocWithZone((Class)SPPairingState), "initWithStatus:beaconIdentifier:macAddress:pairingEpoch:partId:pairingType:", 2, 0, 0, 0, 255, -1);
}

uint64_t sub_10037123C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = sub_10001A9A8(&qword_1010EF198);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v23 - v13;
  v15 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40));
  if (!*(_QWORD *)(v15 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
LABEL_7:
    sub_100004048((uint64_t)v7, &qword_1010EF198);
    return 0;
  }
  sub_10001BBBC(a1, a2);
  v16 = sub_100518E4C(a1, a2);
  if ((v17 & 1) != 0)
  {
    sub_10005972C(*(_QWORD *)(v15 + 56) + *(_QWORD *)(v9 + 72) * v16, (uint64_t)v7, type metadata accessor for OwnedBeaconGroup.PairingState);
    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v18, 1, v8);
  sub_10001BC14(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    goto LABEL_7;
  sub_1000126EC((uint64_t)v7, (uint64_t)v14, type metadata accessor for OwnedBeaconGroup.PairingState);
  sub_1000126EC((uint64_t)v14, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
  if (swift_getEnumCaseMultiPayload(v12, v8) == 1)
  {
    v21 = sub_10001A9A8(&qword_1010F5DC0);
    v19 = *(_QWORD *)&v12[*(int *)(v21 + 64)];
    sub_100004048((uint64_t)&v12[*(int *)(v21 + 48)], (uint64_t *)&unk_1010F9890);
    v22 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v12, v22);
    return v19;
  }
  sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
  return 0;
}

uint64_t sub_100371478(uint64_t a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, unint64_t a6, uint64_t a7, char a8)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  int *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;

  v55 = a7;
  v56 = a4;
  v14 = sub_10001A9A8(&qword_1010EF198);
  __chkstk_darwin(v14);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v20);
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  v23 = (char *)&v53 - v22;
  if ((a8 & 1) != 0
    || (sub_10036A9C8(a2, a3, (uint64_t)&v53 - v22),
        v24 = type metadata accessor for UUID(0),
        v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v23, 1, v24),
        sub_100004048((uint64_t)v23, &qword_1010ED860),
        v25 == 1))
  {
    v26 = (int *)sub_10001A9A8(&qword_1010F5DC0);
    v27 = (uint64_t)&v16[v26[12]];
    v28 = (uint64_t *)&v16[v26[16]];
    v29 = v26[20];
    v53 = a2;
    v54 = a3;
    v30 = &v16[v29];
    v31 = &v16[v26[24]];
    v32 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v16, a1, v32);
    v33 = type metadata accessor for MultipartAccessoryPairingInfo(0);
    v34 = v56;
    sub_100035464((uint64_t)&v56[*(int *)(v33 + 24)], v27);
    *v28 = a5;
    v28[1] = a6;
    *(_QWORD *)v30 = v55;
    v30[8] = 0;
    v35 = v34[*(int *)(v33 + 28)];
    *(_WORD *)v31 = *v34;
    v31[2] = v35;
    v36 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
    v37 = 1;
    swift_storeEnumTagMultiPayload(v16, v36, 1);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v16, 0, 1, v36);
    type metadata accessor for OwnedBeaconGroup(0);
    v39 = v53;
    v38 = v54;
    sub_10001BBBC(v53, v54);
    sub_10001BBBC(a5, a6);
    sub_1000FE790((uint64_t)v16, v39, v38);
  }
  else
  {
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v40 = type metadata accessor for Logger(0);
    sub_10001A9E8(v40, (uint64_t)qword_1011B7DF8);
    sub_10001BBBC(a2, a3);
    v41 = sub_10001BBBC(a2, a3);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = a2;
      v45 = swift_slowAlloc(22, -1);
      v46 = swift_slowAlloc(32, -1);
      *(_DWORD *)v45 = 141558275;
      v57 = 1752392040;
      v58 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v45 + 4, v45 + 12);
      *(_WORD *)(v45 + 12) = 2081;
      v47 = sub_10001BBBC(v44, a3);
      static String.Encoding.utf8.getter(v47);
      v48 = String.init(data:encoding:)(v44, a3, v19);
      if (!v49)
        v48 = Data.hexString.getter(v44, a3);
      v50 = v48;
      v51 = v49;
      sub_10001BC14(v44, a3);
      v57 = sub_100016940(v50, v51, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v45 + 14, v45 + 22);
      swift_bridgeObjectRelease();
      sub_10001BC14(v44, a3);
      sub_10001BC14(v44, a3);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "%{private,mask.hash}s is already paired!", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);
    }
    else
    {
      sub_10001BC14(a2, a3);
      sub_10001BC14(a2, a3);
    }

    return 0;
  }
  return v37;
}

uint64_t sub_1003718CC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int EnumCaseMultiPayload;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = sub_10001A9A8(&qword_1010EF198);
  __chkstk_darwin(v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v25 - v13;
  v15 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40));
  if (!*(_QWORD *)(v15 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
LABEL_7:
    sub_100004048((uint64_t)v7, &qword_1010EF198);
    return 3;
  }
  sub_10001BBBC(a1, a2);
  v16 = sub_100518E4C(a1, a2);
  if ((v17 & 1) != 0)
  {
    sub_10005972C(*(_QWORD *)(v15 + 56) + *(_QWORD *)(v9 + 72) * v16, (uint64_t)v7, type metadata accessor for OwnedBeaconGroup.PairingState);
    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v18, 1, v8);
  sub_10001BC14(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    goto LABEL_7;
  sub_1000126EC((uint64_t)v7, (uint64_t)v14, type metadata accessor for OwnedBeaconGroup.PairingState);
  sub_1000126EC((uint64_t)v14, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v8);
  if (!EnumCaseMultiPayload)
  {
    v19 = v12[*(int *)(sub_10001A9A8((uint64_t *)&unk_1010F98D0) + 48) + 2];
    sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010F9890);
    return v19;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v22 = (int *)sub_10001A9A8(&qword_1010F5DC0);
    v23 = (uint64_t)&v12[v22[12]];
    sub_10001EF3C(*(_QWORD *)&v12[v22[16]], *(_QWORD *)&v12[v22[16] + 8]);
    v19 = v12[v22[24] + 2];
    sub_100004048(v23, (uint64_t *)&unk_1010F9890);
    v24 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v12, v24);
    return v19;
  }
  return 3;
}

BOOL sub_100371B30(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v4 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EF198);
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10036A9C8(a1, a2, (uint64_t)v12);
  v13 = type metadata accessor for UUID(0);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13);
  sub_100004048((uint64_t)v12, &qword_1010ED860);
  if (v14 == 1)
  {
    v15 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
    swift_storeEnumTagMultiPayload(v9, v15, 2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v9, 0, 1, v15);
    type metadata accessor for OwnedBeaconGroup(0);
    sub_10001BBBC(a1, a2);
    sub_1000FE790((uint64_t)v9, a1, a2);
  }
  else
  {
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v16 = type metadata accessor for Logger(0);
    sub_10001A9E8(v16, (uint64_t)qword_1011B7DF8);
    sub_10001BBBC(a1, a2);
    v17 = sub_10001BBBC(a1, a2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(22, -1);
      v21 = swift_slowAlloc(32, -1);
      *(_DWORD *)v20 = 141558275;
      v28 = 1752392040;
      v29 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v20 + 4, v20 + 12);
      *(_WORD *)(v20 + 12) = 2081;
      v22 = sub_10001BBBC(a1, a2);
      static String.Encoding.utf8.getter(v22);
      v23 = String.init(data:encoding:)(a1, a2, v6);
      if (!v24)
        v23 = Data.hexString.getter(a1, a2);
      v25 = v23;
      v26 = v24;
      sub_10001BC14(a1, a2);
      v28 = sub_100016940(v25, v26, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v20 + 14, v20 + 22);
      swift_bridgeObjectRelease();
      sub_10001BC14(a1, a2);
      sub_10001BC14(a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{private,mask.hash}s is already paired!", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      sub_10001BC14(a1, a2);
      sub_10001BC14(a1, a2);
    }

  }
  return v14 == 1;
}

uint64_t sub_100371EBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int EnumCaseMultiPayload;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  _BOOL8 v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char *v79;
  char v80;
  char v81;
  char v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v87;
  char v88;
  unint64_t v89;
  uint64_t v90;
  _BOOL8 v91;
  uint64_t v92;
  char v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  _QWORD *v97;
  uint64_t *v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  char v112;
  unint64_t v113;
  uint64_t v114;
  _BOOL8 v115;
  uint64_t v116;
  char v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  _QWORD *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t result;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  int64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  _QWORD *v154;

  v1 = v0;
  v2 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v3 = __chkstk_darwin(v2);
  v141 = (uint64_t)&v130 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v130 - v5;
  v7 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v148 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v144 = (uint64_t)&v130 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v139 = (char *)&v130 - v11;
  v12 = __chkstk_darwin(v10);
  v143 = (uint64_t)&v130 - v13;
  v14 = __chkstk_darwin(v12);
  v138 = (uint64_t)&v130 - v15;
  v16 = __chkstk_darwin(v14);
  v142 = (uint64_t)&v130 - v17;
  v18 = __chkstk_darwin(v16);
  v137 = (uint64_t)&v130 - v19;
  __chkstk_darwin(v18);
  v151 = (uint64_t)&v130 - v20;
  v21 = sub_10001A9A8((uint64_t *)&unk_1010F7830);
  v22 = __chkstk_darwin(v21);
  v24 = (uint64_t *)((char *)&v130 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22);
  v26 = (uint64_t *)((char *)&v130 - v25);
  v136 = type metadata accessor for OwnedBeaconGroup(0);
  v150 = *(int *)(v136 + 40);
  v27 = *(_QWORD *)(v0 + v150);
  v28 = *(_QWORD *)(v27 + 64);
  v134 = v27 + 64;
  v29 = 1 << *(_BYTE *)(v27 + 32);
  v30 = -1;
  if (v29 < 64)
    v30 = ~(-1 << v29);
  v152 = v30 & v28;
  v31 = (unint64_t)(v29 + 63) >> 6;
  v131 = v31 - 1;
  swift_bridgeObjectRetain(v27);
  v32 = 0;
  v140 = v31;
  v132 = v31 - 5;
  v145 = v33;
  v133 = v33 + 104;
  v146 = v26;
  v147 = v24;
  v135 = v6;
  while (1)
  {
    if (v152)
    {
      v35 = __clz(__rbit64(v152));
      v152 &= v152 - 1;
      v149 = v32;
      v36 = v35 | (v32 << 6);
      goto LABEL_9;
    }
    v43 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v43 >= v140)
    {
      v45 = v32;
    }
    else
    {
      v44 = *(_QWORD *)(v134 + 8 * v43);
      if (v44)
        goto LABEL_13;
      v45 = v32 + 1;
      if ((uint64_t)(v32 + 2) < v140)
      {
        v44 = *(_QWORD *)(v134 + 8 * (v32 + 2));
        if (v44)
        {
          v43 = v32 + 2;
          goto LABEL_13;
        }
        v45 = v32 + 2;
        if ((uint64_t)(v32 + 3) < v140)
        {
          v44 = *(_QWORD *)(v134 + 8 * (v32 + 3));
          if (v44)
          {
            v43 = v32 + 3;
LABEL_13:
            v152 = (v44 - 1) & v44;
            v36 = __clz(__rbit64(v44)) + (v43 << 6);
            v149 = v43;
LABEL_9:
            v37 = *(_QWORD *)(v145 + 56);
            v38 = (uint64_t *)(*(_QWORD *)(v145 + 48) + 16 * v36);
            v39 = *v38;
            v40 = v38[1];
            *v24 = *v38;
            v24[1] = v40;
            v41 = v37 + *(_QWORD *)(v148 + 72) * v36;
            v42 = sub_10001A9A8((uint64_t *)&unk_1010F9880);
            sub_10005972C(v41, (uint64_t)v24 + *(int *)(v42 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
            (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v24, 0, 1, v42);
            sub_10001BBBC(v39, v40);
            goto LABEL_16;
          }
          v43 = v32 + 4;
          v45 = v32 + 3;
          if ((uint64_t)(v32 + 4) < v140)
          {
            v44 = *(_QWORD *)(v134 + 8 * v43);
            if (v44)
              goto LABEL_13;
            while (v132 != v32)
            {
              v44 = *(_QWORD *)(v133 + 8 * v32++);
              if (v44)
              {
                v43 = v32 + 4;
                goto LABEL_13;
              }
            }
            v45 = v131;
          }
        }
      }
    }
    v46 = sub_10001A9A8((uint64_t *)&unk_1010F9880);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v24, 1, 1, v46);
    v152 = 0;
    v149 = v45;
LABEL_16:
    sub_100005CF0((uint64_t)v24, (uint64_t)v26, (uint64_t *)&unk_1010F7830);
    v47 = sub_10001A9A8((uint64_t *)&unk_1010F9880);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48))(v26, 1, v47) == 1)
      return swift_release();
    v48 = *v26;
    v49 = v26[1];
    v50 = (uint64_t)v26 + *(int *)(v47 + 48);
    v51 = v151;
    sub_1000126EC(v50, v151, type metadata accessor for OwnedBeaconGroup.PairingState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v51, v7);
    v153 = v49;
    if (!EnumCaseMultiPayload)
    {
      v78 = sub_10001A9A8((uint64_t *)&unk_1010F98D0);
      v79 = (char *)(v151 + *(int *)(v78 + 48));
      v80 = *v79;
      v81 = v79[1];
      v82 = v79[2];
      sub_100005CF0(v151, (uint64_t)v6, (uint64_t *)&unk_1010F9890);
      v83 = v137;
      v84 = (_BYTE *)(v137 + *(int *)(v78 + 48));
      sub_100035464((uint64_t)v6, v137);
      *v84 = v80;
      v84[1] = v81;
      v84[2] = v82;
      swift_storeEnumTagMultiPayload(v83, v7, 0);
      sub_1000126EC(v83, v142, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_10001BBBC(v48, v49);
      v85 = v150;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v150));
      v154 = *(_QWORD **)(v1 + v85);
      v87 = v154;
      *(_QWORD *)(v1 + v85) = 0x8000000000000000;
      v89 = sub_100518E4C(v48, v49);
      v90 = v87[2];
      v91 = (v88 & 1) == 0;
      v92 = v90 + v91;
      if (__OFADD__(v90, v91))
        goto LABEL_66;
      v93 = v88;
      if (v87[3] >= v92)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_100A99F50();
        v94 = v153;
        v97 = v154;
        if ((v93 & 1) == 0)
          goto LABEL_27;
      }
      else
      {
        sub_100A850F8(v92, isUniquelyReferenced_nonNull_native);
        v94 = v153;
        v95 = sub_100518E4C(v48, v153);
        if ((v93 & 1) != (v96 & 1))
          goto LABEL_71;
        v89 = v95;
        v97 = v154;
        if ((v93 & 1) == 0)
        {
LABEL_27:
          v97[(v89 >> 6) + 8] |= 1 << v89;
          v98 = (uint64_t *)(v97[6] + 16 * v89);
          *v98 = v48;
          v98[1] = v94;
          sub_1000126EC(v142, v97[7] + *(_QWORD *)(v148 + 72) * v89, type metadata accessor for OwnedBeaconGroup.PairingState);
          v99 = v97[2];
          v100 = __OFADD__(v99, 1);
          v101 = v99 + 1;
          if (v100)
            goto LABEL_68;
          v97[2] = v101;
          sub_10001BBBC(v48, v94);
          goto LABEL_45;
        }
      }
      sub_1000596D0(v142, v97[7] + *(_QWORD *)(v148 + 72) * v89);
LABEL_45:
      *(_QWORD *)(v1 + v150) = v97;
      swift_bridgeObjectRelease();
      sub_10001BC14(v48, v94);
      sub_10001BC14(v48, v94);
      sub_100004048((uint64_t)v6, (uint64_t *)&unk_1010F9890);
      goto LABEL_6;
    }
    if (EnumCaseMultiPayload != 1)
    {
      v102 = sub_10001A9A8((uint64_t *)&unk_1010F98D0);
      v103 = (uint64_t)v139;
      v104 = &v139[*(int *)(v102 + 48)];
      v105 = v1 + *(int *)(v136 + 28);
      v106 = type metadata accessor for MACAddress(0);
      v107 = *(_QWORD *)(v106 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 16))(v103, v105, v106);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v107 + 56))(v103, 0, 1, v106);
      *(_WORD *)v104 = 256;
      v104[2] = 3;
      swift_storeEnumTagMultiPayload(v103, v7, 0);
      sub_1000126EC(v103, v144, type metadata accessor for OwnedBeaconGroup.PairingState);
      v108 = v153;
      sub_10001BBBC(v48, v153);
      v109 = v150;
      v110 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v150));
      v154 = *(_QWORD **)(v1 + v109);
      v111 = v154;
      *(_QWORD *)(v1 + v109) = 0x8000000000000000;
      v113 = sub_100518E4C(v48, v108);
      v114 = v111[2];
      v115 = (v112 & 1) == 0;
      v116 = v114 + v115;
      if (__OFADD__(v114, v115))
        goto LABEL_67;
      v117 = v112;
      if (v111[3] >= v116)
      {
        if ((v110 & 1) == 0)
          sub_100A99F50();
        v118 = v153;
        v121 = v154;
        if ((v117 & 1) == 0)
          goto LABEL_33;
      }
      else
      {
        sub_100A850F8(v116, v110);
        v118 = v153;
        v119 = sub_100518E4C(v48, v153);
        if ((v117 & 1) != (v120 & 1))
          goto LABEL_71;
        v113 = v119;
        v121 = v154;
        if ((v117 & 1) == 0)
        {
LABEL_33:
          v121[(v113 >> 6) + 8] |= 1 << v113;
          v122 = (uint64_t *)(v121[6] + 16 * v113);
          *v122 = v48;
          v122[1] = v118;
          sub_1000126EC(v144, v121[7] + *(_QWORD *)(v148 + 72) * v113, type metadata accessor for OwnedBeaconGroup.PairingState);
          v123 = v121[2];
          v100 = __OFADD__(v123, 1);
          v124 = v123 + 1;
          if (v100)
            goto LABEL_69;
          v121[2] = v124;
          sub_10001BBBC(v48, v118);
          goto LABEL_50;
        }
      }
      sub_1000596D0(v144, v121[7] + *(_QWORD *)(v148 + 72) * v113);
LABEL_50:
      *(_QWORD *)(v1 + v150) = v121;
      swift_bridgeObjectRelease();
      sub_10001BC14(v48, v118);
      sub_10001BC14(v48, v118);
      goto LABEL_6;
    }
    v53 = (int *)sub_10001A9A8(&qword_1010F5DC0);
    v54 = v151;
    v55 = v151 + v53[12];
    sub_10001EF3C(*(_QWORD *)(v151 + v53[16]), *(_QWORD *)(v151 + v53[16] + 8));
    v56 = (_BYTE *)(v54 + v53[24]);
    LOBYTE(v53) = *v56;
    v57 = v56[1];
    v58 = v56[2];
    v59 = v7;
    v60 = v141;
    sub_100005CF0(v55, v141, (uint64_t *)&unk_1010F9890);
    v61 = sub_10001A9A8((uint64_t *)&unk_1010F98D0);
    v62 = v138;
    v63 = (_BYTE *)(v138 + *(int *)(v61 + 48));
    sub_100035464(v60, v138);
    *v63 = (_BYTE)v53;
    v63[1] = v57;
    v63[2] = v58;
    v64 = v59;
    swift_storeEnumTagMultiPayload(v62, v59, 0);
    sub_1000126EC(v62, v143, type metadata accessor for OwnedBeaconGroup.PairingState);
    v65 = v153;
    sub_10001BBBC(v48, v153);
    v66 = v150;
    v67 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + v150));
    v154 = *(_QWORD **)(v1 + v66);
    v68 = v154;
    *(_QWORD *)(v1 + v66) = 0x8000000000000000;
    v70 = sub_100518E4C(v48, v65);
    v71 = v68[2];
    v72 = (v69 & 1) == 0;
    v73 = v71 + v72;
    if (__OFADD__(v71, v72))
      goto LABEL_65;
    v74 = v69;
    if (v68[3] >= v73)
    {
      v6 = v135;
      if ((v67 & 1) == 0)
        sub_100A99F50();
      v75 = v153;
    }
    else
    {
      sub_100A850F8(v73, v67);
      v75 = v153;
      v76 = sub_100518E4C(v48, v153);
      v6 = v135;
      if ((v74 & 1) != (v77 & 1))
        goto LABEL_71;
      v70 = v76;
    }
    v125 = v154;
    v7 = v64;
    if ((v74 & 1) != 0)
    {
      sub_1000596D0(v143, v154[7] + *(_QWORD *)(v148 + 72) * v70);
    }
    else
    {
      v154[(v70 >> 6) + 8] |= 1 << v70;
      v126 = (uint64_t *)(v125[6] + 16 * v70);
      *v126 = v48;
      v126[1] = v75;
      sub_1000126EC(v143, v125[7] + *(_QWORD *)(v148 + 72) * v70, type metadata accessor for OwnedBeaconGroup.PairingState);
      v127 = v125[2];
      v100 = __OFADD__(v127, 1);
      v128 = v127 + 1;
      if (v100)
        goto LABEL_70;
      v125[2] = v128;
      sub_10001BBBC(v48, v75);
    }
    *(_QWORD *)(v1 + v150) = v125;
    swift_bridgeObjectRelease();
    sub_10001BC14(v48, v75);
    sub_10001BC14(v48, v75);
    sub_100004048(v141, (uint64_t *)&unk_1010F9890);
    v34 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v151, v34);
LABEL_6:
    v26 = v146;
    v24 = v147;
    v32 = v149;
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for OwnedBeaconGroup.SerialNumber);
  __break(1u);
  return result;
}

uint64_t sub_100372A20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  _QWORD *v46;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v36 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EF660);
  __chkstk_darwin(v7);
  v40 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BeaconObservation(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v43 = (uint64_t)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v34 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v34 - v16;
  v18 = _swiftEmptyArrayStorage;
  v46 = _swiftEmptyArrayStorage;
  v19 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(a2);
  if (v19)
  {
    v34 = a2;
    v35 = v15;
    v37 = v5;
    v38 = v4;
    v39 = a1;
    v20 = *(_QWORD *)(v10 + 72);
    v42 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v21 = a2 + v42;
    v22 = _swiftEmptyArrayStorage;
    v41 = v10;
    do
    {
      sub_10005972C(v21, (uint64_t)v17, type metadata accessor for BeaconObservation);
      sub_100374684();
      v45 = Set.init(minimumCapacity:)(2);
      sub_100A0D090(&v44, 37);
      sub_100A0D090(&v44, 38);
      v23 = sub_100A07E5C(v17[*(int *)(v9 + 24)], v45);
      swift_bridgeObjectRelease();
      if (v23)
      {
        v24 = v9;
        sub_1000126EC((uint64_t)v17, v43, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
          sub_10009AAC8(0, v22[2] + 1, 1);
        v22 = v46;
        v26 = v46[2];
        v25 = v46[3];
        if (v26 >= v25 >> 1)
        {
          sub_10009AAC8(v25 > 1, v26 + 1, 1);
          v22 = v46;
        }
        v22[2] = v26 + 1;
        sub_1000126EC(v43, (uint64_t)v22 + v42 + v26 * v20, type metadata accessor for BeaconObservation);
        v9 = v24;
        v10 = v41;
      }
      else
      {
        sub_1000126B0((uint64_t)v17, type metadata accessor for BeaconObservation);
      }
      v21 += v20;
      --v19;
    }
    while (v19);
    v18 = v46;
    v4 = v38;
    a1 = v39;
    v5 = v37;
    v15 = v35;
  }
  swift_bridgeObjectRelease();
  v27 = v40;
  sub_100A797E8((uint64_t)v18, v40);
  swift_release(v18);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v27, 1, v9) == 1)
  {
    sub_100004048(v27, &qword_1010EF660);
LABEL_19:
    v31 = 0;
    v32 = 1;
    goto LABEL_20;
  }
  sub_1000126EC(v27, (uint64_t)v15, type metadata accessor for BeaconObservation);
  if (v15[*(int *)(v9 + 24)] != 37)
  {
    sub_1000126B0((uint64_t)v15, type metadata accessor for BeaconObservation);
    goto LABEL_19;
  }
  v28 = (uint64_t)v15;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v29 = sub_100C1AEE4((uint64_t)v46);
  swift_bridgeObjectRelease();
  Date.addingTimeInterval(_:)((double)v29);
  v30 = v36;
  static Date.trustedNow.getter(v36);
  v31 = static Date.> infix(_:_:)(a1, v30);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v30, v4);
  sub_1000126B0(v28, type metadata accessor for BeaconObservation);
  v32 = 0;
LABEL_20:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a1, v32, 1, v4);
  return v31 & 1;
}

id sub_100372E40(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, unsigned __int8 a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  Class isa;
  Class v18;
  id v19;

  v8 = v7;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(a2, 1, v15) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a2, v15);
  }
  if (a4 >> 60 == 15)
  {
    v18 = 0;
  }
  else
  {
    v18 = Data._bridgeToObjectiveC()().super.isa;
    sub_10001EF3C(a3, a4);
  }
  v19 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v8)), "initWithStatus:beaconIdentifier:macAddress:pairingEpoch:partId:pairingType:", a1, isa, v18, a5, a6, a7);

  return v19;
}

uint64_t sub_100372F64(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = type metadata accessor for JSONDecoder(0);
  v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  JSONDecoder.init()(v8);
  v9 = sub_100006204((unint64_t *)&unk_1010F9870, type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress, (uint64_t)&unk_100E3B0F0);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v3, a1, a2, a3, v9);
  sub_10001BC14(a1, a2);
  return swift_release();
}

uint64_t sub_100373024(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204(&qword_101111AB0, type metadata accessor for OwnedBeaconGroup, (uint64_t)&unk_100E3ABC8);
  result = sub_100006204((unint64_t *)&unk_1010F97D0, type metadata accessor for OwnedBeaconGroup, (uint64_t)&unk_100E3ABA0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100373080(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204((unint64_t *)&unk_1011080D0, type metadata accessor for OwnedBeaconGroup, (uint64_t)&unk_100E3ABF0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F9970, (uint64_t)&nominal type descriptor for OwnedBeaconGroup.VersionedGroupMACAddress);
}

uint64_t type metadata accessor for OwnedBeaconGroup.PairingState(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F9A18, (uint64_t)&nominal type descriptor for OwnedBeaconGroup.PairingState);
}

unint64_t sub_1003730E4()
{
  unint64_t result;

  result = qword_1011082D0;
  if (!qword_1011082D0)
  {
    result = swift_getWitnessTable(byte_100E3AA70, &type metadata for OwnedBeaconGroup.SerialNumber);
    atomic_store(result, (unint64_t *)&qword_1011082D0);
  }
  return result;
}

unint64_t sub_100373128()
{
  unint64_t result;

  result = qword_1010F97E0;
  if (!qword_1010F97E0)
  {
    result = swift_getWitnessTable(byte_100E3AA48, &type metadata for OwnedBeaconGroup.SerialNumber);
    atomic_store(result, (unint64_t *)&qword_1010F97E0);
  }
  return result;
}

uint64_t sub_10037316C(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_1003732BC((unint64_t *)((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    if (v1)
      swift_willThrow(v8);
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc(v7, -1);
    bzero(v9, v7);
    v2 = sub_1003732BC((unint64_t *)v9, v6, v2);
    swift_slowDealloc(v9, -1, -1);
  }
  return v2;
}

uint64_t sub_1003732BC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  char *v40;
  uint64_t *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  int64_t v49;

  v35 = a2;
  v36 = a1;
  v46 = sub_10001A9A8((uint64_t *)&unk_1010F9880);
  v4 = __chkstk_darwin(v46);
  v45 = (uint64_t *)((char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v41 = (uint64_t *)((char *)&v34 - v6);
  v7 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v43 = *(_QWORD *)(v7 - 8);
  v44 = v7;
  v8 = __chkstk_darwin(v7);
  v42 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v40 = (char *)&v34 - v11;
  v12 = 0;
  v47 = (_QWORD *)a3;
  v13 = *(_QWORD *)(a3 + 64);
  v37 = 0;
  v38 = a3 + 64;
  v14 = 1 << *(_BYTE *)(a3 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v39 = (unint64_t)(v14 + 63) >> 6;
  v17 = (uint64_t)v40;
  v18 = v41;
  v19 = (uint64_t)v42;
  while (1)
  {
    if (v16)
    {
      v48 = (v16 - 1) & v16;
      v49 = v12;
      v20 = __clz(__rbit64(v16)) | (v12 << 6);
      goto LABEL_5;
    }
    v29 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v29 >= v39)
      return sub_10041C8DC(v36, v35, v37, v47);
    v30 = *(_QWORD *)(v38 + 8 * v29);
    v31 = v12 + 1;
    if (!v30)
    {
      v31 = v12 + 2;
      if (v12 + 2 >= v39)
        return sub_10041C8DC(v36, v35, v37, v47);
      v30 = *(_QWORD *)(v38 + 8 * v31);
      if (!v30)
      {
        v31 = v12 + 3;
        if (v12 + 3 >= v39)
          return sub_10041C8DC(v36, v35, v37, v47);
        v30 = *(_QWORD *)(v38 + 8 * v31);
        if (!v30)
          break;
      }
    }
LABEL_20:
    v48 = (v30 - 1) & v30;
    v49 = v31;
    v20 = __clz(__rbit64(v30)) + (v31 << 6);
LABEL_5:
    v21 = (uint64_t *)(v47[6] + 16 * v20);
    v23 = *v21;
    v22 = v21[1];
    sub_10005972C(v47[7] + *(_QWORD *)(v43 + 72) * v20, v17, type metadata accessor for OwnedBeaconGroup.PairingState);
    v24 = v46;
    v25 = (uint64_t)v18 + *(int *)(v46 + 48);
    *v18 = v23;
    v18[1] = v22;
    sub_10005972C(v17, v25, type metadata accessor for OwnedBeaconGroup.PairingState);
    v26 = *(int *)(v24 + 48);
    v27 = v45;
    v28 = (uint64_t)v45 + v26;
    *v45 = v23;
    v27[1] = v22;
    sub_10005972C(v25, (uint64_t)v27 + v26, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_10005972C(v28, v19, type metadata accessor for OwnedBeaconGroup.PairingState);
    LODWORD(v25) = swift_getEnumCaseMultiPayload(v19, v44);
    sub_10001BBBC(v23, v22);
    sub_10001BBBC(v23, v22);
    sub_1000126B0(v19, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_100004048((uint64_t)v18, (uint64_t *)&unk_1010F9880);
    sub_1000126B0(v28, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_1000126B0(v17, type metadata accessor for OwnedBeaconGroup.PairingState);
    result = sub_10001BC14(v23, v22);
    v12 = v49;
    v16 = v48;
    if (!(_DWORD)v25)
    {
      *(unint64_t *)((char *)v36 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      if (__OFADD__(v37++, 1))
      {
        __break(1u);
        return sub_10041C8DC(v36, v35, v37, v47);
      }
    }
  }
  v32 = v12 + 4;
  if (v12 + 4 >= v39)
    return sub_10041C8DC(v36, v35, v37, v47);
  v30 = *(_QWORD *)(v38 + 8 * v32);
  if (v30)
  {
    v31 = v12 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v31 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v31 >= v39)
      return sub_10041C8DC(v36, v35, v37, v47);
    v30 = *(_QWORD *)(v38 + 8 * v31);
    ++v32;
    if (v30)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_100373634()
{
  unint64_t result;

  result = qword_1010F9818;
  if (!qword_1010F9818)
  {
    result = swift_getWitnessTable(byte_100E3B168, &type metadata for OwnedBeaconGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9818);
  }
  return result;
}

unint64_t sub_100373678()
{
  unint64_t result;

  result = qword_1010F9828;
  if (!qword_1010F9828)
  {
    result = swift_getWitnessTable("1]#", &type metadata for OwnedBeaconGroup.Version);
    atomic_store(result, (unint64_t *)&qword_1010F9828);
  }
  return result;
}

unint64_t sub_1003736BC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1010F9838;
  if (!qword_1010F9838)
  {
    v1 = sub_10001F784(&qword_1010F9830);
    v2[0] = sub_1003730E4();
    v2[1] = sub_100006204((unint64_t *)&unk_1010F97F0, type metadata accessor for OwnedBeaconGroup.PairingState, (uint64_t)&unk_100E3B208);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1010F9838);
  }
  return result;
}

unint64_t sub_100373740()
{
  unint64_t result;

  result = qword_1010F9850;
  if (!qword_1010F9850)
  {
    result = swift_getWitnessTable("I]#", &type metadata for OwnedBeaconGroup.Version);
    atomic_store(result, (unint64_t *)&qword_1010F9850);
  }
  return result;
}

unint64_t sub_100373784()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1010F9868;
  if (!qword_1010F9868)
  {
    v1 = sub_10001F784(&qword_1010F9830);
    v2[0] = sub_100373128();
    v2[1] = sub_100006204(&qword_1011082F0, type metadata accessor for OwnedBeaconGroup.PairingState, (uint64_t)&unk_100E3B1E0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1010F9868);
  }
  return result;
}

unint64_t sub_100373808()
{
  unint64_t result;

  result = qword_1010F98A0;
  if (!qword_1010F98A0)
  {
    result = swift_getWitnessTable("!^#", &type metadata for OwnedBeaconGroup.BeaconGroupConversionError);
    atomic_store(result, (unint64_t *)&qword_1010F98A0);
  }
  return result;
}

BOOL sub_10037384C(int a1, int a2)
{
  int v3;

  if ((a1 & 0x100) != 0)
  {
    if ((a2 & 0x100) == 0)
      return 0;
  }
  else if ((a2 & 0x100) != 0 || a1 != a2)
  {
    return 0;
  }
  v3 = a2 & 0xFF0000;
  if ((a1 & 0xFF0000) != 0x30000)
    return v3 != 196608 && ((a2 ^ a1) & 0xFF0000) == 0;
  return v3 == 196608;
}

uint64_t sub_1003738B4(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;

  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((v4 & 1) == 0)
    return 0;
  v5 = *(_BYTE *)(a2 + 24);
  if (*(_BYTE *)(a1 + 24) == 1)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0)
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      v5 = 1;
    if ((v5 & 1) != 0)
      return 0;
  }
  v6 = (int *)type metadata accessor for OwnedBeaconGroup(0);
  if ((static UUID.== infix(_:_:)(a1 + v6[6], a2 + v6[6]) & 1) != 0
    && (static MACAddress.== infix(_:_:)(a1 + v6[7], a2 + v6[7]) & 1) != 0
    && *(unsigned __int8 *)(a1 + v6[8]) == *(unsigned __int8 *)(a2 + v6[8]))
  {
    v7 = v6[9];
    v8 = *(_QWORD *)(a1 + v7);
    v9 = *(_QWORD *)(a1 + v7 + 8);
    v10 = (_QWORD *)(a2 + v7);
    v11 = v10[1];
    v12 = v8 == *v10 && v9 == v11;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, *v10, v11, 0) & 1) != 0)
      return sub_100326BDC(*(_QWORD *)(a1 + v6[10]), *(_QWORD *)(a2 + v6[10]));
  }
  return 0;
}

uint64_t sub_1003739B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int EnumCaseMultiPayload;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void (*v54)(char *, uint64_t);
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  int v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t, uint64_t);
  char *v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  char v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char v96;
  void (*v97)(char *, uint64_t);
  char *v98;
  int v99;
  int v100;
  uint64_t v101;
  char v102;
  char v103;
  char v104;
  char v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t);
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  unint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;

  v132 = (char *)a2;
  v3 = type metadata accessor for UUID(0);
  v130 = *(_QWORD *)(v3 - 8);
  v131 = v3;
  __chkstk_darwin(v3);
  v124 = (char *)&v106 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for MACAddress(0);
  v129 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v122 = (char *)&v106 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_10001A9A8(&qword_1010F98B8);
  v6 = __chkstk_darwin(v126);
  v123 = (uint64_t)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v106 - v8;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v11 = __chkstk_darwin(v10);
  v121 = (uint64_t)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v128 = (uint64_t)&v106 - v14;
  v15 = __chkstk_darwin(v13);
  v125 = (uint64_t)&v106 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v106 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v106 - v20;
  v22 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v106 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v106 - v26;
  v28 = sub_10001A9A8((uint64_t *)&unk_1010F98C0);
  v29 = __chkstk_darwin(v28);
  v31 = (char *)&v106 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = (uint64_t)&v31[*(int *)(v29 + 48)];
  sub_10005972C(a1, (uint64_t)v31, type metadata accessor for OwnedBeaconGroup.PairingState);
  sub_10005972C((uint64_t)v132, v32, type metadata accessor for OwnedBeaconGroup.PairingState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v31, v22);
  if (!EnumCaseMultiPayload)
  {
    v132 = v21;
    sub_10005972C((uint64_t)v31, (uint64_t)v27, type metadata accessor for OwnedBeaconGroup.PairingState);
    v66 = *(int *)(sub_10001A9A8((uint64_t *)&unk_1010F98D0) + 48);
    v67 = v27[v66];
    v68 = v27[v66 + 1];
    v69 = v27[v66 + 2];
    if (swift_getEnumCaseMultiPayload(v32, v22))
    {
      sub_100004048((uint64_t)v27, (uint64_t *)&unk_1010F9890);
      goto LABEL_13;
    }
    LODWORD(v131) = v68;
    LODWORD(v125) = v69;
    LODWORD(v124) = *(unsigned __int8 *)(v32 + v66);
    LODWORD(v130) = *(unsigned __int8 *)(v32 + v66 + 1);
    LODWORD(v128) = *(unsigned __int8 *)(v32 + v66 + 2);
    v71 = v32;
    v72 = (uint64_t)v132;
    sub_100005CF0(v71, (uint64_t)v132, (uint64_t *)&unk_1010F9890);
    v73 = (uint64_t)v9;
    v74 = (uint64_t)&v9[*(int *)(v126 + 48)];
    v75 = v72;
    sub_100005CF0((uint64_t)v27, (uint64_t)v9, (uint64_t *)&unk_1010F9890);
    sub_100035464(v72, v74);
    v76 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v129 + 48);
    v77 = v127;
    if (v76((uint64_t)v9, 1, v127) == 1)
    {
      sub_100004048(v75, (uint64_t *)&unk_1010F9890);
      v78 = v76(v74, 1, v77);
      v79 = v131;
      if (v78 == 1)
      {
        sub_100004048((uint64_t)v9, (uint64_t *)&unk_1010F9890);
LABEL_26:
        if ((v79 & 1) != 0)
        {
          if (!(_DWORD)v130)
            goto LABEL_64;
        }
        else
        {
          v92 = v130;
          if (v67 != (_DWORD)v124)
            v92 = 1;
          if ((v92 & 1) != 0)
            goto LABEL_64;
        }
        if ((_DWORD)v125 != 3)
        {
          if ((_DWORD)v128 == 3)
            goto LABEL_64;
          v99 = v125;
          v100 = v128;
          goto LABEL_44;
        }
        if ((_DWORD)v128 == 3)
          goto LABEL_11;
LABEL_64:
        v80 = (uint64_t)v31;
        goto LABEL_65;
      }
    }
    else
    {
      v81 = (uint64_t)v9;
      v82 = v19;
      sub_100035464(v81, (uint64_t)v19);
      v83 = v76(v74, 1, v77);
      v79 = v131;
      if (v83 != 1)
      {
        v85 = v129;
        v86 = *(void (**)(char *, uint64_t, uint64_t))(v129 + 32);
        v126 = v73;
        v87 = v122;
        v86(v122, v74, v77);
        v88 = sub_100006204(&qword_10111C3A0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
        v89 = dispatch thunk of static Equatable.== infix(_:_:)(v19, v87, v77, v88);
        v90 = v75;
        v91 = *(void (**)(char *, uint64_t))(v85 + 8);
        v91(v87, v77);
        sub_100004048(v90, (uint64_t *)&unk_1010F9890);
        v91(v82, v77);
        sub_100004048(v126, (uint64_t *)&unk_1010F9890);
        if ((v89 & 1) == 0)
          goto LABEL_64;
        goto LABEL_26;
      }
      sub_100004048(v75, (uint64_t *)&unk_1010F9890);
      (*(void (**)(char *, uint64_t))(v129 + 8))(v19, v77);
    }
    sub_100004048(v73, &qword_1010F98B8);
    goto LABEL_64;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v119 = v31;
    sub_10005972C((uint64_t)v31, (uint64_t)v25, type metadata accessor for OwnedBeaconGroup.PairingState);
    v34 = (int *)sub_10001A9A8(&qword_1010F5DC0);
    v35 = v34[12];
    v132 = &v25[v35];
    v36 = v34[16];
    v37 = *(_QWORD *)&v25[v36 + 8];
    v120 = *(_QWORD *)&v25[v36];
    v38 = v34[20];
    v117 = *(_QWORD *)&v25[v38];
    v118 = v25[v38 + 8];
    v39 = v34[24];
    v116 = v25[v39];
    v40 = v25[v39 + 1];
    v41 = v25[v39 + 2];
    if (swift_getEnumCaseMultiPayload(v32, v22) == 1)
    {
      v110 = v40;
      v108 = v41;
      v115 = v37;
      v42 = v32 + v35;
      v43 = *(_QWORD *)(v32 + v36);
      v44 = *(_QWORD *)(v32 + v36 + 8);
      v109 = *(_QWORD *)(v32 + v38);
      v45 = *(unsigned __int8 *)(v32 + v39);
      v113 = *(unsigned __int8 *)(v32 + v38 + 8);
      v114 = v45;
      v46 = *(unsigned __int8 *)(v32 + v39 + 2);
      v111 = *(unsigned __int8 *)(v32 + v39 + 1);
      v112 = v46;
      v48 = v130;
      v47 = v131;
      v49 = v124;
      (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v124, v32, v131);
      v50 = v125;
      sub_100005CF0((uint64_t)v132, v125, (uint64_t *)&unk_1010F9890);
      v51 = v42;
      v52 = v128;
      sub_100005CF0(v51, v128, (uint64_t *)&unk_1010F9890);
      v53 = static UUID.== infix(_:_:)(v25, v49);
      v54 = *(void (**)(char *, uint64_t))(v48 + 8);
      v54(v25, v47);
      if ((v53 & 1) == 0)
      {
        sub_10001EF3C(v43, v44);
        sub_10001EF3C(v120, v115);
        sub_100004048(v52, (uint64_t *)&unk_1010F9890);
        sub_100004048(v50, (uint64_t *)&unk_1010F9890);
        v54(v49, v47);
        v80 = (uint64_t)v119;
LABEL_65:
        sub_1000126B0(v80, type metadata accessor for OwnedBeaconGroup.PairingState);
        return 0;
      }
      v107 = v54;
      v55 = v114;
      v132 = (char *)v43;
      v130 = v44;
      v56 = v123;
      v57 = v123 + *(int *)(v126 + 48);
      sub_100035464(v50, v123);
      sub_100035464(v52, v57);
      v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v129 + 48);
      v59 = v127;
      if (v58(v56, 1, v127) == 1)
      {
        v60 = v58(v57, 1, v59);
        v61 = v128;
        if (v60 == 1)
        {
          sub_100004048(v123, (uint64_t *)&unk_1010F9890);
          v31 = v119;
          v62 = v120;
          v63 = v115;
          v64 = v130;
          v65 = (uint64_t)v132;
          goto LABEL_36;
        }
      }
      else
      {
        v84 = v121;
        sub_100035464(v56, v121);
        if (v58(v57, 1, v59) != 1)
        {
          v93 = v129;
          v94 = v122;
          (*(void (**)(char *, uint64_t, uint64_t))(v129 + 32))(v122, v57, v59);
          v95 = sub_100006204(&qword_10111C3A0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
          v96 = dispatch thunk of static Equatable.== infix(_:_:)(v84, v94, v59, v95);
          v97 = *(void (**)(char *, uint64_t))(v93 + 8);
          v98 = v94;
          v50 = v125;
          v97(v98, v59);
          v97((char *)v84, v59);
          sub_100004048(v56, (uint64_t *)&unk_1010F9890);
          v61 = v128;
          v31 = v119;
          v62 = v120;
          v63 = v115;
          v64 = v130;
          v65 = (uint64_t)v132;
          if ((v96 & 1) != 0)
          {
LABEL_36:
            if (v63 >> 60 == 15)
            {
              sub_100004048(v61, (uint64_t *)&unk_1010F9890);
              sub_100004048(v50, (uint64_t *)&unk_1010F9890);
              v107(v49, v131);
              if (v64 >> 60 == 15)
              {
                sub_10001EF3C(v62, v63);
                goto LABEL_47;
              }
            }
            else
            {
              if (v64 >> 60 != 15)
              {
                v101 = v65;
                sub_10001BD08(v65, v64);
                sub_10001BD08(v62, v63);
                _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v62, v63);
                v103 = v102;
                sub_10001EF3C(v101, v64);
                sub_10001EF3C(v101, v64);
                sub_10001EF3C(v62, v63);
                sub_100004048(v61, (uint64_t *)&unk_1010F9890);
                sub_100004048(v50, (uint64_t *)&unk_1010F9890);
                v107(v49, v131);
                sub_10001EF3C(v62, v63);
                if ((v103 & 1) == 0)
                  goto LABEL_64;
LABEL_47:
                if ((v118 & 1) != 0)
                {
                  if (!v113)
                    goto LABEL_64;
                }
                else
                {
                  v104 = v113;
                  if (v117 != v109)
                    v104 = 1;
                  if ((v104 & 1) != 0)
                    goto LABEL_64;
                }
                if ((v110 & 1) != 0)
                {
                  v100 = v112;
                  if (!v111)
                    goto LABEL_64;
                }
                else
                {
                  v105 = v111;
                  v100 = v112;
                  if (v116 != v55)
                    v105 = 1;
                  if ((v105 & 1) != 0)
                    goto LABEL_64;
                }
                if (v108 == 3)
                {
                  if (v100 != 3)
                    goto LABEL_64;
LABEL_11:
                  sub_1000126B0((uint64_t)v31, type metadata accessor for OwnedBeaconGroup.PairingState);
                  return 1;
                }
                if (v100 != 3)
                {
                  v99 = v108;
LABEL_44:
                  if (v99 == v100)
                    goto LABEL_11;
                  goto LABEL_64;
                }
                goto LABEL_64;
              }
              sub_10001BBBC(v62, v63);
              sub_100004048(v61, (uint64_t *)&unk_1010F9890);
              sub_100004048(v50, (uint64_t *)&unk_1010F9890);
              v107(v49, v131);
              sub_10001EF3C(v62, v63);
            }
            sub_10001EF3C(v62, v63);
            sub_10001EF3C((uint64_t)v132, v64);
            goto LABEL_64;
          }
LABEL_24:
          sub_10001EF3C(v65, v64);
          sub_10001EF3C(v62, v63);
          sub_100004048(v61, (uint64_t *)&unk_1010F9890);
          sub_100004048(v50, (uint64_t *)&unk_1010F9890);
          v107(v49, v131);
          goto LABEL_64;
        }
        (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v84, v59);
        v61 = v128;
      }
      sub_100004048(v123, &qword_1010F98B8);
      v31 = v119;
      v62 = v120;
      v63 = v115;
      v64 = v130;
      v65 = (uint64_t)v132;
      goto LABEL_24;
    }
    sub_10001EF3C(v120, v37);
    sub_100004048((uint64_t)v132, (uint64_t *)&unk_1010F9890);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v25, v131);
    v31 = v119;
  }
  else if (swift_getEnumCaseMultiPayload(v32, v22) == 2)
  {
    goto LABEL_11;
  }
LABEL_13:
  sub_100004048((uint64_t)v31, (uint64_t *)&unk_1010F98C0);
  return 0;
}

unint64_t sub_1003744D4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101049F80, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

_QWORD *sub_10037451C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;

  v3 = sub_10001A9A8(&qword_1010F98E0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10001AA44(a1, v7);
  v10 = sub_100374640();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OwnedBeaconGroup.SerialNumber.CodingKeys, &type metadata for OwnedBeaconGroup.SerialNumber.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = sub_100036994();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, &type metadata for Data, v12, v3, &type metadata for Data, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v14;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return v9;
}

unint64_t sub_100374640()
{
  unint64_t result;

  result = qword_1010F98E8;
  if (!qword_1010F98E8)
  {
    result = swift_getWitnessTable(byte_100E3B060, &type metadata for OwnedBeaconGroup.SerialNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F98E8);
  }
  return result;
}

unint64_t sub_100374684()
{
  unint64_t result;

  result = qword_1010F9910;
  if (!qword_1010F9910)
  {
    result = swift_getWitnessTable(byte_100E4A970, &type metadata for BeaconObservation.ObservationType);
    atomic_store(result, (unint64_t *)&qword_1010F9910);
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.SerialNumber.CodingKeys()
{
  return &type metadata for OwnedBeaconGroup.SerialNumber.CodingKeys;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.BeaconGroupConversionError()
{
  return &type metadata for OwnedBeaconGroup.BeaconGroupConversionError;
}

uint64_t initializeBufferWithCopyOfBuffer for OwnedBeaconGroup.PairingMetadata(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for OwnedBeaconGroup.PairingMetadata(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFD)
  {
    if ((a2 + 33554179) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776963;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776963;
    }
  }
  if (*((unsigned __int8 *)a1 + 2) <= 3u)
    v4 = 3;
  else
    v4 = *((unsigned __int8 *)a1 + 2);
  v5 = v4 - 4;
  if (*((unsigned __int8 *)a1 + 2) < 3u)
    v6 = -1;
  else
    v6 = v5;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for OwnedBeaconGroup.PairingMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554179) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFC)
    v3 = 0;
  if (a2 > 0xFC)
  {
    *(_WORD *)result = a2 - 253;
    *(_BYTE *)(result + 2) = (a2 - 253) >> 16;
    if (v3)
    {
      v4 = ((a2 - 253) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)(result + 2) = a2 + 3;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.PairingMetadata()
{
  return &type metadata for OwnedBeaconGroup.PairingMetadata;
}

uint64_t _s12searchpartyd16OwnedBeaconGroupV26BeaconGroupConversionErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100374870 + 4 * byte_100E3A90B[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1003748A4 + 4 * byte_100E3A906[v4]))();
}

uint64_t sub_1003748A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003748AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003748B4);
  return result;
}

uint64_t sub_1003748C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003748C8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1003748CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003748D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.CodingKeys()
{
  return &type metadata for OwnedBeaconGroup.CodingKeys;
}

_QWORD *sub_1003748F0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v5 = *(int *)(a3 + 20);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for MACAddress(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_100374980(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for MACAddress(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t sub_1003749B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_100374A1C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = *(int *)(a3 + 20);
  v6 = a1 + v5;
  v7 = (uint64_t)a2 + v5;
  v8 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t sub_100374A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_100374AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_100374B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100374B54);
}

uint64_t sub_100374B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for MACAddress(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_100374B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100374BA0);
}

uint64_t sub_100374BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for MACAddress(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_100374BE4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100E3A960;
  result = type metadata accessor for MACAddress(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100374C58(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v13 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
      v14 = (int *)sub_10001A9A8(&qword_1010F5DC0);
      v15 = v14[12];
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      v18 = type metadata accessor for MACAddress(0);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        v20 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      v27 = v14[16];
      v28 = (char *)a1 + v27;
      v29 = (char *)a2 + v27;
      v30 = *((_QWORD *)v29 + 1);
      if (v30 >> 60 == 15)
      {
        *(_OWORD *)v28 = *(_OWORD *)v29;
      }
      else
      {
        v31 = *(_QWORD *)v29;
        sub_10001BBBC(*(_QWORD *)v29, *((_QWORD *)v29 + 1));
        *(_QWORD *)v28 = v31;
        *((_QWORD *)v28 + 1) = v30;
      }
      v32 = v14[20];
      v33 = (char *)a1 + v32;
      v34 = (char *)a2 + v32;
      *(_QWORD *)v33 = *(_QWORD *)v34;
      v33[8] = v34[8];
      v35 = v14[24];
      v36 = (char *)a1 + v35;
      v37 = (char *)a2 + v35;
      v36[2] = v37[2];
      *(_WORD *)v36 = *(_WORD *)v37;
      v24 = a1;
      v25 = a3;
      v26 = 1;
      goto LABEL_17;
    }
    if (!EnumCaseMultiPayload)
    {
      v9 = type metadata accessor for MACAddress(0);
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v9))
      {
        v11 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v10 + 16))(a1, a2, v9);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
      }
      v21 = *(int *)(sub_10001A9A8((uint64_t *)&unk_1010F98D0) + 48);
      v22 = (char *)a1 + v21;
      v23 = (char *)a2 + v21;
      *(_WORD *)v22 = *(_WORD *)v23;
      v22[2] = v23[2];
      v24 = a1;
      v25 = a3;
      v26 = 0;
LABEL_17:
      swift_storeEnumTagMultiPayload(v24, v25, v26);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t sub_100374ED8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    v7 = sub_10001A9A8(&qword_1010F5DC0);
    v8 = a1 + *(int *)(v7 + 48);
    v9 = type metadata accessor for MACAddress(0);
    v10 = *(_QWORD *)(v9 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
    if (!(_DWORD)result)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    v11 = (uint64_t *)(a1 + *(int *)(v7 + 64));
    v12 = v11[1];
    if (v12 >> 60 != 15)
      return sub_10001BC14(*v11, v12);
  }
  else if (!(_DWORD)result)
  {
    v4 = type metadata accessor for MACAddress(0);
    v5 = *(_QWORD *)(v4 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  return result;
}

char *sub_100374FF8(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v10 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
    v11 = (int *)sub_10001A9A8(&qword_1010F5DC0);
    v12 = v11[12];
    v13 = &a1[v12];
    v14 = &a2[v12];
    v15 = type metadata accessor for MACAddress(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v24 = v11[16];
    v25 = &a1[v24];
    v26 = &a2[v24];
    v27 = *((_QWORD *)v26 + 1);
    if (v27 >> 60 == 15)
    {
      *(_OWORD *)v25 = *(_OWORD *)v26;
    }
    else
    {
      v28 = *(_QWORD *)v26;
      sub_10001BBBC(*(_QWORD *)v26, *((_QWORD *)v26 + 1));
      *(_QWORD *)v25 = v28;
      *((_QWORD *)v25 + 1) = v27;
    }
    v29 = v11[20];
    v30 = &a1[v29];
    v31 = &a2[v29];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    v32 = v11[24];
    v33 = &a1[v32];
    v34 = &a2[v32];
    v33[2] = v34[2];
    *(_WORD *)v33 = *(_WORD *)v34;
    v21 = a1;
    v22 = a3;
    v23 = 1;
    goto LABEL_15;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = type metadata accessor for MACAddress(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v18 = *(int *)(sub_10001A9A8((uint64_t *)&unk_1010F98D0) + 48);
    v19 = &a1[v18];
    v20 = &a2[v18];
    *(_WORD *)v19 = *(_WORD *)v20;
    v19[2] = v20[2];
    v21 = a1;
    v22 = a3;
    v23 = 0;
LABEL_15:
    swift_storeEnumTagMultiPayload(v21, v22, v23);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *sub_100375250(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;

  if (a1 != a2)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for OwnedBeaconGroup.PairingState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v10 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = (int *)sub_10001A9A8(&qword_1010F5DC0);
      v12 = v11[12];
      v13 = &a1[v12];
      v14 = &a2[v12];
      v15 = type metadata accessor for MACAddress(0);
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        v17 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      v25 = v11[16];
      v26 = &a1[v25];
      v27 = &a2[v25];
      v28 = *((_QWORD *)v27 + 1);
      if (v28 >> 60 == 15)
      {
        *(_OWORD *)v26 = *(_OWORD *)v27;
      }
      else
      {
        v29 = *(_QWORD *)v27;
        sub_10001BBBC(*(_QWORD *)v27, *((_QWORD *)v27 + 1));
        *(_QWORD *)v26 = v29;
        *((_QWORD *)v26 + 1) = v28;
      }
      v30 = v11[20];
      v31 = &a1[v30];
      v32 = &a2[v30];
      v33 = *(_QWORD *)v32;
      v31[8] = v32[8];
      *(_QWORD *)v31 = v33;
      v34 = v11[24];
      v35 = &a1[v34];
      v36 = &a2[v34];
      LOWORD(v33) = *(_WORD *)v36;
      v35[2] = v36[2];
      *(_WORD *)v35 = v33;
      v22 = a1;
      v23 = a3;
      v24 = 1;
      goto LABEL_16;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = type metadata accessor for MACAddress(0);
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(a1, a2, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      v18 = *(int *)(sub_10001A9A8((uint64_t *)&unk_1010F98D0) + 48);
      v19 = &a1[v18];
      v20 = &a2[v18];
      v21 = v20[2];
      *(_WORD *)v19 = *(_WORD *)v20;
      v19[2] = v21;
      v22 = a1;
      v23 = a3;
      v24 = 0;
LABEL_16:
      swift_storeEnumTagMultiPayload(v22, v23, v24);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_1003754C0(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v10 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
    v11 = (int *)sub_10001A9A8(&qword_1010F5DC0);
    v12 = v11[12];
    v13 = &a1[v12];
    v14 = &a2[v12];
    v15 = type metadata accessor for MACAddress(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    *(_OWORD *)&a1[v11[16]] = *(_OWORD *)&a2[v11[16]];
    v24 = v11[20];
    v25 = &a1[v24];
    v26 = &a2[v24];
    v25[8] = v26[8];
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v27 = v11[24];
    v28 = &a1[v27];
    v29 = &a2[v27];
    *(_WORD *)v28 = *(_WORD *)v29;
    v28[2] = v29[2];
    v21 = a1;
    v22 = a3;
    v23 = 1;
    goto LABEL_12;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = type metadata accessor for MACAddress(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v18 = *(int *)(sub_10001A9A8((uint64_t *)&unk_1010F98D0) + 48);
    v19 = &a1[v18];
    v20 = &a2[v18];
    *(_WORD *)v19 = *(_WORD *)v20;
    v19[2] = v20[2];
    v21 = a1;
    v22 = a3;
    v23 = 0;
LABEL_12:
    swift_storeEnumTagMultiPayload(v21, v22, v23);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *sub_1003756E8(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;

  if (a1 != a2)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for OwnedBeaconGroup.PairingState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v10 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      v11 = (int *)sub_10001A9A8(&qword_1010F5DC0);
      v12 = v11[12];
      v13 = &a1[v12];
      v14 = &a2[v12];
      v15 = type metadata accessor for MACAddress(0);
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        v17 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      *(_OWORD *)&a1[v11[16]] = *(_OWORD *)&a2[v11[16]];
      v24 = v11[20];
      v25 = &a1[v24];
      v26 = &a2[v24];
      v25[8] = v26[8];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v27 = v11[24];
      v28 = &a1[v27];
      v29 = &a2[v27];
      *(_WORD *)v28 = *(_WORD *)v29;
      v28[2] = v29[2];
      v21 = a1;
      v22 = a3;
      v23 = 1;
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = type metadata accessor for MACAddress(0);
      v8 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      v18 = *(int *)(sub_10001A9A8((uint64_t *)&unk_1010F98D0) + 48);
      v19 = &a1[v18];
      v20 = &a2[v18];
      *(_WORD *)v19 = *(_WORD *)v20;
      v19[2] = v20[2];
      v21 = a1;
      v22 = a3;
      v23 = 0;
LABEL_13:
      swift_storeEnumTagMultiPayload(v21, v22, v23);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void sub_100375928(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[5];
  _BYTE v8[32];
  _BYTE v9[32];
  _QWORD v10[2];

  sub_100375A00(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_getTupleTypeLayout2(v9, v4, &unk_100E3AC98);
    v10[0] = v9;
    v5 = type metadata accessor for UUID(319);
    if (v6 <= 0x3F)
    {
      v7[0] = *(_QWORD *)(v5 - 8) + 64;
      v7[1] = v4;
      v7[2] = &unk_100E3ACB0;
      v7[3] = &unk_100E3A960;
      v7[4] = &unk_100E3AC98;
      swift_getTupleTypeLayout(v8, 0, 5, v7);
      v10[1] = v8;
      swift_initEnumMetadataMultiPayload(a1, 256, 2, v10);
    }
  }
}

void sub_100375A00(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1010FB4F0)
  {
    v2 = type metadata accessor for MACAddress(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1010FB4F0);
  }
}

uint64_t storeEnumTagSinglePayload for OwnedBeaconGroup.Version(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_100375A84(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100375AA0(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.Version()
{
  return &type metadata for OwnedBeaconGroup.Version;
}

unint64_t sub_100375AD4()
{
  unint64_t result;

  result = qword_1010F9A58;
  if (!qword_1010F9A58)
  {
    result = swift_getWitnessTable("Ia#", &type metadata for OwnedBeaconGroup.Version);
    atomic_store(result, (unint64_t *)&qword_1010F9A58);
  }
  return result;
}

unint64_t sub_100375B1C()
{
  unint64_t result;

  result = qword_1010F9A60;
  if (!qword_1010F9A60)
  {
    result = swift_getWitnessTable(byte_100E3AE78, &type metadata for OwnedBeaconGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9A60);
  }
  return result;
}

unint64_t sub_100375B64()
{
  unint64_t result;

  result = qword_1010F9A68;
  if (!qword_1010F9A68)
  {
    result = swift_getWitnessTable(byte_100E3AF58, &type metadata for OwnedBeaconGroup.BeaconGroupConversionError);
    atomic_store(result, (unint64_t *)&qword_1010F9A68);
  }
  return result;
}

unint64_t sub_100375BAC()
{
  unint64_t result;

  result = qword_1010F9A70;
  if (!qword_1010F9A70)
  {
    result = swift_getWitnessTable("\t^#", &type metadata for OwnedBeaconGroup.SerialNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9A70);
  }
  return result;
}

unint64_t sub_100375BF4()
{
  unint64_t result;

  result = qword_1010F9A78;
  if (!qword_1010F9A78)
  {
    result = swift_getWitnessTable("Y_#", &type metadata for OwnedBeaconGroup.SerialNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9A78);
  }
  return result;
}

unint64_t sub_100375C3C()
{
  unint64_t result;

  result = qword_1010F9A80;
  if (!qword_1010F9A80)
  {
    result = swift_getWitnessTable(byte_100E3AFA8, &type metadata for OwnedBeaconGroup.SerialNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9A80);
  }
  return result;
}

unint64_t sub_100375C84()
{
  unint64_t result;

  result = qword_1010F9A88;
  if (!qword_1010F9A88)
  {
    result = swift_getWitnessTable(")a#", &type metadata for OwnedBeaconGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9A88);
  }
  return result;
}

unint64_t sub_100375CCC()
{
  unint64_t result;

  result = qword_1010F9A90;
  if (!qword_1010F9A90)
  {
    atomic_store(result, (unint64_t *)&qword_1010F9A90);
  }
  return result;
}

unint64_t sub_100375D10()
{
  unint64_t result;

  result = qword_1010F9A98;
  if (!qword_1010F9A98)
  {
    result = swift_getWitnessTable(byte_100E4B574, &type metadata for PairingTransportType);
    atomic_store(result, (unint64_t *)&qword_1010F9A98);
  }
  return result;
}

unint64_t sub_100375D54()
{
  unint64_t result;

  result = qword_1010F9AA0;
  if (!qword_1010F9AA0)
  {
    result = swift_getWitnessTable(byte_100E4B524, &type metadata for PairingTransportType);
    atomic_store(result, (unint64_t *)&qword_1010F9AA0);
  }
  return result;
}

unint64_t sub_100375D98()
{
  unint64_t result;

  result = qword_1010F9AB0;
  if (!qword_1010F9AB0)
  {
    result = swift_getWitnessTable(byte_100E3B6D4, &type metadata for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9AB0);
  }
  return result;
}

uint64_t sub_100375DDC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x644974726170 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644974726170, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x54676E6972696170 && a2 == 0xEB00000000657079)
  {
    swift_bridgeObjectRelease(0xEB00000000657079);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x54676E6972696170, 0xEB00000000657079, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100375EDC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int16 v10;
  unint64_t v11;
  int v12;
  _BYTE v15[2];
  char v16;

  v3 = sub_10001A9A8(&qword_1010F9B10);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 3];
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_100376674();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OwnedBeaconGroup.PairingMetadata.CodingKeys, &type metadata for OwnedBeaconGroup.PairingMetadata.CodingKeys, v9, v7, v8);
  if (v1)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v16 = 0;
  v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v16, v3);
  v15[0] = 1;
  v11 = sub_100375D10();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for PairingTransportType, v15, v3, &type metadata for PairingTransportType, v11);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  v12 = v15[1];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v10 | (v12 << 16) | v10 & 0x100u;
}

uint64_t sub_10037604C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373)
  {
    swift_bridgeObjectRelease(0xEA00000000007373);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100376148(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x79636167656CLL && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79636167656CLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656E6F6973726576 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease(0xE900000000000064);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656E6F6973726576, 0xE900000000000064, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_QWORD *sub_10037623C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  char v35;
  char v36;

  v30 = sub_10001A9A8(&qword_1010F9AB8);
  v32 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v33 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_10001A9A8(&qword_1010F9AC0);
  v3 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010F9AC8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  v12 = sub_10001AA44(a1, v10);
  v13 = sub_1003765A8();
  v14 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OwnedBeaconGroup.Version.CodingKeys, &type metadata for OwnedBeaconGroup.Version.CodingKeys, v13, v10, v11);
  if (v14)
    goto LABEL_6;
  v15 = v5;
  v16 = v33;
  v29 = v7;
  v34 = a1;
  v17 = KeyedDecodingContainer.allKeys.getter(v6);
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v22 = type metadata accessor for DecodingError(0);
    swift_allocError(v22, &protocol witness table for DecodingError, 0, 0);
    v24 = v23;
    sub_10001A9A8(&qword_1010F1CA0);
    *v24 = &type metadata for OwnedBeaconGroup.Version;
    v12 = v9;
    v25 = KeyedDecodingContainer.codingPath.getter(v6);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v25, 0xD00000000000002BLL, 0x8000000100ECA650, 0);
    v26 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, enum case for DecodingError.typeMismatch(_:), v22);
    swift_willThrow(v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v6);
    a1 = v34;
LABEL_6:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    return v12;
  }
  if ((*(_BYTE *)(v17 + 32) & 1) != 0)
  {
    v36 = 1;
    v18 = sub_1003765EC();
    v19 = v16;
    v20 = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for OwnedBeaconGroup.Version.VersionedCodingKeys, &v36, v6, &type metadata for OwnedBeaconGroup.Version.VersionedCodingKeys, v18);
    v21 = v30;
    v12 = (_QWORD *)KeyedDecodingContainer.decode(_:forKey:)(v20, v30);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v21);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v6);
  }
  else
  {
    v35 = 0;
    v28 = sub_100376630();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for OwnedBeaconGroup.Version.LegacyCodingKeys, &v35, v6, &type metadata for OwnedBeaconGroup.Version.LegacyCodingKeys, v28);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v15, v31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v6);
    v12 = 0;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
  return v12;
}

unint64_t sub_1003765A8()
{
  unint64_t result;

  result = qword_1010F9AD0;
  if (!qword_1010F9AD0)
  {
    result = swift_getWitnessTable("eX#", &type metadata for OwnedBeaconGroup.Version.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9AD0);
  }
  return result;
}

unint64_t sub_1003765EC()
{
  unint64_t result;

  result = qword_1010F9AE0;
  if (!qword_1010F9AE0)
  {
    result = swift_getWitnessTable(byte_100E3B634, &type metadata for OwnedBeaconGroup.Version.VersionedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9AE0);
  }
  return result;
}

unint64_t sub_100376630()
{
  unint64_t result;

  result = qword_1010F9AE8;
  if (!qword_1010F9AE8)
  {
    result = swift_getWitnessTable(byte_100E3B5E4, &type metadata for OwnedBeaconGroup.Version.LegacyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9AE8);
  }
  return result;
}

unint64_t sub_100376674()
{
  unint64_t result;

  result = qword_1010F9B18;
  if (!qword_1010F9B18)
  {
    result = swift_getWitnessTable("UY#", &type metadata for OwnedBeaconGroup.PairingMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9B18);
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.PairingMetadata.CodingKeys()
{
  return &type metadata for OwnedBeaconGroup.PairingMetadata.CodingKeys;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.Version.CodingKeys()
{
  return &type metadata for OwnedBeaconGroup.Version.CodingKeys;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.Version.LegacyCodingKeys()
{
  return &type metadata for OwnedBeaconGroup.Version.LegacyCodingKeys;
}

uint64_t _s12searchpartyd16OwnedBeaconGroupV12SerialNumberV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10037672C + 4 * byte_100E3A910[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10037674C + 4 * byte_100E3A915[v4]))();
}

_BYTE *sub_10037672C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10037674C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100376754(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10037675C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100376764(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10037676C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.Version.VersionedCodingKeys()
{
  return &type metadata for OwnedBeaconGroup.Version.VersionedCodingKeys;
}

uint64_t _s12searchpartyd16OwnedBeaconGroupV15PairingMetadataV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1003767D4 + 4 * byte_100E3A91F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100376808 + 4 * byte_100E3A91A[v4]))();
}

uint64_t sub_100376808(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100376810(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100376818);
  return result;
}

uint64_t sub_100376824(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10037682CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100376830(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100376838(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys()
{
  return &type metadata for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys;
}

unint64_t sub_100376858()
{
  unint64_t result;

  result = qword_1010F9B28;
  if (!qword_1010F9B28)
  {
    result = swift_getWitnessTable("%[#", &type metadata for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9B28);
  }
  return result;
}

unint64_t sub_1003768A0()
{
  unint64_t result;

  result = qword_1010F9B30;
  if (!qword_1010F9B30)
  {
    result = swift_getWitnessTable("mZ#", &type metadata for OwnedBeaconGroup.Version.VersionedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9B30);
  }
  return result;
}

unint64_t sub_1003768E8()
{
  unint64_t result;

  result = qword_1010F9B38;
  if (!qword_1010F9B38)
  {
    result = swift_getWitnessTable("eY#", &type metadata for OwnedBeaconGroup.Version.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9B38);
  }
  return result;
}

unint64_t sub_100376930()
{
  unint64_t result;

  result = qword_1010F9B40;
  if (!qword_1010F9B40)
  {
    result = swift_getWitnessTable(byte_100E3B56C, &type metadata for OwnedBeaconGroup.PairingMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9B40);
  }
  return result;
}

unint64_t sub_100376978()
{
  unint64_t result;

  result = qword_1010F9B48;
  if (!qword_1010F9B48)
  {
    result = swift_getWitnessTable(byte_100E3B4DC, &type metadata for OwnedBeaconGroup.PairingMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9B48);
  }
  return result;
}

unint64_t sub_1003769C0()
{
  unint64_t result;

  result = qword_1010F9B50;
  if (!qword_1010F9B50)
  {
    result = swift_getWitnessTable("%Y#", &type metadata for OwnedBeaconGroup.PairingMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9B50);
  }
  return result;
}

unint64_t sub_100376A08()
{
  unint64_t result;

  result = qword_1010F9B58;
  if (!qword_1010F9B58)
  {
    result = swift_getWitnessTable(byte_100E3B3D4, &type metadata for OwnedBeaconGroup.Version.LegacyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9B58);
  }
  return result;
}

unint64_t sub_100376A50()
{
  unint64_t result;

  result = qword_1010F9B60;
  if (!qword_1010F9B60)
  {
    result = swift_getWitnessTable("-Z#", &type metadata for OwnedBeaconGroup.Version.LegacyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9B60);
  }
  return result;
}

unint64_t sub_100376A98()
{
  unint64_t result;

  result = qword_1010F9B68;
  if (!qword_1010F9B68)
  {
    result = swift_getWitnessTable(byte_100E3B31C, &type metadata for OwnedBeaconGroup.Version.VersionedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9B68);
  }
  return result;
}

unint64_t sub_100376AE0()
{
  unint64_t result;

  result = qword_1010F9B70;
  if (!qword_1010F9B70)
  {
    result = swift_getWitnessTable(byte_100E3B344, &type metadata for OwnedBeaconGroup.Version.VersionedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9B70);
  }
  return result;
}

unint64_t sub_100376B28()
{
  unint64_t result;

  result = qword_1010F9B78;
  if (!qword_1010F9B78)
  {
    result = swift_getWitnessTable(byte_100E3B424, &type metadata for OwnedBeaconGroup.Version.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9B78);
  }
  return result;
}

unint64_t sub_100376B70()
{
  unint64_t result;

  result = qword_1010F9B80;
  if (!qword_1010F9B80)
  {
    result = swift_getWitnessTable(byte_100E3B44C, &type metadata for OwnedBeaconGroup.Version.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9B80);
  }
  return result;
}

unint64_t sub_100376BB8()
{
  unint64_t result;

  result = qword_1010F9B88;
  if (!qword_1010F9B88)
  {
    result = swift_getWitnessTable("u\\#", &type metadata for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9B88);
  }
  return result;
}

unint64_t sub_100376C00()
{
  unint64_t result;

  result = qword_1010F9B90;
  if (!qword_1010F9B90)
  {
    result = swift_getWitnessTable(byte_100E3B28C, &type metadata for OwnedBeaconGroup.VersionedGroupMACAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9B90);
  }
  return result;
}

uint64_t sub_100376C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMNAccountType(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_100376C80(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FMNAccountType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_100376CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_100376CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_100376D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_100376D80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_100376DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100376DD0);
}

uint64_t sub_100376DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMNAccountType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100376E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100376E18);
}

uint64_t sub_100376E18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMNAccountType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for AccessoryLostModeEndPoint(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F9BF8;
  if (!qword_1010F9BF8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryLostModeEndPoint);
  return result;
}

uint64_t sub_100376E94(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for FMNAccountType(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100376EFC(uint64_t a1)
{
  void (*v1)(uint64_t *, _QWORD);
  Swift::String v2;
  void *v3;
  id v4;
  unsigned int v5;
  NSString v6;
  id v7;
  uint64_t v9[4];

  URLComponents.init()(a1);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  v1 = (void (*)(uint64_t *, _QWORD))URLComponents.path.modify(v9);
  v2._countAndFlagsBits = 0xD00000000000001ALL;
  v2._object = (void *)0x8000000100ED2970;
  String.append(_:)(v2);
  v1(v9, 0);
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v3 = (void *)qword_1011B7C08;
  v4 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v5 = objc_msgSend(v4, "isInternalBuild");

  if (v5
    && (v6 = String._bridgeToObjectiveC()(),
        v7 = objc_msgSend(v3, "stringForKey:", v6),
        v6,
        v7))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  }
  else
  {
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    sub_100C1B4E0(v9[0]);
    swift_bridgeObjectRelease();
  }
  return URLComponents.host.setter();
}

uint64_t sub_1003770C8(uint64_t a1)
{
  return sub_100376EFC(a1);
}

uint64_t storeEnumTagSinglePayload for IdentitySigningType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100377128 + 4 * byte_100E3B7A5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10037715C + 4 * byte_100E3B7A0[v4]))();
}

uint64_t sub_10037715C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100377164(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10037716CLL);
  return result;
}

uint64_t sub_100377178(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100377180);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100377184(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10037718C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IdentitySigningType()
{
  return &type metadata for IdentitySigningType;
}

unint64_t sub_1003771AC()
{
  unint64_t result;

  result = qword_1010F9C30;
  if (!qword_1010F9C30)
  {
    result = swift_getWitnessTable(byte_100E3B824, &type metadata for IdentitySigningType);
    atomic_store(result, &qword_1010F9C30);
  }
  return result;
}

uint64_t sub_1003771F0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100377230 + 4 * byte_100E3B7AA[a1]))(0x6F697461636F6C2ELL, 0xEE0068637465466ELL);
}

unint64_t sub_100377230()
{
  return 0xD000000000000010;
}

unint64_t sub_10037724C()
{
  return 0xD000000000000016;
}

uint64_t sub_10037726C()
{
  return 0x746375646F72702ELL;
}

uint64_t sub_10037728C()
{
  return 0x6F4C72656E776F2ELL;
}

uint64_t sub_1003772AC()
{
  return 0x676E69726961702ELL;
}

uint64_t sub_1003772CC()
{
  unsigned __int8 *v0;

  return sub_1003771F0(*v0);
}

uint64_t sub_1003772D4(uint64_t a1, char a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 424) = a2;
  *(_QWORD *)(v2 + 208) = a1;
  return swift_task_switch(sub_1003772F0, 0, 0);
}

void sub_1003772F0()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v2 = objc_msgSend(v1, "bundleIdentifier");

  if (v2)
  {
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v5 = v4;

  }
  else
  {
    v5 = 0x8000000100EC5D30;
    v3 = 0xD00000000000001DLL;
  }
  *(_QWORD *)(v0 + 216) = v3;
  *(_QWORD *)(v0 + 224) = v5;
  __asm { BR              X10 }
}

uint64_t sub_10037739C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v1 = qword_1011B71A8;
  *(_QWORD *)(v0 + 232) = qword_1011B71A8;
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 240) = v3;
  *v3 = v0;
  v3[1] = sub_100377690;
  return unsafeBlocking<A>(_:)(v0 + 192, sub_100033264, v1, &type metadata for Configuration);
}

uint64_t sub_100377690()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 240));
  swift_release();
  return swift_task_switch(sub_1003776EC, 0, 0);
}

uint64_t sub_1003776EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v0[2] = sub_100C1B4C0(v0[24]);
  v0[3] = v1;
  swift_bridgeObjectRelease();
  v2 = qword_1011B71A8;
  v0[31] = qword_1011B71A8;
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[32] = v4;
  *v4 = v0;
  v4[1] = sub_10037778C;
  return unsafeBlocking<A>(_:)(v0 + 25, sub_100033264, v2, &type metadata for Configuration);
}

uint64_t sub_10037778C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  swift_release();
  return swift_task_switch(sub_1003777E8, 0, 0);
}

uint64_t sub_1003777E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v1 = sub_100C1B4CC(*(_QWORD *)(v0 + 200));
  v6 = *(_OWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 208);
  swift_bridgeObjectRelease();
  *(_OWORD *)v4 = v6;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  *(_QWORD *)(v4 + 32) = v1;
  *(_WORD *)(v4 + 40) = 257;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100377860()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 272));
  swift_release();
  return swift_task_switch(sub_1003778BC, 0, 0);
}

uint64_t sub_1003778BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v0[4] = sub_100C1B494(v0[22]);
  v0[5] = v1;
  swift_bridgeObjectRelease();
  v2 = qword_1011B71A8;
  v0[35] = qword_1011B71A8;
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[36] = v4;
  *v4 = v0;
  v4[1] = sub_10037795C;
  return unsafeBlocking<A>(_:)(v0 + 23, sub_100033264, v2, &type metadata for Configuration);
}

uint64_t sub_10037795C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 288));
  swift_release();
  return swift_task_switch(sub_1003779B8, 0, 0);
}

uint64_t sub_1003779B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v1 = sub_100C1B474(*(_QWORD *)(v0 + 184));
  v6 = *(_OWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 208);
  swift_bridgeObjectRelease();
  *(_OWORD *)v4 = v6;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  *(_QWORD *)(v4 + 32) = v1;
  *(_WORD *)(v4 + 40) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100377A2C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 304));
  swift_release();
  return swift_task_switch(sub_100377A88, 0, 0);
}

uint64_t sub_100377A88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v0[6] = sub_100C1B4C0(v0[20]);
  v0[7] = v1;
  swift_bridgeObjectRelease();
  v2 = qword_1011B71A8;
  v0[39] = qword_1011B71A8;
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[40] = v4;
  *v4 = v0;
  v4[1] = sub_100377B28;
  return unsafeBlocking<A>(_:)(v0 + 21, sub_100033264, v2, &type metadata for Configuration);
}

uint64_t sub_100377B28()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 320));
  swift_release();
  return swift_task_switch(sub_100377B84, 0, 0);
}

uint64_t sub_100377B84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v1 = sub_100C1B4CC(*(_QWORD *)(v0 + 168));
  v6 = *(_OWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 208);
  swift_bridgeObjectRelease();
  *(_OWORD *)v4 = v6;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  *(_QWORD *)(v4 + 32) = v1;
  *(_WORD *)(v4 + 40) = 257;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100377BFC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 336));
  swift_release();
  return swift_task_switch(sub_100377C58, 0, 0);
}

uint64_t sub_100377C58()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v0[8] = sub_100C1B4A0(v0[18]);
  v0[9] = v1;
  swift_bridgeObjectRelease();
  v2 = qword_1011B71A8;
  v0[43] = qword_1011B71A8;
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[44] = v4;
  *v4 = v0;
  v4[1] = sub_100377CF8;
  return unsafeBlocking<A>(_:)(v0 + 19, sub_100033264, v2, &type metadata for Configuration);
}

uint64_t sub_100377CF8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 352));
  swift_release();
  return swift_task_switch(sub_100377D54, 0, 0);
}

uint64_t sub_100377D54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v1 = sub_100C1B4AC(*(_QWORD *)(v0 + 152));
  v6 = *(_OWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 208);
  swift_bridgeObjectRelease();
  *(_OWORD *)v4 = v6;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  *(_QWORD *)(v4 + 32) = v1;
  *(_WORD *)(v4 + 40) = 257;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100377DCC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 368));
  swift_release();
  return swift_task_switch(sub_100377E28, 0, 0);
}

uint64_t sub_100377E28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v0[10] = sub_100C1B494(v0[16]);
  v0[11] = v1;
  swift_bridgeObjectRelease();
  v2 = qword_1011B71A8;
  v0[47] = qword_1011B71A8;
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[48] = v4;
  *v4 = v0;
  v4[1] = sub_100377EC8;
  return unsafeBlocking<A>(_:)(v0 + 17, sub_100033264, v2, &type metadata for Configuration);
}

uint64_t sub_100377EC8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 384));
  swift_release();
  return swift_task_switch(sub_100377F24, 0, 0);
}

uint64_t sub_100377F24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v1 = sub_100C1B474(*(_QWORD *)(v0 + 136));
  v6 = *(_OWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 208);
  swift_bridgeObjectRelease();
  *(_OWORD *)v4 = v6;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  *(_QWORD *)(v4 + 32) = v1;
  *(_WORD *)(v4 + 40) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100377F98()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 400));
  swift_release();
  return swift_task_switch(sub_100377FF4, 0, 0);
}

uint64_t sub_100377FF4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v0[12] = sub_100C1B4A0(v0[14]);
  v0[13] = v1;
  swift_bridgeObjectRelease();
  v2 = qword_1011B71A8;
  v0[51] = qword_1011B71A8;
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[52] = v4;
  *v4 = v0;
  v4[1] = sub_100378094;
  return unsafeBlocking<A>(_:)(v0 + 15, sub_100033264, v2, &type metadata for Configuration);
}

uint64_t sub_100378094()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 416));
  swift_release();
  return swift_task_switch(sub_1003780F0, 0, 0);
}

uint64_t sub_1003780F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v1 = sub_100C1B4AC(*(_QWORD *)(v0 + 120));
  v6 = *(_OWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 208);
  swift_bridgeObjectRelease();
  *(_OWORD *)v4 = v6;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  *(_QWORD *)(v4 + 32) = v1;
  *(_WORD *)(v4 + 40) = 257;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t storeEnumTagSinglePayload for IdentitySigningHeaderError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1003781A8 + 4 * byte_100E3B880[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1003781C8 + 4 * byte_100E3B885[v4]))();
}

_BYTE *sub_1003781A8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1003781C8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1003781D0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1003781D8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1003781E0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1003781E8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for IdentitySigningHeaderError()
{
  return &type metadata for IdentitySigningHeaderError;
}

unint64_t sub_100378208()
{
  unint64_t result;

  result = qword_1010F9C40;
  if (!qword_1010F9C40)
  {
    result = swift_getWitnessTable(byte_100E3B90C, &type metadata for IdentitySigningHeaderError);
    atomic_store(result, (unint64_t *)&qword_1010F9C40);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsAutoMeStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100378298 + 4 * byte_100E3B995[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1003782CC + 4 * byte_100E3B990[v4]))();
}

uint64_t sub_1003782CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003782D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003782DCLL);
  return result;
}

uint64_t sub_1003782E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003782F0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1003782F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003782FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsAutoMeStatus()
{
  return &type metadata for SecureLocationsAutoMeStatus;
}

uint64_t destroy for SecureLocationsPublishClientContext(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[8]);
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for SecureLocationsPublishClientContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for SecureLocationsPublishClientContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t assignWithTake for SecureLocationsPublishClientContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
  v10 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsPublishClientContext(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsPublishClientContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsPublishClientContext()
{
  return &type metadata for SecureLocationsPublishClientContext;
}

uint64_t destroy for SecureLocationsClientContext(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[11]);
  return swift_bridgeObjectRelease(a1[14]);
}

uint64_t initializeWithCopy for SecureLocationsClientContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v7 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v9 = *(_QWORD *)(a2 + 88);
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 96) = v8;
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v10;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for SecureLocationsClientContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v12;
  LOBYTE(v12) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = v12;
  v13 = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v15;
  v16 = *(_QWORD *)(a2 + 112);
  v17 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

__n128 initializeWithTake for SecureLocationsClientContext(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for SecureLocationsClientContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v8 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v10 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsClientContext(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsClientContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsClientContext()
{
  return &type metadata for SecureLocationsClientContext;
}

uint64_t sub_10037895C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100379388();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1003789B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100379388();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_100378A08()
{
  unint64_t result;

  result = qword_1010F9C48;
  if (!qword_1010F9C48)
  {
    result = swift_getWitnessTable(byte_100E3BAE4, &type metadata for SecureLocationsAutoMeStatus);
    atomic_store(result, (unint64_t *)&qword_1010F9C48);
  }
  return result;
}

uint64_t sub_100378A4C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v24[6];
  char v25;
  _BYTE v26[56];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F9C50);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100379124();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationsClientContext.CodingKeys, &type metadata for SecureLocationsClientContext.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v24[0]) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v24, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    LOBYTE(v24[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v24, v5);
    v16 = v3[4];
    v17 = v3[5];
    LOBYTE(v24[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, v24, v5);
    v24[0] = v3[6];
    v25 = 3;
    v18 = sub_10001A9A8(&qword_1010F9C60);
    v19 = sub_100379168();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v24, &v25, v5, v18, v19);
    sub_100379218((uint64_t)(v3 + 7), (uint64_t)v26);
    sub_100379218((uint64_t)v26, (uint64_t)v24);
    v25 = 4;
    v20 = sub_100379260();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v24, &v25, v5, &type metadata for SecureLocationsLiveStatsPayload, v20);
    v24[0] = v3[14];
    v25 = 5;
    v21 = sub_10001A9A8(&qword_1011063B0);
    v22 = sub_1003792A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v24, &v25, v5, v21, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100378C70()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100378CA0 + 4 * byte_100E3B99A[*v0]))(0x6E656B6F54737061, 0xE800000000000000);
}

uint64_t sub_100378CA0()
{
  return 0x6449746E65696C63;
}

uint64_t sub_100378CB4()
{
  return 0x41747865746E6F63;
}

uint64_t sub_100378CD0()
{
  return 0x53776F6C6C616873;
}

uint64_t sub_100378CF0()
{
  return 0x746174536576696CLL;
}

unint64_t sub_100378D0C()
{
  return 0xD000000000000015;
}

uint64_t sub_100378D28@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10037965C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100378D4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100379124();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100378D74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100379124();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100378D9C(_QWORD *a1)
{
  return sub_100378A4C(a1);
}

uint64_t sub_100378DEC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F9C88);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100379300();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationsPublishClientContext.CodingKeys, &type metadata for SecureLocationsPublishClientContext.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v32 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v32, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v31 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v31, v5);
    v16 = v3[4];
    v17 = v3[5];
    v30 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v30, v5);
    v29 = *((_BYTE *)v3 + 48);
    v28 = 3;
    v18 = sub_100379344();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v28, v5, &type metadata for SecureLocationsAutoMeStatus, v18);
    v19 = v3[7];
    v20 = v3[8];
    v27 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v27, v5);
    v26 = v3[9];
    v25 = 5;
    v21 = sub_10001A9A8(&qword_1011063B0);
    v22 = sub_1003792A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, v21, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100378FDC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10037900C + 4 * byte_100E3B9A0[*v0]))(0x6E656B6F54737061, 0xE800000000000000);
}

uint64_t sub_10037900C()
{
  return 0x6449746E65696C63;
}

uint64_t sub_100379020()
{
  return 0x41747865746E6F63;
}

uint64_t sub_10037903C()
{
  return 0x7453654D6F747561;
}

uint64_t sub_10037905C()
{
  return 0x526873696C627570;
}

unint64_t sub_100379080()
{
  return 0xD000000000000015;
}

uint64_t sub_10037909C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100379908(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003790C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100379300();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003790E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100379300();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100379110(_QWORD *a1)
{
  return sub_100378DEC(a1);
}

unint64_t sub_100379124()
{
  unint64_t result;

  result = qword_1010F9C58;
  if (!qword_1010F9C58)
  {
    result = swift_getWitnessTable(byte_100E3BD28, &type metadata for SecureLocationsClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9C58);
  }
  return result;
}

unint64_t sub_100379168()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1010F9C68;
  if (!qword_1010F9C68)
  {
    v1 = sub_10001F784(&qword_1010F9C60);
    v2[0] = &protocol witness table for String;
    v2[1] = sub_1003791D4();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1010F9C68);
  }
  return result;
}

unint64_t sub_1003791D4()
{
  unint64_t result;

  result = qword_1010F9C70;
  if (!qword_1010F9C70)
  {
    result = swift_getWitnessTable(byte_100E69430, &type metadata for SecureLocationsShallowIdStats);
    atomic_store(result, (unint64_t *)&qword_1010F9C70);
  }
  return result;
}

uint64_t sub_100379218(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010F9C78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100379260()
{
  unint64_t result;

  result = qword_1010F9C80;
  if (!qword_1010F9C80)
  {
    result = swift_getWitnessTable(aI_12, &type metadata for SecureLocationsLiveStatsPayload);
    atomic_store(result, (unint64_t *)&qword_1010F9C80);
  }
  return result;
}

unint64_t sub_1003792A4()
{
  unint64_t result;
  uint64_t v1;
  void *v2;

  result = qword_1010F9680;
  if (!qword_1010F9680)
  {
    v1 = sub_10001F784(&qword_1011063B0);
    v2 = &protocol witness table for String;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010F9680);
  }
  return result;
}

unint64_t sub_100379300()
{
  unint64_t result;

  result = qword_1010F9C90;
  if (!qword_1010F9C90)
  {
    result = swift_getWitnessTable(byte_100E3BCD8, &type metadata for SecureLocationsPublishClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9C90);
  }
  return result;
}

unint64_t sub_100379344()
{
  unint64_t result;

  result = qword_1010F9C98;
  if (!qword_1010F9C98)
  {
    result = swift_getWitnessTable(byte_100E3BA1C, &type metadata for SecureLocationsAutoMeStatus);
    atomic_store(result, (unint64_t *)&qword_1010F9C98);
  }
  return result;
}

unint64_t sub_100379388()
{
  unint64_t result;

  result = qword_1010F9CA0;
  if (!qword_1010F9CA0)
  {
    result = swift_getWitnessTable(byte_100E3BA6C, &type metadata for SecureLocationsAutoMeStatus);
    atomic_store(result, (unint64_t *)&qword_1010F9CA0);
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsPublishClientContext.CodingKeys()
{
  return &type metadata for SecureLocationsPublishClientContext.CodingKeys;
}

uint64_t _s12searchpartyd35SecureLocationsPublishClientContextV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10037942C + 4 * byte_100E3B9AB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100379460 + 4 * byte_100E3B9A6[v4]))();
}

uint64_t sub_100379460(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100379468(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100379470);
  return result;
}

uint64_t sub_10037947C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100379484);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100379488(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100379490(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsClientContext.CodingKeys()
{
  return &type metadata for SecureLocationsClientContext.CodingKeys;
}

unint64_t sub_1003794B0()
{
  unint64_t result;

  result = qword_1010F9CA8;
  if (!qword_1010F9CA8)
  {
    result = swift_getWitnessTable(byte_100E3BBF8, &type metadata for SecureLocationsClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9CA8);
  }
  return result;
}

unint64_t sub_1003794F8()
{
  unint64_t result;

  result = qword_1010F9CB0;
  if (!qword_1010F9CB0)
  {
    result = swift_getWitnessTable(byte_100E3BCB0, &type metadata for SecureLocationsPublishClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9CB0);
  }
  return result;
}

unint64_t sub_100379540()
{
  unint64_t result;

  result = qword_1010F9CB8;
  if (!qword_1010F9CB8)
  {
    result = swift_getWitnessTable(byte_100E3BC20, &type metadata for SecureLocationsPublishClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9CB8);
  }
  return result;
}

unint64_t sub_100379588()
{
  unint64_t result;

  result = qword_1010F9CC0;
  if (!qword_1010F9CC0)
  {
    result = swift_getWitnessTable("yX#", &type metadata for SecureLocationsPublishClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9CC0);
  }
  return result;
}

unint64_t sub_1003795D0()
{
  unint64_t result;

  result = qword_1010F9CC8;
  if (!qword_1010F9CC8)
  {
    result = swift_getWitnessTable("IY#", &type metadata for SecureLocationsClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9CC8);
  }
  return result;
}

unint64_t sub_100379618()
{
  unint64_t result;

  result = qword_1010F9CD0;
  if (!qword_1010F9CD0)
  {
    result = swift_getWitnessTable("1Y#", &type metadata for SecureLocationsClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F9CD0);
  }
  return result;
}

uint64_t sub_10037965C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x6E656B6F54737061 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E656B6F54737061, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6449746E65696C63 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449746E65696C63, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x41747865746E6F63 && a2 == 0xEA00000000007070)
  {
    v8 = 0xEA00000000007070;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x41747865746E6F63, 0xEA00000000007070, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x53776F6C6C616873 && a2 == 0xEC00000073746174)
  {
    v9 = 0xEC00000073746174;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x53776F6C6C616873, 0xEC00000073746174, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x746174536576696CLL && a2 == 0xE900000000000073)
  {
    v10 = 0xE900000000000073;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746174536576696CLL, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100ED29D0)
  {
    swift_bridgeObjectRelease(0x8000000100ED29D0);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100ED29D0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_100379908(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x6E656B6F54737061 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E656B6F54737061, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6449746E65696C63 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449746E65696C63, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x41747865746E6F63 && a2 == 0xEA00000000007070)
  {
    v8 = 0xEA00000000007070;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x41747865746E6F63, 0xEA00000000007070, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x7453654D6F747561 && a2 == 0xEC00000073757461)
  {
    v9 = 0xEC00000073757461;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7453654D6F747561, 0xEC00000073757461, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x526873696C627570 && a2 == 0xED00006E6F736165)
  {
    v10 = 0xED00006E6F736165;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x526873696C627570, 0xED00006E6F736165, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100ED29D0)
  {
    swift_bridgeObjectRelease(0x8000000100ED29D0);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100ED29D0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

void sub_100379BCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  NSString v33;
  void *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  int64_t v44;
  _QWORD v45[2];
  _QWORD v46[2];
  _QWORD v47[5];
  uint64_t v48;

  v2 = v1;
  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = sub_10000F4A0(0, (unint64_t *)&qword_10110FFD0, FAFamilyMember_ptr);
    v7 = sub_10001AC90(&qword_1010FA140, (unint64_t *)&qword_10110FFD0, FAFamilyMember_ptr, (const char *)&protocol conformance descriptor for NSObject);
    isUniquelyReferenced_nonNull_native = (uint64_t)Set.Iterator.init(_cocoa:)(v47, v5, v6, v7);
    v3 = v47[0];
    v48 = v47[1];
    v9 = v47[2];
    v10 = v47[3];
    v11 = v47[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 56);
    v48 = a1 + 56;
    v9 = ~v12;
    v14 = -v12;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v11 = v15 & v13;
    swift_bridgeObjectRetain(a1);
    v10 = 0;
  }
  v44 = (unint64_t)(v9 + 64) >> 6;
  v43 = _swiftEmptyArrayStorage;
  while (1)
  {
    v16 = v10;
    if ((v3 & 0x8000000000000000) == 0)
      break;
    v19 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
    if (!v19)
      goto LABEL_46;
    v20 = v19;
    v45[0] = v19;
    v21 = sub_10000F4A0(0, (unint64_t *)&qword_10110FFD0, FAFamilyMember_ptr);
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(v46, v45, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
    v22 = (id)v46[0];
    swift_unknownObjectRelease(v20);
    if (!v22)
      goto LABEL_46;
LABEL_34:
    v26 = objc_msgSend(v22, "appleID");
    if (v26)
    {
      v27 = v26;
      v42 = v2;
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v30 = v29;

      v46[0] = v28;
      v46[1] = v30;
      v45[0] = 64;
      v45[1] = 0xE100000000000000;
      v31 = sub_1000330C8();
      v32 = StringProtocol.contains<A>(_:)(v45, &type metadata for String, &type metadata for String, v31, v31);
      v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if ((v32 & 1) != 0)
      {
        v34 = (void *)IDSCopyIDForEmailAddress(v33);

        if (!v34)
          goto LABEL_48;
        v35 = 0;
      }
      else
      {
        v34 = (void *)IDSCopyIDForPhoneNumber(v33);

        if (!v34)
          goto LABEL_49;
        v35 = 1;
      }
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v38 = v37;

      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v43);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_1007C8700(0, v43[2] + 1, 1, v43);
        v43 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v40 = v43[2];
      v39 = v43[3];
      if (v40 >= v39 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_1007C8700((_QWORD *)(v39 > 1), v40 + 1, 1, v43);
        v43 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v43[2] = v40 + 1;
      v41 = &v43[3 * v40];
      *((_BYTE *)v41 + 32) = v35;
      v41[5] = v36;
      v41[6] = v38;
      v2 = v42;
    }
    else
    {

    }
  }
  if (v11)
  {
    v17 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v18 = v17 | (v10 << 6);
LABEL_33:
    v22 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v18);
    if (!v22)
      goto LABEL_46;
    goto LABEL_34;
  }
  v23 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v23 >= v44)
      goto LABEL_46;
    v24 = *(_QWORD *)(v48 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v16 + 2;
      if (v16 + 2 >= v44)
        goto LABEL_46;
      v24 = *(_QWORD *)(v48 + 8 * v10);
      if (!v24)
      {
        v10 = v16 + 3;
        if (v16 + 3 >= v44)
          goto LABEL_46;
        v24 = *(_QWORD *)(v48 + 8 * v10);
        if (!v24)
        {
          v10 = v16 + 4;
          if (v16 + 4 >= v44)
            goto LABEL_46;
          v24 = *(_QWORD *)(v48 + 8 * v10);
          if (!v24)
          {
            v10 = v16 + 5;
            if (v16 + 5 >= v44)
              goto LABEL_46;
            v24 = *(_QWORD *)(v48 + 8 * v10);
            if (!v24)
            {
              v25 = v16 + 6;
              while (v44 != v25)
              {
                v24 = *(_QWORD *)(v48 + 8 * v25++);
                if (v24)
                {
                  v10 = v25 - 1;
                  goto LABEL_32;
                }
              }
LABEL_46:
              sub_10007CC38(v3);
              return;
            }
          }
        }
      }
    }
LABEL_32:
    v11 = (v24 - 1) & v24;
    v18 = __clz(__rbit64(v24)) + (v10 << 6);
    goto LABEL_33;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
}

void sub_10037A014(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t i;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  NSString v15;
  void *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int64_t v25;
  _QWORD v26[4];
  uint64_t v27;

  v1 = 1 << *(_BYTE *)(a1 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(a1 + 56);
  v25 = (unint64_t)(v1 + 63) >> 6;
  v27 = a1;
  swift_bridgeObjectRetain(a1);
  v4 = 0;
  v5 = _swiftEmptyArrayStorage;
  if (!v3)
    goto LABEL_5;
LABEL_4:
  v6 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  for (i = v6 | (v4 << 6); ; i = __clz(__rbit64(v9)) + (v4 << 6))
  {
    v11 = (_QWORD *)(*(_QWORD *)(v27 + 48) + 40 * i);
    v12 = v11[1];
    v26[2] = *v11;
    v26[3] = v12;
    v26[0] = 64;
    v26[1] = 0xE100000000000000;
    v13 = sub_1000330C8();
    swift_bridgeObjectRetain(v12);
    v14 = StringProtocol.contains<A>(_:)(v26, &type metadata for String, &type metadata for String, v13, v13);
    v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
    {
      v16 = (void *)IDSCopyIDForEmailAddress(v15);

      if (!v16)
        goto LABEL_35;
      v17 = 0;
    }
    else
    {
      v16 = (void *)IDSCopyIDForPhoneNumber(v15);

      if (!v16)
        goto LABEL_36;
      v17 = 1;
    }
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

    if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      v5 = sub_1007C8700(0, v5[2] + 1, 1, v5);
    v22 = v5[2];
    v21 = v5[3];
    if (v22 >= v21 >> 1)
      v5 = sub_1007C8700((_QWORD *)(v21 > 1), v22 + 1, 1, v5);
    v5[2] = v22 + 1;
    v23 = &v5[3 * v22];
    *((_BYTE *)v23 + 32) = v17;
    v23[5] = v18;
    v23[6] = v20;
    if (v3)
      goto LABEL_4;
LABEL_5:
    v8 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v8 >= v25)
      goto LABEL_32;
    v9 = *(_QWORD *)(v24 + 8 * v8);
    ++v4;
    if (!v9)
    {
      v4 = v8 + 1;
      if (v8 + 1 >= v25)
        goto LABEL_32;
      v9 = *(_QWORD *)(v24 + 8 * v4);
      if (!v9)
      {
        v4 = v8 + 2;
        if (v8 + 2 >= v25)
          goto LABEL_32;
        v9 = *(_QWORD *)(v24 + 8 * v4);
        if (!v9)
        {
          v4 = v8 + 3;
          if (v8 + 3 >= v25)
            goto LABEL_32;
          v9 = *(_QWORD *)(v24 + 8 * v4);
          if (!v9)
            break;
        }
      }
    }
LABEL_20:
    v3 = (v9 - 1) & v9;
  }
  v10 = v8 + 4;
  if (v10 >= v25)
  {
LABEL_32:
    swift_release();
    return;
  }
  v9 = *(_QWORD *)(v24 + 8 * v10);
  if (v9)
  {
    v4 = v10;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v4 >= v25)
      goto LABEL_32;
    v9 = *(_QWORD *)(v24 + 8 * v4);
    ++v10;
    if (v9)
      goto LABEL_20;
  }
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

void sub_10037A2E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  char *v37;

  v2 = sub_10001A9A8(&qword_1010F7FF8);
  __chkstk_darwin(v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Destination(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v36 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v34 = (char *)&v32 - v9;
  v10 = a1 + 56;
  v11 = 1 << *(_BYTE *)(a1 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(a1 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v15 = 0;
  v37 = (char *)_swiftEmptyArrayStorage;
  v33 = a1 + 56;
  if (!v13)
    goto LABEL_7;
LABEL_4:
  v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v16 | (v15 << 6); ; i = __clz(__rbit64(v23)) + (v15 << 6))
  {
    v18 = *(_QWORD *)(a1 + 48) + 24 * i;
    v19 = *(_QWORD *)(v18 + 8);
    v20 = *(_QWORD *)(v18 + 16);
    v21 = swift_bridgeObjectRetain(v20);
    Destination.init(stringRepresentation:)(v19, v20, v21);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_100004048((uint64_t)v4, &qword_1010F7FF8);
      if (v13)
        goto LABEL_4;
    }
    else
    {
      v25 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v26 = v34;
      v25(v34, v4, v5);
      v35 = v25;
      v25(v36, v26, v5);
      if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
        v37 = (char *)sub_1007C86EC(0, *((_QWORD *)v37 + 2) + 1, 1, (unint64_t)v37);
      v28 = *((_QWORD *)v37 + 2);
      v27 = *((_QWORD *)v37 + 3);
      v29 = v28 + 1;
      v10 = v33;
      if (v28 >= v27 >> 1)
      {
        v32 = v28 + 1;
        v31 = (char *)sub_1007C86EC(v27 > 1, v28 + 1, 1, (unint64_t)v37);
        v29 = v32;
        v37 = v31;
      }
      v30 = v37;
      *((_QWORD *)v37 + 2) = v29;
      v35(&v30[((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v28], v36, v5);
      if (v13)
        goto LABEL_4;
    }
LABEL_7:
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v22 >= v14)
      goto LABEL_29;
    v23 = *(_QWORD *)(v10 + 8 * v22);
    ++v15;
    if (!v23)
    {
      v15 = v22 + 1;
      if (v22 + 1 >= v14)
        goto LABEL_29;
      v23 = *(_QWORD *)(v10 + 8 * v15);
      if (!v23)
      {
        v15 = v22 + 2;
        if (v22 + 2 >= v14)
          goto LABEL_29;
        v23 = *(_QWORD *)(v10 + 8 * v15);
        if (!v23)
        {
          v15 = v22 + 3;
          if (v22 + 3 >= v14)
            goto LABEL_29;
          v23 = *(_QWORD *)(v10 + 8 * v15);
          if (!v23)
            break;
        }
      }
    }
LABEL_22:
    v13 = (v23 - 1) & v23;
  }
  v24 = v22 + 4;
  if (v24 >= v14)
  {
LABEL_29:
    swift_release();
    return;
  }
  v23 = *(_QWORD *)(v10 + 8 * v24);
  if (v23)
  {
    v15 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v15 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v15 >= v14)
      goto LABEL_29;
    v23 = *(_QWORD *)(v10 + 8 * v15);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
}

void sub_10037A60C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __n128 v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  int64_t v41;

  v2 = type metadata accessor for Destination(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v35 - v7;
  v9 = *(_QWORD *)(a1 + 56);
  v40 = a1 + 56;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v41 = (unint64_t)(v10 + 63) >> 6;
  v13 = swift_bridgeObjectRetain(a1);
  v14 = 0;
  v39 = _swiftEmptyArrayStorage;
  v36 = v8;
  v37 = a1;
  if (v12)
    goto LABEL_6;
LABEL_7:
  v17 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    if (v17 < v41)
    {
      v18 = *(_QWORD *)(v40 + 8 * v17);
      ++v14;
      if (v18)
        goto LABEL_22;
      v14 = v17 + 1;
      if (v17 + 1 >= v41)
        goto LABEL_41;
      v18 = *(_QWORD *)(v40 + 8 * v14);
      if (v18)
        goto LABEL_22;
      v14 = v17 + 2;
      if (v17 + 2 >= v41)
        goto LABEL_41;
      v18 = *(_QWORD *)(v40 + 8 * v14);
      if (v18)
        goto LABEL_22;
      v14 = v17 + 3;
      if (v17 + 3 >= v41)
        goto LABEL_41;
      v18 = *(_QWORD *)(v40 + 8 * v14);
      if (v18)
      {
LABEL_22:
        v12 = (v18 - 1) & v18;
        for (i = __clz(__rbit64(v18)) + (v14 << 6); ; i = v15 | (v14 << 6))
        {
          (*(void (**)(char *, unint64_t, uint64_t, __n128))(v3 + 16))(v8, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v3 + 72) * i, v2, v13);
          v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 32))(v6, v8, v2);
          v21 = Destination.destination.getter(v20);
          v23 = v22;
          v24._countAndFlagsBits = 0x3A6F746C69616DLL;
          v24._object = (void *)0xE700000000000000;
          if (String.hasPrefix(_:)(v24))
          {
            v38 = 0;
          }
          else
          {
            v25._countAndFlagsBits = 980182388;
            v25._object = (void *)0xE400000000000000;
            if (String.hasPrefix(_:)(v25))
            {
              v30 = 1;
            }
            else
            {
              v26._countAndFlagsBits = 0x3A6E656B6F74;
              v26._object = (void *)0xE600000000000000;
              if (String.hasPrefix(_:)(v26)
                || (v27._countAndFlagsBits = 0x6B6F742D666C6573,
                    v27._object = (void *)0xEB000000003A6E65,
                    String.hasPrefix(_:)(v27)))
              {
                v30 = 2;
              }
              else
              {
                v28._countAndFlagsBits = 0x3A656369766564;
                v28._object = (void *)0xE700000000000000;
                if (String.hasPrefix(_:)(v28))
                {
                  v30 = 3;
                }
                else
                {
                  v29._countAndFlagsBits = 0x3A6E6F6973736573;
                  v29._object = (void *)0xE800000000000000;
                  if (!String.hasPrefix(_:)(v29))
                  {
                    swift_bridgeObjectRelease();
                    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
                    if (!v12)
                      goto LABEL_7;
                    goto LABEL_6;
                  }
                  v30 = 4;
                }
              }
            }
            v38 = v30;
          }
          (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
          if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
            v39 = sub_1007C8700(0, v39[2] + 1, 1, v39);
          v32 = v39[2];
          v31 = v39[3];
          if (v32 >= v31 >> 1)
            v39 = sub_1007C8700((_QWORD *)(v31 > 1), v32 + 1, 1, v39);
          v33 = v39;
          v39[2] = v32 + 1;
          v34 = &v33[3 * v32];
          *((_BYTE *)v34 + 32) = v38;
          v34[5] = v21;
          v34[6] = v23;
          v8 = v36;
          a1 = v37;
          if (!v12)
            goto LABEL_7;
LABEL_6:
          v15 = __clz(__rbit64(v12));
          v12 &= v12 - 1;
        }
      }
      v19 = v17 + 4;
      if (v19 < v41)
      {
        v18 = *(_QWORD *)(v40 + 8 * v19);
        if (v18)
        {
          v14 = v19;
          goto LABEL_22;
        }
        while (1)
        {
          v14 = v19 + 1;
          if (__OFADD__(v19, 1))
            goto LABEL_43;
          if (v14 >= v41)
            break;
          v18 = *(_QWORD *)(v40 + 8 * v14);
          ++v19;
          if (v18)
            goto LABEL_22;
        }
      }
    }
LABEL_41:
    swift_release();
    return;
  }
  __break(1u);
LABEL_43:
  __break(1u);
}

void sub_10037A9F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;

  v4 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v37 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v36 = (char *)&v36 - v11;
  v12 = *(_QWORD *)(a1 + 56);
  v39 = a1 + 56;
  v13 = 1 << *(_BYTE *)(a1 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v40 = (unint64_t)(v13 + 63) >> 6;
  v41 = a1;
  swift_bridgeObjectRetain(a1);
  v16 = 0;
  v38 = (char *)_swiftEmptyArrayStorage;
  if (v15)
    goto LABEL_7;
LABEL_8:
  while (2)
  {
    v19 = v16 + 1;
    if (!__OFADD__(v16, 1))
    {
      if (v19 < v40)
      {
        v20 = *(_QWORD *)(v39 + 8 * v19);
        ++v16;
        if (v20)
          goto LABEL_23;
        v16 = v19 + 1;
        if (v19 + 1 >= v40)
          goto LABEL_35;
        v20 = *(_QWORD *)(v39 + 8 * v16);
        if (v20)
          goto LABEL_23;
        v16 = v19 + 2;
        if (v19 + 2 >= v40)
          goto LABEL_35;
        v20 = *(_QWORD *)(v39 + 8 * v16);
        if (v20)
          goto LABEL_23;
        v16 = v19 + 3;
        if (v19 + 3 >= v40)
          goto LABEL_35;
        v20 = *(_QWORD *)(v39 + 8 * v16);
        if (v20)
        {
LABEL_23:
          v15 = (v20 - 1) & v20;
          for (i = __clz(__rbit64(v20)) + (v16 << 6); ; i = v17 | (v16 << 6))
          {
            v22 = *a2;
            if (!*(_QWORD *)(*a2 + 16))
              break;
            v23 = *(_QWORD *)(v41 + 48) + 24 * i;
            v24 = *(_QWORD *)(v23 + 16);
            v25 = *(_QWORD *)(v23 + 8);
            v26 = *(_BYTE *)v23;
            swift_bridgeObjectRetain(v24);
            v27 = sub_100519120(v26, v25, v24);
            if ((v28 & 1) != 0)
            {
              (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v6, *(_QWORD *)(v22 + 56) + *(_QWORD *)(v8 + 72) * v27, v7);
              v29 = 0;
            }
            else
            {
              v29 = 1;
            }
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v29, 1, v7);
            swift_bridgeObjectRelease();
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
              goto LABEL_6;
            v30 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
            v31 = v36;
            v30(v36, v6, v7);
            v30(v37, v31, v7);
            if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
              v38 = (char *)sub_1007C84F8(0, *((_QWORD *)v38 + 2) + 1, 1, (unint64_t)v38);
            v33 = *((_QWORD *)v38 + 2);
            v32 = *((_QWORD *)v38 + 3);
            if (v33 >= v32 >> 1)
              v38 = (char *)sub_1007C84F8(v32 > 1, v33 + 1, 1, (unint64_t)v38);
            v34 = v37;
            v35 = v38;
            *((_QWORD *)v38 + 2) = v33 + 1;
            v30(&v35[((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v33], v34, v7);
            if (!v15)
              goto LABEL_8;
LABEL_7:
            v17 = __clz(__rbit64(v15));
            v15 &= v15 - 1;
          }
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
LABEL_6:
          sub_100004048((uint64_t)v6, &qword_1010ED860);
          if (!v15)
            continue;
          goto LABEL_7;
        }
        v21 = v19 + 4;
        if (v21 < v40)
        {
          v20 = *(_QWORD *)(v39 + 8 * v21);
          if (v20)
          {
            v16 = v21;
            goto LABEL_23;
          }
          while (1)
          {
            v16 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_37;
            if (v16 >= v40)
              break;
            v20 = *(_QWORD *)(v39 + 8 * v16);
            ++v21;
            if (v20)
              goto LABEL_23;
          }
        }
      }
LABEL_35:
      swift_release();
      return;
    }
    break;
  }
  __break(1u);
LABEL_37:
  __break(1u);
}

void *sub_10037ADC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  void *result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  Swift::String v16;
  void *object;
  NSString v18;
  char **v19;
  Swift::String v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = (void *)swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v8 << 6);
LABEL_22:
    v14 = (unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 24 * v10);
    if (*v14 - 2 >= 3)
    {
      v15 = *((_QWORD *)v14 + 2);
      if (*v14)
      {
        swift_bridgeObjectRetain(v15);
        v20._countAndFlagsBits = 980182388;
        v20._object = (void *)0xE400000000000000;
        object = String.deletingPrefix(_:)(v20)._object;
        v18 = String._bridgeToObjectiveC()();
        v19 = &selRef_handleWithPhoneNumber_;
      }
      else
      {
        swift_bridgeObjectRetain(v15);
        v16._countAndFlagsBits = 0x3A6F746C69616DLL;
        v16._object = (void *)0xE700000000000000;
        object = String.deletingPrefix(_:)(v16)._object;
        v18 = String._bridgeToObjectiveC()();
        v19 = &selRef_handleWithEmailAddress_;
      }
      swift_bridgeObjectRelease(object);
      v21 = objc_msgSend((id)objc_opt_self(SPHandle), *v19, v18);
      swift_bridgeObjectRelease(v15);

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v23 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v22 = *(_QWORD *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v23 >= v22 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
      result = (void *)specialized Array._endMutation()(v24);
    }
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v11 >= v6)
    goto LABEL_29;
  v12 = *(_QWORD *)(v2 + 8 * v11);
  ++v8;
  if (v12)
    goto LABEL_21;
  v8 = v11 + 1;
  if (v11 + 1 >= v6)
    goto LABEL_29;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v8 = v11 + 2;
  if (v11 + 2 >= v6)
    goto LABEL_29;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v8 = v11 + 3;
  if (v11 + 3 >= v6)
    goto LABEL_29;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_29:
    swift_release(a1);
    return &_swiftEmptyArrayStorage;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v6)
      goto LABEL_29;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_31:
  __break(1u);
  return result;
}

void sub_10037B040(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v6)
      goto LABEL_23;
    v12 = *(_QWORD *)(v2 + 8 * v11);
    ++v7;
    if (!v12)
    {
      v7 = v11 + 1;
      if (v11 + 1 >= v6)
        goto LABEL_23;
      v12 = *(_QWORD *)(v2 + 8 * v7);
      if (!v12)
      {
        v7 = v11 + 2;
        if (v11 + 2 >= v6)
          goto LABEL_23;
        v12 = *(_QWORD *)(v2 + 8 * v7);
        if (!v12)
        {
          v7 = v11 + 3;
          if (v11 + 3 >= v6)
            goto LABEL_23;
          v12 = *(_QWORD *)(v2 + 8 * v7);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v12 - 1) & v12;
    v9 = __clz(__rbit64(v12)) + (v7 << 6);
LABEL_5:
    swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v9));
    sub_100304018(v10);
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_23:
    swift_release();
    return;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v7 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v7 >= v6)
      goto LABEL_23;
    v12 = *(_QWORD *)(v2 + 8 * v7);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

_QWORD *sub_10037B1AC(uint64_t a1)
{
  int64_t v1;
  _QWORD *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10009ACD4(0, v1, 0);
    v3 = (_QWORD *)(a1 + 184);
    do
    {
      v4 = *((_BYTE *)v3 - 16);
      v6 = *(v3 - 1);
      v5 = *v3;
      v7 = _swiftEmptyArrayStorage[2];
      v8 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(*v3);
      if (v7 >= v8 >> 1)
        sub_10009ACD4(v8 > 1, v7 + 1, 1);
      _swiftEmptyArrayStorage[2] = v7 + 1;
      v9 = &_swiftEmptyArrayStorage[3 * v7];
      *((_BYTE *)v9 + 32) = v4;
      v9[5] = v6;
      v9[6] = v5;
      v3 += 20;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10037B298(uint64_t a1, uint64_t *a2)
{
  int64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  int64_t v6;
  int v7;
  int v8;
  char v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unsigned __int8 v32;
  char v33;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v4 = a1;
  sub_10009B03C(0, v2, 0);
  v3 = _swiftEmptyArrayStorage;
  result = sub_1003B2D18(v4);
  v6 = result;
  v8 = v7;
  v10 = v9 & 1;
  v28 = v4;
  v29 = v4 + 56;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v4 + 32))
  {
    if (((*(_QWORD *)(v29 + (((unint64_t)v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      goto LABEL_19;
    if (*(_DWORD *)(v4 + 36) != v8)
      goto LABEL_20;
    v11 = v3;
    v12 = *(_QWORD *)(v4 + 48) + 24 * v6;
    v13 = *(_BYTE *)v12;
    v15 = *(_QWORD *)(v12 + 8);
    v14 = *(_QWORD *)(v12 + 16);
    v16 = *a2;
    v17 = *(_QWORD *)(*a2 + 16);
    swift_bridgeObjectRetain(v14);
    v32 = v13;
    v33 = v10;
    v31 = v15;
    if (v17)
    {
      swift_bridgeObjectRetain_n(v14, 2);
      v18 = sub_100519120(v13, v15, v14);
      if ((v19 & 1) != 0)
      {
        v20 = (uint64_t *)(*(_QWORD *)(v16 + 56) + 16 * v18);
        v22 = *v20;
        v21 = v20[1];
        sub_10001BBBC(*v20, v21);
      }
      else
      {
        v22 = 0;
        v21 = 0xF000000000000000;
      }
      v3 = v11;
      swift_bridgeObjectRelease_n(v14, 2);
    }
    else
    {
      v22 = 0;
      v21 = 0xF000000000000000;
      v3 = v11;
    }
    v24 = v3[2];
    v23 = v3[3];
    if (v24 >= v23 >> 1)
      sub_10009B03C(v23 > 1, v24 + 1, 1);
    v3[2] = v24 + 1;
    v25 = &v3[5 * v24];
    *((_BYTE *)v25 + 32) = v32;
    v25[5] = v31;
    v25[6] = v14;
    v25[7] = v22;
    v25[8] = v21;
    v4 = v28;
    result = sub_1003B2DBC(v6, v8, v33 & 1, v28);
    v6 = result;
    v8 = v26;
    v10 = v27 & 1;
    if (!--v2)
    {
      sub_1000FE2A4(result, v26, v27 & 1);
      return (uint64_t)v3;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_10037B4B0@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_BYTE *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[32];
  _QWORD v34[6];

  v32 = a3;
  v9 = type metadata accessor for CodingUserInfoKey(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  v13 = sub_10001A9A8(&qword_1010F69C8);
  v14 = a5 + *(int *)(v13 + 40);
  UUID.init()(v13);
  v15 = type metadata accessor for PropertyListEncoder(0);
  v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  PropertyListEncoder.init()(v16);
  if (qword_1010EA610 != -1)
    swift_once(&qword_1010EA610, sub_100DB0924);
  v17 = sub_10001A9E8(v9, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v17, v9);
  v34[3] = &type metadata for Bool;
  LOBYTE(v34[0]) = 1;
  v18 = (void (*)(_BYTE *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(v33);
  sub_1000FE92C((uint64_t)v34, (uint64_t)v12);
  v18(v33, 0);
  v19 = sub_10001A9A8(&qword_101106C20);
  v20 = swift_allocObject(v19, 48, 7);
  *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v20 + 32) = v32;
  *(_QWORD *)(v20 + 40) = a4;
  v34[0] = v20;
  swift_bridgeObjectRetain(a4);
  v21 = sub_10001A9A8(&qword_1011063B0);
  v22 = sub_1003792A4();
  v23 = v34[5];
  v24 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v34, v21, v22);
  if (v23)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v26 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v14, v26);
  }
  else
  {
    v28 = v24;
    v29 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_release();
    v30 = (uint64_t *)(a5 + *(int *)(v13 + 44));
    *v30 = v28;
    v30[1] = v29;
  }
  return result;
}

uint64_t sub_10037B6EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_BYTE *, _QWORD);
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _BYTE v31[32];
  _QWORD v32[6];

  v6 = type metadata accessor for CodingUserInfoKey(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v31[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *a3 = a1;
  v10 = sub_10001A9A8(&qword_1010F7A08);
  v11 = (char *)a3 + *(int *)(v10 + 40);
  UUID.init()(v10);
  v12 = type metadata accessor for PropertyListEncoder(0);
  v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  PropertyListEncoder.init()(v13);
  if (qword_1010EA610 != -1)
    swift_once(&qword_1010EA610, sub_100DB0924);
  v14 = sub_10001A9E8(v6, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, v14, v6);
  v32[3] = &type metadata for Bool;
  LOBYTE(v32[0]) = 1;
  v15 = (void (*)(_BYTE *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(v31);
  sub_1000FE92C((uint64_t)v32, (uint64_t)v9);
  v15(v31, 0);
  v16 = sub_10001A9A8(&qword_1010FA518);
  v17 = swift_allocObject(v16, 88, 7);
  v18 = *(_OWORD *)a2;
  v19 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
  *(_OWORD *)(v17 + 32) = v18;
  v20 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v17 + 48) = v19;
  *(_OWORD *)(v17 + 64) = v20;
  *(_QWORD *)(v17 + 80) = *(_QWORD *)(a2 + 48);
  v32[0] = v17;
  sub_1003D84A8((uint64_t *)a2);
  v21 = sub_10001A9A8(&qword_1010F3E38);
  v22 = sub_100365CCC((unint64_t *)&qword_1010F3E40, &qword_1010F3E38, (uint64_t (*)(void))sub_100251620, (const char *)&protocol conformance descriptor for <A> [A]);
  v23 = v32[5];
  v24 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v32, v21, v22);
  if (v23)
  {
    swift_release();
    sub_1003D84F4(a2);
    swift_bridgeObjectRelease();
    v26 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v11, v26);
  }
  else
  {
    v28 = v24;
    v29 = v25;
    swift_release();
    sub_1003D84F4(a2);
    result = swift_bridgeObjectRelease();
    v30 = (_QWORD *)((char *)a3 + *(int *)(v10 + 44));
    *v30 = v28;
    v30[1] = v29;
  }
  return result;
}

uint64_t sub_10037B948()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v16;
  _QWORD v17[2];

  v17[0] = 0;
  v17[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(65);
  v1._object = (void *)0x8000000100EC8150;
  v1._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v1);
  LOBYTE(v16) = *(_BYTE *)v0;
  _print_unlocked<A, B>(_:_:)(&v16, v17, &type metadata for InternalSessionMessageType, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v2._countAndFlagsBits = 0x6F6973726576202CLL;
  v2._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v2);
  v16 = *(_QWORD *)(v0 + 8);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x69746E656469202CLL;
  v4._object = (void *)0xEE00203A72656966;
  String.append(_:)(v4);
  v5 = sub_10001A9A8(&qword_1010F69C8);
  v6 = type metadata accessor for UUID(0);
  v7 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v6, v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x64616F6C79617020;
  v9._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v9);
  v10 = (uint64_t *)(v0 + *(int *)(v5 + 44));
  v11 = *v10;
  v12 = v10[1];
  sub_10001BBBC(*v10, v12);
  v13._countAndFlagsBits = Data.description.getter(v11, v12);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  sub_10001BC14(v11, v12);
  v14._countAndFlagsBits = 41;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return v17[0];
}

uint64_t sub_10037BB34()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  Swift::String v14;
  Swift::String v15;
  _QWORD v17[2];

  v17[0] = 0;
  v17[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(65);
  v1._object = (void *)0x8000000100EC8150;
  v1._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)(v2, v17, &type metadata for BeaconSharingSessionMessageType, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v3._countAndFlagsBits = 0x6F6973726576202CLL;
  v3._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x69746E656469202CLL;
  v5._object = (void *)0xEE00203A72656966;
  String.append(_:)(v5);
  v6 = sub_10001A9A8(&qword_1010F7A08);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x64616F6C79617020;
  v10._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v10);
  v11 = (uint64_t *)(v0 + *(int *)(v6 + 44));
  v12 = *v11;
  v13 = v11[1];
  sub_10001BBBC(*v11, v13);
  v14._countAndFlagsBits = Data.description.getter(v12, v13);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  sub_10001BC14(v12, v13);
  v15._countAndFlagsBits = 41;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return v17[0];
}

uint64_t sub_10037BD14(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t (**v22)();
  uint64_t v23;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  v26 = *v1;
  v3 = type metadata accessor for OwnedBeaconRecord(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v6);
  v25 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v27 = (char *)&v25 - v10;
  v11 = *(void (**)(void))(v7 + 16);
  v11();
  v12 = swift_allocObject(&unk_1010720A0, 24, 7);
  swift_weakInit(v12 + 16, v1);
  sub_10005972C(a1, (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for OwnedBeaconRecord);
  v13 = *(unsigned __int8 *)(v4 + 80);
  v14 = (v13 + 24) & ~v13;
  v15 = swift_allocObject(&unk_1010735B8, v14 + v5, v13 | 7);
  *(_QWORD *)(v15 + 16) = v12;
  sub_1000126EC((uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, type metadata accessor for OwnedBeaconRecord);
  v16 = v25;
  ((void (*)(char *, char *, uint64_t))v11)(v25, v27, v6);
  v17 = *(unsigned __int8 *)(v7 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = (v8 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_1010735E0, v20 + 8, v17 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v21 + v18, v16, v6);
  v22 = (uint64_t (**)())(v21 + v19);
  *v22 = sub_1003D1FE0;
  v22[1] = (uint64_t (*)())v15;
  *(_QWORD *)(v21 + v20) = v26;
  swift_retain();
  swift_retain();
  v23 = sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
  unsafeFromAsyncTask<A>(_:)(&v28, &unk_1010FA2C8, v21, v23);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v27, v6);
  return swift_release();
}

uint64_t sub_10037BF50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t (*v21)();
  _UNKNOWN **v22;
  void (*v23)(_QWORD, _QWORD, _QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  unsigned __int8 *v72;
  uint64_t v73;
  void (*v74)(_QWORD, _QWORD, _QWORD);
  void (*v75)(_QWORD, _QWORD);
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void (*v87)(_QWORD, _QWORD, _QWORD);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(_QWORD, _QWORD);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(os_log_t, uint64_t);
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(_QWORD, _QWORD, _QWORD);
  uint64_t (*v120)(uint64_t);
  void (*v121)(_QWORD, _QWORD, _QWORD);
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  void **aBlock;
  uint64_t v140;
  uint64_t (*v141)(uint64_t);
  void *v142;
  uint64_t (*v143)();
  uint64_t v144;

  v135 = a2;
  v136 = a3;
  v4 = type metadata accessor for ShareRecord(0);
  v125 = *(_QWORD *)(v4 - 8);
  v5 = *(_QWORD *)(v125 + 64);
  __chkstk_darwin(v4);
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v132 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v130 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for DispatchQoS(0);
  v131 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v129 = (char *)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for DispatchQoS.QoSClass(0);
  v127 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v126 = (char *)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1;
  v18 = a1 + *(int *)(v4 + 24);
  (*(void (**)(char *, uint64_t))(v19 + 16))(v16, v18);
  sub_10038A278(1, 1, (uint64_t)v16, (uint64_t)&aBlock);
  v118 = v11;
  v123 = v13;
  v124 = v10;
  v122 = v4;
  v116 = (uint64_t)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = v6;
  v115 = aBlock;
  v114 = (void (*)(os_log_t, uint64_t))v140;
  v120 = v141;
  v121 = (void (*)(_QWORD, _QWORD, _QWORD))v142;
  sub_10080B648(v18, (uint64_t)&v137);
  if (v138)
  {
    sub_10000F9FC(&v137, (uint64_t)&aBlock);
    v20 = v142;
    v21 = v143;
    sub_10001AA44(&aBlock, (uint64_t)v142);
    if (((*((uint64_t (**)(void *, uint64_t (*)()))v21 + 14))(v20, v21) & 1) != 0)
      v22 = &off_1010498C0;
    else
      v22 = &off_1010498E8;
    v119 = (void (*)(_QWORD, _QWORD, _QWORD))sub_1003BB198((uint64_t)v22);
    v23 = (void (*)(_QWORD, _QWORD, _QWORD))_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
  }
  else
  {
    sub_100004048((uint64_t)&v137, (uint64_t *)&unk_1010EE310);
    v23 = (void (*)(_QWORD, _QWORD, _QWORD))sub_1003BB198((uint64_t)&off_101049910);
    v119 = v23;
  }
  v24 = v17;
  v25 = v122;
  v26 = (uint64_t)v123;
  v27 = v118;
  v28 = *(_QWORD *)(v134 + 408);
  __chkstk_darwin(v23);
  v111 = v28;
  LOBYTE(v112) = 0;
  v122 = v29;
  v113 = v29;
  v30 = v124;
  OS_dispatch_queue.sync<A>(execute:)(sub_1003BB2D8, &v110, v124);
  sub_100C5016C(v26, 0);
  v32 = v31;
  v33 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8);
  v34 = v33(v26, v30);
  v35 = v5;
  if ((v32 & 1) != 0)
  {
    sub_100C5016C(v24 + *(int *)(v25 + 28), 1);
    v37 = v124;
    v38 = (uint64_t)v123;
    if ((v36 & 1) == 0)
    {
      v39 = swift_bridgeObjectRelease();
      v40 = static os_log_type_t.default.getter(v39);
      if (qword_1010EA250 != -1)
        swift_once(&qword_1010EA250, sub_100B5D964);
      v41 = qword_1011B7D30;
      v42 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v43 = swift_allocObject(v42, 72, 7);
      *(_OWORD *)(v43 + 16) = xmmword_100E22B00;
      v44 = UUID.uuidString.getter(v43);
      v46 = v45;
      *(_QWORD *)(v43 + 56) = &type metadata for String;
      *(_QWORD *)(v43 + 64) = sub_10001AA00();
      *(_QWORD *)(v43 + 32) = v44;
      *(_QWORD *)(v43 + 40) = v46;
      os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Ignoring request to unshare. ShareRecord was created recently (by another device?). (shareIdentifier: %@)", 105, 2, v43);
      swift_bridgeObjectRelease();
      sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
      v47 = v127;
      v48 = v126;
      v49 = v128;
      (*(void (**)(char *, _QWORD, uint64_t))(v127 + 104))(v126, enum case for DispatchQoS.QoSClass.default(_:), v128);
      v50 = (void *)static OS_dispatch_queue.global(qos:)(v48);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
      v51 = swift_allocObject(&unk_1010716A0, 32, 7);
      v52 = v136;
      *(_QWORD *)(v51 + 16) = v135;
      *(_QWORD *)(v51 + 24) = v52;
      v143 = sub_1002E3C58;
      v144 = v51;
      aBlock = _NSConcreteStackBlock;
      v140 = 1107296256;
      v141 = sub_100016FB8;
      v142 = &unk_1010716B8;
      v53 = _Block_copy(&aBlock);
      v54 = swift_retain();
      v55 = v129;
      static DispatchQoS.unspecified.getter(v54);
      *(_QWORD *)&v137 = _swiftEmptyArrayStorage;
      v56 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v57 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v58 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v59 = v130;
      v60 = v57;
      v61 = v117;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v60, v58, v117, v56);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v55, v59, v53);
      _Block_release(v53);

      sub_10001BC14((uint64_t)v120, (unint64_t)v121);
      goto LABEL_20;
    }
  }
  else
  {
    v118 = 0;
    v62 = static os_log_type_t.default.getter(v34);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v63 = qword_1011B7D30;
    v64 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v65 = swift_allocObject(v64, 72, 7);
    *(_OWORD *)(v65 + 16) = xmmword_100E22B00;
    v66 = UUID.uuidString.getter(v65);
    v68 = v67;
    *(_QWORD *)(v65 + 56) = &type metadata for String;
    *(_QWORD *)(v65 + 64) = sub_10001AA00();
    *(_QWORD *)(v65 + 32) = v66;
    *(_QWORD *)(v65 + 40) = v68;
    os_log(_:dso:log:_:_:)(v62, &_mh_execute_header, v63, "Allowing request to unshare. ShareRecord was created by this device. (shareIdentifier: %@)", 90, 2, v65);
    v36 = swift_bridgeObjectRelease();
    v37 = v124;
    v38 = (uint64_t)v123;
  }
  v124 = v35;
  __chkstk_darwin(v36);
  v111 = v28;
  LOBYTE(v112) = 1;
  v69 = v122;
  v113 = v122;
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D9B50, &v110, v37);
  sub_100C5016C(v38, 1);
  v71 = v70;
  v33(v38, v37);
  if ((v71 & 1) != 0)
  {
    static Date.trustedNow.getter(v38);
    sub_100C4FA44(v69, v38, 1);
    v33(v38, v37);
    v72 = (unsigned __int8 *)(v24 + *(int *)(v25 + 36));
    v73 = *((_QWORD *)v72 + 1);
    v74 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v72 + 2);
    v75 = *(void (**)(_QWORD, _QWORD))(v28 + 16);
    v76 = *v72;
    v77 = v24;
    v78 = v116;
    sub_10005972C(v77, v116, type metadata accessor for ShareRecord);
    v79 = *(unsigned __int8 *)(v125 + 80);
    v80 = (v79 + 24) & ~v79;
    v81 = (v124 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
    v82 = swift_allocObject(&unk_101071678, v81 + 16, v79 | 7);
    *(_QWORD *)(v82 + 16) = v134;
    sub_1000126EC(v78, v82 + v80, type metadata accessor for ShareRecord);
    v83 = (_QWORD *)(v82 + v81);
    v84 = v136;
    *v83 = v135;
    v83[1] = v84;
    swift_retain();
    swift_retain();
    v85 = (_QWORD *)sub_1006B9A24((uint64_t)_swiftEmptyArrayStorage);
    v109 = v75;
    v86 = (uint64_t)v120;
    v87 = v121;
    sub_10038E1C0(v115, v114, (uint64_t)v120, v121, v85, v76, v73, v74, 0, v109, 0, 0, v119, (uint64_t)&_swiftEmptySetSingleton, 0, (void (*)(void ***))sub_1003BB43C, (void (*)(void ***))v82);
    sub_10001BC14(v86, (unint64_t)v87);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v89 = swift_bridgeObjectRelease();
  v90 = static os_log_type_t.default.getter(v89);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v91 = qword_1011B7D30;
  v92 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v93 = swift_allocObject(v92, 72, 7);
  *(_OWORD *)(v93 + 16) = xmmword_100E22B00;
  v94 = UUID.uuidString.getter(v93);
  v96 = v95;
  *(_QWORD *)(v93 + 56) = &type metadata for String;
  *(_QWORD *)(v93 + 64) = sub_10001AA00();
  *(_QWORD *)(v93 + 32) = v94;
  *(_QWORD *)(v93 + 40) = v96;
  os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "Ignoring request to unshare. ShareRecord last unshared recently. (shareIdentifier: %@)", 86, 2, v93);
  swift_bridgeObjectRelease();
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v97 = v127;
  v98 = v126;
  v99 = v128;
  (*(void (**)(char *, _QWORD, uint64_t))(v127 + 104))(v126, enum case for DispatchQoS.QoSClass.default(_:), v128);
  v100 = (void *)static OS_dispatch_queue.global(qos:)(v98);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v98, v99);
  v101 = swift_allocObject(&unk_101071628, 32, 7);
  v102 = v136;
  *(_QWORD *)(v101 + 16) = v135;
  *(_QWORD *)(v101 + 24) = v102;
  v143 = sub_1002E3C58;
  v144 = v101;
  aBlock = _NSConcreteStackBlock;
  v140 = 1107296256;
  v141 = sub_100016FB8;
  v142 = &unk_101071640;
  v103 = _Block_copy(&aBlock);
  v104 = swift_retain();
  v55 = v129;
  static DispatchQoS.unspecified.getter(v104);
  *(_QWORD *)&v137 = _swiftEmptyArrayStorage;
  v105 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v106 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v107 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v59 = v130;
  v108 = v106;
  v61 = v117;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v137, v108, v107, v117, v105);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v55, v59, v103);
  sub_10001BC14((uint64_t)v120, (unint64_t)v121);
  _Block_release(v103);

LABEL_20:
  (*(void (**)(char *, uint64_t))(v132 + 8))(v59, v61);
  (*(void (**)(char *, uint64_t))(v131 + 8))(v55, v133);
  return swift_release();
}

uint64_t sub_10037CD84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(os_log_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD, _QWORD, _QWORD);
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void (*v28)(_QWORD, _QWORD, _QWORD);
  uint64_t v29;
  _QWORD v31[3];
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void (*v35)(os_log_t, uint64_t);
  uint64_t v36;
  _QWORD aBlock[4];

  v36 = a2;
  v5 = (void (*)(os_log_t, uint64_t))type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *((_QWORD *)v5 - 1);
  v35 = v5;
  __chkstk_darwin(v5);
  v33 = (_QWORD *)((char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for DispatchQoS(0);
  v31[2] = *(_QWORD *)(v7 - 8);
  v32 = v7;
  __chkstk_darwin(v7);
  v31[1] = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  __chkstk_darwin(v9);
  v10 = type metadata accessor for SharedBeaconRecord(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  __chkstk_darwin(v14);
  v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v17 + 16))(v16, a1 + *(int *)(v10 + 20));
  sub_10038A278(3, 1, (uint64_t)v16, (uint64_t)aBlock);
  v18 = aBlock[2];
  v19 = (void (*)(_QWORD, _QWORD, _QWORD))aBlock[3];
  v20 = LOBYTE(aBlock[0]);
  v21 = (unsigned __int8 *)(a1 + *(int *)(v10 + 28));
  v34 = *((_QWORD *)v21 + 1);
  v35 = (void (*)(os_log_t, uint64_t))aBlock[1];
  v33 = (_QWORD *)*((_QWORD *)v21 + 2);
  LODWORD(v32) = *v21;
  sub_10005972C(a1, (uint64_t)v13, type metadata accessor for SharedBeaconRecord);
  v22 = *(unsigned __int8 *)(v11 + 80);
  v23 = (v22 + 24) & ~v22;
  v24 = (v12 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = swift_allocObject(&unk_101073158, v24 + 16, v22 | 7);
  *(_QWORD *)(v25 + 16) = v31[0];
  sub_1000126EC((uint64_t)v13, v25 + v23, type metadata accessor for SharedBeaconRecord);
  v26 = (_QWORD *)(v25 + v24);
  *v26 = v36;
  v26[1] = a3;
  swift_retain();
  swift_retain();
  v27 = (_QWORD *)sub_1006B9A24((uint64_t)_swiftEmptyArrayStorage);
  v28 = (void (*)(_QWORD, _QWORD, _QWORD))sub_100CA7EC0((uint64_t)&off_101049938);
  v29 = sub_100CA7EC0((uint64_t)_swiftEmptyArrayStorage);
  sub_10038E1C0(v20, v35, v18, v19, v27, v32, v34, (void (*)(_QWORD, _QWORD, _QWORD))v33, 0, 0, 1, 0, v28, v29, 0, (void (*)(void ***))sub_1003D1920, (void (*)(void ***))v25);
  sub_10001BC14(v18, (unint64_t)v19);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10037D304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(os_log_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t MyAccessoryFamilyShareResponseEnvelope;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD, _QWORD);
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  void (*v32)(_QWORD, _QWORD, _QWORD);
  uint64_t v33;
  _QWORD v35[7];
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void (*v39)(os_log_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  _QWORD aBlock[4];

  v40 = a2;
  v41 = a3;
  v4 = (void (*)(os_log_t, uint64_t))type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *((_QWORD *)v4 - 1);
  v39 = v4;
  __chkstk_darwin(v4);
  v37 = (_QWORD *)((char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for DispatchQoS(0);
  v35[6] = *(_QWORD *)(v6 - 8);
  v36 = v6;
  __chkstk_darwin(v6);
  v35[5] = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v35[3] = *(_QWORD *)(v8 - 8);
  v35[4] = v8;
  __chkstk_darwin(v8);
  v35[2] = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v35[0] = *((_QWORD *)v10 - 1);
  v11 = *(_QWORD *)(v35[0] + 64);
  __chkstk_darwin(v10);
  v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MyAccessoryFamilyShareResponseEnvelope = type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope(0);
  v14 = __chkstk_darwin(MyAccessoryFamilyShareResponseEnvelope);
  v16 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)v35 - v17;
  v19 = a1 + v10[5];
  v20 = type metadata accessor for UUID(0);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
  v21(v18, v19, v20);
  v21(&v18[*(int *)(MyAccessoryFamilyShareResponseEnvelope + 20)], a1 + v10[6], v20);
  sub_10005972C((uint64_t)v18, (uint64_t)v16, type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope);
  sub_10038A8E4(3, 2, (uint64_t)v16, &qword_1010FA150, type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope, &qword_1010FA158, (uint64_t (*)(void))sub_1003D0F8C, (uint64_t)aBlock);
  v22 = aBlock[2];
  v23 = (void (*)(_QWORD, _QWORD, _QWORD))aBlock[3];
  LODWORD(v16) = LOBYTE(aBlock[0]);
  v24 = (unsigned __int8 *)(a1 + v10[7]);
  v38 = *((_QWORD *)v24 + 1);
  v39 = (void (*)(os_log_t, uint64_t))aBlock[1];
  v37 = (_QWORD *)*((_QWORD *)v24 + 2);
  LODWORD(v36) = *v24;
  sub_10005972C(a1, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
  v25 = *(unsigned __int8 *)(v35[0] + 80);
  v26 = (v25 + 24) & ~v25;
  v27 = (v11 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(&unk_1010732E8, v27 + 16, v25 | 7);
  *(_QWORD *)(v28 + 16) = v35[1];
  sub_1000126EC((uint64_t)v12, v28 + v26, type metadata accessor for SharedBeaconRecord);
  v29 = (_QWORD *)(v28 + v27);
  v30 = v41;
  *v29 = v40;
  v29[1] = v30;
  swift_retain();
  swift_retain();
  v31 = (_QWORD *)sub_1006B9A24((uint64_t)_swiftEmptyArrayStorage);
  v32 = (void (*)(_QWORD, _QWORD, _QWORD))sub_100CA7EC0((uint64_t)&off_101049960);
  v33 = sub_100CA7EC0((uint64_t)_swiftEmptyArrayStorage);
  sub_10038E1C0((int)v16, v39, v22, v23, v31, v36, v38, (void (*)(_QWORD, _QWORD, _QWORD))v37, 0, 0, 1, 0, v32, v33, 0, (void (*)(void ***))sub_1003D1B34, (void (*)(void ***))v28);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v22, (unint64_t)v23);
  return sub_1000126B0((uint64_t)v18, type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope);
}

uint64_t sub_10037D930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))
{
  return a9(a1, a2, a3, a4, a5, *(unsigned __int8 *)a6, a6[1], a6[2], a6[3], a7, a8);
}

void sub_10037D974()
{
  sub_10037D980((uint64_t)sub_1003CFF54);
}

void sub_10037D980(uint64_t a1)
{
  _QWORD *v1;
  id v3;
  objc_class *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[5];
  objc_super v18;

  v3 = objc_msgSend(objc_allocWithZone((Class)IDSServiceDelegateProperties), "init");
  objc_msgSend(v3, "setWantsCrossAccountMessaging:", 1);
  v4 = (objc_class *)type metadata accessor for MessagingServiceDelegateTrampoline();
  v5 = (char *)objc_allocWithZone(v4);
  v6 = &v5[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate];
  *((_QWORD *)v6 + 1) = 0;
  v7 = swift_unknownObjectWeakInit(v6, 0);
  *(_QWORD *)(v7 + 8) = &off_1010B41D0;
  swift_unknownObjectWeakAssign(v7, v1);
  v18.receiver = v5;
  v18.super_class = v4;
  v8 = objc_msgSendSuper2(&v18, "init");
  v9 = (void *)v1[5];
  v1[5] = v8;

  v10 = (void *)v1[8];
  objc_msgSend(v10, "addDelegate:withDelegateProperties:queue:", v1[5], v3, v1[6]);
  v11 = objc_msgSend(v10, "devices");
  if (v11)
  {
    v12 = v11;
    v13 = sub_10000F4A0(0, &qword_1010F94E0, IDSDevice_ptr);
    v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

    __chkstk_darwin(v15);
    v17[2] = v1;
    v17[3] = v14;
    v16 = sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
    OS_dispatch_queue.sync<A>(execute:)(a1, v17, v16);
    swift_bridgeObjectRelease();

  }
  else
  {

  }
}

__n128 sub_10037DB14@<Q0>(unsigned __int8 a1@<W0>, void (*a2)(os_log_t, uint64_t)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(_QWORD, _QWORD, _QWORD)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, __int128 a14)
{
  __n128 result;

  sub_10037DC5C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, &qword_1010F9EF8, &qword_1010F9F00, &qword_1010F9F18, (uint64_t)&type metadata for BeaconSharingMessageType, &unk_101071A10,
    (uint64_t)&unk_1010F9F60);
  return result;
}

__n128 sub_10037DBB8@<Q0>(unsigned __int8 a1@<W0>, void (*a2)(os_log_t, uint64_t)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(_QWORD, _QWORD, _QWORD)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, __int128 a14)
{
  __n128 result;

  sub_10037DC5C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, &qword_1010FA268, &qword_1010FA270, &qword_1010FA288, (uint64_t)&type metadata for ItemSharingCrossAccountMessageType, &unk_101073590,
    (uint64_t)&unk_1010FA280);
  return result;
}

void sub_10037DC5C(unsigned __int8 a1@<W0>, void (*a2)(os_log_t, uint64_t)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(_QWORD, _QWORD, _QWORD)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, __int128 a14, uint64_t *a15, unint64_t *a16, uint64_t *a17, uint64_t a18, NSObject *a19, uint64_t a20)
{
  _QWORD *v20;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  int64_t v44;
  _QWORD *v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t (*v65)(_QWORD, _QWORD, _QWORD);
  uint64_t *v66;
  void (*v67)(os_log_t, uint64_t);
  _QWORD *v68;
  uint64_t v69;
  int v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  NSObject *v78;
  unint64_t *v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  os_log_t v99;
  uint64_t v100;
  unint64_t v101;
  os_log_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void (*v106)(os_log_t, os_log_t, uint64_t);
  os_log_t v107;
  unint64_t *v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  int v112;
  uint64_t v113;
  NSObject *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void (*v129)(os_log_t, uint64_t);
  NSObject *v130;
  uint64_t v131;
  unint64_t v132;
  os_log_t v133;
  uint64_t v134;
  _BYTE *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  os_log_type_t v141;
  uint64_t v142;
  NSObject *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  os_log_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  void (*v157)(char *, uint64_t, uint64_t, uint64_t);
  unsigned __int8 v158;
  uint64_t v159;
  void (*v160)(os_log_t, uint64_t);
  unint64_t v161;
  uint64_t v162;
  Class isa;
  Class v164;
  Class v165;
  Class v166;
  void *v167;
  NSObject *v168;
  id v169;
  void *v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  _QWORD *v185;
  _BYTE *v186;
  uint64_t v187;
  unint64_t v188;
  void (*v189)(_BYTE *, _BYTE *, uint64_t);
  NSObject *v190;
  uint64_t v191;
  NSObject *v192;
  os_log_type_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  NSObject *v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  NSObject *v206;
  uint64_t v207;
  unint64_t v208;
  NSObject *v209;
  _BYTE v210[12];
  int v211;
  os_log_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  NSObject *v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  NSObject *v220;
  _BYTE *v221;
  _BYTE *v222;
  os_log_t v223;
  _BYTE *v224;
  void (*v225)(os_log_t, uint64_t);
  uint64_t (*v226)(_QWORD, _QWORD, _QWORD);
  os_log_t v227;
  NSObject *v228;
  _QWORD *v229;
  _QWORD *v230;
  NSObject *v231;
  uint64_t *v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  NSObject *v237;
  char v238[8];
  void (*v239)(os_log_t, uint64_t);
  uint64_t v240;
  unint64_t v241;

  v224 = (_BYTE *)a8;
  v226 = a7;
  v231 = a5;
  v219 = a9;
  v232 = a15;
  v233 = a16;
  v229 = (_QWORD *)*v20;
  v26 = sub_10001A9A8(&qword_1010ED860);
  v27 = __chkstk_darwin(v26);
  v221 = &v210[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v27);
  v225 = (void (*)(os_log_t, uint64_t))&v210[-v29];
  v235 = type metadata accessor for UUID(0);
  v230 = *(_QWORD **)(v235 - 8);
  v30 = __chkstk_darwin(v235);
  v220 = &v210[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v32 = __chkstk_darwin(v30);
  v222 = &v210[-v33];
  v34 = __chkstk_darwin(v32);
  v36 = &v210[-v35];
  v37 = __chkstk_darwin(v34);
  v39 = &v210[-v38];
  v40 = __chkstk_darwin(v37);
  v42 = &v210[-v41];
  __chkstk_darwin(v40);
  v227 = (os_log_t)&v210[-v43];
  v238[0] = a1;
  v239 = (void (*)(os_log_t, uint64_t))a2;
  v240 = a3;
  v241 = a4;
  v44 = *(_QWORD *)(a6 + 16);
  v45 = _swiftEmptyArrayStorage;
  v223 = v42;
  if (v44)
  {
    v46 = v36;
    v47 = v39;
    v236 = _swiftEmptyArrayStorage;
    sub_10009A2F4(0, v44, 0);
    v45 = v236;
    v48 = (uint64_t *)(a6 + 48);
    do
    {
      v50 = *(v48 - 1);
      v49 = *v48;
      v236 = v45;
      v52 = v45[2];
      v51 = v45[3];
      swift_bridgeObjectRetain(v49);
      if (v52 >= v51 >> 1)
      {
        sub_10009A2F4(v51 > 1, v52 + 1, 1);
        v45 = v236;
      }
      v45[2] = v52 + 1;
      v53 = &v45[2 * v52];
      v53[4] = v50;
      v53[5] = v49;
      v48 += 3;
      --v44;
    }
    while (v44);
    v39 = v47;
    v36 = v46;
  }
  v54 = (unint64_t *)sub_100CA7D78((uint64_t)v45);
  swift_bridgeObjectRelease();
  v55 = type metadata accessor for PropertyListEncoder(0);
  v56 = swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
  PropertyListEncoder.init()(v56);
  v57 = v232;
  v58 = sub_10001A9A8(v232);
  v59 = sub_1000193A4(v233, v57, protocol conformance descriptor for Message<A>);
  v60 = v234;
  v61 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v238, v58, v59);
  if (v60)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  v234 = v62;
  v216 = v39;
  v233 = v54;
  v218 = v61;
  v213 = 0;
  v215 = a18;
  v217 = a17;
  swift_release();
  v63 = 0x6567617373656DLL;
  if ((a11 & 1) != 0)
    v63 = 0xD000000000000017;
  v214 = v63;
  if ((a11 & 1) != 0)
    v64 = 0x8000000100ED3170;
  else
    v64 = 0xE700000000000000;
  v65 = v226;
  v66 = (uint64_t *)sub_1003BBA4C((uint64_t)v231, 0, (uint64_t)v226, (uint64_t)v224, a10 & 1, a11 & 1, a12, a13, a14);
  v67 = v225;
  sub_10000F9B8((uint64_t)v65, (uint64_t)v225, &qword_1010ED860);
  v68 = v230;
  v69 = v235;
  v226 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v230[6];
  v70 = v226(v67, 1, v235);
  v71 = &qword_1010EA000;
  v232 = v66;
  if (v70 == 1)
  {
    v72 = v64;
    v73 = (uint64_t)v67;
    v74 = v36;
    sub_100004048(v73, &qword_1010ED860);
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v75 = type metadata accessor for Logger(0);
    sub_10001A9E8(v75, (uint64_t)qword_1011B7EC8);
    LODWORD(v227) = v238[0];
    v76 = v240;
    v225 = v239;
    v77 = v241;
    v78 = v74;
    ((void (*)(NSObject *, NSObject *, uint64_t))v68[2])(v74, v231, v69);
    v79 = v233;
    swift_bridgeObjectRetain(v233);
    sub_10001BBBC(v76, v77);
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v64);
    v80 = sub_10001BBBC(v76, v77);
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.default.getter(v81);
    LODWORD(v231) = v82;
    if (os_log_type_enabled(v81, v82))
    {
      v83 = swift_slowAlloc(52, -1);
      v84 = (_BYTE *)swift_slowAlloc(160, -1);
      v224 = v84;
      *(_DWORD *)v83 = 136316162;
      v223 = v81;
      v236 = v229;
      v237 = v84;
      v85 = sub_10001A9A8(v217);
      v86 = String.init<A>(describing:)(&v236, v85);
      v236 = (_QWORD *)sub_100016940(v86, v87, (uint64_t *)&v237);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, &v237, v83 + 4, v83 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v83 + 12) = 2080;
      swift_bridgeObjectRetain(v72);
      v236 = (_QWORD *)sub_100016940(v214, v72, (uint64_t *)&v237);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, &v237, v83 + 14, v83 + 22);
      swift_bridgeObjectRelease_n(v72, 3);
      *(_WORD *)(v83 + 22) = 2080;
      sub_1003B0B18((char)v227, (uint64_t)v225, v76, v77, v215);
      v89 = v88;
      v91 = v90;
      sub_10001BC14(v76, v77);
      v236 = (_QWORD *)sub_100016940(v89, v91, (uint64_t *)&v237);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, &v237, v83 + 24, v83 + 32);
      v71 = &qword_1010EA000;
      swift_bridgeObjectRelease();
      sub_10001BC14(v76, v77);
      *(_WORD *)(v83 + 32) = 2080;
      swift_bridgeObjectRetain(v79);
      v93 = Set.description.getter(v92, &type metadata for String, &protocol witness table for String);
      v95 = v94;
      swift_bridgeObjectRelease();
      v236 = (_QWORD *)sub_100016940(v93, v95, (uint64_t *)&v237);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, &v237, v83 + 34, v83 + 42);
      swift_bridgeObjectRelease_n(v79, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v83 + 42) = 2080;
      v96 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v97 = dispatch thunk of CustomStringConvertible.description.getter(v235, v96);
      v236 = (_QWORD *)sub_100016940(v97, v98, (uint64_t *)&v237);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, &v237, v83 + 44, v83 + 52);
      swift_bridgeObjectRelease();
      v225 = (void (*)(os_log_t, uint64_t))v230[1];
      v225(v78, v235);
      v99 = v223;
      _os_log_impl((void *)&_mh_execute_header, v223, (os_log_type_t)v231, "%s: Sending %s: %s to %s with identifier: %s", (uint8_t *)v83, 0x34u);
      v100 = (uint64_t)v224;
      swift_arrayDestroy(v224, 5, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v100, -1, -1);
      swift_slowDealloc(v83, -1, -1);

    }
    else
    {
      sub_10001BC14(v76, v77);
      swift_bridgeObjectRelease_n(v72, 2);
      sub_10001BC14(v76, v77);
      swift_bridgeObjectRelease_n(v79, 2);
      v225 = (void (*)(os_log_t, uint64_t))v68[1];
      v225(v78, v69);

    }
  }
  else
  {
    v101 = v64;
    v102 = v227;
    ((void (*)(os_log_t, void (*)(os_log_t, uint64_t), uint64_t))v68[4])(v227, v67, v69);
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v103 = type metadata accessor for Logger(0);
    sub_10001A9E8(v103, (uint64_t)qword_1011B7EC8);
    LODWORD(v225) = v238[0];
    v104 = v240;
    v224 = v239;
    v105 = v241;
    v106 = (void (*)(os_log_t, os_log_t, uint64_t))v68[2];
    v107 = v223;
    v106(v223, v102, v69);
    v106(v216, v231, v69);
    sub_10001BBBC(v104, v105);
    v108 = v233;
    swift_bridgeObjectRetain(v233);
    sub_10001BBBC(v104, v105);
    swift_bridgeObjectRetain(v108);
    swift_bridgeObjectRetain(v64);
    v110 = Logger.logObject.getter(v109);
    v111 = static os_log_type_t.default.getter(v110);
    v112 = v111;
    if (os_log_type_enabled(v110, v111))
    {
      v113 = swift_slowAlloc(62, -1);
      v114 = swift_slowAlloc(192, -1);
      v231 = v114;
      *(_DWORD *)v113 = 136316418;
      v212 = v110;
      v236 = v229;
      v237 = v114;
      v115 = sub_10001A9A8(v217);
      v116 = String.init<A>(describing:)(&v236, v115);
      v211 = v112;
      v236 = (_QWORD *)sub_100016940(v116, v117, (uint64_t *)&v237);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, &v237, v113 + 4, v113 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v113 + 12) = 2080;
      swift_bridgeObjectRetain(v101);
      v236 = (_QWORD *)sub_100016940(v214, v101, (uint64_t *)&v237);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, &v237, v113 + 14, v113 + 22);
      swift_bridgeObjectRelease_n(v101, 3);
      *(_WORD *)(v113 + 22) = 2080;
      sub_1003B0B18((char)v225, (uint64_t)v224, v104, v105, v215);
      v119 = v118;
      v121 = v120;
      sub_10001BC14(v104, v105);
      v236 = (_QWORD *)sub_100016940(v119, v121, (uint64_t *)&v237);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, &v237, v113 + 24, v113 + 32);
      swift_bridgeObjectRelease();
      sub_10001BC14(v104, v105);
      *(_WORD *)(v113 + 32) = 2080;
      swift_bridgeObjectRetain(v108);
      v123 = Set.description.getter(v122, &type metadata for String, &protocol witness table for String);
      v125 = v124;
      swift_bridgeObjectRelease();
      v236 = (_QWORD *)sub_100016940(v123, v125, (uint64_t *)&v237);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, &v237, v113 + 34, v113 + 42);
      swift_bridgeObjectRelease_n(v108, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v113 + 42) = 2080;
      v126 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v127 = dispatch thunk of CustomStringConvertible.description.getter(v235, v126);
      v236 = (_QWORD *)sub_100016940(v127, v128, (uint64_t *)&v237);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, &v237, v113 + 44, v113 + 52);
      swift_bridgeObjectRelease();
      v129 = (void (*)(os_log_t, uint64_t))v230[1];
      v129(v107, v235);
      *(_WORD *)(v113 + 52) = 2080;
      v130 = v216;
      v131 = dispatch thunk of CustomStringConvertible.description.getter(v235, v126);
      v236 = (_QWORD *)sub_100016940(v131, v132, (uint64_t *)&v237);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, &v237, v113 + 54, v113 + 62);
      swift_bridgeObjectRelease();
      v129(v130, v235);
      v133 = v212;
      _os_log_impl((void *)&_mh_execute_header, v212, (os_log_type_t)v211, "%s: Sending %s: %s to %s\nin response to %s with identifier: %s", (uint8_t *)v113, 0x3Eu);
      v134 = (uint64_t)v231;
      swift_arrayDestroy(v231, 6, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v134, -1, -1);
      swift_slowDealloc(v113, -1, -1);

      v225 = v129;
      v129(v227, v235);
    }
    else
    {
      sub_10001BC14(v104, v105);

      v135 = (_BYTE *)v230[1];
      ((void (*)(NSObject *, uint64_t))v135)(v216, v69);
      ((void (*)(os_log_t, uint64_t))v135)(v107, v69);
      swift_bridgeObjectRelease_n(v108, 2);
      sub_10001BC14(v104, v105);
      swift_bridgeObjectRelease_n(v101, 2);
      v225 = (void (*)(os_log_t, uint64_t))v135;
      ((void (*)(os_log_t, uint64_t))v135)(v227, v69);
    }
    v71 = &qword_1010EA000;
  }
  v231 = a20;
  v227 = a19;
  v136 = v232;
  if (v71[121] != -1)
    swift_once(&qword_1010EA3C8, sub_100BECC74);
  v137 = type metadata accessor for Logger(0);
  v138 = sub_10001A9E8(v137, (uint64_t)qword_1011B7EC8);
  swift_bridgeObjectRetain_n(v136, 2);
  v224 = (_BYTE *)v138;
  v140 = Logger.logObject.getter(v139);
  v141 = static os_log_type_t.default.getter(v140);
  if (os_log_type_enabled(v140, v141))
  {
    v142 = swift_slowAlloc(22, -1);
    v143 = swift_slowAlloc(64, -1);
    v223 = v143;
    *(_DWORD *)v142 = 136315394;
    v236 = v229;
    v237 = v143;
    v144 = sub_10001A9A8(v217);
    v145 = String.init<A>(describing:)(&v236, v144);
    v236 = (_QWORD *)sub_100016940(v145, v146, (uint64_t *)&v237);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, &v237, v142 + 4, v142 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v142 + 12) = 2080;
    swift_bridgeObjectRetain(v136);
    v147 = Dictionary.description.getter(v136, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v149 = v148;
    swift_bridgeObjectRelease();
    v236 = (_QWORD *)sub_100016940(v147, v149, (uint64_t *)&v237);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, &v237, v142 + 14, v142 + 22);
    swift_bridgeObjectRelease_n(v136, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v140, v141, "%s: IDSSendMessageOptions: %s", (uint8_t *)v142, 0x16u);
    v150 = v223;
    swift_arrayDestroy(v223, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v150, -1, -1);
    swift_slowDealloc(v142, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v136, 2);
  }
  v151 = v218;
  v152 = type metadata accessor for AnalyticsEvent(0);
  v153 = (char *)swift_allocObject(v152, *(unsigned int *)(v152 + 48), *(unsigned __int16 *)(v152 + 52));
  swift_defaultActor_initialize(v153);
  v154 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v153 + 14) = v154;
  UUID.init()(v154);
  v155 = &v153[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v156 = type metadata accessor for DispatchTime(0);
  v157 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v156 - 8) + 56);
  v157(v155, 1, 1, v156);
  v157(&v153[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v156);
  *((_QWORD *)v153 + 15) = 0xD000000000000026;
  *((_QWORD *)v153 + 16) = 0x8000000100ED3120;
  type metadata accessor for Transaction(0);
  v158 = v238[0];
  v160 = v239;
  v159 = v240;
  v161 = v241;
  v162 = swift_allocObject(v227, 56, 7);
  *(_QWORD *)(v162 + 16) = v153;
  *(_BYTE *)(v162 + 24) = v158;
  *(_QWORD *)(v162 + 32) = v160;
  *(_QWORD *)(v162 + 40) = v159;
  *(_QWORD *)(v162 + 48) = v161;
  sub_10001BBBC(v159, v161);
  swift_retain();
  static Transaction.asyncTask(name:block:)("MessagingServiceAnalyticsEvent", 30, 2, v231, v162);
  swift_release();
  isa = v228[8].isa;
  v164 = Data._bridgeToObjectiveC()().super.isa;
  sub_1003B046C((uint64_t)v233);
  swift_bridgeObjectRelease();
  v165 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10047ACFC((uint64_t)v232);
  swift_bridgeObjectRelease();
  v166 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v236 = 0;
  v237 = 0;
  LODWORD(v161) = -[objc_class sendData:toDestinations:priority:options:identifier:error:](isa, "sendData:toDestinations:priority:options:identifier:error:", v164, v165, 300, v166, &v236, &v237);

  v167 = v236;
  v168 = v237;
  v169 = v167;
  v170 = v169;
  if (!(_DWORD)v161)
  {
    _convertNSErrorToError(_:)(v168);

    swift_willThrow(v181);
    swift_release();
    v179 = v151;
    v180 = v234;
    goto LABEL_36;
  }
  v171 = v234;
  if (v169)
  {
    v172 = static String._unconditionallyBridgeFromObjectiveC(_:)(v167);
    v173 = (uint64_t)v221;
    UUID.init(uuidString:)(v172, v174);
    swift_bridgeObjectRelease();
    v175 = v235;
    if (v226(v173, 1, v235) != 1)
    {
      v185 = v230;
      v186 = v222;
      v233 = (unint64_t *)v230[4];
      ((void (*)(_BYTE *, uint64_t, uint64_t))v233)(v222, v173, v175);
      LODWORD(v232) = v238[0];
      v187 = v240;
      v231 = v239;
      v188 = v241;
      v189 = (void (*)(_BYTE *, _BYTE *, uint64_t))v185[2];
      v190 = v220;
      v189(v220, v186, v175);
      sub_10001BBBC(v187, v188);
      v191 = sub_10001BBBC(v187, v188);
      v192 = Logger.logObject.getter(v191);
      v193 = static os_log_type_t.default.getter(v192);
      v194 = v193;
      if (os_log_type_enabled(v192, v193))
      {
        v195 = swift_slowAlloc(32, -1);
        LODWORD(v230) = v194;
        v196 = v195;
        v197 = swift_slowAlloc(96, -1);
        v228 = v197;
        *(_DWORD *)v196 = 136315650;
        v227 = v192;
        v236 = v229;
        v237 = v197;
        v198 = sub_10001A9A8(v217);
        v199 = String.init<A>(describing:)(&v236, v198);
        v236 = (_QWORD *)sub_100016940(v199, v200, (uint64_t *)&v237);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, &v237, v196 + 4, v196 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v196 + 12) = 2080;
        sub_1003B0B18((char)v232, (uint64_t)v231, v187, v188, v215);
        v202 = v201;
        v204 = v203;
        sub_10001BC14(v187, v188);
        v236 = (_QWORD *)sub_100016940(v202, v204, (uint64_t *)&v237);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, &v237, v196 + 14, v196 + 22);
        swift_bridgeObjectRelease();
        sub_10001BC14(v187, v188);
        *(_WORD *)(v196 + 22) = 2080;
        v205 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v206 = v220;
        v207 = dispatch thunk of CustomStringConvertible.description.getter(v235, v205);
        v236 = (_QWORD *)sub_100016940(v207, v208, (uint64_t *)&v237);
        v175 = v235;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, &v237, v196 + 24, v196 + 32);
        swift_bridgeObjectRelease();
        v225(v206, v175);
        v192 = v227;
        _os_log_impl((void *)&_mh_execute_header, v227, (os_log_type_t)v230, "%s: Sent message %s with identifier: %s", (uint8_t *)v196, 0x20u);
        v209 = v228;
        swift_arrayDestroy(v228, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v209, -1, -1);
        swift_slowDealloc(v196, -1, -1);
        sub_10001BC14(v218, v234);
        swift_release();
      }
      else
      {
        sub_10001BC14(v187, v188);
        swift_release();
        sub_10001BC14(v187, v188);
        v225(v190, v175);
        sub_10001BC14(v218, v171);
      }

      ((void (*)(uint64_t, _BYTE *, uint64_t))v233)(v219, v222, v175);
      goto LABEL_37;
    }
    sub_100004048(v173, &qword_1010ED860);
    v176 = sub_1000FE094();
    v177 = swift_allocError(&type metadata for MessagingError, v176, 0, 0);
    *v178 = 0;
    swift_willThrow(v177);
    swift_release();
    v179 = v151;
    v180 = v171;
LABEL_36:
    sub_10001BC14(v179, v180);
LABEL_37:

    return;
  }
  v182 = sub_1000FE094();
  v183 = swift_allocError(&type metadata for MessagingError, v182, 0, 0);
  *v184 = 0;
  swift_willThrow(v183);
  swift_release();
  sub_10001BC14(v151, v171);
}

uint64_t sub_10037F0F8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void (*v15)(_QWORD, _QWORD, _QWORD);
  int v16;
  NSObject *v17;
  void (*v18)(os_log_t, uint64_t);
  _QWORD *v19;
  int v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  char v22[8];
  void (*v23)(os_log_t, uint64_t);
  uint64_t v24;
  unint64_t v25;

  v2 = v0;
  result = sub_10038A4AC(13, 1, 0, 0xE000000000000000, (uint64_t)v22);
  if (!v1)
  {
    v20 = v22[0];
    v4 = v24;
    v18 = v23;
    v5 = v25;
    v6 = sub_1003B0994((uint64_t (*)(void))sub_1003AFF14);
    v7 = sub_1003BA420((uint64_t)v6);
    swift_bridgeObjectRelease();
    v8 = sub_10037B1AC(v7);
    swift_bridgeObjectRelease();
    v9 = dispatch_group_create();
    v10 = sub_10001A9A8(&qword_1010FA248);
    v11 = swift_allocObject(v10, 28, 7);
    *(_DWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 16) = _swiftEmptyArrayStorage;
    v12 = v8[2];
    if (v12)
    {
      swift_bridgeObjectRetain(v8);
      v21 = (void (*)(_QWORD, _QWORD, _QWORD))v5;
      v13 = v8 + 6;
      v19 = v2;
      do
      {
        v15 = (void (*)(_QWORD, _QWORD, _QWORD))*(v13 - 1);
        v14 = *v13;
        v16 = *((unsigned __int8 *)v13 - 16);
        swift_bridgeObjectRetain(*v13);
        dispatch_group_enter(v9);
        swift_bridgeObjectRetain(v14);
        swift_retain();
        v17 = v9;
        sub_1003BC3D8(v20, v18, v4, v21, _swiftEmptyDictionarySingleton, v16, (uint64_t)v15, v14, 0, (void (*)(_QWORD, _QWORD))0x404E000000000000, 0, 1u, (void (*)(_QWORD, _QWORD, _QWORD))&_swiftEmptySetSingleton, (uint64_t)&_swiftEmptySetSingleton, 0, v19, v16, v15, v14,
          v11,
          v17);

        swift_release();
        swift_bridgeObjectRelease_n(v14, 2);
        v13 += 3;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
      v5 = (unint64_t)v21;
    }
    OS_dispatch_group.wait()();
    swift_bridgeObjectRelease();

    swift_release();
    return sub_10001BC14(v4, v5);
  }
  return result;
}

void sub_10037F308(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  NSString v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  NSString v18;
  id v19;
  uint64_t v20;
  char *v21;
  int v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  id v46;
  _OWORD v47[2];
  uint64_t v48[4];

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v2);
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v45 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v41 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v41 - v12;
  v46 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v46, "BOOLForKey:", v14);

  if (v15)
  {
    v16 = sub_10001A9A8(&qword_1010F9FC8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a1, 2, 2, v16);

    return;
  }
  v17 = a1;
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v46, "valueForKey:", v18);

  if (v19)
  {
    _bridgeAnyObjectToAny(_:)(v47, v19);
    swift_unknownObjectRelease(v19);
  }
  else
  {
    memset(v47, 0, sizeof(v47));
  }
  v20 = (uint64_t)v11;
  sub_100005CF0((uint64_t)v47, (uint64_t)v48, (uint64_t *)&unk_1010F6390);
  if (!v48[3])
  {
    sub_100004048((uint64_t)v48, (uint64_t *)&unk_1010F6390);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_14;
  }
  v21 = v13;
  v22 = swift_dynamicCast(v4, v48, (char *)&type metadata for Any + 8, v5, 6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, v22 ^ 1u, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_14:

    sub_100004048((uint64_t)v4, (uint64_t *)&unk_1010EA690);
LABEL_15:
    v38 = sub_10001A9A8(&qword_1010F9FC8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v17, 1, 2, v38);
    return;
  }
  v23 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v23(v13, v4, v5);
  static Date.trustedNow.getter(v20);
  v24 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v20, v13, v5, v24) & 1) == 0)
  {

    v39 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v39(v20, v5);
    v39((uint64_t)v13, v5);
    goto LABEL_15;
  }
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v25 = type metadata accessor for Logger(0);
  sub_10001A9E8(v25, (uint64_t)qword_1011B6748);
  v26 = v45;
  v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 16))(v45, v21, v5);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = swift_slowAlloc(12, -1);
    v43 = v20;
    v31 = (uint8_t *)v30;
    v42 = swift_slowAlloc(32, -1);
    v48[0] = v42;
    v44 = v23;
    *(_DWORD *)v31 = 136446210;
    v41 = v31 + 4;
    v32 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v33 = dispatch thunk of CustomStringConvertible.description.getter(v5, v32);
    *(_QWORD *)&v47[0] = sub_100016940(v33, v34, v48);
    v23 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v47, (char *)v47 + 8, v41, v31 + 12);
    swift_bridgeObjectRelease();
    v35 = *(void (**)(char *, uint64_t))(v6 + 8);
    v35(v26, v5);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Item sharing throttled. Try again after %{public}s", v31, 0xCu);
    v36 = v42;
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v31, -1, -1);

    v37 = v43;
  }
  else
  {

    v35 = *(void (**)(char *, uint64_t))(v6 + 8);
    v35(v26, v5);
    v37 = v20;
  }
  v35((char *)v37, v5);
  v23(v17, v21, v5);
  v40 = sub_10001A9A8(&qword_1010F9FC8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v17, 0, 2, v40);
}

uint64_t sub_10037F868()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;

  v1 = objc_msgSend(*(id *)(v0 + 56), "destination");
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

  }
  else
  {
    v5 = (void *)0x8000000100ED0670;
    v3 = 0xD000000000000011;
  }
  v6 = sub_10001A9A8(&qword_1010FA100);
  v7 = sub_1000193A4(&qword_1010FA108, &qword_1010FA100, byte_100E32390);
  v8._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v6, v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 32;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v6, v7);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 8250;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v3;
  v12._object = v5;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 62;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return 60;
}

uint64_t sub_10037F9C4(double a1, double a2, uint64_t a3, void **a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t inited;
  id v51;
  id v52;
  Class isa;
  id v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  Swift::String v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  id v69;
  id v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  void **v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  void **v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  objc_class *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void **v118;
  uint64_t v119;
  uint64_t v121;
  void **v122;
  id v123;
  unint64_t v124;
  void **v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void **v148;
  uint64_t v149;
  objc_super v150;
  char v151[16];
  _QWORD *v152;
  void **aBlock;
  unint64_t v154;
  uint64_t (*v155)(uint64_t);
  void *v156;
  uint64_t (*v157)(_QWORD);
  uint64_t v158;

  v8 = v7;
  v129 = a7;
  v149 = a6;
  v148 = (void **)type metadata accessor for Date(0);
  v147 = (uint64_t)*(v148 - 1);
  __chkstk_darwin(v148);
  v128 = (uint64_t)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v14);
  v130 = (char *)&v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for UUID(0);
  v133 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v131 = (char *)&v121 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v139);
  v138 = (char *)&v121 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v18);
  v137 = (char *)&v121 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v134 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v136 = (char *)&v121 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v21);
  v23 = (char *)&v121 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8(&qword_1010FAAF0);
  v25 = swift_allocObject(v24, 20, 7);
  *(_QWORD *)(v7 + 40) = v25;
  v140 = v7 + 40;
  v144 = qword_1010F6890;
  *(_QWORD *)(v7 + qword_1010F6890) = 0;
  v141 = qword_1010F6898;
  *(_QWORD *)(v7 + qword_1010F6898) = 0;
  *(_DWORD *)(v25 + 16) = 0;
  v142 = qword_1010F68A0;
  *(_QWORD *)(v7 + qword_1010F68A0) = 0;
  v26 = (uint64_t *)(v7 + qword_1010F68A8);
  *v26 = 0;
  v26[1] = 0;
  v143 = v26;
  v27 = qword_1010F68B0;
  v28 = sub_10001A9A8(&qword_1010FA5B8);
  v29 = *(unsigned int *)(v28 + 48);
  v30 = *(unsigned __int16 *)(v28 + 52);
  v127 = v28;
  swift_allocObject(v28, v29, v30);
  v31 = PassthroughSubject.init()();
  v146 = v27;
  *(_QWORD *)(v7 + v27) = v31;
  v32 = qword_1010F68B8;
  v33 = sub_10001A9A8(&qword_1010FA5C0);
  v34 = *(unsigned int *)(v33 + 48);
  v35 = *(unsigned __int16 *)(v33 + 52);
  v126 = v33;
  swift_allocObject(v33, v34, v35);
  v36 = PassthroughSubject.init()();
  v145 = v32;
  *(_QWORD *)(v7 + v32) = v36;
  *(_QWORD *)(v7 + qword_1010F68C0) = 0;
  *(_QWORD *)(v7 + qword_1010F68C8) = 0;
  *(_QWORD *)(v7 + qword_1010F68D0) = 0;
  *(_QWORD *)(v7 + qword_1010F68E0) = 0;
  v37 = qword_1010F68E8;
  v157 = SharingCircleWildAdvertisementKey.init(key:);
  v158 = 0;
  aBlock = _NSConcreteStackBlock;
  v154 = 1107296256;
  v155 = sub_100016FB8;
  v156 = &unk_101074868;
  v38 = _Block_copy(&aBlock);
  v152 = _swiftEmptyArrayStorage;
  v39 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v40 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v41 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v152, v40, v41, v21, v39);
  v42 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  v43 = v38;
  v44 = v149;
  v45 = DispatchWorkItem.init(flags:block:)(v23, v43);
  *(_QWORD *)(v7 + v37) = v45;
  *(_QWORD *)(v7 + qword_1010F68F0) = 0;
  static Date.distantPast.getter(v45);
  *(_BYTE *)(v7 + qword_1010F6900) = 0;
  v46 = *(_QWORD *)(v44 + 16);
  v47 = *(_QWORD *)(v44 + 24);
  swift_bridgeObjectRetain(v47);
  v48 = (void *)sub_1002F06D0(v46, v47);
  swift_bridgeObjectRelease();
  if (!v48)
  {
    swift_bridgeObjectRelease();
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v79 = type metadata accessor for Logger(0);
    sub_10001A9E8(v79, (uint64_t)qword_1011B7EC8);
    v80 = swift_retain();
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.error.getter(v81);
    if (os_log_type_enabled(v81, v82))
    {
      v83 = (uint8_t *)swift_slowAlloc(12, -1);
      v84 = (void **)swift_slowAlloc(32, -1);
      aBlock = v84;
      *(_DWORD *)v83 = 136446210;
      v85 = v44;
      v86 = *(_QWORD *)(v44 + 16);
      v87 = *(_QWORD *)(v85 + 24);
      swift_bridgeObjectRetain(v87);
      v152 = (_QWORD *)sub_100016940(v86, v87, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &aBlock, v83 + 4, v83 + 12);
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "Unable to obtain account for service: %{public}s", v83, 0xCu);
      swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v83, -1, -1);

      swift_release();
    }
    else
    {

      swift_release_n(v44, 2);
    }
    v93 = v148;
    v94 = v147;
    v95 = v143;
    v96 = v141;
    goto LABEL_24;
  }
  v49 = sub_10001A9A8(&qword_1010FA5C8);
  inited = swift_initStackObject(v49, v151);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  aBlock = a4;
  v154 = a5;
  v51 = v48;
  swift_bridgeObjectRetain(a5);
  AnyHashable.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String);
  sub_100CA8420(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, &type metadata for AnyHashable);
  v52 = objc_allocWithZone((Class)IDSSession);
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v54 = objc_msgSend(v52, "initWithAccount:destinations:transportType:", v51, isa, 0);

  if (!v54)
  {
    swift_bridgeObjectRelease();
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v88 = type metadata accessor for Logger(0);
    v89 = sub_10001A9E8(v88, (uint64_t)qword_1011B7EC8);
    v90 = Logger.logObject.getter(v89);
    v91 = static os_log_type_t.error.getter(v90);
    if (os_log_type_enabled(v90, v91))
    {
      v92 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v92 = 0;
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "Unable to create IDSSession!", v92, 2u);
      swift_slowDealloc(v92, -1, -1);

      swift_release();
    }
    else
    {

      swift_release();
    }
    v93 = v148;
    v94 = v147;
    v95 = v143;
    v96 = v141;
    goto LABEL_24;
  }
  v123 = v51;
  v122 = a4;
  v124 = a5;
  v140 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  aBlock = 0;
  v154 = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  aBlock = (void **)0xD00000000000002BLL;
  v154 = 0x8000000100ED06C0;
  v55 = v44;
  v56 = *(_QWORD *)(v44 + 16);
  v57 = *(void **)(v44 + 24);
  swift_bridgeObjectRetain(v57);
  v58._countAndFlagsBits = v56;
  v58._object = v57;
  String.append(_:)(v58);
  swift_bridgeObjectRelease();
  v59 = v154;
  v125 = aBlock;
  v60 = v136;
  v61 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v134 + 104))(v136, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v135);
  v62 = v137;
  static DispatchQoS.unspecified.getter(v61);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v63 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v64 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v65 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  v66 = v138;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v64, v65, v139, v63);
  v67 = v59;
  v68 = v55;
  *(_QWORD *)(v8 + 48) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v125, v67, v62, v66, v60, 0);
  *(_QWORD *)(v8 + 56) = v54;
  *(_QWORD *)(v8 + qword_1010F6888) = v55;
  swift_retain();
  v69 = v54;
  v70 = objc_msgSend(v69, "sessionID");
  if (!v70)
  {

    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_17;
  }
  v71 = v70;
  v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
  v74 = v73;

  v75 = v130;
  UUID.init(uuidString:)(v72, v74);
  v76 = (uint64_t)v75;
  swift_bridgeObjectRelease();
  v77 = v133;
  v78 = v132;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v76, 1, v132) == 1)
  {

    swift_bridgeObjectRelease();
    swift_release();
    sub_100004048(v76, &qword_1010ED860);
LABEL_17:
    swift_release();

    v93 = v148;
    v94 = v147;
    v95 = v143;
    v96 = v141;
LABEL_24:
    swift_release();
    swift_release();

    swift_release();
    sub_10001D8A8(*v95, v95[1]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, void **))(v94 + 8))(v8 + qword_1010F68F8, v93);
    v119 = sub_10001A9A8(&qword_1010FA100);
    swift_deallocPartialClassInstance(v8, v119, *(unsigned int *)(*(_QWORD *)v8 + 48), *(unsigned __int16 *)(*(_QWORD *)v8 + 52));
    return 0;
  }
  v97 = v131;
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 32))(v131, v76, v78);
  (*(void (**)(uint64_t, char *, uint64_t))(v77 + 16))(v8 + qword_1011B6CF0, v97, v78);
  aBlock = *(void ***)(v8 + v145);
  v98 = sub_1000193A4(&qword_1010FA5D0, &qword_1010FA5C0, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  *(_QWORD *)(v8 + qword_1011B6D00) = Publisher.eraseToAnyPublisher()(v126, v98);
  aBlock = *(void ***)(v8 + v146);
  v99 = sub_1000193A4(&qword_1010FA5D8, &qword_1010FA5B8, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  *(_QWORD *)(v8 + qword_1011B6CF8) = Publisher.eraseToAnyPublisher()(v127, v99);
  v100 = v128;
  static Date.trustedNow.getter(v128);
  (*(void (**)(uint64_t, uint64_t, void **))(v147 + 32))(v8 + qword_1010F68D8, v100, v148);
  *(double *)(v8 + 16) = a1;
  *(double *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = v129;
  v101 = (objc_class *)type metadata accessor for MessagingSessionDelegateTrampoline();
  v102 = (char *)objc_allocWithZone(v101);
  v103 = &v102[OBJC_IVAR____TtC12searchpartyd34MessagingSessionDelegateTrampoline_delegate];
  *((_QWORD *)v103 + 1) = 0;
  v104 = swift_unknownObjectWeakInit(v103, 0);
  *(_QWORD *)(v104 + 8) = &off_1010686C0;
  swift_unknownObjectWeakAssign(v104, v8);
  v150.receiver = v102;
  v150.super_class = v101;
  v105 = objc_msgSendSuper2(&v150, "init");
  v106 = qword_1010F6898;
  v107 = *(void **)(v8 + qword_1010F6898);
  *(_QWORD *)(v8 + qword_1010F6898) = v105;

  objc_msgSend(v69, "setDelegate:queue:", *(_QWORD *)(v8 + v106), *(_QWORD *)(v8 + 48));
  if (qword_1010EA3C8 != -1)
    swift_once(&qword_1010EA3C8, sub_100BECC74);
  v108 = type metadata accessor for Logger(0);
  sub_10001A9E8(v108, (uint64_t)qword_1011B7EC8);
  swift_retain_n(v68, 2);
  v109 = v124;
  swift_bridgeObjectRetain(v124);
  v110 = swift_retain();
  v111 = Logger.logObject.getter(v110);
  v112 = static os_log_type_t.default.getter(v111);
  if (os_log_type_enabled(v111, v112))
  {
    v113 = swift_slowAlloc(32, -1);
    v148 = (void **)swift_slowAlloc(96, -1);
    aBlock = v148;
    *(_DWORD *)v113 = 136446722;
    v114 = sub_10037F868();
    v152 = (_QWORD *)sub_100016940(v114, v115, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &aBlock, v113 + 4, v113 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v113 + 12) = 2080;
    swift_bridgeObjectRetain(v109);
    v152 = (_QWORD *)sub_100016940((uint64_t)v122, v109, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &aBlock, v113 + 14, v113 + 22);
    swift_bridgeObjectRelease_n(v109, 3);
    *(_WORD *)(v113 + 22) = 2082;
    v116 = *(_QWORD *)(v68 + 16);
    v117 = *(_QWORD *)(v68 + 24);
    swift_bridgeObjectRetain(v117);
    v152 = (_QWORD *)sub_100016940(v116, v117, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &aBlock, v113 + 24, v113 + 32);
    swift_release_n(v68, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v111, v112, "Created new session: %{public}s for destination: %s service: %{public}s", (uint8_t *)v113, 0x20u);
    v118 = v148;
    swift_arrayDestroy(v148, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v118, -1, -1);
    swift_slowDealloc(v113, -1, -1);

    swift_release();
    (*(void (**)(char *, uint64_t))(v133 + 8))(v131, v132);
  }
  else
  {

    swift_release();
    swift_bridgeObjectRelease_n(v109, 2);

    swift_release_n(v68, 3);
    (*(void (**)(char *, uint64_t))(v133 + 8))(v131, v78);
  }
  return v8;
}

uint64_t sub_100380A24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v52 = a2;
  v4 = sub_10001A9A8(&qword_1010FA5A8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BeaconSharingSessionContext(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v54 = a1;
  v11 = *(_QWORD *)(a1 + qword_1010F68A0);
  if (v11)
  {
    v53 = v2;
    v12 = qword_1010EA3C8;
    swift_retain();
    if (v12 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v13 = type metadata accessor for Logger(0);
    sub_10001A9E8(v13, (uint64_t)qword_1011B7EC8);
    v14 = swift_retain();
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.info.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v57 = v18;
      *(_DWORD *)v17 = 136315138;
      v19 = sub_10037F868();
      v55 = sub_100016940(v19, v20, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v17 + 4, v17 + 12);
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s: Returning existing inviteFuture", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

    }
    else
    {

      swift_release();
    }
    v57 = v11;
    v31 = sub_10001A9A8(&qword_1010FA588);
    v32 = sub_1000193A4(&qword_1010FA590, &qword_1010FA588, (const char *)&protocol conformance descriptor for Future<A, B>);
    v30 = Publisher.eraseToAnyPublisher()(v31, v32);
    goto LABEL_10;
  }
  v50 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = qword_1010F68A0;
  v21 = type metadata accessor for PropertyListEncoder(0);
  v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  PropertyListEncoder.init()(v22);
  v23 = sub_100006204(&qword_1010F8158, type metadata accessor for BeaconSharingSessionContext, (uint64_t)&unk_100E37A90);
  v24 = v52;
  v25 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v52, v8, v23);
  if (!v2)
  {
    v49 = v25;
    v53 = 0;
    v34 = v26;
    swift_release();
    v35 = swift_allocObject(&unk_1010747D8, 24, 7);
    v36 = v54;
    swift_weakInit(v35 + 16, v54);
    v37 = v50;
    sub_10005972C(v24, v50, type metadata accessor for BeaconSharingSessionContext);
    v38 = *(unsigned __int8 *)(v9 + 80);
    v39 = (v38 + 24) & ~v38;
    v40 = (v10 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    v41 = swift_allocObject(&unk_101074800, v40 + 16, v38 | 7);
    *(_QWORD *)(v41 + 16) = v35;
    sub_1000126EC(v37, v41 + v39, type metadata accessor for BeaconSharingSessionContext);
    v42 = (uint64_t *)(v41 + v40);
    v43 = v49;
    *v42 = v49;
    v42[1] = v34;
    v44 = sub_10001A9A8(&qword_1010FA588);
    swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
    sub_10001BBBC(v43, v34);
    v46 = Future.init(_:)(sub_1003D9198, v41, v45);
    *(_QWORD *)(v36 + v51) = v46;
    swift_retain();
    swift_release();
    v57 = v46;
    v47 = sub_1000193A4(&qword_1010FA590, &qword_1010FA588, (const char *)&protocol conformance descriptor for Future<A, B>);
    v30 = Publisher.eraseToAnyPublisher()(v44, v47);
    sub_10001BC14(v43, v34);
LABEL_10:
    swift_release();
    return v30;
  }
  swift_errorRelease(v2);
  swift_release();
  v57 = 3;
  v27 = sub_10001A9A8(&qword_1010FA100);
  v28 = sub_1000FE094();
  Fail.init(error:)(&v57, v27, &type metadata for MessagingError, v28);
  v29 = sub_1000193A4(&qword_1010FA5B0, &qword_1010FA5A8, (const char *)&protocol conformance descriptor for Fail<A, B>);
  v30 = Publisher.eraseToAnyPublisher()(v4, v29);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v30;
}

void sub_100380EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t Strong;
  uint64_t v20;
  uint64_t v21;
  uint64_t (**v22)(uint64_t, char);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  Class isa;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[24];

  v12 = type metadata accessor for BeaconSharingSessionContext(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)v37 - v16;
  v18 = swift_allocObject(&unk_101074828, 32, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  a3 += 16;
  swift_beginAccess(a3, v40, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    v20 = Strong;
    v37[2] = a5;
    v21 = swift_allocObject(&unk_101074850, 32, 7);
    *(_QWORD *)(v21 + 16) = sub_1002939C0;
    *(_QWORD *)(v21 + 24) = v18;
    v22 = (uint64_t (**)(uint64_t, char))(v20 + qword_1010F68A8);
    v23 = *(_QWORD *)(v20 + qword_1010F68A8);
    v24 = *(_QWORD *)(v20 + qword_1010F68A8 + 8);
    *v22 = sub_1003D9200;
    v22[1] = (uint64_t (*)(uint64_t, char))v21;
    swift_retain();
    sub_10001D8A8(v23, v24);
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v25 = type metadata accessor for Logger(0);
    sub_10001A9E8(v25, (uint64_t)qword_1011B7EC8);
    sub_10005972C(a4, (uint64_t)v17, type metadata accessor for BeaconSharingSessionContext);
    v26 = swift_retain();
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(22, -1);
      v37[0] = swift_slowAlloc(64, -1);
      v39 = v37[0];
      *(_DWORD *)v29 = 136446466;
      v37[1] = a6;
      v30 = sub_10037F868();
      v38 = sub_100016940(v30, v31, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v29 + 4, v29 + 12);
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      sub_10005972C((uint64_t)v17, (uint64_t)v15, type metadata accessor for BeaconSharingSessionContext);
      v32 = String.init<A>(describing:)(v15, v12);
      v38 = sub_100016940(v32, v33, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v29 + 14, v29 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v17, type metadata accessor for BeaconSharingSessionContext);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s: Sending invitation with context: [%s]", (uint8_t *)v29, 0x16u);
      v34 = v37[0];
      swift_arrayDestroy(v37[0], 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      swift_release();
      sub_1000126B0((uint64_t)v17, type metadata accessor for BeaconSharingSessionContext);
    }

    v35 = *(id *)(v20 + 56);
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v35, "sendInvitationWithData:declineOnError:", isa, 1);
    swift_release();

  }
  else
  {
    swift_retain();
    swift_release();
  }
}

void sub_100381264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, SEL *a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  Class isa;
  uint64_t v27;
  SEL *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v31 = a5;
  v32 = a3;
  v33 = a4;
  v30 = type metadata accessor for BeaconSharingSessionContext(0);
  v10 = __chkstk_darwin(v30);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v27 - v13;
  if (qword_1010EA3C8 != -1)
    swift_once(&qword_1010EA3C8, sub_100BECC74);
  v15 = type metadata accessor for Logger(0);
  sub_10001A9E8(v15, (uint64_t)qword_1011B7EC8);
  sub_10005972C(a2, (uint64_t)v14, type metadata accessor for BeaconSharingSessionContext);
  v16 = swift_retain();
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(22, -1);
    v27 = swift_slowAlloc(64, -1);
    v36 = v27;
    *(_DWORD *)v19 = 136446466;
    v28 = a6;
    v20 = sub_10037F868();
    v34 = sub_100016940(v20, v21, &v36);
    v29 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v19 + 4, v19 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    sub_10005972C((uint64_t)v14, (uint64_t)v12, type metadata accessor for BeaconSharingSessionContext);
    v22 = String.init<A>(describing:)(v12, v30);
    v34 = sub_100016940(v22, v23, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease();
    a6 = v28;
    sub_1000126B0((uint64_t)v14, type metadata accessor for BeaconSharingSessionContext);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, v31, (uint8_t *)v19, 0x16u);
    v24 = v27;
    swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    swift_release();
    sub_1000126B0((uint64_t)v14, type metadata accessor for BeaconSharingSessionContext);
  }

  v25 = *(void **)(a1 + 56);
  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v25, *a6, isa);

}

uint64_t sub_100381524(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t aBlock;
  _QWORD v48[5];

  v2 = v1;
  v4 = *v1;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v45 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  result = __chkstk_darwin(v8);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v2[29])
  {
    v40 = v2[29];
    v41 = v12;
    v42 = v10;
    v43 = result;
    v44 = v7;
    v13 = qword_1010EA3C8;
    v39 = v2[30];
    swift_retain();
    if (v13 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v14 = type metadata accessor for Logger(0);
    sub_10001A9E8(v14, (uint64_t)qword_1011B7EC8);
    v15 = swift_retain_n(a1, 2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc(22, -1);
      v38 = (_QWORD *)swift_slowAlloc(64, -1);
      v46 = v38;
      aBlock = v4;
      *(_DWORD *)v18 = 136315394;
      v19 = sub_10001A9A8(&qword_1010F9F18);
      v20 = String.init<A>(describing:)(&aBlock, v19);
      aBlock = sub_100016940(v20, v21, (uint64_t *)&v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v48, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2082;
      v22 = sub_10037F868();
      v23 = v5;
      v25 = v24;
      swift_release();
      aBlock = sub_100016940(v22, v25, (uint64_t *)&v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v48, v18 + 14, v18 + 22);
      swift_release();
      v5 = v23;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s: invalidated %{public}s", (uint8_t *)v18, 0x16u);
      v26 = v38;
      swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

      swift_release_n(a1, 2);
    }
    v27 = (_QWORD *)swift_allocObject(&unk_101072898, 40, 7);
    v28 = v39;
    v29 = v40;
    v27[2] = v40;
    v27[3] = v28;
    v27[4] = a1;
    v48[3] = sub_100016FE4;
    v48[4] = v27;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v48[0] = 1107296256;
    v48[1] = sub_100016FB8;
    v48[2] = &unk_1010728B0;
    v30 = _Block_copy(&aBlock);
    sub_10001D898(v29, v28);
    v31 = swift_retain();
    v32 = v41;
    static DispatchQoS.unspecified.getter(v31);
    v46 = _swiftEmptyArrayStorage;
    v33 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v34 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v35 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v36 = v44;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v34, v35, v5, v33);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v32, v36, v30);
    _Block_release(v30);
    sub_10001D8A8(v29, v28);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v36, v5);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v32, v43);
    return swift_release();
  }
  return result;
}

uint64_t sub_100381924(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  os_log_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t *v49;
  os_log_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F7A08);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v48 - v9;
  v11 = *(_QWORD *)(v1 + qword_1010F6890);
  if (v11)
  {
    v12 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v13 = swift_retain();
    v1 = PropertyListEncoder.init()(v13);
    v14 = sub_1000193A4(&qword_1010FA510, &qword_1010F7A08, protocol conformance descriptor for SessionMessage<A>);
    v15 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a1, v5, v14);
    if (v2)
    {
      swift_release();
      swift_release();
    }
    else
    {
      v20 = v15;
      v54 = v16;
      swift_release();
      if (qword_1010EA3C8 != -1)
        swift_once(&qword_1010EA3C8, sub_100BECC74);
      v21 = type metadata accessor for Logger(0);
      sub_10001A9E8(v21, (uint64_t)qword_1011B7EC8);
      sub_10000F9B8(a1, (uint64_t)v10, &qword_1010F7A08);
      v22 = swift_retain_n(v3, 4);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.info.getter(v23);
      v25 = v24;
      if (os_log_type_enabled(v23, v24))
      {
        v26 = swift_slowAlloc(32, -1);
        v51 = v25;
        v27 = v26;
        v52 = swift_slowAlloc(96, -1);
        v57 = v52;
        *(_DWORD *)v27 = 136446722;
        v53 = v20;
        v50 = v23;
        v28 = sub_10037F868();
        v55 = sub_100016940(v28, v29, &v57);
        v49 = &v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v27 + 4, v27 + 12);
        swift_release_n(v3, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 12) = 2082;
        sub_10000F9B8((uint64_t)v10, (uint64_t)v8, &qword_1010F7A08);
        sub_100004048((uint64_t)v10, &qword_1010F7A08);
        v30 = sub_10037BB34();
        v32 = v31;
        sub_100004048((uint64_t)v8, &qword_1010F7A08);
        v55 = sub_100016940(v30, v32, &v57);
        v33 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v49, v27 + 14, v27 + 22);
        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 22) = 2082;
        swift_release();
        v34 = type metadata accessor for UUID(0);
        v35 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v36 = v34;
        v20 = v53;
        v37 = dispatch thunk of CustomStringConvertible.description.getter(v36, v35);
        v55 = sub_100016940(v37, v38, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v33, v27 + 24, v27 + 32);
        swift_release();
        swift_bridgeObjectRelease();
        v39 = v50;
        _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v51, "%{public}s: Sending: %{public}s over session: %{public}s", (uint8_t *)v27, 0x20u);
        v40 = v52;
        swift_arrayDestroy(v52, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v27, -1, -1);

      }
      else
      {
        swift_release();
        sub_100004048((uint64_t)v10, &qword_1010F7A08);

        swift_release_n(v3, 3);
      }
      v41 = swift_allocObject(&unk_101072910, 24, 7);
      swift_weakInit(v41 + 16, v11);
      v42 = (_QWORD *)swift_allocObject(&unk_101074378, 40, 7);
      v42[2] = v41;
      v42[3] = v20;
      v43 = v54;
      v42[4] = v54;
      v44 = sub_10001A9A8(&qword_1010F6A10);
      swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
      sub_10001BBBC(v20, v43);
      v57 = Future.init(_:)(sub_1003D9B78, v42, v45);
      v46 = sub_1000193A4(qword_1010F6A18, &qword_1010F6A10, (const char *)&protocol conformance descriptor for Future<A, B>);
      v1 = Publisher.eraseToAnyPublisher()(v44, v46);
      swift_release();
      sub_10001BC14(v20, v43);
      swift_release();
    }
  }
  else
  {
    v17 = sub_1000FE094();
    v18 = swift_allocError(&type metadata for MessagingError, v17, 0, 0);
    *v19 = 4;
    swift_willThrow(v18);
  }
  return v1;
}

uint64_t sub_100381E1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  _BYTE v44[12];
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = sub_10001A9A8(&qword_1010F69C8);
  __chkstk_darwin(v3);
  v5 = &v44[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_10001A9A8(&qword_1010F69F8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v44[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *(_QWORD *)(v1 + qword_1010F6890);
  if (v10)
  {
    v48 = v1;
    v11 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v12 = swift_retain();
    PropertyListEncoder.init()(v12);
    v13 = sub_1000193A4(&qword_1010F6A08, &qword_1010F69C8, protocol conformance descriptor for SessionMessage<A>);
    v14 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a1, v3, v13);
    v16 = v15;
    swift_release();
    v46 = v16;
    v47 = v10;
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v20 = type metadata accessor for Logger(0);
    sub_10001A9E8(v20, (uint64_t)qword_1011B7EC8);
    sub_10000F9B8(a1, (uint64_t)v5, &qword_1010F69C8);
    v21 = v48;
    v22 = swift_retain_n(v48, 4);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.info.getter(v23);
    v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      v26 = swift_slowAlloc(32, -1);
      v27 = swift_slowAlloc(96, -1);
      v51 = v27;
      *(_DWORD *)v26 = 136446722;
      v45 = v25;
      v28 = sub_10037F868();
      v49 = sub_100016940(v28, v29, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v26 + 4, v26 + 12);
      swift_release_n(v21, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2082;
      v30 = sub_10037B948();
      v49 = sub_100016940(v30, v31, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease();
      sub_100004048((uint64_t)v5, &qword_1010F69C8);
      *(_WORD *)(v26 + 22) = 2082;
      swift_release();
      v32 = type metadata accessor for UUID(0);
      v33 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v32, v33);
      v49 = sub_100016940(v34, v35, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v26 + 24, v26 + 32);
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v45, "%{public}s: Sending (Internal): %{public}s over session: %{public}s", (uint8_t *)v26, 0x20u);
      swift_arrayDestroy(v27, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {
      swift_release_n(v21, 3);
      sub_100004048((uint64_t)v5, &qword_1010F69C8);

      swift_release();
    }
    v36 = v14;
    v37 = v46;
    v38 = swift_allocObject(&unk_101072910, 24, 7);
    swift_weakInit(v38 + 16, v47);
    v39 = (_QWORD *)swift_allocObject(&unk_101072938, 40, 7);
    v39[2] = v38;
    v39[3] = v36;
    v39[4] = v37;
    v40 = sub_10001A9A8(&qword_1010F6A10);
    swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
    sub_10001BBBC(v36, v37);
    v51 = Future.init(_:)(sub_1002F6AF0, v39, v41);
    v42 = sub_1000193A4(qword_1010F6A18, &qword_1010F6A10, (const char *)&protocol conformance descriptor for Future<A, B>);
    v19 = Publisher.eraseToAnyPublisher()(v40, v42);
    swift_release();
    sub_10001BC14(v36, v37);
    swift_release();
  }
  else
  {
    v51 = 4;
    v17 = sub_1000FE094();
    Fail.init(error:)(&v51, &type metadata for () + 1, &type metadata for MessagingError, v17);
    v18 = sub_1000193A4(&qword_1010F6A00, &qword_1010F69F8, (const char *)&protocol conformance descriptor for Fail<A, B>);
    v19 = Publisher.eraseToAnyPublisher()(v6, v18);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  }
  return v19;
}

uint64_t sub_100382394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;

  v1 = type metadata accessor for DispatchTime(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v19 - v6;
  v8 = sub_10001A9A8(&qword_1010F69C8);
  __chkstk_darwin(v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1002F6990, v0, *(_QWORD *)(v0 + 40), &type metadata for () + 1, &type metadata for Bool);
  if ((v20 & 1) == 0)
  {
    v12 = dispatch_group_create();
    sub_10037B4B0(2, 1, 0, 0xE000000000000000, (uint64_t)v10);
    dispatch_group_enter(v12);
    v20 = sub_100381E1C((uint64_t)v10);
    v13 = swift_allocObject(&unk_1010728E8, 32, 7);
    *(_QWORD *)(v13 + 16) = v12;
    *(_QWORD *)(v13 + 24) = v0;
    v14 = v12;
    swift_retain();
    v15 = sub_10001A9A8(&qword_1010F69E8);
    v16 = sub_1000193A4(&qword_1010F69F0, &qword_1010F69E8, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.oneshot(_:)(sub_1003D09B0, v13, v15, v16);
    swift_release();
    v17 = swift_release();
    static DispatchTime.now()(v17);
    + infix(_:_:)(v5, *(double *)(v0 + 24));
    v18 = *(void (**)(char *, uint64_t))(v2 + 8);
    v18(v5, v1);
    OS_dispatch_group.wait(timeout:)(v7);

    v18(v7, v1);
    return sub_100004048((uint64_t)v10, &qword_1010F69C8);
  }
  return result;
}

void sub_1003827AC(unint64_t a1, char a2, dispatch_group_t group, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((a2 & 1) != 0)
  {
    sub_100165D28(a1);
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v7 = type metadata accessor for Logger(0);
    sub_10001A9E8(v7, (uint64_t)qword_1011B7EC8);
    sub_1002F69E0(a1, 1);
    swift_retain();
    sub_1002F69E0(a1, 1);
    v8 = swift_retain();
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc(22, -1);
      v12 = swift_slowAlloc(64, -1);
      v19 = v12;
      *(_DWORD *)v11 = 136446466;
      v13 = sub_10037F868();
      v18 = sub_100016940(v13, v14, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v11 + 4, v11 + 12);
      swift_release_n(a4, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2082;
      v18 = a1;
      v15 = sub_1000FE094();
      v16 = Error.localizedDescription.getter(&type metadata for MessagingError, v15);
      v18 = sub_100016940(v16, v17, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v11 + 14, v11 + 22);
      swift_bridgeObjectRelease();
      sub_1002F69EC(a1, 1);
      sub_1002F69EC(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s: Error sending .shuttingDown: %{public}s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      sub_1002F69EC(a1, 1);
    }
    else
    {
      sub_1002F69EC(a1, 1);
      swift_release_n(a4, 2);
      sub_1002F69EC(a1, 1);
      sub_1002F69EC(a1, 1);

    }
  }
  dispatch_group_leave(group);
}

void sub_100382A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t);
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t (*v90)(uint64_t);
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD aBlock[6];

  v98 = a2;
  v96 = a1;
  v102 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v4 = (uint64_t (*)(uint64_t))((char *)&v85 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v101 = type metadata accessor for DispatchQoS(0);
  v100 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v99 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for DispatchQoS.QoSClass(0);
  v93 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v92 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ShareRecord(0);
  v107 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010FA540);
  v11 = __chkstk_darwin(v10);
  v108 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v111 = (char *)&v85 - v13;
  v14 = type metadata accessor for OwnedBeaconRecord(0);
  v109 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v85 - v18;
  v97 = type metadata accessor for DateInterval(0);
  v95 = *(_QWORD *)(v97 - 8);
  v20 = __chkstk_darwin(v97);
  v115 = (uint64_t)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v116 = (uint64_t)&v85 - v23;
  __chkstk_darwin(v22);
  v117 = (uint64_t)&v85 - v24;
  v25 = type metadata accessor for Date(0);
  v103 = *(_QWORD *)(v25 - 8);
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v85 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v26);
  v31 = (char *)&v85 - v30;
  v32 = (_QWORD *)static os_log_type_t.default.getter(v29);
  if (qword_1010EA250 != -1)
LABEL_47:
    swift_once(&qword_1010EA250, sub_100B5D964);
  v104 = v25;
  os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, qword_1011B7D30, "Distribute keys", 15, 2, _swiftEmptyArrayStorage, v85);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v25 = 0;
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v33 = aBlock[0];
  static Date.trustedNow.getter((uint64_t)v31);
  v34 = sub_100C1AFA4(v33);
  if ((unsigned __int128)(v34 * (__int128)60) >> 64 != (60 * v34) >> 63)
  {
    __break(1u);
    goto LABEL_49;
  }
  v113 = v19;
  v106 = v14;
  v35 = (double)(60 * v34);
  v36 = *(void (**)(char *, char *, uint64_t))(v103 + 16);
  v37 = v104;
  v36(v28, v31, v104);
  DateInterval.init(start:duration:)(v28, v35);
  v34 = sub_100C1AFCC(v33);
  if ((unsigned __int128)(v34 * (__int128)60) >> 64 != (60 * v34) >> 63)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v90 = v4;
  v91 = v2;
  v38 = (double)(60 * v34);
  v36(v28, v31, v37);
  DateInterval.init(start:duration:)(v28, v38);
  v39 = sub_100C1AFB8(v33);
  v34 = swift_bridgeObjectRelease();
  if ((unsigned __int128)(v39 * (__int128)60) >> 64 == (60 * v39) >> 63)
  {
    v89 = v31;
    v36(v28, v31, v37);
    DateInterval.init(start:duration:)(v28, (double)(60 * v39));
    v40 = *(_QWORD *)(v114 + 144);
    v41 = sub_1000188D0();
    v42 = sub_1006B9FF4((uint64_t)_swiftEmptyArrayStorage);
    v43 = *((_QWORD *)v41 + 2);
    if (v43)
    {
      v44 = *(unsigned __int8 *)(v109 + 80);
      v112 = v40;
      v28 = &v41[(v44 + 32) & ~v44];
      v110 = *(_QWORD *)(v109 + 72);
      v105 = (uint64_t)v41;
      swift_bridgeObjectRetain(v41);
      v45 = (uint64_t)v113;
      do
      {
        sub_10005972C((uint64_t)v28, v45, type metadata accessor for OwnedBeaconRecord);
        v46 = sub_10088A6EC();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v42);
        aBlock[0] = v42;
        v48 = (uint64_t)v46;
        v45 = (uint64_t)v113;
        sub_10010C3C0(v48, (uint64_t)v113, isUniquelyReferenced_nonNull_native);
        v42 = aBlock[0];
        swift_bridgeObjectRelease();
        sub_1000126B0(v45, type metadata accessor for OwnedBeaconRecord);
        v28 += v110;
        --v43;
      }
      while (v43);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v49 = swift_allocObject(&unk_101071BF0, 24, 7);
    v50 = 0;
    v88 = v49;
    *(_QWORD *)(v49 + 16) = 0;
    v32 = (_QWORD *)(v49 + 16);
    v110 = v42;
    v52 = *(_QWORD *)(v42 + 64);
    v14 = v42 + 64;
    v51 = v52;
    v53 = 1 << *(_BYTE *)(v14 - 32);
    v54 = -1;
    if (v53 < 64)
      v54 = ~(-1 << v53);
    v55 = v54 & v51;
    v56 = (unint64_t)(v53 + 63) >> 6;
    v85 = v56 - 1;
    v106 = v56;
    v86 = v56 - 5;
    v105 = v14;
    v87 = v14 + 40;
    v19 = (char *)&qword_1010FA548;
    v4 = type metadata accessor for ShareRecord;
    v31 = v108;
    v2 = (uint64_t)v111;
    while (!v55)
    {
      v62 = v50 + 1;
      if (__OFADD__(v50, 1))
      {
        __break(1u);
        goto LABEL_47;
      }
      if (v62 >= v106)
      {
        v113 = (char *)v50;
      }
      else
      {
        v63 = *(_QWORD *)(v105 + 8 * v62);
        if (v63)
          goto LABEL_22;
        if (v50 + 2 >= v106)
        {
          v113 = (char *)(v50 + 1);
        }
        else
        {
          v63 = *(_QWORD *)(v105 + 8 * (v50 + 2));
          if (v63)
          {
            v62 = v50 + 2;
            goto LABEL_22;
          }
          if (v50 + 3 >= v106)
          {
            v113 = (char *)(v50 + 2);
          }
          else
          {
            v63 = *(_QWORD *)(v105 + 8 * (v50 + 3));
            if (v63)
            {
              v62 = v50 + 3;
LABEL_22:
              v112 = (v63 - 1) & v63;
              v113 = (char *)v62;
              v57 = __clz(__rbit64(v63)) + (v62 << 6);
LABEL_18:
              v58 = v110;
              sub_10005972C(*(_QWORD *)(v110 + 48) + *(_QWORD *)(v109 + 72) * v57, (uint64_t)v31, type metadata accessor for OwnedBeaconRecord);
              v59 = *(_QWORD *)(v58 + 56);
              v19 = (char *)&qword_1010FA548;
              v60 = sub_10001A9A8(&qword_1010FA548);
              v61 = *(_QWORD *)(v59 + 8 * v57);
              *(_QWORD *)&v31[*(int *)(v60 + 48)] = v61;
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v31, 0, 1, v60);
              swift_bridgeObjectRetain(v61);
              goto LABEL_25;
            }
            v62 = v50 + 4;
            if (v50 + 4 >= v106)
            {
              v113 = (char *)(v50 + 3);
            }
            else
            {
              v63 = *(_QWORD *)(v105 + 8 * v62);
              if (v63)
                goto LABEL_22;
              while (v86 != v50)
              {
                v63 = *(_QWORD *)(v87 + 8 * v50++);
                if (v63)
                {
                  v62 = v50 + 4;
                  goto LABEL_22;
                }
              }
              v113 = (char *)v85;
            }
          }
        }
      }
      v64 = sub_10001A9A8(&qword_1010FA548);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v31, 1, 1, v64);
      v112 = 0;
LABEL_25:
      sub_100005CF0((uint64_t)v31, v2, &qword_1010FA540);
      v65 = sub_10001A9A8(&qword_1010FA548);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 48))(v2, 1, v65) == 1)
      {
        swift_release();
        sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
        v69 = v93;
        v70 = v92;
        v71 = v94;
        (*(void (**)(char *, _QWORD, uint64_t))(v93 + 104))(v92, enum case for DispatchQoS.QoSClass.default(_:), v94);
        v72 = (void *)static OS_dispatch_queue.global(qos:)(v70);
        (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v71);
        v73 = (_QWORD *)swift_allocObject(&unk_1010746E8, 40, 7);
        v74 = v98;
        v73[2] = v96;
        v73[3] = v74;
        v73[4] = v88;
        aBlock[4] = sub_1003D8D28;
        aBlock[5] = v73;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100016FB8;
        aBlock[3] = &unk_101074700;
        v75 = _Block_copy(aBlock);
        swift_retain();
        v76 = swift_retain();
        v77 = v99;
        static DispatchQoS.unspecified.getter(v76);
        v118 = _swiftEmptyArrayStorage;
        v78 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v79 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v80 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v81 = v90;
        v82 = v102;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v118, v79, v80, v102, v78);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v77, v81, v75);
        _Block_release(v75);

        (*(void (**)(uint64_t (*)(uint64_t), uint64_t))(v91 + 8))(v81, v82);
        (*(void (**)(char *, uint64_t))(v100 + 8))(v77, v101);
        (*(void (**)(char *, uint64_t))(v103 + 8))(v89, v104);
        v83 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
        v84 = v97;
        v83(v115, v97);
        v83(v116, v84);
        v83(v117, v84);
        swift_release();
        swift_release();
        return;
      }
      v28 = *(char **)(v2 + *(int *)(v65 + 48));
      v14 = (uint64_t)type metadata accessor for OwnedBeaconRecord;
      sub_1000126EC(v2, (uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
      v66 = *((_QWORD *)v28 + 2);
      if (v66)
      {
        v67 = (uint64_t)&v28[(*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80)];
        v14 = *(_QWORD *)(v107 + 72);
        do
        {
          sub_10005972C(v67, (uint64_t)v9, type metadata accessor for ShareRecord);
          v68 = objc_autoreleasePoolPush();
          sub_1003A5F8C((uint64_t)v9, v114, v117, (uint64_t)v17, v116, v115, v32);
          objc_autoreleasePoolPop(v68);
          sub_1000126B0((uint64_t)v9, type metadata accessor for ShareRecord);
          v67 += v14;
          --v66;
        }
        while (v66);
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
        v31 = v108;
        v2 = (uint64_t)v111;
        v19 = (char *)&qword_1010FA548;
      }
      else
      {
        sub_1000126B0((uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
        swift_bridgeObjectRelease();
        v2 = (uint64_t)v111;
      }
      v55 = v112;
      v50 = (uint64_t)v113;
    }
    v112 = (v55 - 1) & v55;
    v113 = (char *)v50;
    v57 = __clz(__rbit64(v55)) | (v50 << 6);
    goto LABEL_18;
  }
LABEL_50:
  __break(1u);
  objc_autoreleasePoolPop((void *)v34);
  __break(1u);
}

uint64_t sub_1003835E0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6DF8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6DF8);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x6E496D6574737973, 0xEA00000000006F66);
}

_QWORD *sub_100383658()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(v0 + 344))
  {
    v1 = *(_QWORD **)(v0 + 344);
  }
  else
  {
    v2 = v0;
    v3 = type metadata accessor for CryptoKeyStreamInspector(0);
    swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
    v4 = swift_retain();
    v1 = sub_1005D3C4C(v4);
    swift_release();
    *(_QWORD *)(v2 + 344) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

id sub_1003836DC(uint64_t a1)
{
  id result;
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  char v6;

  result = (id)MobileGestalt_get_current_device(a1);
  if (result)
  {
    v2 = result;
    v3 = (id)MobileGestalt_copy_productType_obj();

    if (v3)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

    }
    v4 = String.lowercased()();
    swift_bridgeObjectRelease();
    v5 = v4;
    sub_1003CDF34();
    sub_1000330C8();
    static PartialMatchCase<>.first(containing:)(&v5);
    swift_bridgeObjectRelease();
    return (id)(v6 != 5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003837B4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  _OWORD v20[10];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[160];

  v2 = sub_1003B0994((uint64_t (*)(void))sub_1003B0894);
  v3 = v2[2];
  if (!v3)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    sub_1003D053C(&v21);
    v18 = &v21;
    goto LABEL_8;
  }
  v4 = *((_OWORD *)v2 + 9);
  v27 = *((_OWORD *)v2 + 8);
  v28 = v4;
  v5 = *((_OWORD *)v2 + 11);
  v29 = *((_OWORD *)v2 + 10);
  v30 = v5;
  v6 = *((_OWORD *)v2 + 5);
  v23 = *((_OWORD *)v2 + 4);
  v24 = v6;
  v7 = *((_OWORD *)v2 + 7);
  v25 = *((_OWORD *)v2 + 6);
  v26 = v7;
  v8 = *((_OWORD *)v2 + 3);
  v21 = *((_OWORD *)v2 + 2);
  v22 = v8;
  if ((BYTE3(v29) & 1) == 0)
  {
    v9 = 24;
    while (--v3)
    {
      v10 = (__int128 *)&v2[v9];
      v9 += 20;
      v11 = v10[1];
      v21 = *v10;
      v22 = v11;
      v12 = v10[2];
      v13 = v10[3];
      v14 = v10[5];
      v25 = v10[4];
      v26 = v14;
      v23 = v12;
      v24 = v13;
      v15 = v10[6];
      v16 = v10[7];
      v17 = v10[9];
      v29 = v10[8];
      v30 = v17;
      v27 = v15;
      v28 = v16;
      if ((BYTE3(v29) & 1) != 0)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v20[6] = v27;
  v20[7] = v28;
  v20[8] = v29;
  v20[9] = v30;
  v20[2] = v23;
  v20[3] = v24;
  v20[4] = v25;
  v20[5] = v26;
  v20[0] = v21;
  v20[1] = v22;
  SharingCircleWildAdvertisementKey.init(key:)(v20);
  sub_10008B118(&v21);
  swift_bridgeObjectRelease();
  v18 = v20;
LABEL_8:
  sub_100005CF0((uint64_t)v18, (uint64_t)v31, &qword_1010FA078);
  return sub_100005CF0((uint64_t)v31, a1, &qword_1010FA078);
}

_QWORD *sub_1003838F8()
{
  return sub_1003B0994((uint64_t (*)(void))sub_1003AFF14);
}

uint64_t sub_100383904(uint64_t a1)
{
  uint64_t v1;

  v1 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  return os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, qword_1011B7D30, "Beacon near owner service started", 33, 2, _swiftEmptyArrayStorage);
}

uint64_t sub_100383978(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    sub_10037BD14(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1003839D4(uint64_t a1)
{
  return sub_1003839F4(a1);
}

uint64_t sub_1003839F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = v1;
  v41 = sub_10001A9A8(&qword_1010FA578);
  v43 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v39 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_10001A9A8(&qword_1010FA580);
  v44 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v40 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BeaconSharingSessionContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_allocObject(&unk_1010720A0, 24, 7);
  swift_weakInit(v10 + 16, v2);
  v34 = a1;
  sub_10005972C(a1, (uint64_t)v9, type metadata accessor for BeaconSharingSessionContext);
  v11 = *(unsigned __int8 *)(v7 + 80);
  v35 = ((v11 + 24) & ~v11) + v8;
  v36 = (v11 + 24) & ~v11;
  v12 = v11 | 7;
  v13 = swift_allocObject(&unk_101074760, v35, v11 | 7);
  *(_QWORD *)(v13 + 16) = v10;
  sub_1000126EC((uint64_t)v9, v13 + ((v11 + 24) & ~v11), type metadata accessor for BeaconSharingSessionContext);
  v14 = sub_10001A9A8(&qword_1010FA588);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v38 = Future.init(_:)(sub_1003D8E34, v13, v15);
  v45 = v38;
  sub_10005972C(a1, (uint64_t)v9, type metadata accessor for BeaconSharingSessionContext);
  v16 = (v11 + 16) & ~v11;
  v17 = swift_allocObject(&unk_101074788, v16 + v8, v11 | 7);
  v18 = sub_1000126EC((uint64_t)v9, v17 + v16, type metadata accessor for BeaconSharingSessionContext);
  v19 = static Subscribers.Demand.unlimited.getter(v18);
  v20 = sub_10001A9A8(&qword_1010FA100);
  v21 = sub_10001A9A8(&qword_1010F7980);
  v22 = sub_1000193A4(&qword_1010FA590, &qword_1010FA588, (const char *)&protocol conformance descriptor for Future<A, B>);
  v23 = sub_1000193A4(&qword_1010F7988, &qword_1010F7980, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v24 = v39;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v19, sub_1003D8F20, v17, v14, v20, v21, v22, v23);
  swift_release();
  v25 = swift_allocObject(&unk_1010720A0, 24, 7);
  swift_weakInit(v25 + 16, v37);
  sub_10005972C(v34, (uint64_t)v9, type metadata accessor for BeaconSharingSessionContext);
  v26 = swift_allocObject(&unk_1010747B0, v35, v12);
  *(_QWORD *)(v26 + 16) = v25;
  sub_1000126EC((uint64_t)v9, v26 + v36, type metadata accessor for BeaconSharingSessionContext);
  v27 = sub_1000193A4(&qword_1010FA598, &qword_1010FA578, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v29 = v40;
  v28 = v41;
  Publisher.map<A>(_:)(sub_1003D9018, v26, v41, v20, v27);
  swift_release();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v24, v28);
  v30 = sub_1000193A4(&qword_1010FA5A0, &qword_1010FA580, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v31 = v42;
  v32 = Publisher.eraseToAnyPublisher()(v42, v30);
  swift_release();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v29, v31);
  return v32;
}

uint64_t sub_100383DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;

  v5[2] = a4;
  v5[3] = a5;
  v7 = sub_10001A9A8(&qword_1010F46C0);
  v5[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100383E1C, a4, 0);
}

uint64_t sub_100383E1C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  swift_retain();
  dispatch thunk of WorkItemQueue.enqueue(_:)(&unk_1010EE128, v1);
  swift_release();
  swift_release();
  swift_release();
  return swift_task_switch(sub_100383E9C, 0, 0);
}

uint64_t sub_100383E9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 1, 1, v4);
  v5 = (_QWORD *)swift_allocObject(&unk_101074738, 48, 7);
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v3;
  v5[5] = v1;
  swift_retain();
  swift_retain();
  sub_100028774(v2, (uint64_t)&unk_1010FA570, (uint64_t)v5);
  swift_release();
  sub_100004048(v2, &qword_1010F46C0);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100383F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5[3] = a4;
  v5[4] = a5;
  v7 = sub_10001A9A8(&qword_1010EE420);
  v5[5] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[6] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[7] = swift_task_alloc(v9);
  v5[8] = swift_task_alloc(v9);
  v10 = sub_10001A9A8(&qword_1010EE428);
  v5[9] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[10] = v11;
  v5[11] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010EE430);
  v5[12] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[13] = v13;
  v5[14] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100384028, a4, 0);
}

uint64_t sub_100384028()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[3];
  v6 = type metadata accessor for Transaction(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v1, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  AsyncStream.init(_:bufferingPolicy:_:)(v6, v2, sub_1000D9C5C, v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  return swift_task_switch(sub_1003840F0, 0, 0);
}

uint64_t sub_1003840F0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[10];
  v1 = v0[11];
  v3 = v0[9];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[15] = v4;
  *v4 = v0;
  v4[1] = sub_100384180;
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v0[12]);
}

uint64_t sub_100384180()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  return swift_task_switch(sub_1003841D4, 0, 0);
}

uint64_t sub_1003841D4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(v0 + 16))
  {
    swift_release();
    v1 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v2 = (_QWORD *)swift_task_alloc(v1);
    *(_QWORD *)(v0 + 128) = v2;
    *v2 = v0;
    v2[1] = sub_1003842A8;
    return unsafeBlocking<A>(_:)(v2, sub_1003D8DE0, *(_QWORD *)(v0 + 32), &type metadata for () + 1);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 112);
    v5 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 56);
    v6 = *(_QWORD *)(v0 + 64);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(v4, *(_QWORD *)(v0 + 96));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003842A8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  swift_release();
  return swift_task_switch(sub_100384308, 0, 0);
}

uint64_t sub_100384308()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 120) = v1;
  *v1 = v0;
  v1[1] = sub_100384180;
  return AsyncStream.Iterator.next(isolation:)(v0 + 16, 0, 0, *(_QWORD *)(v0 + 96));
}

uint64_t sub_10038436C(uint64_t a1)
{
  type metadata accessor for Transaction(0);
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.distributeKeys", 44, 2, sub_1003D8DE8, a1);
}

void sub_1003843D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _BYTE v15[16];
  _BYTE v16[24];

  swift_beginAccess(a12 + 64, v16, 0, 0);
  if ((*(_BYTE *)(a12 + 80) & 1) == 0)
  {
    sub_1003D0C78(a12 + 64, (uint64_t)v15);
    sub_100C3864C(a6, a7, a8, a9, a10, a11);
    sub_1003D0CB4((uint64_t)v15);
  }
}

uint64_t sub_100384478(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v3 = qword_1011B7D30;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E22B00;
  v6 = sub_1003D0C34();
  swift_bridgeObjectRetain(a1);
  v8 = Set.description.getter(v7, &type metadata for MessagingAccount, v6);
  v10 = v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_10001AA00();
  *(_QWORD *)(v5 + 32) = v8;
  *(_QWORD *)(v5 + 40) = v10;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "Message accounts changed %@.", 28, 2, v5);
  v11 = swift_bridgeObjectRelease();
  return PassthroughSubject.send(_:)(v11);
}

uint64_t sub_100384590(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v3 = qword_1011B7D30;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E22B00;
  swift_bridgeObjectRetain(a1);
  v7 = Array.description.getter(v6, &type metadata for MessagingDevice);
  v9 = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_10001AA00();
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v9;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "Messaging devices changed %@.", 29, 2, v5);
  swift_bridgeObjectRelease();
  v11 = a1;
  return CurrentValueSubject.send(_:)(&v11);
}

void sub_1003846AC(uint64_t a1, int a2, void (*a3)(char *, uint64_t), void *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t EnumCaseMultiPayload;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  void *v98;
  id v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  uint8_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t KeyPath;
  _QWORD *v129;
  uint64_t v130;
  uint64_t (*v131)(uint64_t, uint64_t, uint64_t);
  int v132;
  void (*v133)(char *, uint64_t);
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint8_t *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  NSObject *v152;
  os_log_type_t v153;
  uint8_t *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  NSObject *v183;
  os_log_type_t v184;
  uint8_t *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  void (*v232)(char *, uint64_t, uint64_t);
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  _QWORD *v237;
  void (*v238)(char *, uint64_t);
  uint64_t v239;
  id v240;
  uint64_t aBlock[6];
  _QWORD *v242;
  char v243[8];

  v238 = a3;
  LODWORD(v232) = a2;
  v226 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  __chkstk_darwin(v226);
  v227 = (char *)&v208 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ED860);
  v10 = __chkstk_darwin(v9);
  v221 = (uint64_t)&v208 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v231 = (uint64_t)&v208 - v13;
  __chkstk_darwin(v12);
  v230 = (uint64_t *)((char *)&v208 - v14);
  v233 = type metadata accessor for UUID(0);
  v235 = *(_QWORD *)(v233 - 8);
  v15 = __chkstk_darwin(v233);
  v210 = (char *)&v208 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v225 = (char *)&v208 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v208 - v19;
  v220 = type metadata accessor for DispatchWorkItemFlags(0);
  v219 = *(_QWORD *)(v220 - 8);
  __chkstk_darwin(v220);
  v218 = (char *)&v208 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = type metadata accessor for DispatchQoS(0);
  v216 = *(_QWORD *)(v217 - 8);
  __chkstk_darwin(v217);
  v215 = (char *)&v208 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for BeaconSharingSessionContext(0);
  v213 = *(_QWORD *)(v23 - 8);
  v24 = *(_QWORD *)(v213 + 64);
  v25 = __chkstk_darwin(v23);
  v223 = (char *)&v208 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v25);
  v224 = (uint64_t)&v208 - v27;
  v28 = __chkstk_darwin(v26);
  v211 = (uint64_t)&v208 - v29;
  v30 = __chkstk_darwin(v28);
  v222 = (char *)&v208 - v31;
  v32 = __chkstk_darwin(v30);
  v214 = (uint64_t)&v208 - v33;
  v34 = __chkstk_darwin(v32);
  v212 = (uint64_t)&v208 - v35;
  v36 = __chkstk_darwin(v34);
  v237 = (uint64_t *)((char *)&v208 - v37);
  __chkstk_darwin(v36);
  v39 = (char *)&v208 - v38;
  if (qword_1010E9B48 != -1)
    swift_once(&qword_1010E9B48, sub_100308748);
  v40 = type metadata accessor for Logger(0);
  v41 = (void *)sub_10001A9E8(v40, (uint64_t)qword_1011B6D08);
  sub_10005972C(a1, (uint64_t)v39, type metadata accessor for BeaconSharingSessionContext);
  swift_bridgeObjectRetain_n(a4, 2);
  v42 = swift_retain_n(a5, 2);
  v240 = v41;
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.default.getter(v43);
  v45 = os_log_type_enabled(v43, v44);
  v234 = a5;
  v239 = v23;
  if (v45)
  {
    v46 = swift_slowAlloc(32, -1);
    v236 = v20;
    v47 = v46;
    v209 = swift_slowAlloc(96, -1);
    aBlock[0] = v209;
    *(_DWORD *)v47 = 136315650;
    v228 = a1;
    v48 = sub_100342C70();
    v242 = (_QWORD *)sub_100016940(v48, v49, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, v243, v47 + 4, v47 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v39, type metadata accessor for BeaconSharingSessionContext);
    *(_WORD *)(v47 + 12) = 2080;
    swift_bridgeObjectRetain(a4);
    v242 = (_QWORD *)sub_100016940((uint64_t)v238, (unint64_t)a4, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, v243, v47 + 14, v47 + 22);
    swift_bridgeObjectRelease_n(a4, 3);
    *(_WORD *)(v47 + 22) = 2080;
    swift_retain();
    v50 = sub_10037F868();
    v52 = v51;
    swift_release();
    v242 = (_QWORD *)sub_100016940(v50, v52, aBlock);
    a1 = v228;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, v243, v47 + 24, v47 + 32);
    swift_release_n(a5, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "sessionInvitationReceived: context: %s from: %s session: %s", (uint8_t *)v47, 0x20u);
    v53 = v209;
    swift_arrayDestroy(v209, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    v54 = v47;
    v20 = v236;
    v23 = v239;
    swift_slowDealloc(v54, -1, -1);

  }
  else
  {
    sub_1000126B0((uint64_t)v39, type metadata accessor for BeaconSharingSessionContext);

    swift_release_n(a5, 2);
    swift_bridgeObjectRelease_n(a4, 2);
  }
  v55 = v237;
  sub_10005972C(a1, (uint64_t)v237, type metadata accessor for BeaconSharingSessionContext);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v55, v23);
  if (!(_DWORD)EnumCaseMultiPayload)
  {
    v64 = Logger.logObject.getter(EnumCaseMultiPayload);
    v65 = static os_log_type_t.error.getter(v64);
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Unexpected .incoming context!", v66, 2u);
      swift_slowDealloc(v66, -1, -1);
    }

    v67 = (uint64_t)v55;
    goto LABEL_59;
  }
  if ((_DWORD)EnumCaseMultiPayload != 1)
  {
    v68 = v235;
    v69 = *(void (**)(char *, uint64_t, uint64_t))(v235 + 32);
    v70 = v233;
    v69(v20, (uint64_t)v55, v233);
    v71 = sub_1003BF428((int)v232, (uint64_t)v238, (uint64_t)a4);
    v236 = v20;
    if ((v71 & 1) == 0)
    {
      v110 = v224;
      sub_10005972C(a1, v224, type metadata accessor for BeaconSharingSessionContext);
      swift_bridgeObjectRetain_n(a4, 2);
      v112 = Logger.logObject.getter(v111);
      v113 = static os_log_type_t.error.getter(v112);
      if (os_log_type_enabled(v112, v113))
      {
        v114 = swift_slowAlloc(22, -1);
        v115 = swift_slowAlloc(64, -1);
        v228 = a1;
        v116 = v115;
        aBlock[0] = v115;
        *(_DWORD *)v114 = 136315394;
        v117 = sub_100342C70();
        v242 = (_QWORD *)sub_100016940(v117, v118, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, v243, v114 + 4, v114 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v110, type metadata accessor for BeaconSharingSessionContext);
        *(_WORD *)(v114 + 12) = 2080;
        sub_1008A4DC4(v232, (uint64_t)v238, a4);
        v242 = (_QWORD *)sub_100016940(v119, v120, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, v243, v114 + 14, v114 + 22);
        swift_bridgeObjectRelease_n(a4, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v112, v113, "Declining incoming %s invitation because not from a family member: %s", (uint8_t *)v114, 0x16u);
        swift_arrayDestroy(v116, 2, (char *)&type metadata for Any + 8);
        v121 = v116;
        a1 = v228;
        v68 = v235;
        swift_slowDealloc(v121, -1, -1);
        swift_slowDealloc(v114, -1, -1);

      }
      else
      {
        sub_1000126B0(v110, type metadata accessor for BeaconSharingSessionContext);

        swift_bridgeObjectRelease_n(a4, 2);
      }
      v142 = v234;
      v143 = type metadata accessor for PropertyListEncoder(0);
      v144 = swift_allocObject(v143, *(unsigned int *)(v143 + 48), *(unsigned __int16 *)(v143 + 52));
      PropertyListEncoder.init()(v144);
      v145 = sub_100006204(&qword_1010F8158, type metadata accessor for BeaconSharingSessionContext, (uint64_t)&unk_100E37A90);
      v146 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a1, v239, v145);
      v147 = v236;
      v159 = v146;
      v161 = v160;
      v162 = swift_release();
      __chkstk_darwin(v162);
      *(&v208 - 4) = v142;
      *(&v208 - 3) = a1;
      *(&v208 - 2) = v159;
      *(&v208 - 1) = v161;
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1003D07D0, &v208 - 6, v163, &type metadata for () + 1, &type metadata for () + 1);
      sub_10001BC14(v159, v161);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v147, v70);
      return;
    }
    v232 = v69;
    v72 = v225;
    v237 = *(_QWORD **)(v68 + 16);
    v73 = ((uint64_t (*)(char *, char *, uint64_t))v237)(v225, v20, v70);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.debug.getter(v74);
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc(12, -1);
      v77 = swift_slowAlloc(32, -1);
      aBlock[0] = v77;
      *(_DWORD *)v76 = 136315138;
      v78 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v79 = dispatch thunk of CustomStringConvertible.description.getter(v70, v78);
      v242 = (_QWORD *)sub_100016940(v79, v80, aBlock);
      v68 = v235;
      v20 = v236;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, v243, v76 + 4, v76 + 12);
      swift_bridgeObjectRelease();
      v238 = *(void (**)(char *, uint64_t))(v68 + 8);
      v238(v72, v70);
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Incoming .selfBeaconingDevice invitation for %s", v76, 0xCu);
      swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v77, -1, -1);
      swift_slowDealloc(v76, -1, -1);
    }
    else
    {
      v238 = *(void (**)(char *, uint64_t))(v68 + 8);
      v238(v72, v70);
    }

    v125 = v231;
    v126 = (uint64_t)v227;
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v235 = 0;
    v127 = aBlock[0];
    KeyPath = swift_getKeyPath(&unk_100E3C008);
    v129 = v230;
    sub_100C1C4BC(KeyPath, v127, v230);
    swift_bridgeObjectRelease();
    swift_release();
    ((void (*)(uint64_t, char *, uint64_t))v237)(v125, v20, v70);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v68 + 56))(v125, 0, 1, v70);
    v130 = v126 + *(int *)(v226 + 48);
    sub_10000F9B8((uint64_t)v129, v126, &qword_1010ED860);
    sub_10000F9B8(v125, v130, &qword_1010ED860);
    v131 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
    if (v131(v126, 1, v70) == 1)
    {
      sub_100004048(v125, &qword_1010ED860);
      sub_100004048((uint64_t)v129, &qword_1010ED860);
      v132 = v131(v130, 1, v70);
      v133 = v238;
      if (v132 == 1)
      {
        sub_100004048(v126, &qword_1010ED860);
LABEL_48:
        v238 = v133;
        v180 = a1;
        v181 = v211;
        v182 = sub_10005972C(a1, v211, type metadata accessor for BeaconSharingSessionContext);
        v183 = Logger.logObject.getter(v182);
        v184 = static os_log_type_t.info.getter(v183);
        if (os_log_type_enabled(v183, v184))
        {
          v185 = (uint8_t *)swift_slowAlloc(12, -1);
          v186 = swift_slowAlloc(32, -1);
          aBlock[0] = v186;
          *(_DWORD *)v185 = 136315138;
          v187 = sub_100342C70();
          v242 = (_QWORD *)sub_100016940(v187, v188, aBlock);
          v70 = v233;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, v243, v185 + 4, v185 + 12);
          swift_bridgeObjectRelease();
          sub_1000126B0(v181, type metadata accessor for BeaconSharingSessionContext);
          _os_log_impl((void *)&_mh_execute_header, v183, v184, "Accepting incoming %s invitation because it is this device", v185, 0xCu);
          swift_arrayDestroy(v186, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v186, -1, -1);
          swift_slowDealloc(v185, -1, -1);
        }
        else
        {
          sub_1000126B0(v181, type metadata accessor for BeaconSharingSessionContext);
        }

        v97 = v234;
        v198 = v235;
        v108 = v239;
        v199 = type metadata accessor for PropertyListEncoder(0);
        v200 = swift_allocObject(v199, *(unsigned int *)(v199 + 48), *(unsigned __int16 *)(v199 + 52));
        PropertyListEncoder.init()(v200);
        v201 = sub_100006204(&qword_1010F8158, type metadata accessor for BeaconSharingSessionContext, (uint64_t)&unk_100E37A90);
        v202 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v180, v108, v201);
        if (v198)
        {
          swift_errorRelease(v198);
          swift_release();
        }
        else
        {
          v204 = v202;
          v205 = v203;
          v206 = swift_release();
          __chkstk_darwin(v206);
          *(&v208 - 4) = v97;
          *(&v208 - 3) = v180;
          *(&v208 - 2) = v204;
          *(&v208 - 1) = v205;
          OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1003D0800, &v208 - 6, v207, &type metadata for () + 1, &type metadata for () + 1);
          sub_10001BC14(v204, v205);
        }
        v83 = v229;
        v109 = v223;
        v238(v236, v70);
        ((void (*)(char *, uint64_t, uint64_t))v237)(v109, v97 + qword_1011B6CF0, v70);
        goto LABEL_57;
      }
    }
    else
    {
      v148 = v221;
      sub_10000F9B8(v126, v221, &qword_1010ED860);
      v149 = v131(v130, 1, v70);
      v133 = v238;
      if (v149 != 1)
      {
        v177 = v210;
        v232(v210, v130, v70);
        v178 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v179 = dispatch thunk of static Equatable.== infix(_:_:)(v148, v177, v70, v178);
        v133(v177, v70);
        sub_100004048(v231, &qword_1010ED860);
        sub_100004048((uint64_t)v230, &qword_1010ED860);
        v133((char *)v148, v70);
        sub_100004048(v126, &qword_1010ED860);
        v150 = (uint64_t)v222;
        if ((v179 & 1) != 0)
          goto LABEL_48;
LABEL_40:
        v151 = sub_10005972C(a1, v150, type metadata accessor for BeaconSharingSessionContext);
        v152 = Logger.logObject.getter(v151);
        v153 = static os_log_type_t.info.getter(v152);
        if (os_log_type_enabled(v152, v153))
        {
          v154 = (uint8_t *)swift_slowAlloc(12, -1);
          v155 = swift_slowAlloc(32, -1);
          aBlock[0] = v155;
          *(_DWORD *)v154 = 136315138;
          v156 = sub_100342C70();
          v242 = (_QWORD *)sub_100016940(v156, v157, aBlock);
          v70 = v233;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, v243, v154 + 4, v154 + 12);
          swift_bridgeObjectRelease();
          sub_1000126B0(v150, type metadata accessor for BeaconSharingSessionContext);
          _os_log_impl((void *)&_mh_execute_header, v152, v153, "Accepting incoming %s invitation because it is not this device", v154, 0xCu);
          swift_arrayDestroy(v155, 1, (char *)&type metadata for Any + 8);
          v158 = v155;
          v20 = v236;
          swift_slowDealloc(v158, -1, -1);
          swift_slowDealloc(v154, -1, -1);
        }
        else
        {
          sub_1000126B0(v150, type metadata accessor for BeaconSharingSessionContext);
        }

        v164 = v234;
        v165 = v239;
        v166 = type metadata accessor for PropertyListEncoder(0);
        v167 = swift_allocObject(v166, *(unsigned int *)(v166 + 48), *(unsigned __int16 *)(v166 + 52));
        PropertyListEncoder.init()(v167);
        v168 = sub_100006204(&qword_1010F8158, type metadata accessor for BeaconSharingSessionContext, (uint64_t)&unk_100E37A90);
        v169 = v235;
        v170 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a1, v165, v168);
        if (v169)
        {
          swift_errorRelease(v169);
          swift_release();
        }
        else
        {
          v189 = v170;
          v190 = v171;
          v191 = swift_release();
          __chkstk_darwin(v191);
          *(&v208 - 4) = v164;
          *(&v208 - 3) = a1;
          *(&v208 - 2) = v189;
          *(&v208 - 1) = v190;
          OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1003D996C, &v208 - 6, v192, &type metadata for () + 1, &type metadata for () + 1);
          sub_10001BC14(v189, v190);
        }
        v133(v20, v70);
        return;
      }
      sub_100004048(v231, &qword_1010ED860);
      sub_100004048((uint64_t)v230, &qword_1010ED860);
      v133((char *)v148, v70);
    }
    sub_100004048(v126, (uint64_t *)&unk_10110EE90);
    v150 = (uint64_t)v222;
    goto LABEL_40;
  }
  v58 = v55[1];
  v57 = v55[2];
  swift_bridgeObjectRetain(v57);
  v60 = Logger.logObject.getter(v59);
  v61 = static os_log_type_t.default.getter(v60);
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc(12, -1);
    v63 = swift_slowAlloc(32, -1);
    aBlock[0] = v63;
    v237 = a4;
    *(_DWORD *)v62 = 136315138;
    swift_bridgeObjectRetain(v57);
    v242 = (_QWORD *)sub_100016940(v58, v57, aBlock);
    a4 = v237;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, v243, v62 + 4, v62 + 12);
    swift_bridgeObjectRelease_n(v57, 3);
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Incoming .meDevice invitation for %s", v62, 0xCu);
    swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1, -1);
    swift_slowDealloc(v62, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v57, 2);
  }
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v81 = swift_retain();
  AnyCurrentValuePublisher.value.getter(aBlock, v81);
  v82 = swift_release();
  if (LOBYTE(aBlock[0]) != 1)
  {
    v122 = Logger.logObject.getter(v82);
    v123 = static os_log_type_t.default.getter(v122);
    if (os_log_type_enabled(v122, v123))
    {
      v124 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v124 = 0;
      _os_log_impl((void *)&_mh_execute_header, v122, v123, "Ignoring invite since this is not a Me device", v124, 2u);
      swift_slowDealloc(v124, -1, -1);
    }

    return;
  }
  v83 = v229;
  if ((sub_10039B178() & 1) == 0)
  {
    v134 = v214;
    v135 = sub_10005972C(a1, v214, type metadata accessor for BeaconSharingSessionContext);
    v136 = Logger.logObject.getter(v135);
    v137 = static os_log_type_t.default.getter(v136);
    if (os_log_type_enabled(v136, v137))
    {
      v138 = (uint8_t *)swift_slowAlloc(12, -1);
      v139 = swift_slowAlloc(32, -1);
      aBlock[0] = v139;
      *(_DWORD *)v138 = 136315138;
      v140 = sub_100342C70();
      v242 = (_QWORD *)sub_100016940(v140, v141, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, v243, v138 + 4, v138 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v134, type metadata accessor for BeaconSharingSessionContext);
      _os_log_impl((void *)&_mh_execute_header, v136, v137, "Declining incoming %s invitation because this Me device cannot accept incoming requests", v138, 0xCu);
      swift_arrayDestroy(v139, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v139, -1, -1);
      swift_slowDealloc(v138, -1, -1);
    }
    else
    {
      sub_1000126B0(v134, type metadata accessor for BeaconSharingSessionContext);
    }

    v172 = v234;
    v173 = v239;
    v174 = type metadata accessor for PropertyListEncoder(0);
    v175 = swift_allocObject(v174, *(unsigned int *)(v174 + 48), *(unsigned __int16 *)(v174 + 52));
    PropertyListEncoder.init()(v175);
    v176 = sub_100006204(&qword_1010F8158, type metadata accessor for BeaconSharingSessionContext, (uint64_t)&unk_100E37A90);
    v193 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a1, v173, v176);
    v195 = v194;
    v196 = swift_release();
    __chkstk_darwin(v196);
    *(&v208 - 4) = v172;
    *(&v208 - 3) = a1;
    *(&v208 - 2) = v193;
    *(&v208 - 1) = v195;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1003D996C, &v208 - 6, v197, &type metadata for () + 1, &type metadata for () + 1);
    sub_10001BC14(v193, v195);
    return;
  }
  v84 = sub_1008A4DC4(v232, (uint64_t)v238, a4);
  v86 = v85;
  v88 = v87;
  v240 = *(id *)(v83 + 272);
  v89 = v212;
  sub_10005972C(a1, v212, type metadata accessor for BeaconSharingSessionContext);
  v90 = *(unsigned __int8 *)(v213 + 80);
  v91 = (v90 + 16) & ~v90;
  v92 = (v24 + v91 + 7) & 0xFFFFFFFFFFFFFFF8;
  v93 = (v92 + 31) & 0xFFFFFFFFFFFFFFF8;
  v94 = (v93 + 15) & 0xFFFFFFFFFFFFFFF8;
  v95 = swift_allocObject(&unk_101072820, v94 + 8, v90 | 7);
  sub_1000126EC(v89, v95 + v91, type metadata accessor for BeaconSharingSessionContext);
  v96 = v95 + v92;
  *(_BYTE *)v96 = v84;
  *(_QWORD *)(v96 + 8) = v86;
  *(_QWORD *)(v96 + 16) = v88;
  v97 = v234;
  *(_QWORD *)(v95 + v93) = v234;
  *(_QWORD *)(v95 + v94) = v83;
  aBlock[4] = (uint64_t)sub_1003D0908;
  aBlock[5] = v95;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100016FB8;
  aBlock[3] = (uint64_t)&unk_101072838;
  v98 = _Block_copy(aBlock);
  swift_retain();
  v99 = v240;
  v100 = swift_retain();
  v101 = v215;
  static DispatchQoS.unspecified.getter(v100);
  v242 = _swiftEmptyArrayStorage;
  v102 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v103 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v104 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v105 = v218;
  v106 = v103;
  v107 = v220;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v242, v106, v104, v220, v102);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v101, v105, v98);
  _Block_release(v98);

  (*(void (**)(char *, uint64_t))(v219 + 8))(v105, v107);
  (*(void (**)(char *, uint64_t))(v216 + 8))(v101, v217);
  swift_release();
  v108 = v239;
  v109 = v223;
  (*(void (**)(char *, uint64_t, uint64_t))(v235 + 16))(v223, v97 + qword_1011B6CF0, v233);
LABEL_57:
  swift_storeEnumTagMultiPayload(v109, v108, 0);
  if (*(_QWORD *)(v83 + 432))
  {
    aBlock[0] = v97;
    swift_retain();
    dispatch thunk of AsynchronousCache.insert(key:value:)(v109, aBlock);
    swift_release();
    v67 = (uint64_t)v109;
LABEL_59:
    sub_1000126B0(v67, type metadata accessor for BeaconSharingSessionContext);
    return;
  }
  __break(1u);
}

void sub_100385F44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t aBlock[6];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9B48 != -1)
    swift_once(&qword_1010E9B48, sub_100308748);
  v10 = type metadata accessor for Logger(0);
  sub_10001A9E8(v10, (uint64_t)qword_1011B6D08);
  v11 = swift_retain_n(a1, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  v14 = os_log_type_enabled(v12, v13);
  v37 = v7;
  v38 = v6;
  v36 = v9;
  if (v14)
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    aBlock[0] = v16;
    v34 = v5;
    *(_DWORD *)v15 = 136446210;
    swift_retain();
    v17 = sub_10037F868();
    v35 = v3;
    v18 = v2;
    v20 = v19;
    swift_release();
    v40 = (_QWORD *)sub_100016940(v17, v20, aBlock);
    v5 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, aBlock, v15 + 4, v15 + 12);
    swift_release_n(a1, 2);
    v2 = v18;
    v3 = v35;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Session invalidated: %{public}s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
  v21 = v39;
  if (*(_QWORD *)(v39 + 432))
  {
    aBlock[0] = a1;
    v22 = sub_1000193A4(&qword_1010FA0F8, &qword_1010FA100, "1i#");
    swift_retain();
    AsynchronousCache<>.removeCachedValue(_:)(aBlock, v22);
    swift_release();
    v23 = *(void **)(v21 + 272);
    v24 = swift_allocObject(&unk_1010720A0, 24, 7);
    swift_weakInit(v24 + 16, v21);
    v25 = swift_allocObject(&unk_1010727D0, 32, 7);
    *(_QWORD *)(v25 + 16) = v24;
    *(_QWORD *)(v25 + 24) = a1;
    aBlock[4] = (uint64_t)sub_1003D07C8;
    aBlock[5] = v25;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100016FB8;
    aBlock[3] = (uint64_t)&unk_1010727E8;
    v26 = _Block_copy(aBlock);
    swift_retain();
    v27 = v23;
    v28 = swift_retain();
    v29 = v36;
    static DispatchQoS.unspecified.getter(v28);
    v40 = _swiftEmptyArrayStorage;
    v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v31, v32, v2, v30);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v29, v5, v26);
    _Block_release(v26);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v29, v38);
    swift_release();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100386360(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD v16[4];
  char v17;
  uint64_t v18;

  type metadata accessor for Transaction(0);
  v16[2] = a6;
  v16[3] = a3;
  v17 = a4;
  v18 = a5;
  return static Transaction.named<A>(_:with:)(a7, a8, 2, a9, v16, (char *)&type metadata for () + 8);
}

uint64_t sub_1003863F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const char *a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double v22;

  v12 = static os_log_type_t.info.getter(a1);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v13 = qword_1011B7D30;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 112, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B10;
  v16 = type metadata accessor for UUID(0);
  v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v18 = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
  v20 = v19;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  v21 = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v18;
  *(_QWORD *)(v15 + 40) = v20;
  *(_QWORD *)(v15 + 96) = &type metadata for String;
  *(_QWORD *)(v15 + 104) = v21;
  *(_QWORD *)(v15 + 64) = v21;
  *(_QWORD *)(v15 + 72) = a5;
  *(_QWORD *)(v15 + 80) = a6;
  *(_QWORD *)&v22 = swift_bridgeObjectRetain(a6).n128_u64[0];
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, a8, a9, 2, v15, v22);
  return swift_bridgeObjectRelease();
}

void sub_100386530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _BYTE v15[16];
  _BYTE v16[24];

  swift_beginAccess(a12 + 88, v16, 0, 0);
  if (*(_QWORD *)(a12 + 96))
  {
    sub_1003D0590(a12 + 88, (uint64_t)v15);
    sub_100C2D4B0(a6, a7, a8, a9, a11);
    sub_1003D05CC((uint64_t)v15);
  }
}

uint64_t sub_1003865C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = static os_log_type_t.info.getter(a1);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v3 = qword_1011B7D30;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E22B00;
  swift_bridgeObjectRetain(a1);
  v7 = Array.description.getter(v6, &type metadata for MessagingDevice);
  v9 = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_10001AA00();
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v9;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "Connected devices changed: %@.", 30, 2, v5);
  swift_bridgeObjectRelease();
  v11 = a1;
  return PassthroughSubject.send(_:)(&v11);
}

_QWORD *sub_1003866E4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;

  v3 = *result;
  v4 = *(_QWORD *)(*result + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(*result);
    v5 = v4 - 1;
    v6 = _swiftEmptyArrayStorage;
    for (i = 32; ; i += 160)
    {
      v8 = *(_OWORD *)(v3 + i + 16);
      v26 = *(_OWORD *)(v3 + i);
      v27 = v8;
      v9 = *(_OWORD *)(v3 + i + 32);
      v10 = *(_OWORD *)(v3 + i + 48);
      v11 = *(_OWORD *)(v3 + i + 80);
      v30 = *(_OWORD *)(v3 + i + 64);
      v31 = v11;
      v28 = v9;
      v29 = v10;
      v12 = *(_OWORD *)(v3 + i + 96);
      v13 = *(_OWORD *)(v3 + i + 112);
      v14 = *(_OWORD *)(v3 + i + 144);
      v34 = *(_OWORD *)(v3 + i + 128);
      v35 = v14;
      v32 = v12;
      v33 = v13;
      if (BYTE3(v34) == 1)
      {
        sub_10008B118(&v26);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
        v36 = v6;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10009A844(0, v6[2] + 1, 1);
          v6 = v36;
        }
        v17 = v6[2];
        v16 = v6[3];
        if (v17 >= v16 >> 1)
        {
          sub_10009A844(v16 > 1, v17 + 1, 1);
          v6 = v36;
        }
        v6[2] = v17 + 1;
        v18 = &v6[20 * v17];
        v19 = v27;
        v18[2] = v26;
        v18[3] = v19;
        v20 = v28;
        v21 = v29;
        v22 = v31;
        v18[6] = v30;
        v18[7] = v22;
        v18[4] = v20;
        v18[5] = v21;
        v23 = v32;
        v24 = v33;
        v25 = v35;
        v18[10] = v34;
        v18[11] = v25;
        v18[8] = v23;
        v18[9] = v24;
      }
      if (!v5)
        break;
      --v5;
    }
    result = (_QWORD *)swift_bridgeObjectRelease();
  }
  else
  {
    v6 = _swiftEmptyArrayStorage;
  }
  *a2 = v6;
  return result;
}

void sub_100386844(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int64_t v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  if (v3)
  {
    v11 = a2;
    sub_10009ACD4(0, v3, 0);
    v4 = (_QWORD *)(v2 + 184);
    do
    {
      v5 = *((_BYTE *)v4 - 16);
      v7 = *(v4 - 1);
      v6 = *v4;
      v9 = _swiftEmptyArrayStorage[2];
      v8 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(*v4);
      if (v9 >= v8 >> 1)
        sub_10009ACD4(v8 > 1, v9 + 1, 1);
      _swiftEmptyArrayStorage[2] = v9 + 1;
      v10 = &_swiftEmptyArrayStorage[3 * v9];
      *((_BYTE *)v10 + 32) = v5;
      v10[5] = v7;
      v10[6] = v6;
      v4 += 20;
      --v3;
    }
    while (v3);
    a2 = v11;
  }
  *a2 = _swiftEmptyArrayStorage;
}

_QWORD *sub_100386928(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];
  _QWORD v10[20];
  _OWORD v11[10];
  __int128 v12[10];

  v2 = a2 + 16;
  if (*(_QWORD *)(*(_QWORD *)a1 + 16))
  {
    swift_beginAccess(v2, v9, 0, 0);
    Strong = swift_weakLoadStrong(v2);
    if (Strong
      && (sub_1003837B4((uint64_t)v10),
          swift_release(),
          sub_100005CF0((uint64_t)v10, (uint64_t)v11, &qword_1010FA078),
          Strong = sub_1001D7100((uint64_t)v11),
          (_DWORD)Strong != 1))
    {
      v12[6] = v11[6];
      v12[7] = v11[7];
      v12[8] = v11[8];
      v12[9] = v11[9];
      v12[2] = v11[2];
      v12[3] = v11[3];
      v12[4] = v11[4];
      v12[5] = v11[5];
      v12[0] = v11[0];
      v12[1] = v11[1];
      swift_beginAccess(v2, &v8, 0, 0);
      if (swift_weakLoadStrong(v2))
      {
        sub_100386B30(v12);
        sub_1003D0028(v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003CFF68);
        return (_QWORD *)swift_release();
      }
      else
      {
        return sub_1003D0028(v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003CFF68);
      }
    }
    else
    {
      v4 = static os_log_type_t.error.getter(Strong);
      if (qword_1010EA250 != -1)
        swift_once(&qword_1010EA250, sub_100B5D964);
      return (_QWORD *)os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, qword_1011B7D30, "BUG: could not lookup companion MessagingDevice!", 48, 2, _swiftEmptyArrayStorage);
    }
  }
  else
  {
    swift_beginAccess(v2, v12, 0, 0);
    result = (_QWORD *)swift_weakLoadStrong(v2);
    if (result)
    {
      v6 = static os_log_type_t.info.getter(result);
      if (qword_1010EA250 != -1)
      {
        v7 = v6;
        swift_once(&qword_1010EA250, sub_100B5D964);
        v6 = v7;
      }
      os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, qword_1011B7D30, "companionDidDisconnect", 22, 2, _swiftEmptyArrayStorage);
      return (_QWORD *)swift_release();
    }
  }
  return result;
}

uint64_t sub_100386B30(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  Swift::String v14;
  Swift::String v15;
  void *v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  uint64_t result;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;

  v2 = v1;
  v4 = static os_log_type_t.info.getter(a1);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v5 = qword_1011B7D30;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  v34 = 60;
  v35 = 0xE100000000000000;
  v8 = a1[7];
  v30 = a1[6];
  v31 = v8;
  v9 = a1[9];
  v32 = a1[8];
  v33 = v9;
  v10 = a1[3];
  v26 = a1[2];
  v27 = v10;
  v11 = a1[5];
  v28 = a1[4];
  v29 = v11;
  v12 = a1[1];
  v24 = *a1;
  v25 = v12;
  v13 = sub_1003CDEF0();
  v14._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(&type metadata for MessagingDevice, v13);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 8250;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  v17 = *((_QWORD *)a1 + 12);
  v16 = (void *)*((_QWORD *)a1 + 13);
  swift_bridgeObjectRetain(v16);
  v18._countAndFlagsBits = v17;
  v18._object = v16;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 62;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = 60;
  *(_QWORD *)(v7 + 40) = 0xE100000000000000;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "CompanionDidConnect: %@", 23, 2, v7, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33);
  swift_bridgeObjectRelease();
  v20 = *(NSObject **)(v1 + 200);
  v21 = swift_allocObject(&unk_101072528, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_1003D0574;
  *(_QWORD *)(v21 + 24) = v2;
  *(_QWORD *)&v26 = sub_10005CBA4;
  *((_QWORD *)&v26 + 1) = v21;
  *(_QWORD *)&v24 = _NSConcreteStackBlock;
  *((_QWORD *)&v24 + 1) = 1107296256;
  *(_QWORD *)&v25 = sub_10001D8B8;
  *((_QWORD *)&v25 + 1) = &unk_101072540;
  v22 = _Block_copy(&v24);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v20, v22);
  _Block_release(v22);
  LOBYTE(v20) = swift_isEscapingClosureAtFileLocation(v21, "", 113, 298, 41, 1);
  swift_release();
  result = swift_release();
  if ((v20 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_100386D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = type metadata accessor for SharedBeaconRecord(0);
    sub_100386E00(a1 + *(int *)(v5 + 20));
    sub_100387010(0, 0);
    return swift_release();
  }
  return result;
}

uint64_t sub_100386E00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  _BYTE v21[16];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(void **)(v2 + 200);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v10 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v7 = (_QWORD *)static os_log_type_t.info.getter(v10);
  if (qword_1010EA250 != -1)
LABEL_5:
    swift_once(&qword_1010EA250, sub_100B5D964);
  v11 = qword_1011B7D30;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E22B00;
  v14 = UUID.uuidString.getter(v13);
  v16 = v15;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  *(_QWORD *)(v13 + 64) = sub_10001AA00();
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 40) = v16;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v11, "Marking beacon %@ as dirty for all paired watches", 49, 2, v13);
  swift_bridgeObjectRelease();
  v17 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v18 = sub_1003B0994((uint64_t (*)(void))sub_1003B0894);
  *(_QWORD *)&v21[-32] = __chkstk_darwin(v18);
  *(_QWORD *)&v21[-24] = v17;
  *(_QWORD *)&v21[-16] = a1;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1003D0558, &v21[-48], v19, &type metadata for () + 1, &type metadata for () + 1);

  return swift_bridgeObjectRelease();
}

_QWORD *sub_100387010(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  id v50;
  _QWORD *result;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;
  void (*v60)(uint64_t (*)(char *, char *, uint64_t), char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  Swift::String v72;
  Swift::String v73;
  Swift::String v74;
  uint64_t v75;
  uint64_t v76;
  Swift::String v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  void (*v100)(unint64_t, char *, uint64_t);
  int64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t v119;
  int64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t *v134;
  _QWORD *v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(uint64_t, char *, uint64_t);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  _OWORD *v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t (**v154)(void);
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  uint64_t (*v159)(uint64_t);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(unint64_t, char *, uint64_t);
  void (*v167)(unint64_t, char *, uint64_t);
  unsigned __int8 v168;
  unsigned __int8 v169;
  uint64_t v170;
  int64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  _QWORD *v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  void (*v193)(uint64_t, char *, uint64_t);
  uint64_t v194;
  void (*v195)(uint64_t, char *, uint64_t);
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  _OWORD *v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t (**v206)(void);
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  _QWORD *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  __int128 v287;
  _QWORD *v288;
  char *v289;
  char *v290;
  unint64_t v291;
  uint64_t v292;
  __int128 v293;
  uint64_t v294;
  uint64_t MyAccessoryKeyEnvelope;
  char *v296;
  char *v297;
  uint64_t v298;
  unint64_t v299;
  void (*v300)(uint64_t (*)(char *, char *, uint64_t), char *, uint64_t);
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  uint64_t v308;
  void (*v309)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v310)(char *, char *, uint64_t);
  char *v311;
  uint64_t v312;
  uint64_t (*v313)(void);
  void (*v314)(char *, char *, uint64_t);
  uint64_t v315;
  uint64_t v316;
  char *v317;
  uint64_t v318;
  uint64_t (*v319)(char *, char *, uint64_t);
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  _QWORD *v323;
  char *v324;
  void (*v325)(unint64_t, char *, uint64_t);
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  _QWORD *v330;
  _QWORD *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  _QWORD v335[3];
  uint64_t v336;
  _QWORD v337[3];
  uint64_t v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  Swift::String v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  uint64_t v349;
  unint64_t v350;
  _QWORD v351[20];
  _OWORD v352[10];
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  Swift::String v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;

  v306 = a2;
  v313 = a1;
  v3 = type metadata accessor for FamilyCryptoKeysV2(0);
  v332 = *(_QWORD *)(v3 - 8);
  v333 = v3;
  v4 = __chkstk_darwin(v3);
  v326 = (uint64_t)&v273 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v331 = (uint64_t *)((char *)&v273 - v7);
  __chkstk_darwin(v6);
  v9 = (char *)&v273 - v8;
  MyAccessoryKeyEnvelope = type metadata accessor for CompanionFindMyAccessoryKeyEnvelope(0);
  v10 = __chkstk_darwin(MyAccessoryKeyEnvelope);
  v294 = (uint64_t)&v273 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v310 = (uint64_t (*)(char *, char *, uint64_t))((char *)&v273 - v12);
  v334 = type metadata accessor for TimeBasedKey(0);
  v301 = *(_QWORD *)(v334 - 8);
  v13 = __chkstk_darwin(v334);
  v330 = (uint64_t *)((char *)&v273 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __chkstk_darwin(v13);
  v329 = (uint64_t)&v273 - v16;
  v17 = __chkstk_darwin(v15);
  v276 = (char *)&v273 - v18;
  __chkstk_darwin(v17);
  v322 = (uint64_t)&v273 - v19;
  v321 = type metadata accessor for FamilyCryptoKeysV1(0);
  v318 = *(_QWORD *)(v321 - 8);
  v20 = __chkstk_darwin(v321);
  v323 = (uint64_t *)((char *)&v273 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v20);
  v320 = (uint64_t)&v273 - v22;
  v278 = type metadata accessor for CompanionSelfBeaconingKeyEnvelope(0);
  v23 = __chkstk_darwin(v278);
  v277 = (uint64_t)&v273 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v289 = (char *)&v273 - v25;
  v26 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v26);
  v304 = (uint64_t)&v273 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v315 = type metadata accessor for SharedBeaconRecord(0);
  v303 = *(_QWORD *)(v315 - 8);
  v28 = __chkstk_darwin(v315);
  v298 = (uint64_t)&v273 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v302 = (uint64_t)&v273 - v31;
  __chkstk_darwin(v30);
  v33 = (char *)&v273 - v32;
  v316 = type metadata accessor for UUID(0);
  v312 = *(_QWORD *)(v316 - 8);
  v34 = *(_QWORD *)(v312 + 64);
  v35 = __chkstk_darwin(v316);
  v311 = (char *)&v273 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v35);
  v297 = (char *)&v273 - v37;
  v38 = __chkstk_darwin(v36);
  v284 = (char *)&v273 - v39;
  __chkstk_darwin(v38);
  v319 = (uint64_t (*)(char *, char *, uint64_t))((char *)&v273 - v40);
  v41 = sub_10001A9A8(&qword_1010ED860);
  v42 = __chkstk_darwin(v41);
  v296 = (char *)&v273 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v307 = (char *)&v273 - v44;
  v45 = type metadata accessor for DispatchPredicate(0);
  v46 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v48 = (uint64_t *)((char *)&v273 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = *(void **)(v2 + 200);
  *v48 = v49;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v46 + 104))(v48, enum case for DispatchPredicate.onQueue(_:), v45);
  v50 = v49;
  LOBYTE(v49) = _dispatchPreconditionTest(_:)(v48);
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(v46 + 8))(v48, v45);
  if ((v49 & 1) == 0)
  {
LABEL_88:
    __break(1u);
    return result;
  }
  sub_1003837B4((uint64_t)v351);
  sub_100005CF0((uint64_t)v351, (uint64_t)v352, &qword_1010FA078);
  result = (_QWORD *)sub_1001D7100((uint64_t)v352);
  if ((_DWORD)result == 1)
  {
    if (v313)
      return (_QWORD *)v313();
    return result;
  }
  v359 = (Swift::String)v352[6];
  v360 = v352[7];
  v361 = v352[8];
  v362 = v352[9];
  v355 = v352[2];
  v356 = v352[3];
  v357 = v352[4];
  v358 = v352[5];
  v353 = v352[0];
  v354 = v352[1];
  result = (_QWORD *)sub_100389E4C((uint64_t)&v353);
  v52 = result;
  v286 = result[2];
  if (v286)
  {
    v308 = v2;
    v317 = v33;
    v53 = 0;
    v328 = 0;
    v54 = v312;
    v55 = *(unsigned __int8 *)(v312 + 80);
    v290 = (char *)result + ((v55 + 32) & ~v55);
    v282 = v55 | 7;
    v283 = (v55 + 24) & ~v55;
    v281 = (v34 + v283 + 7) & 0xFFFFFFFFFFFFFFF8;
    v280 = (v281 + 167) & 0xFFFFFFFFFFFFFFF8;
    v279 = v280 + 16;
    v274 = v323 + 1;
    v287 = xmmword_100E22B10;
    v275 = &type metadata for () + 1;
    v56 = v316;
    v57 = v319;
    v324 = v9;
    v288 = result;
    while (1)
    {
      v58 = v307;
      if (v53 >= v52[2])
      {
        __break(1u);
        goto LABEL_88;
      }
      v59 = &v290[*(_QWORD *)(v54 + 72) * v53];
      v314 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
      v314(v307, v59, v56);
      v309 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56);
      v309(v58, 0, 1, v56);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v58, 1, v56) == 1)
        goto LABEL_57;
      v60 = *(void (**)(uint64_t (*)(char *, char *, uint64_t), char *, uint64_t))(v54 + 32);
      v60(v57, v58, v56);
      v61 = v304;
      v305 = *(_QWORD *)(v308 + 144);
      sub_10080CD54((uint64_t)v57, v304);
      v62 = v315;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v303 + 48))(v61, 1, v315) == 1)
      {
        swift_bridgeObjectRelease();
        sub_100004048(v61, (uint64_t *)&unk_1010EE180);
        sub_100389614(v319, &v353);
        v224 = sub_1003D0028(v351, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003CFF68);
        if (v313)
          ((void (*)(_QWORD *))v313)(v224);
        return (_QWORD *)(*(uint64_t (**)(uint64_t (*)(char *, char *, uint64_t), uint64_t))(v54 + 8))(v319, v56);
      }
      v300 = v60;
      v63 = (uint64_t)v317;
      v64 = sub_1000126EC(v61, (uint64_t)v317, type metadata accessor for SharedBeaconRecord);
      LODWORD(v327) = static os_log_type_t.info.getter(v64);
      if (qword_1010EA250 != -1)
        swift_once(&qword_1010EA250, sub_100B5D964);
      v299 = v53;
      v65 = qword_1011B7D30;
      v285 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v66 = swift_allocObject(v285, 112, 7);
      *(_OWORD *)(v66 + 16) = v287;
      v292 = v63 + *(int *)(v62 + 20);
      v67 = UUID.uuidString.getter(v66);
      v69 = v68;
      *(_QWORD *)(v66 + 56) = &type metadata for String;
      v70 = sub_10001AA00();
      *(_QWORD *)(v66 + 64) = v70;
      *(_QWORD *)(v66 + 32) = v67;
      *(_QWORD *)(v66 + 40) = v69;
      v349 = 60;
      v350 = 0xE100000000000000;
      v345 = v359;
      v346 = v360;
      v347 = v361;
      v348 = v362;
      v341 = v355;
      v342 = v356;
      v343 = v357;
      v344 = v358;
      v339 = v353;
      v340 = v354;
      v71 = sub_1003CDEF0();
      v72._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(&type metadata for MessagingDevice, v71);
      String.append(_:)(v72);
      swift_bridgeObjectRelease();
      v73._countAndFlagsBits = 8250;
      v73._object = (void *)0xE200000000000000;
      String.append(_:)(v73);
      v74 = v359;
      swift_bridgeObjectRetain(v359._object);
      v75 = v315;
      v76 = (uint64_t)v317;
      String.append(_:)(v74);
      swift_bridgeObjectRelease();
      v77._countAndFlagsBits = 62;
      v77._object = (void *)0xE100000000000000;
      String.append(_:)(v77);
      v78 = v349;
      v79 = v350;
      *(_QWORD *)(v66 + 96) = &type metadata for String;
      *(_QWORD *)(v66 + 104) = v70;
      v291 = v70;
      *(_QWORD *)(v66 + 72) = v78;
      *(_QWORD *)(v66 + 80) = v79;
      os_log(_:dso:log:_:_:)(v327, &_mh_execute_header, v65, "Distributing shared keys for %@ to %@", 37, 2, v66);
      swift_bridgeObjectRelease();
      v80 = *(int *)(v75 + 44);
      v81 = *(_QWORD *)(v76 + v80);
      v82 = v302;
      sub_10005972C(v76, v302, type metadata accessor for SharedBeaconRecord);
      if (v81 != -1)
        break;
      v83 = *(_QWORD *)(v82 + *(int *)(v75 + 48));
      sub_1000126B0(v82, type metadata accessor for SharedBeaconRecord);
      v84 = v289;
      if (v83 != -1)
        goto LABEL_15;
      v160 = v305;
      v161 = *(_QWORD *)(v305 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
      v162 = type metadata accessor for BeaconKeyManager(0);
      v163 = v160;
      v164 = v328;
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v163, v161, v275, v162);
      v165 = sub_1004DD6E4(v76, 0);
      v167 = v166;
      v169 = v168;
      swift_release();
      if (v169 != 1)
      {
        if (v169 == 255)
        {
          swift_bridgeObjectRelease();
          v257 = (uint64_t)sub_1003D0028(v351, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003CFF68);
        }
        else
        {
          sub_1003D0028(v351, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003CFF68);
          sub_1003D0004(v165, (uint64_t)v167, v169);
          v257 = swift_bridgeObjectRelease();
        }
        v258 = static os_log_type_t.error.getter(v257);
        v259 = qword_1011B7D30;
        v260 = swift_allocObject(v285, 72, 7);
        *(_OWORD *)(v260 + 16) = xmmword_100E22B00;
        v261 = UUID.uuidString.getter(v260);
        v262 = v291;
        *(_QWORD *)(v260 + 56) = &type metadata for String;
        *(_QWORD *)(v260 + 64) = v262;
        *(_QWORD *)(v260 + 32) = v261;
        *(_QWORD *)(v260 + 40) = v263;
        os_log(_:dso:log:_:_:)(v258, &_mh_execute_header, v259, "No keys for %@", 14, 2, v260);
        goto LABEL_79;
      }
      v170 = (uint64_t)v84;
      v314(v284, (char *)v319, v316);
      v171 = *(_QWORD *)(v165 + 16);
      if (v171)
      {
        v325 = v167;
        v327 = v164;
        *(_QWORD *)&v339 = _swiftEmptyArrayStorage;
        sub_10009AF8C(0, v171, 0);
        v172 = *(unsigned __int8 *)(v301 + 80);
        v305 = v165;
        v173 = v165 + ((v172 + 32) & ~v172);
        v328 = *(_QWORD *)(v301 + 72);
        v174 = v276;
        v175 = v274;
        do
        {
          v176 = v322;
          sub_10005972C(v173, v322, type metadata accessor for TimeBasedKey);
          sub_10005972C(v176, (uint64_t)v174, type metadata accessor for TimeBasedKey);
          v177 = v323;
          *v323 = *v174;
          v178 = v334;
          v179 = (char *)v174 + *(int *)(v334 + 20);
          v180 = (char *)v177 + *(int *)(v321 + 20);
          v181 = type metadata accessor for DateInterval(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v181 - 8) + 16))(v180, v179, v181);
          v182 = (_QWORD *)((char *)v174 + *(int *)(v178 + 24));
          v183 = v182[5];
          if (v183 >> 60 == 15)
          {
            v184 = v182[2];
            v185 = v182[3];
            sub_10001BBBC(v184, v185);
            sub_1000126B0((uint64_t)v174, type metadata accessor for TimeBasedKey);
          }
          else
          {
            v184 = v182[4];
            sub_10001BBBC(v184, v182[5]);
            sub_1000126B0((uint64_t)v174, type metadata accessor for TimeBasedKey);
            v185 = v183 | 0x2000000000000000;
          }
          v186 = v320;
          v187 = *(int *)(v321 + 24);
          v188 = (uint64_t)v323;
          *(_QWORD *)((char *)v323 + v187) = v184;
          *(_QWORD *)((char *)v175 + v187) = v185;
          sub_1000126EC(v188, v186, type metadata accessor for FamilyCryptoKeysV1);
          sub_1000126B0(v322, type metadata accessor for TimeBasedKey);
          v189 = (_QWORD *)v339;
          if ((swift_isUniquelyReferenced_nonNull_native(v339) & 1) == 0)
          {
            sub_10009AF8C(0, v189[2] + 1, 1);
            v189 = (_QWORD *)v339;
          }
          v191 = v189[2];
          v190 = v189[3];
          if (v191 >= v190 >> 1)
          {
            sub_10009AF8C(v190 > 1, v191 + 1, 1);
            v189 = (_QWORD *)v339;
          }
          v189[2] = v191 + 1;
          sub_1000126EC(v320, (uint64_t)v189+ ((*(unsigned __int8 *)(v318 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v318 + 80))+ *(_QWORD *)(v318 + 72) * v191, type metadata accessor for FamilyCryptoKeysV1);
          v173 += v328;
          --v171;
        }
        while (v171);
        sub_1003D0004(v305, (uint64_t)v325, 1u);
        v76 = (uint64_t)v317;
        v192 = (uint64_t)v289;
        v164 = v327;
      }
      else
      {
        sub_1003D0004(v165, (uint64_t)v167, 1u);
        v189 = _swiftEmptyArrayStorage;
        v192 = v170;
      }
      v56 = v316;
      v193 = (void (*)(uint64_t, char *, uint64_t))v300;
      v300((uint64_t (*)(char *, char *, uint64_t))v192, v284, v316);
      *(_QWORD *)(v192 + *(int *)(v278 + 20)) = v189;
      v194 = v277;
      sub_10005972C(v192, v277, type metadata accessor for CompanionSelfBeaconingKeyEnvelope);
      sub_10038A8E4(0, 1, v194, &qword_1010FA080, type metadata accessor for CompanionSelfBeaconingKeyEnvelope, &qword_1010FA088, (uint64_t (*)(void))sub_1003D02B4, (uint64_t)&v339);
      v328 = v164;
      if (v164)
      {
        swift_bridgeObjectRelease();
        v265 = sub_1003D0028(v351, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003CFF68);
        v266 = static os_log_type_t.error.getter(v265);
        v267 = qword_1011B7D30;
        v268 = swift_allocObject(v285, 72, 7);
        *(_OWORD *)(v268 + 16) = xmmword_100E22B00;
        swift_getErrorValue(v328, &v336, v335);
        v269 = Error.localizedDescription.getter(v335[1], v335[2]);
        v270 = v291;
        *(_QWORD *)(v268 + 56) = &type metadata for String;
        *(_QWORD *)(v268 + 64) = v270;
        *(_QWORD *)(v268 + 32) = v269;
        *(_QWORD *)(v268 + 40) = v271;
        os_log(_:dso:log:_:_:)(v266, &_mh_execute_header, v267, "Error in distributeKeysToConnectedWatch: %@", 43, 2, v268);
        v272 = swift_bridgeObjectRelease();
        if (v313)
          ((void (*)(uint64_t))v313)(v272);
        swift_errorRelease(v328);
        sub_1000126B0(v192, type metadata accessor for CompanionSelfBeaconingKeyEnvelope);
LABEL_81:
        v241 = v76;
LABEL_82:
        sub_1000126B0(v241, type metadata accessor for SharedBeaconRecord);
        return (_QWORD *)(*(uint64_t (**)(uint64_t (*)(char *, char *, uint64_t), uint64_t))(v312 + 8))(v319, v316);
      }
      v327 = *((_QWORD *)&v339 + 1);
      v293 = v340;
      LODWORD(v291) = v339;
      v305 = *((_QWORD *)&v362 + 1);
      v325 = (void (*)(unint64_t, char *, uint64_t))v362;
      LODWORD(v292) = BYTE8(v361);
      v195 = v193;
      v196 = (uint64_t)v296;
      v309(v296, 1, 1, v56);
      v197 = swift_allocObject(&unk_1010720A0, 24, 7);
      swift_weakInit(v197 + 16, v308);
      v198 = v297;
      v314(v297, (char *)v319, v56);
      v199 = swift_allocObject(&unk_1010721B8, v279, v282);
      *(_QWORD *)(v199 + 16) = v197;
      v195(v199 + v283, v198, v56);
      v200 = (_OWORD *)(v199 + v281);
      v201 = v360;
      v200[6] = v359;
      v200[7] = v201;
      v202 = v362;
      v200[8] = v361;
      v200[9] = v202;
      v203 = v356;
      v200[2] = v355;
      v200[3] = v203;
      v204 = v358;
      v200[4] = v357;
      v200[5] = v204;
      v205 = v354;
      *v200 = v353;
      v200[1] = v205;
      v206 = (uint64_t (**)(void))(v199 + v280);
      v207 = (uint64_t)v313;
      v208 = v306;
      *v206 = v313;
      v206[1] = (uint64_t (*)(void))v208;
      swift_retain();
      sub_1003D0028(v351, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003D008C);
      sub_10001D898(v207, v208);
      v209 = v293;
      sub_1003C141C(v291, v327, v293, *((unint64_t *)&v293 + 1), v292, v325, v305, 0, v196, 0, 1, 0, (void (*)(_QWORD, _QWORD))sub_1003D0214, v199);
      swift_release();
      sub_10001BC14(v209, *((unint64_t *)&v209 + 1));
      sub_100004048(v196, &qword_1010ED860);
      v158 = v192;
      v159 = type metadata accessor for CompanionSelfBeaconingKeyEnvelope;
LABEL_38:
      sub_1000126B0(v158, v159);
      v53 = v299 + 1;
      sub_1000126B0((uint64_t)v317, type metadata accessor for SharedBeaconRecord);
      v54 = v312;
      v57 = v319;
      (*(void (**)(uint64_t (*)(char *, char *, uint64_t), uint64_t))(v312 + 8))(v319, v56);
      result = (_QWORD *)swift_release();
      v52 = v288;
      if (v53 == v286)
        goto LABEL_56;
    }
    sub_1000126B0(v82, type metadata accessor for SharedBeaconRecord);
LABEL_15:
    v85 = *(_QWORD *)(v76 + v80);
    v86 = v298;
    sub_10005972C(v76, v298, type metadata accessor for SharedBeaconRecord);
    if (v85 == -1)
    {
      sub_1000126B0(v86, type metadata accessor for SharedBeaconRecord);
LABEL_66:
      swift_bridgeObjectRelease();
      v225 = sub_1003D0028(v351, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003CFF68);
      v226 = static os_log_type_t.error.getter(v225);
      v227 = qword_1011B7D30;
      v228 = swift_allocObject(v285, 72, 7);
      *(_OWORD *)(v228 + 16) = xmmword_100E22B00;
      v229 = UUID.uuidString.getter(v228);
      v230 = v291;
      *(_QWORD *)(v228 + 56) = &type metadata for String;
      *(_QWORD *)(v228 + 64) = v230;
      *(_QWORD *)(v228 + 32) = v229;
      *(_QWORD *)(v228 + 40) = v231;
      os_log(_:dso:log:_:_:)(v226, &_mh_execute_header, v227, "Unsupported beacon type for %@", 30, 2, v228);
      goto LABEL_79;
    }
    v87 = *(_QWORD *)(v86 + *(int *)(v75 + 48));
    sub_1000126B0(v86, type metadata accessor for SharedBeaconRecord);
    if (v87 == -1)
      goto LABEL_66;
    v88 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock;
    v89 = v305;
    v90 = *(_QWORD *)(v305 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    v91 = type metadata accessor for BeaconKeyManager(0);
    v92 = v328;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v89, v90, &type metadata for () + 1, v91);
    v325 = (void (*)(unint64_t, char *, uint64_t))sub_1004DD6E4(v76, 0);
    *((_QWORD *)&v293 + 1) = v93;
    v95 = v94;
    swift_release();
    if (v95 != 1)
    {
      if (v95 == 255)
      {
        swift_bridgeObjectRelease();
        v210 = sub_1003D0028(v351, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003CFF68);
        v211 = static os_log_type_t.error.getter(v210);
        v212 = qword_1011B7D30;
        v213 = swift_allocObject(v285, 72, 7);
        *(_OWORD *)(v213 + 16) = xmmword_100E22B00;
        v214 = UUID.uuidString.getter(v213);
        v215 = v291;
        *(_QWORD *)(v213 + 56) = &type metadata for String;
        *(_QWORD *)(v213 + 64) = v215;
        *(_QWORD *)(v213 + 32) = v214;
        *(_QWORD *)(v213 + 40) = v216;
        os_log(_:dso:log:_:_:)(v211, &_mh_execute_header, v212, "No primary keys for %@", 22, 2, v213);
      }
      else
      {
        sub_1003D0028(v351, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003CFF68);
        sub_1003D0004((uint64_t)v325, *((uint64_t *)&v293 + 1), v95);
        v232 = swift_bridgeObjectRelease();
        v233 = static os_log_type_t.error.getter(v232);
        v234 = qword_1011B7D30;
        v235 = swift_allocObject(v285, 72, 7);
        *(_OWORD *)(v235 + 16) = xmmword_100E22B00;
        v236 = UUID.uuidString.getter(v235);
        v237 = v291;
        *(_QWORD *)(v235 + 56) = &type metadata for String;
        *(_QWORD *)(v235 + 64) = v237;
        *(_QWORD *)(v235 + 32) = v236;
        *(_QWORD *)(v235 + 40) = v238;
        os_log(_:dso:log:_:_:)(v233, &_mh_execute_header, v234, "No primary for %@", 17, 2, v235);
      }
      v239 = swift_bridgeObjectRelease();
      v240 = (uint64_t)v317;
      if (v313)
        ((void (*)(uint64_t))v313)(v239);
      v241 = v240;
      goto LABEL_82;
    }
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v89, *(_QWORD *)(v89 + v88), &type metadata for () + 1, v91);
    v96 = sub_1004DD6E4(v76, 1);
    *(_QWORD *)&v293 = v97;
    v99 = v98;
    swift_release();
    if (v99 != 1)
    {
      if (v99 == 255)
      {
        swift_bridgeObjectRelease();
        sub_1003D0004((uint64_t)v325, *((uint64_t *)&v293 + 1), 1u);
        v217 = sub_1003D0028(v351, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003CFF68);
        v218 = static os_log_type_t.error.getter(v217);
        v219 = qword_1011B7D30;
        v220 = swift_allocObject(v285, 72, 7);
        *(_OWORD *)(v220 + 16) = xmmword_100E22B00;
        v221 = UUID.uuidString.getter(v220);
        v222 = v291;
        *(_QWORD *)(v220 + 56) = &type metadata for String;
        *(_QWORD *)(v220 + 64) = v222;
        *(_QWORD *)(v220 + 32) = v221;
        *(_QWORD *)(v220 + 40) = v223;
        os_log(_:dso:log:_:_:)(v218, &_mh_execute_header, v219, "No secondary keys for %@", 24, 2, v220);
      }
      else
      {
        sub_1003D0004((uint64_t)v325, *((uint64_t *)&v293 + 1), 1u);
        sub_1003D0028(v351, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003CFF68);
        sub_1003D0004(v96, v293, v99);
        v242 = swift_bridgeObjectRelease();
        v243 = static os_log_type_t.error.getter(v242);
        v244 = qword_1011B7D30;
        v245 = swift_allocObject(v285, 72, 7);
        *(_OWORD *)(v245 + 16) = xmmword_100E22B00;
        v246 = UUID.uuidString.getter(v245);
        v247 = v291;
        *(_QWORD *)(v245 + 56) = &type metadata for String;
        *(_QWORD *)(v245 + 64) = v247;
        *(_QWORD *)(v245 + 32) = v246;
        *(_QWORD *)(v245 + 40) = v248;
        os_log(_:dso:log:_:_:)(v243, &_mh_execute_header, v244, "No secondary for %@", 19, 2, v245);
      }
LABEL_79:
      v264 = swift_bridgeObjectRelease();
      if (v313)
        ((void (*)(uint64_t))v313)(v264);
      goto LABEL_81;
    }
    v292 = v92;
    v314(v311, (char *)v319, v316);
    v100 = v325;
    v101 = *((_QWORD *)v325 + 2);
    v305 = v96;
    if (v101)
    {
      *(_QWORD *)&v339 = _swiftEmptyArrayStorage;
      sub_10009AF60(0, v101, 0);
      v102 = (uint64_t)v100
           + ((*(unsigned __int8 *)(v301 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v301 + 80));
      v327 = *(_QWORD *)(v301 + 72);
      do
      {
        v328 = v101;
        v103 = v329;
        sub_10005972C(v102, v329, type metadata accessor for TimeBasedKey);
        v104 = v330;
        sub_10005972C(v103, (uint64_t)v330, type metadata accessor for TimeBasedKey);
        v105 = (uint64_t)v331;
        *v331 = *v104;
        v106 = v333;
        v107 = v334;
        v108 = (char *)v104 + *(int *)(v334 + 20);
        v109 = v105 + *(int *)(v333 + 20);
        v110 = type metadata accessor for DateInterval(0);
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v110 - 8) + 16))(v109, v108, v110);
        v111 = (char *)v104 + *(int *)(v107 + 24);
        v112 = *((_QWORD *)v111 + 2);
        v113 = *((_QWORD *)v111 + 3);
        sub_10001BBBC(v112, v113);
        v114 = (uint64_t)v104;
        v115 = (uint64_t)v324;
        sub_1000126B0(v114, type metadata accessor for TimeBasedKey);
        v116 = (uint64_t *)(v105 + *(int *)(v106 + 24));
        *v116 = v112;
        v116[1] = v113;
        sub_1000126EC(v105, v115, type metadata accessor for FamilyCryptoKeysV2);
        sub_1000126B0(v103, type metadata accessor for TimeBasedKey);
        v117 = (_QWORD *)v339;
        if ((swift_isUniquelyReferenced_nonNull_native(v339) & 1) == 0)
        {
          sub_10009AF60(0, v117[2] + 1, 1);
          v117 = (_QWORD *)v339;
        }
        v119 = v117[2];
        v118 = v117[3];
        if (v119 >= v118 >> 1)
        {
          sub_10009AF60(v118 > 1, v119 + 1, 1);
          v117 = (_QWORD *)v339;
        }
        v117[2] = v119 + 1;
        sub_1000126EC(v115, (uint64_t)v117+ ((*(unsigned __int8 *)(v332 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v332 + 80))+ *(_QWORD *)(v332 + 72) * v119, type metadata accessor for FamilyCryptoKeysV2);
        v102 += v327;
        v101 = v328 - 1;
      }
      while (v328 != 1);
      sub_1003D0004((uint64_t)v325, *((uint64_t *)&v293 + 1), 1u);
      v96 = v305;
      v120 = *(_QWORD *)(v305 + 16);
      if (v120)
        goto LABEL_27;
    }
    else
    {
      sub_1003D0004((uint64_t)v325, *((uint64_t *)&v293 + 1), 1u);
      v117 = _swiftEmptyArrayStorage;
      v120 = *(_QWORD *)(v96 + 16);
      if (v120)
      {
LABEL_27:
        *((_QWORD *)&v293 + 1) = v117;
        *(_QWORD *)&v339 = _swiftEmptyArrayStorage;
        sub_10009AF60(0, v120, 0);
        v121 = (char *)(v96
                      + ((*(unsigned __int8 *)(v301 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v301 + 80)));
        v325 = *(void (**)(unint64_t, char *, uint64_t))(v301 + 72);
        v122 = v326;
        do
        {
          v327 = (uint64_t)v121;
          v328 = v120;
          v123 = v329;
          sub_10005972C((uint64_t)v121, v329, type metadata accessor for TimeBasedKey);
          v124 = v330;
          sub_10005972C(v123, (uint64_t)v330, type metadata accessor for TimeBasedKey);
          v125 = (uint64_t)v331;
          *v331 = *v124;
          v127 = v333;
          v126 = v334;
          v128 = (char *)v124 + *(int *)(v334 + 20);
          v129 = v125 + *(int *)(v333 + 20);
          v130 = type metadata accessor for DateInterval(0);
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v130 - 8) + 16))(v129, v128, v130);
          v131 = (char *)v124 + *(int *)(v126 + 24);
          v132 = *((_QWORD *)v131 + 2);
          v133 = *((_QWORD *)v131 + 3);
          sub_10001BBBC(v132, v133);
          sub_1000126B0((uint64_t)v124, type metadata accessor for TimeBasedKey);
          v134 = (uint64_t *)(v125 + *(int *)(v127 + 24));
          *v134 = v132;
          v134[1] = v133;
          sub_1000126EC(v125, v122, type metadata accessor for FamilyCryptoKeysV2);
          sub_1000126B0(v123, type metadata accessor for TimeBasedKey);
          v135 = (_QWORD *)v339;
          if ((swift_isUniquelyReferenced_nonNull_native(v339) & 1) == 0)
          {
            sub_10009AF60(0, v135[2] + 1, 1);
            v135 = (_QWORD *)v339;
          }
          v137 = v135[2];
          v136 = v135[3];
          v138 = v328;
          if (v137 >= v136 >> 1)
          {
            sub_10009AF60(v136 > 1, v137 + 1, 1);
            v135 = (_QWORD *)v339;
          }
          v135[2] = v137 + 1;
          v122 = v326;
          sub_1000126EC(v326, (uint64_t)v135+ ((*(unsigned __int8 *)(v332 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v332 + 80))+ *(_QWORD *)(v332 + 72) * v137, type metadata accessor for FamilyCryptoKeysV2);
          v121 = (char *)v325 + v327;
          v120 = v138 - 1;
        }
        while (v120);
        sub_1003D0004(v305, v293, 1u);
        v117 = (_QWORD *)*((_QWORD *)&v293 + 1);
        goto LABEL_36;
      }
    }
    sub_1003D0004(v96, v293, 1u);
    v135 = _swiftEmptyArrayStorage;
LABEL_36:
    v139 = (uint64_t)v310;
    v56 = v316;
    v140 = (void (*)(uint64_t, char *, uint64_t))v300;
    v300(v310, v311, v316);
    v141 = MyAccessoryKeyEnvelope;
    *(_QWORD *)(v139 + *(int *)(MyAccessoryKeyEnvelope + 20)) = v117;
    *(_QWORD *)(v139 + *(int *)(v141 + 24)) = v135;
    v142 = v294;
    sub_10005972C(v139, v294, type metadata accessor for CompanionFindMyAccessoryKeyEnvelope);
    v143 = v292;
    sub_10038A8E4(0, 2, v142, &qword_1010FA0B8, type metadata accessor for CompanionFindMyAccessoryKeyEnvelope, &qword_1010FA0C0, (uint64_t (*)(void))sub_1003D04C0, (uint64_t)&v339);
    if (v143)
    {
      swift_bridgeObjectRelease();
      v249 = sub_1003D0028(v351, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003CFF68);
      v250 = static os_log_type_t.error.getter(v249);
      v251 = qword_1011B7D30;
      v252 = swift_allocObject(v285, 72, 7);
      *(_OWORD *)(v252 + 16) = xmmword_100E22B00;
      swift_getErrorValue(v143, &v338, v337);
      v253 = Error.localizedDescription.getter(v337[1], v337[2]);
      v254 = v291;
      *(_QWORD *)(v252 + 56) = &type metadata for String;
      *(_QWORD *)(v252 + 64) = v254;
      *(_QWORD *)(v252 + 32) = v253;
      *(_QWORD *)(v252 + 40) = v255;
      os_log(_:dso:log:_:_:)(v250, &_mh_execute_header, v251, "Error in distributeKeysToConnectedWatch: %@", 43, 2, v252);
      v256 = swift_bridgeObjectRelease();
      if (v313)
        ((void (*)(uint64_t))v313)(v256);
      swift_errorRelease(v143);
      sub_1000126B0(v139, type metadata accessor for CompanionFindMyAccessoryKeyEnvelope);
      v241 = (uint64_t)v317;
      goto LABEL_82;
    }
    v327 = *((_QWORD *)&v339 + 1);
    v328 = 0;
    *(_QWORD *)&v293 = *((_QWORD *)&v340 + 1);
    *((_QWORD *)&v293 + 1) = v340;
    LODWORD(v291) = v339;
    v305 = *((_QWORD *)&v362 + 1);
    v325 = (void (*)(unint64_t, char *, uint64_t))v362;
    LODWORD(v292) = BYTE8(v361);
    v144 = (uint64_t)v296;
    v309(v296, 1, 1, v56);
    v145 = swift_allocObject(&unk_1010720A0, 24, 7);
    swift_weakInit(v145 + 16, v308);
    v146 = v297;
    v314(v297, (char *)v319, v56);
    v147 = swift_allocObject(&unk_101072190, v279, v282);
    *(_QWORD *)(v147 + 16) = v145;
    v140(v147 + v283, v146, v56);
    v148 = (_OWORD *)(v147 + v281);
    v149 = v360;
    v148[6] = v359;
    v148[7] = v149;
    v150 = v362;
    v148[8] = v361;
    v148[9] = v150;
    v151 = v356;
    v148[2] = v355;
    v148[3] = v151;
    v152 = v358;
    v148[4] = v357;
    v148[5] = v152;
    v153 = v354;
    *v148 = v353;
    v148[1] = v153;
    v154 = (uint64_t (**)(void))(v147 + v280);
    v155 = (uint64_t)v313;
    v156 = v306;
    *v154 = v313;
    v154[1] = (uint64_t (*)(void))v156;
    sub_1003D0028(v351, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003D008C);
    sub_10001D898(v155, v156);
    swift_retain();
    v157 = v293;
    sub_1003C141C(v291, v327, *((uint64_t *)&v293 + 1), v293, v292, v325, v305, 0, v144, 0, 1, 0, (void (*)(_QWORD, _QWORD))sub_1003D001C, v147);
    swift_release();
    sub_10001BC14(*((uint64_t *)&v157 + 1), v157);
    sub_100004048(v144, &qword_1010ED860);
    v158 = (uint64_t)v310;
    v159 = type metadata accessor for CompanionFindMyAccessoryKeyEnvelope;
    goto LABEL_38;
  }
  v309 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v312 + 56);
  v56 = v316;
LABEL_56:
  v309(v307, 1, 1, v56);
LABEL_57:
  swift_bridgeObjectRelease();
  return sub_1003D0028(v351, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003CFF68);
}

uint64_t sub_100388B78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[16];

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v2);
  v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *(void **)(v1 + 56);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    v12 = *(_QWORD *)(v1 + 48);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 40);
      swift_retain();
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100139464, v12, v13, &type metadata for () + 1, &type metadata for () + 1);
    }
    else
    {
      static DispatchQoS.background.getter(result);
      v14 = swift_allocObject(&unk_1010720A0, 24, 7);
      swift_weakInit(v14 + 16, v1);
      v15 = swift_allocObject(&unk_1010720A0, 24, 7);
      swift_weakInit(v15 + 16, v1);
      v16 = type metadata accessor for XPCActivity();
      swift_allocObject(v16, 112, 7);
      v17 = sub_100734F68(0xD000000000000034, (void *)0x8000000100ED3600, (uint64_t)v4, (uint64_t)sub_1003CFDA4, v14, (uint64_t)sub_1003CFDAC, v15);
      swift_release();
      swift_release();
      *(_QWORD *)(v1 + 48) = v17;
    }
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100388D6C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  Swift::String v28;
  NSString v29;
  id v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void (*v47)(_QWORD, _QWORD, _QWORD);
  char *v48;
  void (*v49)(_QWORD, _QWORD, _QWORD);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  char *v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char *v69;
  int64_t v70;
  char *v71;
  uint64_t v72;
  void (*v73)(_QWORD, _QWORD, _QWORD);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  Class isa;
  NSString v84;
  _QWORD v85[3];
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  _QWORD *v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  void (*v96)(char *, uint64_t, uint64_t, uint64_t);
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v110;

  v4 = v3;
  v89 = a3;
  v91 = a2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v104 = (char *)v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v88 = (char *)v85 - v11;
  v12 = __chkstk_darwin(v10);
  v106 = (uint64_t)v85 - v13;
  v14 = __chkstk_darwin(v12);
  v103 = (char *)v85 - v15;
  __chkstk_darwin(v14);
  v95 = (char *)v85 - v16;
  v17 = sub_10001A9A8(&qword_1010ED860);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v18);
  v23 = (char *)v85 - v22;
  v87 = *(_QWORD *)(a1 + 16);
  if (v87)
  {
    v85[2] = v4;
    v86 = a1 + 32;
    v85[1] = a1;
    swift_bridgeObjectRetain(a1);
    v24 = 0;
    v107 = v7;
    v100 = v23;
    v101 = v20;
    while (1)
    {
      v94 = v24;
      v25 = v86 + 160 * v24;
      v27 = *(_QWORD *)(v25 + 16);
      v26 = *(void **)(v25 + 24);
      v108 = 0x79654B7974726964;
      v109 = 0xEA00000000002D73;
      swift_bridgeObjectRetain(v26);
      v28._countAndFlagsBits = v27;
      v28._object = v26;
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      v90 = v108;
      v93 = v109;
      v29 = String._bridgeToObjectiveC()();
      v30 = objc_msgSend(v91, "stringArrayForKey:", v29);

      if (v30)
      {
        v31 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v30, &type metadata for String);

        v32 = v31[2];
        if (v32)
          goto LABEL_7;
      }
      else
      {
        v31 = _swiftEmptyArrayStorage;
        v32 = _swiftEmptyArrayStorage[2];
        if (v32)
        {
LABEL_7:
          swift_bridgeObjectRetain(v31);
          v33 = v31 + 5;
          v34 = _swiftEmptyArrayStorage;
          do
          {
            v36 = *(v33 - 1);
            v35 = *v33;
            swift_bridgeObjectRetain(*v33);
            UUID.init(uuidString:)(v36, v35);
            swift_bridgeObjectRelease();
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v20, 1, v6) == 1)
            {
              sub_100004048((uint64_t)v20, &qword_1010ED860);
            }
            else
            {
              v37 = v20;
              v38 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
              v39 = v95;
              v38(v95, v37, v6);
              v38(v103, v39, v6);
              if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) != 0)
                v40 = (unint64_t)v34;
              else
                v40 = sub_1007C84F8(0, v34[2] + 1, 1, (unint64_t)v34);
              v42 = *(_QWORD *)(v40 + 16);
              v41 = *(_QWORD *)(v40 + 24);
              if (v42 >= v41 >> 1)
                v40 = sub_1007C84F8(v41 > 1, v42 + 1, 1, v40);
              *(_QWORD *)(v40 + 16) = v42 + 1;
              v34 = (_QWORD *)v40;
              v38((char *)(v40+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v42), v103, v6);
              v20 = v101;
            }
            v33 += 2;
            --v32;
          }
          while (v32);
          swift_bridgeObjectRelease();
          goto LABEL_20;
        }
      }
      v34 = _swiftEmptyArrayStorage;
LABEL_20:
      swift_bridgeObjectRelease();
      v43 = v34[2];
      v99 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v44 = Set.init(minimumCapacity:)(v43);
      v45 = v100;
      v98 = (char *)v34[2];
      v92 = v34;
      if (v98)
      {
        v46 = 0;
        v97 = (char *)v34
            + ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80));
        v105 = *(_QWORD *)(v107 + 72);
        v47 = *(void (**)(_QWORD, _QWORD, _QWORD))(v107 + 16);
        v48 = v104;
        v49 = v47;
        v47(v100, v97, v6);
        while (1)
        {
          v54 = v107;
          v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 56);
          v55(v45, 0, 1, v6);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v45, 1, v6) == 1)
          {
            swift_bridgeObjectRelease();
            v20 = v101;
            goto LABEL_36;
          }
          v96 = v55;
          v102 = v46;
          (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v48, v45, v6);
          v56 = *(_QWORD *)(v44 + 40);
          swift_bridgeObjectRetain(v44);
          v57 = dispatch thunk of Hashable._rawHashValue(seed:)(v56, v6, v99);
          v58 = -1 << *(_BYTE *)(v44 + 32);
          v59 = v57 & ~v58;
          if (((*(_QWORD *)(v44 + 56 + ((v59 >> 3) & 0xFFFFFFFFFFFFF8)) >> v59) & 1) != 0)
          {
            v60 = ~v58;
            while (1)
            {
              v61 = v106;
              v47(v106, *(_QWORD *)(v44 + 48) + v59 * v105, v6);
              v62 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
              v63 = dispatch thunk of static Equatable.== infix(_:_:)(v61, v104, v6, v62);
              v53 = *(void (**)(uint64_t, uint64_t))(v107 + 8);
              v53(v61, v6);
              if ((v63 & 1) != 0)
                break;
              v59 = (v59 + 1) & v60;
              v47 = v49;
              if (((*(_QWORD *)(v44 + 56 + ((v59 >> 3) & 0xFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
                goto LABEL_22;
            }
            swift_bridgeObjectRelease();
            v52 = v104;
          }
          else
          {
LABEL_22:
            swift_bridgeObjectRelease();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v44);
            v51 = v106;
            v52 = v104;
            v47(v106, v104, v6);
            v108 = v44;
            sub_100A1CCB8(v51, v59, isUniquelyReferenced_nonNull_native);
            v44 = v108;
            swift_bridgeObjectRelease();
            v53 = *(void (**)(uint64_t, uint64_t))(v107 + 8);
          }
          v46 = v102 + 1;
          v53((uint64_t)v52, v6);
          v48 = v52;
          v45 = v100;
          v47 = v49;
          if (v46 == v98)
            break;
          v49(v100, &v97[v105 * (_QWORD)v46], v6);
        }
        v54 = v107;
        v20 = v101;
        v96(v100, 1, 1, v6);
      }
      else
      {
        v54 = v107;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 56))(v100, 1, 1, v6);
      }
      swift_bridgeObjectRelease();
      v47 = *(void (**)(_QWORD, _QWORD, _QWORD))(v54 + 16);
LABEL_36:
      v108 = v44;
      v64 = v88;
      v47(v88, v89, v6);
      swift_bridgeObjectRetain(v44);
      v65 = v106;
      sub_100A09F38(v106, v64);
      v102 = *(char **)(v54 + 8);
      ((void (*)(uint64_t, uint64_t))v102)(v65, v6);
      v66 = v108;
      swift_bridgeObjectRetain(v108);
      v67 = sub_10051E5DC(v44, v66);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v67 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain(v66);
        v69 = (char *)sub_100508DAC(v68);
        swift_bridgeObjectRelease();
        v70 = *((_QWORD *)v69 + 2);
        if (v70)
        {
          v110 = _swiftEmptyArrayStorage;
          sub_10009A2F4(0, v70, 0);
          v71 = &v69[(*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80)];
          v72 = *(_QWORD *)(v107 + 72);
          v98 = v69;
          v99 = v72;
          v73 = v47;
          do
          {
            v74 = v106;
            v75 = ((uint64_t (*)(uint64_t, char *, uint64_t))v47)(v106, v71, v6);
            v76 = UUID.uuidString.getter(v75);
            v105 = v77;
            ((void (*)(uint64_t, uint64_t))v102)(v74, v6);
            v78 = v110;
            if ((swift_isUniquelyReferenced_nonNull_native(v110) & 1) == 0)
            {
              sub_10009A2F4(0, v78[2] + 1, 1);
              v78 = v110;
            }
            v80 = v78[2];
            v79 = v78[3];
            if (v80 >= v79 >> 1)
            {
              sub_10009A2F4(v79 > 1, v80 + 1, 1);
              v78 = v110;
            }
            v78[2] = v80 + 1;
            v81 = &v78[2 * v80];
            v82 = v105;
            v81[4] = v76;
            v81[5] = v82;
            v71 += v99;
            --v70;
            v47 = v73;
          }
          while (v70);
          swift_release();
          v20 = v101;
        }
        else
        {
          swift_release();
        }
        swift_bridgeObjectRelease();
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v84 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        objc_msgSend(v91, "setValue:forKey:", isa, v84);

      }
      v7 = v107;
      v24 = v94 + 1;
      if (v94 + 1 == v87)
        return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void sub_100389614(uint64_t (*a1)(char *, char *, uint64_t), __int128 *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  Swift::String v36;
  Swift::String v37;
  void *v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  unint64_t v43;
  id v44;
  Swift::String v45;
  uint64_t v46;
  NSString v47;
  id v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  int64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  NSString v78;
  Class isa;
  NSString v80;
  _QWORD v81[2];
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t (*v85)(char *, char *, uint64_t);
  char *v86;
  char *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  unint64_t v99;

  v85 = a1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v86 = (char *)v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v81 - v9;
  __chkstk_darwin(v8);
  v87 = (char *)v81 - v11;
  v12 = sub_10001A9A8(&qword_1010ED860);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v84 = (_QWORD *)((char *)v81 - v16);
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (_QWORD *)((char *)v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *(void **)(v2 + 200);
  *v20 = v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)(v20);
  v23 = (*(uint64_t (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) != 0)
  {
    LODWORD(v82) = static os_log_type_t.info.getter(v23);
    if (qword_1010EA250 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA250, sub_100B5D964);
LABEL_3:
  v83 = qword_1011B7D30;
  v24 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v25 = swift_allocObject(v24, 112, 7);
  *(_OWORD *)(v25 + 16) = xmmword_100E22B10;
  v26 = UUID.uuidString.getter(v25);
  v28 = v27;
  *(_QWORD *)(v25 + 56) = &type metadata for String;
  v29 = sub_10001AA00();
  *(_QWORD *)(v25 + 64) = v29;
  *(_QWORD *)(v25 + 32) = v26;
  *(_QWORD *)(v25 + 40) = v28;
  v98 = 60;
  v99 = 0xE100000000000000;
  v30 = a2[7];
  v94 = a2[6];
  v95 = v30;
  v31 = a2[9];
  v96 = a2[8];
  v97 = v31;
  v32 = a2[3];
  v90 = a2[2];
  v91 = v32;
  v33 = a2[5];
  v92 = a2[4];
  v93 = v33;
  v34 = a2[1];
  v88 = *a2;
  v89 = v34;
  v35 = sub_1003CDEF0();
  v36._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(&type metadata for MessagingDevice, v35);
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._countAndFlagsBits = 8250;
  v37._object = (void *)0xE200000000000000;
  String.append(_:)(v37);
  v39 = *((_QWORD *)a2 + 12);
  v38 = (void *)*((_QWORD *)a2 + 13);
  swift_bridgeObjectRetain(v38);
  v40._countAndFlagsBits = v39;
  v40._object = v38;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._countAndFlagsBits = 62;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  v42 = v98;
  v43 = v99;
  *(_QWORD *)(v25 + 96) = &type metadata for String;
  *(_QWORD *)(v25 + 104) = v29;
  *(_QWORD *)(v25 + 72) = v42;
  *(_QWORD *)(v25 + 80) = v43;
  os_log(_:dso:log:_:_:)(v82, &_mh_execute_header, v83, "Marking beacon %@ as clean for %@", 33, 2, v25);
  swift_bridgeObjectRelease();
  v44 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v45 = (Swift::String)a2[1];
  *(_QWORD *)&v88 = 0x79654B7974726964;
  *((_QWORD *)&v88 + 1) = 0xEA00000000002D73;
  String.append(_:)(v45);
  v46 = *((_QWORD *)&v88 + 1);
  v81[1] = v88;
  v47 = String._bridgeToObjectiveC()();
  v48 = objc_msgSend(v44, "stringArrayForKey:", v47);

  if (v48)
  {
    v49 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v48, &type metadata for String);

  }
  else
  {
    v49 = _swiftEmptyArrayStorage;
  }
  v50 = v49[2];
  v51 = _swiftEmptyArrayStorage;
  if (v50)
  {
    v82 = v46;
    v83 = (uint64_t)v44;
    swift_bridgeObjectRetain(v49);
    v81[0] = v49;
    v52 = v49 + 5;
    v53 = v10;
    do
    {
      v54 = *(v52 - 1);
      v55 = *v52;
      swift_bridgeObjectRetain(*v52);
      UUID.init(uuidString:)(v54, v55);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v15, 1, v4) == 1)
      {
        sub_100004048((uint64_t)v15, &qword_1010ED860);
      }
      else
      {
        v56 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
        v57 = v87;
        v56(v87, v15, v4);
        v56(v10, v57, v4);
        if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
          v51 = (_QWORD *)sub_1007C84F8(0, v51[2] + 1, 1, (unint64_t)v51);
        v59 = v51[2];
        v58 = v51[3];
        if (v59 >= v58 >> 1)
          v51 = (_QWORD *)sub_1007C84F8(v58 > 1, v59 + 1, 1, (unint64_t)v51);
        v51[2] = v59 + 1;
        v60 = (unint64_t)v51
            + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
            + *(_QWORD *)(v5 + 72) * v59;
        v10 = v53;
        v56((char *)v60, v53, v4);
      }
      v52 += 2;
      --v50;
    }
    while (v50);
    swift_bridgeObjectRelease();
    v44 = (id)v83;
    v46 = v82;
  }
  swift_bridgeObjectRelease();
  v61 = sub_10001B664((uint64_t)v51);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v88 = v61;
  swift_bridgeObjectRetain(v61);
  v62 = (uint64_t)v84;
  sub_100C81CDC((uint64_t)v85, (uint64_t)v84);
  sub_100004048(v62, &qword_1010ED860);
  v63 = v88;
  swift_bridgeObjectRetain(v88);
  LOBYTE(v62) = sub_10051E5DC(v61, v63);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v62 & 1) != 0)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else if (*(_QWORD *)(v63 + 16))
  {
    swift_bridgeObjectRetain(v63);
    v65 = sub_100508DAC(v64);
    swift_bridgeObjectRelease();
    v66 = v65[2];
    if (v66)
    {
      v82 = v46;
      v83 = (uint64_t)v44;
      v98 = (uint64_t)_swiftEmptyArrayStorage;
      sub_10009A2F4(0, v66, 0);
      v67 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      v84 = v65;
      v68 = (char *)v65 + v67;
      v87 = *(char **)(v5 + 72);
      v85 = *(uint64_t (**)(char *, char *, uint64_t))(v5 + 16);
      do
      {
        v69 = v86;
        v70 = v85(v86, v68, v4);
        v71 = UUID.uuidString.getter(v70);
        v73 = v72;
        (*(void (**)(char *, uint64_t))(v5 + 8))(v69, v4);
        v74 = v98;
        if ((swift_isUniquelyReferenced_nonNull_native(v98) & 1) == 0)
        {
          sub_10009A2F4(0, *(_QWORD *)(v74 + 16) + 1, 1);
          v74 = v98;
        }
        v76 = *(_QWORD *)(v74 + 16);
        v75 = *(_QWORD *)(v74 + 24);
        if (v76 >= v75 >> 1)
        {
          sub_10009A2F4(v75 > 1, v76 + 1, 1);
          v74 = v98;
        }
        *(_QWORD *)(v74 + 16) = v76 + 1;
        v77 = v74 + 16 * v76;
        *(_QWORD *)(v77 + 32) = v71;
        *(_QWORD *)(v77 + 40) = v73;
        v68 = &v87[(_QWORD)v68];
        --v66;
      }
      while (v66);
      swift_release();
      v44 = (id)v83;
    }
    else
    {
      swift_release();
    }
    swift_bridgeObjectRelease();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v80 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    objc_msgSend(v44, "setValue:forKey:", isa, v80);

  }
  else
  {
    swift_bridgeObjectRelease();
    v78 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    objc_msgSend(v44, "setValue:forKey:", 0, v78);

  }
}

uint64_t sub_100389E4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  uint64_t result;
  id v19;
  Swift::String v20;
  NSString v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD v34[2];
  id v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;

  v3 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v3);
  v5 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v36 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)v34 - v10;
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (_QWORD *)((char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)(v1 + 200);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) != 0)
  {
    v19 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v20 = *(Swift::String *)(a1 + 16);
    v37 = 0x79654B7974726964;
    v38 = 0xEA00000000002D73;
    String.append(_:)(v20);
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v22 = objc_msgSend(v19, "stringArrayForKey:", v21);

    if (v22)
    {
      v23 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, &type metadata for String);

      v24 = v23[2];
      if (v24)
        goto LABEL_4;
    }
    else
    {
      v23 = _swiftEmptyArrayStorage;
      v24 = _swiftEmptyArrayStorage[2];
      if (v24)
      {
LABEL_4:
        v35 = v19;
        swift_bridgeObjectRetain(v23);
        v34[1] = v23;
        v25 = v23 + 5;
        v26 = (char *)_swiftEmptyArrayStorage;
        do
        {
          v27 = *(v25 - 1);
          v28 = *v25;
          swift_bridgeObjectRetain(*v25);
          UUID.init(uuidString:)(v27, v28);
          swift_bridgeObjectRelease();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
          {
            sub_100004048((uint64_t)v5, &qword_1010ED860);
          }
          else
          {
            v29 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
            v29(v11, v5, v6);
            v29(v36, v11, v6);
            if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
              v26 = (char *)sub_1007C84F8(0, *((_QWORD *)v26 + 2) + 1, 1, (unint64_t)v26);
            v31 = *((_QWORD *)v26 + 2);
            v30 = *((_QWORD *)v26 + 3);
            if (v31 >= v30 >> 1)
              v26 = (char *)sub_1007C84F8(v30 > 1, v31 + 1, 1, (unint64_t)v26);
            *((_QWORD *)v26 + 2) = v31 + 1;
            v29(&v26[((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v31], v36, v6);
          }
          v25 += 2;
          --v24;
        }
        while (v24);
        swift_bridgeObjectRelease();
        v19 = v35;
        goto LABEL_16;
      }
    }
    v26 = (char *)_swiftEmptyArrayStorage;
LABEL_16:
    swift_bridgeObjectRelease();
    v32 = sub_10001B664((uint64_t)v26);
    swift_bridgeObjectRelease();
    v33 = sub_100508DAC(v32);

    swift_bridgeObjectRelease();
    return (uint64_t)v33;
  }
  __break(1u);
  return result;
}

uint64_t sub_10038A1DC@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_10038A6C0(a1, a2, a3, &qword_1010FA480, &qword_1010FA488, &qword_1010FA490, (uint64_t (*)(void))sub_1003D8130, a4);
}

uint64_t sub_10038A210@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_10038A8E4(a1, a2, a3, &qword_1010FA458, type metadata accessor for PeerTrustAckEnvelopeV1, &qword_1010FA460, (uint64_t (*)(void))sub_1003D7954, a4);
}

uint64_t sub_10038A244@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_10038A8E4(a1, a2, a3, &qword_1010FA438, type metadata accessor for CircleTrustAckEnvelopeV1, &qword_1010FA440, (uint64_t (*)(void))sub_1003D78D8, a4);
}

uint64_t sub_10038A278@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_BYTE *, _QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[32];
  _QWORD v30[4];
  uint64_t v31;

  v31 = a2;
  v8 = type metadata accessor for CodingUserInfoKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v29[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for PropertyListEncoder(0);
  v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  PropertyListEncoder.init()(v13);
  if (qword_1010EA610 != -1)
    swift_once(&qword_1010EA610, sub_100DB0924);
  v14 = sub_10001A9E8(v8, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, v14, v8);
  v30[3] = &type metadata for Bool;
  LOBYTE(v30[0]) = 1;
  v15 = (void (*)(_BYTE *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(v29);
  sub_1000FE92C((uint64_t)v30, (uint64_t)v11);
  v15(v29, 0);
  v16 = sub_10001A9A8(&qword_1011003C0);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = swift_allocObject(v16, v20 + *(_QWORD *)(v18 + 72), v19 | 7);
  *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v21 + v20, a3, v17);
  v30[0] = v21;
  v22 = sub_10001A9A8((uint64_t *)&unk_1010F7730);
  v23 = sub_1003CDE74();
  v24 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v30, v22, v23);
  if (v4)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a3, v17);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v27 = v24;
    v28 = v25;
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a3, v17);
    result = swift_bridgeObjectRelease();
    *(_BYTE *)a4 = a1;
    *(_QWORD *)(a4 + 8) = v31;
    *(_QWORD *)(a4 + 16) = v27;
    *(_QWORD *)(a4 + 24) = v28;
  }
  return result;
}

uint64_t sub_10038A4AC@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_BYTE *, _QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  int v26;
  _BYTE v27[32];
  _QWORD v28[4];
  uint64_t v29;

  v29 = a2;
  v26 = a1;
  v9 = type metadata accessor for CodingUserInfoKey(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PropertyListEncoder(0);
  v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  PropertyListEncoder.init()(v14);
  if (qword_1010EA610 != -1)
    swift_once(&qword_1010EA610, sub_100DB0924);
  v15 = sub_10001A9E8(v9, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v15, v9);
  v28[3] = &type metadata for Bool;
  LOBYTE(v28[0]) = 1;
  v16 = (void (*)(_BYTE *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(v27);
  sub_1000FE92C((uint64_t)v28, (uint64_t)v12);
  v16(v27, 0);
  v17 = sub_10001A9A8(&qword_101106C20);
  v18 = swift_allocObject(v17, 48, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v18 + 32) = a3;
  *(_QWORD *)(v18 + 40) = a4;
  v28[0] = v18;
  swift_bridgeObjectRetain(a4);
  v19 = sub_10001A9A8(&qword_1011063B0);
  v20 = sub_1003792A4();
  v21 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v28, v19, v20);
  v23 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_release();
  if (!v5)
  {
    *(_BYTE *)a5 = v26;
    *(_QWORD *)(a5 + 8) = v29;
    *(_QWORD *)(a5 + 16) = v21;
    *(_QWORD *)(a5 + 24) = v23;
  }
  return result;
}

uint64_t sub_10038A68C@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_10038A6C0(a1, a2, a3, &qword_1010FA4C8, &qword_1010F21C8, &qword_1010FA4D0, (uint64_t (*)(void))sub_1003D1DF4, a4);
}

uint64_t sub_10038A6C0@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, unint64_t *a6@<X5>, uint64_t (*a7)(void)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_BYTE *, _QWORD);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t (*v32)(void);
  _BYTE v33[32];
  _QWORD v34[6];

  v31 = a6;
  v32 = a7;
  v30 = a2;
  HIDWORD(v29) = a1;
  v12 = type metadata accessor for CodingUserInfoKey(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PropertyListEncoder(0);
  v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  PropertyListEncoder.init()(v17);
  if (qword_1010EA610 != -1)
    swift_once(&qword_1010EA610, sub_100DB0924);
  v18 = sub_10001A9E8(v12, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v18, v12);
  v34[3] = &type metadata for Bool;
  LOBYTE(v34[0]) = 1;
  v19 = (void (*)(_BYTE *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(v33);
  sub_1000FE92C((uint64_t)v34, (uint64_t)v15);
  v19(v33, 0);
  v20 = sub_10001A9A8(a4);
  v21 = swift_allocObject(v20, 40, 7);
  *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v21 + 32) = a3;
  v34[0] = v21;
  swift_bridgeObjectRetain(a3);
  v22 = sub_10001A9A8(a5);
  v23 = sub_100365CCC(v31, a5, v32, (const char *)&protocol conformance descriptor for <A> [A]);
  v24 = v34[5];
  v25 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v34, v22, v23);
  v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_release();
  if (!v24)
  {
    *(_BYTE *)a8 = BYTE4(v29);
    *(_QWORD *)(a8 + 8) = v30;
    *(_QWORD *)(a8 + 16) = v25;
    *(_QWORD *)(a8 + 24) = v27;
  }
  return result;
}

uint64_t sub_10038A8B0@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_10038A8E4(a1, a2, a3, &qword_1010FA2A8, type metadata accessor for CircleTrustDeclineEnvelopeV1, &qword_1010FA2B0, (uint64_t (*)(void))sub_1003D1F60, a4);
}

uint64_t sub_10038A8E4@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t (*a5)(_QWORD)@<X4>, uint64_t *a6@<X5>, uint64_t (*a7)(void)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_BYTE *, _QWORD);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t (*v36)(void);
  _BYTE v37[32];
  _QWORD v38[6];

  v35 = a6;
  v36 = a7;
  v34 = a2;
  HIDWORD(v33) = a1;
  v12 = type metadata accessor for CodingUserInfoKey(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PropertyListEncoder(0);
  v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  PropertyListEncoder.init()(v17);
  if (qword_1010EA610 != -1)
    swift_once(&qword_1010EA610, sub_100DB0924);
  v18 = sub_10001A9E8(v12, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v18, v12);
  v38[3] = &type metadata for Bool;
  LOBYTE(v38[0]) = 1;
  v19 = (void (*)(_BYTE *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(v37);
  sub_1000FE92C((uint64_t)v38, (uint64_t)v15);
  v19(v37, 0);
  v20 = sub_10001A9A8(a4);
  v21 = *(_QWORD *)(a5(0) - 8);
  v22 = *(_QWORD *)(v21 + 72);
  v23 = *(unsigned __int8 *)(v21 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = swift_allocObject(v20, v24 + v22, v23 | 7);
  *(_OWORD *)(v25 + 16) = xmmword_100E22B00;
  sub_10005972C(a3, v25 + v24, a5);
  v38[0] = v25;
  v26 = sub_10001A9A8(v35);
  v27 = v36();
  v28 = v38[5];
  v29 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v38, v26, v27);
  v31 = v30;
  swift_release();
  sub_1000126B0(a3, a5);
  result = swift_bridgeObjectRelease();
  if (!v28)
  {
    *(_BYTE *)a8 = BYTE4(v33);
    *(_QWORD *)(a8 + 8) = v34;
    *(_QWORD *)(a8 + 16) = v29;
    *(_QWORD *)(a8 + 24) = v31;
  }
  return result;
}

uint64_t sub_10038AB04@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_10038A6C0(a1, a2, a3, &qword_1010FA0D8, &qword_1010FA0E0, &qword_1010FA0E8, (uint64_t (*)(void))sub_1003D0700, a4);
}

uint64_t sub_10038AB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t Strong;
  id v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  _BYTE v31[31];
  _QWORD v32[3];
  _BYTE v33[8];

  v13 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)&v30[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000F9B8(a1, (uint64_t)v15, &qword_1010F4868);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15, v13);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v17 = *v15;
    v18 = static os_log_type_t.info.getter(EnumCaseMultiPayload);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v19 = qword_1011B7D30;
    v20 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v21 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
    swift_getErrorValue(v17, v33, v32);
    v22 = Error.localizedDescription.getter(v32[1], v32[2]);
    v24 = v23;
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = sub_10001AA00();
    *(_QWORD *)(v21 + 32) = v22;
    *(_QWORD *)(v21 + 40) = v24;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Local send failure: %@.", 23, 2, v21);
    swift_bridgeObjectRelease();
    result = swift_errorRelease(v17);
    if (!a5)
      return result;
    return a5(result);
  }
  swift_beginAccess(a2 + 16, v31, 0, 0);
  Strong = swift_weakLoadStrong(a2 + 16);
  if (Strong)
  {
    v27 = *(id *)(Strong + 200);
    v28 = swift_release();
    __chkstk_darwin(v28);
    *(_QWORD *)&v30[-32] = a2;
    *(_QWORD *)&v30[-24] = a3;
    *(_QWORD *)&v30[-16] = a4;
    v29 = sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
    OS_dispatch_queue.sync<A>(execute:)(a7, &v30[-48], v29);

  }
  result = sub_100004048((uint64_t)v15, &qword_1010F4868);
  if (a5)
    return a5(result);
  return result;
}

uint64_t sub_10038AD88@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(char *, char *, uint64_t)@<X1>, __int128 *a3@<X2>, BOOL *a4@<X8>)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _BYTE v10[24];

  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v7);
  v9 = result;
  if (result)
  {
    sub_100389614(a2, a3);
    result = swift_release();
  }
  *a4 = v9 == 0;
  return result;
}

uint64_t sub_10038AE18(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[6];

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  result = os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_1011B7D30, "Clearing any registered XPC activities", 38, 2, _swiftEmptyArrayStorage);
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    *(_QWORD *)(a1 + 48) = 0;
    v5 = *(NSObject **)(v4 + 16);
    v6 = swift_allocObject(&unk_1010742D8, 32, 7);
    *(_QWORD *)(v6 + 16) = sub_1003D8448;
    *(_QWORD *)(v6 + 24) = v4;
    v8[4] = sub_10005CBA4;
    v8[5] = v6;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1107296256;
    v8[2] = sub_10001D8B8;
    v8[3] = &unk_1010742F0;
    v7 = _Block_copy(v8);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v5, v7);
    _Block_release(v7);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v6, "", 90, 53, 20, 1);
    swift_release_n(v4, 2);
    result = swift_release();
    if ((v5 & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t sub_10038AF94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char v73[24];
  _QWORD v74[5];
  unsigned __int8 v75[48];

  v68 = a1;
  sub_100005CF0(a1, (uint64_t)v74, &qword_101106350);
  v66 = v74[0];
  v67 = v74[1];
  v65 = v74[2];
  v63 = v74[3];
  v64 = v74[4];
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v5);
  v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v69 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010FA070);
  __chkstk_darwin(v11);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ShareRecord(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v60 - v19;
  a2 += 16;
  swift_beginAccess(a2, v73, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (!result)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 2;
LABEL_18:
    *a3 = v32;
    a3[1] = v28;
    a3[2] = v29;
    a3[3] = v30;
    a3[4] = v31;
    return result;
  }
  v70 = v7;
  v60 = v18;
  v71 = result;
  v72 = v20;
  swift_retain();
  v22 = sub_1000188D0();
  *(_QWORD *)v75 = _swiftEmptyDictionarySingleton;
  v23 = *((_QWORD *)v22 + 2);
  if (v23)
  {
    v62 = v9;
    v61 = v8;
    v24 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
    v25 = (uint64_t)&v22[(*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80)];
    v26 = *(_QWORD *)(v24 + 72);
    swift_bridgeObjectRetain(v22);
    do
    {
      sub_10080EC88(v75, v25);
      v25 += v26;
      --v23;
    }
    while (v23);
    swift_release();
    swift_bridgeObjectRelease_n(v22, 2);
    v27 = *(_QWORD **)v75;
    v8 = v61;
    v9 = v62;
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    v27 = _swiftEmptyDictionarySingleton;
  }
  swift_bridgeObjectRetain(v27);
  sub_10037B040(v33);
  v35 = v34;
  swift_bridgeObjectRelease();
  *(_QWORD *)v75 = v35;
  swift_bridgeObjectRetain(v35);
  sub_1003AFC8C(v75);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(*(_QWORD *)v75 + 16))
  {
    sub_10005972C(*(_QWORD *)v75 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)), (uint64_t)v13, type metadata accessor for ShareRecord);
    v36 = 0;
  }
  else
  {
    v36 = 1;
  }
  v37 = (uint64_t)v72;
  v38 = (uint64_t)v70;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, v36, 1, v14);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    v39 = &qword_1010FA070;
    v40 = (uint64_t)v13;
LABEL_15:
    v41 = sub_100004048(v40, v39);
    v42 = static os_log_type_t.default.getter(v41);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v32 = 2;
    os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, qword_1011B7D30, "No expiring shares", 18, 2, _swiftEmptyArrayStorage);
    result = swift_release();
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    goto LABEL_18;
  }
  sub_1000126EC((uint64_t)v13, v37, type metadata accessor for ShareRecord);
  sub_10000F9B8(v37 + *(int *)(v14 + 32), v38, (uint64_t *)&unk_1010EA690);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v38, 1, v8) == 1)
  {
    sub_1000126B0(v37, type metadata accessor for ShareRecord);
    v39 = (uint64_t *)&unk_1010EA690;
    v40 = v38;
    goto LABEL_15;
  }
  v43 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v69, v38, v8);
  v44 = sub_100005CF0(v68, (uint64_t)v75, &qword_101106350);
  if (v75[0] != 2)
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v43, v8);
    result = sub_1000126B0(v37, type metadata accessor for ShareRecord);
    v28 = v67;
    v32 = v66;
    v29 = v65;
    v31 = v64;
    v30 = v63;
    goto LABEL_18;
  }
  v62 = v9;
  LODWORD(v70) = static os_log_type_t.default.getter(v44);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v45 = qword_1011B7D30;
  v46 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v47 = swift_allocObject(v46, 112, 7);
  *(_OWORD *)(v47 + 16) = xmmword_100E22B10;
  v48 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v49 = v8;
  v50 = dispatch thunk of CustomStringConvertible.description.getter(v8, v48);
  v52 = v51;
  *(_QWORD *)(v47 + 56) = &type metadata for String;
  v53 = sub_10001AA00();
  *(_QWORD *)(v47 + 64) = v53;
  *(_QWORD *)(v47 + 32) = v50;
  *(_QWORD *)(v47 + 40) = v52;
  v54 = (uint64_t)v72;
  v55 = (uint64_t)v60;
  sub_10005972C((uint64_t)v72, (uint64_t)v60, type metadata accessor for ShareRecord);
  v56 = String.init<A>(describing:)(v55, v14);
  *(_QWORD *)(v47 + 96) = &type metadata for String;
  *(_QWORD *)(v47 + 104) = v53;
  *(_QWORD *)(v47 + 72) = v56;
  *(_QWORD *)(v47 + 80) = v57;
  os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v45, "Next share expires at %@: %@", 28, 2, v47);
  v58 = swift_bridgeObjectRelease();
  v59 = Date.timeIntervalSinceNow.getter(v58);
  swift_release();
  if ((~*(_QWORD *)&v59 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v59 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v59 < 9.22337204e18)
  {
    v28 = (uint64_t)v59;
    (*(void (**)(char *, uint64_t))(v62 + 8))(v69, v49);
    result = sub_1000126B0(v54, type metadata accessor for ShareRecord);
    v31 = 707;
    v29 = 60;
    v32 = 1;
    v30 = 1;
    goto LABEL_18;
  }
LABEL_29:
  __break(1u);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10038B668(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[6];
  _BYTE v12[24];

  v5 = a4 + 16;
  swift_beginAccess(a4 + 16, v12, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_1007329F0();
    }
    else if (a3 == 2)
    {
      v8 = *(NSObject **)(v7 + 56);
      v9 = swift_allocObject(&unk_101072118, 32, 7);
      *(_QWORD *)(v9 + 16) = sub_1003CFDB4;
      *(_QWORD *)(v9 + 24) = v7;
      aBlock[4] = sub_10005CBA4;
      aBlock[5] = v9;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10001D8B8;
      aBlock[3] = &unk_101072130;
      v10 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v8, v10);
      _Block_release(v10);
      LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v9, "", 113, 639, 30, 1);
      swift_release();
      result = swift_release();
      if ((v8 & 1) != 0)
      {
        __break(1u);
        return result;
      }
      sub_100732A0C();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10038B7D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  dispatch_group_t v45;
  uint64_t v46;
  NSObject *v47;
  dispatch_group_t v48;
  _QWORD v50[2];
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  dispatch_group_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v2);
  v65 = (uint64_t)v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ShareRecord(0);
  v61 = *(_QWORD *)(v4 - 8);
  v5 = *(_QWORD *)(v61 + 64);
  v6 = __chkstk_darwin(v4);
  v57 = (uint64_t)v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v64 = (uint64_t)v50 - v7;
  v66 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v66 - 8);
  v9 = __chkstk_darwin(v66);
  v11 = (char *)v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v62 = (uint64_t)v50 - v12;
  v59 = a1;
  v13 = sub_1000188D0();
  v67[0] = _swiftEmptyDictionarySingleton;
  v14 = *((_QWORD *)v13 + 2);
  v63 = v11;
  if (v14)
  {
    v60 = v4;
    v15 = v8;
    v16 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
    v17 = (uint64_t)&v13[(*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)];
    v18 = *(_QWORD *)(v16 + 72);
    swift_bridgeObjectRetain(v13);
    do
    {
      sub_10080EC88(v67, v17);
      v17 += v18;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease_n(v13, 2);
    v19 = (_QWORD *)v67[0];
    v8 = v15;
    v4 = v60;
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = _swiftEmptyDictionarySingleton;
  }
  swift_bridgeObjectRetain(v19);
  sub_10037B040(v20);
  v22 = v21;
  swift_bridgeObjectRelease();
  v67[0] = v22;
  swift_bridgeObjectRetain(v22);
  sub_1003AFC8C(v67);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = v67[0];
  static Date.trustedNow.getter(v62);
  v58 = dispatch_group_create();
  v24 = static os_log_type_t.default.getter(v58);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, qword_1011B7D30, "Processing expired shares", 25, 2, _swiftEmptyArrayStorage);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = v64;
  if (v25)
  {
    v27 = *(unsigned __int8 *)(v61 + 80);
    v50[1] = v23;
    v28 = v23 + ((v27 + 32) & ~v27);
    v29 = *(_QWORD *)(v61 + 72);
    v54 = v27 | 7;
    v55 = (v27 + 16) & ~v27;
    v30 = v5 + v55;
    v31 = v29;
    v53 = (v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    v52 = v53 + 8;
    v51 = xmmword_100E22B00;
    v56 = v29;
    do
    {
      sub_10005972C(v28, v26, type metadata accessor for ShareRecord);
      v32 = v65;
      sub_10000F9B8(v26 + *(int *)(v4 + 32), v65, (uint64_t *)&unk_1010EA690);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v32, 1, v66) == 1)
      {
        sub_1000126B0(v26, type metadata accessor for ShareRecord);
        sub_100004048(v65, (uint64_t *)&unk_1010EA690);
      }
      else
      {
        v33 = v63;
        v34 = v66;
        (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v63, v65, v66);
        v35 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v36 = dispatch thunk of static Comparable.< infix(_:_:)(v62, v33, v34, v35);
        if ((v36 & 1) != 0)
        {
          (*(void (**)(char *, uint64_t))(v8 + 8))(v33, v66);
        }
        else
        {
          LODWORD(v60) = static os_log_type_t.default.getter(v36);
          v61 = qword_1011B7D30;
          v37 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
          v38 = swift_allocObject(v37, 72, 7);
          *(_OWORD *)(v38 + 16) = v51;
          v39 = v57;
          sub_10005972C(v26, v57, type metadata accessor for ShareRecord);
          v40 = v4;
          v41 = v8;
          v42 = String.init<A>(describing:)(v39, v4);
          v44 = v43;
          *(_QWORD *)(v38 + 56) = &type metadata for String;
          *(_QWORD *)(v38 + 64) = sub_10001AA00();
          *(_QWORD *)(v38 + 32) = v42;
          *(_QWORD *)(v38 + 40) = v44;
          v8 = v41;
          v4 = v40;
          os_log(_:dso:log:_:_:)(v60, &_mh_execute_header, v61, "Expired share: %@", 17, 2, v38);
          swift_bridgeObjectRelease();
          v45 = v58;
          dispatch_group_enter(v58);
          sub_10005972C(v64, v39, type metadata accessor for ShareRecord);
          v46 = swift_allocObject(&unk_101072168, v52, v54);
          sub_1000126EC(v39, v46 + v55, type metadata accessor for ShareRecord);
          *(_QWORD *)(v46 + v53) = v45;
          v47 = v45;
          v31 = v56;
          sub_10037BF50(v64, (uint64_t)sub_1003CFF04, v46);
          v26 = v64;
          swift_release();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v63, v66);
        }
        sub_1000126B0(v26, type metadata accessor for ShareRecord);
      }
      v28 += v31;
      --v25;
    }
    while (v25);
  }
  swift_release();
  v48 = v58;
  OS_dispatch_group.wait()();
  sub_100388B78();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v62, v66);
}

void sub_10038BD6C(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for ShareRecord(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v10 = swift_errorRetain(a1);
    v11 = static os_log_type_t.error.getter(v10);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v12 = qword_1011B7D30;
    v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v14 = swift_allocObject(v13, 112, 7);
    *(_OWORD *)(v14 + 16) = xmmword_100E22B10;
    sub_10005972C(a2, (uint64_t)v9, type metadata accessor for ShareRecord);
    v15 = String.init<A>(describing:)(v9, v6);
    v17 = v16;
    *(_QWORD *)(v14 + 56) = &type metadata for String;
    v18 = sub_10001AA00();
    *(_QWORD *)(v14 + 64) = v18;
    *(_QWORD *)(v14 + 32) = v15;
    *(_QWORD *)(v14 + 40) = v17;
    v30 = a1;
    swift_errorRetain(a1);
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v20 = String.init<A>(describing:)(&v30, v19);
    *(_QWORD *)(v14 + 96) = &type metadata for String;
    *(_QWORD *)(v14 + 104) = v18;
    *(_QWORD *)(v14 + 72) = v20;
    *(_QWORD *)(v14 + 80) = v21;
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Error expiring share %@: %@", 27, 2, v14);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
  }
  else
  {
    v22 = static os_log_type_t.default.getter(v7);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v23 = qword_1011B7D30;
    v24 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v25 = swift_allocObject(v24, 72, 7);
    *(_OWORD *)(v25 + 16) = xmmword_100E22B00;
    sub_10005972C(a2, (uint64_t)v9, type metadata accessor for ShareRecord);
    v26 = String.init<A>(describing:)(v9, v6);
    v28 = v27;
    *(_QWORD *)(v25 + 56) = &type metadata for String;
    *(_QWORD *)(v25 + 64) = sub_10001AA00();
    *(_QWORD *)(v25 + 32) = v26;
    *(_QWORD *)(v25 + 40) = v28;
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "Successfully expired share: %@", 30, 2, v25);
    swift_bridgeObjectRelease();
  }
  dispatch_group_leave(a3);
}

uint64_t sub_10038BFE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  Transaction.capture()();
  if (a1)
  {
    v3 = swift_errorRetain(a1);
    v4 = static os_log_type_t.error.getter(v3);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v5 = qword_1011B7D30;
    v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v7 = swift_allocObject(v6, 72, 7);
    *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
    v14 = a1;
    swift_errorRetain(a1);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v9 = String.init<A>(describing:)(&v14, v8);
    v11 = v10;
    *(_QWORD *)(v7 + 56) = &type metadata for String;
    *(_QWORD *)(v7 + 64) = sub_10001AA00();
    *(_QWORD *)(v7 + 32) = v9;
    *(_QWORD *)(v7 + 40) = v11;
    os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Error distributing keys: %@", 27, 2, v7);
    swift_bridgeObjectRelease();
    return swift_errorRelease(a1);
  }
  else
  {
    v13 = static os_log_type_t.default.getter(v2);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    return os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_1011B7D30, "Shared keys distributed.", 24, 2, _swiftEmptyArrayStorage);
  }
}

uint64_t sub_10038C178()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v1 = v0;
  v39 = type metadata accessor for StableIdentifier(0);
  v2 = __chkstk_darwin(v39);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v45 = (uint64_t)&v36 - v6;
  __chkstk_darwin(v5);
  v41 = (char *)&v36 - v7;
  v8 = type metadata accessor for OwnedBeaconRecord(0);
  v43 = *(_QWORD *)(v8 - 8);
  v44 = v8;
  v9 = __chkstk_darwin(v8);
  v46 = (uint64_t)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v36 - v11;
  result = (uint64_t)sub_1000188D0();
  v14 = result;
  v15 = _swiftEmptyArrayStorage;
  v48 = _swiftEmptyArrayStorage;
  v42 = *(_QWORD *)(result + 16);
  if (!v42)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    swift_retain();
    v35 = sub_1003BA254((uint64_t)v15, v1);
    swift_release();
    swift_release();
    return (uint64_t)v35;
  }
  v16 = 0;
  v40 = v4;
  v37 = v0;
  v38 = v4 + 8;
  v17 = _swiftEmptyArrayStorage;
  v18 = v39;
  v19 = (uint64_t)v41;
  while (v16 < *(_QWORD *)(v14 + 16))
  {
    v20 = v14;
    v21 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
    v47 = *(_QWORD *)(v43 + 72);
    sub_10005972C(v14 + v21 + v47 * v16, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
    v22 = (uint64_t)&v12[*(int *)(v44 + 24)];
    sub_10005972C(v22, v19, type metadata accessor for StableIdentifier);
    v23 = v18;
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v18);
    sub_1000126B0(v19, type metadata accessor for StableIdentifier);
    v25 = v22;
    v26 = v45;
    sub_10005972C(v25, v45, type metadata accessor for StableIdentifier);
    v27 = v26;
    if (EnumCaseMultiPayload == 1)
    {
      sub_1000126B0(v26, type metadata accessor for StableIdentifier);
      v14 = v20;
      v28 = v47;
      goto LABEL_13;
    }
    v29 = (uint64_t)v40;
    sub_10005972C(v27, (uint64_t)v40, type metadata accessor for StableIdentifier);
    v30 = swift_getEnumCaseMultiPayload(v29, v23);
    if (v30 == 2)
    {
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v31 = v45;
      v14 = v20;
LABEL_12:
      v28 = v47;
      swift_bridgeObjectRelease();
      v32 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v40, v32);
      sub_1000126B0(v31, type metadata accessor for StableIdentifier);
      v17 = v48;
LABEL_13:
      sub_1000126EC((uint64_t)v12, v46, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        sub_10009A680(0, v17[2] + 1, 1);
      v17 = v48;
      v34 = v48[2];
      v33 = v48[3];
      if (v34 >= v33 >> 1)
      {
        sub_10009A680(v33 > 1, v34 + 1, 1);
        v17 = v48;
      }
      v17[2] = v34 + 1;
      result = sub_1000126EC(v46, (uint64_t)v17 + v21 + v34 * v28, type metadata accessor for OwnedBeaconRecord);
      v18 = v39;
      goto LABEL_4;
    }
    v18 = v23;
    v14 = v20;
    if (v30 == 3)
    {
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v31 = v45;
      goto LABEL_12;
    }
    sub_1000126B0((uint64_t)v40, type metadata accessor for StableIdentifier);
    sub_1000126B0(v45, type metadata accessor for StableIdentifier);
    result = sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
LABEL_4:
    if (v42 == ++v16)
    {
      v15 = v48;
      v1 = v37;
      goto LABEL_19;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10038C5B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE v35[12];
  _BOOL4 v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[24];

  v2 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v2);
  v38 = &v35[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for ShareInstruction(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v7);
  v9 = &v35[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = dispatch_group_create();
  v11 = swift_allocObject(&unk_101071A38, 17, 7);
  *(_BYTE *)(v11 + 16) = 0;
  v39 = (_BYTE *)(v11 + 16);
  v12 = a1 + *(int *)(v4 + 24);
  v13 = type metadata accessor for OwnedBeaconRecord(0);
  sub_10005972C(v12 + *(int *)(v13 + 24), (uint64_t)v9, type metadata accessor for StableIdentifier);
  v36 = swift_getEnumCaseMultiPayload(v9, v7) != 0;
  sub_1000126B0((uint64_t)v9, type metadata accessor for StableIdentifier);
  dispatch_group_enter(v10);
  v14 = *(_QWORD *)(v37 + 24);
  v15 = sub_10001A9A8(&qword_1010EE2B0);
  v16 = swift_allocObject(v15, 56, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  v17 = a1 + *(int *)(v4 + 28);
  v18 = *(_QWORD *)(v17 + 8);
  v19 = *(_QWORD *)(v17 + 16);
  *(_BYTE *)(v16 + 32) = *(_BYTE *)v17;
  *(_QWORD *)(v16 + 40) = v18;
  *(_QWORD *)(v16 + 48) = v19;
  sub_10005972C(a1, (uint64_t)&v35[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for ShareInstruction);
  v20 = *(unsigned __int8 *)(v5 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(&unk_101073E28, v21 + v6, v20 | 7);
  *(_QWORD *)(v22 + 16) = v10;
  *(_QWORD *)(v22 + 24) = v11;
  sub_1000126EC((uint64_t)&v35[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v22 + v21, type metadata accessor for ShareInstruction);
  v23 = swift_allocObject(&unk_101073E50, 33, 7);
  *(_QWORD *)(v23 + 16) = sub_1003D7504;
  *(_QWORD *)(v23 + 24) = v22;
  *(_BYTE *)(v23 + 32) = v36;
  v24 = type metadata accessor for TaskPriority(0);
  v25 = (uint64_t)v38;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v38, 1, 1, v24);
  v26 = (_QWORD *)swift_allocObject(&unk_101073E78, 64, 7);
  v26[2] = 0;
  v26[3] = 0;
  v26[4] = sub_1003D7578;
  v26[5] = v23;
  v26[6] = v14;
  v26[7] = v16;
  swift_bridgeObjectRetain(v19);
  v27 = v10;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(v16);
  sub_100691AC0(v25, (uint64_t)&unk_1010FA410, (uint64_t)v26);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  OS_dispatch_group.wait()();
  v28 = v39;
  swift_beginAccess(v39, v42, 0, 0);
  if (*v28 == 1)
  {
    swift_release();

    return 0;
  }
  else
  {
    type metadata accessor for SPOwnerSessionError(0);
    v31 = v30;
    v40 = 8;
    v32 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v33 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    _BridgedStoredNSError.init(_:userInfo:)(&v41, &v40, v32, v31, v33);

    v29 = v41;
    swift_release();
  }
  return v29;
}

void sub_10038C964(uint64_t a1, char a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  char v15;
  char v16;
  char v17;
  _BYTE v18[24];

  if ((a2 & 1) != 0)
    goto LABEL_7;
  v9 = type metadata accessor for ShareInstruction(0);
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_7;
  v10 = a5 + *(int *)(v9 + 28);
  v12 = *(_QWORD *)(v10 + 8);
  v11 = *(_QWORD *)(v10 + 16);
  v13 = *(_BYTE *)v10;
  swift_bridgeObjectRetain(v11);
  v14 = sub_100519120(v13, v12, v11);
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v16 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + v14);
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
  {
LABEL_7:
    v17 = 0;
    goto LABEL_8;
  }
  v17 = 1;
LABEL_8:
  swift_beginAccess(a4 + 16, v18, 1, 0);
  *(_BYTE *)(a4 + 16) = v17;
  dispatch_group_leave(a3);
}

uint64_t sub_10038CA2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v2 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v5 = v57;
  v6 = sub_10038C5B0(a1);
  if (!v6)
  {
    v8 = type metadata accessor for ShareInstruction(0);
    v55 = a1 + *(int *)(v8 + 24);
    v9 = sub_10088A6EC();
    v10 = __chkstk_darwin(v9);
    *(&v55 - 2) = a1;
    swift_bridgeObjectRetain(v10);
    v11 = *(_QWORD *)(sub_10008B9A8((uint64_t (*)(char *))sub_1003D71D0, (unint64_t *)&v55 - 4, (uint64_t)v9)+ 16);
    swift_bridgeObjectRelease();
    if (v11)
    {
      swift_bridgeObjectRelease();
      v12 = swift_bridgeObjectRelease();
      v13 = static os_log_type_t.default.getter(v12);
      if (qword_1010EA250 != -1)
        swift_once(&qword_1010EA250, sub_100B5D964);
      v14 = qword_1011B7D30;
      v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v16 = swift_allocObject(v15, 112, 7);
      *(_OWORD *)(v16 + 16) = xmmword_100E22B10;
      sub_10005972C(v55, (uint64_t)v4, type metadata accessor for OwnedBeaconRecord);
      v17 = String.init<A>(describing:)(v4, v2);
      v19 = v18;
      *(_QWORD *)(v16 + 56) = &type metadata for String;
      v20 = sub_10001AA00();
      *(_QWORD *)(v16 + 64) = v20;
      *(_QWORD *)(v16 + 32) = v17;
      *(_QWORD *)(v16 + 40) = v19;
      v21 = a1 + *(int *)(v8 + 28);
      v23 = *(_QWORD *)(v21 + 8);
      v22 = *(_QWORD *)(v21 + 16);
      *(_QWORD *)(v16 + 96) = &type metadata for String;
      *(_QWORD *)(v16 + 104) = v20;
      *(_QWORD *)(v16 + 72) = v23;
      *(_QWORD *)(v16 + 80) = v22;
      *(_QWORD *)&v24 = swift_bridgeObjectRetain(v22).n128_u64[0];
      os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "Already sharing %@ with %@", 26, 2, v16, v24);
      swift_bridgeObjectRelease();
      type metadata accessor for SPOwnerSessionError(0);
      v26 = v25;
      v27 = 1;
    }
    else
    {
      v28 = v9[2];
      swift_bridgeObjectRelease();
      v29 = sub_100C1B6B0(v5);
      if (v28 >= v29)
      {
        v33 = v29;
        v34 = swift_bridgeObjectRelease();
        v35 = static os_log_type_t.error.getter(v34);
        if (qword_1010EA250 != -1)
          swift_once(&qword_1010EA250, sub_100B5D964);
        v36 = qword_1011B7D30;
        v37 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v38 = swift_allocObject(v37, 152, 7);
        *(_OWORD *)(v38 + 16) = xmmword_100E221E0;
        sub_10005972C(v55, (uint64_t)v4, type metadata accessor for OwnedBeaconRecord);
        v39 = String.init<A>(describing:)(v4, v2);
        v41 = v40;
        *(_QWORD *)(v38 + 56) = &type metadata for String;
        v42 = sub_10001AA00();
        *(_QWORD *)(v38 + 32) = v39;
        *(_QWORD *)(v38 + 40) = v41;
        *(_QWORD *)(v38 + 96) = &type metadata for Int;
        *(_QWORD *)(v38 + 104) = &protocol witness table for Int;
        *(_QWORD *)(v38 + 64) = v42;
        *(_QWORD *)(v38 + 72) = v28;
        *(_QWORD *)(v38 + 136) = &type metadata for Int;
        *(_QWORD *)(v38 + 144) = &protocol witness table for Int;
        *(_QWORD *)(v38 + 112) = v33;
        os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v36, "Unable to share beacon %@ (%i / %i) [per beacon]", 48, 2, v38);
        swift_bridgeObjectRelease();
        type metadata accessor for SPOwnerSessionError(0);
        v26 = v43;
        v27 = 9;
      }
      else
      {
        v30 = sub_100C1B6C4(v5);
        swift_bridgeObjectRelease();
        v31 = sub_10038C178();
        v32 = *(_QWORD *)(v31 + 16);
        if (v32 < v30)
        {
          swift_bridgeObjectRelease();
          return 0;
        }
        v44 = static os_log_type_t.error.getter(v31);
        if (qword_1010EA250 != -1)
          swift_once(&qword_1010EA250, sub_100B5D964);
        v45 = qword_1011B7D30;
        v46 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v47 = swift_allocObject(v46, 152, 7);
        *(_OWORD *)(v47 + 16) = xmmword_100E221E0;
        sub_10005972C(v55, (uint64_t)v4, type metadata accessor for OwnedBeaconRecord);
        v48 = String.init<A>(describing:)(v4, v2);
        v50 = v49;
        *(_QWORD *)(v47 + 56) = &type metadata for String;
        *(_QWORD *)(v47 + 64) = sub_10001AA00();
        *(_QWORD *)(v47 + 32) = v48;
        *(_QWORD *)(v47 + 40) = v50;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v47 + 96) = &type metadata for Int;
        *(_QWORD *)(v47 + 104) = &protocol witness table for Int;
        *(_QWORD *)(v47 + 72) = v32;
        *(_QWORD *)(v47 + 136) = &type metadata for Int;
        *(_QWORD *)(v47 + 144) = &protocol witness table for Int;
        *(_QWORD *)(v47 + 112) = v30;
        os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v45, "Unable to share beacon %@ (%i / %i)  [global]", 45, 2, v47);
        swift_bridgeObjectRelease();
        type metadata accessor for SPOwnerSessionError(0);
        v26 = v51;
        v27 = 10;
      }
    }
    v56 = v27;
    v52 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v53 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    _BridgedStoredNSError.init(_:userInfo:)(&v57, &v56, v52, v26, v53);
    return v57;
  }
  v7 = v6;
  swift_bridgeObjectRelease();
  return v7;
}

BOOL sub_10038CF78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  _BOOL8 v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = type metadata accessor for ShareRecord(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (unsigned __int8 *)(a1 + *(int *)(v5 + 36));
  v9 = *v8;
  v10 = *((_QWORD *)v8 + 1);
  v11 = *((_QWORD *)v8 + 2);
  v12 = (unsigned __int8 *)(a2 + *(int *)(type metadata accessor for ShareInstruction(0) + 28));
  if (v9 == *v12)
  {
    v13 = *((_QWORD *)v12 + 1);
    v14 = *((_QWORD *)v12 + 2);
    if (v10 == v13 && v11 == v14)
    {
      sub_10005972C(a1, (uint64_t)v7, type metadata accessor for ShareRecord);
    }
    else
    {
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v13, v14, 0);
      sub_10005972C(a1, (uint64_t)v7, type metadata accessor for ShareRecord);
      v17 = 0;
      if ((v16 & 1) == 0)
        goto LABEL_14;
    }
    v18 = &v7[*(int *)(v4 + 40)];
    v20 = *(_QWORD *)v18;
    v19 = *((_QWORD *)v18 + 1);
    v21 = v20 & 0xFFFFFFFFFFFFLL;
    if ((v19 & 0x2000000000000000) != 0)
      v22 = HIBYTE(v19) & 0xF;
    else
      v22 = v21;
    v17 = v22 != 0;
  }
  else
  {
    sub_10005972C(a1, (uint64_t)v7, type metadata accessor for ShareRecord);
    v17 = 0;
  }
LABEL_14:
  sub_1000126B0((uint64_t)v7, type metadata accessor for ShareRecord);
  return v17;
}

uint64_t sub_10038D0CC(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  _BYTE v21[24];

  v7 = a1;
  v8 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v8);
  v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (v7 == 2)
    return 1;
  v12 = dispatch_group_create();
  v13 = swift_allocObject(&unk_101071A38, 17, 7);
  *(_BYTE *)(v13 + 16) = 0;
  dispatch_group_enter(v12);
  v14 = *(_QWORD *)(v3 + 24);
  v15 = swift_allocObject(&unk_101071A60, 32, 7);
  *(_QWORD *)(v15 + 16) = v13;
  *(_QWORD *)(v15 + 24) = v12;
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 1, 1, v16);
  v17 = swift_allocObject(&unk_101071A88, 80, 7);
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = sub_1003BB780;
  *(_QWORD *)(v17 + 40) = v15;
  *(_QWORD *)(v17 + 48) = v14;
  *(_BYTE *)(v17 + 56) = a1;
  *(_QWORD *)(v17 + 64) = a2;
  *(_QWORD *)(v17 + 72) = a3;
  swift_retain();
  v18 = v12;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(a3);
  sub_100691AC0((uint64_t)v10, (uint64_t)&unk_1010F9F98, v17);
  swift_release();
  swift_release();
  OS_dispatch_group.wait()();

  swift_beginAccess(v13 + 16, v21, 0, 0);
  v11 = *(unsigned __int8 *)(v13 + 16);
  swift_release();
  return v11;
}

void sub_10038D28C(char a1, uint64_t a2, NSObject *a3)
{
  _BYTE v6[24];

  swift_beginAccess(a2 + 16, v6, 1, 0);
  *(_BYTE *)(a2 + 16) = a1;
  dispatch_group_leave(a3);
}

uint64_t sub_10038D2E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD aBlock[6];

  v29 = a2;
  v30 = a3;
  v27 = a1;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v6 - 8);
  v32 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_101108180);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = type metadata accessor for DispatchQoS.QoSClass(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchQoS.QoSClass.default(_:), v12);
  v28 = static OS_dispatch_queue.global(qos:)(v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  sub_10000F9B8(v27, (uint64_t)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&unk_101108180);
  v16 = *(unsigned __int8 *)(v10 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = swift_allocObject(&unk_101073DD8, v17 + v11, v16 | 7);
  v19 = v30;
  *(_QWORD *)(v18 + 16) = v29;
  *(_QWORD *)(v18 + 24) = v19;
  sub_100005CF0((uint64_t)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, (uint64_t *)&unk_101108180);
  aBlock[4] = sub_1003D718C;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101073DF0;
  v20 = _Block_copy(aBlock);
  v21 = swift_retain();
  static DispatchQoS.unspecified.getter(v21);
  v34 = _swiftEmptyArrayStorage;
  v22 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v24 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v23, v24, v3, v22);
  v25 = (void *)v28;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v32);
  return swift_release();
}

uint64_t sub_10038D5D0@<X0>(unint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11[4];

  v4 = sub_10088A6EC();
  v11[2] = a1;
  v5 = sub_10008B9A8((uint64_t (*)(char *))sub_1003D6FEC, v11, (uint64_t)v4);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = type metadata accessor for ShareRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (v6)
  {
    sub_10005972C(v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), a2, type metadata accessor for ShareRecord);
    v9 = 0;
  }
  else
  {
    v9 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v9, 1, v7);
  return swift_bridgeObjectRelease();
}

void sub_10038D694(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unsigned int v24;
  void **aBlock;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  void *v28;
  uint64_t (*v29)();
  uint64_t v30;
  uint64_t v31;

  v24 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v4 = qword_1011B7D30;
  v23 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v5 = swift_allocObject(v23, 112, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E22B10;
  type metadata accessor for ShareInstruction(0);
  v6 = type metadata accessor for OwnedBeaconRecord(0);
  v7 = UUID.uuidString.getter(v6);
  v9 = v8;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  v10 = sub_10001AA00();
  *(_QWORD *)(v5 + 64) = v10;
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v9;
  v11 = UUID.uuidString.getter(v10);
  *(_QWORD *)(v5 + 96) = &type metadata for String;
  *(_QWORD *)(v5 + 104) = v10;
  *(_QWORD *)(v5 + 72) = v11;
  *(_QWORD *)(v5 + 80) = v12;
  os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v4, "2) Sending Family Share for beacon: %@, shareIdentifier: %@", 59, 2, v5);
  swift_bridgeObjectRelease();
  sub_10038D960(a1);
  if (!v31)
  {
    v14 = static os_log_type_t.default.getter(v13);
    v15 = qword_1011B7D30;
    v16 = swift_allocObject(v23, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
    aBlock = (void **)sub_1003D6BB8;
    v26 = a2;
    swift_retain();
    v17 = sub_10001A9A8(&qword_1010FA388);
    v18 = String.init<A>(describing:)(&aBlock, v17);
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = v10;
    *(_QWORD *)(v16 + 32) = v18;
    *(_QWORD *)(v16 + 40) = v19;
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "Share record %@", 15, 2, v16);
    swift_bridgeObjectRelease();
    v20 = *(NSObject **)(a2 + 56);
    v21 = swift_allocObject(&unk_101073860, 32, 7);
    *(_QWORD *)(v21 + 16) = sub_1003D6BBC;
    *(_QWORD *)(v21 + 24) = a2;
    v29 = sub_10005CBA4;
    v30 = v21;
    aBlock = _NSConcreteStackBlock;
    v26 = 1107296256;
    v27 = sub_10001D8B8;
    v28 = &unk_101073878;
    v22 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v20, v22);
    _Block_release(v22);
    LOBYTE(v20) = swift_isEscapingClosureAtFileLocation(v21, "", 113, 840, 34, 1);
    swift_release();
    swift_release();
    if ((v20 & 1) != 0)
      __break(1u);
  }
}

void sub_10038D960(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v2);
  v18 = (uint64_t)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1 + *(int *)(type metadata accessor for ShareInstruction(0) + 24);
  sub_10005972C(v7 + v2[6], (uint64_t)v6, type metadata accessor for StableIdentifier);
  LODWORD(v4) = swift_getEnumCaseMultiPayload(v6, v4);
  sub_1000126B0((uint64_t)v6, type metadata accessor for StableIdentifier);
  if ((_DWORD)v4)
  {
    v8 = sub_100C6F9A8();
    if ((v8 & 1) != 0)
    {
      if (sub_100A2D38C(*(_QWORD *)(v7 + v2[16]), *(_QWORD *)(v7 + v2[17])))
        sub_10039E754(a1);
      else
        sub_10039FBDC(a1);
    }
    else
    {
      v9 = static os_log_type_t.error.getter(v8);
      if (qword_1010EA250 != -1)
        swift_once(&qword_1010EA250, sub_100B5D964);
      v10 = qword_1011B7D30;
      v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v12 = swift_allocObject(v11, 72, 7);
      *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
      v13 = v18;
      sub_10005972C(v7, v18, type metadata accessor for OwnedBeaconRecord);
      v14 = String.init<A>(describing:)(v13, v2);
      v16 = v15;
      *(_QWORD *)(v12 + 56) = &type metadata for String;
      *(_QWORD *)(v12 + 64) = sub_10001AA00();
      *(_QWORD *)(v12 + 32) = v14;
      *(_QWORD *)(v12 + 40) = v16;
      os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Unhandled beacon type: %@", 25, 2, v12);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_10039D2E4(a1);
  }
}

uint64_t sub_10038DBA0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v37)(_QWORD *);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  void (*v47)(_QWORD *);
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;

  v48 = a3;
  v49 = a5;
  v8 = type metadata accessor for ShareRecord(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v45 - v12;
  v14 = sub_10001A9A8((uint64_t *)&unk_101108180);
  v15 = __chkstk_darwin(v14);
  v17 = (_QWORD *)((char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  v19 = (uint64_t *)((char *)&v45 - v18);
  sub_10000F9B8(a1, (uint64_t)&v45 - v18, (uint64_t *)&unk_101108180);
  if (swift_getEnumCaseMultiPayload(v19, v14) == 1)
  {
    v20 = *v19;
    v51 = v20;
    swift_errorRetain(v20);
    v21 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    type metadata accessor for CKError(0);
    v23 = v22;
    v24 = swift_dynamicCast(&v50, &v51, v21, v22, 6);
    if ((v24 & 1) != 0)
    {
      v25 = v50;
      v26 = sub_100006204(&qword_1010EB538, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E21CA4);
      v27 = _BridgedStoredNSError.code.getter(&v51, v23, v26);
      if (v51 == 14)
      {
        v28 = static os_log_type_t.default.getter(v27);
        if (qword_1010EA250 != -1)
          swift_once(&qword_1010EA250, sub_100B5D964);
        os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, qword_1011B7D30, "record already modified in CloudKit -- assuming another device is handing the share", 83, 2, _swiftEmptyArrayStorage);
        *v17 = v20;
        swift_storeEnumTagMultiPayload(v17, v14, 1);
        swift_errorRetain(v20);
        a4(v17);

LABEL_14:
        swift_errorRelease(v20);
        return sub_100004048((uint64_t)v17, (uint64_t *)&unk_101108180);
      }

    }
    v37 = a4;
    v38 = static os_log_type_t.error.getter(v24);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v39 = qword_1011B7D30;
    v40 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v41 = swift_allocObject(v40, 72, 7);
    *(_OWORD *)(v41 + 16) = xmmword_100E22B00;
    v51 = v20;
    swift_errorRetain(v20);
    v42 = String.init<A>(describing:)(&v51, v21);
    v44 = v43;
    *(_QWORD *)(v41 + 56) = &type metadata for String;
    *(_QWORD *)(v41 + 64) = sub_10001AA00();
    *(_QWORD *)(v41 + 32) = v42;
    *(_QWORD *)(v41 + 40) = v44;
    os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v39, "Failed to save record %@", 24, 2, v41);
    swift_bridgeObjectRelease();
    *v17 = v20;
    swift_storeEnumTagMultiPayload(v17, v14, 1);
    swift_errorRetain(v20);
    v37(v17);
    goto LABEL_14;
  }
  v47 = a4;
  v29 = sub_1000126EC((uint64_t)v19, (uint64_t)v13, type metadata accessor for ShareRecord);
  v30 = static os_log_type_t.default.getter(v29);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v31 = qword_1011B7D30;
  v46 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v32 = swift_allocObject(v46, 72, 7);
  v45 = xmmword_100E22B00;
  *(_OWORD *)(v32 + 16) = xmmword_100E22B00;
  sub_10005972C((uint64_t)v13, (uint64_t)v11, type metadata accessor for ShareRecord);
  v33 = String.init<A>(describing:)(v11, v8);
  v35 = v34;
  *(_QWORD *)(v32 + 56) = &type metadata for String;
  *(_QWORD *)(v32 + 64) = sub_10001AA00();
  *(_QWORD *)(v32 + 32) = v33;
  *(_QWORD *)(v32 + 40) = v35;
  os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Successfully saved %@", 21, 2, v32);
  swift_bridgeObjectRelease();
  sub_1007EEF64(1);
  sub_10038D694(v48, a2);
  sub_10005972C((uint64_t)v13, (uint64_t)v17, type metadata accessor for ShareRecord);
  swift_storeEnumTagMultiPayload(v17, v14, 0);
  v47(v17);
  sub_100004048((uint64_t)v17, (uint64_t *)&unk_101108180);
  return sub_1000126B0((uint64_t)v13, type metadata accessor for ShareRecord);
}

uint64_t sub_10038E1C0(int a1, void (*a2)(os_log_t, uint64_t), uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD), _QWORD *a5, int a6, uint64_t a7, void (*a8)(_QWORD, _QWORD, _QWORD), char a9, void (*a10)(_QWORD, _QWORD), char a11, unsigned __int8 a12, void (*a13)(_QWORD, _QWORD, _QWORD), uint64_t a14, __int128 a15, void (*a16)(void ***), void (*a17)(void ***))
{
  uint64_t v17;
  uint64_t v18;
  void ***v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSURL *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  char v50;
  void (*v51)(_BYTE *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  void (*v62)(_QWORD, _QWORD, _QWORD);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t inited;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v78;
  uint64_t (*v79)(_QWORD, _QWORD, _QWORD);
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(_QWORD, _QWORD);
  void *v103;
  uint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  void (**v114)(void ***);
  void (*v115)(void ***);
  void (*v116)(void ***);
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  _BYTE *v120;
  void (*v121)(_BYTE *, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  _BYTE *v127;
  _BYTE v128[12];
  int v129;
  uint64_t v130;
  void (*v131)(_QWORD, _QWORD, _QWORD);
  int v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE *v135;
  uint64_t v136;
  _BYTE *v137;
  uint64_t v138;
  _BYTE *v139;
  _BYTE *v140;
  _QWORD *v141;
  _BYTE *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  NSURL *v146;
  uint64_t v147;
  void (*v148)(_QWORD, _QWORD, _QWORD);
  uint64_t v149;
  uint64_t v150;
  _BYTE *v151;
  uint64_t v152;
  _BYTE *v153;
  uint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(_QWORD, _QWORD, _QWORD);
  uint64_t v160;
  uint64_t v161;
  void (*v162)(_QWORD, _QWORD);
  void (*v163)(void ***);
  void (*v164)(void ***);
  _BYTE v165[8];
  void **aBlock;
  uint64_t v167;
  uint64_t (*v168)(uint64_t);
  void *v169;
  uint64_t (*v170)();
  uint64_t v171;
  _BYTE v172[8];
  uint64_t v173;

  v159 = a8;
  v158 = a7;
  LODWORD(v157) = a6;
  v141 = a5;
  v148 = a4;
  v147 = a3;
  v146 = (NSURL *)a2;
  LODWORD(v145) = a1;
  v164 = a17;
  v163 = a16;
  v144 = type metadata accessor for DispatchQoS.QoSClass(0);
  v143 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v142 = &v128[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v162 = (void (*)(_QWORD, _QWORD))sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v162);
  v19 = (void ***)&v128[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v138 = type metadata accessor for DispatchTime(0);
  v136 = *(_QWORD *)(v138 - 8);
  v20 = __chkstk_darwin(v138);
  v135 = &v128[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v20);
  v137 = &v128[-v22];
  v152 = type metadata accessor for DispatchWorkItemFlags(0);
  v150 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v151 = &v128[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v156 = type metadata accessor for DispatchQoS(0);
  v149 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v155 = &v128[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = sub_10001A9A8(&qword_1010ED860);
  v26 = __chkstk_darwin(v25);
  v140 = &v128[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v26);
  v29 = (NSURL *)&v128[-v28];
  v160 = type metadata accessor for UUID(0);
  v154 = *(_QWORD *)(v160 - 8);
  v30 = *(_QWORD *)(v154 + 64);
  v31 = __chkstk_darwin(v160);
  v134 = &v128[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v32 = __chkstk_darwin(v31);
  v34 = &v128[-v33];
  v35 = __chkstk_darwin(v32);
  v139 = &v128[-v36];
  v37 = __chkstk_darwin(v35);
  v39 = &v128[-v38];
  __chkstk_darwin(v37);
  v153 = &v128[-v40];
  v41 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = __chkstk_darwin(v41);
  v45 = &v128[-((v44 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v46 = __chkstk_darwin(v43);
  v48 = &v128[-v47];
  static SystemInfo.lockState.getter(v46);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v42 + 104))(v45, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v41);
  v49 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v50 = dispatch thunk of static Equatable.== infix(_:_:)(v48, v45, v41, v49);
  v51 = *(void (**)(_BYTE *, uint64_t))(v42 + 8);
  v51(v45, v41);
  v52 = ((uint64_t (*)(_BYTE *, uint64_t))v51)(v48, v41);
  if ((v50 & 1) != 0)
  {
    v53 = static os_log_type_t.error.getter(v52);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    os_log(_:dso:log:_:_:)(v53, &_mh_execute_header, qword_1011B7D30, "Attempt to send message before first unlock!", 44, 2, _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0);
    v55 = v54;
    v173 = 5;
    v56 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v57 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v58 = v56;
    v59 = v55;
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v173, v58, v59, v57);
    *v19 = aBlock;
    swift_storeEnumTagMultiPayload(v19, v162, 1);
    v163(v19);
    return sub_100004048((uint64_t)v19, &qword_1010F4868);
  }
  v60 = v157;
  v61 = v158;
  v62 = v159;
  v63 = v161;
  v64 = sub_10038D0CC(v157, v158, (uint64_t)v159);
  if ((v64 & 1) == 0)
  {
    v69 = static os_log_type_t.error.getter(v64);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v70 = qword_1011B7D30;
    v71 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v72 = swift_allocObject(v71, 72, 7);
    *(_OWORD *)(v72 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v72 + 56) = &type metadata for String;
    *(_QWORD *)(v72 + 64) = sub_10001AA00();
    *(_QWORD *)(v72 + 32) = v61;
    *(_QWORD *)(v72 + 40) = v62;
    *(_QWORD *)&v73 = swift_bridgeObjectRetain(v62).n128_u64[0];
    os_log(_:dso:log:_:_:)(v69, &_mh_execute_header, v70, "Not sending since %@ has no IDS registered devices", 50, 2, v72, v73);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    v75 = v74;
    v173 = 12;
    v76 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v57 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v58 = v76;
    v59 = v75;
    goto LABEL_11;
  }
  v130 = a14;
  v131 = a13;
  v132 = a12;
  v162 = a10;
  v129 = a11 & 1;
  v133 = *(_QWORD *)(v63 + 24);
  v65 = sub_10001A9A8(&qword_1010EE2B0);
  if ((a9 & 1) != 0)
  {
    inited = swift_initStackObject(v65, v165);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_BYTE *)(inited + 32) = v60;
    *(_QWORD *)(inited + 40) = v61;
    *(_QWORD *)(inited + 48) = v62;
    v67 = v154;
    v68 = v160;
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v154 + 56))(v29, 1, 1, v160);
    swift_bridgeObjectRetain(v62);
    sub_10038F3FC(v145, v146, v147, v148, v141, inited, v29, v162, (uint64_t)v39, v129, v132 & 1, v131, v130, a15);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v29, &qword_1010ED860);
    v162 = *(void (**)(_QWORD, _QWORD))(v67 + 32);
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v162)(v153, v39, v68);
    v83 = v67;
  }
  else
  {
    v78 = swift_initStackObject(v65, v172);
    *(_OWORD *)(v78 + 16) = xmmword_100E22B00;
    *(_BYTE *)(v78 + 32) = v60;
    *(_QWORD *)(v78 + 40) = v61;
    *(_QWORD *)(v78 + 48) = v62;
    v83 = v154;
    v79 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v140;
    v80 = v160;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v154 + 56))(v140, 1, 1, v160);
    swift_bridgeObjectRetain(v62);
    UUID.init()(v81);
    v82 = v139;
    sub_10037DC5C(v145, (void (*)(os_log_t, uint64_t))v146, v147, (unint64_t)v148, (uint64_t)v34, v78, v79, (uint64_t)v162, (uint64_t)v139, v129, v132 & 1, (uint64_t)v131, v130, a15, &qword_1010F9EF8, &qword_1010F9F00, &qword_1010F9F18, (uint64_t)&type metadata for BeaconSharingMessageType, &unk_101071A10,
      (uint64_t)&unk_1010F9F60);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v83 + 8))(v34, v80);
    sub_100004048((uint64_t)v79, &qword_1010ED860);
    v162 = *(void (**)(_QWORD, _QWORD))(v83 + 32);
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v162)(v153, v82, v80);
  }
  v84 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  swift_allocObject(v84, *(unsigned int *)(v84 + 48), *(unsigned __int16 *)(v84 + 52));
  v85 = Future.init()();
  v86 = static os_log_type_t.default.getter(v85);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v87 = qword_1011B7D30;
  v88 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v89 = swift_allocObject(v88, 72, 7);
  *(_OWORD *)(v89 + 16) = xmmword_100E22B00;
  v90 = v153;
  v91 = UUID.uuidString.getter(v89);
  v93 = v92;
  *(_QWORD *)(v89 + 56) = &type metadata for String;
  *(_QWORD *)(v89 + 64) = sub_10001AA00();
  *(_QWORD *)(v89 + 32) = v91;
  *(_QWORD *)(v89 + 40) = v93;
  os_log(_:dso:log:_:_:)(v86, &_mh_execute_header, v87, "Setting %@ to pending", 21, 2, v89);
  swift_bridgeObjectRelease();
  v94 = v161;
  v148 = *(void (**)(_QWORD, _QWORD, _QWORD))(v161 + 168);
  v159 = *(void (**)(_QWORD, _QWORD, _QWORD))(v83 + 16);
  v95 = v134;
  v96 = v160;
  v159(v134, v90, v160);
  v97 = *(unsigned __int8 *)(v83 + 80);
  v146 = (NSURL *)(((v97 + 24) & ~v97) + v30);
  v98 = (v97 + 24) & ~v97;
  v158 = v98;
  v157 = v97 | 7;
  v99 = ((unint64_t)&v146->super.isa + 7) & 0xFFFFFFFFFFFFFFF8;
  v100 = swift_allocObject(&unk_101071740, v99 + 8, v97 | 7);
  *(_QWORD *)(v100 + 16) = v94;
  v101 = v100 + v98;
  v102 = v162;
  ((void (*)(uint64_t, _BYTE *, uint64_t))v162)(v101, v95, v96);
  v162 = v102;
  *(_QWORD *)(v100 + v99) = v85;
  v170 = sub_1003BB468;
  v171 = v100;
  aBlock = _NSConcreteStackBlock;
  v167 = 1107296256;
  v168 = sub_100016FB8;
  v169 = &unk_101071758;
  v103 = _Block_copy(&aBlock);
  swift_retain();
  v104 = swift_retain();
  v105 = v155;
  static DispatchQoS.unspecified.getter(v104);
  v173 = (uint64_t)_swiftEmptyArrayStorage;
  v106 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v145 = v106;
  v107 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v143 = v107;
  v144 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v147 = v85;
  v108 = v151;
  v109 = v107;
  v110 = v152;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v173, v109, v144, v152, v106);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v105, v108, v103);
  _Block_release(v103);
  v150 = *(_QWORD *)(v150 + 8);
  ((void (*)(_BYTE *, uint64_t))v150)(v108, v110);
  v149 = *(_QWORD *)(v149 + 8);
  ((void (*)(_BYTE *, uint64_t))v149)(v105, v156);
  swift_release();
  v111 = v153;
  v112 = v160;
  v159(v95, v153, v160);
  v113 = swift_allocObject(&unk_101071790, v99 + 16, v157);
  *(_QWORD *)(v113 + 16) = v94;
  ((void (*)(uint64_t, _BYTE *, uint64_t))v102)(v113 + v158, v95, v112);
  v114 = (void (**)(void ***))(v113 + v99);
  v115 = v163;
  v116 = v164;
  *v114 = v163;
  v114[1] = v116;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1003BB470, v113);
  swift_release();
  swift_release();
  v117 = swift_allocObject(&unk_1010717B8, 32, 7);
  *(_QWORD *)(v117 + 16) = v115;
  *(_QWORD *)(v117 + 24) = v116;
  swift_retain();
  Future.addFailure(block:)(sub_1003BB47C, v117);
  swift_release();
  v118 = swift_release();
  v119 = v135;
  static DispatchTime.now()(v118);
  v120 = v137;
  + infix(_:_:)(v119, 360.0);
  v121 = *(void (**)(_BYTE *, uint64_t))(v136 + 8);
  v122 = v138;
  v121(v119, v138);
  v123 = v160;
  v159(v95, v111, v160);
  v124 = swift_allocObject(&unk_1010717E0, v146, v157);
  *(_QWORD *)(v124 + 16) = v94;
  ((void (*)(uint64_t, _BYTE *, uint64_t))v162)(v124 + v158, v95, v123);
  v170 = sub_1003BB4B0;
  v171 = v124;
  aBlock = _NSConcreteStackBlock;
  v167 = 1107296256;
  v168 = sub_100016FB8;
  v169 = &unk_1010717F8;
  v125 = _Block_copy(&aBlock);
  v126 = swift_retain();
  v127 = v155;
  static DispatchQoS.unspecified.getter(v126);
  v173 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v173, v143, v144, v110, v145);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v120, v127, v108, v125);
  _Block_release(v125);
  swift_release();
  ((void (*)(_BYTE *, uint64_t))v150)(v108, v110);
  ((void (*)(_BYTE *, uint64_t))v149)(v127, v156);
  v121(v120, v122);
  (*(void (**)(_BYTE *, uint64_t))(v154 + 8))(v111, v123);
  return swift_release();
}

void sub_10038F3FC(unsigned __int8 a1@<W0>, NSURL *a2@<X1>, uint64_t a3@<X2>, void (*a4)(_QWORD, _QWORD, _QWORD)@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, NSURL *a7@<X6>, void (*a8)(_QWORD, _QWORD)@<X7>, uint64_t a9@<X8>, char a10, unsigned __int8 a11, void (*a12)(_QWORD, _QWORD, _QWORD), uint64_t a13, __int128 a14)
{
  uint64_t *v14;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  int64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  NSURL *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  NSString *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(_QWORD, _QWORD, _QWORD);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(_QWORD, _QWORD);
  char *v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void (*v82)(_QWORD, _QWORD, _QWORD);
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t *v87;
  uint64_t v88;
  void (*v89)(_QWORD, _QWORD, _QWORD);
  uint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void (*v119)(char *, char *, uint64_t);
  char *v120;
  unint64_t v121;
  uint64_t v122;
  NSObject *v123;
  os_log_type_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  void (*v142)(char *, uint64_t);
  os_log_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  void (*v148)(char *, uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  NSObject *v152;
  os_log_type_t v153;
  BOOL v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  NSURL *v163;
  uint64_t v164;
  os_log_t v165;
  uint64_t v166;
  char *v167;
  unint64_t v168;
  char *v169;
  uint64_t v170;
  void (*v171)(char *, uint64_t, uint64_t, uint64_t);
  unsigned __int8 v172;
  uint64_t v173;
  NSURL *v174;
  unint64_t v175;
  uint64_t v176;
  void *v177;
  void *v178;
  Class v179;
  Class v180;
  Class v181;
  id v182;
  id v183;
  id v184;
  id v185;
  char *v186;
  NSURL *v187;
  void *v188;
  void *v189;
  unsigned __int8 v190;
  id v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  id v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  void (*v200)(char *, uint64_t);
  unint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  unint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  char *v216;
  uint64_t v217;
  NSObject *v218;
  os_log_type_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  void (*v234)(char *, uint64_t);
  os_log_t v235;
  _QWORD *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  char *v243;
  __int128 v244;
  os_log_t v245;
  uint64_t v246;
  uint64_t (*v247)(_QWORD, _QWORD, _QWORD);
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  char *v252;
  char *v253;
  uint64_t v254;
  char *v255;
  char *v256;
  NSURL *v257;
  os_log_t v258;
  _QWORD *v259;
  char *v260;
  uint64_t v261;
  void (*v262)(char *, uint64_t);
  uint64_t v263;
  void (*v264)(char *, uint64_t);
  NSURL *isa;
  uint64_t v266;
  char *v267;
  void (*v268)(_QWORD, _QWORD, _QWORD);
  uint64_t v269;
  id v270;
  char v271[8];
  NSURL *v272;
  uint64_t v273;
  void (*v274)(_QWORD, _QWORD, _QWORD);
  _QWORD *v275;
  uint64_t v276;

  v268 = a4;
  v261 = a6;
  v262 = a8;
  isa = a7;
  v259 = a5;
  v254 = a9;
  v260 = (char *)*v14;
  v18 = sub_10001A9A8(&qword_1010ED860);
  v19 = __chkstk_darwin(v18);
  v256 = (char *)&v241 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v257 = (NSURL *)((char *)&v241 - v21);
  v266 = type metadata accessor for URL(0);
  v264 = *(void (**)(char *, uint64_t))(v266 - 8);
  v22 = __chkstk_darwin(v266);
  v263 = (uint64_t)&v241 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v267 = (char *)&v241 - v24;
  v25 = type metadata accessor for UUID(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = __chkstk_darwin(v25);
  v253 = (char *)&v241 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v255 = (char *)&v241 - v30;
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v241 - v32;
  v34 = __chkstk_darwin(v31);
  v36 = (char *)&v241 - v35;
  v37 = __chkstk_darwin(v34);
  v39 = (char *)&v241 - v38;
  v40 = __chkstk_darwin(v37);
  v271[0] = a1;
  v272 = a2;
  v273 = a3;
  v42 = (char *)&v241 - v41;
  v274 = v268;
  UUID.init()(v40);
  v43 = type metadata accessor for PropertyListEncoder(0);
  v44 = swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
  PropertyListEncoder.init()(v44);
  v45 = sub_10001A9A8(&qword_1010F9EF8);
  v46 = sub_1000193A4(&qword_1010F9F00, &qword_1010F9EF8, protocol conformance descriptor for Message<A>);
  v47 = v269;
  v48 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v271, v45, v46);
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v42, v25);
    swift_release();
    return;
  }
  v247 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v39;
  v241 = v33;
  v243 = v36;
  v248 = v26;
  v249 = v48;
  v250 = v49;
  v244 = a14;
  v50 = a13;
  v268 = a12;
  v51 = a11;
  LODWORD(v245) = a10 & 1;
  swift_release();
  v52 = v261;
  v53 = *(_QWORD *)(v261 + 16);
  v54 = _swiftEmptyArrayStorage;
  v251 = v25;
  v252 = v42;
  LODWORD(v246) = a11;
  v269 = 0;
  if (v53)
  {
    v242 = a13;
    v275 = _swiftEmptyArrayStorage;
    sub_10009A2F4(0, v53, 0);
    v54 = v275;
    v55 = (uint64_t *)(v52 + 48);
    v56 = isa;
    do
    {
      v57 = *(v55 - 1);
      v58 = *v55;
      v275 = v54;
      v60 = v54[2];
      v59 = v54[3];
      swift_bridgeObjectRetain(v58);
      if (v60 >= v59 >> 1)
      {
        sub_10009A2F4(v59 > 1, v60 + 1, 1);
        v54 = v275;
      }
      v54[2] = v60 + 1;
      v61 = &v54[2 * v60];
      v61[4] = v57;
      v61[5] = v58;
      v55 += 3;
      --v53;
    }
    while (v53);
    v62 = v251;
    v42 = v252;
    v51 = v246;
    v50 = v242;
  }
  else
  {
    v62 = v25;
    v56 = isa;
  }
  v261 = sub_100CA7D78((uint64_t)v54);
  swift_bridgeObjectRelease();
  v268 = (void (*)(_QWORD, _QWORD, _QWORD))sub_1003BBA4C((uint64_t)v42, 0, (uint64_t)v56, (uint64_t)v262, (int)v245, v51 & 1, (uint64_t)v268, v50, v244);
  v63 = NSTemporaryDirectory();
  v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
  v66 = v65;

  v67 = v263;
  URL.init(fileURLWithPath:isDirectory:)(v64, v66, 1);
  v68 = swift_bridgeObjectRelease();
  v69 = v247;
  v70 = UUID.init()(v68);
  v71 = UUID.uuidString.getter(v70);
  v73 = v72;
  v74 = v248;
  v75 = *(void (**)(_QWORD, _QWORD))(v248 + 8);
  v75(v69, v62);
  v76 = v267;
  URL.appendingPathComponent(_:)(v71, v73);
  swift_bridgeObjectRelease();
  v77 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v264 + 1);
  v78 = v266;
  v77(v67, v266);
  v79 = v249;
  v80 = v250;
  v81 = v269;
  Data.write(to:options:)(v76, 0, v249, v250);
  v269 = v81;
  if (v81)
  {
    sub_10001BC14(v79, v80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v77((uint64_t)v76, v78);
    v75(v252, v62);
    return;
  }
  v82 = v268;
  v83 = 0x6567617373656DLL;
  if ((v246 & 1) != 0)
    v83 = 0xD000000000000017;
  v263 = v83;
  if ((v246 & 1) != 0)
    v84 = 0x8000000100ED3170;
  else
    v84 = 0xE700000000000000;
  v85 = (uint64_t)v257;
  sub_10000F9B8((uint64_t)isa, (uint64_t)v257, &qword_1010ED860);
  v247 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v74 + 48);
  v86 = v247(v85, 1, v62);
  v87 = &qword_1010EA000;
  v262 = v75;
  v264 = (void (*)(char *, uint64_t))v77;
  if (v86 == 1)
  {
    sub_100004048(v85, &qword_1010ED860);
    v88 = v261;
    v89 = v82;
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v90 = type metadata accessor for Logger(0);
    sub_10001A9E8(v90, (uint64_t)qword_1011B7EC8);
    v91 = v271[0];
    v92 = v273;
    isa = v272;
    v93 = (unint64_t)v274;
    swift_bridgeObjectRetain(v88);
    sub_10001BBBC(v92, v93);
    swift_bridgeObjectRetain(v88);
    swift_bridgeObjectRetain(v84);
    v94 = sub_10001BBBC(v92, v93);
    v95 = Logger.logObject.getter(v94);
    v96 = static os_log_type_t.default.getter(v95);
    v97 = v96;
    if (os_log_type_enabled(v95, v96))
    {
      v98 = swift_slowAlloc(42, -1);
      LODWORD(v257) = v97;
      v99 = v98;
      v246 = swift_slowAlloc(128, -1);
      v270 = (id)v246;
      *(_DWORD *)v99 = 136315906;
      v275 = v260;
      v100 = sub_10001A9A8(&qword_1010F9F18);
      LODWORD(v245) = v91;
      v101 = String.init<A>(describing:)(&v275, v100);
      v275 = (_QWORD *)sub_100016940(v101, v102, (uint64_t *)&v270);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276, v99 + 4, v99 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v99 + 12) = 2080;
      swift_bridgeObjectRetain(v84);
      v275 = (_QWORD *)sub_100016940(v263, v84, (uint64_t *)&v270);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276, v99 + 14, v99 + 22);
      swift_bridgeObjectRelease_n(v84, 3);
      *(_WORD *)(v99 + 22) = 2080;
      sub_1003B0B18((char)v245, (uint64_t)isa, v92, v93, (uint64_t)&type metadata for BeaconSharingMessageType);
      v104 = v103;
      v106 = v105;
      sub_10001BC14(v92, v93);
      v107 = v104;
      v89 = v268;
      v275 = (_QWORD *)sub_100016940(v107, v106, (uint64_t *)&v270);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276, v99 + 24, v99 + 32);
      swift_bridgeObjectRelease();
      sub_10001BC14(v92, v93);
      *(_WORD *)(v99 + 32) = 2080;
      swift_bridgeObjectRetain(v88);
      v109 = Set.description.getter(v108, &type metadata for String, &protocol witness table for String);
      v111 = v110;
      swift_bridgeObjectRelease();
      v275 = (_QWORD *)sub_100016940(v109, v111, (uint64_t *)&v270);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276, v99 + 34, v99 + 42);
      swift_bridgeObjectRelease_n(v88, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v95, (os_log_type_t)v257, "%s: Sending %s (resource): %s to %s", (uint8_t *)v99, 0x2Au);
      v112 = v246;
      swift_arrayDestroy(v246, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v112, -1, -1);
      swift_slowDealloc(v99, -1, -1);

    }
    else
    {
      sub_10001BC14(v92, v93);
      swift_bridgeObjectRelease_n(v84, 2);
      sub_10001BC14(v92, v93);

      swift_bridgeObjectRelease_n(v88, 2);
    }
    v87 = &qword_1010EA000;
  }
  else
  {
    v113 = v243;
    (*(void (**)(char *, uint64_t, uint64_t))(v74 + 32))(v243, v85, v62);
    v114 = v74;
    v115 = v261;
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v116 = type metadata accessor for Logger(0);
    sub_10001A9E8(v116, (uint64_t)qword_1011B7EC8);
    LODWORD(isa) = v271[0];
    v117 = v273;
    v257 = v272;
    v118 = (unint64_t)v274;
    v119 = *(void (**)(char *, char *, uint64_t))(v114 + 16);
    v120 = v241;
    v119(v241, v113, v251);
    sub_10001BBBC(v117, v118);
    swift_bridgeObjectRetain(v115);
    sub_10001BBBC(v117, v118);
    swift_bridgeObjectRetain(v115);
    v121 = v84;
    swift_bridgeObjectRetain(v84);
    v123 = Logger.logObject.getter(v122);
    v124 = static os_log_type_t.default.getter(v123);
    v125 = v124;
    if (os_log_type_enabled(v123, v124))
    {
      v126 = swift_slowAlloc(52, -1);
      v246 = swift_slowAlloc(160, -1);
      v270 = (id)v246;
      *(_DWORD *)v126 = 136316162;
      v245 = v123;
      v275 = v260;
      v127 = sub_10001A9A8(&qword_1010F9F18);
      v128 = String.init<A>(describing:)(&v275, v127);
      DWORD2(v244) = v125;
      v275 = (_QWORD *)sub_100016940(v128, v129, (uint64_t *)&v270);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276, v126 + 4, v126 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v126 + 12) = 2080;
      swift_bridgeObjectRetain(v121);
      v275 = (_QWORD *)sub_100016940(v263, v121, (uint64_t *)&v270);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276, v126 + 14, v126 + 22);
      swift_bridgeObjectRelease_n(v121, 3);
      *(_WORD *)(v126 + 22) = 2080;
      sub_1003B0B18((char)isa, (uint64_t)v257, v117, v118, (uint64_t)&type metadata for BeaconSharingMessageType);
      v131 = v130;
      v133 = v132;
      sub_10001BC14(v117, v118);
      v275 = (_QWORD *)sub_100016940(v131, v133, (uint64_t *)&v270);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276, v126 + 24, v126 + 32);
      swift_bridgeObjectRelease();
      sub_10001BC14(v117, v118);
      *(_WORD *)(v126 + 32) = 2080;
      swift_bridgeObjectRetain(v115);
      v135 = Set.description.getter(v134, &type metadata for String, &protocol witness table for String);
      v137 = v136;
      swift_bridgeObjectRelease();
      v275 = (_QWORD *)sub_100016940(v135, v137, (uint64_t *)&v270);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276, v126 + 34, v126 + 42);
      swift_bridgeObjectRelease_n(v115, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v126 + 42) = 2080;
      v138 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v139 = v251;
      v140 = dispatch thunk of CustomStringConvertible.description.getter(v251, v138);
      v275 = (_QWORD *)sub_100016940(v140, v141, (uint64_t *)&v270);
      v142 = (void (*)(char *, uint64_t))v262;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276, v126 + 44, v126 + 52);
      swift_bridgeObjectRelease();
      v142(v120, v139);
      v143 = v245;
      _os_log_impl((void *)&_mh_execute_header, v245, BYTE8(v244), "%s: Sending %s (resource): %s to %s in response to %s", (uint8_t *)v126, 0x34u);
      v144 = v246;
      swift_arrayDestroy(v246, 5, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v144, -1, -1);
      v145 = v126;
      v87 = &qword_1010EA000;
      swift_slowDealloc(v145, -1, -1);

      v142(v243, v139);
    }
    else
    {
      sub_10001BC14(v117, v118);

      v146 = v120;
      v147 = v251;
      v148 = (void (*)(char *, uint64_t))v262;
      v262(v146, v251);
      swift_bridgeObjectRelease_n(v115, 2);
      sub_10001BC14(v117, v118);
      swift_bridgeObjectRelease_n(v121, 2);
      v148(v113, v147);
    }
    v89 = v268;
  }
  if (v87[121] != -1)
    swift_once(&qword_1010EA3C8, sub_100BECC74);
  v149 = type metadata accessor for Logger(0);
  v150 = sub_10001A9E8(v149, (uint64_t)qword_1011B7EC8);
  swift_bridgeObjectRetain_n(v89, 2);
  v263 = v150;
  v152 = Logger.logObject.getter(v151);
  v153 = static os_log_type_t.default.getter(v152);
  v154 = os_log_type_enabled(v152, v153);
  v155 = v260;
  if (v154)
  {
    v156 = swift_slowAlloc(22, -1);
    isa = (NSURL *)swift_slowAlloc(64, -1);
    v270 = isa;
    *(_DWORD *)v156 = 136315394;
    v275 = v155;
    v157 = sub_10001A9A8(&qword_1010F9F18);
    v158 = String.init<A>(describing:)(&v275, v157);
    v275 = (_QWORD *)sub_100016940(v158, v159, (uint64_t *)&v270);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276, v156 + 4, v156 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v156 + 12) = 2080;
    swift_bridgeObjectRetain(v89);
    v160 = Dictionary.description.getter(v89, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v162 = v161;
    swift_bridgeObjectRelease();
    v275 = (_QWORD *)sub_100016940(v160, v162, (uint64_t *)&v270);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276, v156 + 14, v156 + 22);
    swift_bridgeObjectRelease_n(v89, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v152, v153, "%s: IDSSendMessageOptions: %s", (uint8_t *)v156, 0x16u);
    v163 = isa;
    swift_arrayDestroy(isa, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v163, -1, -1);
    swift_slowDealloc(v156, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v89, 2);
  }
  v165 = v258;
  v164 = (uint64_t)v259;
  v166 = type metadata accessor for AnalyticsEvent(0);
  v167 = (_QWORD *)swift_allocObject(v166, *(unsigned int *)(v166 + 48), *(unsigned __int16 *)(v166 + 52));
  swift_defaultActor_initialize((char *)v167);
  v168 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  v167[14] = v168;
  UUID.init()(v168);
  v169 = (char *)v167 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  v170 = type metadata accessor for DispatchTime(0);
  v171 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v170 - 8) + 56);
  v171(v169, 1, 1, v170);
  v171((char *)v167 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime, 1, 1, v170);
  v167[15] = 0xD000000000000026;
  v167[16] = 0x8000000100ED3120;
  type metadata accessor for Transaction(0);
  v172 = v271[0];
  v174 = v272;
  v173 = v273;
  v175 = (unint64_t)v274;
  v176 = swift_allocObject(&unk_101071830, 56, 7);
  *(_QWORD *)(v176 + 16) = v167;
  *(_BYTE *)(v176 + 24) = v172;
  *(_QWORD *)(v176 + 32) = v174;
  *(_QWORD *)(v176 + 40) = v173;
  *(_QWORD *)(v176 + 48) = v175;
  sub_10001BBBC(v173, v175);
  swift_retain();
  static Transaction.asyncTask(name:block:)("MessagingServiceAnalyticsEvent", 30, 2, &unk_1010F9F10, v176);
  swift_release();
  isa = (NSURL *)v165[8].isa;
  URL._bridgeToObjectiveC()(isa);
  v178 = v177;
  sub_10047B784(v164);
  v179 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_1003B046C(v261);
  swift_bridgeObjectRelease();
  v180 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10047ACFC((uint64_t)v268);
  swift_bridgeObjectRelease();
  v181 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v275 = 0;
  v270 = 0;
  LODWORD(v175) = -[NSURL sendResourceAtURL:metadata:toDestinations:priority:options:identifier:error:](isa, "sendResourceAtURL:metadata:toDestinations:priority:options:identifier:error:", v178, v179, v180, 300, v181, &v275, &v270);

  v182 = v275;
  v183 = v270;
  v184 = v182;
  if (!(_DWORD)v175)
  {
    _convertNSErrorToError(_:)(v183);

    swift_willThrow(v206);
    sub_10001BC14(v249, v250);
    swift_release();
    v264(v267, v266);
    v204 = v252;
LABEL_42:
    v205 = v251;
    goto LABEL_43;
  }
  v185 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v186 = v267;
  URL._bridgeToObjectiveC()(v187);
  v189 = v188;
  v275 = 0;
  v190 = objc_msgSend(v185, "removeItemAtURL:error:", v188, &v275);

  v191 = v275;
  v192 = v252;
  if ((v190 & 1) == 0)
  {
    v207 = v275;
    _convertNSErrorToError(_:)(v191);

    swift_willThrow(v208);
    sub_10001BC14(v249, v250);
    swift_release();
    v264(v186, v266);
    v204 = v192;
    goto LABEL_42;
  }
  if (v184)
  {
    v193 = static String._unconditionallyBridgeFromObjectiveC(_:)(v182);
    v195 = v194;
    v196 = v191;
    v197 = (uint64_t)v256;
    UUID.init(uuidString:)(v193, v195);
    swift_bridgeObjectRelease();
    v198 = v251;
    v199 = v247(v197, 1, v251);
    v200 = v264;
    if (v199 != 1)
    {
      v211 = v248;
      v212 = v255;
      v268 = *(void (**)(_QWORD, _QWORD, _QWORD))(v248 + 32);
      v268(v255, v197, v198);
      LODWORD(isa) = v271[0];
      v213 = v273;
      v261 = (uint64_t)v272;
      v214 = v198;
      v215 = (unint64_t)v274;
      v216 = v253;
      (*(void (**)(char *, char *, uint64_t))(v211 + 16))(v253, v212, v214);
      sub_10001BBBC(v213, v215);
      v217 = sub_10001BBBC(v213, v215);
      v218 = Logger.logObject.getter(v217);
      v219 = static os_log_type_t.default.getter(v218);
      v220 = v219;
      if (os_log_type_enabled(v218, v219))
      {
        v221 = swift_slowAlloc(32, -1);
        LODWORD(v263) = v220;
        v222 = v221;
        v259 = (_QWORD *)swift_slowAlloc(96, -1);
        v275 = v259;
        *(_DWORD *)v222 = 136315650;
        v258 = v218;
        v223 = sub_1003B077C((uint64_t)v260);
        v270 = (id)sub_100016940(v223, v224, (uint64_t *)&v275);
        v260 = v271;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v271, v222 + 4, v222 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v222 + 12) = 2080;
        sub_1003B0B18((char)isa, v261, v213, v215, (uint64_t)&type metadata for BeaconSharingMessageType);
        v226 = v225;
        v228 = v227;
        sub_10001BC14(v213, v215);
        v270 = (id)sub_100016940(v226, v228, (uint64_t *)&v275);
        v229 = (uint64_t)v260;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v260, v222 + 14, v222 + 22);
        swift_bridgeObjectRelease();
        sub_10001BC14(v213, v215);
        *(_WORD *)(v222 + 22) = 2080;
        v230 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v231 = v251;
        v232 = dispatch thunk of CustomStringConvertible.description.getter(v251, v230);
        v270 = (id)sub_100016940(v232, v233, (uint64_t *)&v275);
        v212 = v255;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v270, v229, v222 + 24, v222 + 32);
        swift_bridgeObjectRelease();
        v234 = (void (*)(char *, uint64_t))v262;
        v262(v216, v231);
        v235 = v258;
        _os_log_impl((void *)&_mh_execute_header, v258, (os_log_type_t)v263, "%s: Sent message (resource) %s with identifier: %s", (uint8_t *)v222, 0x20u);
        v236 = v259;
        swift_arrayDestroy(v259, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v236, -1, -1);
        swift_slowDealloc(v222, -1, -1);
        sub_10001BC14(v249, v250);
        swift_release();

        v264(v267, v266);
        v237 = v252;
        v238 = v231;
      }
      else
      {
        sub_10001BC14(v213, v215);
        sub_10001BC14(v249, v250);

        v239 = v251;
        v234 = (void (*)(char *, uint64_t))v262;
        v262(v216, v251);
        v240 = v213;
        v231 = v239;
        sub_10001BC14(v240, v215);
        swift_release();
        v200(v267, v266);
        v237 = v252;
        v238 = v239;
      }
      v234(v237, v238);
      v268(v254, v212, v231);
      goto LABEL_44;
    }
    sub_100004048(v197, &qword_1010ED860);
    v201 = sub_1000FE094();
    v202 = swift_allocError(&type metadata for MessagingError, v201, 0, 0);
    *v203 = 0;
    swift_willThrow(v202);
    sub_10001BC14(v249, v250);
    swift_release();
    v200(v186, v266);
    v204 = v252;
    v205 = v198;
LABEL_43:
    v262(v204, v205);
LABEL_44:

    return;
  }
  v209 = sub_1000FE094();
  swift_allocError(&type metadata for MessagingError, v209, 0, 0);
  *v210 = 0;
  swift_willThrow(v191);
  sub_10001BC14(v249, v250);
  swift_release();
  v264(v186, v266);
  v262(v192, v251);
}

uint64_t sub_100390B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  _BYTE v13[24];

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  swift_beginAccess(a1 + 192, v13, 33, 0);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a1 + 192));
  v12 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0x8000000000000000;
  sub_10010BE78(a3, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a1 + 192) = v12;
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  return swift_endAccess(v13);
}

uint64_t sub_100390C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD aBlock[6];

  v30 = a4;
  v31 = a5;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(_QWORD *)(a2 + 168);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a3, v13);
  v17 = *(unsigned __int8 *)(v14 + 80);
  v18 = (v17 + 24) & ~v17;
  v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject(&unk_1010718D0, v19 + 16, v17 | 7);
  *(_QWORD *)(v20 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v20 + v18, v16, v13);
  v21 = (_QWORD *)(v20 + v19);
  v22 = v31;
  *v21 = v30;
  v21[1] = v22;
  aBlock[4] = sub_1003BB614;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010718E8;
  v23 = _Block_copy(aBlock);
  swift_retain();
  v24 = swift_retain();
  static DispatchQoS.unspecified.getter(v24);
  v36 = _swiftEmptyArrayStorage;
  v25 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v27 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v26, v27, v7, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v34);
  return swift_release();
}

uint64_t sub_100390EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t aBlock;
  uint64_t v76;
  uint64_t (*v77)(uint64_t);
  void *v78;
  uint64_t (*v79)();
  _QWORD *v80;

  v67 = a3;
  v68 = a4;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for DispatchWorkItemFlags(0);
  v70 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for DispatchQoS(0);
  v71 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v69 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1 + 192, &aBlock, 32, 0);
  v17 = *(_QWORD *)(a1 + 192);
  if (!*(_QWORD *)(v17 + 16))
    return swift_endAccess(&aBlock);
  v18 = sub_100003FB0(a2);
  if ((v19 & 1) == 0)
    return swift_endAccess(&aBlock);
  v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
  v21 = swift_endAccess(&aBlock);
  if (v20 >> 62)
  {
    if (v20 >> 62 == 1)
    {
      v22 = v20 & 0x3FFFFFFFFFFFFFFFLL;
      swift_errorRetain(v20 & 0x3FFFFFFFFFFFFFFFLL);
      v23 = swift_errorRetain(v20 & 0x3FFFFFFFFFFFFFFFLL);
      v24 = static os_log_type_t.error.getter(v23);
      v66 = (void *)v20;
      if (qword_1010EA250 != -1)
        swift_once(&qword_1010EA250, sub_100B5D964);
      v25 = qword_1011B7D30;
      v26 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v27 = swift_allocObject(v26, 72, 7);
      *(_OWORD *)(v27 + 16) = xmmword_100E22B00;
      aBlock = v20 & 0x3FFFFFFFFFFFFFFFLL;
      swift_errorRetain(v20 & 0x3FFFFFFFFFFFFFFFLL);
      v28 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v29 = String.init<A>(describing:)(&aBlock, v28);
      v31 = v30;
      *(_QWORD *)(v27 + 56) = &type metadata for String;
      *(_QWORD *)(v27 + 64) = sub_10001AA00();
      *(_QWORD *)(v27 + 32) = v29;
      *(_QWORD *)(v27 + 40) = v31;
      os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "Message send error: %@", 22, 2, v27);
      swift_bridgeObjectRelease();
      sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
      (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
      v32 = (void *)static OS_dispatch_queue.global(qos:)(v16);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      v33 = (_QWORD *)swift_allocObject(&unk_101071920, 40, 7);
      v34 = v68;
      v33[2] = v67;
      v33[3] = v34;
      v33[4] = v22;
      v79 = sub_1003BB62C;
      v80 = v33;
      aBlock = (unint64_t)_NSConcreteStackBlock;
      v76 = 1107296256;
      v77 = sub_100016FB8;
      v78 = &unk_101071938;
      v35 = _Block_copy(&aBlock);
      v36 = (unint64_t)v66;
      sub_10039C2A8((unint64_t)v66);
      v37 = swift_retain();
      v38 = v69;
      static DispatchQoS.unspecified.getter(v37);
      v74 = _swiftEmptyArrayStorage;
      v39 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v40 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v41 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v42 = v72;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v74, v40, v41, v72, v39);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v38, v11, v35);
      _Block_release(v35);

      sub_10010F91C(v36);
      sub_10010F91C(v36);
    }
    else
    {
      v54 = static os_log_type_t.default.getter(v21);
      if (qword_1010EA250 != -1)
        swift_once(&qword_1010EA250, sub_100B5D964);
      os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, qword_1011B7D30, "Message sent successfully", 25, 2, _swiftEmptyArrayStorage);
      sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
      (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
      v66 = (void *)static OS_dispatch_queue.global(qos:)(v16);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v6);
      v55 = *(unsigned __int8 *)(v7 + 80);
      v56 = (v55 + 32) & ~v55;
      v57 = swift_allocObject(&unk_101071970, v56 + v8, v55 | 7);
      v58 = v68;
      *(_QWORD *)(v57 + 16) = v67;
      *(_QWORD *)(v57 + 24) = v58;
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v57 + v56, v9, v6);
      v79 = sub_1003BB654;
      v80 = (_QWORD *)v57;
      aBlock = (unint64_t)_NSConcreteStackBlock;
      v76 = 1107296256;
      v77 = sub_100016FB8;
      v78 = &unk_101071988;
      v59 = _Block_copy(&aBlock);
      v60 = swift_retain();
      v38 = v69;
      static DispatchQoS.unspecified.getter(v60);
      v74 = _swiftEmptyArrayStorage;
      v61 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v62 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v63 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v42 = v72;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v74, v62, v63, v72, v61);
      v64 = v66;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v38, v11, v59);
      _Block_release(v59);

    }
  }
  else
  {
    v44 = swift_retain();
    v45 = static os_log_type_t.error.getter(v44);
    v66 = (void *)v20;
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, qword_1011B7D30, "Unexpected state: pending", 25, 2, _swiftEmptyArrayStorage);
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
    v46 = (void *)static OS_dispatch_queue.global(qos:)(v16);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v47 = swift_allocObject(&unk_1010719C0, 32, 7);
    v48 = v68;
    *(_QWORD *)(v47 + 16) = v67;
    *(_QWORD *)(v47 + 24) = v48;
    v79 = sub_1003BB668;
    v80 = (_QWORD *)v47;
    aBlock = (unint64_t)_NSConcreteStackBlock;
    v76 = 1107296256;
    v77 = sub_100016FB8;
    v78 = &unk_1010719D8;
    v49 = _Block_copy(&aBlock);
    v50 = swift_retain();
    v38 = v69;
    static DispatchQoS.unspecified.getter(v50);
    v74 = _swiftEmptyArrayStorage;
    v51 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v52 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v53 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v42 = v72;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v74, v52, v53, v72, v51);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v38, v11, v49);
    _Block_release(v49);

    sub_10010F91C((unint64_t)v66);
  }
  (*(void (**)(char *, uint64_t))(v70 + 8))(v11, v42);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v38, v73);
  return swift_release();
}

uint64_t sub_100391704(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v7 = sub_10001A9A8(a4);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v9 = a3;
  swift_storeEnumTagMultiPayload(v9, v10, 1);
  swift_errorRetain(a3);
  a1(v9);
  return sub_100004048((uint64_t)v9, a4);
}

void sub_1003917A8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, NSObject *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t EnumCaseMultiPayload;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  dispatch_group_t v45;
  _QWORD v46[3];
  _BYTE v47[8];
  uint64_t v48;
  uint64_t v49[2];

  v45 = a6;
  v43 = a3;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v41 - v14;
  v16 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v16);
  v18 = (uint64_t *)((char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = a1;
  sub_10000F9B8(a1, (uint64_t)v18, &qword_1010F4868);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v16);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v20 = *v18;
    v21 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v22 = qword_1011B7D30;
    v23 = v21;
    if (os_log_type_enabled((os_log_t)qword_1011B7D30, v21))
    {
      swift_bridgeObjectRetain(a4);
      swift_errorRetain(v20);
      swift_bridgeObjectRetain(a4);
      swift_errorRetain(v20);
      v24 = swift_slowAlloc(22, -1);
      v25 = swift_slowAlloc(64, -1);
      v49[0] = v25;
      *(_DWORD *)v24 = 136315394;
      swift_bridgeObjectRetain(a4);
      v48 = sub_100016940(v43, a4, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v24 + 12) = 2080;
      swift_getErrorValue(v20, v47, v46);
      v26 = Error.localizedDescription.getter(v46[1], v46[2]);
      v48 = sub_100016940(v26, v27, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v24 + 14, v24 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to send message to %s: (%s)", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    v28 = swift_errorRelease(v20);
  }
  else
  {
    v29 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v10 + 32))(v15, v18, v9);
    v30 = static os_log_type_t.info.getter(v29);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v31 = qword_1011B7D30;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
    v32 = v30;
    if (os_log_type_enabled(v31, v30))
    {
      swift_bridgeObjectRetain_n(a4, 2);
      v33 = swift_slowAlloc(22, -1);
      v42 = swift_slowAlloc(64, -1);
      v49[0] = v42;
      *(_DWORD *)v33 = 136315394;
      swift_bridgeObjectRetain(a4);
      v48 = sub_100016940(v43, a4, v49);
      v43 = a5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v33 + 4, v33 + 12);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v33 + 12) = 2080;
      v34 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v35 = dispatch thunk of CustomStringConvertible.description.getter(v9, v34);
      v48 = sub_100016940(v35, v36, v49);
      a5 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v33 + 14, v33 + 22);
      swift_bridgeObjectRelease();
      v37 = *(void (**)(char *, uint64_t))(v10 + 8);
      v37(v13, v9);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Successfully sent message to %s: (%s)", (uint8_t *)v33, 0x16u);
      v38 = v42;
      swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v33, -1, -1);
      v28 = ((uint64_t (*)(char *, uint64_t))v37)(v15, v9);
    }
    else
    {
      v39 = *(void (**)(char *, uint64_t))(v10 + 8);
      v39(v13, v9);
      v28 = ((uint64_t (*)(char *, uint64_t))v39)(v15, v9);
    }
  }
  __chkstk_darwin(v28);
  *(&v41 - 2) = v44;
  v40 = sub_10001A9A8(&qword_1010FA250);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1003D1DDC, &v41 - 4, a5, v40, &type metadata for () + 1);
  dispatch_group_leave(v45);
}

uint64_t sub_100391CDC(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;

  v4 = sub_10001A9A8(&qword_1010F4868);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F9B8(a2, (uint64_t)v7, &qword_1010F4868);
  v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v8 = sub_1007C9778(0, *(_QWORD *)(v8 + 16) + 1, 1, v8);
  v10 = *(_QWORD *)(v8 + 16);
  v9 = *(_QWORD *)(v8 + 24);
  if (v10 >= v9 >> 1)
    v8 = sub_1007C9778(v9 > 1, v10 + 1, 1, v8);
  *(_QWORD *)(v8 + 16) = v10 + 1;
  result = sub_100005CF0((uint64_t)v7, v8+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v10, &qword_1010F4868);
  *a1 = v8;
  return result;
}

void sub_100391DFC(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, int a7@<W7>, char *a8@<X8>, uint64_t a9, uint64_t a10, char a11, char a12)
{
  void (**v12)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t inited;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  int v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void (*v104)(uint64_t, uint64_t);
  os_log_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  Class isa;
  Class v128;
  Class v129;
  unsigned int v130;
  void *v131;
  char *v132;
  id v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  void (*v147)(char *, uint64_t, uint64_t);
  char *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  NSObject *v154;
  os_log_type_t v155;
  int v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  void (*v171)(char *, uint64_t);
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  os_log_t v178;
  char *v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  char *v183;
  unsigned int (*v184)(uint64_t, uint64_t, uint64_t);
  unint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  unint64_t v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  void (*v196)(char *, uint64_t, uint64_t);
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char v203[48];
  char v204[8];
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;

  v197 = a5;
  LODWORD(v193) = a7;
  v190 = a8;
  v196 = (void (*)(_QWORD, _QWORD, _QWORD))*v12;
  v18 = sub_10001A9A8(&qword_1010ED860);
  v19 = __chkstk_darwin(v18);
  v192 = (char *)&v177 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v194 = (char *)&v177 - v21;
  v22 = type metadata accessor for UUID(0);
  v199 = *(_QWORD *)(v22 - 8);
  v200 = v22;
  v23 = __chkstk_darwin(v22);
  v191 = (char *)&v177 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v177 - v26;
  v28 = __chkstk_darwin(v25);
  v30 = (char *)&v177 - v29;
  v31 = __chkstk_darwin(v28);
  v33 = (char *)&v177 - v32;
  v34 = __chkstk_darwin(v31);
  v204[0] = a1;
  v205 = a2;
  v206 = a3;
  v36 = (char *)&v177 - v35;
  v207 = a4;
  UUID.init()(v34);
  v37 = sub_10001A9A8(&qword_101106C20);
  inited = swift_initStackObject(v37, v203);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = v197;
  *(_QWORD *)(inited + 40) = a6;
  swift_bridgeObjectRetain(a6);
  v39 = sub_100CA7D78(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, &type metadata for String);
  v40 = type metadata accessor for PropertyListEncoder(0);
  v41 = swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
  PropertyListEncoder.init()(v41);
  v42 = sub_10001A9A8(&qword_1010FA0A0);
  v43 = sub_1000193A4(&qword_1010FA0A8, &qword_1010FA0A0, protocol conformance descriptor for Message<A>);
  v44 = v198;
  v45 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v204, v42, v43);
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v199 + 8))(v36, v200);
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  v188 = v30;
  v187 = v33;
  v197 = v45;
  v198 = v39;
  v189 = v46;
  v182 = 0;
  v183 = v27;
  swift_release();
  v47 = v193 & 1;
  v48 = 0x6567617373656DLL;
  if ((a12 & 1) != 0)
    v48 = 0xD000000000000017;
  v185 = v48;
  if ((a12 & 1) != 0)
    v49 = 0x8000000100ED3170;
  else
    v49 = 0xE700000000000000;
  v193 = v36;
  v50 = sub_1003C0FD4((uint64_t)v36, v47, a9, a10, a11 & 1, a12 & 1);
  v51 = (uint64_t)v194;
  sub_10000F9B8(a9, (uint64_t)v194, &qword_1010ED860);
  v52 = v199;
  v184 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v199 + 48);
  v53 = &qword_1010EA000;
  if (v184(v51, 1, v200) == 1)
  {
    sub_100004048(v51, &qword_1010ED860);
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v54 = type metadata accessor for Logger(0);
    sub_10001A9E8(v54, (uint64_t)qword_1011B7EC8);
    LODWORD(v194) = v204[0];
    v55 = v206;
    v188 = (char *)v205;
    v56 = v207;
    v57 = v198;
    swift_bridgeObjectRetain(v198);
    sub_10001BBBC(v55, v56);
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v49);
    v58 = sub_10001BBBC(v55, v56);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.info.getter(v59);
    v61 = v60;
    if (os_log_type_enabled(v59, v60))
    {
      v62 = swift_slowAlloc(42, -1);
      v63 = (char *)swift_slowAlloc(128, -1);
      v187 = v63;
      *(_DWORD *)v62 = 136315906;
      v181 = v61;
      v201 = (uint64_t)v196;
      v202 = v63;
      v64 = sub_10001A9A8(&qword_1010FA0B0);
      v186 = v50;
      v65 = String.init<A>(describing:)(&v201, v64);
      v201 = sub_100016940(v65, v66, (uint64_t *)&v202);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, &v202, v62 + 4, v62 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v62 + 12) = 2080;
      swift_bridgeObjectRetain(v49);
      v201 = sub_100016940(v185, v49, (uint64_t *)&v202);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, &v202, v62 + 14, v62 + 22);
      swift_bridgeObjectRelease_n(v49, 3);
      *(_WORD *)(v62 + 22) = 2080;
      sub_1003B0B18((char)v194, (uint64_t)v188, v55, v56, (uint64_t)&type metadata for BeaconSharingLocalMessageType);
      v68 = v67;
      v70 = v69;
      sub_10001BC14(v55, v56);
      v201 = sub_100016940(v68, v70, (uint64_t *)&v202);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, &v202, v62 + 24, v62 + 32);
      swift_bridgeObjectRelease();
      sub_10001BC14(v55, v56);
      *(_WORD *)(v62 + 32) = 2080;
      swift_bridgeObjectRetain(v57);
      v72 = Set.description.getter(v71, &type metadata for String, &protocol witness table for String);
      v74 = v73;
      swift_bridgeObjectRelease();
      v201 = sub_100016940(v72, v74, (uint64_t *)&v202);
      v50 = v186;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, &v202, v62 + 34, v62 + 42);
      swift_bridgeObjectRelease_n(v57, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v181, "%s: Sending %s: %s to %s", (uint8_t *)v62, 0x2Au);
      v75 = v187;
      swift_arrayDestroy(v187, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1, -1);
      v76 = v62;
      v53 = &qword_1010EA000;
      swift_slowDealloc(v76, -1, -1);

    }
    else
    {
      sub_10001BC14(v55, v56);
      swift_bridgeObjectRelease_n(v49, 2);
      sub_10001BC14(v55, v56);

      swift_bridgeObjectRelease_n(v57, 2);
    }
  }
  else
  {
    v186 = v50;
    v77 = v187;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v187, v51, v200);
    v78 = (uint64_t)v196;
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v79 = type metadata accessor for Logger(0);
    sub_10001A9E8(v79, (uint64_t)qword_1011B7EC8);
    v181 = v204[0];
    v80 = v206;
    v180 = v205;
    v81 = v207;
    v82 = v200;
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v188, v77, v200);
    sub_10001BBBC(v80, v81);
    v83 = v198;
    swift_bridgeObjectRetain(v198);
    sub_10001BBBC(v80, v81);
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v49);
    v85 = Logger.logObject.getter(v84);
    v86 = static os_log_type_t.info.getter(v85);
    LODWORD(v194) = v86;
    if (os_log_type_enabled(v85, v86))
    {
      v87 = swift_slowAlloc(52, -1);
      v179 = (char *)swift_slowAlloc(160, -1);
      v201 = v78;
      v202 = v179;
      *(_DWORD *)v87 = 136316162;
      v178 = v85;
      v88 = sub_10001A9A8(&qword_1010FA0B0);
      v89 = String.init<A>(describing:)(&v201, v88);
      v201 = sub_100016940(v89, v90, (uint64_t *)&v202);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, &v202, v87 + 4, v87 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v87 + 12) = 2080;
      swift_bridgeObjectRetain(v49);
      v201 = sub_100016940(v185, v49, (uint64_t *)&v202);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, &v202, v87 + 14, v87 + 22);
      swift_bridgeObjectRelease_n(v49, 3);
      *(_WORD *)(v87 + 22) = 2080;
      sub_1003B0B18(v181, v180, v80, v81, (uint64_t)&type metadata for BeaconSharingLocalMessageType);
      v92 = v91;
      v93 = v52;
      v95 = v94;
      sub_10001BC14(v80, v81);
      v201 = sub_100016940(v92, v95, (uint64_t *)&v202);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, &v202, v87 + 24, v87 + 32);
      swift_bridgeObjectRelease();
      sub_10001BC14(v80, v81);
      *(_WORD *)(v87 + 32) = 2080;
      swift_bridgeObjectRetain(v83);
      v97 = Set.description.getter(v96, &type metadata for String, &protocol witness table for String);
      v99 = v98;
      swift_bridgeObjectRelease();
      v201 = sub_100016940(v97, v99, (uint64_t *)&v202);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, &v202, v87 + 34, v87 + 42);
      swift_bridgeObjectRelease_n(v83, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v87 + 42) = 2080;
      v82 = v200;
      v100 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v101 = (uint64_t)v188;
      v102 = dispatch thunk of CustomStringConvertible.description.getter(v82, v100);
      v201 = sub_100016940(v102, v103, (uint64_t *)&v202);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, &v202, v87 + 44, v87 + 52);
      swift_bridgeObjectRelease();
      v104 = *(void (**)(uint64_t, uint64_t))(v93 + 8);
      v104(v101, v82);
      v105 = v178;
      _os_log_impl((void *)&_mh_execute_header, v178, (os_log_type_t)v194, "%s: Sending %s: %s to %s in response to %s", (uint8_t *)v87, 0x34u);
      v106 = v179;
      swift_arrayDestroy(v179, 5, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v106, -1, -1);
      swift_slowDealloc(v87, -1, -1);

      v107 = v187;
    }
    else
    {
      sub_10001BC14(v80, v81);

      v104 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
      v104((uint64_t)v188, v82);
      swift_bridgeObjectRelease_n(v83, 2);
      sub_10001BC14(v80, v81);
      swift_bridgeObjectRelease_n(v49, 2);
      v107 = v77;
    }
    v104((uint64_t)v107, v82);
    v50 = v186;
    v53 = &qword_1010EA000;
  }
  if (v53[121] != -1)
    swift_once(&qword_1010EA3C8, sub_100BECC74);
  v108 = type metadata accessor for Logger(0);
  v109 = sub_10001A9E8(v108, (uint64_t)qword_1011B7EC8);
  swift_bridgeObjectRetain_n(v50, 2);
  v194 = (char *)v109;
  v111 = Logger.logObject.getter(v110);
  v112 = static os_log_type_t.info.getter(v111);
  if (os_log_type_enabled(v111, v112))
  {
    v113 = v50;
    v114 = swift_slowAlloc(22, -1);
    v115 = (char *)swift_slowAlloc(64, -1);
    v188 = v115;
    *(_DWORD *)v114 = 136315394;
    v201 = (uint64_t)v196;
    v202 = v115;
    v116 = sub_10001A9A8(&qword_1010FA0B0);
    v117 = String.init<A>(describing:)(&v201, v116);
    v201 = sub_100016940(v117, v118, (uint64_t *)&v202);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, &v202, v114 + 4, v114 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v114 + 12) = 2080;
    swift_bridgeObjectRetain(v113);
    v119 = Dictionary.description.getter(v113, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v121 = v120;
    swift_bridgeObjectRelease();
    v201 = sub_100016940(v119, v121, (uint64_t *)&v202);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, &v202, v114 + 14, v114 + 22);
    swift_bridgeObjectRelease_n(v113, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v111, v112, "%s: IDSSendMessageOptions: %s", (uint8_t *)v114, 0x16u);
    v122 = (uint64_t)v188;
    swift_arrayDestroy(v188, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v122, -1, -1);
    swift_slowDealloc(v114, -1, -1);

    v123 = v189;
    v124 = v195;
  }
  else
  {

    swift_bridgeObjectRelease_n(v50, 2);
    v123 = v189;
    v124 = v195;
    v113 = v50;
  }
  v125 = *(void **)(v124 + 56);
  v126 = v197;
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1003B046C(v198);
  swift_bridgeObjectRelease();
  v128 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10047ACFC(v113);
  swift_bridgeObjectRelease();
  v129 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v201 = 0;
  v202 = 0;
  v130 = objc_msgSend(v125, "sendData:toDestinations:priority:options:identifier:error:", isa, v128, 300, v129, &v201, &v202);

  v131 = (void *)v201;
  v132 = v202;
  v133 = v131;
  v134 = v133;
  if (!v130)
  {
    _convertNSErrorToError(_:)(v132);

    swift_willThrow(v143);
    sub_10001BC14(v126, v123);
    (*(void (**)(char *, uint64_t))(v199 + 8))(v193, v200);
    goto LABEL_30;
  }
  if (v133)
  {
    v135 = static String._unconditionallyBridgeFromObjectiveC(_:)(v131);
    v136 = (uint64_t)v192;
    UUID.init(uuidString:)(v135, v137);
    swift_bridgeObjectRelease();
    v138 = v184(v136, 1, v200);
    v139 = v199;
    if (v138 == 1)
    {
      sub_100004048(v136, &qword_1010ED860);
      v140 = sub_1000FE094();
      v141 = swift_allocError(&type metadata for MessagingError, v140, 0, 0);
      *v142 = 0;
      swift_willThrow(v141);
      sub_10001BC14(v197, v123);
      (*(void (**)(char *, uint64_t))(v139 + 8))(v193, v200);
LABEL_30:

      return;
    }
    v147 = *(void (**)(char *, uint64_t, uint64_t))(v199 + 32);
    v148 = v183;
    v149 = v200;
    v147(v183, v136, v200);
    LODWORD(v198) = v204[0];
    v150 = v206;
    v195 = v205;
    v151 = v207;
    v152 = v191;
    (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v191, v148, v149);
    sub_10001BBBC(v150, v151);
    v153 = sub_10001BBBC(v150, v151);
    v154 = Logger.logObject.getter(v153);
    v155 = static os_log_type_t.info.getter(v154);
    v156 = v155;
    if (os_log_type_enabled(v154, v155))
    {
      v157 = swift_slowAlloc(32, -1);
      v158 = (char *)swift_slowAlloc(96, -1);
      v194 = v158;
      *(_DWORD *)v157 = 136315650;
      v201 = (uint64_t)v196;
      v202 = v158;
      v159 = sub_10001A9A8(&qword_1010FA0B0);
      v160 = String.init<A>(describing:)(&v201, v159);
      LODWORD(v192) = v156;
      v201 = sub_100016940(v160, v161, (uint64_t *)&v202);
      v196 = (void (*)(_QWORD, _QWORD, _QWORD))v147;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, &v202, v157 + 4, v157 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v157 + 12) = 2080;
      sub_1003B0B18(v198, v195, v150, v151, (uint64_t)&type metadata for BeaconSharingLocalMessageType);
      v163 = v162;
      v165 = v164;
      sub_10001BC14(v150, v151);
      v201 = sub_100016940(v163, v165, (uint64_t *)&v202);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, &v202, v157 + 14, v157 + 22);
      swift_bridgeObjectRelease();
      sub_10001BC14(v150, v151);
      *(_WORD *)(v157 + 22) = 2080;
      v166 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v167 = v191;
      v168 = dispatch thunk of CustomStringConvertible.description.getter(v200, v166);
      v201 = sub_100016940(v168, v169, (uint64_t *)&v202);
      v147 = (void (*)(char *, uint64_t, uint64_t))v196;
      v170 = v200;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, &v202, v157 + 24, v157 + 32);
      swift_bridgeObjectRelease();
      v171 = *(void (**)(char *, uint64_t))(v199 + 8);
      v171(v167, v170);
      _os_log_impl((void *)&_mh_execute_header, v154, (os_log_type_t)v192, "%s: Sent message %s with identifier: %s", (uint8_t *)v157, 0x20u);
      v172 = (uint64_t)v194;
      swift_arrayDestroy(v194, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v172, -1, -1);
      v173 = v157;
      v148 = v183;
      swift_slowDealloc(v173, -1, -1);
      sub_10001BC14(v197, v189);

      v174 = v193;
      v175 = v170;
    }
    else
    {
      sub_10001BC14(v150, v151);
      sub_10001BC14(v197, v189);

      v176 = v200;
      v171 = *(void (**)(char *, uint64_t))(v199 + 8);
      v171(v152, v200);
      sub_10001BC14(v150, v151);
      v174 = v193;
      v175 = v176;
    }
    v171(v174, v175);
    v147((char *)v190, (uint64_t)v148, v200);

  }
  else
  {
    v144 = sub_1000FE094();
    v145 = swift_allocError(&type metadata for MessagingError, v144, 0, 0);
    *v146 = 0;
    swift_willThrow(v145);
    sub_10001BC14(v197, v123);
    (*(void (**)(char *, uint64_t))(v199 + 8))(v193, v200);
  }
}

uint64_t sub_100393024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t result;
  _QWORD aBlock[6];

  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(NSObject **)(a2 + 168);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 24) & ~v14;
  v16 = (v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject(&unk_1010723C0, v16 + 16, v14 | 7);
  *(_QWORD *)(v17 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v17 + v15, v12, v9);
  v18 = (_QWORD *)(v17 + v16);
  *v18 = a4;
  v18[1] = a5;
  v19 = swift_allocObject(&unk_1010723E8, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_1003D03C8;
  *(_QWORD *)(v19 + 24) = v17;
  aBlock[4] = sub_10005CBA4;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_101072400;
  v20 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v13, v20);
  _Block_release(v20);
  LOBYTE(a5) = swift_isEscapingClosureAtFileLocation(v19, "", 113, 1111, 39, 1);
  swift_release();
  result = swift_release();
  if ((a5 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1003931F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t aBlock;
  uint64_t v74;
  uint64_t (*v75)(uint64_t);
  void *v76;
  uint64_t (*v77)();
  _QWORD *v78;

  v65 = a3;
  v66 = a4;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for DispatchWorkItemFlags(0);
  v68 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for DispatchQoS(0);
  v69 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v67 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1 + 192, &aBlock, 32, 0);
  v17 = *(_QWORD *)(a1 + 192);
  if (!*(_QWORD *)(v17 + 16))
    return swift_endAccess(&aBlock);
  v18 = sub_100003FB0(a2);
  if ((v19 & 1) == 0)
    return swift_endAccess(&aBlock);
  v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
  swift_endAccess(&aBlock);
  if (v20 >> 62)
  {
    if (v20 >> 62 == 1)
    {
      v21 = v20 & 0x3FFFFFFFFFFFFFFFLL;
      swift_errorRetain(v20 & 0x3FFFFFFFFFFFFFFFLL);
      v22 = swift_errorRetain(v20 & 0x3FFFFFFFFFFFFFFFLL);
      v23 = static os_log_type_t.error.getter(v22);
      v64 = (void *)v20;
      if (qword_1010EA250 != -1)
        swift_once(&qword_1010EA250, sub_100B5D964);
      v24 = qword_1011B7D30;
      v25 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v26 = swift_allocObject(v25, 72, 7);
      *(_OWORD *)(v26 + 16) = xmmword_100E22B00;
      aBlock = v20 & 0x3FFFFFFFFFFFFFFFLL;
      swift_errorRetain(v20 & 0x3FFFFFFFFFFFFFFFLL);
      v27 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v28 = String.init<A>(describing:)(&aBlock, v27);
      v30 = v29;
      *(_QWORD *)(v26 + 56) = &type metadata for String;
      *(_QWORD *)(v26 + 64) = sub_10001AA00();
      *(_QWORD *)(v26 + 32) = v28;
      *(_QWORD *)(v26 + 40) = v30;
      os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Local message send error: %@", 28, 2, v26);
      swift_bridgeObjectRelease();
      sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
      (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
      v31 = (void *)static OS_dispatch_queue.global(qos:)(v16);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      v32 = (_QWORD *)swift_allocObject(&unk_101072438, 40, 7);
      v33 = v66;
      v32[2] = v65;
      v32[3] = v33;
      v32[4] = v21;
      v77 = sub_1003D9B40;
      v78 = v32;
      aBlock = (unint64_t)_NSConcreteStackBlock;
      v74 = 1107296256;
      v75 = sub_100016FB8;
      v76 = &unk_101072450;
      v34 = _Block_copy(&aBlock);
      v35 = (unint64_t)v64;
      sub_10039C2A8((unint64_t)v64);
      v36 = swift_retain();
      v37 = v67;
      static DispatchQoS.unspecified.getter(v36);
      v72 = _swiftEmptyArrayStorage;
      v38 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v39 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v40 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v41 = v70;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v72, v39, v40, v70, v38);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v37, v11, v34);
      _Block_release(v34);

      sub_10010F91C(v35);
      sub_10010F91C(v35);
    }
    else
    {
      sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
      (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
      v64 = (void *)static OS_dispatch_queue.global(qos:)(v16);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v6);
      v53 = *(unsigned __int8 *)(v7 + 80);
      v54 = (v53 + 32) & ~v53;
      v55 = swift_allocObject(&unk_101072488, v54 + v8, v53 | 7);
      v56 = v66;
      *(_QWORD *)(v55 + 16) = v65;
      *(_QWORD *)(v55 + 24) = v56;
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v55 + v54, v9, v6);
      v77 = sub_1003BB654;
      v78 = (_QWORD *)v55;
      aBlock = (unint64_t)_NSConcreteStackBlock;
      v74 = 1107296256;
      v75 = sub_100016FB8;
      v76 = &unk_1010724A0;
      v57 = _Block_copy(&aBlock);
      v58 = swift_retain();
      v37 = v67;
      static DispatchQoS.unspecified.getter(v58);
      v72 = _swiftEmptyArrayStorage;
      v59 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v60 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v61 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v41 = v70;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v72, v60, v61, v70, v59);
      v62 = v64;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v37, v11, v57);
      _Block_release(v57);

    }
  }
  else
  {
    v43 = swift_retain();
    v44 = static os_log_type_t.error.getter(v43);
    v64 = (void *)v20;
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, qword_1011B7D30, "Unexpected state: pending", 25, 2, _swiftEmptyArrayStorage);
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
    v45 = (void *)static OS_dispatch_queue.global(qos:)(v16);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v46 = swift_allocObject(&unk_1010724D8, 32, 7);
    v47 = v66;
    *(_QWORD *)(v46 + 16) = v65;
    *(_QWORD *)(v46 + 24) = v47;
    v77 = sub_1003D9724;
    v78 = (_QWORD *)v46;
    aBlock = (unint64_t)_NSConcreteStackBlock;
    v74 = 1107296256;
    v75 = sub_100016FB8;
    v76 = &unk_1010724F0;
    v48 = _Block_copy(&aBlock);
    v49 = swift_retain();
    v37 = v67;
    static DispatchQoS.unspecified.getter(v49);
    v72 = _swiftEmptyArrayStorage;
    v50 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v51 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v52 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v41 = v70;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v72, v51, v52, v70, v50);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v37, v11, v48);
    _Block_release(v48);

    sub_10010F91C((unint64_t)v64);
  }
  (*(void (**)(char *, uint64_t))(v68 + 8))(v11, v41);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v37, v71);
  return swift_release();
}

uint64_t sub_1003939A4(void (*a1)(uint64_t *))
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;

  v2 = type metadata accessor for URLError.Code(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URLError(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_10001A9A8(&qword_1010F4868);
  v10 = __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  static URLError.Code.timedOut.getter(v10);
  v13 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v14 = sub_100006204(&qword_1010F9F50, (uint64_t (*)(uint64_t))&type metadata accessor for URLError, (uint64_t)&protocol conformance descriptor for URLError);
  v15 = _BridgedStoredNSError.init(_:userInfo:)(v8, v4, v13, v5, v14);
  v16 = URLError._nsError.getter(v15);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  *v12 = v16;
  swift_storeEnumTagMultiPayload(v12, v9, 1);
  a1(v12);
  return sub_100004048((uint64_t)v12, &qword_1010F4868);
}

uint64_t sub_100393B2C(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v7, a3, v8);
  swift_storeEnumTagMultiPayload(v7, v5, 0);
  a1(v7);
  return sub_100004048((uint64_t)v7, &qword_1010F4868);
}

uint64_t sub_100393BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD aBlock[6];

  v39 = a5;
  v40 = a6;
  v37 = a4;
  v38 = a2;
  v41 = a3;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v45 = *(_QWORD *)(v7 - 8);
  v46 = v7;
  __chkstk_darwin(v7);
  v44 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v9 - 8);
  v43 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS.QoSClass(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = static os_log_type_t.error.getter(v14);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v18 = qword_1011B7D30;
  v19 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v20 = swift_allocObject(v19, 72, 7);
  *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
  aBlock[0] = a1;
  swift_errorRetain(a1);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v22 = String.init<A>(describing:)(aBlock, v21);
  v24 = v23;
  *(_QWORD *)(v20 + 56) = &type metadata for String;
  *(_QWORD *)(v20 + 64) = sub_10001AA00();
  *(_QWORD *)(v20 + 32) = v22;
  *(_QWORD *)(v20 + 40) = v24;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Message send future error: %@", 29, 2, v20);
  swift_bridgeObjectRelease();
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v12);
  v25 = (void *)static OS_dispatch_queue.global(qos:)(v16);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v26 = (_QWORD *)swift_allocObject(v37, 40, 7);
  v27 = v41;
  v26[2] = v38;
  v26[3] = v27;
  v26[4] = a1;
  aBlock[4] = v39;
  aBlock[5] = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = v40;
  v28 = _Block_copy(aBlock);
  swift_errorRetain(a1);
  v29 = swift_retain();
  static DispatchQoS.unspecified.getter(v29);
  v47 = _swiftEmptyArrayStorage;
  v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v33 = v44;
  v34 = v46;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v31, v32, v46, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v33, v28);
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v45 + 8))(v33, v34);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v43);
  return swift_release();
}

uint64_t sub_100393F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];

  v21 = a3;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static os_log_type_t.default.getter(v7);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v11 = qword_1011B7D30;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E22B00;
  v14 = UUID.uuidString.getter(v13);
  v16 = v15;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  *(_QWORD *)(v13 + 64) = sub_10001AA00();
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 40) = v16;
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Setting local %@ to pending", 27, 2, v13);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  swift_beginAccess(a2 + 192, v23, 33, 0);
  v17 = v21;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a2 + 192));
  v22 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0x8000000000000000;
  sub_10010BE78(v17, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a2 + 192) = v22;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return swift_endAccess(v23);
}

uint64_t sub_100394110(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD aBlock[6];

  v38 = a5;
  v39 = a6;
  v36 = a3;
  v37 = a4;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v41 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS.QoSClass(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1 + 192;
  swift_beginAccess(a1 + 192, aBlock, 32, 0);
  v19 = *(_QWORD *)(a1 + 192);
  if (!*(_QWORD *)(v19 + 16))
    return swift_endAccess(aBlock);
  v20 = sub_100003FB0(a2);
  if ((v21 & 1) == 0)
    return swift_endAccess(aBlock);
  v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
  result = swift_endAccess(aBlock);
  if (!(v22 >> 62))
  {
    v24 = swift_retain_n(v22, 2);
    v25 = static os_log_type_t.error.getter(v24);
    v35 = v22;
    v26 = v25;
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, qword_1011B7D30, v36, v37, 2, _swiftEmptyArrayStorage, v35);
    swift_beginAccess(v18, aBlock, 33, 0);
    v27 = sub_100103B54(a2);
    swift_endAccess(aBlock);
    sub_1003BB5D8(v27);
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchQoS.QoSClass.default(_:), v14);
    v28 = (void *)static OS_dispatch_queue.global(qos:)(v17);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v29 = v35;
    aBlock[4] = v38;
    aBlock[5] = v35;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = v39;
    v30 = _Block_copy(aBlock);
    v31 = swift_retain();
    static DispatchQoS.unspecified.getter(v31);
    v42 = _swiftEmptyArrayStorage;
    v32 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v33 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v34 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v33, v34, v8, v32);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v30);
    _Block_release(v30);

    sub_10010F91C(v29);
    sub_10010F91C(v29);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v40);
    return swift_release();
  }
  return result;
}

void sub_100394478()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;

  v0 = type metadata accessor for URLError.Code(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URLError(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  static URLError.Code.timedOut.getter(v5);
  v8 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v9 = sub_100006204(&qword_1010F9F50, (uint64_t (*)(uint64_t))&type metadata accessor for URLError, (uint64_t)&protocol conformance descriptor for URLError);
  v10 = _BridgedStoredNSError.init(_:userInfo:)(v7, v2, v8, v3, v9);
  v11 = (void *)URLError._nsError.getter(v10);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  Future.finish(error:)(v11);

}

uint64_t sub_10039459C()
{
  double v0;
  double v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_10001A9A8(&qword_1010FA2E0);
  sub_100C1BD84(v4);
  v1 = v0;
  v2 = swift_bridgeObjectRelease();
  result = AsyncKeyedThrottle.__allocating_init(throttleInterval:)(v2, v1);
  qword_1010F9CD8 = result;
  return result;
}

uint64_t sub_100394654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_100394670, 0, 0);
}

uint64_t sub_100394670()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v7;

  if (qword_1010E9BA0 != -1)
    swift_once(&qword_1010E9BA0, sub_10039459C);
  v2 = v0[4];
  v1 = v0[5];
  v3 = swift_allocObject(&unk_101073608, 32, 7);
  v0[6] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = *((unsigned int *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
       + 1);
  v7 = (char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
     + async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:);
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc(v4);
  v0[7] = v5;
  *v5 = v0;
  v5[1] = sub_100394754;
  return ((uint64_t (*)(_QWORD, void *, uint64_t, uint64_t (*)(_QWORD), _QWORD))v7)(v0[3], &unk_1010FA2D8, v3, SharingCircleWildAdvertisementKey.init(key:), 0);
}

uint64_t sub_100394754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
  {
    swift_errorRelease(v0);
    v3 = sub_1003D9B80;
  }
  else
  {
    v3 = sub_1003947C8;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003947C8()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 64) != 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003947E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1003947FC, 0, 0);
}

uint64_t sub_1003947FC()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 16))();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_100394834(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  _BYTE v8[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v6);
    v7[2] = v5;
    v7[3] = a2;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.reevaluateFamilySharing", 53, 2, sub_1003D218C, v7);
    return swift_release();
  }
  return result;
}

uint64_t sub_1003948F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[6];
  _QWORD *v30;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v26 = *(_QWORD *)(v9 - 8);
  v27 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OwnedBeaconRecord(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v25[1] = *(_QWORD *)(a2 + 184);
  sub_10005972C(a3, (uint64_t)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = swift_allocObject(&unk_101073630, v17 + v14, v16 | 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  sub_1000126EC((uint64_t)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, type metadata accessor for OwnedBeaconRecord);
  aBlock[4] = sub_1003D244C;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101073648;
  v19 = _Block_copy(aBlock);
  swift_retain();
  v20 = swift_retain();
  static DispatchQoS.unspecified.getter(v20);
  v30 = _swiftEmptyArrayStorage;
  v21 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v23 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v22, v23, v6, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v27);
  return swift_release();
}

uint64_t sub_100394B68(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t a1))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v5 = type metadata accessor for OwnedBeaconRecord(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  Transaction.capture()();
  sub_100394D94(a3);
  type metadata accessor for Transaction(0);
  sub_10005972C((uint64_t)a3, (uint64_t)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for OwnedBeaconRecord);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_101073680, v9 + v7, v8 | 7);
  *(_QWORD *)(v10 + 16) = a2;
  sub_1000126EC((uint64_t)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v9, type metadata accessor for OwnedBeaconRecord);
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconManagerService._reevaluateKeyDropFamilySharing", 52, 2, &unk_1010FA2F0, v10);
  return swift_release();
}

_BYTE *sub_100394D94(uint64_t (*a1)(uint64_t a1))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  _BYTE *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;

  v3 = v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v3 + 184);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  v11 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_once(&qword_1010EA278, sub_100B5DB4C);
    goto LABEL_4;
  }
  result = sub_100394F8C(a1);
  if (v2)
    return result;
  v8 = result;
  v11 = v13;
  v6 = v14;
  v23 = static os_log_type_t.default.getter(result);
  if (qword_1010EA278 != -1)
    goto LABEL_7;
LABEL_4:
  v22 = qword_1011B7D58;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  v17 = type metadata accessor for OwnedBeaconRecord(0);
  v18 = UUID.uuidString.getter(v17);
  v20 = v19;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_10001AA00();
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v22, "reevaluateFamilySharing for %@", 30, 2, v16);
  swift_bridgeObjectRelease();
  sub_100396378((uint64_t)a1, v11);
  sub_100396988((uint64_t)a1, (uint64_t)v8, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (_BYTE *)swift_bridgeObjectRelease();
}

_BYTE *sub_100394F8C(uint64_t (*a1)(uint64_t a1))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _BYTE *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  _QWORD *v59;
  unint64_t *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *result;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(uint64_t);
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  _BYTE *v107;
  _QWORD *v108;
  uint64_t v109;
  Swift::UInt v110;
  uint64_t v111;
  Swift::Int v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 *v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  uint64_t v124;
  _BOOL8 v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(uint64_t);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  _BYTE v155[12];
  int v156;
  unint64_t v157;
  char *v158;
  uint64_t v159;
  _BYTE *v160;
  uint64_t v161;
  uint64_t v162;
  _BYTE *v163;
  _BYTE *v164;
  uint64_t v165;
  _BYTE *v166;
  unint64_t v167;
  uint64_t (*v168)(uint64_t);
  unint64_t v169;
  uint64_t v170;
  __int128 v171;
  _QWORD v172[2];
  uint64_t v173;

  v2 = v1;
  v161 = type metadata accessor for CorrelationIdentifierMap(0);
  v159 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v160 = &v155[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for ShareRecord(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v164 = &v155[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __chkstk_darwin(v7);
  v166 = &v155[-v10];
  __chkstk_darwin(v9);
  v12 = &v155[-v11];
  v13 = sub_10001A9A8(&qword_1010FA070);
  v14 = __chkstk_darwin(v13);
  v167 = (unint64_t)&v155[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  v168 = (uint64_t (*)(uint64_t))&v155[-v16];
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = &v155[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v172[0] = 0x7365547265646E75;
  v172[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v173, v172, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (v173 == 1)
  {
    sub_1006BA600((uint64_t)_swiftEmptyArrayStorage);
    return &_swiftEmptySetSingleton;
  }
  v21 = *(void **)(v1 + 184);
  *v20 = v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)(v20);
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) == 0)
  {
    __break(1u);
LABEL_51:
    v172[0] = v23;
    sub_10063BA38(v2);
    swift_bridgeObjectRelease();
    v95 = (void *)v172[0];
    goto LABEL_52;
  }
  v158 = (char *)a1 + *(int *)(type metadata accessor for OwnedBeaconRecord(0) + 20);
  v24 = sub_10088A6EC();
  v25 = v24;
  v26 = v24[2];
  *(_QWORD *)&v171 = v5;
  v165 = v26;
  if (v26)
  {
    v27 = (uint64_t)v24 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v163 = *(_BYTE **)(v6 + 72);
    swift_bridgeObjectRetain(v24);
    v28 = _swiftEmptyArrayStorage;
    v29 = v26;
    do
    {
      v30 = v164;
      sub_10005972C(v27, (uint64_t)v164, type metadata accessor for ShareRecord);
      v31 = &v30[*(int *)(v5 + 36)];
      LODWORD(v170) = *v31;
      v32 = *((_QWORD *)v31 + 2);
      v169 = *((_QWORD *)v31 + 1);
      swift_bridgeObjectRetain(v32);
      sub_1000126B0((uint64_t)v30, type metadata accessor for ShareRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
        v28 = sub_1007C8700(0, v28[2] + 1, 1, v28);
      v34 = v28[2];
      v33 = v28[3];
      if (v34 >= v33 >> 1)
        v28 = sub_1007C8700((_QWORD *)(v33 > 1), v34 + 1, 1, v28);
      v28[2] = v34 + 1;
      v35 = &v28[3 * v34];
      *((_BYTE *)v35 + 32) = v170;
      v35[5] = v169;
      v35[6] = v32;
      v27 += (uint64_t)v163;
      --v29;
      v5 = v171;
    }
    while (v29);
    swift_bridgeObjectRelease();
    v26 = v165;
  }
  else
  {
    v28 = _swiftEmptyArrayStorage;
  }
  v170 = sub_100CA8058((uint64_t)v28);
  swift_bridgeObjectRelease();
  v169 = sub_1003D63C4();
  v36 = Set.init(minimumCapacity:)(0);
  v37 = 0;
  v173 = v36;
  a1 = type metadata accessor for ShareRecord;
  v38 = v167;
  if (v26)
    goto LABEL_16;
LABEL_22:
  while (2)
  {
    v45 = 1;
    v37 = v26;
LABEL_24:
    v46 = v168;
    (*(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v6 + 56))(v168, v45, 1, v5);
    sub_100005CF0((uint64_t)v46, v38, &qword_1010FA070);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v38, 1, v5) == 1)
    {
      swift_bridgeObjectRelease();
      v55 = v173;
      v56 = v162;
      sub_1003CD2D0();
      v6 = v56;
      if (!v56)
      {
        a1 = (uint64_t (*)(uint64_t))v57;
        v58 = *(_QWORD *)(v57 + 16);
        v59 = _swiftEmptyArrayStorage;
        *(_QWORD *)&v171 = v55;
        if (v58)
        {
          v162 = 0;
          v172[0] = _swiftEmptyArrayStorage;
          sub_10009ACD4(0, v58, 0);
          v59 = (_QWORD *)v172[0];
          v168 = a1;
          v60 = (unint64_t *)((char *)a1 + 64);
          do
          {
            v61 = *((_BYTE *)v60 - 32);
            v63 = *(v60 - 3);
            v62 = *(v60 - 2);
            v64 = *(v60 - 1);
            v65 = *v60;
            swift_bridgeObjectRetain(v62);
            sub_10001BD08(v64, v65);
            sub_10001EF3C(v64, v65);
            v172[0] = v59;
            v67 = v59[2];
            v66 = v59[3];
            if (v67 >= v66 >> 1)
            {
              sub_10009ACD4(v66 > 1, v67 + 1, 1);
              v59 = (_QWORD *)v172[0];
            }
            v59[2] = v67 + 1;
            v68 = &v59[3 * v67];
            *((_BYTE *)v68 + 32) = v61;
            v60 += 5;
            v68[5] = v63;
            v68[6] = v62;
            --v58;
          }
          while (v58);
          v6 = v162;
          a1 = v168;
          v55 = v171;
        }
        v26 = sub_100CA8058((uint64_t)v59);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain(v55);
        v69 = v170;
        swift_bridgeObjectRetain(v170);
        v71 = sub_100BBD320(v70, v55);
        swift_bridgeObjectRetain(v26);
        v73 = sub_100BBD320(v72, v71);
        v74 = (_QWORD *)swift_allocObject(&unk_101073EA0, 40, 7);
        v74[2] = v73;
        v74[3] = v55;
        v74[4] = v69;
        swift_bridgeObjectRetain(v55);
        swift_bridgeObjectRetain(v69);
        v12 = v160;
        v5 = v161;
        unsafeFromAsyncTask<A>(_:)(&unk_1010FA420, v74, v161);
        if (!v6)
        {
          swift_release();
          sub_10037A2E8(v26);
          v76 = sub_100CA8974(v75);
          swift_bridgeObjectRelease();
          v36 = CorrelationIdentifierMap.map(destinations:)(v76);
          goto LABEL_41;
        }
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
LABEL_38:
      swift_bridgeObjectRelease();
      return v12;
    }
    v47 = v38;
    v48 = v166;
    sub_1000126EC(v47, (uint64_t)v166, type metadata accessor for ShareRecord);
    v49 = &v48[*(int *)(v5 + 36)];
    v50 = *((_QWORD *)v49 + 1);
    v51 = *((_QWORD *)v49 + 2);
    v52 = *v49;
    swift_bridgeObjectRetain(v51);
    sub_1000126B0((uint64_t)v48, type metadata accessor for ShareRecord);
    v53 = v50;
    v26 = v165;
    v54 = v51;
    v5 = v171;
    sub_100A0C018((uint64_t)v172, v52, v53, v54);
    v38 = v167;
    v36 = swift_bridgeObjectRelease();
    if (v37 == v26)
      continue;
    break;
  }
LABEL_16:
  while (v37 < v25[2])
  {
    v39 = v37 + 1;
    sub_10005972C((uint64_t)v25+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v37, (uint64_t)v12, type metadata accessor for ShareRecord);
    v40 = (uint64_t *)&v12[*(int *)(v5 + 40)];
    v42 = *v40;
    v41 = v40[1];
    v43 = v42 & 0xFFFFFFFFFFFFLL;
    if ((v41 & 0x2000000000000000) != 0)
      v44 = HIBYTE(v41) & 0xF;
    else
      v44 = v43;
    if (v44)
    {
      sub_1000126EC((uint64_t)v12, (uint64_t)v168, type metadata accessor for ShareRecord);
      v45 = 0;
      ++v37;
      goto LABEL_24;
    }
    v36 = sub_1000126B0((uint64_t)v12, type metadata accessor for ShareRecord);
    ++v37;
    if (v26 == v39)
      goto LABEL_22;
  }
  __break(1u);
LABEL_41:
  v78 = v36;
  swift_bridgeObjectRelease();
  sub_10037A2E8(v171);
  v79 = v6;
  v81 = sub_100CA8974(v80);
  swift_bridgeObjectRelease();
  v82 = CorrelationIdentifierMap.map(destinations:)(v81);
  v162 = v79;
  if (v79)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v159 + 8))(v12, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  v83 = v82;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v83 + 16) <= *(_QWORD *)(v78 + 16) >> 3)
  {
    v172[0] = v78;
    sub_10063BA38(v83);
    swift_bridgeObjectRelease();
    v84 = (void *)v172[0];
  }
  else
  {
    v84 = sub_100640178(v83, v78);
    swift_bridgeObjectRelease();
  }
  v85 = v162;
  v86 = CorrelationIdentifierMap.map(correlationIdentifiers:)(v84);
  v87 = v170;
  if (v85)
  {
    (*(void (**)(_BYTE *, uint64_t))(v159 + 8))(v12, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  sub_10037A60C(v86);
  v89 = v88;
  swift_bridgeObjectRelease();
  v12 = (_BYTE *)sub_100CA8058(v89);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10037A2E8(v87);
  v91 = sub_100CA8974(v90);
  swift_bridgeObjectRelease();
  v6 = 0;
  v92 = CorrelationIdentifierMap.map(destinations:)(v91);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10037A2E8(v26);
  v94 = sub_100CA8974(v93);
  swift_bridgeObjectRelease();
  v2 = CorrelationIdentifierMap.map(destinations:)(v94);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = v92;
  if (*(_QWORD *)(v2 + 16) <= *(_QWORD *)(v92 + 16) >> 3)
    goto LABEL_51;
  v95 = sub_100640178(v2, v92);
  swift_bridgeObjectRelease();
LABEL_52:
  v96 = v160;
  v97 = CorrelationIdentifierMap.map(correlationIdentifiers:)(v95);
  if (v6)
  {
    (*(void (**)(_BYTE *, uint64_t))(v159 + 8))(v96, v161);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  sub_10037A60C(v97);
  v99 = v98;
  swift_bridgeObjectRelease();
  v100 = a1;
  v101 = sub_100CA8058(v99);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v102 = sub_1006BA600((uint64_t)_swiftEmptyArrayStorage);
  v103 = (_QWORD *)v102;
  v164 = (_BYTE *)*((_QWORD *)v100 + 2);
  v162 = 0;
  if (!v164)
  {
    v131 = swift_bridgeObjectRelease();
LABEL_84:
    LODWORD(v170) = static os_log_type_t.default.getter(v131);
    if (qword_1010EA278 != -1)
LABEL_87:
      swift_once(&qword_1010EA278, sub_100B5DB4C);
    v166 = (_BYTE *)qword_1011B7D58;
    v132 = (uint64_t (*)(uint64_t))sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v168 = v132;
    v133 = swift_allocObject(v132, 72, 7);
    v171 = xmmword_100E22B00;
    *(_OWORD *)(v133 + 16) = xmmword_100E22B00;
    v134 = UUID.uuidString.getter(v133);
    v136 = v135;
    *(_QWORD *)(v133 + 56) = &type metadata for String;
    v137 = sub_10001AA00();
    *(_QWORD *)(v133 + 64) = v137;
    v167 = v137;
    *(_QWORD *)(v133 + 32) = v134;
    *(_QWORD *)(v133 + 40) = v136;
    os_log(_:dso:log:_:_:)(v170, &_mh_execute_header, v166, "Processing beacon: %@", 21, 2, v133);
    v138 = swift_bridgeObjectRelease();
    v139 = static os_log_type_t.default.getter(v138);
    v170 = qword_1011B7D58;
    v140 = swift_allocObject(v132, 72, 7);
    *(_OWORD *)(v140 + 16) = v171;
    swift_bridgeObjectRetain(v12);
    v141 = v169;
    v143 = Set.description.getter(v142, &type metadata for MessagingDestination, v169);
    v145 = v144;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v140 + 56) = &type metadata for String;
    *(_QWORD *)(v140 + 64) = v137;
    *(_QWORD *)(v140 + 32) = v143;
    *(_QWORD *)(v140 + 40) = v145;
    os_log(_:dso:log:_:_:)(v139, &_mh_execute_header, v170, "Possible shares  : %@", 21, 2, v140);
    v146 = swift_bridgeObjectRelease();
    v147 = static os_log_type_t.default.getter(v146);
    v148 = qword_1011B7D58;
    v149 = swift_allocObject(v168, 72, 7);
    *(_OWORD *)(v149 + 16) = v171;
    swift_bridgeObjectRetain(v101);
    v151 = Set.description.getter(v150, &type metadata for MessagingDestination, v141);
    v153 = v152;
    swift_bridgeObjectRelease();
    v154 = v167;
    *(_QWORD *)(v149 + 56) = &type metadata for String;
    *(_QWORD *)(v149 + 64) = v154;
    *(_QWORD *)(v149 + 32) = v151;
    *(_QWORD *)(v149 + 40) = v153;
    os_log(_:dso:log:_:_:)(v147, &_mh_execute_header, v148, "Shares to remove: %@", 20, 2, v149);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v159 + 8))(v160, v161);
    return v12;
  }
  v163 = (char *)v100 + 32;
  *(_QWORD *)&v171 = v12 + 56;
  swift_bridgeObjectRetain(v102);
  v168 = v100;
  swift_bridgeObjectRetain(v100);
  v104 = 0;
  v105 = v103;
  while (1)
  {
    v108 = &v163[40 * v104];
    v109 = v108[2];
    v107 = (_BYTE *)v108[3];
    v106 = v108[4];
    if (!*((_QWORD *)v12 + 2))
    {
      swift_bridgeObjectRetain(v108[2]);
      sub_10001BD08((uint64_t)v107, v106);
      swift_bridgeObjectRetain(v109);
      sub_10001BD08((uint64_t)v107, v106);
      swift_bridgeObjectRetain(v105);
      sub_10001EF3C((uint64_t)v107, v106);
      swift_bridgeObjectRelease();
      goto LABEL_57;
    }
    v165 = v104;
    v170 = (uint64_t)v105;
    v110 = *(unsigned __int8 *)v108;
    v111 = v108[1];
    Hasher.init(_seed:)(v172);
    Hasher._combine(_:)(v110);
    swift_bridgeObjectRetain(v109);
    sub_10001BD08((uint64_t)v107, v106);
    swift_bridgeObjectRetain(v109);
    v166 = v107;
    v167 = v106;
    sub_10001BD08((uint64_t)v107, v106);
    swift_bridgeObjectRetain(v170);
    swift_bridgeObjectRetain(v109);
    String.hash(into:)(v172, v111, v109);
    swift_bridgeObjectRelease();
    v112 = Hasher._finalize()();
    v113 = -1 << v12[32];
    v114 = v112 & ~v113;
    if (((*(_QWORD *)(v171 + ((v114 >> 3) & 0xFFFFFFFFFFFFF8)) >> v114) & 1) != 0)
      break;
LABEL_56:
    v107 = v166;
    v106 = v167;
    sub_10001EF3C((uint64_t)v166, v167);
    swift_bridgeObjectRelease();
    v105 = (_QWORD *)v170;
    v104 = v165;
LABEL_57:
    swift_bridgeObjectRelease();
    ++v104;
    sub_10001EF3C((uint64_t)v107, v106);
    swift_bridgeObjectRelease();
    if ((_BYTE *)v104 == v164)
    {
      swift_bridgeObjectRelease();
      v131 = swift_bridgeObjectRelease_n(v168, 2);
      goto LABEL_84;
    }
  }
  v115 = ~v113;
  v116 = *((_QWORD *)v12 + 6);
  while (1)
  {
    v117 = (unsigned __int8 *)(v116 + 24 * v114);
    if (*v117 == (_DWORD)v110)
    {
      v118 = *((_QWORD *)v117 + 1);
      v119 = *((_QWORD *)v117 + 2);
      v120 = v118 == v111 && v119 == v109;
      if (v120 || (_stringCompareWithSmolCheck(_:_:expecting:)(v118, v119, v111, v109, 0) & 1) != 0)
        break;
    }
    v114 = (v114 + 1) & v115;
    if (((*(_QWORD *)(v171 + ((v114 >> 3) & 0xFFFFFFFFFFFFF8)) >> v114) & 1) == 0)
      goto LABEL_56;
  }
  v106 = v167;
  if (v167 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    v105 = (_QWORD *)v170;
    v104 = v165;
    v107 = v166;
    goto LABEL_57;
  }
  v107 = v166;
  sub_10001BBBC((uint64_t)v166, v167);
  sub_10001BBBC((uint64_t)v107, v106);
  v121 = v170;
  LODWORD(v157) = swift_isUniquelyReferenced_nonNull_native(v170);
  v172[0] = v121;
  v123 = sub_100519120(v110, v111, v109);
  v124 = *(_QWORD *)(v121 + 16);
  v125 = (v122 & 1) == 0;
  v126 = v124 + v125;
  if (__OFADD__(v124, v125))
  {
    __break(1u);
    goto LABEL_87;
  }
  if (*(_QWORD *)(v121 + 24) >= v126)
  {
    if ((v157 & 1) != 0)
    {
      v105 = (_QWORD *)v172[0];
      if ((v122 & 1) == 0)
        goto LABEL_80;
    }
    else
    {
      v156 = v122;
      v157 = v123;
      sub_100A9D03C();
      v123 = v157;
      v105 = (_QWORD *)v172[0];
      if ((v156 & 1) == 0)
        goto LABEL_80;
    }
    goto LABEL_78;
  }
  v156 = v122;
  sub_100A8B3E0(v126, v157);
  v127 = sub_100519120(v110, v111, v109);
  if ((v156 & 1) == (v128 & 1))
  {
    v123 = v127;
    v105 = (_QWORD *)v172[0];
    if ((v156 & 1) == 0)
    {
LABEL_80:
      sub_100A988D0(v123, v110, v111, v109, (uint64_t)v107, v106, v105);
      swift_bridgeObjectRetain(v109);
      goto LABEL_81;
    }
LABEL_78:
    v129 = v105[7] + 16 * v123;
    sub_10001BC14(*(_QWORD *)v129, *(_QWORD *)(v129 + 8));
    v130 = v167;
    *(_QWORD *)v129 = v107;
    *(_QWORD *)(v129 + 8) = v130;
    v106 = v167;
LABEL_81:
    v104 = v165;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001EF3C((uint64_t)v107, v106);
    sub_10001EF3C((uint64_t)v107, v106);
    goto LABEL_57;
  }
  result = (_BYTE *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MessagingDestination);
  __break(1u);
  return result;
}

uint64_t sub_1003960E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_100396100, 0, 0);
}

uint64_t sub_100396100()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[4];
  v2 = v0[5];
  v3 = v0[3];
  v4 = swift_allocObject(&unk_101073EC8, 32, 7);
  v0[6] = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v2;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v2);
  sub_10037A2E8(v3);
  v6 = v5;
  swift_bridgeObjectRelease();
  v7 = swift_allocObject(&unk_101073EF0, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_1003D76A4;
  *(_QWORD *)(v7 + 24) = v4;
  v8 = async function pointer to CorrelationIdentifierMap.init(serviceName:destinations:disambiguate:)[1];
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc(v8);
  v0[7] = v9;
  *v9 = v0;
  v9[1] = sub_100396210;
  return CorrelationIdentifierMap.init(serviceName:destinations:disambiguate:)(v0[2], 0xD00000000000001BLL, 0x8000000100EC7AF0, v6, sub_1003D9994, v7);
}

uint64_t sub_100396210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003962A8;
  else
    v3 = sub_100396274;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100396274()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003962A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003962DC(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  char v14;

  v9 = a6;
  v11 = a4;
  if ((sub_100A07F60(a4, a5, a6, a7) & 1) == 0)
  {
    v14 = sub_100A07F60(v11, a5, v9, a8);
    if ((v14 & 1) != 0)
      v11 = v11;
    else
      v11 = a1;
    if ((v14 & 1) == 0)
      v9 = a3;
  }
  swift_bridgeObjectRetain(v9);
  return v11;
}

void sub_100396378(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t i;
  BOOL v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  _QWORD *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  _QWORD *v47;

  v3 = v2;
  v44 = a1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v3 + 184);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  v11 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v11 & 1) == 0)
    goto LABEL_28;
  v12 = *(_QWORD *)(a2 + 56);
  v39 = a2 + 56;
  v13 = 1 << *(_BYTE *)(a2 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v40 = (unint64_t)(v13 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v16 = 0;
  v42 = xmmword_100E22B10;
  v41 = &type metadata for () + 1;
  v43 = a2;
  if (!v15)
    goto LABEL_6;
LABEL_5:
  v45 = (v15 - 1) & v15;
  v46 = v16;
  for (i = __clz(__rbit64(v15)) | (v16 << 6); ; i = __clz(__rbit64(v20)) + (v19 << 6))
  {
    v22 = *(_QWORD *)(a2 + 48) + 24 * i;
    v23 = *(_QWORD *)(v22 + 8);
    v24 = *(_QWORD *)(v22 + 16);
    v25 = *(_BYTE *)v22;
    type metadata accessor for OwnedBeaconRecord(0);
    swift_bridgeObjectRetain(v24);
    v26 = sub_10088A6EC();
    swift_bridgeObjectRetain(v24);
    v47 = sub_1003BAF88((uint64_t)v26, v25, v23, v24);
    swift_bridgeObjectRelease();
    v27 = swift_bridgeObjectRelease();
    v28 = static os_log_type_t.default.getter(v27);
    v29 = v3;
    if (qword_1010EA278 != -1)
      swift_once(&qword_1010EA278, sub_100B5DB4C);
    v30 = qword_1011B7D58;
    v31 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v32 = swift_allocObject(v31, 112, 7);
    *(_OWORD *)(v32 + 16) = v42;
    v33 = UUID.uuidString.getter(v32);
    v35 = v34;
    *(_QWORD *)(v32 + 56) = &type metadata for String;
    v36 = sub_10001AA00();
    *(_QWORD *)(v32 + 32) = v33;
    *(_QWORD *)(v32 + 40) = v35;
    *(_QWORD *)(v32 + 96) = &type metadata for String;
    *(_QWORD *)(v32 + 104) = v36;
    *(_QWORD *)(v32 + 64) = v36;
    *(_QWORD *)(v32 + 72) = v23;
    *(_QWORD *)(v32 + 80) = v24;
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v30, "Unshare %@ to %@", 16, 2, v32);
    swift_bridgeObjectRelease();
    v37 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v37);
    *(&v38 - 2) = (uint64_t)v47;
    *(&v38 - 1) = v29;
    static Transaction.named<A>(_:with:)("BeaconSharingManager.family_unshare", 35, 2, sub_1003D75C8, &v38 - 4);
    swift_bridgeObjectRelease();
    a2 = v43;
    v3 = v29;
    v15 = v45;
    v16 = v46;
    if (v45)
      goto LABEL_5;
LABEL_6:
    v18 = __OFADD__(v16, 1);
    v19 = v16 + 1;
    if (v18)
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v40)
      goto LABEL_25;
    v20 = *(_QWORD *)(v39 + 8 * v19);
    if (!v20)
      break;
LABEL_16:
    v45 = (v20 - 1) & v20;
    v46 = v19;
  }
  v21 = v19 + 1;
  if (v19 + 1 >= v40)
    goto LABEL_25;
  v20 = *(_QWORD *)(v39 + 8 * v21);
  if (v20)
    goto LABEL_15;
  v21 = v19 + 2;
  if (v19 + 2 >= v40)
    goto LABEL_25;
  v20 = *(_QWORD *)(v39 + 8 * v21);
  if (v20)
    goto LABEL_15;
  v21 = v19 + 3;
  if (v19 + 3 >= v40)
  {
LABEL_25:
    swift_release();
    return;
  }
  v20 = *(_QWORD *)(v39 + 8 * v21);
  if (v20)
  {
LABEL_15:
    v19 = v21;
    goto LABEL_16;
  }
  while (1)
  {
    v19 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v19 >= v40)
      goto LABEL_25;
    v20 = *(_QWORD *)(v39 + 8 * v19);
    ++v21;
    if (v20)
      goto LABEL_16;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t sub_100396740(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v4 = result;
    v5 = *(_QWORD *)(type metadata accessor for ShareRecord(0) - 8);
    v6 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    swift_bridgeObjectRetain(a2);
    do
    {
      swift_retain();
      sub_10037BF50(v6, (uint64_t)sub_1003D75E0, v4);
      swift_release();
      v6 += v7;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1003967F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  Transaction.capture()();
  if (a1)
  {
    v3 = swift_errorRetain(a1);
    v4 = static os_log_type_t.error.getter(v3);
    if (qword_1010EA278 != -1)
      swift_once(&qword_1010EA278, sub_100B5DB4C);
    v5 = qword_1011B7D58;
    v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v7 = swift_allocObject(v6, 72, 7);
    *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
    v14 = a1;
    swift_errorRetain(a1);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v9 = String.init<A>(describing:)(&v14, v8);
    v11 = v10;
    *(_QWORD *)(v7 + 56) = &type metadata for String;
    *(_QWORD *)(v7 + 64) = sub_10001AA00();
    *(_QWORD *)(v7 + 32) = v9;
    *(_QWORD *)(v7 + 40) = v11;
    os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Error unsharing: %@", 19, 2, v7);
    swift_bridgeObjectRelease();
    return swift_errorRelease(a1);
  }
  else
  {
    v13 = static os_log_type_t.default.getter(v2);
    if (qword_1010EA278 != -1)
      swift_once(&qword_1010EA278, sub_100B5DB4C);
    return os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_1011B7D58, "Unshare successful", 18, 2, _swiftEmptyArrayStorage);
  }
}

void sub_100396988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __n128 v31;
  int64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  void *v44;
  int *v45;
  char *v46;
  void *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v58;
  int64_t v59;
  unsigned __int8 *v60;
  int v61;
  void *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  id v94;
  char *v95;
  __n128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  int64_t v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  void *v106;
  unint64_t v107;
  unint64_t v108;
  void *v109;
  char *v110;
  uint64_t v111;
  int v112;
  unint64_t v113;
  int64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;

  v115 = a3;
  v111 = a2;
  v109 = (void *)a1;
  v105 = type metadata accessor for ShareInstruction(0);
  __chkstk_darwin(v105);
  v104 = (char *)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SharingRampState(0);
  __chkstk_darwin(v5);
  v110 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v117 = *(_QWORD *)(v7 - 8);
  v118 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (id *)((char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v106 = v3;
  v14 = (void *)v3[23];
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0)
    goto LABEL_58;
  v10 = (uint64_t)objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
  v16 = objc_msgSend((id)v10, "aa_primaryAppleAccount");

  v94 = v16;
  if (!v16)
  {
    v10 = static os_log_type_t.error.getter(v17);
    if (qword_1010EA270 != -1)
      goto LABEL_59;
    goto LABEL_7;
  }
  v18 = sub_10001A9A8(&qword_1010EBBD8);
  unsafeFromAsyncTask<A>(_:)(&v121, &unk_1010FA370, 0, v18);
  v98 = v121;
  if (!v121)
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B6748);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "No BeaconSharingService available!", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

LABEL_55:
    return;
  }
  v19 = objc_msgSend(v94, "aa_altDSID");
  if (v19)
  {
    v10 = (uint64_t)v19;
    v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v103 = v20;

  }
  else
  {
    v102 = 0;
    v103 = 0xE000000000000000;
  }
  v26 = v9;
  v27 = *(_QWORD *)(v111 + 56);
  v99 = v111 + 56;
  v28 = 1 << *(_BYTE *)(v111 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & v27;
  v100 = (unint64_t)(v28 + 63) >> 6;
  v31 = swift_bridgeObjectRetain(v111);
  v32 = 0;
  v116 = 0;
  v107 = 0x8000000100ED35D0;
  v108 = 0x8000000100ED35A0;
  v31.n128_u64[0] = 141558275;
  v96 = v31;
  v95 = (char *)&type metadata for Any + 8;
  v97 = xmmword_100E22B00;
  v101 = &type metadata for () + 1;
  while (1)
  {
    if (v30)
    {
      v55 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      v56 = v55 | (v32 << 6);
      goto LABEL_32;
    }
    if (__OFADD__(v32++, 1))
    {
      __break(1u);
      goto LABEL_57;
    }
    if (v32 >= v100)
      goto LABEL_54;
    v58 = *(_QWORD *)(v99 + 8 * v32);
    if (!v58)
      break;
LABEL_31:
    v30 = (v58 - 1) & v58;
    v56 = __clz(__rbit64(v58)) + (v32 << 6);
LABEL_32:
    v60 = (unsigned __int8 *)(*(_QWORD *)(v111 + 48) + 24 * v56);
    v61 = *v60;
    v63 = *((_QWORD *)v60 + 1);
    v62 = (void *)*((_QWORD *)v60 + 2);
    swift_bridgeObjectRetain(v62);
    v64 = v110;
    sub_10037F308(v110);
    v65 = sub_10001A9A8(&qword_1010F9FC8);
    v66 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 48))(v64, 2, v65);
    v67 = sub_1000126B0((uint64_t)v64, type metadata accessor for SharingRampState);
    if (v66 != 2)
      goto LABEL_43;
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v68 = type metadata accessor for Logger(0);
    v69 = sub_10001A9E8(v68, (uint64_t)qword_1011B6748);
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.default.getter(v70);
    if (os_log_type_enabled(v70, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v72 = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Beacon sharing is allowed to use item sharing for self beacons.", v72, 2u);
      swift_slowDealloc(v72, -1, -1);
    }

    v73 = swift_allocObject(&unk_1010737C0, 48, 7);
    *(_QWORD *)(v73 + 16) = v98;
    *(_BYTE *)(v73 + 24) = v61;
    *(_QWORD *)(v73 + 32) = v63;
    *(_QWORD *)(v73 + 40) = v62;
    swift_bridgeObjectRetain(v62);
    swift_retain();
    unsafeFromAsyncTask<A>(_:)(&v121, &unk_1010FA380, v73, &type metadata for Bool);
    swift_release();
    LODWORD(v73) = v121;
    swift_bridgeObjectRetain(v62);
    if ((_DWORD)v73 == 1)
    {
      swift_bridgeObjectRetain(v62);
      v76 = Logger.logObject.getter(v75);
      v77 = static os_log_type_t.default.getter(v76);
      if (os_log_type_enabled(v76, v77))
      {
        v78 = swift_slowAlloc(22, -1);
        v79 = swift_slowAlloc(32, -1);
        v121 = v79;
        *(_DWORD *)v78 = v96.n128_u32[0];
        *(_QWORD *)(v78 + 4) = 1752392040;
        *(_WORD *)(v78 + 12) = 2081;
        swift_bridgeObjectRetain(v62);
        *(_QWORD *)(v78 + 14) = sub_100016940(v63, (unint64_t)v62, &v121);
        swift_bridgeObjectRelease_n(v62, 3);
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "Destination has devices requiring legacy shares to %{private,mask.hash}s.", (uint8_t *)v78, 0x16u);
        swift_arrayDestroy(v79, 1, v95);
        swift_slowDealloc(v79, -1, -1);
        swift_slowDealloc(v78, -1, -1);

      }
      else
      {

        v67 = swift_bridgeObjectRelease_n(v62, 2);
      }
LABEL_43:
      v85 = *(_QWORD *)(v115 + 16);
      v113 = v30;
      v114 = v32;
      v112 = v61;
      if (v85)
      {
        swift_bridgeObjectRetain(v62);
        v86 = sub_100519120(v61, v63, (uint64_t)v62);
        if ((v87 & 1) != 0)
        {
          v33 = (uint64_t *)(*(_QWORD *)(v115 + 56) + 16 * v86);
          v34 = *v33;
          v35 = v33[1];
          sub_10001BBBC(*v33, v35);
          swift_bridgeObjectRelease();
          v36 = type metadata accessor for OwnedBeaconRecord(0);
          v37 = UUID.data.getter(v36);
          v39 = v38;
          v121 = v37;
          v122 = v38;
          sub_10001BBBC(v34, v35);
          sub_10001BBBC(v37, v39);
          sub_10078E27C(v34, v35);
          sub_10001BC14(v34, v35);
          sub_10001BC14(v37, v39);
          v40 = v121;
          v41 = v122;
          v119 = v121;
          v120 = v122;
          v42 = sub_100035530();
          DataProtocol.stableUUID.getter(&type metadata for Data, v42);
          sub_10001BC14(v34, v35);
          sub_10001BC14(v40, v41);
          goto LABEL_18;
        }
        v67 = swift_bridgeObjectRelease();
      }
      v88 = static os_log_type_t.error.getter(v67);
      if (qword_1010EA278 != -1)
        swift_once(&qword_1010EA278, sub_100B5DB4C);
      v89 = qword_1011B7D58;
      v90 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v91 = swift_allocObject(v90, 72, 7);
      *(_OWORD *)(v91 + 16) = v97;
      *(_QWORD *)(v91 + 56) = &type metadata for String;
      *(_QWORD *)(v91 + 64) = sub_10001AA00();
      *(_QWORD *)(v91 + 32) = v63;
      *(_QWORD *)(v91 + 40) = v62;
      *(_QWORD *)&v92 = swift_bridgeObjectRetain(v62).n128_u64[0];
      os_log(_:dso:log:_:_:)(v88, &_mh_execute_header, v89, "Unable to obtain stable shareIdentifier for %@", 46, 2, v91, v92);
      v93 = swift_bridgeObjectRelease();
      UUID.init()(v93);
LABEL_18:
      v43 = v26;
      v44 = (void *)v63;
      v46 = v104;
      v45 = (int *)v105;
      v47 = v109;
      sub_10005972C((uint64_t)v109, (uint64_t)&v104[*(int *)(v105 + 24)], type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(char *, char *, uint64_t))(v117 + 16))(&v46[v45[8]], v43, v118);
      v48 = &v46[v45[9]];
      v49 = type metadata accessor for Date(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 1, 1, v49);
      *v46 = 1;
      v50 = v103;
      *((_QWORD *)v46 + 1) = v102;
      *((_QWORD *)v46 + 2) = v50;
      v51 = &v46[v45[7]];
      v52 = v112;
      *v51 = v112;
      *((_QWORD *)v51 + 1) = v44;
      *((_QWORD *)v51 + 2) = v62;
      v53 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v53);
      v10 = (uint64_t)(&v94 - 8);
      *(&v94 - 6) = v106;
      *(&v94 - 5) = v46;
      *(&v94 - 4) = v47;
      *((_BYTE *)&v94 - 24) = v52;
      *(&v94 - 2) = v44;
      *(&v94 - 1) = v62;
      swift_bridgeObjectRetain(v62);
      swift_bridgeObjectRetain(v50);
      v54 = v116;
      static Transaction.named<A>(_:with:)("BeaconManagerService.family_share", 33, 2, sub_1003D6424, &v94 - 8);
      v116 = v54;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v117 + 8))(v43, v118);
      sub_1000126B0((uint64_t)v46, type metadata accessor for ShareInstruction);
      v26 = v43;
      v30 = v113;
      v32 = v114;
    }
    else
    {
      v80 = Logger.logObject.getter(v74);
      v81 = static os_log_type_t.default.getter(v80);
      v10 = v81;
      if (os_log_type_enabled(v80, v81))
      {
        v82 = swift_slowAlloc(22, -1);
        v83 = v63;
        v84 = swift_slowAlloc(32, -1);
        v121 = v84;
        *(_DWORD *)v82 = v96.n128_u32[0];
        *(_QWORD *)(v82 + 4) = 1752392040;
        *(_WORD *)(v82 + 12) = 2081;
        swift_bridgeObjectRetain(v62);
        *(_QWORD *)(v82 + 14) = sub_100016940(v83, (unint64_t)v62, &v121);
        swift_bridgeObjectRelease_n(v62, 3);
        _os_log_impl((void *)&_mh_execute_header, v80, (os_log_type_t)v10, "Skipping sending .automatic_legacy share to %{private,mask.hash}s since they have no devices not capable of item sharing", (uint8_t *)v82, 0x16u);
        swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v84, -1, -1);
        swift_slowDealloc(v82, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v62, 2);
      }
    }
  }
  v59 = v32 + 1;
  if (v32 + 1 >= v100)
    goto LABEL_54;
  v58 = *(_QWORD *)(v99 + 8 * v59);
  if (v58)
    goto LABEL_30;
  v59 = v32 + 2;
  if (v32 + 2 >= v100)
    goto LABEL_54;
  v58 = *(_QWORD *)(v99 + 8 * v59);
  if (v58)
    goto LABEL_30;
  v59 = v32 + 3;
  if (v32 + 3 >= v100)
  {
LABEL_54:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  v58 = *(_QWORD *)(v99 + 8 * v59);
  if (v58)
  {
LABEL_30:
    v32 = v59;
    goto LABEL_31;
  }
  while (1)
  {
    v32 = v59 + 1;
    if (__OFADD__(v59, 1))
      break;
    if (v32 >= v100)
      goto LABEL_54;
    v58 = *(_QWORD *)(v99 + 8 * v32);
    ++v59;
    if (v58)
      goto LABEL_31;
  }
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  swift_once(&qword_1010EA270, sub_100B5DAF0);
LABEL_7:
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, qword_1011B7D50, "Could not obtain aa_primaryAppleAccount!", 40, 2, _swiftEmptyArrayStorage, v94);
}

uint64_t sub_100397588(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = a1;
  return swift_task_switch(sub_1003975A0, 0, 0);
}

uint64_t sub_1003975A0()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBD0 + dword_1010EBBD0);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBD4);
    *(_QWORD *)(v0 + 128) = v2;
    *v2 = v0;
    v2[1] = sub_10039768C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10039768C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = *(_QWORD **)(*(_QWORD *)v1 + 120);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 128));
  *v3 = a1;
  return swift_task_switch(sub_1003976E8, 0, 0);
}

uint64_t sub_1003976E8()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100397718(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v9;

  *(_QWORD *)(v5 + 16) = a1;
  v9 = (_QWORD *)swift_task_alloc(dword_1010EE2AC);
  *(_QWORD *)(v5 + 24) = v9;
  *v9 = v5;
  v9[1] = sub_1002DB818;
  return sub_1000C0058(a3, a4, a5);
}

uint64_t sub_100397788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v55;
  uint64_t v56;
  uint64_t *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v67 = a6;
  v66 = a4;
  v61 = a2;
  v62 = a3;
  v56 = sub_10001A9A8((uint64_t *)&unk_101108180);
  __chkstk_darwin(v56);
  v57 = (uint64_t *)((char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v60 = type metadata accessor for OwnedBeaconRecord(0);
  v11 = *(_QWORD *)(v60 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v60);
  v14 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v55 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v55 - v18;
  sub_10005972C(v66, (uint64_t)&v55 - v18, type metadata accessor for OwnedBeaconRecord);
  v64 = v17;
  sub_10005972C((uint64_t)v19, (uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
  v20 = *(unsigned __int8 *)(v11 + 80);
  v21 = (v20 + 24) & ~v20;
  v22 = (v12 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_1010737E8, v22 + 24, v20 | 7);
  *(_QWORD *)(v23 + 16) = a1;
  sub_1000126EC((uint64_t)v19, v23 + v21, type metadata accessor for OwnedBeaconRecord);
  v63 = v23;
  v24 = v23 + v22;
  v58 = a5;
  *(_BYTE *)v24 = a5;
  *(_QWORD *)(v24 + 8) = v67;
  *(_QWORD *)(v24 + 16) = a7;
  v65 = a1;
  swift_retain_n(a1, 2);
  v66 = a7;
  swift_bridgeObjectRetain_n(a7, 2);
  v59 = static os_log_type_t.default.getter(v25);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v26 = qword_1011B7D30;
  v27 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v28 = swift_allocObject(v27, 112, 7);
  v55 = xmmword_100E22B10;
  *(_OWORD *)(v28 + 16) = xmmword_100E22B10;
  v29 = type metadata accessor for ShareInstruction(0);
  v30 = v62;
  sub_10005972C(v62 + *(int *)(v29 + 24), (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
  v31 = String.init<A>(describing:)(v14, v60);
  v33 = v32;
  *(_QWORD *)(v28 + 56) = &type metadata for String;
  v34 = sub_10001AA00();
  *(_QWORD *)(v28 + 64) = v34;
  *(_QWORD *)(v28 + 32) = v31;
  *(_QWORD *)(v28 + 40) = v33;
  v35 = v30 + *(int *)(v29 + 28);
  v37 = *(_QWORD *)(v35 + 8);
  v36 = *(_QWORD *)(v35 + 16);
  *(_QWORD *)(v28 + 96) = &type metadata for String;
  *(_QWORD *)(v28 + 104) = v34;
  *(_QWORD *)(v28 + 72) = v37;
  *(_QWORD *)(v28 + 80) = v36;
  *(_QWORD *)&v38 = swift_bridgeObjectRetain(v36).n128_u64[0];
  os_log(_:dso:log:_:_:)(v59, &_mh_execute_header, v26, "Share beacon: %@ to %@", 22, 2, v28, v38);
  swift_bridgeObjectRelease();
  v39 = v61;
  v40 = sub_10038CA2C(v30);
  if (v40)
  {
    v41 = v40;
    v42 = static os_log_type_t.error.getter(v40);
    v43 = qword_1011B7D30;
    v44 = swift_allocObject(v27, 112, 7);
    *(_OWORD *)(v44 + 16) = v55;
    *(_QWORD *)(v44 + 56) = &type metadata for String;
    *(_QWORD *)(v44 + 64) = v34;
    *(_QWORD *)(v44 + 32) = v37;
    *(_QWORD *)(v44 + 40) = v36;
    v68 = v41;
    swift_bridgeObjectRetain(v36);
    swift_errorRetain(v41);
    v45 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v46 = String.init<A>(describing:)(&v68, v45);
    *(_QWORD *)(v44 + 96) = &type metadata for String;
    *(_QWORD *)(v44 + 104) = v34;
    *(_QWORD *)(v44 + 72) = v46;
    *(_QWORD *)(v44 + 80) = v47;
    os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v43, "Cannot share to [%@]: %@", 24, 2, v44);
    swift_bridgeObjectRelease();
    v48 = v56;
    v49 = (uint64_t)v57;
    *v57 = v41;
    swift_storeEnumTagMultiPayload(v49, v48, 1);
    swift_errorRetain(v41);
    v50 = (uint64_t)v64;
    sub_100397BC8(v49, v65, (uint64_t)v64, v58, v67, v66);
    swift_errorRelease(v41);
    sub_100004048(v49, (uint64_t *)&unk_101108180);
    swift_release();
  }
  else
  {
    v51 = v39;
    v52 = v30;
    v53 = v63;
    swift_retain();
    sub_1003C2D40(v52, v51, (uint64_t)sub_1003D67A4, v53);
    swift_release();
    swift_release();
    v50 = (uint64_t)v64;
  }
  swift_release();
  sub_1000126B0(v50, type metadata accessor for OwnedBeaconRecord);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100397BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;

  v9 = sub_10001A9A8((uint64_t *)&unk_101108180);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10000F9B8(a1, (uint64_t)v11, (uint64_t *)&unk_101108180);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v9);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v13 = *v11;
    v14 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA278 != -1)
      swift_once(&qword_1010EA278, sub_100B5DB4C);
    v15 = qword_1011B7D58;
    v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v17 = swift_allocObject(v16, 152, 7);
    *(_OWORD *)(v17 + 16) = xmmword_100E221E0;
    v18 = type metadata accessor for OwnedBeaconRecord(0);
    v19 = UUID.uuidString.getter(v18);
    v21 = v20;
    *(_QWORD *)(v17 + 56) = &type metadata for String;
    v22 = sub_10001AA00();
    *(_QWORD *)(v17 + 32) = v19;
    *(_QWORD *)(v17 + 40) = v21;
    *(_QWORD *)(v17 + 96) = &type metadata for String;
    *(_QWORD *)(v17 + 104) = v22;
    *(_QWORD *)(v17 + 64) = v22;
    *(_QWORD *)(v17 + 72) = a5;
    *(_QWORD *)(v17 + 80) = a6;
    v38 = v13;
    swift_bridgeObjectRetain(a6);
    swift_errorRetain(v13);
    v23 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v24 = String.init<A>(describing:)(&v38, v23);
    *(_QWORD *)(v17 + 136) = &type metadata for String;
    *(_QWORD *)(v17 + 144) = v22;
    *(_QWORD *)(v17 + 112) = v24;
    *(_QWORD *)(v17 + 120) = v25;
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "Failed to share %@ shared to %@: %@", 35, 2, v17);
    swift_bridgeObjectRelease();
    return swift_errorRelease(v13);
  }
  else
  {
    v27 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_1010EA278 != -1)
      swift_once(&qword_1010EA278, sub_100B5DB4C);
    v28 = qword_1011B7D58;
    v29 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v30 = swift_allocObject(v29, 112, 7);
    *(_OWORD *)(v30 + 16) = xmmword_100E22B10;
    v31 = type metadata accessor for OwnedBeaconRecord(0);
    v32 = UUID.uuidString.getter(v31);
    v34 = v33;
    *(_QWORD *)(v30 + 56) = &type metadata for String;
    v35 = sub_10001AA00();
    *(_QWORD *)(v30 + 32) = v32;
    *(_QWORD *)(v30 + 40) = v34;
    *(_QWORD *)(v30 + 96) = &type metadata for String;
    *(_QWORD *)(v30 + 104) = v35;
    *(_QWORD *)(v30 + 64) = v35;
    *(_QWORD *)(v30 + 72) = a5;
    *(_QWORD *)(v30 + 80) = a6;
    *(_QWORD *)&v36 = swift_bridgeObjectRetain(a6).n128_u64[0];
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "Successfully shared %@ with %@", 30, 2, v30, v36);
    swift_bridgeObjectRelease();
    return sub_100004048((uint64_t)v11, (uint64_t *)&unk_101108180);
  }
}

unint64_t sub_100397E7C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void **a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  void **v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void **aBlock;
  uint64_t v120;
  uint64_t (*v121)(uint64_t);
  void *v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD v126[2];

  v117 = type metadata accessor for DispatchWorkItemFlags(0);
  v115 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v113 = (char *)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for DispatchQoS(0);
  v116 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v114 = (char *)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v111 = *(_QWORD *)(v11 - 8);
  v112 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  v18 = (_QWORD *)(a2 + 192);
  swift_beginAccess(a2 + 192, &aBlock, 32, 0);
  v19 = *(_QWORD *)(a2 + 192);
  if (*(_QWORD *)(v19 + 16))
  {
    v20 = sub_100003FB0(a3);
    if ((v21 & 1) != 0)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
      v23 = swift_endAccess(&aBlock);
      if (v22 >> 62)
      {
        if (v22 >> 62 == 1)
        {
          v24 = swift_errorRetain(v22 & 0x3FFFFFFFFFFFFFFFLL);
          v25 = static os_log_type_t.error.getter(v24);
          if (qword_1010EA250 != -1)
            swift_once(&qword_1010EA250, sub_100B5D964);
          os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, qword_1011B7D30, "ERROR: Unexpected state: error", 30, 2, _swiftEmptyArrayStorage);
          return sub_10010F91C(v22);
        }
        else
        {
          v57 = static os_log_type_t.error.getter(v23);
          if (qword_1010EA250 != -1)
            swift_once(&qword_1010EA250, sub_100B5D964);
          return os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, qword_1011B7D30, "ERROR: Already in sent state!", 29, 2, _swiftEmptyArrayStorage);
        }
      }
      v110 = v22;
      if ((a4 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, v14);
        swift_beginAccess(a2 + 192, &aBlock, 33, 0);
        swift_retain_n(v22, 2);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v18);
        v126[0] = *v18;
        *v18 = 0x8000000000000000;
        sub_10010BE78(0x8000000000000000, (uint64_t)v17, isUniquelyReferenced_nonNull_native);
        *v18 = v126[0];
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
        v36 = swift_endAccess(&aBlock);
        v37 = static os_log_type_t.default.getter(v36);
        if (qword_1010EA250 != -1)
          swift_once(&qword_1010EA250, sub_100B5D964);
        v38 = qword_1011B7D30;
        v39 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v40 = swift_allocObject(v39, 72, 7);
        *(_OWORD *)(v40 + 16) = xmmword_100E22B00;
        v41 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v42 = dispatch thunk of CustomStringConvertible.description.getter(v14, v41);
        v44 = v43;
        *(_QWORD *)(v40 + 56) = &type metadata for String;
        *(_QWORD *)(v40 + 64) = sub_10001AA00();
        *(_QWORD *)(v40 + 32) = v42;
        *(_QWORD *)(v40 + 40) = v44;
        os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v38, "Message %@ sent successfully.", 29, 2, v40);
        swift_bridgeObjectRelease();
        sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
        v45 = v111;
        v46 = v112;
        (*(void (**)(char *, _QWORD, uint64_t))(v111 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v112);
        v47 = (void *)static OS_dispatch_queue.global(qos:)(v13);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v46);
        v48 = v110;
        v123 = sub_1003D18E8;
        v124 = v110;
        aBlock = _NSConcreteStackBlock;
        v120 = 1107296256;
        v121 = sub_100016FB8;
        v122 = &unk_1010730D0;
        v49 = _Block_copy(&aBlock);
        v50 = swift_retain();
        v51 = v114;
        static DispatchQoS.unspecified.getter(v50);
        v126[0] = _swiftEmptyArrayStorage;
        v52 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v53 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v54 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v55 = v113;
        v56 = v117;
        dispatch thunk of SetAlgebra.init<A>(_:)(v126, v53, v54, v117, v52);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v51, v55, v49);
        _Block_release(v49);

        sub_10010F91C(v48);
      }
      else
      {
        if (!a5)
        {
          v79 = swift_retain_n(v22, 2);
          v80 = static os_log_type_t.error.getter(v79);
          if (qword_1010EA250 != -1)
            swift_once(&qword_1010EA250, sub_100B5D964);
          v109 = qword_1011B7D30;
          v81 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
          v82 = swift_allocObject(v81, 72, 7);
          *(_OWORD *)(v82 + 16) = xmmword_100E22B00;
          v83 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v84 = dispatch thunk of CustomStringConvertible.description.getter(v14, v83);
          v86 = v85;
          *(_QWORD *)(v82 + 56) = &type metadata for String;
          *(_QWORD *)(v82 + 64) = sub_10001AA00();
          *(_QWORD *)(v82 + 32) = v84;
          *(_QWORD *)(v82 + 40) = v86;
          os_log(_:dso:log:_:_:)(v80, &_mh_execute_header, v109, "Unsuccessful didSendCallback without an error for identifier: %@", 64, 2, v82);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, v14);
          type metadata accessor for SPOwnerSessionError(0);
          v88 = v87;
          aBlock = 0;
          v89 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
          v90 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
          _BridgedStoredNSError.init(_:userInfo:)(v126, &aBlock, v89, v88, v90);
          v91 = v126[0] | 0x4000000000000000;
          swift_beginAccess(v18, &aBlock, 33, 0);
          v92 = swift_isUniquelyReferenced_nonNull_native(*v18);
          v125 = *v18;
          *v18 = 0x8000000000000000;
          sub_10010BE78(v91, (uint64_t)v17, v92);
          *v18 = v125;
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
          swift_endAccess(&aBlock);
          sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
          v93 = v111;
          v94 = v112;
          (*(void (**)(char *, _QWORD, uint64_t))(v111 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v112);
          v95 = (void *)static OS_dispatch_queue.global(qos:)(v13);
          (*(void (**)(char *, uint64_t))(v93 + 8))(v13, v94);
          v96 = v110;
          v123 = sub_1003D078C;
          v124 = v110;
          aBlock = _NSConcreteStackBlock;
          v120 = 1107296256;
          v121 = sub_100016FB8;
          v122 = &unk_101073058;
          v97 = _Block_copy(&aBlock);
          v98 = swift_retain();
          v99 = v114;
          static DispatchQoS.unspecified.getter(v98);
          v126[0] = _swiftEmptyArrayStorage;
          v100 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v101 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
          v102 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
          v103 = v113;
          v104 = v101;
          v105 = v117;
          dispatch thunk of SetAlgebra.init<A>(_:)(v126, v104, v102, v117, v100);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v99, v103, v97);
          _Block_release(v97);

          sub_10010F91C(v96);
          sub_10010F91C(v96);
          (*(void (**)(char *, uint64_t))(v115 + 8))(v103, v105);
          (*(void (**)(char *, uint64_t))(v116 + 8))(v99, v118);
          return swift_release();
        }
        sub_10039C2A8(v22);
        sub_10039C2A8(v22);
        v58 = swift_errorRetain(a5);
        LODWORD(v109) = static os_log_type_t.error.getter(v58);
        if (qword_1010EA250 != -1)
          swift_once(&qword_1010EA250, sub_100B5D964);
        v108 = qword_1011B7D30;
        v59 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v60 = swift_allocObject(v59, 112, 7);
        *(_OWORD *)(v60 + 16) = xmmword_100E22B10;
        v61 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v107 = dispatch thunk of CustomStringConvertible.description.getter(v14, v61);
        v63 = v62;
        *(_QWORD *)(v60 + 56) = &type metadata for String;
        v64 = sub_10001AA00();
        *(_QWORD *)(v60 + 64) = v64;
        *(_QWORD *)(v60 + 32) = v107;
        *(_QWORD *)(v60 + 40) = v63;
        aBlock = a5;
        swift_errorRetain(a5);
        v65 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        v66 = String.init<A>(describing:)(&aBlock, v65);
        *(_QWORD *)(v60 + 96) = &type metadata for String;
        *(_QWORD *)(v60 + 104) = v64;
        *(_QWORD *)(v60 + 72) = v66;
        *(_QWORD *)(v60 + 80) = v67;
        os_log(_:dso:log:_:_:)(v109, &_mh_execute_header, v108, "Message %@ failed to send: %@", 29, 2, v60);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, v14);
        swift_beginAccess(v18, &aBlock, 33, 0);
        swift_errorRetain(a5);
        v68 = swift_isUniquelyReferenced_nonNull_native(*v18);
        v126[0] = *v18;
        *v18 = 0x8000000000000000;
        sub_10010BE78((unint64_t)a5 | 0x4000000000000000, (uint64_t)v17, v68);
        *v18 = v126[0];
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
        swift_endAccess(&aBlock);
        sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
        v69 = a5;
        v70 = v111;
        v71 = v112;
        (*(void (**)(char *, _QWORD, uint64_t))(v111 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v112);
        v72 = (void *)static OS_dispatch_queue.global(qos:)(v13);
        (*(void (**)(char *, uint64_t))(v70 + 8))(v13, v71);
        v73 = swift_allocObject(&unk_101073090, 32, 7);
        v48 = v110;
        *(_QWORD *)(v73 + 16) = v110;
        *(_QWORD *)(v73 + 24) = v69;
        v123 = sub_1003D18C4;
        v124 = v73;
        aBlock = _NSConcreteStackBlock;
        v120 = 1107296256;
        v121 = sub_100016FB8;
        v122 = &unk_1010730A8;
        v74 = _Block_copy(&aBlock);
        sub_10039C2A8(v48);
        v75 = swift_errorRetain(v69);
        v51 = v114;
        static DispatchQoS.unspecified.getter(v75);
        v126[0] = _swiftEmptyArrayStorage;
        v76 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v77 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v78 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v55 = v113;
        v56 = v117;
        dispatch thunk of SetAlgebra.init<A>(_:)(v126, v77, v78, v117, v76);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v51, v55, v74);
        _Block_release(v74);

        sub_10010F91C(v48);
        swift_errorRelease(v69);
      }
      sub_10010F91C(v48);
      (*(void (**)(char *, uint64_t))(v115 + 8))(v55, v56);
      (*(void (**)(char *, uint64_t))(v116 + 8))(v51, v118);
      return swift_release();
    }
  }
  v27 = swift_endAccess(&aBlock);
  v28 = static os_log_type_t.debug.getter(v27);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v29 = qword_1011B7D30;
  v30 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v31 = swift_allocObject(v30, 72, 7);
  *(_OWORD *)(v31 + 16) = xmmword_100E22B00;
  v32 = UUID.uuidString.getter(v31);
  v34 = v33;
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  *(_QWORD *)(v31 + 64) = sub_10001AA00();
  *(_QWORD *)(v31 + 32) = v32;
  *(_QWORD *)(v31 + 40) = v34;
  os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "messagesSent callback for unknown identifier %@", 47, 2, v31);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100398B54(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD aBlock[6];
  _QWORD *v48;

  v39 = a7;
  v40 = a8;
  v35 = a6;
  v38 = a5;
  v37 = a4;
  v43 = type metadata accessor for DispatchWorkItemFlags(0);
  v46 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v42 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v44 = *(_QWORD *)(v12 - 8);
  v45 = v12;
  __chkstk_darwin(v12);
  v36 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = *(_QWORD *)(a2 + 168);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, v14);
  v18 = *(unsigned __int8 *)(v15 + 80);
  v19 = (v18 + 32) & ~v18;
  v20 = v19 + v16;
  v21 = (v19 + v16) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(v35, v21 + 16, v18 | 7);
  *(_QWORD *)(v22 + 16) = a1;
  *(_QWORD *)(v22 + 24) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v22 + v19, v17, v14);
  *(_BYTE *)(v22 + v20) = v37;
  v24 = v38;
  v23 = v39;
  *(_QWORD *)(v21 + v22 + 8) = v38;
  aBlock[4] = v23;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = v40;
  v25 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v26 = swift_errorRetain(v24);
  v27 = v36;
  static DispatchQoS.unspecified.getter(v26);
  v48 = _swiftEmptyArrayStorage;
  v28 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v29 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v30 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v32 = v42;
  v31 = v43;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v29, v30, v43, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v27, v32, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v32, v31);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v27, v45);
  return swift_release();
}

unint64_t sub_100398E00(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void **a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void **aBlock;
  uint64_t v126;
  uint64_t (*v127)(uint64_t);
  void *v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[2];

  v123 = type metadata accessor for DispatchWorkItemFlags(0);
  v121 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v119 = (char *)&v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for DispatchQoS(0);
  v122 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v120 = (char *)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v117 = *(_QWORD *)(v11 - 8);
  v118 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v112 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  v18 = (_QWORD *)(a2 + 192);
  swift_beginAccess(a2 + 192, &aBlock, 32, 0);
  v19 = *(_QWORD *)(a2 + 192);
  if (!*(_QWORD *)(v19 + 16) || (v20 = sub_100003FB0(a3), (v21 & 1) == 0))
  {
    v27 = swift_endAccess(&aBlock);
    v28 = static os_log_type_t.error.getter(v27);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v29 = qword_1011B7D30;
    v30 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v31 = swift_allocObject(v30, 72, 7);
    *(_OWORD *)(v31 + 16) = xmmword_100E22B00;
    v32 = UUID.uuidString.getter(v31);
    v34 = v33;
    *(_QWORD *)(v31 + 56) = &type metadata for String;
    *(_QWORD *)(v31 + 64) = sub_10001AA00();
    *(_QWORD *)(v31 + 32) = v32;
    *(_QWORD *)(v31 + 40) = v34;
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "localMessageSent callback for unknown identifier %@", 51, 2, v31);
    return swift_bridgeObjectRelease();
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
  v23 = swift_endAccess(&aBlock);
  if (!(v22 >> 62))
  {
    v116 = v22;
    if ((a4 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, v14);
      swift_beginAccess(a2 + 192, &aBlock, 33, 0);
      swift_retain_n(v22, 2);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v18);
      v132[0] = *v18;
      *v18 = 0x8000000000000000;
      sub_10010BE78(0x8000000000000000, (uint64_t)v17, isUniquelyReferenced_nonNull_native);
      *v18 = v132[0];
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      v36 = swift_endAccess(&aBlock);
      v37 = static os_log_type_t.default.getter(v36);
      if (qword_1010EA250 != -1)
        swift_once(&qword_1010EA250, sub_100B5D964);
      v38 = qword_1011B7D30;
      v39 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v40 = swift_allocObject(v39, 72, 7);
      *(_OWORD *)(v40 + 16) = xmmword_100E22B00;
      v41 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v42 = dispatch thunk of CustomStringConvertible.description.getter(v14, v41);
      v44 = v43;
      *(_QWORD *)(v40 + 56) = &type metadata for String;
      *(_QWORD *)(v40 + 64) = sub_10001AA00();
      *(_QWORD *)(v40 + 32) = v42;
      *(_QWORD *)(v40 + 40) = v44;
      os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v38, "Local message %@ sent successfully.", 35, 2, v40);
      swift_bridgeObjectRelease();
      sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
      v45 = v117;
      v46 = v118;
      (*(void (**)(char *, _QWORD, uint64_t))(v117 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v118);
      v47 = (void *)static OS_dispatch_queue.global(qos:)(v13);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v46);
      v48 = v116;
      v129 = sub_1003D9B34;
      v130 = v116;
      aBlock = _NSConcreteStackBlock;
      v126 = 1107296256;
      v127 = sub_100016FB8;
      v128 = &unk_101072798;
      v49 = _Block_copy(&aBlock);
      v50 = swift_retain();
      v51 = v120;
      static DispatchQoS.unspecified.getter(v50);
      v132[0] = _swiftEmptyArrayStorage;
      v52 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v53 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v54 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v55 = v119;
      v56 = v123;
      dispatch thunk of SetAlgebra.init<A>(_:)(v132, v53, v54, v123, v52);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v51, v55, v49);
      _Block_release(v49);

      sub_10010F91C(v48);
    }
    else
    {
      if (!a5)
      {
        v85 = swift_retain_n(v22, 2);
        v86 = static os_log_type_t.error.getter(v85);
        if (qword_1010EA250 != -1)
          swift_once(&qword_1010EA250, sub_100B5D964);
        v115 = qword_1011B7D30;
        v87 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v88 = swift_allocObject(v87, 72, 7);
        *(_OWORD *)(v88 + 16) = xmmword_100E22B00;
        v89 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v90 = dispatch thunk of CustomStringConvertible.description.getter(v14, v89);
        v92 = v91;
        *(_QWORD *)(v88 + 56) = &type metadata for String;
        *(_QWORD *)(v88 + 64) = sub_10001AA00();
        *(_QWORD *)(v88 + 32) = v90;
        *(_QWORD *)(v88 + 40) = v92;
        os_log(_:dso:log:_:_:)(v86, &_mh_execute_header, v115, "Unsuccessful didSendCallback without an error for identifier: %@", 64, 2, v88);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, v14);
        type metadata accessor for SPOwnerSessionError(0);
        v94 = v93;
        aBlock = 0;
        v95 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
        v96 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
        _BridgedStoredNSError.init(_:userInfo:)(v132, &aBlock, v95, v94, v96);
        v97 = v132[0] | 0x4000000000000000;
        swift_beginAccess(v18, &aBlock, 33, 0);
        v98 = swift_isUniquelyReferenced_nonNull_native(*v18);
        v131 = *v18;
        *v18 = 0x8000000000000000;
        sub_10010BE78(v97, (uint64_t)v17, v98);
        *v18 = v131;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
        swift_endAccess(&aBlock);
        sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
        v99 = v117;
        v100 = v118;
        (*(void (**)(char *, _QWORD, uint64_t))(v117 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v118);
        v101 = (void *)static OS_dispatch_queue.global(qos:)(v13);
        (*(void (**)(char *, uint64_t))(v99 + 8))(v13, v100);
        v102 = v116;
        v129 = sub_1003D078C;
        v130 = v116;
        aBlock = _NSConcreteStackBlock;
        v126 = 1107296256;
        v127 = sub_100016FB8;
        v128 = &unk_101072720;
        v103 = _Block_copy(&aBlock);
        v104 = swift_retain();
        v105 = v120;
        static DispatchQoS.unspecified.getter(v104);
        v132[0] = _swiftEmptyArrayStorage;
        v106 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v107 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v108 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v109 = v119;
        v110 = v107;
        v111 = v123;
        dispatch thunk of SetAlgebra.init<A>(_:)(v132, v110, v108, v123, v106);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v105, v109, v103);
        _Block_release(v103);

        sub_10010F91C(v102);
        sub_10010F91C(v102);
        (*(void (**)(char *, uint64_t))(v121 + 8))(v109, v111);
        (*(void (**)(char *, uint64_t))(v122 + 8))(v105, v124);
        return swift_release();
      }
      sub_10039C2A8(v22);
      sub_10039C2A8(v22);
      v64 = swift_errorRetain(a5);
      LODWORD(v115) = static os_log_type_t.error.getter(v64);
      if (qword_1010EA250 != -1)
        swift_once(&qword_1010EA250, sub_100B5D964);
      v114 = qword_1011B7D30;
      v65 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v66 = swift_allocObject(v65, 112, 7);
      *(_OWORD *)(v66 + 16) = xmmword_100E22B10;
      v67 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v113 = dispatch thunk of CustomStringConvertible.description.getter(v14, v67);
      v69 = v68;
      *(_QWORD *)(v66 + 56) = &type metadata for String;
      v70 = sub_10001AA00();
      *(_QWORD *)(v66 + 64) = v70;
      *(_QWORD *)(v66 + 32) = v113;
      *(_QWORD *)(v66 + 40) = v69;
      aBlock = a5;
      swift_errorRetain(a5);
      v71 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v72 = String.init<A>(describing:)(&aBlock, v71);
      *(_QWORD *)(v66 + 96) = &type metadata for String;
      *(_QWORD *)(v66 + 104) = v70;
      *(_QWORD *)(v66 + 72) = v72;
      *(_QWORD *)(v66 + 80) = v73;
      os_log(_:dso:log:_:_:)(v115, &_mh_execute_header, v114, "Local message %@ failed to send: %@", 35, 2, v66);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, v14);
      swift_beginAccess(v18, &aBlock, 33, 0);
      swift_errorRetain(a5);
      v74 = swift_isUniquelyReferenced_nonNull_native(*v18);
      v132[0] = *v18;
      *v18 = 0x8000000000000000;
      sub_10010BE78((unint64_t)a5 | 0x4000000000000000, (uint64_t)v17, v74);
      *v18 = v132[0];
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      swift_endAccess(&aBlock);
      sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
      v75 = a5;
      v76 = v117;
      v77 = v118;
      (*(void (**)(char *, _QWORD, uint64_t))(v117 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v118);
      v78 = (void *)static OS_dispatch_queue.global(qos:)(v13);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v13, v77);
      v79 = swift_allocObject(&unk_101072758, 32, 7);
      v48 = v116;
      *(_QWORD *)(v79 + 16) = v116;
      *(_QWORD *)(v79 + 24) = v75;
      v129 = sub_1003D9B8C;
      v130 = v79;
      aBlock = _NSConcreteStackBlock;
      v126 = 1107296256;
      v127 = sub_100016FB8;
      v128 = &unk_101072770;
      v80 = _Block_copy(&aBlock);
      sub_10039C2A8(v48);
      v81 = swift_errorRetain(v75);
      v51 = v120;
      static DispatchQoS.unspecified.getter(v81);
      v132[0] = _swiftEmptyArrayStorage;
      v82 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v83 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v84 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v55 = v119;
      v56 = v123;
      dispatch thunk of SetAlgebra.init<A>(_:)(v132, v83, v84, v123, v82);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v51, v55, v80);
      _Block_release(v80);

      sub_10010F91C(v48);
      swift_errorRelease(v75);
    }
    sub_10010F91C(v48);
    (*(void (**)(char *, uint64_t))(v121 + 8))(v55, v56);
    (*(void (**)(char *, uint64_t))(v122 + 8))(v51, v124);
    return swift_release();
  }
  if (v22 >> 62 != 1)
  {
    v57 = static os_log_type_t.error.getter(v23);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v58 = qword_1011B7D30;
    v59 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v60 = swift_allocObject(v59, 72, 7);
    *(_OWORD *)(v60 + 16) = xmmword_100E22B00;
    v61 = UUID.uuidString.getter(v60);
    v63 = v62;
    *(_QWORD *)(v60 + 56) = &type metadata for String;
    *(_QWORD *)(v60 + 64) = sub_10001AA00();
    *(_QWORD *)(v60 + 32) = v61;
    *(_QWORD *)(v60 + 40) = v63;
    os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v58, "ERROR: %@ Already in sent state!", 32, 2, v60);
    return swift_bridgeObjectRelease();
  }
  v24 = swift_errorRetain(v22 & 0x3FFFFFFFFFFFFFFFLL);
  v25 = static os_log_type_t.error.getter(v24);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, qword_1011B7D30, "ERROR: %@ Unexpected state: error, identifier.uuidString", 56, 2, _swiftEmptyArrayStorage);
  return sub_10010F91C(v22);
}

void sub_100399B1C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;

  type metadata accessor for CommandError(0);
  v1 = v0;
  v5 = 0;
  v2 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v3 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
  _BridgedStoredNSError.init(_:userInfo:)(&v6, &v5, v2, v1, v3);
  v4 = v6;
  Future.finish(error:)(v6);

}

void sub_100399BB4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, NSObject *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a3 & 1) != 0)
  {
    v11 = a5 + 16;
    v14[0] = a1;
    swift_errorRetain(a1);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    swift_willThrowTypedImpl(v14, v12, &protocol self-conformance witness table for Error);
    swift_beginAccess(v11, v14, 1, 0);
    v13 = *(_QWORD *)(a5 + 16);
    *(_QWORD *)(a5 + 16) = a1;
    swift_errorRelease(v13);
  }
  else
  {
    swift_beginAccess(a4 + 16, v14, 1, 0);
    *(_QWORD *)(a4 + 16) = a1;
    *(_QWORD *)(a4 + 24) = a2;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRelease();
  }
  dispatch_group_leave(a6);
}

void sub_100399C84(uint64_t a1, char a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];

  if ((a2 & 1) != 0)
  {
    v9 = a4 + 16;
    v12[0] = a1;
    swift_errorRetain(a1);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    swift_willThrowTypedImpl(v12, v10, &protocol self-conformance witness table for Error);
    swift_beginAccess(v9, v12, 1, 0);
    v11 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = a1;
    swift_errorRelease(v11);
  }
  else
  {
    swift_beginAccess(a3 + 16, v12, 1, 0);
    *(_QWORD *)(a3 + 16) = a1;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRelease();
  }
  dispatch_group_leave(a5);
}

uint64_t sub_100399D48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  void *v13;
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)(v1 + 272);
  v10 = swift_allocObject(&unk_1010720A0, 24, 7);
  swift_weakInit(v10 + 16, v1);
  v11 = swift_allocObject(&unk_101074328, 80, 7);
  v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)a1;
  *(_QWORD *)(v11 + 16) = v10;
  *(_OWORD *)(v11 + 40) = v12;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v11 + 72) = *(_QWORD *)(a1 + 48);
  aBlock[4] = sub_1003D849C;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101074340;
  v13 = _Block_copy(aBlock);
  v14 = v9;
  swift_retain();
  v15 = sub_1003D84A8((uint64_t *)a1);
  static DispatchQoS.unspecified.getter(v15);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v3, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v21);
  swift_release();
  return swift_release();
}

uint64_t sub_100399F9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v28, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    if (qword_1010E9B48 != -1)
LABEL_33:
      swift_once(&qword_1010E9B48, sub_100308748);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B6D08);
    v7 = swift_retain();
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v10 = 134217984;
      swift_beginAccess(v5 + 264, &v25, 0, 0);
      v26 = *(_QWORD *)(*(_QWORD *)(v5 + 264) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v10 + 4, v10 + 12);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "sendLiveLocation sending to %ld", v10, 0xCu);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

      swift_release();
    }
    swift_beginAccess(v5 + 264, &v26, 0, 0);
    v11 = *(_QWORD *)(v5 + 264);
    v12 = v11 + 64;
    v13 = 1 << *(_BYTE *)(v11 + 32);
    v14 = -1;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    v15 = v14 & *(_QWORD *)(v11 + 64);
    v16 = (unint64_t)(v13 + 63) >> 6;
    swift_bridgeObjectRetain(*(_QWORD *)(v5 + 264));
    v17 = 0;
    while (1)
    {
      if (v15)
      {
        v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v19 = v18 | (v17 << 6);
      }
      else
      {
        if (__OFADD__(v17++, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
        if (v17 >= v16)
          goto LABEL_29;
        v23 = *(_QWORD *)(v12 + 8 * v17);
        if (!v23)
        {
          v24 = v17 + 1;
          if (v17 + 1 >= v16)
            goto LABEL_29;
          v23 = *(_QWORD *)(v12 + 8 * v24);
          if (!v23)
          {
            v24 = v17 + 2;
            if (v17 + 2 >= v16)
              goto LABEL_29;
            v23 = *(_QWORD *)(v12 + 8 * v24);
            if (!v23)
            {
              v24 = v17 + 3;
              if (v17 + 3 >= v16)
                goto LABEL_29;
              v23 = *(_QWORD *)(v12 + 8 * v24);
              if (!v23)
              {
                v24 = v17 + 4;
                if (v17 + 4 >= v16)
                {
LABEL_29:
                  swift_release();
                  return swift_release();
                }
                v23 = *(_QWORD *)(v12 + 8 * v24);
                if (!v23)
                {
                  while (1)
                  {
                    v17 = v24 + 1;
                    if (__OFADD__(v24, 1))
                      goto LABEL_32;
                    if (v17 >= v16)
                      goto LABEL_29;
                    v23 = *(_QWORD *)(v12 + 8 * v17);
                    ++v24;
                    if (v23)
                      goto LABEL_24;
                  }
                }
              }
            }
          }
          v17 = v24;
        }
LABEL_24:
        v15 = (v23 - 1) & v23;
        v19 = __clz(__rbit64(v23)) + (v17 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19);
      swift_retain();
      v21 = objc_autoreleasePoolPush();
      sub_10039A288(a2, v5, v20);
      objc_autoreleasePoolPop(v21);
      swift_release();
    }
  }
  return result;
}

uint64_t sub_10039A288(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v7 = sub_10001A9A8(&qword_1010F7A08);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1003D84A8(a1);
  sub_10037B6EC(1, (uint64_t)a1, v9);
  if (v3)
  {
    if (qword_1010E9B48 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v10 = type metadata accessor for Logger(0);
    sub_10001A9E8(v10, (uint64_t)qword_1011B6D08);
    swift_errorRetain(v3);
    swift_retain();
    swift_errorRetain(v3);
    v11 = swift_retain();
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(22, -1);
      v36 = 0;
      v15 = v14;
      v34 = swift_slowAlloc(64, -1);
      v39 = v34;
      *(_DWORD *)v15 = 136446466;
      v37 = v3;
      swift_errorRetain(v3);
      v16 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v17 = String.init<A>(describing:)(&v37, v16);
      v35 = v10;
      v37 = sub_100016940(v17, v18, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      *(_WORD *)(v15 + 12) = 2080;
      swift_retain();
      v19 = sub_10037F868();
      v21 = v20;
      swift_release();
      v37 = sub_100016940(v19, v21, &v39);
      v10 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v15 + 14, v15 + 22);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "sendMessage error: %{public}s to session %s", (uint8_t *)v15, 0x16u);
      v22 = v34;
      swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {
      swift_errorRelease(v3);
      swift_errorRelease(v3);

      swift_release_n(a3, 2);
    }
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v23 = sub_10001A9E8(v10, (uint64_t)qword_1011B7A18);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "ending messagingsession due to error", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    sub_100382394();
    objc_msgSend(*(id *)(a3 + 56), "endSession");
    sub_100381524(a3);
    if (qword_1010EA428 != -1)
      swift_once(&qword_1010EA428, sub_100C48554);
    v39 = v3;
    swift_errorRetain(v3);
    swift_retain();
    v27 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v28 = String.init<A>(describing:)(&v39, v27);
    sub_100C4892C(1, v28, v29);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_errorRelease(v3);
  }
  else
  {
    v39 = sub_100381924((uint64_t)v9);
    v30 = sub_10001A9A8(&qword_1010F69E8);
    v31 = sub_1000193A4(&qword_1010F69F0, &qword_1010F69E8, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v32 = Publisher.sink(receiveCompletion:receiveValue:)(sub_10039A770, 0, SharingCircleWildAdvertisementKey.init(key:), 0, v30, v31);
    swift_release();
    sub_100004048((uint64_t)v9, &qword_1010F7A08);
    *(_QWORD *)(a2 + 288) = v32;
    return swift_release();
  }
}

void sub_10039A770()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (qword_1010E9B48 != -1)
    swift_once(&qword_1010E9B48, sub_100308748);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B6D08);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.debug.getter(oslog);
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "sendLocation complete", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

}

uint64_t sub_10039A83C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30[2];

  v4 = v3;
  v27 = a1;
  v28 = a2;
  v6 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010FA110);
  v29 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)(a3 + qword_1011B6CF8);
  v30[0] = *(id *)(v4 + 272);
  v13 = v30[0];
  v30[1] = v12;
  v14 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 1, 1, v14);
  swift_retain();
  v15 = v13;
  v16 = sub_10001A9A8(&qword_1010F7980);
  v17 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v18 = sub_1000193A4(&qword_1010F7988, &qword_1010F7980, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v19 = sub_10001AC90((unint64_t *)&qword_10111C120, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr, (const char *)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v30, v8, v16, v17, v18, v19);
  sub_100004048((uint64_t)v8, &qword_1010EECC8);

  swift_release();
  v20 = swift_allocObject(&unk_1010720A0, 24, 7);
  swift_weakInit(v20 + 16, v4);
  v21 = (_QWORD *)swift_allocObject(&unk_101072870, 40, 7);
  v22 = v27;
  v23 = v28;
  v21[2] = v20;
  v21[3] = v22;
  v21[4] = v23;
  v24 = sub_1000193A4(&qword_1010FA118, &qword_1010FA110, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_bridgeObjectRetain(v23);
  Publisher.oneshot(_:)(sub_1003D0994, v21, v9, v24);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v11, v9);
}

void sub_10039AAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __objc2_ivar_list **p_ivars;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[2];
  char v39;
  uint64_t v40;
  _BYTE v41[24];

  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  v8 = a2 + 16;
  swift_beginAccess(a2 + 16, v41, 0, 0);
  Strong = swift_weakLoadStrong(v8);
  if (!Strong)
    return;
  v10 = Strong;
  if ((v7 & 1) != 0)
  {
    sub_100165D28(v6);
    if (qword_1010E9B48 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v11 = type metadata accessor for Logger(0);
    sub_10001A9E8(v11, (uint64_t)qword_1011B6D08);
    sub_100165D28(v6);
    v12 = sub_100165D28(v6);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v38[0] = v16;
      *(_DWORD *)v15 = 136315138;
      sub_100165D28(v6);
      v17 = sub_100165B94(v6);
      v19 = v18;
      sub_100336044(v6, 1);
      v40 = sub_100016940(v17, v19, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease();
      sub_100336044(v6, 1);
      sub_100336044(v6, 1);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Error getting session available %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
      swift_release();

      sub_100336044(v6, 1);
    }
    else
    {
      swift_release();
      sub_100336044(v6, 1);
      sub_100336044(v6, 1);
      sub_100165D38(v6);

    }
    return;
  }
  swift_beginAccess(Strong + 264, v38, 32, 0);
  v20 = *(_QWORD *)(v10 + 264);
  p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
  if (*(_QWORD *)(v20 + 16))
  {
    sub_100336050(v6, 0);
    swift_bridgeObjectRetain(a4);
    v22 = sub_100518DA0(a3, a4);
    if ((v23 & 1) != 0)
    {
      v24 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v22);
      swift_endAccess(v38);
      swift_retain();
      swift_bridgeObjectRelease();
      sub_100382394();
      objc_msgSend(*(id *)(v24 + 56), "endSession");
      sub_100381524(v24);
      swift_beginAccess(v10 + 264, v38, 33, 0);
      sub_100103C2C(a3, a4);
      swift_endAccess(v38);
      swift_release();
      if (qword_1010E9B48 != -1)
        swift_once(&qword_1010E9B48, sub_100308748);
      v25 = type metadata accessor for Logger(0);
      sub_10001A9E8(v25, (uint64_t)qword_1011B6D08);
      swift_bridgeObjectRetain_n(a4, 2);
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.default.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(12, -1);
        v37 = swift_slowAlloc(32, -1);
        v38[0] = v37;
        *(_DWORD *)v29 = 136315138;
        swift_bridgeObjectRetain(a4);
        v40 = sub_100016940(a3, a4, v38);
        p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v29 + 4, v29 + 12);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Found existing session for %s. Ended and removed it from cache", v29, 0xCu);
        swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v29, -1, -1);

        swift_release();
      }
      else
      {

        swift_release();
        swift_bridgeObjectRelease_n(a4, 2);
      }
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
  }
  swift_endAccess(v38);
LABEL_17:
  swift_beginAccess(v10 + 264, v38, 33, 0);
  sub_100336050(v6, 0);
  swift_bridgeObjectRetain(a4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v10 + 264));
  v40 = *(_QWORD *)(v10 + 264);
  *(_QWORD *)(v10 + 264) = 0x8000000000000000;
  sub_10010C294(v6, a3, a4, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v10 + 264) = v40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess(v38);
  v38[0] = a3;
  v38[1] = a4;
  v39 = 0;
  swift_bridgeObjectRetain(a4);
  swift_retain();
  PassthroughSubject.send(_:)(v38);
  swift_bridgeObjectRelease();
  swift_release();
  if (p_ivars[361] != (__objc2_ivar_list *)-1)
    swift_once(&qword_1010E9B48, sub_100308748);
  v31 = type metadata accessor for Logger(0);
  sub_10001A9E8(v31, (uint64_t)qword_1011B6D08);
  swift_bridgeObjectRetain_n(a4, 2);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    v38[0] = v36;
    *(_DWORD *)v35 = 136315138;
    swift_bridgeObjectRetain(a4);
    v40 = sub_100016940(a3, a4, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v35 + 4, v35 + 12);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Configured incoming live session for handle %s and called startLocate on listener", v35, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);
    swift_release();

    sub_100336044(v6, 0);
  }
  else
  {
    sub_100336044(v6, 0);

    swift_release();
    swift_bridgeObjectRelease_n(a4, 2);
  }
}

uint64_t sub_10039B178()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v3;
  id v4;
  NSString v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[13];
  _OWORD v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v1 = v0;
  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  swift_retain();
  v2 = sub_10000D338();
  swift_release();
  v3 = (void *)objc_opt_self(NSUserDefaults);
  swift_retain();
  v4 = objc_msgSend(v3, "standardUserDefaults");
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "BOOLForKey:", v5);
  swift_release();

  v7 = qword_1011B7A48;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v7, &type metadata for SecureLocationsConfig);
  swift_release();
  v30 = v20[10];
  v31 = v20[11];
  v32 = v20[12];
  v26 = v20[6];
  v27 = v20[7];
  v28 = v20[8];
  v29 = v20[9];
  v22 = v20[2];
  v23 = v20[3];
  v24 = v20[4];
  v25 = v20[5];
  v21[0] = v20[0];
  v21[1] = v20[1];
  sub_1003D09E0(v21);
  v8 = v22;
  swift_beginAccess(v0 + 264, v20, 0, 0);
  v9 = *(_QWORD *)(*(_QWORD *)(v0 + 264) + 16);
  if ((v2 & 1) != 0)
  {
    if (v9 < v8)
      v10 = v6 ^ 1;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  if (qword_1010E9B48 != -1)
    swift_once(&qword_1010E9B48, sub_100308748);
  v11 = type metadata accessor for Logger(0);
  sub_10001A9E8(v11, (uint64_t)qword_1011B6D08);
  v12 = swift_retain();
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = v9 < v8;
    v16 = swift_slowAlloc(40, -1);
    *(_DWORD *)v16 = 67110144;
    LODWORD(v18) = v2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, (char *)&v18 + 4, v16 + 4, v16 + 8);
    *(_WORD *)(v16 + 8) = 1024;
    LODWORD(v18) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, (char *)&v18 + 4, v16 + 10, v16 + 14);
    *(_WORD *)(v16 + 14) = 1024;
    LODWORD(v18) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, (char *)&v18 + 4, v16 + 16, v16 + 20);
    *(_WORD *)(v16 + 20) = 2048;
    v18 = *(_QWORD *)(*(_QWORD *)(v1 + 264) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v16 + 22, v16 + 30);
    swift_release();
    *(_WORD *)(v16 + 30) = 2048;
    v18 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v16 + 32, v16 + 40);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "canAcceptRequestForLiveSession isLocationPublishingDevice %{BOOL}d isAutoMeActive %{BOOL}d isWithinMaxSessionLimit %{BOOL}d sessCount %ld maxAllowed %ld  ", (uint8_t *)v16, 0x28u);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_release();
  }
  return v10;
}

uint64_t sub_10039B4C4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[2];

  v11 = type metadata accessor for BeaconSharingSessionContext(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9B48 != -1)
    swift_once(&qword_1010E9B48, sub_100308748);
  v14 = type metadata accessor for Logger(0);
  sub_10001A9E8(v14, (uint64_t)qword_1011B6D08);
  v38 = a1;
  sub_10005972C(a1, (uint64_t)v13, type metadata accessor for BeaconSharingSessionContext);
  swift_bridgeObjectRetain_n(a4, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(22, -1);
    v37 = a5;
    v19 = v18;
    v35 = swift_slowAlloc(64, -1);
    v40[0] = v35;
    *(_DWORD *)v19 = 136315394;
    v20 = sub_100342C70();
    v39 = sub_100016940(v20, v21, v40);
    v36 = a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v13, type metadata accessor for BeaconSharingSessionContext);
    *(_WORD *)(v19 + 12) = 2080;
    swift_bridgeObjectRetain(a4);
    v39 = sub_100016940(a3, a4, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Accepting incoming %s invitation because this device is enabled for location publishing and from follower %s", (uint8_t *)v19, 0x16u);
    v22 = v35;
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    v23 = v19;
    a5 = v37;
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {
    sub_1000126B0((uint64_t)v13, type metadata accessor for BeaconSharingSessionContext);

    swift_bridgeObjectRelease_n(a4, 2);
  }
  v24 = type metadata accessor for PropertyListEncoder(0);
  v25 = swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  PropertyListEncoder.init()(v25);
  v26 = sub_100006204(&qword_1010F8158, type metadata accessor for BeaconSharingSessionContext, (uint64_t)&unk_100E37A90);
  v27 = v38;
  v28 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v38, v11, v26);
  v30 = v29;
  v31 = swift_release();
  __chkstk_darwin(v31);
  *(&v34 - 4) = a5;
  *(&v34 - 3) = v27;
  *(&v34 - 2) = v28;
  *(&v34 - 1) = v30;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1003D9980, &v34 - 6, v32, &type metadata for () + 1, &type metadata for () + 1);
  sub_10001BC14(v28, v30);
  return sub_10039A83C(a3, a4, a5);
}

uint64_t sub_10039B840(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    sub_10039B89C(a2);
    return swift_release();
  }
  return result;
}

void sub_10039B89C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t i;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60[2];
  char v61;
  char v62[24];

  v56 = a1;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + 272);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
    goto LABEL_50;
  v8 = (uint64_t *)(v1 + 264);
  swift_beginAccess(v1 + 264, v62, 0, 0);
  v9 = *(_QWORD *)(v1 + 264);
  v10 = *(_QWORD *)(v9 + 64);
  v53 = v1;
  v54 = v9 + 64;
  v11 = 1 << *(_BYTE *)(v9 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v55 = (unint64_t)(v11 + 63) >> 6;
  v57 = v9;
  v14 = swift_bridgeObjectRetain(v9);
  v15 = 0;
  v14.n128_u64[0] = 136315138;
  v52 = v14;
  v51 = (char *)&type metadata for Any + 8;
  if (v13)
    goto LABEL_36;
LABEL_8:
  v16 = v15 + 1;
  if (!__OFADD__(v15, 1))
  {
    if (v16 < v55)
    {
      v17 = *(_QWORD *)(v54 + 8 * v16);
      v18 = v15 + 1;
      if (v17)
        goto LABEL_21;
      v18 = v15 + 2;
      if (v15 + 2 >= v55)
        goto LABEL_47;
      v17 = *(_QWORD *)(v54 + 8 * v18);
      if (v17)
        goto LABEL_21;
      v18 = v15 + 3;
      if (v15 + 3 >= v55)
        goto LABEL_47;
      v17 = *(_QWORD *)(v54 + 8 * v18);
      if (v17)
      {
LABEL_21:
        v13 = (v17 - 1) & v17;
        v58 = v18;
        for (i = __clz(__rbit64(v17)) + (v18 << 6); ; i = v36 | (v15 << 6))
        {
          v21 = (uint64_t *)(*(_QWORD *)(v57 + 48) + 16 * i);
          v22 = *v21;
          v23 = v21[1];
          v24 = *(void **)(*(_QWORD *)(*(_QWORD *)(v57 + 56) + 8 * i) + 56);
          swift_bridgeObjectRetain(v23);
          swift_retain();
          v25 = objc_msgSend(v24, "sessionID");
          if (v25)
          {
            v26 = v25;
            v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
            v29 = v28;

          }
          else
          {
            v27 = 0;
            v29 = 0;
          }
          v30 = v8;
          v31 = objc_msgSend(*(id *)(v56 + 56), "sessionID");
          if (v31)
          {
            v32 = v31;
            v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
            v35 = v34;

            if (v29)
            {
              if (!v35)
                goto LABEL_34;
              if (v27 == v33 && v29 == v35)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              else
              {
                v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, v33, v35, 0);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v37 & 1) == 0)
                {
                  swift_bridgeObjectRelease();
                  swift_release();
LABEL_35:
                  v8 = v30;
                  v15 = v58;
                  if (!v13)
                    goto LABEL_8;
                  goto LABEL_36;
                }
              }
            }
            else if (v35)
            {
LABEL_34:
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              goto LABEL_35;
            }
          }
          else if (v29)
          {
            goto LABEL_34;
          }
          if (qword_1010E9B48 != -1)
            swift_once(&qword_1010E9B48, sub_100308748);
          v38 = type metadata accessor for Logger(0);
          sub_10001A9E8(v38, (uint64_t)qword_1011B6D08);
          swift_bridgeObjectRetain_n(v23, 2);
          v40 = Logger.logObject.getter(v39);
          v41 = static os_log_type_t.default.getter(v40);
          v8 = v30;
          if (os_log_type_enabled(v40, v41))
          {
            v42 = swift_slowAlloc(12, -1);
            v43 = swift_slowAlloc(32, -1);
            v60[0] = v43;
            *(_DWORD *)v42 = v52.n128_u32[0];
            swift_bridgeObjectRetain(v23);
            *(_QWORD *)(v42 + 4) = sub_100016940(v22, v23, v60);
            swift_bridgeObjectRelease_n(v23, 3);
            _os_log_impl((void *)&_mh_execute_header, v40, v41, "Removing live session for %s", (uint8_t *)v42, 0xCu);
            swift_arrayDestroy(v43, 1, v51);
            swift_slowDealloc(v43, -1, -1);
            swift_slowDealloc(v42, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v23, 2);
          }
          swift_beginAccess(v30, v60, 33, 0);
          v44 = *v30;
          swift_bridgeObjectRetain(v23);
          swift_bridgeObjectRetain(v44);
          v45 = sub_100518DA0(v22, v23);
          v47 = v46;
          swift_bridgeObjectRelease();
          if ((v47 & 1) != 0)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v30);
            v49 = *v30;
            v59 = *v30;
            *v30 = 0x8000000000000000;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_100A9D3C4();
              v49 = v59;
            }
            swift_bridgeObjectRelease();
            sub_100106CBC(v45, v49);
            *v30 = v49;
            swift_bridgeObjectRelease();
          }
          swift_endAccess(v60);
          swift_release();
          swift_bridgeObjectRelease();
          v60[0] = v22;
          v60[1] = v23;
          v61 = 2;
          swift_retain();
          PassthroughSubject.send(_:)(v60);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          v15 = v58;
          if (!v13)
            goto LABEL_8;
LABEL_36:
          v36 = __clz(__rbit64(v13));
          v13 &= v13 - 1;
          v58 = v15;
        }
      }
      v19 = v15 + 4;
      if (v15 + 4 < v55)
      {
        v17 = *(_QWORD *)(v54 + 8 * v19);
        if (v17)
        {
          v18 = v15 + 4;
          goto LABEL_21;
        }
        while (1)
        {
          v18 = v19 + 1;
          if (__OFADD__(v19, 1))
            goto LABEL_49;
          if (v18 >= v55)
            break;
          v17 = *(_QWORD *)(v54 + 8 * v18);
          ++v19;
          if (v17)
            goto LABEL_21;
        }
      }
    }
LABEL_47:
    swift_release();
    return;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
}

void sub_10039BE54(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  BOOL v11;
  _BYTE v12[24];

  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain(a3);
  v8 = sub_10051955C(v7);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    v11 = 0;
    goto LABEL_6;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v8);
  swift_bridgeObjectRelease();
  v11 = v10 > 0;
LABEL_6:
  swift_beginAccess(a2 + 16, v12, 1, 0);
  *(_BYTE *)(a2 + 16) = v11;
  dispatch_group_leave(a4);
}

uint64_t sub_10039BEEC(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;

  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_101071FD8, 24, 7);
  *(_QWORD *)(v14 + 16) = _swiftEmptyDictionarySingleton;
  v15 = sub_10001A9A8(&qword_1010EE2B0);
  v16 = swift_allocObject(v15, 56, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  *(_BYTE *)(v16 + 32) = a1;
  *(_QWORD *)(v16 + 40) = a2;
  *(_QWORD *)(v16 + 48) = a3;
  v17 = swift_allocObject(&unk_101072000, 64, 7);
  *(_BYTE *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 24) = a2;
  *(_QWORD *)(v17 + 32) = a3;
  *(_QWORD *)(v17 + 40) = a4;
  *(_QWORD *)(v17 + 48) = a5;
  *(_QWORD *)(v17 + 56) = v14;
  v18 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v13, 1, 1, v18);
  v19 = (_QWORD *)swift_allocObject(&unk_101072028, 64, 7);
  v19[2] = 0;
  v19[3] = 0;
  v19[4] = sub_1003CFA40;
  v19[5] = v17;
  v19[6] = v5;
  v19[7] = v16;
  swift_bridgeObjectRetain_n(a3, 2);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(v16);
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F9FD8, (uint64_t)v19);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_10039C0AC()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  sub_100004048(v0 + 64, &qword_1010FA060);
  sub_100004048(v0 + 88, &qword_1010FA068);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 104));
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10001D8A8(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_10039C238()
{
  uint64_t v0;

  sub_10039C0AC();
  return swift_deallocClassInstance(v0, 480, 7);
}

uint64_t type metadata accessor for BeaconSharingManager()
{
  return objc_opt_self(_TtC12searchpartyd20BeaconSharingManager);
}

unint64_t *initializeBufferWithCopyOfBuffer for BeaconSharingManager.MessageState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_10039C2A8(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_10039C2A8(unint64_t result)
{
  if (result >> 62 == 1)
    return swift_errorRetain(result & 0x3FFFFFFFFFFFFFFFLL);
  if (!(result >> 62))
    return swift_retain(result);
  return result;
}

unint64_t destroy for BeaconSharingManager.MessageState(unint64_t *a1)
{
  return sub_10010F91C(*a1);
}

unint64_t *assignWithCopy for BeaconSharingManager.MessageState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_10039C2A8(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_10010F91C(v4);
  return a1;
}

unint64_t *assignWithTake for BeaconSharingManager.MessageState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_10010F91C(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for BeaconSharingManager.MessageState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for BeaconSharingManager.MessageState(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_10039C3E4(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

unint64_t *sub_10039C400(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 2)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 2);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingManager.MessageState()
{
  return &type metadata for BeaconSharingManager.MessageState;
}

uint64_t sub_10039C43C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  void (*v8)(_QWORD, _QWORD, _QWORD);
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  Swift::String v13;
  unint64_t v14;
  void (*v15)(os_log_t, uint64_t);
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void (*v19)(os_log_t, uint64_t);
  unint64_t v20;
  void (*v21)(os_log_t, uint64_t);
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD, _QWORD);

  v3 = type metadata accessor for BeaconObservation(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a1, (uint64_t)v5, type metadata accessor for BeaconObservation);
  result = sub_10038A8E4(16, 1, (uint64_t)v5, (uint64_t *)&unk_1010F78F0, type metadata accessor for BeaconObservation, &qword_101109460, (uint64_t (*)(void))sub_1003D1DF4, (uint64_t)&v20);
  if (!v1)
  {
    v7 = v22;
    v19 = v21;
    v8 = v23;
    v9 = v20;
    v10 = sub_1003B0994((uint64_t (*)(void))sub_1003AFF14);
    v11 = sub_10037B1AC((uint64_t)v10);
    swift_bridgeObjectRelease();
    v20 = 0;
    v21 = (void (*)(os_log_t, uint64_t))0xE000000000000000;
    _StringGuts.grow(_:)(25);
    v12 = swift_bridgeObjectRelease();
    v20 = 0xD000000000000017;
    v21 = (void (*)(os_log_t, uint64_t))0x8000000100ED44B0;
    v13._countAndFlagsBits = UUID.uuidString.getter(v12);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14 = v20;
    v15 = v21;
    v16 = sub_100CA7EC0((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)&v17 = v14;
    *((_QWORD *)&v17 + 1) = v15;
    sub_1003BD6B4(v9, v19, v7, v8, (uint64_t)v11, 0, 1, 0, (void (*)(_QWORD, _QWORD, _QWORD))&_swiftEmptySetSingleton, v16, v17, sub_1003AC04C);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_10001BC14(v7, (unint64_t)v8);
  }
  return result;
}

uint64_t sub_10039C62C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD v36[2];
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v1 = v0;
  v2 = type metadata accessor for StableIdentifier(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v43 = (uint64_t)v36 - v7;
  __chkstk_darwin(v6);
  v39 = (char *)v36 - v8;
  v9 = type metadata accessor for OwnedBeaconRecord(0);
  v41 = *(_QWORD *)(v9 - 8);
  v42 = v9;
  v10 = __chkstk_darwin(v9);
  v44 = (uint64_t)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)v36 - v12;
  result = (uint64_t)sub_1000188D0();
  v15 = result;
  v16 = _swiftEmptyArrayStorage;
  v46 = _swiftEmptyArrayStorage;
  v40 = *(_QWORD *)(result + 16);
  if (v40)
  {
    v17 = 0;
    v37 = v2;
    v38 = v5;
    v36[0] = v1;
    v36[1] = v5 + 8;
    v18 = (uint64_t)v39;
    while (1)
    {
      if (v17 >= *(_QWORD *)(v15 + 16))
      {
        __break(1u);
        return result;
      }
      v19 = v15;
      v20 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
      v45 = *(_QWORD *)(v41 + 72);
      sub_10005972C(v15 + v20 + v45 * v17, (uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
      v21 = (uint64_t)&v13[*(int *)(v42 + 24)];
      sub_10005972C(v21, v18, type metadata accessor for StableIdentifier);
      v22 = v2;
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v2);
      sub_1000126B0(v18, type metadata accessor for StableIdentifier);
      v24 = v21;
      v25 = v43;
      sub_10005972C(v24, v43, type metadata accessor for StableIdentifier);
      v26 = v25;
      if (EnumCaseMultiPayload == 1)
        break;
      v28 = (uint64_t)v38;
      sub_10005972C(v26, (uint64_t)v38, type metadata accessor for StableIdentifier);
      v29 = swift_getEnumCaseMultiPayload(v28, v22);
      if (v29 == 2)
      {
        sub_10001A9A8(&qword_101106F40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v30 = v43;
        v15 = v19;
LABEL_12:
        v27 = v45;
        swift_bridgeObjectRelease();
        v31 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v38, v31);
        sub_1000126B0(v30, type metadata accessor for StableIdentifier);
        v16 = v46;
LABEL_13:
        sub_1000126EC((uint64_t)v13, v44, type metadata accessor for OwnedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
          sub_10009A680(0, v16[2] + 1, 1);
        v16 = v46;
        v33 = v46[2];
        v32 = v46[3];
        if (v33 >= v32 >> 1)
        {
          sub_10009A680(v32 > 1, v33 + 1, 1);
          v16 = v46;
        }
        v16[2] = v33 + 1;
        result = sub_1000126EC(v44, (uint64_t)v16 + v20 + v33 * v27, type metadata accessor for OwnedBeaconRecord);
        v2 = v37;
        goto LABEL_4;
      }
      v2 = v22;
      v15 = v19;
      if (v29 == 3)
      {
        sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v30 = v43;
        goto LABEL_12;
      }
      sub_1000126B0((uint64_t)v38, type metadata accessor for StableIdentifier);
      sub_1000126B0(v43, type metadata accessor for StableIdentifier);
      result = sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
LABEL_4:
      if (v40 == ++v17)
      {
        v16 = v46;
        goto LABEL_19;
      }
    }
    sub_1000126B0(v25, type metadata accessor for StableIdentifier);
    v15 = v19;
    v27 = v45;
    goto LABEL_13;
  }
LABEL_19:
  swift_bridgeObjectRelease();
  v34 = v16[2];
  swift_release();
  if (!v34)
    return sub_100CA8058((uint64_t)_swiftEmptyArrayStorage);
  swift_retain();
  v35 = sub_100BF115C();
  swift_release();
  return (uint64_t)v35;
}

void sub_10039CA70(char *a1)
{
  sub_1005137CC(*a1);
}

void sub_10039CA7C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_10039CAC4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1684107369, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

void sub_10039CB20()
{
  __asm { BR              X10 }
}

uint64_t sub_10039CB58(uint64_t a1)
{
  String.hash(into:)(a1, 1684107369, 0xE400000000000000);
  return swift_bridgeObjectRelease(0xE400000000000000);
}

void sub_10039CBA0()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_10039CBE4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1684107369, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

unint64_t sub_10039CC40@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1003CDE10(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10039CC6C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10039CC98 + 4 * byte_100E3BDAC[*v0]))();
}

void sub_10039CC98(_QWORD *a1@<X8>)
{
  *a1 = 1684107369;
  a1[1] = 0xE400000000000000;
}

void sub_10039CCAC(_QWORD *a1@<X8>)
{
  *a1 = 1685024873;
  a1[1] = 0xE400000000000000;
}

void sub_10039CCC4(_QWORD *a1@<X8>)
{
  *a1 = 6513005;
  a1[1] = 0xE300000000000000;
}

void sub_10039CCD8(_QWORD *a1@<X8>)
{
  *a1 = &off_10104A140;
}

uint64_t sub_10039CCE8(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE v18[16];
  _QWORD v19[4];

  v9 = type metadata accessor for BeaconLocationUpdate(0);
  __chkstk_darwin(v9);
  v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10005972C(a4, (uint64_t)v11, type metadata accessor for BeaconLocationUpdate);
  sub_10038A8E4(9, 1, (uint64_t)v11, &qword_1010FA520, type metadata accessor for BeaconLocationUpdate, &qword_1010FA528, (uint64_t (*)(void))sub_1003D85F8, (uint64_t)v19);
  v12 = v19[0];
  v14 = v19[1];
  v13 = v19[2];
  v15 = v19[3];
  v16 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v16);
  *(_QWORD *)&v18[-64] = v4;
  v18[-56] = v12;
  *(_QWORD *)&v18[-48] = v14;
  *(_QWORD *)&v18[-40] = v13;
  *(_QWORD *)&v18[-32] = v15;
  v18[-24] = a1;
  *(_QWORD *)&v18[-16] = a2;
  *(_QWORD *)&v18[-8] = a3;
  static Transaction.named<A>(_:with:)("sendLocationUpdateMessage", 25, 2, sub_1003D853C, &v18[-80]);
  return sub_10001BC14(v13, v15);
}

uint64_t sub_10039CF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10039CF60(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&off_10104A190, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, char, _QWORD, __int16, Swift::Int, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, char, uint64_t, uint64_t))sub_1003C4BC0);
}

uint64_t sub_10039CF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, char, _QWORD, __int16, Swift::Int, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, char, uint64_t, uint64_t))
{
  Swift::Int v16;
  unint64_t v17;
  uint64_t v18;
  char v20;
  __int16 v21;
  char v22;

  v16 = sub_1003BB198(a10);
  swift_retain();
  swift_bridgeObjectRetain(a9);
  v17 = sub_1006B9A24((uint64_t)_swiftEmptyArrayStorage);
  v18 = sub_100CA7EC0((uint64_t)_swiftEmptyArrayStorage);
  v22 = a7;
  v21 = 257;
  v20 = 0;
  a11(a3, a4, a5, a6, v17, a7, a8, a9, v20, 0, v21, v16, v18, 0, 0, a2, a1, v22, a8, a9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10039D074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, uint64_t a7, const char *a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;

  v15 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10000F9B8(a1, (uint64_t)v17, &qword_1010F4868);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v15);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v19 = *v17;
    v20 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v21 = qword_1011B7D30;
    v22 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v23 = swift_allocObject(v22, 112, 7);
    *(_OWORD *)(v23 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v23 + 56) = &type metadata for String;
    v24 = sub_10001AA00();
    *(_QWORD *)(v23 + 64) = v24;
    *(_QWORD *)(v23 + 32) = a4;
    *(_QWORD *)(v23 + 40) = a5;
    v35 = v19;
    swift_bridgeObjectRetain(a5);
    swift_errorRetain(v19);
    v25 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v26 = String.init<A>(describing:)(&v35, v25);
    *(_QWORD *)(v23 + 96) = &type metadata for String;
    *(_QWORD *)(v23 + 104) = v24;
    *(_QWORD *)(v23 + 72) = v26;
    *(_QWORD *)(v23 + 80) = v27;
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, a8, a9, 2, v23);
    swift_bridgeObjectRelease();
    return swift_errorRelease(v19);
  }
  else
  {
    v29 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v30 = qword_1011B7D30;
    v31 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v32 = swift_allocObject(v31, 72, 7);
    *(_OWORD *)(v32 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v32 + 56) = &type metadata for String;
    *(_QWORD *)(v32 + 64) = sub_10001AA00();
    *(_QWORD *)(v32 + 32) = a4;
    *(_QWORD *)(v32 + 40) = a5;
    *(_QWORD *)&v33 = swift_bridgeObjectRetain(a5).n128_u64[0];
    os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, a6, a7, 2, v32, v33);
    swift_bridgeObjectRelease();
    return sub_100004048((uint64_t)v17, &qword_1010F4868);
  }
}

uint64_t sub_10039D2E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char *v47;
  uint64_t v48;
  char v49;
  char *v50;
  id v51;
  _OWORD *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  _OWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD v85[3];
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116[7];

  v106 = a1;
  v1 = type metadata accessor for CryptoKeys(0);
  v85[2] = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v98 = (char *)v85 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for LegacyShareEnvelope(0);
  v3 = __chkstk_darwin(v86);
  v87 = (char *)v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v88 = (char *)v85 - v5;
  v110 = type metadata accessor for TimeBasedKey(0);
  v90 = *(_QWORD *)(v110 - 8);
  v6 = __chkstk_darwin(v110);
  v97 = (char *)v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v96 = (char *)v85 - v9;
  v10 = __chkstk_darwin(v8);
  __chkstk_darwin(v10);
  v116[6] = (uint64_t)v85 - v11;
  v114 = type metadata accessor for FamilyCryptoKeysV1(0);
  v109 = *(_QWORD *)(v114 - 8);
  v12 = __chkstk_darwin(v114);
  v14 = (char *)v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v113 = (char *)v85 - v15;
  v91 = type metadata accessor for FamilyShareEnvelopeV1(0);
  v16 = __chkstk_darwin(v91);
  v92 = (char *)v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v93 = (char *)v85 - v18;
  v101 = type metadata accessor for UUID(0);
  v100 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v104 = (char *)v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v94);
  v99 = (uint64_t)v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v21);
  v103 = (char *)v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v23);
  v25 = (char *)v85 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Date(0);
  v27 = *(char ***)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v95 = (char *)v85 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v31 = (char *)v85 - v30;
  v32 = type metadata accessor for DateInterval(0);
  v111 = *(_QWORD *)(v32 - 8);
  v112 = v32;
  __chkstk_darwin(v32);
  v34 = (char *)v85 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (!v35)
  {
    __break(1u);
    goto LABEL_21;
  }
  v36 = v35;
  v37 = objc_msgSend(v35, "aa_primaryAppleAccount");

  v107 = v37;
  if (!v37)
  {
    type metadata accessor for SPOwnerSessionError(0);
    v42 = v41;
    v115 = 7;
    v43 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v44 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v45 = _BridgedStoredNSError.init(_:userInfo:)(v116, &v115, v43, v42, v44);
    return swift_willThrow(v45);
  }
  v108 = v34;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v38 = v105;
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v39 = sub_100C1AF68(v116[0]);
  swift_bridgeObjectRelease();
  static Date.trustedNow.getter((uint64_t)v31);
  if ((unsigned __int128)(v39 * (__int128)60) >> 64 != (60 * v39) >> 63)
  {
    __break(1u);
LABEL_19:
    swift_once(&qword_1010EA250, sub_100B5D964);
    goto LABEL_16;
  }
  DateInterval.init(start:duration:)(v31, (double)(60 * v39));
  v89 = type metadata accessor for ShareInstruction(0);
  sub_10000F9B8(v106 + *(int *)(v89 + 36), (uint64_t)v25, (uint64_t *)&unk_1010EA690);
  v40 = ((uint64_t (*)(char *, uint64_t, uint64_t))v27[6])(v25, 1, v26);
  v85[1] = v38;
  if (v40 == 1)
  {
    sub_100004048((uint64_t)v25, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    v47 = v95;
    v48 = ((uint64_t (*)(char *, char *, uint64_t))v27[4])(v95, v25, v26);
    DateInterval.end.getter(v48);
    v49 = static Date.< infix(_:_:)(v47, v31);
    v50 = v27[1];
    ((void (*)(char *, uint64_t))v50)(v31, v26);
    if ((v49 & 1) != 0)
    {
      ((void (*)(char *, char *, uint64_t))v27[2])(v31, v47, v26);
      DateInterval.end.setter(v31);
    }
    ((void (*)(char *, uint64_t))v50)(v47, v26);
  }
  v27 = &selRef_connectedServicesChanged_;
  v51 = objc_msgSend(v107, "username");
  v52 = v103;
  if (!v51)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v53 = v51;
  v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
  v56 = v55;

  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v54, v56);
  if (v59)
  {
    v60 = v59;
    v95 = v14;
    v61 = v89;
    v62 = v106;
    v63 = v106 + *(int *)(v89 + 24);
    v64 = v57;
    v65 = v52;
    v66 = v99;
    v67 = v58;
    sub_10005972C(v63, v99, type metadata accessor for OwnedBeaconRecord);
    v68 = v62 + *(int *)(v61 + 32);
    v69 = (uint64_t)v104;
    (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v104, v68, v101);
    sub_100D3A34C(v64, v67, v60, 0, 0xE000000000000000, v66, v69, 1, v65);
    sub_1003B32F8(v63, (uint64_t)v108, 0, 0, 0, *(_QWORD *)(v102 + 144));
    __asm { BR              X10 }
  }
  v39 = static os_log_type_t.error.getter(v57);
  if (qword_1010EA250 != -1)
    goto LABEL_19;
LABEL_16:
  v71 = qword_1011B7D30;
  v72 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v73 = swift_allocObject(v72, 72, 7);
  *(_OWORD *)(v73 + 16) = xmmword_100E22B00;
  v74 = v107;
  v75 = objc_msgSend(v107, v27[251]);
  if (!v75)
  {
LABEL_22:
    __break(1u);
    JUMPOUT(0x10039E744);
  }
  v76 = v75;
  v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
  v79 = v78;

  *(_QWORD *)(v73 + 56) = &type metadata for String;
  *(_QWORD *)(v73 + 64) = sub_10001AA00();
  *(_QWORD *)(v73 + 32) = v77;
  *(_QWORD *)(v73 + 40) = v79;
  os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v71, "Could not create MessagingDestination from: %@", 46, 2, v73);
  swift_bridgeObjectRelease();
  type metadata accessor for SPOwnerSessionError(0);
  v81 = v80;
  v115 = 7;
  v82 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v83 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
  v84 = _BridgedStoredNSError.init(_:userInfo:)(v116, &v115, v82, v81, v83);
  swift_willThrow(v84);

  return (*(uint64_t (**)(char *, uint64_t))(v111 + 8))(v108, v112);
}

void sub_10039E754(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  id v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD *v82;
  int64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  id v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  int64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(char *, uint64_t);
  uint64_t v138;
  uint64_t inited;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t (*v172)(char *, uint64_t);
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void (*v198)(char *, uint64_t);
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t MyAirPodsFamilyShareEnvelope;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _OWORD *v218;
  uint64_t v219;
  uint64_t v220;
  id v221;
  char *v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  _QWORD *v228;
  __int128 v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  __int128 v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  char v237[8];
  _QWORD v238[4];
  uint64_t v239;

  v223 = a1;
  v220 = type metadata accessor for Date(0);
  v219 = *(_QWORD *)(v220 - 8);
  __chkstk_darwin(v220);
  v204 = (char *)&v195 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = type metadata accessor for TimeBasedKey(0);
  v216 = *(_QWORD *)(v232 - 8);
  v3 = __chkstk_darwin(v232);
  v226 = (char *)&v195 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v231 = (uint64_t)&v195 - v6;
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v195 - v8;
  __chkstk_darwin(v7);
  *(_QWORD *)&v229 = (char *)&v195 - v10;
  v236 = type metadata accessor for FamilyCryptoKeysV1(0);
  *(_QWORD *)&v233 = *(_QWORD *)(v236 - 8);
  v11 = __chkstk_darwin(v236);
  v205 = (uint64_t *)((char *)&v195 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = __chkstk_darwin(v11);
  v208 = (uint64_t *)((char *)&v195 - v14);
  v15 = __chkstk_darwin(v13);
  v209 = (uint64_t *)((char *)&v195 - v16);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v195 - v18;
  v20 = __chkstk_darwin(v17);
  v234 = (uint64_t *)((char *)&v195 - v21);
  v22 = __chkstk_darwin(v20);
  v230 = (uint64_t)&v195 - v23;
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v195 - v25;
  __chkstk_darwin(v24);
  v228 = (uint64_t *)((char *)&v195 - v27);
  MyAirPodsFamilyShareEnvelope = type metadata accessor for FindMyAirPodsFamilyShareEnvelope(0);
  v28 = __chkstk_darwin(MyAirPodsFamilyShareEnvelope);
  v214 = (uint64_t)&v195 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v215 = (uint64_t)&v195 - v30;
  v212 = type metadata accessor for UUID(0);
  v211 = *(_QWORD *)(v212 - 8);
  __chkstk_darwin(v212);
  v224 = (char *)&v195 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v32);
  v210 = (uint64_t)&v195 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = type metadata accessor for SharedBeaconRecord(0);
  v34 = __chkstk_darwin(v207);
  v206 = (uint64_t)&v195 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v34);
  v217 = (uint64_t)&v195 - v37;
  __chkstk_darwin(v36);
  v218 = (_OWORD *)((char *)&v195 - v38);
  v39 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v39);
  v41 = (char *)&v195 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v227 = type metadata accessor for DateInterval(0);
  v235 = *(_QWORD *)(v227 - 8);
  v42 = __chkstk_darwin(v227);
  v44 = (char *)&v195 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __chkstk_darwin(v42);
  v47 = (char *)&v195 - v46;
  __chkstk_darwin(v45);
  v222 = (char *)&v195 - v48;
  v49 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (!v49)
  {
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    return;
  }
  v50 = v49;
  v51 = objc_msgSend(v49, "aa_primaryAppleAccount");

  v221 = v51;
  if (!v51)
  {
    type metadata accessor for SPOwnerSessionError(0);
    v62 = v61;
    v239 = 7;
    v63 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v64 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v65 = _BridgedStoredNSError.init(_:userInfo:)(v238, &v239, v63, v62, v64);
    swift_willThrow(v65);
    return;
  }
  v201 = (uint64_t *)v19;
  v203 = type metadata accessor for ShareInstruction(0);
  v52 = v223;
  v53 = v223 + *(int *)(v203 + 24);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v219 + 56))(v41, 1, 1, v220);
  v202 = v53;
  sub_1003A13FC((uint64_t)v47, (uint64_t)v44, v53, (uint64_t)v41);
  sub_100004048((uint64_t)v41, (uint64_t *)&unk_1010EA690);
  v54 = v235;
  v55 = *(void (**)(char *, uint64_t))(v235 + 8);
  v56 = v227;
  v55(v44, v227);
  v57 = (uint64_t)v222;
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v222, v47, v56);
  v58 = v225;
  sub_1003A1C78(v52, v57);
  if (v58)
  {
    v55((char *)v57, v56);

    return;
  }
  v66 = v60;
  v67 = v203;
  v199 = v59;
  v200 = 0;
  v198 = v55;
  v196 = v1;
  v68 = objc_msgSend(v221, "username");
  if (!v68)
    goto LABEL_44;
  v69 = v68;
  v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
  v72 = v71;

  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v70, v72);
  v76 = v227;
  if (!v75)
  {
    swift_bridgeObjectRelease();
    v98 = swift_bridgeObjectRelease();
    v99 = static os_log_type_t.error.getter(v98);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v100 = qword_1011B7D30;
    v101 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v102 = swift_allocObject(v101, 72, 7);
    *(_OWORD *)(v102 + 16) = xmmword_100E22B00;
    v103 = v221;
    v104 = objc_msgSend(v221, "username");
    if (v104)
    {
      v105 = v104;
      v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
      v108 = v107;

      *(_QWORD *)(v102 + 56) = &type metadata for String;
      *(_QWORD *)(v102 + 64) = sub_10001AA00();
      *(_QWORD *)(v102 + 32) = v106;
      *(_QWORD *)(v102 + 40) = v108;
      os_log(_:dso:log:_:_:)(v99, &_mh_execute_header, v100, "Could not create MessagingDestination from: %@", 46, 2, v102);
      swift_bridgeObjectRelease();
      type metadata accessor for SPOwnerSessionError(0);
      v110 = v109;
      v239 = 0;
      v111 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v112 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
      v113 = _BridgedStoredNSError.init(_:userInfo:)(v238, &v239, v111, v110, v112);
      swift_willThrow(v113);

      v198(v222, v76);
      return;
    }
    goto LABEL_45;
  }
  v77 = v75;
  v225 = v73;
  v78 = v210;
  v79 = v74;
  sub_10005972C(v202, v210, type metadata accessor for OwnedBeaconRecord);
  v80 = v223 + *(int *)(v67 + 32);
  v81 = (uint64_t)v224;
  (*(void (**)(char *, uint64_t, uint64_t))(v211 + 16))(v224, v80, v212);
  v82 = v218;
  sub_100D3A34C(v225, v79, v77, 0, 0xE000000000000000, v78, v81, 1, v218);
  sub_10005972C((uint64_t)v82, v217, type metadata accessor for SharedBeaconRecord);
  v83 = *(_QWORD *)(v199 + 16);
  v84 = _swiftEmptyArrayStorage;
  v197 = v66;
  if (v83)
  {
    v238[0] = _swiftEmptyArrayStorage;
    v85 = v199;
    sub_10009AF8C(0, v83, 0);
    v86 = v85 + ((*(unsigned __int8 *)(v216 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v216 + 80));
    v225 = *(_QWORD *)(v216 + 72);
    v224 = v26 + 8;
    v87 = v235;
    do
    {
      v88 = v229;
      sub_10005972C(v86, v229, type metadata accessor for TimeBasedKey);
      sub_10005972C(v88, (uint64_t)v9, type metadata accessor for TimeBasedKey);
      *(_QWORD *)v26 = *(_QWORD *)v9;
      v89 = v232;
      (*(void (**)(char *, char *, uint64_t))(v87 + 16))(&v26[*(int *)(v236 + 20)], &v9[*(int *)(v232 + 20)], v76);
      v90 = &v9[*(int *)(v89 + 24)];
      v91 = *((_QWORD *)v90 + 5);
      if (v91 >> 60 == 15)
      {
        v92 = *((_QWORD *)v90 + 2);
        v93 = *((_QWORD *)v90 + 3);
        sub_10001BBBC(v92, v93);
        sub_1000126B0((uint64_t)v9, type metadata accessor for TimeBasedKey);
      }
      else
      {
        v92 = *((_QWORD *)v90 + 4);
        sub_10001BBBC(v92, *((_QWORD *)v90 + 5));
        sub_1000126B0((uint64_t)v9, type metadata accessor for TimeBasedKey);
        v93 = v91 | 0x2000000000000000;
      }
      v94 = *(int *)(v236 + 24);
      *(_QWORD *)&v26[v94] = v92;
      *(_QWORD *)&v224[v94] = v93;
      sub_1000126EC((uint64_t)v26, (uint64_t)v228, type metadata accessor for FamilyCryptoKeysV1);
      sub_1000126B0(v229, type metadata accessor for TimeBasedKey);
      v95 = (_QWORD *)v238[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v238[0]) & 1) == 0)
      {
        sub_10009AF8C(0, v95[2] + 1, 1);
        v95 = (_QWORD *)v238[0];
      }
      v97 = v95[2];
      v96 = v95[3];
      if (v97 >= v96 >> 1)
      {
        sub_10009AF8C(v96 > 1, v97 + 1, 1);
        v95 = (_QWORD *)v238[0];
      }
      v95[2] = v97 + 1;
      sub_1000126EC((uint64_t)v228, (uint64_t)v95+ ((*(unsigned __int8 *)(v233 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v233 + 80))+ *(_QWORD *)(v233 + 72) * v97, type metadata accessor for FamilyCryptoKeysV1);
      v86 += v225;
      --v83;
      v76 = v227;
      v87 = v235;
    }
    while (v83);
    swift_bridgeObjectRelease();
    v66 = v197;
    v84 = _swiftEmptyArrayStorage;
  }
  else
  {
    swift_bridgeObjectRelease();
    v95 = _swiftEmptyArrayStorage;
    v87 = v235;
  }
  v114 = *(_QWORD *)(v66 + 16);
  v115 = v66;
  v116 = v226;
  if (v114)
  {
    v238[0] = _swiftEmptyArrayStorage;
    sub_10009AF8C(0, v114, 0);
    v117 = v115 + ((*(unsigned __int8 *)(v216 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v216 + 80));
    *(_QWORD *)&v229 = *(_QWORD *)(v216 + 72);
    v228 = v234 + 1;
    do
    {
      v118 = v231;
      sub_10005972C(v117, v231, type metadata accessor for TimeBasedKey);
      sub_10005972C(v118, (uint64_t)v116, type metadata accessor for TimeBasedKey);
      v119 = (char *)v234;
      *v234 = *(_QWORD *)v116;
      v120 = v232;
      (*(void (**)(char *, char *, uint64_t))(v87 + 16))(&v119[*(int *)(v236 + 20)], &v116[*(int *)(v232 + 20)], v76);
      v121 = &v116[*(int *)(v120 + 24)];
      v122 = *((_QWORD *)v121 + 5);
      if (v122 >> 60 == 15)
      {
        v123 = (uint64_t)v116;
        v124 = *((_QWORD *)v121 + 2);
        v125 = *((_QWORD *)v121 + 3);
        sub_10001BBBC(v124, v125);
        sub_1000126B0(v123, type metadata accessor for TimeBasedKey);
      }
      else
      {
        v124 = *((_QWORD *)v121 + 4);
        sub_10001BBBC(v124, *((_QWORD *)v121 + 5));
        sub_1000126B0((uint64_t)v116, type metadata accessor for TimeBasedKey);
        v125 = v122 | 0x2000000000000000;
      }
      v126 = *(int *)(v236 + 24);
      v127 = (uint64_t)v234;
      *(_QWORD *)((char *)v234 + v126) = v124;
      *(_QWORD *)((char *)v228 + v126) = v125;
      sub_1000126EC(v127, v230, type metadata accessor for FamilyCryptoKeysV1);
      sub_1000126B0(v231, type metadata accessor for TimeBasedKey);
      v84 = (_QWORD *)v238[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v238[0]) & 1) == 0)
      {
        sub_10009AF8C(0, v84[2] + 1, 1);
        v84 = (_QWORD *)v238[0];
      }
      v129 = v84[2];
      v128 = v84[3];
      if (v129 >= v128 >> 1)
      {
        sub_10009AF8C(v128 > 1, v129 + 1, 1);
        v84 = (_QWORD *)v238[0];
      }
      v84[2] = v129 + 1;
      sub_1000126EC(v230, (uint64_t)v84+ ((*(unsigned __int8 *)(v233 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v233 + 80))+ *(_QWORD *)(v233 + 72) * v129, type metadata accessor for FamilyCryptoKeysV1);
      v117 += v229;
      --v114;
      v116 = v226;
      v87 = v235;
    }
    while (v114);
  }
  swift_bridgeObjectRelease();
  v130 = v215;
  sub_1000126EC(v217, v215, type metadata accessor for SharedBeaconRecord);
  v131 = MyAirPodsFamilyShareEnvelope;
  v132 = *(int *)(MyAirPodsFamilyShareEnvelope + 20);
  *(_QWORD *)(v130 + v132) = v95;
  v133 = *(int *)(v131 + 24);
  *(_QWORD *)(v130 + v133) = v84;
  v134 = v214;
  sub_10005972C(v130, v214, type metadata accessor for FindMyAirPodsFamilyShareEnvelope);
  v135 = v200;
  sub_10038A8E4(0, 4, v134, &qword_1010FA3D0, type metadata accessor for FindMyAirPodsFamilyShareEnvelope, &qword_1010FA3D8, (uint64_t (*)(void))sub_1003D6E8C, (uint64_t)v238);
  v136 = v223;
  v137 = v198;
  v200 = v135;
  if (v135)
  {

    sub_1000126B0(v130, type metadata accessor for FindMyAirPodsFamilyShareEnvelope);
    sub_1000126B0((uint64_t)v218, type metadata accessor for SharedBeaconRecord);
    v137(v222, v76);
  }
  else
  {
    LODWORD(v231) = LOBYTE(v238[0]);
    v230 = v238[1];
    v234 = (_QWORD *)v238[3];
    v235 = v238[2];
    v138 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
    inited = swift_initStackObject(v138, v237);
    v229 = xmmword_100E22B00;
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_QWORD *)(inited + 32) = 0x44495344746C41;
    *(_QWORD *)(inited + 40) = 0xE700000000000000;
    v140 = *(_QWORD *)(v136 + 16);
    *(_QWORD *)(inited + 48) = *(_QWORD *)(v136 + 8);
    *(_QWORD *)(inited + 56) = v140;
    swift_bridgeObjectRetain(v140);
    v232 = sub_1006B8DC4(inited);
    v141 = static os_log_type_t.default.getter(v232);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v142 = qword_1011B7D30;
    v228 = (_QWORD *)sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v143 = swift_allocObject(v228, 72, 7);
    *(_OWORD *)(v143 + 16) = v229;
    v144 = v206;
    sub_10005972C(v130, v206, type metadata accessor for SharedBeaconRecord);
    v145 = String.init<A>(describing:)(v144, v207);
    v147 = v146;
    *(_QWORD *)(v143 + 56) = &type metadata for String;
    v148 = sub_10001AA00();
    *(_QWORD *)(v143 + 64) = v148;
    *(_QWORD *)(v143 + 32) = v145;
    *(_QWORD *)(v143 + 40) = v147;
    os_log(_:dso:log:_:_:)(v141, &_mh_execute_header, v142, "FindMyAirPodsFamilyShareEnvelope.sharedBeacon: %@", 49, 2, v143);
    swift_bridgeObjectRelease();
    v149 = *(_QWORD *)(v130 + v132);
    v150 = *(_QWORD *)(v149 + 16);
    v151 = v196;
    v152 = v227;
    if (v150)
    {
      *(_QWORD *)&v229 = v148;
      v153 = v233;
      v154 = (*(unsigned __int8 *)(v233 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v233 + 80);
      v155 = v149 + v154;
      sub_10005972C(v149 + v154, (uint64_t)v201, type metadata accessor for FamilyCryptoKeysV1);
      v156 = v150 - 1;
      v157 = *(_QWORD *)(v153 + 72);
      v158 = v209;
      sub_10005972C(v155 + v157 * v156, (uint64_t)v209, type metadata accessor for FamilyCryptoKeysV1);
      v159 = *(_QWORD *)(v130 + v133);
      v160 = *(_QWORD *)(v159 + 16);
      if (v160)
      {
        v161 = v159 + v154;
        sub_10005972C(v159 + v154, (uint64_t)v208, type metadata accessor for FamilyCryptoKeysV1);
        v162 = sub_10005972C(v161 + (v160 - 1) * v157, (uint64_t)v205, type metadata accessor for FamilyCryptoKeysV1);
        LODWORD(v225) = static os_log_type_t.default.getter(v162);
        v226 = (char *)qword_1011B7D30;
        v163 = swift_allocObject(v228, 192, 7);
        v233 = xmmword_100E26E00;
        *(_OWORD *)(v163 + 16) = xmmword_100E26E00;
        v164 = *v201;
        *(_QWORD *)(v163 + 56) = &type metadata for UInt64;
        *(_QWORD *)(v163 + 64) = &protocol witness table for UInt64;
        *(_QWORD *)(v163 + 32) = v164;
        v165 = *v158;
        *(_QWORD *)(v163 + 96) = &type metadata for UInt64;
        *(_QWORD *)(v163 + 104) = &protocol witness table for UInt64;
        *(_QWORD *)(v163 + 72) = v165;
        v166 = v204;
        DateInterval.start.getter(v163);
        v167 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v168 = v220;
        v169 = dispatch thunk of CustomStringConvertible.description.getter(v220, v167);
        v171 = v170;
        v172 = *(uint64_t (**)(char *, uint64_t))(v219 + 8);
        v173 = v172(v166, v168);
        v224 = (char *)v172;
        v174 = v229;
        *(_QWORD *)(v163 + 136) = &type metadata for String;
        *(_QWORD *)(v163 + 144) = v174;
        *(_QWORD *)(v163 + 112) = v169;
        *(_QWORD *)(v163 + 120) = v171;
        DateInterval.end.getter(v173);
        v217 = v167;
        v175 = dispatch thunk of CustomStringConvertible.description.getter(v168, v167);
        v177 = v176;
        v172(v166, v168);
        *(_QWORD *)(v163 + 176) = &type metadata for String;
        *(_QWORD *)(v163 + 184) = v174;
        *(_QWORD *)(v163 + 152) = v175;
        *(_QWORD *)(v163 + 160) = v177;
        os_log(_:dso:log:_:_:)(v225, &_mh_execute_header, v226, "FindMyAirPodsFamilyShareEnvelope.initialPrimaryKeys: %lu...%lu (%@ - %@)", 72, 2, v163);
        v178 = swift_bridgeObjectRelease();
        LODWORD(v225) = static os_log_type_t.default.getter(v178);
        v226 = (char *)qword_1011B7D30;
        v179 = swift_allocObject(v228, 192, 7);
        *(_OWORD *)(v179 + 16) = v233;
        v180 = *v208;
        *(_QWORD *)(v179 + 56) = &type metadata for UInt64;
        *(_QWORD *)(v179 + 32) = v180;
        v181 = v205;
        v182 = *v205;
        *(_QWORD *)(v179 + 96) = &type metadata for UInt64;
        *(_QWORD *)(v179 + 104) = &protocol witness table for UInt64;
        *(_QWORD *)(v179 + 64) = &protocol witness table for UInt64;
        *(_QWORD *)(v179 + 72) = v182;
        DateInterval.start.getter(v179);
        v183 = dispatch thunk of CustomStringConvertible.description.getter(v168, v167);
        v185 = v184;
        v186 = v224;
        v187 = ((uint64_t (*)(char *, uint64_t))v224)(v166, v168);
        *(_QWORD *)(v179 + 136) = &type metadata for String;
        *(_QWORD *)(v179 + 144) = v174;
        *(_QWORD *)(v179 + 112) = v183;
        *(_QWORD *)(v179 + 120) = v185;
        DateInterval.end.getter(v187);
        v188 = dispatch thunk of CustomStringConvertible.description.getter(v168, v217);
        v190 = v189;
        ((void (*)(char *, uint64_t))v186)(v166, v168);
        *(_QWORD *)(v179 + 176) = &type metadata for String;
        *(_QWORD *)(v179 + 184) = v174;
        v158 = v209;
        *(_QWORD *)(v179 + 152) = v188;
        *(_QWORD *)(v179 + 160) = v190;
        v152 = v227;
        v151 = v196;
        os_log(_:dso:log:_:_:)(v225, &_mh_execute_header, v226, "FindMyAirPodsFamilyShareEnvelope.initialSecondaryKeys: %lu...%lu (%@ - %@)", 74, 2, v179);
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v181, type metadata accessor for FamilyCryptoKeysV1);
        sub_1000126B0((uint64_t)v208, type metadata accessor for FamilyCryptoKeysV1);
      }
      sub_1000126B0((uint64_t)v158, type metadata accessor for FamilyCryptoKeysV1);
      sub_1000126B0((uint64_t)v201, type metadata accessor for FamilyCryptoKeysV1);
      v130 = v215;
    }
    v191 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v191);
    *(&v195 - 8) = v151;
    *((_BYTE *)&v195 - 56) = v231;
    v193 = (unint64_t)v234;
    v192 = v235;
    *(&v195 - 6) = v230;
    *(&v195 - 5) = v192;
    v194 = v232;
    *(&v195 - 4) = v193;
    *(&v195 - 3) = v194;
    *(&v195 - 2) = v223;
    static Transaction.named<A>(_:with:)("BeaconSharingManager.sendFindMyAirPodsFamilyShareMessage", 56, 2, sub_1003D6DE8, &v195 - 10);

    sub_1000126B0(v130, type metadata accessor for FindMyAirPodsFamilyShareEnvelope);
    sub_1000126B0((uint64_t)v218, type metadata accessor for SharedBeaconRecord);
    v198(v222, v152);
    sub_10001BC14(v192, v193);
    swift_bridgeObjectRelease();
  }
}

void sub_10039FBDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  int64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t);
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  _QWORD *v94;
  unint64_t v95;
  unint64_t v96;
  int64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  id v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  int64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t (*v122)(uint64_t);
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  int64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t inited;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t (*v176)(char *, uint64_t);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void (*v191)(char *, uint64_t);
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void (*v204)(char *, uint64_t);
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t *v212;
  uint64_t *v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t MyAccessoryFamilyShareEnvelope;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _OWORD *v224;
  id v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  int64_t v230;
  unint64_t v231;
  char *v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  char v239[8];
  _QWORD v240[4];
  uint64_t v241;

  v227 = a1;
  v226 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v226 - 8);
  __chkstk_darwin(v226);
  v207 = (char *)&v202 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v234 = type metadata accessor for TimeBasedKey(0);
  v221 = *(_QWORD *)(v234 - 8);
  v4 = __chkstk_darwin(v234);
  v232 = (char *)&v202 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v233 = (uint64_t)&v202 - v6;
  v236 = type metadata accessor for FamilyCryptoKeysV2(0);
  *(_QWORD *)&v235 = *(_QWORD *)(v236 - 8);
  v7 = __chkstk_darwin(v236);
  v211 = (uint64_t *)((char *)&v202 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __chkstk_darwin(v7);
  v213 = (uint64_t *)((char *)&v202 - v10);
  v11 = __chkstk_darwin(v9);
  v212 = (uint64_t *)((char *)&v202 - v12);
  v13 = __chkstk_darwin(v11);
  v215 = (char *)&v202 - v14;
  v15 = __chkstk_darwin(v13);
  v237 = (char *)&v202 - v16;
  __chkstk_darwin(v15);
  v214 = (char *)&v202 - v17;
  MyAccessoryFamilyShareEnvelope = type metadata accessor for FindMyAccessoryFamilyShareEnvelope(0);
  v18 = __chkstk_darwin(MyAccessoryFamilyShareEnvelope);
  v220 = (uint64_t)&v202 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v222 = (uint64_t)&v202 - v20;
  v218 = type metadata accessor for UUID(0);
  v217 = *(_QWORD *)(v218 - 8);
  __chkstk_darwin(v218);
  v229 = (uint64_t)&v202 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v22);
  v216 = (uint64_t)&v202 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = type metadata accessor for SharedBeaconRecord(0);
  v24 = __chkstk_darwin(v210);
  v209 = (uint64_t)&v202 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v223 = (uint64_t)&v202 - v27;
  __chkstk_darwin(v26);
  v224 = (_OWORD *)((char *)&v202 - v28);
  v29 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v29);
  v31 = (char *)&v202 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v238 = type metadata accessor for DateInterval(0);
  v32 = *(_QWORD *)(v238 - 8);
  v33 = __chkstk_darwin(v238);
  v35 = (char *)&v202 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v33);
  v38 = (char *)&v202 - v37;
  __chkstk_darwin(v36);
  v228 = (char *)&v202 - v39;
  v40 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (!v40)
  {
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    return;
  }
  v41 = v40;
  v42 = objc_msgSend(v40, "aa_primaryAppleAccount");

  if (!v42)
  {
    type metadata accessor for SPOwnerSessionError(0);
    v54 = v53;
    v241 = 7;
    v55 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v56 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v57 = _BridgedStoredNSError.init(_:userInfo:)(v240, &v241, v55, v54, v56);
    swift_willThrow(v57);
    return;
  }
  v225 = v42;
  v43 = type metadata accessor for ShareInstruction(0);
  v44 = v227;
  v45 = v227 + *(int *)(v43 + 24);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v31, 1, 1, v226);
  sub_1003A13FC((uint64_t)v38, (uint64_t)v35, v45, (uint64_t)v31);
  sub_100004048((uint64_t)v31, (uint64_t *)&unk_1010EA690);
  v46 = v35;
  v47 = *(void (**)(char *, uint64_t))(v32 + 8);
  v208 = v2;
  v48 = v238;
  v47(v46, v238);
  v49 = (uint64_t)v228;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v228, v38, v48);
  v50 = v230;
  sub_1003A1C78(v44, v49);
  if (v50)
  {
    v47((char *)v49, v48);

    return;
  }
  v58 = v51;
  v231 = v32;
  v59 = v208;
  v205 = v52;
  v206 = 0;
  v204 = v47;
  v203 = v1;
  v60 = objc_msgSend(v225, "username");
  if (!v60)
    goto LABEL_40;
  v61 = v60;
  v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
  v64 = v63;

  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v62, v64);
  if (!v67)
  {
    v98 = v238;
    swift_bridgeObjectRelease();
    v99 = swift_bridgeObjectRelease();
    v100 = static os_log_type_t.error.getter(v99);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v101 = qword_1011B7D30;
    v102 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v103 = swift_allocObject(v102, 72, 7);
    *(_OWORD *)(v103 + 16) = xmmword_100E22B00;
    v104 = v225;
    v105 = objc_msgSend(v225, "username");
    if (v105)
    {
      v106 = v105;
      v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v105);
      v109 = v108;

      *(_QWORD *)(v103 + 56) = &type metadata for String;
      *(_QWORD *)(v103 + 64) = sub_10001AA00();
      *(_QWORD *)(v103 + 32) = v107;
      *(_QWORD *)(v103 + 40) = v109;
      os_log(_:dso:log:_:_:)(v100, &_mh_execute_header, v101, "Could not create MessagingDestination from: %@", 46, 2, v103);
      swift_bridgeObjectRelease();
      type metadata accessor for SPOwnerSessionError(0);
      v111 = v110;
      v241 = 0;
      v112 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v113 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
      v114 = _BridgedStoredNSError.init(_:userInfo:)(v240, &v241, v112, v111, v113);
      swift_willThrow(v114);

      v204(v228, v98);
      return;
    }
    goto LABEL_41;
  }
  v68 = v65;
  v69 = v66;
  v70 = v67;
  v71 = v216;
  sub_10005972C(v45, v216, type metadata accessor for OwnedBeaconRecord);
  v72 = v229;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v217 + 16))(v229, v227 + *(int *)(v43 + 32), v218);
  v73 = v58;
  v74 = v224;
  sub_100D3A34C(v68, v69, v70, 0, 0xE000000000000000, v71, v72, 1, v224);
  sub_10005972C((uint64_t)v74, v223, type metadata accessor for SharedBeaconRecord);
  v75 = *(_QWORD *)(v73 + 16);
  v76 = _swiftEmptyArrayStorage;
  v77 = v238;
  if (v75)
  {
    v240[0] = _swiftEmptyArrayStorage;
    sub_10009AF60(0, v75, 0);
    v78 = (*(unsigned __int8 *)(v221 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v221 + 80);
    v218 = v73;
    v79 = v73 + v78;
    v229 = *(_QWORD *)(v221 + 72);
    v80 = type metadata accessor for FamilyCryptoKeysV2;
    v81 = (uint64_t)v214;
    do
    {
      v230 = v75;
      v82 = v233;
      sub_10005972C(v79, v233, type metadata accessor for TimeBasedKey);
      v83 = v80;
      v84 = v232;
      sub_10005972C(v82, (uint64_t)v232, type metadata accessor for TimeBasedKey);
      v85 = v77;
      v87 = v236;
      v86 = v237;
      *(_QWORD *)v237 = *(_QWORD *)v84;
      v88 = v234;
      (*(void (**)(char *, char *, uint64_t))(v231 + 16))(&v86[*(int *)(v87 + 20)], &v84[*(int *)(v234 + 20)], v85);
      v89 = &v84[*(int *)(v88 + 24)];
      v90 = *((_QWORD *)v89 + 2);
      v91 = *((_QWORD *)v89 + 3);
      sub_10001BBBC(v90, v91);
      v92 = (uint64_t)v84;
      v80 = v83;
      sub_1000126B0(v92, type metadata accessor for TimeBasedKey);
      v93 = (uint64_t *)&v86[*(int *)(v87 + 24)];
      *v93 = v90;
      v93[1] = v91;
      sub_1000126EC((uint64_t)v86, v81, v83);
      sub_1000126B0(v82, type metadata accessor for TimeBasedKey);
      v94 = (_QWORD *)v240[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v240[0]) & 1) == 0)
      {
        sub_10009AF60(0, v94[2] + 1, 1);
        v94 = (_QWORD *)v240[0];
      }
      v96 = v94[2];
      v95 = v94[3];
      v97 = v230;
      if (v96 >= v95 >> 1)
      {
        sub_10009AF60(v95 > 1, v96 + 1, 1);
        v94 = (_QWORD *)v240[0];
      }
      v94[2] = v96 + 1;
      sub_1000126EC(v81, (uint64_t)v94+ ((*(unsigned __int8 *)(v235 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v235 + 80))+ *(_QWORD *)(v235 + 72) * v96, v83);
      v79 += v229;
      v75 = v97 - 1;
      v77 = v238;
    }
    while (v75);
    swift_bridgeObjectRelease();
    v59 = v208;
    v76 = _swiftEmptyArrayStorage;
  }
  else
  {
    swift_bridgeObjectRelease();
    v94 = _swiftEmptyArrayStorage;
  }
  v115 = *(_QWORD *)(v205 + 16);
  if (v115)
  {
    v218 = (uint64_t)v94;
    v240[0] = _swiftEmptyArrayStorage;
    v116 = v205;
    sub_10009AF60(0, v115, 0);
    v117 = v116 + ((*(unsigned __int8 *)(v221 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v221 + 80));
    v229 = *(_QWORD *)(v221 + 72);
    v118 = type metadata accessor for FamilyCryptoKeysV2;
    v119 = (uint64_t)v215;
    v120 = v233;
    v121 = v236;
    do
    {
      v230 = v115;
      sub_10005972C(v117, v120, type metadata accessor for TimeBasedKey);
      v122 = v118;
      v123 = v232;
      sub_10005972C(v120, (uint64_t)v232, type metadata accessor for TimeBasedKey);
      v124 = v237;
      *(_QWORD *)v237 = *(_QWORD *)v123;
      v125 = v234;
      (*(void (**)(char *, char *, uint64_t))(v231 + 16))(&v124[*(int *)(v121 + 20)], &v123[*(int *)(v234 + 20)], v77);
      v126 = &v123[*(int *)(v125 + 24)];
      v127 = *((_QWORD *)v126 + 2);
      v128 = *((_QWORD *)v126 + 3);
      sub_10001BBBC(v127, v128);
      v129 = (uint64_t)v123;
      v118 = v122;
      sub_1000126B0(v129, type metadata accessor for TimeBasedKey);
      v130 = (uint64_t *)&v124[*(int *)(v121 + 24)];
      *v130 = v127;
      v130[1] = v128;
      sub_1000126EC((uint64_t)v124, v119, v122);
      sub_1000126B0(v120, type metadata accessor for TimeBasedKey);
      v76 = (_QWORD *)v240[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v240[0]) & 1) == 0)
      {
        sub_10009AF60(0, v76[2] + 1, 1);
        v76 = (_QWORD *)v240[0];
      }
      v132 = v76[2];
      v131 = v76[3];
      v133 = v230;
      if (v132 >= v131 >> 1)
      {
        sub_10009AF60(v131 > 1, v132 + 1, 1);
        v76 = (_QWORD *)v240[0];
      }
      v76[2] = v132 + 1;
      sub_1000126EC(v119, (uint64_t)v76+ ((*(unsigned __int8 *)(v235 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v235 + 80))+ *(_QWORD *)(v235 + 72) * v132, v118);
      v117 += v229;
      v115 = v133 - 1;
      v77 = v238;
    }
    while (v115);
    swift_bridgeObjectRelease();
    v134 = v208;
    v94 = (_QWORD *)v218;
  }
  else
  {
    v134 = v59;
    swift_bridgeObjectRelease();
  }
  v135 = v222;
  sub_1000126EC(v223, v222, type metadata accessor for SharedBeaconRecord);
  v136 = MyAccessoryFamilyShareEnvelope;
  v137 = *(int *)(MyAccessoryFamilyShareEnvelope + 20);
  *(_QWORD *)(v135 + v137) = v94;
  v138 = *(int *)(v136 + 24);
  *(_QWORD *)(v135 + v138) = v76;
  v139 = v220;
  sub_10005972C(v135, v220, type metadata accessor for FindMyAccessoryFamilyShareEnvelope);
  v140 = v206;
  sub_10038A8E4(0, 3, v139, &qword_1010FA3F0, type metadata accessor for FindMyAccessoryFamilyShareEnvelope, &qword_1010FA3F8, (uint64_t (*)(void))sub_1003D6F70, (uint64_t)v240);
  v141 = v228;
  v206 = v140;
  if (v140)
  {

    sub_1000126B0(v135, type metadata accessor for FindMyAccessoryFamilyShareEnvelope);
    sub_1000126B0((uint64_t)v224, type metadata accessor for SharedBeaconRecord);
    v204(v141, v238);
  }
  else
  {
    LODWORD(v230) = LOBYTE(v240[0]);
    v229 = v240[1];
    v232 = (char *)v240[3];
    v233 = v240[2];
    v142 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
    inited = swift_initStackObject(v142, v239);
    v234 = xmmword_100E22B00;
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_QWORD *)(inited + 32) = 0x44495344746C41;
    *(_QWORD *)(inited + 40) = 0xE700000000000000;
    v144 = *(_QWORD *)(v227 + 16);
    *(_QWORD *)(inited + 48) = *(_QWORD *)(v227 + 8);
    *(_QWORD *)(inited + 56) = v144;
    swift_bridgeObjectRetain(v144);
    v231 = sub_1006B8DC4(inited);
    v145 = static os_log_type_t.default.getter(v231);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v146 = qword_1011B7D30;
    v223 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v147 = swift_allocObject(v223, 72, 7);
    *(_OWORD *)(v147 + 16) = v234;
    v148 = v209;
    sub_10005972C(v135, v209, type metadata accessor for SharedBeaconRecord);
    v149 = String.init<A>(describing:)(v148, v210);
    v151 = v150;
    *(_QWORD *)(v147 + 56) = &type metadata for String;
    *(_QWORD *)&v234 = sub_10001AA00();
    *(_QWORD *)(v147 + 64) = v234;
    *(_QWORD *)(v147 + 32) = v149;
    *(_QWORD *)(v147 + 40) = v151;
    v152 = v222;
    os_log(_:dso:log:_:_:)(v145, &_mh_execute_header, v146, "FindMyAccessoryFamilyShareEnvelope.sharedBeacon: %@", 51, 2, v147);
    swift_bridgeObjectRelease();
    v153 = *(_QWORD *)(v152 + v137);
    v154 = *(_QWORD *)(v153 + 16);
    v155 = v212;
    if (v154)
    {
      v156 = v235;
      v157 = (*(unsigned __int8 *)(v235 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v235 + 80);
      v158 = v153 + v157;
      sub_10005972C(v153 + v157, (uint64_t)v212, type metadata accessor for FamilyCryptoKeysV2);
      v159 = v154 - 1;
      v160 = *(_QWORD *)(v156 + 72);
      v161 = v213;
      sub_10005972C(v158 + v160 * v159, (uint64_t)v213, type metadata accessor for FamilyCryptoKeysV2);
      v162 = *(_QWORD *)(v152 + v138);
      v163 = *(_QWORD *)(v162 + 16);
      v164 = (uint64_t)v155;
      if (v163)
      {
        v165 = v162 + v157;
        sub_10005972C(v162 + v157, (uint64_t)v211, type metadata accessor for FamilyCryptoKeysV2);
        v166 = sub_10005972C(v165 + (v163 - 1) * v160, (uint64_t)v237, type metadata accessor for FamilyCryptoKeysV2);
        LODWORD(v220) = static os_log_type_t.default.getter(v166);
        v221 = qword_1011B7D30;
        v167 = swift_allocObject(v223, 192, 7);
        v235 = xmmword_100E26E00;
        *(_OWORD *)(v167 + 16) = xmmword_100E26E00;
        v168 = *v155;
        *(_QWORD *)(v167 + 56) = &type metadata for UInt64;
        *(_QWORD *)(v167 + 64) = &protocol witness table for UInt64;
        *(_QWORD *)(v167 + 32) = v168;
        v169 = *v161;
        *(_QWORD *)(v167 + 96) = &type metadata for UInt64;
        *(_QWORD *)(v167 + 104) = &protocol witness table for UInt64;
        *(_QWORD *)(v167 + 72) = v169;
        v170 = v207;
        DateInterval.start.getter(v167);
        v171 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v172 = v226;
        v218 = v171;
        v173 = dispatch thunk of CustomStringConvertible.description.getter(v226, v171);
        v175 = v174;
        v176 = *(uint64_t (**)(char *, uint64_t))(v134 + 8);
        v177 = v176(v170, v172);
        MyAccessoryFamilyShareEnvelope = (uint64_t)v176;
        v178 = v234;
        *(_QWORD *)(v167 + 136) = &type metadata for String;
        *(_QWORD *)(v167 + 144) = v178;
        v179 = v178;
        *(_QWORD *)(v167 + 112) = v173;
        *(_QWORD *)(v167 + 120) = v175;
        DateInterval.end.getter(v177);
        v180 = dispatch thunk of CustomStringConvertible.description.getter(v172, v171);
        v182 = v181;
        v176(v170, v172);
        *(_QWORD *)(v167 + 176) = &type metadata for String;
        *(_QWORD *)(v167 + 184) = v179;
        *(_QWORD *)(v167 + 152) = v180;
        *(_QWORD *)(v167 + 160) = v182;
        os_log(_:dso:log:_:_:)(v220, &_mh_execute_header, v221, "FindMyAccessoryFamilyShareEnvelope.initialPrimaryKeys: %lu...%lu (%@ - %@)", 74, 2, v167);
        v183 = swift_bridgeObjectRelease();
        LODWORD(v220) = static os_log_type_t.default.getter(v183);
        v221 = qword_1011B7D30;
        v184 = swift_allocObject(v223, 192, 7);
        *(_OWORD *)(v184 + 16) = v235;
        v185 = *v211;
        *(_QWORD *)(v184 + 56) = &type metadata for UInt64;
        *(_QWORD *)(v184 + 32) = v185;
        v186 = *(_QWORD *)v237;
        *(_QWORD *)(v184 + 96) = &type metadata for UInt64;
        *(_QWORD *)(v184 + 104) = &protocol witness table for UInt64;
        *(_QWORD *)(v184 + 64) = &protocol witness table for UInt64;
        *(_QWORD *)(v184 + 72) = v186;
        DateInterval.start.getter(v184);
        v187 = v218;
        v188 = dispatch thunk of CustomStringConvertible.description.getter(v172, v218);
        v190 = v189;
        v191 = (void (*)(char *, uint64_t))MyAccessoryFamilyShareEnvelope;
        v192 = ((uint64_t (*)(char *, uint64_t))MyAccessoryFamilyShareEnvelope)(v170, v172);
        v193 = v234;
        *(_QWORD *)(v184 + 136) = &type metadata for String;
        *(_QWORD *)(v184 + 144) = v193;
        *(_QWORD *)(v184 + 112) = v188;
        *(_QWORD *)(v184 + 120) = v190;
        v164 = (uint64_t)v212;
        DateInterval.end.getter(v192);
        v194 = dispatch thunk of CustomStringConvertible.description.getter(v172, v187);
        v196 = v195;
        v191(v170, v172);
        v161 = v213;
        v197 = v234;
        *(_QWORD *)(v184 + 176) = &type metadata for String;
        *(_QWORD *)(v184 + 184) = v197;
        *(_QWORD *)(v184 + 152) = v194;
        *(_QWORD *)(v184 + 160) = v196;
        v152 = v222;
        os_log(_:dso:log:_:_:)(v220, &_mh_execute_header, v221, "FindMyAccessoryFamilyShareEnvelope.initialSecondaryKeys: %lu...%lu (%@ - %@)", 76, 2, v184);
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v237, type metadata accessor for FamilyCryptoKeysV2);
        sub_1000126B0((uint64_t)v211, type metadata accessor for FamilyCryptoKeysV2);
      }
      sub_1000126B0((uint64_t)v161, type metadata accessor for FamilyCryptoKeysV2);
      sub_1000126B0(v164, type metadata accessor for FamilyCryptoKeysV2);
    }
    v198 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v198);
    *(&v202 - 8) = v203;
    *((_BYTE *)&v202 - 56) = v230;
    v200 = (unint64_t)v232;
    v199 = v233;
    *(&v202 - 6) = v229;
    *(&v202 - 5) = v199;
    v201 = v231;
    *(&v202 - 4) = v200;
    *(&v202 - 3) = v201;
    *(&v202 - 2) = v227;
    static Transaction.named<A>(_:with:)("BeaconSharingManager.sendFindMyAccessoryFamilyShareMessage", 58, 2, sub_1003D6F08, &v202 - 10);

    sub_1000126B0(v152, type metadata accessor for FindMyAccessoryFamilyShareEnvelope);
    sub_1000126B0((uint64_t)v224, type metadata accessor for SharedBeaconRecord);
    v204(v228, v238);
    sub_10001BC14(v199, v200);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1003A0F7C(uint64_t a1, uint64_t a2, int a3, void (*a4)(os_log_t, uint64_t), uint64_t a5, void (*a6)(_QWORD, _QWORD, _QWORD), uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  int v24;
  void (*v25)(_QWORD, _QWORD, _QWORD);
  uint64_t v27;
  void (*v28)(os_log_t, uint64_t);
  uint64_t v29;
  void (*v30)(_QWORD, _QWORD, _QWORD);

  v29 = a5;
  v30 = a6;
  v28 = a4;
  v13 = type metadata accessor for SharingRampState(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10037F308(v15);
  v16 = sub_10001A9A8(&qword_1010F9FC8);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 2, v16);
  sub_1000126B0((uint64_t)v15, type metadata accessor for SharingRampState);
  if (v17 == 2)
    v18 = (void *)sub_1003BB198((uint64_t)&off_10104A1B8);
  else
    v18 = &_swiftEmptySetSingleton;
  sub_10047BB78(a7);
  v20 = v19;
  v21 = (unsigned __int8 *)(a8 + *(int *)(type metadata accessor for ShareInstruction(0) + 28));
  v22 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v21 + 1);
  v23 = *((_QWORD *)v21 + 2);
  v24 = *v21;
  v25 = (void (*)(_QWORD, _QWORD, _QWORD))sub_1003BB198((uint64_t)&off_10104A1E0);
  swift_retain();
  sub_1003C5E90(a3, v28, v29, v30, v20, v24, v22, v23, 1, 0, 1, 0, v25, (uint64_t)v18, 0, a2, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1003A1150(uint64_t a1, uint64_t a2, int a3, void (*a4)(os_log_t, uint64_t), uint64_t a5, void (*a6)(_QWORD, _QWORD, _QWORD), uint64_t a7)
{
  unsigned __int8 *v10;
  void (*v11)(_QWORD, _QWORD, _QWORD);
  uint64_t v12;
  int v13;
  Swift::Int v14;
  _QWORD *v15;
  void (*v16)(_QWORD, _QWORD, _QWORD);

  v10 = (unsigned __int8 *)(a7 + *(int *)(type metadata accessor for ShareInstruction(0) + 28));
  v11 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v10 + 1);
  v12 = *((_QWORD *)v10 + 2);
  v13 = *v10;
  v14 = sub_1003BB198((uint64_t)&off_10104A208);
  swift_retain();
  v15 = (_QWORD *)sub_1006B9A24((uint64_t)_swiftEmptyArrayStorage);
  v16 = (void (*)(_QWORD, _QWORD, _QWORD))sub_100CA7EC0((uint64_t)&off_10104A230);
  sub_1003C70B4(a3, a4, a5, a6, v15, v13, v11, v12, 0, 0, 1, 0, v16, v14, 0, a2, a1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003A125C(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v7 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10000F9B8(a1, (uint64_t)v9, &qword_1010F4868);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v7);
  if ((_DWORD)EnumCaseMultiPayload != 1)
    return sub_100004048((uint64_t)v9, &qword_1010F4868);
  v11 = *v9;
  v12 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v13 = qword_1011B7D30;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  v22 = v11;
  swift_errorRetain(v11);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v17 = String.init<A>(describing:)(&v22, v16);
  v19 = v18;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 64) = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v17;
  *(_QWORD *)(v15 + 40) = v19;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, a3, a4, 2, v15);
  swift_bridgeObjectRelease();
  return swift_errorRelease(v11);
}

uint64_t sub_1003A13FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char v71;
  uint64_t (*v72)(char *, uint64_t);
  uint64_t v73;
  char v74;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;

  v80 = a4;
  v86 = a2;
  v87 = (char *)a3;
  v82 = a1;
  v91 = type metadata accessor for DateInterval(0);
  v81 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v5 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v84);
  v78 = (uint64_t)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010F47D0);
  __chkstk_darwin(v7);
  v9 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v11 = __chkstk_darwin(v10);
  v79 = (uint64_t)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v76 - v13;
  v15 = type metadata accessor for Date(0);
  v83 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v77 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v76 - v19;
  v21 = __chkstk_darwin(v18);
  v85 = (char *)&v76 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v76 - v24;
  v26 = __chkstk_darwin(v23);
  v88 = (char *)&v76 - v27;
  v28 = __chkstk_darwin(v26);
  v89 = (char *)&v76 - v29;
  __chkstk_darwin(v28);
  v31 = (char *)&v76 - v30;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v32 = v92;
  v33 = sub_100C1AF54(v92);
  v90 = v31;
  static Date.trustedNow.getter((uint64_t)v31);
  v34 = sub_100C1AFCC(v32);
  swift_bridgeObjectRelease();
  if (v33)
  {
    if (v33 == -1)
    {
      sub_1008892B4((uint64_t)v9);
      v35 = type metadata accessor for KeyAlignmentRecord(0);
      v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v9, 1, v35);
      v37 = v90;
      if (v36 == 1)
      {
        sub_100004048((uint64_t)v9, (uint64_t *)&unk_1010F47D0);
        v38 = 1;
        v39 = v83;
      }
      else
      {
        v39 = v83;
        (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v14, &v9[*(int *)(v35 + 32)], v15);
        sub_1000126B0((uint64_t)v9, type metadata accessor for KeyAlignmentRecord);
        v38 = 0;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v14, v38, 1, v15);
      v41 = v78;
      sub_10005972C((uint64_t)v87, v78, type metadata accessor for OwnedBeaconRecord);
      v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48))(v14, 1, v15);
      v40 = v89;
      if (v42 == 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v25, v41 + *(int *)(v84 + 32), v15);
        sub_1000126B0(v41, type metadata accessor for OwnedBeaconRecord);
        sub_100004048((uint64_t)v14, (uint64_t *)&unk_1010EA690);
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v40, v25, v15);
      }
      else
      {
        sub_1000126B0(v41, type metadata accessor for OwnedBeaconRecord);
        v43 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
        v43(v25, v14, v15);
        v43(v40, v25, v15);
      }
    }
    else
    {
      v37 = v90;
      if (v33 < 1)
      {
        v40 = v89;
        v44 = (*(uint64_t (**)(char *, char *, uint64_t))(v83 + 16))(v89, v90, v15);
        v45 = static os_log_type_t.error.getter(v44);
        if (qword_1010EA250 != -1)
          swift_once(&qword_1010EA250, sub_100B5D964);
        v46 = qword_1011B7D30;
        v47 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v48 = swift_allocObject(v47, 72, 7);
        *(_OWORD *)(v48 + 16) = xmmword_100E22B00;
        *(_QWORD *)(v48 + 56) = &type metadata for Int;
        *(_QWORD *)(v48 + 64) = &protocol witness table for Int;
        *(_QWORD *)(v48 + 32) = v33;
        os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, v46, "Unexpected configValue: %ld", v76);
        swift_bridgeObjectRelease();
      }
      else
      {
        v40 = v89;
        Date.addingTimeInterval(_:)((double)-v33 * 60.0 * 60.0);
      }
      v39 = v83;
    }
  }
  else
  {
    v39 = v83;
    v40 = v89;
    v37 = v90;
    (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v89, v90, v15);
  }
  v49 = v88;
  Date.addingTimeInterval(_:)((double)v34 * 60.0);
  v50 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  v51 = v85;
  v50(v85, v40, v15);
  v50(v20, v49, v15);
  DateInterval.init(start:end:)(v51, v20);
  v50(v51, v37, v15);
  v50(v20, v49, v15);
  v52 = DateInterval.init(start:end:)(v51, v20);
  LODWORD(v83) = static os_log_type_t.default.getter(v52);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v78 = qword_1011B7D30;
  v53 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v54 = swift_allocObject(v53, 152, 7);
  *(_OWORD *)(v54 + 16) = xmmword_100E221E0;
  v55 = UUID.uuidString.getter(v54);
  v57 = v56;
  *(_QWORD *)(v54 + 56) = &type metadata for String;
  v58 = sub_10001AA00();
  *(_QWORD *)(v54 + 64) = v58;
  *(_QWORD *)(v54 + 32) = v55;
  *(_QWORD *)(v54 + 40) = v57;
  v59 = sub_100006204(&qword_1010F2168, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
  v87 = v5;
  v60 = v91;
  v61 = dispatch thunk of CustomStringConvertible.description.getter(v91, v59);
  *(_QWORD *)(v54 + 96) = &type metadata for String;
  *(_QWORD *)(v54 + 104) = v58;
  *(_QWORD *)(v54 + 72) = v61;
  *(_QWORD *)(v54 + 80) = v62;
  v63 = dispatch thunk of CustomStringConvertible.description.getter(v60, v59);
  *(_QWORD *)(v54 + 136) = &type metadata for String;
  *(_QWORD *)(v54 + 144) = v58;
  *(_QWORD *)(v54 + 112) = v63;
  *(_QWORD *)(v54 + 120) = v64;
  os_log(_:dso:log:_:_:)(v83, &_mh_execute_header, v78, "Share intervals for %@: %@ (private: %@)", 40, 2, v54);
  swift_bridgeObjectRelease();
  v65 = v79;
  sub_10000F9B8(v80, v79, (uint64_t *)&unk_1010EA690);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v65, 1, v15) == 1)
  {
    v66 = *(void (**)(char *, uint64_t))(v39 + 8);
    v66(v88, v15);
    v66(v89, v15);
    v66(v90, v15);
    sub_100004048(v65, (uint64_t *)&unk_1010EA690);
    v67 = (uint64_t)v87;
  }
  else
  {
    v68 = v77;
    v69 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 32))(v77, v65, v15);
    v70 = v85;
    v67 = (uint64_t)v87;
    DateInterval.end.getter(v69);
    v71 = static Date.< infix(_:_:)(v68, v70);
    v72 = *(uint64_t (**)(char *, uint64_t))(v39 + 8);
    v73 = v72(v70, v15);
    if ((v71 & 1) != 0)
    {
      v50(v70, v68, v15);
      v73 = DateInterval.end.setter(v70);
    }
    DateInterval.end.getter(v73);
    v74 = static Date.< infix(_:_:)(v68, v70);
    v72(v70, v15);
    if ((v74 & 1) != 0)
    {
      v50(v70, v68, v15);
      DateInterval.end.setter(v70);
    }
    v72(v68, v15);
    v72(v88, v15);
    v72(v89, v15);
    v72(v90, v15);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 32))(v82, v67, v91);
}

void sub_1003A1C78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v2 + 144);
  v6 = type metadata accessor for ShareInstruction(0);
  sub_1003B32F8(a1 + *(int *)(v6 + 24), a2, 0, 0, 0, v5);
  __asm { BR              X10 }
}

uint64_t sub_1003A1CF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v3 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v4 = qword_1011B7D30;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
  v7 = type metadata accessor for OwnedBeaconRecord(0);
  v8 = UUID.uuidString.getter(v7);
  v10 = v9;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 64) = sub_10001AA00();
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v10;
  swift_bridgeObjectRelease();
  v11 = sub_1003D1008();
  v12 = swift_allocError(&type metadata for BeaconSharingManager.BeaconSharingKeyError, v11, 0, 0);
  swift_willThrow(v12);
  sub_100217264(v1, v2, 0);
  return v1;
}

uint64_t sub_1003A212C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, __int16, Swift::Int, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  char v23;
  __int16 v24;

  sub_10047BB78(a7);
  v14 = v13;
  v15 = (unsigned __int8 *)(a8 + *(int *)(type metadata accessor for ShareInstruction(0) + 28));
  v16 = *((_QWORD *)v15 + 1);
  v17 = *((_QWORD *)v15 + 2);
  v18 = *(_QWORD *)(*(_QWORD *)(a2 + 408) + 16);
  v19 = *v15;
  v20 = sub_1003BB198(a9);
  swift_retain();
  v21 = sub_100CA7EC0((uint64_t)_swiftEmptyArrayStorage);
  v24 = 0;
  v23 = 1;
  a10(a3, a4, a5, a6, v14, v19, v16, v17, v23, v18, v24, v20, v21, 0, 0, a2, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003A2248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(os_log_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t MyAccessoryFamilyShareResponseEnvelope;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD, _QWORD);
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  void (*v32)(_QWORD, _QWORD, _QWORD);
  uint64_t v33;
  _QWORD v35[7];
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void (*v39)(os_log_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  _QWORD aBlock[4];

  v40 = a2;
  v41 = a3;
  v4 = (void (*)(os_log_t, uint64_t))type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *((_QWORD *)v4 - 1);
  v39 = v4;
  __chkstk_darwin(v4);
  v37 = (_QWORD *)((char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for DispatchQoS(0);
  v35[6] = *(_QWORD *)(v6 - 8);
  v36 = v6;
  __chkstk_darwin(v6);
  v35[5] = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v35[3] = *(_QWORD *)(v8 - 8);
  v35[4] = v8;
  __chkstk_darwin(v8);
  v35[2] = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v35[0] = *((_QWORD *)v10 - 1);
  v11 = *(_QWORD *)(v35[0] + 64);
  __chkstk_darwin(v10);
  v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MyAccessoryFamilyShareResponseEnvelope = type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope(0);
  v14 = __chkstk_darwin(MyAccessoryFamilyShareResponseEnvelope);
  v16 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)v35 - v17;
  v19 = a1 + v10[5];
  v20 = type metadata accessor for UUID(0);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
  v21(v18, v19, v20);
  v21(&v18[*(int *)(MyAccessoryFamilyShareResponseEnvelope + 20)], a1 + v10[6], v20);
  sub_10005972C((uint64_t)v18, (uint64_t)v16, type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope);
  sub_10038A8E4(2, 2, (uint64_t)v16, &qword_1010FA150, type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope, &qword_1010FA158, (uint64_t (*)(void))sub_1003D0F8C, (uint64_t)aBlock);
  v22 = aBlock[2];
  v23 = (void (*)(_QWORD, _QWORD, _QWORD))aBlock[3];
  LODWORD(v16) = LOBYTE(aBlock[0]);
  v24 = (unsigned __int8 *)(a1 + v10[7]);
  v38 = *((_QWORD *)v24 + 1);
  v39 = (void (*)(os_log_t, uint64_t))aBlock[1];
  v37 = (_QWORD *)*((_QWORD *)v24 + 2);
  LODWORD(v36) = *v24;
  sub_10005972C(a1, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
  v25 = *(unsigned __int8 *)(v35[0] + 80);
  v26 = (v25 + 24) & ~v25;
  v27 = (v11 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(&unk_101072C30, v27 + 16, v25 | 7);
  *(_QWORD *)(v28 + 16) = v35[1];
  sub_1000126EC((uint64_t)v12, v28 + v26, type metadata accessor for SharedBeaconRecord);
  v29 = (_QWORD *)(v28 + v27);
  v30 = v41;
  *v29 = v40;
  v29[1] = v30;
  swift_retain();
  swift_retain();
  v31 = (_QWORD *)sub_1006B9A24((uint64_t)_swiftEmptyArrayStorage);
  v32 = (void (*)(_QWORD, _QWORD, _QWORD))sub_100CA7EC0((uint64_t)&off_10104A2A8);
  v33 = sub_100CA7EC0((uint64_t)_swiftEmptyArrayStorage);
  sub_10038E1C0((int)v16, v39, v22, v23, v31, v36, v38, (void (*)(_QWORD, _QWORD, _QWORD))v37, 0, 0, 1, 0, v32, v33, 0, (void (*)(void ***))sub_1003D0D78, (void (*)(void ***))v28);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v22, (unint64_t)v23);
  return sub_1000126B0((uint64_t)v18, type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope);
}

uint64_t sub_1003A2874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD aBlock[6];

  v37 = a4;
  v31 = a2;
  v32 = a3;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v7 - 8);
  v36 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v17);
  v19 = (uint64_t *)((char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v19, &qword_1010F4868);
  if (swift_getEnumCaseMultiPayload(v19, v17) == 1)
  {
    v20 = *v19;
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
    v21 = (void *)static OS_dispatch_queue.global(qos:)(v16);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v22 = (_QWORD *)swift_allocObject(&unk_101072C58, 40, 7);
    v22[2] = v37;
    v22[3] = a5;
    v22[4] = v20;
    aBlock[4] = sub_1003D9B44;
    aBlock[5] = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101072C70;
    v23 = _Block_copy(aBlock);
    swift_retain();
    v24 = swift_errorRetain(v20);
    static DispatchQoS.unspecified.getter(v24);
    v38 = _swiftEmptyArrayStorage;
    v25 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v26 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v27 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v28 = v36;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v26, v27, v36, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v23);
    _Block_release(v23);

    swift_errorRelease(v20);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v28);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v34);
    return swift_release();
  }
  else
  {
    v30 = swift_allocObject(&unk_101072CA8, 32, 7);
    *(_QWORD *)(v30 + 16) = v37;
    *(_QWORD *)(v30 + 24) = a5;
    swift_retain();
    sub_1007A0FE4(v32, 0, (void (*)(uint64_t))sub_1003D9B7C, 0, (void (*)(uint64_t))sub_1003D0D98, (void (*)(uint64_t))v30);
    swift_release();
    return sub_100004048((uint64_t)v19, &qword_1010F4868);
  }
}

uint64_t sub_1003A2BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  void **aBlock;
  uint64_t v68;
  uint64_t (*v69)(uint64_t);
  void *v70;
  uint64_t (*v71)();
  _QWORD *v72;

  v58 = a2;
  v59 = a3;
  v57 = a1;
  v65 = type metadata accessor for DispatchWorkItemFlags(0);
  v63 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v62 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for DispatchQoS(0);
  v61 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v60 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS.QoSClass(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SharedBeaconRecord(0);
  v56 = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(v56 + 64);
  v11 = __chkstk_darwin(v9);
  v12 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v55 - v13;
  v15 = sub_10001A9A8(&qword_1010F21B0);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(v57, (uint64_t)v17, &qword_1010F21B0);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = *v17;
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchQoS.QoSClass.default(_:), v5);
    v19 = (void *)static OS_dispatch_queue.global(qos:)(v8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v20 = (_QWORD *)swift_allocObject(&unk_101072CD0, 40, 7);
    v21 = v59;
    v20[2] = v58;
    v20[3] = v21;
    v20[4] = v18;
    v71 = sub_1003D9B44;
    v72 = v20;
    aBlock = _NSConcreteStackBlock;
    v68 = 1107296256;
    v69 = sub_100016FB8;
    v70 = &unk_101072CE8;
    v22 = _Block_copy(&aBlock);
    swift_retain();
    v23 = swift_errorRetain(v18);
    v24 = v60;
    static DispatchQoS.unspecified.getter(v23);
    v66 = _swiftEmptyArrayStorage;
    v25 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v26 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v27 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v28 = v62;
    v29 = v26;
    v30 = v65;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v66, v29, v27, v65, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v24, v28, v22);
    _Block_release(v22);

    swift_errorRelease(v18);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v28, v30);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v24, v64);
  }
  else
  {
    v57 = v5;
    v31 = sub_1000126EC((uint64_t)v17, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
    v32 = static os_log_type_t.default.getter(v31);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v33 = qword_1011B7D30;
    v34 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v35 = swift_allocObject(v34, 72, 7);
    *(_OWORD *)(v35 + 16) = xmmword_100E22B00;
    sub_10005972C((uint64_t)v14, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
    v36 = String.init<A>(describing:)(v12, v9);
    v38 = v37;
    *(_QWORD *)(v35 + 56) = &type metadata for String;
    *(_QWORD *)(v35 + 64) = sub_10001AA00();
    *(_QWORD *)(v35 + 32) = v36;
    *(_QWORD *)(v35 + 40) = v38;
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Successfully accepted share: %@", 31, 2, v35);
    swift_bridgeObjectRelease();
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v39 = v57;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchQoS.QoSClass.default(_:), v57);
    v40 = (void *)static OS_dispatch_queue.global(qos:)(v8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v39);
    sub_10005972C((uint64_t)v14, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
    v41 = *(unsigned __int8 *)(v56 + 80);
    v42 = (v41 + 32) & ~v41;
    v43 = swift_allocObject(&unk_101072D20, v42 + v10, v41 | 7);
    v44 = v59;
    *(_QWORD *)(v43 + 16) = v58;
    *(_QWORD *)(v43 + 24) = v44;
    sub_1000126EC((uint64_t)v12, v43 + v42, type metadata accessor for SharedBeaconRecord);
    v71 = sub_1003D0D54;
    v72 = (_QWORD *)v43;
    aBlock = _NSConcreteStackBlock;
    v68 = 1107296256;
    v69 = sub_100016FB8;
    v70 = &unk_101072D38;
    v45 = _Block_copy(&aBlock);
    v46 = swift_retain();
    v47 = v60;
    static DispatchQoS.unspecified.getter(v46);
    v66 = _swiftEmptyArrayStorage;
    v48 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v49 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v50 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v51 = v62;
    v52 = v49;
    v53 = v65;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v66, v52, v50, v65, v48);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v47, v51, v45);
    _Block_release(v45);

    (*(void (**)(char *, uint64_t))(v63 + 8))(v51, v53);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v47, v64);
    sub_1000126B0((uint64_t)v14, type metadata accessor for SharedBeaconRecord);
  }
  return swift_release();
}

uint64_t sub_1003A3224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD aBlock[6];

  v50 = a4;
  v51 = a5;
  v42[1] = a2;
  v43 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  __chkstk_darwin(v6);
  v47 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v45 = *(_QWORD *)(v8 - 8);
  v46 = v8;
  __chkstk_darwin(v8);
  v44 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SharedBeaconRecord(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v17 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v18);
  v20 = (_QWORD *)((char *)v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v20, &qword_1010F4868);
  if (swift_getEnumCaseMultiPayload(v20, v18) == 1)
  {
    v21 = *v20;
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
    v22 = (void *)static OS_dispatch_queue.global(qos:)(v13);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v23 = (_QWORD *)swift_allocObject(&unk_101073310, 40, 7);
    v24 = v51;
    v23[2] = v50;
    v23[3] = v24;
    v23[4] = v21;
    aBlock[4] = sub_1000170EC;
    aBlock[5] = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101073328;
    v25 = _Block_copy(aBlock);
    swift_retain();
    v26 = swift_errorRetain(v21);
    v27 = v44;
    static DispatchQoS.unspecified.getter(v26);
    v52 = _swiftEmptyArrayStorage;
    v28 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v29 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v30 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v31 = v47;
    v32 = v29;
    v33 = v49;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v32, v30, v49, v28);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v27, v31, v25);
    _Block_release(v25);

    swift_errorRelease(v21);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v31, v33);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v27, v46);
    return swift_release();
  }
  else
  {
    v35 = v43;
    sub_10005972C(v43, (uint64_t)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SharedBeaconRecord);
    v36 = *(unsigned __int8 *)(v15 + 80);
    v37 = (v36 + 16) & ~v36;
    v38 = (v16 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
    v39 = swift_allocObject(&unk_101073360, v38 + 16, v36 | 7);
    sub_1000126EC((uint64_t)v17, v39 + v37, type metadata accessor for SharedBeaconRecord);
    v40 = (_QWORD *)(v39 + v38);
    v41 = v51;
    *v40 = v50;
    v40[1] = v41;
    swift_retain();
    sub_1009F9E28(v35, (uint64_t)sub_1003D1D08, v39);
    swift_release();
    return sub_100004048((uint64_t)v20, &qword_1010F4868);
  }
}

uint64_t sub_1003A3608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  void **aBlock;
  uint64_t v58;
  uint64_t (*v59)(uint64_t);
  void *v60;
  void *v61;
  uint64_t v62;

  v51 = a3;
  v52 = a4;
  v50 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v54 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v53 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SharedBeaconRecord(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = v8;
  if (a1)
  {
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    v19 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v20 = swift_allocObject(&unk_1010733D8, 32, 7);
    v21 = v52;
    *(_QWORD *)(v20 + 16) = v51;
    *(_QWORD *)(v20 + 24) = v21;
    v61 = sub_1003D9728;
    v62 = v20;
    aBlock = _NSConcreteStackBlock;
    v58 = 1107296256;
    v59 = sub_100016FB8;
    v60 = &unk_1010733F0;
    v22 = _Block_copy(&aBlock);
    v23 = swift_retain();
    static DispatchQoS.unspecified.getter(v23);
    v56 = _swiftEmptyArrayStorage;
    v24 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v25 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v26 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v25, v26, v5, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v22);
    _Block_release(v22);

    (*(void (**)(char *, uint64_t))(v54 + 8))(v7, v5);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v10, v55);
  }
  else
  {
    v27 = v50;
    v48 = v7;
    v49 = v5;
    v28 = static os_log_type_t.default.getter(v16);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v29 = qword_1011B7D30;
    v30 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v31 = swift_allocObject(v30, 72, 7);
    *(_OWORD *)(v31 + 16) = xmmword_100E22B00;
    sub_10005972C(v27, (uint64_t)v18, type metadata accessor for SharedBeaconRecord);
    v32 = String.init<A>(describing:)(v18, v15);
    v34 = v33;
    *(_QWORD *)(v31 + 56) = &type metadata for String;
    *(_QWORD *)(v31 + 64) = sub_10001AA00();
    *(_QWORD *)(v31 + 32) = v32;
    *(_QWORD *)(v31 + 40) = v34;
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Successfully declined share %@", 30, 2, v31);
    swift_bridgeObjectRelease();
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    v35 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v36 = swift_allocObject(&unk_101073388, 32, 7);
    v37 = v52;
    *(_QWORD *)(v36 + 16) = v51;
    *(_QWORD *)(v36 + 24) = v37;
    v61 = sub_1002E3C58;
    v62 = v36;
    aBlock = _NSConcreteStackBlock;
    v58 = 1107296256;
    v59 = sub_100016FB8;
    v60 = &unk_1010733A0;
    v38 = _Block_copy(&aBlock);
    v39 = swift_retain();
    v40 = v10;
    static DispatchQoS.unspecified.getter(v39);
    v56 = _swiftEmptyArrayStorage;
    v41 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v42 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v43 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v45 = v48;
    v44 = v49;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v42, v43, v49, v41);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v40, v45, v38);
    _Block_release(v38);

    (*(void (**)(char *, uint64_t))(v54 + 8))(v45, v44);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v40, v55);
  }
  return swift_release();
}

uint64_t sub_1003A3B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(os_log_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD, _QWORD, _QWORD);
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void (*v28)(_QWORD, _QWORD, _QWORD);
  uint64_t v29;
  _QWORD v31[3];
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void (*v35)(os_log_t, uint64_t);
  uint64_t v36;
  _QWORD aBlock[4];

  v36 = a2;
  v5 = (void (*)(os_log_t, uint64_t))type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *((_QWORD *)v5 - 1);
  v35 = v5;
  __chkstk_darwin(v5);
  v33 = (_QWORD *)((char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for DispatchQoS(0);
  v31[2] = *(_QWORD *)(v7 - 8);
  v32 = v7;
  __chkstk_darwin(v7);
  v31[1] = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  __chkstk_darwin(v9);
  v10 = type metadata accessor for SharedBeaconRecord(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  __chkstk_darwin(v14);
  v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v17 + 16))(v16, a1 + *(int *)(v10 + 20));
  sub_10038A278(2, 1, (uint64_t)v16, (uint64_t)aBlock);
  v18 = aBlock[2];
  v19 = (void (*)(_QWORD, _QWORD, _QWORD))aBlock[3];
  v20 = LOBYTE(aBlock[0]);
  v21 = (unsigned __int8 *)(a1 + *(int *)(v10 + 28));
  v34 = *((_QWORD *)v21 + 1);
  v35 = (void (*)(os_log_t, uint64_t))aBlock[1];
  v33 = (_QWORD *)*((_QWORD *)v21 + 2);
  LODWORD(v32) = *v21;
  sub_10005972C(a1, (uint64_t)v13, type metadata accessor for SharedBeaconRecord);
  v22 = *(unsigned __int8 *)(v11 + 80);
  v23 = (v22 + 24) & ~v22;
  v24 = (v12 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = swift_allocObject(&unk_101072AA0, v24 + 16, v22 | 7);
  *(_QWORD *)(v25 + 16) = v31[0];
  sub_1000126EC((uint64_t)v13, v25 + v23, type metadata accessor for SharedBeaconRecord);
  v26 = (_QWORD *)(v25 + v24);
  *v26 = v36;
  v26[1] = a3;
  swift_retain();
  swift_retain();
  v27 = (_QWORD *)sub_1006B9A24((uint64_t)_swiftEmptyArrayStorage);
  v28 = (void (*)(_QWORD, _QWORD, _QWORD))sub_100CA7EC0((uint64_t)&off_10104A2D0);
  v29 = sub_100CA7EC0((uint64_t)_swiftEmptyArrayStorage);
  sub_10038E1C0(v20, v35, v18, v19, v27, v32, v34, (void (*)(_QWORD, _QWORD, _QWORD))v33, 0, 0, 1, 0, v28, v29, 0, (void (*)(void ***))sub_1003D0CF8, (void (*)(void ***))v25);
  sub_10001BC14(v18, (unint64_t)v19);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003A40B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD aBlock[6];

  v37 = a4;
  v31 = a2;
  v32 = a3;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v7 - 8);
  v36 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v17);
  v19 = (uint64_t *)((char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v19, &qword_1010F4868);
  if (swift_getEnumCaseMultiPayload(v19, v17) == 1)
  {
    v20 = *v19;
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
    v21 = (void *)static OS_dispatch_queue.global(qos:)(v16);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v22 = (_QWORD *)swift_allocObject(&unk_101072AC8, 40, 7);
    v22[2] = v37;
    v22[3] = a5;
    v22[4] = v20;
    aBlock[4] = sub_1003D9B44;
    aBlock[5] = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101072AE0;
    v23 = _Block_copy(aBlock);
    swift_retain();
    v24 = swift_errorRetain(v20);
    static DispatchQoS.unspecified.getter(v24);
    v38 = _swiftEmptyArrayStorage;
    v25 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v26 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v27 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v28 = v36;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v26, v27, v36, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v23);
    _Block_release(v23);

    swift_errorRelease(v20);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v28);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v34);
    return swift_release();
  }
  else
  {
    v30 = swift_allocObject(&unk_101072B18, 32, 7);
    *(_QWORD *)(v30 + 16) = v37;
    *(_QWORD *)(v30 + 24) = a5;
    swift_retain();
    sub_1007A0FE4(v32, 0, (void (*)(uint64_t))sub_1003A442C, 0, (void (*)(uint64_t))sub_1003D0D18, (void (*)(uint64_t))v30);
    swift_release();
    return sub_100004048((uint64_t)v19, &qword_1010F4868);
  }
}

uint64_t sub_1003A442C(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for SharedBeaconRecord(0);
  *(_BYTE *)(a1 + *(int *)(result + 52)) = 1;
  return result;
}

uint64_t sub_1003A445C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  void **aBlock;
  uint64_t v68;
  uint64_t (*v69)(uint64_t);
  void *v70;
  uint64_t (*v71)();
  _QWORD *v72;

  v58 = a2;
  v59 = a3;
  v57 = a1;
  v65 = type metadata accessor for DispatchWorkItemFlags(0);
  v63 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v62 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for DispatchQoS(0);
  v61 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v60 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS.QoSClass(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SharedBeaconRecord(0);
  v56 = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(v56 + 64);
  v11 = __chkstk_darwin(v9);
  v12 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v55 - v13;
  v15 = sub_10001A9A8(&qword_1010F21B0);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(v57, (uint64_t)v17, &qword_1010F21B0);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = *v17;
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchQoS.QoSClass.default(_:), v5);
    v19 = (void *)static OS_dispatch_queue.global(qos:)(v8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v20 = (_QWORD *)swift_allocObject(&unk_101072B40, 40, 7);
    v21 = v59;
    v20[2] = v58;
    v20[3] = v21;
    v20[4] = v18;
    v71 = sub_1003D0D2C;
    v72 = v20;
    aBlock = _NSConcreteStackBlock;
    v68 = 1107296256;
    v69 = sub_100016FB8;
    v70 = &unk_101072B58;
    v22 = _Block_copy(&aBlock);
    swift_retain();
    v23 = swift_errorRetain(v18);
    v24 = v60;
    static DispatchQoS.unspecified.getter(v23);
    v66 = _swiftEmptyArrayStorage;
    v25 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v26 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v27 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v28 = v62;
    v29 = v26;
    v30 = v65;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v66, v29, v27, v65, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v24, v28, v22);
    _Block_release(v22);

    swift_errorRelease(v18);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v28, v30);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v24, v64);
  }
  else
  {
    v57 = v5;
    v31 = sub_1000126EC((uint64_t)v17, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
    v32 = static os_log_type_t.default.getter(v31);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v33 = qword_1011B7D30;
    v34 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v35 = swift_allocObject(v34, 72, 7);
    *(_OWORD *)(v35 + 16) = xmmword_100E22B00;
    sub_10005972C((uint64_t)v14, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
    v36 = String.init<A>(describing:)(v12, v9);
    v38 = v37;
    *(_QWORD *)(v35 + 56) = &type metadata for String;
    *(_QWORD *)(v35 + 64) = sub_10001AA00();
    *(_QWORD *)(v35 + 32) = v36;
    *(_QWORD *)(v35 + 40) = v38;
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Successfully accepted share: %@", 31, 2, v35);
    swift_bridgeObjectRelease();
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v39 = v57;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchQoS.QoSClass.default(_:), v57);
    v40 = (void *)static OS_dispatch_queue.global(qos:)(v8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v39);
    sub_10005972C((uint64_t)v14, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
    v41 = *(unsigned __int8 *)(v56 + 80);
    v42 = (v41 + 32) & ~v41;
    v43 = swift_allocObject(&unk_101072B90, v42 + v10, v41 | 7);
    v44 = v59;
    *(_QWORD *)(v43 + 16) = v58;
    *(_QWORD *)(v43 + 24) = v44;
    sub_1000126EC((uint64_t)v12, v43 + v42, type metadata accessor for SharedBeaconRecord);
    v71 = sub_1003D0D54;
    v72 = (_QWORD *)v43;
    aBlock = _NSConcreteStackBlock;
    v68 = 1107296256;
    v69 = sub_100016FB8;
    v70 = &unk_101072BA8;
    v45 = _Block_copy(&aBlock);
    v46 = swift_retain();
    v47 = v60;
    static DispatchQoS.unspecified.getter(v46);
    v66 = _swiftEmptyArrayStorage;
    v48 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v49 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v50 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v51 = v62;
    v52 = v49;
    v53 = v65;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v66, v52, v50, v65, v48);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v47, v51, v45);
    _Block_release(v45);

    (*(void (**)(char *, uint64_t))(v63 + 8))(v51, v53);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v47, v64);
    sub_1000126B0((uint64_t)v14, type metadata accessor for SharedBeaconRecord);
  }
  return swift_release();
}

uint64_t sub_1003A4A98(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v5 = sub_10001A9A8(&qword_1010F21B0);
  __chkstk_darwin(v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a3, (uint64_t)v7, type metadata accessor for SharedBeaconRecord);
  swift_storeEnumTagMultiPayload(v7, v5, 0);
  a1(v7);
  return sub_100004048((uint64_t)v7, &qword_1010F21B0);
}

uint64_t sub_1003A4B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD aBlock[6];

  v50 = a4;
  v51 = a5;
  v42[1] = a2;
  v43 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  __chkstk_darwin(v6);
  v47 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v45 = *(_QWORD *)(v8 - 8);
  v46 = v8;
  __chkstk_darwin(v8);
  v44 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SharedBeaconRecord(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v17 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v18);
  v20 = (_QWORD *)((char *)v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v20, &qword_1010F4868);
  if (swift_getEnumCaseMultiPayload(v20, v18) == 1)
  {
    v21 = *v20;
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
    v22 = (void *)static OS_dispatch_queue.global(qos:)(v13);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v23 = (_QWORD *)swift_allocObject(&unk_101073180, 40, 7);
    v24 = v51;
    v23[2] = v50;
    v23[3] = v24;
    v23[4] = v21;
    aBlock[4] = sub_1000170EC;
    aBlock[5] = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101073198;
    v25 = _Block_copy(aBlock);
    swift_retain();
    v26 = swift_errorRetain(v21);
    v27 = v44;
    static DispatchQoS.unspecified.getter(v26);
    v52 = _swiftEmptyArrayStorage;
    v28 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v29 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v30 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v31 = v47;
    v32 = v29;
    v33 = v49;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v32, v30, v49, v28);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v27, v31, v25);
    _Block_release(v25);

    swift_errorRelease(v21);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v31, v33);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v27, v46);
    return swift_release();
  }
  else
  {
    v35 = v43;
    sub_10005972C(v43, (uint64_t)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SharedBeaconRecord);
    v36 = *(unsigned __int8 *)(v15 + 80);
    v37 = (v36 + 16) & ~v36;
    v38 = (v16 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
    v39 = swift_allocObject(&unk_1010731D0, v38 + 16, v36 | 7);
    sub_1000126EC((uint64_t)v17, v39 + v37, type metadata accessor for SharedBeaconRecord);
    v40 = (_QWORD *)(v39 + v38);
    v41 = v51;
    *v40 = v50;
    v40[1] = v41;
    swift_retain();
    sub_1009F9E28(v35, (uint64_t)sub_1003D1944, v39);
    swift_release();
    return sub_100004048((uint64_t)v20, &qword_1010F4868);
  }
}

uint64_t sub_1003A4F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  void **aBlock;
  uint64_t v58;
  uint64_t (*v59)(uint64_t);
  void *v60;
  void *v61;
  uint64_t v62;

  v51 = a3;
  v52 = a4;
  v50 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v54 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v53 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SharedBeaconRecord(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = v8;
  if (a1)
  {
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    v19 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v20 = swift_allocObject(&unk_101073248, 32, 7);
    v21 = v52;
    *(_QWORD *)(v20 + 16) = v51;
    *(_QWORD *)(v20 + 24) = v21;
    v61 = sub_1003D1950;
    v62 = v20;
    aBlock = _NSConcreteStackBlock;
    v58 = 1107296256;
    v59 = sub_100016FB8;
    v60 = &unk_101073260;
    v22 = _Block_copy(&aBlock);
    v23 = swift_retain();
    static DispatchQoS.unspecified.getter(v23);
    v56 = _swiftEmptyArrayStorage;
    v24 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v25 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v26 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v25, v26, v5, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v22);
    _Block_release(v22);

    (*(void (**)(char *, uint64_t))(v54 + 8))(v7, v5);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v10, v55);
  }
  else
  {
    v27 = v50;
    v48 = v7;
    v49 = v5;
    v28 = static os_log_type_t.default.getter(v16);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v29 = qword_1011B7D30;
    v30 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v31 = swift_allocObject(v30, 72, 7);
    *(_OWORD *)(v31 + 16) = xmmword_100E22B00;
    sub_10005972C(v27, (uint64_t)v18, type metadata accessor for SharedBeaconRecord);
    v32 = String.init<A>(describing:)(v18, v15);
    v34 = v33;
    *(_QWORD *)(v31 + 56) = &type metadata for String;
    *(_QWORD *)(v31 + 64) = sub_10001AA00();
    *(_QWORD *)(v31 + 32) = v32;
    *(_QWORD *)(v31 + 40) = v34;
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Successfully declined share %@", 30, 2, v31);
    swift_bridgeObjectRelease();
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    v35 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v36 = swift_allocObject(&unk_1010731F8, 32, 7);
    v37 = v52;
    *(_QWORD *)(v36 + 16) = v51;
    *(_QWORD *)(v36 + 24) = v37;
    v61 = sub_1002E3C58;
    v62 = v36;
    aBlock = _NSConcreteStackBlock;
    v58 = 1107296256;
    v59 = sub_100016FB8;
    v60 = &unk_101073210;
    v38 = _Block_copy(&aBlock);
    v39 = swift_retain();
    v40 = v10;
    static DispatchQoS.unspecified.getter(v39);
    v56 = _swiftEmptyArrayStorage;
    v41 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v42 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v43 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v45 = v48;
    v44 = v49;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v42, v43, v49, v41);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v40, v45, v38);
    _Block_release(v38);

    (*(void (**)(char *, uint64_t))(v54 + 8))(v45, v44);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v40, v55);
  }
  return swift_release();
}

uint64_t sub_1003A545C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD aBlock[7];

  v63 = a4;
  v64 = a5;
  v55 = a3;
  v53 = a2;
  v62 = a1;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v60 = *(_QWORD *)(v5 - 8);
  v61 = v5;
  __chkstk_darwin(v5);
  v59 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v57 = *(_QWORD *)(v7 - 8);
  v58 = v7;
  __chkstk_darwin(v7);
  v56 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for ShareRecord(0);
  v13 = *(_QWORD *)(v54 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = __chkstk_darwin(v54);
  v16 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v53 - v17;
  v19 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v19);
  v21 = (uint64_t *)((char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(v62, (uint64_t)v21, &qword_1010F4868);
  if (swift_getEnumCaseMultiPayload(v21, v19) == 1)
  {
    v22 = *v21;
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
    v23 = (void *)static OS_dispatch_queue.global(qos:)(v12);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v24 = (_QWORD *)swift_allocObject(&unk_101071AB0, 40, 7);
    v25 = v64;
    v24[2] = v63;
    v24[3] = v25;
    v24[4] = v22;
    aBlock[4] = sub_1000170EC;
    aBlock[5] = v24;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101071AC8;
    v26 = _Block_copy(aBlock);
    swift_retain();
    v27 = swift_errorRetain(v22);
    v28 = v56;
    static DispatchQoS.unspecified.getter(v27);
    v65 = _swiftEmptyArrayStorage;
    v29 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v30 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v31 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v32 = v59;
    v33 = v30;
    v34 = v61;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v65, v33, v31, v61, v29);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v28, v32, v26);
    _Block_release(v26);

    swift_errorRelease(v22);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v32, v34);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v28, v58);
    return swift_release();
  }
  else
  {
    v36 = v53;
    v62 = *(_QWORD *)(v53 + 144);
    v37 = v55;
    sub_10005972C(v55, (uint64_t)v18, type metadata accessor for ShareRecord);
    v38 = *(unsigned __int8 *)(v13 + 80);
    v39 = (v38 + 16) & ~v38;
    v40 = (v14 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    v41 = (v40 + 15) & 0xFFFFFFFFFFFFFFF8;
    v42 = swift_allocObject(&unk_101071B00, v41 + 16, v38 | 7);
    sub_1000126EC((uint64_t)v18, v42 + v39, type metadata accessor for ShareRecord);
    *(_QWORD *)(v42 + v40) = v36;
    v43 = (_QWORD *)(v42 + v41);
    v44 = v64;
    *v43 = v63;
    v43[1] = v44;
    swift_retain();
    v45 = swift_retain();
    v46 = static os_log_type_t.default.getter(v45);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v47 = qword_1011B7D38;
    v48 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v49 = swift_allocObject(v48, 72, 7);
    *(_OWORD *)(v49 + 16) = xmmword_100E22B00;
    sub_10005972C(v37, (uint64_t)v16, type metadata accessor for ShareRecord);
    v50 = String.init<A>(describing:)(v16, v54);
    v52 = v51;
    *(_QWORD *)(v49 + 56) = &type metadata for String;
    *(_QWORD *)(v49 + 64) = sub_10001AA00();
    *(_QWORD *)(v49 + 32) = v50;
    *(_QWORD *)(v49 + 40) = v52;
    os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, v47, "Attempting to remove: %@", 24, 2, v49);
    swift_bridgeObjectRelease();
    swift_retain();
    sub_100867D70(v37, v62, (void (*)(uint64_t))sub_1003BB9EC, v42);
    swift_release_n(v42, 2);
    return sub_100004048((uint64_t)v21, &qword_1010F4868);
  }
}

uint64_t sub_1003A5964(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  void **aBlock;
  uint64_t v67;
  uint64_t (*v68)(uint64_t);
  void *v69;
  void *v70;
  uint64_t v71;

  v60 = a4;
  v61 = a5;
  v59 = a2;
  v64 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v63 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v62 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ShareRecord(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    v55 = v12;
    v56 = v11;
    v19 = v59;
    v57 = v6;
    v58 = v8;
    v20 = static os_log_type_t.default.getter(v16);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v21 = qword_1011B7D30;
    v22 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v23 = swift_allocObject(v22, 72, 7);
    *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
    sub_10005972C(v19, (uint64_t)v18, type metadata accessor for ShareRecord);
    v24 = String.init<A>(describing:)(v18, v15);
    v26 = v25;
    *(_QWORD *)(v23 + 56) = &type metadata for String;
    *(_QWORD *)(v23 + 64) = sub_10001AA00();
    *(_QWORD *)(v23 + 32) = v24;
    *(_QWORD *)(v23 + 40) = v26;
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Successfully unshared %@", 24, 2, v23);
    swift_bridgeObjectRelease();
    v27 = v19 + *(int *)(v15 + 20);
    sub_100C4FEA0(v27, 0);
    sub_100C4FEA0(v27, 5);
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v29 = v55;
    v28 = v56;
    (*(void (**)(char *, _QWORD, uint64_t))(v55 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v56);
    v30 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v28);
    v31 = swift_allocObject(&unk_101071B78, 32, 7);
    v32 = v61;
    *(_QWORD *)(v31 + 16) = v60;
    *(_QWORD *)(v31 + 24) = v32;
    v70 = sub_1002E3C58;
    v71 = v31;
    aBlock = _NSConcreteStackBlock;
    v67 = 1107296256;
    v68 = sub_100016FB8;
    v69 = &unk_101071B90;
    v33 = _Block_copy(&aBlock);
    v34 = swift_retain();
    static DispatchQoS.unspecified.getter(v34);
    v65 = _swiftEmptyArrayStorage;
    v35 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v36 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v37 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v39 = v63;
    v38 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v65, v36, v37, v64, v35);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v39, v33);
    _Block_release(v33);

    (*(void (**)(char *, uint64_t))(v57 + 8))(v39, v38);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v10, v58);
  }
  else
  {
    v40 = v6;
    sub_100C4FEA0(v59 + *(int *)(v15 + 20), 1);
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    v41 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v42 = swift_allocObject(&unk_101071B28, 32, 7);
    v43 = v61;
    *(_QWORD *)(v42 + 16) = v60;
    *(_QWORD *)(v42 + 24) = v43;
    v70 = sub_1003CDE58;
    v71 = v42;
    aBlock = _NSConcreteStackBlock;
    v67 = 1107296256;
    v68 = sub_100016FB8;
    v69 = &unk_101071B40;
    v44 = v8;
    v45 = _Block_copy(&aBlock);
    v46 = swift_retain();
    static DispatchQoS.unspecified.getter(v46);
    v65 = _swiftEmptyArrayStorage;
    v47 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v48 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v49 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v50 = v63;
    v51 = v48;
    v52 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v65, v51, v49, v64, v47);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v50, v45);
    _Block_release(v45);

    (*(void (**)(char *, uint64_t))(v40 + 8))(v50, v52);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v10, v44);
  }
  return swift_release();
}

void sub_1003A5EE4(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  type metadata accessor for SPOwnerSessionError(0);
  v6 = v5;
  v10 = a3;
  v7 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v8 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
  _BridgedStoredNSError.init(_:userInfo:)(&v11, &v10, v7, v6, v8);
  v9 = v11;
  a1(v11);

}

uint64_t sub_1003A5F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t (*v29)(char *, uint64_t);
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  char *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  char *v80;
  uint64_t (*v81)(char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93[16];
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;

  v79 = a7;
  v87 = a4;
  v88 = a5;
  v82 = a3;
  v9 = (int *)type metadata accessor for ShareRecord(0);
  __chkstk_darwin(v9);
  v77 = (uint64_t)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v11);
  v81 = (uint64_t (*)(char *, uint64_t))((char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for DateInterval(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v80 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v78 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v73 - v20;
  v22 = (unsigned __int8 *)(a1 + v9[9]);
  v86 = *v22;
  v23 = *((_QWORD *)v22 + 1);
  v84 = *((_QWORD *)v22 + 2);
  v85 = v23;
  v89 = a2;
  v24 = *(_QWORD *)(a2 + 408);
  v25 = v9[5];
  v83 = a1;
  v94 = v24;
  v95 = 5;
  v92 = a1 + v25;
  v96 = a1 + v25;
  v26 = v91;
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D9B50, v93, v16);
  v90 = v24;
  v91 = v26;
  v27 = v16;
  sub_100C5016C((uint64_t)v21, 5);
  LOBYTE(a2) = v28;
  v29 = *(uint64_t (**)(char *, uint64_t))(v17 + 8);
  v30 = v29(v21, v27);
  if ((a2 & 1) != 0)
  {
    v76 = v14;
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v32 = (uint64_t)v80;
    v33 = v82;
    v82 = v13;
    v31(v80, v33, v13);
    v34 = v83;
    v35 = v81;
    sub_10000F9B8(v83 + v9[8], (uint64_t)v81, (uint64_t *)&unk_1010EA690);
    if ((*(unsigned int (**)(uint64_t (*)(char *, uint64_t), uint64_t, uint64_t))(v17 + 48))(v35, 1, v27) == 1)
    {
      sub_100004048((uint64_t)v35, (uint64_t *)&unk_1010EA690);
    }
    else
    {
      v44 = v78;
      v45 = (*(uint64_t (**)(char *, uint64_t (*)(char *, uint64_t), uint64_t))(v17 + 32))(v78, v35, v27);
      DateInterval.end.getter(v45);
      v46 = static Date.< infix(_:_:)(v44, v21);
      v29(v21, v27);
      if ((v46 & 1) != 0)
      {
        v81 = v29;
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v21, v44, v27);
        v47 = v32;
        v48 = DateInterval.end.setter(v21);
        v74 = static os_log_type_t.default.getter(v48);
        v75 = v27;
        if (qword_1010EA250 != -1)
          swift_once(&qword_1010EA250, sub_100B5D964);
        v73 = qword_1011B7D30;
        v49 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v50 = swift_allocObject(v49, 112, 7);
        *(_OWORD *)(v50 + 16) = xmmword_100E22B10;
        v51 = v34;
        v52 = v77;
        sub_10005972C(v51, v77, type metadata accessor for ShareRecord);
        v53 = String.init<A>(describing:)(v52, v9);
        v55 = v54;
        *(_QWORD *)(v50 + 56) = &type metadata for String;
        v56 = sub_10001AA00();
        *(_QWORD *)(v50 + 64) = v56;
        *(_QWORD *)(v50 + 32) = v53;
        *(_QWORD *)(v50 + 40) = v55;
        v57 = sub_100006204(&qword_1010F2168, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
        v58 = dispatch thunk of CustomStringConvertible.description.getter(v82, v57);
        *(_QWORD *)(v50 + 96) = &type metadata for String;
        *(_QWORD *)(v50 + 104) = v56;
        *(_QWORD *)(v50 + 72) = v58;
        *(_QWORD *)(v50 + 80) = v59;
        os_log(_:dso:log:_:_:)(v74, &_mh_execute_header, v73, "Using truncated interval in distributeKeys for expiring share %@: %@", 68, 2, v50);
        swift_bridgeObjectRelease();
        v27 = v75;
        v29 = v81;
        v81(v44, v75);
        v32 = v47;
      }
      else
      {
        v29(v44, v27);
      }
    }
    static Date.trustedNow.getter((uint64_t)v21);
    sub_100C4FA44(v92, (uint64_t)v21, 5);
    v29(v21, v27);
    v60 = v91;
    sub_1003A65F4(v87, v32);
    v62 = v76;
    if (v60)
    {
      v63 = v32;
      v64 = static os_log_type_t.error.getter(v61);
      v65 = v82;
      if (qword_1010EA250 != -1)
        swift_once(&qword_1010EA250, sub_100B5D964);
      v66 = qword_1011B7D30;
      v67 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v68 = swift_allocObject(v67, 72, 7);
      *(_OWORD *)(v68 + 16) = xmmword_100E22B00;
      v97 = v60;
      swift_errorRetain(v60);
      v69 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v70 = String.init<A>(describing:)(&v97, v69);
      v72 = v71;
      *(_QWORD *)(v68 + 56) = &type metadata for String;
      *(_QWORD *)(v68 + 64) = sub_10001AA00();
      *(_QWORD *)(v68 + 32) = v70;
      *(_QWORD *)(v68 + 40) = v72;
      os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v66, "Failed in distributeKeys: %@", 28, 2, v68);
      swift_bridgeObjectRelease();
      sub_100C4FEA0(v92, 5);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8))(v63, v65);
      if (*v79)
        return swift_errorRelease(v60);
      else
        *v79 = v60;
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 8))(v32, v82);
    }
  }
  else
  {
    v36 = static os_log_type_t.default.getter(v30);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v37 = qword_1011B7D30;
    v38 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v39 = swift_allocObject(v38, 72, 7);
    *(_OWORD *)(v39 + 16) = xmmword_100E22B00;
    v40 = UUID.uuidString.getter(v39);
    v42 = v41;
    *(_QWORD *)(v39 + 56) = &type metadata for String;
    *(_QWORD *)(v39 + 64) = sub_10001AA00();
    *(_QWORD *)(v39 + 32) = v40;
    *(_QWORD *)(v39 + 40) = v42;
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "Skipping key update processing (requested too early): %@", 56, 2, v39);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1003A65F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for TimeBasedKey(0);
  v6 = __chkstk_darwin(v5);
  __chkstk_darwin(v6);
  sub_1003B32F8(a1, a2, 0, 0, 0, *(_QWORD *)(v2 + 144));
  __asm { BR              X10 }
}

uint64_t sub_1003A66C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v5 = qword_1011B7D30;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  v8 = type metadata accessor for OwnedBeaconRecord(0);
  v9 = UUID.uuidString.getter(v8);
  v11 = v10;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  swift_bridgeObjectRelease();
  v12 = sub_1003D1008();
  v13 = swift_allocError(&type metadata for BeaconSharingManager.BeaconSharingKeyError, v12, 0, 0);
  swift_willThrow(v13);
  return sub_100217264(v2, a2, 0);
}

uint64_t sub_1003A71E0(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(a3 + 16, v7, 0, 0);
  v5 = *(_QWORD *)(a3 + 16);
  swift_errorRetain(v5);
  a1(v5);
  return swift_errorRelease(v5);
}

uint64_t sub_1003A7244@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unsigned int v42;
  char *v43;
  void (*v44)(char *, uint64_t);

  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v41 - v14;
  v16 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a3, a1, v16);
  v17 = type metadata accessor for ShareRecord(0);
  v18 = a2 + *(int *)(v17 + 28);
  DateInterval.start.getter(v17);
  LOBYTE(a1) = static Date.> infix(_:_:)(v18, v15);
  v44 = *(void (**)(char *, uint64_t))(v10 + 8);
  v44(v15, v9);
  if ((a1 & 1) != 0)
  {
    v43 = v13;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v15, v18, v9);
    v19 = DateInterval.start.setter(v15);
    v42 = static os_log_type_t.default.getter(v19);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v41 = qword_1011B7D30;
    v20 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v21 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
    DateInterval.start.getter(v21);
    v22 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v9, v22);
    v25 = v24;
    v44(v15, v9);
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = sub_10001AA00();
    *(_QWORD *)(v21 + 32) = v23;
    *(_QWORD *)(v21 + 40) = v25;
    os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v41, "Clipping start of keyRequest interval to shareDate %@", 53, 2, v21);
    swift_bridgeObjectRelease();
    v13 = v43;
  }
  sub_10000F9B8(a2 + *(int *)(v17 + 32), (uint64_t)v8, (uint64_t *)&unk_1010EA690);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010EA690);
  v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v13, v8, v9);
  DateInterval.end.getter(v27);
  v28 = static Date.< infix(_:_:)(v13, v15);
  v29 = v44;
  v44(v15, v9);
  if ((v28 & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v15, v13, v9);
    v30 = DateInterval.end.setter(v15);
    v31 = static os_log_type_t.default.getter(v30);
    v32 = v13;
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v33 = qword_1011B7D30;
    v34 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v35 = swift_allocObject(v34, 72, 7);
    *(_OWORD *)(v35 + 16) = xmmword_100E22B00;
    DateInterval.end.getter(v35);
    v36 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v37 = dispatch thunk of CustomStringConvertible.description.getter(v9, v36);
    v39 = v38;
    v29(v15, v9);
    *(_QWORD *)(v35 + 56) = &type metadata for String;
    *(_QWORD *)(v35 + 64) = sub_10001AA00();
    *(_QWORD *)(v35 + 32) = v37;
    *(_QWORD *)(v35 + 40) = v39;
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v33, "Clipping end of keyRequest interval to expiration %@", 52, 2, v35);
    swift_bridgeObjectRelease();
    v40 = v32;
  }
  else
  {
    v40 = v13;
  }
  return ((uint64_t (*)(char *, uint64_t))v29)(v40, v9);
}

uint64_t sub_1003A7660(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, _QWORD, uint64_t);
  void (*v48)(char *, uint64_t);
  void (*v49)(char *, uint64_t (*)(uint64_t, uint64_t));
  _QWORD *v50;
  unsigned int (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t (*v67)(char *, char *, uint64_t);
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t);
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t (*v122)(uint64_t, uint64_t);
  _QWORD *v123;
  uint64_t v124;

  v119 = a2;
  v108 = type metadata accessor for DateInterval(0);
  v105 = *(_QWORD *)(v108 - 8);
  v3 = __chkstk_darwin(v108);
  v104 = (char *)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v107 = (uint64_t)&v98 - v6;
  v7 = __chkstk_darwin(v5);
  v111 = (char *)&v98 - v8;
  __chkstk_darwin(v7);
  v112 = (char *)&v98 - v9;
  v10 = type metadata accessor for Calendar.Component(0);
  v116 = *(char **)(v10 - 8);
  v117 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for Calendar(0);
  v115 = *((_QWORD *)v122 - 1);
  __chkstk_darwin(v122);
  v14 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v16 = __chkstk_darwin(v15);
  v113 = (char *)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v98 - v18;
  v121 = type metadata accessor for Date(0);
  v123 = *(_QWORD **)(v121 - 8);
  v20 = __chkstk_darwin(v121);
  v102 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v109 = (char *)&v98 - v23;
  v24 = __chkstk_darwin(v22);
  v114 = (char *)&v98 - v25;
  v26 = __chkstk_darwin(v24);
  v118 = (char *)&v98 - v27;
  __chkstk_darwin(v26);
  v29 = (char *)&v98 - v28;
  v30 = type metadata accessor for OwnedBeaconRecord(0);
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v98 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v120) = static os_log_type_t.default.getter(v31);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v34 = qword_1011B7D30;
  v110 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v35 = swift_allocObject(v110, 112, 7);
  *(_OWORD *)(v35 + 16) = xmmword_100E22B10;
  v106 = a1;
  sub_10005972C(a1, (uint64_t)v33, type metadata accessor for OwnedBeaconRecord);
  v101 = v30;
  v36 = String.init<A>(describing:)(v33, v30);
  v38 = v37;
  *(_QWORD *)(v35 + 56) = &type metadata for String;
  v39 = sub_10001AA00();
  *(_QWORD *)(v35 + 64) = v39;
  *(_QWORD *)(v35 + 32) = v36;
  *(_QWORD *)(v35 + 40) = v38;
  v40 = v119 + *(int *)(type metadata accessor for ShareRecord(0) + 36);
  v42 = *(_QWORD *)(v40 + 8);
  v41 = *(_QWORD *)(v40 + 16);
  v100 = v40;
  *(_QWORD *)(v35 + 96) = &type metadata for String;
  *(_QWORD *)(v35 + 104) = v39;
  v103 = v39;
  *(_QWORD *)(v35 + 72) = v42;
  *(_QWORD *)(v35 + 80) = v41;
  *(_QWORD *)&v43 = swift_bridgeObjectRetain(v41).n128_u64[0];
  os_log(_:dso:log:_:_:)(v120, &_mh_execute_header, v34, "Redistribute keys for %@ to %@", 30, 2, v35, v43);
  swift_bridgeObjectRelease();
  v44 = static Date.trustedNow.getter((uint64_t)v29);
  static Calendar.current.getter(v44);
  v45 = v116;
  v46 = v117;
  v47 = (void (*)(char *, _QWORD, uint64_t))*((_QWORD *)v116 + 13);
  v47(v12, enum case for Calendar.Component.day(_:), v117);
  v120 = v29;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v12, -7, v29, 0);
  v48 = (void (*)(char *, uint64_t))*((_QWORD *)v45 + 1);
  v48(v12, v46);
  v49 = *(void (**)(char *, uint64_t (*)(uint64_t, uint64_t)))(v115 + 8);
  v49(v14, v122);
  v50 = v123;
  v51 = (unsigned int (*)(char *, uint64_t, uint64_t))v123[6];
  v52 = v121;
  if (v51(v19, 1, v121) == 1)
  {
    v53 = sub_100004048((uint64_t)v19, (uint64_t *)&unk_1010EA690);
    v54 = static os_log_type_t.error.getter(v53);
    os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, qword_1011B7D30, "Could not calculate 7 days ago!", 31, 2, _swiftEmptyArrayStorage);
    return ((uint64_t (*)(char *, uint64_t))v50[1])(v120, v52);
  }
  v115 = v50[4];
  v116 = v14;
  ((void (*)(char *, char *, uint64_t))v115)(v118, v19, v52);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v99 = 0;
  v56 = v124;
  v57 = sub_100C1AFA4(v124);
  v58 = v116;
  static Calendar.current.getter(v57);
  v59 = v12;
  v47(v12, enum case for Calendar.Component.minute(_:), v46);
  v60 = (uint64_t)v113;
  v61 = v120;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v59, v57, v120, 0);
  v48(v59, v46);
  v49(v58, v122);
  v62 = v121;
  if (v51((char *)v60, 1, v121) == 1)
  {
    swift_bridgeObjectRelease();
    v63 = sub_100004048(v60, (uint64_t *)&unk_1010EA690);
    v64 = static os_log_type_t.error.getter(v63);
    os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, qword_1011B7D30, "Could not calculate maxLimit!", 29, 2, _swiftEmptyArrayStorage);
    v65 = (void (*)(char *, uint64_t))v123[1];
    v65(v118, v62);
    return ((uint64_t (*)(char *, uint64_t))v65)(v120, v62);
  }
  ((void (*)(char *, uint64_t, uint64_t))v115)(v114, v60, v62);
  v66 = sub_100C1AFE0(v56);
  v67 = (uint64_t (*)(char *, char *, uint64_t))v123[2];
  v68 = v109;
  result = v67(v109, v61, v62);
  if ((unsigned __int128)(v66 * (__int128)60) >> 64 != (60 * v66) >> 63)
  {
    __break(1u);
    goto LABEL_15;
  }
  DateInterval.init(start:duration:)(v68, (double)(60 * v66));
  v69 = sub_100C1AFF4(v56);
  swift_bridgeObjectRelease();
  result = v67(v68, v61, v62);
  if ((unsigned __int128)(v69 * (__int128)60) >> 64 != (60 * v69) >> 63)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v70 = v62;
  DateInterval.init(start:duration:)(v68, (double)(60 * v69));
  v67(v68, v118, v62);
  v71 = v102;
  v67(v102, v114, v70);
  v72 = (uint64_t)v104;
  DateInterval.init(start:end:)(v68, v71);
  v73 = v107;
  sub_1003A7244(v72, v119, v107);
  v74 = v108;
  v122 = *(uint64_t (**)(uint64_t, uint64_t))(v105 + 8);
  v75 = v122(v72, v108);
  LODWORD(v117) = static os_log_type_t.default.getter(v75);
  v119 = qword_1011B7D30;
  v76 = swift_allocObject(v110, 152, 7);
  *(_OWORD *)(v76 + 16) = xmmword_100E221E0;
  v77 = v106;
  v78 = UUID.uuidString.getter(v76);
  v79 = v103;
  *(_QWORD *)(v76 + 56) = &type metadata for String;
  *(_QWORD *)(v76 + 64) = v79;
  *(_QWORD *)(v76 + 32) = v78;
  *(_QWORD *)(v76 + 40) = v80;
  v81 = sub_100006204(&qword_1010F2168, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
  v82 = dispatch thunk of CustomStringConvertible.description.getter(v74, v81);
  *(_QWORD *)(v76 + 96) = &type metadata for String;
  *(_QWORD *)(v76 + 104) = v79;
  *(_QWORD *)(v76 + 72) = v82;
  *(_QWORD *)(v76 + 80) = v83;
  v84 = *(_QWORD *)(v100 + 8);
  v85 = *(_QWORD *)(v100 + 16);
  *(_QWORD *)(v76 + 136) = &type metadata for String;
  *(_QWORD *)(v76 + 144) = v79;
  *(_QWORD *)(v76 + 112) = v84;
  *(_QWORD *)(v76 + 120) = v85;
  *(_QWORD *)&v86 = swift_bridgeObjectRetain(v85).n128_u64[0];
  os_log(_:dso:log:_:_:)(v117, &_mh_execute_header, v119, "Redistibute for %@: %@ to %@", 28, 2, v76, v86);
  v87 = v112;
  swift_bridgeObjectRelease();
  v88 = v99;
  sub_1003A65F4(v77, v73);
  if (v88)
  {
    v90 = static os_log_type_t.error.getter(v89);
    v91 = qword_1011B7D30;
    v92 = swift_allocObject(v110, 72, 7);
    *(_OWORD *)(v92 + 16) = xmmword_100E22B00;
    v124 = v88;
    swift_errorRetain(v88);
    v93 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v94 = String.init<A>(describing:)(&v124, v93);
    *(_QWORD *)(v92 + 56) = &type metadata for String;
    *(_QWORD *)(v92 + 64) = v79;
    *(_QWORD *)(v92 + 32) = v94;
    *(_QWORD *)(v92 + 40) = v95;
    os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "Error from sendKeys: %@", 23, 2, v92);
    swift_bridgeObjectRelease();
    swift_errorRelease(v88);
  }
  v96 = (void (*)(char *, uint64_t))v122;
  v122(v73, v74);
  v96(v111, v74);
  v96(v87, v74);
  v97 = (void (*)(char *, uint64_t))v123[1];
  v97(v114, v70);
  v97(v118, v70);
  return ((uint64_t (*)(char *, uint64_t))v97)(v120, v70);
}

uint64_t sub_1003A7F9C(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, void (*a6)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  dispatch_group_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_BYTE *, _QWORD);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void (*v45)(_QWORD, _QWORD, _QWORD);
  void (*v46)(_QWORD, _QWORD, _QWORD);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void (*v59)(_QWORD, _QWORD, _QWORD);
  double v60;
  NSObject *v61;
  Swift::Int v62;
  NSObject *v63;
  uint64_t v64;
  _QWORD *v65;
  void (*v66)(_QWORD, _QWORD, _QWORD);
  NSObject *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  __int128 v75;
  char *v76;
  __int128 v77;
  void (*v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  void (*v85)(_QWORD, _QWORD, _QWORD);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE v99[32];
  _QWORD v100[4];

  v7 = v6;
  v85 = a6;
  v84 = a5;
  v83 = a4;
  v82 = a2;
  v10 = type metadata accessor for CodingUserInfoKey(0);
  v91 = *(_QWORD *)(v10 - 8);
  v92 = v10;
  __chkstk_darwin(v10);
  v90 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LegacySelfBeaconingKeyEnvelope(0);
  v88 = *(_QWORD *)(v12 - 8);
  v89 = v12;
  v13 = __chkstk_darwin(v12);
  v87 = (uint64_t)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v73 - v15;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = dispatch_group_create();
  v22 = type metadata accessor for CryptoKeys(0);
  v95 = Array.chunked(into:)(96, a1, v22);
  v23 = swift_allocObject(&unk_101071BF0, 24, 7);
  v93 = v23;
  *(_QWORD *)(v23 + 16) = 0;
  v24 = v23 + 16;
  v25 = *(_QWORD *)(a1 + 16);
  v74 = (uint64_t *)v24;
  if (v25)
  {
    v26 = DateInterval.end.getter(v24);
    v27 = Date.timeIntervalSinceNow.getter(v26);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    v80 = v27;
  }
  else
  {
    v80 = 0x4105180000000000;
  }
  v81 = *(_QWORD *)(v95 + 16);
  v94 = v21;
  if (v81)
  {
    v28 = a3 + *(int *)(type metadata accessor for OwnedBeaconRecord(0) + 20);
    v29 = 0;
    v79 = type metadata accessor for UUID(0);
    v78 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 16);
    v77 = xmmword_100E22B00;
    v75 = xmmword_100E221E0;
    v76 = v16;
    v97 = v28;
    while (1)
    {
      v98 = v29;
      v30 = *(_QWORD *)(v95 + 8 * v29 + 32);
      v78(v16, v28, v79);
      *(_QWORD *)&v16[*(int *)(v89 + 20)] = v30;
      v31 = v87;
      sub_10005972C((uint64_t)v16, v87, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
      v32 = type metadata accessor for PropertyListEncoder(0);
      swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
      swift_bridgeObjectRetain_n(v30, 2);
      PropertyListEncoder.init()(v33);
      if (qword_1010EA610 != -1)
        swift_once(&qword_1010EA610, sub_100DB0924);
      v34 = v92;
      v35 = sub_10001A9E8(v92, (uint64_t)static CodingUserInfoKey.messagingCoder);
      v36 = (uint64_t)v90;
      (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v90, v35, v34);
      v100[3] = &type metadata for Bool;
      LOBYTE(v100[0]) = 1;
      v37 = (void (*)(_BYTE *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(v99);
      sub_1000FE92C((uint64_t)v100, v36);
      v37(v99, 0);
      v38 = sub_10001A9A8(&qword_1010FA178);
      v39 = *(unsigned __int8 *)(v88 + 80);
      v40 = (v39 + 32) & ~v39;
      v41 = swift_allocObject(v38, v40 + *(_QWORD *)(v88 + 72), v39 | 7);
      *(_OWORD *)(v41 + 16) = v77;
      sub_10005972C(v31, v41 + v40, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
      v100[0] = v41;
      v42 = sub_10001A9A8(&qword_1010FA180);
      v43 = sub_1003D1074();
      v44 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v100, v42, v43);
      v46 = v45;
      swift_release();
      sub_1000126B0(v31, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
      if (v7)
        break;
      v96 = 0;
      swift_bridgeObjectRelease();
      v47 = sub_10001BBBC(v44, (unint64_t)v46);
      v48 = static os_log_type_t.default.getter(v47);
      if (qword_1010EA250 != -1)
        swift_once(&qword_1010EA250, sub_100B5D964);
      ++v98;
      v49 = qword_1011B7D30;
      v50 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v51 = swift_allocObject(v50, 152, 7);
      *(_OWORD *)(v51 + 16) = v75;
      v52 = *(_QWORD *)(v30 + 16);
      v53 = swift_bridgeObjectRelease();
      *(_QWORD *)(v51 + 56) = &type metadata for Int;
      *(_QWORD *)(v51 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v51 + 32) = v52;
      v54 = UUID.uuidString.getter(v53);
      v56 = v55;
      *(_QWORD *)(v51 + 96) = &type metadata for String;
      v57 = sub_10001AA00();
      *(_QWORD *)(v51 + 72) = v54;
      *(_QWORD *)(v51 + 80) = v56;
      *(_QWORD *)(v51 + 136) = &type metadata for String;
      *(_QWORD *)(v51 + 144) = v57;
      v58 = v84;
      *(_QWORD *)(v51 + 104) = v57;
      *(_QWORD *)(v51 + 112) = v58;
      v59 = v85;
      *(_QWORD *)(v51 + 120) = v85;
      *(_QWORD *)&v60 = swift_bridgeObjectRetain(v59).n128_u64[0];
      os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v49, "Distributing chunk of %ld keys for beacon: %@ to destination: %@", 64, 2, v51, v60);
      swift_bridgeObjectRelease();
      v61 = v94;
      dispatch_group_enter(v94);
      v62 = sub_1003BB198((uint64_t)&off_101049D70);
      v63 = v61;
      v64 = v93;
      swift_retain();
      v65 = (_QWORD *)sub_1006B9A24((uint64_t)_swiftEmptyArrayStorage);
      v66 = (void (*)(_QWORD, _QWORD, _QWORD))sub_100CA7EC0((uint64_t)&off_101049D98);
      sub_1003BD8C8(v82, (void (*)(os_log_t, uint64_t))1, v44, v46, v65, v83, v58, v59, 0, v80, 0, 0, v66, v62, 0, v86, v63, v64);
      sub_10001BC14(v44, (unint64_t)v46);
      swift_bridgeObjectRelease();
      swift_release();

      v28 = v97;
      v29 = v98;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001BC14(v44, (unint64_t)v46);
      v16 = v76;
      sub_1000126B0((uint64_t)v76, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
      v7 = v96;
      if (v81 == v29)
        goto LABEL_12;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v72 = swift_bridgeObjectRelease();
    swift_willThrow(v72);

    sub_1000126B0((uint64_t)v16, type metadata accessor for LegacySelfBeaconingKeyEnvelope);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    v67 = v94;
    OS_dispatch_group.wait()();
    v68 = v74;
    swift_beginAccess(v74, v100, 0, 0);
    v69 = *v68;
    if (v69)
    {
      v70 = swift_errorRetain(v69);
      swift_willThrow(v70);

      return swift_release();
    }

  }
  return swift_release();
}

uint64_t sub_1003A86B0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, void (*a6)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(os_log_t, uint64_t);
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  char *v76;
  _QWORD *v77;
  int *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t (*v90)(uint64_t);
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  unint64_t (*v94)();
  uint64_t v95;
  uint64_t v96;
  int64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  char *v104;
  void (*v105)(os_log_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t result;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  int v121;
  void *v122;
  void (*v123)(_QWORD, _QWORD, _QWORD);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void (*v128)(void ***);
  char *v129;
  uint64_t v130;
  void (*v131)(_QWORD, _QWORD, _QWORD);
  _QWORD *v132;
  void (*v133)(_QWORD, _QWORD, _QWORD);
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  void (*v144)(_QWORD, _QWORD, _QWORD);
  uint64_t v145;
  uint64_t v146;
  uint64_t MyAccessoryFamilyKeyEnvelope;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  char *v167;
  void (*v168)(os_log_t, uint64_t);
  uint64_t v169;
  int *v170;
  _QWORD v171[4];

  v144 = a6;
  v143 = a5;
  v142 = a4;
  v157 = a3;
  v150 = a2;
  v153 = type metadata accessor for OwnedBeaconRecord(0);
  v139 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153);
  v140 = v6;
  v141 = (uint64_t)&v135 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SharingRampState(0);
  __chkstk_darwin(v7);
  v138 = (char *)&v135 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = type metadata accessor for FamilyCryptoKeysV1(0);
  v160 = *(_QWORD *)(v165 - 8);
  v9 = __chkstk_darwin(v165);
  v11 = (char *)&v135 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v164 = (uint64_t)&v135 - v12;
  v145 = type metadata accessor for SelfBeaconingKeyEnvelope(0);
  v13 = __chkstk_darwin(v145);
  v146 = (uint64_t)&v135 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v135 - v15;
  v17 = (int *)type metadata accessor for TimeBasedKey(0);
  v18 = *((_QWORD *)v17 - 1);
  v19 = __chkstk_darwin(v17);
  v21 = (uint64_t *)((char *)&v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = __chkstk_darwin(v19);
  v163 = (uint64_t *)((char *)&v135 - v23);
  v24 = __chkstk_darwin(v22);
  v167 = (char *)&v135 - v25;
  __chkstk_darwin(v24);
  v169 = (uint64_t)&v135 - v26;
  v168 = (void (*)(os_log_t, uint64_t))type metadata accessor for FamilyCryptoKeysV2(0);
  v27 = *((_QWORD *)v168 - 1);
  v28 = __chkstk_darwin(v168);
  v161 = (uint64_t)&v135 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v166 = (uint64_t *)((char *)&v135 - v31);
  __chkstk_darwin(v30);
  v136 = (char *)&v135 - v32;
  v33 = type metadata accessor for UUID(0);
  v158 = *(_QWORD *)(v33 - 8);
  v159 = v33;
  v34 = __chkstk_darwin(v33);
  v154 = (char *)&v135 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v155 = (char *)&v135 - v36;
  MyAccessoryFamilyKeyEnvelope = type metadata accessor for FindMyAccessoryFamilyKeyEnvelope(0);
  v37 = __chkstk_darwin(MyAccessoryFamilyKeyEnvelope);
  v148 = (uint64_t)&v135 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v149 = (char *)&v135 - v39;
  v40 = type metadata accessor for Date(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = __chkstk_darwin(v40);
  v44 = (char *)&v135 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = *(_QWORD *)(v45 + 16);
  v170 = v17;
  v152 = v18;
  v151 = v45;
  if (v46)
  {
    v47 = v46;
    v48 = v42;
    v49 = DateInterval.end.getter(v42);
    v50 = Date.timeIntervalSinceNow.getter(v49);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v44, v48);
    v137 = *(_QWORD *)&v50;
  }
  else
  {
    v47 = 0;
    v137 = 0x4105180000000000;
  }
  v51 = v153;
  v52 = v157;
  v53 = sub_100C6F9A8();
  v54 = v52 + *(int *)(v51 + 20);
  v55 = *(void (**)(char *, uint64_t, uint64_t))(v158 + 16);
  if ((v53 & 1) != 0)
  {
    v55(v155, v54, v159);
    v162 = v27;
    if (v47)
    {
      v171[0] = _swiftEmptyArrayStorage;
      v165 = v47;
      sub_10009AF60(0, v47, 0);
      v56 = v151 + ((*(unsigned __int8 *)(v152 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v152 + 80));
      v164 = *(_QWORD *)(v152 + 72);
      v58 = v169;
      v57 = v170;
      v59 = (uint64_t)v136;
      v60 = v168;
      do
      {
        sub_10005972C(v56, v58, type metadata accessor for TimeBasedKey);
        v61 = v167;
        sub_10005972C(v58, (uint64_t)v167, type metadata accessor for TimeBasedKey);
        v62 = (uint64_t)v166;
        *v166 = *v61;
        v63 = (char *)v61 + v57[5];
        v64 = v62 + *((int *)v60 + 5);
        v65 = type metadata accessor for DateInterval(0);
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v64, v63, v65);
        v66 = (char *)v61 + v57[6];
        v67 = *((_QWORD *)v66 + 2);
        v68 = *((_QWORD *)v66 + 3);
        sub_10001BBBC(v67, v68);
        sub_1000126B0((uint64_t)v61, type metadata accessor for TimeBasedKey);
        v69 = (uint64_t *)(v62 + *((int *)v60 + 6));
        *v69 = v67;
        v69[1] = v68;
        sub_1000126EC(v62, v59, type metadata accessor for FamilyCryptoKeysV2);
        sub_1000126B0(v58, type metadata accessor for TimeBasedKey);
        v70 = (_QWORD *)v171[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v171[0]) & 1) == 0)
        {
          sub_10009AF60(0, v70[2] + 1, 1);
          v70 = (_QWORD *)v171[0];
        }
        v72 = v70[2];
        v71 = v70[3];
        v73 = v162;
        if (v72 >= v71 >> 1)
        {
          sub_10009AF60(v71 > 1, v72 + 1, 1);
          v70 = (_QWORD *)v171[0];
        }
        v70[2] = v72 + 1;
        sub_1000126EC(v59, (uint64_t)v70+ ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80))+ *(_QWORD *)(v73 + 72) * v72, type metadata accessor for FamilyCryptoKeysV2);
        v56 += v164;
        --v165;
        v57 = v170;
      }
      while (v165);
      v163 = v70;
    }
    else
    {
      v163 = _swiftEmptyArrayStorage;
      v57 = v170;
    }
    v96 = v150;
    v97 = *(_QWORD *)(v150 + 16);
    v98 = _swiftEmptyArrayStorage;
    if (v97)
    {
      v171[0] = _swiftEmptyArrayStorage;
      sub_10009AF60(0, v97, 0);
      v99 = v96 + ((*(unsigned __int8 *)(v152 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v152 + 80));
      v164 = *(_QWORD *)(v152 + 72);
      v100 = v161;
      v101 = v169;
      v102 = v167;
      do
      {
        v165 = v97;
        sub_10005972C(v99, v101, type metadata accessor for TimeBasedKey);
        sub_10005972C(v101, (uint64_t)v102, type metadata accessor for TimeBasedKey);
        v103 = (uint64_t)v166;
        *v166 = *v102;
        v104 = (char *)v102 + v57[5];
        v105 = v168;
        v106 = v103 + *((int *)v168 + 5);
        v107 = type metadata accessor for DateInterval(0);
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v106, v104, v107);
        v108 = (char *)v102 + v57[6];
        v109 = *((_QWORD *)v108 + 2);
        v110 = *((_QWORD *)v108 + 3);
        sub_10001BBBC(v109, v110);
        sub_1000126B0((uint64_t)v102, type metadata accessor for TimeBasedKey);
        v111 = (uint64_t *)(v103 + *((int *)v105 + 6));
        *v111 = v109;
        v111[1] = v110;
        sub_1000126EC(v103, v100, type metadata accessor for FamilyCryptoKeysV2);
        sub_1000126B0(v101, type metadata accessor for TimeBasedKey);
        v98 = (_QWORD *)v171[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v171[0]) & 1) == 0)
        {
          sub_10009AF60(0, v98[2] + 1, 1);
          v98 = (_QWORD *)v171[0];
        }
        v113 = v98[2];
        v112 = v98[3];
        v114 = v162;
        if (v113 >= v112 >> 1)
        {
          sub_10009AF60(v112 > 1, v113 + 1, 1);
          v98 = (_QWORD *)v171[0];
        }
        v98[2] = v113 + 1;
        v100 = v161;
        sub_1000126EC(v161, (uint64_t)v98+ ((*(unsigned __int8 *)(v114 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80))+ *(_QWORD *)(v114 + 72) * v113, type metadata accessor for FamilyCryptoKeysV2);
        v99 += v164;
        v97 = v165 - 1;
        v57 = v170;
      }
      while (v165 != 1);
    }
    v16 = v149;
    (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v149, v155, v159);
    v115 = MyAccessoryFamilyKeyEnvelope;
    *(_QWORD *)&v16[*(int *)(MyAccessoryFamilyKeyEnvelope + 20)] = v163;
    *(_QWORD *)&v16[*(int *)(v115 + 24)] = v98;
    v90 = type metadata accessor for FindMyAccessoryFamilyKeyEnvelope;
    v91 = v148;
    sub_10005972C((uint64_t)v16, v148, type metadata accessor for FindMyAccessoryFamilyKeyEnvelope);
    v92 = (uint64_t *)&unk_1010FA198;
    v93 = &qword_1010FA1A0;
    v94 = sub_1003D1464;
    v95 = 3;
  }
  else
  {
    v55(v154, v54, v159);
    v74 = _swiftEmptyArrayStorage;
    if (v47)
    {
      v167 = v16;
      v171[0] = _swiftEmptyArrayStorage;
      sub_10009AF8C(0, v47, 0);
      v75 = v151 + ((*(unsigned __int8 *)(v152 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v152 + 80));
      v76 = *(char **)(v152 + 72);
      v168 = (void (*)(os_log_t, uint64_t))(v11 + 8);
      v169 = (uint64_t)v76;
      do
      {
        v77 = v163;
        sub_10005972C(v75, (uint64_t)v163, type metadata accessor for TimeBasedKey);
        sub_10005972C((uint64_t)v77, (uint64_t)v21, type metadata accessor for TimeBasedKey);
        *(_QWORD *)v11 = *v21;
        v78 = v170;
        v79 = (char *)v21 + v170[5];
        v80 = &v11[*(int *)(v165 + 20)];
        v81 = type metadata accessor for DateInterval(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v80, v79, v81);
        v82 = (_QWORD *)((char *)v21 + v78[6]);
        v83 = v82[5];
        if (v83 >> 60 == 15)
        {
          v84 = v82[2];
          v85 = v82[3];
          sub_10001BBBC(v84, v85);
          sub_1000126B0((uint64_t)v21, type metadata accessor for TimeBasedKey);
        }
        else
        {
          v84 = v82[4];
          sub_10001BBBC(v84, v82[5]);
          sub_1000126B0((uint64_t)v21, type metadata accessor for TimeBasedKey);
          v85 = v83 | 0x2000000000000000;
        }
        v86 = v164;
        v87 = *(int *)(v165 + 24);
        *(_QWORD *)&v11[v87] = v84;
        *(_QWORD *)((char *)v168 + v87) = v85;
        sub_1000126EC((uint64_t)v11, v86, type metadata accessor for FamilyCryptoKeysV1);
        sub_1000126B0((uint64_t)v163, type metadata accessor for TimeBasedKey);
        v74 = (_QWORD *)v171[0];
        if ((swift_isUniquelyReferenced_nonNull_native(v171[0]) & 1) == 0)
        {
          sub_10009AF8C(0, v74[2] + 1, 1);
          v74 = (_QWORD *)v171[0];
        }
        v89 = v74[2];
        v88 = v74[3];
        if (v89 >= v88 >> 1)
        {
          sub_10009AF8C(v88 > 1, v89 + 1, 1);
          v74 = (_QWORD *)v171[0];
        }
        v74[2] = v89 + 1;
        sub_1000126EC(v164, (uint64_t)v74+ ((*(unsigned __int8 *)(v160 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80))+ *(_QWORD *)(v160 + 72) * v89, type metadata accessor for FamilyCryptoKeysV1);
        v75 += v169;
        --v47;
      }
      while (v47);
      v16 = v167;
    }
    (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v16, v154, v159);
    *(_QWORD *)&v16[*(int *)(v145 + 20)] = v74;
    v90 = type metadata accessor for SelfBeaconingKeyEnvelope;
    v91 = v146;
    sub_10005972C((uint64_t)v16, v146, type metadata accessor for SelfBeaconingKeyEnvelope);
    v92 = (uint64_t *)&unk_1010FA1B8;
    v93 = &qword_1010FA1C0;
    v94 = sub_1003D14E0;
    v95 = 2;
  }
  v116 = v156;
  sub_10038A8E4(5, v95, v91, v92, v90, v93, (uint64_t (*)(void))v94, (uint64_t)v171);
  result = sub_1000126B0((uint64_t)v16, v90);
  if (!v116)
  {
    LODWORD(v169) = LOBYTE(v171[0]);
    v118 = v171[2];
    v168 = (void (*)(os_log_t, uint64_t))v171[1];
    v170 = (int *)v171[3];
    v119 = v138;
    sub_10037F308(v138);
    v120 = sub_10001A9A8(&qword_1010F9FC8);
    v121 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 48))(v119, 2, v120);
    sub_1000126B0((uint64_t)v119, type metadata accessor for SharingRampState);
    v167 = 0;
    if (v121 == 2)
      v122 = (void *)sub_1003BB198((uint64_t)&off_101049D20);
    else
      v122 = &_swiftEmptySetSingleton;
    v123 = (void (*)(_QWORD, _QWORD, _QWORD))sub_1003BB198((uint64_t)&off_101049D48);
    v124 = v141;
    sub_10005972C(v157, v141, type metadata accessor for OwnedBeaconRecord);
    v125 = *(unsigned __int8 *)(v139 + 80);
    v126 = (v125 + 16) & ~v125;
    v127 = (v140 + v126 + 7) & 0xFFFFFFFFFFFFFFF8;
    v128 = (void (*)(void ***))swift_allocObject(&unk_101072F00, v127 + 24, v125 | 7);
    sub_1000126EC(v124, (uint64_t)v128 + v126, type metadata accessor for OwnedBeaconRecord);
    v129 = (char *)v128 + v127;
    LODWORD(v124) = v142;
    *v129 = v142;
    v130 = v143;
    v131 = v144;
    *((_QWORD *)v129 + 1) = v143;
    *((_QWORD *)v129 + 2) = v131;
    swift_bridgeObjectRetain(v131);
    v132 = (_QWORD *)sub_1006B9A24((uint64_t)_swiftEmptyArrayStorage);
    v134 = (uint64_t)v122;
    v133 = (void (*)(_QWORD, _QWORD, _QWORD))v170;
    sub_10038E1C0(v169, v168, v118, (void (*)(_QWORD, _QWORD, _QWORD))v170, v132, v124, v130, v131, 1, (void (*)(_QWORD, _QWORD))v137, 0, 0, v123, v134, 0, (void (*)(void ***))sub_1003D13E8, v128);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return sub_10001BC14(v118, (unint64_t)v133);
  }
  return result;
}

uint64_t sub_1003A9410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[4];
  unsigned int v38;
  uint64_t v39;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v37[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)&v37[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000F9B8(a1, (uint64_t)v14, &qword_1010F4868);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v12);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v16 = *v14;
    v17 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v18 = qword_1011B7D30;
    v19 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v20 = swift_allocObject(v19, 112, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v20 + 56) = &type metadata for String;
    v21 = sub_10001AA00();
    *(_QWORD *)(v20 + 64) = v21;
    *(_QWORD *)(v20 + 32) = a4;
    *(_QWORD *)(v20 + 40) = a5;
    v39 = v16;
    swift_bridgeObjectRetain(a5);
    swift_errorRetain(v16);
    v22 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v23 = String.init<A>(describing:)(&v39, v22);
    *(_QWORD *)(v20 + 96) = &type metadata for String;
    *(_QWORD *)(v20 + 104) = v21;
    *(_QWORD *)(v20 + 72) = v23;
    *(_QWORD *)(v20 + 80) = v24;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Failed to distribute keys: %@, error: %@", 40, 2, v20);
    swift_bridgeObjectRelease();
    return swift_errorRelease(v16);
  }
  else
  {
    v26 = (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t))(v9 + 32))(v11, v14, v8);
    v38 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v27 = qword_1011B7D30;
    v28 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v29 = swift_allocObject(v28, 112, 7);
    *(_OWORD *)(v29 + 16) = xmmword_100E22B10;
    v30 = UUID.uuidString.getter(v29);
    v32 = v31;
    *(_QWORD *)(v29 + 56) = &type metadata for String;
    v33 = sub_10001AA00();
    *(_QWORD *)(v29 + 64) = v33;
    *(_QWORD *)(v29 + 32) = v30;
    *(_QWORD *)(v29 + 40) = v32;
    v34 = type metadata accessor for OwnedBeaconRecord(0);
    v35 = UUID.uuidString.getter(v34);
    *(_QWORD *)(v29 + 96) = &type metadata for String;
    *(_QWORD *)(v29 + 104) = v33;
    *(_QWORD *)(v29 + 72) = v35;
    *(_QWORD *)(v29 + 80) = v36;
    os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v27, "Successfully distributed keys: %@ for beacon: %@", 48, 2, v29);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  }
}

void sub_1003A96E8(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  _QWORD *v33;
  uint64_t *v34;
  _QWORD *v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;

  v44 = a3;
  v45 = a2;
  *(_QWORD *)&v49 = type metadata accessor for DateInterval(0);
  v58 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v50 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimeBasedKey(0);
  v10 = a1 + *(int *)(v9 + 20);
  DateInterval.end.getter(v9);
  v11 = DateInterval.contains(_:)(v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v12 = a1 + *(int *)(v9 + 24);
  v14 = *(_QWORD *)v12;
  v13 = *(_QWORD *)(v12 + 8);
  v15 = *(_QWORD *)v12;
  v16 = v13;
  if (v13 >> 60 == 15)
  {
    v17 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    v16 = __DataStorage.init(length:)(32) | 0x4000000000000000;
    v15 = 0x2000000000;
  }
  v47 = v15;
  if ((v11 & 1) != 0)
  {
    v18 = *(_QWORD *)(v12 + 40);
    v46 = *(_QWORD *)(v12 + 32);
    sub_10001BD08(v46, v18);
  }
  else
  {
    v46 = 0;
    v18 = 0xF000000000000000;
  }
  v19 = v49;
  (*(void (**)(char *, uint64_t, _QWORD))(v58 + 16))(v50, v10, v49);
  v20 = *(_QWORD *)(v12 + 16);
  v21 = *(_QWORD *)(v12 + 40);
  v53 = v14;
  v54 = v13;
  v55 = v20;
  v49 = *(_OWORD *)(v12 + 24);
  v56 = v49;
  v57 = v21;
  sub_10001BD08(v14, v13);
  v22 = v49;
  sub_10001BBBC(v20, v49);
  v23 = sub_1007DFD44();
  v25 = v24;
  v26 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v27 = __DataStorage.init(length:)(32);
  v51 = 0x2000000000;
  v52 = v27;
  sub_10051ED28((int *)&v51, 0);
  v28 = HIDWORD(v51) - v51;
  if (__OFSUB__(HIDWORD(v51), (_DWORD)v51))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)&v49 = v23;
    if (v28 == 32)
    {
      v29 = v51 | ((unint64_t)HIDWORD(v51) << 32);
      v48 = v16;
      v30 = v52 | 0x4000000000000000;
      v31 = v44;
      (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v44, v50, v19);
      v32 = (int *)type metadata accessor for CryptoKeys(0);
      v33 = (_QWORD *)(v31 + v32[5]);
      *v33 = v46;
      v33[1] = v18;
      v34 = (uint64_t *)(v31 + v32[6]);
      *v34 = v20;
      v34[1] = v22;
      v35 = (_QWORD *)(v31 + v32[7]);
      *v35 = v49;
      v35[1] = v25;
      v36 = (unint64_t *)(v31 + v32[8]);
      *v36 = v29;
      v36[1] = v30;
      v37 = (_QWORD *)(v31 + v32[9]);
      v38 = v48;
      *v37 = v47;
      v37[1] = v38;
    }
    else
    {
      v39 = v28;
      v40 = sub_1000D95EC();
      v41 = swift_allocError(&type metadata for KeyRepresentableError, v40, 0, 0);
      *(_QWORD *)v42 = 32;
      *(_QWORD *)(v42 + 8) = v39;
      *(_BYTE *)(v42 + 16) = 0;
      swift_willThrow(v41);
      swift_release();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v50, v19);
      sub_10001EF3C(v46, v18);
      sub_10001BC14(v20, v22);
      sub_10001BC14(v47, v16);
      sub_10001BC14(v49, v25);
      *v45 = v41;
    }
  }
}

uint64_t sub_1003A9A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(_QWORD *)(v3 + 168);
  v14 = (_QWORD *)swift_allocObject(&unk_101071E70, 48, 7);
  v14[2] = v3;
  v14[3] = a1;
  v14[4] = a2;
  v14[5] = a3;
  aBlock[4] = sub_1003CF5B4;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101071E88;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(a1);
  v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  v23 = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v19 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v18, v19, v7, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

void sub_1003A9C54(uint64_t a1, void (*a2)(void **), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_QWORD, _QWORD, _QWORD);
  uint64_t v48;
  void (*v49)(void ***);
  char *v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  void (*v58)(_QWORD, _QWORD, _QWORD);
  uint64_t v59;
  void (*v60)(os_log_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(os_log_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  int v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  NSObject *v104;
  NSObject *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(_QWORD, _QWORD, _QWORD);
  Swift::Int v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(void ***);
  char *v114;
  int v115;
  uint64_t v116;
  _QWORD *v117;
  void (*v118)(_QWORD, _QWORD, _QWORD);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  void **v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  id v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void **v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  void *v165;
  _QWORD *v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD v174[3];
  uint64_t v175;
  void (*v176)(os_log_t, uint64_t);
  uint64_t v177;
  unint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  id v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  void (*v190)(void **);
  uint64_t v191;
  uint64_t v192;
  void (*v193)(char *, void (*)(os_log_t, uint64_t), uint64_t);
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void (*v213)(os_log_t, uint64_t);
  int v214;
  void (*v215)(uint64_t, uint64_t);
  uint64_t v216;
  void *v217;
  void **v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t (*v223)(uint64_t);
  void (*v224)(_QWORD, _QWORD, _QWORD);
  int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void (*v229)(os_log_t, uint64_t);
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  void **aBlock;
  uint64_t v235;
  uint64_t (*v236)(uint64_t);
  void *v237;
  uint64_t (*v238)();
  _QWORD *v239;

  v191 = a3;
  v190 = a2;
  v189 = a1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v177 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = type metadata accessor for DispatchQoS(0);
  v188 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v187 = (char *)&v177 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = type metadata accessor for DispatchQoS.QoSClass(0);
  v185 = *(_QWORD *)(v186 - 8);
  __chkstk_darwin(v186);
  v184 = (char *)&v177 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = type metadata accessor for UUID(0);
  v207 = *(_QWORD *)(v210 - 8);
  __chkstk_darwin(v210);
  v182 = (char *)&v177 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SharingRampState(0);
  __chkstk_darwin(v11);
  v204 = (char *)&v177 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = type metadata accessor for KeyRequestEnvelope(0);
  v13 = __chkstk_darwin(v206);
  v205 = (uint64_t)&v177 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v221 = (uint64_t)&v177 - v15;
  v227 = type metadata accessor for Date(0);
  v220 = *(_QWORD *)(v227 - 8);
  __chkstk_darwin(v227);
  v226 = (uint64_t)&v177 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v222 = type metadata accessor for SharedBeaconRecord(0);
  v17 = *(void ***)(v222 - 8);
  v18 = (uint64_t)v17[8];
  v19 = __chkstk_darwin(v222);
  v203 = (uint64_t)&v177 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v19);
  v209 = (uint64_t)&v177 - v21;
  __chkstk_darwin(v20);
  v212 = (uint64_t)&v177 - v22;
  v23 = type metadata accessor for DispatchPredicate(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (uint64_t *)((char *)&v177 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v211 = v3;
  v27 = *(void **)(v3 + 168);
  *v26 = v27;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v24 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v23);
  v28 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)(v26);
  (*(void (**)(_QWORD *, uint64_t))(v24 + 8))(v26, v23);
  if ((v27 & 1) == 0)
  {
    __break(1u);
    goto LABEL_39;
  }
  v29 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
  v30 = objc_msgSend(v29, "aa_primaryAppleAccount");

  if (!v30)
  {
    type metadata accessor for SPOwnerSessionError(0);
    v121 = v120;
    v232 = 7;
    v122 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v123 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v232, v122, v121, v123);
    v124 = aBlock;
    v190(aBlock);

    return;
  }
  v183 = v30;
  v31 = objc_msgSend(v30, "username");
  if (!v31)
  {
    __break(1u);
LABEL_41:
    __break(1u);
    return;
  }
  v32 = v31;
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v35 = v34;

  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v33, v35);
  v202 = v36;
  v201 = v37;
  v208 = v38;
  v39 = v192;
  if (!v38)
  {
    v125 = static os_log_type_t.error.getter(v36);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v126 = qword_1011B7D30;
    v127 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v128 = swift_allocObject(v127, 72, 7);
    *(_OWORD *)(v128 + 16) = xmmword_100E22B00;
    v129 = v183;
    v130 = objc_msgSend(v183, "username");
    if (v130)
    {
      v131 = v130;
      v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
      v134 = v133;

      *(_QWORD *)(v128 + 56) = &type metadata for String;
      *(_QWORD *)(v128 + 64) = sub_10001AA00();
      *(_QWORD *)(v128 + 32) = v132;
      *(_QWORD *)(v128 + 40) = v134;
      os_log(_:dso:log:_:_:)(v125, &_mh_execute_header, v126, "Could not create MessagingDestination from: %@", 46, 2, v128);
      swift_bridgeObjectRelease();
      type metadata accessor for SPOwnerSessionError(0);
      v136 = v135;
      v232 = 0;
      v137 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v138 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
      v139 = _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v232, v137, v136, v138);
      v17 = aBlock;
      swift_willThrow(v139);

      goto LABEL_34;
    }
    goto LABEL_41;
  }
  v40 = *(_QWORD *)(v189 + 16);
  if (v40)
  {
    v179 = v7;
    v180 = v5;
    v181 = v4;
    v230 = *(_QWORD *)(v211 + 408);
    v41 = *((unsigned __int8 *)v17 + 80);
    v42 = v189 + ((v41 + 32) & ~v41);
    v199 = v41 | 7;
    v200 = (v41 + 16) & ~v41;
    v43 = (v18 + v200 + 7) & 0xFFFFFFFFFFFFFFF8;
    v178 = v43 + 24;
    v198 = v43;
    v197 = (v43 + 31) & 0xFFFFFFFFFFFFFFF8;
    v196 = v197 + 8;
    v217 = v17[9];
    swift_bridgeObjectRetain(v189);
    v44 = 0;
    v219 = xmmword_100E22B10;
    v195 = 0x8000000100ED35A0;
    v194 = 0x8000000100ED35D0;
    v45 = v212;
    v46 = v222;
    while (1)
    {
      v228 = v40;
      v56 = sub_10005972C(v42, v45, type metadata accessor for SharedBeaconRecord);
      v57 = (unsigned __int8 *)(v45 + *(int *)(v46 + 28));
      v225 = *v57;
      v58 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v57 + 2);
      v231 = *((_QWORD *)v57 + 1);
      v59 = v230;
      __chkstk_darwin(v56);
      v174[2] = v59;
      LOBYTE(v175) = 6;
      v229 = v60;
      v176 = v60;
      swift_bridgeObjectRetain(v58);
      v62 = v226;
      v61 = v227;
      OS_dispatch_queue.sync<A>(execute:)(sub_1003D9B50, v174, v227);
      sub_100C5016C(v62, 6);
      v64 = v63;
      v65 = *(uint64_t (**)(uint64_t, uint64_t))(v220 + 8);
      v66 = v65(v62, v61);
      v67 = static os_log_type_t.default.getter(v66);
      if ((v64 & 1) == 0)
      {
        if (qword_1010EA250 != -1)
          swift_once(&qword_1010EA250, sub_100B5D964);
        v91 = qword_1011B7D30;
        v92 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v93 = swift_allocObject(v92, 112, 7);
        *(_OWORD *)(v93 + 16) = v219;
        v94 = UUID.uuidString.getter(v93);
        v96 = v95;
        *(_QWORD *)(v93 + 56) = &type metadata for String;
        v97 = sub_10001AA00();
        *(_QWORD *)(v93 + 32) = v94;
        *(_QWORD *)(v93 + 40) = v96;
        *(_QWORD *)(v93 + 96) = &type metadata for String;
        *(_QWORD *)(v93 + 104) = v97;
        v98 = v231;
        *(_QWORD *)(v93 + 64) = v97;
        *(_QWORD *)(v93 + 72) = v98;
        *(_QWORD *)(v93 + 80) = v58;
        os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, v91, "Skipping requestKeys (too early to retry) for beacon: %@ to destination: %@", 75, 2, v93);
        swift_bridgeObjectRelease();
        v46 = v222;
        goto LABEL_10;
      }
      v215 = (void (*)(uint64_t, uint64_t))v65;
      if (qword_1010EA250 != -1)
        swift_once(&qword_1010EA250, sub_100B5D964);
      v68 = qword_1011B7D30;
      v69 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v70 = swift_allocObject(v69, 112, 7);
      *(_OWORD *)(v70 + 16) = v219;
      v71 = v229;
      v72 = UUID.uuidString.getter(v70);
      v74 = v73;
      *(_QWORD *)(v70 + 56) = &type metadata for String;
      v75 = sub_10001AA00();
      *(_QWORD *)(v70 + 32) = v72;
      *(_QWORD *)(v70 + 40) = v74;
      *(_QWORD *)(v70 + 96) = &type metadata for String;
      *(_QWORD *)(v70 + 104) = v75;
      v76 = v231;
      *(_QWORD *)(v70 + 64) = v75;
      *(_QWORD *)(v70 + 72) = v76;
      *(_QWORD *)(v70 + 80) = v58;
      *(_QWORD *)&v77 = swift_bridgeObjectRetain(v58).n128_u64[0];
      v78 = v67;
      v79 = (uint64_t)v71;
      os_log(_:dso:log:_:_:)(v78, &_mh_execute_header, v68, "Sending requestKeys for beacon: %@ to destination: %@", 53, 2, v70, v77);
      swift_bridgeObjectRelease();
      v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v207 + 16);
      v81 = v221;
      v80(v221, v79, v210);
      v82 = v81 + *(int *)(v206 + 20);
      *(_BYTE *)v82 = v202;
      v83 = v208;
      *(_QWORD *)(v82 + 8) = v201;
      *(_QWORD *)(v82 + 16) = v83;
      v84 = v81;
      v85 = v205;
      sub_10005972C(v84, v205, type metadata accessor for KeyRequestEnvelope);
      swift_bridgeObjectRetain(v83);
      sub_10038A8E4(6, 2, v85, &qword_1010F9FE0, type metadata accessor for KeyRequestEnvelope, &qword_1010F9FE8, (uint64_t (*)(void))sub_1003CFABC, (uint64_t)&aBlock);
      if (v44)
      {
        v17 = v44;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        sub_1000126B0(v221, type metadata accessor for KeyRequestEnvelope);
        v153 = v212;
        goto LABEL_33;
      }
      v193 = (void (*)(char *, void (*)(os_log_t, uint64_t), uint64_t))v80;
      v216 = v42;
      v218 = 0;
      v214 = aBlock;
      v213 = (void (*)(os_log_t, uint64_t))v235;
      v223 = v236;
      v224 = (void (*)(_QWORD, _QWORD, _QWORD))v237;
      v86 = v226;
      static Date.trustedNow.getter(v226);
      sub_100C4FA44(v79, v86, 6);
      v215(v86, v227);
      v87 = v204;
      sub_10037F308(v204);
      v88 = sub_10001A9A8(&qword_1010F9FC8);
      v89 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 48))(v87, 2, v88);
      sub_1000126B0((uint64_t)v87, type metadata accessor for SharingRampState);
      v90 = &_swiftEmptySetSingleton;
      if (v89 == 2)
        v90 = (void *)sub_1003BB198((uint64_t)&off_10104A2F8);
      v215 = *(void (**)(uint64_t, uint64_t))(v230 + 16);
      v47 = (void (*)(_QWORD, _QWORD, _QWORD))sub_1003BB198((uint64_t)&off_10104A320);
      v45 = v212;
      v48 = v209;
      sub_10005972C(v212, v209, type metadata accessor for SharedBeaconRecord);
      v49 = (void (*)(void ***))swift_allocObject(&unk_101071F60, v196, v199);
      sub_1000126EC(v48, (uint64_t)v49 + v200, type metadata accessor for SharedBeaconRecord);
      v50 = (char *)v49 + v198;
      v51 = v225;
      *v50 = v225;
      v52 = v231;
      *((_QWORD *)v50 + 1) = v231;
      *((_QWORD *)v50 + 2) = v58;
      *(_QWORD *)((char *)v49 + v197) = v211;
      swift_bridgeObjectRetain(v58);
      swift_retain();
      v53 = (_QWORD *)sub_1006B9A24((uint64_t)_swiftEmptyArrayStorage);
      sub_10038E1C0(v214, v213, (uint64_t)v223, v224, v53, v51, v52, v58, 0, v215, 0, 0, v47, (uint64_t)v90, 0, (void (*)(void ***))sub_1003CF7A8, v49);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v46 = v222;
      v54 = *(_QWORD *)(v45 + *(int *)(v222 + 44));
      v55 = v203;
      sub_10005972C(v45, v203, type metadata accessor for SharedBeaconRecord);
      if (v54 != -1)
        break;
      v99 = *(_QWORD *)(v55 + *(int *)(v46 + 48));
      sub_1000126B0(v55, type metadata accessor for SharedBeaconRecord);
      v44 = v218;
      v42 = v216;
      if (v99 != -1)
        goto LABEL_9;
      v100 = dispatch_group_create();
      v101 = sub_100CA7EC0((uint64_t)&off_10104A348);
      v102 = swift_allocObject(&unk_101071A38, 17, 7);
      *(_BYTE *)(v102 + 16) = 0;
      dispatch_group_enter(v100);
      v103 = (_QWORD *)swift_allocObject(&unk_101071F88, 40, 7);
      v103[2] = v102;
      v103[3] = v101;
      v103[4] = v100;
      swift_retain();
      v104 = v100;
      v46 = v222;
      v105 = v104;
      sub_10039BEEC(v225, v231, (uint64_t)v58, (uint64_t)sub_1003CF818, (uint64_t)v103);
      v44 = v218;
      swift_release();
      OS_dispatch_group.wait()();

      swift_beginAccess(v102 + 16, &v232, 0, 0);
      v106 = *(unsigned __int8 *)(v102 + 16);
      v45 = v212;
      swift_release();
      if (v106 != 1)
        goto LABEL_9;
      v107 = (uint64_t)v182;
      v193(v182, v229, v210);
      sub_10038A278(6, 1, v107, (uint64_t)&aBlock);
      v17 = v44;
      if (v44)
      {
        sub_10001BC14((uint64_t)v223, (unint64_t)v224);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        sub_1000126B0(v221, type metadata accessor for KeyRequestEnvelope);
        v153 = v45;
LABEL_33:
        sub_1000126B0(v153, type metadata accessor for SharedBeaconRecord);
        v140 = swift_bridgeObjectRelease();
        v4 = v181;
        v5 = v180;
        v7 = v179;
LABEL_34:
        v18 = static os_log_type_t.error.getter(v140);
        if (qword_1010EA250 == -1)
        {
LABEL_35:
          v154 = qword_1011B7D30;
          v155 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
          v156 = swift_allocObject(v155, 72, 7);
          *(_OWORD *)(v156 + 16) = xmmword_100E22B00;
          v157 = v17;
          aBlock = v17;
          swift_errorRetain(v17);
          v158 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
          v159 = String.init<A>(describing:)(&aBlock, v158);
          v161 = v160;
          *(_QWORD *)(v156 + 56) = &type metadata for String;
          *(_QWORD *)(v156 + 64) = sub_10001AA00();
          *(_QWORD *)(v156 + 32) = v159;
          *(_QWORD *)(v156 + 40) = v161;
          os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v154, "Failed in requestKeys: %@", 25, 2, v156);
          swift_bridgeObjectRelease();
          sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
          v162 = v185;
          v163 = v184;
          v164 = v186;
          (*(void (**)(char *, _QWORD, uint64_t))(v185 + 104))(v184, enum case for DispatchQoS.QoSClass.default(_:), v186);
          v165 = (void *)static OS_dispatch_queue.global(qos:)(v163);
          (*(void (**)(char *, uint64_t))(v162 + 8))(v163, v164);
          v166 = (_QWORD *)swift_allocObject(&unk_101071EC0, 40, 7);
          v167 = v191;
          v166[2] = v190;
          v166[3] = v167;
          v166[4] = v17;
          v238 = sub_1000170EC;
          v239 = v166;
          aBlock = _NSConcreteStackBlock;
          v235 = 1107296256;
          v236 = sub_100016FB8;
          v237 = &unk_101071ED8;
          v168 = _Block_copy(&aBlock);
          swift_retain();
          v169 = swift_errorRetain(v17);
          v170 = v187;
          static DispatchQoS.unspecified.getter(v169);
          v233 = _swiftEmptyArrayStorage;
          v171 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v172 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
          v173 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
          dispatch thunk of SetAlgebra.init<A>(_:)(&v233, v172, v173, v4, v171);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v170, v7, v168);
          _Block_release(v168);

          swift_errorRelease(v157);
          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
          (*(void (**)(char *, uint64_t))(v188 + 8))(v170, v192);
          goto LABEL_36;
        }
LABEL_39:
        swift_once(&qword_1010EA250, sub_100B5D964);
        goto LABEL_35;
      }
      v108 = (uint64_t)v236;
      v229 = (void (*)(os_log_t, uint64_t))v235;
      v109 = (void (*)(_QWORD, _QWORD, _QWORD))v237;
      LODWORD(v218) = aBlock;
      v215 = *(void (**)(uint64_t, uint64_t))(v230 + 16);
      v110 = sub_1003BB198((uint64_t)&off_10104A370);
      v111 = v45;
      v112 = v209;
      sub_10005972C(v111, v209, type metadata accessor for SharedBeaconRecord);
      v113 = (void (*)(void ***))swift_allocObject(&unk_101071FB0, v178, v199);
      sub_1000126EC(v112, (uint64_t)v113 + v200, type metadata accessor for SharedBeaconRecord);
      v114 = (char *)v113 + v198;
      v115 = v225;
      *v114 = v225;
      v116 = v231;
      *((_QWORD *)v114 + 1) = v231;
      *((_QWORD *)v114 + 2) = v58;
      swift_bridgeObjectRetain(v58);
      v117 = (_QWORD *)sub_1006B9A24((uint64_t)_swiftEmptyArrayStorage);
      v118 = (void (*)(_QWORD, _QWORD, _QWORD))sub_100CA7EC0((uint64_t)&off_10104A398);
      v119 = v116;
      v42 = v216;
      sub_10038E1C0((int)v218, v229, v108, v109, v117, v115, v119, v58, 0, v215, 0, 0, v118, v110, 0, (void (*)(void ***))sub_1003CF9D4, v113);
      v46 = v222;
      swift_bridgeObjectRelease();
      swift_release();
      v45 = v212;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001BC14(v108, (unint64_t)v109);
      sub_10001BC14((uint64_t)v223, (unint64_t)v224);
      swift_bridgeObjectRelease();
      sub_1000126B0(v221, type metadata accessor for KeyRequestEnvelope);
      v44 = 0;
LABEL_10:
      sub_1000126B0(v45, type metadata accessor for SharedBeaconRecord);
      v42 += (uint64_t)v217;
      v40 = v228 - 1;
      if (v228 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v4 = v181;
        v39 = v192;
        v5 = v180;
        v7 = v179;
        goto LABEL_31;
      }
    }
    sub_1000126B0(v55, type metadata accessor for SharedBeaconRecord);
    v44 = v218;
    v42 = v216;
LABEL_9:
    sub_10001BC14((uint64_t)v223, (unint64_t)v224);
    swift_bridgeObjectRelease();
    sub_1000126B0(v221, type metadata accessor for KeyRequestEnvelope);
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
LABEL_31:
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v141 = v185;
  v142 = v184;
  v143 = v186;
  (*(void (**)(char *, _QWORD, uint64_t))(v185 + 104))(v184, enum case for DispatchQoS.QoSClass.default(_:), v186);
  v144 = (void *)static OS_dispatch_queue.global(qos:)(v142);
  (*(void (**)(char *, uint64_t))(v141 + 8))(v142, v143);
  v145 = swift_allocObject(&unk_101071F10, 32, 7);
  v146 = v191;
  *(_QWORD *)(v145 + 16) = v190;
  *(_QWORD *)(v145 + 24) = v146;
  v238 = sub_1002E3C58;
  v239 = (_QWORD *)v145;
  aBlock = _NSConcreteStackBlock;
  v235 = 1107296256;
  v236 = sub_100016FB8;
  v237 = &unk_101071F28;
  v147 = _Block_copy(&aBlock);
  v148 = swift_retain();
  v149 = v187;
  static DispatchQoS.unspecified.getter(v148);
  v233 = _swiftEmptyArrayStorage;
  v150 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v151 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v152 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v233, v151, v152, v4, v150);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v149, v7, v147);
  _Block_release(v147);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v188 + 8))(v149, v39);
LABEL_36:
  swift_release();
}

uint64_t sub_1003AB198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[12];
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;

  v42 = a6;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v40[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)&v40[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000F9B8(a1, (uint64_t)v16, &qword_1010F4868);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v14);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v18 = *v16;
    v41 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v19 = qword_1011B7D30;
    v20 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v21 = swift_allocObject(v20, 152, 7);
    *(_OWORD *)(v21 + 16) = xmmword_100E221E0;
    v22 = type metadata accessor for SharedBeaconRecord(0);
    v23 = a2 + *(int *)(v22 + 20);
    v24 = UUID.uuidString.getter(v22);
    v26 = v25;
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    v27 = sub_10001AA00();
    *(_QWORD *)(v21 + 32) = v24;
    *(_QWORD *)(v21 + 40) = v26;
    *(_QWORD *)(v21 + 96) = &type metadata for String;
    *(_QWORD *)(v21 + 104) = v27;
    *(_QWORD *)(v21 + 64) = v27;
    *(_QWORD *)(v21 + 72) = a4;
    *(_QWORD *)(v21 + 80) = a5;
    v43 = v18;
    swift_bridgeObjectRetain(a5);
    swift_errorRetain(v18);
    v28 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v29 = String.init<A>(describing:)(&v43, v28);
    *(_QWORD *)(v21 + 136) = &type metadata for String;
    *(_QWORD *)(v21 + 144) = v27;
    *(_QWORD *)(v21 + 112) = v29;
    *(_QWORD *)(v21 + 120) = v30;
    os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v19, "Failed to send requestKeys for beacon: %@ to destination: %@ - %@", 65, 2, v21);
    swift_bridgeObjectRelease();
    sub_100C4FEA0(v23, 6);
    return swift_errorRelease(v18);
  }
  else
  {
    v32 = (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t))(v11 + 32))(v13, v16, v10);
    v33 = static os_log_type_t.default.getter(v32);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v34 = qword_1011B7D30;
    v35 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v36 = swift_allocObject(v35, 72, 7);
    *(_OWORD *)(v36 + 16) = xmmword_100E22B00;
    v37 = UUID.uuidString.getter(v36);
    v39 = v38;
    *(_QWORD *)(v36 + 56) = &type metadata for String;
    *(_QWORD *)(v36 + 64) = sub_10001AA00();
    *(_QWORD *)(v36 + 32) = v37;
    *(_QWORD *)(v36 + 40) = v39;
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Successfully sent requestKeys: %@", 33, 2, v36);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  }
}

uint64_t sub_1003AB48C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v14, &qword_1010F4868);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v12);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v16 = *v14;
    v17 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v18 = qword_1011B7D30;
    v19 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v20 = swift_allocObject(v19, 152, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100E221E0;
    v21 = type metadata accessor for SharedBeaconRecord(0);
    v22 = UUID.uuidString.getter(v21);
    v24 = v23;
    *(_QWORD *)(v20 + 56) = &type metadata for String;
    v25 = sub_10001AA00();
    *(_QWORD *)(v20 + 32) = v22;
    *(_QWORD *)(v20 + 40) = v24;
    *(_QWORD *)(v20 + 96) = &type metadata for String;
    *(_QWORD *)(v20 + 104) = v25;
    *(_QWORD *)(v20 + 64) = v25;
    *(_QWORD *)(v20 + 72) = a4;
    *(_QWORD *)(v20 + 80) = a5;
    v39 = v16;
    swift_bridgeObjectRetain(a5);
    swift_errorRetain(v16);
    v26 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v27 = String.init<A>(describing:)(&v39, v26);
    *(_QWORD *)(v20 + 136) = &type metadata for String;
    *(_QWORD *)(v20 + 144) = v25;
    *(_QWORD *)(v20 + 112) = v27;
    *(_QWORD *)(v20 + 120) = v28;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Failed to send legacy requestKeys for beacon: %@ to destination: %@ - %@", 72, 2, v20);
    swift_bridgeObjectRelease();
    return swift_errorRelease(v16);
  }
  else
  {
    v30 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v11, v14, v8);
    v31 = static os_log_type_t.default.getter(v30);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v32 = qword_1011B7D30;
    v33 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v34 = swift_allocObject(v33, 72, 7);
    *(_OWORD *)(v34 + 16) = xmmword_100E22B00;
    v35 = UUID.uuidString.getter(v34);
    v37 = v36;
    *(_QWORD *)(v34 + 56) = &type metadata for String;
    *(_QWORD *)(v34 + 64) = sub_10001AA00();
    *(_QWORD *)(v34 + 32) = v35;
    *(_QWORD *)(v34 + 40) = v37;
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Successfully sent requestKeys: %@", 33, 2, v34);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

void sub_1003AB764(uint64_t a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];

  v26 = a5;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v27[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)&v27[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000F9B8(a1, (uint64_t)v15, &qword_1010F4868);
  if (swift_getEnumCaseMultiPayload(v15, v13) == 1)
  {
    v16 = *v15;
    swift_beginAccess(a3 + 16, v27, 1, 0);
    v17 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v16;
    swift_errorRelease(v17);
  }
  else
  {
    v18 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v10 + 32))(v12, v15, v9);
    v19 = static os_log_type_t.default.getter(v18);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v20 = qword_1011B7D30;
    v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v22 = swift_allocObject(v21, 72, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
    v23 = UUID.uuidString.getter(v22);
    v25 = v24;
    *(_QWORD *)(v22 + 56) = &type metadata for String;
    *(_QWORD *)(v22 + 64) = sub_10001AA00();
    *(_QWORD *)(v22 + 32) = v23;
    *(_QWORD *)(v22 + 40) = v25;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, a4, v26, 2, v22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  dispatch_group_leave(a2);
}

void sub_1003AB958(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(_QWORD, _QWORD), void (*a6)(_QWORD, _QWORD), void (*a7)(_QWORD, _QWORD, _QWORD), uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11)
{
  int *updated;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  void (*v25)(char *, uint64_t, uint64_t);
  void (*v26)(os_log_t, uint64_t);
  dispatch_group_t v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t);
  void (*v30)(_QWORD, _QWORD);
  NSObject *v31;
  _QWORD *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(_QWORD, _QWORD, _QWORD);
  void (*v36)(char *, uint64_t, uint64_t);
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  void (*v42)(_QWORD, _QWORD);
  void (*v43)(_QWORD, _QWORD);
  void (*v44)(_QWORD, _QWORD, _QWORD);
  uint64_t v45;
  void (*v46)(os_log_t, uint64_t);
  char v47[8];
  void (*v48)(os_log_t, uint64_t);
  uint64_t v49;
  void (*v50)(_QWORD, _QWORD, _QWORD);
  dispatch_group_t v51;

  v45 = a8;
  v43 = a6;
  v44 = a7;
  v42 = a5;
  v41 = a4;
  updated = (int *)type metadata accessor for SecureLocationsKeyUpdateEnvelope(0);
  v15 = __chkstk_darwin(updated);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v37 - v18;
  v51 = dispatch_group_create();
  v20 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v19, a1, v20);
  v21 = (uint64_t *)&v19[updated[5]];
  v39 = a2;
  *v21 = a2;
  v21[1] = a3;
  v22 = v45;
  *(_QWORD *)&v19[updated[6]] = v44;
  v23 = (uint64_t *)&v19[updated[7]];
  *v23 = v22;
  v23[1] = a9;
  v24 = (uint64_t *)&v19[updated[8]];
  *v24 = a10;
  v24[1] = a11;
  sub_10005972C((uint64_t)v19, (uint64_t)v17, type metadata accessor for SecureLocationsKeyUpdateEnvelope);
  v25 = (void (*)(char *, uint64_t, uint64_t))a3;
  swift_bridgeObjectRetain(a3);
  sub_10001BBBC(v22, a9);
  sub_10001BBBC(a10, a11);
  v26 = v46;
  sub_10038A8E4(10, 1, (uint64_t)v17, &qword_1010FA4A8, type metadata accessor for SecureLocationsKeyUpdateEnvelope, &qword_1010FA4B0, (uint64_t (*)(void))sub_1003D820C, (uint64_t)v47);
  if (v26)
  {
    sub_1000126B0((uint64_t)v19, type metadata accessor for SecureLocationsKeyUpdateEnvelope);

  }
  else
  {
    v46 = v48;
    v38 = v49;
    v44 = v50;
    LODWORD(v45) = v47[0];
    sub_10001BBBC(v49, (unint64_t)v50);
    v27 = v51;
    dispatch_group_enter(v51);
    v28 = (char *)sub_1003BB198((uint64_t)&off_10104A3E8);
    v29 = v25;
    v37 = v25;
    swift_bridgeObjectRetain(v25);
    v30 = v43;
    swift_bridgeObjectRetain(v43);
    v31 = v27;
    v32 = (_QWORD *)sub_1006B9A24((uint64_t)_swiftEmptyArrayStorage);
    v33 = (void (*)(char *, uint64_t, uint64_t))sub_100CA7EC0((uint64_t)_swiftEmptyArrayStorage);
    v36 = v29;
    v34 = v38;
    v35 = v44;
    sub_1003CB9F8(v45, v46, v38, v44, v32, v41, v42, v30, 0, 0, 1, 0, v28, v33, 0, v40, v39, v36, v41,
      v42,
      (uint64_t)v30,
      v31);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(v34, (unint64_t)v35);
    OS_dispatch_group.wait()();
    sub_10001BC14(v34, (unint64_t)v35);

    sub_1000126B0((uint64_t)v19, type metadata accessor for SecureLocationsKeyUpdateEnvelope);
  }
}

void sub_1003ABC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, NSObject *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  dispatch_group_t v43;
  _QWORD v44[3];
  _BYTE v45[8];
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  _BYTE v49[8];
  _QWORD v50[3];
  _BYTE v51[8];

  v42 = a3;
  v43 = a7;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v17, &qword_1010F4868);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v15);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v19 = *v17;
    v20 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v21 = qword_1011B7D30;
    v22 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v23 = swift_allocObject(v22, 72, 7);
    *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
    swift_getErrorValue(v19, v51, v50);
    v24 = Error.localizedDescription.getter(v50[1], v50[2]);
    v26 = v25;
    *(_QWORD *)(v23 + 56) = &type metadata for String;
    *(_QWORD *)(v23 + 64) = sub_10001AA00();
    *(_QWORD *)(v23 + 32) = v24;
    *(_QWORD *)(v23 + 40) = v26;
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Failed to send secureLocationsKeyUpdate: %@", 43, 2, v23);
    swift_bridgeObjectRelease();
    if (qword_1010EA428 != -1)
      swift_once(&qword_1010EA428, sub_100C48554);
    swift_getErrorValue(v19, v49, v48);
    v27 = v48[1];
    v28 = v48[2];
    swift_retain();
    v29 = Error.localizedDescription.getter(v27, v28);
    sub_100C4C0F8(4u, v29, v30);
    swift_release();
    swift_bridgeObjectRelease();
    v46 = 0;
    v47 = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v46 = 0xD000000000000012;
    v47 = 0x8000000100ED5340;
    swift_bridgeObjectRetain(a6);
    v31._countAndFlagsBits = a5;
    v31._object = a6;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 32;
    v32._object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    swift_getErrorValue(v19, v45, v44);
    v33._countAndFlagsBits = Error.localizedDescription.getter(v44[1], v44[2]);
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    sub_100C4A908(a2, v42, v46, v47);
    swift_release();
    swift_bridgeObjectRelease();
    swift_errorRelease(v19);
  }
  else
  {
    v34 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v12 + 32))(v14, v17, v11);
    v35 = static os_log_type_t.default.getter(v34);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v36 = qword_1011B7D30;
    v37 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v38 = swift_allocObject(v37, 72, 7);
    *(_OWORD *)(v38 + 16) = xmmword_100E22B00;
    v39 = UUID.uuidString.getter(v38);
    v41 = v40;
    *(_QWORD *)(v38 + 56) = &type metadata for String;
    *(_QWORD *)(v38 + 64) = sub_10001AA00();
    *(_QWORD *)(v38 + 32) = v39;
    *(_QWORD *)(v38 + 40) = v41;
    os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v36, "Successfully sent secureLocationsKeyUpdate: %@", 46, 2, v38, v42, v43);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  dispatch_group_leave(v43);
}

void sub_1003AC04C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B75D0);
  swift_bridgeObjectRetain_n(a1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_bridgeObjectRetain(a1);
    v8 = sub_10001A9A8(&qword_1010F4868);
    v9 = Array.description.getter(a1, v8);
    v11 = v10;
    swift_bridgeObjectRelease();
    v12 = sub_100016940(v9, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Successfully forwarded separation state observation: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
}

void sub_1003AC21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v9 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v11, &qword_1010F4868);
  if (swift_getEnumCaseMultiPayload(v11, v9) == 1)
  {
    v12 = *v11;
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v13 = type metadata accessor for Logger(0);
    sub_10001A9E8(v13, (uint64_t)qword_1011B75D0);
    swift_bridgeObjectRetain(a5);
    swift_errorRetain(v12);
    swift_bridgeObjectRetain(a5);
    v14 = swift_errorRetain(v12);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(22, -1);
      v18 = swift_slowAlloc(64, -1);
      v30 = v18;
      *(_DWORD *)v17 = 136315394;
      swift_bridgeObjectRetain(a5);
      v29 = sub_100016940(a4, a5, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease_n(a5, 3);
      *(_WORD *)(v17 + 12) = 2080;
      v29 = v12;
      swift_errorRetain(v12);
      v19 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v20 = String.init<A>(describing:)(&v29, v19);
      v29 = sub_100016940(v20, v21, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(v12);
      swift_errorRelease(v12);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to send observations to %s due to error: %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      swift_errorRelease(v12);
    }
    else
    {
      swift_errorRelease(v12);
      swift_bridgeObjectRelease_n(a5, 2);
      swift_errorRelease(v12);
      swift_errorRelease(v12);

    }
  }
  else
  {
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v22 = type metadata accessor for Logger(0);
    sub_10001A9E8(v22, (uint64_t)qword_1011B75D0);
    swift_bridgeObjectRetain_n(a2, 2);
    swift_bridgeObjectRetain_n(a5, 2);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(22, -1);
      v27 = swift_slowAlloc(32, -1);
      v30 = v27;
      *(_DWORD *)v26 = 134218242;
      v28 = *(_QWORD *)(a2 + 16);
      swift_bridgeObjectRelease();
      v29 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      swift_bridgeObjectRetain(a5);
      v29 = sub_100016940(a4, a5, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease_n(a5, 3);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Successfuly sent %ld observations to %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a5, 2);
      swift_bridgeObjectRelease_n(a2, 2);
    }
    sub_100004048((uint64_t)v11, &qword_1010F4868);
  }
}

void sub_1003AC688(char *a1)
{
  sub_100513674(*a1);
}

void sub_1003AC694()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_1003AC6DC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1684107369, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

void sub_1003AC74C()
{
  __asm { BR              X10 }
}

uint64_t sub_1003AC784(uint64_t a1)
{
  String.hash(into:)(a1, 1684107369, 0xE400000000000000);
  return swift_bridgeObjectRelease(0xE400000000000000);
}

void sub_1003AC7E0()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_1003AC824()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1684107369, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

unint64_t sub_1003AC894@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1003D2AB4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1003AC8C0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1003AC8EC + 4 * byte_100E3BDD3[*v0]))();
}

void sub_1003AC8EC(_QWORD *a1@<X8>)
{
  *a1 = 1684107369;
  a1[1] = 0xE400000000000000;
}

void sub_1003AC900(_QWORD *a1@<X8>)
{
  *a1 = 1685024873;
  a1[1] = 0xE400000000000000;
}

void sub_1003AC918(_QWORD *a1@<X8>)
{
  *a1 = 0x6863746177;
  a1[1] = 0xE500000000000000;
}

void sub_1003AC930(_QWORD *a1@<X8>)
{
  *a1 = 6513005;
  a1[1] = 0xE300000000000000;
}

void sub_1003AC944(_QWORD *a1@<X8>)
{
  *a1 = &off_10104A4A8;
}

uint64_t sub_1003AC954(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;

  swift_bridgeObjectRetain(a1);
  v3 = *(_QWORD *)(sub_1003BADC4(v2) + 16);
  v4 = swift_bridgeObjectRelease();
  v5 = *(unsigned __int8 *)(v1 + 368);
  v6 = static os_log_type_t.info.getter(v4);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v7 = qword_1011B7D30;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  *((_QWORD *)&v15 + 1) = 2;
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v9 + 56) = &type metadata for Bool;
  *(_QWORD *)(v9 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v9 + 32) = v5;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "thisDeviceConnectionAllowed: %i", 1);
  v10 = swift_bridgeObjectRelease();
  v11 = static os_log_type_t.default.getter(v10);
  v12 = qword_1011B7D30;
  v13 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v13 + 16) = v15;
  *(_QWORD *)(v13 + 56) = &type metadata for Int;
  *(_QWORD *)(v13 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v13 + 32) = v3 + v5;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Connectable devices found %i devices.", (_DWORD)v15);
  swift_bridgeObjectRelease();
  return v3 + v5;
}

uint64_t sub_1003ACACC(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t Strong;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  void **v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t *);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  void (*v43)(uint64_t *);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _BYTE v49[24];

  v8 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v8);
  v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for SharedBeaconRecord(0);
  v11 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v44 = (uint64_t)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v15 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for BeaconSharingSessionContext(0);
  __chkstk_darwin(v16);
  v18 = (unsigned __int8 *)v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v49, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (!Strong)
  {
    v47 = 7;
    v48 = 1;
    return a1(&v47);
  }
  v20 = Strong;
  v42[1] = a2;
  v43 = (void (*)(uint64_t *))a1;
  sub_10005972C(a4, (uint64_t)v18, type metadata accessor for BeaconSharingSessionContext);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v16);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v22 = *v18;
      v23 = (void **)*((_QWORD *)v18 + 1);
      v24 = *((_QWORD *)v18 + 2);
    }
    else
    {
      v31 = v45;
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(v13 + 32))(v15, v18, v45);
      swift_retain();
      sub_10080CD54((uint64_t)v15, (uint64_t)v10);
      swift_release();
      v32 = v46;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v46) == 1)
      {
        sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010EE180);
        v47 = 0;
        v48 = 1;
        v43(&v47);
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v31);
      }
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v31);
      v33 = v44;
      sub_1000126EC((uint64_t)v10, v44, type metadata accessor for SharedBeaconRecord);
      v34 = (unsigned __int8 *)(v33 + *(int *)(v32 + 28));
      v22 = *v34;
      v23 = (void **)*((_QWORD *)v34 + 1);
      v24 = *((_QWORD *)v34 + 2);
      swift_bridgeObjectRetain(v24);
      sub_1000126B0(v33, type metadata accessor for SharedBeaconRecord);
    }
    v35 = *(_QWORD *)(v20 + 24);
    v36 = sub_10001A9A8(&qword_1010FA100);
    swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
    swift_retain();
    v37 = sub_10037F9C4(60.0, 30.0, v22, v23, v24, v35, 6);
    v38 = v43;
    if (v37)
    {
      v39 = v37;
      v40 = __chkstk_darwin(v37);
      v42[-4] = v20;
      v42[-3] = a4;
      v42[-2] = v40;
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1003D9228, &v42[-6], v41, &type metadata for () + 1, &type metadata for () + 1);
      v47 = v39;
      v48 = 0;
      swift_retain();
      v38(&v47);
      swift_release();
      return swift_release_n(v39, 2);
    }
    else
    {
      v47 = 0;
      v48 = 1;
      v43(&v47);
      return swift_release();
    }
  }
  else
  {
    if (qword_1010E9B48 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_10001A9E8(v26, (uint64_t)qword_1011B6D08);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unexpected .incoming context!", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    swift_release();
    return sub_1000126B0((uint64_t)v18, type metadata accessor for BeaconSharingSessionContext);
  }
}

uint64_t sub_1003ACF34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  _BYTE v12[24];

  v6 = type metadata accessor for BeaconSharingSessionContext(0);
  __chkstk_darwin(v6);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10005972C(a2, (uint64_t)v8, type metadata accessor for BeaconSharingSessionContext);
  swift_beginAccess(a1 + 440, v12, 33, 0);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a1 + 440));
  v11 = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 440) = 0x8000000000000000;
  sub_10010C51C(a3, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a1 + 440) = v11;
  swift_bridgeObjectRelease();
  sub_1000126B0((uint64_t)v8, type metadata accessor for BeaconSharingSessionContext);
  return swift_endAccess(v12);
}

uint64_t sub_1003AD030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[6];

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v7[2] = *(_QWORD *)a1;
  v7[3] = a2;
  v5 = sub_10001A9A8(&qword_1010F7980);
  result = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1003D9080, v7, v4, &type metadata for () + 1, v5);
  *a3 = v7[5];
  return result;
}

uint64_t sub_1003AD0A8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  _QWORD v11[5];
  _BYTE v12[24];

  v6 = *a1;
  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v12, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (Strong)
  {
    v9 = *(_QWORD *)(Strong + 16);
    v11[2] = __chkstk_darwin(Strong);
    v11[3] = a3;
    swift_retain();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1003D9068, v11, v9, &type metadata for () + 1, &type metadata for () + 1);
    swift_release();
    swift_release();
  }
  *a4 = v6;
  return swift_retain();
}

uint64_t sub_1003AD18C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  int64_t v5;
  char v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];
  uint64_t v13;

  v4 = (uint64_t *)(a1 + 440);
  swift_beginAccess(a1 + 440, v12, 33, 0);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 440));
  v5 = sub_1005195B4(a2);
  LOBYTE(a2) = v6;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v8 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100A9D58C();
      v8 = v13;
    }
    v9 = *(_QWORD *)(v8 + 48);
    v10 = type metadata accessor for BeaconSharingSessionContext(0);
    sub_1000126B0(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v5, type metadata accessor for BeaconSharingSessionContext);
    sub_100106E90(v5, v8);
    *v4 = v8;
    swift_bridgeObjectRelease();
  }
  swift_endAccess(v12);
  return swift_release();
}

uint64_t sub_1003AD294(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD aBlock[6];

  v33 = a1;
  v34 = a2;
  v39 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v38 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  __chkstk_darwin(v3);
  v36 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v32 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v32);
  v7 = type metadata accessor for SharedBeaconRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
  v35 = static OS_dispatch_queue.global(qos:)(v14);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  sub_10005972C(v33, (uint64_t)v10, type metadata accessor for SharedBeaconRecord);
  v15 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v34, v32);
  v16 = *(unsigned __int8 *)(v8 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = *(unsigned __int8 *)(v5 + 80);
  v19 = (v9 + v18 + v17) & ~v18;
  v20 = (v6 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_101074508, v20 + 8, v16 | v18 | 7);
  sub_1000126EC((uint64_t)v10, v21 + v17, type metadata accessor for SharedBeaconRecord);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v21 + v19, (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
  *(_QWORD *)(v21 + v20) = v37;
  aBlock[4] = sub_1003D8868;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101074520;
  v22 = _Block_copy(aBlock);
  v23 = swift_retain();
  v24 = v36;
  static DispatchQoS.unspecified.getter(v23);
  v43 = _swiftEmptyArrayStorage;
  v25 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v27 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v29 = v38;
  v28 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v26, v27, v39, v25);
  v30 = (void *)v35;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v24, v29, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v42 + 8))(v29, v28);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v24, v41);
  return swift_release();
}

uint64_t sub_1003AD614(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for SharedBeaconRecord(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  v8 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v16 - v10;
  sub_100D3A6EC(*(_QWORD *)(a1 + *(int *)(v9 + 32)), *(_QWORD *)(a1 + *(int *)(v9 + 32) + 8), 1, a2, (uint64_t *)((char *)&v16 - v10));
  sub_10005972C(a1, (uint64_t)v8, type metadata accessor for SharedBeaconRecord);
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = swift_allocObject(&unk_101074558, v13 + v6, v12 | 7);
  sub_1000126EC((uint64_t)v8, v14 + v13, type metadata accessor for SharedBeaconRecord);
  sub_100805D80((uint64_t)v11, 0, (uint64_t)sub_1003D8A6C, v14);
  swift_release();
  return sub_1000126B0((uint64_t)v11, type metadata accessor for SharedBeaconRecord);
}

uint64_t sub_1003AD740(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = type metadata accessor for SharedBeaconRecord(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v35 - v8;
  v10 = sub_10001A9A8(&qword_1010F21B0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v12, &qword_1010F21B0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v10);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v14 = *v12;
    v15 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v16 = qword_1011B7D30;
    v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v18 = swift_allocObject(v17, 112, 7);
    *(_OWORD *)(v18 + 16) = xmmword_100E22B10;
    sub_10005972C(a2, (uint64_t)v9, type metadata accessor for SharedBeaconRecord);
    v19 = String.init<A>(describing:)(v9, v4);
    v21 = v20;
    *(_QWORD *)(v18 + 56) = &type metadata for String;
    v22 = sub_10001AA00();
    *(_QWORD *)(v18 + 64) = v22;
    *(_QWORD *)(v18 + 32) = v19;
    *(_QWORD *)(v18 + 40) = v21;
    v36 = v14;
    swift_errorRetain(v14);
    v23 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v24 = String.init<A>(describing:)(&v36, v23);
    *(_QWORD *)(v18 + 96) = &type metadata for String;
    *(_QWORD *)(v18 + 104) = v22;
    *(_QWORD *)(v18 + 72) = v24;
    *(_QWORD *)(v18 + 80) = v25;
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Error updated SharedBeaconRecord %@: %@", 39, 2, v18);
    swift_bridgeObjectRelease();
    return swift_errorRelease(v14);
  }
  else
  {
    v27 = sub_1000126EC((uint64_t)v12, (uint64_t)v9, type metadata accessor for SharedBeaconRecord);
    v28 = static os_log_type_t.default.getter(v27);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v29 = qword_1011B7D30;
    v30 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v31 = swift_allocObject(v30, 72, 7);
    *(_OWORD *)(v31 + 16) = xmmword_100E22B00;
    sub_10005972C((uint64_t)v9, (uint64_t)v7, type metadata accessor for SharedBeaconRecord);
    v32 = String.init<A>(describing:)(v7, v4);
    v34 = v33;
    *(_QWORD *)(v31 + 56) = &type metadata for String;
    *(_QWORD *)(v31 + 64) = sub_10001AA00();
    *(_QWORD *)(v31 + 32) = v32;
    *(_QWORD *)(v31 + 40) = v34;
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Successfully updated SharedBeaconRecord with advertisedIndex/shareDate %@:", 74, 2, v31);
    swift_bridgeObjectRelease();
    return sub_1000126B0((uint64_t)v9, type metadata accessor for SharedBeaconRecord);
  }
}

uint64_t sub_1003ADA3C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for UUID(0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[6] = v5;
  v2[7] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003ADABC, 0, 0);
}

uint64_t sub_1003ADABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 16);
  v5 = *(_QWORD *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  sub_10005972C(v5, v1, type metadata accessor for OwnedBeaconRecord);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = (v2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = swift_allocObject(&unk_1010736A8, v9 + 8, v7 | 7);
  sub_1000126EC(v1, v10 + v8, type metadata accessor for OwnedBeaconRecord);
  *(_QWORD *)(v10 + v9) = v6;
  v11 = swift_retain();
  UUID.init()(v11);
  v12 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v3, &unk_1010FA300, v10, &unk_1010FA308, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v12);
  swift_release();
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003ADBD4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[8] = a1;
  v2[9] = a2;
  v3 = type metadata accessor for OwnedBeaconRecord(0);
  v2[10] = v3;
  v2[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003ADC30, 0, 0);
}

uint64_t sub_1003ADC30()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v1 = swift_retain();
  AnyCurrentValuePublisher.value.getter((_QWORD *)(v0 + 168), v1);
  swift_release();
  if (*(_BYTE *)(v0 + 168) == 1)
  {
    v2 = (_QWORD *)swift_task_alloc(dword_1010FA314);
    *(_QWORD *)(v0 + 96) = v2;
    *v2 = v0;
    v2[1] = sub_1003ADF00;
    return sub_1003AE474(*(_QWORD *)(v0 + 64));
  }
  else
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v4 = *(_QWORD *)(v0 + 88);
    v5 = *(_QWORD *)(v0 + 64);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B6748);
    v7 = sub_10005972C(v5, v4, type metadata accessor for OwnedBeaconRecord);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(_QWORD *)(v0 + 88);
    if (v10)
    {
      v12 = swift_slowAlloc(22, -1);
      v13 = swift_slowAlloc(32, -1);
      v18 = v13;
      *(_DWORD *)v12 = 141558275;
      *(_QWORD *)(v0 + 24) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v12 + 4, v12 + 12);
      *(_WORD *)(v12 + 12) = 2081;
      v14 = type metadata accessor for UUID(0);
      v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
      *(_QWORD *)(v0 + 32) = sub_100016940(v16, v17, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v11, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Ignoring non-me device family re-evaluation for %{private,mask.hash}s.", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 88), type metadata accessor for OwnedBeaconRecord);
    }

    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003ADF00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v3 + 96);
  v5 = *v3;
  *(_QWORD *)(v5 + 104) = a1;
  *(_QWORD *)(v5 + 112) = a2;
  swift_task_dealloc(v4);
  if (!v2)
    return swift_task_switch(sub_1003ADF7C, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v5 + 88));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1003ADF7C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t **v10;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA278 != -1)
    swift_once(&qword_1010EA278, sub_100B5DB4C);
  v3 = qword_1011B7D58;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v1[15] = v4;
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E22B00;
  v6 = UUID.uuidString.getter(v5);
  v8 = v7;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  v9 = sub_10001AA00();
  v1[16] = v9;
  *(_QWORD *)(v5 + 64) = v9;
  *(_QWORD *)(v5 + 32) = v6;
  *(_QWORD *)(v5 + 40) = v8;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "reevaluateKeyDropFamilySharing for %@", 37, 2, v5);
  swift_bridgeObjectRelease();
  v10 = (uint64_t **)swift_task_alloc(dword_1010FA31C);
  v1[17] = (uint64_t)v10;
  *v10 = v1;
  v10[1] = (uint64_t *)sub_1003AE0A8;
  return sub_1003D2AFC(v1[8], v1[14]);
}

uint64_t sub_1003AE0A8()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t **v5;

  v2 = (*v1)[17];
  v3 = *v1;
  v3[18] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1003AE13C, 0, 0);
  v5 = (uint64_t **)swift_task_alloc(dword_1010FA324);
  v3[19] = (uint64_t)v5;
  *v5 = v3;
  v5[1] = (uint64_t *)sub_1003AE298;
  return sub_1003D54EC(v3[8], v3[13]);
}

uint64_t sub_1003AE13C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 40) = v1;
  swift_errorRetain(v1);
  v2 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v3 = swift_dynamicCast(v0 + 170, v0 + 40, v2, &type metadata for BeaconSharingManager.KeyDropSharingError, 6);
  if ((v3 & 1) != 0 && !*(_BYTE *)(v0 + 170))
  {
    swift_errorRelease(*(_QWORD *)(v0 + 144));
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 128);
    v7 = static os_log_type_t.error.getter(v3);
    v8 = qword_1011B7D58;
    v9 = swift_allocObject(v5, 72, 7);
    *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v0 + 56) = v4;
    swift_errorRetain(v4);
    v10 = String.init<A>(describing:)(v0 + 56, v2);
    *(_QWORD *)(v9 + 56) = &type metadata for String;
    *(_QWORD *)(v9 + 64) = v6;
    *(_QWORD *)(v9 + 32) = v10;
    *(_QWORD *)(v9 + 40) = v11;
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "Error in Unsharing: %@", 22, 2, v9);
    swift_errorRelease(v4);
    swift_bridgeObjectRelease();
  }
  v12 = (_QWORD *)swift_task_alloc(dword_1010FA324);
  *(_QWORD *)(v0 + 152) = v12;
  *v12 = v0;
  v12[1] = sub_1003AE298;
  return sub_1003D54EC(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 104));
}

uint64_t sub_1003AE298()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 152);
  v3 = *v1;
  *(_QWORD *)(v3 + 160) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1003AE320, 0, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(*(_QWORD *)(v3 + 88));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1003AE320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 160);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 48) = v1;
  swift_errorRetain(v1);
  v2 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v3 = swift_dynamicCast(v0 + 169, v0 + 48, v2, &type metadata for BeaconSharingManager.KeyDropSharingError, 6);
  if ((v3 & 1) != 0 && !*(_BYTE *)(v0 + 169))
  {
    swift_errorRelease(*(_QWORD *)(v0 + 160));
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 160);
    v5 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 128);
    v7 = static os_log_type_t.error.getter(v3);
    v8 = qword_1011B7D58;
    v9 = swift_allocObject(v5, 72, 7);
    *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v0 + 16) = v4;
    swift_errorRetain(v4);
    v10 = String.init<A>(describing:)(v0 + 16, v2);
    *(_QWORD *)(v9 + 56) = &type metadata for String;
    *(_QWORD *)(v9 + 64) = v6;
    *(_QWORD *)(v9 + 32) = v10;
    *(_QWORD *)(v9 + 40) = v11;
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "Error in Sharing: %@", 20, 2, v9);
    swift_errorRelease(v4);
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AE474(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[21] = a1;
  v2[22] = v1;
  v3 = type metadata accessor for CorrelationIdentifierMap(0);
  v2[23] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[24] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[25] = swift_task_alloc(v5);
  v2[26] = swift_task_alloc(v5);
  v6 = type metadata accessor for OwnerSharingCircle(0);
  v2[27] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[28] = v7;
  v2[29] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v2[30] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[31] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v2[32] = v10;
  v2[33] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003AE538, 0, 0);
}

uint64_t sub_1003AE538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t (__cdecl *v6)();

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  *(_QWORD *)(v0 + 120) = 0x7365547265646E75;
  *(_QWORD *)(v0 + 128) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)((_QWORD *)(v0 + 432), v0 + 120, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 432) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 232);
    v3 = *(_QWORD *)(v0 + 200);
    v2 = *(_QWORD *)(v0 + 208);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void *, void *))(v0 + 8))(&_swiftEmptySetSingleton, &_swiftEmptySetSingleton);
  }
  else
  {
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 16, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 40))
    {
      sub_10000F9FC((__int128 *)(v0 + 16), v0 + 56);
      sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
      v6 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
      v5 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
      *(_QWORD *)(v0 + 272) = v5;
      *v5 = v0;
      v5[1] = sub_1003AE6F8;
      return v6();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1003AE6F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 280) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003AE754, 0, 0);
}

uint64_t sub_1003AE754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 280);
  v2 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  if (v1)
    return swift_task_switch(sub_1003AE890, *(_QWORD *)(v0 + 280), 0);
  v4 = static os_log_type_t.error.getter(v2);
  if (qword_1010EA278 != -1)
    swift_once(&qword_1010EA278, sub_100B5DB4C);
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, qword_1011B7D58, "No BeaconStoreActor available!", 30, 2, _swiftEmptyArrayStorage);
  v5 = sub_100033220();
  v6 = swift_allocError(&type metadata for DaemonError, v5, 0, 0);
  *v7 = 0xD000000000000010;
  v7[1] = 0x8000000100EC6470;
  swift_willThrow(v6);
  v8 = *(_QWORD *)(v0 + 232);
  v10 = *(_QWORD *)(v0 + 200);
  v9 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AE890()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 288) = *(_QWORD *)(*(_QWORD *)(v0 + 280) + 128);
  return swift_task_switch(sub_1003AE8B0, 0, 0);
}

uint64_t sub_1003AE8B0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 296) = v1;
  *v1 = v0;
  v1[1] = sub_1003AE938;
  return withCheckedContinuation<A>(isolation:function:_:)(v1, 0, 0, 0x696176416E656877, 0xEF2928656C62616CLL, sub_100068180, *(_QWORD *)(v0 + 288), &type metadata for () + 1);
}

uint64_t sub_1003AE938()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 296));
  return swift_task_switch(sub_1003AE98C, 0, 0);
}

uint64_t sub_1003AE98C()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 424) = *(_DWORD *)(type metadata accessor for OwnedBeaconRecord(0) + 20);
  return swift_task_switch(sub_1003AE9D0, *(_QWORD *)(v0 + 280), 0);
}

uint64_t sub_1003AE9D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 248);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, *(_QWORD *)(v0 + 168) + *(int *)(v0 + 424), v4);
  LODWORD(v6) = *(_DWORD *)(v5 + 80);
  *(_DWORD *)(v0 + 428) = v6;
  v6 = v6;
  v7 = (v6 + 24) & ~v6;
  v8 = (v3 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = swift_allocObject(&unk_101073720, v8 + 8, v6 | 7);
  *(_QWORD *)(v0 + 304) = v9;
  *(_QWORD *)(v9 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v9 + v7, v2, v4);
  *(_QWORD *)(v9 + v8) = 0;
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 312) = v11;
  v12 = sub_10001A9A8(&qword_1010EE100);
  *v11 = v0;
  v11[1] = sub_1003AEAE4;
  return unsafeBlocking<A>(_:)(v0 + 144, sub_1000D82C0, v9, v12);
}

uint64_t sub_1003AEAE4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 312));
  swift_release();
  return swift_task_switch(sub_1003AEB3C, *(_QWORD *)(v1 + 280), 0);
}

uint64_t sub_1003AEB3C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 320) = *(_QWORD *)(v0 + 144);
  return swift_task_switch(sub_1003AEB58, 0, 0);
}

uint64_t sub_1003AEB58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    swift_bridgeObjectRelease();
LABEL_15:
    v17 = *(_QWORD *)(v0 + 280);
    v18 = sub_10001B664((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 152) = v18;
    v19 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
    *(_QWORD *)(v0 + 328) = v19;
    v20 = sub_10001A9A8((uint64_t *)&unk_1010F7790);
    v21 = type metadata accessor for OwnerPeerTrust(0);
    v22 = sub_1000193A4((unint64_t *)&unk_1011058F0, (uint64_t *)&unk_1010F7790, (const char *)&protocol conformance descriptor for Set<A>);
    *v19 = v0;
    v19[1] = sub_1003AEDAC;
    return Sequence.asyncCompactMap<A>(_:)(&unk_1010FA338, v17, v20, v21, v22);
  }
  v3 = *(_QWORD *)(v0 + 224);
  v23 = *(_QWORD *)(v0 + 248);
  v24 = *(_QWORD *)(v0 + 216);
  v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v5 = *(_QWORD *)(v3 + 72);
  v6 = (*(unsigned __int8 *)(v0 + 428) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 428);
  swift_bridgeObjectRetain(v1);
  while (1)
  {
    v8 = *(_QWORD *)(v0 + 232);
    sub_10005972C(v4, v8, type metadata accessor for OwnerSharingCircle);
    v9 = *(_QWORD *)(v8 + *(int *)(v24 + 32));
    v10 = *(_QWORD *)(v9 + 16);
    if (!v10)
    {
      v7 = _swiftEmptyArrayStorage;
      goto LABEL_4;
    }
    v11 = *(_DWORD *)(v0 + 428) & 0xF8 | 7;
    v12 = sub_10001A9A8(&qword_1011003C0);
    v13 = *(_QWORD *)(v23 + 72);
    v7 = (_QWORD *)swift_allocObject(v12, v6 + v13 * v10, v11);
    result = j__malloc_size(v7);
    if (!v13)
      break;
    if (result - v6 == 0x8000000000000000 && v13 == -1)
      goto LABEL_18;
    v7[2] = v10;
    v7[3] = 2 * ((uint64_t)(result - v6) / v13);
    swift_bridgeObjectRetain_n(v9, 2);
    v16 = sub_10050A294(&v25, (char *)v7 + v6, v10, v9);
    result = sub_10007CC38(v25);
    if (v16 != v10)
      goto LABEL_17;
    swift_bridgeObjectRelease();
LABEL_4:
    sub_1000126B0(*(_QWORD *)(v0 + 232), type metadata accessor for OwnerSharingCircle);
    sub_1003028FC((uint64_t)v7);
    v4 += v5;
    if (!--v2)
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 320), 2);
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1003AEDAC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 328);
  v5 = *v1;
  *(_QWORD *)(*v1 + 336) = a1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 160) = a1;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
  *(_QWORD *)(v3 + 344) = v6;
  v7 = sub_10001A9A8(&qword_1010EC918);
  v8 = sub_1000193A4(&qword_1010FA348, &qword_1010EC918, (const char *)&protocol conformance descriptor for [A]);
  *v6 = v5;
  v6[1] = sub_1003AEE74;
  return Sequence.asyncCompactMap<A>(_:)(&unk_1010FA340, 0, v7, &type metadata for MessagingDestination, v8);
}

uint64_t sub_1003AEE74(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 344);
  *(_QWORD *)(*v2 + 352) = v1;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease();
  if (v1)
  {
    v6 = sub_1003AF948;
  }
  else
  {
    *(_QWORD *)(v4 + 360) = a1;
    v6 = sub_1003AEEF8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1003AEEF8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v0[46] = sub_100CA8058(v0[45]);
  swift_bridgeObjectRelease();
  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[47] = v2;
  v3 = sub_10001A9A8(&qword_1010FA350);
  *v2 = v0;
  v2[1] = sub_1003AEF98;
  return unsafeBlocking<A>(_:)(v0 + 17, sub_1003D6314, v0[22], v3);
}

uint64_t sub_1003AEF98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  *(_QWORD *)(*(_QWORD *)v1 + 384) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
  {
    swift_bridgeObjectRelease();
    v3 = sub_1003AF9AC;
  }
  else
  {
    v3 = sub_1003AF018;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003AF018()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  unint64_t *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v1 = v0[17];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    sub_10009ACD4(0, v2, 0);
    v3 = (unint64_t *)(v1 + 64);
    do
    {
      v4 = *((_BYTE *)v3 - 32);
      v5 = *(v3 - 3);
      v6 = *(v3 - 2);
      v7 = *(v3 - 1);
      v8 = *v3;
      swift_bridgeObjectRetain(v6);
      sub_10001BD08(v7, v8);
      sub_10001EF3C(v7, v8);
      v10 = _swiftEmptyArrayStorage[2];
      v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1)
        sub_10009ACD4(v9 > 1, v10 + 1, 1);
      _swiftEmptyArrayStorage[2] = v10 + 1;
      v11 = &_swiftEmptyArrayStorage[3 * v10];
      *((_BYTE *)v11 + 32) = v4;
      v3 += 5;
      v11[5] = v5;
      v11[6] = v6;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  v12 = v0[46];
  v13 = sub_100CA8058((uint64_t)_swiftEmptyArrayStorage);
  v0[49] = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  v15 = sub_100BBD320(v14, v12);
  v16 = swift_allocObject(&unk_101073748, 24, 7);
  v0[50] = v16;
  *(_QWORD *)(v16 + 16) = v12;
  swift_bridgeObjectRetain(v12);
  sub_10037A2E8(v15);
  v18 = v17;
  swift_bridgeObjectRelease();
  v19 = swift_allocObject(&unk_101073770, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_1003D633C;
  *(_QWORD *)(v19 + 24) = v16;
  v20 = async function pointer to CorrelationIdentifierMap.init(serviceName:destinations:disambiguate:)[1];
  swift_retain();
  v21 = (_QWORD *)swift_task_alloc(v20);
  v0[51] = v21;
  *v21 = v0;
  v21[1] = sub_1003AF230;
  return CorrelationIdentifierMap.init(serviceName:destinations:disambiguate:)(v0[25], 0xD00000000000001BLL, 0x8000000100EC7AF0, v18, sub_1003D63BC, v19);
}

uint64_t sub_1003AF230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 408);
  *(_QWORD *)(*(_QWORD *)v1 + 416) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003AF8C4;
  else
    v3 = sub_1003AF294;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003AF294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 192);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v3, v4, v5);
  sub_10037A2E8(v2);
  v8 = sub_100CA8974(v7);
  swift_bridgeObjectRelease();
  v9 = CorrelationIdentifierMap.map(destinations:)(v8);
  if (v1)
  {
    v10 = *(_QWORD *)(v0 + 208);
    v11 = *(_QWORD *)(v0 + 184);
    v12 = *(_QWORD *)(v0 + 192);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v19 = *(_QWORD *)(v0 + 232);
    v21 = *(_QWORD *)(v0 + 200);
    v20 = *(_QWORD *)(v0 + 208);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v13 = (_QWORD *)v9;
    v14 = *(_QWORD *)(v0 + 368);
    swift_bridgeObjectRelease();
    sub_10037A2E8(v14);
    v16 = sub_100CA8974(v15);
    swift_bridgeObjectRelease();
    v17 = CorrelationIdentifierMap.map(destinations:)(v16);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v17 + 16) <= v13[2] >> 3)
      sub_10063BA38(v17);
    else
      v13 = sub_100640178(v17, (uint64_t)v13);
    swift_bridgeObjectRelease();
    v18 = CorrelationIdentifierMap.map(correlationIdentifiers:)(v13);
    v23 = *(_QWORD *)(v0 + 368);
    sub_10037A60C(v18);
    v25 = v24;
    swift_bridgeObjectRelease();
    v26 = sub_100CA8058(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10037A2E8(v23);
    v28 = sub_100CA8974(v27);
    swift_bridgeObjectRelease();
    v29 = CorrelationIdentifierMap.map(destinations:)(v28);
    v30 = *(_QWORD *)(v0 + 392);
    v31 = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10037A2E8(v30);
    v33 = sub_100CA8974(v32);
    swift_bridgeObjectRelease();
    v34 = CorrelationIdentifierMap.map(destinations:)(v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v34 + 16) <= *(_QWORD *)(v31 + 16) >> 3)
    {
      sub_10063BA38(v34);
      swift_bridgeObjectRelease();
      v35 = v31;
    }
    else
    {
      v35 = (uint64_t)sub_100640178(v34, v31);
      swift_bridgeObjectRelease();
    }
    v36 = CorrelationIdentifierMap.map(correlationIdentifiers:)(v35);
    sub_10037A60C(v36);
    v38 = v37;
    swift_bridgeObjectRelease();
    v71 = sub_100CA8058(v38);
    swift_bridgeObjectRelease();
    v39 = swift_bridgeObjectRelease();
    v40 = static os_log_type_t.default.getter(v39);
    if (qword_1010EA278 != -1)
      swift_once(&qword_1010EA278, sub_100B5DB4C);
    v68 = *(_QWORD *)(v0 + 192);
    v69 = *(_QWORD *)(v0 + 184);
    v70 = *(_QWORD *)(v0 + 208);
    v41 = qword_1011B7D58;
    v42 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v43 = swift_allocObject(v42, 72, 7);
    *(_OWORD *)(v43 + 16) = xmmword_100E22B00;
    v44 = UUID.uuidString.getter(v43);
    v46 = v45;
    *(_QWORD *)(v43 + 56) = &type metadata for String;
    v47 = sub_10001AA00();
    *(_QWORD *)(v43 + 64) = v47;
    *(_QWORD *)(v43 + 32) = v44;
    *(_QWORD *)(v43 + 40) = v46;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Processing beacon: %@", 21, 2, v43);
    v48 = swift_bridgeObjectRelease();
    v49 = static os_log_type_t.default.getter(v48);
    v50 = qword_1011B7D58;
    v51 = swift_allocObject(v42, 72, 7);
    *(_OWORD *)(v51 + 16) = xmmword_100E22B00;
    v52 = sub_1003D63C4();
    swift_bridgeObjectRetain(v26);
    v54 = Set.description.getter(v53, &type metadata for MessagingDestination, v52);
    v56 = v55;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v51 + 56) = &type metadata for String;
    *(_QWORD *)(v51 + 64) = v47;
    *(_QWORD *)(v51 + 32) = v54;
    *(_QWORD *)(v51 + 40) = v56;
    os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, v50, "Possible KeyDrop shares  : %@", 29, 2, v51);
    v57 = swift_bridgeObjectRelease();
    v58 = static os_log_type_t.default.getter(v57);
    v59 = qword_1011B7D58;
    v60 = swift_allocObject(v42, 72, 7);
    *(_OWORD *)(v60 + 16) = xmmword_100E22B00;
    swift_bridgeObjectRetain(v71);
    v62 = Set.description.getter(v61, &type metadata for MessagingDestination, v52);
    v64 = v63;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v60 + 56) = &type metadata for String;
    *(_QWORD *)(v60 + 64) = v47;
    *(_QWORD *)(v60 + 32) = v62;
    *(_QWORD *)(v60 + 40) = v64;
    os_log(_:dso:log:_:_:)(v58, &_mh_execute_header, v59, "KeyDrop Shares to remove: %@", 28, 2, v60);
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v70, v69);
    v65 = *(_QWORD *)(v0 + 232);
    v67 = *(_QWORD *)(v0 + 200);
    v66 = *(_QWORD *)(v0 + 208);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v26, v71);
  }
}

uint64_t sub_1003AF8C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 280);
  swift_release(*(_QWORD *)(v0 + 400));
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  swift_release(v3);
  v4 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AF948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 280));
  v1 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AF9AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 280));
  v1 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AFA10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v5 = type metadata accessor for UUID(0);
  v3[5] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[6] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[7] = v7;
  v3[8] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003AFA7C, a3, 0);
}

uint64_t sub_1003AFA7C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[4];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[3], v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101073798, v7 + v2, v6 | 7);
  v0[9] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v3);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[10] = v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  *v10 = v0;
  v10[1] = sub_1001BE938;
  return unsafeBlocking<A>(_:)(v0[2], sub_1003D62A0, v8, v11);
}

uint64_t sub_1003AFB60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v3 = a2 + *(int *)(type metadata accessor for OwnerPeerTrust(0) + 28);
  v6 = (uint64_t (*)(uint64_t))((char *)&dword_101112238 + dword_101112238);
  v4 = (_QWORD *)swift_task_alloc(unk_10111223C);
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_1003AFBD4;
  return v6(v3);
}

uint64_t sub_1003AFBD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = (_QWORD *)*v4;
  v9 = *(_QWORD *)(*v4 + 24);
  v10 = *v4;
  swift_task_dealloc(v9);
  if (v3)
    return (*(uint64_t (**)(void))(v10 + 8))();
  v8[4] = a3;
  v8[5] = a2;
  v8[6] = a1;
  return swift_task_switch(sub_1003AFC68, 0, 0);
}

uint64_t sub_1003AFC68()
{
  uint64_t v0;
  uint64_t v1;
  int8x16_t *v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(int8x16_t **)(v0 + 16);
  *v2 = vextq_s8(*(int8x16_t *)(v0 + 40), *(int8x16_t *)(v0 + 40), 8uLL);
  v2[1].i64[0] = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Int sub_1003AFC8C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for ShareRecord(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_10088F1F0(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1003B0E84(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1003AFD0C()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

BOOL sub_1003AFD18(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v4;
  id v5;
  uint64_t v6;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    v4 = *(_QWORD *)(a1 + 64);
    v5 = v2;
    v6 = sub_1007EDE3C(a2);
    sub_1002E9EBC(v4, v6);

    swift_bridgeObjectRelease();
  }
  return v2 == 0;
}

uint64_t sub_1003AFD90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch(sub_1003AFDAC, 0, 0);
}

uint64_t sub_1003AFDAC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10111FCE4);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_1003AFE00;
  return sub_100D8B8F0(*(_QWORD *)(v0 + 40));
}

uint64_t sub_1003AFE00(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 48);
  *(_QWORD *)(*v2 + 56) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1003AFEB8;
  }
  else
  {
    *(_QWORD *)(v4 + 64) = a1;
    v6 = sub_1003AFE74;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1003AFE74()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD))(v0 + 16))(v1, 0);
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AFEB8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 16);
  swift_errorRetain(v1);
  v2(v1, 1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_1003AFF14()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;
  void *v3;
  uint64_t v4;
  _QWORD v5[2];
  uint64_t v6;

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v5[0] = 0x7365547265646E75;
  v5[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v6, v5, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
    return _swiftEmptyArrayStorage;
  result = objc_msgSend(*(id *)(v0 + 64), "devices");
  if (result)
  {
    v3 = result;
    v4 = sub_10000F4A0(0, &qword_1010F94E0, IDSDevice_ptr);
    v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

    return (_QWORD *)v1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003B0014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;

  *(_QWORD *)(v8 + 40) = a8;
  *(_QWORD *)(v8 + 48) = v10;
  *(_BYTE *)(v8 + 64) = a7;
  *(_QWORD *)(v8 + 24) = a5;
  *(_QWORD *)(v8 + 32) = a6;
  *(_QWORD *)(v8 + 16) = a4;
  return swift_task_switch(sub_1003B0040, 0, 0);
}

uint64_t sub_1003B0040()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10111FCD4);
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = sub_1003B0098;
  return sub_100D8A618(*(_BYTE *)(v0 + 64), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1003B0098(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_BYTE *)(*(_QWORD *)v1 + 65) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003B00F4, 0, 0);
}

uint64_t sub_1003B00F4()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 16))(*(unsigned __int8 *)(v0 + 65));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B0128(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 248) = a3;
  *(_QWORD *)(v4 + 256) = a4;
  *(_QWORD *)(v4 + 240) = a2;
  *(_BYTE *)(v4 + 264) = a1;
  return swift_task_switch(sub_1003B0148, 0, 0);
}

void sub_1003B0148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t inited;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(unsigned __int8 *)(v0 + 264);
  v4 = sub_10001A9A8(&qword_1010EBE10);
  inited = swift_initStackObject(v4, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100E221E0;
  *(_QWORD *)(inited + 32) = 0x546567617373656DLL;
  *(_QWORD *)(inited + 40) = 0xEB00000000657079;
  *(_QWORD *)(inited + 72) = &type metadata for Int32;
  *(_QWORD *)(inited + 80) = sub_1003BB594();
  *(_DWORD *)(inited + 48) = v3;
  *(_WORD *)(inited + 88) = 2;
  strcpy((char *)(inited + 96), "messageVersion");
  *(_BYTE *)(inited + 111) = -18;
  *(_QWORD *)(inited + 136) = &type metadata for Int;
  *(_QWORD *)(inited + 144) = sub_1000331DC();
  *(_QWORD *)(inited + 112) = v2;
  *(_WORD *)(inited + 152) = 2;
  *(_QWORD *)(inited + 160) = 0x536567617373656DLL;
  *(_QWORD *)(inited + 168) = 0xEB00000000657A69;
  __asm { BR              X11 }
}

uint64_t sub_1003B0250(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = *(unsigned __int8 *)(v3 + 262);
  *(_QWORD *)(v2 + 200) = v1;
  *(_QWORD *)(v2 + 208) = a1;
  *(_QWORD *)(v2 + 176) = v4;
  *(_WORD *)(v2 + 216) = 2;
  v5 = sub_1006B8C78(v2);
  return (*(uint64_t (**)(unint64_t))(v3 + 8))(v5);
}

uint64_t sub_1003B02C8(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 248) = a3;
  *(_QWORD *)(v4 + 256) = a4;
  *(_QWORD *)(v4 + 240) = a2;
  *(_BYTE *)(v4 + 264) = a1;
  return swift_task_switch(sub_1003B02E8, 0, 0);
}

void sub_1003B02E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t inited;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(unsigned __int8 *)(v0 + 264);
  v4 = sub_10001A9A8(&qword_1010EBE10);
  inited = swift_initStackObject(v4, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100E221E0;
  *(_QWORD *)(inited + 32) = 0x546567617373656DLL;
  *(_QWORD *)(inited + 40) = 0xEB00000000657079;
  *(_QWORD *)(inited + 72) = &type metadata for Int32;
  *(_QWORD *)(inited + 80) = sub_1003BB594();
  *(_DWORD *)(inited + 48) = v3 + 1;
  *(_WORD *)(inited + 88) = 2;
  strcpy((char *)(inited + 96), "messageVersion");
  *(_BYTE *)(inited + 111) = -18;
  *(_QWORD *)(inited + 136) = &type metadata for Int;
  *(_QWORD *)(inited + 144) = sub_1000331DC();
  *(_QWORD *)(inited + 112) = v2;
  *(_WORD *)(inited + 152) = 2;
  *(_QWORD *)(inited + 160) = 0x536567617373656DLL;
  *(_QWORD *)(inited + 168) = 0xEB00000000657A69;
  __asm { BR              X11 }
}

uint64_t sub_1003B03F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = *(unsigned __int8 *)(v3 + 262);
  *(_QWORD *)(v2 + 200) = v1;
  *(_QWORD *)(v2 + 208) = a1;
  *(_QWORD *)(v2 + 176) = v4;
  *(_WORD *)(v2 + 216) = 2;
  v5 = sub_1006B8C78(v2);
  return (*(uint64_t (**)(unint64_t))(v3 + 8))(v5);
}

uint64_t sub_1003B046C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  char *v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001A9A8(&qword_1010F9F20);
    v3 = (_QWORD *)static _SetStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptySetSingleton;
  }
  v4 = a1 + 56;
  v5 = -1 << *(_BYTE *)(a1 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(a1 + 56);
  v8 = (unint64_t)(63 - v5) >> 6;
  v9 = (char *)(v3 + 7);
  swift_bridgeObjectRetain(a1);
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v7)
    {
      v14 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_28;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v16 >= v8)
      goto LABEL_37;
    v17 = *(_QWORD *)(v4 + 8 * v16);
    v18 = v11 + 1;
    if (!v17)
    {
      v18 = v11 + 2;
      if (v11 + 2 >= v8)
        goto LABEL_37;
      v17 = *(_QWORD *)(v4 + 8 * v18);
      if (!v17)
      {
        v18 = v11 + 3;
        if (v11 + 3 >= v8)
          goto LABEL_37;
        v17 = *(_QWORD *)(v4 + 8 * v18);
        if (!v17)
        {
          v18 = v11 + 4;
          if (v11 + 4 >= v8)
            goto LABEL_37;
          v17 = *(_QWORD *)(v4 + 8 * v18);
          if (!v17)
            break;
        }
      }
    }
LABEL_27:
    v7 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v18 << 6);
    v11 = v18;
LABEL_28:
    v20 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v15);
    v21 = v20[1];
    *(_QWORD *)&v29 = *v20;
    *((_QWORD *)&v29 + 1) = v21;
    swift_bridgeObjectRetain(v21);
    swift_dynamicCast(v32, &v29, &type metadata for String, &type metadata for AnyHashable, 7);
    v29 = v32[0];
    v30 = v32[1];
    v31 = v33;
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v22 = -1 << *((_BYTE *)v3 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)&v9[8 * (v23 >> 6)]) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)&v9[8 * (v23 >> 6)])) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)&v9[8 * v24];
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)&v9[(v12 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v12;
    v13 = v3[6] + 40 * v12;
    *(_OWORD *)v13 = v29;
    *(_OWORD *)(v13 + 16) = v30;
    *(_QWORD *)(v13 + 32) = v31;
    ++v3[2];
  }
  v19 = v11 + 5;
  if (v11 + 5 >= v8)
  {
LABEL_37:
    swift_release();
    sub_10007CC38(a1);
    return (uint64_t)v3;
  }
  v17 = *(_QWORD *)(v4 + 8 * v19);
  if (v17)
  {
    v18 = v11 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v18 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v18 >= v8)
      goto LABEL_37;
    v17 = *(_QWORD *)(v4 + 8 * v18);
    ++v19;
    if (v17)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1003B075C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 248) = a3;
  *(_QWORD *)(v4 + 256) = a4;
  *(_QWORD *)(v4 + 240) = a2;
  *(_BYTE *)(v4 + 264) = a1;
  return swift_task_switch(sub_1003D999C, 0, 0);
}

uint64_t sub_1003B077C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = a1;
  v1 = sub_10001A9A8(&qword_1010F9F18);
  return String.init<A>(describing:)(&v3, v1);
}

void sub_1003B07B0()
{
  _QWORD *v0;
  objc_class *v1;
  char *v2;
  char *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  objc_super v12;

  v1 = (objc_class *)type metadata accessor for MessagingServiceDelegateTrampoline();
  v2 = (char *)objc_allocWithZone(v1);
  v3 = &v2[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate];
  *((_QWORD *)v3 + 1) = 0;
  v4 = swift_unknownObjectWeakInit(v3, 0);
  *(_QWORD *)(v4 + 8) = &off_1010BDC88;
  swift_unknownObjectWeakAssign(v4, v0);
  v12.receiver = v2;
  v12.super_class = v1;
  v5 = objc_msgSendSuper2(&v12, "init");
  v6 = (void *)v0[5];
  v0[5] = v5;

  v7 = (void *)v0[7];
  v8 = (void *)v0[5];
  v9 = objc_allocWithZone((Class)IDSServiceDelegateProperties);
  v10 = v8;
  v11 = objc_msgSend(v9, "init");
  objc_msgSend(v7, "addDelegate:withDelegateProperties:queue:", v10, v11, v0[6]);

}

_QWORD *sub_1003B0894()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;
  void *v3;
  uint64_t v4;
  _QWORD v5[2];
  uint64_t v6;

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v5[0] = 0x7365547265646E75;
  v5[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v6, v5, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
    return _swiftEmptyArrayStorage;
  result = objc_msgSend(*(id *)(v0 + 56), "devices");
  if (result)
  {
    v3 = result;
    v4 = sub_10000F4A0(0, &qword_1010F94E0, IDSDevice_ptr);
    v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

    return (_QWORD *)v1;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1003B0994(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[10];

  v1 = a1();
  v2 = v1;
  if (!((unint64_t)v1 >> 62))
  {
    v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  if (v1 >= 0)
    v1 &= 0xFFFFFFFFFFFFFF8uLL;
  v3 = _CocoaArrayWrapper.endIndex.getter(v1);
  if (!v3)
    goto LABEL_15;
LABEL_3:
  result = (_QWORD *)sub_10009A844(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v5 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
      else
        v6 = *(id *)(v2 + 8 * v5 + 32);
      sub_100AA600C(v6, (uint64_t)v17);
      v8 = _swiftEmptyArrayStorage[2];
      v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1)
        sub_10009A844(v7 > 1, v8 + 1, 1);
      ++v5;
      _swiftEmptyArrayStorage[2] = v8 + 1;
      v9 = &_swiftEmptyArrayStorage[20 * v8];
      v10 = v17[1];
      v9[2] = v17[0];
      v9[3] = v10;
      v11 = v17[2];
      v12 = v17[3];
      v13 = v17[5];
      v9[6] = v17[4];
      v9[7] = v13;
      v9[4] = v11;
      v9[5] = v12;
      v14 = v17[6];
      v15 = v17[7];
      v16 = v17[9];
      v9[10] = v17[8];
      v9[11] = v16;
      v9[8] = v14;
      v9[9] = v15;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  __break(1u);
  return result;
}

void sub_1003B0B00(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1003B0B18(a1, a2, a3, a4, (uint64_t)&type metadata for BeaconSharingMessageType);
}

void sub_1003B0B0C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1003B0B18(a1, a2, a3, a4, (uint64_t)&type metadata for ItemSharingCrossAccountMessageType);
}

void sub_1003B0B18(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  void *object;
  Swift::String v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[0] = 0;
  v15[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  v9._countAndFlagsBits = 0x286567617373654DLL;
  v9._object = (void *)0xEE00203A65707974;
  String.append(_:)(v9);
  LOBYTE(v14) = a1;
  _print_unlocked<A, B>(_:_:)(&v14, v15, a5, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v10._countAndFlagsBits = 0x6F6973726576202CLL;
  v10._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v10);
  v14 = a2;
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  v13._countAndFlagsBits = 0x3A7365747962202CLL;
  v13._object = (void *)0xE900000000000020;
  String.append(_:)(v13);
  __asm { BR              X11 }
}

uint64_t sub_1003B0C40()
{
  Swift::String v0;
  void *object;
  Swift::String v2;
  uint64_t v4;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return v4;
}

unint64_t sub_1003B0CDC(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, a1, a2);
  v4 = Hasher._finalize()();
  return sub_1003B0D40(a1, a2, v4);
}

unint64_t sub_1003B0D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      i = (i + 1) & v13;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v14 = (_QWORD *)(v9 + 16 * i);
        v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0)
        {
          for (i = (i + 1) & v13; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v13)
          {
            v17 = (_QWORD *)(v9 + 16 * i);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

Swift::Int sub_1003B0E84(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::Int v47;
  Swift::Int result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int (*v70)(uint64_t, uint64_t, uint64_t);
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t);
  char *v75;
  uint64_t v76;
  char *v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int (*v85)(uint64_t, uint64_t, uint64_t);
  int v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  void (*v92)(char *, uint64_t);
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void (*v104)(char *, uint64_t, uint64_t);
  char *v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  BOOL v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  BOOL v131;
  uint64_t v132;
  char v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  BOOL v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int (*v166)(char *, uint64_t, uint64_t);
  void (*v167)(char *, char *, uint64_t);
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char v172;
  void (*v173)(char *, uint64_t);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  unint64_t v185;
  _QWORD *v186;
  char *v187;
  Swift::Int v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  char *v196;
  void (*v197)(char *, uint64_t, uint64_t);
  char *v198;
  char *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int (*v219)(uint64_t, uint64_t, uint64_t);
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  char *v225;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v186 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v186 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v186 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v186 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v186 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v186 - v18;
  v20 = type metadata accessor for Date(0);
  v212 = *(_QWORD *)(v20 - 8);
  v21 = __chkstk_darwin(v20);
  v208 = (char *)&v186 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v225 = (char *)&v186 - v24;
  v25 = __chkstk_darwin(v23);
  v193 = (char *)&v186 - v26;
  v27 = __chkstk_darwin(v25);
  v201 = (char *)&v186 - v28;
  v29 = __chkstk_darwin(v27);
  v189 = (char *)&v186 - v30;
  __chkstk_darwin(v29);
  v206 = (char *)&v186 - v31;
  v216 = type metadata accessor for ShareRecord(0);
  v205 = *(_QWORD *)(v216 - 8);
  v32 = __chkstk_darwin(v216);
  v200 = (uint64_t)&v186 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v217 = (uint64_t)&v186 - v35;
  v36 = __chkstk_darwin(v34);
  v213 = (uint64_t)&v186 - v37;
  v38 = __chkstk_darwin(v36);
  v221 = (uint64_t)&v186 - v39;
  v40 = __chkstk_darwin(v38);
  v196 = (char *)&v186 - v41;
  v42 = __chkstk_darwin(v40);
  v203 = (uint64_t)&v186 - v43;
  v44 = __chkstk_darwin(v42);
  v191 = (uint64_t)&v186 - v45;
  __chkstk_darwin(v44);
  v192 = (uint64_t)&v186 - v46;
  v224 = a1;
  v47 = a1[1];
  result = _minimumMergeRunLength(_:)(v47);
  if (result >= v47)
  {
    if ((v47 & 0x8000000000000000) == 0)
    {
      if (v47)
        return sub_1003B1FF0(0, v47, 1, v224);
      return result;
    }
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  if (v47 >= 0)
    v49 = v47;
  else
    v49 = v47 + 1;
  if (v47 < -1)
    goto LABEL_173;
  v210 = v5;
  v194 = v11;
  v198 = v14;
  v187 = v17;
  v188 = result;
  if (v47 < 2)
  {
    v54 = v206;
    v204 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v205 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v205 + 80));
    v51 = v216;
    if (v47 != 1)
    {
      v59 = _swiftEmptyArrayStorage[2];
      v57 = (char *)_swiftEmptyArrayStorage;
      v177 = _swiftEmptyArrayStorage;
      if (v59 < 2)
      {
LABEL_142:
        swift_bridgeObjectRelease();
        v177[2] = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_129;
    }
    v55 = 1;
    v186 = _swiftEmptyArrayStorage;
  }
  else
  {
    v50 = v49 >> 1;
    v51 = v216;
    v52 = static Array._allocateBufferUninitialized(minimumCapacity:)(v49 >> 1, v216);
    *(_QWORD *)(v52 + 16) = v50;
    v53 = *(unsigned __int8 *)(v205 + 80);
    v186 = (_QWORD *)v52;
    v204 = v52 + ((v53 + 32) & ~v53);
    v54 = v206;
    v55 = v47;
  }
  v56 = 0;
  v57 = (char *)_swiftEmptyArrayStorage;
  v190 = v19;
  v209 = v20;
  v58 = v225;
  v214 = v8;
  while (1)
  {
    v60 = v56 + 1;
    v199 = v57;
    v202 = v56;
    v222 = v55;
    if (v56 + 1 >= v55)
    {
      v73 = v56++;
      v72 = v212;
    }
    else
    {
      v61 = v19;
      v62 = *v224;
      v63 = *(_QWORD *)(v205 + 72);
      v218 = v60;
      v64 = v192;
      sub_10005972C(v62 + v63 * v60, v192, type metadata accessor for ShareRecord);
      v195 = v62;
      v223 = v63;
      v65 = v62 + v63 * v202;
      v66 = (uint64_t)v61;
      v67 = v191;
      sub_10005972C(v65, v191, type metadata accessor for ShareRecord);
      sub_10000F9B8(v64 + *(int *)(v51 + 32), v66, (uint64_t *)&unk_1010EA690);
      v68 = v51;
      v69 = v212;
      v70 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v212 + 48);
      v71 = v70(v66, 1, v20);
      v219 = v70;
      if (v71 == 1)
      {
        sub_100004048(v66, (uint64_t *)&unk_1010EA690);
        LODWORD(v220) = 0;
        v72 = v69;
      }
      else
      {
        v74 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 32);
        v74(v54, v66, v20);
        v75 = v54;
        v76 = (uint64_t)v187;
        sub_10000F9B8(v67 + *(int *)(v68 + 32), (uint64_t)v187, (uint64_t *)&unk_1010EA690);
        if (v70(v76, 1, v20) == 1)
        {
          (*(void (**)(char *, uint64_t))(v69 + 8))(v75, v20);
          sub_100004048(v76, (uint64_t *)&unk_1010EA690);
          LODWORD(v220) = 0;
        }
        else
        {
          v77 = v189;
          v74(v189, v76, v20);
          LODWORD(v220) = static Date.< infix(_:_:)(v75, v77);
          v78 = *(void (**)(char *, uint64_t))(v69 + 8);
          v78(v77, v20);
          v78(v75, v20);
        }
        v72 = v69;
        v54 = v75;
      }
      sub_1000126B0(v67, type metadata accessor for ShareRecord);
      sub_1000126B0(v192, type metadata accessor for ShareRecord);
      v73 = v202;
      v56 = v202 + 2;
      v55 = v222;
      v51 = v216;
      if (v202 + 2 >= v222)
      {
        v58 = v225;
      }
      else
      {
        v218 *= v223;
        v79 = v195;
        v211 = v223 * v56;
        v80 = (uint64_t)v196;
        while (1)
        {
          v81 = v203;
          sub_10005972C(v79 + v211, v203, type metadata accessor for ShareRecord);
          sub_10005972C(v79 + v218, v80, type metadata accessor for ShareRecord);
          v82 = v81 + *(int *)(v51 + 32);
          v83 = v51;
          v84 = (uint64_t)v198;
          sub_10000F9B8(v82, (uint64_t)v198, (uint64_t *)&unk_1010EA690);
          v85 = v219;
          if (v219(v84, 1, v20) == 1)
          {
            sub_100004048(v84, (uint64_t *)&unk_1010EA690);
            v86 = 0;
          }
          else
          {
            v215 = v56;
            v87 = v80;
            v88 = v212;
            v89 = v201;
            v197 = *(void (**)(char *, uint64_t, uint64_t))(v212 + 32);
            v197(v201, v84, v20);
            v90 = (uint64_t)v194;
            sub_10000F9B8(v87 + *(int *)(v83 + 32), (uint64_t)v194, (uint64_t *)&unk_1010EA690);
            if (v85(v90, 1, v20) == 1)
            {
              (*(void (**)(char *, uint64_t))(v88 + 8))(v89, v20);
              sub_100004048(v90, (uint64_t *)&unk_1010EA690);
              v86 = 0;
            }
            else
            {
              v91 = v193;
              v197(v193, v90, v20);
              v86 = static Date.< infix(_:_:)(v201, v91);
              v92 = *(void (**)(char *, uint64_t))(v88 + 8);
              v93 = v91;
              v94 = v201;
              v92(v93, v20);
              v92(v94, v20);
            }
            v80 = (uint64_t)v196;
            v56 = v215;
          }
          sub_1000126B0(v80, type metadata accessor for ShareRecord);
          sub_1000126B0(v203, type metadata accessor for ShareRecord);
          v51 = v216;
          if (((v220 ^ v86) & 1) != 0)
            break;
          ++v56;
          v79 += v223;
          v55 = v222;
          v54 = v206;
          if (v222 == v56)
          {
            v56 = v222;
            v72 = v212;
            v58 = v225;
            v73 = v202;
            goto LABEL_37;
          }
        }
        v72 = v212;
        v58 = v225;
        v54 = v206;
        v73 = v202;
        v55 = v222;
      }
LABEL_37:
      v57 = v199;
      if ((v220 & 1) != 0)
      {
        if (v56 < v73)
          goto LABEL_166;
        if (v73 < v56)
        {
          v95 = 0;
          v96 = v223 * (v56 - 1);
          v97 = v56 * v223;
          v98 = v73;
          v99 = v73 * v223;
          do
          {
            if (v98 != v56 + v95 - 1)
            {
              v102 = v195;
              if (!v195)
                goto LABEL_171;
              v103 = v195 + v99;
              v220 = v195 + v96;
              sub_1000126EC(v195 + v99, v200, type metadata accessor for ShareRecord);
              if (v99 < v96 || v103 >= v102 + v97)
              {
                v100 = v102 + v99;
                v101 = v220;
                swift_arrayInitWithTakeFrontToBack(v100, v220, 1, v216);
              }
              else
              {
                v101 = v220;
                if (v99 != v96)
                  swift_arrayInitWithTakeBackToFront(v103, v220);
              }
              sub_1000126EC(v200, v101, type metadata accessor for ShareRecord);
              v54 = v206;
              v57 = v199;
            }
            ++v98;
            --v95;
            v96 -= v223;
            v97 -= v223;
            v99 += v223;
          }
          while (v98 < v56 + v95);
          v20 = v209;
          v72 = v212;
          v58 = v225;
          v51 = v216;
          v73 = v202;
          v55 = v222;
        }
      }
    }
    if (v56 >= v55)
      goto LABEL_63;
    if (__OFSUB__(v56, v73))
      goto LABEL_164;
    if (v56 - v73 >= v188)
    {
      v73 = v202;
LABEL_63:
      if (v56 < v73)
        goto LABEL_159;
      goto LABEL_64;
    }
    if (__OFADD__(v202, v188))
      goto LABEL_167;
    if (v202 + v188 >= v222)
      v104 = (void (*)(char *, uint64_t, uint64_t))v222;
    else
      v104 = (void (*)(char *, uint64_t, uint64_t))(v202 + v188);
    if ((uint64_t)v104 < v202)
      goto LABEL_168;
    if ((void (*)(char *, uint64_t, uint64_t))v56 == v104)
    {
      if (v56 < v202)
        goto LABEL_159;
      goto LABEL_64;
    }
    v211 = *(_QWORD *)(v205 + 72);
    v222 = v56 * v211;
    v223 = v211 * (v56 - 1);
    v197 = v104;
    while (2)
    {
      v161 = 0;
      v162 = v202;
      v215 = v56;
      while (1)
      {
        v220 = v162;
        v163 = *v224;
        v164 = v221;
        v219 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v222 + v161);
        sub_10005972C(v222 + v161 + v163, v221, type metadata accessor for ShareRecord);
        v218 = v223 + v161;
        v165 = v213;
        sub_10005972C(v223 + v161 + v163, v213, type metadata accessor for ShareRecord);
        sub_10000F9B8(v164 + *(int *)(v51 + 32), (uint64_t)v8, (uint64_t *)&unk_1010EA690);
        v166 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48);
        if (v166(v8, 1, v20) == 1)
        {
          v160 = (uint64_t)v8;
LABEL_112:
          sub_100004048(v160, (uint64_t *)&unk_1010EA690);
          sub_1000126B0(v213, type metadata accessor for ShareRecord);
          sub_1000126B0(v221, type metadata accessor for ShareRecord);
          goto LABEL_113;
        }
        v167 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
        v168 = v225;
        v167(v225, v8, v20);
        v169 = (uint64_t)v210;
        sub_10000F9B8(v165 + *(int *)(v51 + 32), (uint64_t)v210, (uint64_t *)&unk_1010EA690);
        if (v166((char *)v169, 1, v20) == 1)
        {
          (*(void (**)(char *, uint64_t))(v72 + 8))(v168, v20);
          v160 = v169;
          v8 = v214;
          v56 = v215;
          v51 = v216;
          goto LABEL_112;
        }
        v170 = v165;
        v171 = v208;
        v167(v208, (char *)v169, v20);
        v172 = static Date.< infix(_:_:)(v225, v171);
        v173 = *(void (**)(char *, uint64_t))(v72 + 8);
        v173(v171, v20);
        v173(v225, v20);
        sub_1000126B0(v170, type metadata accessor for ShareRecord);
        sub_1000126B0(v221, type metadata accessor for ShareRecord);
        if ((v172 & 1) == 0)
          break;
        v174 = *v224;
        v8 = v214;
        if (!*v224)
          goto LABEL_169;
        v175 = v174 + v222 + v161;
        v176 = v174 + v223 + v161;
        sub_1000126EC(v175, v217, type metadata accessor for ShareRecord);
        v20 = v209;
        v72 = v212;
        v56 = v215;
        v51 = v216;
        swift_arrayInitWithTakeFrontToBack(v175, v176, 1, v216);
        sub_1000126EC(v217, v176, type metadata accessor for ShareRecord);
        v161 -= v211;
        v162 = v220 + 1;
        if (v56 == v220 + 1)
          goto LABEL_113;
      }
      v8 = v214;
      v56 = v215;
      v20 = v209;
      v72 = v212;
      v51 = v216;
LABEL_113:
      ++v56;
      v223 += v211;
      v222 += v211;
      if ((void (*)(char *, uint64_t, uint64_t))v56 != v197)
        continue;
      break;
    }
    v56 = (uint64_t)v197;
    v54 = v206;
    v57 = v199;
    v58 = v225;
    if ((uint64_t)v197 < v202)
    {
LABEL_159:
      __break(1u);
      goto LABEL_160;
    }
LABEL_64:
    v105 = v58;
    if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) != 0)
      v57 = v199;
    else
      v57 = sub_10088E710(0, *((_QWORD *)v199 + 2) + 1, 1, v199);
    v107 = *((_QWORD *)v57 + 2);
    v106 = *((_QWORD *)v57 + 3);
    v59 = v107 + 1;
    if (v107 >= v106 >> 1)
      v57 = sub_10088E710((char *)(v106 > 1), v107 + 1, 1, v57);
    v58 = v105;
    *((_QWORD *)v57 + 2) = v59;
    v108 = v57 + 32;
    v109 = &v57[16 * v107 + 32];
    *(_QWORD *)v109 = v202;
    *((_QWORD *)v109 + 1) = v56;
    if (v107)
      break;
    v59 = 1;
LABEL_15:
    v55 = v224[1];
    v19 = v190;
    v20 = v209;
    if (v56 >= v55)
    {
      v177 = v186;
      if (v59 < 2)
        goto LABEL_142;
LABEL_129:
      v178 = *v224;
      while (1)
      {
        v179 = v59 - 2;
        if (v59 < 2)
          break;
        if (!v178)
          goto LABEL_172;
        v180 = v57;
        v181 = *(_QWORD *)&v57[16 * v179 + 32];
        v182 = *(_QWORD *)&v57[16 * v59 + 24];
        v183 = v207;
        sub_1003B241C(v178 + *(_QWORD *)(v205 + 72) * v181, v178 + *(_QWORD *)(v205 + 72) * *(_QWORD *)&v57[16 * v59 + 16], v178 + *(_QWORD *)(v205 + 72) * v182, v204);
        if (v183)
          goto LABEL_127;
        if (v182 < v181)
          goto LABEL_161;
        v207 = 0;
        if ((swift_isUniquelyReferenced_nonNull_native(v180) & 1) == 0)
          v180 = sub_10088F088((uint64_t)v180);
        if (v179 >= *((_QWORD *)v180 + 2))
          goto LABEL_162;
        v184 = &v180[16 * v179 + 32];
        *(_QWORD *)v184 = v181;
        *((_QWORD *)v184 + 1) = v182;
        v185 = *((_QWORD *)v180 + 2);
        if (v59 > v185)
          goto LABEL_163;
        memmove(&v180[16 * v59 + 16], &v180[16 * v59 + 32], 16 * (v185 - v59));
        v57 = v180;
        *((_QWORD *)v180 + 2) = v185 - 1;
        v59 = v185 - 1;
        if (v185 <= 2)
          goto LABEL_142;
      }
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
      goto LABEL_165;
    }
  }
  while (2)
  {
    v110 = v59 - 1;
    if (v59 >= 4)
    {
      v115 = &v108[16 * v59];
      v116 = *((_QWORD *)v115 - 8);
      v117 = *((_QWORD *)v115 - 7);
      v121 = __OFSUB__(v117, v116);
      v118 = v117 - v116;
      if (v121)
        goto LABEL_148;
      v120 = *((_QWORD *)v115 - 6);
      v119 = *((_QWORD *)v115 - 5);
      v121 = __OFSUB__(v119, v120);
      v113 = v119 - v120;
      v114 = v121;
      if (v121)
        goto LABEL_149;
      v122 = v59 - 2;
      v123 = &v108[16 * v59 - 32];
      v125 = *(_QWORD *)v123;
      v124 = *((_QWORD *)v123 + 1);
      v121 = __OFSUB__(v124, v125);
      v126 = v124 - v125;
      if (v121)
        goto LABEL_151;
      v121 = __OFADD__(v113, v126);
      v127 = v113 + v126;
      if (v121)
        goto LABEL_154;
      if (v127 >= v118)
      {
        v145 = &v108[16 * v110];
        v147 = *(_QWORD *)v145;
        v146 = *((_QWORD *)v145 + 1);
        v121 = __OFSUB__(v146, v147);
        v148 = v146 - v147;
        if (v121)
          goto LABEL_158;
        v138 = v113 < v148;
      }
      else
      {
LABEL_82:
        if ((v114 & 1) != 0)
          goto LABEL_150;
        v122 = v59 - 2;
        v128 = &v108[16 * v59 - 32];
        v130 = *(_QWORD *)v128;
        v129 = *((_QWORD *)v128 + 1);
        v131 = __OFSUB__(v129, v130);
        v132 = v129 - v130;
        v133 = v131;
        if (v131)
          goto LABEL_153;
        v134 = &v108[16 * v110];
        v136 = *(_QWORD *)v134;
        v135 = *((_QWORD *)v134 + 1);
        v121 = __OFSUB__(v135, v136);
        v137 = v135 - v136;
        if (v121)
          goto LABEL_156;
        if (__OFADD__(v132, v137))
          goto LABEL_157;
        if (v132 + v137 < v113)
          goto LABEL_94;
        v138 = v113 < v137;
      }
      if (v138)
        v110 = v122;
    }
    else
    {
      if (v59 == 3)
      {
        v112 = *((_QWORD *)v57 + 4);
        v111 = *((_QWORD *)v57 + 5);
        v121 = __OFSUB__(v111, v112);
        v113 = v111 - v112;
        v114 = v121;
        goto LABEL_82;
      }
      v139 = *((_QWORD *)v57 + 4);
      v140 = *((_QWORD *)v57 + 5);
      v121 = __OFSUB__(v140, v139);
      v132 = v140 - v139;
      v133 = v121;
LABEL_94:
      if ((v133 & 1) != 0)
        goto LABEL_152;
      v141 = &v108[16 * v110];
      v143 = *(_QWORD *)v141;
      v142 = *((_QWORD *)v141 + 1);
      v121 = __OFSUB__(v142, v143);
      v144 = v142 - v143;
      if (v121)
        goto LABEL_155;
      if (v144 < v132)
        goto LABEL_15;
    }
    v149 = v110 - 1;
    if (v110 - 1 >= v59)
    {
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
      goto LABEL_159;
    }
    if (!*v224)
      goto LABEL_170;
    v150 = v56;
    v151 = v57;
    v152 = &v108[16 * v149];
    v153 = *(_QWORD *)v152;
    v154 = v108;
    v155 = v110;
    v156 = &v108[16 * v110];
    v157 = *((_QWORD *)v156 + 1);
    v158 = v207;
    sub_1003B241C(*v224 + *(_QWORD *)(v205 + 72) * *(_QWORD *)v152, *v224 + *(_QWORD *)(v205 + 72) * *(_QWORD *)v156, *v224 + *(_QWORD *)(v205 + 72) * v157, v204);
    if (!v158)
    {
      if (v157 < v153)
        goto LABEL_145;
      if (v155 > *((_QWORD *)v151 + 2))
        goto LABEL_146;
      *(_QWORD *)v152 = v153;
      *(_QWORD *)&v154[16 * v149 + 8] = v157;
      v159 = *((_QWORD *)v151 + 2);
      if (v155 >= v159)
        goto LABEL_147;
      v207 = 0;
      v59 = v159 - 1;
      memmove(v156, v156 + 16, 16 * (v159 - 1 - v155));
      v108 = v154;
      v57 = v151;
      *((_QWORD *)v151 + 2) = v159 - 1;
      v58 = v225;
      v54 = v206;
      v51 = v216;
      v56 = v150;
      v8 = v214;
      if (v159 <= 2)
        goto LABEL_15;
      continue;
    }
    break;
  }
  v177 = v186;
LABEL_127:
  swift_bridgeObjectRelease();
  v177[2] = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003B1FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v58 = a4;
  v47 = a1;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v7 = __chkstk_darwin(v6);
  v51 = (uint64_t)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v45 - v9;
  v60 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v60 - 8);
  v12 = __chkstk_darwin(v60);
  v49 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v59 = (char *)&v45 - v14;
  v15 = type metadata accessor for ShareRecord(0);
  v16 = __chkstk_darwin(v15);
  v54 = (uint64_t)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v45 - v19;
  result = __chkstk_darwin(v18);
  v61 = (uint64_t)&v45 - v23;
  v53 = a3;
  v46 = a2;
  if (a3 != a2)
  {
    v24 = result;
    v25 = *(_QWORD *)(v22 + 72);
    v63 = v25 * (v53 - 1);
    v52 = v25;
    v62 = v25 * v53;
    v50 = v10;
    v48 = v20;
    while (2)
    {
      v27 = 0;
      v28 = v47;
      while (1)
      {
        v29 = *v58;
        v30 = v61;
        v57 = v62 + v27;
        sub_10005972C(v62 + v27 + v29, v61, type metadata accessor for ShareRecord);
        v56 = v63 + v27;
        sub_10005972C(v63 + v27 + v29, (uint64_t)v20, type metadata accessor for ShareRecord);
        sub_10000F9B8(v30 + *(int *)(v24 + 32), (uint64_t)v10, (uint64_t *)&unk_1010EA690);
        v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
        if (v31(v10, 1, v60) == 1)
          break;
        v55 = v28;
        v32 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
        v33 = v60;
        v32(v59, v10, v60);
        v34 = v51;
        sub_10000F9B8((uint64_t)&v20[*(int *)(v24 + 32)], v51, (uint64_t *)&unk_1010EA690);
        if (v31((char *)v34, 1, v33) == 1)
        {
          (*(void (**)(char *, uint64_t))(v11 + 8))(v59, v33);
          v26 = v34;
          v10 = v50;
          goto LABEL_5;
        }
        v35 = v24;
        v36 = v59;
        v37 = v49;
        v32(v49, (char *)v34, v33);
        v38 = static Date.< infix(_:_:)(v36, v37);
        v39 = *(void (**)(char *, uint64_t))(v11 + 8);
        v40 = v36;
        v24 = v35;
        v20 = v48;
        v39(v37, v33);
        v39(v40, v33);
        sub_1000126B0((uint64_t)v20, type metadata accessor for ShareRecord);
        result = sub_1000126B0(v61, type metadata accessor for ShareRecord);
        v10 = v50;
        v41 = v55;
        if ((v38 & 1) == 0)
          goto LABEL_6;
        v42 = *v58;
        if (!*v58)
        {
          __break(1u);
          return result;
        }
        v43 = v42 + v62 + v27;
        v44 = v42 + v63 + v27;
        sub_1000126EC(v43, v54, type metadata accessor for ShareRecord);
        swift_arrayInitWithTakeFrontToBack(v43, v44, 1, v24);
        result = sub_1000126EC(v54, v44, type metadata accessor for ShareRecord);
        v27 -= v52;
        v28 = v41 + 1;
        if (v53 == v28)
          goto LABEL_6;
      }
      v26 = (uint64_t)v10;
LABEL_5:
      sub_100004048(v26, (uint64_t *)&unk_1010EA690);
      sub_1000126B0((uint64_t)v20, type metadata accessor for ShareRecord);
      result = sub_1000126B0(v61, type metadata accessor for ShareRecord);
LABEL_6:
      v63 += v52;
      v62 += v52;
      if (++v53 == v46)
        return result;
      continue;
    }
  }
  return result;
}

uint64_t sub_1003B241C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  unsigned int (*v47)(_BYTE *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_BYTE *, _BYTE *, uint64_t);
  unint64_t v51;
  _BYTE *v52;
  unint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  char v57;
  void (*v58)(_BYTE *, uint64_t);
  unint64_t v59;
  unint64_t v60;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(_BYTE *, uint64_t, uint64_t);
  uint64_t v68;
  char v69;
  _BYTE *v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  void (*v74)(_BYTE *, uint64_t);
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  BOOL v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  BOOL v85;
  uint64_t result;
  _BYTE v87[16];
  _BYTE *v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;
  unint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  _BYTE *v96;
  _BYTE *v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _BYTE *v105;
  unint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  _BYTE *v109;

  v106 = a2;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v8 = __chkstk_darwin(v7);
  v91 = &v87[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v8);
  v97 = &v87[-v11];
  v12 = __chkstk_darwin(v10);
  v90 = &v87[-v13];
  __chkstk_darwin(v12);
  v98 = &v87[-v14];
  v102 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v102 - 8);
  v16 = __chkstk_darwin(v102);
  v89 = &v87[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = __chkstk_darwin(v16);
  v20 = &v87[-v19];
  v21 = __chkstk_darwin(v18);
  v88 = &v87[-v22];
  __chkstk_darwin(v21);
  v95 = &v87[-v23];
  v24 = type metadata accessor for ShareRecord(0);
  v25 = __chkstk_darwin(v24);
  v92 = &v87[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = __chkstk_darwin(v25);
  v101 = &v87[-v28];
  v29 = __chkstk_darwin(v27);
  v96 = &v87[-v30];
  __chkstk_darwin(v29);
  v99 = (uint64_t)&v87[-v31];
  v94 = *(_QWORD *)(v32 + 72);
  if (!v94)
  {
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  v93 = a1;
  if (v106 - a1 == 0x8000000000000000 && v94 == -1)
    goto LABEL_73;
  v33 = a3 - v106;
  if (a3 - v106 == 0x8000000000000000 && v94 == -1)
    goto LABEL_74;
  v34 = (uint64_t)(v106 - a1) / v94;
  v109 = (_BYTE *)v93;
  v108 = (_BYTE *)a4;
  v35 = v33 / v94;
  v100 = v15;
  v103 = v24;
  v105 = (_BYTE *)a4;
  if (v34 >= v33 / v94)
  {
    if ((v35 & 0x8000000000000000) == 0)
    {
      v38 = v35 * v94;
      v39 = (uint64_t)v97;
      v96 = v20;
      v40 = (uint64_t)v92;
      if (a4 < v106 || v106 + v38 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, v106, v35, v24);
      }
      else if (a4 != v106)
      {
        swift_arrayInitWithTakeBackToFront(a4, v106);
      }
      v59 = a4 + v38;
      v107 = a4 + v38;
      v109 = (_BYTE *)v106;
      v60 = v93;
      if (v38 >= 1 && v93 < v106)
      {
        v99 = -v94;
        do
        {
          v104 = a3;
          v62 = v24;
          v63 = v99;
          v64 = v101;
          sub_10005972C(v59 + v99, (uint64_t)v101, type metadata accessor for ShareRecord);
          v65 = v106 + v63;
          sub_10005972C(v106 + v63, v40, type metadata accessor for ShareRecord);
          sub_10000F9B8((uint64_t)&v64[*(int *)(v24 + 32)], v39, (uint64_t *)&unk_1010EA690);
          v66 = v100;
          v67 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v100 + 48);
          v68 = v102;
          if (v67((_BYTE *)v39, 1, v102) == 1)
          {
            sub_100004048(v39, (uint64_t *)&unk_1010EA690);
            v69 = 0;
          }
          else
          {
            v70 = v96;
            v98 = *(_BYTE **)(v66 + 32);
            ((void (*)(_BYTE *, uint64_t, uint64_t))v98)(v96, v39, v68);
            v71 = v40 + *(int *)(v62 + 32);
            v72 = v91;
            sub_10000F9B8(v71, (uint64_t)v91, (uint64_t *)&unk_1010EA690);
            if (v67(v72, 1, v68) == 1)
            {
              (*(void (**)(_BYTE *, uint64_t))(v66 + 8))(v70, v68);
              sub_100004048((uint64_t)v72, (uint64_t *)&unk_1010EA690);
              v69 = 0;
            }
            else
            {
              v73 = v89;
              ((void (*)(_BYTE *, _BYTE *, uint64_t))v98)(v89, v72, v68);
              v69 = static Date.< infix(_:_:)(v70, v73);
              v74 = *(void (**)(_BYTE *, uint64_t))(v66 + 8);
              v74(v73, v68);
              v74(v70, v68);
            }
            v40 = (uint64_t)v92;
            v60 = v93;
          }
          v75 = v104;
          v76 = v99;
          v77 = v104 + v99;
          sub_1000126B0(v40, type metadata accessor for ShareRecord);
          sub_1000126B0((uint64_t)v101, type metadata accessor for ShareRecord);
          v78 = (unint64_t)v105;
          if ((v69 & 1) != 0)
          {
            if (v75 < v106 || v77 >= v106)
            {
              v83 = v75 + v76;
              v24 = v103;
              swift_arrayInitWithTakeFrontToBack(v83, v65, 1, v103);
            }
            else
            {
              v79 = v75 == v106;
              v24 = v103;
              if (!v79)
                swift_arrayInitWithTakeBackToFront(v77, v65);
            }
            v109 += v76;
          }
          else
          {
            v80 = v107;
            v81 = v107 + v76;
            v107 += v76;
            if (v75 < v80 || v77 >= v80)
            {
              v84 = v75 + v76;
              v24 = v103;
              swift_arrayInitWithTakeFrontToBack(v84, v81, 1, v103);
              v65 = v106;
            }
            else if (v75 == v80)
            {
              v65 = v106;
              v24 = v103;
            }
            else
            {
              v82 = v75 + v76;
              v24 = v103;
              swift_arrayInitWithTakeBackToFront(v82, v81);
              v65 = v106;
            }
          }
          v59 = v107;
          v85 = v107 > v78;
          v39 = (uint64_t)v97;
          if (!v85)
            break;
          v106 = v65;
          a3 = v77;
        }
        while (v65 > v60);
      }
LABEL_71:
      sub_10088EA08((unint64_t *)&v109, (unint64_t *)&v108, (uint64_t *)&v107);
      return 1;
    }
  }
  else if ((v34 & 0x8000000000000000) == 0)
  {
    v36 = v94;
    v37 = v34 * v94;
    if (a4 < v93 || v93 + v37 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, v93, v34, v24);
    }
    else if (a4 != v93)
    {
      swift_arrayInitWithTakeBackToFront(a4, v93);
    }
    v101 = (_BYTE *)(a4 + v37);
    v107 = a4 + v37;
    if (v37 >= 1 && v106 < a3)
    {
      v104 = a3;
      while (1)
      {
        v42 = v36;
        v43 = v99;
        sub_10005972C(v106, v99, type metadata accessor for ShareRecord);
        v44 = v96;
        sub_10005972C((uint64_t)v105, (uint64_t)v96, type metadata accessor for ShareRecord);
        v45 = v98;
        sub_10000F9B8(v43 + *(int *)(v24 + 32), (uint64_t)v98, (uint64_t *)&unk_1010EA690);
        v46 = v100;
        v47 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v100 + 48);
        v48 = v102;
        if (v47(v45, 1, v102) == 1)
          goto LABEL_26;
        v49 = (uint64_t)v44;
        v50 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v46 + 32);
        v50(v95, v98, v48);
        v45 = v90;
        sub_10000F9B8((uint64_t)&v44[*(int *)(v103 + 32)], (uint64_t)v90, (uint64_t *)&unk_1010EA690);
        if (v47(v45, 1, v48) == 1)
          break;
        v55 = v95;
        v56 = v88;
        v50(v88, v45, v48);
        v57 = static Date.< infix(_:_:)(v55, v56);
        v58 = *(void (**)(_BYTE *, uint64_t))(v46 + 8);
        v58(v56, v48);
        v58(v55, v48);
        sub_1000126B0(v49, type metadata accessor for ShareRecord);
        sub_1000126B0(v99, type metadata accessor for ShareRecord);
        v36 = v94;
        if ((v57 & 1) == 0)
          goto LABEL_27;
        v51 = (unint64_t)v109;
        v54 = v106 + v94;
        v24 = v103;
        v53 = v104;
        if ((unint64_t)v109 < v106 || (unint64_t)v109 >= v54)
        {
          swift_arrayInitWithTakeFrontToBack(v109, v106, 1, v103);
        }
        else if (v109 == (_BYTE *)v106)
        {
          v51 = v106;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront(v109, v106);
        }
LABEL_33:
        v109 = (_BYTE *)(v51 + v36);
        v105 = v108;
        if (v108 < v101)
        {
          v106 = v54;
          if (v54 < v53)
            continue;
        }
        goto LABEL_71;
      }
      (*(void (**)(_BYTE *, uint64_t))(v46 + 8))(v95, v48);
      v42 = v94;
      v43 = v99;
LABEL_26:
      sub_100004048((uint64_t)v45, (uint64_t *)&unk_1010EA690);
      sub_1000126B0((uint64_t)v44, type metadata accessor for ShareRecord);
      sub_1000126B0(v43, type metadata accessor for ShareRecord);
      v36 = v42;
LABEL_27:
      v51 = (unint64_t)v109;
      v52 = &v108[v36];
      v24 = v103;
      v53 = v104;
      if (v109 < v108 || v109 >= v52)
      {
        swift_arrayInitWithTakeFrontToBack(v109, v108, 1, v103);
      }
      else if (v109 != v108)
      {
        swift_arrayInitWithTakeBackToFront(v109, v108);
      }
      v108 = v52;
      v54 = v106;
      goto LABEL_33;
    }
    goto LABEL_71;
  }
LABEL_75:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1003B2D18(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_1003B2DBC(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1003B2EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(v2 + 16) = *(_BYTE *)a2;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v2 + 40) = v3;
  *(_QWORD *)(v2 + 48) = a1;
  return swift_task_switch(sub_1003B2ECC, 0, 0);
}

uint64_t sub_1003B2ECC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 56) = v1;
  *(_QWORD *)(v1 + 16) = v0 + 16;
  v2 = (_QWORD *)swift_task_alloc(dword_10111D0D4);
  *(_QWORD *)(v0 + 64) = v2;
  *v2 = v0;
  v2[1] = sub_1003B2F3C;
  return sub_100CD48A8((uint64_t)&unk_1010F9F70, v1);
}

uint64_t sub_1003B2F3C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 64));
  v3 = *(_QWORD *)(v2 + 56);
  if (v0)
  {
    swift_errorRelease(v0);
    swift_task_dealloc(v3);
    v4 = sub_1003D9B48;
  }
  else
  {
    swift_task_dealloc(v3);
    v4 = sub_1003B2FB8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003B2FB8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[9] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[10] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_1003B3024;
  return sub_100CD63AC(v0[6]);
}

uint64_t sub_1003B3024()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 72);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1003B3074(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v2 = *a1;
  v6 = *(_OWORD *)(a1 + 8);
  v3 = *((_QWORD *)a1 + 3);
  v4 = swift_task_alloc(dword_1010F9F7C);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_1003D9734;
  *(_QWORD *)(v4 + 256) = v3;
  *(_OWORD *)(v4 + 240) = v6;
  *(_BYTE *)(v4 + 264) = v2;
  return swift_task_switch(sub_1003B0148, 0, 0);
}

uint64_t sub_1003B30F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(v2 + 16) = *(_BYTE *)a2;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v2 + 40) = v3;
  *(_QWORD *)(v2 + 48) = a1;
  return swift_task_switch(sub_1003B3120, 0, 0);
}

uint64_t sub_1003B3120()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 56) = v1;
  *(_QWORD *)(v1 + 16) = v0 + 16;
  v2 = (_QWORD *)swift_task_alloc(dword_10111D0D4);
  *(_QWORD *)(v0 + 64) = v2;
  *v2 = v0;
  v2[1] = sub_1003B3190;
  return sub_100CD48A8((uint64_t)&unk_1010F9F30, v1);
}

uint64_t sub_1003B3190()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 64));
  v3 = *(_QWORD *)(v2 + 56);
  if (v0)
  {
    swift_errorRelease(v0);
    swift_task_dealloc(v3);
    v4 = sub_1003D9B4C;
  }
  else
  {
    swift_task_dealloc(v3);
    v4 = sub_1003B320C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003B320C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[9] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[10] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_1003D9B3C;
  return sub_100CD63AC(v0[6]);
}

uint64_t sub_1003B3278(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v2 = *a1;
  v6 = *(_OWORD *)(a1 + 8);
  v3 = *((_QWORD *)a1 + 3);
  v4 = swift_task_alloc(dword_1010F9F3C);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_1003D9734;
  *(_QWORD *)(v4 + 256) = v3;
  *(_OWORD *)(v4 + 240) = v6;
  *(_BYTE *)(v4 + 264) = v2;
  return swift_task_switch(sub_1003D999C, 0, 0);
}

_QWORD *sub_1003B32F8(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _BYTE v30[12];
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  _QWORD v37[6];

  v35 = a5;
  v36 = a3;
  v31 = a4;
  v33 = a2;
  v8 = type metadata accessor for DateInterval(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v30[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v34 = type metadata accessor for Date(0);
  v32 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v13 = &v30[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v14);
  v16 = &v30[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10005972C(a1, (uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
  v17 = *(_QWORD *)(a6 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v18 = type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, a6, v17, &type metadata for () + 1, v18);
  v19 = (_QWORD *)v37[0];
  v37[3] = v14;
  v37[4] = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
  v20 = sub_100018F08(v37);
  sub_10005972C((uint64_t)v16, (uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
  v21 = sub_1004DF310(v13, v37, a6);
  v22 = sub_100C6F9A8();
  if ((v31 & 1) != 0)
    sub_1004DE5E4(v22 & 1, (uint64_t)v13, (uint64_t)v20 + *(int *)(v14 + 20), (uint64_t)v11);
  else
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, v33, v8);
  v23 = v21;
  v24 = v36;
  v25 = sub_1003B7B50((uint64_t)v20, (uint64_t)v11, v23, (uint64_t)v13, v36, v19);
  v27 = v26;
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v34);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
  v28 = sub_1003B359C((unint64_t)v16, v25, v27, v24, v35 & 1, 0, v19);
  swift_release();
  sub_1000126B0((uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
  return v28;
}

_QWORD *sub_1003B359C(unint64_t a1, unint64_t a2, unint64_t a3, int a4, int a5, int a6, _QWORD *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v65;
  int v66;
  void (*v67)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v72;
  char *v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  char *v120;
  void (*v121)(char *, char *, uint64_t);
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  NSObject *v135;
  os_log_type_t v136;
  uint64_t v137;
  char *v138;
  void (*v139)(char *, char *, uint64_t);
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  NSObject *v147;
  void (*v148)(char *, char *, uint64_t);
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  NSObject *v172;
  os_log_type_t v173;
  uint64_t v174;
  char *v175;
  void (*v176)(char *, char *, uint64_t);
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void (**v188)(uint64_t, char *, uint64_t);
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned __int8 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  unint64_t v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  unsigned __int8 v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t ObjectType;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v240;
  unint64_t v241;
  unint64_t v242;
  _QWORD *v243;
  unint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  _QWORD *v286;
  double v287;
  uint64_t v289;
  _QWORD *v290;
  unint64_t v291;
  char *v292;
  __int128 v293;
  _QWORD *v294;
  char *v295;
  char *v296;
  __int128 v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  char *v306;
  char *v307;
  _QWORD *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  int v314;
  uint64_t v315;
  uint64_t *v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  char *v322;
  unint64_t v323;
  NSObject *v324;
  char *v325;
  uint64_t v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  uint64_t v332;
  char *v333;
  uint64_t v334;
  unint64_t v335;
  char *v336;
  int v337;
  unint64_t v338;
  _QWORD v339[3];
  uint64_t v340;
  _QWORD v341[4];
  _QWORD v342[3];
  uint64_t v343;
  uint64_t v344;
  _QWORD v345[5];
  __int128 v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  __int128 v351;
  ValueMetadata *v352;
  unint64_t v353;
  _QWORD v354[3];
  ValueMetadata *v355;
  unint64_t v356;
  _QWORD *v357;
  _QWORD v358[5];
  __int128 v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  NSObject *v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;

  LODWORD(v324) = a6;
  LODWORD(v338) = a5;
  v337 = a4;
  v335 = a1;
  v313 = 0;
  v327 = a7;
  v302 = *a7;
  v9 = type metadata accessor for TimeBasedKey(0);
  v309 = *(_QWORD *)(v9 - 8);
  v310 = v9;
  v10 = __chkstk_darwin(v9);
  v318 = (uint64_t)&v289 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v316 = (uint64_t *)((char *)&v289 - v12);
  v13 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  __chkstk_darwin(v13);
  v317 = (char *)&v289 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010F46C0);
  v16 = __chkstk_darwin(v15);
  v295 = (char *)&v289 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v301 = (char *)&v289 - v18;
  v19 = _s18ConnectionKeyGroupVMa(0);
  v298 = *(_QWORD *)(v19 - 8);
  v299 = v19;
  __chkstk_darwin(v19);
  v304 = (uint64_t *)((char *)&v289 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = type metadata accessor for DateInterval(0);
  v319 = *(_QWORD *)(v21 - 8);
  v320 = v21;
  v22 = __chkstk_darwin(v21);
  v315 = (uint64_t)&v289 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v305 = (uint64_t)&v289 - v24;
  v326 = type metadata accessor for UUID(0);
  v333 = *(char **)(v326 - 8);
  v25 = *((_QWORD *)v333 + 8);
  v26 = __chkstk_darwin(v326);
  v336 = (char *)&v289 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v26);
  v296 = (char *)&v289 - v28;
  v29 = __chkstk_darwin(v27);
  v306 = (char *)&v289 - v30;
  __chkstk_darwin(v29);
  v307 = (char *)&v289 - v31;
  v32 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v32);
  v322 = (char *)&v289 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v330 = type metadata accessor for SharedBeaconRecord(0);
  v328 = *(_QWORD *)(v330 - 8);
  v34 = __chkstk_darwin(v330);
  v325 = (char *)&v289 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v334 = (uint64_t)&v289 - v36;
  v37 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v37);
  v39 = (char *)&v289 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for OwnedBeaconRecord(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = __chkstk_darwin(v40);
  v44 = (char *)&v289 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v358[3] = v42;
  v358[4] = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
  v331 = (char *)sub_100018F08(v358);
  sub_10005972C(v335, (uint64_t)v331, type metadata accessor for OwnedBeaconRecord);
  v357 = _swiftEmptyArrayStorage;
  if ((v338 & 1) != 0)
  {
    sub_100030784((uint64_t)v358, (uint64_t)&v367);
    v46 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v47 = swift_dynamicCast(v39, &v367, v46, v40, 6);
    v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
    if ((v47 & 1) != 0)
    {
      v48(v39, 0, 1, v40);
      v49 = sub_1000126EC((uint64_t)v39, (uint64_t)v44, type metadata accessor for OwnedBeaconRecord);
      v40 = static os_log_type_t.error.getter(v49);
      if (qword_1010E9DF8 == -1)
      {
LABEL_4:
        v50 = os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, qword_1011B73B8, "*** forceGenerate triggered ***", 31, 2, _swiftEmptyArrayStorage);
        *(_QWORD *)&v367 = a2;
        __chkstk_darwin(v50);
        *(&v289 - 4) = (uint64_t)v44;
        *(&v289 - 3) = (uint64_t)&v367;
        v51 = v337;
        *((_BYTE *)&v289 - 16) = v337;
        *(&v289 - 1) = (uint64_t)&v357;
        v52 = v313;
        v53 = sub_100DF6580((uint64_t)v44, v51, a2, a3, (void (*)(unint64_t, uint64_t, unint64_t, _OWORD *))sub_1003D1768);
        if (v52)
        {
          v54 = static os_log_type_t.error.getter(v53);
          v55 = qword_1011B73B8;
          v56 = v54;
          if (os_log_type_enabled((os_log_t)qword_1011B73B8, v54))
          {
            swift_errorRetain(v52);
            swift_errorRetain(v52);
            v57 = (uint8_t *)swift_slowAlloc(12, -1);
            v58 = swift_slowAlloc(32, -1);
            *(_QWORD *)&v364 = v58;
            *(_DWORD *)v57 = 136315138;
            swift_getErrorValue(v52, &v340, v339);
            v59 = Error.localizedDescription.getter(v339[1], v339[2]);
            *(_QWORD *)&v359 = sub_100016940(v59, v60, (uint64_t *)&v364);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v359, (char *)&v359 + 8, v57 + 4, v57 + 12);
            swift_bridgeObjectRelease();
            swift_errorRelease(v52);
            swift_errorRelease(v52);
            _os_log_impl((void *)&_mh_execute_header, v55, v56, "Error during forceGenerate: %s", v57, 0xCu);
            swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v58, -1, -1);
            swift_slowDealloc(v57, -1, -1);
          }
          swift_errorRelease(v52);
          sub_1000126B0((uint64_t)v44, type metadata accessor for OwnedBeaconRecord);
        }
        else
        {
          sub_1000126B0((uint64_t)v44, type metadata accessor for OwnedBeaconRecord);
        }
        v286 = v357;
        goto LABEL_151;
      }
LABEL_159:
      swift_once(&qword_1010E9DF8, sub_100654FE4);
      goto LABEL_4;
    }
    v48(v39, 1, 1, v40);
    v237 = sub_100004048((uint64_t)v39, (uint64_t *)&unk_1010F47C0);
    v238 = static os_log_type_t.error.getter(v237);
    if (qword_1010E9DF8 != -1)
      swift_once(&qword_1010E9DF8, sub_100654FE4);
    os_log(_:dso:log:_:_:)(v238, &_mh_execute_header, qword_1011B73B8, "Can't use forceGenerate for a SharedBeaconRecord!", 49, 2, _swiftEmptyArrayStorage);
LABEL_150:
    swift_bridgeObjectRelease();
    v286 = 0;
    goto LABEL_151;
  }
  v329 = v40;
  if (a3 < a2)
  {
LABEL_158:
    __break(1u);
    goto LABEL_159;
  }
  v335 = 0;
  v300 = v25 + 7;
  v294 = v304 + 4;
  v332 = 1;
  *(_QWORD *)&v45 = 141558275;
  v293 = v45;
  v292 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v45 = 141558531;
  v297 = v45;
  v314 = v324 & 1;
  v290 = &type metadata for () + 1;
  v291 = a2;
  v311 = v13;
  v312 = _swiftEmptyArrayStorage;
  v308 = _swiftEmptyArrayStorage;
  v321 = a3;
  v61 = v329;
  v62 = (int *)v330;
  v44 = v333;
  v40 = (uint64_t)v322;
  v63 = (uint64_t)v325;
  while (1)
  {
    sub_100030784((uint64_t)v358, (uint64_t)v354);
    v65 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v66 = swift_dynamicCast(v40, v354, v65, v62, 6);
    v67 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v328 + 56);
    v338 = a2;
    if (v66)
      break;
    v67(v40, 1, 1, v62);
    sub_100004048(v40, (uint64_t *)&unk_1010EE180);
LABEL_23:
    v72 = v61;
    v73 = &v331[*(int *)(v61 + 20)];
    v74 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v44 + 2);
    v75 = v326;
    v74(v336, v73, v326);
    if ((_BYTE)v337)
    {
      if (v337 == 1)
      {
        v352 = &type metadata for SecondaryIndex;
        v76 = sub_100336B24();
      }
      else
      {
        v352 = &type metadata for SecureLocationsIndex;
        v76 = sub_1003D155C();
      }
    }
    else
    {
      v352 = &type metadata for PrimaryIndex;
      v76 = sub_100336BAC();
    }
    v353 = v76;
    *(_QWORD *)&v351 = a2;
    sub_10000F9FC(&v351, (uint64_t)v354);
    v77 = (uint64_t)v317;
    v78 = v336;
    v74(v317, v336, v75);
    sub_100030784((uint64_t)v354, v77 + *(int *)(v13 + 20));
    sub_100DD0430(v77, v314, &v359);
    v79 = v359;
    v80 = v13;
    v81 = v75;
    v82 = v360;
    v83 = v362;
    v323 = v361;
    v324 = v363;
    sub_1000126B0(v77, type metadata accessor for BeaconKeyManager.IndexInformation);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v354);
    v44 = v333;
    (*((void (**)(char *, uint64_t))v333 + 1))(v78, v81);
    sub_100005CF0((uint64_t)&v359, (uint64_t)&v364, &qword_1010FA1E0);
    if (*((_QWORD *)&v365 + 1) >> 60 == 15)
    {
      v84 = v335;
      a2 = v338;
      if ((v332 & 1) != 0)
        v84 = v338;
      v335 = v84;
      a3 = v321;
      v62 = (int *)v330;
      if (v321 == v338)
      {
        swift_bridgeObjectRelease();
        goto LABEL_118;
      }
      v61 = v72;
      v332 = 0;
      v13 = v80;
      v40 = (uint64_t)v322;
      v63 = (uint64_t)v325;
    }
    else
    {
      v368 = v365;
      v369 = v366;
      v367 = v364;
      v85 = &v331[*(int *)(v72 + 32)];
      v86 = sub_1004DDCE4(v337);
      v87 = v315;
      v88 = v83;
      v89 = v338;
      sub_10064C538(v85, v338, v86, v315);
      v90 = v310;
      v91 = v316;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v319 + 16))((uint64_t)v316 + *(int *)(v310 + 20), v87, v320);
      *v91 = v89;
      v92 = (_OWORD *)((char *)v91 + *(int *)(v90 + 24));
      v93 = v369;
      v94 = v367;
      v92[1] = v368;
      v92[2] = v93;
      *v92 = v94;
      sub_10005972C((uint64_t)v91, v318, type metadata accessor for TimeBasedKey);
      v95 = (unint64_t)v357;
      sub_10001BD08(v79, *((unint64_t *)&v79 + 1));
      sub_10001BBBC(v82, v323);
      sub_10001BD08(v88, (unint64_t)v324);
      if ((swift_isUniquelyReferenced_nonNull_native(v95) & 1) == 0)
        v95 = sub_1007C80D0(0, *(_QWORD *)(v95 + 16) + 1, 1, v95);
      v62 = (int *)v330;
      v63 = (uint64_t)v325;
      v97 = *(_QWORD *)(v95 + 16);
      v96 = *(_QWORD *)(v95 + 24);
      v40 = v97 + 1;
      a3 = v321;
      v13 = v311;
      v44 = v333;
      if (v97 >= v96 >> 1)
        v95 = sub_1007C80D0(v96 > 1, v97 + 1, 1, v95);
      *(_QWORD *)(v95 + 16) = v40;
      sub_1000126EC(v318, v95+ ((*(unsigned __int8 *)(v309 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v309 + 80))+ *(_QWORD *)(v309 + 72) * v97, type metadata accessor for TimeBasedKey);
      v357 = (_QWORD *)v95;
      if ((v332 & 1) != 0)
      {
        v61 = v329;
        v40 = (uint64_t)v322;
        a2 = v338;
      }
      else
      {
        v98 = v44;
        v44 = (char *)v63;
        v99 = a3;
        a3 = v13;
        a2 = v338;
        v100 = v338 - 1;
        v101 = v329;
        if (!v338)
          goto LABEL_156;
        if (v100 < v335)
          goto LABEL_157;
        if ((swift_isUniquelyReferenced_nonNull_native(v312) & 1) != 0)
          v102 = v312;
        else
          v102 = sub_1007C8D58(0, v312[2] + 1, 1, v312);
        v104 = v102[2];
        v103 = v102[3];
        if (v104 >= v103 >> 1)
          v102 = sub_1007C8D58((_QWORD *)(v103 > 1), v104 + 1, 1, v102);
        v102[2] = v104 + 1;
        v312 = v102;
        v105 = &v102[2 * v104];
        v105[4] = v335;
        v105[5] = v100;
        v40 = (uint64_t)v322;
        v61 = v101;
        v13 = a3;
        a3 = v99;
        v63 = (uint64_t)v44;
        v44 = v98;
        v62 = (int *)v330;
      }
      sub_1003D15A0((uint64_t)&v359);
      sub_1000126B0((uint64_t)v316, type metadata accessor for TimeBasedKey);
      (*(void (**)(uint64_t, uint64_t))(v319 + 8))(v315, v320);
      if (a3 == a2)
      {
        isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
        v240 = v312;
        goto LABEL_124;
      }
      v335 = 0;
      v332 = 1;
    }
LABEL_12:
    if (__CFADD__(a2++, 1))
    {
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
      goto LABEL_158;
    }
  }
  v67(v40, 0, 1, v62);
  v68 = v334;
  sub_1000126EC(v40, v334, type metadata accessor for SharedBeaconRecord);
  v69 = v62[16];
  v70 = *(unsigned __int8 *)(v68 + v69);
  if (v70 != 2 && v70 != 4)
  {
    sub_1000126B0(v334, type metadata accessor for SharedBeaconRecord);
    v61 = v329;
    a2 = v338;
    goto LABEL_23;
  }
  if (!(_BYTE)v337)
  {
    v355 = &type metadata for PrimaryIndex;
    v356 = sub_100336BAC();
    v354[0] = v338;
    v106 = *(_QWORD *)(v334 + v62[11]);
    sub_10005972C(v334, v63, type metadata accessor for SharedBeaconRecord);
    if (v106 == -1)
    {
      sub_1000126B0(v63, type metadata accessor for SharedBeaconRecord);
    }
    else
    {
      v107 = *(_QWORD *)(v63 + v62[12]);
      sub_1000126B0(v63, type metadata accessor for SharedBeaconRecord);
      if (v107 != -1)
      {
        sub_100030784((uint64_t)v358, (uint64_t)&v351);
        v108 = swift_allocObject(&unk_101072FA0, 72, 7);
        *(_QWORD *)(v108 + 16) = v327;
        sub_10000F9FC(&v351, v108 + 24);
        *(_QWORD *)(v108 + 64) = v338;
        swift_retain();
        v109 = sub_10001A9A8(&qword_1010FA220);
        v110 = v313;
        unsafeFromAsyncTask<A>(_:)(&unk_1010FA218, v108, v109);
        v313 = v110;
        if (!v110)
        {
          swift_release();
          v323 = *((_QWORD *)&v346 + 1);
          v324 = v346;
          if (*((_QWORD *)&v346 + 1) >> 60 == 15)
          {
            v148 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v44 + 2);
            v149 = v296;
            v150 = v326;
            v148(v296, &v331[*(int *)(v329 + 20)], v326);
            v151 = type metadata accessor for TaskPriority(0);
            v303 = *(_QWORD *)(v151 - 8);
            v152 = v295;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v303 + 56))(v295, 1, 1, v151);
            v153 = v307;
            v148(v307, v149, v150);
            v154 = v333[80];
            v155 = (v154 + 32) & ~v154;
            v156 = (v300 + v155) & 0xFFFFFFFFFFFFFFF8;
            v157 = swift_allocObject(&unk_101072FC8, v156 + 8, v154 | 7);
            *(_QWORD *)(v157 + 16) = 0;
            v158 = (_QWORD *)(v157 + 16);
            v159 = v157 + v155;
            v160 = (uint64_t)v152;
            v44 = v333;
            *(_QWORD *)(v157 + 24) = 0;
            v161 = v150;
            v162 = v303;
            (*((void (**)(uint64_t, char *, uint64_t))v44 + 4))(v159, v153, v161);
            *(_QWORD *)(v157 + v156) = v302;
            v163 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v162 + 48))(v160, 1, v151);
            if ((_DWORD)v163 == 1)
            {
              sub_100004048(v160, &qword_1010F46C0);
              v164 = 0;
            }
            else
            {
              v226 = v160;
              v227 = TaskPriority.rawValue.getter(v163);
              v228 = v226;
              v44 = v333;
              (*(void (**)(uint64_t, uint64_t))(v162 + 8))(v228, v151);
              v164 = v227;
            }
            v229 = *v158;
            v13 = v311;
            if (*v158)
            {
              v230 = *(_QWORD *)(v157 + 24);
              ObjectType = swift_getObjectType(*v158);
              swift_unknownObjectRetain(v229);
              v232 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v230);
              v234 = v233;
              swift_unknownObjectRelease(v229);
            }
            else
            {
              v232 = 0;
              v234 = 0;
            }
            a3 = v321;
            v63 = (uint64_t)v325;
            v235 = swift_allocObject(&unk_101072FF0, 32, 7);
            *(_QWORD *)(v235 + 16) = &unk_1010FA228;
            *(_QWORD *)(v235 + 24) = v157;
            if (v234 | v232)
            {
              v341[0] = 0;
              v341[1] = 0;
              v236 = v341;
              v341[2] = v232;
              v341[3] = v234;
            }
            else
            {
              v236 = 0;
            }
            swift_task_create(v164 | 0x1C00, v236, v290, &unk_1010FA230, v235);
            swift_release();
            (*((void (**)(char *, uint64_t))v44 + 1))(v296, v326);
            v62 = (int *)v330;
          }
LABEL_69:
          sub_100030784((uint64_t)v354, (uint64_t)&v351);
          sub_100030784((uint64_t)v358, (uint64_t)&v346);
          v165 = swift_allocObject(&unk_101072F28, 104, 7);
          sub_10000F9FC(&v351, v165 + 16);
          *(_QWORD *)(v165 + 56) = v327;
          sub_10000F9FC(&v346, v165 + 64);
          swift_retain();
          v166 = sub_10001A9A8(&qword_1010FA208);
          v167 = v313;
          unsafeFromAsyncTask<A>(_:)(&unk_1010FA200, v165, v166);
          if (v167)
          {
            swift_errorRelease(v167);
            swift_release();
            v313 = 0;
          }
          else
          {
            v313 = 0;
            swift_release();
            v168 = v350;
            if (v350 >> 60 != 15)
            {
              v211 = v349;
              v212 = &v331[*(int *)(v329 + 32)];
              v213 = sub_1004DDCE4(v337);
              sub_10064C538(v212, v338, v213, v305);
              v214 = type metadata accessor for __DataStorage(0);
              swift_allocObject(v214, *(unsigned int *)(v214 + 48), *(unsigned __int16 *)(v214 + 52));
              v215 = __DataStorage.init(length:)(32);
              v216 = v323;
              v217 = (uint64_t)v324;
              if (v323 >> 60 == 15)
              {
                v216 = v215 | 0x4000000000000000;
                v217 = 0x2000000000;
                sub_10001BBBC(0x2000000000, v215 | 0x4000000000000000);
              }
              sub_100030784((uint64_t)v354, (uint64_t)v294);
              v218 = v304;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v319 + 16))((uint64_t)v304 + *(int *)(v299 + 28), v305, v320);
              *v218 = v211;
              v218[1] = v168;
              v218[2] = v217;
              v218[3] = v216;
              sub_10001BD08((uint64_t)v324, v323);
              sub_10001BD08(v211, v168);
              if ((swift_isUniquelyReferenced_nonNull_native(v308) & 1) == 0)
                v308 = (_QWORD *)sub_1007C8E64(0, v308[2] + 1, 1, (unint64_t)v308);
              v220 = v308[2];
              v219 = v308[3];
              v44 = v333;
              if (v220 >= v219 >> 1)
                v308 = (_QWORD *)sub_1007C8E64(v219 > 1, v220 + 1, 1, (unint64_t)v308);
              v221 = v308;
              v308[2] = v220 + 1;
              sub_1000126EC((uint64_t)v304, (uint64_t)v221+ ((*(unsigned __int8 *)(v298 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v298 + 80))+ *(_QWORD *)(v298 + 72) * v220, _s18ConnectionKeyGroupVMa);
              sub_10001EF3C((uint64_t)v324, v323);
              swift_release();
              sub_10001EF3C(v211, v168);
              v222 = v221[2];
              (*(void (**)(uint64_t, uint64_t))(v319 + 8))(v305, v320);
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v354);
              sub_1000126B0(v334, type metadata accessor for SharedBeaconRecord);
              a2 = v338;
              if (v222 && a3 == v338)
              {
LABEL_143:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v286 = v308;
                goto LABEL_151;
              }
              v61 = v329;
              v62 = (int *)v330;
              v40 = (uint64_t)v322;
              v63 = (uint64_t)v325;
              goto LABEL_11;
            }
            v62 = (int *)v330;
          }
          if (*(_BYTE *)(v334 + v69) == 2)
          {
            v169 = v329;
            if (qword_1010E9938 != -1)
              swift_once(&qword_1010E9938, sub_1000AFBB0);
            v170 = type metadata accessor for Logger(0);
            sub_10001A9E8(v170, (uint64_t)qword_1011B6748);
            sub_100030784((uint64_t)v358, (uint64_t)&v351);
            v171 = sub_100030784((uint64_t)v354, (uint64_t)&v346);
            v172 = Logger.logObject.getter(v171);
            v173 = static os_log_type_t.default.getter(v172);
            if (os_log_type_enabled(v172, v173))
            {
              v174 = swift_slowAlloc(32, -1);
              v303 = swift_slowAlloc(32, -1);
              v349 = v303;
              *(_DWORD *)v174 = v297;
              *(_QWORD *)(v174 + 4) = 1752392040;
              *(_WORD *)(v174 + 12) = 2081;
              v175 = (char *)sub_10001AA44(&v351, (uint64_t)v352);
              v176 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v44 + 2);
              v177 = v307;
              v178 = v326;
              v176(v307, &v175[*(int *)(v169 + 20)], v326);
              v179 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
              v180 = dispatch thunk of CustomStringConvertible.description.getter(v178, v179);
              v182 = v181;
              (*((void (**)(char *, uint64_t))v44 + 1))(v177, v178);
              *(_QWORD *)(v174 + 14) = sub_100016940(v180, v182, &v349);
              swift_bridgeObjectRelease();
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v351);
              *(_WORD *)(v174 + 22) = 2048;
              v183 = v347;
              v184 = v348;
              sub_10001AA44(&v346, v347);
              v185 = v183;
              v169 = v329;
              dispatch thunk of RawRepresentable.rawValue.getter(&v344, v185, *(_QWORD *)(v184 + 56));
              v186 = v344;
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v346);
              *(_QWORD *)(v174 + 24) = v186;
              _os_log_impl((void *)&_mh_execute_header, v172, v173, "Didn't find keys for beacon: %{private,mask.hash}s, requesting download - index %llu.", (uint8_t *)v174, 0x20u);
              v187 = v303;
              swift_arrayDestroy(v303, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v187, -1, -1);
              swift_slowDealloc(v174, -1, -1);

            }
            else
            {
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v346);
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v351);

              v176 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v44 + 2);
            }
            v188 = (void (**)(uint64_t, char *, uint64_t))v44;
            v189 = v306;
            v190 = v326;
            v176(v306, &v331[*(int *)(v169 + 20)], v326);
            v191 = type metadata accessor for TaskPriority(0);
            v303 = *(_QWORD *)(v191 - 8);
            v192 = (uint64_t)v301;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v303 + 56))(v301, 1, 1, v191);
            v193 = v307;
            v176(v307, v189, v190);
            v194 = *((unsigned __int8 *)v188 + 80);
            v195 = (v194 + 32) & ~v194;
            v196 = (v300 + v195) & 0xFFFFFFFFFFFFFFF8;
            v197 = swift_allocObject(&unk_101072F50, v196 + 8, v194 | 7);
            *(_QWORD *)(v197 + 16) = 0;
            v198 = (_QWORD *)(v197 + 16);
            *(_QWORD *)(v197 + 24) = 0;
            v199 = v193;
            v200 = v303;
            v188[4](v197 + v195, v199, v190);
            *(_QWORD *)(v197 + v196) = v302;
            v201 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v200 + 48))(v192, 1, v191);
            if ((_DWORD)v201 == 1)
            {
              sub_100004048(v192, &qword_1010F46C0);
              v202 = 0;
            }
            else
            {
              v203 = TaskPriority.rawValue.getter(v201);
              (*(void (**)(uint64_t, uint64_t))(v200 + 8))(v192, v191);
              v202 = v203;
            }
            a2 = v338;
            v204 = *v198;
            v205 = v329;
            v44 = v333;
            if (*v198)
            {
              v206 = *(_QWORD *)(v197 + 24);
              v207 = swift_getObjectType(*v198);
              swift_unknownObjectRetain(v204);
              v208 = dispatch thunk of Actor.unownedExecutor.getter(v207, v206);
              v210 = v209;
              swift_unknownObjectRelease(v204);
            }
            else
            {
              v208 = 0;
              v210 = 0;
            }
            a3 = v321;
            v63 = (uint64_t)v325;
            v223 = swift_allocObject(&unk_101072F78, 32, 7);
            *(_QWORD *)(v223 + 16) = &unk_1010FA210;
            *(_QWORD *)(v223 + 24) = v197;
            if (v210 | v208)
            {
              v345[1] = 0;
              v345[0] = 0;
              v224 = v345;
              v345[2] = v208;
              v345[3] = v210;
            }
            else
            {
              v224 = 0;
            }
            v61 = v205;
            swift_task_create(v202 | 0x1C00, v224, &type metadata for () + 1, &unk_1010EE4A0, v223);
            swift_release();
            sub_10001EF3C((uint64_t)v324, v323);
            (*((void (**)(char *, uint64_t))v44 + 1))(v306, v326);
            v62 = (int *)v330;
            v13 = v311;
          }
          else
          {
            sub_10001EF3C((uint64_t)v324, v323);
            v61 = v329;
            a2 = v338;
          }
          v225 = v308[2];
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v354);
          sub_1000126B0(v334, type metadata accessor for SharedBeaconRecord);
          if (v225 && a3 == a2)
            goto LABEL_143;
          v40 = (uint64_t)v322;
          goto LABEL_11;
        }
        swift_release();
        if (qword_1010E9938 != -1)
          swift_once(&qword_1010E9938, sub_1000AFBB0);
        v111 = type metadata accessor for Logger(0);
        sub_10001A9E8(v111, (uint64_t)qword_1011B6748);
        sub_100030784((uint64_t)v358, (uint64_t)&v351);
        v112 = v313;
        swift_errorRetain(v313);
        v113 = swift_errorRetain(v112);
        v114 = Logger.logObject.getter(v113);
        v115 = static os_log_type_t.error.getter(v114);
        v116 = v115;
        if (os_log_type_enabled(v114, v115))
        {
          v117 = swift_slowAlloc(32, -1);
          LODWORD(v323) = v116;
          v118 = v117;
          v303 = swift_slowAlloc(64, -1);
          *(_QWORD *)&v346 = v303;
          *(_DWORD *)v118 = v297;
          *(_QWORD *)(v118 + 4) = 1752392040;
          *(_WORD *)(v118 + 12) = 2081;
          v119 = sub_10001AA44(&v351, (uint64_t)v352);
          v120 = (char *)v119 + *(int *)(v329 + 20);
          v121 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v44 + 2);
          v324 = v114;
          v122 = v307;
          v123 = v326;
          v121(v307, v120, v326);
          v124 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v125 = dispatch thunk of CustomStringConvertible.description.getter(v123, v124);
          v127 = v126;
          v128 = v123;
          v44 = v333;
          (*((void (**)(char *, uint64_t))v333 + 1))(v122, v128);
          v129 = v125;
          v62 = (int *)v330;
          *(_QWORD *)(v118 + 14) = sub_100016940(v129, v127, (uint64_t *)&v346);
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v351);
          *(_WORD *)(v118 + 22) = 2080;
          swift_getErrorValue(v112, &v343, v342);
          v130 = Error.localizedDescription.getter(v342[1], v342[2]);
          *(_QWORD *)(v118 + 24) = sub_100016940(v130, v131, (uint64_t *)&v346);
          swift_bridgeObjectRelease();
          swift_errorRelease(v112);
          swift_errorRelease(v112);
          _os_log_impl((void *)&_mh_execute_header, v324, (os_log_type_t)v323, "Error getting connectionKeys for beacon: %{private,mask.hash}s %s.", (uint8_t *)v118, 0x20u);
          v132 = v303;
          swift_arrayDestroy(v303, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v132, -1, -1);
          swift_slowDealloc(v118, -1, -1);

          swift_errorRelease(v112);
        }
        else
        {
          swift_errorRelease(v112);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v351);
          swift_errorRelease(v112);
          swift_errorRelease(v112);

        }
        v324 = 0;
        v313 = 0;
LABEL_68:
        v323 = 0xF000000000000000;
        v63 = (uint64_t)v325;
        goto LABEL_69;
      }
    }
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v133 = type metadata accessor for Logger(0);
    sub_10001A9E8(v133, (uint64_t)qword_1011B6748);
    v134 = sub_100030784((uint64_t)v358, (uint64_t)&v351);
    v135 = Logger.logObject.getter(v134);
    v136 = static os_log_type_t.debug.getter(v135);
    if (os_log_type_enabled(v135, v136))
    {
      v137 = swift_slowAlloc(22, -1);
      v324 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v346 = v324;
      *(_DWORD *)v137 = v293;
      *(_QWORD *)(v137 + 4) = 1752392040;
      *(_WORD *)(v137 + 12) = 2081;
      v138 = (char *)sub_10001AA44(&v351, (uint64_t)v352);
      v139 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v44 + 2);
      v140 = v307;
      v141 = v326;
      v139(v307, &v138[*(int *)(v329 + 20)], v326);
      v142 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v143 = dispatch thunk of CustomStringConvertible.description.getter(v141, v142);
      v145 = v144;
      v146 = v141;
      v44 = v333;
      (*((void (**)(char *, uint64_t))v333 + 1))(v140, v146);
      *(_QWORD *)(v137 + 14) = sub_100016940(v143, v145, (uint64_t *)&v346);
      v62 = (int *)v330;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v351);
      _os_log_impl((void *)&_mh_execute_header, v135, v136, "Skipping connection keys fetching: %{private,mask.hash}s.", (uint8_t *)v137, 0x16u);
      v147 = v324;
      swift_arrayDestroy(v324, 1, v292);
      a3 = v321;
      swift_slowDealloc(v147, -1, -1);
      swift_slowDealloc(v137, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v351);
    }

    v324 = 0;
    goto LABEL_68;
  }
  if (v337 == 1)
  {
    v355 = &type metadata for SecondaryIndex;
    v356 = sub_100336B24();
    v354[0] = v338;
    v323 = 0xF000000000000000;
    v324 = 0;
    goto LABEL_69;
  }
  sub_1000126B0(v334, type metadata accessor for SharedBeaconRecord);
  v61 = v329;
  a2 = v338;
LABEL_11:
  if (a3 != a2)
    goto LABEL_12;
  isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
  if ((v332 & 1) != 0)
  {
    v240 = v312;
    goto LABEL_124;
  }
LABEL_118:
  if (v335 > a3)
  {
    __break(1u);
    goto LABEL_161;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v312);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_161:
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_1007C8D58(0, v312[2] + 1, 1, v312);
    v240 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    goto LABEL_121;
  }
  v240 = v312;
LABEL_121:
  v242 = v240[2];
  v241 = v240[3];
  if (v242 >= v241 >> 1)
  {
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_1007C8D58((_QWORD *)(v241 > 1), v242 + 1, 1, v240);
    v240 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v240[2] = v242 + 1;
  v243 = &v240[2 * v242];
  v243[4] = v335;
  v243[5] = a3;
LABEL_124:
  if (!v357[2])
  {
    v258 = swift_bridgeObjectRelease();
    v259 = static os_log_type_t.error.getter(v258);
    if (qword_1010E9DF8 != -1)
      swift_once(&qword_1010E9DF8, sub_100654FE4);
    v260 = 0xD000000000000010;
    v261 = qword_1011B73B8;
    v262 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v263 = swift_allocObject(v262, 272, 7);
    *(_OWORD *)(v263 + 16) = xmmword_100E26E10;
    v354[0] = *v327;
    v264 = sub_10001A9A8(&qword_1010FA1E8);
    v265 = String.init<A>(describing:)(v354, v264);
    v267 = v266;
    *(_QWORD *)(v263 + 56) = &type metadata for String;
    v268 = sub_10001AA00();
    *(_QWORD *)(v263 + 32) = v265;
    *(_QWORD *)(v263 + 40) = v267;
    *(_QWORD *)(v263 + 96) = &type metadata for String;
    *(_QWORD *)(v263 + 104) = v268;
    *(_QWORD *)(v263 + 64) = v268;
    *(_QWORD *)(v263 + 72) = 0xD00000000000004DLL;
    *(_QWORD *)(v263 + 80) = 0x8000000100ED3F80;
    v269 = UUID.uuidString.getter(v268);
    *(_QWORD *)(v263 + 136) = &type metadata for String;
    *(_QWORD *)(v263 + 144) = v268;
    *(_QWORD *)(v263 + 112) = v269;
    *(_QWORD *)(v263 + 120) = v270;
    if ((_BYTE)v337)
    {
      if (v337 == 1)
      {
        v260 = 0x61646E6F6365732ELL;
        v271 = 0xEA00000000007972;
      }
      else
      {
        v271 = 0x8000000100EC6940;
      }
    }
    else
    {
      v260 = 0x7972616D6972702ELL;
      v271 = 0xE800000000000000;
    }
    *(_QWORD *)(v263 + 176) = &type metadata for String;
    *(_QWORD *)(v263 + 184) = v268;
    *(_QWORD *)(v263 + 152) = v260;
    *(_QWORD *)(v263 + 160) = v271;
    *(_QWORD *)(v263 + 216) = &type metadata for UInt64;
    *(_QWORD *)(v263 + 224) = &protocol witness table for UInt64;
    *(_QWORD *)(v263 + 192) = v291;
    *(_QWORD *)(v263 + 256) = &type metadata for UInt64;
    *(_QWORD *)(v263 + 264) = &protocol witness table for UInt64;
    *(_QWORD *)(v263 + 232) = v321;
    os_log(_:dso:log:_:_:)(v259, &_mh_execute_header, v261, "%@: %@. Unable to obtain keys for beacon %{mask.hash}@, sequence %@, index %llu - %llu", 86, 2, v263);
    swift_bridgeObjectRelease();
    goto LABEL_150;
  }
  v244 = 0x7972616D6972702ELL;
  if (v240[2])
  {
    v245 = v240;
    v308 = v357;
    v246 = static os_log_type_t.error.getter(isUniquelyReferenced_nonNull_native);
    if (qword_1010E9DF8 != -1)
      swift_once(&qword_1010E9DF8, sub_100654FE4);
    v247 = qword_1011B73B8;
    v248 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v249 = swift_allocObject(v248, 312, 7);
    *(_OWORD *)(v249 + 16) = xmmword_100E22340;
    v354[0] = *v327;
    v250 = sub_10001A9A8(&qword_1010FA1E8);
    v251 = String.init<A>(describing:)(v354, v250);
    v253 = v252;
    *(_QWORD *)(v249 + 56) = &type metadata for String;
    v254 = sub_10001AA00();
    *(_QWORD *)(v249 + 32) = v251;
    *(_QWORD *)(v249 + 40) = v253;
    *(_QWORD *)(v249 + 96) = &type metadata for String;
    *(_QWORD *)(v249 + 104) = v254;
    *(_QWORD *)(v249 + 64) = v254;
    *(_QWORD *)(v249 + 72) = 0xD00000000000004DLL;
    *(_QWORD *)(v249 + 80) = 0x8000000100ED3F80;
    v255 = UUID.uuidString.getter(v254);
    *(_QWORD *)(v249 + 136) = &type metadata for String;
    *(_QWORD *)(v249 + 144) = v254;
    *(_QWORD *)(v249 + 112) = v255;
    *(_QWORD *)(v249 + 120) = v256;
    if ((_BYTE)v337)
    {
      if (v337 == 1)
      {
        v244 = 0x61646E6F6365732ELL;
        v257 = 0xEA00000000007972;
      }
      else
      {
        v257 = 0x8000000100EC6940;
        v244 = 0xD000000000000010;
      }
    }
    else
    {
      v257 = 0xE800000000000000;
    }
    *(_QWORD *)(v249 + 176) = &type metadata for String;
    *(_QWORD *)(v249 + 184) = v254;
    *(_QWORD *)(v249 + 152) = v244;
    *(_QWORD *)(v249 + 160) = v257;
    *(_QWORD *)(v249 + 216) = &type metadata for UInt64;
    *(_QWORD *)(v249 + 224) = &protocol witness table for UInt64;
    *(_QWORD *)(v249 + 192) = v291;
    *(_QWORD *)(v249 + 256) = &type metadata for UInt64;
    *(_QWORD *)(v249 + 264) = &protocol witness table for UInt64;
    *(_QWORD *)(v249 + 232) = v321;
    *(_QWORD *)(v249 + 296) = sub_10001A9A8(&qword_1010FA1F0);
    *(_QWORD *)(v249 + 304) = sub_1000193A4((unint64_t *)&qword_1010FA1F8, &qword_1010FA1F0, (const char *)&protocol conformance descriptor for [A]);
    *(_QWORD *)(v249 + 272) = v245;
    *(_QWORD *)&v287 = swift_bridgeObjectRetain(v245).n128_u64[0];
    os_log(_:dso:log:_:_:)(v246, &_mh_execute_header, v247, "%@: %@. Unable to obtain keys for beacon %{mask.hash}@, sequence %@, index %llu - %llu, gaps %@.", 96, 2, v249, v287);
    swift_bridgeObjectRelease();
    v286 = v308;
  }
  else
  {
    v272 = v357;
    v273 = swift_bridgeObjectRelease();
    v274 = static os_log_type_t.default.getter(v273);
    if (qword_1010E9DF8 != -1)
      swift_once(&qword_1010E9DF8, sub_100654FE4);
    v275 = qword_1011B73B8;
    v276 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v277 = swift_allocObject(v276, 272, 7);
    *(_OWORD *)(v277 + 16) = xmmword_100E26E10;
    v354[0] = *v327;
    v278 = sub_10001A9A8(&qword_1010FA1E8);
    v279 = String.init<A>(describing:)(v354, v278);
    v281 = v280;
    *(_QWORD *)(v277 + 56) = &type metadata for String;
    v282 = sub_10001AA00();
    *(_QWORD *)(v277 + 32) = v279;
    *(_QWORD *)(v277 + 40) = v281;
    *(_QWORD *)(v277 + 96) = &type metadata for String;
    *(_QWORD *)(v277 + 104) = v282;
    *(_QWORD *)(v277 + 64) = v282;
    *(_QWORD *)(v277 + 72) = 0xD00000000000004DLL;
    *(_QWORD *)(v277 + 80) = 0x8000000100ED3F80;
    v283 = UUID.uuidString.getter(v282);
    *(_QWORD *)(v277 + 136) = &type metadata for String;
    *(_QWORD *)(v277 + 144) = v282;
    *(_QWORD *)(v277 + 112) = v283;
    *(_QWORD *)(v277 + 120) = v284;
    if ((_BYTE)v337)
    {
      if (v337 == 1)
      {
        v244 = 0x61646E6F6365732ELL;
        v285 = 0xEA00000000007972;
      }
      else
      {
        v285 = 0x8000000100EC6940;
        v244 = 0xD000000000000010;
      }
    }
    else
    {
      v285 = 0xE800000000000000;
    }
    *(_QWORD *)(v277 + 176) = &type metadata for String;
    *(_QWORD *)(v277 + 184) = v282;
    *(_QWORD *)(v277 + 152) = v244;
    *(_QWORD *)(v277 + 160) = v285;
    *(_QWORD *)(v277 + 216) = &type metadata for UInt64;
    *(_QWORD *)(v277 + 224) = &protocol witness table for UInt64;
    *(_QWORD *)(v277 + 192) = v291;
    *(_QWORD *)(v277 + 256) = &type metadata for UInt64;
    *(_QWORD *)(v277 + 264) = &protocol witness table for UInt64;
    *(_QWORD *)(v277 + 232) = v321;
    os_log(_:dso:log:_:_:)(v274, &_mh_execute_header, v275, "%{public}@: %{public}@. Keys for Beacon %{mask.hash}@, sequence %{public}@, index %llu - %llu", 93, 2, v277);
    swift_bridgeObjectRelease();
    v286 = v272;
  }
LABEL_151:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v358);
  return v286;
}

int *sub_1003B56E4(uint64_t a1, int *a2, int *a3, int a4, int a5, int a6, _QWORD *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  void (*v53)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  int *v58;
  uint64_t v59;
  os_log_type_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int *v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  int v72;
  void (*v73)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v74;
  int v75;
  BOOL v76;
  unint64_t v77;
  void (*v78)(char *, char *, int *);
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int **v106;
  _OWORD *v107;
  __int128 v108;
  __int128 v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  int *v124;
  NSObject *v125;
  os_log_type_t v126;
  int v127;
  uint64_t v128;
  _QWORD *v129;
  char *v130;
  uint64_t v131;
  void (*v132)(char *, char *, uint64_t);
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  os_log_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  NSObject *v147;
  os_log_type_t v148;
  int v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int *v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  NSObject *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  NSObject *v168;
  os_log_type_t v169;
  uint64_t v170;
  _QWORD *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(char *, char *, uint64_t);
  uint64_t v184;
  uint64_t v185;
  int *v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned __int8 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int *v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  os_log_t v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  void (*v221)(char *, char *, int *);
  char *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  void (*v232)(uint64_t, char *);
  uint64_t v233;
  char *v234;
  uint64_t v235;
  int *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t ObjectType;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  os_log_t v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  _QWORD *v266;
  unsigned __int8 v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v274;
  unint64_t v275;
  unint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  int *v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  _QWORD *v321;
  double v322;
  uint64_t v324;
  _QWORD *v325;
  int *v326;
  char *v327;
  __int128 v328;
  _QWORD *v329;
  char *v330;
  uint64_t v331;
  char *v332;
  __int128 v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  __int128 v339;
  uint64_t v340;
  _QWORD *v341;
  uint64_t v342;
  uint64_t v343;
  char *v344;
  char *v345;
  char *v346;
  char *v347;
  uint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t v352;
  _QWORD *v353;
  int *v354;
  uint64_t v355;
  int v356;
  int *v357;
  uint64_t v358;
  int **v359;
  uint64_t v360;
  char *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  char *v365;
  uint64_t v366;
  os_log_t v367;
  uint64_t v368;
  _QWORD *v369;
  uint64_t v370;
  int *v371;
  char *v372;
  uint64_t v373;
  int *v374;
  unint64_t v375;
  char *v376;
  int v377;
  uint64_t v378;
  _QWORD v379[3];
  uint64_t v380;
  _QWORD v381[4];
  _QWORD v382[3];
  uint64_t v383;
  uint64_t v384;
  _QWORD v385[5];
  __int128 v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  __int128 v391;
  ValueMetadata *v392;
  unint64_t v393;
  _QWORD v394[3];
  ValueMetadata *v395;
  unint64_t v396;
  int *v397;
  _QWORD v398[5];
  __int128 v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  NSObject *v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;

  LODWORD(v368) = a6;
  LODWORD(v375) = a5;
  v377 = a4;
  v373 = a1;
  v354 = 0;
  v369 = a7;
  v338 = *a7;
  v9 = type metadata accessor for TimeBasedKey(0);
  v348 = *(_QWORD *)(v9 - 8);
  v349 = v9;
  v10 = __chkstk_darwin(v9);
  v360 = (uint64_t)&v324 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v359 = (int **)((char *)&v324 - v12);
  v362 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  __chkstk_darwin(v362);
  v361 = (char *)&v324 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010F46C0);
  v15 = __chkstk_darwin(v14);
  v330 = (char *)&v324 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v345 = (char *)&v324 - v17;
  v18 = _s18ConnectionKeyGroupVMa(0);
  v335 = *(_QWORD *)(v18 - 8);
  v336 = v18;
  __chkstk_darwin(v18);
  v341 = (uint64_t *)((char *)&v324 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = type metadata accessor for Date(0);
  v351 = *(_QWORD *)(v20 - 8);
  v352 = v20;
  v21 = __chkstk_darwin(v20);
  v347 = (char *)&v324 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v334 = (char *)&v324 - v23;
  v24 = type metadata accessor for DateInterval(0);
  v363 = *(_QWORD *)(v24 - 8);
  v364 = v24;
  v25 = __chkstk_darwin(v24);
  v358 = (uint64_t)&v324 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v342 = (uint64_t)&v324 - v27;
  v355 = type metadata accessor for UUID(0);
  v378 = *(_QWORD *)(v355 - 8);
  v28 = *(_QWORD *)(v378 + 64);
  v29 = __chkstk_darwin(v355);
  v376 = (char *)&v324 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v29);
  v332 = (char *)&v324 - v31;
  v32 = __chkstk_darwin(v30);
  v346 = (char *)&v324 - v33;
  __chkstk_darwin(v32);
  v344 = (char *)&v324 - v34;
  v35 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v35);
  v365 = (char *)&v324 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for SharedBeaconRecord(0);
  v370 = *(_QWORD *)(v37 - 8);
  v38 = __chkstk_darwin(v37);
  v343 = (uint64_t)&v324 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v38);
  v340 = (uint64_t)&v324 - v41;
  __chkstk_darwin(v40);
  v374 = (int *)((char *)&v324 - v42);
  v43 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v43);
  v45 = (char *)&v324 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for OwnedBeaconRecord(0);
  v47 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v49 = (int *)((char *)&v324 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  v371 = (int *)v37;
  v398[3] = v37;
  v398[4] = sub_100006204(&qword_1010F4A70, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F5CC);
  v372 = (char *)sub_100018F08(v398);
  sub_10005972C(v373, (uint64_t)v372, type metadata accessor for SharedBeaconRecord);
  v397 = (int *)_swiftEmptyArrayStorage;
  v357 = a3;
  if ((v375 & 1) != 0)
  {
    sub_100030784((uint64_t)v398, (uint64_t)&v407);
    v51 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v52 = swift_dynamicCast(v45, &v407, v51, v46, 6);
    v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
    if ((v52 & 1) != 0)
    {
      v53(v45, 0, 1, v46);
      v54 = sub_1000126EC((uint64_t)v45, (uint64_t)v49, type metadata accessor for OwnedBeaconRecord);
      a3 = (int *)static os_log_type_t.error.getter(v54);
      if (qword_1010E9DF8 == -1)
      {
LABEL_4:
        v55 = os_log(_:dso:log:_:_:)(a3, &_mh_execute_header, qword_1011B73B8, "*** forceGenerate triggered ***", 31, 2, _swiftEmptyArrayStorage);
        *(_QWORD *)&v407 = a2;
        __chkstk_darwin(v55);
        *(&v324 - 4) = (uint64_t)v49;
        *(&v324 - 3) = (uint64_t)&v407;
        v56 = v377;
        *((_BYTE *)&v324 - 16) = v377;
        *(&v324 - 1) = (uint64_t)&v397;
        v57 = (unint64_t)a2;
        v58 = v354;
        v59 = sub_100DF6580((uint64_t)v49, v56, v57, (unint64_t)v357, (void (*)(unint64_t, uint64_t, unint64_t, _OWORD *))sub_1003D972C);
        if (v58)
        {
          v60 = static os_log_type_t.error.getter(v59);
          v61 = qword_1011B73B8;
          v62 = v60;
          if (os_log_type_enabled((os_log_t)qword_1011B73B8, v60))
          {
            swift_errorRetain(v58);
            swift_errorRetain(v58);
            v63 = (uint8_t *)swift_slowAlloc(12, -1);
            v64 = swift_slowAlloc(32, -1);
            *(_QWORD *)&v404 = v64;
            *(_DWORD *)v63 = 136315138;
            swift_getErrorValue(v58, &v380, v379);
            v65 = Error.localizedDescription.getter(v379[1], v379[2]);
            *(_QWORD *)&v399 = sub_100016940(v65, v66, (uint64_t *)&v404);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v399, (char *)&v399 + 8, v63 + 4, v63 + 12);
            swift_bridgeObjectRelease();
            swift_errorRelease(v58);
            swift_errorRelease(v58);
            _os_log_impl((void *)&_mh_execute_header, v61, v62, "Error during forceGenerate: %s", v63, 0xCu);
            swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v64, -1, -1);
            swift_slowDealloc(v63, -1, -1);
          }
          swift_errorRelease(v58);
          sub_1000126B0((uint64_t)v49, type metadata accessor for OwnedBeaconRecord);
        }
        else
        {
          sub_1000126B0((uint64_t)v49, type metadata accessor for OwnedBeaconRecord);
        }
        v306 = v397;
        goto LABEL_158;
      }
LABEL_170:
      swift_once(&qword_1010E9DF8, sub_100654FE4);
      goto LABEL_4;
    }
    v53(v45, 1, 1, v46);
    v271 = sub_100004048((uint64_t)v45, (uint64_t *)&unk_1010F47C0);
    v272 = static os_log_type_t.error.getter(v271);
    if (qword_1010E9DF8 != -1)
      swift_once(&qword_1010E9DF8, sub_100654FE4);
    os_log(_:dso:log:_:_:)(v272, &_mh_execute_header, qword_1011B73B8, "Can't use forceGenerate for a SharedBeaconRecord!", 49, 2, _swiftEmptyArrayStorage);
LABEL_157:
    swift_bridgeObjectRelease();
    v306 = 0;
    goto LABEL_158;
  }
  if (a3 < a2)
  {
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
    goto LABEL_170;
  }
  v67 = (unint64_t)a3;
  v375 = 0;
  v337 = v28 + 7;
  v329 = v341 + 4;
  v373 = 1;
  *(_QWORD *)&v50 = 141558275;
  v328 = v50;
  v327 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v50 = 141558531;
  v333 = v50;
  v339 = xmmword_100E22B00;
  v356 = v368 & 1;
  v325 = &type metadata for () + 1;
  v326 = a2;
  v49 = a2;
  v353 = _swiftEmptyArrayStorage;
  v350 = _swiftEmptyArrayStorage;
  a2 = v371;
  v68 = (int *)v355;
  v69 = (uint64_t)v365;
  while (1)
  {
    sub_100030784((uint64_t)v398, (uint64_t)v394);
    v71 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v72 = swift_dynamicCast(v69, v394, v71, a2, 6);
    v73 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v370 + 56);
    if (v72)
      break;
    v73(v69, 1, 1, a2);
    sub_100004048(v69, (uint64_t *)&unk_1010EE180);
LABEL_23:
    v78 = *(void (**)(char *, char *, int *))(v378 + 16);
    v78(v376, &v372[a2[5]], v68);
    v79 = v67;
    if ((_BYTE)v377)
    {
      if (v377 == 1)
      {
        v392 = &type metadata for SecondaryIndex;
        v80 = sub_100336B24();
      }
      else
      {
        v392 = &type metadata for SecureLocationsIndex;
        v80 = sub_1003D155C();
      }
    }
    else
    {
      v392 = &type metadata for PrimaryIndex;
      v80 = sub_100336BAC();
    }
    v393 = v80;
    *(_QWORD *)&v391 = v49;
    sub_10000F9FC(&v391, (uint64_t)v394);
    v81 = (uint64_t)v361;
    v82 = v376;
    v78(v361, v376, v68);
    sub_100030784((uint64_t)v394, v81 + *(int *)(v362 + 20));
    sub_100DD0430(v81, v356, &v399);
    a3 = v68;
    v83 = v399;
    v84 = v400;
    v368 = v402;
    v366 = v401;
    v367 = v403;
    sub_1000126B0(v81, type metadata accessor for BeaconKeyManager.IndexInformation);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v394);
    (*(void (**)(char *, int *))(v378 + 8))(v82, v68);
    v85 = sub_100005CF0((uint64_t)&v399, (uint64_t)&v404, &qword_1010FA1E0);
    if (*((_QWORD *)&v405 + 1) >> 60 == 15)
    {
      v86 = (int *)v375;
      if ((v373 & 1) != 0)
        v86 = v49;
      v375 = (unint64_t)v86;
      v67 = v79;
      v76 = v79 == (_QWORD)v49;
      v69 = (uint64_t)v365;
      if (v76)
      {
        swift_bridgeObjectRelease();
        goto LABEL_125;
      }
      v373 = 0;
    }
    else
    {
      v407 = v404;
      v408 = v405;
      v409 = v406;
      v87 = v372;
      v88 = *(_QWORD *)&v372[a2[17]];
      if (v88)
      {
        v89 = v88 - 1;
        if (!is_mul_ok(v89, 0xFuLL))
          goto LABEL_163;
        v90 = 15 * v89;
        if (!is_mul_ok(v90, 0x3CuLL))
          goto LABEL_164;
        v91 = v347;
        Date.addingTimeInterval(_:)(-(double)(60 * v90));
        v93 = v351;
        v92 = v352;
      }
      else
      {
        v94 = static os_log_type_t.error.getter(v85);
        v95 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v96 = swift_allocObject(v95, 72, 7);
        *(_OWORD *)(v96 + 16) = v339;
        v97 = v343;
        sub_10005972C((uint64_t)v87, v343, type metadata accessor for SharedBeaconRecord);
        v98 = String.init<A>(describing:)(v97, a2);
        v100 = v99;
        *(_QWORD *)(v96 + 56) = &type metadata for String;
        *(_QWORD *)(v96 + 64) = sub_10001AA00();
        *(_QWORD *)(v96 + 32) = v98;
        *(_QWORD *)(v96 + 40) = v100;
        v101 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
        v102 = (void *)static OS_os_log.default.getter(v101);
        os_log(_:dso:log:_:_:)(v94, &_mh_execute_header, v102, "SharedBeaconRecord unexpectedly has advertisedIndex of 0: %@", 60, 2, v96);
        v79 = (unint64_t)v357;
        swift_bridgeObjectRelease();

        v93 = v351;
        v92 = v352;
        v91 = v347;
        (*(void (**)(char *, char *, uint64_t))(v351 + 16))(v347, &v87[v371[18]], v352);
      }
      v103 = sub_1004DDCE4(v377);
      v104 = v358;
      sub_10064C538(v91, (uint64_t)v49, v103, v358);
      (*(void (**)(char *, uint64_t))(v93 + 8))(v91, v92);
      v105 = v349;
      v106 = v359;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v363 + 16))((uint64_t)v359 + *(int *)(v349 + 20), v104, v364);
      *v106 = v49;
      v107 = (_OWORD *)((char *)v106 + *(int *)(v105 + 24));
      v108 = v409;
      v109 = v407;
      v107[1] = v408;
      v107[2] = v108;
      *v107 = v109;
      sub_10005972C((uint64_t)v106, v360, type metadata accessor for TimeBasedKey);
      a3 = v397;
      sub_10001BD08(v83, *((unint64_t *)&v83 + 1));
      sub_10001BBBC(v84, v366);
      sub_10001BD08(v368, (unint64_t)v367);
      if ((swift_isUniquelyReferenced_nonNull_native(a3) & 1) == 0)
        a3 = (int *)sub_1007C80D0(0, *((_QWORD *)a3 + 2) + 1, 1, (unint64_t)a3);
      v67 = v79;
      v111 = *((_QWORD *)a3 + 2);
      v110 = *((_QWORD *)a3 + 3);
      v68 = (int *)v355;
      if (v111 >= v110 >> 1)
        a3 = (int *)sub_1007C80D0(v110 > 1, v111 + 1, 1, (unint64_t)a3);
      *((_QWORD *)a3 + 2) = v111 + 1;
      sub_1000126EC(v360, (uint64_t)a3+ ((*(unsigned __int8 *)(v348 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v348 + 80))+ *(_QWORD *)(v348 + 72) * v111, type metadata accessor for TimeBasedKey);
      v397 = a3;
      if ((v373 & 1) == 0)
      {
        a2 = (int *)((char *)v49 - 1);
        if (!v49)
          goto LABEL_165;
        if ((unint64_t)a2 < v375)
          goto LABEL_166;
        if ((swift_isUniquelyReferenced_nonNull_native(v353) & 1) != 0)
          v112 = v353;
        else
          v112 = sub_1007C8D58(0, v353[2] + 1, 1, v353);
        v114 = v112[2];
        v113 = v112[3];
        a3 = (int *)(v114 + 1);
        if (v114 >= v113 >> 1)
          v112 = sub_1007C8D58((_QWORD *)(v113 > 1), v114 + 1, 1, v112);
        v112[2] = a3;
        v353 = v112;
        v115 = &v112[2 * v114];
        v115[4] = v375;
        v115[5] = a2;
      }
      v69 = (uint64_t)v365;
      sub_1003D15A0((uint64_t)&v399);
      sub_1000126B0((uint64_t)v359, type metadata accessor for TimeBasedKey);
      (*(void (**)(uint64_t, uint64_t))(v363 + 8))(v358, v364);
      a2 = v371;
      if ((int *)v67 == v49)
      {
        isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
        v274 = v353;
        goto LABEL_131;
      }
      v375 = 0;
      v373 = 1;
    }
LABEL_12:
    v70 = __CFADD__(v49, 1);
    v49 = (int *)((char *)v49 + 1);
    if (v70)
    {
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
      goto LABEL_167;
    }
  }
  v73(v69, 0, 1, a2);
  a3 = v374;
  sub_1000126EC(v69, (uint64_t)v374, type metadata accessor for SharedBeaconRecord);
  v74 = a2[16];
  v75 = *((unsigned __int8 *)a3 + v74);
  v76 = v75 == 2 || v75 == 4;
  if (!v76)
  {
    sub_1000126B0((uint64_t)v374, type metadata accessor for SharedBeaconRecord);
    v67 = (unint64_t)v357;
    goto LABEL_23;
  }
  if (!(_BYTE)v377)
  {
    v395 = &type metadata for PrimaryIndex;
    v396 = sub_100336BAC();
    v394[0] = v49;
    v116 = *(_QWORD *)((char *)v374 + a2[11]);
    v117 = v340;
    sub_10005972C((uint64_t)v374, v340, type metadata accessor for SharedBeaconRecord);
    if (v116 == -1)
    {
      sub_1000126B0(v117, type metadata accessor for SharedBeaconRecord);
    }
    else
    {
      v118 = *(_QWORD *)(v117 + a2[12]);
      sub_1000126B0(v117, type metadata accessor for SharedBeaconRecord);
      if (v118 != -1)
      {
        sub_100030784((uint64_t)v398, (uint64_t)&v391);
        v119 = swift_allocObject(&unk_101074260, 72, 7);
        *(_QWORD *)(v119 + 16) = v369;
        sub_10000F9FC(&v391, v119 + 24);
        *(_QWORD *)(v119 + 64) = v49;
        swift_retain();
        v120 = sub_10001A9A8(&qword_1010FA220);
        v121 = v354;
        unsafeFromAsyncTask<A>(_:)(&unk_1010FA4F8, v119, v120);
        if (v121)
        {
          swift_release();
          if (qword_1010E9938 != -1)
            swift_once(&qword_1010E9938, sub_1000AFBB0);
          v122 = type metadata accessor for Logger(0);
          sub_10001A9E8(v122, (uint64_t)qword_1011B6748);
          sub_100030784((uint64_t)v398, (uint64_t)&v391);
          swift_errorRetain(v121);
          v123 = swift_errorRetain(v121);
          v124 = v121;
          v125 = Logger.logObject.getter(v123);
          v126 = static os_log_type_t.error.getter(v125);
          v127 = v126;
          if (os_log_type_enabled(v125, v126))
          {
            v128 = swift_slowAlloc(32, -1);
            v368 = swift_slowAlloc(64, -1);
            *(_QWORD *)&v386 = v368;
            *(_DWORD *)v128 = v333;
            *(_QWORD *)(v128 + 4) = 1752392040;
            *(_WORD *)(v128 + 12) = 2081;
            v129 = sub_10001AA44(&v391, (uint64_t)v392);
            v130 = (char *)v129 + v371[5];
            v131 = v378;
            v132 = *(void (**)(char *, char *, uint64_t))(v378 + 16);
            v367 = v125;
            v133 = v344;
            v134 = v355;
            v132(v344, v130, v355);
            v135 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v136 = dispatch thunk of CustomStringConvertible.description.getter(v134, v135);
            LODWORD(v366) = v127;
            v137 = v136;
            v139 = v138;
            (*(void (**)(char *, uint64_t))(v131 + 8))(v133, v134);
            *(_QWORD *)(v128 + 14) = sub_100016940(v137, v139, (uint64_t *)&v386);
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v391);
            *(_WORD *)(v128 + 22) = 2080;
            swift_getErrorValue(v124, &v383, v382);
            v140 = Error.localizedDescription.getter(v382[1], v382[2]);
            *(_QWORD *)(v128 + 24) = sub_100016940(v140, v141, (uint64_t *)&v386);
            swift_bridgeObjectRelease();
            swift_errorRelease(v124);
            swift_errorRelease(v124);
            v142 = v367;
            _os_log_impl((void *)&_mh_execute_header, v367, (os_log_type_t)v366, "Error getting connectionKeys for beacon: %{private,mask.hash}s %s.", (uint8_t *)v128, 0x20u);
            v143 = v368;
            swift_arrayDestroy(v368, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v143, -1, -1);
            v144 = v128;
            v69 = (uint64_t)v365;
            swift_slowDealloc(v144, -1, -1);

            swift_errorRelease(v124);
          }
          else
          {
            swift_errorRelease(v124);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v391);
            swift_errorRelease(v124);
            swift_errorRelease(v124);

          }
          v368 = 0;
          v354 = 0;
          v162 = 0xF000000000000000;
          v68 = (int *)v355;
          goto LABEL_67;
        }
        v354 = 0;
        swift_release();
        v162 = *((_QWORD *)&v386 + 1);
        v368 = v386;
        if (*((_QWORD *)&v386 + 1) >> 60 != 15)
          goto LABEL_67;
        v366 = v74;
        v367 = (os_log_t)*((_QWORD *)&v386 + 1);
        v220 = v378;
        v221 = *(void (**)(char *, char *, int *))(v378 + 16);
        v222 = v332;
        v221(v332, &v372[v371[5]], v68);
        v223 = type metadata accessor for TaskPriority(0);
        v331 = *(_QWORD *)(v223 - 8);
        v224 = (uint64_t)v330;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v331 + 56))(v330, 1, 1, v223);
        v225 = v344;
        v221(v344, v222, (int *)v355);
        v226 = *(unsigned __int8 *)(v220 + 80);
        v227 = (v226 + 32) & ~v226;
        v228 = (v337 + v227) & 0xFFFFFFFFFFFFFFF8;
        v229 = swift_allocObject(&unk_101074288, v228 + 8, v226 | 7);
        *(_QWORD *)(v229 + 16) = 0;
        v230 = (uint64_t *)(v229 + 16);
        v231 = v355;
        *(_QWORD *)(v229 + 24) = 0;
        v232 = *(void (**)(uint64_t, char *))(v220 + 32);
        v233 = v331;
        v234 = v225;
        v235 = v223;
        v236 = (int *)v231;
        v232(v229 + v227, v234);
        *(_QWORD *)(v229 + v228) = v338;
        v237 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v233 + 48))(v224, 1, v235);
        if ((_DWORD)v237 == 1)
        {
          sub_100004048(v224, &qword_1010F46C0);
          v238 = 0;
          v239 = *v230;
          if (*v230)
          {
LABEL_98:
            v240 = *(_QWORD *)(v229 + 24);
            ObjectType = swift_getObjectType(v239);
            swift_unknownObjectRetain(v239);
            v242 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v240);
            v244 = v243;
            swift_unknownObjectRelease(v239);
LABEL_113:
            v162 = v367;
            v268 = swift_allocObject(&unk_1010742B0, 32, 7);
            *(_QWORD *)(v268 + 16) = &unk_1010FA500;
            *(_QWORD *)(v268 + 24) = v229;
            if (v244 | v242)
            {
              v381[0] = 0;
              v381[1] = 0;
              v269 = v381;
              v381[2] = v242;
              v381[3] = v244;
            }
            else
            {
              v269 = 0;
            }
            v270 = v378;
            v69 = (uint64_t)v365;
            swift_task_create(v238 | 0x1C00, v269, v325, &unk_1010FA508, v268);
            swift_release();
            v68 = v236;
            (*(void (**)(char *, int *))(v270 + 8))(v332, v236);
            v74 = v366;
            goto LABEL_67;
          }
        }
        else
        {
          v267 = TaskPriority.rawValue.getter(v237);
          (*(void (**)(uint64_t, uint64_t))(v233 + 8))(v224, v235);
          v238 = v267;
          v239 = *v230;
          if (*v230)
            goto LABEL_98;
        }
        v242 = 0;
        v244 = 0;
        goto LABEL_113;
      }
    }
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v145 = type metadata accessor for Logger(0);
    sub_10001A9E8(v145, (uint64_t)qword_1011B6748);
    v146 = sub_100030784((uint64_t)v398, (uint64_t)&v391);
    v147 = Logger.logObject.getter(v146);
    v148 = static os_log_type_t.debug.getter(v147);
    v149 = v148;
    if (os_log_type_enabled(v147, v148))
    {
      v150 = swift_slowAlloc(22, -1);
      v368 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v386 = v368;
      *(_DWORD *)v150 = v328;
      *(_QWORD *)(v150 + 4) = 1752392040;
      *(_WORD *)(v150 + 12) = 2081;
      v151 = (char *)sub_10001AA44(&v391, (uint64_t)v392);
      v152 = v378;
      v153 = v344;
      (*(void (**)(char *, char *, int *))(v378 + 16))(v344, &v151[v371[5]], v68);
      v154 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      LODWORD(v367) = v149;
      v155 = dispatch thunk of CustomStringConvertible.description.getter(v68, v154);
      v156 = v74;
      v157 = v68;
      v159 = v158;
      (*(void (**)(char *, int *))(v152 + 8))(v153, v157);
      *(_QWORD *)(v150 + 14) = sub_100016940(v155, v159, (uint64_t *)&v386);
      v68 = v157;
      v74 = v156;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v391);
      _os_log_impl((void *)&_mh_execute_header, v147, (os_log_type_t)v367, "Skipping connection keys fetching: %{private,mask.hash}s.", (uint8_t *)v150, 0x16u);
      v160 = v368;
      swift_arrayDestroy(v368, 1, v327);
      swift_slowDealloc(v160, -1, -1);
      v161 = v150;
      v69 = (uint64_t)v365;
      swift_slowDealloc(v161, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v391);
    }

    v368 = 0;
LABEL_66:
    v162 = 0xF000000000000000;
LABEL_67:
    sub_100030784((uint64_t)v394, (uint64_t)&v391);
    sub_100030784((uint64_t)v398, (uint64_t)&v386);
    a3 = (int *)swift_allocObject(&unk_1010741E8, 104, 7);
    sub_10000F9FC(&v391, (uint64_t)(a3 + 4));
    *((_QWORD *)a3 + 7) = v369;
    sub_10000F9FC(&v386, (uint64_t)(a3 + 16));
    swift_retain();
    v163 = sub_10001A9A8(&qword_1010FA208);
    a2 = v354;
    unsafeFromAsyncTask<A>(_:)(&unk_1010FA4E0, a3, v163);
    if (a2)
    {
      swift_errorRelease(a2);
      swift_release();
      v354 = 0;
      a2 = v371;
    }
    else
    {
      v354 = 0;
      v164 = swift_release();
      v165 = v390;
      if (v390 >> 60 != 15)
      {
        v366 = v389;
        v209 = v371;
        v210 = *(_QWORD *)&v372[v371[17]];
        if (v210)
        {
          v211 = v210 - 1;
          v67 = (unint64_t)v357;
          if (!is_mul_ok(v211, 0xFuLL))
            goto LABEL_168;
          v212 = 15 * v211;
          if (!is_mul_ok(v212, 0x3CuLL))
            goto LABEL_169;
          v213 = (unint64_t)v162;
          v214 = v334;
          Date.addingTimeInterval(_:)(-(double)(60 * v212));
          v216 = v351;
          v215 = v352;
        }
        else
        {
          v213 = (unint64_t)v162;
          v245 = v372;
          v246 = static os_log_type_t.error.getter(v164);
          v247 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
          v248 = swift_allocObject(v247, 72, 7);
          *(_OWORD *)(v248 + 16) = v339;
          v249 = v343;
          sub_10005972C((uint64_t)v245, v343, type metadata accessor for SharedBeaconRecord);
          v250 = String.init<A>(describing:)(v249, v209);
          v252 = v251;
          *(_QWORD *)(v248 + 56) = &type metadata for String;
          *(_QWORD *)(v248 + 64) = sub_10001AA00();
          *(_QWORD *)(v248 + 32) = v250;
          *(_QWORD *)(v248 + 40) = v252;
          v253 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
          v254 = (void *)static OS_os_log.default.getter(v253);
          os_log(_:dso:log:_:_:)(v246, &_mh_execute_header, v254, "SharedBeaconRecord unexpectedly has advertisedIndex of 0: %@", 60, 2, v248);
          swift_bridgeObjectRelease();

          v216 = v351;
          v215 = v352;
          v214 = v334;
          (*(void (**)(char *, char *, uint64_t))(v351 + 16))(v334, &v245[v209[18]], v352);
          v67 = (unint64_t)v357;
        }
        v255 = sub_1004DDCE4(v377);
        sub_10064C538(v214, (uint64_t)v49, v255, v342);
        (*(void (**)(char *, uint64_t))(v216 + 8))(v214, v215);
        v256 = type metadata accessor for __DataStorage(0);
        swift_allocObject(v256, *(unsigned int *)(v256 + 48), *(unsigned __int16 *)(v256 + 52));
        v257 = __DataStorage.init(length:)(32);
        v258 = v213;
        v259 = v368;
        v260 = v368;
        v367 = (os_log_t)v213;
        if (v213 >> 60 == 15)
        {
          v258 = v257 | 0x4000000000000000;
          v260 = 0x2000000000;
          sub_10001BBBC(0x2000000000, v257 | 0x4000000000000000);
        }
        sub_100030784((uint64_t)v394, (uint64_t)v329);
        v261 = v341;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v363 + 16))((uint64_t)v341 + *(int *)(v336 + 28), v342, v364);
        v263 = v366;
        v262 = v367;
        *v261 = v366;
        v261[1] = v165;
        v261[2] = v260;
        v261[3] = v258;
        sub_10001BD08(v259, (unint64_t)v262);
        sub_10001BD08(v263, v165);
        if ((swift_isUniquelyReferenced_nonNull_native(v350) & 1) == 0)
          v350 = (_QWORD *)sub_1007C8E64(0, v350[2] + 1, 1, (unint64_t)v350);
        v265 = v350[2];
        v264 = v350[3];
        if (v265 >= v264 >> 1)
          v350 = (_QWORD *)sub_1007C8E64(v264 > 1, v265 + 1, 1, (unint64_t)v350);
        v266 = v350;
        v350[2] = v265 + 1;
        sub_1000126EC((uint64_t)v341, (uint64_t)v266+ ((*(unsigned __int8 *)(v335 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v335 + 80))+ *(_QWORD *)(v335 + 72) * v265, _s18ConnectionKeyGroupVMa);
        sub_10001EF3C(v259, (unint64_t)v367);
        swift_release();
        sub_10001EF3C(v366, v165);
        a3 = (int *)v266[2];
        (*(void (**)(uint64_t, uint64_t))(v363 + 8))(v342, v364);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v394);
        sub_1000126B0((uint64_t)v374, type metadata accessor for SharedBeaconRecord);
        if (a3 && (int *)v67 == v49)
        {
LABEL_150:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v306 = (int *)v350;
          goto LABEL_158;
        }
        a2 = v371;
        v68 = (int *)v355;
        v69 = (uint64_t)v365;
        goto LABEL_11;
      }
      a2 = v371;
      v68 = (int *)v355;
    }
    if (*((_BYTE *)v374 + v74) == 2)
    {
      v367 = v162;
      if (qword_1010E9938 != -1)
        swift_once(&qword_1010E9938, sub_1000AFBB0);
      v166 = type metadata accessor for Logger(0);
      sub_10001A9E8(v166, (uint64_t)qword_1011B6748);
      sub_100030784((uint64_t)v398, (uint64_t)&v391);
      v167 = sub_100030784((uint64_t)v394, (uint64_t)&v386);
      v168 = Logger.logObject.getter(v167);
      v169 = static os_log_type_t.default.getter(v168);
      if (os_log_type_enabled(v168, v169))
      {
        v170 = swift_slowAlloc(32, -1);
        v366 = swift_slowAlloc(32, -1);
        v389 = v366;
        *(_DWORD *)v170 = v333;
        *(_QWORD *)(v170 + 4) = 1752392040;
        *(_WORD *)(v170 + 12) = 2081;
        v171 = sub_10001AA44(&v391, (uint64_t)v392);
        v172 = (char *)v171 + v371[5];
        v173 = v378;
        v331 = *(_QWORD *)(v378 + 16);
        v174 = v344;
        v175 = v355;
        ((void (*)(char *, char *, uint64_t))v331)(v344, v172, v355);
        v176 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v177 = dispatch thunk of CustomStringConvertible.description.getter(v175, v176);
        v179 = v178;
        (*(void (**)(char *, uint64_t))(v173 + 8))(v174, v175);
        *(_QWORD *)(v170 + 14) = sub_100016940(v177, v179, &v389);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v391);
        *(_WORD *)(v170 + 22) = 2048;
        v180 = v387;
        v181 = v388;
        sub_10001AA44(&v386, v387);
        v182 = v180;
        v183 = (void (*)(char *, char *, uint64_t))v331;
        dispatch thunk of RawRepresentable.rawValue.getter(&v384, v182, *(_QWORD *)(v181 + 56));
        v184 = v384;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v386);
        *(_QWORD *)(v170 + 24) = v184;
        _os_log_impl((void *)&_mh_execute_header, v168, v169, "Didn't find keys for beacon: %{private,mask.hash}s, requesting download - index %llu.", (uint8_t *)v170, 0x20u);
        v185 = v366;
        swift_arrayDestroy(v366, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v185, -1, -1);
        swift_slowDealloc(v170, -1, -1);

        v186 = v371;
        v187 = v173;
        v188 = v345;
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v386);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v391);

        v187 = v378;
        v183 = *(void (**)(char *, char *, uint64_t))(v378 + 16);
        v186 = v371;
        v174 = v344;
        v188 = v345;
        v175 = v355;
      }
      v189 = v346;
      v183(v346, &v372[v186[5]], v175);
      v190 = type metadata accessor for TaskPriority(0);
      v191 = *(_QWORD *)(v190 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v191 + 56))(v188, 1, 1, v190);
      v183(v174, v189, v175);
      v192 = *(unsigned __int8 *)(v187 + 80);
      v193 = (v192 + 32) & ~v192;
      v194 = (v337 + v193) & 0xFFFFFFFFFFFFFFF8;
      v195 = swift_allocObject(&unk_101074210, v194 + 8, v192 | 7);
      v196 = v187;
      v197 = v195;
      *(_QWORD *)(v195 + 16) = 0;
      v198 = (_QWORD *)(v195 + 16);
      *(_QWORD *)(v195 + 24) = 0;
      (*(void (**)(uint64_t, char *, uint64_t))(v196 + 32))(v195 + v193, v174, v175);
      *(_QWORD *)(v197 + v194) = v338;
      v199 = (uint64_t)v345;
      v200 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v191 + 48))(v345, 1, v190);
      if ((_DWORD)v200 == 1)
      {
        sub_100004048(v199, &qword_1010F46C0);
        v201 = 0;
      }
      else
      {
        v202 = TaskPriority.rawValue.getter(v200);
        (*(void (**)(uint64_t, uint64_t))(v191 + 8))(v199, v190);
        v201 = v202;
      }
      v67 = (unint64_t)v357;
      v203 = *v198;
      if (*v198)
      {
        v204 = *(_QWORD *)(v197 + 24);
        v205 = swift_getObjectType(*v198);
        swift_unknownObjectRetain(v203);
        v206 = dispatch thunk of Actor.unownedExecutor.getter(v205, v204);
        v208 = v207;
        swift_unknownObjectRelease(v203);
      }
      else
      {
        v206 = 0;
        v208 = 0;
      }
      v217 = v367;
      v218 = swift_allocObject(&unk_101074238, 32, 7);
      *(_QWORD *)(v218 + 16) = &unk_1010FA4E8;
      *(_QWORD *)(v218 + 24) = v197;
      if (v208 | v206)
      {
        v385[1] = 0;
        v385[0] = 0;
        v219 = v385;
        v385[2] = v206;
        v385[3] = v208;
      }
      else
      {
        v219 = 0;
      }
      a2 = v371;
      v69 = (uint64_t)v365;
      swift_task_create(v201 | 0x1C00, v219, &type metadata for () + 1, &unk_1010FA4F0, v218);
      swift_release();
      sub_10001EF3C(v368, (unint64_t)v217);
      v68 = (int *)v175;
      (*(void (**)(char *, uint64_t))(v378 + 8))(v346, v175);
    }
    else
    {
      sub_10001EF3C(v368, (unint64_t)v162);
      v67 = (unint64_t)v357;
    }
    a3 = (int *)v350[2];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v394);
    sub_1000126B0((uint64_t)v374, type metadata accessor for SharedBeaconRecord);
    if (a3 && (int *)v67 == v49)
      goto LABEL_150;
    goto LABEL_11;
  }
  if (v377 == 1)
  {
    v395 = &type metadata for SecondaryIndex;
    v77 = sub_100336B24();
    v368 = 0;
    v396 = v77;
    v394[0] = v49;
    goto LABEL_66;
  }
  sub_1000126B0((uint64_t)v374, type metadata accessor for SharedBeaconRecord);
  v67 = (unint64_t)v357;
LABEL_11:
  if ((int *)v67 != v49)
    goto LABEL_12;
  isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
  if ((v373 & 1) != 0)
  {
    v274 = v353;
    goto LABEL_131;
  }
LABEL_125:
  if (v375 > v67)
  {
    __break(1u);
    goto LABEL_172;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v353);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_172:
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_1007C8D58(0, v353[2] + 1, 1, v353);
    v274 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    goto LABEL_128;
  }
  v274 = v353;
LABEL_128:
  v276 = v274[2];
  v275 = v274[3];
  if (v276 >= v275 >> 1)
  {
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_1007C8D58((_QWORD *)(v275 > 1), v276 + 1, 1, v274);
    v274 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v274[2] = v276 + 1;
  v277 = &v274[2 * v276];
  v277[4] = v375;
  v277[5] = v67;
LABEL_131:
  v278 = *((_QWORD *)v397 + 2);
  v350 = v397;
  if (!v278)
  {
    v292 = swift_bridgeObjectRelease();
    v293 = static os_log_type_t.error.getter(v292);
    if (qword_1010E9DF8 != -1)
      swift_once(&qword_1010E9DF8, sub_100654FE4);
    v294 = 0xD000000000000010;
    v295 = qword_1011B73B8;
    v296 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v297 = swift_allocObject(v296, 272, 7);
    *(_OWORD *)(v297 + 16) = xmmword_100E26E10;
    v394[0] = *v369;
    v298 = sub_10001A9A8(&qword_1010FA1E8);
    v299 = String.init<A>(describing:)(v394, v298);
    v301 = v300;
    *(_QWORD *)(v297 + 56) = &type metadata for String;
    v302 = sub_10001AA00();
    *(_QWORD *)(v297 + 32) = v299;
    *(_QWORD *)(v297 + 40) = v301;
    *(_QWORD *)(v297 + 96) = &type metadata for String;
    *(_QWORD *)(v297 + 104) = v302;
    *(_QWORD *)(v297 + 64) = v302;
    *(_QWORD *)(v297 + 72) = 0xD00000000000004DLL;
    *(_QWORD *)(v297 + 80) = 0x8000000100ED3F80;
    v303 = UUID.uuidString.getter(v302);
    *(_QWORD *)(v297 + 136) = &type metadata for String;
    *(_QWORD *)(v297 + 144) = v302;
    *(_QWORD *)(v297 + 112) = v303;
    *(_QWORD *)(v297 + 120) = v304;
    if ((_BYTE)v377)
    {
      if (v377 == 1)
      {
        v294 = 0x61646E6F6365732ELL;
        v305 = 0xEA00000000007972;
      }
      else
      {
        v305 = 0x8000000100EC6940;
      }
    }
    else
    {
      v294 = 0x7972616D6972702ELL;
      v305 = 0xE800000000000000;
    }
    *(_QWORD *)(v297 + 176) = &type metadata for String;
    *(_QWORD *)(v297 + 184) = v302;
    *(_QWORD *)(v297 + 152) = v294;
    *(_QWORD *)(v297 + 160) = v305;
    *(_QWORD *)(v297 + 216) = &type metadata for UInt64;
    *(_QWORD *)(v297 + 224) = &protocol witness table for UInt64;
    *(_QWORD *)(v297 + 192) = v326;
    *(_QWORD *)(v297 + 256) = &type metadata for UInt64;
    *(_QWORD *)(v297 + 264) = &protocol witness table for UInt64;
    *(_QWORD *)(v297 + 232) = v67;
    os_log(_:dso:log:_:_:)(v293, &_mh_execute_header, v295, "%@: %@. Unable to obtain keys for beacon %{mask.hash}@, sequence %@, index %llu - %llu", 86, 2, v297);
    swift_bridgeObjectRelease();
    goto LABEL_157;
  }
  if (v274[2])
  {
    v353 = v274;
    v279 = static os_log_type_t.error.getter(isUniquelyReferenced_nonNull_native);
    if (qword_1010E9DF8 != -1)
      swift_once(&qword_1010E9DF8, sub_100654FE4);
    v280 = 0xD000000000000010;
    v281 = qword_1011B73B8;
    v282 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v283 = swift_allocObject(v282, 312, 7);
    *(_OWORD *)(v283 + 16) = xmmword_100E22340;
    v394[0] = *v369;
    v284 = sub_10001A9A8(&qword_1010FA1E8);
    v285 = String.init<A>(describing:)(v394, v284);
    v287 = v286;
    *(_QWORD *)(v283 + 56) = &type metadata for String;
    v288 = sub_10001AA00();
    *(_QWORD *)(v283 + 32) = v285;
    *(_QWORD *)(v283 + 40) = v287;
    *(_QWORD *)(v283 + 96) = &type metadata for String;
    *(_QWORD *)(v283 + 104) = v288;
    *(_QWORD *)(v283 + 64) = v288;
    *(_QWORD *)(v283 + 72) = 0xD00000000000004DLL;
    *(_QWORD *)(v283 + 80) = 0x8000000100ED3F80;
    v289 = UUID.uuidString.getter(v288);
    *(_QWORD *)(v283 + 136) = &type metadata for String;
    *(_QWORD *)(v283 + 144) = v288;
    *(_QWORD *)(v283 + 112) = v289;
    *(_QWORD *)(v283 + 120) = v290;
    if ((_BYTE)v377)
    {
      if (v377 == 1)
      {
        v280 = 0x61646E6F6365732ELL;
        v291 = 0xEA00000000007972;
      }
      else
      {
        v291 = 0x8000000100EC6940;
      }
    }
    else
    {
      v280 = 0x7972616D6972702ELL;
      v291 = 0xE800000000000000;
    }
    *(_QWORD *)(v283 + 176) = &type metadata for String;
    *(_QWORD *)(v283 + 184) = v288;
    *(_QWORD *)(v283 + 152) = v280;
    *(_QWORD *)(v283 + 160) = v291;
    *(_QWORD *)(v283 + 216) = &type metadata for UInt64;
    *(_QWORD *)(v283 + 224) = &protocol witness table for UInt64;
    *(_QWORD *)(v283 + 192) = v326;
    *(_QWORD *)(v283 + 256) = &type metadata for UInt64;
    *(_QWORD *)(v283 + 264) = &protocol witness table for UInt64;
    *(_QWORD *)(v283 + 232) = v67;
    *(_QWORD *)(v283 + 296) = sub_10001A9A8(&qword_1010FA1F0);
    *(_QWORD *)(v283 + 304) = sub_1000193A4((unint64_t *)&qword_1010FA1F8, &qword_1010FA1F0, (const char *)&protocol conformance descriptor for [A]);
    v321 = v353;
    *(_QWORD *)(v283 + 272) = v353;
    *(_QWORD *)&v322 = swift_bridgeObjectRetain(v321).n128_u64[0];
    os_log(_:dso:log:_:_:)(v279, &_mh_execute_header, v281, "%@: %@. Unable to obtain keys for beacon %{mask.hash}@, sequence %@, index %llu - %llu, gaps %@.", 96, 2, v283, v322);
    swift_bridgeObjectRelease();
    v306 = (int *)v350;
  }
  else
  {
    v307 = swift_bridgeObjectRelease();
    v308 = static os_log_type_t.default.getter(v307);
    if (qword_1010E9DF8 != -1)
      swift_once(&qword_1010E9DF8, sub_100654FE4);
    v309 = 0xD000000000000010;
    v310 = qword_1011B73B8;
    v311 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v312 = swift_allocObject(v311, 272, 7);
    *(_OWORD *)(v312 + 16) = xmmword_100E26E10;
    v394[0] = *v369;
    v313 = sub_10001A9A8(&qword_1010FA1E8);
    v314 = String.init<A>(describing:)(v394, v313);
    v316 = v315;
    *(_QWORD *)(v312 + 56) = &type metadata for String;
    v317 = sub_10001AA00();
    *(_QWORD *)(v312 + 32) = v314;
    *(_QWORD *)(v312 + 40) = v316;
    *(_QWORD *)(v312 + 96) = &type metadata for String;
    *(_QWORD *)(v312 + 104) = v317;
    *(_QWORD *)(v312 + 64) = v317;
    *(_QWORD *)(v312 + 72) = 0xD00000000000004DLL;
    *(_QWORD *)(v312 + 80) = 0x8000000100ED3F80;
    v318 = UUID.uuidString.getter(v317);
    *(_QWORD *)(v312 + 136) = &type metadata for String;
    *(_QWORD *)(v312 + 144) = v317;
    *(_QWORD *)(v312 + 112) = v318;
    *(_QWORD *)(v312 + 120) = v319;
    if ((_BYTE)v377)
    {
      if (v377 == 1)
      {
        v309 = 0x61646E6F6365732ELL;
        v320 = 0xEA00000000007972;
      }
      else
      {
        v320 = 0x8000000100EC6940;
      }
    }
    else
    {
      v309 = 0x7972616D6972702ELL;
      v320 = 0xE800000000000000;
    }
    *(_QWORD *)(v312 + 176) = &type metadata for String;
    *(_QWORD *)(v312 + 184) = v317;
    *(_QWORD *)(v312 + 152) = v309;
    *(_QWORD *)(v312 + 160) = v320;
    *(_QWORD *)(v312 + 216) = &type metadata for UInt64;
    *(_QWORD *)(v312 + 224) = &protocol witness table for UInt64;
    *(_QWORD *)(v312 + 192) = v326;
    *(_QWORD *)(v312 + 256) = &type metadata for UInt64;
    *(_QWORD *)(v312 + 264) = &protocol witness table for UInt64;
    *(_QWORD *)(v312 + 232) = v67;
    os_log(_:dso:log:_:_:)(v308, &_mh_execute_header, v310, "%{public}@: %{public}@. Keys for Beacon %{mask.hash}@, sequence %{public}@, index %llu - %llu", 93, 2, v312);
    swift_bridgeObjectRelease();
    v306 = (int *)v350;
  }
LABEL_158:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v398);
  return v306;
}

uint64_t sub_1003B7B50(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5, _QWORD *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t (*v28)(_QWORD);
  char *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t result;
  _QWORD *v64;
  uint64_t (*v65)(char *, char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD v74[2];

  v64 = a6;
  v72 = a3;
  v73 = a4;
  v66 = a2;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v69 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v68 = (char *)&v64 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v64 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v64 - v17;
  v19 = type metadata accessor for OwnedBeaconRecord(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v64 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v64 - v26;
  sub_10005972C(a1, (uint64_t)&v64 - v26, v28);
  v70 = sub_1003B8810((uint64_t)v27, a5, v72, v73);
  v71 = v19;
  v29 = &v27[*(int *)(v19 + 32)];
  v67 = v9;
  v65 = *(uint64_t (**)(char *, char *, uint64_t))(v9 + 16);
  v30 = v65(v18, v29, v8);
  DateInterval.start.getter(v30);
  v72 = (unint64_t)v27;
  sub_10005972C((uint64_t)v27, (uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
  LODWORD(v73) = a5;
  if ((_BYTE)a5)
  {
    if (a5 != 1)
    {
LABEL_42:
      v74[0] = 0;
      v74[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000038, 0x8000000100ED4190, "searchpartyd/TimeBasedKeys.swift", 32, 2, 146, 0);
      __break(1u);
      return result;
    }
    v31 = 1;
  }
  else
  {
    v31 = 0;
  }
  v32 = v71;
  v33 = sub_10064F0F8((uint64_t)&v25[*(int *)(v71 + 20)], (uint64_t)v18, (uint64_t)v16, v31);
  sub_1000126B0((uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
  v34 = *(void (**)(char *, uint64_t))(v67 + 8);
  v34(v16, v8);
  v34(v18, v8);
  v35 = (uint64_t)v68;
  v36 = v65(v68, v29, v8);
  v37 = (uint64_t)v69;
  DateInterval.end.getter(v36);
  sub_10005972C(v72, (uint64_t)v22, type metadata accessor for OwnedBeaconRecord);
  v38 = sub_10064F0F8((uint64_t)&v22[*(int *)(v32 + 20)], v35, v37, (_BYTE)v73 != 0);
  sub_1000126B0((uint64_t)v22, type metadata accessor for OwnedBeaconRecord);
  v34((char *)v37, v8);
  v39 = ((uint64_t (*)(uint64_t, uint64_t))v34)(v35, v8);
  v40 = v33;
  v41 = qword_1011B7000;
  v42 = v70;
  if ((v70 & 0x8000000000000000) == 0 && v70 >= v40)
  {
    v37 = static os_log_type_t.default.getter(v39);
    if (qword_1010E9DF8 == -1)
      goto LABEL_8;
    goto LABEL_37;
  }
  if ((v40 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_37:
    swift_once(&qword_1010E9DF8, sub_100654FE4);
LABEL_8:
    v43 = qword_1011B73B8;
    v44 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v45 = swift_allocObject(v44, 112, 7);
    *(_OWORD *)(v45 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v45 + 56) = &type metadata for UInt64;
    *(_QWORD *)(v45 + 64) = &protocol witness table for UInt64;
    *(_QWORD *)(v45 + 72) = v42;
    *(_QWORD *)(v45 + 32) = v40;
    *(_QWORD *)(v45 + 96) = &type metadata for Int64;
    *(_QWORD *)(v45 + 104) = &protocol witness table for Int64;
    os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v43, "startBucket (%llu) <= factor (%llu) -- clamping to 1", v64, v65);
    v39 = swift_bridgeObjectRelease();
    v46 = 1;
    if (v42)
    {
      v41 = qword_1011B7000;
      if (v38 < v42)
      {
        if (v38 <= 1)
          v47 = 1;
        else
          v47 = v38;
        v46 = 1;
        goto LABEL_29;
      }
    }
    else
    {
      v41 = qword_1011B7000;
    }
    goto LABEL_23;
  }
  v46 = v40 - v70;
  if (__OFSUB__(v40, v70))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if ((v46 & 0x8000000000000000) != 0)
  {
LABEL_41:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
    goto LABEL_42;
  }
  if (v70 >= 1 && v38 < v70)
  {
    if (v46 <= v38)
      v47 = v38;
    else
      v47 = v40 - v70;
    goto LABEL_29;
  }
LABEL_23:
  if ((v38 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_39;
  }
  v48 = v38 - v42;
  if (__OFSUB__(v38, v42))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if ((v48 & 0x8000000000000000) != 0)
    goto LABEL_41;
  if (v46 <= v48)
    v47 = v38 - v42;
  else
    v47 = v46;
LABEL_29:
  v49 = static os_log_type_t.default.getter(v39);
  if (qword_1010E9DF8 != -1)
    swift_once(&qword_1010E9DF8, sub_100654FE4);
  v50 = v41[119];
  v51 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v52 = swift_allocObject(v51, 312, 7);
  *(_OWORD *)(v52 + 16) = xmmword_100E22340;
  v74[0] = *v64;
  v53 = sub_10001A9A8(&qword_1010FA1E8);
  v54 = String.init<A>(describing:)(v74, v53);
  v56 = v55;
  *(_QWORD *)(v52 + 56) = &type metadata for String;
  v57 = sub_10001AA00();
  *(_QWORD *)(v52 + 32) = v54;
  *(_QWORD *)(v52 + 40) = v56;
  *(_QWORD *)(v52 + 96) = &type metadata for String;
  *(_QWORD *)(v52 + 104) = v57;
  *(_QWORD *)(v52 + 64) = v57;
  *(_QWORD *)(v52 + 72) = 0xD00000000000004CLL;
  *(_QWORD *)(v52 + 80) = 0x8000000100ED4210;
  v58 = v72;
  v59 = UUID.uuidString.getter(v57);
  *(_QWORD *)(v52 + 136) = &type metadata for String;
  *(_QWORD *)(v52 + 144) = v57;
  *(_QWORD *)(v52 + 112) = v59;
  *(_QWORD *)(v52 + 120) = v60;
  v61 = 0x61646E6F6365732ELL;
  if (!(_BYTE)v73)
    v61 = 0x7972616D6972702ELL;
  v62 = 0xEA00000000007972;
  if (!(_BYTE)v73)
    v62 = 0xE800000000000000;
  *(_QWORD *)(v52 + 176) = &type metadata for String;
  *(_QWORD *)(v52 + 184) = v57;
  *(_QWORD *)(v52 + 152) = v61;
  *(_QWORD *)(v52 + 160) = v62;
  *(_QWORD *)(v52 + 216) = &type metadata for UInt64;
  *(_QWORD *)(v52 + 224) = &protocol witness table for UInt64;
  *(_QWORD *)(v52 + 232) = v47;
  *(_QWORD *)(v52 + 192) = v46;
  *(_QWORD *)(v52 + 256) = &type metadata for UInt64;
  *(_QWORD *)(v52 + 264) = &protocol witness table for UInt64;
  *(_QWORD *)(v52 + 296) = &type metadata for Int64;
  *(_QWORD *)(v52 + 304) = &protocol witness table for Int64;
  *(_QWORD *)(v52 + 272) = v70;
  os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, v50, "%{public}@: %{public}@. Buckets for beacon %{mask.hash}@, sequence %{public}@, index %llu - %llu (factor %d)", 108, 2, v52, v64);
  swift_bridgeObjectRelease();
  sub_1000126B0(v58, type metadata accessor for OwnedBeaconRecord);
  return v46;
}

uint64_t sub_1003B81B8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5, _QWORD *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t (*v28)(_QWORD);
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t result;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];

  v63 = a6;
  v70 = a4;
  v68 = (char *)a3;
  v9 = type metadata accessor for Date(0);
  v64 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v65 = (unint64_t)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v63 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v63 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v63 - v18;
  v69 = type metadata accessor for SharedBeaconRecord(0);
  v20 = __chkstk_darwin(v69);
  v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v63 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v63 - v26;
  sub_10005972C(a1, (uint64_t)&v63 - v26, v28);
  v67 = sub_1003B898C((uint64_t)v27, a5, (unint64_t)v68, v70);
  v29 = sub_100D3A990((uint64_t)v19);
  v66 = a2;
  DateInterval.start.getter(v29);
  v68 = v27;
  sub_10005972C((uint64_t)v27, (uint64_t)v25, type metadata accessor for SharedBeaconRecord);
  LODWORD(v70) = a5;
  if ((_BYTE)a5)
  {
    if (a5 != 1)
    {
LABEL_42:
      v71[0] = 0;
      v71[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000038, 0x8000000100ED4190, "searchpartyd/TimeBasedKeys.swift", 32, 2, 146, 0);
      __break(1u);
      return result;
    }
    v30 = 1;
  }
  else
  {
    v30 = 0;
  }
  v31 = v64;
  v32 = v65;
  v33 = v69;
  v65 = sub_10064F0F8((uint64_t)&v25[*(int *)(v69 + 20)], (uint64_t)v19, (uint64_t)v17, v30);
  sub_1000126B0((uint64_t)v25, type metadata accessor for SharedBeaconRecord);
  v34 = *(void (**)(char *, uint64_t))(v31 + 8);
  v34(v17, v9);
  v34(v19, v9);
  v35 = (uint64_t)v68;
  v36 = sub_100D3A990((uint64_t)v14);
  DateInterval.end.getter(v36);
  sub_10005972C(v35, (uint64_t)v22, type metadata accessor for SharedBeaconRecord);
  v37 = sub_10064F0F8((uint64_t)&v22[*(int *)(v33 + 20)], (uint64_t)v14, v32, (_BYTE)v70 != 0);
  sub_1000126B0((uint64_t)v22, type metadata accessor for SharedBeaconRecord);
  v34((char *)v32, v9);
  v38 = ((uint64_t (*)(char *, uint64_t))v34)(v14, v9);
  v39 = v65;
  v40 = qword_1011B7000;
  v41 = v67;
  if ((v67 & 0x8000000000000000) == 0 && v67 >= v65)
  {
    v22 = (char *)static os_log_type_t.default.getter(v38);
    if (qword_1010E9DF8 == -1)
      goto LABEL_8;
    goto LABEL_37;
  }
  if ((v65 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_37:
    swift_once(&qword_1010E9DF8, sub_100654FE4);
LABEL_8:
    v42 = qword_1011B73B8;
    v43 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v44 = swift_allocObject(v43, 112, 7);
    *(_OWORD *)(v44 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v44 + 56) = &type metadata for UInt64;
    *(_QWORD *)(v44 + 64) = &protocol witness table for UInt64;
    *(_QWORD *)(v44 + 72) = v41;
    *(_QWORD *)(v44 + 32) = v39;
    *(_QWORD *)(v44 + 96) = &type metadata for Int64;
    *(_QWORD *)(v44 + 104) = &protocol witness table for Int64;
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v42, "startBucket (%llu) <= factor (%llu) -- clamping to 1", v63, v64);
    v38 = swift_bridgeObjectRelease();
    v45 = 1;
    if (v41)
    {
      v40 = qword_1011B7000;
      if (v37 < v41)
      {
        if (v37 <= 1)
          v46 = 1;
        else
          v46 = v37;
        v45 = 1;
        goto LABEL_29;
      }
    }
    else
    {
      v40 = qword_1011B7000;
    }
    goto LABEL_23;
  }
  v45 = v65 - v67;
  if (__OFSUB__(v65, v67))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if ((v45 & 0x8000000000000000) != 0)
  {
LABEL_41:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
    goto LABEL_42;
  }
  if (v67 >= 1 && v37 < v67)
  {
    if (v45 <= v37)
      v46 = v37;
    else
      v46 = v65 - v67;
    goto LABEL_29;
  }
LABEL_23:
  if ((v37 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_39;
  }
  v47 = v37 - v41;
  if (__OFSUB__(v37, v41))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if ((v47 & 0x8000000000000000) != 0)
    goto LABEL_41;
  if (v45 <= v47)
    v46 = v37 - v41;
  else
    v46 = v45;
LABEL_29:
  v48 = static os_log_type_t.default.getter(v38);
  if (qword_1010E9DF8 != -1)
    swift_once(&qword_1010E9DF8, sub_100654FE4);
  v49 = v40[119];
  v50 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v51 = swift_allocObject(v50, 312, 7);
  *(_OWORD *)(v51 + 16) = xmmword_100E22340;
  v71[0] = *v63;
  v52 = sub_10001A9A8(&qword_1010FA1E8);
  v53 = String.init<A>(describing:)(v71, v52);
  v55 = v54;
  *(_QWORD *)(v51 + 56) = &type metadata for String;
  v56 = sub_10001AA00();
  *(_QWORD *)(v51 + 32) = v53;
  *(_QWORD *)(v51 + 40) = v55;
  *(_QWORD *)(v51 + 96) = &type metadata for String;
  *(_QWORD *)(v51 + 104) = v56;
  *(_QWORD *)(v51 + 64) = v56;
  *(_QWORD *)(v51 + 72) = 0xD00000000000004CLL;
  *(_QWORD *)(v51 + 80) = 0x8000000100ED4210;
  v57 = (uint64_t)v68;
  v58 = UUID.uuidString.getter(v56);
  *(_QWORD *)(v51 + 136) = &type metadata for String;
  *(_QWORD *)(v51 + 144) = v56;
  *(_QWORD *)(v51 + 112) = v58;
  *(_QWORD *)(v51 + 120) = v59;
  v60 = 0x61646E6F6365732ELL;
  if (!(_BYTE)v70)
    v60 = 0x7972616D6972702ELL;
  v61 = 0xEA00000000007972;
  if (!(_BYTE)v70)
    v61 = 0xE800000000000000;
  *(_QWORD *)(v51 + 176) = &type metadata for String;
  *(_QWORD *)(v51 + 184) = v56;
  *(_QWORD *)(v51 + 152) = v60;
  *(_QWORD *)(v51 + 160) = v61;
  *(_QWORD *)(v51 + 216) = &type metadata for UInt64;
  *(_QWORD *)(v51 + 224) = &protocol witness table for UInt64;
  *(_QWORD *)(v51 + 232) = v46;
  *(_QWORD *)(v51 + 192) = v45;
  *(_QWORD *)(v51 + 256) = &type metadata for UInt64;
  *(_QWORD *)(v51 + 264) = &protocol witness table for UInt64;
  *(_QWORD *)(v51 + 296) = &type metadata for Int64;
  *(_QWORD *)(v51 + 304) = &protocol witness table for Int64;
  *(_QWORD *)(v51 + 272) = v67;
  os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v49, "%{public}@: %{public}@. Buckets for beacon %{mask.hash}@, sequence %{public}@, index %llu - %llu (factor %d)", 108, 2, v51, v63);
  swift_bridgeObjectRelease();
  sub_1000126B0(v57, type metadata accessor for SharedBeaconRecord);
  return v45;
}

uint64_t sub_1003B8810(uint64_t a1, unsigned __int8 a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  v21 = a4;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OwnedBeaconRecord(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1 + *(int *)(v15 + 20), v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1 + *(int *)(v15 + 32), v7);
  v16 = a2;
  if (a2)
  {
    v17 = 0;
    if (v16 != 1)
    {
LABEL_9:
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      return v17;
    }
    v18 = 1;
    if (a3)
      a3 = a3 / 0x60 + 1;
    else
      a3 = 0;
  }
  else
  {
    v18 = 0;
  }
  result = sub_10064F0F8((uint64_t)v14, (uint64_t)v10, v21, v18);
  if (((result | a3) & 0x8000000000000000) == 0)
  {
    v17 = result - a3;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003B898C(uint64_t a1, char a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SharedBeaconRecord(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1 + *(int *)(v16 + 20), v12);
  sub_100D3A990((uint64_t)v11);
  if (a2)
  {
    v17 = 0;
    if (a2 != 1)
    {
LABEL_9:
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      return v17;
    }
    v18 = 1;
    if (a3)
      a3 = a3 / 0x60 + 1;
    else
      a3 = 0;
  }
  else
  {
    v18 = 0;
  }
  result = sub_10064F0F8((uint64_t)v15, (uint64_t)v11, a4, v18);
  if (((result | a3) & 0x8000000000000000) == 0)
  {
    v17 = result - a3;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003B8AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(v2 + 16) = *(_BYTE *)a2;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v2 + 40) = v3;
  *(_QWORD *)(v2 + 48) = a1;
  return swift_task_switch(sub_1003B8B1C, 0, 0);
}

uint64_t sub_1003B8B1C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 56) = v1;
  *(_QWORD *)(v1 + 16) = v0 + 16;
  v2 = (_QWORD *)swift_task_alloc(dword_10111D0D4);
  *(_QWORD *)(v0 + 64) = v2;
  *v2 = v0;
  v2[1] = sub_1003B3190;
  return sub_100CD48A8((uint64_t)&unk_1010FA298, v1);
}

uint64_t sub_1003B8B8C(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v2 = *a1;
  v6 = *(_OWORD *)(a1 + 8);
  v3 = *((_QWORD *)a1 + 3);
  v4 = swift_task_alloc(dword_1010FA2A4);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_1003D9734;
  *(_QWORD *)(v4 + 256) = v3;
  *(_OWORD *)(v4 + 240) = v6;
  *(_BYTE *)(v4 + 264) = v2;
  return swift_task_switch(sub_1003B02E8, 0, 0);
}

Swift::Int sub_1003B8C0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10001A9A8(&qword_1010FA4D8);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v27 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v27 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)(v28);
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v28, v8, v7);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = v16[1];
        v18 = *v16 == v8 && v17 == v7;
        if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, v7, 0), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v19 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v19;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v20 = (_QWORD *)(v15 + 16 * v11);
          v21 = v20[1];
          if (*v20 != v8 || v21 != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, v7, 0);
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v23 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v23 = v8;
      v23[1] = v7;
      v24 = *(_QWORD *)(v3 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v26;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_1003B8DAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10001A9A8(&qword_10110FF40);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    v7 = ~(-1 << *(_BYTE *)(v3 + 32));
    while (1)
    {
      v8 = *(_QWORD *)(v6 + 8 * v4);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v3 + 40), v8);
      v10 = result & v7;
      v11 = (result & (unint64_t)v7) >> 6;
      v12 = *(_QWORD *)(v5 + 8 * v11);
      v13 = 1 << (result & v7);
      v14 = *(_QWORD *)(v3 + 48);
      if ((v13 & v12) != 0)
      {
        while (*(_QWORD *)(v14 + 8 * v10) != v8)
        {
          v10 = (v10 + 1) & v7;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
        *(_QWORD *)(v14 + 8 * v10) = v8;
        v15 = *(_QWORD *)(v3 + 16);
        v16 = __OFADD__(v15, 1);
        v17 = v15 + 1;
        if (v16)
        {
          __break(1u);
          return result;
        }
        *(_QWORD *)(v3 + 16) = v17;
      }
      if (++v4 == v1)
        return v3;
    }
  }
  return (uint64_t)&_swiftEmptySetSingleton;
}

void *sub_1003B8EB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10001A9A8(&qword_1010FA428);
    static _SetStorage.allocate(capacity:)(v1);
    v3 = *(unsigned __int8 *)(a1 + 32);
    Hasher.init(_seed:)(v5);
    __asm { BR              X8 }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_1003B98CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10001A9A8(&qword_1010FA4A0);
    static _SetStorage.allocate(capacity:)(v1);
    v3 = *(unsigned __int8 *)(a1 + 32);
    Hasher.init(_seed:)(v5);
    __asm { BR              X8 }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_1003B9FE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_10001A9A8(&qword_1010FA238);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

Swift::Int sub_1003BA248(uint64_t a1)
{
  return sub_1003D7E9C(a1, &qword_1010FA240);
}

_QWORD *sub_1003BA254(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v24 = a2;
  v23 = type metadata accessor for OwnedBeaconRecord(0);
  v4 = __chkstk_darwin(v23);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v9 = (char *)&v21 - v8;
  result = _swiftEmptyArrayStorage;
  v25 = _swiftEmptyArrayStorage;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = *(unsigned __int8 *)(v7 + 80);
    v13 = *(_QWORD *)(v7 + 72);
    v21 = v2;
    v22 = (v12 + 32) & ~v12;
    v14 = a1 + v22;
    v15 = _swiftEmptyArrayStorage;
    do
    {
      sub_10005972C(v14, (uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
      v16 = sub_10088A6EC()[2];
      swift_bridgeObjectRelease();
      if (v16)
      {
        v17 = (uint64_t)v6;
        sub_1000126EC((uint64_t)v9, (uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
          sub_10009A680(0, v15[2] + 1, 1);
        v15 = v25;
        v19 = v25[2];
        v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_10009A680(v18 > 1, v19 + 1, 1);
          v15 = v25;
        }
        v15[2] = v19 + 1;
        v20 = (uint64_t)v15 + v22 + v19 * v13;
        v6 = (char *)v17;
        sub_1000126EC(v17, v20, type metadata accessor for OwnedBeaconRecord);
      }
      else
      {
        sub_1000126B0((uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
      }
      v14 += v13;
      --v11;
    }
    while (v11);
    return v25;
  }
  return result;
}

uint64_t sub_1003BA420(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = result + 32;
    v33 = v1 - 1;
    do
    {
      if (v2 <= v1)
        v4 = v1;
      else
        v4 = v2;
      v5 = (__int128 *)(v3 + 160 * v2);
      v6 = v2;
      while (1)
      {
        if (v4 == v6)
        {
          __break(1u);
          return result;
        }
        v7 = v5[7];
        v29 = v5[6];
        v30 = v7;
        v8 = v5[9];
        v31 = v5[8];
        v32 = v8;
        v9 = v5[3];
        v25 = v5[2];
        v26 = v9;
        v10 = v5[5];
        v27 = v5[4];
        v28 = v10;
        v11 = v5[1];
        v23 = *v5;
        v24 = v11;
        sub_10008B118(&v23);
        if (sub_10012D978() == 2)
        {
          sub_10012DD0C();
          if ((v12 & 1) != 0)
            break;
        }
        ++v6;
        result = (uint64_t)sub_10008B200(&v23);
        v5 += 10;
        if (v1 == v6)
          return (uint64_t)_swiftEmptyArrayStorage;
      }
      result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if ((result & 1) == 0)
        result = sub_10009A844(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v14 = _swiftEmptyArrayStorage[2];
      v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1)
        result = sub_10009A844(v13 > 1, v14 + 1, 1);
      v2 = v6 + 1;
      _swiftEmptyArrayStorage[2] = v14 + 1;
      v15 = &_swiftEmptyArrayStorage[20 * v14];
      v16 = v24;
      v15[2] = v23;
      v15[3] = v16;
      v17 = v25;
      v18 = v26;
      v19 = v28;
      v15[6] = v27;
      v15[7] = v19;
      v15[4] = v17;
      v15[5] = v18;
      v20 = v29;
      v21 = v30;
      v22 = v32;
      v15[10] = v31;
      v15[11] = v22;
      v15[8] = v20;
      v15[9] = v21;
    }
    while (v33 != v6);
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

void sub_1003BA5C8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;

  v6 = type metadata accessor for SystemVersionNumber(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v24 - v11;
  if (qword_1010E9B98 != -1)
    swift_once(&qword_1010E9B98, sub_1003835E0);
  v13 = type metadata accessor for Logger(0);
  sub_10001A9E8(v13, (uint64_t)qword_1011B6DF8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, a3, v6);
  swift_bridgeObjectRetain_n(a2, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v26 = v10;
    v18 = v17;
    v25 = swift_slowAlloc(64, -1);
    v29._countAndFlagsBits = v25;
    *(_DWORD *)v18 = 136315394;
    swift_bridgeObjectRetain(a2);
    v19 = sub_100016940(a1, a2, &v29._countAndFlagsBits);
    v27 = a3;
    v28 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v18 + 12) = 2080;
    v24[1] = a1;
    v20 = sub_100006204(&qword_1010F9FB8, (uint64_t (*)(uint64_t))&type metadata accessor for SystemVersionNumber, (uint64_t)&protocol conformance descriptor for SystemVersionNumber);
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v6, v20);
    v28 = sub_100016940(v21, v22, &v29._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "supportsItemConnection? %s %s", (uint8_t *)v18, 0x16u);
    v23 = v25;
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }

  v29 = String.lowercased()();
  sub_1003CDF34();
  sub_1000330C8();
  static PartialMatchCase<>.first(containing:)(&v29);
  swift_bridgeObjectRelease();
  __asm { BR              X10 }
}

uint64_t sub_1003BA960(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __n128 v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  void *v28;
  __int128 v29;
  unint64_t v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  double v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  void *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;

  v2 = sub_10001A9A8(&qword_1010ECF78);
  __chkstk_darwin(v2);
  v4 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SystemVersionNumber(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v61 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[1];
  v83 = *a1;
  v84 = v8;
  v10 = *((_QWORD *)a1 + 4);
  v9 = *((_QWORD *)a1 + 5);
  v11 = a1[4];
  v81 = a1[3];
  v82 = v11;
  v12 = *((_QWORD *)a1 + 10);
  v13 = *((_QWORD *)a1 + 11);
  v14 = *((_QWORD *)a1 + 12);
  v59 = (void *)*((_QWORD *)a1 + 13);
  v15 = a1[9];
  v16 = a1[7];
  v79 = a1[8];
  v80 = v15;
  v78 = v16;
  v17 = swift_bridgeObjectRetain(v13);
  v62 = v12;
  SystemVersionNumber.init(string:)(v12, v13, v17);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  v60 = v5;
  if (v18(v4, 1, v5) == 1)
  {
    v60 = v10;
    v61 = (char *)v14;
    v19 = a1 + 3;
    v20 = a1 + 7;
    v21 = sub_100004048((uint64_t)v4, &qword_1010ECF78);
    v58 = static os_log_type_t.error.getter(v21);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v22 = qword_1011B7D30;
    v23 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v24 = swift_allocObject(v23, 72, 7);
    *(_OWORD *)(v24 + 16) = xmmword_100E22B00;
    v76 = 60;
    v77 = 0xE100000000000000;
    v25 = a1[1];
    v63 = *a1;
    v64 = v25;
    v26 = (uint64_t)v61;
    v65 = v60;
    v66 = v9;
    v27 = v19[1];
    v67 = *v19;
    v68 = v27;
    v69 = v62;
    v70 = v13;
    v28 = v59;
    v71 = v61;
    v72 = v59;
    v29 = v20[1];
    v73 = *v20;
    v74 = v29;
    v75 = v20[2];
    v30 = sub_1003CDEF0();
    v31._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(&type metadata for MessagingDevice, v30);
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 8250;
    v32._object = (void *)0xE200000000000000;
    String.append(_:)(v32);
    swift_bridgeObjectRetain(v28);
    v33._countAndFlagsBits = v26;
    v33._object = v28;
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 62;
    v34._object = (void *)0xE100000000000000;
    String.append(_:)(v34);
    v35 = v76;
    v36 = v77;
    *(_QWORD *)(v24 + 56) = &type metadata for String;
    *(_QWORD *)(v24 + 64) = sub_10001AA00();
    *(_QWORD *)(v24 + 32) = v35;
    *(_QWORD *)(v24 + 40) = v36;
    os_log(_:dso:log:_:_:)(v58, &_mh_execute_header, v22, "Connectable devices found messagingDevice: %@ - could not read build version.", 77, 2, v24);
    swift_bridgeObjectRelease();
    v37 = 0;
  }
  else
  {
    v38 = (uint64_t)v61;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v61, v4, v60);
    sub_1003BA5C8(v10, v9, v38);
    v58 = v39;
    v40 = static os_log_type_t.default.getter(v39);
    v57 = v6;
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v56 = qword_1011B7D30;
    v41 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v42 = swift_allocObject(v41, 112, 7);
    *(_OWORD *)(v42 + 16) = xmmword_100E22B10;
    v76 = 60;
    v77 = 0xE100000000000000;
    v63 = v83;
    v64 = v84;
    v65 = v10;
    v66 = v9;
    v67 = v81;
    v68 = v82;
    v43 = v62;
    v69 = v62;
    v70 = v13;
    v44 = v59;
    v71 = (char *)v14;
    v72 = v59;
    v74 = v79;
    v75 = v80;
    v73 = v78;
    v45 = sub_1003CDEF0();
    v46._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(&type metadata for MessagingDevice, v45);
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._countAndFlagsBits = 8250;
    v47._object = (void *)0xE200000000000000;
    String.append(_:)(v47);
    swift_bridgeObjectRetain(v44);
    v48._countAndFlagsBits = v14;
    v48._object = v44;
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._countAndFlagsBits = 62;
    v49._object = (void *)0xE100000000000000;
    String.append(_:)(v49);
    v50 = v76;
    v51 = v77;
    *(_QWORD *)(v42 + 56) = &type metadata for String;
    v52 = sub_10001AA00();
    *(_QWORD *)(v42 + 32) = v50;
    *(_QWORD *)(v42 + 40) = v51;
    *(_QWORD *)(v42 + 96) = &type metadata for String;
    *(_QWORD *)(v42 + 104) = v52;
    *(_QWORD *)(v42 + 64) = v52;
    *(_QWORD *)(v42 + 72) = v43;
    *(_QWORD *)(v42 + 80) = v13;
    *(_QWORD *)&v53 = swift_bridgeObjectRetain(v13).n128_u64[0];
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v56, "Connectable devices found messagingDevice: %@, version: %@.", 59, 2, v42, v53);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v61, v60);
    v37 = v58;
  }
  return v37 & 1;
}

uint64_t sub_1003BADC4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38[11];
  _QWORD *v39;

  v2 = result;
  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = 0;
    v5 = _swiftEmptyArrayStorage;
    v6 = 32;
    while (v4 < *(_QWORD *)(v2 + 16))
    {
      v7 = *(_OWORD *)(v2 + v6 + 112);
      v8 = *(_OWORD *)(v2 + v6 + 80);
      v34 = *(_OWORD *)(v2 + v6 + 96);
      v35 = v7;
      v9 = *(_OWORD *)(v2 + v6 + 112);
      v10 = *(_OWORD *)(v2 + v6 + 144);
      v36 = *(_OWORD *)(v2 + v6 + 128);
      v37 = v10;
      v11 = *(_OWORD *)(v2 + v6 + 48);
      v12 = *(_OWORD *)(v2 + v6 + 16);
      v30 = *(_OWORD *)(v2 + v6 + 32);
      v31 = v11;
      v13 = *(_OWORD *)(v2 + v6 + 48);
      v14 = *(_OWORD *)(v2 + v6 + 80);
      v32 = *(_OWORD *)(v2 + v6 + 64);
      v33 = v14;
      v15 = *(_OWORD *)(v2 + v6 + 16);
      v28 = *(_OWORD *)(v2 + v6);
      v29 = v15;
      v38[6] = v34;
      v38[7] = v9;
      v16 = *(_OWORD *)(v2 + v6 + 144);
      v38[8] = v36;
      v38[9] = v16;
      v38[2] = v30;
      v38[3] = v13;
      v38[4] = v32;
      v38[5] = v8;
      v38[0] = v28;
      v38[1] = v12;
      sub_10008B118(&v28);
      v17 = sub_1003BA960(v38);
      if (v1)
      {
        sub_10008B200(&v28);
        swift_release();
        goto LABEL_15;
      }
      if ((v17 & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native(v5);
        v39 = v5;
        if ((result & 1) == 0)
        {
          result = sub_10009A844(0, v5[2] + 1, 1);
          v5 = v39;
        }
        v19 = v5[2];
        v18 = v5[3];
        if (v19 >= v18 >> 1)
        {
          result = sub_10009A844(v18 > 1, v19 + 1, 1);
          v5 = v39;
        }
        v5[2] = v19 + 1;
        v20 = &v5[20 * v19];
        v21 = v29;
        v20[2] = v28;
        v20[3] = v21;
        v22 = v30;
        v23 = v31;
        v24 = v33;
        v20[6] = v32;
        v20[7] = v24;
        v20[4] = v22;
        v20[5] = v23;
        v25 = v34;
        v26 = v35;
        v27 = v37;
        v20[10] = v36;
        v20[11] = v27;
        v20[8] = v25;
        v20[9] = v26;
      }
      else
      {
        result = (uint64_t)sub_10008B200(&v28);
      }
      ++v4;
      v6 += 160;
      if (v3 == v4)
        goto LABEL_15;
    }
    __break(1u);
  }
  else
  {
    v5 = _swiftEmptyArrayStorage;
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  return result;
}

_QWORD *sub_1003BAF88(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *result;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD v29[2];
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v9 = type metadata accessor for ShareRecord(0);
  v10 = __chkstk_darwin(v9);
  v33 = (uint64_t)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v29 - v13;
  result = _swiftEmptyArrayStorage;
  v34 = _swiftEmptyArrayStorage;
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v29[1] = v4;
    v17 = a2;
    v18 = *(_QWORD *)(v12 + 72);
    v30 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v19 = a1 + v30;
    v20 = _swiftEmptyArrayStorage;
    v32 = v9;
    v31 = v17;
    do
    {
      sub_10005972C(v19, (uint64_t)v14, type metadata accessor for ShareRecord);
      v21 = &v14[*(int *)(v9 + 36)];
      if (*v21 == v17
        && ((v22 = *((_QWORD *)v21 + 1), v23 = *((_QWORD *)v21 + 2), v22 == a3) ? (v24 = v23 == a4) : (v24 = 0),
            v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, a3, a4, 0) & 1) != 0))
      {
        v25 = a3;
        v26 = a4;
        sub_1000126EC((uint64_t)v14, v33, type metadata accessor for ShareRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
          sub_10009AFB8(0, v20[2] + 1, 1);
        v20 = v34;
        v28 = v34[2];
        v27 = v34[3];
        if (v28 >= v27 >> 1)
        {
          sub_10009AFB8(v27 > 1, v28 + 1, 1);
          v20 = v34;
        }
        v20[2] = v28 + 1;
        sub_1000126EC(v33, (uint64_t)v20 + v30 + v28 * v18, type metadata accessor for ShareRecord);
        a4 = v26;
        a3 = v25;
        v9 = v32;
        v17 = v31;
      }
      else
      {
        sub_1000126B0((uint64_t)v14, type metadata accessor for ShareRecord);
      }
      v19 += v18;
      --v16;
    }
    while (v16);
    return v34;
  }
  return result;
}

Swift::Int sub_1003BB198(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10001A9A8(&qword_1010F9FA0);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)(v19);
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_BYTE *)(v14 + v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_1003BB2D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100C4F868(*(_BYTE *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_1003BB2F8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = (int *)type metadata accessor for ShareRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  v9 = v0 + v4 + v1[7];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = v0 + v4 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
    v12(v13, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_1003BB43C(uint64_t a1)
{
  return sub_1003D6B50(a1, type metadata accessor for ShareRecord, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))sub_1003A545C);
}

uint64_t sub_1003BB450()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003BB45C()
{
  return sub_1003D8B40((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1003BB470(uint64_t a1)
{
  return sub_1003D8CB0(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))sub_100390C68);
}

uint64_t sub_1003BB47C(uint64_t a1)
{
  uint64_t v1;

  return sub_100393BE8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_101071880, (uint64_t)sub_1003D9B40, (uint64_t)&unk_101071898);
}

uint64_t sub_1003BB4B0()
{
  return sub_1003CF498("*** timed out waiting for IDS send ***", 38, (uint64_t)sub_1003BB5EC, (uint64_t)&unk_101071848);
}

uint64_t sub_1003BB4D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1010F9F0C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1010F9F08 + dword_1010F9F08))(v2, v0 + 24);
}

uint64_t sub_1003BB53C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  _QWORD *v3;

  v2 = *(char **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1010F9F2C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1003D9734;
  return ((uint64_t (*)(char *))((char *)&dword_1010F9F28 + dword_1010F9F28))(v2);
}

unint64_t sub_1003BB594()
{
  unint64_t result;

  result = qword_1010F9F40;
  if (!qword_1010F9F40)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store(result, (unint64_t *)&qword_1010F9F40);
  }
  return result;
}

unint64_t sub_1003BB5D8(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return sub_10010F91C(result);
  return result;
}

void sub_1003BB5EC()
{
  sub_100394478();
}

uint64_t sub_1003BB604()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003BB614()
{
  return sub_1003D03D4((uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD))sub_100390EF0);
}

uint64_t sub_1003BB620()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003BB62C()
{
  uint64_t v0;

  return sub_100391704(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), &qword_1010F4868);
}

uint64_t sub_1003BB654()
{
  return sub_1003D0F48((uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_100393B2C);
}

uint64_t sub_1003BB668()
{
  uint64_t v0;

  return sub_1003939A4(*(void (**)(uint64_t *))(v0 + 16));
}

uint64_t sub_1003BB684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1010F9F5C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1010F9F58 + dword_1010F9F58))(v2, v0 + 24);
}

uint64_t sub_1003BB6EC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  _QWORD *v3;

  v2 = *(char **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1010F9F6C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000D9CC0;
  return ((uint64_t (*)(char *))((char *)&dword_1010F9F68 + dword_1010F9F68))(v2);
}

uint64_t sub_1003BB744()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003BB754()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1003BB780(char a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t v4;
  _BYTE v5[24];

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(NSObject **)(v1 + 24);
  swift_beginAccess(v4 + 16, v5, 1, 0);
  *(_BYTE *)(v4 + 16) = a1;
  dispatch_group_leave(v3);
}

uint64_t sub_1003BB7D0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1003BB80C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_BYTE *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = swift_task_alloc(dword_1010F9F94);
  v7 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = sub_100004A74;
  *(_QWORD *)(v6 + 40) = v4;
  *(_QWORD *)(v6 + 48) = v5;
  *(_BYTE *)(v6 + 64) = v3;
  *(_QWORD *)(v6 + 32) = v2;
  *(_OWORD *)(v6 + 16) = v7;
  return swift_task_switch(sub_1003B0040, 0, 0);
}

uint64_t sub_1003BB894()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003BB8A0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = (int *)type metadata accessor for ShareRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  v9 = v0 + v4 + v1[7];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = v0 + v4 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
    v12(v13, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_1003BB9EC(char a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for ShareRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1003A5964(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

unint64_t sub_1003BBA4C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  int v54;
  int64_t v55;
  uint64_t v56;
  int v57;
  _QWORD v59[2];
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _OWORD v67[2];
  __int128 v68;
  _QWORD *v69;
  char v70[88];

  v65 = a8;
  LODWORD(v64) = a6;
  LODWORD(v63) = a5;
  v61 = a4;
  v62 = a3;
  v11 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v11);
  v13 = (char *)v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v60 = (char *)v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  inited = swift_initStackObject(v17, v70);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionWantsClientAcknowledgementKey);
  *(_QWORD *)(inited + 40) = v19;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = 1;
  v20 = sub_1006B8B10(inited);
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionUUIDKey);
  v23 = v22;
  v24 = UUID.data.getter(v21);
  v69 = &type metadata for Data;
  *(_QWORD *)&v68 = v24;
  *((_QWORD *)&v68 + 1) = v25;
  sub_10010F90C(&v68, v67);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
  v66 = v20;
  sub_10010A7E4(v67, v21, v23, isUniquelyReferenced_nonNull_native);
  v27 = v66;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionExpectsPeerResponseKey);
    v30 = v29;
    v69 = &type metadata for Bool;
    LOBYTE(v68) = 1;
    sub_10010F90C(&v68, v67);
    v31 = swift_isUniquelyReferenced_nonNull_native(v27);
    v66 = v27;
    sub_10010A7E4(v67, v28, v30, v31);
    v27 = v66;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_10000F9B8(v62, (uint64_t)v13, &qword_1010ED860);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_100004048((uint64_t)v13, &qword_1010ED860);
  }
  else
  {
    v32 = v60;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v60, v13, v14);
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionPeerResponseIdentifierKey);
    v35 = v34;
    v36 = UUID.uuidString.getter(v33);
    v69 = &type metadata for String;
    *(_QWORD *)&v68 = v36;
    *((_QWORD *)&v68 + 1) = v37;
    sub_10010F90C(&v68, v67);
    v38 = swift_isUniquelyReferenced_nonNull_native(v27);
    v66 = v27;
    sub_10010A7E4(v67, v33, v35, v38);
    v27 = v66;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v32, v14);
  }
  if ((v63 & 1) == 0)
  {
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionTimeoutKey);
    v41 = v40;
    v69 = &type metadata for Double;
    *(_QWORD *)&v68 = v61;
    sub_10010F90C(&v68, v67);
    v42 = swift_isUniquelyReferenced_nonNull_native(v27);
    v66 = v27;
    sub_10010A7E4(v67, v39, v41, v42);
    v27 = v66;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if ((v64 & 1) != 0)
  {
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionFireAndForgetKey);
    v45 = v44;
    v69 = &type metadata for Bool;
    LOBYTE(v68) = 1;
    sub_10010F90C(&v68, v67);
    v46 = swift_isUniquelyReferenced_nonNull_native(v27);
    v66 = v27;
    sub_10010A7E4(v67, v43, v45, v46);
    v27 = v66;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*((_QWORD *)&a9 + 1))
  {
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionQueueOneIdentifierKey);
    v49 = v48;
    v69 = &type metadata for String;
    v68 = a9;
    sub_10010F90C(&v68, v67);
    swift_bridgeObjectRetain(*((_QWORD *)&a9 + 1));
    v50 = swift_isUniquelyReferenced_nonNull_native(v27);
    v66 = v27;
    sub_10010A7E4(v67, v47, v49, v50);
    v27 = v66;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v51 = v65;
  v52 = *(_QWORD *)(a7 + 16);
  if (v52)
  {
    v59[0] = v27;
    *(_QWORD *)&v68 = _swiftEmptyArrayStorage;
    sub_10009A2F4(0, v52, 0);
    v53 = sub_1003B2D18(a7);
    v64 = a7 + 56;
    v62 = IDSRegistrationPropertySupportsBeaconSharingV3;
    v61 = IDSRegistrationPropertySupportsBeaconSharingV2;
    v60 = (char *)IDSRegistrationPropertySupportsSecureLocationsV1;
    v59[1] = IDSRegistrationPropertySupportsFMDV2;
    v63 = IDSRegistrationPropertySupportsIncomingFindMyV1;
    if (v53 < 0 || v53 >= 1 << *(_BYTE *)(a7 + 32))
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(v64 + (((unint64_t)v53 >> 3) & 0xFFFFFFFFFFFFF8)) >> v53) & 1) != 0)
    {
      if (*(_DWORD *)(a7 + 36) == v54)
        __asm { BR              X9 }
      goto LABEL_27;
    }
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v55 = *(_QWORD *)(v65 + 16);
  if (v55)
  {
    v59[0] = v27;
    *(_QWORD *)&v68 = _swiftEmptyArrayStorage;
    sub_10009A2F4(0, v55, 0);
    v56 = sub_1003B2D18(v51);
    v64 = v51 + 56;
    v63 = IDSRegistrationPropertySupportsBeaconSharingV3;
    v62 = IDSRegistrationPropertySupportsBeaconSharingV2;
    v61 = IDSRegistrationPropertySupportsSecureLocationsV1;
    v60 = (char *)IDSRegistrationPropertySupportsFMDV2;
    if ((v56 & 0x8000000000000000) == 0 && v56 < 1 << *(_BYTE *)(v51 + 32))
    {
      if (((*(_QWORD *)(v64 + (((unint64_t)v56 >> 3) & 0xFFFFFFFFFFFFF8)) >> v56) & 1) != 0)
      {
        if (*(_DWORD *)(v51 + 36) == v57)
          __asm { BR              X9 }
LABEL_30:
        __break(1u);
        JUMPOUT(0x1003BC3B0);
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  return v27;
}

uint64_t sub_1003BC3D8(int a1, void (*a2)(os_log_t, uint64_t), uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD), _QWORD *a5, int a6, uint64_t a7, uint64_t a8, char a9, void (*a10)(_QWORD, _QWORD), char a11, unsigned __int8 a12, void (*a13)(_QWORD, _QWORD, _QWORD), uint64_t a14, __int128 a15, _QWORD *a16, unsigned __int8 a17, void (*a18)(_QWORD, _QWORD, _QWORD), unint64_t a19, uint64_t a20,void (*a21)(_QWORD, _QWORD))
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void ***v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void *v50;
  NSObject *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t inited;
  uint64_t v71;
  NSURL *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  void *v108;
  const void *v109;
  uint64_t v110;
  char *v111;
  void (*v112)(_QWORD, _QWORD, _QWORD);
  void (*v113)(os_log_t, uint64_t);
  _QWORD *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  void (**v120)(uint64_t);
  void (*v121)(uint64_t);
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  void (*v127)(char *, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  NSURL *v144;
  char *v145;
  _QWORD *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  int v151;
  NSURL *v152;
  uint64_t v153;
  void (*v154)(_QWORD, _QWORD, _QWORD);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(char *, uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  void (*v169)(_QWORD, _QWORD, _QWORD);
  unint64_t v170;
  void (*v171)(_QWORD, _QWORD);
  uint64_t v172;
  char v173[8];
  void **aBlock;
  uint64_t v175;
  uint64_t (*v176)(uint64_t);
  void *v177;
  uint64_t (*v178)();
  uint64_t v179;
  char v180[8];
  uint64_t v181;

  v165 = a8;
  v164 = a7;
  LODWORD(v163) = a6;
  v146 = a5;
  v154 = a4;
  v153 = a3;
  v152 = (NSURL *)a2;
  v151 = a1;
  v171 = a21;
  v149 = type metadata accessor for DispatchQoS.QoSClass(0);
  v148 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v147 = (char *)&v136 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for DispatchTime(0);
  v138 = *(_QWORD *)(v140 - 8);
  v22 = __chkstk_darwin(v140);
  v137 = (char *)&v136 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v139 = (char *)&v136 - v24;
  v157 = type metadata accessor for DispatchWorkItemFlags(0);
  v156 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157);
  v160 = (char *)&v136 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = type metadata accessor for DispatchQoS(0);
  v155 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v159 = (char *)&v136 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_10001A9A8(&qword_1010ED860);
  v28 = __chkstk_darwin(v27);
  v145 = (char *)&v136 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v144 = (NSURL *)((char *)&v136 - v30);
  v166 = type metadata accessor for UUID(0);
  v162 = *(_QWORD *)(v166 - 8);
  v31 = *(_QWORD *)(v162 + 64);
  v32 = __chkstk_darwin(v166);
  v150 = (char *)&v136 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v32);
  v143 = (char *)&v136 - v34;
  v35 = __chkstk_darwin(v33);
  v142 = (uint64_t)&v136 - v36;
  v37 = __chkstk_darwin(v35);
  v141 = (uint64_t)&v136 - v38;
  __chkstk_darwin(v37);
  v158 = (char *)&v136 - v39;
  v167 = (_QWORD *)sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v167);
  v41 = (void ***)((char *)&v136 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = __chkstk_darwin(v42);
  v46 = (char *)&v136 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v48 = (char *)&v136 - v47;
  v49 = swift_allocObject(&unk_101073428, 56, 7);
  LODWORD(v168) = a17;
  *(_BYTE *)(v49 + 16) = a17;
  v169 = a18;
  *(_QWORD *)(v49 + 24) = a18;
  *(_QWORD *)(v49 + 32) = a19;
  v172 = v49;
  v50 = v171;
  *(_QWORD *)(v49 + 40) = a20;
  *(_QWORD *)(v49 + 48) = v50;
  v170 = a19;
  swift_bridgeObjectRetain(a19);
  swift_retain();
  v51 = v50;
  static SystemInfo.lockState.getter(v51);
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v46, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v42);
  v52 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  LOBYTE(v50) = dispatch thunk of static Equatable.== infix(_:_:)(v48, v46, v42, v52);
  v53 = *(void (**)(char *, uint64_t))(v43 + 8);
  v53(v46, v42);
  v54 = ((uint64_t (*)(char *, uint64_t))v53)(v48, v42);
  if ((v50 & 1) != 0)
  {
    v55 = static os_log_type_t.error.getter(v54);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    os_log(_:dso:log:_:_:)(v55, &_mh_execute_header, qword_1011B7D30, "Attempt to send message before first unlock!", 44, 2, _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0);
    v57 = v56;
    v181 = 5;
    v58 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v59 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v60 = v58;
    v61 = v57;
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v181, v60, v61, v59);
    *v41 = aBlock;
    swift_storeEnumTagMultiPayload(v41, v167, 1);
    sub_1003917A8((uint64_t)v41, v168, (uint64_t)v169, v170, a20, v51);
    sub_100004048((uint64_t)v41, &qword_1010F4868);
    return swift_release();
  }
  v62 = a16;
  v63 = (char)v163;
  v64 = v164;
  v65 = v165;
  v66 = sub_10038D0CC(v163, v164, v165);
  if ((v66 & 1) == 0)
  {
    v75 = static os_log_type_t.error.getter(v66);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v76 = qword_1011B7D30;
    v77 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v78 = swift_allocObject(v77, 72, 7);
    *(_OWORD *)(v78 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v78 + 56) = &type metadata for String;
    *(_QWORD *)(v78 + 64) = sub_10001AA00();
    *(_QWORD *)(v78 + 32) = v64;
    *(_QWORD *)(v78 + 40) = v65;
    *(_QWORD *)&v79 = swift_bridgeObjectRetain(v65).n128_u64[0];
    os_log(_:dso:log:_:_:)(v75, &_mh_execute_header, v76, "Not sending since %@ has no IDS registered devices", 50, 2, v78, v79);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    v81 = v80;
    v181 = 12;
    v82 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v59 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v60 = v82;
    v61 = v81;
    goto LABEL_11;
  }
  v67 = v63;
  v168 = a14;
  v169 = a13;
  LODWORD(v170) = a12;
  v171 = a10;
  v68 = (_QWORD *)a16[3];
  v69 = sub_10001A9A8(&qword_1010EE2B0);
  if ((a9 & 1) != 0)
  {
    v167 = a16;
    inited = swift_initStackObject(v69, v173);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_BYTE *)(inited + 32) = v67;
    *(_QWORD *)(inited + 40) = v64;
    *(_QWORD *)(inited + 48) = v65;
    v71 = v162;
    v72 = v144;
    v73 = v166;
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v162 + 56))(v144, 1, 1, v166);
    swift_bridgeObjectRetain(v65);
    v74 = v141;
    sub_10038F3FC(v151, v152, v153, v154, v146, inited, v72, v171, v141, a11 & 1, v170 & 1, v169, v168, a15);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v72, &qword_1010ED860);
    v90 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 32);
    v90(v158, v74, v73);
    v62 = v167;
  }
  else
  {
    v83 = swift_initStackObject(v69, v180);
    *(_OWORD *)(v83 + 16) = xmmword_100E22B00;
    *(_BYTE *)(v83 + 32) = v67;
    *(_QWORD *)(v83 + 40) = v64;
    *(_QWORD *)(v83 + 48) = v65;
    v167 = v68;
    v84 = v162;
    v85 = v145;
    v86 = v166;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v162 + 56))(v145, 1, 1, v166);
    swift_bridgeObjectRetain(v65);
    v87 = (uint64_t)v143;
    UUID.init()(v88);
    v89 = v142;
    sub_10037DC5C(v151, (void (*)(os_log_t, uint64_t))v152, v153, (unint64_t)v154, v87, v83, (uint64_t (*)(_QWORD, _QWORD, _QWORD))v85, (uint64_t)v171, v142, a11 & 1, v170 & 1, (uint64_t)v169, v168, a15, &qword_1010F9EF8, &qword_1010F9F00, &qword_1010F9F18, (uint64_t)&type metadata for BeaconSharingMessageType, &unk_101071A10,
      (uint64_t)&unk_1010F9F60);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v87, v86);
    sub_100004048((uint64_t)v85, &qword_1010ED860);
    v90 = *(void (**)(char *, uint64_t, uint64_t))(v84 + 32);
    v90(v158, v89, v86);
  }
  v91 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  swift_allocObject(v91, *(unsigned int *)(v91 + 48), *(unsigned __int16 *)(v91 + 52));
  v92 = Future.init()();
  v93 = static os_log_type_t.default.getter(v92);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v94 = qword_1011B7D30;
  v95 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v96 = swift_allocObject(v95, 72, 7);
  *(_OWORD *)(v96 + 16) = xmmword_100E22B00;
  v97 = v158;
  v98 = UUID.uuidString.getter(v96);
  v100 = v99;
  *(_QWORD *)(v96 + 56) = &type metadata for String;
  *(_QWORD *)(v96 + 64) = sub_10001AA00();
  *(_QWORD *)(v96 + 32) = v98;
  *(_QWORD *)(v96 + 40) = v100;
  os_log(_:dso:log:_:_:)(v93, &_mh_execute_header, v94, "Setting %@ to pending", 21, 2, v96);
  swift_bridgeObjectRelease();
  v171 = (void (*)(_QWORD, _QWORD))v62[21];
  v101 = v162;
  v170 = *(_QWORD *)(v162 + 16);
  v102 = v150;
  v103 = v166;
  ((void (*)(char *, char *, uint64_t))v170)(v150, v97, v166);
  v104 = *(unsigned __int8 *)(v101 + 80);
  v164 = ((v104 + 24) & ~v104) + v31;
  v105 = (v104 + 24) & ~v104;
  v168 = v105;
  v169 = (void (*)(_QWORD, _QWORD, _QWORD))(v104 | 7);
  v106 = (v164 + 7) & 0xFFFFFFFFFFFFFFF8;
  v107 = swift_allocObject(&unk_1010734A0, v106 + 8, v104 | 7);
  *(_QWORD *)(v107 + 16) = v62;
  v90((char *)(v107 + v105), (uint64_t)v102, v103);
  *(_QWORD *)(v107 + v106) = v92;
  v178 = sub_1003BB468;
  v179 = v107;
  aBlock = _NSConcreteStackBlock;
  v175 = 1107296256;
  v176 = sub_100016FB8;
  v177 = &unk_1010734B8;
  v108 = _Block_copy(&aBlock);
  v167 = v90;
  v109 = v108;
  swift_retain();
  v110 = swift_retain();
  v165 = v92;
  v111 = v159;
  static DispatchQoS.unspecified.getter(v110);
  v181 = (uint64_t)_swiftEmptyArrayStorage;
  v112 = (void (*)(_QWORD, _QWORD, _QWORD))sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v154 = v112;
  v113 = (void (*)(os_log_t, uint64_t))sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v152 = (NSURL *)v113;
  v153 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v114 = v62;
  v115 = v160;
  v116 = v157;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v181, v113, v153, v157, v112);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v111, v115, v109);
  _Block_release(v109);
  v163 = *(void (**)(char *, uint64_t))(v156 + 8);
  v163(v115, v116);
  v156 = *(_QWORD *)(v155 + 8);
  ((void (*)(char *, uint64_t))v156)(v111, v161);
  swift_release();
  v117 = v150;
  v118 = v158;
  ((void (*)(char *, char *, uint64_t))v170)(v150, v158, v103);
  v119 = swift_allocObject(&unk_1010734F0, v106 + 16, v169);
  *(_QWORD *)(v119 + 16) = v114;
  ((void (*)(uint64_t, char *, uint64_t))v167)(v119 + v168, v117, v103);
  v120 = (void (**)(uint64_t))(v119 + v106);
  v121 = (void (*)(uint64_t))v172;
  *v120 = sub_1003D1DAC;
  v120[1] = v121;
  v122 = v114;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1003BB470, v119);
  swift_release();
  swift_release();
  v123 = swift_allocObject(&unk_101073518, 32, 7);
  *(_QWORD *)(v123 + 16) = sub_1003D1DAC;
  *(_QWORD *)(v123 + 24) = v121;
  swift_retain();
  Future.addFailure(block:)(sub_1003D9B84, v123);
  swift_release();
  v124 = swift_release();
  v125 = v137;
  static DispatchTime.now()(v124);
  v126 = v139;
  + infix(_:_:)(v125, 360.0);
  v127 = *(void (**)(char *, uint64_t))(v138 + 8);
  v128 = v140;
  v127(v125, v140);
  v129 = v166;
  ((void (*)(char *, char *, uint64_t))v170)(v117, v118, v166);
  v130 = swift_allocObject(&unk_101073540, v164, v169);
  *(_QWORD *)(v130 + 16) = v122;
  ((void (*)(uint64_t, char *, uint64_t))v167)(v130 + v168, v117, v129);
  v178 = sub_1003BB4B0;
  v179 = v130;
  aBlock = _NSConcreteStackBlock;
  v175 = 1107296256;
  v176 = sub_100016FB8;
  v177 = &unk_101073558;
  v131 = _Block_copy(&aBlock);
  v132 = swift_retain();
  v133 = v159;
  static DispatchQoS.unspecified.getter(v132);
  v181 = (uint64_t)_swiftEmptyArrayStorage;
  v134 = v160;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v181, v152, v153, v116, v154);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v126, v133, v134, v131);
  _Block_release(v131);
  swift_release();
  v163(v134, v116);
  ((void (*)(char *, uint64_t))v156)(v133, v161);
  v127(v126, v128);
  (*(void (**)(char *, uint64_t))(v162 + 8))(v118, v166);
  swift_release();
  return swift_release();
}

uint64_t sub_1003BD6B4(int a1, void (*a2)(os_log_t, uint64_t), uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD), uint64_t a5, void (*a6)(_QWORD, _QWORD), char a7, char a8, void (*a9)(_QWORD, _QWORD, _QWORD), uint64_t a10, __int128 a11, void (*a12)(uint64_t))
{
  void (*v14)(uint64_t);
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  unint64_t v21;
  int v22;
  NSObject *v23;
  uint64_t v24;
  unsigned __int8 v27;
  char v28;
  _QWORD *v29;
  uint64_t v35;

  v14 = a12;
  v15 = dispatch_group_create();
  v16 = sub_10001A9A8(&qword_1010FA248);
  v17 = swift_allocObject(v16, 28, 7);
  *(_DWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 16) = _swiftEmptyArrayStorage;
  v18 = *(_QWORD *)(a5 + 16);
  if (v18)
  {
    v28 = a7 & 1;
    swift_bridgeObjectRetain(a5);
    v19 = (unint64_t *)(a5 + 48);
    v27 = a8 & 1;
    do
    {
      v20 = (void (*)(_QWORD, _QWORD, _QWORD))*(v19 - 1);
      v21 = *v19;
      v22 = *((unsigned __int8 *)v19 - 16);
      swift_bridgeObjectRetain(*v19);
      dispatch_group_enter(v15);
      swift_bridgeObjectRetain(v21);
      swift_retain();
      v23 = v15;
      sub_1003BC3D8(a1, a2, a3, a4, _swiftEmptyDictionarySingleton, v22, (uint64_t)v20, v21, 0, a6, v28, v27, a9, a10, a11, v29, v22, v20, v21,
        v17,
        v23);

      swift_release();
      swift_bridgeObjectRelease_n(v21, 2);
      v19 += 3;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
    v14 = a12;
  }
  OS_dispatch_group.wait()();
  if (v14)
  {
    v24 = sub_10001A9A8(&qword_1010FA250);
    OSAllocatedUnfairLock.stateSnapshot.getter(&v35, v17, v24);
    v14(v35);
    swift_bridgeObjectRelease();

    return swift_release();
  }
  else
  {

    return swift_release();
  }
}

uint64_t sub_1003BD8C8(int a1, void (*a2)(os_log_t, uint64_t), uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD), _QWORD *a5, int a6, uint64_t a7, void (*a8)(_QWORD, _QWORD, _QWORD), char a9, NSObject *a10, char a11, unsigned __int8 a12, void (*a13)(_QWORD, _QWORD, _QWORD), uint64_t a14, __int128 a15, uint64_t a16, void *a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void ***v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  char v61;
  uint64_t v62;
  void (*v63)(_QWORD, _QWORD, _QWORD);
  uint64_t v64;
  uint64_t v65;
  uint64_t inited;
  uint64_t v67;
  NSURL *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void (*v79)(_QWORD, _QWORD, _QWORD);
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(_QWORD, _QWORD, _QWORD);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, char *, uint64_t);
  void *v106;
  uint64_t v107;
  char *v108;
  void (*v109)(os_log_t, uint64_t);
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  void (**v117)(uint64_t);
  void (*v118)(uint64_t);
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  void (*v123)(char *, uint64_t);
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v133;
  int v134;
  uint64_t v135;
  void (*v136)(_QWORD, _QWORD, _QWORD);
  int v137;
  NSObject *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  NSURL *v145;
  char *v146;
  _QWORD *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  NSURL *v153;
  uint64_t v154;
  void (*v155)(_QWORD, _QWORD, _QWORD);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(_QWORD, _QWORD, _QWORD);
  void (*v168)(char *, char *, uint64_t);
  uint64_t v169;
  char v170[8];
  void **aBlock;
  uint64_t v172;
  uint64_t (*v173)(uint64_t);
  void *v174;
  uint64_t (*v175)();
  uint64_t v176;
  char v177[8];
  uint64_t v178;

  v167 = a8;
  v166 = a7;
  LODWORD(v165) = a6;
  v147 = a5;
  v155 = a4;
  v154 = a3;
  v153 = (NSURL *)a2;
  LODWORD(v152) = a1;
  v150 = type metadata accessor for DispatchQoS.QoSClass(0);
  v149 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v148 = (char *)&v133 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for DispatchTime(0);
  v140 = *(_QWORD *)(v142 - 8);
  v19 = __chkstk_darwin(v142);
  v139 = (char *)&v133 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v141 = (char *)&v133 - v21;
  v159 = type metadata accessor for DispatchWorkItemFlags(0);
  v158 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v161 = (char *)&v133 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = type metadata accessor for DispatchQoS(0);
  v157 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v160 = (char *)&v133 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8(&qword_1010ED860);
  v25 = __chkstk_darwin(v24);
  v146 = (char *)&v133 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v145 = (NSURL *)((char *)&v133 - v27);
  v156 = type metadata accessor for UUID(0);
  v164 = *(_QWORD *)(v156 - 8);
  v28 = *(_QWORD *)(v164 + 64);
  v29 = __chkstk_darwin(v156);
  v151 = (char *)&v133 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v29);
  v144 = (char *)&v133 - v31;
  v32 = __chkstk_darwin(v30);
  v143 = (uint64_t)&v133 - v33;
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v133 - v35;
  __chkstk_darwin(v34);
  v163 = (char *)&v133 - v37;
  v168 = (void (*)(char *, char *, uint64_t))sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v168);
  v39 = (void ***)((char *)&v133 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = __chkstk_darwin(v40);
  v44 = (char *)&v133 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v46 = (char *)&v133 - v45;
  v47 = swift_allocObject(&unk_101072D98, 32, 7);
  *(_QWORD *)(v47 + 16) = a17;
  *(_QWORD *)(v47 + 24) = a18;
  v169 = v47;
  v48 = a17;
  v49 = swift_retain();
  static SystemInfo.lockState.getter(v49);
  (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v44, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v40);
  v50 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v51 = dispatch thunk of static Equatable.== infix(_:_:)(v46, v44, v40, v50);
  v52 = *(void (**)(char *, uint64_t))(v41 + 8);
  v52(v44, v40);
  v53 = ((uint64_t (*)(char *, uint64_t))v52)(v46, v40);
  if ((v51 & 1) != 0)
  {
    v54 = static os_log_type_t.error.getter(v53);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, qword_1011B7D30, "Attempt to send message before first unlock!", 44, 2, _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0);
    v56 = v55;
    v178 = 5;
    v57 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v58 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v178, v57, v56, v58);
    *v39 = aBlock;
    swift_storeEnumTagMultiPayload(v39, v168, 1);
    v59 = (uint64_t)v39;
    v60 = v48;
LABEL_11:
    sub_1003AB764(v59, v60, a18, "Successfully distributed keys: %@", 33);
    sub_100004048((uint64_t)v39, &qword_1010F4868);
    return swift_release();
  }
  v138 = v48;
  v61 = v165;
  v62 = v166;
  v63 = v167;
  v64 = sub_10038D0CC(v165, v166, (uint64_t)v167);
  if ((v64 & 1) == 0)
  {
    v70 = static os_log_type_t.error.getter(v64);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v71 = qword_1011B7D30;
    v72 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v73 = swift_allocObject(v72, 72, 7);
    *(_OWORD *)(v73 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v73 + 56) = &type metadata for String;
    *(_QWORD *)(v73 + 64) = sub_10001AA00();
    *(_QWORD *)(v73 + 32) = v62;
    *(_QWORD *)(v73 + 40) = v63;
    *(_QWORD *)&v74 = swift_bridgeObjectRetain(v63).n128_u64[0];
    os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v71, "Not sending since %@ has no IDS registered devices", 50, 2, v73, v74);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    v76 = v75;
    v178 = 12;
    v77 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v78 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v178, v77, v76, v78);
    *v39 = aBlock;
    swift_storeEnumTagMultiPayload(v39, v168, 1);
    v59 = (uint64_t)v39;
    v60 = v138;
    goto LABEL_11;
  }
  v135 = a14;
  v136 = a13;
  v137 = a12;
  v138 = a10;
  v134 = a11 & 1;
  v168 = *(void (**)(char *, char *, uint64_t))(a16 + 24);
  v65 = sub_10001A9A8(&qword_1010EE2B0);
  if ((a9 & 1) != 0)
  {
    v133 = a16;
    inited = swift_initStackObject(v65, v170);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_BYTE *)(inited + 32) = v61;
    *(_QWORD *)(inited + 40) = v62;
    *(_QWORD *)(inited + 48) = v63;
    v67 = v164;
    v68 = v145;
    v69 = v156;
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v164 + 56))(v145, 1, 1, v156);
    swift_bridgeObjectRetain(v63);
    sub_10038F3FC(v152, v153, v154, v155, v147, inited, v68, v138, (uint64_t)v36, v134, v137 & 1, v136, v135, a15);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v68, &qword_1010ED860);
    v168 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
    v168(v163, v36, v69);
    v86 = v69;
  }
  else
  {
    v79 = v63;
    v80 = swift_initStackObject(v65, v177);
    *(_OWORD *)(v80 + 16) = xmmword_100E22B00;
    *(_BYTE *)(v80 + 32) = v61;
    *(_QWORD *)(v80 + 40) = v62;
    *(_QWORD *)(v80 + 48) = v79;
    v81 = v164;
    v82 = v146;
    v86 = v156;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v164 + 56))(v146, 1, 1, v156);
    swift_bridgeObjectRetain(v79);
    v83 = (uint64_t)v144;
    UUID.init()(v84);
    v85 = v143;
    sub_10037DC5C(v152, (void (*)(os_log_t, uint64_t))v153, v154, (unint64_t)v155, v83, v80, (uint64_t (*)(_QWORD, _QWORD, _QWORD))v82, (uint64_t)v138, v143, v134, v137 & 1, (uint64_t)v136, v135, a15, &qword_1010F9EF8, &qword_1010F9F00, &qword_1010F9F18, (uint64_t)&type metadata for BeaconSharingMessageType, &unk_101071A10,
      (uint64_t)&unk_1010F9F60);
    v133 = a16;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v83, v86);
    sub_100004048((uint64_t)v82, &qword_1010ED860);
    v168 = *(void (**)(char *, char *, uint64_t))(v81 + 32);
    v168(v163, (char *)v85, v86);
  }
  v87 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  swift_allocObject(v87, *(unsigned int *)(v87 + 48), *(unsigned __int16 *)(v87 + 52));
  v88 = (void (*)(_QWORD, _QWORD, _QWORD))Future.init()();
  v89 = static os_log_type_t.default.getter(v88);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v90 = qword_1011B7D30;
  v91 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v92 = swift_allocObject(v91, 72, 7);
  *(_OWORD *)(v92 + 16) = xmmword_100E22B00;
  v93 = v163;
  v94 = UUID.uuidString.getter(v92);
  v96 = v95;
  *(_QWORD *)(v92 + 56) = &type metadata for String;
  *(_QWORD *)(v92 + 64) = sub_10001AA00();
  *(_QWORD *)(v92 + 32) = v94;
  *(_QWORD *)(v92 + 40) = v96;
  os_log(_:dso:log:_:_:)(v89, &_mh_execute_header, v90, "Setting %@ to pending", 21, 2, v92);
  swift_bridgeObjectRelease();
  v97 = v133;
  v156 = *(_QWORD *)(v133 + 168);
  v98 = v164;
  v167 = *(void (**)(_QWORD, _QWORD, _QWORD))(v164 + 16);
  v99 = v151;
  v167(v151, v93, v86);
  v100 = *(unsigned __int8 *)(v98 + 80);
  v154 = ((v100 + 24) & ~v100) + v28;
  v101 = (v100 + 24) & ~v100;
  v166 = v101;
  v165 = v100 | 7;
  v102 = (v154 + 7) & 0xFFFFFFFFFFFFFFF8;
  v103 = swift_allocObject(&unk_101072E10, v102 + 8, v100 | 7);
  *(_QWORD *)(v103 + 16) = v97;
  v104 = v103 + v101;
  v105 = (void (*)(uint64_t, char *, uint64_t))v168;
  v168((char *)v104, v99, v86);
  *(_QWORD *)(v103 + v102) = v88;
  v175 = sub_1003BB468;
  v176 = v103;
  aBlock = _NSConcreteStackBlock;
  v172 = 1107296256;
  v173 = sub_100016FB8;
  v174 = &unk_101072E28;
  v106 = _Block_copy(&aBlock);
  swift_retain();
  v107 = swift_retain();
  v155 = v88;
  v108 = v160;
  static DispatchQoS.unspecified.getter(v107);
  v178 = (uint64_t)_swiftEmptyArrayStorage;
  v109 = (void (*)(os_log_t, uint64_t))sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v153 = (NSURL *)v109;
  v110 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v150 = v110;
  v152 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v111 = v161;
  v112 = v110;
  v113 = v159;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v178, v112, v152, v159, v109);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v108, v111, v106);
  _Block_release(v106);
  v158 = *(_QWORD *)(v158 + 8);
  ((void (*)(char *, uint64_t))v158)(v111, v113);
  v157 = *(_QWORD *)(v157 + 8);
  ((void (*)(char *, uint64_t))v157)(v108, v162);
  swift_release();
  v114 = v151;
  v115 = v163;
  v167(v151, v163, v86);
  v116 = swift_allocObject(&unk_101072E60, v102 + 16, v165);
  *(_QWORD *)(v116 + 16) = v97;
  v105(v116 + v166, v114, v86);
  v117 = (void (**)(uint64_t))(v116 + v102);
  v118 = (void (*)(uint64_t))v169;
  *v117 = sub_1003D10F4;
  v117[1] = v118;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1003BB470, v116);
  swift_release();
  swift_release();
  v119 = swift_allocObject(&unk_101072E88, 32, 7);
  *(_QWORD *)(v119 + 16) = sub_1003D10F4;
  *(_QWORD *)(v119 + 24) = v118;
  swift_retain();
  Future.addFailure(block:)(sub_1003D9B84, v119);
  swift_release();
  v120 = swift_release();
  v121 = v139;
  static DispatchTime.now()(v120);
  v122 = v141;
  + infix(_:_:)(v121, 360.0);
  v123 = *(void (**)(char *, uint64_t))(v140 + 8);
  v124 = v142;
  v123(v121, v142);
  v125 = v115;
  v126 = v86;
  v167(v114, v125, v86);
  v127 = swift_allocObject(&unk_101072EB0, v154, v165);
  *(_QWORD *)(v127 + 16) = v97;
  v168((char *)(v127 + v166), v114, v86);
  v175 = sub_1003BB4B0;
  v176 = v127;
  aBlock = _NSConcreteStackBlock;
  v172 = 1107296256;
  v173 = sub_100016FB8;
  v174 = &unk_101072EC8;
  v128 = _Block_copy(&aBlock);
  v129 = swift_retain();
  v130 = v160;
  static DispatchQoS.unspecified.getter(v129);
  v178 = (uint64_t)_swiftEmptyArrayStorage;
  v131 = v161;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v178, v150, v152, v113, v153);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v122, v130, v131, v128);
  _Block_release(v128);
  swift_release();
  ((void (*)(char *, uint64_t))v158)(v131, v113);
  ((void (*)(char *, uint64_t))v157)(v130, v162);
  v123(v122, v124);
  (*(void (**)(char *, uint64_t))(v164 + 8))(v163, v126);
  swift_release();
  return swift_release();
}

void sub_1003BEBA0(uint64_t a1)
{
  sub_1003D79EC(a1, (uint64_t *)&unk_1011100E0, &qword_1010F2158, SPBeacon_ptr);
}

uint64_t sub_1003BEBBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  void *v76;
  uint64_t result;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t aBlock;
  _QWORD v89[5];
  id v90[2];
  char v91;

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v2);
  v84 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010FA000);
  v5 = *(_QWORD *)(v4 - 8);
  v86 = v4;
  v87 = v5;
  __chkstk_darwin(v4);
  v85 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010FA008);
  v8 = *(_QWORD *)(v7 - 8);
  v78 = v7;
  v79 = v8;
  __chkstk_darwin(v7);
  v10 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010FA010);
  v12 = *(_QWORD *)(v11 - 8);
  v80 = v11;
  v81 = v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010FA018);
  v16 = *(_QWORD *)(v15 - 8);
  v82 = v15;
  v83 = v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD **)(v0 + 24);
  v20 = v19[15];
  v21 = v19[16];
  v19[15] = sub_1003CFB38;
  v19[16] = v1;
  swift_retain();
  sub_10001D8A8(v20, v21);
  v22 = v19[17];
  v23 = v19[18];
  v19[17] = sub_1003CFB70;
  v19[18] = v1;
  swift_retain();
  sub_10001D8A8(v22, v23);
  v24 = swift_allocObject(&unk_101072050, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_1003CFBA0;
  *(_QWORD *)(v24 + 24) = v1;
  v25 = v19[19];
  v26 = v19[20];
  v19[19] = sub_1003CFBCC;
  v19[20] = v24;
  swift_retain();
  sub_10001D8A8(v25, v26);
  v27 = v19[21];
  v28 = v19[22];
  v19[21] = sub_1003CFBD0;
  v19[22] = v1;
  swift_retain();
  sub_10001D8A8(v27, v28);
  v29 = v19[23];
  v30 = v19[24];
  v19[23] = sub_1003CFBD8;
  v19[24] = v1;
  swift_retain();
  sub_10001D8A8(v29, v30);
  v31 = v19[27];
  v32 = v19[28];
  v19[27] = sub_1003CFBE0;
  v19[28] = v1;
  swift_retain();
  sub_10001D8A8(v31, v32);
  v33 = v19[29];
  v34 = v19[30];
  v19[29] = sub_1003CFBE4;
  v19[30] = v1;
  swift_retain();
  sub_10001D8A8(v33, v34);
  v35 = *(_QWORD **)(v1 + 32);
  v36 = v35[10];
  v37 = v35[11];
  v35[10] = sub_1003CFBE8;
  v35[11] = v1;
  swift_retain();
  sub_10001D8A8(v36, v37);
  v38 = v35[12];
  v39 = v35[13];
  v35[12] = sub_1003CFC20;
  v35[13] = v1;
  swift_retain();
  sub_10001D8A8(v38, v39);
  v40 = swift_allocObject(&unk_101072078, 32, 7);
  *(_QWORD *)(v40 + 16) = sub_1003CFC50;
  *(_QWORD *)(v40 + 24) = v1;
  v41 = v35[14];
  v42 = v35[15];
  v35[14] = sub_1003CFBCC;
  v35[15] = v40;
  swift_retain();
  sub_10001D8A8(v41, v42);
  v43 = v35[20];
  v44 = v35[21];
  v35[20] = sub_1003CFCC0;
  v35[21] = v1;
  swift_retain();
  sub_10001D8A8(v43, v44);
  aBlock = *(_QWORD *)(v1 + 424);
  swift_retain();
  v45 = sub_10001A9A8((uint64_t *)&unk_101107EA0);
  v46 = sub_10001A9A8(&qword_1010FAB40);
  v47 = sub_1000193A4(&qword_1010ECF20, (uint64_t *)&unk_101107EA0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_1003866E4, 0, v45, v46, v47);
  swift_release();
  sub_10001A9A8(&qword_1010FA020);
  v48 = v78;
  Publishers.Map.map<A>(_:)(sub_100386844, 0, v78);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v10, v48);
  v49 = sub_1000193A4(&qword_1010FA028, &qword_1010FA010, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v50 = sub_100365CCC(&qword_1010FA030, &qword_1010FA020, (uint64_t (*)(void))sub_1003CFCC8, (const char *)&protocol conformance descriptor for <A> [A]);
  v51 = v80;
  Publisher<>.removeDuplicates()(v80, v49, v50);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v14, v51);
  v52 = swift_allocObject(&unk_1010720A0, 24, 7);
  swift_weakInit(v52 + 16, v1);
  v53 = sub_1000193A4(&qword_1010FA040, &qword_1010FA018, (const char *)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v54 = v82;
  v55 = Publisher<>.sink(receiveValue:)(sub_1003CFD0C, v52, v82, v53);
  swift_release();
  (*(void (**)(char *, uint64_t))(v83 + 8))(v18, v54);
  *(_QWORD *)(v1 + 208) = v55;
  swift_release();
  aBlock = sub_1007FE340();
  v90[0] = *(id *)(v1 + 200);
  v56 = v90[0];
  v57 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v58 = (uint64_t)v84;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v84, 1, 1, v57);
  v59 = v56;
  v60 = sub_10001A9A8(&qword_1010FA048);
  v61 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v62 = sub_1000193A4(&qword_1010FA050, &qword_1010FA048, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v63 = sub_10001AC90((unint64_t *)&qword_10111C120, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr, (const char *)&protocol conformance descriptor for OS_dispatch_queue);
  v64 = v85;
  Publisher.receive<A>(on:options:)(v90, v58, v60, v61, v62, v63);
  sub_100004048(v58, &qword_1010EECC8);

  swift_release();
  v65 = swift_allocObject(&unk_1010720A0, 24, 7);
  swift_weakInit(v65 + 16, v1);
  v66 = sub_1000193A4(&qword_1010FA058, &qword_1010FA000, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v67 = v86;
  v68 = Publisher<>.sink(receiveValue:)(sub_1003CFD14, v65, v86, v66);
  swift_release();
  (*(void (**)(char *, uint64_t))(v87 + 8))(v64, v67);
  *(_QWORD *)(v1 + 216) = v68;
  swift_release();
  swift_weakInit(&aBlock, 0);
  swift_weakInit(v89, 0);
  swift_weakAssign(&aBlock, v1);
  swift_weakAssign(v89, 0);
  sub_1003CFD1C((uint64_t)&aBlock, (uint64_t)v90);
  v91 = 0;
  swift_beginAccess(v1 + 64, &aBlock, 33, 0);
  sub_100004084((uint64_t)v90, v1 + 64, &qword_1010FA060);
  swift_endAccess(&aBlock);
  v69 = *(void **)(v1 + 168);
  v70 = swift_weakInit(&aBlock, 0);
  v71 = swift_weakAssign(v70, v1);
  v89[0] = v69;
  sub_1003CFD58(v71, (uint64_t)v90);
  swift_beginAccess(v1 + 88, &aBlock, 33, 0);
  v72 = v69;
  sub_100004084((uint64_t)v90, v1 + 88, &qword_1010FA068);
  swift_endAccess(&aBlock);
  v73 = *(_QWORD *)(v1 + 352);
  *(_QWORD *)(v73 + 24) = &off_101071598;
  swift_unknownObjectWeakAssign(v73 + 16, v1);
  sub_10037D980((uint64_t)sub_1003CFF54);
  sub_1003B07B0();
  v74 = *(NSObject **)(v1 + 56);
  v75 = swift_allocObject(&unk_1010720C8, 32, 7);
  *(_QWORD *)(v75 + 16) = sub_1003D9B90;
  *(_QWORD *)(v75 + 24) = v1;
  v89[3] = sub_10001D850;
  v89[4] = v75;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v89[0] = 1107296256;
  v89[1] = sub_10001D8B8;
  v89[2] = &unk_1010720E0;
  v76 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v74, v76);
  _Block_release(v76);
  LOBYTE(v74) = swift_isEscapingClosureAtFileLocation(v75, "", 113, 290, 30, 1);
  swift_release();
  result = swift_release();
  if ((v74 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1003BF428(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  void (*v62)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  char v69[24];
  char v70[24];
  uint64_t v71;
  char v72;
  char v73[24];
  char v74[32];

  v68 = a2;
  LODWORD(v67) = a1;
  v4 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v4);
  v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = dispatch_group_create();
  v8 = swift_allocObject(&unk_101072960, 32, 7);
  *(_QWORD *)(v8 + 16) = 0;
  v66 = v8 + 16;
  *(_QWORD *)(v8 + 24) = 0;
  v9 = swift_allocObject(&unk_101071BF0, 24, 7);
  *(_QWORD *)(v9 + 16) = 0;
  v10 = (_QWORD *)(v9 + 16);
  dispatch_group_enter(v7);
  v11 = (_QWORD *)swift_allocObject(&unk_101072988, 40, 7);
  v11[2] = v8;
  v11[3] = v9;
  v11[4] = v7;
  v12 = type metadata accessor for TaskPriority(0);
  v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(v6, 1, 1, v12);
  v14 = swift_allocObject(&unk_1010729B0, 72, 7);
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = sub_1003D0A64;
  *(_QWORD *)(v14 + 40) = v11;
  *(_BYTE *)(v14 + 48) = (_BYTE)v67;
  *(_QWORD *)(v14 + 56) = v68;
  *(_QWORD *)(v14 + 64) = a3;
  swift_retain();
  v68 = v9;
  v15 = (uint64_t)v6;
  swift_retain();
  v16 = v7;
  swift_retain();
  swift_bridgeObjectRetain(a3);
  sub_100691AC0(v15, (uint64_t)&unk_1010FA120, v14);
  swift_release();
  swift_release();
  OS_dispatch_group.wait()();
  swift_beginAccess(v10, v74, 0, 0);
  v17 = *v10;
  if (!*v10)
  {
    v62 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13;
    v63 = v12;
    swift_beginAccess(v66, v73, 0, 0);
    v26 = *(_QWORD *)(v8 + 24);
    if (v26)
    {
      v59 = v15;
      v64 = v8;
      v60 = *(_QWORD *)(v8 + 16);
      v65 = v26;
      swift_bridgeObjectRetain(v26);
      v27 = dispatch_group_create();
      v28 = swift_allocObject(&unk_1010729D8, 24, 7);
      *(_QWORD *)(v28 + 16) = 0;
      v29 = swift_allocObject(&unk_101071BF0, 24, 7);
      *(_QWORD *)(v29 + 16) = 0;
      v30 = (uint64_t *)(v29 + 16);
      dispatch_group_enter(v27);
      v31 = (_QWORD *)swift_allocObject(&unk_101072A00, 40, 7);
      v31[2] = v28;
      v31[3] = v29;
      v31[4] = v27;
      v32 = qword_1010E9968;
      swift_retain_n(v28, 2);
      swift_retain_n(v29, 2);
      v67 = v27;
      if (v32 != -1)
        swift_once(&qword_1010E9968, sub_1000FC8C8);
      v33 = qword_1010EEF78;
      v34 = sub_10001A9A8(&qword_1010FA128);
      v35 = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1003D0B58, 0, v33, &type metadata for () + 1, v34);
      v36 = v71;
      v66 = v28;
      v61 = (uint64_t *)(v28 + 16);
      if (v71)
      {
        v37 = static os_log_type_t.debug.getter(v35);
        if (qword_1010EA278 != -1)
          swift_once(&qword_1010EA278, sub_100B5DB4C);
        os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, qword_1011B7D58, "Using cached family correlationIdentifiers", 42, 2, _swiftEmptyArrayStorage);
        swift_beginAccess(v28 + 16, &v71, 1, 0);
        *(_QWORD *)(v28 + 16) = v36;
        swift_bridgeObjectRetain(v36);
        swift_bridgeObjectRelease();
        v38 = v67;
        dispatch_group_leave(v67);

        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        v39 = qword_1010EEF78;
        v40 = sub_10001A9A8(&qword_1010FA130);
        OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1003D0B6C, 0, v39, &type metadata for () + 1, v40);
        v41 = v71;
        if ((v72 & 1) != 0)
        {
          v42 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
          swift_willThrowTypedImpl(&v71, v42, &protocol self-conformance witness table for Error);
          v71 = v41;
          swift_errorRetain(v41);
          swift_errorRetain(v41);
          swift_willThrowTypedImpl(&v71, v42, &protocol self-conformance witness table for Error);
          swift_beginAccess(v30, &v71, 1, 0);
          v43 = *(_QWORD *)(v29 + 16);
          *(_QWORD *)(v29 + 16) = v41;
          swift_errorRelease(v43);
          v38 = v67;
          dispatch_group_leave(v67);
          sub_1000FE214(v41, 1);
          sub_1000FE214(v41, 1);

        }
        else
        {
          sub_100379BCC(v71);
          v45 = v44;
          sub_1000FE214(v41, 0);
          v46 = sub_100CA8058(v45);
          swift_bridgeObjectRelease();
          v47 = v59;
          v62(v59, 1, 1, v63);
          v48 = (_QWORD *)swift_allocObject(&unk_101072A28, 56, 7);
          v48[2] = 0;
          v48[3] = 0;
          v48[4] = v46;
          v48[5] = sub_1003D0B48;
          v48[6] = v31;
          swift_retain();
          sub_100691AC0(v47, (uint64_t)&unk_1010FA138, (uint64_t)v48);
          v38 = v67;

          swift_release();
        }
        swift_release();
        swift_release();
        swift_release();
      }
      OS_dispatch_group.wait()();
      swift_beginAccess(v30, v70, 0, 0);
      v49 = *v30;
      if (*v30)
      {
        v63 = v29;
        swift_errorRetain(v49);
        v50 = swift_bridgeObjectRelease();
        v51 = static os_log_type_t.error.getter(v50);
        if (qword_1010EA250 != -1)
          swift_once(&qword_1010EA250, sub_100B5D964);
        v52 = qword_1011B7D30;
        v53 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v54 = swift_allocObject(v53, 72, 7);
        *(_OWORD *)(v54 + 16) = xmmword_100E22B00;
        v55 = _convertErrorToNSError(_:)(v49);
        *(_QWORD *)(v54 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010F3060, NSError_ptr);
        *(_QWORD *)(v54 + 64) = sub_10001AC90((unint64_t *)&qword_1010EEFA8, (unint64_t *)&qword_1010F3060, NSError_ptr, (const char *)&protocol conformance descriptor for NSObject);
        *(_QWORD *)(v54 + 32) = v55;
        os_log(_:dso:log:_:_:)(v51, &_mh_execute_header, v52, "Error getting membersCorrelationIdentifiers: %@.", 48, 2, v54);

        swift_errorRelease(v49);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        goto LABEL_5;
      }
      v56 = v61;
      swift_beginAccess(v61, v69, 0, 0);
      v57 = *v56;
      if (*v56)
      {
        swift_bridgeObjectRetain(*v56);
        v24 = sub_100A06590(v60, v65, v57);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v24 & 1;
      }

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();

      swift_release();
    }
    else
    {

      swift_release();
    }
    swift_release();
    goto LABEL_6;
  }
  v18 = swift_errorRetain(*v10);
  v19 = static os_log_type_t.error.getter(v18);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v20 = qword_1011B7D30;
  v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v22 = swift_allocObject(v21, 72, 7);
  *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
  v23 = _convertErrorToNSError(_:)(v17);
  *(_QWORD *)(v22 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010F3060, NSError_ptr);
  *(_QWORD *)(v22 + 64) = sub_10001AC90((unint64_t *)&qword_1010EEFA8, (unint64_t *)&qword_1010F3060, NSError_ptr, (const char *)&protocol conformance descriptor for NSObject);
  *(_QWORD *)(v22 + 32) = v23;
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Error getting correlationIdentifier: %@.", 40, 2, v22);

  swift_errorRelease(v17);
  swift_release();
  swift_release();
LABEL_5:
  swift_bridgeObjectRelease();
LABEL_6:
  v24 = 0;
  return v24 & 1;
}

uint64_t sub_1003BFD0C(int a1, void (*a2)(os_log_t, uint64_t), uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD), _QWORD *a5, int a6, uint64_t a7, uint64_t a8, char a9, void (*a10)(_QWORD, _QWORD), char a11, char a12, void (*a13)(char *, char *, uint64_t), uint64_t a14, __int128 a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, void (*a19)(char *, char *, uint64_t), void (*a20)(_QWORD, _QWORD))
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void ***v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t inited;
  uint64_t v68;
  NSURL *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  void *v108;
  const void *v109;
  uint64_t v110;
  char *v111;
  void (*v112)(_QWORD, _QWORD, _QWORD);
  void (*v113)(os_log_t, uint64_t);
  uint64_t v114;
  char *v115;
  void (*v116)(os_log_t, uint64_t);
  uint64_t v117;
  char *v118;
  uint64_t v119;
  void (**v120)(uint64_t);
  void (*v121)(uint64_t);
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  char *v132;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  NSURL *v143;
  char *v144;
  _QWORD *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  NSURL *v151;
  uint64_t v152;
  void (*v153)(_QWORD, _QWORD, _QWORD);
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  void (*v161)(char *, uint64_t);
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(uint64_t, char *, uint64_t);
  uint64_t v167;
  void (*v168)(char *, char *, uint64_t);
  void (*v169)(_QWORD, _QWORD);
  uint64_t v170;
  char v171[8];
  void **aBlock;
  uint64_t v173;
  uint64_t (*v174)(uint64_t);
  void *v175;
  uint64_t (*v176)();
  uint64_t v177;
  char v178[8];
  uint64_t v179;

  v163 = a8;
  v162 = a7;
  LODWORD(v161) = a6;
  v145 = a5;
  v153 = a4;
  v152 = a3;
  v151 = (NSURL *)a2;
  LODWORD(v150) = a1;
  v148 = type metadata accessor for DispatchQoS.QoSClass(0);
  v147 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v146 = (char *)&v134 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for DispatchTime(0);
  v137 = *(_QWORD *)(v139 - 8);
  v21 = __chkstk_darwin(v139);
  v136 = (char *)&v134 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v138 = (char *)&v134 - v23;
  v157 = type metadata accessor for DispatchWorkItemFlags(0);
  v155 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157);
  v156 = (char *)&v134 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = type metadata accessor for DispatchQoS(0);
  v154 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v158 = (char *)&v134 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10001A9A8(&qword_1010ED860);
  v27 = __chkstk_darwin(v26);
  v144 = (char *)&v134 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v143 = (NSURL *)((char *)&v134 - v29);
  v164 = type metadata accessor for UUID(0);
  v165 = *(_QWORD *)(v164 - 8);
  v30 = *(_QWORD *)(v165 + 64);
  v31 = __chkstk_darwin(v164);
  v149 = (char *)&v134 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v31);
  v142 = (char *)&v134 - v33;
  v34 = __chkstk_darwin(v32);
  v141 = (uint64_t)&v134 - v35;
  v36 = __chkstk_darwin(v34);
  v140 = (uint64_t)&v134 - v37;
  __chkstk_darwin(v36);
  v160 = (char *)&v134 - v38;
  v166 = (void (*)(uint64_t, char *, uint64_t))sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v166);
  v40 = (void ***)((char *)&v134 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = __chkstk_darwin(v41);
  v45 = (char *)&v134 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v47 = (char *)&v134 - v46;
  v48 = swift_allocObject(&unk_101074080, 48, 7);
  *(_QWORD *)(v48 + 16) = a17;
  LODWORD(v167) = a18;
  *(_BYTE *)(v48 + 24) = a18;
  v168 = a19;
  *(_QWORD *)(v48 + 32) = a19;
  *(_QWORD *)(v48 + 40) = a20;
  v170 = v48;
  swift_bridgeObjectRetain(a17);
  v169 = a20;
  swift_bridgeObjectRetain(a20);
  static SystemInfo.lockState.getter(v49);
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v45, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v41);
  v50 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v51 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v45, v41, v50);
  v52 = *(void (**)(char *, uint64_t))(v42 + 8);
  v52(v45, v41);
  v53 = ((uint64_t (*)(char *, uint64_t))v52)(v47, v41);
  if ((v51 & 1) != 0)
  {
    v54 = static os_log_type_t.error.getter(v53);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, qword_1011B7D30, "Attempt to send message before first unlock!", 44, 2, _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0);
    v56 = v55;
    v179 = 5;
    v57 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v58 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v59 = v57;
    v60 = v56;
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v179, v59, v60, v58);
    *v40 = aBlock;
    swift_storeEnumTagMultiPayload(v40, v166, 1);
    sub_1003AC21C((uint64_t)v40, a17, v167, (uint64_t)v168, (unint64_t)v169);
    sub_100004048((uint64_t)v40, &qword_1010F4868);
    return swift_release();
  }
  v61 = a16;
  v62 = (char)v161;
  v63 = v162;
  v64 = v163;
  v65 = sub_10038D0CC(v161, v162, v163);
  if ((v65 & 1) == 0)
  {
    v72 = static os_log_type_t.error.getter(v65);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v73 = qword_1011B7D30;
    v74 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v75 = swift_allocObject(v74, 72, 7);
    *(_OWORD *)(v75 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v75 + 56) = &type metadata for String;
    *(_QWORD *)(v75 + 64) = sub_10001AA00();
    *(_QWORD *)(v75 + 32) = v63;
    *(_QWORD *)(v75 + 40) = v64;
    *(_QWORD *)&v76 = swift_bridgeObjectRetain(v64).n128_u64[0];
    os_log(_:dso:log:_:_:)(v72, &_mh_execute_header, v73, "Not sending since %@ has no IDS registered devices", 50, 2, v75, v76);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    v78 = v77;
    v179 = 12;
    v79 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v58 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v59 = v79;
    v60 = v78;
    goto LABEL_11;
  }
  v167 = a14;
  v168 = a13;
  v169 = a10;
  LODWORD(v166) = a11 & 1;
  v66 = sub_10001A9A8(&qword_1010EE2B0);
  if ((a9 & 1) != 0)
  {
    v135 = a16;
    inited = swift_initStackObject(v66, v171);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_BYTE *)(inited + 32) = v62;
    *(_QWORD *)(inited + 40) = v63;
    *(_QWORD *)(inited + 48) = v64;
    v68 = v165;
    v69 = v143;
    v70 = v164;
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v165 + 56))(v143, 1, 1, v164);
    swift_bridgeObjectRetain(v64);
    v71 = v140;
    sub_10038F3FC(v150, v151, v152, v153, v145, inited, v69, v169, v140, (char)v166, a12 & 1, (void (*)(_QWORD, _QWORD, _QWORD))v168, v167, a15);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v69, &qword_1010ED860);
    v88 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 32);
    v88(v160, v71, v70);
    v61 = v135;
  }
  else
  {
    v80 = swift_initStackObject(v66, v178);
    v81 = v62;
    v82 = v80;
    *(_OWORD *)(v80 + 16) = xmmword_100E22B00;
    *(_BYTE *)(v80 + 32) = v81;
    *(_QWORD *)(v80 + 40) = v63;
    *(_QWORD *)(v80 + 48) = v64;
    v83 = v144;
    v84 = v164;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v165 + 56))(v144, 1, 1, v164);
    swift_bridgeObjectRetain(v64);
    v85 = (uint64_t)v142;
    UUID.init()(v86);
    v87 = v141;
    sub_10037DC5C(v150, (void (*)(os_log_t, uint64_t))v151, v152, (unint64_t)v153, v85, v82, (uint64_t (*)(_QWORD, _QWORD, _QWORD))v83, (uint64_t)v169, v141, (char)v166, a12 & 1, (uint64_t)v168, v167, a15, &qword_1010F9EF8, &qword_1010F9F00, &qword_1010F9F18, (uint64_t)&type metadata for BeaconSharingMessageType, &unk_101071A10,
      (uint64_t)&unk_1010F9F60);
    swift_bridgeObjectRelease();
    v89 = v165;
    (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v85, v84);
    sub_100004048((uint64_t)v83, &qword_1010ED860);
    v90 = v84;
    v88 = *(void (**)(char *, uint64_t, uint64_t))(v89 + 32);
    v88(v160, v87, v90);
  }
  v91 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  swift_allocObject(v91, *(unsigned int *)(v91 + 48), *(unsigned __int16 *)(v91 + 52));
  v92 = Future.init()();
  v93 = static os_log_type_t.default.getter(v92);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v94 = qword_1011B7D30;
  v95 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v96 = swift_allocObject(v95, 72, 7);
  *(_OWORD *)(v96 + 16) = xmmword_100E22B00;
  v97 = v160;
  v98 = UUID.uuidString.getter(v96);
  v100 = v99;
  *(_QWORD *)(v96 + 56) = &type metadata for String;
  *(_QWORD *)(v96 + 64) = sub_10001AA00();
  *(_QWORD *)(v96 + 32) = v98;
  *(_QWORD *)(v96 + 40) = v100;
  os_log(_:dso:log:_:_:)(v93, &_mh_execute_header, v94, "Setting %@ to pending", 21, 2, v96);
  swift_bridgeObjectRelease();
  v169 = *(void (**)(_QWORD, _QWORD))(v61 + 168);
  v101 = v165;
  v168 = *(void (**)(char *, char *, uint64_t))(v165 + 16);
  v102 = v149;
  v103 = v164;
  v168(v149, v97, v164);
  v104 = *(unsigned __int8 *)(v101 + 80);
  v162 = ((v104 + 24) & ~v104) + v30;
  v105 = (v104 + 24) & ~v104;
  v167 = v104 | 7;
  v106 = (v162 + 7) & 0xFFFFFFFFFFFFFFF8;
  v107 = swift_allocObject(&unk_1010740F8, v106 + 8, v104 | 7);
  *(_QWORD *)(v107 + 16) = v61;
  v150 = v105;
  v88((char *)(v107 + v105), (uint64_t)v102, v103);
  *(_QWORD *)(v107 + v106) = v92;
  v176 = sub_1003BB468;
  v177 = v107;
  aBlock = _NSConcreteStackBlock;
  v173 = 1107296256;
  v174 = sub_100016FB8;
  v175 = &unk_101074110;
  v108 = _Block_copy(&aBlock);
  v166 = (void (*)(uint64_t, char *, uint64_t))v88;
  v109 = v108;
  swift_retain();
  v110 = swift_retain();
  v163 = v92;
  v111 = v158;
  static DispatchQoS.unspecified.getter(v110);
  v179 = (uint64_t)_swiftEmptyArrayStorage;
  v112 = (void (*)(_QWORD, _QWORD, _QWORD))sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v153 = v112;
  v113 = (void (*)(os_log_t, uint64_t))sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v151 = (NSURL *)v113;
  v152 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v114 = v61;
  v115 = v156;
  v116 = v113;
  v117 = v157;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v179, v116, v152, v157, v112);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v111, v115, v109);
  _Block_release(v109);
  v161 = *(void (**)(char *, uint64_t))(v155 + 8);
  v161(v115, v117);
  v155 = *(_QWORD *)(v154 + 8);
  ((void (*)(char *, uint64_t))v155)(v111, v159);
  swift_release();
  v118 = v149;
  v168(v149, v160, v103);
  v119 = swift_allocObject(&unk_101074148, v106 + 16, v167);
  v135 = v114;
  *(_QWORD *)(v119 + 16) = v114;
  v166(v119 + v105, v118, v103);
  v120 = (void (**)(uint64_t))(v119 + v106);
  v121 = (void (*)(uint64_t))v170;
  *v120 = sub_1003D8294;
  v120[1] = v121;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1003BB470, v119);
  swift_release();
  swift_release();
  v122 = swift_allocObject(&unk_101074170, 32, 7);
  *(_QWORD *)(v122 + 16) = sub_1003D8294;
  *(_QWORD *)(v122 + 24) = v121;
  swift_retain();
  Future.addFailure(block:)(sub_1003D9B84, v122);
  swift_release();
  v123 = swift_release();
  v124 = v136;
  static DispatchTime.now()(v123);
  v125 = v138;
  + infix(_:_:)(v124, 360.0);
  v154 = *(_QWORD *)(v137 + 8);
  v126 = v139;
  ((void (*)(char *, uint64_t))v154)(v124, v139);
  v127 = v160;
  v128 = v164;
  v168(v118, v160, v164);
  v129 = swift_allocObject(&unk_101074198, v162, v167);
  *(_QWORD *)(v129 + 16) = v135;
  v166(v129 + v150, v118, v128);
  v176 = sub_1003BB4B0;
  v177 = v129;
  aBlock = _NSConcreteStackBlock;
  v173 = 1107296256;
  v174 = sub_100016FB8;
  v175 = &unk_1010741B0;
  v130 = _Block_copy(&aBlock);
  v131 = swift_retain();
  v132 = v158;
  static DispatchQoS.unspecified.getter(v131);
  v179 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v179, v151, v152, v117, v153);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v125, v132, v115, v130);
  _Block_release(v130);
  swift_release();
  v161(v115, v117);
  ((void (*)(char *, uint64_t))v155)(v132, v159);
  ((void (*)(char *, uint64_t))v154)(v125, v126);
  (*(void (**)(char *, uint64_t))(v165 + 8))(v127, v164);
  swift_release();
  return swift_release();
}

unint64_t sub_1003C0FD4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  _OWORD v56[2];
  __int128 v57;
  _QWORD *v58;
  char v59[88];

  v53 = a5;
  v54 = a6;
  v50 = a4;
  v52 = a3;
  v51 = a2;
  v6 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v6);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v49 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  inited = swift_initStackObject(v12, v59);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionWantsClientAcknowledgementKey);
  *(_QWORD *)(inited + 40) = v14;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = 1;
  v15 = sub_1006B8B10(inited);
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionLocalDeliveryKey);
  v18 = v17;
  v58 = &type metadata for Bool;
  LOBYTE(v57) = 1;
  sub_10010F90C(&v57, v56);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
  v55 = v15;
  sub_10010A7E4(v56, v16, v18, isUniquelyReferenced_nonNull_native);
  v20 = v55;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionUUIDKey);
  v23 = v22;
  v24 = UUID.data.getter(v21);
  v58 = &type metadata for Data;
  *(_QWORD *)&v57 = v24;
  *((_QWORD *)&v57 + 1) = v25;
  sub_10010F90C(&v57, v56);
  v26 = swift_isUniquelyReferenced_nonNull_native(v20);
  v55 = v20;
  sub_10010A7E4(v56, v21, v23, v26);
  v27 = v55;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v51 & 1) != 0)
  {
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionExpectsPeerResponseKey);
    v30 = v29;
    v58 = &type metadata for Bool;
    LOBYTE(v57) = 1;
    sub_10010F90C(&v57, v56);
    v31 = swift_isUniquelyReferenced_nonNull_native(v27);
    v55 = v27;
    sub_10010A7E4(v56, v28, v30, v31);
    v27 = v55;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_10000F9B8(v52, (uint64_t)v8, &qword_1010ED860);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v49, v8, v9);
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionPeerResponseIdentifierKey);
    v35 = v34;
    v36 = UUID.uuidString.getter(v33);
    v58 = &type metadata for String;
    *(_QWORD *)&v57 = v36;
    *((_QWORD *)&v57 + 1) = v37;
    sub_10010F90C(&v57, v56);
    v38 = swift_isUniquelyReferenced_nonNull_native(v27);
    v55 = v27;
    sub_10010A7E4(v56, v33, v35, v38);
    v27 = v55;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v32, v9);
    if ((v53 & 1) != 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  sub_100004048((uint64_t)v8, &qword_1010ED860);
  if ((v53 & 1) == 0)
  {
LABEL_7:
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionTimeoutKey);
    v41 = v40;
    v58 = &type metadata for Double;
    *(_QWORD *)&v57 = v50;
    sub_10010F90C(&v57, v56);
    v42 = swift_isUniquelyReferenced_nonNull_native(v27);
    v55 = v27;
    sub_10010A7E4(v56, v39, v41, v42);
    v27 = v55;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_8:
  if ((v54 & 1) != 0)
  {
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionFireAndForgetKey);
    v45 = v44;
    v58 = &type metadata for Bool;
    LOBYTE(v57) = 1;
    sub_10010F90C(&v57, v56);
    v46 = swift_isUniquelyReferenced_nonNull_native(v27);
    v55 = v27;
    sub_10010A7E4(v56, v43, v45, v46);
    v27 = v55;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v27;
}

uint64_t sub_1003C141C(int a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5, void (*a6)(unint64_t, char *, uint64_t), uint64_t a7, int a8, uint64_t a9, uint64_t a10, char a11, char a12, void (*a13)(_QWORD, _QWORD), uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void (*v50)(_QWORD, _QWORD, _QWORD);
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  void (*v67)(_QWORD, _QWORD);
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  void (*v78)(unint64_t, char *, uint64_t);
  uint64_t v79;
  void *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  dispatch_queue_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void (*v118)(_QWORD, _QWORD);
  void (*v119)(unint64_t, char *, uint64_t);
  uint64_t v120;
  void (*v121)(_QWORD, _QWORD, _QWORD);
  _QWORD *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  void **aBlock;
  uint64_t v127;
  uint64_t (*v128)(uint64_t);
  void *v129;
  uint64_t (*v130)();
  uint64_t v131;

  LODWORD(v116) = a8;
  v119 = a6;
  v120 = a7;
  LODWORD(v118) = a5;
  v117 = a4;
  v114 = a2;
  v115 = a3;
  v113 = a1;
  v102 = type metadata accessor for DispatchQoS.QoSClass(0);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v100 = (char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = (void (*)(_QWORD, _QWORD, _QWORD))sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v121);
  v122 = (uint64_t *)((char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v111 = type metadata accessor for DispatchWorkItemFlags(0);
  v109 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v108 = (char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for DispatchQoS(0);
  v107 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v106 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for DispatchTime(0);
  v96 = *(_QWORD *)(v104 - 8);
  v19 = __chkstk_darwin(v104);
  v95 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v97 = (char *)&v94 - v21;
  v99 = type metadata accessor for UUID(0);
  v105 = *(_QWORD *)(v99 - 8);
  v22 = *(_QWORD *)(v105 + 64);
  v23 = __chkstk_darwin(v99);
  v98 = (char *)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v23);
  v112 = (char *)&v94 - v25;
  __chkstk_darwin(v24);
  v124 = (char *)&v94 - v26;
  v27 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = __chkstk_darwin(v27);
  v31 = (char *)&v94 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v33 = (char *)&v94 - v32;
  v34 = type metadata accessor for DispatchPredicate(0);
  v35 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v37 = (uint64_t *)((char *)&v94 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  v123 = v14;
  v38 = *(void **)(v14 + 168);
  *v37 = v38;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v35 + 104))(v37, enum case for DispatchPredicate.notOnQueue(_:), v34);
  v39 = v38;
  v40 = _dispatchPreconditionTest(_:)(v37);
  v41 = (*(uint64_t (**)(_QWORD *, uint64_t))(v35 + 8))(v37, v34);
  if ((v40 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v103 = v39;
  v40 = (uint64_t)a13;
  static SystemInfo.lockState.getter(v41);
  (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v31, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v27);
  v42 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v43 = dispatch thunk of static Equatable.== infix(_:_:)(v33, v31, v27, v42);
  v44 = *(void (**)(char *, uint64_t))(v28 + 8);
  v44(v31, v27);
  v45 = ((uint64_t (*)(char *, uint64_t))v44)(v33, v27);
  if ((v43 & 1) != 0)
  {
    v37 = (_QWORD *)static os_log_type_t.error.getter(v45);
    if (qword_1010EA250 == -1)
    {
LABEL_4:
      os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, qword_1011B7D30, "Attempt to send local message before first unlock!", 50, 2, _swiftEmptyArrayStorage);
      type metadata accessor for SPOwnerSessionError(0);
      v47 = v46;
      v125 = 5;
      v48 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v49 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
      _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v125, v48, v47, v49);
      v50 = v121;
      v51 = (uint64_t)v122;
      *v122 = aBlock;
      swift_storeEnumTagMultiPayload(v51, v50, 1);
      ((void (*)(uint64_t))v40)(v51);
      return sub_100004048(v51, &qword_1010F4868);
    }
LABEL_8:
    swift_once(&qword_1010EA250, sub_100B5D964);
    goto LABEL_4;
  }
  v53 = v123;
  v54 = v112;
  sub_100391DFC(v113, v114, v115, v117, (uint64_t)v119, v120, v116 & 1, v112, a9, a10, a11 & 1, a12 & 1);
  v55 = v105;
  v56 = *(void (**)(char *, char *, uint64_t))(v105 + 32);
  v57 = v124;
  v118 = a13;
  v58 = v99;
  v56(v124, v54, v99);
  v119 = (void (*)(unint64_t, char *, uint64_t))v56;
  v59 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
  v60 = Future.init()();
  v121 = *(void (**)(_QWORD, _QWORD, _QWORD))(v55 + 16);
  v122 = (_QWORD *)v60;
  v61 = v98;
  v121(v98, v57, v58);
  v62 = *(unsigned __int8 *)(v55 + 80);
  v63 = (v62 + 24) & ~v62;
  v120 = v62 | 7;
  v116 = v63 + v22;
  v64 = (v63 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v65 = swift_allocObject(&unk_101072230, v64 + 16, v62 | 7);
  *(_QWORD *)(v65 + 16) = v53;
  v117 = v63;
  v56((char *)(v65 + v63), v61, v58);
  v66 = (_QWORD *)(v65 + v64);
  v67 = v118;
  *v66 = v118;
  v66[1] = a14;
  swift_retain();
  swift_retain();
  v68 = v122;
  Future.addSuccess(block:)(sub_1003D0340, v65);
  swift_release();
  swift_release();
  v69 = swift_allocObject(&unk_101072258, 32, 7);
  *(_QWORD *)(v69 + 16) = v67;
  *(_QWORD *)(v69 + 24) = a14;
  swift_retain();
  v70 = v68;
  Future.addFailure(block:)(sub_1003D034C, v69);
  swift_release();
  swift_release();
  v121(v61, v124, v58);
  v71 = (v62 + 16) & ~v62;
  v72 = (v22 + v71 + 7) & 0xFFFFFFFFFFFFFFF8;
  v73 = (v72 + 15) & 0xFFFFFFFFFFFFFFF8;
  v74 = swift_allocObject(&unk_101072280, v73 + 8, v120);
  v75 = v61;
  v76 = v61;
  v77 = v58;
  v78 = v119;
  v119(v74 + v71, v76, v58);
  *(_QWORD *)(v74 + v72) = v53;
  *(_QWORD *)(v74 + v73) = v70;
  v79 = swift_allocObject(&unk_1010722A8, 32, 7);
  *(_QWORD *)(v79 + 16) = sub_1003D0380;
  *(_QWORD *)(v79 + 24) = v74;
  v130 = sub_10005CBA4;
  v131 = v79;
  aBlock = _NSConcreteStackBlock;
  v127 = 1107296256;
  v128 = sub_10001D8B8;
  v129 = &unk_1010722C0;
  v80 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v103, v80);
  _Block_release(v80);
  LOBYTE(v80) = swift_isEscapingClosureAtFileLocation(v79, "", 113, 1144, 30, 1);
  result = swift_release();
  if ((v80 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v81 = v95;
    static DispatchTime.now()(result);
    v82 = v97;
    + infix(_:_:)(v81, 360.0);
    v118 = *(void (**)(_QWORD, _QWORD))(v96 + 8);
    v118(v81, v104);
    v83 = v77;
    v121(v75, v124, v77);
    v84 = swift_allocObject(&unk_1010722F8, v116, v120);
    *(_QWORD *)(v84 + 16) = v53;
    v78(v84 + v117, v75, v77);
    v130 = sub_1003D0398;
    v131 = v84;
    aBlock = _NSConcreteStackBlock;
    v127 = 1107296256;
    v128 = sub_100016FB8;
    v129 = &unk_101072310;
    v85 = _Block_copy(&aBlock);
    v86 = swift_retain();
    v87 = v106;
    static DispatchQoS.unspecified.getter(v86);
    v125 = (uint64_t)_swiftEmptyArrayStorage;
    v88 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v89 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v90 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v91 = v108;
    v92 = v89;
    v93 = v111;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v125, v92, v90, v111, v88);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v82, v87, v91, v85);
    _Block_release(v85);
    swift_release();
    (*(void (**)(char *, uint64_t))(v109 + 8))(v91, v93);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v87, v110);
    v118(v82, v104);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v124, v83);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1003C20C0(int a1, void (*a2)(char *, uint64_t), uint64_t a3, unint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, char a11, char a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void ***v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void (*v63)(uint64_t, char *, uint64_t);
  uint64_t (**v64)(uint64_t);
  uint64_t v65;
  char *v66;
  void (*v67)(uint64_t, char *, uint64_t);
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  dispatch_queue_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  int v106;
  void (*v107)(char *, uint64_t);
  uint64_t v108;
  void (*v109)(char *, char *, uint64_t);
  unint64_t v110;
  void (*v111)(char *, char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  void **aBlock;
  uint64_t v118;
  uint64_t (*v119)(uint64_t);
  void *v120;
  uint64_t (*v121)();
  uint64_t v122;

  LODWORD(v109) = a8;
  v112 = a6;
  v113 = a7;
  LODWORD(v111) = a5;
  v110 = a4;
  v107 = a2;
  v108 = a3;
  v106 = a1;
  v95 = type metadata accessor for DispatchQoS.QoSClass(0);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v93 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for DispatchWorkItemFlags(0);
  v101 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v100 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for DispatchQoS(0);
  v99 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v98 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for DispatchTime(0);
  v88 = *(_QWORD *)(v90 - 8);
  v16 = __chkstk_darwin(v90);
  v87 = (char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v89 = (char *)&v87 - v18;
  v92 = type metadata accessor for UUID(0);
  v97 = *(_QWORD *)(v92 - 8);
  v19 = *(_QWORD *)(v97 + 64);
  v20 = __chkstk_darwin(v92);
  v91 = (char *)&v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v20);
  v104 = (char *)&v87 - v22;
  __chkstk_darwin(v21);
  v115 = (char *)&v87 - v23;
  v105 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v105);
  v25 = (void ***)((char *)&v87 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v87 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v32 = (char *)&v87 - v31;
  v33 = type metadata accessor for DispatchPredicate(0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v36 = (char **)((char *)&v87 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v114 = a13;
  v37 = *(void **)(a13 + 168);
  *v36 = v37;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v34 + 104))(v36, enum case for DispatchPredicate.notOnQueue(_:), v33);
  v96 = v37;
  LOBYTE(v37) = _dispatchPreconditionTest(_:)(v36);
  v38 = (*(uint64_t (**)(_QWORD *, uint64_t))(v34 + 8))(v36, v33);
  if ((v37 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  static SystemInfo.lockState.getter(v38);
  (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v30, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v26);
  v39 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v40 = dispatch thunk of static Equatable.== infix(_:_:)(v32, v30, v26, v39);
  v41 = *(void (**)(char *, uint64_t))(v27 + 8);
  v41(v30, v26);
  v42 = ((uint64_t (*)(char *, uint64_t))v41)(v32, v26);
  if ((v40 & 1) != 0)
  {
    v36 = (_QWORD *)static os_log_type_t.error.getter(v42);
    if (qword_1010EA250 == -1)
    {
LABEL_4:
      os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, qword_1011B7D30, "Attempt to send local message before first unlock!", 50, 2, _swiftEmptyArrayStorage);
      type metadata accessor for SPOwnerSessionError(0);
      v44 = v43;
      v116 = 5;
      v45 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v46 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
      _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v116, v45, v44, v46);
      *v25 = aBlock;
      swift_storeEnumTagMultiPayload(v25, v105, 1);
      sub_100CBACAC((uint64_t)v25);
      return sub_100004048((uint64_t)v25, &qword_1010F4868);
    }
LABEL_8:
    swift_once(&qword_1010EA250, sub_100B5D964);
    goto LABEL_4;
  }
  v48 = v114;
  v49 = v104;
  sub_100391DFC(v106, (uint64_t)v107, v108, v110, v112, v113, v109 & 1, v104, a9, a10, a11 & 1, a12 & 1);
  v50 = v97;
  v111 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
  v51 = v115;
  v52 = v92;
  v111(v115, v49, v92);
  v53 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  v113 = Future.init()();
  v54 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  v55 = v91;
  v54(v91, v51, v52);
  v56 = *(unsigned __int8 *)(v50 + 80);
  v57 = (v56 + 24) & ~v56;
  v112 = v56 | 7;
  v108 = v57 + v19;
  v58 = (v57 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v59 = swift_allocObject(&unk_1010725C8, v58 + 16, v56 | 7);
  *(_QWORD *)(v59 + 16) = v48;
  v110 = v57;
  v60 = v59 + v57;
  v61 = v55;
  v62 = v55;
  v63 = (void (*)(uint64_t, char *, uint64_t))v111;
  v111((char *)v60, v62, v52);
  v64 = (uint64_t (**)(uint64_t))(v59 + v58);
  *v64 = sub_100CBACAC;
  v64[1] = 0;
  swift_retain();
  Future.addSuccess(block:)(sub_1003D0340, v59);
  swift_release();
  swift_release();
  v65 = swift_allocObject(&unk_1010725F0, 32, 7);
  *(_QWORD *)(v65 + 16) = sub_100CBACAC;
  *(_QWORD *)(v65 + 24) = 0;
  Future.addFailure(block:)(sub_1003D9B88, v65);
  swift_release();
  swift_release();
  v66 = v51;
  v67 = v63;
  v109 = v54;
  v54(v61, v66, v52);
  v68 = (v56 + 16) & ~v56;
  v69 = (v19 + v68 + 7) & 0xFFFFFFFFFFFFFFF8;
  v70 = (v69 + 15) & 0xFFFFFFFFFFFFFFF8;
  v71 = swift_allocObject(&unk_101072618, v70 + 8, v112);
  v67(v71 + v68, v61, v52);
  *(_QWORD *)(v71 + v69) = v48;
  *(_QWORD *)(v71 + v70) = v113;
  v72 = swift_allocObject(&unk_101072640, 32, 7);
  *(_QWORD *)(v72 + 16) = sub_1003D0380;
  *(_QWORD *)(v72 + 24) = v71;
  v121 = sub_10005CBA4;
  v122 = v72;
  aBlock = _NSConcreteStackBlock;
  v118 = 1107296256;
  v119 = sub_10001D8B8;
  v120 = &unk_101072658;
  v73 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v96, v73);
  _Block_release(v73);
  LOBYTE(v73) = swift_isEscapingClosureAtFileLocation(v72, "", 113, 1144, 30, 1);
  result = swift_release();
  if ((v73 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v74 = v87;
    static DispatchTime.now()(result);
    v75 = v89;
    + infix(_:_:)(v74, 360.0);
    v107 = *(void (**)(char *, uint64_t))(v88 + 8);
    v76 = v90;
    v107(v74, v90);
    v109(v61, v115, v52);
    v77 = swift_allocObject(&unk_101072690, v108, v112);
    *(_QWORD *)(v77 + 16) = v48;
    v67(v77 + v110, v61, v52);
    v121 = sub_1003D0398;
    v122 = v77;
    aBlock = _NSConcreteStackBlock;
    v118 = 1107296256;
    v119 = sub_100016FB8;
    v120 = &unk_1010726A8;
    v78 = _Block_copy(&aBlock);
    v79 = swift_retain();
    v80 = v98;
    static DispatchQoS.unspecified.getter(v79);
    v116 = (uint64_t)_swiftEmptyArrayStorage;
    v81 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v82 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v83 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v84 = v100;
    v85 = v82;
    v86 = v103;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v116, v85, v83, v103, v81);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v75, v80, v84, v78);
    _Block_release(v78);
    swift_release();
    (*(void (**)(char *, uint64_t))(v101 + 8))(v84, v86);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v80, v102);
    v107(v75, v76);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v115, v52);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1003C2D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t (**v77)(uint64_t);
  uint64_t (*v78)(uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  char v115;
  void (*v116)(uint64_t, uint64_t);
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;

  v142 = a2;
  v134 = sub_10001A9A8((uint64_t *)&unk_101108180);
  __chkstk_darwin(v134);
  v137 = (uint64_t)&v122 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ShareInstruction(0);
  v123 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v125 = (uint64_t)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = v10;
  __chkstk_darwin(v9);
  v122 = (uint64_t)&v122 - v11;
  v133 = type metadata accessor for Date(0);
  v131 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v132 = (char *)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010FA070);
  __chkstk_darwin(v13);
  v15 = (char *)&v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for ShareRecord(0);
  *(_QWORD *)&v141 = *(_QWORD *)(v143 - 8);
  v16 = __chkstk_darwin(v143);
  v128 = (char *)&v122 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v127 = (uint64_t)&v122 - v19;
  __chkstk_darwin(v18);
  v129 = (char *)&v122 - v20;
  v21 = swift_allocObject(&unk_101073810, 32, 7);
  v135 = a3;
  v136 = a4;
  *(_QWORD *)(v21 + 16) = a3;
  *(_QWORD *)(v21 + 24) = a4;
  v139 = v21;
  v22 = swift_retain();
  LODWORD(v140) = static os_log_type_t.default.getter(v22);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v23 = qword_1011B7D30;
  v144 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v24 = swift_allocObject(v144, 112, 7);
  v126 = xmmword_100E22B10;
  *(_OWORD *)(v24 + 16) = xmmword_100E22B10;
  v25 = a1 + *(int *)(v8 + 24);
  v26 = type metadata accessor for OwnedBeaconRecord(0);
  v27 = v25 + *(int *)(v26 + 20);
  v28 = UUID.uuidString.getter(v26);
  v30 = v29;
  *(_QWORD *)(v24 + 56) = &type metadata for String;
  v31 = sub_10001AA00();
  *(_QWORD *)(v24 + 64) = v31;
  *(_QWORD *)(v24 + 32) = v28;
  *(_QWORD *)(v24 + 40) = v30;
  v32 = *(int *)(v8 + 32);
  v130 = v8;
  v138 = a1;
  v33 = a1 + v32;
  v34 = v27;
  v35 = UUID.uuidString.getter(v31);
  *(_QWORD *)(v24 + 96) = &type metadata for String;
  *(_QWORD *)(v24 + 104) = v31;
  v145 = v31;
  *(_QWORD *)(v24 + 72) = v35;
  *(_QWORD *)(v24 + 80) = v36;
  os_log(_:dso:log:_:_:)(v140, &_mh_execute_header, v23, "1) Send Family Share for beacon: %@, shareIdentifier: %@", 56, 2, v24);
  swift_bridgeObjectRelease();
  v37 = v142;
  sub_10038D5D0(v33, (uint64_t)v15);
  v38 = (int *)v143;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v15, 1, v143) != 1)
  {
    v140 = v33;
    v52 = v129;
    v79 = sub_1000126EC((uint64_t)v15, (uint64_t)v129, type metadata accessor for ShareRecord);
    v80 = static os_log_type_t.default.getter(v79);
    v81 = qword_1011B7D30;
    v82 = v144;
    v83 = swift_allocObject(v144, 72, 7);
    v141 = xmmword_100E22B00;
    *(_OWORD *)(v83 + 16) = xmmword_100E22B00;
    v84 = v127;
    sub_10005972C((uint64_t)v52, v127, type metadata accessor for ShareRecord);
    v85 = String.init<A>(describing:)(v84, v38);
    v86 = v145;
    *(_QWORD *)(v83 + 56) = &type metadata for String;
    *(_QWORD *)(v83 + 64) = v86;
    *(_QWORD *)(v83 + 32) = v85;
    *(_QWORD *)(v83 + 40) = v87;
    os_log(_:dso:log:_:_:)(v80, &_mh_execute_header, v81, "Considering existing ShareRecord %@", 35, 2, v83);
    v88 = swift_bridgeObjectRelease();
    v89 = (uint64_t *)&v52[v38[10]];
    v91 = *v89;
    v90 = v89[1];
    v92 = HIBYTE(v90) & 0xF;
    if ((v90 & 0x2000000000000000) == 0)
      v92 = v91 & 0xFFFFFFFFFFFFLL;
    if (v92)
    {
      v93 = static os_log_type_t.default.getter(v88);
      v94 = qword_1011B7D30;
      v95 = swift_allocObject(v82, 72, 7);
      *(_OWORD *)(v95 + 16) = v141;
      v96 = v145;
      *(_QWORD *)(v95 + 56) = &type metadata for String;
      *(_QWORD *)(v95 + 64) = v96;
      *(_QWORD *)(v95 + 32) = v91;
      *(_QWORD *)(v95 + 40) = v90;
      *(_QWORD *)&v97 = swift_bridgeObjectRetain(v90).n128_u64[0];
      os_log(_:dso:log:_:_:)(v93, &_mh_execute_header, v94, "Ignoring request to share. ShareRecord already accepted (correlationIdentifier: %@)", 83, 2, v95, v97);
LABEL_17:
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
    v105 = *(_QWORD *)(v37 + 408);
    sub_100C5016C((uint64_t)&v52[v38[7]], 0);
    v107 = v106;
    v108 = v138;
    v109 = v122;
    v110 = sub_10005972C(v138, v122, type metadata accessor for ShareInstruction);
    if ((v107 & 1) != 0)
    {
      __chkstk_darwin(v110);
      *(&v122 - 4) = v105;
      *((_BYTE *)&v122 - 24) = 0;
      *(&v122 - 2) = v111;
      v112 = (uint64_t)v132;
      v113 = v133;
      OS_dispatch_queue.sync<A>(execute:)(sub_1003D9B50, &v122 - 6, v133);
      sub_100C5016C(v112, 0);
      v115 = v114;
      v116 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
      v116(v112, v113);
      v117 = sub_1000126B0(v109, type metadata accessor for ShareInstruction);
      v118 = v145;
      if ((v115 & 1) != 0)
      {
        static Date.trustedNow.getter(v112);
        v119 = v140;
        sub_100C4FA44(v140, v112, 0);
        v116(v112, v113);
        sub_100C4FEA0(v119, 1);
        sub_10038D694(v108, v37);
LABEL_18:
        v120 = v137;
        sub_10005972C((uint64_t)v52, v137, type metadata accessor for ShareRecord);
        swift_storeEnumTagMultiPayload(v120, v134, 0);
        sub_10038D2E0(v120, v135, v136);
        sub_100004048(v120, (uint64_t *)&unk_101108180);
        goto LABEL_19;
      }
    }
    else
    {
      v117 = sub_1000126B0(v109, type metadata accessor for ShareInstruction);
      v118 = v145;
    }
    v98 = static os_log_type_t.default.getter(v117);
    v99 = qword_1011B7D30;
    v100 = swift_allocObject(v144, 72, 7);
    *(_OWORD *)(v100 + 16) = v141;
    v101 = UUID.uuidString.getter(v100);
    *(_QWORD *)(v100 + 56) = &type metadata for String;
    *(_QWORD *)(v100 + 64) = v118;
LABEL_16:
    *(_QWORD *)(v100 + 32) = v101;
    *(_QWORD *)(v100 + 40) = v102;
    os_log(_:dso:log:_:_:)(v98, &_mh_execute_header, v99, "Ignoring request to share. ShareRecord last attempted recently. (shareIdentifier: %@)", 85, 2, v100, v103);
    goto LABEL_17;
  }
  v39 = sub_100004048((uint64_t)v15, &qword_1010FA070);
  v40 = static os_log_type_t.default.getter(v39);
  v41 = qword_1011B7D30;
  v42 = swift_allocObject(v144, 112, 7);
  *(_OWORD *)(v42 + 16) = v126;
  v43 = UUID.uuidString.getter(v42);
  v44 = v145;
  *(_QWORD *)(v42 + 56) = &type metadata for String;
  *(_QWORD *)(v42 + 64) = v44;
  *(_QWORD *)(v42 + 32) = v43;
  *(_QWORD *)(v42 + 40) = v45;
  v46 = UUID.uuidString.getter(v43);
  *(_QWORD *)(v42 + 96) = &type metadata for String;
  *(_QWORD *)(v42 + 104) = v44;
  *(_QWORD *)(v42 + 72) = v46;
  *(_QWORD *)(v42 + 80) = v47;
  os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Did not find existing ShareRecord for beacon: %@, shareIdentifier: %@", 69, 2, v42);
  swift_bridgeObjectRelease();
  v48 = *(_QWORD *)(v37 + 144);
  v49 = *(_QWORD *)(v48 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v50 = type metadata accessor for BeaconKeyManager(0);
  *(_QWORD *)&v141 = v48;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v48, v49, &type metadata for () + 1, v50);
  v51 = sub_100DD8B78(v34);
  swift_release();
  v52 = v128;
  v53 = &v128[v38[5]];
  v54 = type metadata accessor for UUID(0);
  v55 = v37;
  v56 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 16);
  v56(v53, v33, v54);
  v56(&v52[v38[6]], v34, v54);
  v57 = v55;
  static Date.trustedNow.getter((uint64_t)&v52[v38[7]]);
  v58 = v130;
  v59 = v138;
  sub_10000F9B8(v138 + *(int *)(v130 + 36), (uint64_t)&v52[v38[8]], (uint64_t *)&unk_1010EA690);
  v60 = v59 + *(int *)(v58 + 28);
  v61 = *(_BYTE *)v60;
  *(_OWORD *)v52 = xmmword_100E22FC0;
  v62 = &v52[v38[9]];
  *v62 = v61;
  v63 = *(_QWORD *)(v60 + 16);
  *((_QWORD *)v62 + 1) = *(_QWORD *)(v60 + 8);
  *((_QWORD *)v62 + 2) = v63;
  v64 = &v52[v38[10]];
  *(_QWORD *)v64 = 0;
  *((_QWORD *)v64 + 1) = 0xE000000000000000;
  *(_QWORD *)&v52[v38[11]] = v51;
  v52[v38[12]] = 1;
  v65 = *(_QWORD *)(v55 + 408);
  v66 = __chkstk_darwin(v63);
  *(&v122 - 4) = v65;
  *((_BYTE *)&v122 - 24) = 0;
  *(&v122 - 2) = v33;
  swift_bridgeObjectRetain(v66);
  v67 = (uint64_t)v132;
  v68 = v133;
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D9B50, &v122 - 6, v133);
  sub_100C5016C(v67, 0);
  LOBYTE(v59) = v69;
  v70 = *(uint64_t (**)(uint64_t, uint64_t))(v131 + 8);
  v71 = v70(v67, v68);
  if ((v59 & 1) == 0)
  {
    v98 = static os_log_type_t.default.getter(v71);
    v99 = qword_1011B7D30;
    v100 = swift_allocObject(v144, 72, 7);
    *(_OWORD *)(v100 + 16) = xmmword_100E22B00;
    v101 = UUID.uuidString.getter(v100);
    v104 = v145;
    *(_QWORD *)(v100 + 56) = &type metadata for String;
    *(_QWORD *)(v100 + 64) = v104;
    goto LABEL_16;
  }
  static Date.trustedNow.getter(v67);
  sub_100C4FA44(v33, v67, 0);
  v70(v67, v68);
  sub_100C4FEA0(v33, 1);
  v72 = v125;
  sub_10005972C(v138, v125, type metadata accessor for ShareInstruction);
  v73 = *(unsigned __int8 *)(v123 + 80);
  v74 = (v73 + 24) & ~v73;
  v75 = (v124 + v74 + 7) & 0xFFFFFFFFFFFFFFF8;
  v76 = swift_allocObject(&unk_101073838, v75 + 16, v73 | 7);
  *(_QWORD *)(v76 + 16) = v57;
  sub_1000126EC(v72, v76 + v74, type metadata accessor for ShareInstruction);
  v77 = (uint64_t (**)(uint64_t))(v76 + v75);
  v78 = (uint64_t (*)(uint64_t))v139;
  *v77 = sub_1003D6800;
  v77[1] = v78;
  swift_retain();
  swift_retain();
  sub_100805D38((uint64_t)v52, 0, (void (*)(char *))sub_1003D6B3C, v76);
  swift_release();
LABEL_19:
  sub_1000126B0((uint64_t)v52, type metadata accessor for ShareRecord);
  return swift_release();
}

uint64_t sub_1003C38C4(int a1, void (*a2)(os_log_t, uint64_t), uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD), _QWORD *a5, int a6, uint64_t a7, uint64_t a8, char a9, void (*a10)(char *, uint64_t, uint64_t), char a11, unsigned __int8 a12, void (*a13)(_QWORD, _QWORD, _QWORD), uint64_t a14, __int128 a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, void (*a19)(char *, char *, uint64_t), void (*a20)(char *, uint64_t, uint64_t))
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void ***v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t inited;
  uint64_t v69;
  NSURL *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, char *, uint64_t);
  void *v110;
  const void *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  void (*v115)(os_log_t, uint64_t);
  char *v116;
  void (*v117)(os_log_t, uint64_t);
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t (**v122)(uint64_t);
  uint64_t (*v123)(uint64_t);
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  char *v133;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  NSURL *v145;
  char *v146;
  _QWORD *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  NSURL *v152;
  uint64_t v153;
  void (*v154)(_QWORD, _QWORD, _QWORD);
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(char *, uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(_QWORD, _QWORD, _QWORD);
  uint64_t v168;
  void (*v169)(char *, char *, uint64_t);
  void (*v170)(char *, uint64_t, uint64_t);
  uint64_t v171;
  char v172[8];
  void **aBlock;
  uint64_t v174;
  uint64_t (*v175)(uint64_t);
  void *v176;
  uint64_t (*v177)();
  uint64_t v178;
  char v179[8];
  uint64_t v180;

  v165 = a8;
  v164 = a7;
  LODWORD(v163) = a6;
  v147 = a5;
  v154 = a4;
  v153 = a3;
  v152 = (NSURL *)a2;
  LODWORD(v151) = a1;
  v150 = type metadata accessor for DispatchQoS.QoSClass(0);
  v149 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v148 = (char *)&v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = type metadata accessor for DispatchTime(0);
  v139 = *(_QWORD *)(v141 - 8);
  v21 = __chkstk_darwin(v141);
  v138 = (char *)&v135 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v140 = (char *)&v135 - v23;
  v158 = type metadata accessor for DispatchWorkItemFlags(0);
  v156 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v157 = (char *)&v135 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = type metadata accessor for DispatchQoS(0);
  v155 = *(_QWORD *)(v161 - 8);
  __chkstk_darwin(v161);
  v160 = (char *)&v135 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10001A9A8(&qword_1010ED860);
  v27 = __chkstk_darwin(v26);
  v146 = (char *)&v135 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v145 = (NSURL *)((char *)&v135 - v29);
  v166 = type metadata accessor for UUID(0);
  v162 = *(_QWORD *)(v166 - 8);
  v30 = *(_QWORD *)(v162 + 64);
  v31 = __chkstk_darwin(v166);
  v137 = (char *)&v135 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v31);
  v144 = (char *)&v135 - v33;
  v34 = __chkstk_darwin(v32);
  v143 = (uint64_t)&v135 - v35;
  v36 = __chkstk_darwin(v34);
  v142 = (uint64_t)&v135 - v37;
  __chkstk_darwin(v36);
  v159 = (char *)&v135 - v38;
  v167 = (void (*)(_QWORD, _QWORD, _QWORD))sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v167);
  v40 = (void ***)((char *)&v135 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = __chkstk_darwin(v41);
  v45 = (char *)&v135 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v47 = (char *)&v135 - v46;
  v48 = swift_allocObject(&unk_1010743A0, 48, 7);
  *(_QWORD *)(v48 + 16) = a17;
  LODWORD(v168) = a18;
  *(_BYTE *)(v48 + 24) = a18;
  v169 = a19;
  *(_QWORD *)(v48 + 32) = a19;
  *(_QWORD *)(v48 + 40) = a20;
  v171 = v48;
  swift_retain();
  v170 = a20;
  swift_bridgeObjectRetain(a20);
  static SystemInfo.lockState.getter(v49);
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v45, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v41);
  v50 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v51 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v45, v41, v50);
  v52 = *(void (**)(char *, uint64_t))(v42 + 8);
  v52(v45, v41);
  v53 = ((uint64_t (*)(char *, uint64_t))v52)(v47, v41);
  if ((v51 & 1) != 0)
  {
    v54 = static os_log_type_t.error.getter(v53);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, qword_1011B7D30, "Attempt to send message before first unlock!", 44, 2, _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0);
    v56 = v55;
    v180 = 5;
    v57 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v58 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v59 = v57;
    v60 = v56;
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v180, v59, v60, v58);
    *v40 = aBlock;
    swift_storeEnumTagMultiPayload(v40, v167, 1);
    sub_10039D074((uint64_t)v40, a17, v168, (uint64_t)v169, (uint64_t)v170, "Successfully sent location update message to: %@", 48, "Failed to send location update message to: %@. Error: %@", 56);
    sub_100004048((uint64_t)v40, &qword_1010F4868);
    return swift_release();
  }
  v61 = a16;
  v62 = (char)v163;
  v63 = v164;
  v64 = v165;
  v65 = sub_10038D0CC(v163, v164, v165);
  if ((v65 & 1) == 0)
  {
    v73 = static os_log_type_t.error.getter(v65);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v74 = qword_1011B7D30;
    v75 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v76 = swift_allocObject(v75, 72, 7);
    *(_OWORD *)(v76 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v76 + 56) = &type metadata for String;
    *(_QWORD *)(v76 + 64) = sub_10001AA00();
    *(_QWORD *)(v76 + 32) = v63;
    *(_QWORD *)(v76 + 40) = v64;
    *(_QWORD *)&v77 = swift_bridgeObjectRetain(v64).n128_u64[0];
    os_log(_:dso:log:_:_:)(v73, &_mh_execute_header, v74, "Not sending since %@ has no IDS registered devices", 50, 2, v76, v77);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    v79 = v78;
    v180 = 12;
    v80 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v58 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v59 = v80;
    v60 = v79;
    goto LABEL_11;
  }
  v66 = v63;
  v136 = a14;
  v167 = a13;
  LODWORD(v168) = a12;
  v170 = a10;
  v169 = *(void (**)(char *, char *, uint64_t))(a16 + 24);
  v67 = sub_10001A9A8(&qword_1010EE2B0);
  if ((a9 & 1) != 0)
  {
    v135 = a16;
    inited = swift_initStackObject(v67, v172);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_BYTE *)(inited + 32) = v62;
    *(_QWORD *)(inited + 40) = v66;
    *(_QWORD *)(inited + 48) = v64;
    v69 = v162;
    v70 = v145;
    v71 = v166;
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v162 + 56))(v145, 1, 1, v166);
    swift_bridgeObjectRetain(v64);
    v72 = v142;
    sub_10038F3FC(v151, v152, v153, v154, v147, inited, v70, (void (*)(_QWORD, _QWORD))v170, v142, a11 & 1, v168 & 1, v167, v136, a15);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v70, &qword_1010ED860);
    v170 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 32);
    v170(v159, v72, v71);
    v61 = v135;
  }
  else
  {
    v81 = swift_initStackObject(v67, v179);
    v82 = v62;
    v83 = v81;
    *(_OWORD *)(v81 + 16) = xmmword_100E22B00;
    *(_BYTE *)(v81 + 32) = v82;
    *(_QWORD *)(v81 + 40) = v63;
    *(_QWORD *)(v81 + 48) = v64;
    v84 = v64;
    v85 = v162;
    v86 = v146;
    v87 = v166;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v162 + 56))(v146, 1, 1, v166);
    swift_bridgeObjectRetain(v84);
    v88 = (uint64_t)v144;
    UUID.init()(v89);
    v90 = v143;
    sub_10037DC5C(v151, (void (*)(os_log_t, uint64_t))v152, v153, (unint64_t)v154, v88, v83, (uint64_t (*)(_QWORD, _QWORD, _QWORD))v86, (uint64_t)v170, v143, a11 & 1, v168 & 1, (uint64_t)v167, v136, a15, &qword_1010F9EF8, &qword_1010F9F00, &qword_1010F9F18, (uint64_t)&type metadata for BeaconSharingMessageType, &unk_101071A10,
      (uint64_t)&unk_1010F9F60);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v88, v87);
    sub_100004048((uint64_t)v86, &qword_1010ED860);
    v170 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 32);
    v170(v159, v90, v87);
  }
  v91 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  swift_allocObject(v91, *(unsigned int *)(v91 + 48), *(unsigned __int16 *)(v91 + 52));
  v92 = Future.init()();
  v93 = static os_log_type_t.default.getter(v92);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v94 = qword_1011B7D30;
  v95 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v96 = swift_allocObject(v95, 72, 7);
  *(_OWORD *)(v96 + 16) = xmmword_100E22B00;
  v97 = v159;
  v98 = UUID.uuidString.getter(v96);
  v100 = v99;
  *(_QWORD *)(v96 + 56) = &type metadata for String;
  *(_QWORD *)(v96 + 64) = sub_10001AA00();
  *(_QWORD *)(v96 + 32) = v98;
  *(_QWORD *)(v96 + 40) = v100;
  os_log(_:dso:log:_:_:)(v93, &_mh_execute_header, v94, "Setting %@ to pending", 21, 2, v96);
  swift_bridgeObjectRelease();
  v151 = *(_QWORD *)(v61 + 168);
  v101 = v162;
  v169 = *(void (**)(char *, char *, uint64_t))(v162 + 16);
  v102 = v137;
  v103 = v166;
  v169(v137, v97, v166);
  v104 = *(unsigned __int8 *)(v101 + 80);
  v164 = ((v104 + 24) & ~v104) + v30;
  v105 = (v104 + 24) & ~v104;
  v168 = v105;
  v167 = (void (*)(_QWORD, _QWORD, _QWORD))(v104 | 7);
  v106 = (v164 + 7) & 0xFFFFFFFFFFFFFFF8;
  v107 = swift_allocObject(&unk_101074418, v106 + 8, v104 | 7);
  *(_QWORD *)(v107 + 16) = v61;
  v108 = v107 + v105;
  v109 = (void (*)(uint64_t, char *, uint64_t))v170;
  v170((char *)v108, (uint64_t)v102, v103);
  *(_QWORD *)(v107 + v106) = v92;
  v177 = sub_1003BB468;
  v178 = v107;
  aBlock = _NSConcreteStackBlock;
  v174 = 1107296256;
  v175 = sub_100016FB8;
  v176 = &unk_101074430;
  v110 = _Block_copy(&aBlock);
  v135 = v61;
  v111 = v110;
  swift_retain();
  v112 = swift_retain();
  v165 = v92;
  v113 = v160;
  static DispatchQoS.unspecified.getter(v112);
  v180 = (uint64_t)_swiftEmptyArrayStorage;
  v114 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v153 = v114;
  v115 = (void (*)(os_log_t, uint64_t))sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v152 = (NSURL *)v115;
  v154 = (void (*)(_QWORD, _QWORD, _QWORD))sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v116 = v157;
  v117 = v115;
  v118 = v158;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v180, v117, v154, v158, v114);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v113, v116, v111);
  _Block_release(v111);
  v163 = *(void (**)(char *, uint64_t))(v156 + 8);
  v163(v116, v118);
  v156 = *(_QWORD *)(v155 + 8);
  ((void (*)(char *, uint64_t))v156)(v113, v161);
  swift_release();
  v119 = v159;
  v120 = v166;
  v169(v102, v159, v166);
  v121 = swift_allocObject(&unk_101074468, v106 + 16, v167);
  *(_QWORD *)(v121 + 16) = v135;
  v109(v121 + v168, v102, v120);
  v122 = (uint64_t (**)(uint64_t))(v121 + v106);
  v123 = (uint64_t (*)(uint64_t))v171;
  *v122 = sub_1003D8594;
  v122[1] = v123;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1003BB470, v121);
  swift_release();
  swift_release();
  v124 = swift_allocObject(&unk_101074490, 32, 7);
  *(_QWORD *)(v124 + 16) = sub_1003D8594;
  *(_QWORD *)(v124 + 24) = v123;
  swift_retain();
  Future.addFailure(block:)(sub_1003D9B84, v124);
  swift_release();
  v125 = swift_release();
  v126 = v138;
  static DispatchTime.now()(v125);
  v127 = v140;
  + infix(_:_:)(v126, 360.0);
  v155 = *(_QWORD *)(v139 + 8);
  v128 = v141;
  ((void (*)(char *, uint64_t))v155)(v126, v141);
  v129 = v166;
  v169(v102, v119, v166);
  v130 = swift_allocObject(&unk_1010744B8, v164, v167);
  *(_QWORD *)(v130 + 16) = v135;
  v170((char *)(v130 + v168), (uint64_t)v102, v129);
  v177 = sub_1003BB4B0;
  v178 = v130;
  aBlock = _NSConcreteStackBlock;
  v174 = 1107296256;
  v175 = sub_100016FB8;
  v176 = &unk_1010744D0;
  v131 = _Block_copy(&aBlock);
  v132 = swift_retain();
  v133 = v160;
  static DispatchQoS.unspecified.getter(v132);
  v180 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v180, v152, v154, v118, v153);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v127, v133, v116, v131);
  _Block_release(v131);
  swift_release();
  v163(v116, v118);
  ((void (*)(char *, uint64_t))v156)(v133, v161);
  ((void (*)(char *, uint64_t))v155)(v127, v128);
  (*(void (**)(char *, uint64_t))(v162 + 8))(v119, v166);
  swift_release();
  return swift_release();
}

uint64_t sub_1003C4BC0(int a1, void (*a2)(os_log_t, uint64_t), uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD), _QWORD *a5, int a6, uint64_t a7, void (*a8)(char *, uint64_t, uint64_t), char a9, void (*a10)(_QWORD, _QWORD), char a11, char a12, void (*a13)(char *, char *, uint64_t), uint64_t a14, __int128 a15, char *a16, uint64_t a17, unsigned __int8 a18, void (*a19)(char *, char *, uint64_t), void (*a20)(_QWORD, _QWORD))
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void ***v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t inited;
  uint64_t v68;
  NSURL *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  void *v108;
  const void *v109;
  uint64_t v110;
  char *v111;
  void (*v112)(_QWORD, _QWORD, _QWORD);
  void (*v113)(os_log_t, uint64_t);
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t (**v120)(uint64_t);
  uint64_t (*v121)(uint64_t);
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  void (*v127)(char *, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  NSURL *v143;
  char *v144;
  _QWORD *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  int v150;
  NSURL *v151;
  uint64_t v152;
  void (*v153)(_QWORD, _QWORD, _QWORD);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(char *, uint64_t, uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(char *, char *, uint64_t);
  void (*v169)(_QWORD, _QWORD);
  uint64_t v170;
  char v171[8];
  void **aBlock;
  uint64_t v173;
  uint64_t (*v174)(uint64_t);
  void *v175;
  uint64_t (*v176)();
  uint64_t v177;
  char v178[8];
  uint64_t v179;

  v163 = a8;
  v162 = a7;
  LODWORD(v161) = a6;
  v145 = a5;
  v153 = a4;
  v152 = a3;
  v151 = (NSURL *)a2;
  v150 = a1;
  v148 = type metadata accessor for DispatchQoS.QoSClass(0);
  v147 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v146 = (char *)&v136 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for DispatchTime(0);
  v137 = *(_QWORD *)(v139 - 8);
  v21 = __chkstk_darwin(v139);
  v136 = (char *)&v136 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v138 = (char *)&v136 - v23;
  v156 = type metadata accessor for DispatchWorkItemFlags(0);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v159 = (char *)&v136 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = type metadata accessor for DispatchQoS(0);
  v154 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v158 = (char *)&v136 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10001A9A8(&qword_1010ED860);
  v27 = __chkstk_darwin(v26);
  v144 = (char *)&v136 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v143 = (NSURL *)((char *)&v136 - v29);
  v164 = type metadata accessor for UUID(0);
  v165 = *(_QWORD *)(v164 - 8);
  v30 = *(_QWORD *)(v165 + 64);
  v31 = __chkstk_darwin(v164);
  v149 = (char *)&v136 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v31);
  v142 = (char *)&v136 - v33;
  v34 = __chkstk_darwin(v32);
  v141 = (uint64_t)&v136 - v35;
  v36 = __chkstk_darwin(v34);
  v140 = (uint64_t)&v136 - v37;
  __chkstk_darwin(v36);
  v157 = (char *)&v136 - v38;
  v166 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v166);
  v40 = (void ***)((char *)&v136 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = __chkstk_darwin(v41);
  v45 = (char *)&v136 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v47 = (char *)&v136 - v46;
  v48 = swift_allocObject(&unk_101074580, 48, 7);
  *(_QWORD *)(v48 + 16) = a17;
  LODWORD(v167) = a18;
  *(_BYTE *)(v48 + 24) = a18;
  v168 = a19;
  *(_QWORD *)(v48 + 32) = a19;
  *(_QWORD *)(v48 + 40) = a20;
  v170 = v48;
  swift_retain();
  v169 = a20;
  swift_bridgeObjectRetain(a20);
  static SystemInfo.lockState.getter(v49);
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v45, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v41);
  v50 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v51 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v45, v41, v50);
  v52 = *(void (**)(char *, uint64_t))(v42 + 8);
  v52(v45, v41);
  v53 = ((uint64_t (*)(char *, uint64_t))v52)(v47, v41);
  if ((v51 & 1) != 0)
  {
    v54 = static os_log_type_t.error.getter(v53);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, qword_1011B7D30, "Attempt to send message before first unlock!", 44, 2, _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0);
    v56 = v55;
    v179 = 5;
    v57 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v58 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v59 = v57;
    v60 = v56;
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v179, v59, v60, v58);
    *v40 = aBlock;
    swift_storeEnumTagMultiPayload(v40, v166, 1);
    sub_10039D074((uint64_t)v40, a17, v167, (uint64_t)v168, (uint64_t)v169, "Successfully sent unregister intent message to: %@", 50, "Failed to send unregister intent message to: %@. Error: %@", 58);
    sub_100004048((uint64_t)v40, &qword_1010F4868);
    return swift_release();
  }
  v61 = a16;
  v62 = v161;
  v63 = v162;
  v64 = v163;
  v65 = sub_10038D0CC(v161, v162, (uint64_t)v163);
  if ((v65 & 1) == 0)
  {
    v72 = static os_log_type_t.error.getter(v65);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v73 = qword_1011B7D30;
    v74 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v75 = swift_allocObject(v74, 72, 7);
    *(_OWORD *)(v75 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v75 + 56) = &type metadata for String;
    *(_QWORD *)(v75 + 64) = sub_10001AA00();
    *(_QWORD *)(v75 + 32) = v63;
    *(_QWORD *)(v75 + 40) = v64;
    *(_QWORD *)&v76 = swift_bridgeObjectRetain(v64).n128_u64[0];
    os_log(_:dso:log:_:_:)(v72, &_mh_execute_header, v73, "Not sending since %@ has no IDS registered devices", 50, 2, v75, v76);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    v78 = v77;
    v179 = 12;
    v79 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v58 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v59 = v79;
    v60 = v78;
    goto LABEL_11;
  }
  v167 = a14;
  v168 = a13;
  v169 = a10;
  LODWORD(v166) = a11 & 1;
  v66 = sub_10001A9A8(&qword_1010EE2B0);
  if ((a9 & 1) != 0)
  {
    v144 = a16;
    inited = swift_initStackObject(v66, v171);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_BYTE *)(inited + 32) = v62;
    *(_QWORD *)(inited + 40) = v63;
    *(_QWORD *)(inited + 48) = v64;
    v68 = v165;
    v69 = v143;
    v70 = v164;
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v165 + 56))(v143, 1, 1, v164);
    swift_bridgeObjectRetain(v64);
    v71 = v140;
    sub_10038F3FC(v150, v151, v152, v153, v145, inited, v69, v169, v140, v166, a12 & 1, (void (*)(_QWORD, _QWORD, _QWORD))v168, v167, a15);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v69, &qword_1010ED860);
    v88 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 32);
    v88(v157, v71, v70);
    v61 = v144;
  }
  else
  {
    v80 = swift_initStackObject(v66, v178);
    v81 = v62;
    v82 = v80;
    *(_OWORD *)(v80 + 16) = xmmword_100E22B00;
    *(_BYTE *)(v80 + 32) = v81;
    *(_QWORD *)(v80 + 40) = v63;
    *(_QWORD *)(v80 + 48) = v64;
    v83 = v144;
    v84 = v164;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v165 + 56))(v144, 1, 1, v164);
    swift_bridgeObjectRetain(v64);
    v85 = (uint64_t)v142;
    UUID.init()(v86);
    v87 = v141;
    sub_10037DC5C(v150, (void (*)(os_log_t, uint64_t))v151, v152, (unint64_t)v153, v85, v82, (uint64_t (*)(_QWORD, _QWORD, _QWORD))v83, (uint64_t)v169, v141, v166, a12 & 1, (uint64_t)v168, v167, a15, &qword_1010F9EF8, &qword_1010F9F00, &qword_1010F9F18, (uint64_t)&type metadata for BeaconSharingMessageType, &unk_101071A10,
      (uint64_t)&unk_1010F9F60);
    swift_bridgeObjectRelease();
    v89 = v165;
    (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v85, v84);
    sub_100004048((uint64_t)v83, &qword_1010ED860);
    v90 = v84;
    v88 = *(void (**)(char *, uint64_t, uint64_t))(v89 + 32);
    v88(v157, v87, v90);
  }
  v91 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  swift_allocObject(v91, *(unsigned int *)(v91 + 48), *(unsigned __int16 *)(v91 + 52));
  v92 = Future.init()();
  v93 = static os_log_type_t.default.getter(v92);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v94 = qword_1011B7D30;
  v95 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v96 = swift_allocObject(v95, 72, 7);
  *(_OWORD *)(v96 + 16) = xmmword_100E22B00;
  v97 = v157;
  v98 = UUID.uuidString.getter(v96);
  v100 = v99;
  *(_QWORD *)(v96 + 56) = &type metadata for String;
  *(_QWORD *)(v96 + 64) = sub_10001AA00();
  *(_QWORD *)(v96 + 32) = v98;
  *(_QWORD *)(v96 + 40) = v100;
  os_log(_:dso:log:_:_:)(v93, &_mh_execute_header, v94, "Setting %@ to pending", 21, 2, v96);
  swift_bridgeObjectRelease();
  v169 = (void (*)(_QWORD, _QWORD))*((_QWORD *)v61 + 21);
  v101 = v165;
  v168 = *(void (**)(char *, char *, uint64_t))(v165 + 16);
  v102 = v149;
  v103 = v164;
  v168(v149, v97, v164);
  v104 = *(unsigned __int8 *)(v101 + 80);
  v161 = ((v104 + 24) & ~v104) + v30;
  v105 = (v104 + 24) & ~v104;
  v166 = v105;
  v167 = v104 | 7;
  v106 = (v161 + 7) & 0xFFFFFFFFFFFFFFF8;
  v107 = swift_allocObject(&unk_1010745F8, v106 + 8, v104 | 7);
  *(_QWORD *)(v107 + 16) = v61;
  v88((char *)(v107 + v105), (uint64_t)v102, v103);
  *(_QWORD *)(v107 + v106) = v92;
  v176 = sub_1003BB468;
  v177 = v107;
  aBlock = _NSConcreteStackBlock;
  v173 = 1107296256;
  v174 = sub_100016FB8;
  v175 = &unk_101074610;
  v108 = _Block_copy(&aBlock);
  v163 = v88;
  v109 = v108;
  swift_retain();
  v110 = swift_retain();
  v162 = v92;
  v111 = v158;
  static DispatchQoS.unspecified.getter(v110);
  v179 = (uint64_t)_swiftEmptyArrayStorage;
  v112 = (void (*)(_QWORD, _QWORD, _QWORD))sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v153 = v112;
  v113 = (void (*)(os_log_t, uint64_t))sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v151 = (NSURL *)v113;
  v152 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v114 = v61;
  v115 = v159;
  v116 = v156;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v179, v113, v152, v156, v112);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v111, v115, v109);
  _Block_release(v109);
  v155 = *(_QWORD *)(v155 + 8);
  ((void (*)(char *, uint64_t))v155)(v115, v116);
  v154 = *(_QWORD *)(v154 + 8);
  ((void (*)(char *, uint64_t))v154)(v111, v160);
  swift_release();
  v117 = v149;
  v118 = v157;
  v168(v149, v157, v103);
  v119 = swift_allocObject(&unk_101074648, v106 + 16, v167);
  *(_QWORD *)(v119 + 16) = v114;
  v163((char *)(v119 + v166), (uint64_t)v117, v103);
  v120 = (uint64_t (**)(uint64_t))(v119 + v106);
  v121 = (uint64_t (*)(uint64_t))v170;
  *v120 = sub_1003D8AE4;
  v120[1] = v121;
  v122 = v114;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1003BB470, v119);
  swift_release();
  swift_release();
  v123 = swift_allocObject(&unk_101074670, 32, 7);
  *(_QWORD *)(v123 + 16) = sub_1003D8AE4;
  *(_QWORD *)(v123 + 24) = v121;
  swift_retain();
  Future.addFailure(block:)(sub_1003D9B84, v123);
  swift_release();
  v124 = swift_release();
  v125 = v136;
  static DispatchTime.now()(v124);
  v126 = v138;
  + infix(_:_:)(v125, 360.0);
  v127 = *(void (**)(char *, uint64_t))(v137 + 8);
  v128 = v139;
  v127(v125, v139);
  v129 = v164;
  v168(v117, v118, v164);
  v130 = swift_allocObject(&unk_101074698, v161, v167);
  *(_QWORD *)(v130 + 16) = v122;
  v163((char *)(v130 + v166), (uint64_t)v117, v129);
  v176 = sub_1003BB4B0;
  v177 = v130;
  aBlock = _NSConcreteStackBlock;
  v173 = 1107296256;
  v174 = sub_100016FB8;
  v175 = &unk_1010746B0;
  v131 = _Block_copy(&aBlock);
  v132 = swift_retain();
  v133 = v158;
  static DispatchQoS.unspecified.getter(v132);
  v179 = (uint64_t)_swiftEmptyArrayStorage;
  v134 = v159;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v179, v151, v152, v116, v153);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v126, v133, v134, v131);
  _Block_release(v131);
  swift_release();
  ((void (*)(char *, uint64_t))v155)(v134, v116);
  ((void (*)(char *, uint64_t))v154)(v133, v160);
  v127(v126, v128);
  (*(void (**)(char *, uint64_t))(v165 + 8))(v118, v164);
  swift_release();
  return swift_release();
}

uint64_t sub_1003C5E90(int a1, void (*a2)(os_log_t, uint64_t), uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD), _QWORD *a5, int a6, void (*a7)(_QWORD, _QWORD, _QWORD), uint64_t a8, char a9, void (*a10)(_QWORD, _QWORD), char a11, unsigned __int8 a12, void (*a13)(_QWORD, _QWORD, _QWORD), uint64_t a14, __int128 a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void ***v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  void (*v60)(_QWORD, _QWORD, _QWORD);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t inited;
  uint64_t v65;
  NSURL *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(_QWORD, _QWORD, _QWORD);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  char *v104;
  void (*v105)(os_log_t, uint64_t);
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (**v114)(uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  void (*v120)(char *, uint64_t);
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(_QWORD, _QWORD, _QWORD);
  int v134;
  uint64_t v135;
  void (*v136)(_QWORD, _QWORD);
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  NSURL *v143;
  char *v144;
  _QWORD *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  NSURL *v151;
  uint64_t v152;
  void (*v153)(_QWORD, _QWORD, _QWORD);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(_QWORD, _QWORD, _QWORD);
  uint64_t v165;
  uint64_t v166;
  char v167[8];
  void **aBlock;
  uint64_t v169;
  uint64_t (*v170)(uint64_t);
  void *v171;
  uint64_t (*v172)();
  uint64_t v173;
  char v174[8];
  uint64_t v175;

  v165 = a8;
  v164 = a7;
  LODWORD(v163) = a6;
  v145 = a5;
  v153 = a4;
  v152 = a3;
  v151 = (NSURL *)a2;
  LODWORD(v150) = a1;
  v148 = type metadata accessor for DispatchQoS.QoSClass(0);
  v147 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v146 = (char *)&v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for DispatchTime(0);
  v138 = *(_QWORD *)(v140 - 8);
  v18 = __chkstk_darwin(v140);
  v137 = (char *)&v130 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v139 = (char *)&v130 - v20;
  v156 = type metadata accessor for DispatchWorkItemFlags(0);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v159 = (char *)&v130 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = type metadata accessor for DispatchQoS(0);
  v154 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v158 = (char *)&v130 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8(&qword_1010ED860);
  v24 = __chkstk_darwin(v23);
  v144 = (char *)&v130 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v143 = (NSURL *)((char *)&v130 - v26);
  v157 = type metadata accessor for UUID(0);
  v162 = *(_QWORD *)(v157 - 8);
  v27 = *(_QWORD *)(v162 + 64);
  v28 = __chkstk_darwin(v157);
  v149 = (char *)&v130 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v28);
  v142 = (char *)&v130 - v30;
  v31 = __chkstk_darwin(v29);
  v141 = (uint64_t)&v130 - v32;
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v130 - v34;
  __chkstk_darwin(v33);
  v161 = (char *)&v130 - v36;
  v37 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v37);
  v39 = (void ***)((char *)&v130 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = __chkstk_darwin(v40);
  v44 = (char *)&v130 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v46 = (char *)&v130 - v45;
  v166 = a17;
  v47 = swift_retain();
  static SystemInfo.lockState.getter(v47);
  (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v44, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v40);
  v48 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v49 = dispatch thunk of static Equatable.== infix(_:_:)(v46, v44, v40, v48);
  v50 = *(void (**)(char *, uint64_t))(v41 + 8);
  v50(v44, v40);
  v51 = ((uint64_t (*)(char *, uint64_t))v50)(v46, v40);
  if ((v49 & 1) != 0)
  {
    v52 = static os_log_type_t.error.getter(v51);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    os_log(_:dso:log:_:_:)(v52, &_mh_execute_header, qword_1011B7D30, "Attempt to send message before first unlock!", 44, 2, _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0);
    v54 = v53;
    v175 = 5;
    v55 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v56 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v57 = v55;
    v58 = v54;
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v175, v57, v58, v56);
    *v39 = aBlock;
    swift_storeEnumTagMultiPayload(v39, v37, 1);
    sub_1003A125C((uint64_t)v39, v166, "Error sending shareBeacon message: %@", 37);
    sub_100004048((uint64_t)v39, &qword_1010F4868);
    return swift_release();
  }
  v59 = v163;
  v60 = v164;
  v61 = v165;
  v62 = sub_10038D0CC(v163, (uint64_t)v164, v165);
  if ((v62 & 1) == 0)
  {
    v68 = static os_log_type_t.error.getter(v62);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v69 = qword_1011B7D30;
    v70 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v71 = swift_allocObject(v70, 72, 7);
    *(_OWORD *)(v71 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v71 + 56) = &type metadata for String;
    *(_QWORD *)(v71 + 64) = sub_10001AA00();
    *(_QWORD *)(v71 + 32) = v60;
    *(_QWORD *)(v71 + 40) = v61;
    *(_QWORD *)&v72 = swift_bridgeObjectRetain(v61).n128_u64[0];
    os_log(_:dso:log:_:_:)(v68, &_mh_execute_header, v69, "Not sending since %@ has no IDS registered devices", 50, 2, v71, v72);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    v74 = v73;
    v175 = 12;
    v75 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v56 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v57 = v75;
    v58 = v74;
    goto LABEL_11;
  }
  v132 = a14;
  v133 = a13;
  v134 = a12;
  v136 = a10;
  v135 = *(_QWORD *)(a16 + 24);
  v63 = sub_10001A9A8(&qword_1010EE2B0);
  v131 = a16;
  if ((a9 & 1) != 0)
  {
    inited = swift_initStackObject(v63, v167);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_BYTE *)(inited + 32) = v59;
    *(_QWORD *)(inited + 40) = v60;
    *(_QWORD *)(inited + 48) = v61;
    v65 = v162;
    v66 = v143;
    v67 = v157;
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v162 + 56))(v143, 1, 1, v157);
    swift_bridgeObjectRetain(v61);
    sub_10038F3FC(v150, v151, v152, v153, v145, inited, v66, v136, (uint64_t)v35, a11 & 1, v134 & 1, v133, v132, a15);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v66, &qword_1010ED860);
    v82 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
    v82(v161, v35, v67);
  }
  else
  {
    v76 = swift_initStackObject(v63, v174);
    *(_OWORD *)(v76 + 16) = xmmword_100E22B00;
    *(_BYTE *)(v76 + 32) = v59;
    *(_QWORD *)(v76 + 40) = v60;
    *(_QWORD *)(v76 + 48) = v61;
    v77 = v162;
    v78 = v144;
    v67 = v157;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v162 + 56))(v144, 1, 1, v157);
    swift_bridgeObjectRetain(v61);
    v79 = (uint64_t)v142;
    UUID.init()(v80);
    v81 = v141;
    sub_10037DC5C(v150, (void (*)(os_log_t, uint64_t))v151, v152, (unint64_t)v153, v79, v76, (uint64_t (*)(_QWORD, _QWORD, _QWORD))v78, (uint64_t)v136, v141, a11 & 1, v134 & 1, (uint64_t)v133, v132, a15, &qword_1010F9EF8, &qword_1010F9F00, &qword_1010F9F18, (uint64_t)&type metadata for BeaconSharingMessageType, &unk_101071A10,
      (uint64_t)&unk_1010F9F60);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v79, v67);
    sub_100004048((uint64_t)v78, &qword_1010ED860);
    v83 = v81;
    v82 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
    v82(v161, (char *)v83, v67);
  }
  v84 = v67;
  v85 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  swift_allocObject(v85, *(unsigned int *)(v85 + 48), *(unsigned __int16 *)(v85 + 52));
  v86 = (void (*)(_QWORD, _QWORD, _QWORD))Future.init()();
  v87 = static os_log_type_t.default.getter(v86);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v88 = qword_1011B7D30;
  v89 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v90 = swift_allocObject(v89, 72, 7);
  *(_OWORD *)(v90 + 16) = xmmword_100E22B00;
  v91 = v161;
  v92 = UUID.uuidString.getter(v90);
  v94 = v93;
  *(_QWORD *)(v90 + 56) = &type metadata for String;
  *(_QWORD *)(v90 + 64) = sub_10001AA00();
  *(_QWORD *)(v90 + 32) = v92;
  *(_QWORD *)(v90 + 40) = v94;
  os_log(_:dso:log:_:_:)(v87, &_mh_execute_header, v88, "Setting %@ to pending", 21, 2, v90);
  swift_bridgeObjectRelease();
  v95 = v131;
  v165 = *(_QWORD *)(v131 + 168);
  v96 = v162;
  v164 = *(void (**)(_QWORD, _QWORD, _QWORD))(v162 + 16);
  v97 = v149;
  v164(v149, v91, v84);
  v98 = *(unsigned __int8 *)(v96 + 80);
  v152 = ((v98 + 24) & ~v98) + v27;
  v99 = (v98 + 24) & ~v98;
  v163 = v98 | 7;
  v100 = (v152 + 7) & 0xFFFFFFFFFFFFFFF8;
  v101 = swift_allocObject(&unk_101073A68, v100 + 8, v98 | 7);
  *(_QWORD *)(v101 + 16) = v95;
  v147 = v99;
  v82((char *)(v101 + v99), v97, v84);
  *(_QWORD *)(v101 + v100) = v86;
  v172 = sub_1003BB468;
  v173 = v101;
  aBlock = _NSConcreteStackBlock;
  v169 = 1107296256;
  v170 = sub_100016FB8;
  v171 = &unk_101073A80;
  v102 = _Block_copy(&aBlock);
  swift_retain();
  v103 = swift_retain();
  v153 = v86;
  v104 = v158;
  static DispatchQoS.unspecified.getter(v103);
  v175 = (uint64_t)_swiftEmptyArrayStorage;
  v105 = (void (*)(os_log_t, uint64_t))sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v151 = (NSURL *)v105;
  v106 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v148 = v106;
  v150 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v107 = v159;
  v108 = v106;
  v109 = v156;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v175, v108, v150, v156, v105);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v104, v107, v102);
  _Block_release(v102);
  v155 = *(_QWORD *)(v155 + 8);
  ((void (*)(char *, uint64_t))v155)(v107, v109);
  v154 = *(_QWORD *)(v154 + 8);
  ((void (*)(char *, uint64_t))v154)(v104, v160);
  swift_release();
  v110 = v149;
  v111 = v161;
  v164(v149, v161, v84);
  v112 = swift_allocObject(&unk_101073AB8, v100 + 16, v163);
  v113 = v131;
  *(_QWORD *)(v112 + 16) = v131;
  v82((char *)(v112 + v99), v110, v84);
  v114 = (uint64_t (**)(uint64_t))(v112 + v100);
  v115 = v166;
  *v114 = sub_1003D6D28;
  v114[1] = (uint64_t (*)(uint64_t))v115;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1003BB470, v112);
  swift_release();
  swift_release();
  v116 = swift_allocObject(&unk_101073AE0, 32, 7);
  *(_QWORD *)(v116 + 16) = sub_1003D6D28;
  *(_QWORD *)(v116 + 24) = v115;
  swift_retain();
  Future.addFailure(block:)(sub_1003D9B84, v116);
  swift_release();
  v117 = swift_release();
  v118 = v137;
  static DispatchTime.now()(v117);
  v119 = v139;
  + infix(_:_:)(v118, 360.0);
  v120 = *(void (**)(char *, uint64_t))(v138 + 8);
  v121 = v140;
  v120(v118, v140);
  v122 = v111;
  v123 = v157;
  v164(v110, v122, v157);
  v124 = swift_allocObject(&unk_101073B08, v152, v163);
  *(_QWORD *)(v124 + 16) = v113;
  v82((char *)(v124 + v147), v110, v123);
  v172 = sub_1003BB4B0;
  v173 = v124;
  aBlock = _NSConcreteStackBlock;
  v169 = 1107296256;
  v170 = sub_100016FB8;
  v171 = &unk_101073B20;
  v125 = _Block_copy(&aBlock);
  v126 = swift_retain();
  v127 = v158;
  static DispatchQoS.unspecified.getter(v126);
  v175 = (uint64_t)_swiftEmptyArrayStorage;
  v128 = v159;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v175, v148, v150, v109, v151);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v119, v127, v128, v125);
  _Block_release(v125);
  swift_release();
  ((void (*)(char *, uint64_t))v155)(v128, v109);
  ((void (*)(char *, uint64_t))v154)(v127, v160);
  v120(v119, v121);
  (*(void (**)(char *, uint64_t))(v162 + 8))(v161, v123);
  swift_release();
  return swift_release();
}

uint64_t sub_1003C70B4(int a1, void (*a2)(os_log_t, uint64_t), uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD), _QWORD *a5, int a6, void (*a7)(_QWORD, _QWORD, _QWORD), uint64_t a8, char a9, void (*a10)(_QWORD, _QWORD), char a11, unsigned __int8 a12, void (*a13)(_QWORD, _QWORD, _QWORD), uint64_t a14, __int128 a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void ***v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  void (*v60)(_QWORD, _QWORD, _QWORD);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t inited;
  uint64_t v65;
  NSURL *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(_QWORD, _QWORD, _QWORD);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  char *v104;
  void (*v105)(os_log_t, uint64_t);
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (**v114)(uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  void (*v120)(char *, uint64_t);
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(_QWORD, _QWORD, _QWORD);
  int v134;
  uint64_t v135;
  void (*v136)(_QWORD, _QWORD);
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  NSURL *v143;
  char *v144;
  _QWORD *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  NSURL *v151;
  uint64_t v152;
  void (*v153)(_QWORD, _QWORD, _QWORD);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(_QWORD, _QWORD, _QWORD);
  uint64_t v165;
  uint64_t v166;
  char v167[8];
  void **aBlock;
  uint64_t v169;
  uint64_t (*v170)(uint64_t);
  void *v171;
  uint64_t (*v172)();
  uint64_t v173;
  char v174[8];
  uint64_t v175;

  v165 = a8;
  v164 = a7;
  LODWORD(v163) = a6;
  v145 = a5;
  v153 = a4;
  v152 = a3;
  v151 = (NSURL *)a2;
  LODWORD(v150) = a1;
  v148 = type metadata accessor for DispatchQoS.QoSClass(0);
  v147 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v146 = (char *)&v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for DispatchTime(0);
  v138 = *(_QWORD *)(v140 - 8);
  v18 = __chkstk_darwin(v140);
  v137 = (char *)&v130 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v139 = (char *)&v130 - v20;
  v156 = type metadata accessor for DispatchWorkItemFlags(0);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v159 = (char *)&v130 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = type metadata accessor for DispatchQoS(0);
  v154 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v158 = (char *)&v130 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8(&qword_1010ED860);
  v24 = __chkstk_darwin(v23);
  v144 = (char *)&v130 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v143 = (NSURL *)((char *)&v130 - v26);
  v157 = type metadata accessor for UUID(0);
  v162 = *(_QWORD *)(v157 - 8);
  v27 = *(_QWORD *)(v162 + 64);
  v28 = __chkstk_darwin(v157);
  v149 = (char *)&v130 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v28);
  v142 = (char *)&v130 - v30;
  v31 = __chkstk_darwin(v29);
  v141 = (uint64_t)&v130 - v32;
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v130 - v34;
  __chkstk_darwin(v33);
  v161 = (char *)&v130 - v36;
  v37 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v37);
  v39 = (void ***)((char *)&v130 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = __chkstk_darwin(v40);
  v44 = (char *)&v130 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v46 = (char *)&v130 - v45;
  v166 = a17;
  v47 = swift_retain();
  static SystemInfo.lockState.getter(v47);
  (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v44, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v40);
  v48 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v49 = dispatch thunk of static Equatable.== infix(_:_:)(v46, v44, v40, v48);
  v50 = *(void (**)(char *, uint64_t))(v41 + 8);
  v50(v44, v40);
  v51 = ((uint64_t (*)(char *, uint64_t))v50)(v46, v40);
  if ((v49 & 1) != 0)
  {
    v52 = static os_log_type_t.error.getter(v51);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    os_log(_:dso:log:_:_:)(v52, &_mh_execute_header, qword_1011B7D30, "Attempt to send message before first unlock!", 44, 2, _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0);
    v54 = v53;
    v175 = 5;
    v55 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v56 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v57 = v55;
    v58 = v54;
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v175, v57, v58, v56);
    *v39 = aBlock;
    swift_storeEnumTagMultiPayload(v39, v37, 1);
    sub_1003A125C((uint64_t)v39, v166, "Error sending legacy shareBeacon message: %@", 44);
    sub_100004048((uint64_t)v39, &qword_1010F4868);
    return swift_release();
  }
  v59 = v163;
  v60 = v164;
  v61 = v165;
  v62 = sub_10038D0CC(v163, (uint64_t)v164, v165);
  if ((v62 & 1) == 0)
  {
    v68 = static os_log_type_t.error.getter(v62);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v69 = qword_1011B7D30;
    v70 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v71 = swift_allocObject(v70, 72, 7);
    *(_OWORD *)(v71 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v71 + 56) = &type metadata for String;
    *(_QWORD *)(v71 + 64) = sub_10001AA00();
    *(_QWORD *)(v71 + 32) = v60;
    *(_QWORD *)(v71 + 40) = v61;
    *(_QWORD *)&v72 = swift_bridgeObjectRetain(v61).n128_u64[0];
    os_log(_:dso:log:_:_:)(v68, &_mh_execute_header, v69, "Not sending since %@ has no IDS registered devices", 50, 2, v71, v72);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    v74 = v73;
    v175 = 12;
    v75 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v56 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v57 = v75;
    v58 = v74;
    goto LABEL_11;
  }
  v132 = a14;
  v133 = a13;
  v134 = a12;
  v136 = a10;
  v135 = *(_QWORD *)(a16 + 24);
  v63 = sub_10001A9A8(&qword_1010EE2B0);
  v131 = a16;
  if ((a9 & 1) != 0)
  {
    inited = swift_initStackObject(v63, v167);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_BYTE *)(inited + 32) = v59;
    *(_QWORD *)(inited + 40) = v60;
    *(_QWORD *)(inited + 48) = v61;
    v65 = v162;
    v66 = v143;
    v67 = v157;
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v162 + 56))(v143, 1, 1, v157);
    swift_bridgeObjectRetain(v61);
    sub_10038F3FC(v150, v151, v152, v153, v145, inited, v66, v136, (uint64_t)v35, a11 & 1, v134 & 1, v133, v132, a15);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v66, &qword_1010ED860);
    v82 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
    v82(v161, v35, v67);
  }
  else
  {
    v76 = swift_initStackObject(v63, v174);
    *(_OWORD *)(v76 + 16) = xmmword_100E22B00;
    *(_BYTE *)(v76 + 32) = v59;
    *(_QWORD *)(v76 + 40) = v60;
    *(_QWORD *)(v76 + 48) = v61;
    v77 = v162;
    v78 = v144;
    v67 = v157;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v162 + 56))(v144, 1, 1, v157);
    swift_bridgeObjectRetain(v61);
    v79 = (uint64_t)v142;
    UUID.init()(v80);
    v81 = v141;
    sub_10037DC5C(v150, (void (*)(os_log_t, uint64_t))v151, v152, (unint64_t)v153, v79, v76, (uint64_t (*)(_QWORD, _QWORD, _QWORD))v78, (uint64_t)v136, v141, a11 & 1, v134 & 1, (uint64_t)v133, v132, a15, &qword_1010F9EF8, &qword_1010F9F00, &qword_1010F9F18, (uint64_t)&type metadata for BeaconSharingMessageType, &unk_101071A10,
      (uint64_t)&unk_1010F9F60);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v79, v67);
    sub_100004048((uint64_t)v78, &qword_1010ED860);
    v83 = v81;
    v82 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
    v82(v161, (char *)v83, v67);
  }
  v84 = v67;
  v85 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  swift_allocObject(v85, *(unsigned int *)(v85 + 48), *(unsigned __int16 *)(v85 + 52));
  v86 = (void (*)(_QWORD, _QWORD, _QWORD))Future.init()();
  v87 = static os_log_type_t.default.getter(v86);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v88 = qword_1011B7D30;
  v89 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v90 = swift_allocObject(v89, 72, 7);
  *(_OWORD *)(v90 + 16) = xmmword_100E22B00;
  v91 = v161;
  v92 = UUID.uuidString.getter(v90);
  v94 = v93;
  *(_QWORD *)(v90 + 56) = &type metadata for String;
  *(_QWORD *)(v90 + 64) = sub_10001AA00();
  *(_QWORD *)(v90 + 32) = v92;
  *(_QWORD *)(v90 + 40) = v94;
  os_log(_:dso:log:_:_:)(v87, &_mh_execute_header, v88, "Setting %@ to pending", 21, 2, v90);
  swift_bridgeObjectRelease();
  v95 = v131;
  v165 = *(_QWORD *)(v131 + 168);
  v96 = v162;
  v164 = *(void (**)(_QWORD, _QWORD, _QWORD))(v162 + 16);
  v97 = v149;
  v164(v149, v91, v84);
  v98 = *(unsigned __int8 *)(v96 + 80);
  v152 = ((v98 + 24) & ~v98) + v27;
  v99 = (v98 + 24) & ~v98;
  v163 = v98 | 7;
  v100 = (v152 + 7) & 0xFFFFFFFFFFFFFFF8;
  v101 = swift_allocObject(&unk_101073928, v100 + 8, v98 | 7);
  *(_QWORD *)(v101 + 16) = v95;
  v147 = v99;
  v82((char *)(v101 + v99), v97, v84);
  *(_QWORD *)(v101 + v100) = v86;
  v172 = sub_1003BB468;
  v173 = v101;
  aBlock = _NSConcreteStackBlock;
  v169 = 1107296256;
  v170 = sub_100016FB8;
  v171 = &unk_101073940;
  v102 = _Block_copy(&aBlock);
  swift_retain();
  v103 = swift_retain();
  v153 = v86;
  v104 = v158;
  static DispatchQoS.unspecified.getter(v103);
  v175 = (uint64_t)_swiftEmptyArrayStorage;
  v105 = (void (*)(os_log_t, uint64_t))sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v151 = (NSURL *)v105;
  v106 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v148 = v106;
  v150 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v107 = v159;
  v108 = v106;
  v109 = v156;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v175, v108, v150, v156, v105);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v104, v107, v102);
  _Block_release(v102);
  v155 = *(_QWORD *)(v155 + 8);
  ((void (*)(char *, uint64_t))v155)(v107, v109);
  v154 = *(_QWORD *)(v154 + 8);
  ((void (*)(char *, uint64_t))v154)(v104, v160);
  swift_release();
  v110 = v149;
  v111 = v161;
  v164(v149, v161, v84);
  v112 = swift_allocObject(&unk_101073978, v100 + 16, v163);
  v113 = v131;
  *(_QWORD *)(v112 + 16) = v131;
  v82((char *)(v112 + v99), v110, v84);
  v114 = (uint64_t (**)(uint64_t))(v112 + v100);
  v115 = v166;
  *v114 = sub_1003D6C68;
  v114[1] = (uint64_t (*)(uint64_t))v115;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1003BB470, v112);
  swift_release();
  swift_release();
  v116 = swift_allocObject(&unk_1010739A0, 32, 7);
  *(_QWORD *)(v116 + 16) = sub_1003D6C68;
  *(_QWORD *)(v116 + 24) = v115;
  swift_retain();
  Future.addFailure(block:)(sub_1003D9B84, v116);
  swift_release();
  v117 = swift_release();
  v118 = v137;
  static DispatchTime.now()(v117);
  v119 = v139;
  + infix(_:_:)(v118, 360.0);
  v120 = *(void (**)(char *, uint64_t))(v138 + 8);
  v121 = v140;
  v120(v118, v140);
  v122 = v111;
  v123 = v157;
  v164(v110, v122, v157);
  v124 = swift_allocObject(&unk_1010739C8, v152, v163);
  *(_QWORD *)(v124 + 16) = v113;
  v82((char *)(v124 + v147), v110, v123);
  v172 = sub_1003BB4B0;
  v173 = v124;
  aBlock = _NSConcreteStackBlock;
  v169 = 1107296256;
  v170 = sub_100016FB8;
  v171 = &unk_1010739E0;
  v125 = _Block_copy(&aBlock);
  v126 = swift_retain();
  v127 = v158;
  static DispatchQoS.unspecified.getter(v126);
  v175 = (uint64_t)_swiftEmptyArrayStorage;
  v128 = v159;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v175, v148, v150, v109, v151);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v119, v127, v128, v125);
  _Block_release(v125);
  swift_release();
  ((void (*)(char *, uint64_t))v155)(v128, v109);
  ((void (*)(char *, uint64_t))v154)(v127, v160);
  v120(v119, v121);
  (*(void (**)(char *, uint64_t))(v162 + 8))(v161, v123);
  swift_release();
  return swift_release();
}

uint64_t sub_1003C82D8(int a1, void (*a2)(os_log_t, uint64_t), uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD), _QWORD *a5, int a6, void (*a7)(_QWORD, _QWORD, _QWORD), uint64_t a8, char a9, void (*a10)(_QWORD, _QWORD), char a11, unsigned __int8 a12, void (*a13)(_QWORD, _QWORD, _QWORD), uint64_t a14, __int128 a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void ***v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  void (*v60)(_QWORD, _QWORD, _QWORD);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t inited;
  uint64_t v65;
  NSURL *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(_QWORD, _QWORD, _QWORD);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  char *v104;
  void (*v105)(os_log_t, uint64_t);
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (**v114)(uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  void (*v120)(char *, uint64_t);
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(_QWORD, _QWORD, _QWORD);
  int v134;
  uint64_t v135;
  void (*v136)(_QWORD, _QWORD);
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  NSURL *v143;
  char *v144;
  _QWORD *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  NSURL *v151;
  uint64_t v152;
  void (*v153)(_QWORD, _QWORD, _QWORD);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(_QWORD, _QWORD, _QWORD);
  uint64_t v165;
  uint64_t v166;
  char v167[8];
  void **aBlock;
  uint64_t v169;
  uint64_t (*v170)(uint64_t);
  void *v171;
  uint64_t (*v172)();
  uint64_t v173;
  char v174[8];
  uint64_t v175;

  v165 = a8;
  v164 = a7;
  LODWORD(v163) = a6;
  v145 = a5;
  v153 = a4;
  v152 = a3;
  v151 = (NSURL *)a2;
  LODWORD(v150) = a1;
  v148 = type metadata accessor for DispatchQoS.QoSClass(0);
  v147 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v146 = (char *)&v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for DispatchTime(0);
  v138 = *(_QWORD *)(v140 - 8);
  v18 = __chkstk_darwin(v140);
  v137 = (char *)&v130 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v139 = (char *)&v130 - v20;
  v156 = type metadata accessor for DispatchWorkItemFlags(0);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v159 = (char *)&v130 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = type metadata accessor for DispatchQoS(0);
  v154 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v158 = (char *)&v130 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8(&qword_1010ED860);
  v24 = __chkstk_darwin(v23);
  v144 = (char *)&v130 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v143 = (NSURL *)((char *)&v130 - v26);
  v157 = type metadata accessor for UUID(0);
  v162 = *(_QWORD *)(v157 - 8);
  v27 = *(_QWORD *)(v162 + 64);
  v28 = __chkstk_darwin(v157);
  v149 = (char *)&v130 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v28);
  v142 = (char *)&v130 - v30;
  v31 = __chkstk_darwin(v29);
  v141 = (uint64_t)&v130 - v32;
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v130 - v34;
  __chkstk_darwin(v33);
  v161 = (char *)&v130 - v36;
  v37 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v37);
  v39 = (void ***)((char *)&v130 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = __chkstk_darwin(v40);
  v44 = (char *)&v130 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v46 = (char *)&v130 - v45;
  v166 = a17;
  v47 = swift_retain();
  static SystemInfo.lockState.getter(v47);
  (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v44, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v40);
  v48 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v49 = dispatch thunk of static Equatable.== infix(_:_:)(v46, v44, v40, v48);
  v50 = *(void (**)(char *, uint64_t))(v41 + 8);
  v50(v44, v40);
  v51 = ((uint64_t (*)(char *, uint64_t))v50)(v46, v40);
  if ((v49 & 1) != 0)
  {
    v52 = static os_log_type_t.error.getter(v51);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    os_log(_:dso:log:_:_:)(v52, &_mh_execute_header, qword_1011B7D30, "Attempt to send message before first unlock!", 44, 2, _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0);
    v54 = v53;
    v175 = 5;
    v55 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v56 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v57 = v55;
    v58 = v54;
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v175, v57, v58, v56);
    *v39 = aBlock;
    swift_storeEnumTagMultiPayload(v39, v37, 1);
    sub_1003A125C((uint64_t)v39, v166, "Error sending find my accessory family share message: %@", 56);
    sub_100004048((uint64_t)v39, &qword_1010F4868);
    return swift_release();
  }
  v59 = v163;
  v60 = v164;
  v61 = v165;
  v62 = sub_10038D0CC(v163, (uint64_t)v164, v165);
  if ((v62 & 1) == 0)
  {
    v68 = static os_log_type_t.error.getter(v62);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v69 = qword_1011B7D30;
    v70 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v71 = swift_allocObject(v70, 72, 7);
    *(_OWORD *)(v71 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v71 + 56) = &type metadata for String;
    *(_QWORD *)(v71 + 64) = sub_10001AA00();
    *(_QWORD *)(v71 + 32) = v60;
    *(_QWORD *)(v71 + 40) = v61;
    *(_QWORD *)&v72 = swift_bridgeObjectRetain(v61).n128_u64[0];
    os_log(_:dso:log:_:_:)(v68, &_mh_execute_header, v69, "Not sending since %@ has no IDS registered devices", 50, 2, v71, v72);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    v74 = v73;
    v175 = 12;
    v75 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v56 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v57 = v75;
    v58 = v74;
    goto LABEL_11;
  }
  v132 = a14;
  v133 = a13;
  v134 = a12;
  v136 = a10;
  v135 = *(_QWORD *)(a16 + 24);
  v63 = sub_10001A9A8(&qword_1010EE2B0);
  v131 = a16;
  if ((a9 & 1) != 0)
  {
    inited = swift_initStackObject(v63, v167);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_BYTE *)(inited + 32) = v59;
    *(_QWORD *)(inited + 40) = v60;
    *(_QWORD *)(inited + 48) = v61;
    v65 = v162;
    v66 = v143;
    v67 = v157;
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v162 + 56))(v143, 1, 1, v157);
    swift_bridgeObjectRetain(v61);
    sub_10038F3FC(v150, v151, v152, v153, v145, inited, v66, v136, (uint64_t)v35, a11 & 1, v134 & 1, v133, v132, a15);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v66, &qword_1010ED860);
    v82 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
    v82(v161, v35, v67);
  }
  else
  {
    v76 = swift_initStackObject(v63, v174);
    *(_OWORD *)(v76 + 16) = xmmword_100E22B00;
    *(_BYTE *)(v76 + 32) = v59;
    *(_QWORD *)(v76 + 40) = v60;
    *(_QWORD *)(v76 + 48) = v61;
    v77 = v162;
    v78 = v144;
    v67 = v157;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v162 + 56))(v144, 1, 1, v157);
    swift_bridgeObjectRetain(v61);
    v79 = (uint64_t)v142;
    UUID.init()(v80);
    v81 = v141;
    sub_10037DC5C(v150, (void (*)(os_log_t, uint64_t))v151, v152, (unint64_t)v153, v79, v76, (uint64_t (*)(_QWORD, _QWORD, _QWORD))v78, (uint64_t)v136, v141, a11 & 1, v134 & 1, (uint64_t)v133, v132, a15, &qword_1010F9EF8, &qword_1010F9F00, &qword_1010F9F18, (uint64_t)&type metadata for BeaconSharingMessageType, &unk_101071A10,
      (uint64_t)&unk_1010F9F60);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v79, v67);
    sub_100004048((uint64_t)v78, &qword_1010ED860);
    v83 = v81;
    v82 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
    v82(v161, (char *)v83, v67);
  }
  v84 = v67;
  v85 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  swift_allocObject(v85, *(unsigned int *)(v85 + 48), *(unsigned __int16 *)(v85 + 52));
  v86 = (void (*)(_QWORD, _QWORD, _QWORD))Future.init()();
  v87 = static os_log_type_t.default.getter(v86);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v88 = qword_1011B7D30;
  v89 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v90 = swift_allocObject(v89, 72, 7);
  *(_OWORD *)(v90 + 16) = xmmword_100E22B00;
  v91 = v161;
  v92 = UUID.uuidString.getter(v90);
  v94 = v93;
  *(_QWORD *)(v90 + 56) = &type metadata for String;
  *(_QWORD *)(v90 + 64) = sub_10001AA00();
  *(_QWORD *)(v90 + 32) = v92;
  *(_QWORD *)(v90 + 40) = v94;
  os_log(_:dso:log:_:_:)(v87, &_mh_execute_header, v88, "Setting %@ to pending", 21, 2, v90);
  swift_bridgeObjectRelease();
  v95 = v131;
  v165 = *(_QWORD *)(v131 + 168);
  v96 = v162;
  v164 = *(void (**)(_QWORD, _QWORD, _QWORD))(v162 + 16);
  v97 = v149;
  v164(v149, v91, v84);
  v98 = *(unsigned __int8 *)(v96 + 80);
  v152 = ((v98 + 24) & ~v98) + v27;
  v99 = (v98 + 24) & ~v98;
  v163 = v98 | 7;
  v100 = (v152 + 7) & 0xFFFFFFFFFFFFFFF8;
  v101 = swift_allocObject(&unk_101073CE8, v100 + 8, v98 | 7);
  *(_QWORD *)(v101 + 16) = v95;
  v147 = v99;
  v82((char *)(v101 + v99), v97, v84);
  *(_QWORD *)(v101 + v100) = v86;
  v172 = sub_1003BB468;
  v173 = v101;
  aBlock = _NSConcreteStackBlock;
  v169 = 1107296256;
  v170 = sub_100016FB8;
  v171 = &unk_101073D00;
  v102 = _Block_copy(&aBlock);
  swift_retain();
  v103 = swift_retain();
  v153 = v86;
  v104 = v158;
  static DispatchQoS.unspecified.getter(v103);
  v175 = (uint64_t)_swiftEmptyArrayStorage;
  v105 = (void (*)(os_log_t, uint64_t))sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v151 = (NSURL *)v105;
  v106 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v148 = v106;
  v150 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v107 = v159;
  v108 = v106;
  v109 = v156;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v175, v108, v150, v156, v105);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v104, v107, v102);
  _Block_release(v102);
  v155 = *(_QWORD *)(v155 + 8);
  ((void (*)(char *, uint64_t))v155)(v107, v109);
  v154 = *(_QWORD *)(v154 + 8);
  ((void (*)(char *, uint64_t))v154)(v104, v160);
  swift_release();
  v110 = v149;
  v111 = v161;
  v164(v149, v161, v84);
  v112 = swift_allocObject(&unk_101073D38, v100 + 16, v163);
  v113 = v131;
  *(_QWORD *)(v112 + 16) = v131;
  v82((char *)(v112 + v99), v110, v84);
  v114 = (uint64_t (**)(uint64_t))(v112 + v100);
  v115 = v166;
  *v114 = sub_1003D6F2C;
  v114[1] = (uint64_t (*)(uint64_t))v115;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1003BB470, v112);
  swift_release();
  swift_release();
  v116 = swift_allocObject(&unk_101073D60, 32, 7);
  *(_QWORD *)(v116 + 16) = sub_1003D6F2C;
  *(_QWORD *)(v116 + 24) = v115;
  swift_retain();
  Future.addFailure(block:)(sub_1003D9B84, v116);
  swift_release();
  v117 = swift_release();
  v118 = v137;
  static DispatchTime.now()(v117);
  v119 = v139;
  + infix(_:_:)(v118, 360.0);
  v120 = *(void (**)(char *, uint64_t))(v138 + 8);
  v121 = v140;
  v120(v118, v140);
  v122 = v111;
  v123 = v157;
  v164(v110, v122, v157);
  v124 = swift_allocObject(&unk_101073D88, v152, v163);
  *(_QWORD *)(v124 + 16) = v113;
  v82((char *)(v124 + v147), v110, v123);
  v172 = sub_1003BB4B0;
  v173 = v124;
  aBlock = _NSConcreteStackBlock;
  v169 = 1107296256;
  v170 = sub_100016FB8;
  v171 = &unk_101073DA0;
  v125 = _Block_copy(&aBlock);
  v126 = swift_retain();
  v127 = v158;
  static DispatchQoS.unspecified.getter(v126);
  v175 = (uint64_t)_swiftEmptyArrayStorage;
  v128 = v159;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v175, v148, v150, v109, v151);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v119, v127, v128, v125);
  _Block_release(v125);
  swift_release();
  ((void (*)(char *, uint64_t))v155)(v128, v109);
  ((void (*)(char *, uint64_t))v154)(v127, v160);
  v120(v119, v121);
  (*(void (**)(char *, uint64_t))(v162 + 8))(v161, v123);
  swift_release();
  return swift_release();
}

uint64_t sub_1003C94FC(int a1, void (*a2)(os_log_t, uint64_t), uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD), _QWORD *a5, int a6, void (*a7)(_QWORD, _QWORD, _QWORD), uint64_t a8, char a9, void (*a10)(_QWORD, _QWORD), char a11, unsigned __int8 a12, void (*a13)(_QWORD, _QWORD, _QWORD), uint64_t a14, __int128 a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void ***v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  void (*v60)(_QWORD, _QWORD, _QWORD);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t inited;
  uint64_t v65;
  NSURL *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(_QWORD, _QWORD, _QWORD);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  char *v104;
  void (*v105)(os_log_t, uint64_t);
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (**v114)(uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  void (*v120)(char *, uint64_t);
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(_QWORD, _QWORD, _QWORD);
  int v134;
  uint64_t v135;
  void (*v136)(_QWORD, _QWORD);
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  NSURL *v143;
  char *v144;
  _QWORD *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  NSURL *v151;
  uint64_t v152;
  void (*v153)(_QWORD, _QWORD, _QWORD);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(_QWORD, _QWORD, _QWORD);
  uint64_t v165;
  uint64_t v166;
  char v167[8];
  void **aBlock;
  uint64_t v169;
  uint64_t (*v170)(uint64_t);
  void *v171;
  uint64_t (*v172)();
  uint64_t v173;
  char v174[8];
  uint64_t v175;

  v165 = a8;
  v164 = a7;
  LODWORD(v163) = a6;
  v145 = a5;
  v153 = a4;
  v152 = a3;
  v151 = (NSURL *)a2;
  LODWORD(v150) = a1;
  v148 = type metadata accessor for DispatchQoS.QoSClass(0);
  v147 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v146 = (char *)&v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for DispatchTime(0);
  v138 = *(_QWORD *)(v140 - 8);
  v18 = __chkstk_darwin(v140);
  v137 = (char *)&v130 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v139 = (char *)&v130 - v20;
  v156 = type metadata accessor for DispatchWorkItemFlags(0);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v159 = (char *)&v130 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = type metadata accessor for DispatchQoS(0);
  v154 = *(_QWORD *)(v160 - 8);
  __chkstk_darwin(v160);
  v158 = (char *)&v130 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8(&qword_1010ED860);
  v24 = __chkstk_darwin(v23);
  v144 = (char *)&v130 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v143 = (NSURL *)((char *)&v130 - v26);
  v157 = type metadata accessor for UUID(0);
  v162 = *(_QWORD *)(v157 - 8);
  v27 = *(_QWORD *)(v162 + 64);
  v28 = __chkstk_darwin(v157);
  v149 = (char *)&v130 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v28);
  v142 = (char *)&v130 - v30;
  v31 = __chkstk_darwin(v29);
  v141 = (uint64_t)&v130 - v32;
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v130 - v34;
  __chkstk_darwin(v33);
  v161 = (char *)&v130 - v36;
  v37 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v37);
  v39 = (void ***)((char *)&v130 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = __chkstk_darwin(v40);
  v44 = (char *)&v130 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v46 = (char *)&v130 - v45;
  v166 = a17;
  v47 = swift_retain();
  static SystemInfo.lockState.getter(v47);
  (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v44, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v40);
  v48 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v49 = dispatch thunk of static Equatable.== infix(_:_:)(v46, v44, v40, v48);
  v50 = *(void (**)(char *, uint64_t))(v41 + 8);
  v50(v44, v40);
  v51 = ((uint64_t (*)(char *, uint64_t))v50)(v46, v40);
  if ((v49 & 1) != 0)
  {
    v52 = static os_log_type_t.error.getter(v51);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    os_log(_:dso:log:_:_:)(v52, &_mh_execute_header, qword_1011B7D30, "Attempt to send message before first unlock!", 44, 2, _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0);
    v54 = v53;
    v175 = 5;
    v55 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v56 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v57 = v55;
    v58 = v54;
LABEL_11:
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v175, v57, v58, v56);
    *v39 = aBlock;
    swift_storeEnumTagMultiPayload(v39, v37, 1);
    sub_1003A125C((uint64_t)v39, v166, "Error sending find my AirPods family share message: %@", 54);
    sub_100004048((uint64_t)v39, &qword_1010F4868);
    return swift_release();
  }
  v59 = v163;
  v60 = v164;
  v61 = v165;
  v62 = sub_10038D0CC(v163, (uint64_t)v164, v165);
  if ((v62 & 1) == 0)
  {
    v68 = static os_log_type_t.error.getter(v62);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v69 = qword_1011B7D30;
    v70 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v71 = swift_allocObject(v70, 72, 7);
    *(_OWORD *)(v71 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v71 + 56) = &type metadata for String;
    *(_QWORD *)(v71 + 64) = sub_10001AA00();
    *(_QWORD *)(v71 + 32) = v60;
    *(_QWORD *)(v71 + 40) = v61;
    *(_QWORD *)&v72 = swift_bridgeObjectRetain(v61).n128_u64[0];
    os_log(_:dso:log:_:_:)(v68, &_mh_execute_header, v69, "Not sending since %@ has no IDS registered devices", 50, 2, v71, v72);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    v74 = v73;
    v175 = 12;
    v75 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v56 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v57 = v75;
    v58 = v74;
    goto LABEL_11;
  }
  v132 = a14;
  v133 = a13;
  v134 = a12;
  v136 = a10;
  v135 = *(_QWORD *)(a16 + 24);
  v63 = sub_10001A9A8(&qword_1010EE2B0);
  v131 = a16;
  if ((a9 & 1) != 0)
  {
    inited = swift_initStackObject(v63, v167);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_BYTE *)(inited + 32) = v59;
    *(_QWORD *)(inited + 40) = v60;
    *(_QWORD *)(inited + 48) = v61;
    v65 = v162;
    v66 = v143;
    v67 = v157;
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v162 + 56))(v143, 1, 1, v157);
    swift_bridgeObjectRetain(v61);
    sub_10038F3FC(v150, v151, v152, v153, v145, inited, v66, v136, (uint64_t)v35, a11 & 1, v134 & 1, v133, v132, a15);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v66, &qword_1010ED860);
    v82 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
    v82(v161, v35, v67);
  }
  else
  {
    v76 = swift_initStackObject(v63, v174);
    *(_OWORD *)(v76 + 16) = xmmword_100E22B00;
    *(_BYTE *)(v76 + 32) = v59;
    *(_QWORD *)(v76 + 40) = v60;
    *(_QWORD *)(v76 + 48) = v61;
    v77 = v162;
    v78 = v144;
    v67 = v157;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v162 + 56))(v144, 1, 1, v157);
    swift_bridgeObjectRetain(v61);
    v79 = (uint64_t)v142;
    UUID.init()(v80);
    v81 = v141;
    sub_10037DC5C(v150, (void (*)(os_log_t, uint64_t))v151, v152, (unint64_t)v153, v79, v76, (uint64_t (*)(_QWORD, _QWORD, _QWORD))v78, (uint64_t)v136, v141, a11 & 1, v134 & 1, (uint64_t)v133, v132, a15, &qword_1010F9EF8, &qword_1010F9F00, &qword_1010F9F18, (uint64_t)&type metadata for BeaconSharingMessageType, &unk_101071A10,
      (uint64_t)&unk_1010F9F60);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v79, v67);
    sub_100004048((uint64_t)v78, &qword_1010ED860);
    v83 = v81;
    v82 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
    v82(v161, (char *)v83, v67);
  }
  v84 = v67;
  v85 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  swift_allocObject(v85, *(unsigned int *)(v85 + 48), *(unsigned __int16 *)(v85 + 52));
  v86 = (void (*)(_QWORD, _QWORD, _QWORD))Future.init()();
  v87 = static os_log_type_t.default.getter(v86);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v88 = qword_1011B7D30;
  v89 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v90 = swift_allocObject(v89, 72, 7);
  *(_OWORD *)(v90 + 16) = xmmword_100E22B00;
  v91 = v161;
  v92 = UUID.uuidString.getter(v90);
  v94 = v93;
  *(_QWORD *)(v90 + 56) = &type metadata for String;
  *(_QWORD *)(v90 + 64) = sub_10001AA00();
  *(_QWORD *)(v90 + 32) = v92;
  *(_QWORD *)(v90 + 40) = v94;
  os_log(_:dso:log:_:_:)(v87, &_mh_execute_header, v88, "Setting %@ to pending", 21, 2, v90);
  swift_bridgeObjectRelease();
  v95 = v131;
  v165 = *(_QWORD *)(v131 + 168);
  v96 = v162;
  v164 = *(void (**)(_QWORD, _QWORD, _QWORD))(v162 + 16);
  v97 = v149;
  v164(v149, v91, v84);
  v98 = *(unsigned __int8 *)(v96 + 80);
  v152 = ((v98 + 24) & ~v98) + v27;
  v99 = (v98 + 24) & ~v98;
  v163 = v98 | 7;
  v100 = (v152 + 7) & 0xFFFFFFFFFFFFFFF8;
  v101 = swift_allocObject(&unk_101073BA8, v100 + 8, v98 | 7);
  *(_QWORD *)(v101 + 16) = v95;
  v147 = v99;
  v82((char *)(v101 + v99), v97, v84);
  *(_QWORD *)(v101 + v100) = v86;
  v172 = sub_1003BB468;
  v173 = v101;
  aBlock = _NSConcreteStackBlock;
  v169 = 1107296256;
  v170 = sub_100016FB8;
  v171 = &unk_101073BC0;
  v102 = _Block_copy(&aBlock);
  swift_retain();
  v103 = swift_retain();
  v153 = v86;
  v104 = v158;
  static DispatchQoS.unspecified.getter(v103);
  v175 = (uint64_t)_swiftEmptyArrayStorage;
  v105 = (void (*)(os_log_t, uint64_t))sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v151 = (NSURL *)v105;
  v106 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v148 = v106;
  v150 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v107 = v159;
  v108 = v106;
  v109 = v156;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v175, v108, v150, v156, v105);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v104, v107, v102);
  _Block_release(v102);
  v155 = *(_QWORD *)(v155 + 8);
  ((void (*)(char *, uint64_t))v155)(v107, v109);
  v154 = *(_QWORD *)(v154 + 8);
  ((void (*)(char *, uint64_t))v154)(v104, v160);
  swift_release();
  v110 = v149;
  v111 = v161;
  v164(v149, v161, v84);
  v112 = swift_allocObject(&unk_101073BF8, v100 + 16, v163);
  v113 = v131;
  *(_QWORD *)(v112 + 16) = v131;
  v82((char *)(v112 + v99), v110, v84);
  v114 = (uint64_t (**)(uint64_t))(v112 + v100);
  v115 = v166;
  *v114 = sub_1003D6E48;
  v114[1] = (uint64_t (*)(uint64_t))v115;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1003BB470, v112);
  swift_release();
  swift_release();
  v116 = swift_allocObject(&unk_101073C20, 32, 7);
  *(_QWORD *)(v116 + 16) = sub_1003D6E48;
  *(_QWORD *)(v116 + 24) = v115;
  swift_retain();
  Future.addFailure(block:)(sub_1003D9B84, v116);
  swift_release();
  v117 = swift_release();
  v118 = v137;
  static DispatchTime.now()(v117);
  v119 = v139;
  + infix(_:_:)(v118, 360.0);
  v120 = *(void (**)(char *, uint64_t))(v138 + 8);
  v121 = v140;
  v120(v118, v140);
  v122 = v111;
  v123 = v157;
  v164(v110, v122, v157);
  v124 = swift_allocObject(&unk_101073C48, v152, v163);
  *(_QWORD *)(v124 + 16) = v113;
  v82((char *)(v124 + v147), v110, v123);
  v172 = sub_1003BB4B0;
  v173 = v124;
  aBlock = _NSConcreteStackBlock;
  v169 = 1107296256;
  v170 = sub_100016FB8;
  v171 = &unk_101073C60;
  v125 = _Block_copy(&aBlock);
  v126 = swift_retain();
  v127 = v158;
  static DispatchQoS.unspecified.getter(v126);
  v175 = (uint64_t)_swiftEmptyArrayStorage;
  v128 = v159;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v175, v148, v150, v109, v151);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v119, v127, v128, v125);
  _Block_release(v125);
  swift_release();
  ((void (*)(char *, uint64_t))v155)(v128, v109);
  ((void (*)(char *, uint64_t))v154)(v127, v160);
  v120(v119, v121);
  (*(void (**)(char *, uint64_t))(v162 + 8))(v161, v123);
  swift_release();
  return swift_release();
}

uint64_t sub_1003CA720(int a1, void (*a2)(os_log_t, uint64_t), uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD), _QWORD *a5, int a6, uint64_t a7, void (*a8)(_QWORD, _QWORD, _QWORD), char a9, NSObject *a10, char a11, unsigned __int8 a12, void (*a13)(_QWORD, _QWORD, _QWORD), uint64_t a14, __int128 a15, uint64_t a16, void *a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void ***v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  char v61;
  uint64_t v62;
  void (*v63)(_QWORD, _QWORD, _QWORD);
  uint64_t v64;
  uint64_t v65;
  uint64_t inited;
  uint64_t v67;
  NSURL *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void (*v79)(_QWORD, _QWORD, _QWORD);
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(_QWORD, _QWORD, _QWORD);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, char *, uint64_t);
  void *v106;
  uint64_t v107;
  char *v108;
  void (*v109)(os_log_t, uint64_t);
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  void (**v117)(uint64_t);
  void (*v118)(uint64_t);
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  void (*v123)(char *, uint64_t);
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v133;
  int v134;
  uint64_t v135;
  void (*v136)(_QWORD, _QWORD, _QWORD);
  int v137;
  NSObject *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  NSURL *v145;
  char *v146;
  _QWORD *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  NSURL *v153;
  uint64_t v154;
  void (*v155)(_QWORD, _QWORD, _QWORD);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(_QWORD, _QWORD, _QWORD);
  void (*v168)(char *, char *, uint64_t);
  uint64_t v169;
  char v170[8];
  void **aBlock;
  uint64_t v172;
  uint64_t (*v173)(uint64_t);
  void *v174;
  uint64_t (*v175)();
  uint64_t v176;
  char v177[8];
  uint64_t v178;

  v167 = a8;
  v166 = a7;
  LODWORD(v165) = a6;
  v147 = a5;
  v155 = a4;
  v154 = a3;
  v153 = (NSURL *)a2;
  LODWORD(v152) = a1;
  v150 = type metadata accessor for DispatchQoS.QoSClass(0);
  v149 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v148 = (char *)&v133 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for DispatchTime(0);
  v140 = *(_QWORD *)(v142 - 8);
  v19 = __chkstk_darwin(v142);
  v139 = (char *)&v133 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v141 = (char *)&v133 - v21;
  v159 = type metadata accessor for DispatchWorkItemFlags(0);
  v158 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v161 = (char *)&v133 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = type metadata accessor for DispatchQoS(0);
  v157 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v160 = (char *)&v133 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8(&qword_1010ED860);
  v25 = __chkstk_darwin(v24);
  v146 = (char *)&v133 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v145 = (NSURL *)((char *)&v133 - v27);
  v156 = type metadata accessor for UUID(0);
  v164 = *(_QWORD *)(v156 - 8);
  v28 = *(_QWORD *)(v164 + 64);
  v29 = __chkstk_darwin(v156);
  v151 = (char *)&v133 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v29);
  v144 = (char *)&v133 - v31;
  v32 = __chkstk_darwin(v30);
  v143 = (uint64_t)&v133 - v33;
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v133 - v35;
  __chkstk_darwin(v34);
  v163 = (char *)&v133 - v37;
  v168 = (void (*)(char *, char *, uint64_t))sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v168);
  v39 = (void ***)((char *)&v133 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = __chkstk_darwin(v40);
  v44 = (char *)&v133 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v46 = (char *)&v133 - v45;
  v47 = swift_allocObject(&unk_101071D08, 32, 7);
  *(_QWORD *)(v47 + 16) = a17;
  *(_QWORD *)(v47 + 24) = a18;
  v169 = v47;
  v48 = a17;
  v49 = swift_retain();
  static SystemInfo.lockState.getter(v49);
  (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v44, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v40);
  v50 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v51 = dispatch thunk of static Equatable.== infix(_:_:)(v46, v44, v40, v50);
  v52 = *(void (**)(char *, uint64_t))(v41 + 8);
  v52(v44, v40);
  v53 = ((uint64_t (*)(char *, uint64_t))v52)(v46, v40);
  if ((v51 & 1) != 0)
  {
    v54 = static os_log_type_t.error.getter(v53);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, qword_1011B7D30, "Attempt to send message before first unlock!", 44, 2, _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0);
    v56 = v55;
    v178 = 5;
    v57 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v58 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v178, v57, v56, v58);
    *v39 = aBlock;
    swift_storeEnumTagMultiPayload(v39, v168, 1);
    v59 = (uint64_t)v39;
    v60 = v48;
LABEL_11:
    sub_1003AB764(v59, v60, a18, "Successfully sent updateSharedBeacon: %@", 40);
    sub_100004048((uint64_t)v39, &qword_1010F4868);
    return swift_release();
  }
  v138 = v48;
  v61 = v165;
  v62 = v166;
  v63 = v167;
  v64 = sub_10038D0CC(v165, v166, (uint64_t)v167);
  if ((v64 & 1) == 0)
  {
    v70 = static os_log_type_t.error.getter(v64);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v71 = qword_1011B7D30;
    v72 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v73 = swift_allocObject(v72, 72, 7);
    *(_OWORD *)(v73 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v73 + 56) = &type metadata for String;
    *(_QWORD *)(v73 + 64) = sub_10001AA00();
    *(_QWORD *)(v73 + 32) = v62;
    *(_QWORD *)(v73 + 40) = v63;
    *(_QWORD *)&v74 = swift_bridgeObjectRetain(v63).n128_u64[0];
    os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v71, "Not sending since %@ has no IDS registered devices", 50, 2, v73, v74);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    v76 = v75;
    v178 = 12;
    v77 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v78 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v178, v77, v76, v78);
    *v39 = aBlock;
    swift_storeEnumTagMultiPayload(v39, v168, 1);
    v59 = (uint64_t)v39;
    v60 = v138;
    goto LABEL_11;
  }
  v135 = a14;
  v136 = a13;
  v137 = a12;
  v138 = a10;
  v134 = a11 & 1;
  v168 = *(void (**)(char *, char *, uint64_t))(a16 + 24);
  v65 = sub_10001A9A8(&qword_1010EE2B0);
  if ((a9 & 1) != 0)
  {
    v133 = a16;
    inited = swift_initStackObject(v65, v170);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_BYTE *)(inited + 32) = v61;
    *(_QWORD *)(inited + 40) = v62;
    *(_QWORD *)(inited + 48) = v63;
    v67 = v164;
    v68 = v145;
    v69 = v156;
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v164 + 56))(v145, 1, 1, v156);
    swift_bridgeObjectRetain(v63);
    sub_10038F3FC(v152, v153, v154, v155, v147, inited, v68, v138, (uint64_t)v36, v134, v137 & 1, v136, v135, a15);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v68, &qword_1010ED860);
    v168 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
    v168(v163, v36, v69);
    v86 = v69;
  }
  else
  {
    v79 = v63;
    v80 = swift_initStackObject(v65, v177);
    *(_OWORD *)(v80 + 16) = xmmword_100E22B00;
    *(_BYTE *)(v80 + 32) = v61;
    *(_QWORD *)(v80 + 40) = v62;
    *(_QWORD *)(v80 + 48) = v79;
    v81 = v164;
    v82 = v146;
    v86 = v156;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v164 + 56))(v146, 1, 1, v156);
    swift_bridgeObjectRetain(v79);
    v83 = (uint64_t)v144;
    UUID.init()(v84);
    v85 = v143;
    sub_10037DC5C(v152, (void (*)(os_log_t, uint64_t))v153, v154, (unint64_t)v155, v83, v80, (uint64_t (*)(_QWORD, _QWORD, _QWORD))v82, (uint64_t)v138, v143, v134, v137 & 1, (uint64_t)v136, v135, a15, &qword_1010F9EF8, &qword_1010F9F00, &qword_1010F9F18, (uint64_t)&type metadata for BeaconSharingMessageType, &unk_101071A10,
      (uint64_t)&unk_1010F9F60);
    v133 = a16;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v83, v86);
    sub_100004048((uint64_t)v82, &qword_1010ED860);
    v168 = *(void (**)(char *, char *, uint64_t))(v81 + 32);
    v168(v163, (char *)v85, v86);
  }
  v87 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  swift_allocObject(v87, *(unsigned int *)(v87 + 48), *(unsigned __int16 *)(v87 + 52));
  v88 = (void (*)(_QWORD, _QWORD, _QWORD))Future.init()();
  v89 = static os_log_type_t.default.getter(v88);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v90 = qword_1011B7D30;
  v91 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v92 = swift_allocObject(v91, 72, 7);
  *(_OWORD *)(v92 + 16) = xmmword_100E22B00;
  v93 = v163;
  v94 = UUID.uuidString.getter(v92);
  v96 = v95;
  *(_QWORD *)(v92 + 56) = &type metadata for String;
  *(_QWORD *)(v92 + 64) = sub_10001AA00();
  *(_QWORD *)(v92 + 32) = v94;
  *(_QWORD *)(v92 + 40) = v96;
  os_log(_:dso:log:_:_:)(v89, &_mh_execute_header, v90, "Setting %@ to pending", 21, 2, v92);
  swift_bridgeObjectRelease();
  v97 = v133;
  v156 = *(_QWORD *)(v133 + 168);
  v98 = v164;
  v167 = *(void (**)(_QWORD, _QWORD, _QWORD))(v164 + 16);
  v99 = v151;
  v167(v151, v93, v86);
  v100 = *(unsigned __int8 *)(v98 + 80);
  v154 = ((v100 + 24) & ~v100) + v28;
  v101 = (v100 + 24) & ~v100;
  v166 = v101;
  v165 = v100 | 7;
  v102 = (v154 + 7) & 0xFFFFFFFFFFFFFFF8;
  v103 = swift_allocObject(&unk_101071D80, v102 + 8, v100 | 7);
  *(_QWORD *)(v103 + 16) = v97;
  v104 = v103 + v101;
  v105 = (void (*)(uint64_t, char *, uint64_t))v168;
  v168((char *)v104, v99, v86);
  *(_QWORD *)(v103 + v102) = v88;
  v175 = sub_1003BB468;
  v176 = v103;
  aBlock = _NSConcreteStackBlock;
  v172 = 1107296256;
  v173 = sub_100016FB8;
  v174 = &unk_101071D98;
  v106 = _Block_copy(&aBlock);
  swift_retain();
  v107 = swift_retain();
  v155 = v88;
  v108 = v160;
  static DispatchQoS.unspecified.getter(v107);
  v178 = (uint64_t)_swiftEmptyArrayStorage;
  v109 = (void (*)(os_log_t, uint64_t))sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v153 = (NSURL *)v109;
  v110 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v150 = v110;
  v152 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v111 = v161;
  v112 = v110;
  v113 = v159;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v178, v112, v152, v159, v109);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v108, v111, v106);
  _Block_release(v106);
  v158 = *(_QWORD *)(v158 + 8);
  ((void (*)(char *, uint64_t))v158)(v111, v113);
  v157 = *(_QWORD *)(v157 + 8);
  ((void (*)(char *, uint64_t))v157)(v108, v162);
  swift_release();
  v114 = v151;
  v115 = v163;
  v167(v151, v163, v86);
  v116 = swift_allocObject(&unk_101071DD0, v102 + 16, v165);
  *(_QWORD *)(v116 + 16) = v97;
  v105(v116 + v166, v114, v86);
  v117 = (void (**)(uint64_t))(v116 + v102);
  v118 = (void (*)(uint64_t))v169;
  *v117 = sub_1003CF454;
  v117[1] = v118;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1003BB470, v116);
  swift_release();
  swift_release();
  v119 = swift_allocObject(&unk_101071DF8, 32, 7);
  *(_QWORD *)(v119 + 16) = sub_1003CF454;
  *(_QWORD *)(v119 + 24) = v118;
  swift_retain();
  Future.addFailure(block:)(sub_1003D9B84, v119);
  swift_release();
  v120 = swift_release();
  v121 = v139;
  static DispatchTime.now()(v120);
  v122 = v141;
  + infix(_:_:)(v121, 360.0);
  v123 = *(void (**)(char *, uint64_t))(v140 + 8);
  v124 = v142;
  v123(v121, v142);
  v125 = v115;
  v126 = v86;
  v167(v114, v125, v86);
  v127 = swift_allocObject(&unk_101071E20, v154, v165);
  *(_QWORD *)(v127 + 16) = v97;
  v168((char *)(v127 + v166), v114, v86);
  v175 = sub_1003BB4B0;
  v176 = v127;
  aBlock = _NSConcreteStackBlock;
  v172 = 1107296256;
  v173 = sub_100016FB8;
  v174 = &unk_101071E38;
  v128 = _Block_copy(&aBlock);
  v129 = swift_retain();
  v130 = v160;
  static DispatchQoS.unspecified.getter(v129);
  v178 = (uint64_t)_swiftEmptyArrayStorage;
  v131 = v161;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v178, v150, v152, v113, v153);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v122, v130, v131, v128);
  _Block_release(v128);
  swift_release();
  ((void (*)(char *, uint64_t))v158)(v131, v113);
  ((void (*)(char *, uint64_t))v157)(v130, v162);
  v123(v122, v124);
  (*(void (**)(char *, uint64_t))(v164 + 8))(v163, v126);
  swift_release();
  return swift_release();
}

uint64_t sub_1003CB9F8(int a1, void (*a2)(os_log_t, uint64_t), uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD), _QWORD *a5, int a6, void (*a7)(_QWORD, _QWORD), void (*a8)(_QWORD, _QWORD), char a9, void (*a10)(_QWORD, _QWORD), char a11, unsigned __int8 a12, char *a13, void (*a14)(char *, uint64_t, uint64_t), __int128 a15, uint64_t a16, uint64_t a17, void (*a18)(char *, uint64_t, uint64_t), unsigned __int8 a19, void (*a20)(_QWORD, _QWORD),uint64_t a21,void (*a22)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void ***v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void *v51;
  NSObject *v52;
  uint64_t v53;
  char v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  void (*v66)(_QWORD, _QWORD);
  void *v67;
  NSObject *v68;
  NSObject *v69;
  uint64_t v70;
  char v71;
  void (*v72)(_QWORD, _QWORD);
  void (*v73)(_QWORD, _QWORD);
  uint64_t v74;
  void (*v75)(_QWORD, _QWORD);
  uint64_t v76;
  uint64_t inited;
  uint64_t v78;
  NSURL *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  void *v118;
  const void *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  void (**v130)(uint64_t);
  void (*v131)(uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  void (*v137)(char *, uint64_t);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  NSURL *v154;
  char *v155;
  _QWORD *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  int v161;
  NSURL *v162;
  uint64_t v163;
  void (*v164)(_QWORD, _QWORD, _QWORD);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(_QWORD, _QWORD);
  void (*v175)(_QWORD, _QWORD);
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void (*v179)(char *, uint64_t, uint64_t);
  char *v180;
  uint64_t v181;
  void (*v182)(_QWORD, _QWORD, _QWORD);
  uint64_t v183;
  void (*v184)(_QWORD, _QWORD);
  char v185[8];
  void **aBlock;
  uint64_t v187;
  uint64_t (*v188)(uint64_t);
  void *v189;
  uint64_t (*v190)();
  uint64_t v191;
  char v192[8];
  uint64_t v193;

  v175 = a8;
  v174 = a7;
  LODWORD(v173) = a6;
  v156 = a5;
  v164 = a4;
  v163 = a3;
  v162 = (NSURL *)a2;
  v161 = a1;
  v184 = a20;
  v182 = a22;
  v159 = type metadata accessor for DispatchQoS.QoSClass(0);
  v158 = *(_QWORD *)(v159 - 8);
  __chkstk_darwin(v159);
  v157 = (char *)&v146 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = type metadata accessor for DispatchTime(0);
  v148 = *(_QWORD *)(v150 - 8);
  v23 = __chkstk_darwin(v150);
  v147 = (char *)&v146 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v149 = (char *)&v146 - v25;
  v167 = type metadata accessor for DispatchWorkItemFlags(0);
  v166 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v170 = (char *)&v146 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = type metadata accessor for DispatchQoS(0);
  v165 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v169 = (char *)&v146 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001A9A8(&qword_1010ED860);
  v29 = __chkstk_darwin(v28);
  v155 = (char *)&v146 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v154 = (NSURL *)((char *)&v146 - v31);
  v176 = type metadata accessor for UUID(0);
  v172 = *(_QWORD *)(v176 - 8);
  v32 = *(_QWORD *)(v172 + 64);
  v33 = __chkstk_darwin(v176);
  v160 = (char *)&v146 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v33);
  v153 = (char *)&v146 - v35;
  v36 = __chkstk_darwin(v34);
  v152 = (uint64_t)&v146 - v37;
  v38 = __chkstk_darwin(v36);
  v151 = (uint64_t)&v146 - v39;
  __chkstk_darwin(v38);
  v168 = (char *)&v146 - v40;
  v177 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v177);
  v42 = (void ***)((char *)&v146 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  v43 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = __chkstk_darwin(v43);
  v47 = (char *)&v146 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v49 = (char *)&v146 - v48;
  v50 = swift_allocObject(&unk_101073F18, 64, 7);
  v178 = a17;
  *(_QWORD *)(v50 + 16) = a17;
  *(_QWORD *)(v50 + 24) = a18;
  LODWORD(v180) = a19;
  *(_BYTE *)(v50 + 32) = a19;
  *(_QWORD *)(v50 + 40) = v184;
  *(_QWORD *)(v50 + 48) = a21;
  v183 = v50;
  v51 = v182;
  *(_QWORD *)(v50 + 56) = v182;
  v179 = a18;
  swift_bridgeObjectRetain(a18);
  v181 = a21;
  swift_bridgeObjectRetain(a21);
  v52 = v51;
  static SystemInfo.lockState.getter(v52);
  (*(void (**)(char *, _QWORD, uint64_t))(v44 + 104))(v47, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v43);
  v53 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v54 = dispatch thunk of static Equatable.== infix(_:_:)(v49, v47, v43, v53);
  v55 = *(void (**)(char *, uint64_t))(v44 + 8);
  v55(v47, v43);
  v56 = ((uint64_t (*)(char *, uint64_t))v55)(v49, v43);
  if ((v54 & 1) != 0)
  {
    v57 = static os_log_type_t.error.getter(v56);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, qword_1011B7D30, "Attempt to send message before first unlock!", 44, 2, _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0);
    v59 = v58;
    v193 = 5;
    v60 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v61 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v193, v60, v59, v61);
    *v42 = aBlock;
    swift_storeEnumTagMultiPayload(v42, v177, 1);
    v62 = (uint64_t)v42;
    v63 = v178;
    v64 = v179;
    v65 = v180;
    v66 = v184;
    v67 = (void *)v181;
    v68 = v52;
LABEL_11:
    sub_1003ABC58(v62, v63, (uint64_t)v64, v65, (uint64_t)v66, v67, v68);
    sub_100004048((uint64_t)v42, &qword_1010F4868);
    return swift_release();
  }
  v69 = v52;
  v70 = a16;
  v71 = v173;
  v72 = v174;
  v73 = v175;
  v74 = sub_10038D0CC(v173, (uint64_t)v174, (uint64_t)v175);
  if ((v74 & 1) == 0)
  {
    v82 = static os_log_type_t.error.getter(v74);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v83 = qword_1011B7D30;
    v84 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v85 = swift_allocObject(v84, 72, 7);
    *(_OWORD *)(v85 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v85 + 56) = &type metadata for String;
    *(_QWORD *)(v85 + 64) = sub_10001AA00();
    *(_QWORD *)(v85 + 32) = v72;
    *(_QWORD *)(v85 + 40) = v73;
    *(_QWORD *)&v86 = swift_bridgeObjectRetain(v73).n128_u64[0];
    os_log(_:dso:log:_:_:)(v82, &_mh_execute_header, v83, "Not sending since %@ has no IDS registered devices", 50, 2, v85, v86);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    v88 = v87;
    v193 = 12;
    v89 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v90 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v193, v89, v88, v90);
    *v42 = aBlock;
    swift_storeEnumTagMultiPayload(v42, v177, 1);
    v62 = (uint64_t)v42;
    v63 = v178;
    v64 = v179;
    v65 = v180;
    v66 = v184;
    v67 = (void *)v181;
    v68 = v69;
    goto LABEL_11;
  }
  v75 = v73;
  v179 = a14;
  v180 = a13;
  LODWORD(v181) = a12;
  v184 = a10;
  v182 = *(void (**)(_QWORD, _QWORD, _QWORD))(a16 + 24);
  v76 = sub_10001A9A8(&qword_1010EE2B0);
  if ((a9 & 1) != 0)
  {
    v178 = a16;
    inited = swift_initStackObject(v76, v185);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_BYTE *)(inited + 32) = v71;
    *(_QWORD *)(inited + 40) = v72;
    *(_QWORD *)(inited + 48) = v75;
    v78 = v172;
    v79 = v154;
    v80 = v176;
    (*(void (**)(NSURL *, uint64_t, uint64_t, uint64_t))(v172 + 56))(v154, 1, 1, v176);
    swift_bridgeObjectRetain(v75);
    v81 = v151;
    sub_10038F3FC(v161, v162, v163, v164, v156, inited, v79, v184, v151, a11 & 1, v181 & 1, (void (*)(_QWORD, _QWORD, _QWORD))v180, (uint64_t)v179, a15);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v79, &qword_1010ED860);
    v100 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 32);
    v100(v168, v81, v80);
    v70 = v178;
  }
  else
  {
    v91 = swift_initStackObject(v76, v192);
    v92 = v71;
    v93 = v91;
    *(_OWORD *)(v91 + 16) = xmmword_100E22B00;
    *(_BYTE *)(v91 + 32) = v92;
    *(_QWORD *)(v91 + 40) = v72;
    *(_QWORD *)(v91 + 48) = v73;
    v94 = v172;
    v95 = v155;
    v96 = v176;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v172 + 56))(v155, 1, 1, v176);
    swift_bridgeObjectRetain(v75);
    v97 = (uint64_t)v153;
    UUID.init()(v98);
    v99 = v152;
    sub_10037DC5C(v161, (void (*)(os_log_t, uint64_t))v162, v163, (unint64_t)v164, v97, v93, (uint64_t (*)(_QWORD, _QWORD, _QWORD))v95, (uint64_t)v184, v152, a11 & 1, v181 & 1, (uint64_t)v180, (uint64_t)v179, a15, &qword_1010F9EF8, &qword_1010F9F00, &qword_1010F9F18, (uint64_t)&type metadata for BeaconSharingMessageType, &unk_101071A10,
      (uint64_t)&unk_1010F9F60);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v97, v96);
    sub_100004048((uint64_t)v95, &qword_1010ED860);
    v100 = *(void (**)(char *, uint64_t, uint64_t))(v94 + 32);
    v100(v168, v99, v96);
  }
  v101 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  swift_allocObject(v101, *(unsigned int *)(v101 + 48), *(unsigned __int16 *)(v101 + 52));
  v102 = Future.init()();
  v103 = static os_log_type_t.default.getter(v102);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v104 = qword_1011B7D30;
  v105 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v106 = swift_allocObject(v105, 72, 7);
  *(_OWORD *)(v106 + 16) = xmmword_100E22B00;
  v107 = v168;
  v108 = UUID.uuidString.getter(v106);
  v110 = v109;
  *(_QWORD *)(v106 + 56) = &type metadata for String;
  *(_QWORD *)(v106 + 64) = sub_10001AA00();
  *(_QWORD *)(v106 + 32) = v108;
  *(_QWORD *)(v106 + 40) = v110;
  os_log(_:dso:log:_:_:)(v103, &_mh_execute_header, v104, "Setting %@ to pending", 21, 2, v106);
  swift_bridgeObjectRelease();
  v184 = *(void (**)(_QWORD, _QWORD))(v70 + 168);
  v111 = v172;
  v182 = *(void (**)(_QWORD, _QWORD, _QWORD))(v172 + 16);
  v112 = v160;
  v113 = v176;
  v182(v160, v107, v176);
  v114 = *(unsigned __int8 *)(v111 + 80);
  v177 = ((v114 + 24) & ~v114) + v32;
  v115 = (char *)((v114 + 24) & ~v114);
  v180 = v115;
  v181 = v114 | 7;
  v116 = (v177 + 7) & 0xFFFFFFFFFFFFFFF8;
  v117 = swift_allocObject(&unk_101073F90, v116 + 8, v114 | 7);
  *(_QWORD *)(v117 + 16) = v70;
  v100(&v115[v117], (uint64_t)v112, v113);
  *(_QWORD *)(v117 + v116) = v102;
  v190 = sub_1003BB468;
  v191 = v117;
  aBlock = _NSConcreteStackBlock;
  v187 = 1107296256;
  v188 = sub_100016FB8;
  v189 = &unk_101073FA8;
  v118 = _Block_copy(&aBlock);
  v179 = v100;
  v119 = v118;
  swift_retain();
  v120 = swift_retain();
  v178 = v102;
  v121 = v169;
  static DispatchQoS.unspecified.getter(v120);
  v193 = (uint64_t)_swiftEmptyArrayStorage;
  v122 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v173 = v122;
  v123 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v163 = v123;
  v164 = (void (*)(_QWORD, _QWORD, _QWORD))sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v124 = v70;
  v125 = v170;
  v126 = v167;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v193, v123, v164, v167, v122);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v121, v125, v119);
  _Block_release(v119);
  v175 = *(void (**)(_QWORD, _QWORD))(v166 + 8);
  v175(v125, v126);
  v174 = *(void (**)(_QWORD, _QWORD))(v165 + 8);
  v174(v121, v171);
  swift_release();
  v127 = v160;
  v128 = v168;
  v182(v160, v168, v113);
  v129 = swift_allocObject(&unk_101073FE0, v116 + 16, v181);
  *(_QWORD *)(v129 + 16) = v124;
  v179(&v180[v129], (uint64_t)v127, v113);
  v130 = (void (**)(uint64_t))(v129 + v116);
  v131 = (void (*)(uint64_t))v183;
  *v130 = sub_1003D81D8;
  v130[1] = v131;
  v132 = v124;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1003BB470, v129);
  swift_release();
  swift_release();
  v133 = swift_allocObject(&unk_101074008, 32, 7);
  *(_QWORD *)(v133 + 16) = sub_1003D81D8;
  *(_QWORD *)(v133 + 24) = v131;
  swift_retain();
  Future.addFailure(block:)(sub_1003D9B84, v133);
  swift_release();
  v134 = swift_release();
  v135 = v147;
  static DispatchTime.now()(v134);
  v136 = v149;
  + infix(_:_:)(v135, 360.0);
  v137 = *(void (**)(char *, uint64_t))(v148 + 8);
  v138 = v150;
  v137(v135, v150);
  v139 = v176;
  v182(v127, v128, v176);
  v140 = swift_allocObject(&unk_101074030, v177, v181);
  *(_QWORD *)(v140 + 16) = v132;
  v179(&v180[v140], (uint64_t)v127, v139);
  v190 = sub_1003BB4B0;
  v191 = v140;
  aBlock = _NSConcreteStackBlock;
  v187 = 1107296256;
  v188 = sub_100016FB8;
  v189 = &unk_101074048;
  v141 = _Block_copy(&aBlock);
  v142 = swift_retain();
  v143 = v169;
  static DispatchQoS.unspecified.getter(v142);
  v193 = (uint64_t)_swiftEmptyArrayStorage;
  v144 = v170;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v193, v163, v164, v126, v173);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v136, v143, v144, v141);
  _Block_release(v141);
  swift_release();
  v175(v144, v126);
  v174(v143, v171);
  v137(v136, v138);
  (*(void (**)(char *, uint64_t))(v172 + 8))(v128, v176);
  swift_release();
  return swift_release();
}

uint64_t sub_1003CCD54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;

  v4 = type metadata accessor for SharedBeaconRecord(0);
  v5 = (uint64_t *)(a2 + *(int *)(v4 + 32));
  v6 = *v5;
  v7 = v5[1];
  if ((v7 & 0x2000000000000000) != 0)
    v8 = HIBYTE(v7) & 0xF;
  else
    v8 = v6 & 0xFFFFFFFFFFFFLL;
  v9 = type metadata accessor for MessagingMessageContext(0);
  if (v8)
  {
    v10 = (_QWORD *)(a1 + *(int *)(v9 + 48));
    v11 = v10[1];
    if (v6 != *v10 || v7 != v11)
      return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, *v10, v11, 0);
    return 1;
  }
  v14 = a1 + *(int *)(v9 + 24);
  v16 = *(_QWORD *)(v14 + 8);
  v15 = *(_QWORD *)(v14 + 16);
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v17, "_stripPotentialTokenURIWithToken:", 0);

  if (v18)
  {
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v22 = v21;

    v23 = a2 + *(int *)(v4 + 28);
    v24 = *(_QWORD *)(v23 + 8);
    v25 = *(_QWORD *)(v23 + 16);
    if (v24 != v20 || v25 != v22)
    {
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v20, v22, 0);
      swift_bridgeObjectRelease();
      return v27 & 1;
    }
    swift_bridgeObjectRelease();
    return 1;
  }
  v28 = static os_log_type_t.error.getter(v19);
  if (qword_1010EA250 != -1)
    swift_once(&qword_1010EA250, sub_100B5D964);
  v29 = qword_1011B7D30;
  v30 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v31 = swift_allocObject(v30, 72, 7);
  *(_OWORD *)(v31 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  *(_QWORD *)(v31 + 64) = sub_10001AA00();
  *(_QWORD *)(v31 + 32) = v16;
  *(_QWORD *)(v31 + 40) = v15;
  *(_QWORD *)&v32 = swift_bridgeObjectRetain(v15).n128_u64[0];
  os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "No fromID for %@", 16, 2, v31, v32);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1003CCF44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[4];
  uint64_t v34;
  unsigned __int8 v35;

  if (qword_1010E9968 != -1)
    swift_once(&qword_1010E9968, sub_1000FC8C8);
  v1 = qword_1010EEF78;
  v2 = sub_10001A9A8(&qword_1010FA130);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1003D0B6C, 0, v1, &type metadata for () + 1, v2);
  v3 = v0;
  v4 = v34;
  v5 = v35;
  v6 = sub_10001A9A8(&qword_1010FA368);
  unsafeFromAsyncTask<A>(_:)(&unk_10110C0F0, 0, v6);
  if (v0)
  {
    v7 = v0;
    if ((v35 & 1) == 0)
    {
      v8 = swift_errorRetain(v0);
      v9 = static os_log_type_t.error.getter(v8);
      if (qword_1010EA278 != -1)
        swift_once(&qword_1010EA278, sub_100B5DB4C);
      v10 = qword_1011B7D58;
      v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v12 = swift_allocObject(v11, 72, 7);
      *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
      v34 = v0;
      swift_errorRetain(v0);
      v13 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v14 = String.init<A>(describing:)(&v34, v13);
      v16 = v15;
      *(_QWORD *)(v12 + 56) = &type metadata for String;
      *(_QWORD *)(v12 + 64) = sub_10001AA00();
      *(_QWORD *)(v12 + 32) = v14;
      *(_QWORD *)(v12 + 40) = v16;
      os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "FMFFollowers error: %@", 22, 2, v12, v34);
      v17 = swift_bridgeObjectRelease();
      swift_willThrow(v17);
      sub_1000FE214(v0, 1);
      v18 = 0;
LABEL_14:
      sub_1000FE214(v4, v18);
      return v4;
    }
LABEL_11:
    v22 = swift_errorRetain(v4);
    v23 = static os_log_type_t.error.getter(v22);
    if (qword_1010EA278 != -1)
      swift_once(&qword_1010EA278, sub_100B5DB4C);
    v24 = qword_1011B7D58;
    v25 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v26 = swift_allocObject(v25, 72, 7);
    *(_OWORD *)(v26 + 16) = xmmword_100E22B00;
    v34 = v4;
    swift_errorRetain(v4);
    v27 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v28 = String.init<A>(describing:)(&v34, v27);
    v30 = v29;
    *(_QWORD *)(v26 + 56) = &type metadata for String;
    *(_QWORD *)(v26 + 64) = sub_10001AA00();
    *(_QWORD *)(v26 + 32) = v28;
    *(_QWORD *)(v26 + 40) = v30;
    os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "FamilyCircle error: %@", 22, 2, v26);
    v31 = swift_bridgeObjectRelease();
    swift_willThrow(v31);
    sub_1000FE214(v7, v3 != 0);
    v18 = 1;
    goto LABEL_14;
  }
  v7 = v34;
  v19 = qword_1010E9FF8;
  swift_bridgeObjectRetain(v34);
  if (v19 != -1)
    v20 = swift_once(&qword_1010E9FF8, sub_1008CC198);
  __chkstk_darwin(v20);
  v33[2] = v34;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1003D6408, v33, v21, &type metadata for () + 1, &type metadata for () + 1);
  sub_1000FE214(v7, 0);
  if (v5)
    goto LABEL_11;
  return v4;
}

void sub_1003CD2D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  int64_t v80;
  unint64_t v81;
  uint64_t v82;
  id v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  NSString v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  void *v110;
  int64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[2];
  _QWORD v118[2];
  char v119[56];
  _QWORD v120[6];
  _QWORD *v121;

  v1 = sub_1003CCF44();
  if (v0)
    return;
  v3 = v2;
  v116 = v1;
  v4 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (!v4)
    goto LABEL_65;
  v5 = v4;
  v6 = objc_msgSend(v4, "aa_primaryAppleAccount");

  if (!v6)
  {
    swift_bridgeObjectRelease();
    v23 = swift_bridgeObjectRelease();
    v24 = static os_log_type_t.error.getter(v23);
    if (qword_1010EA278 != -1)
      swift_once(&qword_1010EA278, sub_100B5DB4C);
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, qword_1011B7D58, "Could not obtain aa_primaryAppleAccount!", 40, 2, _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0);
    v26 = v25;
    v117[0] = 15;
    v27 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v28 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v29 = _BridgedStoredNSError.init(_:userInfo:)(v118, v117, v27, v26, v28);
    swift_willThrow(v29);
    return;
  }
  v7 = objc_msgSend(v6, "username");
  if (!v7)
    goto LABEL_66;
  v8 = v7;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v11 = v10;

  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v9, v11);
  if (!v14)
  {
    swift_bridgeObjectRelease();
    v30 = swift_bridgeObjectRelease();
    v31 = static os_log_type_t.error.getter(v30);
    if (qword_1010EA278 != -1)
      swift_once(&qword_1010EA278, sub_100B5DB4C);
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, qword_1011B7D58, "Could not obtain local account MessageDestination!", 50, 2, _swiftEmptyArrayStorage);
    type metadata accessor for SPOwnerSessionError(0);
    v33 = v32;
    v117[0] = 15;
    v34 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v35 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v36 = _BridgedStoredNSError.init(_:userInfo:)(v118, v117, v34, v33, v35);
    swift_willThrow(v36);

    return;
  }
  v15 = v12;
  v16 = v13;
  v17 = v14;
  v110 = v6;
  sub_100379BCC(v116);
  v19 = (unint64_t *)sub_100CA8058(v18);
  swift_bridgeObjectRelease();
  v20 = sub_10001A9A8(&qword_1010EE2B0);
  inited = swift_initStackObject(v20, v119);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_BYTE *)(inited + 32) = v15;
  *(_QWORD *)(inited + 40) = v16;
  *(_QWORD *)(inited + 48) = v17;
  v22 = sub_100CA8058(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, 1, &type metadata for MessagingDestination);
  if (*(_QWORD *)(v22 + 16) <= v19[2] >> 3)
  {
    v118[0] = v19;
    sub_10063B88C(v22);
  }
  else
  {
    v19 = sub_10063FD1C(v22, v19);
  }
  swift_bridgeObjectRelease();
  sub_10037A014(v3);
  v38 = v37;
  swift_bridgeObjectRelease();
  v39 = sub_100CA8058(v38);
  v40 = swift_bridgeObjectRelease();
  LODWORD(v115) = static os_log_type_t.default.getter(v40);
  if (qword_1010EA278 != -1)
LABEL_62:
    swift_once(&qword_1010EA278, sub_100B5DB4C);
  v41 = qword_1011B7D58;
  v42 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v43 = swift_allocObject(v42, 72, 7);
  *(_OWORD *)(v43 + 16) = xmmword_100E22B00;
  v44 = sub_1003D63C4();
  swift_bridgeObjectRetain(v19);
  v46 = Set.description.getter(v45, &type metadata for MessagingDestination, v44);
  v48 = v47;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v43 + 56) = &type metadata for String;
  v49 = sub_10001AA00();
  *(_QWORD *)(v43 + 64) = v49;
  *(_QWORD *)(v43 + 32) = v46;
  *(_QWORD *)(v43 + 40) = v48;
  os_log(_:dso:log:_:_:)(v115, &_mh_execute_header, v41, "familyAppleIDs: %@", 18, 2, v43);
  v50 = swift_bridgeObjectRelease();
  v51 = static os_log_type_t.default.getter(v50);
  v52 = qword_1011B7D58;
  v112 = v42;
  v53 = swift_allocObject(v42, 72, 7);
  *(_OWORD *)(v53 + 16) = xmmword_100E22B00;
  swift_bridgeObjectRetain(v39);
  v55 = Set.description.getter(v54, &type metadata for MessagingDestination, v44);
  v57 = v56;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v53 + 56) = &type metadata for String;
  *(_QWORD *)(v53 + 64) = v49;
  *(_QWORD *)(v53 + 32) = v55;
  *(_QWORD *)(v53 + 40) = v57;
  os_log(_:dso:log:_:_:)(v51, &_mh_execute_header, v52, "followerDestinations: %@", 24, 2, v53);
  swift_bridgeObjectRelease();
  v121 = _swiftEmptyDictionarySingleton;
  v115 = sub_100DF4F78(v39, (uint64_t)v19);
  v58 = (_QWORD *)swift_bridgeObjectRelease();
  v59 = v116;
  if ((v116 & 0xC000000000000001) != 0)
  {
    if (v116 < 0)
      v60 = v116;
    else
      v60 = v116 & 0xFFFFFFFFFFFFFF8;
    v39 = __CocoaSet.makeIterator()(v60);
    v19 = (unint64_t *)&qword_10110FFD0;
    v61 = sub_10000F4A0(0, (unint64_t *)&qword_10110FFD0, FAFamilyMember_ptr);
    v62 = sub_10001AC90(&qword_1010FA140, (unint64_t *)&qword_10110FFD0, FAFamilyMember_ptr, (const char *)&protocol conformance descriptor for NSObject);
    v58 = Set.Iterator.init(_cocoa:)(v120, v39, v61, v62);
    v59 = v120[0];
    v113 = v120[1];
    v63 = v120[2];
    v64 = v120[3];
    v65 = v120[4];
  }
  else
  {
    v64 = 0;
    v66 = -1 << *(_BYTE *)(v116 + 32);
    v113 = v116 + 56;
    v63 = ~v66;
    v67 = -v66;
    if (v67 < 64)
      v68 = ~(-1 << v67);
    else
      v68 = -1;
    v65 = v68 & *(_QWORD *)(v116 + 56);
  }
  v111 = (unint64_t)(v63 + 64) >> 6;
  v69 = qword_1011B7000;
  while (1)
  {
    while (1)
    {
      if (v59 < 0)
      {
        v76 = __CocoaSet.Iterator.next()(v58);
        if (!v76)
          goto LABEL_60;
        v77 = v76;
        v117[0] = v76;
        v78 = sub_10000F4A0(0, (unint64_t *)&qword_10110FFD0, FAFamilyMember_ptr);
        swift_unknownObjectRetain(v77);
        swift_dynamicCast(v118, v117, (char *)&type metadata for Swift.AnyObject + 8, v78, 7);
        v79 = (id)v118[0];
        swift_unknownObjectRelease(v77);
        v75 = v64;
        v73 = v65;
        if (!v79)
          goto LABEL_60;
      }
      else
      {
        if (v65)
        {
          v73 = (v65 - 1) & v65;
          v74 = __clz(__rbit64(v65)) | (v64 << 6);
          v75 = v64;
        }
        else
        {
          v80 = v64 + 1;
          if (__OFADD__(v64, 1))
          {
            __break(1u);
            goto LABEL_62;
          }
          if (v80 >= v111)
            goto LABEL_60;
          v81 = *(_QWORD *)(v113 + 8 * v80);
          v75 = v64 + 1;
          if (!v81)
          {
            v75 = v64 + 2;
            if (v64 + 2 >= v111)
              goto LABEL_60;
            v81 = *(_QWORD *)(v113 + 8 * v75);
            if (!v81)
            {
              v75 = v64 + 3;
              if (v64 + 3 >= v111)
                goto LABEL_60;
              v81 = *(_QWORD *)(v113 + 8 * v75);
              if (!v81)
              {
                v75 = v64 + 4;
                if (v64 + 4 >= v111)
                  goto LABEL_60;
                v81 = *(_QWORD *)(v113 + 8 * v75);
                if (!v81)
                {
                  v82 = v64 + 5;
                  while (v111 != v82)
                  {
                    v81 = *(_QWORD *)(v113 + 8 * v82++);
                    if (v81)
                    {
                      v75 = v82 - 1;
                      goto LABEL_46;
                    }
                  }
LABEL_60:
                  sub_10007CC38(v59);
                  v109 = sub_10037B298(v115, (uint64_t *)&v121);
                  swift_release();
                  sub_1007EE1E0(v109);
                  swift_bridgeObjectRelease();

                  swift_bridgeObjectRelease();
                  return;
                }
              }
            }
          }
LABEL_46:
          v73 = (v81 - 1) & v81;
          v74 = __clz(__rbit64(v81)) + (v75 << 6);
        }
        v79 = *(id *)(*(_QWORD *)(v59 + 48) + 8 * v74);
        if (!v79)
          goto LABEL_60;
      }
      v116 = v73;
      v83 = objc_msgSend(v79, "appleID");
      if (v83)
        break;
      v39 = static os_log_type_t.error.getter(0);
      v19 = (unint64_t *)v69[427];
      v70 = v75;
      v71 = swift_allocObject(v112, 72, 7);
      *(_OWORD *)(v71 + 16) = xmmword_100E22B00;
      *(_QWORD *)(v71 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_10110FFD0, FAFamilyMember_ptr);
      *(_QWORD *)(v71 + 64) = sub_10001AC90(&qword_1010FA360, (unint64_t *)&qword_10110FFD0, FAFamilyMember_ptr, (const char *)&protocol conformance descriptor for NSObject);
      *(_QWORD *)(v71 + 32) = v79;
      v72 = v79;
      os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v19, "FAFamilyMember has nil appleID!: %@", 35, 2, v71);

      v58 = (_QWORD *)swift_bridgeObjectRelease();
      v64 = v70;
      v65 = v116;
    }
    v84 = v83;
    v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
    v87 = v86;

    v118[0] = v85;
    v118[1] = v87;
    v117[0] = 64;
    v117[1] = 0xE100000000000000;
    v88 = sub_1000330C8();
    swift_bridgeObjectRetain(v87);
    v89 = StringProtocol.contains<A>(_:)(v117, &type metadata for String, &type metadata for String, v88, v88);
    v90 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if ((v89 & 1) != 0)
      break;
    v19 = (unint64_t *)IDSCopyIDForPhoneNumber(v90);

    if (!v19)
      goto LABEL_64;
    v91 = 1;
LABEL_54:
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v93 = v92;
    swift_bridgeObjectRelease();

    if ((sub_100A07F60(v91, v39, v93, v115) & 1) != 0)
    {
      v114 = v75;
      v94 = objc_msgSend(v79, "altDSID");
      if (v94)
      {
        v95 = v94;
        v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
        v98 = v97;

        v99 = String.utf8Data.getter(v96, v98);
        v100 = v59;
        v102 = v101;
        swift_bridgeObjectRelease();
        v103 = v121;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v121);
        v118[0] = v103;
        v121 = (_QWORD *)0x8000000000000000;
        v19 = v118;
        v105 = v102;
        v59 = v100;
        v69 = qword_1011B7000;
        sub_10010BFD4(v99, v105, v91, v39, v93, isUniquelyReferenced_nonNull_native);
        v39 = (uint64_t)v121;
        v121 = (_QWORD *)v118[0];

        swift_bridgeObjectRelease();
      }
      else
      {
        v106 = swift_bridgeObjectRelease();
        v39 = static os_log_type_t.error.getter(v106);
        v19 = (unint64_t *)v69[427];
        v107 = swift_allocObject(v112, 72, 7);
        *(_OWORD *)(v107 + 16) = xmmword_100E22B00;
        *(_QWORD *)(v107 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_10110FFD0, FAFamilyMember_ptr);
        *(_QWORD *)(v107 + 64) = sub_10001AC90(&qword_1010FA360, (unint64_t *)&qword_10110FFD0, FAFamilyMember_ptr, (const char *)&protocol conformance descriptor for NSObject);
        *(_QWORD *)(v107 + 32) = v79;
        v108 = v79;
        os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v19, "FAFamilyMember has nil altDSID!: %@", 35, 2, v107);

      }
      v58 = (_QWORD *)swift_bridgeObjectRelease();
      v64 = v114;
      v65 = v116;
    }
    else
    {
      swift_bridgeObjectRelease();

      v64 = v75;
      v65 = v116;
    }
  }
  v19 = (unint64_t *)IDSCopyIDForEmailAddress(v90);

  if (v19)
  {
    v91 = 0;
    goto LABEL_54;
  }
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
}

unint64_t sub_1003CDE10(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104A0C0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

void sub_1003CDE58()
{
  uint64_t v0;

  sub_1003A5EE4(*(void (**)(void *))(v0 + 16), *(_QWORD *)(v0 + 24), 6);
}

unint64_t sub_1003CDE74()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101114210;
  if (!qword_101114210)
  {
    v1 = sub_10001F784((uint64_t *)&unk_1010F7730);
    v2 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101114210);
  }
  return result;
}

unint64_t sub_1003CDEF0()
{
  unint64_t result;

  result = qword_1010F9FA8;
  if (!qword_1010F9FA8)
  {
    result = swift_getWitnessTable(byte_100E5A48C, &type metadata for MessagingDevice);
    atomic_store(result, (unint64_t *)&qword_1010F9FA8);
  }
  return result;
}

unint64_t sub_1003CDF34()
{
  unint64_t result;

  result = qword_1010F9FB0;
  if (!qword_1010F9FB0)
  {
    result = swift_getWitnessTable(asc_100E3C3E4, &type metadata for BeaconSharingManager.ItemConnectionSupportedDeviceType);
    atomic_store(result, (unint64_t *)&qword_1010F9FB0);
  }
  return result;
}

void sub_1003CDF78(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), void **a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void **v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t);
  double v81;
  NSObject *v82;
  NSObject *v83;
  uint64_t v84;
  _QWORD *v85;
  void (*v86)(_QWORD, _QWORD, _QWORD);
  int v87;
  void (*v88)(_QWORD, _QWORD, _QWORD);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  void **v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  void **v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  void *v141;
  _QWORD *v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  _QWORD *v159;
  void *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  const void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  char *v187;
  char *v188;
  char *v189;
  uint64_t v190;
  id v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 *v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  uint64_t v200;
  unsigned __int8 *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  NSObject *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void (*v218)(os_log_t, uint64_t);
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  int *v224;
  void (*v225)(uint64_t);
  void **v226;
  uint64_t v227;
  __int128 v228;
  _QWORD *v229;
  uint64_t v230;
  void **aBlock;
  uint64_t v232;
  uint64_t (*v233)(uint64_t);
  char *v234;
  uint64_t (*v235)();
  _QWORD *v236;

  v205 = a3;
  *(_QWORD *)&v228 = a2;
  v195 = a1;
  v214 = type metadata accessor for Date(0);
  v213 = *(_QWORD *)(v214 - 8);
  __chkstk_darwin(v214);
  v212 = (char *)&v183 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = type metadata accessor for UUID(0);
  v227 = *(_QWORD *)(v211 - 8);
  __chkstk_darwin(v211);
  v210 = (char *)&v183 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v224 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v224);
  v209 = (uint64_t)&v183 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = type metadata accessor for SharedBeaconRecord(0);
  v10 = __chkstk_darwin(v207);
  v208 = (uint64_t)&v183 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (__int128 *)((char *)&v183 - v12);
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v188 = (char *)&v183 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v194 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v187 = (char *)&v183 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = type metadata accessor for DispatchQoS.QoSClass(0);
  v192 = *(_QWORD *)(v193 - 8);
  __chkstk_darwin(v193);
  v189 = (char *)&v183 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ShareRecord(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v216 = (uint64_t)&v183 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = swift_allocObject(&unk_101071BC8, 32, 7);
  v225 = a4;
  *(_QWORD *)(v23 + 16) = a4;
  *(_QWORD *)(v23 + 24) = a5;
  v24 = swift_allocObject(&unk_101071BF0, 24, 7);
  v217 = v24;
  *(_QWORD *)(v24 + 16) = 0;
  v186 = (uint64_t *)(v24 + 16);
  v25 = (void *)objc_opt_self(ACAccountStore);
  v226 = a5;
  swift_retain();
  v26 = objc_msgSend(v25, "defaultStore");
  if (!v26)
  {
    swift_release();
    __break(1u);
LABEL_31:
    swift_release();
    __break(1u);
    goto LABEL_32;
  }
  v27 = v26;
  v28 = objc_msgSend(v26, "aa_primaryAppleAccount");

  if (!v28)
  {
    type metadata accessor for SPOwnerSessionError(0);
    v92 = v91;
    v230 = 7;
    v93 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v94 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v230, v93, v92, v94);
    v95 = aBlock;
    v96 = swift_errorRetain(aBlock);
    v97 = static os_log_type_t.error.getter(v96);
    if (qword_1010EA248 != -1)
      swift_once(&qword_1010EA248, sub_100B5D8FC);
    v98 = qword_1011B7D28;
    v99 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v100 = swift_allocObject(v99, 72, 7);
    *(_OWORD *)(v100 + 16) = xmmword_100E22B00;
    v230 = (uint64_t)v95;
    swift_errorRetain(v95);
    v101 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v102 = String.init<A>(describing:)(&v230, v101);
    v104 = v103;
    *(_QWORD *)(v100 + 56) = &type metadata for String;
    *(_QWORD *)(v100 + 64) = sub_10001AA00();
    *(_QWORD *)(v100 + 32) = v102;
    *(_QWORD *)(v100 + 40) = v104;
    os_log(_:dso:log:_:_:)(v97, &_mh_execute_header, v98, "Error from updateSharedBeaconRecord: %@", 39, 2, v100);

    v105 = swift_bridgeObjectRelease();
    v225(v105);
    swift_release();
    swift_release();

    return;
  }
  v204 = v15;
  v185 = v14;
  v190 = v23;
  v191 = v28;
  v29 = objc_msgSend(v28, "username");
  if (!v29)
    goto LABEL_31;
  v30 = v29;
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v33 = v32;

  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v31, v33);
  v203 = v34;
  v202 = v35;
  v36 = v228;
  v215 = v37;
  if (!v37)
  {
    v106 = static os_log_type_t.error.getter(v34);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v107 = qword_1011B7D30;
    v108 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v109 = swift_allocObject(v108, 72, 7);
    v228 = xmmword_100E22B00;
    *(_OWORD *)(v109 + 16) = xmmword_100E22B00;
    v110 = objc_msgSend(v191, "username");
    if (v110)
    {
      v111 = v110;
      v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
      v114 = v113;

      *(_QWORD *)(v109 + 56) = &type metadata for String;
      v115 = sub_10001AA00();
      *(_QWORD *)(v109 + 64) = v115;
      *(_QWORD *)(v109 + 32) = v112;
      *(_QWORD *)(v109 + 40) = v114;
      os_log(_:dso:log:_:_:)(v106, &_mh_execute_header, v107, "Could not create MessagingDestination from: %@", 46, 2, v109);
      swift_bridgeObjectRelease();
      type metadata accessor for SPOwnerSessionError(0);
      v117 = v116;
      v230 = 7;
      v118 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v119 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
      _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v230, v118, v117, v119);
      v120 = aBlock;
      v121 = swift_errorRetain(aBlock);
      v122 = static os_log_type_t.error.getter(v121);
      if (qword_1010EA248 != -1)
        swift_once(&qword_1010EA248, sub_100B5D8FC);
      v123 = qword_1011B7D28;
      v124 = swift_allocObject(v108, 72, 7);
      *(_OWORD *)(v124 + 16) = v228;
      v230 = (uint64_t)v120;
      swift_errorRetain(v120);
      v125 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v126 = String.init<A>(describing:)(&v230, v125);
      *(_QWORD *)(v124 + 56) = &type metadata for String;
      *(_QWORD *)(v124 + 64) = v115;
      *(_QWORD *)(v124 + 32) = v126;
      *(_QWORD *)(v124 + 40) = v127;
      os_log(_:dso:log:_:_:)(v122, &_mh_execute_header, v123, "Error from updateSharedBeaconRecord: %@", 39, 2, v124);

      v128 = swift_bridgeObjectRelease();
      v225(v128);
      swift_release();
      swift_release();

      return;
    }
LABEL_32:
    swift_release();
    __break(1u);
    return;
  }
  v184 = v17;
  v206 = dispatch_group_create();
  v38 = *(_QWORD *)(v195 + 16);
  if (v38)
  {
    v201 = (unsigned __int8 *)(v216 + *(int *)(v20 + 36));
    v200 = v216 + *(int *)(v20 + 20);
    v39 = v195 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    v198 = *(_QWORD *)(v21 + 72);
    swift_bridgeObjectRetain(v195);
    v226 = 0;
    v199 = xmmword_100E22FC0;
    v197 = xmmword_100E22B10;
    v40 = v224;
    v196 = v13;
    while (1)
    {
      v221 = v39;
      v222 = v38;
      v41 = v216;
      sub_10005972C(v39, v216, type metadata accessor for ShareRecord);
      v220 = *v201;
      v42 = (void (*)(uint64_t))*((_QWORD *)v201 + 2);
      v219 = *((_QWORD *)v201 + 1);
      v43 = v209;
      sub_10005972C(v36, v209, type metadata accessor for OwnedBeaconRecord);
      v44 = *(void (**)(char *, uint64_t, uint64_t))(v227 + 16);
      v45 = v210;
      v46 = v211;
      v44(v210, v200, v211);
      v225 = v42;
      swift_bridgeObjectRetain(v42);
      v47 = v215;
      swift_bridgeObjectRetain(v215);
      sub_1000126B0(v41, type metadata accessor for ShareRecord);
      v48 = (int *)v207;
      *((_BYTE *)v13 + *(int *)(v207 + 56)) = 3;
      v49 = (uint64_t)v13 + v48[20];
      v223 = (char *)v48[15];
      v224 = (int *)v49;
      v50 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
      v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56);
      v52 = v49;
      v53 = v50;
      v51(v52, 1, 1);
      *v13 = v199;
      v44((char *)v13 + v48[5], v43 + v40[5], v46);
      v44((char *)v13 + v48[6], (uint64_t)v45, v46);
      v54 = (char *)v13 + v48[7];
      *v54 = v203;
      *((_QWORD *)v54 + 1) = v202;
      *((_QWORD *)v54 + 2) = v47;
      v55 = (_QWORD *)((char *)v13 + v48[8]);
      *v55 = 0;
      v55[1] = 0xE000000000000000;
      v56 = (uint64_t *)(v43 + v40[14]);
      v58 = *v56;
      v57 = v56[1];
      v59 = (_QWORD *)((char *)v13 + v48[9]);
      *v59 = v58;
      v59[1] = v57;
      v60 = (uint64_t *)(v43 + v40[15]);
      v61 = *v60;
      v62 = v60[1];
      v63 = (_QWORD *)((char *)v13 + v48[10]);
      *v63 = v61;
      v63[1] = v62;
      *(_QWORD *)((char *)v13 + v48[11]) = *(_QWORD *)(v43 + v40[16]);
      *(_QWORD *)((char *)v13 + v48[12]) = *(_QWORD *)(v43 + v40[17]);
      *(_QWORD *)&v223[(_QWORD)v13] = -1;
      *((_BYTE *)v13 + v48[13]) = 0;
      *((_BYTE *)v13 + v48[16]) = 1;
      *(_QWORD *)((char *)v13 + v48[17]) = 0;
      swift_bridgeObjectRetain(v57);
      swift_bridgeObjectRetain(v62);
      v64 = v212;
      static Date.distantPast.getter(v65);
      (*(void (**)(char *, uint64_t))(v227 + 8))(v45, v46);
      (*(void (**)(char *, char *, uint64_t))(v213 + 32))((char *)v13 + v48[18], v64, v214);
      sub_10000F9B8(v43 + v40[7], (uint64_t)v13 + v48[19], &qword_1010ED860);
      sub_1000126B0(v43, type metadata accessor for OwnedBeaconRecord);
      v66 = (uint64_t)v224;
      sub_100004048((uint64_t)v224, (uint64_t *)&unk_1010F47B0);
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v51)(v66, 1, 1, v53);
      v67 = v208;
      sub_10005972C((uint64_t)v13, v208, type metadata accessor for SharedBeaconRecord);
      v68 = v226;
      v69 = sub_10038A8E4(4, 1, v67, (uint64_t *)&unk_101109100, type metadata accessor for SharedBeaconRecord, &qword_1010ECA48, (uint64_t (*)(void))sub_1003CF504, (uint64_t)&aBlock);
      if (v68)
        break;
      v226 = 0;
      v70 = aBlock;
      v218 = (void (*)(os_log_t, uint64_t))v232;
      v223 = v234;
      v224 = (int *)v233;
      v71 = static os_log_type_t.default.getter(v69);
      if (qword_1010EA250 != -1)
        swift_once(&qword_1010EA250, sub_100B5D964);
      v72 = qword_1011B7D30;
      v73 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v74 = swift_allocObject(v73, 112, 7);
      *(_OWORD *)(v74 + 16) = v197;
      v75 = UUID.uuidString.getter(v74);
      v77 = v76;
      *(_QWORD *)(v74 + 56) = &type metadata for String;
      v78 = sub_10001AA00();
      *(_QWORD *)(v74 + 32) = v75;
      *(_QWORD *)(v74 + 40) = v77;
      *(_QWORD *)(v74 + 96) = &type metadata for String;
      *(_QWORD *)(v74 + 104) = v78;
      v79 = v219;
      *(_QWORD *)(v74 + 64) = v78;
      *(_QWORD *)(v74 + 72) = v79;
      v80 = v225;
      *(_QWORD *)(v74 + 80) = v225;
      *(_QWORD *)&v81 = swift_bridgeObjectRetain(v80).n128_u64[0];
      os_log(_:dso:log:_:_:)(v71, &_mh_execute_header, v72, "Sending updateSharedBeacon for beacon: %@ to destination: %@", 60, 2, v74, v81);
      swift_bridgeObjectRelease();
      v82 = v206;
      dispatch_group_enter(v206);
      v83 = v82;
      v84 = v217;
      swift_retain();
      v85 = (_QWORD *)sub_1006B9A24((uint64_t)_swiftEmptyArrayStorage);
      v86 = (void (*)(_QWORD, _QWORD, _QWORD))sub_100CA7EC0((uint64_t)&off_10104A3C0);
      v182 = sub_100CA7EC0((uint64_t)_swiftEmptyArrayStorage);
      v87 = v70;
      v88 = (void (*)(_QWORD, _QWORD, _QWORD))v223;
      v89 = (uint64_t)v224;
      sub_1003CA720(v87, v218, (uint64_t)v224, (void (*)(_QWORD, _QWORD, _QWORD))v223, v85, v220, v79, (void (*)(_QWORD, _QWORD, _QWORD))v80, 0, 0, 1, 0, v86, v182, 0, v205, v83, v84);
      swift_release();

      swift_bridgeObjectRelease();
      v36 = v228;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001BC14(v89, (unint64_t)v88);
      swift_bridgeObjectRelease();
      v13 = v196;
      sub_1000126B0((uint64_t)v196, type metadata accessor for SharedBeaconRecord);
      v39 = v221 + v198;
      v38 = v222 - 1;
      v90 = v204;
      if (v222 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_1000126B0((uint64_t)v13, type metadata accessor for SharedBeaconRecord);
    swift_release();
    v129 = swift_bridgeObjectRelease();
    v130 = static os_log_type_t.error.getter(v129);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v131 = qword_1011B7D30;
    v132 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v133 = swift_allocObject(v132, 72, 7);
    *(_OWORD *)(v133 + 16) = xmmword_100E22B00;
    aBlock = v68;
    swift_errorRetain(v68);
    v134 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v135 = String.init<A>(describing:)(&aBlock, v134);
    v137 = v136;
    *(_QWORD *)(v133 + 56) = &type metadata for String;
    *(_QWORD *)(v133 + 64) = sub_10001AA00();
    *(_QWORD *)(v133 + 32) = v135;
    *(_QWORD *)(v133 + 40) = v137;
    os_log(_:dso:log:_:_:)(v130, &_mh_execute_header, v131, "Failed in updateSharedBeacon: %@", 32, 2, v133);
    swift_bridgeObjectRelease();
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v138 = v192;
    v139 = v189;
    v140 = v193;
    (*(void (**)(char *, _QWORD, uint64_t))(v192 + 104))(v189, enum case for DispatchQoS.QoSClass.default(_:), v193);
    v141 = (void *)static OS_dispatch_queue.global(qos:)(v139);
    (*(void (**)(char *, uint64_t))(v138 + 8))(v139, v140);
    v142 = (_QWORD *)swift_allocObject(&unk_101071C18, 40, 7);
    v143 = v190;
    v142[2] = sub_1003CF40C;
    v142[3] = v143;
    v142[4] = v68;
    v235 = sub_1000170EC;
    v236 = v142;
    aBlock = _NSConcreteStackBlock;
    v232 = 1107296256;
    v233 = sub_100016FB8;
    v234 = (char *)&unk_101071C30;
    v144 = _Block_copy(&aBlock);
    swift_retain();
    v145 = swift_errorRetain(v68);
    v146 = v187;
    static DispatchQoS.unspecified.getter(v145);
    v230 = (uint64_t)_swiftEmptyArrayStorage;
    v147 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v148 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v149 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v150 = v188;
    v151 = v148;
    v152 = v185;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v230, v151, v149, v185, v147);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v146, v150, v144);
    _Block_release(v144);

    swift_errorRelease(v68);
    (*(void (**)(char *, uint64_t))(v204 + 8))(v150, v152);
    (*(void (**)(char *, uint64_t))(v194 + 8))(v146, v184);
  }
  else
  {
    swift_bridgeObjectRelease();
    v90 = v204;
LABEL_25:
    OS_dispatch_group.wait()();
    v153 = v186;
    swift_beginAccess(v186, &v230, 0, 0);
    v154 = *v153;
    v155 = v190;
    v156 = v193;
    v157 = v192;
    v158 = v189;
    if (v154)
    {
      sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
      LODWORD(v228) = enum case for DispatchQoS.QoSClass.default(_:);
      (*(void (**)(char *))(v157 + 104))(v158);
      swift_errorRetain(v154);
      v227 = static OS_dispatch_queue.global(qos:)(v158);
      (*(void (**)(char *, uint64_t))(v157 + 8))(v158, v156);
      v159 = (_QWORD *)swift_allocObject(&unk_101071CB8, 40, 7);
      v159[2] = sub_1003CF40C;
      v159[3] = v155;
      v159[4] = v154;
      v235 = sub_1000170EC;
      v236 = v159;
      aBlock = _NSConcreteStackBlock;
      v232 = 1107296256;
      v233 = sub_100016FB8;
      v234 = (char *)&unk_101071CD0;
      v160 = _Block_copy(&aBlock);
      swift_errorRetain(v154);
      v161 = swift_retain();
      v162 = v187;
      static DispatchQoS.unspecified.getter(v161);
      v229 = _swiftEmptyArrayStorage;
      v163 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v164 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v165 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v166 = v188;
      v167 = v164;
      v168 = v185;
      v169 = v163;
      v157 = v192;
      v155 = v190;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v229, v167, v165, v185, v169);
      v170 = (void *)v227;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v162, v166, v160);
      v171 = v160;
      v156 = v193;
      _Block_release(v171);

      v172 = v154;
      v173 = v228;
      swift_errorRelease(v172);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v166, v168);
      (*(void (**)(char *, uint64_t))(v194 + 8))(v162, v184);
      swift_release();
    }
    else
    {
      v173 = enum case for DispatchQoS.QoSClass.default(_:);
      v168 = v185;
      v166 = v188;
      v162 = v187;
    }
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, uint64_t, uint64_t))(v157 + 104))(v158, v173, v156);
    *(_QWORD *)&v228 = static OS_dispatch_queue.global(qos:)(v158);
    (*(void (**)(char *, uint64_t))(v157 + 8))(v158, v156);
    v174 = swift_allocObject(&unk_101071C68, 32, 7);
    *(_QWORD *)(v174 + 16) = sub_1003CF40C;
    *(_QWORD *)(v174 + 24) = v155;
    v235 = sub_1002A3AD4;
    v236 = (_QWORD *)v174;
    aBlock = _NSConcreteStackBlock;
    v232 = 1107296256;
    v233 = sub_100016FB8;
    v234 = (char *)&unk_101071C80;
    v175 = _Block_copy(&aBlock);
    v176 = swift_retain();
    static DispatchQoS.unspecified.getter(v176);
    v229 = _swiftEmptyArrayStorage;
    v177 = v162;
    v178 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v179 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v180 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v229, v179, v180, v168, v178);
    v181 = (void *)v228;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v177, v166, v175);
    _Block_release(v175);

    (*(void (**)(char *, uint64_t))(v90 + 8))(v166, v168);
    (*(void (**)(char *, uint64_t))(v194 + 8))(v177, v184);
    swift_release();
  }
  swift_release();
  swift_release();
}

uint64_t sub_1003CF40C(uint64_t a1)
{
  uint64_t v1;

  return sub_10079A1E0(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1003CF414()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003CF438()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003CF444()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

void sub_1003CF454(uint64_t a1)
{
  uint64_t v1;

  sub_1003AB764(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), "Successfully sent updateSharedBeacon: %@", 40);
}

uint64_t sub_1003CF478()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003CF484()
{
  return sub_1003D8B40((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1003CF498(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100394110(*(_QWORD *)(v4 + 16), v4 + ((v9 + 24) & ~v9), a1, a2, a3, a4);
}

unint64_t sub_1003CF504()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010F9FC0;
  if (!qword_1010F9FC0)
  {
    v1 = sub_10001F784(&qword_1010ECA48);
    v2 = sub_100006204((unint64_t *)&unk_10111E870, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F4DC);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010F9FC0);
  }
  return result;
}

uint64_t sub_1003CF580()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_1003CF5B4()
{
  uint64_t v0;

  sub_1003A9C54(*(_QWORD *)(v0 + 24), *(void (**)(void **))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1003CF5DC()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003CF5E8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1003CF7A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1003AB198(a1, v1 + v4, *(unsigned __int8 *)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + v5 + 16), *(_QWORD *)(v1 + ((v5 + 31) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1003CF80C()
{
  return sub_1003D6C04((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_1003CF818(uint64_t a1)
{
  uint64_t v1;

  sub_10039BE54(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(NSObject **)(v1 + 32));
}

uint64_t sub_1003CF824()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 24, v3 | 7);
}

uint64_t sub_1003CF9D4(uint64_t a1)
{
  return sub_1003D13FC(a1, type metadata accessor for SharedBeaconRecord, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))sub_1003AB48C);
}

uint64_t sub_1003CF9E8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003CFA0C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1003CFA40(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_100BECFDC(a1, a2 & 1, *(_BYTE *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void (**)(__n128))(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_1003CFA5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = swift_task_alloc(dword_1010F9FD4);
  v3 = *(_OWORD *)(v0 + 32);
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004A74;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return swift_task_switch(sub_1003AFDAC, 0, 0);
}

unint64_t sub_1003CFABC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010F9FF0;
  if (!qword_1010F9FF0)
  {
    v1 = sub_10001F784(&qword_1010F9FE8);
    v2 = sub_100006204(&qword_1010F9FF8, type metadata accessor for KeyRequestEnvelope, (uint64_t)&unk_100E5FEA8);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010F9FF0);
  }
  return result;
}

uint64_t sub_1003CFB38(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;

  return sub_100386360(a1, a2, a3, a4, a5, v5, (uint64_t)"BeaconSharingManager.messageSent", 32, (uint64_t)sub_1003D1778);
}

uint64_t sub_1003CFB70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return sub_1003863F8(a1, a2, a3, a4, a5, a6, v6, "Message %@ delivered successfully from %@.", 42);
}

__n128 sub_1003CFBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __n128 result;
  uint64_t v12;

  sub_1003843D4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v12);
  return result;
}

uint64_t sub_1003CFBD0(uint64_t a1)
{
  return sub_100384478(a1);
}

uint64_t sub_1003CFBD8(uint64_t a1)
{
  return sub_100384590(a1);
}

uint64_t sub_1003CFBE8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;

  return sub_100386360(a1, a2, a3, a4, a5, v5, (uint64_t)"localMessageSent", 16, (uint64_t)sub_1003D0744);
}

uint64_t sub_1003CFC20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return sub_1003863F8(a1, a2, a3, a4, a5, a6, v6, "Local message %@ delivered successfully from %@.", 48);
}

__n128 sub_1003CFC50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __n128 result;
  uint64_t v12;

  sub_100386530(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v12);
  return result;
}

uint64_t sub_1003CFC7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v8 + 16))(a1, a2, a3, a4, a5, *(unsigned __int8 *)a6, a6[1], a6[2], a6[3], a7, a8);
}

uint64_t sub_1003CFCC0(uint64_t a1)
{
  return sub_1003865C8(a1);
}

unint64_t sub_1003CFCC8()
{
  unint64_t result;

  result = qword_1010FA038;
  if (!qword_1010FA038)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for MessagingDestination, &type metadata for MessagingDestination);
    atomic_store(result, (unint64_t *)&qword_1010FA038);
  }
  return result;
}

_QWORD *sub_1003CFD0C(uint64_t a1)
{
  uint64_t v1;

  return sub_100386928(a1, v1);
}

uint64_t sub_1003CFD14(uint64_t a1)
{
  uint64_t v1;

  return sub_100386D8C(a1, v1);
}

uint64_t sub_1003CFD1C(uint64_t a1, uint64_t a2)
{
  initializeWithTake for BeaconSharingManagerRouter(a2, a1);
  return a2;
}

uint64_t sub_1003CFD58(uint64_t a1, uint64_t a2)
{
  initializeWithTake for BeaconSharingLocalManagerRouter(a2, a1);
  return a2;
}

uint64_t sub_1003CFD94()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CFDA4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_10038AF94(a1, v2, a2);
}

uint64_t sub_1003CFDAC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_10038B668(a1, a2, a3, v3);
}

uint64_t sub_1003CFDB4()
{
  uint64_t v0;

  return sub_10038B7D8(v0);
}

uint64_t sub_1003CFDBC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003CFDCC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for ShareRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  v9 = v0 + v4 + v1[7];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = v0 + v4 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
    v12(v13, v10);
  v14 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject(v0, v14 + 8, v3 | 7);
}

void sub_1003CFF04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for ShareRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_10038BD6C(a1, v1 + v4, *(NSObject **)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

BOOL sub_1003CFF54@<W0>(_BYTE *a1@<X8>)
{
  return sub_1003D8174(a1);
}

uint64_t sub_1003CFF68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a10);
    swift_bridgeObjectRelease(a12);
    swift_bridgeObjectRelease(a14);
    swift_bridgeObjectRelease(a16);
    return swift_bridgeObjectRelease(a20);
  }
  return result;
}

uint64_t sub_1003D0004(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_100217264(result, a2, a3);
  return result;
}

uint64_t sub_1003D001C(uint64_t a1)
{
  return sub_1003D0220(a1, (uint64_t)sub_1003D9B64);
}

_QWORD *sub_1003D0028(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19]);
  return a1;
}

uint64_t sub_1003D008C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a12);
    swift_bridgeObjectRetain(a14);
    swift_bridgeObjectRetain(a16);
    return swift_bridgeObjectRetain(a20);
  }
  return result;
}

uint64_t sub_1003D012C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 167) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 120));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 152));
  if (*(_QWORD *)(v0 + v6))
    swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v3 | 7);
}

uint64_t sub_1003D0214(uint64_t a1)
{
  return sub_1003D0220(a1, (uint64_t)sub_1003D0298);
}

uint64_t sub_1003D0220(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10038AB38(a1, *(_QWORD *)(v2 + 16), v2 + v6, v2 + v7, *(uint64_t (**)(uint64_t))(v2 + ((v7 + 167) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v7 + 167) & 0xFFFFFFFFFFFFFFF8) + 8), a2);
}

uint64_t sub_1003D0298@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_10038AD88(*(_QWORD *)(v1 + 16), *(uint64_t (**)(char *, char *, uint64_t))(v1 + 24), *(__int128 **)(v1 + 32), a1);
}

unint64_t sub_1003D02B4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FA090;
  if (!qword_1010FA090)
  {
    v1 = sub_10001F784(&qword_1010FA088);
    v2 = sub_100006204(&qword_1010FA098, type metadata accessor for CompanionSelfBeaconingKeyEnvelope, (uint64_t)&unk_100E3CD2C);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FA090);
  }
  return result;
}

uint64_t sub_1003D0330()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D0340(uint64_t a1)
{
  return sub_1003D8CB0(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))sub_100393024);
}

uint64_t sub_1003D034C(uint64_t a1)
{
  uint64_t v1;

  return sub_100393BE8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_101072370, (uint64_t)sub_1003D9B40, (uint64_t)&unk_101072388);
}

uint64_t sub_1003D0384()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003D0398()
{
  return sub_1003CF498("*** timed out waiting for local IDS send ***", 44, (uint64_t)sub_1003BB5EC, (uint64_t)&unk_101072338);
}

uint64_t sub_1003D03B8()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D03C8()
{
  return sub_1003D03D4((uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD))sub_1003931F0);
}

uint64_t sub_1003D03D4(uint64_t (*a1)(_QWORD, unint64_t, _QWORD, _QWORD))
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (_QWORD *)(v1 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a1(*(_QWORD *)(v1 + 16), v1 + v3, *v4, v4[1]);
}

uint64_t sub_1003D042C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003D043C()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D044C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

unint64_t sub_1003D04C0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FA0C8;
  if (!qword_1010FA0C8)
  {
    v1 = sub_10001F784(&qword_1010FA0C0);
    v2 = sub_100006204(&qword_1010FA0D0, type metadata accessor for CompanionFindMyAccessoryKeyEnvelope, (uint64_t)&unk_100E3CD04);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FA0C8);
  }
  return result;
}

double sub_1003D053C(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_1003D0558()
{
  uint64_t v0;

  return sub_100388D6C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

_QWORD *sub_1003D0574()
{
  return sub_100387010(0, 0);
}

uint64_t sub_1003D0580()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003D0590(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for BeaconSharingLocalManagerRouter(a2, a1);
  return a2;
}

uint64_t sub_1003D05CC(uint64_t a1)
{
  destroy for BeaconSharingLocalManagerRouter(a1);
  return a1;
}

uint64_t sub_1003D0600()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D0614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_1003D06A0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100393F50(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1003D06EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1003D0700()
{
  unint64_t result;

  result = qword_1010FA0F0;
  if (!qword_1010FA0F0)
  {
    result = swift_getWitnessTable("Չ#", &type metadata for CompanionBeaconsWithYouResponse);
    atomic_store(result, (unint64_t *)&qword_1010FA0F0);
  }
  return result;
}

uint64_t sub_1003D0744(uint64_t a1)
{
  uint64_t v1;

  return sub_100398B54(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t)&unk_1010726E0, (uint64_t)sub_1003D0780, (uint64_t)&unk_1010726F8);
}

uint64_t sub_1003D0780()
{
  return sub_1003D1858((uint64_t (*)(_QWORD, _QWORD, unint64_t, _QWORD, _QWORD))sub_100398E00);
}

void sub_1003D078C()
{
  sub_100399B1C();
}

uint64_t sub_1003D07A4()
{
  return sub_100330A28((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D07B8()
{
  return sub_100330A28((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1003D07C8()
{
  uint64_t v0;

  return sub_10039B840(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1003D07D0()
{
  uint64_t *v0;

  sub_100381264(v0[2], v0[3], v0[4], v0[5], "%{public}s: Declining invitation with context: [%s]", (SEL *)&selRef_declineInvitationWithData_);
}

void sub_1003D0800()
{
  uint64_t *v0;

  sub_100381264(v0[2], v0[3], v0[4], v0[5], "%{public}s: Accepting invitation with context: [%s]", (SEL *)&selRef_acceptInvitationWithData_);
}

uint64_t sub_1003D082C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;

  v1 = type metadata accessor for BeaconSharingSessionContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v4, v1);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      goto LABEL_4;
    case 1:
      swift_bridgeObjectRelease();
      break;
    case 0:
LABEL_4:
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);
      break;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1003D0908()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for BeaconSharingSessionContext(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10039B4C4(v0 + v2, *(unsigned __int8 *)(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(_QWORD *)(v0 + v3 + 16), *(_QWORD *)(v0 + ((v3 + 31) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v3 + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1003D0968()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1003D0994(uint64_t a1)
{
  uint64_t *v1;

  sub_10039AAA4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1003D09A0()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_release);
}

void sub_1003D09B0(uint64_t a1)
{
  uint64_t v1;

  sub_1003827AC(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(dispatch_group_t *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

_QWORD *sub_1003D09C8@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10001E938(v1, a1);
}

_QWORD *sub_1003D09E0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[8];
  v3 = a1[21];
  v4 = a1[23];
  swift_bridgeObjectRelease(a1[25]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_1003D0A34()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003D0A58()
{
  return sub_1003D6C04((void (*)(_QWORD))&_swift_release);
}

void sub_1003D0A64(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  sub_100399BB4(a1, a2, a3 & 1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(NSObject **)(v3 + 32));
}

uint64_t sub_1003D0A74()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[5]);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1003D0AA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v10 = *(_BYTE *)(v1 + 48);
  v11 = (_QWORD *)swift_task_alloc(dword_1010EEFCC);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_100004C28;
  return sub_1000FDD98(a1, v4, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_1003D0B3C()
{
  return sub_1003D6C04((void (*)(_QWORD))&_swift_release);
}

void sub_1003D0B48(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_100399C84(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(NSObject **)(v2 + 32));
}

uint64_t sub_1003D0B58@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000FCD8C(a1);
}

uint64_t sub_1003D0B6C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000FC9F0(a1);
}

uint64_t sub_1003D0B80()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1003D0BB4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1010EEF9C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004A74;
  return sub_1000FCDAC(a1, v4, v5, v6, v7, v8);
}

unint64_t sub_1003D0C34()
{
  unint64_t result;

  result = qword_1010FA148;
  if (!qword_1010FA148)
  {
    result = swift_getWitnessTable(asc_100E3DB4C, &type metadata for MessagingAccount);
    atomic_store(result, (unint64_t *)&qword_1010FA148);
  }
  return result;
}

uint64_t sub_1003D0C78(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for BeaconSharingManagerRouter(a2, a1);
  return a2;
}

uint64_t sub_1003D0CB4(uint64_t a1)
{
  destroy for BeaconSharingManagerRouter(a1);
  return a1;
}

uint64_t sub_1003D0CE8()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D0CF8(uint64_t a1)
{
  return sub_1003D6B50(a1, type metadata accessor for SharedBeaconRecord, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))sub_1003A40B8);
}

uint64_t sub_1003D0D0C()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D0D18(uint64_t a1)
{
  uint64_t v1;

  return sub_1003A445C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1003D0D20()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D0D2C()
{
  uint64_t v0;

  return sub_100391704(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), &qword_1010F21B0);
}

uint64_t sub_1003D0D54()
{
  return sub_1003D0F48(type metadata accessor for SharedBeaconRecord, (uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_1003A4A98);
}

uint64_t sub_1003D0D68()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D0D78(uint64_t a1)
{
  return sub_1003D6B50(a1, type metadata accessor for SharedBeaconRecord, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))sub_1003A2874);
}

uint64_t sub_1003D0D8C()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D0D98(uint64_t a1)
{
  uint64_t v1;

  return sub_1003A2BE8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1003D0DA0()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D0DB0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1003D0F48(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD, _QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return a2(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + ((v4 + 32) & ~v4));
}

unint64_t sub_1003D0F8C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FA160;
  if (!qword_1010FA160)
  {
    v1 = sub_10001F784(&qword_1010FA158);
    v2 = sub_100006204(&qword_1010FA168, type metadata accessor for FindMyAccessoryFamilyShareResponseEnvelope, (uint64_t)&unk_100E636AC);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FA160);
  }
  return result;
}

unint64_t sub_1003D1008()
{
  unint64_t result;

  result = qword_1010FA170;
  if (!qword_1010FA170)
  {
    result = swift_getWitnessTable(asc_100E3C3A4, &type metadata for BeaconSharingManager.BeaconSharingKeyError);
    atomic_store(result, (unint64_t *)&qword_1010FA170);
  }
  return result;
}

uint64_t sub_1003D104C()
{
  return sub_1003D6C04((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_1003D1058(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1003A96E8(a1, a2, a3);
}

unint64_t sub_1003D1074()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FA188;
  if (!qword_1010FA188)
  {
    v1 = sub_10001F784(&qword_1010FA180);
    v2 = sub_100006204(&qword_1010FA190, type metadata accessor for LegacySelfBeaconingKeyEnvelope, (uint64_t)&unk_100E29C44);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FA188);
  }
  return result;
}

void sub_1003D10F4(uint64_t a1)
{
  uint64_t v1;

  sub_1003AB764(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), "Successfully distributed keys: %@", 33);
}

uint64_t sub_1003D1118()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D1124()
{
  return sub_1003D8B40((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1003D1138()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 24, v3 | 7);
}

uint64_t sub_1003D13E8(uint64_t a1)
{
  return sub_1003D13FC(a1, type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))sub_1003A9410);
}

uint64_t sub_1003D13FC(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;

  v5 = *(_QWORD *)(a2(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (unsigned __int8 *)(v3 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a3(a1, v3 + v6, *v7, *((_QWORD *)v7 + 1), *((_QWORD *)v7 + 2));
}

unint64_t sub_1003D1464()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FA1A8;
  if (!qword_1010FA1A8)
  {
    v1 = sub_10001F784(&qword_1010FA1A0);
    v2 = sub_100006204(&qword_1010FA1B0, type metadata accessor for FindMyAccessoryFamilyKeyEnvelope, (uint64_t)&unk_100E5DA44);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FA1A8);
  }
  return result;
}

unint64_t sub_1003D14E0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FA1C8;
  if (!qword_1010FA1C8)
  {
    v1 = sub_10001F784(&qword_1010FA1C0);
    v2 = sub_100006204(&qword_1010FA1D0, type metadata accessor for SelfBeaconingKeyEnvelope, (uint64_t)&unk_100E29C1C);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FA1C8);
  }
  return result;
}

unint64_t sub_1003D155C()
{
  unint64_t result;

  result = qword_1010FA1D8;
  if (!qword_1010FA1D8)
  {
    result = swift_getWitnessTable(byte_100E5EC48, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_1010FA1D8);
  }
  return result;
}

uint64_t sub_1003D15A0(uint64_t a1)
{
  sub_1002B1CD0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  return a1;
}

uint64_t sub_1003D15D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 56);
  v5 = (_QWORD *)swift_task_alloc(dword_1010FD54C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  return sub_1004DE3D8(a1, v1 + 16, v4, v1 + 64);
}

uint64_t sub_1003D164C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v8 = (_QWORD *)swift_task_alloc(dword_101121004);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004A74;
  return sub_100DCDF84(a1, v5, v6, v7);
}

uint64_t sub_1003D16F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = v1 + 24;
  v6 = *(_QWORD *)(v1 + 64);
  v7 = (_QWORD *)swift_task_alloc(dword_1010FD544);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_1004DE174(a1, v4, v5, v6);
}

uint64_t sub_1003D1768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  return sub_1004DDF38(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(uint64_t **)(v4 + 24), *(unsigned __int8 *)(v4 + 32), *(unint64_t **)(v4 + 40));
}

uint64_t sub_1003D1778(uint64_t a1)
{
  uint64_t v1;

  return sub_100398B54(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t)&unk_101073018, (uint64_t)sub_1003D184C, (uint64_t)&unk_101073030);
}

uint64_t sub_1003D17B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + v0;
  v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease(*(_QWORD *)(v7 + 8));
  return swift_deallocObject(v0, v8, v6);
}

uint64_t sub_1003D184C()
{
  return sub_1003D1858((uint64_t (*)(_QWORD, _QWORD, unint64_t, _QWORD, _QWORD))sub_100397E7C);
}

uint64_t sub_1003D1858(uint64_t (*a1)(_QWORD, _QWORD, unint64_t, _QWORD, _QWORD))
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v3, *(unsigned __int8 *)(v1 + v3 + *(_QWORD *)(v2 + 64)), *(_QWORD *)(((v3 + *(_QWORD *)(v2 + 64)) & 0xFFFFFFFFFFFFF8) + v1 + 8));
}

uint64_t sub_1003D18B0()
{
  return sub_100330A28((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D18C4()
{
  uint64_t v0;

  return Future.finish(error:)(*(_QWORD *)(v0 + 24));
}

uint64_t sub_1003D18E8()
{
  char v1;

  v1 = 1;
  return Future.finish(result:)(&v1);
}

uint64_t sub_1003D1910()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D1920(uint64_t a1)
{
  return sub_1003D6B50(a1, type metadata accessor for SharedBeaconRecord, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))sub_1003A4B48);
}

uint64_t sub_1003D1934()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D1944(uint64_t a1)
{
  return sub_1003D1D14(a1, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD))sub_1003A4F2C);
}

void sub_1003D1950()
{
  uint64_t v0;

  sub_1003A5EE4(*(void (**)(void *))(v0 + 16), *(_QWORD *)(v0 + 24), 0);
}

uint64_t sub_1003D196C()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D197C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_1003D1B34(uint64_t a1)
{
  return sub_1003D6B50(a1, type metadata accessor for SharedBeaconRecord, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))sub_1003A3224);
}

uint64_t sub_1003D1B48()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D1B58()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_1003D1D08(uint64_t a1)
{
  return sub_1003D1D14(a1, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD))sub_1003A3608);
}

uint64_t sub_1003D1D14(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t, _QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (_QWORD *)(v2 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a2(a1, v2 + v5, *v6, v6[1]);
}

uint64_t sub_1003D1D78()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

void sub_1003D1DAC(uint64_t a1)
{
  uint64_t v1;

  sub_1003917A8(a1, *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(NSObject **)(v1 + 48));
}

uint64_t sub_1003D1DBC()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D1DC8()
{
  return sub_1003D8B40((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1003D1DDC(unint64_t *a1)
{
  uint64_t v1;

  return sub_100391CDC(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_1003D1DF4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FA258;
  if (!qword_1010FA258)
  {
    v1 = sub_10001F784(&qword_101109460);
    v2 = sub_100006204(&qword_1010FA260, type metadata accessor for BeaconObservation, (uint64_t)&unk_100E4AA40);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FA258);
  }
  return result;
}

uint64_t sub_1003D1E74()
{
  uint64_t v0;

  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1003D1EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1010FA27C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1010FA278 + dword_1010FA278))(v2, v0 + 24);
}

uint64_t sub_1003D1F08()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  _QWORD *v3;

  v2 = *(char **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1010FA294);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1003D9734;
  return ((uint64_t (*)(char *))((char *)&dword_1010FA290 + dword_1010FA290))(v2);
}

unint64_t sub_1003D1F60()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FA2B8;
  if (!qword_1010FA2B8)
  {
    v1 = sub_10001F784(&qword_1010FA2B0);
    v2 = sub_100006204(&qword_1010EFD30, type metadata accessor for CircleTrustDeclineEnvelopeV1, (uint64_t)&unk_100E38E58);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, &qword_1010FA2B8);
  }
  return result;
}

uint64_t sub_1003D1FE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  return sub_100394834(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1003D2010()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_1003D2090(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8;
  v7 = v1 + v5;
  v8 = swift_task_alloc(dword_1010FA2C4);
  v9 = *(_OWORD *)(v1 + v6);
  *(_QWORD *)(v2 + 16) = v8;
  *(_QWORD *)v8 = v2;
  *(_QWORD *)(v8 + 8) = sub_100004A74;
  *(_OWORD *)(v8 + 32) = v9;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = v7;
  return swift_task_switch(sub_100394670, 0, 0);
}

uint64_t sub_1003D212C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1010FA2D4);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100067F58;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_1003947FC, 0, 0);
}

uint64_t sub_1003D218C(uint64_t a1)
{
  uint64_t v1;

  return sub_1003948F4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1003D21A4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1003D244C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  return sub_100394B68(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t (*)(uint64_t))(v0 + ((v1 + 32) & ~v1)));
}

uint64_t sub_1003D2480()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1003D2720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v0 + ((v2 + 24) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1010FA2EC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  return sub_1003ADA3C(v3, v4);
}

uint64_t sub_1003D278C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1003D2A38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v6 = (_QWORD *)swift_task_alloc(dword_1010FA2FC);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100004A74;
  return sub_1003ADBD4(v4, v5);
}

unint64_t sub_1003D2AB4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104A410, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t sub_1003D2AFC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v2[42] = a1;
  v2[43] = a2;
  v3 = type metadata accessor for PeerCommunicationIdentifier(0);
  v2[44] = v3;
  v2[45] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  v2[46] = v4;
  v2[47] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OwnerPeerTrust(0);
  v2[48] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[49] = v6;
  v2[50] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[51] = swift_task_alloc(v7);
  v2[52] = swift_task_alloc(v7);
  v2[53] = swift_task_alloc(v7);
  v2[54] = swift_task_alloc(v7);
  v8 = type metadata accessor for OwnerSharingCircle(0);
  v2[55] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[56] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[57] = swift_task_alloc(v10);
  v2[58] = swift_task_alloc(v10);
  v2[59] = swift_task_alloc(v10);
  v2[60] = swift_task_alloc(v10);
  v11 = type metadata accessor for UUID(0);
  v2[61] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[62] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v2[63] = v13;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[64] = swift_task_alloc(v14);
  v2[65] = swift_task_alloc(v14);
  v2[66] = swift_task_alloc(v14);
  v2[67] = swift_task_alloc(v14);
  v2[68] = swift_task_alloc(v14);
  return swift_task_switch(sub_1003D2CA4, 0, 0);
}

uint64_t sub_1003D2CA4()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (*v3)(void);
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v22;

  if (!*(_QWORD *)(*(_QWORD *)(v0 + 344) + 16))
  {
    v4 = sub_1003D624C();
    v22 = swift_allocError(&type metadata for BeaconSharingManager.KeyDropSharingError, v4, 0, 0);
    *v5 = 0;
    swift_willThrow(v22);
    v6 = *(_QWORD *)(v0 + 536);
    v7 = *(_QWORD *)(v0 + 528);
    v8 = *(_QWORD *)(v0 + 520);
    v9 = *(_QWORD *)(v0 + 512);
    v11 = *(_QWORD *)(v0 + 472);
    v10 = *(_QWORD *)(v0 + 480);
    v13 = *(_QWORD *)(v0 + 456);
    v12 = *(_QWORD *)(v0 + 464);
    v14 = *(_QWORD *)(v0 + 432);
    v15 = *(_QWORD *)(v0 + 424);
    v16 = *(_QWORD *)(v0 + 416);
    v17 = *(_QWORD *)(v0 + 408);
    v18 = *(_QWORD *)(v0 + 400);
    v19 = *(_QWORD *)(v0 + 376);
    v20 = *(_QWORD *)(v0 + 360);
    swift_task_dealloc(*(_QWORD *)(v0 + 544));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 216, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v21 = (uint64_t (*)(void))((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 552) = v2;
    *v2 = v0;
    v2[1] = sub_1003D2EA8;
    v3 = v21;
    return v3();
  }
  __break(1u);
  return result;
}

uint64_t sub_1003D2EA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 552);
  *(_QWORD *)(*(_QWORD *)v1 + 560) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003D2F04, 0, 0);
}

uint64_t sub_1003D2F04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 560);
  v2 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_1003D30F0, *(_QWORD *)(v0 + 560), 0);
  v4 = static os_log_type_t.error.getter(v2);
  if (qword_1010EA278 != -1)
    swift_once(&qword_1010EA278, sub_100B5DB4C);
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, qword_1011B7D58, "No BeaconStoreActor available!", 30, 2, _swiftEmptyArrayStorage);
  v5 = sub_100033220();
  v22 = swift_allocError(&type metadata for DaemonError, v5, 0, 0);
  *v6 = 0xD000000000000010;
  v6[1] = 0x8000000100EC6470;
  swift_willThrow(v22);
  v7 = *(_QWORD *)(v0 + 536);
  v8 = *(_QWORD *)(v0 + 528);
  v9 = *(_QWORD *)(v0 + 520);
  v10 = *(_QWORD *)(v0 + 512);
  v12 = *(_QWORD *)(v0 + 472);
  v11 = *(_QWORD *)(v0 + 480);
  v14 = *(_QWORD *)(v0 + 456);
  v13 = *(_QWORD *)(v0 + 464);
  v15 = *(_QWORD *)(v0 + 432);
  v16 = *(_QWORD *)(v0 + 424);
  v17 = *(_QWORD *)(v0 + 416);
  v18 = *(_QWORD *)(v0 + 408);
  v19 = *(_QWORD *)(v0 + 400);
  v20 = *(_QWORD *)(v0 + 376);
  v21 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003D30F0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 568) = *(_QWORD *)(*(_QWORD *)(v0 + 560) + 128);
  return swift_task_switch(sub_1003D3110, 0, 0);
}

uint64_t sub_1003D3110()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 576) = v1;
  *v1 = v0;
  v1[1] = sub_1003D3198;
  return withCheckedContinuation<A>(isolation:function:_:)(v1, 0, 0, 0x696176416E656877, 0xEF2928656C62616CLL, sub_100068180, *(_QWORD *)(v0 + 568), &type metadata for () + 1);
}

uint64_t sub_1003D3198()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 576));
  return swift_task_switch(sub_1003D31EC, 0, 0);
}

uint64_t sub_1003D31EC()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 824) = *(_DWORD *)(type metadata accessor for OwnedBeaconRecord(0) + 20);
  return swift_task_switch(sub_1003D3230, *(_QWORD *)(v0 + 560), 0);
}

uint64_t sub_1003D3230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 560);
  v2 = *(_QWORD *)(v0 + 544);
  v4 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 504);
  v5 = *(_QWORD *)(v0 + 488);
  v6 = *(_QWORD *)(v0 + 336) + *(int *)(v0 + 824);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 584) = v7;
  v7(v2, v6, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 828) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = (v3 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = swift_allocObject(&unk_1010736D0, v10 + 8, v8 | 7);
  *(_QWORD *)(v0 + 592) = v11;
  *(_QWORD *)(v11 + 16) = v1;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 600) = v12;
  v12(v11 + v9, v2, v5);
  *(_QWORD *)(v11 + v10) = 0;
  v13 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v14 = (_QWORD *)swift_task_alloc(v13);
  *(_QWORD *)(v0 + 608) = v14;
  v15 = sub_10001A9A8(&qword_1010EE100);
  *v14 = v0;
  v14[1] = sub_1003D3350;
  return unsafeBlocking<A>(_:)(v0 + 320, sub_1000D82C0, v11, v15);
}

uint64_t sub_1003D3350()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 608));
  swift_release();
  return swift_task_switch(sub_1003D33AC, *(_QWORD *)(v1 + 560), 0);
}

uint64_t sub_1003D33AC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 616) = *(_QWORD *)(v0 + 320);
  return swift_task_switch(sub_1003D33C8, 0, 0);
}

uint64_t sub_1003D33C8()
{
  uint64_t v0;
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void (*v41)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t (*v49)(void);
  char v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(void);
  uint64_t v72;

  result = *(_QWORD *)(v0 + 616);
  v70 = *(_QWORD *)(result + 16);
  if (!v70)
  {
LABEL_15:
    *(_QWORD *)(v0 + 624) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 328) = _swiftEmptyDictionarySingleton;
    v18 = _swiftEmptyArrayStorage[2];
    *(_QWORD *)(v0 + 632) = v18;
    if (v18)
    {
      *(_DWORD *)(v0 + 832) = *(_DWORD *)(*(_QWORD *)(v0 + 448) + 80);
      *(_QWORD *)(v0 + 640) = 0;
      v19 = *(_QWORD *)(v0 + 624);
      if (*(_QWORD *)(v19 + 16))
      {
        v20 = 0;
        while (1)
        {
          v21 = *(_QWORD *)(v0 + 456);
          v22 = *(_QWORD *)(v0 + 440);
          sub_10005972C(v19+ ((*(unsigned __int8 *)(v0 + 832) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 832))+ *(_QWORD *)(*(_QWORD *)(v0 + 448) + 72) * v20, v21, type metadata accessor for OwnerSharingCircle);
          v23 = *(_QWORD *)(v21 + *(int *)(v22 + 32));
          v24 = *(_QWORD *)(v23 + 16);
          if (v24)
          {
            v25 = *(unsigned __int8 *)(v0 + 828);
            v26 = *(_QWORD *)(v0 + 496);
            v27 = (v25 + 32) & ~v25;
            v28 = v25 | 7;
            v29 = sub_10001A9A8(&qword_1011003C0);
            v30 = *(_QWORD *)(v26 + 72);
            v31 = (_QWORD *)swift_allocObject(v29, v27 + v30 * v24, v28);
            result = j__malloc_size(v31);
            if (!v30)
              goto LABEL_44;
            if (result - v27 == 0x8000000000000000 && v30 == -1)
              goto LABEL_46;
            v33 = *(unsigned __int8 *)(v0 + 828);
            v31[2] = v24;
            v31[3] = 2 * ((result - v27) / v30);
            v34 = (char *)v31 + ((v33 + 32) & ~v33);
            swift_bridgeObjectRetain_n(v23, 2);
            v35 = sub_10050A294(v0 + 176, v34, v24, v23);
            result = sub_10007CC38(*(_QWORD *)(v0 + 176));
            if (v35 != v24)
              goto LABEL_45;
            swift_bridgeObjectRelease();
          }
          else
          {
            v31 = _swiftEmptyArrayStorage;
          }
          *(_QWORD *)(v0 + 648) = v31;
          v36 = v31[2];
          *(_QWORD *)(v0 + 656) = v36;
          if (v36)
          {
            v37 = (*(unsigned __int8 *)(v0 + 828) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 828);
            v38 = *(_QWORD *)(v0 + 488);
            v39 = *(_QWORD **)(v0 + 496);
            *(_QWORD *)(v0 + 664) = v39[9];
            *(_QWORD *)(v0 + 672) = 0;
            v40 = *(_QWORD *)(v0 + 432);
            (*(void (**)(uint64_t, char *, uint64_t))(v0 + 584))(v40, (char *)v31 + v37, v38);
            v41 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v39[7];
            *(_QWORD *)(v0 + 680) = v41;
            v41(v40, 0, 1, v38);
            v42 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v39[6];
            *(_QWORD *)(v0 + 688) = v42;
            if (v42(v40, 1, v38) != 1)
            {
              (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 600))(*(_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 488));
              return swift_task_switch(sub_1003D39DC, *(_QWORD *)(v0 + 560), 0);
            }
          }
          else
          {
            (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 496) + 56))(*(_QWORD *)(v0 + 432), 1, 1, *(_QWORD *)(v0 + 488));
          }
          v43 = *(_QWORD *)(v0 + 640);
          v44 = *(_QWORD *)(v0 + 632);
          v45 = *(_QWORD *)(v0 + 456);
          swift_release();
          sub_1000126B0(v45, type metadata accessor for OwnerSharingCircle);
          if (v43 + 1 == v44)
            break;
          v20 = *(_QWORD *)(v0 + 640) + 1;
          *(_QWORD *)(v0 + 640) = v20;
          v19 = *(_QWORD *)(v0 + 624);
          if (v20 >= *(_QWORD *)(v19 + 16))
            goto LABEL_33;
        }
        swift_release();
        if (!*(_QWORD *)(*(_QWORD *)(v0 + 328) + 16))
          goto LABEL_39;
        goto LABEL_35;
      }
LABEL_33:
      __break(1u);
    }
    swift_release();
    if (!_swiftEmptyDictionarySingleton[2])
    {
LABEL_39:
      v50 = 2;
      goto LABEL_41;
    }
LABEL_35:
    sub_10037A9F4(*(_QWORD *)(v0 + 344), (uint64_t *)(v0 + 328));
    *(_QWORD *)(v0 + 752) = v46;
    v47 = *(_QWORD *)(v46 + 16);
    *(_QWORD *)(v0 + 760) = v47;
    if (v47)
    {
      result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
      if (!*(_QWORD *)(v0 + 80))
        goto LABEL_47;
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 136);
      sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
      v71 = (uint64_t (*)(void))((char *)&dword_1010EBBD0 + dword_1010EBBD0);
      v48 = (_QWORD *)swift_task_alloc(unk_1010EBBD4);
      *(_QWORD *)(v0 + 768) = v48;
      *v48 = v0;
      v48[1] = sub_1003D4CD4;
      v49 = v71;
      return v49();
    }
    swift_bridgeObjectRelease();
    v50 = 1;
LABEL_41:
    v51 = sub_1003D624C();
    v72 = swift_allocError(&type metadata for BeaconSharingManager.KeyDropSharingError, v51, 0, 0);
    *v52 = v50;
    swift_willThrow(v72);
    swift_release();
    swift_bridgeObjectRelease();
    v53 = *(_QWORD *)(v0 + 536);
    v54 = *(_QWORD *)(v0 + 528);
    v55 = *(_QWORD *)(v0 + 520);
    v56 = *(_QWORD *)(v0 + 512);
    v58 = *(_QWORD *)(v0 + 472);
    v57 = *(_QWORD *)(v0 + 480);
    v60 = *(_QWORD *)(v0 + 456);
    v59 = *(_QWORD *)(v0 + 464);
    v61 = *(_QWORD *)(v0 + 432);
    v62 = *(_QWORD *)(v0 + 424);
    v63 = *(_QWORD *)(v0 + 416);
    v64 = *(_QWORD *)(v0 + 408);
    v65 = *(_QWORD *)(v0 + 400);
    v67 = *(_QWORD *)(v0 + 376);
    v69 = *(_QWORD *)(v0 + 360);
    swift_task_dealloc(*(_QWORD *)(v0 + 544));
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v67);
    swift_task_dealloc(v69);
    v49 = *(uint64_t (**)(void))(v0 + 8);
    return v49();
  }
  v2 = 0;
  v3 = *(_QWORD *)(v0 + 440);
  v68 = *(_QWORD *)(v0 + 448);
  v4 = type metadata accessor for OwnerSharingCircle;
  v66 = *(_QWORD *)(v0 + 616);
  while (v2 < *(_QWORD *)(result + 16))
  {
    v5 = v4;
    v7 = *(_QWORD *)(v0 + 472);
    v6 = *(_QWORD *)(v0 + 480);
    v8 = (*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
    v9 = *(_QWORD *)(v68 + 72);
    sub_10005972C(*(_QWORD *)(v0 + 616) + v8 + v9 * v2, v6, v5);
    v10 = *(unsigned __int8 *)(v6 + *(int *)(v3 + 28));
    v11 = v7;
    v4 = v5;
    sub_10005972C(v6, v11, v5);
    v12 = *(_QWORD *)(v0 + 472);
    if (!v10)
    {
      sub_1000126B0(v12, v5);
LABEL_10:
      sub_1000126EC(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 464), v5);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_10009A520(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v15 = _swiftEmptyArrayStorage[2];
      v14 = _swiftEmptyArrayStorage[3];
      if (v15 >= v14 >> 1)
        sub_10009A520(v14 > 1, v15 + 1, 1);
      v16 = *(_QWORD *)(v0 + 464);
      _swiftEmptyArrayStorage[2] = v15 + 1;
      v17 = (char *)_swiftEmptyArrayStorage + v8 + v15 * v9;
      v4 = v5;
      sub_1000126EC(v16, (uint64_t)v17, v5);
      goto LABEL_4;
    }
    v13 = *(unsigned __int8 *)(v12 + *(int *)(v3 + 28));
    sub_1000126B0(v12, v5);
    if (v13 == 1)
      goto LABEL_10;
    sub_1000126B0(*(_QWORD *)(v0 + 480), v5);
LABEL_4:
    result = v66;
    if (v70 == ++v2)
      goto LABEL_15;
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_1003D39DC()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 600);
  v2 = *(unsigned __int8 *)(v0 + 828);
  v3 = *(_QWORD *)(v0 + 560);
  v4 = *(_QWORD *)(v0 + 544);
  v5 = *(_QWORD *)(v0 + 488);
  v6 = (v2 + 24) & ~v2;
  v7 = *(_QWORD *)(v0 + 504) + v6;
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 584))(v4, *(_QWORD *)(v0 + 536), v5);
  v9 = swift_allocObject(&unk_1010736F8, v7, v8);
  *(_QWORD *)(v0 + 696) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 704) = v11;
  *v11 = v0;
  v11[1] = sub_1003D3AC8;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 376), sub_1003D62A0, v9, *(_QWORD *)(v0 + 368));
}

uint64_t sub_1003D3AC8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 704));
  swift_release();
  return swift_task_switch(sub_1003D3B28, 0, 0);
}

uint64_t sub_1003D3B28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 376);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 392) + 48))(v2, 1, v1) == 1)
  {
    v3 = *(_QWORD *)(v0 + 536);
    v4 = *(_QWORD *)(v0 + 488);
    v5 = *(_QWORD *)(v0 + 496);
    v6 = *(_QWORD *)(v0 + 456);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    swift_release();
    sub_1000126B0(v6, type metadata accessor for OwnerSharingCircle);
    swift_release();
    sub_100004048(v2, (uint64_t *)&unk_1010EE160);
    v7 = *(_QWORD *)(v0 + 544);
    v8 = *(_QWORD *)(v0 + 536);
    v9 = *(_QWORD *)(v0 + 528);
    v10 = *(_QWORD *)(v0 + 520);
    v11 = *(_QWORD *)(v0 + 512);
    v12 = *(_QWORD *)(v0 + 472);
    v13 = *(_QWORD *)(v0 + 480);
    v15 = *(_QWORD *)(v0 + 456);
    v14 = *(_QWORD *)(v0 + 464);
    v21 = *(_QWORD *)(v0 + 432);
    v22 = *(_QWORD *)(v0 + 424);
    v23 = *(_QWORD *)(v0 + 416);
    v24 = *(_QWORD *)(v0 + 408);
    v25 = *(_QWORD *)(v0 + 400);
    v26 = *(_QWORD *)(v0 + 376);
    v27 = *(_QWORD *)(v0 + 360);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v13);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 400);
    sub_1000126EC(v2, v17, type metadata accessor for OwnerPeerTrust);
    v18 = *(int *)(v1 + 28);
    *(_DWORD *)(v0 + 836) = v18;
    v19 = v17 + v18;
    v28 = (uint64_t (*)(uint64_t))((char *)&dword_101112238 + dword_101112238);
    v20 = (_QWORD *)swift_task_alloc(unk_10111223C);
    *(_QWORD *)(v0 + 712) = v20;
    *v20 = v0;
    v20[1] = sub_1003D3D40;
    return v28(v19);
  }
}

uint64_t sub_1003D3D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)();

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 712);
  v5[90] = a1;
  v5[91] = a2;
  v5[92] = a3;
  v5[93] = v3;
  swift_task_dealloc(v6);
  if (v3)
  {
    swift_release();
    swift_release();
    v7 = sub_1003D4B74;
  }
  else
  {
    v7 = sub_1003D3DCC;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1003D3DCC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  int isUniquelyReferenced_nonNull_native;
  uint64_t *v48;
  uint64_t v49;
  void (*v50)(uint64_t, unint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  char v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  void (*v70)(unint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t);
  void (**v83)(_QWORD, uint64_t, uint64_t, _QWORD);
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  size_t v98;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  char v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(uint64_t, uint64_t, uint64_t);
  void (*v130)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v131;
  unsigned int (*v132)(uint64_t, uint64_t, uint64_t);
  uint64_t v133;
  __int128 *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t (*v147)(void);
  uint64_t v148;
  _QWORD v149[10];

  v1 = *(_QWORD *)(v0 + 736);
  if (!v1)
  {
    v16 = *(_QWORD *)(v0 + 352);
    v15 = *(_QWORD *)(v0 + 360);
    sub_10005972C(*(_QWORD *)(v0 + 400) + *(int *)(v0 + 836), v15, type metadata accessor for PeerCommunicationIdentifier);
    v17 = (char *)&loc_1003D3F58 + *((int *)qword_1003D4B58 + swift_getEnumCaseMultiPayload(v15, v16));
    __asm { BR              X10 }
  }
  v2 = (_QWORD *)*(unsigned __int8 *)(v0 + 720);
  v3 = *(_QWORD *)(v0 + 728);
  v4 = *(_QWORD *)(v0 + 344);
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_15;
  Hasher.init(_seed:)(v149);
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain_n(v1, 2);
  String.hash(into:)(v149, v3, v1);
  swift_bridgeObjectRelease();
  v5 = Hasher._finalize()();
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v7) & 1) == 0)
  {
LABEL_14:
    swift_bridgeObjectRelease();
LABEL_15:
    swift_bridgeObjectRelease();
    swift_release();
    v18 = *(_QWORD *)(v0 + 536);
    v19 = *(_QWORD *)(v0 + 488);
    v20 = *(_QWORD *)(v0 + 496);
    v21 = *(_QWORD *)(v0 + 456);
    sub_1000126B0(*(_QWORD *)(v0 + 400), type metadata accessor for OwnerPeerTrust);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    swift_release();
    sub_1000126B0(v21, type metadata accessor for OwnerSharingCircle);
    swift_release();
    v22 = *(_QWORD *)(v0 + 544);
    v23 = *(_QWORD *)(v0 + 536);
    v24 = *(_QWORD *)(v0 + 528);
    v25 = *(_QWORD *)(v0 + 520);
    v26 = *(_QWORD *)(v0 + 512);
    v27 = *(_QWORD *)(v0 + 472);
    v28 = *(_QWORD *)(v0 + 480);
    v30 = *(_QWORD *)(v0 + 456);
    v29 = *(_QWORD *)(v0 + 464);
    v131 = *(_QWORD *)(v0 + 432);
    v135 = *(_QWORD *)(v0 + 424);
    v137 = *(_QWORD *)(v0 + 416);
    v139 = *(_QWORD *)(v0 + 408);
    v141 = *(_QWORD *)(v0 + 400);
    v143 = *(_QWORD *)(v0 + 376);
    v146 = *(_QWORD *)(v0 + 360);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v28);
    swift_task_dealloc(v27);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v131);
    swift_task_dealloc(v135);
    swift_task_dealloc(v137);
    swift_task_dealloc(v139);
    swift_task_dealloc(v141);
    swift_task_dealloc(v143);
    swift_task_dealloc(v146);
    v31 = *(uint64_t (**)(void))(v0 + 8);
    return v31();
  }
  v134 = (__int128 *)(v0 + 56);
  v145 = (uint64_t *)(v0 + 328);
  v8 = ~v6;
  v9 = *(_QWORD *)(v0 + 344);
  v10 = *(_QWORD *)(v9 + 48);
  while (1)
  {
    v11 = (unsigned __int8 *)(v10 + 24 * v7);
    if (*v11 == v2)
      break;
LABEL_5:
    v7 = (v7 + 1) & v8;
    if (((*(_QWORD *)(v9 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v7) & 1) == 0)
      goto LABEL_14;
  }
  v12 = *((_QWORD *)v11 + 1);
  v13 = *((_QWORD *)v11 + 2);
  v14 = v12 == v3 && v13 == v1;
  if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v3, v1, 0) & 1) == 0)
  {
    v9 = *(_QWORD *)(v0 + 344);
    goto LABEL_5;
  }
  v130 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 680);
  v132 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 688);
  v129 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 584);
  v128 = *(_QWORD *)(v0 + 528);
  v33 = *(_QWORD *)(v0 + 488);
  v34 = *(_QWORD *)(v0 + 424);
  swift_bridgeObjectRelease();
  v35 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  *(_QWORD *)(v0 + 272) = dispatch thunk of CustomStringConvertible.description.getter(v33, v35);
  *(_QWORD *)(v0 + 280) = v36;
  v37._countAndFlagsBits = 124;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v33, v35);
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39 = String.utf8Data.getter(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
  v41 = v40;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 256) = v39;
  *(_QWORD *)(v0 + 264) = v41;
  v42 = sub_100035530();
  DataProtocol.stableUUID.getter(&type metadata for Data, v42);
  sub_10001BC14(v39, v41);
  v129(v34, v128, v33);
  v130(v34, 0, 1, v33);
  if (v132(v34, 1, v33) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 424), &qword_1010ED860);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 328));
    v43 = sub_100519120(v2, v3, v1);
    v45 = v44;
    swift_bridgeObjectRelease();
    if ((v45 & 1) != 0)
    {
      v46 = *v145;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v145);
      v48 = (uint64_t *)(v0 + 304);
      *(_QWORD *)(v0 + 304) = v46;
      *v145 = 0x8000000000000000;
      v2 = (_QWORD *)(v0 + 136);
      if (isUniquelyReferenced_nonNull_native)
        goto LABEL_20;
      goto LABEL_39;
    }
    v53 = 1;
    v54 = (_QWORD *)(v0 + 136);
LABEL_26:
    v65 = (uint64_t *)(v0 + 328);
    v66 = *(_QWORD *)(v0 + 416);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v0 + 680))(v66, v53, 1, *(_QWORD *)(v0 + 488));
    swift_bridgeObjectRelease();
    sub_100004048(v66, &qword_1010ED860);
    v67 = v0 + 176;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 600))(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 488));
    v48 = *(uint64_t **)(v0 + 328);
    v55 = swift_isUniquelyReferenced_nonNull_native(v48);
    *(_QWORD *)(v0 + 312) = v48;
    *(_QWORD *)(v0 + 328) = 0x8000000000000000;
    v43 = sub_100519120(v2, v3, v1);
    v57 = v48[2];
    v58 = (v56 & 1) == 0;
    v59 = v57 + v58;
    if (__OFADD__(v57, v58))
    {
      __break(1u);
LABEL_39:
      sub_100A9D5A0();
      v46 = *v48;
LABEL_20:
      v49 = *(_QWORD *)(v0 + 664);
      v50 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 600);
      v51 = *(_QWORD *)(v0 + 488);
      v52 = *(_QWORD *)(v0 + 416);
      swift_bridgeObjectRelease();
      v50(v52, *(_QWORD *)(v46 + 56) + v49 * v43, v51);
      sub_10010729C(v43, v46);
      *(_QWORD *)(v0 + 328) = v46;
      swift_bridgeObjectRelease();
      v53 = 0;
      v54 = v2;
      goto LABEL_26;
    }
    v60 = v56;
    v54 = (_QWORD *)(v0 + 136);
    if (v48[3] >= v59)
    {
      if ((v55 & 1) != 0)
      {
        v62 = (uint64_t *)(v0 + 312);
      }
      else
      {
        v62 = (uint64_t *)(v0 + 312);
        sub_100A9D5A0();
      }
    }
    else
    {
      v61 = v55;
      v62 = (uint64_t *)(v0 + 312);
      sub_100A8C544(v59, v61);
      v63 = sub_100519120(v2, v3, v1);
      if ((v60 & 1) != (v64 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MessagingDestination);
      v43 = v63;
    }
    v68 = *(_QWORD **)(v0 + 312);
    v69 = *(_QWORD *)(v0 + 664);
    if ((v60 & 1) != 0)
    {
      (*(void (**)(unint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 496) + 40))(v68[7] + v69 * v43, *(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 488));
    }
    else
    {
      v70 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 600);
      v71 = *(_QWORD *)(v0 + 520);
      v72 = *(_QWORD *)(v0 + 488);
      v68[(v43 >> 6) + 8] |= 1 << v43;
      v73 = v68[6] + 24 * v43;
      *(_BYTE *)v73 = (_BYTE)v2;
      *(_QWORD *)(v73 + 8) = v3;
      *(_QWORD *)(v73 + 16) = v1;
      v70(v68[7] + v69 * v43, v71, v72);
      v74 = v68[2];
      v75 = __OFADD__(v74, 1);
      v76 = v74 + 1;
      if (v75)
      {
        __break(1u);
        JUMPOUT(0x1003D4748);
      }
      v68[2] = v76;
      swift_bridgeObjectRetain(v1);
    }
    v65 = (uint64_t *)(v0 + 328);
    v67 = v0 + 176;
    *v145 = *v62;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v77 = *(_QWORD *)(v0 + 656);
  v78 = *(_QWORD *)(v0 + 536);
  v79 = *(_QWORD *)(v0 + 488);
  v80 = *(_QWORD *)(v0 + 400);
  v81 = *(_QWORD *)(v0 + 672) + 1;
  v82 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 496) + 8);
  v82(*(_QWORD *)(v0 + 528), v79);
  sub_1000126B0(v80, type metadata accessor for OwnerPeerTrust);
  v82(v78, v79);
  if (v81 != v77)
  {
    v84 = *(_QWORD *)(v0 + 672) + 1;
    v85 = *(_QWORD *)(v0 + 664);
    v86 = *(_QWORD **)(v0 + 648);
    v87 = *(_QWORD **)(v0 + 496);
    goto LABEL_52;
  }
  v83 = (void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 680);
LABEL_55:
  (*v83)(*(_QWORD *)(v0 + 432), 1, 1, *(_QWORD *)(v0 + 488));
  do
  {
    v108 = *(_QWORD *)(v0 + 640);
    v109 = *(_QWORD *)(v0 + 632);
    v110 = *(_QWORD *)(v0 + 456);
    swift_release();
    sub_1000126B0(v110, type metadata accessor for OwnerSharingCircle);
    if (v108 + 1 == v109)
      goto LABEL_59;
    v111 = *(_QWORD *)(v0 + 640) + 1;
    *(_QWORD *)(v0 + 640) = v111;
    v112 = *(_QWORD *)(v0 + 624);
    if (v111 >= *(_QWORD *)(v112 + 16))
    {
      __break(1u);
LABEL_59:
      swift_release();
      if (*(_QWORD *)(*(_QWORD *)(v0 + 328) + 16))
      {
        sub_10037A9F4(*(_QWORD *)(v0 + 344), v65);
        *(_QWORD *)(v0 + 752) = v113;
        v114 = *(_QWORD *)(v113 + 16);
        *(_QWORD *)(v0 + 760) = v114;
        if (v114)
        {
          sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v134, &qword_1010EE220);
          if (*(_QWORD *)(v0 + 80))
          {
            sub_10000F9FC(v134, (uint64_t)v54);
            sub_10001AA44(v54, *(_QWORD *)(v0 + 160));
            v147 = (uint64_t (*)(void))((char *)&dword_1010EBBD0 + dword_1010EBBD0);
            v115 = (_QWORD *)swift_task_alloc(unk_1010EBBD4);
            *(_QWORD *)(v0 + 768) = v115;
            *v115 = v0;
            v115[1] = sub_1003D4CD4;
            v31 = v147;
            return v31();
          }
LABEL_69:
          __break(1u);
          JUMPOUT(0x1003D4B58);
        }
        swift_bridgeObjectRelease();
        v116 = 1;
      }
      else
      {
        v116 = 2;
      }
      v117 = sub_1003D624C();
      v148 = swift_allocError(&type metadata for BeaconSharingManager.KeyDropSharingError, v117, 0, 0);
      *v118 = v116;
      swift_willThrow(v148);
      swift_release();
      swift_bridgeObjectRelease();
      v119 = *(_QWORD *)(v0 + 536);
      v120 = *(_QWORD *)(v0 + 528);
      v121 = *(_QWORD *)(v0 + 520);
      v122 = *(_QWORD *)(v0 + 512);
      v124 = *(_QWORD *)(v0 + 472);
      v123 = *(_QWORD *)(v0 + 480);
      v126 = *(_QWORD *)(v0 + 456);
      v125 = *(_QWORD *)(v0 + 464);
      v127 = *(_QWORD *)(v0 + 432);
      v133 = *(_QWORD *)(v0 + 424);
      v136 = *(_QWORD *)(v0 + 416);
      v138 = *(_QWORD *)(v0 + 408);
      v140 = *(_QWORD *)(v0 + 400);
      v142 = *(_QWORD *)(v0 + 376);
      v144 = *(_QWORD *)(v0 + 360);
      swift_task_dealloc(*(_QWORD *)(v0 + 544));
      swift_task_dealloc(v119);
      swift_task_dealloc(v120);
      swift_task_dealloc(v121);
      swift_task_dealloc(v122);
      swift_task_dealloc(v123);
      swift_task_dealloc(v124);
      swift_task_dealloc(v125);
      swift_task_dealloc(v126);
      swift_task_dealloc(v127);
      swift_task_dealloc(v133);
      swift_task_dealloc(v136);
      swift_task_dealloc(v138);
      swift_task_dealloc(v140);
      swift_task_dealloc(v142);
      swift_task_dealloc(v144);
      v31 = *(uint64_t (**)(void))(v0 + 8);
      return v31();
    }
    v88 = *(_QWORD *)(v0 + 456);
    v89 = *(_QWORD *)(v0 + 440);
    sub_10005972C(v112+ ((*(unsigned __int8 *)(v0 + 832) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 832))+ *(_QWORD *)(*(_QWORD *)(v0 + 448) + 72) * v111, v88, type metadata accessor for OwnerSharingCircle);
    v90 = *(_QWORD *)(v88 + *(int *)(v89 + 32));
    v91 = *(_QWORD *)(v90 + 16);
    v86 = _swiftEmptyArrayStorage;
    if (v91)
    {
      v92 = *(unsigned __int8 *)(v0 + 828);
      v93 = *(_QWORD *)(v0 + 496);
      v94 = (v92 + 32) & ~v92;
      v95 = v92 | 7;
      v96 = sub_10001A9A8(&qword_1011003C0);
      v97 = *(_QWORD *)(v93 + 72);
      v86 = (_QWORD *)swift_allocObject(v96, v94 + v97 * v91, v95);
      v98 = j__malloc_size(v86);
      if (!v97)
      {
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      if (v98 - v94 == 0x8000000000000000 && v97 == -1)
        goto LABEL_68;
      v100 = *(unsigned __int8 *)(v0 + 828);
      v86[2] = v91;
      v86[3] = 2 * ((uint64_t)(v98 - v94) / v97);
      v101 = (char *)v86 + ((v100 + 32) & ~v100);
      swift_bridgeObjectRetain_n(v90, 2);
      v102 = sub_10050A294(v67, v101, v91, v90);
      sub_10007CC38(*(_QWORD *)(v0 + 176));
      if (v102 != v91)
        goto LABEL_67;
      swift_bridgeObjectRelease();
    }
    *(_QWORD *)(v0 + 648) = v86;
    v103 = v86[2];
    *(_QWORD *)(v0 + 656) = v103;
    v87 = *(_QWORD **)(v0 + 496);
    if (!v103)
    {
      v83 = (void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v87 + 7);
      goto LABEL_55;
    }
    v84 = 0;
    v85 = v87[9];
    *(_QWORD *)(v0 + 664) = v85;
LABEL_52:
    *(_QWORD *)(v0 + 672) = v84;
    v104 = *(_QWORD *)(v0 + 488);
    v105 = *(_QWORD *)(v0 + 432);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 584))(v105, (unint64_t)v86+ ((*(unsigned __int8 *)(v0 + 828) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 828))+ v85 * v84, v104);
    v106 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v87[7];
    *(_QWORD *)(v0 + 680) = v106;
    v106(v105, 0, 1, v104);
    v107 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v87[6];
    *(_QWORD *)(v0 + 688) = v107;
  }
  while (v107(v105, 1, v104) == 1);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 600))(*(_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 488));
  return swift_task_switch(sub_1003D39DC, *(_QWORD *)(v0 + 560), 0);
}

uint64_t sub_1003D4B74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 536);
  v2 = *(_QWORD *)(v0 + 488);
  v3 = *(_QWORD *)(v0 + 496);
  v4 = *(_QWORD *)(v0 + 456);
  v5 = *(_QWORD *)(v0 + 400);
  swift_release();
  sub_1000126B0(v5, type metadata accessor for OwnerPeerTrust);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_1000126B0(v4, type metadata accessor for OwnerSharingCircle);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 536);
  v7 = *(_QWORD *)(v0 + 528);
  v8 = *(_QWORD *)(v0 + 520);
  v9 = *(_QWORD *)(v0 + 512);
  v11 = *(_QWORD *)(v0 + 472);
  v10 = *(_QWORD *)(v0 + 480);
  v13 = *(_QWORD *)(v0 + 456);
  v12 = *(_QWORD *)(v0 + 464);
  v14 = *(_QWORD *)(v0 + 432);
  v16 = *(_QWORD *)(v0 + 424);
  v17 = *(_QWORD *)(v0 + 416);
  v18 = *(_QWORD *)(v0 + 408);
  v19 = *(_QWORD *)(v0 + 400);
  v20 = *(_QWORD *)(v0 + 376);
  v21 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003D4CD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 768);
  *(_QWORD *)(*(_QWORD *)v1 + 776) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003D4D30, 0, 0);
}

uint64_t sub_1003D4D30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (!*(_QWORD *)(v0 + 776))
  {
    swift_bridgeObjectRelease();
    v16 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
    v17 = static os_log_type_t.error.getter(v16);
    if (qword_1010EA278 != -1)
      swift_once(&qword_1010EA278, sub_100B5DB4C);
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_1011B7D58, "No SharingService available!", 28, 2, _swiftEmptyArrayStorage);
    v18 = sub_100033220();
    v44 = swift_allocError(&type metadata for DaemonError, v18, 0, 0);
    strcpy(v19, "SharingService");
    v19[15] = -18;
    swift_willThrow(v44);
    swift_release();
    swift_bridgeObjectRelease();
    v20 = *(_QWORD *)(v0 + 536);
    v21 = *(_QWORD *)(v0 + 528);
    v22 = *(_QWORD *)(v0 + 520);
    v23 = *(_QWORD *)(v0 + 512);
    v25 = *(_QWORD *)(v0 + 472);
    v24 = *(_QWORD *)(v0 + 480);
    v27 = *(_QWORD *)(v0 + 456);
    v26 = *(_QWORD *)(v0 + 464);
    v28 = *(_QWORD *)(v0 + 432);
    v32 = *(_QWORD *)(v0 + 424);
    v34 = *(_QWORD *)(v0 + 416);
    v36 = *(_QWORD *)(v0 + 408);
    v38 = *(_QWORD *)(v0 + 400);
    v40 = *(_QWORD *)(v0 + 376);
    v42 = *(_QWORD *)(v0 + 360);
    swift_task_dealloc(*(_QWORD *)(v0 + 544));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v36);
    swift_task_dealloc(v38);
    swift_task_dealloc(v40);
    swift_task_dealloc(v42);
    v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  v1 = *(_QWORD *)(v0 + 496);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
  *(_QWORD *)(v0 + 784) = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v0 + 792) = 0;
  v2 = *(_QWORD *)(v0 + 488);
  v3 = *(_QWORD *)(v0 + 496);
  v4 = *(_QWORD *)(v0 + 408);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 584))(v4, *(_QWORD *)(v0 + 752)+ ((*(unsigned __int8 *)(v0 + 828) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 828)), v2);
  v5 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56);
  *(_QWORD *)(v0 + 800) = v5;
  v5(v4, 0, 1, v2);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v6 = *(_QWORD *)(v0 + 544);
    v7 = *(_QWORD *)(v0 + 536);
    v8 = *(_QWORD *)(v0 + 528);
    v9 = *(_QWORD *)(v0 + 520);
    v10 = *(_QWORD *)(v0 + 512);
    v11 = *(_QWORD *)(v0 + 472);
    v12 = *(_QWORD *)(v0 + 480);
    v14 = *(_QWORD *)(v0 + 456);
    v13 = *(_QWORD *)(v0 + 464);
    v31 = *(_QWORD *)(v0 + 432);
    v33 = *(_QWORD *)(v0 + 424);
    v35 = *(_QWORD *)(v0 + 416);
    v37 = *(_QWORD *)(v0 + 408);
    v39 = *(_QWORD *)(v0 + 400);
    v41 = *(_QWORD *)(v0 + 376);
    v43 = *(_QWORD *)(v0 + 360);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v12);
    swift_task_dealloc(v11);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v31);
    swift_task_dealloc(v33);
    swift_task_dealloc(v35);
    swift_task_dealloc(v37);
    swift_task_dealloc(v39);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 600))(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 488));
  v30 = (_QWORD *)swift_task_alloc(dword_1010EE284);
  *(_QWORD *)(v0 + 808) = v30;
  *v30 = v0;
  v30[1] = sub_1003D50E8;
  return sub_1000C56D8(*(_QWORD *)(v0 + 512));
}

uint64_t sub_1003D50E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 808);
  *(_QWORD *)(*(_QWORD *)v1 + 816) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_bridgeObjectRelease();
    v3 = sub_1003D53A8;
  }
  else
  {
    v3 = sub_1003D5154;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003D5154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 760);
  v2 = *(_QWORD *)(v0 + 792) + 1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 496) + 8))(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 488));
  if (v2 == v1)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 800))(*(_QWORD *)(v0 + 408), 1, 1, *(_QWORD *)(v0 + 488));
LABEL_4:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v8 = *(_QWORD *)(v0 + 544);
    v9 = *(_QWORD *)(v0 + 536);
    v10 = *(_QWORD *)(v0 + 528);
    v11 = *(_QWORD *)(v0 + 520);
    v12 = *(_QWORD *)(v0 + 512);
    v13 = *(_QWORD *)(v0 + 472);
    v14 = *(_QWORD *)(v0 + 480);
    v16 = *(_QWORD *)(v0 + 456);
    v15 = *(_QWORD *)(v0 + 464);
    v19 = *(_QWORD *)(v0 + 432);
    v20 = *(_QWORD *)(v0 + 424);
    v21 = *(_QWORD *)(v0 + 416);
    v22 = *(_QWORD *)(v0 + 408);
    v23 = *(_QWORD *)(v0 + 400);
    v24 = *(_QWORD *)(v0 + 376);
    v25 = *(_QWORD *)(v0 + 360);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    swift_task_dealloc(v13);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(_QWORD *)(v0 + 792) + 1;
  *(_QWORD *)(v0 + 792) = v3;
  v4 = *(_QWORD *)(v0 + 488);
  v5 = *(_QWORD *)(v0 + 496);
  v6 = *(_QWORD *)(v0 + 408);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 584))(v6, *(_QWORD *)(v0 + 752)+ ((*(unsigned __int8 *)(v0 + 828) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 828))+ *(_QWORD *)(v0 + 784) * v3, v4);
  v7 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56);
  *(_QWORD *)(v0 + 800) = v7;
  v7(v6, 0, 1, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1)
    goto LABEL_4;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 600))(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 488));
  v18 = (_QWORD *)swift_task_alloc(dword_1010EE284);
  *(_QWORD *)(v0 + 808) = v18;
  *v18 = v0;
  v18[1] = sub_1003D50E8;
  return sub_1000C56D8(*(_QWORD *)(v0 + 512));
}

uint64_t sub_1003D53A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 560);
  v2 = *(_QWORD *)(v0 + 512);
  v3 = *(_QWORD *)(v0 + 488);
  v4 = *(_QWORD *)(v0 + 496);
  swift_release(*(_QWORD *)(v0 + 776));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 328));
  v5 = *(_QWORD *)(v0 + 536);
  v6 = *(_QWORD *)(v0 + 528);
  v7 = *(_QWORD *)(v0 + 520);
  v8 = *(_QWORD *)(v0 + 512);
  v10 = *(_QWORD *)(v0 + 472);
  v9 = *(_QWORD *)(v0 + 480);
  v12 = *(_QWORD *)(v0 + 456);
  v11 = *(_QWORD *)(v0 + 464);
  v13 = *(_QWORD *)(v0 + 432);
  v15 = *(_QWORD *)(v0 + 424);
  v16 = *(_QWORD *)(v0 + 416);
  v17 = *(_QWORD *)(v0 + 408);
  v18 = *(_QWORD *)(v0 + 400);
  v19 = *(_QWORD *)(v0 + 376);
  v20 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003D54EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v2[17] = a1;
  v2[18] = a2;
  v3 = type metadata accessor for StableIdentifier(0);
  v2[19] = v3;
  v2[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date(0);
  v2[21] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[22] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[23] = swift_task_alloc(v6);
  v2[24] = swift_task_alloc(v6);
  v2[25] = swift_task_alloc(v6);
  v2[26] = swift_task_alloc(v6);
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for SharingRampState(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[27] = swift_task_alloc(v7);
  v2[28] = swift_task_alloc(v7);
  return swift_task_switch(sub_1003D55C8, 0, 0);
}

uint64_t sub_1003D55C8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t (*v7)(void);
  char v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);

  v1 = *(_QWORD *)(v0 + 144);
  if (!*(_QWORD *)(v1 + 16))
  {
    v8 = 0;
LABEL_14:
    v9 = sub_1003D624C();
    v10 = swift_allocError(&type metadata for BeaconSharingManager.KeyDropSharingError, v9, 0, 0);
    *v11 = v8;
    swift_willThrow(v10);
    v12 = *(_QWORD *)(v0 + 216);
    v14 = *(_QWORD *)(v0 + 200);
    v13 = *(_QWORD *)(v0 + 208);
    v16 = *(_QWORD *)(v0 + 184);
    v15 = *(_QWORD *)(v0 + 192);
    v17 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 224));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
  v2 = sub_10037ADC4(v1);
  v3 = sub_100CA827C((uint64_t)v2);
  *(_QWORD *)(v0 + 232) = v3;
  swift_bridgeObjectRelease();
  if ((v3 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(v3 + 16))
      goto LABEL_7;
    goto LABEL_13;
  }
  if (v3 < 0)
    v4 = v3;
  else
    v4 = v3 & 0xFFFFFFFFFFFFFF8;
  if (!__CocoaSet.count.getter(v4))
  {
LABEL_13:
    swift_bridgeObjectRelease();
    v8 = 3;
    goto LABEL_14;
  }
LABEL_7:
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v18 = (uint64_t (*)(void))((char *)&dword_1010EBBD0 + dword_1010EBBD0);
    v6 = (_QWORD *)swift_task_alloc(unk_1010EBBD4);
    *(_QWORD *)(v0 + 240) = v6;
    *v6 = v0;
    v6[1] = sub_1003D57A0;
    v7 = v18;
    return v7();
  }
  __break(1u);
  return result;
}

uint64_t sub_1003D57A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003D57FC, 0, 0);
}

uint64_t sub_1003D57FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *log;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86[2];

  if (v0[31])
  {
    v1 = v0[17];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
    v2 = type metadata accessor for OwnedBeaconRecord(0);
    v3 = v1 + *(int *)(v2 + 24);
    if ((sub_100C6F9A8() & 1) != 0)
    {
      v4 = (char *)v0[28];
      sub_10037F308(v4);
      v5 = sub_10001A9A8(&qword_1010F9FC8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 2, v5))
      {
        v6 = v0[17] + *(int *)(v2 + 20);
        v7 = (_QWORD *)swift_task_alloc(dword_1010EE264);
        v0[32] = v7;
        *v7 = v0;
        v7[1] = sub_1003D5FB4;
        return sub_1000C0DE8(v6, v0[29]);
      }
      v24 = v0[28];
      v25 = v0[26];
      v27 = v0[21];
      v26 = v0[22];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v25, v24, v27);
      if (qword_1010E9938 != -1)
        swift_once(&qword_1010E9938, sub_1000AFBB0);
      v29 = v0[25];
      v28 = v0[26];
      v31 = v0[21];
      v30 = v0[22];
      v32 = type metadata accessor for Logger(0);
      sub_10001A9E8(v32, (uint64_t)qword_1011B6748);
      v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v29, v28, v31);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.default.getter(v34);
      v36 = os_log_type_enabled(v34, v35);
      v37 = v0[25];
      v38 = v0[26];
      v40 = v0[21];
      v39 = v0[22];
      if (v36)
      {
        v81 = v0[22];
        log = v34;
        v41 = (uint8_t *)swift_slowAlloc(12, -1);
        v83 = swift_slowAlloc(32, -1);
        v86[0] = v83;
        *(_DWORD *)v41 = 136446210;
        v42 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v43 = dispatch thunk of CustomStringConvertible.description.getter(v40, v42);
        v0[16] = sub_100016940(v43, v44, v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v41 + 4, v41 + 12);
        swift_bridgeObjectRelease();
        v45 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
        v45(v37, v40);
        _os_log_impl((void *)&_mh_execute_header, log, v35, "allowedToUseUTFSItemSharing == .notAllowed(retry: %{public}s", v41, 0xCu);
        swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v83, -1, -1);
        swift_slowDealloc(v41, -1, -1);
        swift_release();

        v45(v38, v40);
      }
      else
      {
        swift_release();

        v50 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
        v50(v37, v40);
        v50(v38, v40);
      }
    }
    else
    {
      v22 = v0[19];
      v21 = v0[20];
      sub_10005972C(v3, v21, type metadata accessor for StableIdentifier);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v21, v22);
      sub_1000126B0(v21, type metadata accessor for StableIdentifier);
      if (EnumCaseMultiPayload)
      {
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        v46 = (char *)v0[27];
        sub_10037F308(v46);
        v47 = sub_10001A9A8(&qword_1010F9FC8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48))(v46, 2, v47))
        {
          v48 = v0[17] + *(int *)(v2 + 20);
          v49 = (_QWORD *)swift_task_alloc(dword_1010EE274);
          v0[34] = v49;
          *v49 = v0;
          v49[1] = sub_1003D60A8;
          return sub_1000C1200(v48, v0[29]);
        }
        v51 = v0[27];
        v52 = v0[24];
        v53 = v0[21];
        v54 = v0[22];
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32))(v52, v51, v53);
        if (qword_1010E9938 != -1)
          swift_once(&qword_1010E9938, sub_1000AFBB0);
        v56 = v0[23];
        v55 = v0[24];
        v57 = v0[21];
        v58 = v0[22];
        v59 = type metadata accessor for Logger(0);
        sub_10001A9E8(v59, (uint64_t)qword_1011B6748);
        v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v56, v55, v57);
        v61 = Logger.logObject.getter(v60);
        v62 = static os_log_type_t.default.getter(v61);
        v63 = os_log_type_enabled(v61, v62);
        v64 = v0[23];
        v65 = v0[24];
        v67 = v0[21];
        v66 = v0[22];
        if (v63)
        {
          v85 = v0[24];
          v84 = v0[22];
          v68 = (uint8_t *)swift_slowAlloc(12, -1);
          v69 = swift_slowAlloc(32, -1);
          v86[0] = v69;
          *(_DWORD *)v68 = 136446210;
          v70 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v71 = dispatch thunk of CustomStringConvertible.description.getter(v67, v70);
          v0[15] = sub_100016940(v71, v72, v86);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v68 + 4, v68 + 12);
          swift_bridgeObjectRelease();
          v73 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
          v73(v64, v67);
          _os_log_impl((void *)&_mh_execute_header, v61, v62, "allowedToUseSelfBeaconingItemSharing == .notAllowed(retry: %{public}s", v68, 0xCu);
          swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v69, -1, -1);
          swift_slowDealloc(v68, -1, -1);
          swift_release();

          v73(v85, v67);
        }
        else
        {
          swift_release();

          v74 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
          v74(v64, v67);
          v74(v65, v67);
        }
      }
    }
    v75 = v0[27];
    v77 = v0[25];
    v76 = v0[26];
    v79 = v0[23];
    v78 = v0[24];
    v80 = v0[20];
    swift_task_dealloc(v0[28]);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    v20 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    swift_bridgeObjectRelease();
    v9 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
    v10 = static os_log_type_t.error.getter(v9);
    if (qword_1010EA278 != -1)
      swift_once(&qword_1010EA278, sub_100B5DB4C);
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, qword_1011B7D58, "No SharingService available!", 28, 2, _swiftEmptyArrayStorage);
    v11 = sub_100033220();
    v12 = swift_allocError(&type metadata for DaemonError, v11, 0, 0);
    strcpy(v13, "SharingService");
    v13[15] = -18;
    swift_willThrow(v12);
    v14 = v0[27];
    v16 = v0[25];
    v15 = v0[26];
    v18 = v0[23];
    v17 = v0[24];
    v19 = v0[20];
    swift_task_dealloc(v0[28]);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    v20 = (uint64_t (*)(void))v0[1];
  }
  return v20();
}

uint64_t sub_1003D5FB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v3 = sub_1003D6114;
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = sub_1003D6020;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003D6020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*(_QWORD *)(v0 + 248));
  v1 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003D60A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v3 = sub_1003D61B0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = sub_1003D9998;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003D6114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 248);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 232));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003D61B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 248);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 232));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1003D624C()
{
  unint64_t result;

  result = qword_1010FA328;
  if (!qword_1010FA328)
  {
    result = swift_getWitnessTable(aM_11, &type metadata for BeaconSharingManager.KeyDropSharingError);
    atomic_store(result, &qword_1010FA328);
  }
  return result;
}

uint64_t sub_1003D6290()
{
  return sub_1003D8B40((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1003D62A4()
{
  return sub_1003D8B40((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1003D62B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1010FA334);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004A74;
  return sub_1003AFA10(a1, a2, v2);
}

void sub_1003D6314(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_1003CD2D0();
  if (!v1)
    *a1 = v3;
}

uint64_t sub_1003D633C(unsigned int a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  char v11;
  uint64_t v12;

  v7 = a6;
  v11 = sub_100A07F60(a4, a5, a6, *(_QWORD *)(v6 + 16));
  if ((v11 & 1) != 0)
    v12 = a4;
  else
    v12 = a1;
  if ((v11 & 1) == 0)
    v7 = a3;
  swift_bridgeObjectRetain(v7);
  return v12;
}

uint64_t sub_1003D63BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100341354(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

unint64_t sub_1003D63C4()
{
  unint64_t result;

  result = qword_1010FA358;
  if (!qword_1010FA358)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for MessagingDestination, &type metadata for MessagingDestination);
    atomic_store(result, (unint64_t *)&qword_1010FA358);
  }
  return result;
}

void sub_1003D6408()
{
  uint64_t v0;

  sub_1008CC1F4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1003D6424(uint64_t a1)
{
  uint64_t v1;

  return sub_100397788(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_1003D6448()
{
  return sub_1003D8AB4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1003D6454(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_BYTE *)(v1 + 24);
  v7 = (_QWORD *)swift_task_alloc(dword_1010FA37C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  v7[2] = a1;
  v8 = (_QWORD *)swift_task_alloc(dword_1010EE2AC);
  v7[3] = v8;
  *v8 = v7;
  v8[1] = sub_1002DB818;
  return sub_1000C0058(v6, v4, v5);
}

uint64_t sub_1003D64EC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 24, v3 | 7);
}

uint64_t sub_1003D67A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (unsigned __int8 *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_100397BC8(a1, *(_QWORD *)(v1 + 16), v1 + v4, *v5, *((_QWORD *)v5 + 1), *((_QWORD *)v5 + 2));
}

uint64_t sub_1003D6800(uint64_t a1)
{
  uint64_t v1;

  return sub_10038D2E0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1003D6808()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int *)type metadata accessor for ShareInstruction(0);
  v2 = *((_QWORD *)v1 - 1);
  v26 = *(unsigned __int8 *)(v2 + 80);
  v24 = *(_QWORD *)(v2 + 64);
  swift_release();
  v25 = (v26 + 24) & ~v26;
  v23 = v0;
  v3 = v0 + v25;
  swift_bridgeObjectRelease();
  v4 = v0 + v25 + v1[6];
  sub_10001BC14(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
  v5 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v6 = v4 + v5[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v10 = v4 + v5[6];
  v11 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v10, v11))
  {
    case 0u:
    case 4u:
      goto LABEL_5;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      v9(v10, v7);
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v7);
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v12 = v4 + v5[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = v4 + v5[8];
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v16(v13, v14);
  sub_10001BC14(*(_QWORD *)(v4 + v5[9]), *(_QWORD *)(v4 + v5[9] + 8));
  v17 = (uint64_t *)(v4 + v5[10]);
  v18 = v17[1];
  if (v18 >> 60 != 15)
    sub_10001BC14(*v17, v18);
  v19 = (uint64_t *)(v4 + v5[11]);
  v20 = v19[1];
  if (v20 >> 60 != 15)
    sub_10001BC14(*v19, v20);
  sub_10001BC14(*(_QWORD *)(v4 + v5[12]), *(_QWORD *)(v4 + v5[12] + 8));
  sub_10001BC14(*(_QWORD *)(v4 + v5[13]), *(_QWORD *)(v4 + v5[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9(v3 + v1[8], v7);
  v21 = v3 + v1[9];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v21, 1, v14))
    v16(v21, v14);
  swift_release();
  return swift_deallocObject(v23, ((v24 + v25 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v26 | 7);
}

uint64_t sub_1003D6B3C(uint64_t a1)
{
  return sub_1003D6B50(a1, type metadata accessor for ShareInstruction, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))sub_10038DBA0);
}

uint64_t sub_1003D6B50(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  v5 = *(_QWORD *)(a2(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (_QWORD *)(v3 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a3(a1, *(_QWORD *)(v3 + 16), v3 + v6, *v7, v7[1]);
}

uint64_t sub_1003D6BC0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003D6BD0(uint64_t a1)
{
  uint64_t v1;

  return sub_1003A0F7C(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void (**)(os_log_t, uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40), *(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_1003D6BF8()
{
  return sub_1003D6C04((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1003D6C04(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));
  a1(*(_QWORD *)(v1 + 24));

  return swift_deallocObject(v1, 40, 7);
}

uint64_t sub_1003D6C44(uint64_t a1)
{
  uint64_t v1;

  return sub_1003A1150(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void (**)(os_log_t, uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40), *(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_1003D6C68(uint64_t a1)
{
  uint64_t v1;

  return sub_1003A125C(a1, v1, "Error sending legacy shareBeacon message: %@", 44);
}

uint64_t sub_1003D6C8C()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D6C98()
{
  return sub_1003D8B40((void (*)(_QWORD))&_swift_release);
}

unint64_t sub_1003D6CAC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FA3A0;
  if (!qword_1010FA3A0)
  {
    v1 = sub_10001F784(&qword_1010FA398);
    v2 = sub_100006204(&qword_1010FA3A8, type metadata accessor for LegacyShareEnvelope, (uint64_t)&unk_100E6DFF0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FA3A0);
  }
  return result;
}

uint64_t sub_1003D6D28(uint64_t a1)
{
  uint64_t v1;

  return sub_1003A125C(a1, v1, "Error sending shareBeacon message: %@", 37);
}

uint64_t sub_1003D6D4C()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D6D58()
{
  return sub_1003D8B40((void (*)(_QWORD))&_swift_release);
}

unint64_t sub_1003D6D6C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FA3C0;
  if (!qword_1010FA3C0)
  {
    v1 = sub_10001F784(&qword_1010FA3B8);
    v2 = sub_100006204(&qword_1010FA3C8, type metadata accessor for FamilyShareEnvelopeV1, (uint64_t)&unk_100E6DFC8);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FA3C0);
  }
  return result;
}

uint64_t sub_1003D6DE8(uint64_t a1)
{
  return sub_1003D6E0C(a1, (uint64_t)&off_10104A280, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, __int16, Swift::Int, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))sub_1003C94FC);
}

uint64_t sub_1003D6E0C(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, __int16, Swift::Int, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))
{
  uint64_t v3;

  return sub_1003A212C(a1, *(_QWORD *)(v3 + 16), *(unsigned __int8 *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), a2, a3);
}

uint64_t sub_1003D6E48(uint64_t a1)
{
  uint64_t v1;

  return sub_1003A125C(a1, v1, "Error sending find my AirPods family share message: %@", 54);
}

uint64_t sub_1003D6E6C()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D6E78()
{
  return sub_1003D8B40((void (*)(_QWORD))&_swift_release);
}

unint64_t sub_1003D6E8C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FA3E0;
  if (!qword_1010FA3E0)
  {
    v1 = sub_10001F784(&qword_1010FA3D8);
    v2 = sub_100006204(&qword_1010FA3E8, type metadata accessor for FindMyAirPodsFamilyShareEnvelope, (uint64_t)&unk_100E3C624);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FA3E0);
  }
  return result;
}

uint64_t sub_1003D6F08(uint64_t a1)
{
  return sub_1003D6E0C(a1, (uint64_t)&off_10104A258, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, __int16, Swift::Int, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))sub_1003C82D8);
}

uint64_t sub_1003D6F2C(uint64_t a1)
{
  uint64_t v1;

  return sub_1003A125C(a1, v1, "Error sending find my accessory family share message: %@", 56);
}

uint64_t sub_1003D6F50()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D6F5C()
{
  return sub_1003D8B40((void (*)(_QWORD))&_swift_release);
}

unint64_t sub_1003D6F70()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FA400;
  if (!qword_1010FA400)
  {
    v1 = sub_10001F784(&qword_1010FA3F8);
    v2 = sub_100006204(&qword_1010FA408, type metadata accessor for FindMyAccessoryFamilyShareEnvelope, (uint64_t)&unk_100E63634);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FA400);
  }
  return result;
}

uint64_t sub_1003D6FEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = type metadata accessor for ShareRecord(0);
  return static UUID.== infix(_:_:)(a1 + *(int *)(v4 + 20), v3) & 1;
}

uint64_t sub_1003D7038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  char *v15;

  v1 = sub_10001A9A8((uint64_t *)&unk_101108180);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = (uint64_t *)(v0 + v4);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v1) == 1)
  {
    swift_errorRelease(*v6);
  }
  else
  {
    sub_10001BC14(*v6, v6[1]);
    v7 = (int *)type metadata accessor for ShareRecord(0);
    v8 = (char *)v6 + v7[5];
    v9 = type metadata accessor for UUID(0);
    v10 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
    v10(v8, v9);
    v10((char *)v6 + v7[6], v9);
    v11 = (char *)v6 + v7[7];
    v12 = type metadata accessor for Date(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(void (**)(char *, uint64_t))(v13 + 8);
    v14(v11, v12);
    v15 = (char *)v6 + v7[8];
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v15, 1, v12))
      v14(v15, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1003D718C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101108180) - 8) + 80);
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0 + ((v1 + 32) & ~v1));
}

BOOL sub_1003D71D0(uint64_t a1)
{
  uint64_t v1;

  return sub_10038CF78(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1003D71EC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int *)type metadata accessor for ShareInstruction(0);
  v2 = *((_QWORD *)v1 - 1);
  v26 = *(unsigned __int8 *)(v2 + 80);
  v24 = *(_QWORD *)(v2 + 64);

  swift_release();
  v25 = (v26 + 32) & ~v26;
  v23 = v0;
  v3 = v0 + v25;
  swift_bridgeObjectRelease();
  v4 = v0 + v25 + v1[6];
  sub_10001BC14(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
  v5 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v6 = v4 + v5[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v10 = v4 + v5[6];
  v11 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v10, v11))
  {
    case 0u:
    case 4u:
      goto LABEL_5;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      v9(v10, v7);
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v7);
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v12 = v4 + v5[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = v4 + v5[8];
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v16(v13, v14);
  sub_10001BC14(*(_QWORD *)(v4 + v5[9]), *(_QWORD *)(v4 + v5[9] + 8));
  v17 = (uint64_t *)(v4 + v5[10]);
  v18 = v17[1];
  if (v18 >> 60 != 15)
    sub_10001BC14(*v17, v18);
  v19 = (uint64_t *)(v4 + v5[11]);
  v20 = v19[1];
  if (v20 >> 60 != 15)
    sub_10001BC14(*v19, v20);
  sub_10001BC14(*(_QWORD *)(v4 + v5[12]), *(_QWORD *)(v4 + v5[12] + 8));
  sub_10001BC14(*(_QWORD *)(v4 + v5[13]), *(_QWORD *)(v4 + v5[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9(v3 + v1[8], v7);
  v21 = v3 + v1[9];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v21, 1, v14))
    v16(v21, v14);
  return swift_deallocObject(v23, v25 + v24, v26 | 7);
}

void sub_1003D7504(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;

  v4 = a2 & 1;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ShareInstruction(0) - 8) + 80);
  sub_10038C964(a1, v4, *(NSObject **)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + ((v5 + 32) & ~v5));
}

uint64_t sub_1003D7554()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1003D7578(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_100BED788(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32));
}

uint64_t sub_1003D758C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1003D75C8(uint64_t a1)
{
  uint64_t v1;

  return sub_100396740(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1003D75E0(uint64_t a1)
{
  return sub_1003967F0(a1);
}

uint64_t sub_1003D75E8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1003D761C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc(dword_1010FA41C);
  v6 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_100004A74;
  *(_QWORD *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch(sub_100396100, 0, 0);
}

uint64_t sub_1003D7694()
{
  return sub_100330A28((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1003D76A4(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return sub_1003962DC(a1, a2, a3, a4, a5, a6, *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
}

void *sub_1003D76AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  Swift::Int v11;
  void *result;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10001A9A8(&qword_1010FA430);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v35 = v1;
    v36 = a1 + 32;
    while (1)
    {
      v6 = *(void **)(v36 + 8 * v4);
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      v9 = v8;
      Hasher.init(_seed:)(v37);
      v10 = v6;
      String.hash(into:)(v37, v7, v9);
      v11 = Hasher._finalize()();
      result = (void *)swift_bridgeObjectRelease();
      v13 = -1 << *(_BYTE *)(v3 + 32);
      v14 = v11 & ~v13;
      v15 = v14 >> 6;
      v16 = *(_QWORD *)(v5 + 8 * (v14 >> 6));
      v17 = 1 << v14;
      if (((1 << v14) & v16) != 0)
      {
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14));
        v20 = v19;
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
        if (v18 == v21 && v20 == v22)
        {
LABEL_3:
          swift_bridgeObjectRelease_n(v20, 2);
LABEL_4:

          goto LABEL_5;
        }
        v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v21, v22, 0);
        swift_bridgeObjectRelease();
        result = (void *)swift_bridgeObjectRelease();
        if ((v24 & 1) != 0)
          goto LABEL_4;
        v25 = ~v13;
        while (1)
        {
          v14 = (v14 + 1) & v25;
          v15 = v14 >> 6;
          v16 = *(_QWORD *)(v5 + 8 * (v14 >> 6));
          v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0)
            break;
          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14));
          v20 = v27;
          v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
          if (v26 == v28 && v20 == v29)
            goto LABEL_3;
          v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v20, v28, v29, 0);
          swift_bridgeObjectRelease();
          result = (void *)swift_bridgeObjectRelease();
          if ((v31 & 1) != 0)
            goto LABEL_4;
        }
      }
      *(_QWORD *)(v5 + 8 * v15) = v17 | v16;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v14) = v10;
      v32 = *(_QWORD *)(v3 + 16);
      v33 = __OFADD__(v32, 1);
      v34 = v32 + 1;
      if (v33)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v34;
LABEL_5:
      if (++v4 == v35)
        return (void *)v3;
    }
  }
  return &_swiftEmptySetSingleton;
}

unint64_t sub_1003D78D8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FA448;
  if (!qword_1010FA448)
  {
    v1 = sub_10001F784(&qword_1010FA440);
    v2 = sub_100006204(&qword_1010FA450, type metadata accessor for CircleTrustAckEnvelopeV1, (uint64_t)&unk_100E38CA0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FA448);
  }
  return result;
}

unint64_t sub_1003D7954()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FA468;
  if (!qword_1010FA468)
  {
    v1 = sub_10001F784(&qword_1010FA460);
    v2 = sub_100006204(&qword_1010FA470, type metadata accessor for PeerTrustAckEnvelopeV1, (uint64_t)&unk_100E4CF28);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FA468);
  }
  return result;
}

void sub_1003D79D0(uint64_t a1)
{
  sub_1003D79EC(a1, &qword_1011101F0, &qword_1010FA558, SPTrackingAvoidanceResult_ptr);
}

void sub_1003D79EC(uint64_t a1, uint64_t *a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  id v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  id v32;
  Swift::Int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  char v40;
  uint64_t v41;
  id v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v50;

  v5 = a1;
  v6 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v7)
    {
LABEL_3:
      sub_10001A9A8(a2);
      v8 = (_QWORD *)static _SetStorage.allocate(capacity:)(v7);
      if (!v6)
        goto LABEL_4;
LABEL_11:
      if (v5 < 0)
        v11 = v5;
      else
        v11 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v9 = _CocoaArrayWrapper.endIndex.getter(v11);
      swift_bridgeObjectRelease();
      if (!v9)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_3;
  }
  v8 = &_swiftEmptySetSingleton;
  if (v6)
    goto LABEL_11;
LABEL_4:
  v9 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
    return;
LABEL_15:
  v12 = (char *)(v8 + 7);
  v50 = v9;
  if ((v5 & 0xC000000000000001) != 0)
  {
    v13 = 0;
    v46 = v5;
    while (1)
    {
      v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v5);
      v15 = __OFADD__(v13++, 1);
      if (v15)
      {
        __break(1u);
        goto LABEL_43;
      }
      v16 = v14;
      v17 = NSObject._rawHashValue(seed:)(v8[5]);
      v18 = -1 << *((_BYTE *)v8 + 32);
      v19 = v17 & ~v18;
      v20 = v19 >> 6;
      v21 = *(_QWORD *)&v12[8 * (v19 >> 6)];
      v22 = 1 << v19;
      if (((1 << v19) & v21) != 0)
      {
        sub_10000F4A0(0, a3, a4);
        v23 = *(id *)(v8[6] + 8 * v19);
        v24 = static NSObject.== infix(_:_:)(v23, v16);

        if ((v24 & 1) != 0)
        {
LABEL_17:
          swift_unknownObjectRelease(v16);
          v5 = v46;
          goto LABEL_18;
        }
        v25 = ~v18;
        while (1)
        {
          v19 = (v19 + 1) & v25;
          v20 = v19 >> 6;
          v21 = *(_QWORD *)&v12[8 * (v19 >> 6)];
          v22 = 1 << v19;
          if ((v21 & (1 << v19)) == 0)
            break;
          v26 = *(id *)(v8[6] + 8 * v19);
          v27 = static NSObject.== infix(_:_:)(v26, v16);

          if ((v27 & 1) != 0)
            goto LABEL_17;
        }
        v5 = v46;
      }
      *(_QWORD *)&v12[8 * v20] = v22 | v21;
      *(_QWORD *)(v8[6] + 8 * v19) = v16;
      v28 = v8[2];
      v15 = __OFADD__(v28, 1);
      v29 = v28 + 1;
      if (v15)
        goto LABEL_44;
      v8[2] = v29;
LABEL_18:
      if (v13 == v50)
        return;
    }
  }
  v30 = 0;
  v47 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v30 != v47)
  {
    v31 = v8[5];
    v32 = *(id *)(v5 + 32 + 8 * v30);
    v33 = NSObject._rawHashValue(seed:)(v31);
    v34 = -1 << *((_BYTE *)v8 + 32);
    v35 = v33 & ~v34;
    v36 = v35 >> 6;
    v37 = *(_QWORD *)&v12[8 * (v35 >> 6)];
    v38 = 1 << v35;
    if (((1 << v35) & v37) != 0)
    {
      sub_10000F4A0(0, a3, a4);
      v39 = *(id *)(v8[6] + 8 * v35);
      v40 = static NSObject.== infix(_:_:)(v39, v32);

      if ((v40 & 1) != 0)
        goto LABEL_30;
      v41 = ~v34;
      v35 = (v35 + 1) & v41;
      v36 = v35 >> 6;
      v37 = *(_QWORD *)&v12[8 * (v35 >> 6)];
      v38 = 1 << v35;
      if ((v37 & (1 << v35)) != 0)
      {
        while (1)
        {
          v42 = *(id *)(v8[6] + 8 * v35);
          v43 = static NSObject.== infix(_:_:)(v42, v32);

          if ((v43 & 1) != 0)
            break;
          v35 = (v35 + 1) & v41;
          v36 = v35 >> 6;
          v37 = *(_QWORD *)&v12[8 * (v35 >> 6)];
          v38 = 1 << v35;
          if ((v37 & (1 << v35)) == 0)
            goto LABEL_38;
        }
LABEL_30:

        v9 = v50;
        goto LABEL_31;
      }
LABEL_38:
      v9 = v50;
    }
    *(_QWORD *)&v12[8 * v36] = v38 | v37;
    *(_QWORD *)(v8[6] + 8 * v35) = v32;
    v44 = v8[2];
    v15 = __OFADD__(v44, 1);
    v45 = v44 + 1;
    if (v15)
      goto LABEL_45;
    v8[2] = v45;
LABEL_31:
    if (++v30 == v9)
      return;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

Swift::Int sub_1003D7D50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10001A9A8(&qword_1010FA550);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)(v19);
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(unsigned __int8 *)(v14 + v10) == v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_BYTE *)(v14 + v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

Swift::Int sub_1003D7E90(uint64_t a1)
{
  return sub_1003D7E9C(a1, (uint64_t *)&unk_1011101C0);
}

Swift::Int sub_1003D7E9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD v20[9];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001A9A8(a2);
    v4 = static _SetStorage.allocate(capacity:)(v2);
    v5 = 0;
    v6 = v4 + 56;
    v7 = a1 + 32;
    while (1)
    {
      v8 = *(unsigned __int8 *)(v7 + v5);
      Hasher.init(_seed:)(v20);
      Hasher._combine(_:)(v8);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v4 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v6 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      v15 = *(_QWORD *)(v4 + 48);
      if (((1 << v11) & v13) != 0)
      {
        if (*(unsigned __int8 *)(v15 + v11) == (_DWORD)v8)
          goto LABEL_3;
        v16 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v16;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v6 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          if (*(unsigned __int8 *)(v15 + v11) == (_DWORD)v8)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v6 + 8 * v12) = v14 | v13;
      *(_BYTE *)(v15 + v11) = v8;
      v17 = *(_QWORD *)(v4 + 16);
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v4 + 16) = v19;
LABEL_3:
      if (++v5 == v2)
        return v4;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

Swift::Int sub_1003D7FD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD v20[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10001A9A8(&qword_1010FA478);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(char *)(v6 + v4);
      Hasher.init(_seed:)(v20);
      v8 = qword_100E3C418[v7];
      Hasher._combine(_:)(v8);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      v15 = *(_QWORD *)(v3 + 48);
      if (((1 << v11) & v13) != 0)
      {
        if (qword_100E3C418[*(char *)(v15 + v11)] == v8)
          goto LABEL_3;
        v16 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v16;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          if (qword_100E3C418[*(char *)(v15 + v11)] == v8)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(_BYTE *)(v15 + v11) = v7;
      v17 = *(_QWORD *)(v3 + 16);
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v19;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

unint64_t sub_1003D8130()
{
  unint64_t result;

  result = qword_1010FA498;
  if (!qword_1010FA498)
  {
    result = swift_getWitnessTable(byte_100E38C78, &type metadata for CirclesUpdatedEnvelopeV1);
    atomic_store(result, (unint64_t *)&qword_1010FA498);
  }
  return result;
}

BOOL sub_1003D8174@<W0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 result;

  result = sub_1003AFD18(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_1003D81A4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 64, 7);
}

void sub_1003D81D8(uint64_t a1)
{
  uint64_t v1;

  sub_1003ABC58(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void **)(v1 + 48), *(NSObject **)(v1 + 56));
}

uint64_t sub_1003D81EC()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D81F8()
{
  return sub_1003D8B40((void (*)(_QWORD))&_swift_release);
}

unint64_t sub_1003D820C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FA4B8;
  if (!qword_1010FA4B8)
  {
    v1 = sub_10001F784(&qword_1010FA4B0);
    v2 = sub_100006204(&qword_1010FA4C0, type metadata accessor for SecureLocationsKeyUpdateEnvelope, (uint64_t)&unk_100E5BB80);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FA4B8);
  }
  return result;
}

uint64_t sub_1003D8288()
{
  return sub_1003D8AB4((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_1003D8294(uint64_t a1)
{
  uint64_t v1;

  sub_1003AC21C(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1003D82A4()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D82B0()
{
  return sub_1003D8B40((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1003D82C8()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_1003D8300()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003D8328()
{
  uint64_t v0;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1003D8354(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = v1 + 24;
  v6 = *(_QWORD *)(v1 + 64);
  v7 = (_QWORD *)swift_task_alloc(dword_1010FD544);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004C28;
  return sub_1004DE174(a1, v4, v5, v6);
}

uint64_t sub_1003D83C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1003D8448()
{
  _QWORD *v0;

  return sub_10073262C(v0);
}

uint64_t sub_1003D8450()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003D8460()
{
  uint64_t v0;

  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1003D849C()
{
  uint64_t v0;

  return sub_100399F9C(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24));
}

uint64_t *sub_1003D84A8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[5];
  v3 = a1[6];
  sub_10001BBBC(*a1, a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_1003D84F4(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003D853C(uint64_t a1)
{
  uint64_t v1;

  return sub_10039CF60(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), (uint64_t)&off_10104A168, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, char, _QWORD, __int16, Swift::Int, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, char, uint64_t, uint64_t))sub_1003C38C4);
}

uint64_t sub_1003D8588()
{
  return sub_1003D8AB4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1003D8594(uint64_t a1)
{
  uint64_t v1;

  return sub_10039D074(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), "Successfully sent location update message to: %@", 48, "Failed to send location update message to: %@. Error: %@", 56);
}

uint64_t sub_1003D85D8()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D85E4()
{
  return sub_1003D8B40((void (*)(_QWORD))&_swift_release);
}

unint64_t sub_1003D85F8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FA530;
  if (!qword_1010FA530)
  {
    v1 = sub_10001F784(&qword_1010FA528);
    v2 = sub_100006204(&qword_1010FA538, type metadata accessor for BeaconLocationUpdate, (uint64_t)&unk_100E57580);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FA530);
  }
  return result;
}

uint64_t sub_1003D8674()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v22 = *(unsigned __int8 *)(v2 + 80);
  v20 = *(_QWORD *)(v2 + 64);
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v19 = *(_QWORD *)(v4 + 64);
  v21 = (v22 + 16) & ~v22;
  sub_10001BC14(*(_QWORD *)(v0 + v21), *(_QWORD *)(v0 + v21 + 8));
  v6 = v0 + v21 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v21 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v10(v0 + v21 + v1[18], v3);
  v11 = v0 + v21 + v1[19];
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v12(v11, 1, v7))
    v9(v11, v7);
  v13 = v0 + v21 + v1[20];
  v14 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
  {
    v15 = v13 + *(int *)(v14 + 20);
    if (!v12(v15, 1, v7))
      v9(v15, v7);
  }
  v16 = (v21 + v20 + v5) & ~v5;
  v17 = (v19 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10(v0 + v16, v3);
  swift_release();
  return swift_deallocObject(v0, v17 + 8, v22 | v5 | 7);
}

uint64_t sub_1003D8868()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  return sub_1003AD614(v0 + v2, v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t sub_1003D88DC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1003D8A6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SharedBeaconRecord(0) - 8) + 80);
  return sub_1003AD740(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1003D8AA8()
{
  return sub_1003D8AB4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1003D8AB4(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 40));
  return swift_deallocObject(v1, 48, 7);
}

uint64_t sub_1003D8AE4(uint64_t a1)
{
  uint64_t v1;

  return sub_10039D074(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), "Successfully sent unregister intent message to: %@", 50, "Failed to send unregister intent message to: %@. Error: %@", 58);
}

uint64_t sub_1003D8B28()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1003D8B34()
{
  return sub_1003D8B40((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1003D8B40(void (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 24) & ~v5;
  v7 = v5 | 7;
  v8 = (*(_QWORD *)(v4 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v1 + 16));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1 + v6, v3);
  a1(*(_QWORD *)(v1 + v8));
  return swift_deallocObject(v1, v8 + 8, v7);
}

uint64_t sub_1003D8BD4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_100390B70(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1003D8C1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1003D8CB0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (_QWORD *)(v2 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a2(a1, *(_QWORD *)(v2 + 16), v2 + v5, *v6, v6[1]);
}

uint64_t sub_1003D8D1C()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1003D8D28()
{
  uint64_t v0;

  return sub_1003A71E0(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1003D8D34()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1003D8D68(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1010FA56C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004A74;
  return sub_100383F58(a1, v4, v5, v7, v6);
}

uint64_t sub_1003D8DE0()
{
  uint64_t v0;

  return sub_10038436C(v0);
}

uint64_t sub_1003D8DE8(uint64_t a1)
{
  swift_retain();
  sub_100382A1C((uint64_t)sub_1003D8E28, a1);
  return swift_release();
}

uint64_t sub_1003D8E28(uint64_t a1)
{
  return sub_10038BFE0(a1);
}

uint64_t sub_1003D8E34(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BeaconSharingSessionContext(0) - 8) + 80);
  return sub_1003ACACC(a1, a2, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5));
}

uint64_t sub_1003D8E84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;

  v1 = type metadata accessor for BeaconSharingSessionContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v4, v1);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      goto LABEL_4;
    case 1:
      swift_bridgeObjectRelease();
      return swift_deallocObject(v0, v4 + v5, v3 | 7);
    case 0:
LABEL_4:
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);
      break;
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1003D8F20@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BeaconSharingSessionContext(0) - 8) + 80);
  return sub_1003AD030(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_1003D8F70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;

  v1 = type metadata accessor for BeaconSharingSessionContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v4, v1);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      goto LABEL_4;
    case 1:
      swift_bridgeObjectRelease();
      return swift_deallocObject(v0, v4 + v5, v3 | 7);
    case 0:
LABEL_4:
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);
      break;
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1003D9018@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BeaconSharingSessionContext(0) - 8) + 80);
  return sub_1003AD0A8(a1, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5), a2);
}

uint64_t sub_1003D9068()
{
  uint64_t v0;

  return sub_1003AD18C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1003D9080@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = sub_100380A24(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_1003D90AC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003D90D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = type metadata accessor for BeaconSharingSessionContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v4, v1);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      goto LABEL_4;
    case 1:
      swift_bridgeObjectRelease();
      break;
    case 0:
LABEL_4:
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);
      break;
  }
  v8 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v8 + 16;
  sub_10001BC14(*(_QWORD *)(v0 + v8), *(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v9, v3 | 7);
}

void sub_1003D9198(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;

  v5 = *(_QWORD *)(type metadata accessor for BeaconSharingSessionContext(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (uint64_t *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  sub_100380EE0(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *v7, v7[1]);
}

uint64_t sub_1003D9200(uint64_t a1, char a2)
{
  uint64_t v2;

  (*(void (**)(uint64_t, _QWORD))(v2 + 16))(a1, a2 & 1);
  return 0;
}

uint64_t sub_1003D9228()
{
  uint64_t *v0;

  return sub_1003ACF34(v0[2], v0[3], v0[4]);
}

ValueMetadata *type metadata accessor for BeaconSharingManager.IntentsSupportedDeviceType()
{
  return &type metadata for BeaconSharingManager.IntentsSupportedDeviceType;
}

uint64_t _s12searchpartyd20BeaconSharingManagerC26IntentsSupportedDeviceTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1003D92A4 + 4 * byte_100E3BE06[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1003D92D8 + 4 * byte_100E3BE01[v4]))();
}

uint64_t sub_1003D92D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003D92E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003D92E8);
  return result;
}

uint64_t sub_1003D92F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003D92FCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1003D9300(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003D9308(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingManager.KeyDropSharingError()
{
  return &type metadata for BeaconSharingManager.KeyDropSharingError;
}

uint64_t storeEnumTagSinglePayload for BeaconSharingManager.BeaconSharingKeyError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1003D9364 + 4 * byte_100E3BE0B[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1003D9384 + 4 * byte_100E3BE10[v4]))();
}

_BYTE *sub_1003D9364(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1003D9384(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1003D938C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1003D9394(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1003D939C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1003D93A4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingManager.BeaconSharingKeyError()
{
  return &type metadata for BeaconSharingManager.BeaconSharingKeyError;
}

uint64_t storeEnumTagSinglePayload for BeaconSharingManager.ItemConnectionSupportedDeviceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1003D940C + 4 * byte_100E3BE1A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1003D9440 + 4 * byte_100E3BE15[v4]))();
}

uint64_t sub_1003D9440(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003D9448(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003D9450);
  return result;
}

uint64_t sub_1003D945C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003D9464);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1003D9468(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003D9470(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingManager.ItemConnectionSupportedDeviceType()
{
  return &type metadata for BeaconSharingManager.ItemConnectionSupportedDeviceType;
}

uint64_t sub_1003D948C()
{
  return sub_1000193A4(&qword_1010FA5E0, &qword_1010FA5E8, (const char *)&protocol conformance descriptor for [A]);
}

unint64_t sub_1003D94BC()
{
  unint64_t result;

  result = qword_1010FA5F0;
  if (!qword_1010FA5F0)
  {
    result = swift_getWitnessTable(byte_100E3C164, &type metadata for BeaconSharingManager.ItemConnectionSupportedDeviceType);
    atomic_store(result, (unint64_t *)&qword_1010FA5F0);
  }
  return result;
}

unint64_t sub_1003D9504()
{
  unint64_t result;

  result = qword_1010FA5F8;
  if (!qword_1010FA5F8)
  {
    result = swift_getWitnessTable(byte_100E3C1CC, &type metadata for BeaconSharingManager.BeaconSharingKeyError);
    atomic_store(result, (unint64_t *)&qword_1010FA5F8);
  }
  return result;
}

unint64_t sub_1003D954C()
{
  unint64_t result;

  result = qword_1010FA600;
  if (!qword_1010FA600)
  {
    result = swift_getWitnessTable(byte_100E3C234, &type metadata for BeaconSharingManager.KeyDropSharingError);
    atomic_store(result, (unint64_t *)&qword_1010FA600);
  }
  return result;
}

uint64_t sub_1003D9590()
{
  return sub_1000193A4(&qword_1010FA608, &qword_1010FA610, (const char *)&protocol conformance descriptor for [A]);
}

unint64_t sub_1003D95C0()
{
  unint64_t result;

  result = qword_1010FA618;
  if (!qword_1010FA618)
  {
    result = swift_getWitnessTable(aE_13, &type metadata for BeaconSharingManager.IntentsSupportedDeviceType);
    atomic_store(result, (unint64_t *)&qword_1010FA618);
  }
  return result;
}

unint64_t sub_1003D9608()
{
  unint64_t result;

  result = qword_1010FA620;
  if (!qword_1010FA620)
  {
    result = swift_getWitnessTable(byte_100E3C25C, &type metadata for BeaconSharingManager.IntentsSupportedDeviceType);
    atomic_store(result, (unint64_t *)&qword_1010FA620);
  }
  return result;
}

unint64_t sub_1003D9650()
{
  unint64_t result;

  result = qword_1010FA628;
  if (!qword_1010FA628)
  {
    result = swift_getWitnessTable(aU_8, &type metadata for BeaconSharingManager.IntentsSupportedDeviceType);
    atomic_store(result, (unint64_t *)&qword_1010FA628);
  }
  return result;
}

unint64_t sub_1003D9698()
{
  unint64_t result;

  result = qword_1010FA630;
  if (!qword_1010FA630)
  {
    result = swift_getWitnessTable(a5_0, &type metadata for BeaconSharingManager.ItemConnectionSupportedDeviceType);
    atomic_store(result, (unint64_t *)&qword_1010FA630);
  }
  return result;
}

unint64_t sub_1003D96E0()
{
  unint64_t result;

  result = qword_1010FA638;
  if (!qword_1010FA638)
  {
    result = swift_getWitnessTable(byte_100E3C0EC, &type metadata for BeaconSharingManager.ItemConnectionSupportedDeviceType);
    atomic_store(result, (unint64_t *)&qword_1010FA638);
  }
  return result;
}

void sub_1003D996C()
{
  sub_1003D07D0();
}

void sub_1003D9980()
{
  sub_1003D0800();
}

uint64_t sub_1003D9B50@<X0>(uint64_t a1@<X8>)
{
  return sub_1003BB2D8(a1);
}

uint64_t sub_1003D9B64@<X0>(BOOL *a1@<X8>)
{
  return sub_1003D0298(a1);
}

uint64_t sub_1003D9B94()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6E10);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6E10);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x746C694669737372, 0xEA00000000007265);
}

uint64_t sub_1003D9C0C()
{
  uint64_t result;
  uint64_t v1;

  result = static Duration.seconds(_:)(0.5);
  qword_1011B6E28 = result;
  unk_1011B6E30 = v1;
  return result;
}

uint64_t sub_1003D9C30(char *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_defaultActor_initialize(v4);
  *(_QWORD *)(v4 + 112) = &off_10104A4D0;
  *(_QWORD *)(v4 + 120) = &off_10104A500;
  v13 = ContinuousClock.init()(v12);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_rssiBuffer) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_lastProximityLevel) = 2;
  static ContinuousClock.Instant.now.getter(v13);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v14(v4 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_beacon, (uint64_t)a1, v8);
  if ((a3 & 1) != 0)
    v15 = 0;
  else
    v15 = a2;
  v32 = v15 - 4;
  if (__OFSUB__(v15, 4))
  {
    __break(1u);
  }
  else if (qword_1010E9BA8 == -1)
  {
    goto LABEL_6;
  }
  swift_once(&qword_1010E9BA8, sub_1003D9B94);
LABEL_6:
  v16 = type metadata accessor for Logger(0);
  sub_10001A9E8(v16, (uint64_t)qword_1011B6E10);
  v17 = ((uint64_t (*)(char *, char *, uint64_t))v14)(v11, a1, v8);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(42, -1);
    v30 = swift_slowAlloc(32, -1);
    v33 = v15;
    v34 = v30;
    *(_DWORD *)v20 = 134218755;
    v31 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2160;
    v33 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v20 + 14, v20 + 22);
    *(_WORD *)(v20 + 22) = 2081;
    v21 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v8, v21);
    v33 = sub_100016940(v22, v23, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v20 + 24, v20 + 32);
    swift_bridgeObjectRelease();
    v24 = *(void (**)(char *, uint64_t))(v9 + 8);
    v24(v11, v8);
    *(_WORD *)(v20 + 32) = 2048;
    v25 = v32;
    v33 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v20 + 34, v20 + 42);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Received TX Power: %ld for beacon %{private,mask.hash}s. Calibrated: %ld.", (uint8_t *)v20, 0x2Au);
    v26 = v30;
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    v24(v31, v8);
  }
  else
  {

    v27 = *(void (**)(char *, uint64_t))(v9 + 8);
    v27(v11, v8);
    v27(a1, v8);
    v25 = v32;
  }
  *(_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_txPower) = v25;
  return v4;
}

uint64_t sub_1003D9F74(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[27] = a1;
  v2[28] = v1;
  v3 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0);
  v2[29] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[30] = v4;
  v2[31] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ContinuousClock.Instant(0);
  v2[32] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[33] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[34] = swift_task_alloc(v7);
  v2[35] = swift_task_alloc(v7);
  return swift_task_switch(sub_1003DA00C, v1, 0);
}

uint64_t sub_1003DA00C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  id *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __objc2_ivar_list **p_ivars;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __objc2_ivar_list *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  void *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  id v71;
  id v72;
  char isUniquelyReferenced_nonNull_native;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  void (*v89)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  _BOOL4 v102;
  uint64_t v103;
  uint64_t v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  os_log_type_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t *v117;
  char *v118;
  unint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t);
  uint64_t v128;

  v2 = *(_QWORD *)(v0 + 224);
  v3 = (id *)(v0 + 216);
  v4 = (char *)objc_msgSend(*(id *)(v0 + 216), "rssi");
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_txPower);
  v6 = (unint64_t)&v4[-v5];
  if (__OFSUB__(v4, v5))
  {
    __break(1u);
    goto LABEL_38;
  }
  v117 = (uint64_t *)(v0 + 144);
  v1 = (_QWORD *)(v0 + 152);
  v122 = (_QWORD *)(v0 + 160);
  v125 = (unint64_t *)(v0 + 192);
  v120 = (_QWORD *)(v0 + 200);
  v7 = (_QWORD *)(*(_QWORD *)(v0 + 224) + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_rssiBuffer);
  swift_beginAccess(v7, v0 + 16, 0, 0);
  p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
  if (!*(_QWORD *)(*v7 + 16))
  {
    v118 = (char *)v6;
    v10 = *(_QWORD *)(v0 + 280);
    v11 = *(_QWORD *)(v0 + 256);
    v12 = *(_QWORD *)(v0 + 264);
    v13 = *(_QWORD *)(v0 + 224);
    ContinuousClock.now.getter(v8);
    v14 = v13 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_lastMeasurementTime;
    v15 = swift_beginAccess(v13 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_lastMeasurementTime, v0 + 40, 33, 0);
    v16 = v10;
    p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v12 + 40))(v14, v16, v11, v15);
    swift_endAccess(v0 + 40);
    if (qword_1010E9BA8 != -1)
      swift_once(&qword_1010E9BA8, sub_1003D9B94);
    v17 = *(_QWORD *)(v0 + 224);
    v18 = type metadata accessor for Logger(0);
    sub_10001A9E8(v18, (uint64_t)qword_1011B6E10);
    v19 = swift_retain_n(v17, 2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter(v20);
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(_QWORD *)(v0 + 224);
    if (v22)
    {
      v24 = swift_slowAlloc(22, -1);
      v116 = swift_slowAlloc(32, -1);
      v128 = v116;
      *(_DWORD *)v24 = 141558275;
      *v120 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v120, v0 + 208, v24 + 4, v24 + 12);
      *(_WORD *)(v24 + 12) = 2081;
      v25 = type metadata accessor for UUID(0);
      v26 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v27 = v25;
      v1 = (_QWORD *)(v0 + 152);
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v27, v26);
      *(_QWORD *)(v0 + 208) = sub_100016940(v28, v29, &v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v24 + 14, v24 + 22);
      swift_bridgeObjectRelease();
      swift_release_n(v23, 2);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "BTRSSIFilter is initialized for beacon: %{private,mask.hash}s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy(v116, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v116, -1, -1);
      v30 = v24;
      p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {
      swift_release_n(*(_QWORD *)(v0 + 224), 2);
    }

    v6 = (unint64_t)v118;
  }
  v31 = p_ivars[373];
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v31 == (__objc2_ivar_list *)-1)
    {
LABEL_11:
      v32 = *(_QWORD *)(v0 + 224);
      v33 = type metadata accessor for Logger(0);
      sub_10001A9E8(v33, (uint64_t)qword_1011B6E10);
      v34 = swift_retain_n(v32, 2);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.error.getter(v35);
      v37 = os_log_type_enabled(v35, v36);
      v38 = *(_QWORD *)(v0 + 224);
      if (v37)
      {
        v39 = swift_slowAlloc(32, -1);
        v40 = swift_slowAlloc(32, -1);
        v128 = v40;
        *(_DWORD *)v39 = 134218499;
        *v125 = v6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v125, v120, v39 + 4, v39 + 12);
        *(_WORD *)(v39 + 12) = 2160;
        *v1 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v122, v39 + 14, v39 + 22);
        *(_WORD *)(v39 + 22) = 2081;
        v41 = type metadata accessor for UUID(0);
        v42 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v43 = dispatch thunk of CustomStringConvertible.description.getter(v41, v42);
        *(_QWORD *)(v0 + 136) = sub_100016940(v43, v44, &v128);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v117, v39 + 24, v39 + 32);
        swift_bridgeObjectRelease();
        swift_release_n(v38, 2);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Ignoring invalid RSSI value: %ld from beacon %{private,mask.hash}s", (uint8_t *)v39, 0x20u);
        swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v39, -1, -1);
      }
      else
      {
        swift_release_n(*(_QWORD *)(v0 + 224), 2);
      }

      goto LABEL_36;
    }
LABEL_38:
    swift_once(&qword_1010E9BA8, sub_1003D9B94);
    goto LABEL_11;
  }
  if (v31 != (__objc2_ivar_list *)-1)
    swift_once(&qword_1010E9BA8, sub_1003D9B94);
  v45 = v0 + 88;
  v46 = *(void **)(v0 + 216);
  v47 = *(_QWORD *)(v0 + 224);
  v48 = type metadata accessor for Logger(0);
  sub_10001A9E8(v48, (uint64_t)qword_1011B6E10);
  swift_retain_n(v47, 2);
  v49 = Logger.logObject.getter(v46);
  v50 = static os_log_type_t.info.getter(v49);
  v51 = os_log_type_enabled(v49, v50);
  v52 = *(void **)(v0 + 216);
  v119 = v6;
  v121 = *(_QWORD *)(v0 + 224);
  v115 = v1;
  if (v51)
  {
    v53 = swift_slowAlloc(42, -1);
    v112 = (_QWORD *)swift_slowAlloc(8, -1);
    v114 = swift_slowAlloc(32, -1);
    v128 = v114;
    *(_DWORD *)v53 = 138413059;
    *v122 = v52;
    v113 = v50;
    v54 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v122, v0 + 168, v53 + 4, v53 + 12);
    *v112 = v52;

    *(_WORD *)(v53 + 12) = 2048;
    *(_QWORD *)(v0 + 168) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v53 + 14, v53 + 22);
    *(_WORD *)(v53 + 22) = 2160;
    *(_QWORD *)(v0 + 176) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v53 + 24, v53 + 32);
    *(_WORD *)(v53 + 32) = 2081;
    v55 = type metadata accessor for UUID(0);
    v56 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v57 = dispatch thunk of CustomStringConvertible.description.getter(v55, v56);
    *(_QWORD *)(v0 + 184) = sub_100016940(v57, v58, &v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v125, v53 + 34, v53 + 42);
    swift_bridgeObjectRelease();
    swift_release_n(v121, 2);
    _os_log_impl((void *)&_mh_execute_header, v49, v113, "Adding measurement: %@. Adjusted RSSI: %ld. Beacon: %{private,mask.hash}s.", (uint8_t *)v53, 0x2Au);
    v59 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v112, 1, v59);
    swift_slowDealloc(v112, -1, -1);
    swift_arrayDestroy(v114, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v114, -1, -1);
    v60 = v53;
    v45 = v0 + 88;
    swift_slowDealloc(v60, -1, -1);
  }
  else
  {

    swift_release_n(v121, 2);
  }

  v61 = objc_msgSend(*v3, "channel");
  v63 = *v7;
  if (*(_QWORD *)(*v7 + 16) && (v64 = sub_100519460(v61, v62), (v65 & 1) != 0))
  {
    v66 = v0 + 64;
    v67 = *(_QWORD **)(*(_QWORD *)(v63 + 56) + 8 * v64);
    swift_bridgeObjectRetain(v67);
    if ((swift_isUniquelyReferenced_nonNull_native(v68) & 1) == 0)
      v67 = sub_1007C978C(0, v67[2] + 1, 1, v67);
    v70 = v67[2];
    v69 = v67[3];
    if (v70 >= v69 >> 1)
      v67 = sub_1007C978C((_QWORD *)(v69 > 1), v70 + 1, 1, v67);
    v71 = *v3;
    v67[2] = v70 + 1;
    v67[v70 + 4] = v119;
    v72 = objc_msgSend(v71, "channel");
    swift_beginAccess(v7, v0 + 64, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v128 = *v7;
    *v7 = 0x8000000000000000;
    v75 = (uint64_t)v67;
    v76 = (uint64_t)v72;
  }
  else
  {
    v66 = v0 + 112;
    v77 = objc_msgSend(*v3, "channel");
    v78 = sub_10001A9A8(&qword_1010F21C0);
    v79 = swift_allocObject(v78, 40, 7);
    *(_OWORD *)(v79 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v79 + 32) = v119;
    swift_beginAccess(v7, v0 + 112, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v128 = *v7;
    *v7 = 0x8000000000000000;
    v75 = v79;
    v76 = (uint64_t)v77;
  }
  sub_10010C678(v75, v76, isUniquelyReferenced_nonNull_native, v74);
  *v7 = v128;
  swift_bridgeObjectRelease();
  v80 = swift_endAccess(v66);
  v81 = *(_QWORD *)(v0 + 272);
  v82 = *(_QWORD *)(v0 + 280);
  v83 = *(_QWORD *)(v0 + 256);
  v84 = *(_QWORD *)(v0 + 264);
  v85 = *(_QWORD *)(v0 + 248);
  v86 = *(_QWORD *)(v0 + 224);
  v123 = *(_QWORD *)(v0 + 240);
  v126 = *(_QWORD *)(v0 + 232);
  ContinuousClock.now.getter(v80);
  v87 = v86 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_lastMeasurementTime;
  v88 = swift_beginAccess(v87, v45, 0, 0);
  v89 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v84 + 16);
  v89(v82, v87, v83, v88);
  v90 = ContinuousClock.Instant.duration(to:)(v81);
  v92 = v91;
  v93 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
  *(_QWORD *)(v0 + 288) = v93;
  v93(v82, v83);
  v94 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v89)(v82, v87, v83);
  static Duration.UnitsFormatStyle.Unit.seconds.getter(v94);
  v95 = sub_100006204(&qword_101116030, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  v96 = static Duration.description<A>(_:_:units:)(v82, v81, v85, v83, v95);
  v98 = v97;
  (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v85, v126);
  v93(v82, v83);
  if (qword_1010E9BB0 != -1)
    swift_once(&qword_1010E9BB0, sub_1003D9C0C);
  if ((static Duration.< infix(_:_:)(v90, v92, qword_1011B6E28, unk_1011B6E30) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v108 = (_QWORD *)swift_task_alloc(dword_1010FA6B4);
    *(_QWORD *)(v0 + 296) = v108;
    *v108 = v0;
    v108[1] = sub_1003DAC1C;
    return sub_1003DB500();
  }
  v127 = v93;
  swift_bridgeObjectRetain(v98);
  v100 = Logger.logObject.getter(v99);
  v101 = static os_log_type_t.debug.getter(v100);
  v102 = os_log_type_enabled(v100, v101);
  v103 = *(_QWORD *)(v0 + 272);
  v104 = *(_QWORD *)(v0 + 256);
  if (v102)
  {
    v124 = *(_QWORD *)(v0 + 272);
    v105 = (uint8_t *)swift_slowAlloc(12, -1);
    v106 = swift_slowAlloc(32, -1);
    v128 = v106;
    *(_DWORD *)v105 = 136315138;
    swift_bridgeObjectRetain(v98);
    *v117 = sub_100016940(v96, v98, &v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v117, v115, v105 + 4, v105 + 12);
    swift_bridgeObjectRelease_n(v98, 3);
    _os_log_impl((void *)&_mh_execute_header, v100, v101, "Not returning result yet. Duration since last update: %s", v105, 0xCu);
    swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v106, -1, -1);
    swift_slowDealloc(v105, -1, -1);

    v107 = v124;
  }
  else
  {

    swift_bridgeObjectRelease_n(v98, 2);
    v107 = v103;
  }
  v127(v107, v104);
LABEL_36:
  v110 = *(_QWORD *)(v0 + 272);
  v111 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v110);
  swift_task_dealloc(v111);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1003DAC1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003DAC7C, v3, 0);
}

uint64_t sub_1003DAC7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 304);
  (*(void (**)(_QWORD, _QWORD))(v0 + 288))(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 256));
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1003DACE0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = v0;
  return swift_task_switch(sub_1003DACF8, v0, 0);
}

void sub_1003DACF8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __n128 v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __n128 v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __n128 v20;
  double v21;
  double v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  os_log_type_t type;
  os_log_type_t typea;
  os_log_t log;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v1 = (_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_rssiBuffer;
  v3 = swift_beginAccess(v2, v0 + 16, 1, 0);
  v4 = *(_QWORD *)v2;
  if (*(_QWORD *)(*(_QWORD *)v2 + 16) && (v5 = sub_100519460(37, v3), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
    sub_100024908();
    v8 = swift_bridgeObjectRetain(v7);
    v9 = Array<A>.mean.getter(v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = -128.0;
  }
  v10 = *(_QWORD *)v2;
  if (*(_QWORD *)(*(_QWORD *)v2 + 16) && (v11 = sub_100519460(38, v3), (v12 & 1) != 0))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
    sub_100024908();
    v14 = swift_bridgeObjectRetain(v13);
    v15 = Array<A>.mean.getter(v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = -128.0;
  }
  v16 = *(_QWORD *)v2;
  if (!*(_QWORD *)(*(_QWORD *)v2 + 16) || (v17 = sub_100519460(39, v3), (v18 & 1) == 0))
  {
    v21 = -128.0;
    if (v9 <= v15)
    {
      v22 = v15;
      if (v15 > -128.0)
        goto LABEL_21;
    }
    else
    {
      v22 = v9;
      if (v9 > -128.0)
        goto LABEL_21;
    }
LABEL_20:
    v22 = v21;
    goto LABEL_21;
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
  sub_100024908();
  v20 = swift_bridgeObjectRetain(v19);
  v21 = Array<A>.mean.getter(v20);
  swift_bridgeObjectRelease();
  if (v9 > v15)
    v22 = v9;
  else
    v22 = v15;
  if (v22 <= v21)
    goto LABEL_20;
LABEL_21:
  v23 = (double *)(v0 + 40);
  if (qword_1010E9BA8 != -1)
    swift_once(&qword_1010E9BA8, sub_1003D9B94);
  v24 = *v1;
  v25 = type metadata accessor for Logger(0);
  sub_10001A9E8(v25, (uint64_t)qword_1011B6E10);
  v26 = swift_retain_n(v24, 2);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  v29 = os_log_type_enabled(v27, v28);
  v30 = *v1;
  if (v29)
  {
    v65 = v2;
    v31 = swift_slowAlloc(62, -1);
    log = (os_log_t)swift_slowAlloc(32, -1);
    v68 = (uint64_t)log;
    *(_DWORD *)v31 = 134219267;
    *v23 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v31 + 4, v31 + 12);
    *(_WORD *)(v31 + 12) = 2048;
    *v23 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v31 + 14, v31 + 22);
    *(_WORD *)(v31 + 22) = 2048;
    *v23 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v31 + 24, v31 + 32);
    *(_WORD *)(v31 + 32) = 2048;
    *v23 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v31 + 34, v31 + 42);
    *(_WORD *)(v31 + 42) = 2160;
    *(_QWORD *)v23 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v31 + 44, v31 + 52);
    *(_WORD *)(v31 + 52) = 2081;
    v32 = type metadata accessor for UUID(0);
    v33 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v34 = dispatch thunk of CustomStringConvertible.description.getter(v32, v33);
    *(_QWORD *)v23 = sub_100016940(v34, v35, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v31 + 54, v31 + 62);
    swift_bridgeObjectRelease();
    swift_release_n(v30, 2);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "channel37Average: %f. channel38Average: %f. channel39Average: %f. filteredRSSI: %f. Beacon %{private,mask.hash}s", (uint8_t *)v31, 0x3Eu);
    swift_arrayDestroy(log, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(log, -1, -1);
    v36 = v31;
    v2 = v65;
    swift_slowDealloc(v36, -1, -1);
  }
  else
  {
    swift_release_n(*v1, 2);
  }

  v37 = *v1;
  v38 = *(_QWORD *)(*v1 + 112);
  v39 = *(_QWORD *)(v38 + 16);
  if (!v39)
  {
    __break(1u);
    goto LABEL_53;
  }
  if (*(double *)(v38 + 32) >= v22)
  {
    if (v39 < 2)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if (*(double *)(v38 + 40) < v22)
      v40 = 1;
    else
      v40 = 2;
  }
  else
  {
    v40 = 0;
  }
  v41 = OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_lastProximityLevel;
  v42 = *(_QWORD *)(v37 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_lastProximityLevel);
  if (v42 == 2)
    goto LABEL_46;
  if (__OFSUB__(v40, v42))
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v40 - v42 != 1)
    goto LABEL_46;
  if ((v42 & 0x8000000000000000) != 0)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v43 = *(_QWORD *)(v37 + 120);
  if (v42 < *(_QWORD *)(v43 + 16))
  {
    v44 = *(double *)(v43 + 8 * v42 + 32);
    v45 = swift_retain_n(*v1, 2);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.debug.getter(v46);
    v48 = os_log_type_enabled(v46, v47);
    v49 = *v1;
    if (v22 >= v44)
    {
      if (v48)
      {
        v56 = swift_slowAlloc(22, -1);
        v67 = swift_slowAlloc(32, -1);
        v68 = v67;
        *(_DWORD *)v56 = 141558275;
        *(_QWORD *)v23 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v56 + 4, v56 + 12);
        *(_WORD *)(v56 + 12) = 2081;
        typea = v47;
        v57 = type metadata accessor for UUID(0);
        v58 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v59 = dispatch thunk of CustomStringConvertible.description.getter(v57, v58);
        *(_QWORD *)v23 = sub_100016940(v59, v60, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v56 + 14, v56 + 22);
        swift_bridgeObjectRelease();
        swift_release_n(v49, 2);
        _os_log_impl((void *)&_mh_execute_header, v46, typea, "RSSI decrease is NOT small enough to switch to the lower level. Beacon: %{private,mask.hash}s.", (uint8_t *)v56, 0x16u);
        swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v67, -1, -1);
        swift_slowDealloc(v56, -1, -1);
      }
      else
      {
        swift_release_n(*v1, 2);
      }

LABEL_47:
      *(_QWORD *)v2 = _swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease();
      if ((~*(_QWORD *)&v22 & 0x7FF0000000000000) != 0)
      {
        if (v22 > -9.22337204e18)
        {
          if (v22 < 9.22337204e18)
          {
            (*(void (**)(_QWORD, _QWORD, uint64_t))(v0 + 8))(*(_QWORD *)(v37 + v41), 0, (uint64_t)v22);
            return;
          }
          goto LABEL_55;
        }
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    if (v48)
    {
      v66 = v2;
      v50 = swift_slowAlloc(22, -1);
      v61 = swift_slowAlloc(32, -1);
      v68 = v61;
      *(_DWORD *)v50 = 141558275;
      *(_QWORD *)v23 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v50 + 4, v50 + 12);
      *(_WORD *)(v50 + 12) = 2081;
      type = v47;
      v51 = type metadata accessor for UUID(0);
      v52 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v53 = dispatch thunk of CustomStringConvertible.description.getter(v51, v52);
      *(_QWORD *)v23 = sub_100016940(v53, v54, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v50 + 14, v50 + 22);
      swift_bridgeObjectRelease();
      swift_release_n(v49, 2);
      _os_log_impl((void *)&_mh_execute_header, v46, type, "RSSI decrease is enough to switch to the lower level. Beacon: %{private,mask.hash}s.", (uint8_t *)v50, 0x16u);
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      v55 = v50;
      v2 = v66;
      swift_slowDealloc(v55, -1, -1);
    }
    else
    {
      swift_release_n(*v1, 2);
    }

LABEL_46:
    *(_QWORD *)(v37 + v41) = v40;
    goto LABEL_47;
  }
LABEL_59:
  __break(1u);
}

uint64_t sub_1003DB500()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1[2] = v0;
  v2 = type metadata accessor for Date(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v1[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)swift_task_alloc(dword_1010FA6AC);
  v1[9] = v6;
  *v6 = v1;
  v6[1] = sub_1003DB5B0;
  v6[6] = v0;
  return swift_task_switch(sub_1003DACF8, v0, 0);
}

uint64_t sub_1003DB5B0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v3;
  v5 = *(_QWORD *)(*v3 + 72);
  v6 = *(_QWORD *)(*v3 + 16);
  *(_BYTE *)(v4 + 96) = a2;
  *(_QWORD *)(v4 + 80) = a1;
  *(_QWORD *)(v4 + 88) = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_1003DB614, v6, 0);
}

uint64_t sub_1003DB614()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  Class isa;
  Class v11;
  id v12;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_BYTE *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  v14 = *(_QWORD *)(v0 + 32);
  v15 = *(_QWORD *)(v0 + 24);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, *(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_beacon, v7);
  static Date.now.getter(v8);
  if ((v1 & 1) != 0)
    v3 = 3;
  v9 = objc_allocWithZone((Class)SPBTRSSIResult);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v11 = Date._bridgeToObjectiveC()().super.isa;
  v12 = objc_msgSend(v9, "initWithBeaconIdentifier:timestamp:bucket:rssi:", isa, v11, v3, v2);

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v6, v15);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v7);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(id))(v0 + 8))(v12);
}

uint64_t sub_1003DB734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  v1 = v0 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_beacon;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_clock;
  v4 = type metadata accessor for ContinuousClock(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_rssiBuffer));
  v5 = v0 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_lastMeasurementTime;
  v6 = type metadata accessor for ContinuousClock.Instant(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1003DB7F0()
{
  return type metadata accessor for BTRSSIFilter(0);
}

uint64_t type metadata accessor for BTRSSIFilter(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FA690;
  if (!qword_1010FA690)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BTRSSIFilter);
  return result;
}

uint64_t sub_1003DB834(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  v6[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(result - 8) + 64;
    v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
    result = type metadata accessor for ContinuousClock(319);
    if (v4 <= 0x3F)
    {
      v6[5] = *(_QWORD *)(result - 8) + 64;
      v6[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[7] = (char *)&value witness table for Builtin.Int64 + 64;
      result = type metadata accessor for ContinuousClock.Instant(319);
      if (v5 <= 0x3F)
      {
        v6[8] = *(_QWORD *)(result - 8) + 64;
        return swift_updateClassMetadata2(a1, 256, 9, v6, a1 + 80);
      }
    }
  }
  return result;
}

uint64_t sub_1003DB90C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[18];
  uint64_t v46;
  char *v47;
  char *v48;
  id v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;

  v49 = a1;
  v50 = a2;
  v45[17] = a4;
  v7 = sub_10001A9A8(&qword_1010F0ED8);
  __chkstk_darwin(v7);
  v48 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BeaconPayloadFile.MetaData(0);
  v45[14] = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v45[12] = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F0E00);
  v12 = __chkstk_darwin(v11);
  v45[16] = (char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v45[13] = (char *)v45 - v14;
  v46 = type metadata accessor for CachedHistoricalLocation(0);
  v45[15] = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v51 = (char *)v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for BeaconPayloadv1(0);
  __chkstk_darwin(v16);
  v52 = (_QWORD *)((char *)v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v18);
  v20 = (char *)v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v47 = (char *)v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v26 = (char *)v45 - v25;
  sub_1002EC304((uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_100004048((uint64_t)v20, (uint64_t *)&unk_1010EA690);
    v27 = sub_1003DC0CC();
    v28 = swift_allocError(&type metadata for BeaconPayloadFile.BeaconPayloadFileError, v27, 0, 0);
    *v29 = 0;
    return swift_willThrow(v28);
  }
  else
  {
    v31 = v20;
    v32 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    v32(v26, v31, v21);
    v33 = Data.init(contentsOf:options:)(v4 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_fileURL, 0);
    if (!v5)
    {
      v45[9] = v16;
      v45[10] = v22;
      v45[11] = v26;
      v45[7] = v32;
      v45[8] = v9;
      v35 = v34;
      v36 = v33;
      v37 = v49;
      sub_10001BBBC(v36, v35);
      sub_10001BBBC(v50, a3);
      v38 = v52;
      BeaconPayloadv1.init(using:data:advertisement:)((uint64_t)v37, v36, v35);
      v45[5] = v36;
      v45[6] = v35;
      v39 = *v38;
      v40 = v38[1];
      v49 = (id)(v40 >> 62);
      v41 = sub_10001BBBC(v39, v40);
      v42 = static MACAddress.length.getter(v41);
      sub_1002F7C0C(v42, v39, v40);
      v45[4] = v53;
      v45[3] = v54;
      sub_10001BBBC(v39, v40);
      v43 = sub_10001BBBC(v39, v40);
      v44 = static MACAddress.length.getter(v43);
      v50 = v39;
      sub_1002F7C0C(v44, v39, v40);
      __asm { BR              X10 }
    }
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v26, v21);
  }
}

uint64_t sub_1003DBD44()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001BC14(v1, v0);
  return ((uint64_t (*)(_QWORD, _QWORD))((char *)&loc_1003DBDF0
                                                 + dword_1003DC0BC[*(_QWORD *)(v2 - 152)]))(BYTE6(v0), 0);
}

void sub_1003DBE00(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  int *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  if (BYTE6(v6) >= a1)
  {
    v9 = Data._Representation.subscript.getter();
    *(_QWORD *)(v8 - 152) = v10;
    *(_QWORD *)(v8 - 144) = v9;
    sub_10001BC14(v2, v6);
    v11 = v1[9];
    *(_DWORD *)(v8 - 304) = *(unsigned __int8 *)(v5 + v1[10]);
    v12 = *(_QWORD *)(v5 + v1[7]);
    v13 = *(_QWORD *)(v5 + v1[8]);
    v14 = *(_QWORD *)(v5 + v11);
    v15 = v5 + v1[5];
    v16 = *(char **)(v8 - 136);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v17(&v16[*(int *)(*(_QWORD *)(v8 - 176) + 28)], v15, v4);
    *(_QWORD *)v16 = v12;
    *((_QWORD *)v16 + 1) = v13;
    *((_QWORD *)v16 + 2) = v14;
    v17(*(char **)(v8 - 168), v7, v4);
    v18 = *(_QWORD *)(v8 - 216);
    sub_1002EBF78(v18);
    v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 208) + 48);
    v20 = *(_QWORD *)(v8 - 256);
    if (v19(v18, 1, v20))
    {
      sub_100004048(v18, (uint64_t *)&unk_1010F0E00);
      v21 = 0;
    }
    else
    {
      v22 = *(_QWORD *)(v8 - 224);
      sub_10005972C(v18, v22, type metadata accessor for BeaconPayloadFile.MetaData);
      sub_100004048(v18, (uint64_t *)&unk_1010F0E00);
      v21 = *(_BYTE *)(v22 + *(int *)(v20 + 28));
      sub_1000126B0(v22, type metadata accessor for BeaconPayloadFile.MetaData);
    }
    v23 = *(_QWORD *)(v8 - 160);
    sub_10005972C(*(_QWORD *)(v8 - 136), v23, type metadata accessor for CachedHistoricalLocation);
    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v8 - 200) + 56))(v23, 0, 1, *(_QWORD *)(v8 - 176));
    v24 = *(_QWORD *)(v8 - 192);
    sub_1002EBF78(v24);
    sub_10001BC14(*(_QWORD *)(v8 - 280), *(_QWORD *)(v8 - 272));
    if (v19(v24, 1, v20))
    {
      sub_100004048(v24, (uint64_t *)&unk_1010F0E00);
      v25 = 0;
    }
    else
    {
      v26 = *(_QWORD *)(v8 - 224);
      sub_10005972C(v24, v26, type metadata accessor for BeaconPayloadFile.MetaData);
      sub_100004048(v24, (uint64_t *)&unk_1010F0E00);
      v27 = *(_BYTE *)(v26 + *(int *)(v20 + 48));
      sub_1000126B0(v26, type metadata accessor for BeaconPayloadFile.MetaData);
      v25 = v27 & 1;
    }
    v28 = (int *)type metadata accessor for BeaconPayload(0);
    v29 = *(_QWORD **)(v8 - 184);
    v29[3] = v28;
    v29[4] = &off_1010A3148;
    v30 = sub_100018F08(v29);
    v31 = *(_QWORD *)(v8 - 296);
    *v30 = *(_QWORD *)(v8 - 288);
    v30[1] = v31;
    v32 = *(_QWORD *)(v8 - 152);
    v30[2] = *(_QWORD *)(v8 - 144);
    v30[3] = v32;
    *((_BYTE *)v30 + 32) = *(_DWORD *)(v8 - 304);
    *(_OWORD *)(v30 + 5) = xmmword_100E22FC0;
    v30[7] = 0;
    (*(void (**)(char *, _QWORD, uint64_t))(v8 - 264))((char *)v30 + v28[9], *(_QWORD *)(v8 - 168), v4);
    *((_BYTE *)v30 + v28[10]) = v21;
    sub_1003DC110(*(_QWORD *)(v8 - 160), (uint64_t)v30 + v28[11]);
    *((_BYTE *)v30 + v28[12]) = v25;
    sub_1000126B0(*(_QWORD *)(v8 - 136), type metadata accessor for CachedHistoricalLocation);
    sub_1000126B0(*(_QWORD *)(v8 - 128), type metadata accessor for BeaconPayloadv1);
    JUMPOUT(0x1003DBBD0);
  }
  __break(1u);
  JUMPOUT(0x1003DC0A8);
}

unint64_t sub_1003DC0CC()
{
  unint64_t result;

  result = qword_1010FA7D0;
  if (!qword_1010FA7D0)
  {
    result = swift_getWitnessTable("Md#", &type metadata for BeaconPayloadFile.BeaconPayloadFileError);
    atomic_store(result, (unint64_t *)&qword_1010FA7D0);
  }
  return result;
}

uint64_t sub_1003DC110(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010F0ED8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *AirPodsSendPairingStatusCommandPayload.expectedLength.unsafeMutableAddressor()
{
  return &static AirPodsSendPairingStatusCommandPayload.expectedLength;
}

uint64_t static AirPodsSendPairingStatusCommandPayload.expectedLength.getter()
{
  _BYTE v1[24];

  swift_beginAccess(&static AirPodsSendPairingStatusCommandPayload.expectedLength, v1, 0, 0);
  return static AirPodsSendPairingStatusCommandPayload.expectedLength;
}

uint64_t static AirPodsSendPairingStatusCommandPayload.expectedLength.setter(uint64_t a1)
{
  uint64_t result;
  _BYTE v3[24];

  result = swift_beginAccess(&static AirPodsSendPairingStatusCommandPayload.expectedLength, v3, 1, 0);
  static AirPodsSendPairingStatusCommandPayload.expectedLength = a1;
  return result;
}

uint64_t (*static AirPodsSendPairingStatusCommandPayload.expectedLength.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&static AirPodsSendPairingStatusCommandPayload.expectedLength, a1, 33, 0);
  return j__swift_endAccess_0;
}

double AirPodsSendPairingStatusCommandPayload.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1003DC4FC(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t AirPodsSendPairingStatusCommandPayload.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v14, v3, v4);
  v13 = *v1;
  v5 = v15;
  v6 = v16;
  sub_10009F5D0((uint64_t)v14, v15);
  v7 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v13, &type metadata for Data, v7, v5, v6);
  if (!v2)
  {
    v13 = v1[1];
    v8 = v15;
    v9 = v16;
    sub_10009F5D0((uint64_t)v14, v15);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v13, &type metadata for Data, v7, v8, v9);
    v13 = v1[2];
    v10 = v15;
    v11 = v16;
    sub_10009F5D0((uint64_t)v14, v15);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v13, &type metadata for Data, v7, v10, v11);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
}

uint64_t sub_1003DC3A0(_QWORD *a1)
{
  return AirPodsSendPairingStatusCommandPayload.encode(to:)(a1);
}

uint64_t sub_1003DC3B4(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_1003DC3C0 + dword_1003DC4CC[a2 >> 62]))();
}

uint64_t sub_1003DC3D0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (BYTE6(a2) != 60)
  {
    __break(1u);
    JUMPOUT(0x1003DC4C4);
  }
  return ((uint64_t (*)(void))((char *)&loc_1003DC40C + dword_1003DC4DC[a4 >> 62]))();
}

uint64_t sub_1003DC4FC@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  __int128 v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v20, v5, v6);
  v7 = v21;
  v8 = v22;
  sub_10009F5D0((uint64_t)v20, v21);
  v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(60, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = v9;
    v12 = v10;
    v13 = v21;
    v14 = v22;
    sub_10009F5D0((uint64_t)v20, v21);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(4, v13, v14);
    v26 = v15;
    v17 = v21;
    v16 = v22;
    sub_10009F5D0((uint64_t)v20, v21);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(100, v17, v16);
    sub_1003DC3B4(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    v19 = v24;
    *a2 = v23;
    a2[1] = v19;
    a2[2] = v25;
  }
  return result;
}

unint64_t sub_1003DC678(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1003DC6A4();
  result = sub_1003DC6E8();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1003DC6A4()
{
  unint64_t result;

  result = qword_1010FA7E0;
  if (!qword_1010FA7E0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AirPodsSendPairingStatusCommandPayload, &type metadata for AirPodsSendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010FA7E0);
  }
  return result;
}

unint64_t sub_1003DC6E8()
{
  unint64_t result;

  result = qword_1010FA7E8;
  if (!qword_1010FA7E8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AirPodsSendPairingStatusCommandPayload, &type metadata for AirPodsSendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010FA7E8);
  }
  return result;
}

uint64_t destroy for RootKey(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10001BC14(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  return sub_10001BC14(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t *initializeWithCopy for RootKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  sub_10001BBBC(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  v9 = a2[4];
  v8 = a2[5];
  sub_10001BBBC(v9, v8);
  a1[4] = v9;
  a1[5] = v8;
  return a1;
}

uint64_t *assignWithCopy for RootKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001BC14(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_10001BBBC(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001BC14(v10, v11);
  v13 = a2[4];
  v12 = a2[5];
  sub_10001BBBC(v13, v12);
  v14 = a1[4];
  v15 = a1[5];
  a1[4] = v13;
  a1[5] = v12;
  sub_10001BC14(v14, v15);
  return a1;
}

uint64_t *assignWithTake for RootKey(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001BC14(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10001BC14(v6, v7);
  v8 = a1[4];
  v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10001BC14(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for RootKey(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for RootKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSendPairingStatusCommandPayload()
{
  return &type metadata for AirPodsSendPairingStatusCommandPayload;
}

ValueMetadata *type metadata accessor for AccessoryMultistatusResponsePayload()
{
  return &type metadata for AccessoryMultistatusResponsePayload;
}

uint64_t sub_1003DC970(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v11[2];
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v1 = a1[3];
  v2 = a1[4];
  sub_10001AA44(a1, v1);
  dispatch thunk of BinaryEncoding.container()(v12, v1, v2);
  v3 = sub_100059570();
  v4 = FixedWidthInteger.data.getter(&type metadata for UInt8, v3);
  v6 = v5;
  v11[0] = v4;
  v11[1] = v5;
  v7 = v13;
  v8 = v14;
  sub_10009F5D0((uint64_t)v12, v13);
  v9 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(v11, &type metadata for Data, v9, v7, v8);
  sub_10001BC14(v4, v6);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
}

uint64_t sub_1003DCA44@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1003DCAF4(a1);
  if (!v2)
    *a2 = result;
  return result;
}

unint64_t sub_1003DCA6C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1003DCA98();
  result = sub_1001E9AD4();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1003DCA98()
{
  unint64_t result;

  result = qword_1010FA7F0;
  if (!qword_1010FA7F0)
  {
    result = swift_getWitnessTable(aM_12, &type metadata for AccessoryMultistatusResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FA7F0);
  }
  return result;
}

uint64_t sub_1003DCADC(_QWORD *a1)
{
  return sub_1003DC970(a1);
}

uint64_t sub_1003DCAF4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[30];
  uint64_t v21;
  uint64_t v22;

  v3 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v3);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = a1[3];
  v7 = a1[4];
  sub_10001AA44(a1, v6);
  dispatch thunk of BinaryDecoding.container()(&v20[8], v6, v7);
  v8 = v21;
  v9 = v22;
  v10 = sub_10009F5D0((uint64_t)&v20[8], v21);
  v11 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v8, v9);
  if (!v1)
  {
    v13 = v11;
    v14 = v12;
    v15 = sub_10001BBBC(v11, v12);
    static Endianness.current.getter(v15);
    sub_100059570();
    FixedWidthInteger.init(data:ofEndianness:)(&v20[6], v13, v14, v5);
    if (v20[7] != 1)
    {
      v10 = v20[6];
      sub_10001BC14(v13, v14);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v20[8]);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return v10;
    }
    v10 = type metadata accessor for BinaryDecodingError(0);
    v16 = sub_100345C00();
    swift_allocError(v10, v16, 0, 0);
    v18 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v17, enum case for BinaryDecodingError.decodingError(_:), v10);
    swift_willThrow(v18);
    sub_10001BC14(v13, v14);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v20[8]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v10;
}

uint64_t *sub_1003DCC94(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t, __n128);
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v41 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v41 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = *a2;
    v7 = a2[1];
    sub_10001BBBC(*a2, v7);
    *a1 = v6;
    a1[1] = v7;
    v8 = (int *)type metadata accessor for SharedBeaconRecord(0);
    v9 = v8[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    v60 = *(_QWORD *)(v12 - 8);
    v13 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
    v13(v10, v11, v12);
    v57 = v13;
    v13((char *)a1 + v8[6], (char *)a2 + v8[6], v12);
    v14 = v8[7];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *v15 = *v16;
    v59 = *((_QWORD *)v16 + 2);
    *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
    *((_QWORD *)v15 + 2) = v59;
    v17 = v8[8];
    v18 = (uint64_t *)((char *)a1 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v58 = v19[1];
    *v18 = *v19;
    v18[1] = v58;
    v20 = v8[9];
    v21 = (uint64_t *)((char *)a1 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = v8[10];
    v25 = (uint64_t *)((char *)a1 + v24);
    v26 = (uint64_t *)((char *)a2 + v24);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    *(uint64_t *)((char *)a1 + v8[11]) = *(uint64_t *)((char *)a2 + v8[11]);
    *(uint64_t *)((char *)a1 + v8[12]) = *(uint64_t *)((char *)a2 + v8[12]);
    *((_BYTE *)a1 + v8[13]) = *((_BYTE *)a2 + v8[13]);
    *((_BYTE *)a1 + v8[14]) = *((_BYTE *)a2 + v8[14]);
    *(uint64_t *)((char *)a1 + v8[15]) = *(uint64_t *)((char *)a2 + v8[15]);
    *((_BYTE *)a1 + v8[16]) = *((_BYTE *)a2 + v8[16]);
    *(uint64_t *)((char *)a1 + v8[17]) = *(uint64_t *)((char *)a2 + v8[17]);
    v28 = v8[18];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = type metadata accessor for Date(0);
    v32 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v31 - 8) + 16);
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v23);
    v33 = v27;
    v34 = v12;
    v35 = swift_bridgeObjectRetain(v33);
    v32(v29, v30, v31, v35);
    v36 = v8[19];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48);
    if (v39((char *)a2 + v36, 1, v34))
    {
      v40 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      v57(v37, v38, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v37, 0, 1, v34);
    }
    v42 = v8[20];
    v43 = (_DWORD *)((char *)a1 + v42);
    v44 = (_DWORD *)((char *)a2 + v42);
    v45 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    v46 = *(_QWORD *)(v45 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
    {
      v47 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      *v43 = *v44;
      v48 = *(int *)(v45 + 20);
      v49 = (char *)v43 + v48;
      v50 = (char *)v44 + v48;
      if (v39(v50, 1, v34))
      {
        v51 = sub_10001A9A8(&qword_1010ED860);
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      }
      else
      {
        v57(v49, v50, v34);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v49, 0, 1, v34);
      }
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
    }
    v52 = *(int *)(a3 + 20);
    v53 = *(int *)(a3 + 24);
    v54 = *(uint64_t *)((char *)a2 + v52);
    *(uint64_t *)((char *)a1 + v52) = v54;
    v55 = *(uint64_t *)((char *)a2 + v53);
    *(uint64_t *)((char *)a1 + v53) = v55;
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v55);
  }
  return a1;
}

uint64_t sub_1003DD008(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v2 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  v6(a1 + v2[6], v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = a1 + v2[18];
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + v2[19];
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v10(v9, 1, v4))
    v6(v9, v4);
  v11 = a1 + v2[20];
  v12 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v13 = v11 + *(int *)(v12 + 20);
    if (!v10(v13, 1, v4))
      v6(v13, v4);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t *sub_1003DD18C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t, __n128);
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v5 = *a2;
  v6 = a2[1];
  sub_10001BBBC(*a2, v6);
  *a1 = v5;
  a1[1] = v6;
  v7 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v8 = v7[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v58 = *(_QWORD *)(v11 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  v12(v9, v10, v11);
  v55 = v12;
  v12((char *)a1 + v7[6], (char *)a2 + v7[6], v11);
  v13 = v7[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *v14 = *v15;
  v57 = *((_QWORD *)v15 + 2);
  *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
  *((_QWORD *)v14 + 2) = v57;
  v16 = v7[8];
  v17 = (uint64_t *)((char *)a1 + v16);
  v18 = (uint64_t *)((char *)a2 + v16);
  v56 = v18[1];
  *v17 = *v18;
  v17[1] = v56;
  v19 = v7[9];
  v20 = (uint64_t *)((char *)a1 + v19);
  v21 = (uint64_t *)((char *)a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = v7[10];
  v24 = (uint64_t *)((char *)a1 + v23);
  v25 = (uint64_t *)((char *)a2 + v23);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  *(uint64_t *)((char *)a1 + v7[11]) = *(uint64_t *)((char *)a2 + v7[11]);
  *(uint64_t *)((char *)a1 + v7[12]) = *(uint64_t *)((char *)a2 + v7[12]);
  *((_BYTE *)a1 + v7[13]) = *((_BYTE *)a2 + v7[13]);
  *((_BYTE *)a1 + v7[14]) = *((_BYTE *)a2 + v7[14]);
  *(uint64_t *)((char *)a1 + v7[15]) = *(uint64_t *)((char *)a2 + v7[15]);
  *((_BYTE *)a1 + v7[16]) = *((_BYTE *)a2 + v7[16]);
  *(uint64_t *)((char *)a1 + v7[17]) = *(uint64_t *)((char *)a2 + v7[17]);
  v27 = v7[18];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = type metadata accessor for Date(0);
  v31 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v30 - 8) + 16);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRetain(v22);
  v32 = v26;
  v33 = v11;
  v34 = swift_bridgeObjectRetain(v32);
  v31(v28, v29, v30, v34);
  v35 = v7[19];
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
  if (v38((char *)a2 + v35, 1, v33))
  {
    v39 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    v55(v36, v37, v33);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v36, 0, 1, v33);
  }
  v40 = v7[20];
  v41 = (_DWORD *)((char *)a1 + v40);
  v42 = (_DWORD *)((char *)a2 + v40);
  v43 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  v44 = *(_QWORD *)(v43 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
  {
    v45 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    *v41 = *v42;
    v46 = *(int *)(v43 + 20);
    v47 = (char *)v41 + v46;
    v48 = (char *)v42 + v46;
    if (v38(v48, 1, v33))
    {
      v49 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      v55(v47, v48, v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v47, 0, 1, v33);
    }
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
  }
  v50 = *(int *)(a3 + 20);
  v51 = *(int *)(a3 + 24);
  v52 = *(uint64_t *)((char *)a2 + v50);
  *(uint64_t *)((char *)a1 + v50) = v52;
  v53 = *(uint64_t *)((char *)a2 + v51);
  *(uint64_t *)((char *)a1 + v51) = v53;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v53);
  return a1;
}

uint64_t *sub_1003DD4D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(_DWORD *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  uint64_t v72;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v11 = v10[5];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(void (**)(char *, char *, uint64_t))(v15 + 24);
  v16(v12, v13, v14);
  v70 = v16;
  v16((char *)a1 + v10[6], (char *)a2 + v10[6], v14);
  v17 = v10[7];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  *v18 = *v19;
  *((_QWORD *)v18 + 1) = *((_QWORD *)v19 + 1);
  v20 = *((_QWORD *)v19 + 2);
  *((_QWORD *)v18 + 2) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease();
  v21 = v10[8];
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  *v22 = *v23;
  v24 = v23[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease();
  v25 = v10[9];
  v26 = (uint64_t *)((char *)a1 + v25);
  v27 = (uint64_t *)((char *)a2 + v25);
  *v26 = *v27;
  v28 = v27[1];
  v26[1] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease();
  v29 = v10[10];
  v30 = (uint64_t *)((char *)a1 + v29);
  v31 = (uint64_t *)((char *)a2 + v29);
  *v30 = *v31;
  v32 = v31[1];
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + v10[11]) = *(uint64_t *)((char *)a2 + v10[11]);
  *(uint64_t *)((char *)a1 + v10[12]) = *(uint64_t *)((char *)a2 + v10[12]);
  *((_BYTE *)a1 + v10[13]) = *((_BYTE *)a2 + v10[13]);
  *((_BYTE *)a1 + v10[14]) = *((_BYTE *)a2 + v10[14]);
  *(uint64_t *)((char *)a1 + v10[15]) = *(uint64_t *)((char *)a2 + v10[15]);
  *((_BYTE *)a1 + v10[16]) = *((_BYTE *)a2 + v10[16]);
  *(uint64_t *)((char *)a1 + v10[17]) = *(uint64_t *)((char *)a2 + v10[17]);
  v33 = v10[18];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 24))(v34, v35, v36);
  v37 = v10[19];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v41 = v40((char *)a1 + v37, 1, v14);
  v42 = v40(v39, 1, v14);
  v71 = v15;
  v72 = a3;
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v38, v39, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v38, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v42)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v38, v14);
LABEL_6:
    v43 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_7;
  }
  v70(v38, v39, v14);
LABEL_7:
  v44 = v10[20];
  v45 = (_DWORD *)((char *)a1 + v44);
  v46 = (_DWORD *)((char *)a2 + v44);
  v47 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (!v50)
  {
    if (!v51)
    {
      *v45 = *v46;
      v59 = *(int *)(v47 + 20);
      v60 = (char *)v45 + v59;
      v61 = (char *)v46 + v59;
      v62 = v40(v60, 1, v14);
      v63 = v40(v61, 1, v14);
      if (v62)
      {
        v56 = v72;
        if (!v63)
        {
          (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v60, v61, v14);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v60, 0, 1, v14);
          goto LABEL_23;
        }
      }
      else
      {
        v56 = v72;
        if (!v63)
        {
          v70(v60, v61, v14);
          goto LABEL_23;
        }
        (*(void (**)(char *, uint64_t))(v71 + 8))(v60, v14);
      }
      v64 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      goto LABEL_23;
    }
    sub_1000126B0((uint64_t)v45, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    goto LABEL_13;
  }
  if (v51)
  {
LABEL_13:
    v58 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    v56 = v72;
    goto LABEL_23;
  }
  *v45 = *v46;
  v52 = *(int *)(v47 + 20);
  v53 = (char *)v45 + v52;
  v54 = (char *)v46 + v52;
  v55 = v40(v54, 1, v14);
  v56 = v72;
  if (v55)
  {
    v57 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v53, v54, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v53, 0, 1, v14);
  }
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
LABEL_23:
  v65 = *(int *)(v56 + 20);
  v66 = *(uint64_t *)((char *)a2 + v65);
  *(uint64_t *)((char *)a1 + v65) = v66;
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRelease();
  v67 = *(int *)(v56 + 24);
  v68 = *(uint64_t *)((char *)a2 + v67);
  *(uint64_t *)((char *)a1 + v67) = v68;
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_1003DD9A8(char *a1, char *a2, uint64_t a3)
{
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *__dst;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v5 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v6 = v5[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v11(&a1[v5[6]], &a2[v5[6]], v9);
  v12 = v5[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
  *(_OWORD *)&a1[v5[8]] = *(_OWORD *)&a2[v5[8]];
  *(_OWORD *)&a1[v5[9]] = *(_OWORD *)&a2[v5[9]];
  *(_OWORD *)&a1[v5[10]] = *(_OWORD *)&a2[v5[10]];
  *(_QWORD *)&a1[v5[11]] = *(_QWORD *)&a2[v5[11]];
  *(_QWORD *)&a1[v5[12]] = *(_QWORD *)&a2[v5[12]];
  a1[v5[13]] = a2[v5[13]];
  a1[v5[14]] = a2[v5[14]];
  *(_QWORD *)&a1[v5[15]] = *(_QWORD *)&a2[v5[15]];
  a1[v5[16]] = a2[v5[16]];
  *(_QWORD *)&a1[v5[17]] = *(_QWORD *)&a2[v5[17]];
  v15 = v5[18];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = v5[19];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v22(&a2[v19], 1, v9))
  {
    v23 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v11(v20, v21, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, v9);
  }
  v24 = v5[20];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    *(_DWORD *)v25 = *(_DWORD *)v26;
    v30 = *(int *)(v27 + 20);
    __dst = &v25[v30];
    v31 = &v26[v30];
    if (v22(v31, 1, v9))
    {
      v32 = sub_10001A9A8(&qword_1010ED860);
      memcpy(__dst, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v11(__dst, v31, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v33 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  *(_QWORD *)&a1[v33] = *(_QWORD *)&a2[v33];
  return a1;
}

uint64_t *sub_1003DDC84(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(char *, uint64_t, uint64_t);
  int v52;
  int v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int v65;
  uint64_t v66;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  uint64_t v70;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v9 = v8[5];
  v10 = (char *)a1 + v9;
  v11 = &a2[v9];
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(char *, char *, uint64_t))(v13 + 40);
  v14(v10, v11, v12);
  v68 = v14;
  v14((char *)a1 + v8[6], &a2[v8[6]], v12);
  v15 = v8[7];
  v16 = (char *)a1 + v15;
  v17 = &a2[v15];
  *v16 = *v17;
  v19 = *((_QWORD *)v17 + 1);
  v18 = *((_QWORD *)v17 + 2);
  *((_QWORD *)v16 + 1) = v19;
  *((_QWORD *)v16 + 2) = v18;
  swift_bridgeObjectRelease();
  v20 = v8[8];
  v21 = (uint64_t *)((char *)a1 + v20);
  v22 = (uint64_t *)&a2[v20];
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = v8[9];
  v26 = (uint64_t *)((char *)a1 + v25);
  v27 = (uint64_t *)&a2[v25];
  v29 = *v27;
  v28 = v27[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  v30 = v8[10];
  v31 = (uint64_t *)((char *)a1 + v30);
  v32 = (uint64_t *)&a2[v30];
  v34 = *v32;
  v33 = v32[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + v8[11]) = *(_QWORD *)&a2[v8[11]];
  *(uint64_t *)((char *)a1 + v8[12]) = *(_QWORD *)&a2[v8[12]];
  *((_BYTE *)a1 + v8[13]) = a2[v8[13]];
  *((_BYTE *)a1 + v8[14]) = a2[v8[14]];
  *(uint64_t *)((char *)a1 + v8[15]) = *(_QWORD *)&a2[v8[15]];
  *((_BYTE *)a1 + v8[16]) = a2[v8[16]];
  *(uint64_t *)((char *)a1 + v8[17]) = *(_QWORD *)&a2[v8[17]];
  v35 = v8[18];
  v36 = (char *)a1 + v35;
  v37 = &a2[v35];
  v38 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  v39 = v8[19];
  v40 = (char *)a1 + v39;
  v41 = &a2[v39];
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v43 = v42((char *)a1 + v39, 1, v12);
  v44 = v42(v41, 1, v12);
  v69 = v13;
  v70 = a3;
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v40, v41, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v40, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v40, v12);
LABEL_6:
    v45 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_7;
  }
  v68(v40, v41, v12);
LABEL_7:
  v46 = v8[20];
  v47 = (char *)a1 + v46;
  v48 = &a2[v46];
  v49 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
  v52 = v51(v47, 1, v49);
  v53 = v51(v48, 1, v49);
  if (!v52)
  {
    if (!v53)
    {
      *(_DWORD *)v47 = *(_DWORD *)v48;
      v61 = *(int *)(v49 + 20);
      v62 = &v47[v61];
      v63 = &v48[v61];
      v64 = v42(v62, 1, v12);
      v65 = v42(v63, 1, v12);
      if (v64)
      {
        v58 = v70;
        if (!v65)
        {
          (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v62, v63, v12);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v62, 0, 1, v12);
          goto LABEL_23;
        }
      }
      else
      {
        v58 = v70;
        if (!v65)
        {
          v68(v62, v63, v12);
          goto LABEL_23;
        }
        (*(void (**)(char *, uint64_t))(v69 + 8))(v62, v12);
      }
      v66 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      goto LABEL_23;
    }
    sub_1000126B0((uint64_t)v47, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    goto LABEL_13;
  }
  if (v53)
  {
LABEL_13:
    v60 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    v58 = v70;
    goto LABEL_23;
  }
  *(_DWORD *)v47 = *(_DWORD *)v48;
  v54 = *(int *)(v49 + 20);
  v55 = &v47[v54];
  v56 = &v48[v54];
  v57 = v42(v56, 1, v12);
  v58 = v70;
  if (v57)
  {
    v59 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v55, v56, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v55, 0, 1, v12);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
LABEL_23:
  *(uint64_t *)((char *)a1 + *(int *)(v58 + 20)) = *(_QWORD *)&a2[*(int *)(v58 + 20)];
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + *(int *)(v58 + 24)) = *(_QWORD *)&a2[*(int *)(v58 + 24)];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003DE100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003DE10C);
}

uint64_t sub_1003DE10C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for SharedBeaconRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1003DE188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003DE194);
}

uint64_t sub_1003DE194(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for SharedBeaconRecord(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for FindMyAirPodsFamilyShareEnvelope(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FA850;
  if (!qword_1010FA850)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FindMyAirPodsFamilyShareEnvelope);
  return result;
}

uint64_t sub_1003DE248(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for SharedBeaconRecord(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1003DE2C0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t MyAirPodsFamilyShareEnvelope;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010FA8A8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1003DE8AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FindMyAirPodsFamilyShareEnvelope.CodingKeys, &type metadata for FindMyAirPodsFamilyShareEnvelope.CodingKeys, v11, v9, v10);
  LOBYTE(v20) = 0;
  v12 = type metadata accessor for SharedBeaconRecord(0);
  v13 = sub_100006204((unint64_t *)&unk_10111E870, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F4DC);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    MyAirPodsFamilyShareEnvelope = type metadata accessor for FindMyAirPodsFamilyShareEnvelope(0);
    v20 = *(_QWORD *)(v3 + *(int *)(MyAirPodsFamilyShareEnvelope + 20));
    v19 = 1;
    v15 = sub_10001A9A8(&qword_1010F13A8);
    v16 = sub_10016ABBC(&qword_1010F13E0, &qword_1010F13E8, (uint64_t)&unk_100E58F90, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, v15, v16);
    v20 = *(_QWORD *)(v3 + *(int *)(MyAirPodsFamilyShareEnvelope + 24));
    v19 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003DE4A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t MyAirPodsFamilyShareEnvelope;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;

  v23 = a2;
  v4 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v4);
  v24 = (uint64_t *)((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = sub_10001A9A8(&qword_1010FA890);
  v6 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MyAirPodsFamilyShareEnvelope = type metadata accessor for FindMyAirPodsFamilyShareEnvelope(0);
  __chkstk_darwin(MyAirPodsFamilyShareEnvelope);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  v26 = a1;
  sub_10001AA44(a1, v13);
  v14 = sub_1003DE8AC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FindMyAirPodsFamilyShareEnvelope.CodingKeys, &type metadata for FindMyAirPodsFamilyShareEnvelope.CodingKeys, v14, v13, v12);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
  v15 = v6;
  v16 = (uint64_t)v11;
  LOBYTE(v28) = 0;
  v17 = sub_100006204(&qword_1010FA8A0, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F504);
  v19 = v24;
  v18 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v24, v4, &v28, v25, v4, v17);
  sub_1003DE8F0((uint64_t)v19, v16);
  v20 = sub_10001A9A8(&qword_1010F13A8);
  v27 = 1;
  v24 = (_QWORD *)sub_10016ABBC(&qword_1010F13B0, &qword_1010F13B8, (uint64_t)&unk_100E58FB8, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v28, v20, &v27, v18, v20, v24);
  *(_QWORD *)(v16 + *(int *)(MyAirPodsFamilyShareEnvelope + 20)) = v28;
  v27 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v28, v20, &v27, v18, v20, v24);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v18);
  *(_QWORD *)(v16 + *(int *)(MyAirPodsFamilyShareEnvelope + 24)) = v28;
  sub_1003DE934(v16, v23);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
  return sub_1000126B0(v16, type metadata accessor for FindMyAirPodsFamilyShareEnvelope);
}

uint64_t sub_1003DE7A8()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000012;
  if (*v0 != 1)
    v1 = 0xD000000000000014;
  if (*v0)
    return v1;
  else
    return 0x6542646572616873;
}

uint64_t sub_1003DE810@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1003DEB1C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003DE834(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003DE8AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003DE85C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003DE8AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003DE884@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003DE4A0(a1, a2);
}

uint64_t sub_1003DE898(_QWORD *a1)
{
  return sub_1003DE2C0(a1);
}

unint64_t sub_1003DE8AC()
{
  unint64_t result;

  result = qword_1010FA898;
  if (!qword_1010FA898)
  {
    result = swift_getWitnessTable(byte_100E3C738, &type metadata for FindMyAirPodsFamilyShareEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FA898);
  }
  return result;
}

uint64_t sub_1003DE8F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SharedBeaconRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003DE934(uint64_t a1, uint64_t a2)
{
  uint64_t MyAirPodsFamilyShareEnvelope;

  MyAirPodsFamilyShareEnvelope = type metadata accessor for FindMyAirPodsFamilyShareEnvelope(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(MyAirPodsFamilyShareEnvelope - 8) + 16))(a2, a1, MyAirPodsFamilyShareEnvelope);
  return a2;
}

uint64_t storeEnumTagSinglePayload for FindMyAirPodsFamilyShareEnvelope.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1003DE9C4 + 4 * byte_100E3C5F5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1003DE9F8 + 4 * byte_100E3C5F0[v4]))();
}

uint64_t sub_1003DE9F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003DEA00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003DEA08);
  return result;
}

uint64_t sub_1003DEA14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003DEA1CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1003DEA20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003DEA28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FindMyAirPodsFamilyShareEnvelope.CodingKeys()
{
  return &type metadata for FindMyAirPodsFamilyShareEnvelope.CodingKeys;
}

unint64_t sub_1003DEA48()
{
  unint64_t result;

  result = qword_1010FA8B0;
  if (!qword_1010FA8B0)
  {
    result = swift_getWitnessTable(byte_100E3C710, &type metadata for FindMyAirPodsFamilyShareEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FA8B0);
  }
  return result;
}

unint64_t sub_1003DEA90()
{
  unint64_t result;

  result = qword_1010FA8B8;
  if (!qword_1010FA8B8)
  {
    result = swift_getWitnessTable(aI_13, &type metadata for FindMyAirPodsFamilyShareEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FA8B8);
  }
  return result;
}

unint64_t sub_1003DEAD8()
{
  unint64_t result;

  result = qword_1010FA8C0;
  if (!qword_1010FA8C0)
  {
    result = swift_getWitnessTable(a1_10, &type metadata for FindMyAirPodsFamilyShareEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FA8C0);
  }
  return result;
}

uint64_t sub_1003DEB1C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6542646572616873 && a2 == 0xEC0000006E6F6361)
  {
    v5 = 0xEC0000006E6F6361;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6542646572616873, 0xEC0000006E6F6361, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000012)
  {
    v7 = 0x8000000100ED57E0;
    if (a2 == 0x8000000100ED57E0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100ED57E0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100ED5800)
  {
    swift_bridgeObjectRelease(0x8000000100ED5800);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100ED5800, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t *AirPodsSWSendPairingStatusCommandPayload.expectedLength.unsafeMutableAddressor()
{
  return &static AirPodsSWSendPairingStatusCommandPayload.expectedLength;
}

uint64_t static AirPodsSWSendPairingStatusCommandPayload.expectedLength.getter()
{
  _BYTE v1[24];

  swift_beginAccess(&static AirPodsSWSendPairingStatusCommandPayload.expectedLength, v1, 0, 0);
  return static AirPodsSWSendPairingStatusCommandPayload.expectedLength;
}

uint64_t static AirPodsSWSendPairingStatusCommandPayload.expectedLength.setter(uint64_t a1)
{
  uint64_t result;
  _BYTE v3[24];

  result = swift_beginAccess(&static AirPodsSWSendPairingStatusCommandPayload.expectedLength, v3, 1, 0);
  static AirPodsSWSendPairingStatusCommandPayload.expectedLength = a1;
  return result;
}

uint64_t (*static AirPodsSWSendPairingStatusCommandPayload.expectedLength.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&static AirPodsSWSendPairingStatusCommandPayload.expectedLength, a1, 33, 0);
  return j__swift_endAccess_0;
}

double AirPodsSWSendPairingStatusCommandPayload.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_1003DEFFC(a1, v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t AirPodsSWSendPairingStatusCommandPayload.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v16, v3, v4);
  v15 = *v1;
  v5 = v17;
  v6 = v18;
  sub_10009F5D0((uint64_t)v16, v17);
  v7 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v15, &type metadata for Data, v7, v5, v6);
  if (!v2)
  {
    v15 = v1[1];
    v8 = v17;
    v9 = v18;
    sub_10009F5D0((uint64_t)v16, v17);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v15, &type metadata for Data, v7, v8, v9);
    v15 = v1[2];
    v10 = v17;
    v11 = v18;
    sub_10009F5D0((uint64_t)v16, v17);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v15, &type metadata for Data, v7, v10, v11);
    v15 = v1[3];
    v12 = v17;
    v13 = v18;
    sub_10009F5D0((uint64_t)v16, v17);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v15, &type metadata for Data, v7, v12, v13);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
}

uint64_t sub_1003DEF04(_QWORD *a1)
{
  return AirPodsSWSendPairingStatusCommandPayload.encode(to:)(a1);
}

uint64_t sub_1003DEF18(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_1003DEF24 + dword_1003DEFDC[a2 >> 62]))();
}

uint64_t sub_1003DEF34(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (BYTE6(a2) != 85)
  {
    __break(1u);
    JUMPOUT(0x1003DEFD8);
  }
  return ((uint64_t (*)(void))((char *)&loc_1003DEF70 + dword_1003DEFEC[a4 >> 62]))();
}

uint64_t sub_1003DEFFC@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v28, v5, v6);
  v7 = v29;
  v8 = v30;
  sub_10009F5D0((uint64_t)v28, v29);
  v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(85, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = v9;
    v12 = v10;
    v13 = v29;
    v14 = v30;
    sub_10009F5D0((uint64_t)v28, v29);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(4, v13, v14);
    v35 = v15;
    v17 = v29;
    v16 = v30;
    sub_10009F5D0((uint64_t)v28, v29);
    v26 = dispatch thunk of BinaryDecodingContaining.decode(length:)(100, v17, v16);
    v27 = v18;
    v19 = v29;
    v20 = v30;
    sub_10009F5D0((uint64_t)v28, v29);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v19, v20);
    sub_10001BBBC(v26, v27);
    v21 = sub_100035530();
    v22 = DataProtocol.intValue.getter(&type metadata for Data, v21);
    sub_1002F7C0C(v22, v26, v27);
    sub_10001BC14(v26, v27);
    sub_1003DEF18(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    v24 = v32;
    *a2 = v31;
    a2[1] = v24;
    v25 = v34;
    a2[2] = v33;
    a2[3] = v25;
  }
  return result;
}

unint64_t sub_1003DF200(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1003DF22C();
  result = sub_10024D4C8();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1003DF22C()
{
  unint64_t result;

  result = qword_1010FA8D0;
  if (!qword_1010FA8D0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AirPodsSWSendPairingStatusCommandPayload, &type metadata for AirPodsSWSendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010FA8D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWSendPairingStatusCommandPayload()
{
  return &type metadata for AirPodsSWSendPairingStatusCommandPayload;
}

void sub_1003DF280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  NSObject *v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[40];
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  char v40[32];

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = dispatch_group_create();
  if (qword_1010EA430 != -1)
    swift_once(&qword_1010EA430, sub_100C4DCC8);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B7F98);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Initial launch processing...", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = (uint64_t *)(v1 + 16);
  swift_beginAccess(v1 + 16, v40, 0, 0);
  v12 = *(_QWORD *)(v1 + 16);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v33 = v4;
    v14 = v12 + 32;
    swift_bridgeObjectRetain(v12);
    do
    {
      sub_100030784(v14, (uint64_t)v37);
      sub_100030784((uint64_t)v37, (uint64_t)v36);
      v17 = sub_10001A9A8((uint64_t *)&unk_1010FABA0);
      v18 = sub_10001A9A8((uint64_t *)&unk_1011094A0);
      if (swift_dynamicCast(&v35, v36, v17, v18, 6))
      {
        swift_unknownObjectRelease(v35);
      }
      else
      {
        v15 = v38;
        v16 = v39;
        sub_10001AA44(v37, v38);
        (*(void (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
      v14 += 40;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    v19 = *v11;
    v20 = *(_QWORD *)(*v11 + 16);
    if (v20)
    {
      v21 = v19 + 32;
      swift_bridgeObjectRetain(v19);
      v22 = _swiftEmptyArrayStorage;
      do
      {
        sub_100030784(v21, (uint64_t)v37);
        sub_100030784((uint64_t)v37, (uint64_t)v36);
        v23 = sub_10001A9A8((uint64_t *)&unk_1010FABA0);
        v24 = sub_10001A9A8((uint64_t *)&unk_1011094A0);
        if ((swift_dynamicCast(&v35, v36, v23, v24, 6) & 1) == 0)
          v35 = 0uLL;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
        if ((_QWORD)v35)
        {
          v34 = v35;
          if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
            v22 = sub_1007C9750(0, v22[2] + 1, 1, v22);
          v26 = v22[2];
          v25 = v22[3];
          v27 = v34;
          if (v26 >= v25 >> 1)
          {
            v28 = sub_1007C9750((_QWORD *)(v25 > 1), v26 + 1, 1, v22);
            v27 = v34;
            v22 = v28;
          }
          v22[2] = v26 + 1;
          *(_OWORD *)&v22[2 * v26 + 4] = v27;
        }
        v21 += 40;
        --v20;
      }
      while (v20);
      swift_bridgeObjectRelease();
    }
    else
    {
      v22 = _swiftEmptyArrayStorage;
    }
    v4 = v33;
  }
  else
  {
    v22 = _swiftEmptyArrayStorage;
  }
  dispatch_group_enter(v5);
  v29 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v4, 1, 1, v29);
  v30 = (_QWORD *)swift_allocObject(&unk_101075230, 48, 7);
  v30[2] = 0;
  v30[3] = 0;
  v30[4] = v22;
  v30[5] = v5;
  v31 = v5;
  sub_100691AC0((uint64_t)v4, (uint64_t)&unk_1010FABE0, (uint64_t)v30);
  swift_release();
  OS_dispatch_group.wait()();

}

void sub_1003DF638(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  os_log_t v57;
  void (*v58)(char *, uint64_t);
  void (*v59)(char *, uint64_t);
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  __int128 v75;
  _QWORD *v76;
  dispatch_group_t v77;
  uint64_t v78;
  char *v79;
  void (*v80)(char *, uint64_t, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  void (*v89)(char *, char *, uint64_t);
  NSObject *v90;
  os_log_t v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t, uint64_t);
  dispatch_group_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  _BYTE v104[32];
  uint64_t v105[3];
  uint64_t v106;
  uint64_t v107;
  _BYTE v108[32];

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v6);
  v99 = (uint64_t)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SystemVersionNumber(0);
  v98 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v97 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v96 = (char *)&v91 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v91 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v91 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v91 - v20;
  v95 = v22;
  __chkstk_darwin(v19);
  v24 = (char *)&v91 - v23;
  v94 = dispatch_group_create();
  v25 = a1;
  v100 = a2;
  if ((static SystemVersionNumber.< infix(_:_:)(a1, a2) & 1) != 0)
  {
    if (qword_1010EA430 != -1)
      swift_once(&qword_1010EA430, sub_100C4DCC8);
    v26 = type metadata accessor for Logger(0);
    sub_10001A9E8(v26, (uint64_t)qword_1011B7F98);
    v27 = v98;
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 16);
    v28(v24, v25, v8);
    v93 = v28;
    v29 = ((uint64_t (*)(char *, uint64_t, uint64_t))v28)(v21, v100, v8);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      v33 = swift_slowAlloc(22, -1);
      v34 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v101 = v34;
      v105[0] = v34;
      *(_DWORD *)v33 = 136315394;
      LODWORD(v92) = v32;
      v91 = v30;
      v35 = SystemVersionNumber.rawValue.getter(v34);
      v103 = sub_100016940(v35, v36, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v33 + 4, v33 + 12);
      swift_bridgeObjectRelease();
      v37 = v8;
      v38 = *(uint64_t (**)(char *, uint64_t))(v27 + 8);
      v39 = v38(v24, v37);
      *(_WORD *)(v33 + 12) = 2080;
      v40 = SystemVersionNumber.rawValue.getter(v39);
      v103 = sub_100016940(v40, v41, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v33 + 14, v33 + 22);
      swift_bridgeObjectRelease();
      v38(v21, v37);
      v8 = v37;
      v42 = v91;
      _os_log_impl((void *)&_mh_execute_header, v91, (os_log_type_t)v92, "Migrating from %s to %s", (uint8_t *)v33, 0x16u);
      v43 = v101;
      swift_arrayDestroy(v101, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {
      v58 = *(void (**)(char *, uint64_t))(v27 + 8);
      v58(v24, v8);
      v58(v21, v8);

    }
  }
  else
  {
    if (qword_1010EA430 != -1)
      swift_once(&qword_1010EA430, sub_100C4DCC8);
    v44 = type metadata accessor for Logger(0);
    sub_10001A9E8(v44, (uint64_t)qword_1011B7F98);
    v45 = v98;
    v46 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 16);
    v46(v18, v25, v8);
    v93 = v46;
    v47 = ((uint64_t (*)(char *, uint64_t, uint64_t))v46)(v15, v100, v8);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.default.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      v50 = swift_slowAlloc(22, -1);
      v91 = (os_log_t)swift_slowAlloc(64, -1);
      v105[0] = (uint64_t)v91;
      *(_DWORD *)v50 = 136315394;
      v92 = v8;
      v51 = ((uint64_t (*)(void))SystemVersionNumber.rawValue.getter)();
      v103 = sub_100016940(v51, v52, v105);
      *(_QWORD *)&v101 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v50 + 4, v50 + 12);
      swift_bridgeObjectRelease();
      v53 = *(uint64_t (**)(char *, uint64_t))(v45 + 8);
      v54 = v53(v18, v92);
      *(_WORD *)(v50 + 12) = 2080;
      v55 = SystemVersionNumber.rawValue.getter(v54);
      v103 = sub_100016940(v55, v56, v105);
      v3 = v101;
      v8 = v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v50 + 14, v50 + 22);
      swift_bridgeObjectRelease();
      v53(v15, v8);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Back-migration from %s to %s", (uint8_t *)v50, 0x16u);
      v57 = v91;
      swift_arrayDestroy(v91, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v50, -1, -1);
    }
    else
    {
      v59 = *(void (**)(char *, uint64_t))(v45 + 8);
      v59(v18, v8);
      v59(v15, v8);
    }

  }
  v60 = (_QWORD *)(v3 + 16);
  swift_beginAccess(v3 + 16, v108, 0, 0);
  v61 = *(_QWORD *)(v3 + 16);
  v62 = *(_QWORD *)(v61 + 16);
  if (v62)
  {
    v92 = v8;
    v63 = v61 + 32;
    swift_bridgeObjectRetain(v61);
    do
    {
      sub_100030784(v63, (uint64_t)v105);
      sub_100030784((uint64_t)v105, (uint64_t)&v103);
      v66 = sub_10001A9A8((uint64_t *)&unk_1010FABA0);
      v67 = sub_10001A9A8((uint64_t *)&unk_1011094A0);
      if (swift_dynamicCast(&v102, &v103, v66, v67, 6))
      {
        swift_unknownObjectRelease(v102);
      }
      else
      {
        v64 = v106;
        v65 = v107;
        sub_10001AA44(v105, v106);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 40))(v25, v100, v64, v65);
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v105);
      v63 += 40;
      --v62;
    }
    while (v62);
    swift_bridgeObjectRelease();
    v68 = *(_QWORD *)(*v60 + 16);
    if (v68)
    {
      v69 = *v60 + 32;
      swift_bridgeObjectRetain(*v60);
      v70 = _swiftEmptyArrayStorage;
      do
      {
        sub_100030784(v69, (uint64_t)v105);
        sub_100030784((uint64_t)v105, (uint64_t)&v103);
        v71 = sub_10001A9A8((uint64_t *)&unk_1010FABA0);
        v72 = sub_10001A9A8((uint64_t *)&unk_1011094A0);
        if ((swift_dynamicCast(&v102, &v103, v71, v72, 6) & 1) == 0)
          v102 = 0uLL;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v105);
        if ((_QWORD)v102)
        {
          v101 = v102;
          if ((swift_isUniquelyReferenced_nonNull_native(v70) & 1) == 0)
            v70 = sub_1007C9750(0, v70[2] + 1, 1, v70);
          v74 = v70[2];
          v73 = v70[3];
          v75 = v101;
          if (v74 >= v73 >> 1)
          {
            v76 = sub_1007C9750((_QWORD *)(v73 > 1), v74 + 1, 1, v70);
            v75 = v101;
            v70 = v76;
          }
          v70[2] = v74 + 1;
          *(_OWORD *)&v70[2 * v74 + 4] = v75;
        }
        v69 += 40;
        --v68;
      }
      while (v68);
      swift_bridgeObjectRelease();
    }
    else
    {
      v70 = _swiftEmptyArrayStorage;
    }
    v8 = v92;
  }
  else
  {
    v70 = _swiftEmptyArrayStorage;
  }
  v77 = v94;
  dispatch_group_enter(v94);
  v78 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v99, 1, 1, v78);
  v79 = v96;
  v80 = v93;
  v93(v96, v25, v8);
  v81 = v97;
  v80(v97, v100, v8);
  v82 = v98;
  v83 = *(unsigned __int8 *)(v98 + 80);
  v84 = v8;
  v85 = (v83 + 40) & ~v83;
  v86 = (v95 + v83 + v85) & ~v83;
  v87 = (v95 + v86 + 7) & 0xFFFFFFFFFFFFFFF8;
  v88 = (char *)swift_allocObject(&unk_1010751E0, v87 + 8, v83 | 7);
  *((_QWORD *)v88 + 2) = 0;
  *((_QWORD *)v88 + 3) = 0;
  *((_QWORD *)v88 + 4) = v70;
  v89 = *(void (**)(char *, char *, uint64_t))(v82 + 32);
  v89(&v88[v85], v79, v84);
  v89(&v88[v86], v81, v84);
  *(_QWORD *)&v88[v87] = v77;
  v90 = v77;
  sub_100691AC0(v99, (uint64_t)&unk_1010FABD0, (uint64_t)v88);
  swift_release();
  OS_dispatch_group.wait()();

}

void sub_1003DFF04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  NSObject *v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[40];
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  char v40[32];

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = dispatch_group_create();
  if (qword_1010EA430 != -1)
    swift_once(&qword_1010EA430, sub_100C4DCC8);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B7F98);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "First launch since reboot...", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = (uint64_t *)(v1 + 16);
  swift_beginAccess(v1 + 16, v40, 0, 0);
  v12 = *(_QWORD *)(v1 + 16);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v33 = v4;
    v14 = v12 + 32;
    swift_bridgeObjectRetain(v12);
    do
    {
      sub_100030784(v14, (uint64_t)v37);
      sub_100030784((uint64_t)v37, (uint64_t)v36);
      v17 = sub_10001A9A8((uint64_t *)&unk_1010FABA0);
      v18 = sub_10001A9A8((uint64_t *)&unk_1011094A0);
      if (swift_dynamicCast(&v35, v36, v17, v18, 6))
      {
        swift_unknownObjectRelease(v35);
      }
      else
      {
        v15 = v38;
        v16 = v39;
        sub_10001AA44(v37, v38);
        (*(void (**)(uint64_t, uint64_t))(v16 + 48))(v15, v16);
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
      v14 += 40;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    v19 = *v11;
    v20 = *(_QWORD *)(*v11 + 16);
    if (v20)
    {
      v21 = v19 + 32;
      swift_bridgeObjectRetain(v19);
      v22 = _swiftEmptyArrayStorage;
      do
      {
        sub_100030784(v21, (uint64_t)v37);
        sub_100030784((uint64_t)v37, (uint64_t)v36);
        v23 = sub_10001A9A8((uint64_t *)&unk_1010FABA0);
        v24 = sub_10001A9A8((uint64_t *)&unk_1011094A0);
        if ((swift_dynamicCast(&v35, v36, v23, v24, 6) & 1) == 0)
          v35 = 0uLL;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
        if ((_QWORD)v35)
        {
          v34 = v35;
          if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
            v22 = sub_1007C9750(0, v22[2] + 1, 1, v22);
          v26 = v22[2];
          v25 = v22[3];
          v27 = v34;
          if (v26 >= v25 >> 1)
          {
            v28 = sub_1007C9750((_QWORD *)(v25 > 1), v26 + 1, 1, v22);
            v27 = v34;
            v22 = v28;
          }
          v22[2] = v26 + 1;
          *(_OWORD *)&v22[2 * v26 + 4] = v27;
        }
        v21 += 40;
        --v20;
      }
      while (v20);
      swift_bridgeObjectRelease();
    }
    else
    {
      v22 = _swiftEmptyArrayStorage;
    }
    v4 = v33;
  }
  else
  {
    v22 = _swiftEmptyArrayStorage;
  }
  dispatch_group_enter(v5);
  v29 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v4, 1, 1, v29);
  v30 = (_QWORD *)swift_allocObject(&unk_101075208, 48, 7);
  v30[2] = 0;
  v30[3] = 0;
  v30[4] = v22;
  v30[5] = v5;
  v31 = v5;
  sub_100691AC0((uint64_t)v4, (uint64_t)&unk_1010FABD8, (uint64_t)v30);
  swift_release();
  OS_dispatch_group.wait()();

}

uint64_t sub_1003E02BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6E40);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B6E40);
  if (qword_1010EA430 != -1)
    swift_once(&qword_1010EA430, sub_100C4DCC8);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7F98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1003E034C()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1003E036C();
  qword_1011B6E58 = result;
  qword_1011B6E60 = v1;
  return result;
}

uint64_t sub_1003E036C()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t *v5;
  uint64_t v6;

  v0 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v1 = objc_msgSend(v0, "environment");

  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v2 + 16) && (v3 = sub_100518DA0(0xD000000000000010, 0x8000000100ED5E60), (v4 & 1) != 0))
  {
    v5 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v3);
    v6 = *v5;
    swift_bridgeObjectRetain(v5[1]);
  }
  else
  {
    v6 = 0;
  }
  swift_bridgeObjectRelease();
  return v6;
}

_QWORD *sub_1003E0448()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;

  v1 = v0;
  v18 = *v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = _swiftEmptyArrayStorage;
  sub_10001F6FC();
  v12 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v8);
  static DispatchQoS.unspecified.getter(v12);
  v19 = _swiftEmptyArrayStorage;
  v13 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v15 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v14, v15, v2, v13);
  v1[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000024, 0x8000000100ED5E80, v7, v4, v11, 0);
  v1[4] = 0;
  v16 = type metadata accessor for SelfLocatingBeaconPayloadCacheSubscriber(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v1[5] = sub_100625A54();
  v1[6] = _swiftEmptyArrayStorage;
  *((_BYTE *)v1 + 56) = 0;
  v1[8] = 0;
  sub_100C4DC3C();
  return v1;
}

uint64_t sub_1003E0674()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = *v0;
  type metadata accessor for Transaction(0);
  v4 = v0;
  v5 = v1;
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.startup", 37, 2, sub_1003E8FB4, &v3, &type metadata for () + 1);
}

uint64_t sub_1003E06E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD aBlock[6];
  _QWORD *v23;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)(a2 + 24);
  v13 = (_QWORD *)swift_allocObject(&unk_1010750C8, 40, 7);
  v13[2] = a2;
  v13[3] = a1;
  v13[4] = a3;
  aBlock[4] = sub_1003E900C;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010750E0;
  v14 = _Block_copy(aBlock);
  swift_retain();
  v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v6, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_1003E08F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t result;
  _QWORD v65[2];
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  __n128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80[3];
  uint64_t v81;
  uint64_t v82;
  char v83[32];

  v6 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v6);
  v8 = (char *)v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ECF78);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v65 - v13;
  sub_1003E2B9C();
  Transaction.capture()();
  if (qword_1010E9BC0 != -1)
    swift_once(&qword_1010E9BC0, sub_1003E034C);
  v15 = qword_1011B6E60;
  if (qword_1011B6E60)
  {
    v16 = qword_1011B6E58;
    v17 = qword_1010E9BB8;
    swift_bridgeObjectRetain(qword_1011B6E60);
    if (v17 != -1)
      swift_once(&qword_1010E9BB8, sub_1003E02BC);
    v68 = a3;
    v69 = a2;
    v18 = type metadata accessor for Logger(0);
    v19 = sub_10001A9E8(v18, (uint64_t)qword_1011B6E40);
    swift_bridgeObjectRetain(v15);
    *(_QWORD *)&v74 = v19;
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    v23 = os_log_type_enabled(v21, v22);
    v70 = a1;
    v67 = v8;
    if (v23)
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = v16;
      v26 = swift_slowAlloc(32, -1);
      v80[0] = v26;
      *(_DWORD *)v24 = 136446210;
      swift_bridgeObjectRetain(v15);
      v76 = sub_100016940(v25, v15, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease_n(v15, 3);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Launching searchpartyd (%{public}s)", v24, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      v27 = v24;
      a1 = v70;
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v15, 2);
    }

    v28 = type metadata accessor for SystemVersionNumber(0);
    v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
    v29(v14, 1, 1, v28);
    v29(v12, 1, 1, v28);
    sub_1003E105C((uint64_t)v14, (uint64_t)v12);
    sub_100004048((uint64_t)v12, &qword_1010ECF78);
    sub_100004048((uint64_t)v14, &qword_1010ECF78);
    swift_beginAccess(a1 + 16, v83, 0, 0);
    v30 = *(_QWORD *)(a1 + 16);
    v31 = *(_QWORD *)(v30 + 16);
    if (v31)
    {
      v66 = (_QWORD *)(a1 + 16);
      v32 = v30 + 32;
      v65[1] = v30;
      v33 = swift_bridgeObjectRetain(v30);
      v34 = (uint64_t *)&unk_1010FABA0;
      v33.n128_u64[0] = 136446210;
      v72 = v33;
      v71 = (char *)&type metadata for Any + 8;
      do
      {
        sub_100030784(v32, (uint64_t)v80);
        sub_100030784((uint64_t)v80, (uint64_t)&v76);
        v35 = sub_10001A9A8(v34);
        v36 = sub_10001A9A8((uint64_t *)&unk_1011094A0);
        if (swift_dynamicCast(&v75, &v76, v35, v36, 6))
        {
          swift_unknownObjectRelease(v75);
        }
        else
        {
          v37 = sub_100030784((uint64_t)v80, (uint64_t)&v76);
          v38 = Logger.logObject.getter(v37);
          v39 = static os_log_type_t.default.getter(v38);
          if (os_log_type_enabled(v38, v39))
          {
            v40 = swift_slowAlloc(12, -1);
            v73 = swift_slowAlloc(32, -1);
            *(_QWORD *)&v75 = v73;
            *(_DWORD *)v40 = v72.n128_u32[0];
            v41 = v34;
            v42 = v78;
            v43 = v79;
            sub_10001AA44(&v76, v78);
            v44 = v42;
            v34 = v41;
            v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v44, v43);
            *(_QWORD *)(v40 + 4) = sub_100016940(v45, v46, (uint64_t *)&v75);
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v76);
            _os_log_impl((void *)&_mh_execute_header, v38, v39, "Starting legacy service: %{public}s", (uint8_t *)v40, 0xCu);
            v47 = v73;
            swift_arrayDestroy(v73, 1, v71);
            swift_slowDealloc(v47, -1, -1);
            swift_slowDealloc(v40, -1, -1);
          }
          else
          {
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v76);
          }

          v48 = v81;
          v49 = v82;
          sub_10001AA44(v80, v81);
          (*(void (**)(uint64_t, uint64_t))(v49 + 24))(v48, v49);
        }
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v80);
        v32 += 40;
        --v31;
      }
      while (v31);
      swift_bridgeObjectRelease();
      v50 = *(_QWORD *)(*v66 + 16);
      v51 = v69;
      v52 = v68;
      if (v50)
      {
        v53 = *v66 + 32;
        swift_bridgeObjectRetain(*v66);
        v54 = _swiftEmptyArrayStorage;
        do
        {
          sub_100030784(v53, (uint64_t)v80);
          sub_100030784((uint64_t)v80, (uint64_t)&v76);
          v55 = sub_10001A9A8((uint64_t *)&unk_1010FABA0);
          v56 = sub_10001A9A8((uint64_t *)&unk_1011094A0);
          if ((swift_dynamicCast(&v75, &v76, v55, v56, 6) & 1) == 0)
            v75 = 0uLL;
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v80);
          if ((_QWORD)v75)
          {
            v74 = v75;
            if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
              v54 = sub_1007C9750(0, v54[2] + 1, 1, v54);
            v58 = v54[2];
            v57 = v54[3];
            v59 = v74;
            if (v58 >= v57 >> 1)
            {
              v60 = sub_1007C9750((_QWORD *)(v57 > 1), v58 + 1, 1, v54);
              v59 = v74;
              v54 = v60;
            }
            v54[2] = v58 + 1;
            *(_OWORD *)&v54[2 * v58 + 4] = v59;
          }
          v53 += 40;
          --v50;
        }
        while (v50);
        swift_bridgeObjectRelease();
      }
      else
      {
        v54 = _swiftEmptyArrayStorage;
      }
      a1 = v70;
    }
    else
    {
      v54 = _swiftEmptyArrayStorage;
      v51 = v69;
      v52 = v68;
    }
    v61 = type metadata accessor for TaskPriority(0);
    v62 = (uint64_t)v67;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v67, 1, 1, v61);
    v63 = (_QWORD *)swift_allocObject(&unk_101075118, 64, 7);
    v63[2] = 0;
    v63[3] = 0;
    v63[4] = v51;
    v63[5] = v54;
    v63[6] = a1;
    v63[7] = v52;
    swift_retain();
    swift_retain();
    sub_100691AC0(v62, (uint64_t)&unk_1010FABB8, (uint64_t)v63);
    return swift_release();
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100ED5DB0, "searchpartyd/SearchPartyDaemon.swift", 36, 2, 68, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1003E105C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  __n128 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  void (*v49)(uint64_t, uint64_t, uint64_t, uint64_t);
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSString v60;
  NSString v61;
  id v62;
  NSString v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint8_t *v76;
  void (*v77)(char *, uint64_t);
  uint64_t result;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  BOOL v87;
  char *v88;
  uint8_t *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t, uint64_t, uint64_t);
  NSString v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __n128 v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  id v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v108 = v4;
  v109 = v5;
  v6 = __chkstk_darwin(v4);
  v103 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v110 = (char *)&v101 - v9;
  __chkstk_darwin(v8);
  v107 = (char *)&v101 - v10;
  v11 = sub_10001A9A8(&qword_1010ED860);
  v12 = __chkstk_darwin(v11);
  v106 = (uint64_t)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v111 = (char *)&v101 - v14;
  v15 = type metadata accessor for SystemVersionNumber(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v102 = (char *)&v101 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v114 = (char *)&v101 - v19;
  v20 = sub_10001A9A8(&qword_1010ECF78);
  v21 = __chkstk_darwin(v20);
  v101 = (char *)&v101 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v104 = (uint64_t)&v101 - v24;
  v25 = __chkstk_darwin(v23);
  v113 = (uint64_t)&v101 - v26;
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v101 - v28;
  v30 = __chkstk_darwin(v27);
  v32 = (char *)&v101 - v31;
  __chkstk_darwin(v30);
  v34 = (char *)&v101 - v33;
  v105 = (id)objc_opt_self(NSUserDefaults);
  v112 = objc_msgSend(v105, "standardUserDefaults");
  v115 = v16;
  v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  v36 = a1;
  LODWORD(a1) = v35(a1, 1, v15);
  sub_10000F9B8(a2, (uint64_t)v34, &qword_1010ECF78);
  if ((_DWORD)a1 == 1)
  {
    v37 = v15;
    v38 = v35((uint64_t)v34, 1, v15);
    v39 = sub_100004048((uint64_t)v34, &qword_1010ECF78);
    if (v38 == 1)
    {
      v40 = (id)MobileGestalt_get_current_device(v39);
      if (v40)
      {
        v41 = v40;
        v42 = (id)MobileGestalt_copy_buildVersion_obj();

        if (v42)
        {
          v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
          v46 = v45;

        }
        else
        {
          v44 = 0;
          v46 = 0xE000000000000000;
        }
        SystemVersionNumber.init(string:)(v44, v46, v43);
        if (v35((uint64_t)v29, 1, v15) == 1)
        {

          return sub_100004048((uint64_t)v29, &qword_1010ECF78);
        }
        v92 = v115;
        v48 = *(void (**)(char *, char *, uint64_t))(v115 + 32);
        v48(v114, v29, v37);
        v93 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v92 + 56);
        v51 = v113;
        v93(v113, 1, 1, v37);
        v94 = String._bridgeToObjectiveC()();
        v95 = objc_msgSend(v112, "stringForKey:", v94);

        if (v95)
        {
          v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
          v98 = v97;

          v99 = (uint64_t)v101;
          SystemVersionNumber.init(string:)(v96, v98, v100);
          sub_100004048(v51, &qword_1010ECF78);
          sub_1003E91D8(v99, v51);
        }
        v50 = 0;
        goto LABEL_9;
      }
      __break(1u);
LABEL_40:
      sub_100004048((uint64_t)v32, &qword_1010ECF78);
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000016, 0x8000000100ED5E40, "searchpartyd/Daemon.swift", 25, 2, 39, 0);
      __break(1u);
      return result;
    }
  }
  else
  {
    v37 = v15;
    sub_100004048((uint64_t)v34, &qword_1010ECF78);
  }
  sub_10000F9B8(a2, (uint64_t)v32, &qword_1010ECF78);
  if (v35((uint64_t)v32, 1, v37) == 1)
    goto LABEL_40;
  v47 = v115;
  v48 = *(void (**)(char *, char *, uint64_t))(v115 + 32);
  v48(v114, v32, v37);
  v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56);
  v50 = 1;
  v51 = v113;
  v49(v113, 1, 1, v37);
  sub_100004048(v51, &qword_1010ECF78);
  sub_10000F9B8(v36, v51, &qword_1010ECF78);
LABEL_9:
  v53 = (uint64_t)v107;
  v52 = v108;
  v54 = (uint64_t)v111;
  v55 = v104;
  sub_10000F9B8(v51, v104, &qword_1010ECF78);
  if (v35(v55, 1, v37) == 1)
  {
    sub_100004048(v55, &qword_1010ECF78);
    sub_1003DF280();
    v57 = (uint64_t)v114;
  }
  else
  {
    v58 = (uint64_t)v102;
    v48(v102, (char *)v55, v37);
    v59 = sub_100006204(&qword_1010F7870, (uint64_t (*)(uint64_t))&type metadata accessor for SystemVersionNumber, (uint64_t)&protocol conformance descriptor for SystemVersionNumber);
    v57 = (uint64_t)v114;
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v58, v114, v37, v59) & 1) == 0)
      sub_1003DF638(v58, v57);
    v56 = (*(uint64_t (**)(uint64_t, uint64_t))(v115 + 8))(v58, v37);
  }
  if ((v50 & 1) == 0)
  {
    SystemVersionNumber.description.getter(v56);
    v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v61 = String._bridgeToObjectiveC()();
    objc_msgSend(v112, "setValue:forKey:", v60, v61);

  }
  sub_100B11150(v53);
  v62 = objc_msgSend(v105, "standardUserDefaults");
  v63 = String._bridgeToObjectiveC()();
  v64 = objc_msgSend(v62, "stringForKey:", v63);

  if (v64)
  {
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    v67 = v66;

    UUID.init(uuidString:)(v65, v67);
    swift_bridgeObjectRelease();
    v68 = v109;
  }
  else
  {
    v68 = v109;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v109 + 56))(v54, 1, 1, v52);
  }
  v69 = v110;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v110, v53, v52);
  v70 = v106;
  sub_10000F9B8(v54, v106, &qword_1010ED860);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v70, 1, v52) == 1)
  {
    swift_retain();
    sub_100004048(v70, &qword_1010ED860);
    if (qword_1010EA430 != -1)
      swift_once(&qword_1010EA430, sub_100C4DCC8);
    v71 = type metadata accessor for Logger(0);
    v72 = sub_10001A9E8(v71, (uint64_t)qword_1011B7F98);
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.default.getter(v73);
    if (os_log_type_enabled(v73, v74))
    {
      v75 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v75 = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "No lastLaunchBootSessionUUID on record", v75, 2u);
      v76 = v75;
      v69 = v110;
      swift_slowDealloc(v76, -1, -1);
    }

    sub_1003E7060();
    swift_release();

    v77 = *(void (**)(char *, uint64_t))(v68 + 8);
    v77(v69, v52);
    v77((char *)v53, v52);
    sub_100004048(v54, &qword_1010ED860);
    sub_100004048(v113, &qword_1010ECF78);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v115 + 8))(v57, v37);
  }
  else
  {
    v79 = v57;
    v80 = v103;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 32))(v103, v70, v52);
    v81 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    swift_retain();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v80, v53, v52, v81) & 1) != 0)
    {
      swift_release();
      v82 = *(void (**)(char *, uint64_t))(v68 + 8);
      v82(v69, v52);
      if (qword_1010EA430 != -1)
        swift_once(&qword_1010EA430, sub_100C4DCC8);
      v83 = type metadata accessor for Logger(0);
      v84 = sub_10001A9E8(v83, (uint64_t)qword_1011B7F98);
      v85 = Logger.logObject.getter(v84);
      v86 = static os_log_type_t.default.getter(v85);
      v87 = os_log_type_enabled(v85, v86);
      v88 = v103;
      if (v87)
      {
        v89 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v89 = 0;
        _os_log_impl((void *)&_mh_execute_header, v85, v86, "This is *NOT* the first run since reboot", v89, 2u);
        swift_slowDealloc(v89, -1, -1);
      }

      v90 = v88;
    }
    else
    {
      sub_1003E7060();

      v82 = *(void (**)(char *, uint64_t))(v68 + 8);
      v82(v80, v52);
      swift_release();
      v90 = v69;
    }
    v82(v90, v52);
    v91 = (uint64_t)v111;
    v82((char *)v53, v52);
    sub_100004048(v91, &qword_1010ED860);
    sub_100004048(v113, &qword_1010ECF78);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v115 + 8))(v79, v37);
  }
}

uint64_t sub_1003E1AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7[16] = a6;
  v7[17] = a7;
  v7[14] = a4;
  v7[15] = a5;
  v8 = sub_10001A9A8(&qword_1010F46C0);
  v7[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v7[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[20] = v10;
  v7[21] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v7[22] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v7[23] = v12;
  v7[24] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003E1B70, 0, 0);
}

uint64_t sub_1003E1B70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int *v37;
  _QWORD *v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  uint64_t v40;

  v1 = v0[15];
  Transaction.capture()();
  v2 = *(_QWORD *)(v1 + 16);
  v0[25] = v2;
  if (v2)
  {
    v3 = v0[15];
    v0[27] = 0;
    v4 = *(_QWORD *)(v3 + 32);
    v0[28] = v4;
    v5 = *(_QWORD *)(v3 + 40);
    v6 = qword_1010E9BB8;
    swift_unknownObjectRetain(v4);
    swift_bridgeObjectRetain(v3);
    if (v6 != -1)
      swift_once(&qword_1010E9BB8, sub_1003E02BC);
    v7 = type metadata accessor for Logger(0);
    sub_10001A9E8(v7, (uint64_t)qword_1011B6E40);
    v8 = swift_unknownObjectRetain_n(v4, 2);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v40 = v12;
      *(_DWORD *)v11 = 136446210;
      ObjectType = swift_getObjectType(v4);
      v0[13] = v4;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 8))(ObjectType);
      *(_QWORD *)(v11 + 4) = sub_100016940(v14, v15, &v40);
      swift_unknownObjectRelease_n(v4, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Starting service: %{public}s", (uint8_t *)v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n(v4, 2);
    }
    v19 = v0[17];
    v18 = v0[18];
    v20 = type metadata accessor for TaskPriority(0);
    v21 = *(_QWORD *)(v20 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v18, 1, 1, v20);
    v22 = (_QWORD *)swift_allocObject(&unk_101075140, 56, 7);
    v22[2] = 0;
    v23 = v22 + 2;
    v22[3] = 0;
    v22[4] = v4;
    v22[5] = v5;
    v22[6] = v19;
    LODWORD(v19) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v18, 1, v20);
    v24 = swift_unknownObjectRetain(v4);
    v25 = v0[18];
    if ((_DWORD)v19 == 1)
    {
      sub_100004048(v0[18], &qword_1010F46C0);
      v26 = 0;
      v27 = 0;
      v28 = 7168;
    }
    else
    {
      v29 = TaskPriority.rawValue.getter(v24);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v25, v20);
      v28 = v29 | 0x1C00;
      v30 = *v23;
      if (*v23)
      {
        v31 = v22[3];
        v32 = swift_getObjectType(*v23);
        swift_unknownObjectRetain(v30);
        v26 = dispatch thunk of Actor.unownedExecutor.getter(v32, v31);
        v27 = v33;
        swift_unknownObjectRelease(v30);
      }
      else
      {
        v26 = 0;
        v27 = 0;
      }
    }
    v34 = swift_allocObject(&unk_101075168, 32, 7);
    *(_QWORD *)(v34 + 16) = &unk_1010FABC8;
    *(_QWORD *)(v34 + 24) = v22;
    if (v27 | v26)
    {
      v35 = v0 + 8;
      v0[8] = 0;
      v0[9] = 0;
      v0[10] = v26;
      v0[11] = v27;
    }
    else
    {
      v35 = 0;
    }
    v0[29] = swift_task_create(v28, v35, &type metadata for () + 1, &unk_1010EE4A0, v34);
    v36 = swift_getObjectType(v4);
    v37 = *(int **)(v5 + 24);
    v39 = (uint64_t (*)(uint64_t, uint64_t))((char *)v37 + *v37);
    v38 = (_QWORD *)swift_task_alloc(v37[1]);
    v0[30] = v38;
    *v38 = v0;
    v38[1] = sub_1003E217C;
    return v39(v36, v5);
  }
  else
  {
    type metadata accessor for DarwinNotificationManager(0);
    static DarwinNotificationManager.shared.getter();
    dispatch thunk of DarwinNotificationManager.setUp()();
    swift_release();
    v16 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
    v0[26] = v16;
    *v16 = v0;
    v16[1] = sub_1003E1F6C;
    return unsafeBlocking<A>(_:)(v16, sub_1003E28A0, 0, &type metadata for () + 1);
  }
}

uint64_t sub_1003E1F6C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 208));
  return swift_task_switch(sub_1003E1FC0, 0, 0);
}

uint64_t sub_1003E1FC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 168);
  v12 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 160);
  v14 = *(_QWORD *)(v0 + 144);
  v4 = swift_allocObject(&unk_101075190, 32, 7);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 48) = sub_1003E91D0;
  *(_QWORD *)(v0 + 56) = v4;
  *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = sub_100016FB8;
  *(_QWORD *)(v0 + 40) = &unk_1010751A8;
  v5 = _Block_copy((const void *)(v0 + 16));
  v6 = swift_retain();
  static DispatchQoS.unspecified.getter(v6);
  *(_QWORD *)(v0 + 96) = _swiftEmptyArrayStorage;
  v7 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v9 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 96, v8, v9, v3, v7);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v1, v2, v5);
  _Block_release(v5);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v13);
  swift_release();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003E217C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 240));
  return swift_task_switch(sub_1003E21D0, 0, 0);
}

uint64_t sub_1003E21D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int *v39;
  _QWORD *v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  uint64_t v42;

  v1 = v0[28];
  v2 = v0[25];
  v3 = v0[27] + 1;
  Task.cancel()();
  swift_unknownObjectRelease(v1);
  swift_release();
  if (v3 == v2)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for DarwinNotificationManager(0);
    static DarwinNotificationManager.shared.getter();
    dispatch thunk of DarwinNotificationManager.setUp()();
    swift_release();
    v4 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
    v0[26] = v4;
    *v4 = v0;
    v4[1] = sub_1003E1F6C;
    return unsafeBlocking<A>(_:)(v4, sub_1003E28A0, 0, &type metadata for () + 1);
  }
  else
  {
    v6 = v0[27] + 1;
    v0[27] = v6;
    v7 = v0[15] + 16 * v6;
    v8 = *(_QWORD *)(v7 + 32);
    v0[28] = v8;
    v9 = *(_QWORD *)(v7 + 40);
    v10 = qword_1010E9BB8;
    swift_unknownObjectRetain(v8);
    if (v10 != -1)
      swift_once(&qword_1010E9BB8, sub_1003E02BC);
    v11 = type metadata accessor for Logger(0);
    sub_10001A9E8(v11, (uint64_t)qword_1011B6E40);
    v12 = swift_unknownObjectRetain_n(v8, 2);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v42 = v16;
      *(_DWORD *)v15 = 136446210;
      ObjectType = swift_getObjectType(v8);
      v0[13] = v8;
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 + 16) + 8))(ObjectType);
      *(_QWORD *)(v15 + 4) = sub_100016940(v18, v19, &v42);
      swift_unknownObjectRelease_n(v8, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Starting service: %{public}s", (uint8_t *)v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n(v8, 2);
    }
    v21 = v0[17];
    v20 = v0[18];
    v22 = type metadata accessor for TaskPriority(0);
    v23 = *(_QWORD *)(v22 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v20, 1, 1, v22);
    v24 = (_QWORD *)swift_allocObject(&unk_101075140, 56, 7);
    v24[2] = 0;
    v25 = v24 + 2;
    v24[3] = 0;
    v24[4] = v8;
    v24[5] = v9;
    v24[6] = v21;
    LODWORD(v21) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22);
    v26 = swift_unknownObjectRetain(v8);
    v27 = v0[18];
    if ((_DWORD)v21 == 1)
    {
      sub_100004048(v0[18], &qword_1010F46C0);
      v28 = 0;
      v29 = 0;
      v30 = 7168;
    }
    else
    {
      v31 = TaskPriority.rawValue.getter(v26);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v27, v22);
      v30 = v31 | 0x1C00;
      v32 = *v25;
      if (*v25)
      {
        v33 = v24[3];
        v34 = swift_getObjectType(*v25);
        swift_unknownObjectRetain(v32);
        v28 = dispatch thunk of Actor.unownedExecutor.getter(v34, v33);
        v29 = v35;
        swift_unknownObjectRelease(v32);
      }
      else
      {
        v28 = 0;
        v29 = 0;
      }
    }
    v36 = swift_allocObject(&unk_101075168, 32, 7);
    *(_QWORD *)(v36 + 16) = &unk_1010FABC8;
    *(_QWORD *)(v36 + 24) = v24;
    if (v29 | v28)
    {
      v37 = v0 + 8;
      v0[8] = 0;
      v0[9] = 0;
      v0[10] = v28;
      v0[11] = v29;
    }
    else
    {
      v37 = 0;
    }
    v0[29] = swift_task_create(v30, v37, &type metadata for () + 1, &unk_1010EE4A0, v36);
    v38 = swift_getObjectType(v8);
    v39 = *(int **)(v9 + 24);
    v41 = (uint64_t (*)(uint64_t, uint64_t))((char *)v39 + *v39);
    v40 = (_QWORD *)swift_task_alloc(v39[1]);
    v0[30] = v40;
    *v40 = v0;
    v40[1] = sub_1003E217C;
    return v41(v38, v9);
  }
}

uint64_t sub_1003E2604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;

  v5[4] = a4;
  v5[5] = a5;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  v5[6] = v6;
  *v6 = v5;
  v6[1] = sub_1003E265C;
  return static Task<>.sleep(nanoseconds:)(10000000000);
}

uint64_t sub_1003E265C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 48));
  if (v0)
  {
    swift_errorRelease(v0);
    v2 = sub_1003E94C4;
  }
  else
  {
    v2 = sub_1003E26C8;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003E26C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  if ((static Task<>.isCancelled.getter() & 1) == 0)
  {
    if (qword_1010E9BB8 != -1)
      swift_once(&qword_1010E9BB8, sub_1003E02BC);
    v1 = *(_QWORD *)(v0 + 32);
    v2 = type metadata accessor for Logger(0);
    sub_10001A9E8(v2, (uint64_t)qword_1011B6E40);
    v3 = swift_unknownObjectRetain_n(v1, 2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v7 = *(_QWORD *)(v0 + 32);
      v6 = *(_QWORD *)(v0 + 40);
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v14 = v9;
      *(_DWORD *)v8 = 136446210;
      ObjectType = swift_getObjectType(v7);
      *(_QWORD *)(v0 + 16) = v7;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + 16) + 8))(ObjectType);
      *(_QWORD *)(v0 + 24) = sub_100016940(v11, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n(v7, 2);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Slow service startup: %{public}s!", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n(*(_QWORD *)(v0 + 32), 2);
    }

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003E28A0()
{
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  return sub_100DFCB5C();
}

void sub_1003E28EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  _QWORD v24[2];
  _BYTE v25[24];
  uint64_t v26;
  uint64_t v27;

  v2 = sub_10001A9A8(&qword_101108DF0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(a1 + 56) = 1;
  if (qword_1010E9BB8 != -1)
    swift_once(&qword_1010E9BB8, sub_1003E02BC);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B6E40);
  v8 = swift_retain();
  v24[1] = v7;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v11 = 134217984;
    swift_beginAccess(a1 + 48, v25, 0, 0);
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v11 + 4, v11 + 12);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "All services started; notifying %ld continuations.", v11, 0xCu);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_release();
  }
  v12 = (_QWORD *)(a1 + 48);
  swift_beginAccess(a1 + 48, &v26, 1, 0);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v15 = v13 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v16 = *(_QWORD *)(v3 + 72);
    v17 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16);
    v18 = swift_bridgeObjectRetain(v13);
    do
    {
      v19 = v17(v5, v15, v2, v18);
      CheckedContinuation.resume(returning:)(v19, v2);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v15 += v16;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
  }
  *v12 = _swiftEmptyArrayStorage;
  v20 = swift_bridgeObjectRelease();
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "All services started; all continuations removed after notify.",
      v23,
      2u);
    swift_slowDealloc(v23, -1, -1);
  }

}

uint64_t sub_1003E2B9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  uint64_t MyNetworkPublisherService;
  _QWORD *v33;
  uint64_t v34;
  ValueWitnessTable *v35;
  void (*initializeWithCopy)(void);
  _QWORD *v37;
  _QWORD *v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t MyNetworkPublishActivityService;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  char v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  char *v95;
  _QWORD *v96;
  char v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  _QWORD *v104;
  char v105;
  unint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  char v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  char v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  char v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t found;
  uint64_t v138;
  uint64_t My;
  _QWORD *v140;
  void (*v141)(_QWORD);
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  char v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  char v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  char v158;
  unint64_t v159;
  unint64_t v160;
  id v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  void (*v181)(uint64_t *);
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  char v203;
  unint64_t v204;
  unint64_t v205;
  objc_class *v206;
  id v207;
  void *v208;
  uint64_t v209;
  NSObject *v210;
  NSObject *v211;
  os_log_type_t v212;
  uint8_t *v213;
  NSObject **v214;
  objc_class *v215;
  NSObject *v216;
  uint64_t v217;
  uint8_t *v218;
  uint64_t v219;
  _QWORD *v220;
  NSObject *v221;
  char v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t UnlockService;
  uint64_t v226;
  _QWORD *v227;
  char v228;
  unint64_t v229;
  unint64_t v230;
  _QWORD *v231;
  char v232;
  uint64_t v233;
  _QWORD *v234;
  _QWORD *v235;
  char v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  _QWORD *v241;
  char v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  char v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  char *v257;
  _QWORD *v258;
  char v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  _QWORD *v267;
  char v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  char v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  char v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  _QWORD *v289;
  _QWORD *v290;
  char v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  id v297;
  uint64_t v298;
  _QWORD *v299;
  _QWORD *v300;
  char v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t updated;
  uint64_t v305;
  _QWORD *v306;
  char v307;
  unint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  _QWORD *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  _QWORD *v318;
  char v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  _QWORD *v325;
  _QWORD *v326;
  char v327;
  unint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  _QWORD *v333;
  char v334;
  unint64_t v335;
  unint64_t v336;
  objc_class *v337;
  id v338;
  _QWORD *v339;
  char v340;
  unint64_t v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  _QWORD *v345;
  char v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  _QWORD *v351;
  char v352;
  unint64_t v353;
  unint64_t v354;
  uint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  _QWORD *v360;
  _QWORD *v361;
  char v362;
  unint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  _QWORD *v369;
  _QWORD *v370;
  char v371;
  unint64_t v372;
  unint64_t v373;
  uint64_t v374;
  char *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  _QWORD *v380;
  char v381;
  unint64_t v382;
  unint64_t v383;
  void *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t result;
  unint64_t v394;
  uint64_t v395;
  _BYTE *v396;
  Swift::String v397;
  uint64_t v398;
  uint64_t v399;
  char *v400;
  id v401;
  unsigned int v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  _QWORD *v408;
  _QWORD *v409;
  _QWORD *v410;
  uint64_t v411;
  NSObject *v412;
  uint64_t v413;
  _QWORD *v414;
  uint64_t v415;
  uint64_t v416;
  _QWORD *v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  void (*v423)(_QWORD);
  uint64_t v424;
  uint64_t v425;
  char *v426;
  __int128 v427;
  ValueMetadata *v428;
  _UNKNOWN **v429;
  __int128 v430;
  __int128 v431;
  char **v432;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v399 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v399 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v399 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v425 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v426 = (char *)&v399 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v399 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(void **)(v1 + 24);
  *v16 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
  if ((v17 & 1) != 0)
  {
    v423 = (void (*)(_QWORD))v5;
    v424 = (uint64_t)v7;
    v400 = v4;
    v19 = type metadata accessor for FMIPStateManager();
    swift_allocObject(v19, 56, 7);
    v7 = sub_1003437F4();
    if (qword_1010E9D08 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010E9D08, sub_10059A6E0);
LABEL_3:
  sub_10008CE74((uint64_t)v7, 0, 0);
  v20 = type metadata accessor for FinderStateManager(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v21 = swift_retain();
  v22 = sub_1001C5128(v21);
  v23 = type metadata accessor for Cryptor();
  swift_allocObject(v23, 136, 7);
  v414 = sub_100C52E3C(0x74536E6F63616542, 0xEE0079654B65726FLL, 0x74536E6F63616542, 0xEB0000000065726FLL);
  v24 = type metadata accessor for FinderStateObserver(0);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v25 = swift_retain();
  v421 = v22;
  v26 = sub_100612CA4(v25);
  v27 = (_QWORD *)(v1 + 16);
  swift_beginAccess(v1 + 16, &v427, 33, 0);
  v28 = *(_QWORD **)(v1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28);
  *(_QWORD *)(v1 + 16) = v28;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v28 = sub_1007C98A0(0, v28[2] + 1, 1, v28);
    *v27 = v28;
  }
  v31 = v28[2];
  v30 = v28[3];
  v417 = v7;
  v419 = v11;
  v420 = v1;
  v422 = v10;
  if (v31 >= v30 >> 1)
  {
    v28 = sub_1007C98A0((_QWORD *)(v30 > 1), v31 + 1, 1, v28);
    *v27 = v28;
  }
  *((_QWORD *)&v431 + 1) = v24;
  v432 = (char **)&off_1010833C8;
  *(_QWORD *)&v430 = v26;
  v28[2] = v31 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v28[5 * v31 + 4]);
  swift_endAccess(&v427);
  *((_QWORD *)&v431 + 1) = &type metadata for FindMyNetworkPublishDateProviderFactory;
  v432 = (char **)&off_101056470;
  MyNetworkPublisherService = type metadata accessor for FindMyNetworkPublisherService();
  v33 = (_QWORD *)swift_allocObject(MyNetworkPublisherService, 192, 15);
  v34 = sub_10009F5D0((uint64_t)&v430, (uint64_t)&type metadata for FindMyNetworkPublishDateProviderFactory);
  __chkstk_darwin(v34);
  initializeWithCopy = (void (*)(void))v35->initializeWithCopy;
  initializeWithCopy();
  v37 = sub_1003E8264(v33);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v430);
  swift_beginAccess(v1 + 16, &v427, 33, 0);
  v38 = (_QWORD *)*v27;
  v39 = swift_isUniquelyReferenced_nonNull_native(*v27);
  *v27 = v38;
  if ((v39 & 1) == 0)
  {
    v38 = sub_1007C98A0(0, v38[2] + 1, 1, v38);
    *v27 = v38;
  }
  v41 = v38[2];
  v40 = v38[3];
  if (v41 >= v40 >> 1)
  {
    v38 = sub_1007C98A0((_QWORD *)(v40 > 1), v41 + 1, 1, v38);
    *v27 = v38;
  }
  *((_QWORD *)&v431 + 1) = MyNetworkPublisherService;
  v432 = (char **)&off_1010884B8;
  *(_QWORD *)&v430 = v37;
  v38[2] = v41 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v38[5 * v41 + 4]);
  swift_endAccess(&v427);
  v42 = type metadata accessor for ObservationPruneSchedulerService();
  v43 = (_QWORD *)swift_allocObject(v42, 136, 15);
  swift_defaultActor_initialize(v43);
  v43[14] = 0xD000000000000020;
  v43[15] = 0x8000000100ED58F0;
  v43[16] = 0;
  swift_beginAccess(v27, &v427, 33, 0);
  v44 = (_QWORD *)*v27;
  v45 = swift_isUniquelyReferenced_nonNull_native(*v27);
  *v27 = v44;
  if ((v45 & 1) == 0)
  {
    v44 = sub_1007C98A0(0, v44[2] + 1, 1, v44);
    *v27 = v44;
  }
  v47 = v44[2];
  v46 = v44[3];
  if (v47 >= v46 >> 1)
  {
    v44 = sub_1007C98A0((_QWORD *)(v46 > 1), v47 + 1, 1, v44);
    *v27 = v44;
  }
  *((_QWORD *)&v431 + 1) = v42;
  v432 = (char **)&off_10107B6B8;
  *(_QWORD *)&v430 = v43;
  v44[2] = v47 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v44[5 * v47 + 4]);
  swift_endAccess(&v427);
  *((_QWORD *)&v431 + 1) = &type metadata for FindMyNetworkPublishDateProviderFactory;
  v432 = (char **)&off_101056470;
  MyNetworkPublishActivityService = type metadata accessor for FindMyNetworkPublishActivityService();
  v49 = swift_allocObject(MyNetworkPublishActivityService, 177, 15);
  v50 = sub_10009F5D0((uint64_t)&v430, (uint64_t)&type metadata for FindMyNetworkPublishDateProviderFactory);
  __chkstk_darwin(v50);
  initializeWithCopy();
  v428 = &type metadata for FindMyNetworkPublishDateProviderFactory;
  v429 = &off_101056470;
  swift_defaultActor_initialize(v49);
  *(_QWORD *)(v49 + 112) = 0xD000000000000023;
  *(_QWORD *)(v49 + 120) = 0x8000000100ED5920;
  *(_QWORD *)(v49 + 168) = _swiftEmptyDictionarySingleton;
  *(_BYTE *)(v49 + 176) = 1;
  sub_10000F9FC(&v427, v49 + 128);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v430);
  swift_beginAccess(v27, &v427, 33, 0);
  v51 = (_QWORD *)*v27;
  v52 = swift_isUniquelyReferenced_nonNull_native(*v27);
  *v27 = v51;
  if ((v52 & 1) == 0)
  {
    v51 = sub_1007C98A0(0, v51[2] + 1, 1, v51);
    *v27 = v51;
  }
  v54 = v51[2];
  v53 = v51[3];
  if (v54 >= v53 >> 1)
  {
    v51 = sub_1007C98A0((_QWORD *)(v53 > 1), v54 + 1, 1, v51);
    *v27 = v51;
  }
  *((_QWORD *)&v431 + 1) = MyNetworkPublishActivityService;
  v432 = (char **)&off_10104F518;
  *(_QWORD *)&v430 = v49;
  v51[2] = v54 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v51[5 * v54 + 4]);
  swift_endAccess(&v427);
  v55 = type metadata accessor for AdvertisementCacheService(0);
  swift_allocObject(v55, *(unsigned int *)(v55 + 48), *(unsigned __int16 *)(v55 + 52));
  v56 = sub_1001575A0();
  swift_beginAccess(v27, &v427, 33, 0);
  v57 = (_QWORD *)*v27;
  v58 = swift_isUniquelyReferenced_nonNull_native(*v27);
  *v27 = v57;
  if ((v58 & 1) == 0)
  {
    v57 = sub_1007C98A0(0, v57[2] + 1, 1, v57);
    *v27 = v57;
  }
  v59 = v417;
  v61 = v419;
  v60 = v420;
  v63 = v57[2];
  v62 = v57[3];
  if (v63 >= v62 >> 1)
  {
    v57 = sub_1007C98A0((_QWORD *)(v62 > 1), v63 + 1, 1, v57);
    *v27 = v57;
  }
  *((_QWORD *)&v431 + 1) = v55;
  v432 = (char **)&off_10105A500;
  *(_QWORD *)&v430 = v56;
  v57[2] = v63 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v57[5 * v63 + 4]);
  swift_endAccess(&v427);
  v64 = type metadata accessor for SchedulerService(0);
  swift_allocObject(v64, *(unsigned int *)(v64 + 48), *(unsigned __int16 *)(v64 + 52));
  v65 = sub_1006194E8();
  swift_beginAccess(v27, &v427, 33, 0);
  v66 = (_QWORD *)*v27;
  v67 = swift_isUniquelyReferenced_nonNull_native(*v27);
  *v27 = v66;
  if ((v67 & 1) == 0)
  {
    v66 = sub_1007C98A0(0, v66[2] + 1, 1, v66);
    *v27 = v66;
  }
  v69 = v66[2];
  v68 = v66[3];
  if (v69 >= v68 >> 1)
  {
    v66 = sub_1007C98A0((_QWORD *)(v68 > 1), v69 + 1, 1, v66);
    *v27 = v66;
  }
  *((_QWORD *)&v431 + 1) = v64;
  v432 = (char **)&off_101083720;
  *(_QWORD *)&v430 = v65;
  v66[2] = v69 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v66[5 * v69 + 4]);
  swift_endAccess(&v427);
  v70 = type metadata accessor for AppActivity();
  swift_allocObject(v70, 72, 7);
  v71 = sub_1007C51B0();
  v72 = type metadata accessor for LocalPairingMonitor();
  v73 = swift_allocObject(v72, 32, 7);
  v74 = sub_10001A9A8(&qword_1010FAA48);
  swift_allocObject(v74, *(unsigned int *)(v74 + 48), *(unsigned __int16 *)(v74 + 52));
  v75 = PassthroughSubject.init()();
  v73[2].isa = (Class)v75;
  *(_QWORD *)&v430 = v75;
  v76 = sub_1000193A4(&qword_1010FAA50, &qword_1010FAA48, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v73[3].isa = (Class)Publisher.eraseToAnyPublisher()(v74, v76);
  v77 = type metadata accessor for CloudKitIDSUpdateManager();
  swift_allocObject(v77, 72, 7);
  v78 = swift_retain();
  v412 = v73;
  v79 = sub_1002AC22C(v78);
  v80 = swift_allocObject(&unk_101075000, 32, 7);
  *(_QWORD *)(v80 + 16) = v59;
  *(_QWORD *)(v80 + 24) = v60;
  swift_retain();
  swift_retain();
  unsafeFromAsyncTask<A>(_:)(&type metadata for (), &unk_1010FAA60, v80, &type metadata for () + 1);
  swift_release();
  v81 = type metadata accessor for CloudStorageService();
  swift_retain();
  unsafeFromAsyncTask<A>(_:)(&unk_1010FAA70, v60, v81);
  swift_release();
  v415 = 0;
  v82 = v430;
  v418 = sub_10001F6FC();
  v83 = v426;
  (*(void (**)(char *, _QWORD, uint64_t))(v425 + 104))(v426, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v61);
  swift_retain();
  v84 = (uint64_t)v414;
  swift_retain();
  swift_retain();
  v85 = swift_retain();
  v86 = v422;
  static DispatchQoS.unspecified.getter(v85);
  *(_QWORD *)&v430 = _swiftEmptyArrayStorage;
  v87 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v88 = (uint64_t)v79;
  v89 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v419 = v71;
  v90 = v89;
  v91 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  v92 = v424;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v430, v90, v91, v423, v87);
  v93 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003CLL, 0x8000000100ED59B0, v86, v92, v83, 0);
  v94 = type metadata accessor for BeaconStore(0);
  swift_allocObject(v94, *(unsigned int *)(v94 + 48), *(unsigned __int16 *)(v94 + 52));
  v95 = (char *)sub_1007FE514(v84, v419, v88, v93);
  v407 = v82;
  *((_QWORD *)v95 + 10) = v82;
  swift_release();
  swift_beginAccess(v27, &v427, 33, 0);
  v96 = (_QWORD *)*v27;
  v426 = v95;
  swift_retain();
  v97 = swift_isUniquelyReferenced_nonNull_native(v96);
  *v27 = v96;
  if ((v97 & 1) == 0)
  {
    v96 = sub_1007C98A0(0, v96[2] + 1, 1, v96);
    *v27 = v96;
  }
  v99 = v96[2];
  v98 = v96[3];
  if (v99 >= v98 >> 1)
  {
    v96 = sub_1007C98A0((_QWORD *)(v98 > 1), v99 + 1, 1, v96);
    *v27 = v96;
  }
  *((_QWORD *)&v431 + 1) = v94;
  v432 = (char **)&off_1010944A0;
  v100 = v426;
  *(_QWORD *)&v430 = v426;
  v96[2] = v99 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v96[5 * v99 + 4]);
  swift_endAccess(&v427);
  v101 = type metadata accessor for BeaconStoreActor();
  v102 = (char *)swift_allocObject(v101, 136, 15);
  swift_retain();
  swift_defaultActor_initialize(v102);
  *((_QWORD *)v102 + 14) = 0xD000000000000010;
  *((_QWORD *)v102 + 15) = 0x8000000100EC6470;
  *((_QWORD *)v102 + 16) = v100;
  v103 = v102;
  swift_beginAccess(v27, &v427, 33, 0);
  v104 = (_QWORD *)*v27;
  swift_retain();
  v105 = swift_isUniquelyReferenced_nonNull_native(v104);
  *v27 = v104;
  if ((v105 & 1) == 0)
  {
    v104 = sub_1007C98A0(0, v104[2] + 1, 1, v104);
    *v27 = v104;
  }
  v107 = v104[2];
  v106 = v104[3];
  if (v107 >= v106 >> 1)
  {
    v104 = sub_1007C98A0((_QWORD *)(v106 > 1), v107 + 1, 1, v104);
    *v27 = v104;
  }
  *((_QWORD *)&v431 + 1) = v101;
  v432 = (char **)&off_1010A7858;
  *(_QWORD *)&v430 = v103;
  v104[2] = v107 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v104[5 * v107 + 4]);
  swift_endAccess(&v427);
  v108 = (void *)swift_retain();
  sub_1001C4C9C(v108);
  v109 = type metadata accessor for OwnDevicePublishActivityService(0);
  v110 = swift_allocObject(v109, *(unsigned int *)(v109 + 48), *(unsigned __int16 *)(v109 + 52));
  swift_defaultActor_initialize(v110);
  *(_QWORD *)(v110 + 112) = 0xD00000000000001FLL;
  *(_QWORD *)(v110 + 120) = 0x8000000100ED59F0;
  v111 = v110 + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_configurationSubscription;
  v112 = sub_10001A9A8(&qword_1010FAA80);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 56))(v111, 1, 1, v112);
  *(_QWORD *)(v110 + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_activity) = 0;
  swift_beginAccess(v27, &v427, 33, 0);
  v113 = (_QWORD *)*v27;
  v114 = swift_isUniquelyReferenced_nonNull_native(*v27);
  *v27 = v113;
  v413 = v88;
  v422 = v103;
  if ((v114 & 1) == 0)
  {
    v113 = sub_1007C98A0(0, v113[2] + 1, 1, v113);
    *v27 = v113;
  }
  v116 = v113[2];
  v115 = v113[3];
  if (v116 >= v115 >> 1)
  {
    v113 = sub_1007C98A0((_QWORD *)(v115 > 1), v116 + 1, 1, v113);
    *v27 = v113;
  }
  *((_QWORD *)&v431 + 1) = v109;
  v432 = (char **)&off_1010AB498;
  *(_QWORD *)&v430 = v110;
  v113[2] = v116 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v113[5 * v116 + 4]);
  swift_endAccess(&v427);
  v117 = type metadata accessor for CompanionPublishActivity();
  v118 = swift_allocObject(v117, 128, 15);
  swift_defaultActor_initialize(v118);
  *(_QWORD *)(v118 + 112) = 0xD000000000000018;
  *(_QWORD *)(v118 + 120) = 0x8000000100ED5A10;
  swift_beginAccess(v27, &v427, 33, 0);
  v119 = (_QWORD *)*v27;
  v120 = swift_isUniquelyReferenced_nonNull_native(*v27);
  *v27 = v119;
  if ((v120 & 1) == 0)
  {
    v119 = sub_1007C98A0(0, v119[2] + 1, 1, v119);
    *v27 = v119;
  }
  v122 = v119[2];
  v121 = v119[3];
  if (v122 >= v121 >> 1)
  {
    v119 = sub_1007C98A0((_QWORD *)(v121 > 1), v122 + 1, 1, v119);
    *v27 = v119;
  }
  *((_QWORD *)&v431 + 1) = v117;
  v432 = (char **)&off_101066938;
  *(_QWORD *)&v430 = v118;
  v119[2] = v122 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v119[5 * v122 + 4]);
  swift_endAccess(&v427);
  v123 = type metadata accessor for ObservationDatabase(0);
  swift_allocObject(v123, *(unsigned int *)(v123 + 48), *(unsigned __int16 *)(v123 + 52));
  v124 = sub_100D2A2C8(0);
  v125 = type metadata accessor for BeaconKeyService();
  v430 = 0u;
  v431 = 0u;
  v432 = 0;
  swift_allocObject(v125, 200, 15);
  swift_retain_n(v124, 2);
  v126 = sub_10072F314((uint64_t)&v430, v124);
  v416 = v124;
  swift_release();
  swift_beginAccess(v27, &v427, 33, 0);
  v127 = (_QWORD *)*v27;
  v128 = swift_isUniquelyReferenced_nonNull_native(*v27);
  *v27 = v127;
  if ((v128 & 1) == 0)
  {
    v127 = sub_1007C98A0(0, v127[2] + 1, 1, v127);
    *v27 = v127;
  }
  v130 = v127[2];
  v129 = v127[3];
  if (v130 >= v129 >> 1)
  {
    v127 = sub_1007C98A0((_QWORD *)(v129 > 1), v130 + 1, 1, v127);
    *v27 = v127;
  }
  *((_QWORD *)&v431 + 1) = v125;
  v432 = (char **)&off_10108DB60;
  *(_QWORD *)&v430 = v126;
  v127[2] = v130 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v127[5 * v130 + 4]);
  swift_endAccess(&v427);
  v131 = type metadata accessor for DistributedNotificationService();
  swift_allocObject(v131, 168, 15);
  v132 = sub_100997D10();
  swift_beginAccess(v27, &v427, 33, 0);
  v133 = (_QWORD *)*v27;
  v134 = swift_isUniquelyReferenced_nonNull_native(*v27);
  *v27 = v133;
  if ((v134 & 1) == 0)
  {
    v133 = sub_1007C98A0(0, v133[2] + 1, 1, v133);
    *v27 = v133;
  }
  v136 = v133[2];
  v135 = v133[3];
  if (v136 >= v135 >> 1)
  {
    v133 = sub_1007C98A0((_QWORD *)(v135 > 1), v136 + 1, 1, v133);
    *v27 = v133;
  }
  *((_QWORD *)&v431 + 1) = v131;
  v432 = (char **)&off_10109FD10;
  *(_QWORD *)&v430 = v132;
  v133[2] = v136 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v133[5 * v136 + 4]);
  swift_endAccess(&v427);
  found = type metadata accessor for NotifyWhenFoundManager();
  swift_allocObject(found, 89, 7);
  v138 = swift_retain();
  v411 = sub_1002014D0(v138);
  My = type metadata accessor for Feature.FindMy(0);
  *((_QWORD *)&v431 + 1) = My;
  v424 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v432 = (char **)v424;
  v140 = sub_100018F08(&v430);
  v141 = *(void (**)(_QWORD))(*(_QWORD *)(My - 8) + 104);
  LODWORD(v409) = enum case for Feature.FindMy.networkScalingImprovements(_:);
  v425 = My;
  v423 = v141;
  v141(v140);
  LOBYTE(My) = isFeatureEnabled(_:)(&v430);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v430);
  if ((My & 1) != 0)
  {
    v142 = type metadata accessor for DeviceBeaconPayloadPublisher();
    swift_allocObject(v142, 168, 15);
    v143 = swift_retain();
    v144 = sub_10061A574(v143);
    swift_beginAccess(v27, &v427, 33, 0);
    v145 = (_QWORD *)*v27;
    swift_retain();
    v146 = swift_isUniquelyReferenced_nonNull_native(v145);
    *v27 = v145;
    if ((v146 & 1) == 0)
    {
      v145 = sub_1007C98A0(0, v145[2] + 1, 1, v145);
      *v27 = v145;
    }
    v148 = v145[2];
    v147 = v145[3];
    if (v148 >= v147 >> 1)
    {
      v145 = sub_1007C98A0((_QWORD *)(v147 > 1), v148 + 1, 1, v145);
      *v27 = v145;
    }
    *((_QWORD *)&v431 + 1) = v142;
    v432 = (char **)&off_1010839D8;
    *(_QWORD *)&v430 = v144;
    v145[2] = v148 + 1;
    sub_10000F9FC(&v430, (uint64_t)&v145[5 * v148 + 4]);
    swift_endAccess(&v427);
    swift_release();
  }
  v149 = type metadata accessor for WildModeAssociationRecordsPublisher();
  swift_allocObject(v149, 152, 15);
  v150 = sub_1008F7E78();
  swift_beginAccess(v27, &v427, 33, 0);
  v151 = (_QWORD *)*v27;
  swift_retain();
  v152 = swift_isUniquelyReferenced_nonNull_native(v151);
  *v27 = v151;
  if ((v152 & 1) == 0)
  {
    v151 = sub_1007C98A0(0, v151[2] + 1, 1, v151);
    *v27 = v151;
  }
  v154 = v151[2];
  v153 = v151[3];
  if (v154 >= v153 >> 1)
  {
    v151 = sub_1007C98A0((_QWORD *)(v153 > 1), v154 + 1, 1, v151);
    *v27 = v151;
  }
  *((_QWORD *)&v431 + 1) = v149;
  v432 = &off_10109B638;
  *(_QWORD *)&v430 = v150;
  v151[2] = v154 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v151[5 * v154 + 4]);
  swift_endAccess(&v427);
  v155 = type metadata accessor for BatteryLevelService();
  v156 = (_QWORD *)swift_allocObject(v155, 136, 15);
  swift_defaultActor_initialize(v156);
  v156[14] = 0xD000000000000013;
  v156[15] = 0x8000000100ED5A30;
  v156[16] = _swiftEmptyDictionarySingleton;
  swift_beginAccess(v27, &v427, 33, 0);
  v157 = (_QWORD *)*v27;
  v158 = swift_isUniquelyReferenced_nonNull_native(*v27);
  *v27 = v157;
  if ((v158 & 1) == 0)
  {
    v157 = sub_1007C98A0(0, v157[2] + 1, 1, v157);
    *v27 = v157;
  }
  v406 = v150;
  v160 = v157[2];
  v159 = v157[3];
  v404 = v125;
  v408 = v27;
  if (v160 >= v159 >> 1)
  {
    v157 = sub_1007C98A0((_QWORD *)(v159 > 1), v160 + 1, 1, v157);
    *v27 = v157;
  }
  *((_QWORD *)&v431 + 1) = v155;
  v432 = (char **)&off_1010B37D0;
  *(_QWORD *)&v430 = v156;
  v157[2] = v160 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v157[5 * v160 + 4]);
  swift_endAccess(&v427);
  v161 = objc_allocWithZone((Class)type metadata accessor for TagCommandManager());
  v162 = (uint64_t)v426;
  v163 = swift_retain();
  v164 = sub_100677EAC(v163, (uint64_t)sub_1003E6B5C, 0);
  swift_release();
  v165 = type metadata accessor for BluetoothCommunicationCoordinator();
  swift_allocObject(v165, 72, 7);
  v166 = sub_100D07BFC();
  v167 = type metadata accessor for AccessoryMetadataManager();
  swift_allocObject(v167, 56, 7);
  swift_retain();
  swift_retain();
  v168 = sub_10021811C(v162, (uint64_t)v166);
  v169 = type metadata accessor for BeaconManagerService(0);
  swift_allocObject(v169, *(unsigned int *)(v169 + 48), *(unsigned __int16 *)(v169 + 52));
  v170 = (uint64_t)v417;
  swift_retain();
  v171 = (uint64_t)v412;
  swift_retain();
  v172 = v419;
  swift_retain();
  swift_retain();
  swift_retain();
  v401 = v164;
  v173 = v411;
  swift_retain();
  swift_retain();
  v418 = (unint64_t)v166;
  v410 = v168;
  v174 = sub_100792FA0(v162, v170, v172, v171, v166, v164, v173, v168);
  *((_QWORD *)&v431 + 1) = v169;
  v432 = (char **)&off_101091D10;
  *(_QWORD *)&v430 = v174;
  v175 = type metadata accessor for BeaconSharingManager();
  v176 = swift_allocObject(v175, 480, 7);
  v177 = sub_10009F5D0((uint64_t)&v430, v169);
  __chkstk_darwin(v177);
  v179 = (uint64_t *)((char *)&v399 - ((v178 + 15) & 0xFFFFFFFFFFFFFFF0));
  v181 = *(void (**)(uint64_t *))(v180 + 16);
  v403 = v169;
  v181(v179);
  v182 = *v179;
  swift_retain_n(v174, 2);
  swift_retain();
  v183 = v413;
  swift_retain();
  swift_retain();
  v184 = v182;
  v185 = v174;
  v186 = sub_1003E73C8(v184, v162, v170, v183, v176);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v430);
  swift_release();
  v187 = v425;
  *((_QWORD *)&v431 + 1) = v425;
  v432 = (char **)v424;
  v188 = sub_100018F08(&v430);
  ((void (*)(_QWORD *, _QWORD, uint64_t))v423)(v188, v409, v187);
  LOBYTE(v176) = isFeatureEnabled(_:)(&v430);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v430);
  v189 = v420;
  v190 = v415;
  if ((v176 & 1) != 0)
  {
    v191 = *(_QWORD *)(v186 + 24);
    v192 = qword_1010E9C58;
    swift_retain();
    if (v192 != -1)
      swift_once(&qword_1010E9C58, sub_1004F0DD8);
    *(_QWORD *)(qword_1011B6FC8 + 16) = v191;
    swift_release();
  }
  if (v185[5])
  {
    v394 = sub_10028FA08();
    v395 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v394, 0, 0);
    *v396 = 8;
    swift_willThrow(v395);
LABEL_185:
    *(_QWORD *)&v430 = 0;
    *((_QWORD *)&v430 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    v397._countAndFlagsBits = 0xD000000000000027;
    v397._object = (void *)0x8000000100ED5A50;
    String.append(_:)(v397);
    *(_QWORD *)&v427 = v395;
    v398 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    _print_unlocked<A, B>(_:_:)(&v427, &v430, v398, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v430, *((_QWORD *)&v430 + 1), "searchpartyd/SearchPartyDaemon.swift", 36, 2, 310, 0);
    __break(1u);
    return result;
  }
  v185[5] = v186;
  v193 = *(_QWORD *)(v186 + 320);
  swift_retain();
  *(_QWORD *)&v430 = v193;
  swift_retain();
  swift_retain();
  v194 = sub_10001A9A8(&qword_1010FAA88);
  v195 = sub_1000193A4(&qword_1010FAA90, &qword_1010FAA88, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v196 = Publisher<>.sink(receiveValue:)(sub_1003E85B8, v185, v194, v195);
  swift_release();
  swift_release();
  *(_QWORD *)((char *)v185 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_triggerFamilyUpdateSubscription) = v196;
  swift_release();
  sub_1002AC484(v186);
  v197 = v408;
  if (v190)
  {
    v395 = v190;
    goto LABEL_185;
  }
  v198 = type metadata accessor for OwnerCommandManager();
  swift_allocObject(v198, 192, 7);
  v199 = (uint64_t)v426;
  swift_retain();
  v200 = v418;
  swift_retain();
  v201 = sub_10046DC04(v199, v200, 0);
  swift_release();
  swift_release();
  swift_beginAccess(v197, &v427, 33, 0);
  v202 = (_QWORD *)*v197;
  swift_retain();
  v203 = swift_isUniquelyReferenced_nonNull_native(v202);
  *v197 = v202;
  if ((v203 & 1) == 0)
  {
    v202 = sub_1007C98A0(0, v202[2] + 1, 1, v202);
    *v197 = v202;
  }
  v205 = v202[2];
  v204 = v202[3];
  if (v205 >= v204 >> 1)
  {
    v202 = sub_1007C98A0((_QWORD *)(v204 > 1), v205 + 1, 1, v202);
    *v197 = v202;
  }
  v415 = v186;
  v409 = v185;
  *((_QWORD *)&v431 + 1) = v198;
  v432 = (char **)&off_101077C88;
  *(_QWORD *)&v430 = v201;
  v202[2] = v205 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v202[5 * v205 + 4]);
  swift_endAccess(&v427);
  swift_retain();
  unsafeFromAsyncTask<A>(_:)(&type metadata for (), &unk_1010FAAA0, v189, &type metadata for () + 1);
  swift_release();
  v206 = (objc_class *)type metadata accessor for CentralManager();
  v207 = objc_allocWithZone(v206);
  v208 = (void *)sub_100E01C28(1, 0, 15.0);
  if (qword_1010EA648 != -1)
    swift_once(&qword_1010EA648, sub_100E00F3C);
  v405 = v201;
  v209 = type metadata accessor for Logger(0);
  sub_10001A9E8(v209, (uint64_t)qword_1011B8590);
  v210 = v208;
  v211 = Logger.logObject.getter(v210);
  v212 = static os_log_type_t.default.getter(v211);
  if (os_log_type_enabled(v211, v212))
  {
    v213 = (uint8_t *)swift_slowAlloc(12, -1);
    v214 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v213 = 138412290;
    *(_QWORD *)&v430 = v210;
    v215 = v206;
    v216 = v210;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v430, (char *)&v430 + 8, v213 + 4, v213 + 12);
    *v214 = v210;

    v206 = v215;
    v197 = v408;
    _os_log_impl((void *)&_mh_execute_header, v211, v212, "Shared CentralManager: %@", v213, 0xCu);
    v217 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v214, 1, v217);
    swift_slowDealloc(v214, -1, -1);
    v218 = v213;
    v189 = v420;
    swift_slowDealloc(v218, -1, -1);
  }
  else
  {

    v211 = v210;
  }
  v219 = (uint64_t)v412;

  swift_beginAccess(v197, &v427, 33, 0);
  v220 = (_QWORD *)*v197;
  v221 = v210;
  v222 = swift_isUniquelyReferenced_nonNull_native(v220);
  *v197 = v220;
  if ((v222 & 1) == 0)
  {
    v220 = sub_1007C98A0(0, v220[2] + 1, 1, v220);
    *v197 = v220;
  }
  v224 = v220[2];
  v223 = v220[3];
  if (v224 >= v223 >> 1)
  {
    v220 = sub_1007C98A0((_QWORD *)(v223 > 1), v224 + 1, 1, v220);
    *v197 = v220;
  }
  *((_QWORD *)&v431 + 1) = v206;
  v432 = (char **)&off_1010C3158;
  *(_QWORD *)&v430 = v221;
  v220[2] = v224 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v220[5 * v224 + 4]);
  swift_endAccess(&v427);
  UnlockService = type metadata accessor for FirstUnlockService();
  v226 = swift_allocObject(UnlockService, 140, 15);
  swift_defaultActor_initialize(v226);
  *(_QWORD *)(v226 + 112) = 0xD000000000000012;
  *(_QWORD *)(v226 + 120) = 0x8000000100ED5A80;
  *(_QWORD *)(v226 + 128) = _swiftEmptyArrayStorage;
  *(_DWORD *)(v226 + 136) = 0;
  swift_beginAccess(v197, &v427, 33, 0);
  v227 = (_QWORD *)*v197;
  v228 = swift_isUniquelyReferenced_nonNull_native(*v197);
  *v197 = v227;
  v412 = v221;
  if ((v228 & 1) == 0)
  {
    v227 = sub_1007C98A0(0, v227[2] + 1, 1, v227);
    *v197 = v227;
  }
  v230 = v227[2];
  v229 = v227[3];
  if (v230 >= v229 >> 1)
  {
    v227 = sub_1007C98A0((_QWORD *)(v229 > 1), v230 + 1, 1, v227);
    *v197 = v227;
  }
  *((_QWORD *)&v431 + 1) = UnlockService;
  v432 = &off_101077700;
  *(_QWORD *)&v430 = v226;
  v227[2] = v230 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v227[5 * v230 + 4]);
  swift_endAccess(&v427);
  *((_QWORD *)&v431 + 1) = v425;
  v432 = (char **)v424;
  v231 = sub_100018F08(&v430);
  v402 = enum case for Feature.FindMy.itemSharing(_:);
  v423(v231);
  v232 = isFeatureEnabled(_:)(&v430);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v430);
  if ((v232 & 1) != 0)
  {
    v233 = type metadata accessor for FamilyCircleService();
    v234 = (_QWORD *)swift_allocObject(v233, 160, 15);
    swift_defaultActor_initialize(v234);
    v234[14] = 0xD000000000000013;
    v234[15] = 0x8000000100ECA680;
    v234[16] = 0;
    v234[17] = _swiftEmptyArrayStorage;
    v234[18] = 0;
    v234[19] = 0;
    swift_beginAccess(v197, &v427, 33, 0);
    v235 = (_QWORD *)*v197;
    v236 = swift_isUniquelyReferenced_nonNull_native(*v197);
    *v197 = v235;
    if ((v236 & 1) == 0)
    {
      v235 = sub_1007C98A0(0, v235[2] + 1, 1, v235);
      *v197 = v235;
    }
    v238 = v235[2];
    v237 = v235[3];
    if (v238 >= v237 >> 1)
    {
      v235 = sub_1007C98A0((_QWORD *)(v237 > 1), v238 + 1, 1, v235);
      *v197 = v235;
    }
    *((_QWORD *)&v431 + 1) = v233;
    v432 = (char **)&off_10109F198;
    *(_QWORD *)&v430 = v234;
    v235[2] = v238 + 1;
    sub_10000F9FC(&v430, (uint64_t)&v235[5 * v238 + 4]);
    swift_endAccess(&v427);
    v239 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
    swift_allocObject(v239, 160, 15);
    v240 = sub_10096AA24();
    swift_beginAccess(v197, &v427, 33, 0);
    v241 = (_QWORD *)*v197;
    v242 = swift_isUniquelyReferenced_nonNull_native(*v197);
    *v197 = v241;
    if ((v242 & 1) == 0)
    {
      v241 = sub_1007C98A0(0, v241[2] + 1, 1, v241);
      *v197 = v241;
    }
    v244 = v241[2];
    v243 = v241[3];
    if (v244 >= v243 >> 1)
    {
      v241 = sub_1007C98A0((_QWORD *)(v243 > 1), v244 + 1, 1, v241);
      *v197 = v241;
    }
    *((_QWORD *)&v431 + 1) = v239;
    v432 = (char **)&off_10109E9E0;
    *(_QWORD *)&v430 = v240;
    v241[2] = v244 + 1;
    sub_10000F9FC(&v430, (uint64_t)&v241[5 * v244 + 4]);
    swift_endAccess(&v427);
    v245 = type metadata accessor for PeerTrustService();
    v246 = (_QWORD *)swift_allocObject(v245, 136, 15);
    swift_defaultActor_initialize(v246);
    v246[14] = 0xD000000000000010;
    v246[15] = 0x8000000100ECC5B0;
    v246[16] = 0;
    v247 = sub_100006204(&qword_1010FAAD8, (uint64_t (*)(uint64_t))type metadata accessor for PeerTrustService, (uint64_t)&unk_100E5ACA0);
    v248 = type metadata accessor for PeerTrustMessageRouter();
    v249 = swift_allocObject(v248, 128, 15);
    swift_retain();
    swift_defaultActor_initialize(v249);
    *(_QWORD *)(v249 + 112) = v246;
    *(_QWORD *)(v249 + 120) = v247;
    v246[16] = v249;
    swift_release();
    swift_beginAccess(v197, &v427, 33, 0);
    v250 = (_QWORD *)*v197;
    v251 = swift_isUniquelyReferenced_nonNull_native(*v197);
    *v197 = v250;
    if ((v251 & 1) == 0)
    {
      v250 = sub_1007C98A0(0, v250[2] + 1, 1, v250);
      *v197 = v250;
    }
    v253 = v250[2];
    v252 = v250[3];
    if (v253 >= v252 >> 1)
    {
      v250 = sub_1007C98A0((_QWORD *)(v252 > 1), v253 + 1, 1, v250);
      *v197 = v250;
    }
    *((_QWORD *)&v431 + 1) = v245;
    v432 = (char **)&off_1010A85B8;
    *(_QWORD *)&v430 = v246;
    v250[2] = v253 + 1;
    sub_10000F9FC(&v430, (uint64_t)&v250[5 * v253 + 4]);
    swift_endAccess(&v427);
    v254 = type metadata accessor for CircleTrustService();
    v255 = (_QWORD *)swift_allocObject(v254, 152, 15);
    swift_defaultActor_initialize(v255);
    v255[14] = 0xD000000000000012;
    v255[15] = 0x8000000100EC7C40;
    v255[16] = 0;
    v256 = type metadata accessor for WorkItemQueue(0);
    v257 = v400;
    UUID.init()(v256);
    v255[17] = WorkItemQueue.__allocating_init(name:identifier:)(0xD000000000000017, 0x8000000100ED5AE0, v257);
    v255[18] = 0;
    swift_beginAccess(v197, &v427, 33, 0);
    v258 = (_QWORD *)*v197;
    v259 = swift_isUniquelyReferenced_nonNull_native(*v197);
    *v197 = v258;
    if ((v259 & 1) == 0)
    {
      v258 = sub_1007C98A0(0, v258[2] + 1, 1, v258);
      *v197 = v258;
    }
    v261 = v258[2];
    v260 = v258[3];
    if (v261 >= v260 >> 1)
    {
      v258 = sub_1007C98A0((_QWORD *)(v260 > 1), v261 + 1, 1, v258);
      *v197 = v258;
    }
    *((_QWORD *)&v431 + 1) = v254;
    v432 = (char **)&off_10109ED58;
    *(_QWORD *)&v430 = v255;
    v258[2] = v261 + 1;
    sub_10000F9FC(&v430, (uint64_t)&v258[5 * v261 + 4]);
    swift_endAccess(&v427);
  }
  v262 = v425;
  *((_QWORD *)&v431 + 1) = v425;
  v432 = (char **)v424;
  v263 = sub_100018F08(&v430);
  v264 = enum case for Feature.FindMy.managedCBPeripheral(_:);
  ((void (*)(_QWORD *, _QWORD, uint64_t))v423)(v263, enum case for Feature.FindMy.managedCBPeripheral(_:), v262);
  LOBYTE(v262) = isFeatureEnabled(_:)(&v430);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v430);
  if ((v262 & 1) != 0)
  {
    v265 = type metadata accessor for StandaloneBeaconService();
    swift_allocObject(v265, 160, 15);
    v266 = sub_1009026C4(0);
    swift_beginAccess(v197, &v427, 33, 0);
    v267 = (_QWORD *)*v197;
    v268 = swift_isUniquelyReferenced_nonNull_native(*v197);
    *v197 = v267;
    if ((v268 & 1) == 0)
    {
      v267 = sub_1007C98A0(0, v267[2] + 1, 1, v267);
      *v197 = v267;
    }
    v270 = v267[2];
    v269 = v267[3];
    if (v270 >= v269 >> 1)
    {
      v267 = sub_1007C98A0((_QWORD *)(v269 > 1), v270 + 1, 1, v267);
      *v197 = v267;
    }
    *((_QWORD *)&v431 + 1) = v265;
    v432 = &off_10109BB28;
    *(_QWORD *)&v430 = v266;
    v267[2] = v270 + 1;
    sub_10000F9FC(&v430, (uint64_t)&v267[5 * v270 + 4]);
    swift_endAccess(&v427);
    v432 = 0;
    v430 = 0u;
    v431 = 0u;
    swift_allocObject(v404, 200, 15);
    v271 = v416;
    swift_retain_n(v416, 3);
    v272 = sub_10072F314((uint64_t)&v430, v271);
    swift_release();
    swift_beginAccess(v197, &v427, 33, 0);
    v273 = (_QWORD *)*v197;
    v274 = swift_isUniquelyReferenced_nonNull_native(*v197);
    *v197 = v273;
    if ((v274 & 1) == 0)
    {
      v273 = sub_1007C98A0(0, v273[2] + 1, 1, v273);
      *v197 = v273;
    }
    v276 = v273[2];
    v275 = v273[3];
    if (v276 >= v275 >> 1)
    {
      v273 = sub_1007C98A0((_QWORD *)(v275 > 1), v276 + 1, 1, v273);
      *v197 = v273;
    }
    *((_QWORD *)&v431 + 1) = v404;
    v432 = (char **)&off_10108DB60;
    *(_QWORD *)&v430 = v272;
    v273[2] = v276 + 1;
    sub_10000F9FC(&v430, (uint64_t)&v273[5 * v276 + 4]);
    swift_endAccess(&v427);
    v277 = type metadata accessor for ObservationStoreService();
    v278 = swift_allocObject(v277, 161, 15);
    v279 = v416;
    swift_retain();
    swift_defaultActor_initialize(v278);
    *(_QWORD *)(v278 + 112) = 0xD000000000000017;
    *(_QWORD *)(v278 + 120) = 0x8000000100ED5AC0;
    *(_QWORD *)(v278 + 144) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v278 + 152) = 1;
    *(_BYTE *)(v278 + 160) = 0;
    *(_QWORD *)(v278 + 128) = v279;
    *(_QWORD *)(v278 + 136) = _swiftEmptyArrayStorage;
    swift_beginAccess(v197, &v427, 33, 0);
    v280 = (_QWORD *)*v197;
    v281 = swift_isUniquelyReferenced_nonNull_native(*v197);
    *v197 = v280;
    if ((v281 & 1) == 0)
    {
      v280 = sub_1007C98A0(0, v280[2] + 1, 1, v280);
      *v197 = v280;
    }
    v283 = v280[2];
    v282 = v280[3];
    if (v283 >= v282 >> 1)
    {
      v280 = sub_1007C98A0((_QWORD *)(v282 > 1), v283 + 1, 1, v280);
      *v197 = v280;
    }
    *((_QWORD *)&v431 + 1) = v277;
    v432 = (char **)&off_1010B9560;
    *(_QWORD *)&v430 = v278;
    v280[2] = v283 + 1;
    sub_10000F9FC(&v430, (uint64_t)&v280[5 * v283 + 4]);
    swift_endAccess(&v427);
    swift_release_n(v416, 2);
  }
  v284 = v425;
  *((_QWORD *)&v431 + 1) = v425;
  v432 = (char **)v424;
  v285 = sub_100018F08(&v430);
  ((void (*)(_QWORD *, uint64_t, uint64_t))v423)(v285, v264, v284);
  LOBYTE(v284) = isFeatureEnabled(_:)(&v430);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v430);
  if ((v284 & 1) != 0)
  {
    v286 = type metadata accessor for Feature.Bluetooth(0);
    *((_QWORD *)&v431 + 1) = v286;
    v432 = (char **)sub_100006204(&qword_1010FAAD0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.Bluetooth, (uint64_t)&protocol conformance descriptor for Feature.Bluetooth);
    v287 = sub_100018F08(&v430);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v286 - 8) + 104))(v287, enum case for Feature.Bluetooth.sentinel(_:), v286);
    LOBYTE(v286) = isFeatureEnabled(_:)(&v430);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v430);
    if ((v286 & 1) != 0)
    {
      v288 = type metadata accessor for LeechScanningService();
      v289 = (_QWORD *)swift_allocObject(v288, 136, 15);
      swift_defaultActor_initialize(v289);
      v289[14] = 0xD000000000000014;
      v289[15] = 0x8000000100ED5AA0;
      v289[16] = _swiftEmptyArrayStorage;
      swift_beginAccess(v197, &v427, 33, 0);
      v290 = (_QWORD *)*v197;
      v291 = swift_isUniquelyReferenced_nonNull_native(*v197);
      *v197 = v290;
      if ((v291 & 1) == 0)
      {
        v290 = sub_1007C98A0(0, v290[2] + 1, 1, v290);
        *v197 = v290;
      }
      v293 = v290[2];
      v292 = v290[3];
      if (v293 >= v292 >> 1)
      {
        v290 = sub_1007C98A0((_QWORD *)(v292 > 1), v293 + 1, 1, v290);
        *v197 = v290;
      }
      *((_QWORD *)&v431 + 1) = v288;
      v432 = (char **)&off_101058FC0;
      *(_QWORD *)&v430 = v289;
      v290[2] = v293 + 1;
      sub_10000F9FC(&v430, (uint64_t)&v290[5 * v293 + 4]);
      swift_endAccess(&v427);
    }
  }
  v294 = type metadata accessor for UnknownDiscoveryService();
  swift_allocObject(v294, 96, 7);
  v295 = (uint64_t)v426;
  swift_retain();
  v296 = v418;
  swift_retain();
  v297 = v401;
  v298 = (uint64_t)v410;
  swift_retain();
  v299 = sub_1002E1344(v295, v296, (uint64_t)v297, v298);
  swift_beginAccess(v197, &v427, 33, 0);
  v300 = (_QWORD *)*v197;
  v301 = swift_isUniquelyReferenced_nonNull_native(*v197);
  *v197 = v300;
  if ((v301 & 1) == 0)
  {
    v300 = sub_1007C98A0(0, v300[2] + 1, 1, v300);
    *v197 = v300;
  }
  v303 = v300[2];
  v302 = v300[3];
  if (v303 >= v302 >> 1)
  {
    v300 = sub_1007C98A0((_QWORD *)(v302 > 1), v303 + 1, 1, v300);
    *v197 = v300;
  }
  *((_QWORD *)&v431 + 1) = v294;
  v432 = (char **)&off_1010678B8;
  *(_QWORD *)&v430 = v299;
  v300[2] = v303 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v300[5 * v303 + 4]);
  swift_endAccess(&v427);
  updated = type metadata accessor for SimpleBeaconUpdateService();
  swift_allocObject(updated, 208, 15);
  v305 = sub_100712C10();
  swift_beginAccess(v197, &v427, 33, 0);
  v306 = (_QWORD *)*v197;
  v307 = swift_isUniquelyReferenced_nonNull_native(*v197);
  *v197 = v306;
  if ((v307 & 1) == 0)
  {
    v306 = sub_1007C98A0(0, v306[2] + 1, 1, v306);
    *v197 = v306;
  }
  v309 = v306[2];
  v308 = v306[3];
  if (v309 >= v308 >> 1)
  {
    v306 = sub_1007C98A0((_QWORD *)(v308 > 1), v309 + 1, 1, v306);
    *v197 = v306;
  }
  *((_QWORD *)&v431 + 1) = updated;
  v432 = (char **)&off_10108C688;
  *(_QWORD *)&v430 = v305;
  v306[2] = v309 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v306[5 * v309 + 4]);
  swift_endAccess(&v427);
  v310 = sub_10001A9A8(&qword_1010FAAA8);
  v311 = swift_allocObject(v310, 112, 7);
  *(_OWORD *)(v311 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v311 + 56) = v403;
  *(_QWORD *)(v311 + 64) = &off_101091D38;
  *(_QWORD *)(v311 + 32) = v409;
  v312 = type metadata accessor for FinderStateManagerService(0);
  swift_allocObject(v312, *(unsigned int *)(v312 + 48), *(unsigned __int16 *)(v312 + 52));
  v313 = v421;
  swift_retain();
  swift_retain();
  v314 = sub_100BEB328(v313);
  *(_QWORD *)(v311 + 96) = v312;
  *(_QWORD *)(v311 + 104) = &off_1010B3E20;
  *(_QWORD *)(v311 + 72) = v314;
  swift_beginAccess(v197, &v430, 33, 0);
  sub_10030402C(v311);
  swift_endAccess(&v430);
  v315 = type metadata accessor for AccessoryDiscoveryService();
  swift_allocObject(v315, 96, 7);
  swift_retain();
  v316 = swift_retain();
  v317 = sub_100A34458(v316, v219);
  swift_beginAccess(v197, &v427, 33, 0);
  v318 = (_QWORD *)*v197;
  v319 = swift_isUniquelyReferenced_nonNull_native(*v197);
  *v197 = v318;
  if ((v319 & 1) == 0)
  {
    v318 = sub_1007C98A0(0, v318[2] + 1, 1, v318);
    *v197 = v318;
  }
  v321 = v318[2];
  v320 = v318[3];
  if (v321 >= v320 >> 1)
  {
    v318 = sub_1007C98A0((_QWORD *)(v320 > 1), v321 + 1, 1, v318);
    *v197 = v318;
  }
  *((_QWORD *)&v431 + 1) = v315;
  v432 = (char **)&off_1010A2838;
  *(_QWORD *)&v430 = v317;
  v318[2] = v321 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v318[5 * v321 + 4]);
  swift_endAccess(&v427);
  v322 = type metadata accessor for SecureLocationsService();
  swift_allocObject(v322, 128, 7);
  v323 = (uint64_t)v426;
  swift_retain();
  v324 = v415;
  swift_retain();
  v325 = sub_10074C740(v323, v324);
  swift_beginAccess(v197, &v427, 33, 0);
  v326 = (_QWORD *)*v197;
  v327 = swift_isUniquelyReferenced_nonNull_native(*v197);
  *v197 = v326;
  if ((v327 & 1) == 0)
  {
    v326 = sub_1007C98A0(0, v326[2] + 1, 1, v326);
    *v197 = v326;
  }
  v329 = v326[2];
  v328 = v326[3];
  if (v329 >= v328 >> 1)
  {
    v326 = sub_1007C98A0((_QWORD *)(v328 > 1), v329 + 1, 1, v326);
    *v197 = v326;
  }
  *((_QWORD *)&v431 + 1) = v322;
  v432 = (char **)&off_10108F0A8;
  *(_QWORD *)&v430 = v325;
  v326[2] = v329 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v326[5 * v329 + 4]);
  swift_endAccess(&v427);
  v330 = type metadata accessor for SeparationMonitoringEnrollmentService();
  swift_allocObject(v330, 72, 7);
  swift_retain();
  v331 = swift_retain();
  v332 = sub_1009A8D4C(v331, v219);
  swift_beginAccess(v197, &v427, 33, 0);
  v333 = (_QWORD *)*v197;
  v334 = swift_isUniquelyReferenced_nonNull_native(*v197);
  *v197 = v333;
  if ((v334 & 1) == 0)
  {
    v333 = sub_1007C98A0(0, v333[2] + 1, 1, v333);
    *v197 = v333;
  }
  v336 = v333[2];
  v335 = v333[3];
  if (v336 >= v335 >> 1)
  {
    v333 = sub_1007C98A0((_QWORD *)(v335 > 1), v336 + 1, 1, v333);
    *v197 = v333;
  }
  *((_QWORD *)&v431 + 1) = v330;
  v432 = (char **)&off_1010A0A10;
  *(_QWORD *)&v430 = v332;
  v333[2] = v336 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v333[5 * v336 + 4]);
  swift_endAccess(&v427);
  v337 = (objc_class *)type metadata accessor for UnwantedTrackingUserNotificationDelegate();
  v338 = objc_msgSend(objc_allocWithZone(v337), "init");
  swift_beginAccess(v197, &v427, 33, 0);
  v339 = (_QWORD *)*v197;
  v340 = swift_isUniquelyReferenced_nonNull_native(*v197);
  *v197 = v339;
  if ((v340 & 1) == 0)
  {
    v339 = sub_1007C98A0(0, v339[2] + 1, 1, v339);
    *v197 = v339;
  }
  v342 = v339[2];
  v341 = v339[3];
  if (v342 >= v341 >> 1)
  {
    v339 = sub_1007C98A0((_QWORD *)(v341 > 1), v342 + 1, 1, v339);
    *v197 = v339;
  }
  *((_QWORD *)&v431 + 1) = v337;
  v432 = (char **)&off_10104F460;
  *(_QWORD *)&v430 = v338;
  v339[2] = v342 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v339[5 * v342 + 4]);
  swift_endAccess(&v427);
  v343 = type metadata accessor for AccountService();
  v344 = swift_allocObject(v343, 128, 15);
  swift_defaultActor_initialize(v344);
  strcpy((char *)(v344 + 112), "AccountService");
  *(_BYTE *)(v344 + 127) = -18;
  swift_beginAccess(v197, &v427, 33, 0);
  v345 = (_QWORD *)*v197;
  v346 = swift_isUniquelyReferenced_nonNull_native(*v197);
  *v197 = v345;
  if ((v346 & 1) == 0)
  {
    v345 = sub_1007C98A0(0, v345[2] + 1, 1, v345);
    *v197 = v345;
  }
  v348 = v345[2];
  v347 = v345[3];
  if (v348 >= v347 >> 1)
  {
    v345 = sub_1007C98A0((_QWORD *)(v347 > 1), v348 + 1, 1, v345);
    *v197 = v345;
  }
  *((_QWORD *)&v431 + 1) = v343;
  v432 = (char **)&off_10105E170;
  *(_QWORD *)&v430 = v344;
  v345[2] = v348 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v345[5 * v348 + 4]);
  swift_endAccess(&v427);
  v349 = type metadata accessor for FMIPService();
  v350 = swift_allocObject(v349, 128, 15);
  swift_defaultActor_initialize(v350);
  *(_QWORD *)(v350 + 112) = 0x7672655350494D46;
  *(_QWORD *)(v350 + 120) = 0xEB00000000656369;
  swift_beginAccess(v197, &v427, 33, 0);
  v351 = (_QWORD *)*v197;
  v352 = swift_isUniquelyReferenced_nonNull_native(*v197);
  *v197 = v351;
  if ((v352 & 1) == 0)
  {
    v351 = sub_1007C98A0(0, v351[2] + 1, 1, v351);
    *v197 = v351;
  }
  v354 = v351[2];
  v353 = v351[3];
  if (v354 >= v353 >> 1)
  {
    v351 = sub_1007C98A0((_QWORD *)(v353 > 1), v354 + 1, 1, v351);
    *v197 = v351;
  }
  *((_QWORD *)&v431 + 1) = v349;
  v432 = (char **)&off_101053180;
  *(_QWORD *)&v430 = v350;
  v351[2] = v354 + 1;
  sub_10000F9FC(&v430, (uint64_t)&v351[5 * v354 + 4]);
  swift_endAccess(&v427);
  v355 = v425;
  *((_QWORD *)&v431 + 1) = v425;
  v432 = (char **)v424;
  v356 = sub_100018F08(&v430);
  ((void (*)(_QWORD *, _QWORD, uint64_t))v423)(v356, v402, v355);
  LOBYTE(v355) = isFeatureEnabled(_:)(&v430);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v430);
  if ((v355 & 1) != 0)
  {
    v357 = *(_QWORD *)(v415 + 40);
    v358 = type metadata accessor for BeaconSharingService();
    swift_allocObject(v358, 264, 15);
    v359 = (uint64_t)v422;
    swift_retain();
    swift_retain();
    v360 = sub_1000D8C70(v359, v357);
    swift_release();
    swift_release();
    swift_beginAccess(v197, &v427, 33, 0);
    v361 = (_QWORD *)*v197;
    swift_retain();
    v362 = swift_isUniquelyReferenced_nonNull_native(v361);
    *v197 = v361;
    if ((v362 & 1) == 0)
    {
      v361 = sub_1007C98A0(0, v361[2] + 1, 1, v361);
      *v197 = v361;
    }
    v364 = v361[2];
    v363 = v361[3];
    if (v364 >= v363 >> 1)
    {
      v361 = sub_1007C98A0((_QWORD *)(v363 > 1), v364 + 1, 1, v361);
      *v197 = v361;
    }
    *((_QWORD *)&v431 + 1) = v358;
    v432 = (char **)&off_101055140;
    *(_QWORD *)&v430 = v360;
    v361[2] = v364 + 1;
    sub_10000F9FC(&v430, (uint64_t)&v361[5 * v364 + 4]);
    swift_endAccess(&v427);
    v432 = 0;
    v430 = 0u;
    v431 = 0u;
    v365 = qword_1010EA140;
    v366 = (uint64_t)v422;
    swift_retain();
    if (v365 != -1)
      swift_once(&qword_1010EA140, sub_100A3A528);
    v367 = type metadata accessor for ItemSharingNotificationsService();
    swift_allocObject(v367, 232, 15);
    v368 = swift_retain();
    v369 = sub_1008A49A4(v368, v366, (uint64_t)&v430, 0, 0);
    swift_release();
    swift_beginAccess(v197, &v427, 33, 0);
    v370 = (_QWORD *)*v197;
    swift_retain();
    v371 = swift_isUniquelyReferenced_nonNull_native(v370);
    *v197 = v370;
    if ((v371 & 1) == 0)
    {
      v370 = sub_1007C98A0(0, v370[2] + 1, 1, v370);
      *v197 = v370;
    }
    v373 = v370[2];
    v372 = v370[3];
    if (v373 >= v372 >> 1)
    {
      v370 = sub_1007C98A0((_QWORD *)(v372 > 1), v373 + 1, 1, v370);
      *v197 = v370;
    }
    *((_QWORD *)&v431 + 1) = v367;
    v432 = &off_101097A70;
    *(_QWORD *)&v430 = v369;
    v370[2] = v373 + 1;
    sub_10000F9FC(&v430, (uint64_t)&v370[5 * v373 + 4]);
    swift_endAccess(&v427);
    swift_release();
    swift_release();
    v189 = v420;
  }
  v374 = swift_allocObject(&unk_101075028, 32, 7);
  v375 = v422;
  *(_QWORD *)(v374 + 16) = v189;
  *(_QWORD *)(v374 + 24) = v375;
  swift_retain();
  swift_retain();
  unsafeFromAsyncTask<A>(_:)(&type metadata for (), &unk_1010FAAB8, v374, &type metadata for () + 1);
  swift_release();
  v376 = type metadata accessor for AirPodsLEPairingService();
  swift_allocObject(v376, 275, 15);
  v377 = swift_retain();
  v378 = sub_100038E60(v377);
  if (v378)
  {
    v379 = v378;
    swift_beginAccess(v197, &v427, 33, 0);
    v380 = (_QWORD *)*v197;
    swift_retain();
    v381 = swift_isUniquelyReferenced_nonNull_native(v380);
    *v197 = v380;
    if ((v381 & 1) == 0)
    {
      v380 = sub_1007C98A0(0, v380[2] + 1, 1, v380);
      *v197 = v380;
    }
    v383 = v380[2];
    v382 = v380[3];
    if (v383 >= v382 >> 1)
    {
      v380 = sub_1007C98A0((_QWORD *)(v382 > 1), v383 + 1, 1, v380);
      *v197 = v380;
    }
    *((_QWORD *)&v431 + 1) = v376;
    v432 = (char **)&off_101050598;
    *(_QWORD *)&v430 = v379;
    v380[2] = v383 + 1;
    sub_10000F9FC(&v430, (uint64_t)&v380[5 * v383 + 4]);
    swift_endAccess(&v427);
    swift_release();
  }
  v384 = *(void **)((char *)v409 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_tagCommandManager);
  v385 = type metadata accessor for SPObserverAnalytics();
  swift_allocObject(v385, 88, 7);
  v386 = (uint64_t)v426;
  swift_retain();
  *(_QWORD *)(v189 + 64) = sub_100503F68(v386, v384);
  swift_release();
  v387 = *(_QWORD *)(v189 + 64);
  if (v387)
  {
    v388 = swift_retain();
    *(_QWORD *)&v430 = AnyCurrentValuePublisher.publisher.getter(v388);
    v389 = swift_allocObject(&unk_101075050, 24, 7);
    swift_weakInit(v389 + 16, v387);
    v390 = sub_10001A9A8((uint64_t *)&unk_1010FAAC0);
    v391 = sub_1000193A4((unint64_t *)&unk_101107EC0, (uint64_t *)&unk_1010FAAC0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v392 = Publisher<>.sink(receiveValue:)(sub_1003E86A4, v389, v390, v391);
    swift_release();
    *(_QWORD *)(v387 + 56) = v392;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release_n(v416, 2);
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    swift_release();

    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release_n(v416, 2);
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    swift_release();

  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1003E62E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[36] = a3;
  v5 = type metadata accessor for UUID(0);
  v3[37] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PencilPairingService(0);
  v3[38] = v6;
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = dword_10110FB3C;
  swift_retain();
  v8 = (_QWORD *)swift_task_alloc(v7);
  v3[39] = v8;
  *v8 = v3;
  v8[1] = sub_1003E6388;
  return sub_1009B4A20(a2);
}

uint64_t sub_1003E6388(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 312);
  *(_QWORD *)(*(_QWORD *)v1 + 320) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003E63E4, 0, 0);
}

uint64_t sub_1003E63E4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v1 = *(_QWORD *)(v0 + 320);
  if (v1)
  {
    v2 = (_QWORD *)(*(_QWORD *)(v0 + 288) + 16);
    swift_beginAccess(v2, v0 + 248, 33, 0);
    v3 = (_QWORD *)*v2;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
    *v2 = v3;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v3 = sub_1007C98A0(0, v3[2] + 1, 1, v3);
      *v2 = v3;
    }
    v6 = v3[2];
    v5 = v3[3];
    if (v6 >= v5 >> 1)
    {
      v3 = sub_1007C98A0((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
      *v2 = v3;
    }
    v7 = *(_QWORD *)(v0 + 296);
    *(_QWORD *)(v0 + 120) = *(_QWORD *)(v0 + 304);
    *(_QWORD *)(v0 + 128) = &off_1010A0E68;
    *(_QWORD *)(v0 + 96) = v1;
    v3[2] = v6 + 1;
    sub_10000F9FC((__int128 *)(v0 + 96), (uint64_t)&v3[5 * v6 + 4]);
    swift_endAccess(v0 + 248);
    v8 = type metadata accessor for LocalFindableLostModeDetectionService();
    v9 = swift_allocObject(v8, 146, 15);
    swift_defaultActor_initialize(v9);
    *(_QWORD *)(v9 + 112) = 0xD000000000000025;
    *(_QWORD *)(v9 + 120) = 0x8000000100ED5D50;
    *(_QWORD *)(v9 + 128) = 0;
    v10 = type metadata accessor for WorkItemQueue(0);
    UUID.init()(v10);
    *(_QWORD *)(v9 + 136) = WorkItemQueue.__allocating_init(identifier:)(v7);
    *(_WORD *)(v9 + 144) = 0;
    swift_beginAccess(v2, v0 + 224, 33, 0);
    v11 = (_QWORD *)*v2;
    v12 = swift_isUniquelyReferenced_nonNull_native(*v2);
    *v2 = v11;
    if ((v12 & 1) == 0)
    {
      v11 = sub_1007C98A0(0, v11[2] + 1, 1, v11);
      *v2 = v11;
    }
    v14 = v11[2];
    v13 = v11[3];
    if (v14 >= v13 >> 1)
    {
      v11 = sub_1007C98A0((_QWORD *)(v13 > 1), v14 + 1, 1, v11);
      *v2 = v11;
    }
    *(_QWORD *)(v0 + 40) = v8;
    *(_QWORD *)(v0 + 48) = &off_101084B90;
    *(_QWORD *)(v0 + 16) = v9;
    v11[2] = v14 + 1;
    sub_10000F9FC((__int128 *)(v0 + 16), (uint64_t)&v11[5 * v14 + 4]);
    swift_endAccess(v0 + 224);
    swift_release();
  }
  v15 = type metadata accessor for AccessoryConnectionService();
  *(_QWORD *)(v0 + 328) = v15;
  swift_allocObject(v15, 160, 15);
  v16 = (_QWORD *)swift_task_alloc(dword_101103B04);
  *(_QWORD *)(v0 + 336) = v16;
  *v16 = v0;
  v16[1] = sub_1003E6660;
  return sub_1006951FC();
}

uint64_t sub_1003E6660(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  *(_QWORD *)(*(_QWORD *)v1 + 344) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003E66BC, 0, 0);
}

uint64_t sub_1003E66BC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD **v2;
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 344);
  if (v1)
  {
    v2 = (_QWORD **)(*(_QWORD *)(v0 + 288) + 16);
    swift_beginAccess(v2, v0 + 200, 33, 0);
    v3 = *v2;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
    *v2 = v3;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v3 = sub_1007C98A0(0, v3[2] + 1, 1, v3);
      *v2 = v3;
    }
    v6 = v3[2];
    v5 = v3[3];
    if (v6 >= v5 >> 1)
    {
      v3 = sub_1007C98A0((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
      *v2 = v3;
    }
    *(_QWORD *)(v0 + 160) = *(_QWORD *)(v0 + 328);
    *(_QWORD *)(v0 + 168) = &off_101087978;
    *(_QWORD *)(v0 + 136) = v1;
    v3[2] = v6 + 1;
    sub_10000F9FC((__int128 *)(v0 + 136), (uint64_t)&v3[5 * v6 + 4]);
    swift_endAccess(v0 + 200);
    swift_release();
  }
  v7 = type metadata accessor for LocalFindableConnectionMaterialService();
  *(_QWORD *)(v0 + 352) = v7;
  swift_allocObject(v7, 160, 15);
  v8 = (_QWORD *)swift_task_alloc(dword_1011151EC);
  *(_QWORD *)(v0 + 360) = v8;
  *v8 = v0;
  v8[1] = sub_1003E6810;
  return sub_100B1B140();
}

uint64_t sub_1003E6810(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)*v1;
  v2[34] = v1;
  v2[35] = a1;
  swift_task_dealloc(v2[45]);
  return swift_task_switch(sub_1003E6868, 0, 0);
}

uint64_t sub_1003E6868()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 288) + 16);
  swift_beginAccess(v1, v0 + 176, 33, 0);
  v2 = (_QWORD *)*v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_1007C98A0(0, v2[2] + 1, 1, v2);
    *v1 = v2;
  }
  v5 = v2[2];
  v4 = v2[3];
  if (v5 >= v4 >> 1)
  {
    v2 = sub_1007C98A0((_QWORD *)(v4 > 1), v5 + 1, 1, v2);
    *v1 = v2;
  }
  v6 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 352);
  *(_QWORD *)(v0 + 88) = &off_1010AD650;
  *(_QWORD *)(v0 + 56) = v6;
  v2[2] = v5 + 1;
  sub_10000F9FC((__int128 *)(v0 + 56), (uint64_t)&v2[5 * v5 + 4]);
  swift_endAccess(v0 + 176);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003E6970(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  v2[10] = a1;
  v2[11] = a2;
  v3 = type metadata accessor for CloudStorageService();
  v2[12] = v3;
  swift_allocObject(v3, 144, 15);
  v4 = (_QWORD *)swift_task_alloc(dword_1011014AC);
  v2[13] = v4;
  *v4 = v2;
  v4[1] = sub_1003E69D4;
  return sub_1006148E0();
}

uint64_t sub_1003E69D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 104);
  v4 = *v2;
  *(_QWORD *)(v4 + 112) = a1;
  swift_task_dealloc(v3);
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return swift_task_switch(sub_1003E6A48, 0, 0);
}

uint64_t sub_1003E6A48()
{
  uint64_t v0;
  _QWORD **v1;
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = (_QWORD **)(*(_QWORD *)(v0 + 88) + 16);
  swift_beginAccess(v1, v0 + 56, 33, 0);
  v2 = *v1;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
  *v1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_1007C98A0(0, v2[2] + 1, 1, v2);
    *v1 = v2;
  }
  v5 = v2[2];
  v4 = v2[3];
  if (v5 >= v4 >> 1)
  {
    v2 = sub_1007C98A0((_QWORD *)(v4 > 1), v5 + 1, 1, v2);
    *v1 = v2;
  }
  v6 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD **)(v0 + 80);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 48) = &off_1010835A0;
  *(_QWORD *)(v0 + 16) = v6;
  v2[2] = v5 + 1;
  sub_10000F9FC((__int128 *)(v0 + 16), (uint64_t)&v2[5 * v5 + 4]);
  swift_endAccess(v0 + 56);
  *v7 = v6;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1003E6B5C(uint64_t a1)
{
  uint64_t v2;
  id v3;
  __objc2_prot *v5;

  v5 = &OBJC_PROTOCOL___CLFindMyAccessoryManagerDelegate;
  v2 = swift_dynamicCastObjCProtocolConditional(a1, 1, &v5);
  if (v2)
    swift_unknownObjectRetain(a1);
  v3 = objc_msgSend(objc_allocWithZone((Class)CLFindMyAccessoryManager), "initWithDelegate:delegateQueue:", v2, 0);
  swift_unknownObjectRelease(v2);
  return v3;
}

uint64_t sub_1003E6BE0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  v2[12] = a2;
  v3 = type metadata accessor for OwnerCommandService(0);
  v2[13] = v3;
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4 = (_QWORD *)swift_task_alloc(dword_10111F524);
  v2[14] = v4;
  *v4 = v2;
  v4[1] = sub_1003E6C44;
  return sub_100D4F66C();
}

uint64_t sub_1003E6C44(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)*v1;
  v2[10] = v1;
  v2[11] = a1;
  swift_task_dealloc(v2[14]);
  return swift_task_switch(sub_1003E6C9C, 0, 0);
}

uint64_t sub_1003E6C9C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 96) + 16);
  swift_beginAccess(v1, v0 + 56, 33, 0);
  v2 = (_QWORD *)*v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_1007C98A0(0, v2[2] + 1, 1, v2);
    *v1 = v2;
  }
  v5 = v2[2];
  v4 = v2[3];
  if (v5 >= v4 >> 1)
  {
    v2 = sub_1007C98A0((_QWORD *)(v4 > 1), v5 + 1, 1, v2);
    *v1 = v2;
  }
  v6 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 48) = &off_1010BF3A8;
  *(_QWORD *)(v0 + 16) = v6;
  v2[2] = v5 + 1;
  sub_10000F9FC((__int128 *)(v0 + 16), (uint64_t)&v2[5 * v5 + 4]);
  swift_endAccess(v0 + 56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003E6D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3[12] = a2;
  v5 = type metadata accessor for BTFindingService();
  v3[13] = v5;
  swift_allocObject(v5, 224, 15);
  v6 = dword_101117274;
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc(v6);
  v3[14] = v7;
  *v7 = v3;
  v7[1] = sub_1003E6E1C;
  return sub_100B9A34C(a3);
}

uint64_t sub_1003E6E1C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)*v1;
  v2[10] = v1;
  v2[11] = a1;
  swift_task_dealloc(v2[14]);
  return swift_task_switch(sub_1003E6E74, 0, 0);
}

uint64_t sub_1003E6E74()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 96) + 16);
  swift_beginAccess(v1, v0 + 56, 33, 0);
  v2 = (_QWORD *)*v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_1007C98A0(0, v2[2] + 1, 1, v2);
    *v1 = v2;
  }
  v5 = v2[2];
  v4 = v2[3];
  if (v5 >= v4 >> 1)
  {
    v2 = sub_1007C98A0((_QWORD *)(v4 > 1), v5 + 1, 1, v2);
    *v1 = v2;
  }
  v6 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 48) = &off_1010B0860;
  *(_QWORD *)(v0 + 16) = v6;
  v2[2] = v5 + 1;
  sub_10000F9FC((__int128 *)(v0 + 16), (uint64_t)&v2[5 * v5 + 4]);
  swift_endAccess(v0 + 56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003E6F70()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for SearchPartyDaemon()
{
  return objc_opt_self(_TtC12searchpartyd17SearchPartyDaemon);
}

uint64_t sub_1003E6FDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10001A9A8(&qword_101108DF0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_1003E7060()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  id v5;
  NSString v6;
  NSString v7;

  if (qword_1010EA430 != -1)
    swift_once(&qword_1010EA430, sub_100C4DCC8);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7F98);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "This is the first run since reboot", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  UUID.uuidString.getter(v5);
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setObject:forKey:", v6, v7);

  sub_1003DFF04();
}

uint64_t sub_1003E71C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  id v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  _BYTE v11[24];

  if (qword_1010EA3D8 != -1)
    swift_once(&qword_1010EA3D8, sub_100BECD20);
  v6 = *(void **)(a1 + 56);
  swift_beginAccess(&qword_1011B7EE8, v11, 33, 0);
  v7 = v6;
  swift_bridgeObjectRetain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(qword_1011B7EE8);
  v10 = qword_1011B7EE8;
  qword_1011B7EE8 = 0x8000000000000000;
  sub_10010BD38(a2, a3, v7, isUniquelyReferenced_nonNull_native);
  qword_1011B7EE8 = v10;

  swift_bridgeObjectRelease();
  return swift_endAccess(v11);
}

uint64_t sub_1003E72B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;

  v1 = sub_10001A9A8(&qword_1010FAB18);
  v2 = sub_1000193A4((unint64_t *)&unk_1010FAB90, &qword_1010FAB18, byte_100E6EFE8);
  v3._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v1, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 32;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v1, v2);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 32;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v8 = *(_QWORD *)(v0 + 16);
  v7 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain(v7);
  v9._countAndFlagsBits = v8;
  v9._object = v7;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 62;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 60;
}

uint64_t sub_1003E73C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t (*v38)(char *);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t result;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t (*v146)(char *);
  _QWORD v147[5];
  _QWORD v148[4];
  uint64_t v149;
  uint64_t v150;
  _UNKNOWN **v151;

  v138 = a4;
  v137 = a3;
  v136 = a2;
  v7 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v7);
  v124 = (char *)&v123 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = sub_10001A9A8(&qword_1010FAAE0);
  v132 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v130 = (char *)&v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_10001A9A8(&qword_1010FAAE8);
  v133 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v131 = (char *)&v123 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  __chkstk_darwin(v11);
  v128 = (char *)&v123 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for URL(0);
  __chkstk_darwin(v126);
  v127 = (char *)&v123 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v123 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v123 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v123 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = type metadata accessor for BeaconManagerService(0);
  v151 = &off_101091D10;
  v129 = v150;
  v149 = a1;
  v24 = sub_10001A9A8(&qword_1010FAAF0);
  v25 = swift_allocObject(v24, 20, 7);
  *(_DWORD *)(v25 + 16) = 0;
  *(_QWORD *)(a5 + 16) = v25;
  *(_QWORD *)(a5 + 48) = 0;
  v142 = sub_10001F6FC();
  LODWORD(v145) = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v146 = *(uint64_t (**)(char *))(v21 + 104);
  v141 = v20;
  v26 = v146(v23);
  static DispatchQoS.unspecified.getter(v26);
  v148[0] = _swiftEmptyArrayStorage;
  v27 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v139 = v27;
  v28 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v144 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  v140 = v28;
  v143 = (uint64_t *)v14;
  dispatch thunk of SetAlgebra.init<A>(_:)(v148, v28, v144, v14, v27);
  v29 = v16;
  v30 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003DLL, 0x8000000100ED5B00, v19, v16, v23, 0);
  *(_QWORD *)(a5 + 64) = 0;
  *(_QWORD *)(a5 + 72) = 0;
  *(_QWORD *)(a5 + 56) = v30;
  *(_BYTE *)(a5 + 80) = 1;
  *(_QWORD *)(a5 + 88) = 0;
  *(_QWORD *)(a5 + 96) = 0;
  v31 = v145;
  v32 = ((uint64_t (*)(char *, _QWORD, uint64_t))v146)(v23, v145, v20);
  static DispatchQoS.unspecified.getter(v32);
  v148[0] = _swiftEmptyArrayStorage;
  v33 = v28;
  v34 = v144;
  v35 = v139;
  dispatch thunk of SetAlgebra.init<A>(_:)(v148, v33, v144, v143, v139);
  v36 = v19;
  v125 = v23;
  *(_QWORD *)(a5 + 168) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000032, 0x8000000100ED5B40, v19, v29, v23, 0);
  v37 = v141;
  v38 = v146;
  v39 = ((uint64_t (*)(char *, uint64_t, uint64_t))v146)(v23, v31, v141);
  static DispatchQoS.unspecified.getter(v39);
  v148[0] = _swiftEmptyArrayStorage;
  v40 = v140;
  v41 = v34;
  v42 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)(v148, v140, v41, v143, v35);
  v43 = v125;
  *(_QWORD *)(a5 + 176) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003BLL, 0x8000000100ED5B80, v36, v29, v125, 0);
  v44 = v43;
  v45 = v43;
  v46 = v145;
  v47 = v37;
  v48 = (uint64_t (*)(char *, uint64_t, uint64_t))v38;
  v49 = ((uint64_t (*)(char *, _QWORD, uint64_t))v38)(v44, v145, v47);
  static DispatchQoS.unspecified.getter(v49);
  v148[0] = _swiftEmptyArrayStorage;
  v50 = v40;
  v52 = v143;
  v51 = v144;
  dispatch thunk of SetAlgebra.init<A>(_:)(v148, v50, v144, v143, v42);
  *(_QWORD *)(a5 + 184) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002ELL, 0x8000000100ED5BC0, v36, v29, v45, 0);
  *(_QWORD *)(a5 + 192) = sub_1006BA2C4((uint64_t)_swiftEmptyArrayStorage);
  v53 = v46;
  v54 = v141;
  v55 = v48(v45, v53, v141);
  static DispatchQoS.unspecified.getter(v55);
  v148[0] = _swiftEmptyArrayStorage;
  v56 = v140;
  v57 = v51;
  v58 = v139;
  dispatch thunk of SetAlgebra.init<A>(_:)(v148, v140, v57, v52, v139);
  *(_QWORD *)(a5 + 200) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000033, 0x8000000100ED5BF0, v36, v29, v45, 0);
  *(_QWORD *)(a5 + 208) = 0;
  *(_QWORD *)(a5 + 216) = 0;
  *(_QWORD *)(a5 + 224) = 0x4076800000000000;
  *(_OWORD *)(a5 + 232) = 0u;
  *(_OWORD *)(a5 + 248) = 0u;
  *(_QWORD *)(a5 + 264) = _swiftEmptyDictionarySingleton;
  v59 = ((uint64_t (*)(char *, _QWORD, uint64_t))v146)(v45, v145, v54);
  static DispatchQoS.unspecified.getter(v59);
  v148[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(v148, v56, v144, v52, v58);
  v60 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000033, 0x8000000100ED5C30, v36, v29, v45, 0);
  *(_QWORD *)(a5 + 280) = 0;
  *(_QWORD *)(a5 + 288) = 0;
  *(_QWORD *)(a5 + 272) = v60;
  v61 = sub_10001A9A8(&qword_1010FAAF8);
  v62 = *(unsigned int *)(v61 + 48);
  v63 = *(unsigned __int16 *)(v61 + 52);
  v146 = (uint64_t (*)(char *))v61;
  swift_allocObject(v61, v62, v63);
  *(_QWORD *)(a5 + 296) = PassthroughSubject.init()();
  v64 = sub_10001A9A8(&qword_1010FAB00);
  v65 = *(unsigned int *)(v64 + 48);
  v66 = *(unsigned __int16 *)(v64 + 52);
  v145 = v64;
  swift_allocObject(v64, v65, v66);
  v67 = PassthroughSubject.init()();
  *(_QWORD *)(a5 + 312) = v67;
  *(_QWORD *)(a5 + 336) = 0;
  *(_QWORD *)(a5 + 344) = 0;
  *(_QWORD *)(a5 + 328) = 0;
  *(_BYTE *)(a5 + 368) = sub_1003836DC(v67) & 1;
  *(_QWORD *)(a5 + 376) = 0;
  if (qword_1010EA438 != -1)
    swift_once(&qword_1010EA438, sub_100C4E78C);
  sub_10001A9E8(v126, (uint64_t)qword_10111B048);
  v68 = (uint64_t)v127;
  URL.appendingPathComponent(_:)(0xD000000000000013, 0x8000000100ED5C70);
  v69 = type metadata accessor for ShareAttemptTracker(0);
  swift_allocObject(v69, *(unsigned int *)(v69 + 48), *(unsigned __int16 *)(v69 + 52));
  *(_QWORD *)(a5 + 408) = sub_100C4F0D4(v68);
  v144 = sub_10001A9A8(&qword_1010FAB08);
  swift_allocObject(v144, *(unsigned int *)(v144 + 48), *(unsigned __int16 *)(v144 + 52));
  *(_QWORD *)(a5 + 416) = PassthroughSubject.init()();
  *(_QWORD *)(a5 + 432) = 0;
  *(_QWORD *)(a5 + 440) = _swiftEmptyDictionarySingleton;
  *(_OWORD *)(a5 + 448) = xmmword_100E3C830;
  *(_QWORD *)(a5 + 464) = 6;
  v70 = type metadata accessor for WorkItemQueue(0);
  v71 = v128;
  UUID.init()(v70);
  *(_QWORD *)(a5 + 472) = WorkItemQueue.__allocating_init(identifier:)(v71);
  sub_100030784((uint64_t)&v149, a5 + 104);
  v72 = v136;
  v73 = v137;
  *(_QWORD *)(a5 + 144) = v136;
  *(_QWORD *)(a5 + 152) = v73;
  *(_QWORD *)(a5 + 160) = v138;
  v74 = type metadata accessor for SharingScheduler();
  v75 = swift_allocObject(v74, 144, 15);
  swift_retain();
  swift_retain();
  swift_retain();
  v76 = swift_defaultActor_initialize(v75);
  *(_QWORD *)(v75 + 112) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v75 + 120) = 0;
  *(_WORD *)(v75 + 128) = 0;
  UUID.init()(v76);
  *(_QWORD *)(v75 + 136) = WorkItemQueue.__allocating_init(name:identifier:)(0xD000000000000010, 0x8000000100ED5CC0, v71);
  *(_QWORD *)(a5 + 40) = v75;
  v77 = sub_10001A9A8(&qword_1010FAB10);
  swift_allocObject(v77, 248, 7);
  swift_retain();
  sub_10096EFA8(0xD00000000000001BLL, (void *)0x8000000100EC7AF0, 6, 60.0, 30.0);
  *(_QWORD *)(a5 + 24) = v78;
  v79 = sub_10001A9A8(&qword_1010FAB18);
  swift_allocObject(v79, 176, 7);
  sub_1003E86AC(0xD000000000000021, (void *)0x8000000100ED5C90);
  *(_QWORD *)(a5 + 32) = v80;
  v148[0] = sub_1003838F8();
  v81 = sub_10001A9A8(&qword_1010FAB20);
  swift_allocObject(v81, *(unsigned int *)(v81 + 48), *(unsigned __int16 *)(v81 + 52));
  v82 = CurrentValueSubject.init(_:)(v148);
  *(_QWORD *)(a5 + 384) = v82;
  v83 = swift_retain();
  *(_QWORD *)(a5 + 392) = CurrentValueSubject.eraseToAnyCurrentValuePublisher()(v83);
  v84 = type metadata accessor for BeaconNearOwnerService(0);
  swift_allocObject(v84, *(unsigned int *)(v84 + 48), *(unsigned __int16 *)(v84 + 52));
  v85 = swift_retain();
  *(_QWORD *)(a5 + 360) = sub_100262A24(v85);
  swift_retain();
  sub_1002638C8((uint64_t)sub_100383904, 0);
  swift_release();
  sub_100030784((uint64_t)&v149, (uint64_t)v148);
  v86 = *(_QWORD *)(a5 + 360);
  v87 = sub_10009F5D0((uint64_t)v148, v148[3]);
  v143 = &v123;
  __chkstk_darwin(v87);
  v89 = (uint64_t *)((char *)&v123 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v90 + 16))(v89);
  v91 = *v89;
  v92 = v129;
  v147[3] = v129;
  v147[4] = &off_101091D10;
  v147[0] = v91;
  v93 = type metadata accessor for IntentHandler();
  v94 = (_QWORD *)swift_allocObject(v93, 112, 7);
  v95 = sub_10009F5D0((uint64_t)v147, v92);
  __chkstk_darwin(v95);
  v97 = (uint64_t *)((char *)&v123 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v98 + 16))(v97);
  v99 = *v97;
  swift_retain();
  swift_retain();
  v100 = sub_1003E8B48(v99, v72, v86, v94);
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v147);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v148);
  *(_QWORD *)(a5 + 352) = v100;
  v148[0] = v82;
  v101 = sub_1000193A4(&qword_1010FAB28, &qword_1010FAB20, (const char *)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v102 = v130;
  Publisher.dropFirst(_:)(1, v81, v101);
  v103 = sub_1000193A4(&qword_1010FAB30, &qword_1010FAAE0, (const char *)&protocol conformance descriptor for Publishers.Drop<A>);
  v104 = sub_1003E8DB4();
  v105 = v131;
  v106 = v134;
  Publisher<>.removeDuplicates()(v134, v103, v104);
  (*(void (**)(char *, uint64_t))(v132 + 8))(v102, v106);
  v107 = sub_1000193A4((unint64_t *)&unk_1010FAB50, &qword_1010FAAE8, (const char *)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v108 = v135;
  v109 = Publisher.eraseToAnyPublisher()(v135, v107);
  (*(void (**)(char *, uint64_t))(v133 + 8))(v105, v108);
  *(_QWORD *)(a5 + 400) = v109;
  v148[0] = *(_QWORD *)(a5 + 312);
  v110 = sub_1000193A4(&qword_1010EEDC0, &qword_1010FAB00, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  *(_QWORD *)(a5 + 320) = Publisher.eraseToAnyPublisher()(v145, v110);
  v148[0] = *(_QWORD *)(a5 + 296);
  v111 = sub_1000193A4(&qword_1010FAB60, &qword_1010FAAF8, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  *(_QWORD *)(a5 + 304) = Publisher.eraseToAnyPublisher()(v146, v111);
  v148[0] = *(_QWORD *)(a5 + 416);
  v112 = sub_1000193A4(&qword_1010FAB68, &qword_1010FAB08, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  result = Publisher.eraseToAnyPublisher()(v144, v112);
  *(_QWORD *)(a5 + 424) = result;
  v114 = *(_QWORD *)(v72 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_instructionEventCoalescer);
  if (v114)
  {
    v148[0] = *(_QWORD *)(v114 + 64);
    v115 = swift_allocObject(&unk_101075078, 24, 7);
    swift_weakInit(v115 + 16, a5);
    swift_retain();
    v116 = sub_10001A9A8(&qword_1010FAB70);
    v117 = sub_1000193A4(&qword_1010FAB78, &qword_1010FAB70, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v118 = Publisher<>.sink(receiveValue:)(sub_1003E8E5C, v115, v116, v117);
    swift_release();
    swift_release();
    *(_QWORD *)(a5 + 376) = v118;
    swift_release();
    v148[0] = 2;
    v119 = sub_10001A9A8(&qword_1010FAB80);
    swift_allocObject(v119, *(unsigned int *)(v119 + 48), *(unsigned __int16 *)(v119 + 52));
    swift_retain();
    *(_QWORD *)(a5 + 432) = AsynchronousCache.init(timeout:timeoutError:fetchBlock:)(v148, sub_1003E8E64, a5, 35.0);
    swift_release();
    v120 = type metadata accessor for TaskPriority(0);
    v121 = (uint64_t)v124;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 56))(v124, 1, 1, v120);
    v122 = (_QWORD *)swift_allocObject(&unk_1010750A0, 48, 7);
    v122[2] = 0;
    v122[3] = 0;
    v122[4] = v75;
    v122[5] = a5;
    swift_retain();
    swift_retain();
    sub_100691AC0(v121, (uint64_t)&unk_1010FAB88, (uint64_t)v122);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v149);
    return a5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_1003E8264(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  __int128 v28;
  ValueMetadata *v29;
  _UNKNOWN **v30;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SubmitEndpoint(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (uint64_t *)((char *)&v27 - v9);
  v29 = &type metadata for FindMyNetworkPublishDateProviderFactory;
  v30 = &off_101056470;
  swift_defaultActor_initialize(a1);
  a1[14] = 0xD00000000000001DLL;
  a1[15] = 0x8000000100EC5EF0;
  v11 = type metadata accessor for DeviceIdentityUtility(0);
  v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  swift_defaultActor_initialize(v12);
  v13 = v12 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  *(_QWORD *)(v12 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(_QWORD *)(v12 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v12 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 1;
  a1[16] = v12;
  v15 = type metadata accessor for AnonymousCrowdSourceNetworkURLComponents();
  swift_allocObject(v15, 56, 7);
  *v10 = sub_10015DA08();
  v16 = (char *)v10 + *(int *)(v5 + 20);
  v17 = enum case for FMNAccountType.none(_:);
  v18 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v16, v17, v18);
  v19 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v4, 1, 1, v20);
  v21 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v4);
  v22 = type metadata accessor for ServerInteractionController(0);
  v23 = swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  sub_1003E8F34((uint64_t)v10, (uint64_t)v8);
  v24 = sub_10041D848((uint64_t)v8, v21, v23);
  sub_1003E8F78((uint64_t)v10);
  a1[17] = v24;
  v25 = sub_10001A9A8(&qword_1010EE320);
  a1[18] = AsyncKeyedThrottle.__allocating_init(throttleInterval:)(v25, 10.0);
  sub_10000F9FC(&v28, (uint64_t)(a1 + 19));
  return a1;
}

uint64_t sub_1003E84F8()
{
  return sub_1003E8FD4(32);
}

uint64_t sub_1003E8500(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1010FAA5C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100004A74;
  return sub_1003E62E4(a1, v5, v4);
}

uint64_t sub_1003E8564(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1010FAA6C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004C28;
  return sub_1003E6970(a1, v1);
}

uint64_t sub_1003E85B8(uint64_t a1)
{
  uint64_t v1;

  return sub_100794478(a1, v1);
}

uint64_t sub_1003E85C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1010FAA9C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004A74;
  return sub_1003E6BE0(a1, v1);
}

uint64_t sub_1003E8614()
{
  return sub_1003E8FD4(32);
}

uint64_t sub_1003E861C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1010FAAB4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100004A74;
  return sub_1003E6D98(a1, v5, v4);
}

uint64_t sub_1003E8680()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003E86A4(uint64_t *a1)
{
  uint64_t v1;

  return sub_100505208(a1, v1);
}

void sub_1003E86AC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSString v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;

  v3 = v2;
  v42 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v42);
  v41 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010FAAF0);
  v15 = swift_allocObject(v14, 20, 7);
  *(_DWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v2 + 32) = v15;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 64) = sub_1006BA458((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v2 + 72) = sub_1006B9B78((uint64_t)_swiftEmptyArrayStorage);
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  v40[1] = sub_10001F6FC();
  v45 = 0;
  v46 = 0xE000000000000000;
  swift_bridgeObjectRetain(a2);
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  v45 = (_QWORD *)0xD000000000000030;
  v46 = 0x8000000100ED5D10;
  v16._countAndFlagsBits = a1;
  v16._object = a2;
  String.append(_:)(v16);
  v17 = v45;
  v40[0] = v46;
  v18 = v13;
  v19 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  v20 = v9;
  static DispatchQoS.unspecified.getter(v19);
  v45 = _swiftEmptyArrayStorage;
  v21 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v23 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  v24 = v41;
  v25 = v22;
  v26 = a1;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v25, v23, v42, v21);
  *(_QWORD *)(v2 + 48) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v17, v40[0], v20, v24, v18, 0);
  v27 = objc_allocWithZone((Class)IDSService);
  swift_bridgeObjectRetain(a2);
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v29 = objc_msgSend(v27, "initWithService:", v28);

  if (v29)
  {
    *(_QWORD *)(v3 + 56) = v29;
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v30 = type metadata accessor for Logger(0);
    sub_10001A9E8(v30, (uint64_t)qword_1011B7EC8);
    v31 = swift_retain();
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.info.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = (_QWORD *)swift_slowAlloc(32, -1);
      v45 = v35;
      *(_DWORD *)v34 = 136446210;
      v36 = sub_1003E72B4();
      v43 = sub_100016940(v36, v37, (uint64_t *)&v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v34 + 4, v34 + 12);
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Created %{public}s", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

      v38 = swift_release();
    }
    if (qword_1010EA3D0 != -1)
      v38 = swift_once(&qword_1010EA3D0, sub_100BECCEC);
    __chkstk_darwin(v38);
    v40[-4] = v3;
    v40[-3] = v26;
    v40[-2] = a2;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1003E8F18, &v40[-6], v39, &type metadata for () + 1, &type metadata for () + 1);
  }
  else
  {
    __break(1u);
  }
}

_QWORD *sub_1003E8B48(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD v28[5];

  v26 = a3;
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = type metadata accessor for BeaconManagerService(0);
  v28[4] = &off_101091D10;
  v28[0] = a1;
  a4[3] = 0;
  swift_unknownObjectWeakInit(a4 + 2, 0);
  sub_10001F6FC();
  v17 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v13);
  static DispatchQoS.unspecified.getter(v17);
  v27 = _swiftEmptyArrayStorage;
  v18 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v20 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v19, v20, v7, v18);
  a4[9] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002BLL, 0x8000000100ED5CE0, v12, v9, v16, 0);
  sub_100030784((uint64_t)v28, (uint64_t)(a4 + 4));
  v21 = v26;
  a4[10] = a2;
  a4[11] = v21;
  swift_retain();
  swift_retain();
  a4[12] = sub_1006BA18C((uint64_t)_swiftEmptyArrayStorage);
  v22 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
  v23 = CurrentLocationMonitor.init(mode:desiredAccuracy:)(0, *(uint64_t *)&kCLLocationAccuracyNearestTenMeters, 0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  a4[13] = v23;
  return a4;
}

unint64_t sub_1003E8DB4()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1010FAB38;
  if (!qword_1010FAB38)
  {
    v1 = sub_10001F784(&qword_1010FAB40);
    v2 = sub_1003E8E18();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FAB38);
  }
  return result;
}

unint64_t sub_1003E8E18()
{
  unint64_t result;

  result = qword_1010FAB48;
  if (!qword_1010FAB48)
  {
    result = swift_getWitnessTable(asc_100E5A424, &type metadata for MessagingDevice);
    atomic_store(result, (unint64_t *)&qword_1010FAB48);
  }
  return result;
}

uint64_t sub_1003E8E5C(uint64_t a1)
{
  uint64_t v1;

  return sub_100383978(a1, v1);
}

uint64_t sub_1003E8E64(uint64_t a1)
{
  return sub_1003839D4(a1);
}

uint64_t sub_1003E8E6C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1003E8EA0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1010FA564);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004A74;
  return sub_100383DBC(a1, v4, v5, v7, v6);
}

uint64_t sub_1003E8F18()
{
  uint64_t *v0;

  return sub_1003E71C8(v0[2], v0[3], v0[4]);
}

uint64_t sub_1003E8F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SubmitEndpoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003E8F78(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SubmitEndpoint(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003E8FB4(uint64_t a1)
{
  uint64_t v1;

  return sub_1003E06E4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1003E8FCC()
{
  return sub_1003E8FD4(40);
}

uint64_t sub_1003E8FD4(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 24));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1003E900C()
{
  uint64_t *v0;

  return sub_1003E08F4(v0[2], v0[3], v0[4]);
}

uint64_t sub_1003E9018()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1003E9054(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_1010FABB4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100004A74;
  return sub_1003E1AC0(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1003E90E0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1003E910C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t *v4;

  v2 = swift_task_alloc(dword_1010FABC4);
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004A74;
  *(_OWORD *)(v2 + 32) = v3;
  v4 = (uint64_t *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  *(_QWORD *)(v2 + 48) = v4;
  *v4 = v2;
  v4[1] = (uint64_t)sub_1003E265C;
  return static Task<>.sleep(nanoseconds:)(10000000000);
}

uint64_t sub_1003E9188()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003E91AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1003E91D0()
{
  uint64_t v0;

  sub_1003E28EC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1003E91D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010ECF78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003E9220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for SystemVersionNumber(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);

  return swift_deallocObject(v0, v8 + 8, v6);
}

uint64_t sub_1003E92D0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(type metadata accessor for SystemVersionNumber(0) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 40) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = (v7 + v5 + v6) & ~v5;
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v6;
  v13 = (uint64_t)v1 + v8;
  v14 = *(_QWORD *)((char *)v1 + ((v7 + v8 + 7) & 0xFFFFFFFFFFFFF8));
  v15 = (_QWORD *)swift_task_alloc(dword_1010F82F4);
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = sub_100004A74;
  return sub_1003454AC(a1, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_1003E939C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1010F82FC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004C28;
  return sub_1003456D8(a1, v4, v5, v7, v6);
}

uint64_t sub_1003E9418()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1003E944C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1010F8304);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004A74;
  return sub_1003452DC(a1, v4, v5, v7, v6);
}

uint64_t sub_1003E94DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6E68);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B6E68);
  if (qword_1010E9B00 != -1)
    swift_once(&qword_1010E9B00, sub_1002AABA4);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B6C90);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1003E956C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 112));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for CircleTrustMessageRouter()
{
  return objc_opt_self(_TtC12searchpartyd24CircleTrustMessageRouter);
}

unint64_t sub_1003E95B4()
{
  unint64_t result;

  result = qword_1010FACD8;
  if (!qword_1010FACD8)
  {
    result = swift_getWitnessTable(aM_13, &type metadata for ItemSharingCrossAccountMessageType);
    atomic_store(result, (unint64_t *)&qword_1010FACD8);
  }
  return result;
}

uint64_t sub_1003E95F8(char a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v12 = *v6;
  v26 = a2;
  v27 = v12;
  v13 = type metadata accessor for MessagingMessageContext(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v17);
  v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  sub_1003EA8D8(a6, (uint64_t)v16);
  v21 = *(unsigned __int8 *)(v14 + 80);
  v22 = (v21 + 80) & ~v21;
  v23 = (v15 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_101075278, v23 + 8, v21 | 7);
  *(_QWORD *)(v24 + 16) = 0;
  *(_QWORD *)(v24 + 24) = 0;
  *(_BYTE *)(v24 + 32) = a1;
  *(_QWORD *)(v24 + 40) = v26;
  *(_QWORD *)(v24 + 48) = a3;
  *(_QWORD *)(v24 + 56) = a4;
  *(_QWORD *)(v24 + 64) = v6;
  *(_QWORD *)(v24 + 72) = a5;
  sub_1002EAACC((uint64_t)v16, v24 + v22);
  *(_QWORD *)(v24 + v23) = v27;
  sub_10001BBBC(a3, a4);
  swift_retain();
  swift_bridgeObjectRetain(a5);
  sub_100626BC4((uint64_t)v19, (uint64_t)&unk_1010FAD08, v24);
  return swift_release();
}

uint64_t sub_1003E9780(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  *(_QWORD *)(v8 + 40) = a8;
  *(_QWORD *)(v8 + 48) = v16;
  *(_QWORD *)(v8 + 24) = a6;
  *(_QWORD *)(v8 + 32) = a7;
  *(_QWORD *)(v8 + 16) = a5;
  *(_BYTE *)(v8 + 268) = a4;
  v9 = type metadata accessor for CircleTrustRequestEnvelopeV1(0);
  *(_QWORD *)(v8 + 56) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CircleTrustDeclineEnvelopeV1(0);
  *(_QWORD *)(v8 + 64) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CircleTrustAcceptEnvelopeV1(0);
  *(_QWORD *)(v8 + 72) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  *(_QWORD *)(v8 + 80) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 88) = v13;
  *(_QWORD *)(v8 + 96) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CircleTrustAckEnvelopeV1(0);
  *(_QWORD *)(v8 + 104) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003E9870, 0, 0);
}

void sub_1003E9870()
{
  __asm { BR              X10 }
}

void sub_1003E98B4()
{
  _DWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (qword_1010E9BC8 != -1)
    swift_once(&qword_1010E9BC8, sub_1003E94DC);
  v4 = v2[3];
  v3 = v2[4];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B6E68);
  v6 = sub_10001BBBC(v4, v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v11 = v2[3];
  v10 = v2[4];
  if (v9)
  {
    v12 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v12 = 67109120;
    *v0 = 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0, v1, v12 + 4, v12 + 8);
    sub_10001BC14(v11, v10);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Ignoring non circleTrust Message: %d", v12, 8u);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    sub_10001BC14(v2[3], v2[4]);
  }

  v13 = v2[12];
  v15 = v2[8];
  v14 = v2[9];
  v16 = v2[7];
  swift_task_dealloc(v2[13]);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  __asm { BR              X0 }
}

uint64_t sub_1003E9AD8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  v1 = *(_QWORD **)v0;
  v8 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  v3 = v1[12];
  v2 = v1[13];
  v5 = v1[8];
  v4 = v1[9];
  v6 = v1[7];
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return ((uint64_t (*)(void))v8[1])();
}

uint64_t sub_1003E9B5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1 == 1)
  {
    sub_100C2BBEC(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 104));
    v3 = *(_QWORD *)(v0 + 96);
    v2 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 88);
    v10 = *(_QWORD *)(v0 + 40);
    v11 = *(_QWORD *)(v0 + 48);
    v12 = *(_QWORD *)(v10 + 112);
    *(_QWORD *)(v0 + 120) = v12;
    v13 = *(_QWORD *)(v10 + 120);
    ObjectType = swift_getObjectType(v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v3, v2, v8);
    v15 = v11 + *(int *)(type metadata accessor for MessagingMessageContext(0) + 24);
    *(_BYTE *)(v0 + 269) = *(_BYTE *)v15;
    *(_QWORD *)(v0 + 128) = *(_QWORD *)(v15 + 8);
    *(_QWORD *)(v0 + 136) = *(_QWORD *)(v15 + 16);
    v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, *(_QWORD *)(v13 + 8));
    return swift_task_switch(sub_1003E9CEC, v16, v17);
  }
  else
  {
    sub_1003EAB38(2, v1, *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v4 = *(_QWORD *)(v0 + 96);
    v6 = *(_QWORD *)(v0 + 64);
    v5 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003E9CEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 40);
  sub_1009767F8(v1, *(_BYTE *)(v0 + 269), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1003E9D60, v4, 0);
}

uint64_t sub_1003E9D60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000126B0(*(_QWORD *)(v0 + 104), type metadata accessor for CircleTrustAckEnvelopeV1);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003E9DD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1 == 1)
  {
    sub_100C2BEA4(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 72));
    v7 = *(_QWORD *)(v0 + 88);
    v6 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 80);
    v10 = *(_QWORD *)(v0 + 40);
    v11 = *(_QWORD *)(v0 + 48);
    v12 = *(_QWORD *)(v10 + 112);
    *(_QWORD *)(v0 + 144) = v12;
    v13 = *(_QWORD *)(v10 + 120);
    ObjectType = swift_getObjectType(v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
    v15 = v11 + *(int *)(type metadata accessor for MessagingMessageContext(0) + 24);
    *(_BYTE *)(v0 + 270) = *(_BYTE *)v15;
    *(_QWORD *)(v0 + 152) = *(_QWORD *)(v15 + 8);
    *(_QWORD *)(v0 + 160) = *(_QWORD *)(v15 + 16);
    v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, *(_QWORD *)(v13 + 8));
    return swift_task_switch(sub_1003E9F64, v16, v17);
  }
  else
  {
    sub_1003EAB38(3, v1, *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v2 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003E9F64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 40);
  sub_100979158(v1, *(unsigned __int8 *)(v0 + 270), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1003E9FD8, v4, 0);
}

uint64_t sub_1003E9FD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000126B0(*(_QWORD *)(v0 + 72), type metadata accessor for CircleTrustAcceptEnvelopeV1);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003EA04C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1 == 1)
  {
    sub_100C2C15C(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 64));
    v2 = *(_QWORD *)(v0 + 64);
    v8 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 80);
    v10 = *(_QWORD *)(v0 + 40);
    v11 = *(_QWORD *)(v0 + 48);
    v12 = *(_QWORD *)(v10 + 112);
    *(_QWORD *)(v0 + 168) = v12;
    v13 = *(_QWORD *)(v10 + 120);
    ObjectType = swift_getObjectType(v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v2, v9);
    v15 = v11 + *(int *)(type metadata accessor for MessagingMessageContext(0) + 24);
    *(_BYTE *)(v0 + 271) = *(_BYTE *)v15;
    *(_QWORD *)(v0 + 176) = *(_QWORD *)(v15 + 8);
    *(_QWORD *)(v0 + 184) = *(_QWORD *)(v15 + 16);
    v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, *(_QWORD *)(v13 + 8));
    return swift_task_switch(sub_1003EA1E0, v16, v17);
  }
  else
  {
    sub_1003EAB38(4, v1, *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v3 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 64);
    v4 = *(_QWORD *)(v0 + 72);
    v6 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003EA1E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 40);
  sub_10097BDA4(v1, *(unsigned __int8 *)(v0 + 271), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1003EA254, v4, 0);
}

uint64_t sub_1003EA254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000126B0(*(_QWORD *)(v0 + 64), type metadata accessor for CircleTrustDeclineEnvelopeV1);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003EA2C8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  if (v3 == 1)
  {
    v4 = sub_100C2C414(5, 1, v1, v2);
    *(_QWORD *)(v0 + 192) = v4;
    v9 = v4;
    v10 = *(_QWORD *)(v0 + 48);
    v11 = v10 + *(int *)(type metadata accessor for MessagingMessageContext(0) + 24);
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(_QWORD *)(v11 + 16);
    v14 = *(_BYTE *)v11;
    v15 = (_QWORD *)swift_task_alloc(dword_10110DEB4);
    *(_QWORD *)(v0 + 200) = v15;
    *v15 = v0;
    v15[1] = sub_1003EA404;
    return sub_10097CC98(v9, v14, v12, v13);
  }
  else
  {
    sub_1003EAB38(5, v3, v1, v2);
    v5 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 64);
    v6 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003EA404()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = (_QWORD *)*v0;
  v2 = *(_QWORD *)(*v0 + 192);
  v9 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 200));
  swift_bridgeObjectRelease(v2);
  v4 = v1[12];
  v3 = v1[13];
  v6 = v1[8];
  v5 = v1[9];
  v7 = v1[7];
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t sub_1003EA48C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  if (v3 == 1)
  {
    *(_QWORD *)(v0 + 208) = sub_100C2C62C(6, 1, v1, v2);
    v8 = *(_QWORD *)(v0 + 40);
    v9 = *(_QWORD *)(v0 + 48);
    v10 = *(_QWORD *)(v8 + 112);
    *(_QWORD *)(v0 + 216) = v10;
    v11 = *(_QWORD *)(v8 + 120);
    ObjectType = swift_getObjectType(v10);
    v13 = v9 + *(int *)(type metadata accessor for MessagingMessageContext(0) + 24);
    *(_BYTE *)(v0 + 272) = *(_BYTE *)v13;
    *(_QWORD *)(v0 + 224) = *(_QWORD *)(v13 + 8);
    *(_QWORD *)(v0 + 232) = *(_QWORD *)(v13 + 16);
    v14 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, *(_QWORD *)(v11 + 8));
    return swift_task_switch(sub_1003EA5DC, v14, v15);
  }
  else
  {
    sub_1003EAB38(6, v3, v1, v2);
    v4 = *(_QWORD *)(v0 + 96);
    v6 = *(_QWORD *)(v0 + 64);
    v5 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003EA5DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10097EDB4(*(_QWORD *)(v0 + 208));
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003EA65C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1 == 1)
  {
    sub_100C2C844(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 56));
    v7 = *(_QWORD *)(v0 + 88);
    v6 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 80);
    v10 = *(_QWORD *)(v0 + 48);
    v9 = *(_QWORD *)(v0 + 56);
    v11 = *(_QWORD *)(v0 + 40);
    v12 = *(_QWORD *)(v11 + 112);
    *(_QWORD *)(v0 + 240) = v12;
    v13 = *(_QWORD *)(v11 + 120);
    ObjectType = swift_getObjectType(v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
    v15 = v10 + *(int *)(type metadata accessor for MessagingMessageContext(0) + 24);
    *(_BYTE *)(v0 + 273) = *(_BYTE *)v15;
    *(_QWORD *)(v0 + 248) = *(_QWORD *)(v15 + 8);
    *(_QWORD *)(v0 + 256) = *(_QWORD *)(v15 + 16);
    v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, *(_QWORD *)(v13 + 8));
    return swift_task_switch(sub_1003EA7F0, v16, v17);
  }
  else
  {
    sub_1003EAB38(7, v1, *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v2 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003EA7F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 40);
  sub_10097F8E0(v1, *(unsigned __int8 *)(v0 + 273), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1003EA864, v4, 0);
}

uint64_t sub_1003EA864()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000126B0(*(_QWORD *)(v0 + 56), type metadata accessor for CircleTrustRequestEnvelopeV1);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003EA8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MessagingMessageContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003EA91C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void (*v10)(char *, uint64_t);
  char *v11;
  uint64_t v12;

  v1 = type metadata accessor for MessagingMessageContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 80) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  sub_10001BC14(*((_QWORD *)v0 + 6), *((_QWORD *)v0 + 7));
  swift_release();
  swift_bridgeObjectRelease();
  v6 = &v0[v4];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(&v0[v4], 1, v7);
  v10 = *(void (**)(char *, uint64_t))(v8 + 8);
  if (!v9)
    v10(&v0[v4], v7);
  v10(&v6[*(int *)(v1 + 20)], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = &v6[*(int *)(v1 + 44)];
  v12 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1003EAA5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v11;

  type metadata accessor for MessagingMessageContext(0);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 48);
  v11 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 56);
  v7 = *(_QWORD *)(v1 + 64);
  v8 = *(_BYTE *)(v1 + 32);
  v9 = (_QWORD *)swift_task_alloc(dword_1010FAD04);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004C28;
  return sub_1003E9780(a1, v3, v4, v8, v11, v5, v6, v7);
}

void sub_1003EAB38(char a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *oslog;
  uint64_t v16;
  uint64_t v17;

  if (qword_1010E9BC8 != -1)
    swift_once(&qword_1010E9BC8, sub_1003E94DC);
  v8 = type metadata accessor for Logger(0);
  sub_10001A9E8(v8, (uint64_t)qword_1011B6E68);
  sub_10001BBBC(a3, a4);
  sub_10001BBBC(a3, a4);
  sub_10001BBBC(a3, a4);
  v9 = sub_10001BBBC(a3, a4);
  oslog = Logger.logObject.getter(v9);
  v10 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(32, -1);
    v17 = v12;
    *(_DWORD *)v11 = 136446466;
    LOBYTE(v16) = a1;
    v13 = String.init<A>(describing:)(&v16, &type metadata for ItemSharingCrossAccountMessageType);
    v16 = sub_100016940(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease();
    sub_10001BC14(a3, a4);
    sub_10001BC14(a3, a4);
    *(_WORD *)(v11 + 12) = 2048;
    sub_10001BC14(a3, a4);
    v16 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v11 + 14, v11 + 22);
    sub_10001BC14(a3, a4);
    _os_log_impl((void *)&_mh_execute_header, oslog, v10, "Unsupported version of %{public}s: %ld", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {
    sub_10001BC14(a3, a4);
    sub_10001BC14(a3, a4);
    sub_10001BC14(a3, a4);
    sub_10001BC14(a3, a4);

  }
}

uint64_t sub_1003EAD9C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v6 + 40) = a5;
  *(_QWORD *)(v6 + 48) = v5;
  *(_QWORD *)(v6 + 24) = a3;
  *(_QWORD *)(v6 + 32) = a4;
  *(_QWORD *)(v6 + 16) = a2;
  *(_BYTE *)(v6 + 264) = a1;
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 56) = swift_task_alloc(v7);
  *(_QWORD *)(v6 + 64) = swift_task_alloc(v7);
  v8 = type metadata accessor for UUID(0);
  *(_QWORD *)(v6 + 72) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 80) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v10);
  *(_QWORD *)(v6 + 96) = swift_task_alloc(v10);
  v11 = type metadata accessor for CircleTrustEnvelopeV1(0);
  *(_QWORD *)(v6 + 104) = v11;
  *(_QWORD *)(v6 + 112) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003EAE70, v5, 0);
}

uint64_t sub_1003EAE70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ObjectType;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1 == 1)
  {
    sub_100C2B934(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 112));
    v2 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)(v0 + 96);
    v8 = *(int **)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 80);
    v10 = *(_QWORD *)(v0 + 88);
    v12 = *(_QWORD *)(v0 + 64);
    v11 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 48);
    v14 = *(_QWORD *)(v0 + 56);
    v15 = *(_QWORD *)(v0 + 40);
    v16 = *(_QWORD *)(v13 + 112);
    *(_QWORD *)(v0 + 120) = v16;
    v37 = *(_QWORD *)(v13 + 120);
    ObjectType = swift_getObjectType(v16);
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    v17(v7, v2, v11);
    v17(v10, v2 + v8[6], v11);
    sub_1002A380C(v2 + v8[7], v12);
    sub_1002A380C(v2 + v8[5], v14);
    v18 = (_QWORD *)(v2 + v8[8]);
    *(_QWORD *)(v0 + 128) = *v18;
    v19 = v18[1];
    *(_QWORD *)(v0 + 136) = v19;
    v20 = (_QWORD *)(v2 + v8[9]);
    *(_QWORD *)(v0 + 144) = *v20;
    v21 = v20[1];
    *(_QWORD *)(v0 + 152) = v21;
    *(_DWORD *)(v0 + 256) = *(_DWORD *)(v2 + v8[10]);
    *(_DWORD *)(v0 + 260) = *(_DWORD *)(v2 + v8[11]);
    v22 = (_QWORD *)(v2 + v8[12]);
    *(_QWORD *)(v0 + 160) = *v22;
    v23 = v22[1];
    *(_QWORD *)(v0 + 168) = v23;
    *(_QWORD *)(v0 + 176) = *(_QWORD *)(v2 + v8[13]);
    v24 = (_QWORD *)(v2 + v8[14]);
    *(_QWORD *)(v0 + 184) = *v24;
    v25 = v24[1];
    *(_QWORD *)(v0 + 192) = v25;
    v26 = type metadata accessor for MessagingMessageContext(0);
    v27 = (_QWORD *)(v15 + *(int *)(v26 + 48));
    *(_QWORD *)(v0 + 200) = *v27;
    *(_QWORD *)(v0 + 208) = v27[1];
    v28 = v15 + *(int *)(v26 + 24);
    *(_BYTE *)(v0 + 265) = *(_BYTE *)v28;
    *(_QWORD *)(v0 + 216) = *(_QWORD *)(v28 + 8);
    *(_QWORD *)(v0 + 224) = *(_QWORD *)(v28 + 16);
    v29 = *(_QWORD *)(v2 + v8[16]);
    *(_QWORD *)(v0 + 232) = v29;
    *(_BYTE *)(v0 + 266) = *(_BYTE *)(v2 + v8[17]);
    v30 = (uint64_t *)(v2 + v8[15]);
    v31 = *v30;
    *(_QWORD *)(v0 + 240) = *v30;
    v32 = v30[1];
    *(_QWORD *)(v0 + 248) = v32;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v23);
    sub_10001BBBC(v31, v32);
    v33 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, *(_QWORD *)(v37 + 8));
    return swift_task_switch(sub_1003EB140, v33, v34);
  }
  else
  {
    sub_1003EAB38(*(_BYTE *)(v0 + 264), v1, *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v3 = *(_QWORD *)(v0 + 88);
    v4 = *(_QWORD *)(v0 + 96);
    v6 = *(_QWORD *)(v0 + 56);
    v5 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(v4);
    swift_task_dealloc(v3);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003EB140()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void (*v4)(unint64_t, uint64_t);
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 48);
  sub_1009737AC(v8, v7, v6, v3, *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_DWORD *)(v0 + 256), *(_DWORD *)(v0 + 260), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208), *(_BYTE *)(v0 + 265), *(_QWORD *)(v0 + 216),
    *(_QWORD *)(v0 + 224),
    *(_QWORD *)(v0 + 232),
    *(_BYTE *)(v0 + 266),
    v1,
    v2);
  sub_10001BC14(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001C0844(v3);
  sub_1001C0844(v6);
  v4 = *(void (**)(unint64_t, uint64_t))(v9 + 8);
  v4(v7, v10);
  v4(v8, v10);
  return swift_task_switch(sub_1003EB28C, v11, 0);
}

uint64_t sub_1003EB28C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000126B0(*(_QWORD *)(v0 + 112), type metadata accessor for CircleTrustEnvelopeV1);
  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t destroy for PoshAccessoryNonOwnerCommand(uint64_t a1)
{
  return sub_100243B24(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s12searchpartyd28PoshAccessoryNonOwnerCommandOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100243B84(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PoshAccessoryNonOwnerCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100243B84(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100243B24(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PoshAccessoryNonOwnerCommand(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100243B24(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PoshAccessoryNonOwnerCommand(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF6 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 246);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 0xA)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PoshAccessoryNonOwnerCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 246;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1003EB480(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 9u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 10);
}

uint64_t sub_1003EB498(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xA)
  {
    *(_QWORD *)result = a2 - 10;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 10;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PoshAccessoryNonOwnerCommand()
{
  return &type metadata for PoshAccessoryNonOwnerCommand;
}

ValueMetadata *sub_1003EB4C0(char a1)
{
  ValueMetadata *v1;

  switch(a1)
  {
    case 1:
      v1 = &type metadata for AccessoryProductDataResponsePayload;
      sub_1003ECBD4();
      break;
    case 3:
      v1 = &type metadata for AccessoryManufacturerNameResponsePayload;
      sub_1003ECB90();
      break;
    case 5:
      v1 = &type metadata for AccessoryModelNameResponsePayload;
      sub_1003ECB4C();
      break;
    case 7:
      v1 = &type metadata for AccessoryCategoryResponsePayload;
      sub_1003ECB08();
      break;
    case 9:
      v1 = &type metadata for AccessoryProtocolVersionResponsePayload;
      sub_1003ECAC4();
      break;
    case 11:
      v1 = &type metadata for AccessoryCapabilityResponsePayload;
      sub_1003ECA80();
      break;
    case 13:
      v1 = &type metadata for AccessoryNetworkIDResponsePayload;
      sub_1003ECA3C();
      break;
    case 15:
      v1 = &type metadata for AccessoryFirmwareVersionResponsePayload;
      sub_1003EC9F8();
      break;
    case 17:
      v1 = &type metadata for AccessoryBatteryTypeResponsePayload;
      sub_1003EC9B4();
      break;
    case 19:
      v1 = &type metadata for AccessoryBatteryLevelResponsePayload;
      sub_1003EC970();
      break;
    default:
      v1 = &type metadata for AccessoryGenericPayload;
      sub_10005A334();
      break;
  }
  return v1;
}

uint64_t sub_1003EB5B4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003EB5D8 + 4 * byte_100E3C9A3[a3]))(1);
}

uint64_t sub_1003EB5D8()
{
  return 3;
}

uint64_t sub_1003EB5E0()
{
  return 5;
}

uint64_t sub_1003EB5E8()
{
  return 7;
}

uint64_t sub_1003EB5F0()
{
  return 9;
}

uint64_t sub_1003EB5F8()
{
  return 13;
}

uint64_t sub_1003EB600()
{
  return 17;
}

uint64_t sub_1003EB608()
{
  return 19;
}

uint64_t sub_1003EB610()
{
  return 15;
}

uint64_t sub_1003EB618@<X0>(uint64_t a1@<X8>)
{
  return byte_100E3CB32[a1];
}

uint64_t sub_1003EB628()
{
  return 11;
}

void sub_1003EB630(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1003EB668()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v0[3] = (uint64_t)&type metadata for AccessoryProductDataResponsePayload;
  v0[4] = sub_1003ECBD4();
  *v0 = v1;
  v0[1] = v2;
  return sub_10001BBBC(v1, v2);
}

double sub_1003EB698()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  double result;

  v0[3] = &type metadata for AccessoryManufacturerNameResponsePayload;
  v0[4] = sub_1003ECB90();
  *v0 = v1;
  v0[1] = v2;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v2).n128_u64[0];
  return result;
}

unint64_t sub_1003EB6D8()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t result;

  v0[3] = &type metadata for AccessoryCategoryResponsePayload;
  result = sub_1003ECB08();
  v0[4] = result;
  *v0 = v1;
  return result;
}

uint64_t sub_1003EB7D8(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD v21[4];
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v8 = type metadata accessor for Endianness(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  dispatch thunk of BinaryEncoding.container()(v24, v12, v13);
  v21[3] = a4;
  v14 = sub_1003EB5B4(a2, a3, a4);
  v15 = v14;
  LOWORD(v22) = word_100E3CB3C[v14];
  static Endianness.current.getter(v14);
  v16 = sub_100112060();
  FixedWidthInteger.convert(to:)(&v23, v11, &type metadata for UInt16, v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  LOWORD(v22) = v23;
  v17 = v25;
  v18 = v26;
  sub_10009F5D0((uint64_t)v24, v25);
  v19 = v27;
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v22, &type metadata for UInt16, v16, v17, v18);
  if (!v19)
    __asm { BR              X10 }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
}

__int16 *sub_1003EBE80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int16 *result;
  uint64_t v5;
  char v6;

  result = sub_1003EC6F8(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1003EBEAC(_QWORD *a1)
{
  uint64_t v1;

  return sub_1003EB7D8(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_1003EBEC8(unsigned __int16 a1)
{
  int v1;
  uint64_t result;

  v1 = a1;
  switch(a1)
  {
    case 3u:
      result = 0;
      break;
    case 4u:
      result = 2;
      break;
    case 5u:
      result = 4;
      break;
    case 6u:
      result = 6;
      break;
    case 7u:
      result = 8;
      break;
    case 8u:
      result = 10;
      break;
    case 9u:
      result = 12;
      break;
    case 0xAu:
      result = 14;
      break;
    case 0xBu:
      result = 16;
      break;
    case 0xCu:
      result = 18;
      break;
    default:
      result = 1;
      switch(v1)
      {
        case 2051:
          return result;
        case 2052:
          result = 3;
          break;
        case 2053:
          result = 5;
          break;
        case 2054:
          result = 7;
          break;
        case 2055:
          result = 9;
          break;
        case 2056:
          result = 11;
          break;
        case 2057:
          result = 13;
          break;
        case 2058:
          result = 15;
          break;
        case 2059:
          result = 17;
          break;
        case 2060:
          result = 19;
          break;
        default:
          result = 20;
          break;
      }
      break;
  }
  return result;
}

void sub_1003EBFB8(char a1, uint64_t a2)
{
  ValueMetadata *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t DynamicType;
  _QWORD v7[3];
  uint64_t v8;

  sub_100030784(a2, (uint64_t)v7);
  v3 = sub_1003EB4C0(a1);
  v4 = v8;
  v5 = sub_10001AA44(v7, v8);
  DynamicType = swift_getDynamicType(v5, v4, 1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
  if (v3 == (ValueMetadata *)DynamicType)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1003EC6A8);
}

__int16 *sub_1003EC6F8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 *v11;
  unint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char v18;
  ValueMetadata *v19;
  uint64_t v20;
  uint64_t v21;
  __int16 *v23;
  _QWORD v25[5];
  _QWORD v26[5];
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  __int16 v30;

  v3 = type metadata accessor for Endianness(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v25[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  dispatch thunk of BinaryDecoding.container()(v27, v7, v8);
  v9 = v28;
  v10 = v29;
  v11 = (__int16 *)sub_10009F5D0((uint64_t)v27, v28);
  v12 = sub_100112060();
  v13 = dispatch thunk of BinaryDecodingContaining.decode<A>(_:)(v25, &type metadata for UInt16, &type metadata for UInt16, v12, v9, v10);
  if (v1)
    goto LABEL_5;
  v30 = v25[0];
  static Endianness.current.getter(v13);
  v11 = &v30;
  FixedWidthInteger.convert(to:)(v26, v6, &type metadata for UInt16, v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v14 = sub_1003EBEC8(v26[0]);
  if (v14 == 20)
  {
    v15 = sub_1003EC92C();
    v16 = swift_allocError(&type metadata for PoshAccessoryNonOwnerCommand.Error, v15, 0, 0);
    *v17 = 1;
    swift_willThrow(v16);
LABEL_5:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    return v11;
  }
  v18 = v14;
  v19 = sub_1003EB4C0(v14);
  v21 = v20;
  sub_100030784((uint64_t)a1, (uint64_t)v25);
  v26[3] = v19;
  v26[4] = v21;
  sub_100018F08(v26);
  dispatch thunk of BinaryDecodable.init(from:)(v25, v19, *(_QWORD *)(v21 + 8));
  sub_100030784((uint64_t)v26, (uint64_t)v25);
  sub_1003EBFB8(v18, (uint64_t)v25);
  v11 = v23;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v11;
}

unint64_t sub_1003EC92C()
{
  unint64_t result;

  result = qword_1010FAD18;
  if (!qword_1010FAD18)
  {
    result = swift_getWitnessTable(a9_5, &type metadata for PoshAccessoryNonOwnerCommand.Error);
    atomic_store(result, (unint64_t *)&qword_1010FAD18);
  }
  return result;
}

unint64_t sub_1003EC970()
{
  unint64_t result;

  result = qword_1010FAD20;
  if (!qword_1010FAD20)
  {
    result = swift_getWitnessTable("if$", &type metadata for AccessoryBatteryLevelResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FAD20);
  }
  return result;
}

unint64_t sub_1003EC9B4()
{
  unint64_t result;

  result = qword_1010FAD28;
  if (!qword_1010FAD28)
  {
    result = swift_getWitnessTable(aE_14, &type metadata for AccessoryBatteryTypeResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FAD28);
  }
  return result;
}

unint64_t sub_1003EC9F8()
{
  unint64_t result;

  result = qword_1010FAD30;
  if (!qword_1010FAD30)
  {
    result = swift_getWitnessTable(byte_100E64C98, &type metadata for AccessoryFirmwareVersionResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FAD30);
  }
  return result;
}

unint64_t sub_1003ECA3C()
{
  unint64_t result;

  result = qword_1010FAD38;
  if (!qword_1010FAD38)
  {
    result = swift_getWitnessTable(aU_9, &type metadata for AccessoryNetworkIDResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FAD38);
  }
  return result;
}

unint64_t sub_1003ECA80()
{
  unint64_t result;

  result = qword_1010FAD40;
  if (!qword_1010FAD40)
  {
    result = swift_getWitnessTable(aU_10, &type metadata for AccessoryCapabilityResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FAD40);
  }
  return result;
}

unint64_t sub_1003ECAC4()
{
  unint64_t result;

  result = qword_1010FAD48;
  if (!qword_1010FAD48)
  {
    result = swift_getWitnessTable(aY_36, &type metadata for AccessoryProtocolVersionResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FAD48);
  }
  return result;
}

unint64_t sub_1003ECB08()
{
  unint64_t result;

  result = qword_1010FAD50;
  if (!qword_1010FAD50)
  {
    result = swift_getWitnessTable(byte_100E5B434, &type metadata for AccessoryCategoryResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FAD50);
  }
  return result;
}

unint64_t sub_1003ECB4C()
{
  unint64_t result;

  result = qword_1010FAD58;
  if (!qword_1010FAD58)
  {
    result = swift_getWitnessTable(byte_100E54544, &type metadata for AccessoryModelNameResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FAD58);
  }
  return result;
}

unint64_t sub_1003ECB90()
{
  unint64_t result;

  result = qword_1010FAD60;
  if (!qword_1010FAD60)
  {
    result = swift_getWitnessTable(byte_100E2FFBC, &type metadata for AccessoryManufacturerNameResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FAD60);
  }
  return result;
}

unint64_t sub_1003ECBD4()
{
  unint64_t result;

  result = qword_1010FAD68;
  if (!qword_1010FAD68)
  {
    result = swift_getWitnessTable(aM_14, &type metadata for AccessoryProductDataResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FAD68);
  }
  return result;
}

unint64_t sub_1003ECC18()
{
  unint64_t result;

  result = qword_1010FAD70;
  if (!qword_1010FAD70)
  {
    result = swift_getWitnessTable(byte_100E54CB0, &type metadata for AccessoryBatteryLevelResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FAD70);
  }
  return result;
}

unint64_t sub_1003ECC5C()
{
  unint64_t result;

  result = qword_1010FAD78;
  if (!qword_1010FAD78)
  {
    result = swift_getWitnessTable(asc_100E578CC, &type metadata for AccessoryBatteryTypeResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FAD78);
  }
  return result;
}

unint64_t sub_1003ECCA0()
{
  unint64_t result;

  result = qword_1010FAD80;
  if (!qword_1010FAD80)
  {
    result = swift_getWitnessTable(aM_15, &type metadata for AccessoryNetworkIDResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FAD80);
  }
  return result;
}

unint64_t sub_1003ECCE4()
{
  unint64_t result;

  result = qword_1010FAD88;
  if (!qword_1010FAD88)
  {
    result = swift_getWitnessTable(aQ_15, &type metadata for AccessoryProtocolVersionResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FAD88);
  }
  return result;
}

unint64_t sub_1003ECD28()
{
  unint64_t result;

  result = qword_1010FAD90;
  if (!qword_1010FAD90)
  {
    result = swift_getWitnessTable(byte_100E5B40C, &type metadata for AccessoryCategoryResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FAD90);
  }
  return result;
}

unint64_t sub_1003ECD6C()
{
  unint64_t result;

  result = qword_1010FAD98;
  if (!qword_1010FAD98)
  {
    result = swift_getWitnessTable(byte_100E64C70, &type metadata for AccessoryFirmwareVersionResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FAD98);
  }
  return result;
}

unint64_t sub_1003ECDB0()
{
  unint64_t result;

  result = qword_1010FADA0;
  if (!qword_1010FADA0)
  {
    result = swift_getWitnessTable(aM_16, &type metadata for AccessoryCapabilityResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FADA0);
  }
  return result;
}

unint64_t sub_1003ECDF4()
{
  unint64_t result;

  result = qword_1010FADA8;
  if (!qword_1010FADA8)
  {
    result = swift_getWitnessTable(byte_100E5451C, &type metadata for AccessoryModelNameResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FADA8);
  }
  return result;
}

unint64_t sub_1003ECE38()
{
  unint64_t result;

  result = qword_1010FADB0;
  if (!qword_1010FADB0)
  {
    result = swift_getWitnessTable(aE_15, &type metadata for AccessoryProductDataResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FADB0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PoshAccessoryNonOwnerCommand.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1003ECEC8 + 4 * byte_100E3CA05[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1003ECEFC + 4 * byte_100E3CA00[v4]))();
}

uint64_t sub_1003ECEFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003ECF04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003ECF0CLL);
  return result;
}

uint64_t sub_1003ECF18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003ECF20);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1003ECF24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003ECF2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PoshAccessoryNonOwnerCommand.Error()
{
  return &type metadata for PoshAccessoryNonOwnerCommand.Error;
}

unint64_t sub_1003ECF4C()
{
  unint64_t result;

  result = qword_1010FADB8;
  if (!qword_1010FADB8)
  {
    result = swift_getWitnessTable(aQ_16, &type metadata for PoshAccessoryNonOwnerCommand.Error);
    atomic_store(result, (unint64_t *)&qword_1010FADB8);
  }
  return result;
}

uint64_t sub_1003ECF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[22] = a4;
  v5 = sub_10001A9A8(&qword_1010FAE88);
  v4[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010FAE90);
  v4[24] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[25] = v7;
  v4[26] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010FAE98);
  v4[27] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[28] = v9;
  v4[29] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010FAEA0);
  v4[30] = v10;
  v4[31] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010FAEA8);
  v4[32] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[33] = v12;
  v4[34] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003ED098, 0, 0);
}

uint64_t sub_1003ED098()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 136, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBD90 + dword_1010EBD90);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBD94);
    *(_QWORD *)(v0 + 280) = v2;
    *v2 = v0;
    v2[1] = sub_1003ED17C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003ED17C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_QWORD *)(*(_QWORD *)v1 + 288) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003ED1D8, 0, 0);
}

uint64_t sub_1003ED1D8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 288);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 248);
    v5 = *(_QWORD *)(v0 + 232);
    v4 = *(_QWORD *)(v0 + 240);
    v6 = *(_QWORD *)(v0 + 216);
    v7 = *(_QWORD *)(v0 + 224);
    v25 = *(_QWORD *)(v0 + 184);
    v26 = *(_QWORD *)(v0 + 256);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v8 = sub_1003B8C0C((uint64_t)&off_10104A558);
    swift_arrayDestroy(&unk_10104A578, 2, &type metadata for String);
    v9 = sub_10001A9A8(&qword_1010FAEB0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v5, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v6);
    AsyncStream.init(_:bufferingPolicy:_:)(v9, v5, sub_1003ED93C, v2, v9);
    v10 = swift_allocObject(&unk_101075488, 24, 7);
    *(_QWORD *)(v10 + 16) = v8;
    v11 = sub_1003ED9BC();
    AsyncFilterSequence.init(_:isIncluded:)(v3, &unk_1010FAEB8, v10, v4, v11);
    AsyncFilterSequence.base.getter(v26);
    dispatch thunk of AsyncSequence.makeAsyncIterator()(v4, v11);
    v12 = AsyncFilterSequence.isIncluded.getter(v26);
    AsyncFilterSequence.Iterator.init(_:isIncluded:)(v25, v12, v13, v4, v11);
    v27 = (char *)&dword_101102C78 + dword_101102C78;
    v14 = (_QWORD *)swift_task_alloc(unk_101102C7C);
    *(_QWORD *)(v0 + 296) = v14;
    *v14 = v0;
    v14[1] = sub_1003ED4B0;
    return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v27)(0, 0, v0 + 160);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B6748);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Missing DistributedNotificationService!", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    v21 = *(_QWORD *)(v0 + 248);
    v22 = *(_QWORD *)(v0 + 232);
    v23 = *(_QWORD *)(v0 + 208);
    v24 = *(_QWORD *)(v0 + 184);
    swift_task_dealloc(*(_QWORD *)(v0 + 272));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003ED4B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v5 = (_QWORD *)*v4;
  v5[12] = v4;
  v5[13] = a1;
  v5[14] = a2;
  v5[15] = a3;
  v5[16] = v3;
  v6 = v5[37];
  v5[38] = a1;
  swift_task_dealloc(v6);
  return swift_task_switch(sub_1003ED518, 0, 0);
}

uint64_t sub_1003ED518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 304);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 176);
    swift_bridgeObjectRelease();
    type metadata accessor for Transaction(0);
    *(_QWORD *)(v0 + 312) = static Transaction.$current.getter();
    *(_QWORD *)(v0 + 168) = v1;
    v3 = swift_allocObject(&unk_1010754B0, 24, 7);
    *(_QWORD *)(v0 + 320) = v3;
    swift_weakInit(v3 + 16, v2);
    v4 = async function pointer to TaskLocal.withValue<A>(_:operation:isolation:file:line:)[1];
    swift_retain();
    v5 = (_QWORD *)swift_task_alloc(v4);
    *(_QWORD *)(v0 + 328) = v5;
    sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
    *v5 = v0;
    v5[1] = sub_1003ED6B4;
    return TaskLocal.withValue<A>(_:operation:isolation:file:line:)(v0 + 336, v0 + 168, &unk_1010FAED0, v3, 0, 0, 0xD000000000000026, 0x8000000100ED5F50);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 264);
    v7 = *(_QWORD *)(v0 + 272);
    v9 = *(_QWORD *)(v0 + 256);
    v11 = *(_QWORD *)(v0 + 200);
    v10 = *(_QWORD *)(v0 + 208);
    v12 = *(_QWORD *)(v0 + 192);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    v13 = *(_QWORD *)(v0 + 248);
    v14 = *(_QWORD *)(v0 + 232);
    v15 = *(_QWORD *)(v0 + 208);
    v16 = *(_QWORD *)(v0 + 184);
    swift_task_dealloc(*(_QWORD *)(v0 + 272));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003ED6B4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 328));
  swift_release();
  swift_release();
  swift_release();
  return swift_task_switch(sub_1003ED72C, 0, 0);
}

uint64_t sub_1003ED72C()
{
  uint64_t v0;
  _QWORD *v1;
  char *v3;

  swift_release();
  v3 = (char *)&dword_101102C78 + dword_101102C78;
  v1 = (_QWORD *)swift_task_alloc(unk_101102C7C);
  *(_QWORD *)(v0 + 296) = v1;
  *v1 = v0;
  v1[1] = sub_1003ED4B0;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v3)(0, 0, v0 + 160);
}

uint64_t sub_1003ED7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return swift_task_switch(sub_1003ED7BC, 0, 0);
}

uint64_t sub_1003ED7BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  int *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(void);
  uint64_t (*v8)(void);

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong
    && (v3 = *(int **)(Strong + 16),
        *(_QWORD *)(v0 + 56) = v3,
        v4 = *(_QWORD *)(Strong + 24),
        *(_QWORD *)(v0 + 64) = v4,
        sub_10001D898((uint64_t)v3, v4),
        swift_release(),
        v3))
  {
    v8 = (uint64_t (*)(void))((char *)v3 + *v3);
    v5 = (_QWORD *)swift_task_alloc(v3[1]);
    *(_QWORD *)(v0 + 72) = v5;
    *v5 = v0;
    v5[1] = sub_1003ED880;
    v6 = v8;
  }
  else
  {
    **(_BYTE **)(v0 + 40) = 1;
    v6 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v6();
}

uint64_t sub_1003ED880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  sub_10001D8A8(v2, v1);
  return swift_task_switch(sub_1003ED8E4, 0, 0);
}

uint64_t sub_1003ED8E4()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 40) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003ED8F8()
{
  uint64_t v0;

  sub_10001D8A8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for AppDeletionObserver()
{
  return objc_opt_self(_TtC12searchpartyd19AppDeletionObserver);
}

uint64_t sub_1003ED93C(uint64_t a1)
{
  uint64_t v1;

  return sub_100997F34(a1, v1);
}

uint64_t sub_1003ED944()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003ED968(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10110EAA4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000D9CC0;
  return sub_1009980C4(a1, v4);
}

unint64_t sub_1003ED9BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010FAEC0;
  if (!qword_1010FAEC0)
  {
    v1 = sub_10001F784(&qword_1010FAEA0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for AsyncStream<A>, v1);
    atomic_store(result, &qword_1010FAEC0);
  }
  return result;
}

uint64_t sub_1003EDA08()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003EDA2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1010FAECC);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004C28;
  v4[5] = a1;
  v4[6] = v1;
  return swift_task_switch(sub_1003ED7BC, 0, 0);
}

ValueMetadata *type metadata accessor for CompanionBeaconsWithYouResponse()
{
  return &type metadata for CompanionBeaconsWithYouResponse;
}

uint64_t sub_1003EDA9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003EDAA8);
}

uint64_t sub_1003EDAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003EDAB8);
}

uint64_t type metadata accessor for CompanionSelfBeaconingKeyEnvelope(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010FAF30, (uint64_t)&nominal type descriptor for CompanionSelfBeaconingKeyEnvelope);
}

uint64_t *sub_1003EDAD0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v10;
    v11 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = v11;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
  }
  return a1;
}

uint64_t sub_1003EDB6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_1003EDBBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v10;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_1003EDC2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(int *)(a3 + 24);
  v11 = *(_QWORD *)(a2 + v10);
  v12 = *(_QWORD *)(a1 + v10);
  *(_QWORD *)(a1 + v10) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_1003EDCB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1003EDD18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  v9 = *(int *)(a3 + 24);
  v10 = *(_QWORD *)(a1 + v9);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t sub_1003EDD90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003EDD9C);
}

uint64_t sub_1003EDDA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003EDDAC);
}

uint64_t type metadata accessor for CompanionFindMyAccessoryKeyEnvelope(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010FAFC0, (uint64_t)&nominal type descriptor for CompanionFindMyAccessoryKeyEnvelope);
}

uint64_t sub_1003EDDC4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1003EDE3C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010FB000);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1003EEB04();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CompanionSelfBeaconingKeyEnvelope.CodingKeys, &type metadata for CompanionSelfBeaconingKeyEnvelope.CodingKeys, v11, v9, v10);
  v20 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    v19 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for CompanionSelfBeaconingKeyEnvelope(0) + 20));
    v18 = 1;
    v14 = sub_10001A9A8(&qword_1010F13A8);
    v15 = sub_10016ABBC(&qword_1010F13E0, &qword_1010F13E8, (uint64_t)&unk_100E58F90, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003EDFD0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;

  v25 = a2;
  v29 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v26 = (_QWORD **)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = sub_10001A9A8(&qword_1010FB068);
  v5 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CompanionSelfBeaconingKeyEnvelope(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v12);
  v13 = sub_1003EEB04();
  v27 = v7;
  v14 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CompanionSelfBeaconingKeyEnvelope.CodingKeys, &type metadata for CompanionSelfBeaconingKeyEnvelope.CodingKeys, v13, v12, v11);
  if (v14)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v24 = a1;
  v30 = v5;
  v15 = (uint64_t)v10;
  v33 = 0;
  v16 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v18 = v26;
  v17 = v27;
  v19 = v28;
  v20 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v26, v29, &v33, v28, v29, v16);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 32))(v15, v18, v20);
  v21 = sub_10001A9A8(&qword_1010F13A8);
  v32 = 1;
  v22 = sub_10016ABBC(&qword_1010F13B0, &qword_1010F13B8, (uint64_t)&unk_100E58FB8, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, v21, &v32, v19, v21, v22);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v19);
  *(_QWORD *)(v15 + *(int *)(v8 + 20)) = v31;
  sub_10005972C(v15, v25, type metadata accessor for CompanionSelfBeaconingKeyEnvelope);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
  return sub_1000126B0(v15, type metadata accessor for CompanionSelfBeaconingKeyEnvelope);
}

uint64_t sub_1003EE28C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t MyAccessoryKeyEnvelope;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010FB010);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1003EEB48();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CompanionFindMyAccessoryKeyEnvelope.CodingKeys, &type metadata for CompanionFindMyAccessoryKeyEnvelope.CodingKeys, v11, v9, v10);
  LOBYTE(v20) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    MyAccessoryKeyEnvelope = type metadata accessor for CompanionFindMyAccessoryKeyEnvelope(0);
    v20 = *(_QWORD *)(v3 + *(int *)(MyAccessoryKeyEnvelope + 20));
    v19 = 1;
    v15 = sub_10001A9A8(&qword_1010FB020);
    v16 = sub_1003EF044(&qword_1010FB028, &qword_1010FB030, (uint64_t)&unk_100E487E0, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, v15, v16);
    v20 = *(_QWORD *)(v3 + *(int *)(MyAccessoryKeyEnvelope + 24));
    v19 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003EE46C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t MyAccessoryKeyEnvelope;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, _QWORD *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v30 = a2;
  v31 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v32 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = sub_10001A9A8(&qword_1010FB070);
  v5 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MyAccessoryKeyEnvelope = type metadata accessor for CompanionFindMyAccessoryKeyEnvelope(0);
  __chkstk_darwin(MyAccessoryKeyEnvelope);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v12);
  v13 = sub_1003EEB48();
  v34 = v7;
  v14 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CompanionFindMyAccessoryKeyEnvelope.CodingKeys, &type metadata for CompanionFindMyAccessoryKeyEnvelope.CodingKeys, v13, v12, v11);
  if (v14)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v35 = MyAccessoryKeyEnvelope;
  v15 = a1;
  v16 = v10;
  LOBYTE(v37) = 0;
  v17 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v19 = v31;
  v18 = v32;
  v20 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32, v31, &v37, v33, v31, v17);
  v29 = v3;
  v21 = *(void (**)(char *, _QWORD *, uint64_t))(v3 + 32);
  v22 = (uint64_t)v16;
  v21(v16, v18, v19);
  v23 = sub_10001A9A8(&qword_1010FB020);
  v36 = 1;
  v24 = sub_1003EF044(&qword_1010FB078, &qword_1010FB080, (uint64_t)&unk_100E48808, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v37, v23, &v36, v20, v23, v24);
  v25 = v24;
  v26 = v35;
  *(_QWORD *)(v22 + *(int *)(v35 + 20)) = v37;
  v36 = 2;
  v27 = v34;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v37, v23, &v36, v20, v23, v25);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v27, v33);
  *(_QWORD *)(v22 + *(int *)(v26 + 24)) = v37;
  sub_10005972C(v22, v30, type metadata accessor for CompanionFindMyAccessoryKeyEnvelope);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
  return sub_1000126B0(v22, type metadata accessor for CompanionFindMyAccessoryKeyEnvelope);
}

uint64_t sub_1003EE7A4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_10001A9A8(&qword_1010FB038);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  v10 = sub_1003EEB8C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CompanionBeaconsWithYouResponse.CodingKeys, &type metadata for CompanionBeaconsWithYouResponse.CodingKeys, v10, v8, v9);
  v16 = a2;
  v11 = sub_10001A9A8(&qword_1010FB048);
  v12 = sub_1003EEBD0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1003EE8A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003EEB04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003EE8D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003EEB04();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003EE8F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003EDFD0(a1, a2);
}

uint64_t sub_1003EE90C(_QWORD *a1)
{
  return sub_1003EDE3C(a1);
}

unint64_t sub_1003EE920()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x4B7972616D697270;
  if (*v0 != 1)
    v1 = 0x7261646E6F636573;
  if (*v0)
    return v1;
  else
    return 0xD000000000000010;
}

uint64_t sub_1003EE994@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1003EEC6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003EE9B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003EEB48();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003EE9E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003EEB48();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003EEA08@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003EE46C(a1, a2);
}

uint64_t sub_1003EEA1C(_QWORD *a1)
{
  return sub_1003EE28C(a1);
}

unint64_t sub_1003EEA30()
{
  return 0xD000000000000010;
}

uint64_t sub_1003EEA4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1003EEDF8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1003EEA74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003EEB8C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003EEA9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003EEB8C();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_1003EEAC4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1003EEE7C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1003EEAEC(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1003EE7A4(a1, *v1);
}

unint64_t sub_1003EEB04()
{
  unint64_t result;

  result = qword_1010FB008;
  if (!qword_1010FB008)
  {
    result = swift_getWitnessTable(byte_100E3D028, &type metadata for CompanionSelfBeaconingKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FB008);
  }
  return result;
}

unint64_t sub_1003EEB48()
{
  unint64_t result;

  result = qword_1010FB018;
  if (!qword_1010FB018)
  {
    result = swift_getWitnessTable(aA_21, &type metadata for CompanionFindMyAccessoryKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FB018);
  }
  return result;
}

unint64_t sub_1003EEB8C()
{
  unint64_t result;

  result = qword_1010FB040;
  if (!qword_1010FB040)
  {
    result = swift_getWitnessTable(byte_100E3CF88, &type metadata for CompanionBeaconsWithYouResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FB040);
  }
  return result;
}

unint64_t sub_1003EEBD0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1010FB050;
  if (!qword_1010FB050)
  {
    v1 = sub_10001F784(&qword_1010FB048);
    v2[0] = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v2[1] = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1010FB050);
  }
  return result;
}

uint64_t sub_1003EEC6C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC28D0;
    if (a2 == 0x8000000100EC28D0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC28D0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x4B7972616D697270 && a2 == 0xEB00000000737965)
  {
    v6 = 0xEB00000000737965;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B7972616D697270, 0xEB00000000737965, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x7261646E6F636573 && a2 == 0xED00007379654B79)
  {
    swift_bridgeObjectRelease(0xED00007379654B79);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7261646E6F636573, 0xED00007379654B79, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1003EEDF8(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000010 && a2 == 0x8000000100ED5F80)
  {
    swift_bridgeObjectRelease(0x8000000100ED5F80);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100ED5F80, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

_QWORD *sub_1003EEE7C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v3 = sub_10001A9A8(&qword_1010FB058);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10001AA44(a1, v7);
  v10 = sub_1003EEB8C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CompanionBeaconsWithYouResponse.CodingKeys, &type metadata for CompanionBeaconsWithYouResponse.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = sub_10001A9A8(&qword_1010FB048);
    v12 = sub_1003EEFA8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v16;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return v9;
}

unint64_t sub_1003EEFA8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1010FB060;
  if (!qword_1010FB060)
  {
    v1 = sub_10001F784(&qword_1010FB048);
    v2[0] = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v2[1] = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1010FB060);
  }
  return result;
}

uint64_t sub_1003EF044(unint64_t *a1, unint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001F784(&qword_1010FB020);
    v10 = sub_100006204(a2, type metadata accessor for FamilyCryptoKeysV2, a3);
    result = swift_getWitnessTable(a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CompanionBeaconsWithYouResponse.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1003EF108 + 4 * byte_100E3CBD0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1003EF128 + 4 * byte_100E3CBD5[v4]))();
}

_BYTE *sub_1003EF108(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1003EF128(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1003EF130(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1003EF138(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1003EF140(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1003EF148(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CompanionBeaconsWithYouResponse.CodingKeys()
{
  return &type metadata for CompanionBeaconsWithYouResponse.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for CompanionFindMyAccessoryKeyEnvelope.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1003EF1B0 + 4 * byte_100E3CBDF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1003EF1E4 + 4 * byte_100E3CBDA[v4]))();
}

uint64_t sub_1003EF1E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003EF1EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003EF1F4);
  return result;
}

uint64_t sub_1003EF200(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003EF208);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1003EF20C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003EF214(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CompanionFindMyAccessoryKeyEnvelope.CodingKeys()
{
  return &type metadata for CompanionFindMyAccessoryKeyEnvelope.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for CompanionSelfBeaconingKeyEnvelope.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1003EF27C + 4 * byte_100E3CBE9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1003EF2B0 + 4 * byte_100E3CBE4[v4]))();
}

uint64_t sub_1003EF2B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003EF2B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003EF2C0);
  return result;
}

uint64_t sub_1003EF2CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003EF2D4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1003EF2D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003EF2E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CompanionSelfBeaconingKeyEnvelope.CodingKeys()
{
  return &type metadata for CompanionSelfBeaconingKeyEnvelope.CodingKeys;
}

unint64_t sub_1003EF300()
{
  unint64_t result;

  result = qword_1010FB088;
  if (!qword_1010FB088)
  {
    result = swift_getWitnessTable(byte_100E3CDF0, &type metadata for CompanionSelfBeaconingKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FB088);
  }
  return result;
}

unint64_t sub_1003EF348()
{
  unint64_t result;

  result = qword_1010FB090;
  if (!qword_1010FB090)
  {
    result = swift_getWitnessTable(aA_22, &type metadata for CompanionFindMyAccessoryKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FB090);
  }
  return result;
}

unint64_t sub_1003EF390()
{
  unint64_t result;

  result = qword_1010FB098;
  if (!qword_1010FB098)
  {
    result = swift_getWitnessTable(byte_100E3CF60, &type metadata for CompanionBeaconsWithYouResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FB098);
  }
  return result;
}

unint64_t sub_1003EF3D8()
{
  unint64_t result;

  result = qword_1010FB0A0;
  if (!qword_1010FB0A0)
  {
    result = swift_getWitnessTable(byte_100E3CED0, &type metadata for CompanionBeaconsWithYouResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FB0A0);
  }
  return result;
}

unint64_t sub_1003EF420()
{
  unint64_t result;

  result = qword_1010FB0A8;
  if (!qword_1010FB0A8)
  {
    result = swift_getWitnessTable("ه#", &type metadata for CompanionBeaconsWithYouResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FB0A8);
  }
  return result;
}

unint64_t sub_1003EF468()
{
  unint64_t result;

  result = qword_1010FB0B0;
  if (!qword_1010FB0B0)
  {
    result = swift_getWitnessTable(byte_100E3CE18, &type metadata for CompanionFindMyAccessoryKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FB0B0);
  }
  return result;
}

unint64_t sub_1003EF4B0()
{
  unint64_t result;

  result = qword_1010FB0B8;
  if (!qword_1010FB0B8)
  {
    result = swift_getWitnessTable(byte_100E3CE40, &type metadata for CompanionFindMyAccessoryKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FB0B8);
  }
  return result;
}

unint64_t sub_1003EF4F8()
{
  unint64_t result;

  result = qword_1010FB0C0;
  if (!qword_1010FB0C0)
  {
    result = swift_getWitnessTable(aA_23, &type metadata for CompanionSelfBeaconingKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FB0C0);
  }
  return result;
}

unint64_t sub_1003EF540()
{
  unint64_t result;

  result = qword_1010FB0C8;
  if (!qword_1010FB0C8)
  {
    result = swift_getWitnessTable(aI_14, &type metadata for CompanionSelfBeaconingKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FB0C8);
  }
  return result;
}

uint64_t destroy for AirPodsPairingEligibilityDataResponseCommandPayload(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10001BC14(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_10001BC14(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  sub_10001BC14(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  return sub_10001BC14(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
}

uint64_t initializeWithCopy for AirPodsPairingEligibilityDataResponseCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  sub_10001BBBC(v8, v9);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  sub_10001BBBC(v10, v11);
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  v13 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  sub_10001BBBC(v13, v12);
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v12;
  return a1;
}

uint64_t assignWithCopy for AirPodsPairingEligibilityDataResponseCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  sub_10001BC14(v10, v11);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  sub_10001BBBC(v12, v13);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v13;
  sub_10001BC14(v14, v15);
  v16 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a2 + 64);
  sub_10001BBBC(v16, v17);
  v18 = *(_QWORD *)(a1 + 56);
  v19 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v16;
  *(_QWORD *)(a1 + 64) = v17;
  sub_10001BC14(v18, v19);
  v21 = *(_QWORD *)(a2 + 72);
  v20 = *(_QWORD *)(a2 + 80);
  sub_10001BBBC(v21, v20);
  v22 = *(_QWORD *)(a1 + 72);
  v23 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v21;
  *(_QWORD *)(a1 + 80) = v20;
  sub_10001BC14(v22, v23);
  return a1;
}

uint64_t assignWithTake for AirPodsPairingEligibilityDataResponseCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v6, v7);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_10001BC14(v8, v9);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_10001BC14(v10, v11);
  v12 = *(_QWORD *)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  sub_10001BC14(v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsPairingEligibilityDataResponseCommandPayload(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 88))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsPairingEligibilityDataResponseCommandPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 88) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingEligibilityDataResponseCommandPayload()
{
  return &type metadata for AirPodsPairingEligibilityDataResponseCommandPayload;
}

uint64_t sub_1003EF878(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v23, v3, v4);
  v22 = *v1;
  v5 = v24;
  v6 = v25;
  sub_10009F5D0((uint64_t)v23, v24);
  v7 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v22, &type metadata for Data, v7, v5, v6);
  if (!v2)
  {
    v22 = v1[1];
    v8 = v24;
    v9 = v25;
    sub_10009F5D0((uint64_t)v23, v24);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v22, &type metadata for Data, v7, v8, v9);
    v10 = sub_10072CEBC(*((unsigned int *)v1 + 8));
    v12 = v11;
    *(_QWORD *)&v22 = v10;
    *((_QWORD *)&v22 + 1) = v11;
    v13 = v24;
    v14 = v25;
    sub_10009F5D0((uint64_t)v23, v24);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v22, &type metadata for Data, v7, v13, v14);
    sub_10001BC14(v10, v12);
    v22 = *(__int128 *)((char *)v1 + 40);
    v15 = v24;
    v16 = v25;
    sub_10009F5D0((uint64_t)v23, v24);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v22, &type metadata for Data, v7, v15, v16);
    v22 = *(__int128 *)((char *)v1 + 56);
    v17 = v24;
    v18 = v25;
    sub_10009F5D0((uint64_t)v23, v24);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v22, &type metadata for Data, v7, v17, v18);
    v22 = *(__int128 *)((char *)v1 + 72);
    v19 = v24;
    v20 = v25;
    sub_10009F5D0((uint64_t)v23, v24);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v22, &type metadata for Data, v7, v19, v20);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v23);
}

double sub_1003EFA98@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[5];
  uint64_t v8;

  sub_1003EFBB8(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_QWORD *)(a2 + 80) = v8;
    result = *(double *)v7;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1003EFAF0(_QWORD *a1)
{
  return sub_1003EF878(a1);
}

unint64_t sub_1003EFB04(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1003EFB30();
  result = sub_1003EFB74();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1003EFB30()
{
  unint64_t result;

  result = qword_1010FB0D0;
  if (!qword_1010FB0D0)
  {
    result = swift_getWitnessTable(aM_17, &type metadata for AirPodsPairingEligibilityDataResponseCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010FB0D0);
  }
  return result;
}

unint64_t sub_1003EFB74()
{
  unint64_t result;

  result = qword_1010FB0D8;
  if (!qword_1010FB0D8)
  {
    result = swift_getWitnessTable(aE_16, &type metadata for AirPodsPairingEligibilityDataResponseCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010FB0D8);
  }
  return result;
}

uint64_t sub_1003EFBB8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD v64[3];
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;

  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v64, v5, v6);
  v7 = v65;
  v8 = v66;
  sub_10009F5D0((uint64_t)v64, v65);
  v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(20, v7, v8);
  if (v2)
    goto LABEL_8;
  v11 = v9;
  v12 = v10;
  v13 = v65;
  v14 = v66;
  sub_10009F5D0((uint64_t)v64, v65);
  v15 = dispatch thunk of BinaryDecodingContaining.decode(length:)(8, v13, v14);
  v17 = v16;
  sub_10001BBBC(v15, v16);
  sub_1001EE65C(v15, v17);
  if (v19 >> 60 == 15)
  {
    v20 = type metadata accessor for BinaryEncodingError(0);
    v21 = sub_1001120A4();
    swift_allocError(v20, v21, 0, 0);
    v23 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, enum case for BinaryEncodingError.encodingError(_:), v20);
    swift_willThrow(v23);
    v24 = v15;
    v25 = v17;
LABEL_7:
    sub_10001BC14(v24, v25);
    sub_10001BC14(v11, v12);
LABEL_8:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v64);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  v62 = v18;
  v63 = v19;
  v67 = v17;
  v27 = v65;
  v26 = v66;
  sub_10009F5D0((uint64_t)v64, v65);
  v28 = dispatch thunk of BinaryDecodingContaining.decode(length:)(4, v27, v26);
  v30 = v29;
  sub_10001BBBC(v28, v29);
  sub_10072D548(v28, v30);
  if ((v31 & 0x100000000) != 0)
  {
    v40 = type metadata accessor for BinaryEncodingError(0);
    v41 = sub_1001120A4();
    swift_allocError(v40, v41, 0, 0);
    v43 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v42, enum case for BinaryEncodingError.encodingError(_:), v40);
    swift_willThrow(v43);
    sub_10001BC14(v28, v30);
    sub_10001EF3C(v62, v63);
    v24 = v15;
    v25 = v67;
    goto LABEL_7;
  }
  v59 = v31;
  v60 = v28;
  v61 = v30;
  v32 = v65;
  v33 = v66;
  sub_10009F5D0((uint64_t)v64, v65);
  v57 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v32, v33);
  v58 = v34;
  v35 = v65;
  v36 = v66;
  sub_10009F5D0((uint64_t)v64, v65);
  v55 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v35, v36);
  v56 = v37;
  v38 = v65;
  v39 = v66;
  sub_10009F5D0((uint64_t)v64, v65);
  v45 = dispatch thunk of BinaryDecodingContaining.decode(length:)(60, v38, v39);
  v47 = v46;
  v48 = sub_100035530();
  result = DataProtocol.intValue.getter(&type metadata for Data, v48);
  v49 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
    goto LABEL_14;
  }
  v50 = 20 * v49;
  if ((unsigned __int128)(v49 * (__int128)20) >> 64 != (20 * v49) >> 63)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((v50 & 0x8000000000000000) == 0)
  {
    v54 = Data.subdata(in:)(0, v50, v45, v47);
    v51 = v45;
    v53 = v52;
    sub_10001BC14(v51, v47);
    sub_10001BC14(v60, v61);
    sub_10001BC14(v15, v67);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v64);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 16) = v62;
    *(_QWORD *)(a2 + 24) = v63;
    *(_DWORD *)(a2 + 32) = v59;
    *(_QWORD *)(a2 + 40) = v57;
    *(_QWORD *)(a2 + 48) = v58;
    *(_QWORD *)(a2 + 56) = v55;
    *(_QWORD *)(a2 + 64) = v56;
    *(_QWORD *)(a2 + 72) = v54;
    *(_QWORD *)(a2 + 80) = v53;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t *sub_1003EFFA8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = sub_10001A9A8(&qword_1010F9FC8);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t sub_1003F0080(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = sub_10001A9A8(&qword_1010F9FC8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
  if (!(_DWORD)result)
  {
    v4 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

void *sub_1003F00E8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_10001A9A8(&qword_1010F9FC8);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_1003F019C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_10001A9A8(&qword_1010F9FC8);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = type metadata accessor for Date(0);
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(a1, a2, v13);
      return a1;
    }
    sub_1003F02A0((uint64_t)a1);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = type metadata accessor for Date(0);
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t sub_1003F02A0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010F9FC8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_1003F02E0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_10001A9A8(&qword_1010F9FC8);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_1003F0394(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_10001A9A8(&qword_1010F9FC8);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = type metadata accessor for Date(0);
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(a1, a2, v13);
      return a1;
    }
    sub_1003F02A0((uint64_t)a1);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = type metadata accessor for Date(0);
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t sub_1003F0498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003F04A4);
}

uint64_t sub_1003F04A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_10001A9A8(&qword_1010F9FC8);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t sub_1003F04F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003F0500);
}

uint64_t sub_1003F0500(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = sub_10001A9A8(&qword_1010F9FC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_1003F0558(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010F9FC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
}

uint64_t sub_1003F0594(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010F9FC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 2, v4);
}

uint64_t type metadata accessor for SharingRampState(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FB150;
  if (!qword_1010FB150)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SharingRampState);
  return result;
}

uint64_t sub_1003F0614(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 2);
    return 0;
  }
  return result;
}

void sub_1003F0668(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;

  v30 = a1;
  v29 = sub_10001A9A8(&qword_1010EBFF8);
  v5 = __chkstk_darwin(v29);
  v28 = (uint64_t)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v25 - v7);
  v9 = *(_QWORD *)(a3 + 64);
  v26 = a3 + 64;
  v10 = 1 << *(_BYTE *)(a3 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v27 = (unint64_t)(v10 + 63) >> 6;
  v31 = a3;
  swift_bridgeObjectRetain(a3);
  v13 = 0;
  while (v12)
  {
    v14 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v15 = v14 | (v13 << 6);
LABEL_5:
    v16 = *(_QWORD *)(v31 + 56);
    v17 = (uint64_t *)(*(_QWORD *)(v31 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = type metadata accessor for MultipartAccessoryPairingInfo(0);
    sub_10005972C(v16 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v15, (uint64_t)v8 + *(int *)(v29 + 48), type metadata accessor for MultipartAccessoryPairingInfo);
    *v8 = v19;
    v8[1] = v18;
    v21 = v28;
    sub_100005CF0((uint64_t)v8, v28, &qword_1010EBFF8);
    sub_10001BBBC(v19, v18);
    v30(v21);
    sub_100004048(v21, &qword_1010EBFF8);
    if (v3)
      goto LABEL_24;
  }
  if (__OFADD__(v13++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v13 >= v27)
    goto LABEL_24;
  v23 = *(_QWORD *)(v26 + 8 * v13);
  if (v23)
  {
LABEL_19:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v13 << 6);
    goto LABEL_5;
  }
  v24 = v13 + 1;
  if (v13 + 1 >= v27)
    goto LABEL_24;
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
    goto LABEL_18;
  v24 = v13 + 2;
  if (v13 + 2 >= v27)
    goto LABEL_24;
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
    goto LABEL_18;
  v24 = v13 + 3;
  if (v13 + 3 >= v27)
    goto LABEL_24;
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
    goto LABEL_18;
  v24 = v13 + 4;
  if (v13 + 4 >= v27)
  {
LABEL_24:
    swift_release();
    return;
  }
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
  {
LABEL_18:
    v13 = v24;
    goto LABEL_19;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v27)
      goto LABEL_24;
    v23 = *(_QWORD *)(v26 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
}

void sub_1003F08EC(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 v16;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  void (*v25)(char *);

  v25 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a3 + 56);
  v23 = a3 + 56;
  v13 = 1 << *(_BYTE *)(a3 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v24 = (unint64_t)(v13 + 63) >> 6;
  v16 = swift_bridgeObjectRetain(a3);
  v17 = 0;
  if (!v15)
    goto LABEL_5;
LABEL_4:
  v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16))(v11, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v6 + 72) * i, v5, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
      goto LABEL_28;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    v25(v8);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      goto LABEL_28;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if (v15)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v17++, 1))
      break;
    if (v17 >= v24)
      goto LABEL_27;
    v21 = *(_QWORD *)(v23 + 8 * v17);
    if (!v21)
    {
      v22 = v17 + 1;
      if (v17 + 1 >= v24)
        goto LABEL_27;
      v21 = *(_QWORD *)(v23 + 8 * v22);
      if (v21)
        goto LABEL_16;
      v22 = v17 + 2;
      if (v17 + 2 >= v24)
        goto LABEL_27;
      v21 = *(_QWORD *)(v23 + 8 * v22);
      if (v21)
        goto LABEL_16;
      v22 = v17 + 3;
      if (v17 + 3 >= v24)
        goto LABEL_27;
      v21 = *(_QWORD *)(v23 + 8 * v22);
      if (v21)
      {
LABEL_16:
        v17 = v22;
        goto LABEL_17;
      }
      v22 = v17 + 4;
      if (v17 + 4 < v24)
      {
        v21 = *(_QWORD *)(v23 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v17 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_30;
            if (v17 >= v24)
              goto LABEL_27;
            v21 = *(_QWORD *)(v23 + 8 * v17);
            ++v22;
            if (v21)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_27:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56))(v11, 1, 1, v5, v16);
LABEL_28:
      swift_release();
      return;
    }
LABEL_17:
    v15 = (v21 - 1) & v21;
  }
  __break(1u);
LABEL_30:
  __break(1u);
}

void sub_1003F0BB0(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v17;
  int64_t v18;
  _QWORD v19[2];
  int64_t v20;

  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v20 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(a3);
  v10 = 0;
  while (v9)
  {
    v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v12 = v11 | (v10 << 6);
LABEL_5:
    v13 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v12);
    v14 = *v13;
    v15 = v13[1];
    v19[0] = v14;
    v19[1] = v15;
    sub_10001BBBC(v14, v15);
    a1(v19);
    sub_10001BC14(v14, v15);
    if (v3)
      goto LABEL_24;
  }
  if (__OFADD__(v10++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v10 >= v20)
    goto LABEL_24;
  v17 = *(_QWORD *)(v6 + 8 * v10);
  if (v17)
  {
LABEL_19:
    v9 = (v17 - 1) & v17;
    v12 = __clz(__rbit64(v17)) + (v10 << 6);
    goto LABEL_5;
  }
  v18 = v10 + 1;
  if (v10 + 1 >= v20)
    goto LABEL_24;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
    goto LABEL_18;
  v18 = v10 + 2;
  if (v10 + 2 >= v20)
    goto LABEL_24;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
    goto LABEL_18;
  v18 = v10 + 3;
  if (v10 + 3 >= v20)
    goto LABEL_24;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
    goto LABEL_18;
  v18 = v10 + 4;
  if (v10 + 4 >= v20)
  {
LABEL_24:
    swift_release();
    return;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
LABEL_18:
    v10 = v18;
    goto LABEL_19;
  }
  while (1)
  {
    v10 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v10 >= v20)
      goto LABEL_24;
    v17 = *(_QWORD *)(v6 + 8 * v10);
    ++v18;
    if (v17)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
}

void sub_1003F0D68(void (*a1)(char *, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  void (*v28)(char *, __n128);

  v28 = a1;
  v27 = sub_10001A9A8(&qword_1010FB1A0);
  v5 = __chkstk_darwin(v27);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v24 - v8;
  v10 = *(_QWORD *)(a3 + 64);
  v25 = a3 + 64;
  v11 = 1 << *(_BYTE *)(a3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v26 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain(a3);
  v14 = 0;
  while (v13)
  {
    v15 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    v16 = v15 | (v14 << 6);
LABEL_5:
    v17 = *(_QWORD *)(a3 + 48);
    v18 = type metadata accessor for UUID(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v9, v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v18);
    v19 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v16);
    *(_QWORD *)&v9[*(int *)(v27 + 48)] = v19;
    sub_100005CF0((uint64_t)v9, (uint64_t)v7, &qword_1010FB1A0);
    v20 = swift_bridgeObjectRetain(v19);
    v28(v7, v20);
    sub_100004048((uint64_t)v7, &qword_1010FB1A0);
    if (v3)
      goto LABEL_24;
  }
  if (__OFADD__(v14++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v14 >= v26)
    goto LABEL_24;
  v22 = *(_QWORD *)(v25 + 8 * v14);
  if (v22)
  {
LABEL_19:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v14 << 6);
    goto LABEL_5;
  }
  v23 = v14 + 1;
  if (v14 + 1 >= v26)
    goto LABEL_24;
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
    goto LABEL_18;
  v23 = v14 + 2;
  if (v14 + 2 >= v26)
    goto LABEL_24;
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
    goto LABEL_18;
  v23 = v14 + 3;
  if (v14 + 3 >= v26)
    goto LABEL_24;
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
    goto LABEL_18;
  v23 = v14 + 4;
  if (v14 + 4 >= v26)
  {
LABEL_24:
    swift_release();
    return;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
LABEL_18:
    v14 = v23;
    goto LABEL_19;
  }
  while (1)
  {
    v14 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v14 >= v26)
      goto LABEL_24;
    v22 = *(_QWORD *)(v25 + 8 * v14);
    ++v23;
    if (v22)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
}

void sub_1003F0FD8()
{
  static Data.random(bytes:)(32);
  __asm { BR              X11 }
}

uint64_t sub_1003F1018@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (BYTE6(a2) != 32)
  {
    if ((_DWORD)a3 == 1)
    {
      LODWORD(a3) = HIDWORD(result) - result;
      if (!__OFSUB__(HIDWORD(result), (_DWORD)result))
        goto LABEL_11;
      __break(1u);
    }
    if ((_DWORD)a3 != 2)
    {
      v6 = BYTE6(a2);
      goto LABEL_13;
    }
    a3 = *(_QWORD *)(result + 16);
    v4 = *(_QWORD *)(result + 24);
    v5 = __OFSUB__(v4, a3);
    v6 = v4 - a3;
    if (!v5)
      goto LABEL_13;
    __break(1u);
LABEL_11:
    v6 = (int)a3;
LABEL_13:
    v8 = result;
    v9 = v6;
    v10 = sub_1000D95EC();
    v11 = swift_allocError(&type metadata for KeyRepresentableError, v10, 0, 0);
    *(_QWORD *)v12 = 32;
    *(_QWORD *)(v12 + 8) = v9;
    *(_BYTE *)(v12 + 16) = 0;
    swift_willThrow(v11);
    sub_10001BC14(v8, a2);
    swift_unexpectedError(v11, "searchpartyd/KeyRepresentable.swift", 35, 1, 51);
    __break(1u);
    JUMPOUT(0x1003F1118);
  }
  *v3 = result;
  v3[1] = a2;
  return result;
}

void sub_1003F1128()
{
  static Data.random(bytes:)(6);
  __asm { BR              X11 }
}

uint64_t sub_1003F1168@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (BYTE6(a2) != 6)
  {
    if ((_DWORD)a3 == 1)
    {
      LODWORD(a3) = HIDWORD(result) - result;
      if (!__OFSUB__(HIDWORD(result), (_DWORD)result))
        goto LABEL_11;
      __break(1u);
    }
    if ((_DWORD)a3 != 2)
    {
      v6 = BYTE6(a2);
      goto LABEL_13;
    }
    a3 = *(_QWORD *)(result + 16);
    v4 = *(_QWORD *)(result + 24);
    v5 = __OFSUB__(v4, a3);
    v6 = v4 - a3;
    if (!v5)
      goto LABEL_13;
    __break(1u);
LABEL_11:
    v6 = (int)a3;
LABEL_13:
    v8 = result;
    v9 = v6;
    v10 = sub_1000D95EC();
    v11 = swift_allocError(&type metadata for KeyRepresentableError, v10, 0, 0);
    *(_QWORD *)v12 = 6;
    *(_QWORD *)(v12 + 8) = v9;
    *(_BYTE *)(v12 + 16) = 0;
    swift_willThrow(v11);
    sub_10001BC14(v8, a2);
    swift_unexpectedError(v11, "searchpartyd/KeyRepresentable.swift", 35, 1, 51);
    __break(1u);
    JUMPOUT(0x1003F1268);
  }
  *v3 = result;
  v3[1] = a2;
  return result;
}

uint64_t sub_1003F1278(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t i;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v33 = type metadata accessor for RawSearchResult(0);
  v2 = *(_QWORD *)(v33 - 8);
  v3 = __chkstk_darwin(v33);
  v30 = (uint64_t)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v27 - v6;
  result = __chkstk_darwin(v5);
  v10 = (char *)&v27 - v9;
  v11 = 0;
  v12 = a1;
  v13 = *(_QWORD *)(a1 + 56);
  v31 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = _swiftEmptyArrayStorage;
  v34 = _swiftEmptyArrayStorage;
  v17 = v15 & v13;
  v32 = (unint64_t)(v14 + 63) >> 6;
  if ((v15 & v13) == 0)
    goto LABEL_7;
LABEL_4:
  v18 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (i = v18 | (v11 << 6); ; i = __clz(__rbit64(v22)) + (v11 << 6))
  {
    v20 = *(_QWORD *)(v2 + 72);
    sub_10005972C(*(_QWORD *)(v12 + 48) + v20 * i, (uint64_t)v7, type metadata accessor for RawSearchResult);
    sub_1000126EC((uint64_t)v7, (uint64_t)v10, type metadata accessor for RawSearchResult);
    if (v10[*(int *)(v33 + 36)] == 15)
    {
      sub_1000126EC((uint64_t)v10, v30, type metadata accessor for RawSearchResult);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
        sub_10009B108(0, v16[2] + 1, 1);
      v16 = v34;
      v25 = v34[2];
      v24 = v34[3];
      v26 = v25 + 1;
      if (v25 >= v24 >> 1)
      {
        v28 = v34[2];
        v29 = v25 + 1;
        sub_10009B108(v24 > 1, v25 + 1, 1);
        v25 = v28;
        v26 = v29;
        v16 = v34;
      }
      v16[2] = v26;
      result = sub_1000126EC(v30, (uint64_t)v16+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ v25 * v20, type metadata accessor for RawSearchResult);
      if (v17)
        goto LABEL_4;
    }
    else
    {
      result = sub_1000126B0((uint64_t)v10, type metadata accessor for RawSearchResult);
      if (v17)
        goto LABEL_4;
    }
LABEL_7:
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v21 >= v32)
      goto LABEL_29;
    v22 = *(_QWORD *)(v31 + 8 * v21);
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v32)
        goto LABEL_29;
      v22 = *(_QWORD *)(v31 + 8 * v11);
      if (!v22)
      {
        v11 = v21 + 2;
        if (v21 + 2 >= v32)
          goto LABEL_29;
        v22 = *(_QWORD *)(v31 + 8 * v11);
        if (!v22)
        {
          v11 = v21 + 3;
          if (v21 + 3 >= v32)
            goto LABEL_29;
          v22 = *(_QWORD *)(v31 + 8 * v11);
          if (!v22)
            break;
        }
      }
    }
LABEL_22:
    v17 = (v22 - 1) & v22;
  }
  v23 = v21 + 4;
  if (v23 >= v32)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v16;
  }
  v22 = *(_QWORD *)(v31 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v32)
      goto LABEL_29;
    v22 = *(_QWORD *)(v31 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1003F1570@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _UNKNOWN **v48;
  _UNKNOWN **v49;

  v44 = a3;
  v45 = a4;
  v41 = a1;
  v7 = type metadata accessor for Logger(0);
  v42 = *(_QWORD *)(v7 - 8);
  v43 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v20 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v16);
  static DispatchQoS.unspecified.getter(v20);
  *(_QWORD *)&v46 = _swiftEmptyArrayStorage;
  v21 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v23 = sub_10001F738();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v22, v23, v10, v21);
  *((_QWORD *)a5 + 2) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002DLL, 0x8000000100ED6070, v15, v12, v19, 0);
  v24 = (int *)type metadata accessor for LocationFetcher(0);
  v25 = v24[10];
  v26 = type metadata accessor for DeviceIdentityUtility(0);
  v27 = swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  swift_defaultActor_initialize(v27);
  v28 = v27 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  v29 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
  *(_QWORD *)(v27 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(_QWORD *)(v27 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v27 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 0;
  *(_QWORD *)&a5[v25] = v27;
  v30 = v24[11];
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v31 = qword_1011B7160;
  v32 = type metadata accessor for BeaconObservationStore(0);
  v48 = &off_10107F6C8;
  v49 = &off_101059408;
  v47 = v32;
  *(_QWORD *)&v46 = v31;
  v33 = type metadata accessor for MemberCircleRevokeManager();
  v34 = swift_allocObject(v33, 80, 7);
  *(_QWORD *)(v34 + 24) = 0;
  swift_unknownObjectWeakInit(v34 + 16, 0);
  sub_100057E20(&v46, (_OWORD *)(v34 + 32));
  *(_QWORD *)&a5[v30] = v34;
  v35 = v24[12];
  v36 = type metadata accessor for MemberCircleRevokeAssistant();
  v37 = swift_allocObject(v36, 16, 7);
  *(_QWORD *)&a5[v35] = v37;
  *(_QWORD *)a5 = v41;
  sub_100030784((uint64_t)a2, (uint64_t)(a5 + 24));
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1003F1C44(a2, (uint64_t)v9);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&a5[v24[8]], v9, v43);
  v38 = v45;
  *((_QWORD *)a5 + 1) = v44;
  *(_QWORD *)&a5[v24[9]] = v38;
  *(_QWORD *)(v34 + 24) = &off_1010B7188;
  swift_unknownObjectWeakAssign(v34 + 16, v37);
  swift_release();
  return swift_release();
}

uint64_t sub_1003F193C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t My;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v25[5];

  v4 = v3;
  v8 = type metadata accessor for LocationFetcher(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v25[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  My = type metadata accessor for Feature.FindMy(0);
  v25[3] = My;
  v25[4] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v13 = sub_100018F08(v25);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v13, enum case for Feature.FindMy.itemSharing(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v25);
  result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
  if ((My & 1) != 0)
  {
    v15 = v4[6];
    v16 = v4[7];
    sub_10001AA44(v4 + 3, v15);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16) & 1) != 0)
    {
      v17 = swift_allocObject(&unk_101075910, 32, 7);
      *(_QWORD *)(v17 + 16) = a2;
      *(_QWORD *)(v17 + 24) = a3;
      type metadata accessor for Transaction(0);
      sub_10005972C((uint64_t)v4, (uint64_t)&v25[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LocationFetcher);
      v18 = *(unsigned __int8 *)(v9 + 80);
      v19 = (v18 + 40) & ~v18;
      v20 = (_QWORD *)swift_allocObject(&unk_101075938, v19 + v10, v18 | 7);
      v20[2] = sub_10001D858;
      v20[3] = v17;
      v20[4] = a1;
      sub_1000126EC((uint64_t)v11, (uint64_t)v20 + v19, type metadata accessor for LocationFetcher);
      swift_retain();
      swift_bridgeObjectRetain(a1);
      swift_retain();
      static Transaction.asyncTask(name:block:)("beaconsFromDisk.FromDisk", 24, 2, &unk_1010F7740, v20);
      swift_release();
    }
    else
    {
      type metadata accessor for Transaction(0);
      sub_10005972C((uint64_t)v4, (uint64_t)&v25[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LocationFetcher);
      v21 = *(unsigned __int8 *)(v9 + 80);
      v22 = (v21 + 40) & ~v21;
      v23 = (_QWORD *)swift_allocObject(&unk_1010758E8, v22 + v10, v21 | 7);
      v23[2] = a2;
      v23[3] = a3;
      v23[4] = a1;
      sub_1000126EC((uint64_t)v11, (uint64_t)v23 + v22, type metadata accessor for LocationFetcher);
      swift_retain();
      swift_bridgeObjectRetain(a1);
      static Transaction.asyncTask(name:block:)("FetchSharedBeaconLocations.FromServer", 37, 2, &unk_1010FB1E0, v23);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1003F1BB4(uint64_t a1)
{
  return sub_100308818(a1, qword_1011B6E80, 0xD000000000000013, 0x8000000100ED60E0);
}

uint64_t sub_1003F1BD8(uint64_t a1)
{
  return sub_100308818(a1, qword_1011B6E98, 0xD000000000000012, 0x8000000100ED6050);
}

uint64_t sub_1003F1BFC(uint64_t a1)
{
  return sub_100308818(a1, qword_1011B6EB0, 0xD00000000000001DLL, 0x8000000100ED60C0);
}

uint64_t sub_1003F1C20(uint64_t a1)
{
  return sub_100308818(a1, qword_1011B6EC8, 0xD00000000000001CLL, 0x8000000100ED60A0);
}

uint64_t sub_1003F1C44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v4 = a1[3];
  v5 = a1[4];
  sub_10001AA44(a1, v4);
  LOBYTE(v4) = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  v6 = a1[3];
  v7 = a1[4];
  sub_10001AA44(a1, v6);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 40))(v6, v7);
  if ((v4 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      if (qword_1010E9BE8 != -1)
        swift_once(&qword_1010E9BE8, sub_1003F1C20);
      v9 = type metadata accessor for Logger(0);
      v10 = v9;
      v11 = qword_1011B6EC8;
    }
    else
    {
      if (qword_1010E9BD8 != -1)
        swift_once(&qword_1010E9BD8, sub_1003F1BD8);
      v9 = type metadata accessor for Logger(0);
      v10 = v9;
      v11 = qword_1011B6E98;
    }
  }
  else if ((v8 & 1) != 0)
  {
    if (qword_1010E9BE0 != -1)
      swift_once(&qword_1010E9BE0, sub_1003F1BFC);
    v9 = type metadata accessor for Logger(0);
    v10 = v9;
    v11 = qword_1011B6EB0;
  }
  else
  {
    if (qword_1010E9BD0 != -1)
      swift_once(&qword_1010E9BD0, sub_1003F1BB4);
    v9 = type metadata accessor for Logger(0);
    v10 = v9;
    v11 = qword_1011B6E80;
  }
  v12 = sub_10001A9E8(v9, (uint64_t)v11);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a2, v12, v10);
}

uint64_t sub_1003F1DDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  char *v85;
  double v86;
  void (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char v93;
  uint64_t v94;
  uint64_t *v95;
  void (*v96)(char *, uint64_t, uint64_t);
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  void (*v99)(uint64_t, uint64_t);
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  char v102;
  unint64_t v103;
  char v104;
  char *v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  double v140;
  void (*v141)(uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  NSObject *v146;
  char v147;
  uint64_t v148;
  os_log_t v149;
  void (*v150)(char *, uint64_t);
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  NSObject *v160;
  void (*v161)(char *, uint64_t);
  os_log_type_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  os_log_t v169;
  char *v170;
  os_log_t v171;
  uint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  os_log_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _BYTE v199[24];
  uint64_t v200;
  uint64_t v201[3];
  uint64_t v202;
  char v203[8];
  _QWORD *v204;

  v179 = a8;
  v189 = a7;
  v192 = a6;
  LODWORD(v190) = a3;
  v188 = type metadata accessor for LocationFetcher(0);
  __chkstk_darwin(v188);
  v14 = (char *)&v173 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v191 - 8);
  v16 = __chkstk_darwin(v191);
  v175 = (char *)&v173 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v174 = (char *)&v173 - v19;
  v20 = __chkstk_darwin(v18);
  v181 = (char *)&v173 - v21;
  v22 = __chkstk_darwin(v20);
  v186 = (char *)&v173 - v23;
  v24 = __chkstk_darwin(v22);
  v182 = (char *)&v173 - v25;
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v173 - v27;
  v29 = __chkstk_darwin(v26);
  v183 = (char *)&v173 - v30;
  __chkstk_darwin(v29);
  v180 = (char *)&v173 - v31;
  v32 = type metadata accessor for Logger(0);
  v193 = *(_QWORD *)(v32 - 8);
  v194 = v32;
  v33 = __chkstk_darwin(v32);
  v176 = (char *)&v173 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v37 = (char *)&v173 - v36;
  __chkstk_darwin(v35);
  v184 = (char *)&v173 - v38;
  v39 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v39);
  v41 = (char *)&v173 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for Date(0);
  v43 = *(_QWORD *)(v42 - 8);
  v196 = v42;
  v197 = v43;
  v44 = __chkstk_darwin(v42);
  v185 = (char *)&v173 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __chkstk_darwin(v44);
  v178 = (uint64_t)&v173 - v47;
  v48 = __chkstk_darwin(v46);
  v187 = (char *)&v173 - v49;
  __chkstk_darwin(v48);
  v195 = (char *)&v173 - v50;
  v51 = (char *)(a4 + 16);
  v52 = (uint64_t *)(a5 + 16);
  swift_beginAccess(a4 + 16, &v202, 32, 0);
  v53 = *(_QWORD *)(a4 + 16);
  if (*(_QWORD *)(v53 + 16) && (v54 = sub_100003FB0(a1), (v55 & 1) != 0))
  {
    v56 = *(_QWORD **)(*(_QWORD *)(v53 + 56) + 8 * v54);
    swift_endAccess(&v202);
    v204 = v56;
    swift_bridgeObjectRetain(v56);
  }
  else
  {
    swift_endAccess(&v202);
    v56 = &_swiftEmptySetSingleton;
    v204 = &_swiftEmptySetSingleton;
  }
  v177 = v56[2];
  swift_bridgeObjectRetain(a2);
  sub_100BBDA1C(v57);
  swift_beginAccess(v52, &v202, 32, 0);
  v58 = *v52;
  if (*(_QWORD *)(*v52 + 16))
  {
    v59 = sub_100003FB0(a1);
    v61 = v196;
    v60 = v197;
    if ((v62 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v197 + 16))(v41, *(_QWORD *)(v58 + 56) + *(_QWORD *)(v197 + 72) * v59, v196);
      v63 = 0;
    }
    else
    {
      v63 = 1;
    }
  }
  else
  {
    v63 = 1;
    v61 = v196;
    v60 = v197;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56))(v41, v63, 1, v61);
  swift_endAccess(&v202);
  v64 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 48))(v41, 1, v61);
  v65 = v195;
  if ((_DWORD)v64 == 1)
  {
    static Date.distantPast.getter(v64);
    sub_100004048((uint64_t)v41, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v195, v41, v61);
  }
  v66 = (uint64_t)v204;
  if (!v204[2] && (v190 & 1) != 0)
  {
    v67 = v193;
    v68 = v15;
    v69 = v184;
    v70 = v194;
    (*(void (**)(char *, uint64_t, uint64_t))(v193 + 16))(v184, v192 + *(int *)(v188 + 32), v194);
    v192 = v68;
    v71 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
    v72 = v180;
    v73 = v191;
    v71(v180, a1, v191);
    (*(void (**)(char *, char *, uint64_t))(v197 + 16))(v187, v65, v61);
    v74 = (uint64_t)v183;
    v71(v183, a1, v73);
    v75 = v189;
    v76 = swift_retain_n(v189, 2);
    v77 = Logger.logObject.getter(v76);
    v78 = static os_log_type_t.default.getter(v77);
    if (os_log_type_enabled(v77, (os_log_type_t)v78))
    {
      LODWORD(v188) = v78;
      v190 = v77;
      v79 = swift_slowAlloc(42, -1);
      v186 = (char *)swift_slowAlloc(32, -1);
      v201[0] = (uint64_t)v186;
      *(_DWORD *)v79 = 141558787;
      v202 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v79 + 4, v79 + 12);
      *(_WORD *)(v79 + 12) = 2081;
      v80 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v81 = dispatch thunk of CustomStringConvertible.description.getter(v73, v80);
      v202 = sub_100016940(v81, v82, v201);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v79 + 14, v79 + 22);
      swift_bridgeObjectRelease();
      v83 = *(void (**)(char *, uint64_t))(v192 + 8);
      v83(v72, v73);
      *(_WORD *)(v79 + 22) = 2048;
      v84 = v178;
      static Date.trustedNow.getter(v178);
      v85 = v187;
      v86 = Date.timeIntervalSince(_:)(v84);
      v87 = *(void (**)(uint64_t, uint64_t))(v197 + 8);
      v87(v84, v196);
      v202 = fabs(v86);
      v88 = v196;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v79 + 24, v79 + 32);
      v87((uint64_t)v85, v88);
      *(_WORD *)(v79 + 32) = 2048;
      swift_beginAccess(v75 + 16, &v202, 32, 0);
      v89 = *(_QWORD *)(v75 + 16);
      if (*(_QWORD *)(v89 + 16))
      {
        v90 = (uint64_t)v183;
        v91 = sub_100003FB0((uint64_t)v183);
        v92 = v184;
        if ((v93 & 1) != 0)
          v94 = *(_QWORD *)(*(_QWORD *)(v89 + 56) + 8 * v91);
        else
          v94 = 0;
      }
      else
      {
        v94 = 0;
        v92 = v184;
        v90 = (uint64_t)v183;
      }
      swift_endAccess(&v202);
      swift_release();
      v83((char *)v90, v191);
      v202 = v94;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v79 + 34, v79 + 42);
      swift_release();
      v169 = v190;
      _os_log_impl((void *)&_mh_execute_header, v190, (os_log_type_t)v188, "No location found for beacon %{private,mask.hash}s after %f seconds, %ld round trip(s).", (uint8_t *)v79, 0x2Au);
      v170 = v186;
      swift_arrayDestroy(v186, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v170, -1, -1);
      swift_slowDealloc(v79, -1, -1);

      (*(void (**)(char *, uint64_t))(v193 + 8))(v92, v194);
      v87((uint64_t)v195, v88);
    }
    else
    {
      swift_release();
      v99 = *(void (**)(uint64_t, uint64_t))(v192 + 8);
      v99(v74, v73);
      swift_release();

      v100 = *(void (**)(char *, uint64_t))(v197 + 8);
      v100(v187, v61);
      v99((uint64_t)v72, v73);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v70);
      v100(v195, v61);
    }
    return swift_bridgeObjectRelease();
  }
  v184 = v51;
  v187 = v37;
  v95 = (uint64_t *)(v179 + 16);
  sub_10005972C(v192, (uint64_t)v14, type metadata accessor for LocationFetcher);
  v96 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v97 = v191;
  v96(v28, a1, v191);
  if ((v190 & 1) != 0)
  {
    v98 = *(void (**)(char *, uint64_t))(v15 + 8);
    v98(v28, v97);
    sub_1000126B0((uint64_t)v14, type metadata accessor for LocationFetcher);
  }
  else
  {
    swift_beginAccess(v95, &v202, 0, 0);
    v101 = *v95;
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v101);
    v102 = sub_1003F3010(v66, (uint64_t)v28, v101);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v98 = *(void (**)(char *, uint64_t))(v15 + 8);
    v98(v28, v97);
    sub_1000126B0((uint64_t)v14, type metadata accessor for LocationFetcher);
    if ((v102 & 1) == 0)
    {
      v151 = (uint64_t)v174;
      v96(v174, a1, v97);
      v152 = (uint64_t)v204;
      v153 = v184;
      swift_beginAccess(v184, v201, 33, 0);
      swift_bridgeObjectRetain(v152);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v153);
      v198 = *(_QWORD *)v153;
      *(_QWORD *)v153 = 0x8000000000000000;
      sub_10010ABB4(v152, v151, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)v153 = v198;
      swift_bridgeObjectRelease();
      v98((char *)v151, v97);
      swift_endAccess(v201);
      v155 = v193;
      v156 = v176;
      v157 = v194;
      (*(void (**)(char *, uint64_t, uint64_t))(v193 + 16))(v176, v192 + *(int *)(v188 + 32), v194);
      v158 = v175;
      v159 = ((uint64_t (*)(char *, uint64_t, uint64_t))v96)(v175, a1, v97);
      v160 = Logger.logObject.getter(v159);
      v161 = v98;
      v162 = static os_log_type_t.default.getter(v160);
      if (os_log_type_enabled(v160, v162))
      {
        v163 = v158;
        v164 = swift_slowAlloc(32, -1);
        v165 = swift_slowAlloc(32, -1);
        v198 = v165;
        *(_DWORD *)v164 = 134218499;
        swift_beginAccess(&v204, v201, 0, 0);
        v200 = v204[2] - v177;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v164 + 4, v164 + 12);
        *(_WORD *)(v164 + 12) = 2160;
        v200 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v164 + 14, v164 + 22);
        *(_WORD *)(v164 + 22) = 2081;
        v166 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v167 = dispatch thunk of CustomStringConvertible.description.getter(v97, v166);
        v200 = sub_100016940(v167, v168, &v198);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v164 + 24, v164 + 32);
        swift_bridgeObjectRelease();
        v161(v163, v97);
        _os_log_impl((void *)&_mh_execute_header, v160, v162, "Appended %ld location results for beacon %{private,mask.hash}s.", (uint8_t *)v164, 0x20u);
        swift_arrayDestroy(v165, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v165, -1, -1);
        swift_slowDealloc(v164, -1, -1);

        (*(void (**)(char *, uint64_t))(v193 + 8))(v176, v194);
      }
      else
      {

        v161(v158, v97);
        (*(void (**)(char *, uint64_t))(v155 + 8))(v156, v157);
      }
      (*(void (**)(char *, uint64_t))(v197 + 8))(v195, v196);
      return swift_bridgeObjectRelease();
    }
  }
  v96(v182, a1, v97);
  swift_beginAccess(v95, v201, 33, 0);
  v103 = *v95;
  v104 = swift_isUniquelyReferenced_nonNull_native(*v95);
  *v95 = v103;
  v105 = v186;
  v190 = (os_log_t)v98;
  if ((v104 & 1) == 0)
  {
    v103 = sub_1007C84F8(0, *(_QWORD *)(v103 + 16) + 1, 1, v103);
    *v95 = v103;
  }
  v106 = (_QWORD *)(a9 + 16);
  v108 = *(_QWORD *)(v103 + 16);
  v107 = *(_QWORD *)(v103 + 24);
  if (v108 >= v107 >> 1)
  {
    v103 = sub_1007C84F8(v107 > 1, v108 + 1, 1, v103);
    *v95 = v103;
  }
  *(_QWORD *)(v103 + 16) = v108 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v103+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v108, v182, v97);
  swift_endAccess(v201);
  v109 = sub_10001A9A8(&qword_1010FB188);
  v110 = sub_10001A9A8(&qword_1010FB190);
  v111 = *(_QWORD *)(v110 - 8);
  v112 = *(_QWORD *)(v111 + 72);
  v113 = *(unsigned __int8 *)(v111 + 80);
  v114 = (v113 + 32) & ~v113;
  v115 = swift_allocObject(v109, v114 + v112, v113 | 7);
  *(_OWORD *)(v115 + 16) = xmmword_100E22B00;
  v116 = v115 + v114;
  v117 = *(int *)(v110 + 48);
  v96((char *)v116, a1, v97);
  v118 = v204;
  *(_QWORD *)(v116 + v117) = v204;
  swift_bridgeObjectRetain(v118);
  v119 = sub_1006B968C(v115);
  v120 = v192;
  v121 = sub_1003F5130(v119);
  swift_bridgeObjectRelease();
  swift_beginAccess(v106, v201, 33, 0);
  v122 = swift_isUniquelyReferenced_nonNull_native(*v106);
  v198 = *v106;
  *v106 = 0x8000000000000000;
  sub_10041B810(v121, (uint64_t)sub_10041B770, 0, v122, (uint64_t)&v198);
  *v106 = v198;
  swift_bridgeObjectRelease();
  swift_endAccess(v201);
  swift_beginAccess(v184, v201, 33, 0);
  sub_10010346C(a1);
  swift_endAccess(v201);
  swift_bridgeObjectRelease();
  v124 = v193;
  v123 = v194;
  v125 = v187;
  (*(void (**)(char *, uint64_t, uint64_t))(v193 + 16))(v187, v120 + *(int *)(v188 + 32), v194);
  v96(v105, a1, v97);
  v126 = v196;
  v127 = v195;
  (*(void (**)(char *, char *, uint64_t))(v197 + 16))(v185, v195, v196);
  v128 = (uint64_t)v181;
  v96(v181, a1, v97);
  v129 = swift_retain_n(v189, 2);
  v130 = Logger.logObject.getter(v129);
  v131 = static os_log_type_t.default.getter(v130);
  if (os_log_type_enabled(v130, (os_log_type_t)v131))
  {
    LODWORD(v192) = v131;
    v188 = (uint64_t)v130;
    v132 = swift_slowAlloc(52, -1);
    v133 = swift_slowAlloc(32, -1);
    v200 = v133;
    *(_DWORD *)v132 = 134219011;
    swift_beginAccess(&v204, v201, 0, 0);
    v198 = v204[2] - v177;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, v199, v132 + 4, v132 + 12);
    *(_WORD *)(v132 + 12) = 2160;
    v198 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, v199, v132 + 14, v132 + 22);
    *(_WORD *)(v132 + 22) = 2081;
    v134 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v135 = v186;
    v136 = dispatch thunk of CustomStringConvertible.description.getter(v97, v134);
    v198 = sub_100016940(v136, v137, &v200);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, v199, v132 + 24, v132 + 32);
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v190)(v135, v97);
    *(_WORD *)(v132 + 32) = 2048;
    v138 = v178;
    static Date.trustedNow.getter(v178);
    v139 = v185;
    v140 = Date.timeIntervalSince(_:)(v185);
    v141 = *(void (**)(uint64_t, uint64_t))(v197 + 8);
    v141(v138, v126);
    v198 = fabs(v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, v199, v132 + 34, v132 + 42);
    v141((uint64_t)v139, v126);
    *(_WORD *)(v132 + 42) = 2048;
    v142 = v189;
    swift_beginAccess(v189 + 16, &v198, 32, 0);
    v143 = *(_QWORD *)(v142 + 16);
    if (*(_QWORD *)(v143 + 16))
    {
      v144 = (uint64_t)v181;
      v145 = sub_100003FB0((uint64_t)v181);
      v146 = v188;
      if ((v147 & 1) != 0)
        v148 = *(_QWORD *)(*(_QWORD *)(v143 + 56) + 8 * v145);
      else
        v148 = 0;
      v171 = v190;
    }
    else
    {
      v148 = 0;
      v144 = (uint64_t)v181;
      v171 = v190;
      v146 = v188;
    }
    swift_endAccess(&v198);
    swift_release();
    ((void (*)(uint64_t, uint64_t))v171)(v144, v191);
    v198 = v148;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, v199, v132 + 44, v132 + 52);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v146, (os_log_type_t)v192, "Terminated fetch with %ld results and cleared beacon %{private,mask.hash}s after %f seconds, %ld round trip(s).", (uint8_t *)v132, 0x34u);
    swift_arrayDestroy(v133, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v133, -1, -1);
    swift_slowDealloc(v132, -1, -1);

    (*(void (**)(char *, uint64_t))(v193 + 8))(v187, v194);
    v141((uint64_t)v195, v196);
  }
  else
  {
    swift_release();
    v149 = v190;
    ((void (*)(uint64_t, uint64_t))v190)(v128, v97);
    swift_release();

    v150 = *(void (**)(char *, uint64_t))(v197 + 8);
    v150(v185, v126);
    ((void (*)(char *, uint64_t))v149)(v186, v97);
    (*(void (**)(char *, uint64_t))(v124 + 8))(v125, v123);
    v150(v127, v126);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003F3010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  void (*v62)(uint64_t *, NSObject *, uint64_t);
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char v80;
  char v81;
  char *v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  NSObject *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  void (*v94)(NSObject *, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  _BOOL4 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  void (*v120)(uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  _BOOL4 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  NSObject *v135;
  os_log_type_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void (*v143)(char *, uint64_t);
  uint64_t v144;
  void (*v145)(uint64_t *, NSObject *, uint64_t);
  NSObject *v146;
  uint64_t result;
  uint64_t *v148;
  void (*v149)(uint64_t, uint64_t, uint64_t);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  NSObject *v167;
  os_log_type_t v168;
  BOOL v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  void (*v182)(char *, uint64_t);
  unint64_t v183;
  char *v184;
  uint64_t v185;
  NSObject *v186;
  os_log_type_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  __n128 v197;
  uint64_t *v198;
  char *v199;
  char *v200;
  unint64_t v201;
  char v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  NSObject *v208;
  NSObject *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  char isUniquelyReferenced_nonNull_native;
  int v216;
  char *v217;
  char *v218;
  uint64_t v219;
  NSObject *v220;
  os_log_type_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  NSObject *v231;
  os_log_type_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  void (*v239)(NSObject *, uint64_t);
  uint64_t v240;
  void (*v241)(uint64_t *, NSObject *, uint64_t);
  NSObject *v242;
  uint64_t v243;
  char *v244;
  unsigned __int8 *v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  unint64_t v249;
  char v250;
  int v251;
  uint64_t v252;
  NSObject *v253;
  os_log_type_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  void (*v261)(char *, uint64_t);
  char v262;
  void (*v263)(char *, uint64_t);
  char *v264;
  void (*v265)(uint64_t *, NSObject *, uint64_t);
  NSObject *v266;
  void (*v267)(NSObject *, uint64_t);
  NSObject *v268;
  uint64_t v269;
  __n128 v270;
  char *v271;
  __n128 v272;
  char *v273;
  char *v274;
  char *v275;
  char *v276;
  char *v277;
  uint64_t v278;
  __int128 v279;
  char *v280;
  char *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  char *v286;
  char *v287;
  char *v288;
  char *v289;
  char *v290;
  uint64_t *v291;
  char *v292;
  uint64_t v293;
  void (*v294)(uint64_t *, NSObject *, uint64_t);
  NSObject *v295;
  _QWORD *v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char v303[8];
  __int128 v304;
  uint64_t v305;
  __int128 v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;

  v4 = v3;
  v278 = a3;
  v299 = a2;
  v301 = type metadata accessor for Logger(0);
  v296 = *(_QWORD **)(v301 - 8);
  v6 = __chkstk_darwin(v301);
  v291 = (uint64_t *)((char *)&v268 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __chkstk_darwin(v6);
  v290 = (char *)&v268 - v9;
  v10 = __chkstk_darwin(v8);
  v289 = (char *)&v268 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v268 - v13;
  v15 = __chkstk_darwin(v12);
  v276 = (char *)&v268 - v16;
  v17 = __chkstk_darwin(v15);
  v286 = (char *)&v268 - v18;
  v19 = __chkstk_darwin(v17);
  v287 = (char *)&v268 - v20;
  v21 = __chkstk_darwin(v19);
  v275 = (char *)&v268 - v22;
  __chkstk_darwin(v21);
  *(_QWORD *)&v279 = (char *)&v268 - v23;
  v24 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v24);
  v282 = (char *)&v268 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v300 = type metadata accessor for UUID(0);
  v297 = *(_QWORD **)(v300 - 8);
  v26 = __chkstk_darwin(v300);
  v288 = (char *)&v268 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v30 = (uint64_t (*)(uint64_t))((char *)&v268 - v29);
  v31 = __chkstk_darwin(v28);
  v285 = (char *)&v268 - v32;
  v33 = __chkstk_darwin(v31);
  v271 = (char *)&v268 - v34;
  v35 = __chkstk_darwin(v33);
  v274 = (char *)&v268 - v36;
  v37 = __chkstk_darwin(v35);
  v281 = (char *)&v268 - v38;
  v39 = __chkstk_darwin(v37);
  v292 = (char *)&v268 - v40;
  v41 = __chkstk_darwin(v39);
  v273 = (char *)&v268 - v42;
  v43 = __chkstk_darwin(v41);
  v284 = (uint64_t)&v268 - v44;
  v45 = __chkstk_darwin(v43);
  v277 = (char *)&v268 - v46;
  v47 = __chkstk_darwin(v45);
  v280 = (char *)&v268 - v48;
  __chkstk_darwin(v47);
  v295 = ((char *)&v268 - v49);
  v293 = type metadata accessor for LocationFetcher(0);
  v50 = __chkstk_darwin(v293);
  v283 = (uint64_t)&v268 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  v294 = (void (*)(uint64_t *, NSObject *, uint64_t))((char *)&v268 - v52);
  v53 = type metadata accessor for RawSearchResult(0);
  v54 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v56 = (char *)&v268 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9D08 != -1)
    goto LABEL_80;
LABEL_2:
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v272.n128_u64[0] = 0;
  v298 = sub_100C1B1C0(v309);
  swift_bridgeObjectRelease();
  v57 = v4 + 3;
  v58 = (uint64_t)v4;
  v60 = v4[6];
  v59 = v4[7];
  sub_10001AA44(v57, v60);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v59 + 40))(v60, v59) & 1) != 0)
  {
    v61 = v296;
    v62 = (void (*)(uint64_t *, NSObject *, uint64_t))v296[2];
    v63 = v290;
    v295 = (v58 + *(int *)(v293 + 32));
    v64 = v301;
    v294 = v62;
    ((void (*)(char *))v62)(v290);
    v65 = v297;
    v66 = v300;
    v293 = v297[2];
    v67 = ((uint64_t (*)(uint64_t (*)(uint64_t), uint64_t, uint64_t))v293)(v30, v299, v300);
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.default.getter(v68);
    if (os_log_type_enabled(v68, v69))
    {
      v70 = swift_slowAlloc(22, -1);
      v71 = swift_slowAlloc(32, -1);
      v309 = v71;
      *(_DWORD *)v70 = 141558275;
      *(_QWORD *)&v306 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, (char *)&v306 + 8, v70 + 4, v70 + 12);
      *(_WORD *)(v70 + 12) = 2081;
      v72 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v73 = dispatch thunk of CustomStringConvertible.description.getter(v300, v72);
      *(_QWORD *)&v306 = sub_100016940(v73, v74, &v309);
      v64 = v301;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, (char *)&v306 + 8, v70 + 14, v70 + 22);
      swift_bridgeObjectRelease();
      v297 = (_QWORD *)v65[1];
      ((void (*)(uint64_t (*)(uint64_t), uint64_t))v297)(v30, v300);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Exhaustive termination policy in effect for %{private,mask.hash}s.", (uint8_t *)v70, 0x16u);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      v75 = v71;
      v66 = v300;
      swift_slowDealloc(v75, -1, -1);
      swift_slowDealloc(v70, -1, -1);

      v76 = (_QWORD *)v296[1];
      v77 = v290;
    }
    else
    {
      v297 = (_QWORD *)v65[1];
      ((void (*)(uint64_t (*)(uint64_t), uint64_t))v297)(v30, v66);

      v76 = (_QWORD *)v61[1];
      v77 = v63;
    }
    v296 = v76;
    ((void (*)(char *, uint64_t))v76)(v77, v64);
    v99 = v288;
    v100 = *(_QWORD *)(a1 + 16);
    v101 = v298;
    v102 = v100 >= v298;
    v103 = (uint64_t)v291;
    v294(v291, v295, v64);
    v104 = ((uint64_t (*)(char *, uint64_t, uint64_t))v293)(v99, v299, v66);
    v105 = Logger.logObject.getter(v104);
    v106 = static os_log_type_t.default.getter(v105);
    if (os_log_type_enabled(v105, v106))
    {
      v107 = v100 >= v101;
      v108 = swift_slowAlloc(28, -1);
      v109 = swift_slowAlloc(32, -1);
      v309 = v109;
      *(_DWORD *)v108 = 67109635;
      LODWORD(v306) = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, (char *)&v306 + 4, v108 + 4, v108 + 8);
      *(_WORD *)(v108 + 8) = 2160;
      *(_QWORD *)&v306 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, (char *)&v306 + 8, v108 + 10, v108 + 18);
      *(_WORD *)(v108 + 18) = 2081;
      v110 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v111 = dispatch thunk of CustomStringConvertible.description.getter(v66, v110);
      *(_QWORD *)&v306 = sub_100016940(v111, v112, &v309);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, (char *)&v306 + 8, v108 + 20, v108 + 28);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v297)(v99, v66);
      _os_log_impl((void *)&_mh_execute_header, v105, v106, "Found enough results: %{BOOL}d to terminate beacon: %{private,mask.hash}s.", (uint8_t *)v108, 0x1Cu);
      swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v109, -1, -1);
      swift_slowDealloc(v108, -1, -1);

      v113 = (uint64_t)v291;
      v114 = v301;
    }
    else
    {
      ((void (*)(char *, uint64_t))v297)(v99, v66);

      v113 = v103;
      v114 = v64;
    }
    ((void (*)(uint64_t, uint64_t))v296)(v113, v114);
    return v102 & 1;
  }
  v291 = (uint64_t *)v58;
  v270.n128_u64[0] = (unint64_t)v14;
  v78 = sub_1003B2D14(a1);
  v14 = v79;
  v81 = v80;
  swift_bridgeObjectRetain(a1);
  if ((v81 & 1) != 0)
    goto LABEL_82;
  v4 = (_QWORD *)(a1 + 56);
  v30 = type metadata accessor for RawSearchResult;
  while (1)
  {
    v84 = *(_DWORD *)(a1 + 36);
    if (v84 != (_DWORD)v14)
    {
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      swift_once(&qword_1010E9D08, sub_10059A6E0);
      goto LABEL_2;
    }
    v85 = 1 << *(_BYTE *)(a1 + 32);
    if (v78 == v85)
      goto LABEL_17;
    if (v78 < 0 || v78 >= v85)
      goto LABEL_78;
    if (((*(_QWORD *)((char *)v4 + (((unint64_t)v78 >> 3) & 0xFFFFFFFFFFFFF8)) >> v78) & 1) == 0)
      goto LABEL_79;
    v86 = a1;
    sub_10005972C(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v54 + 72) * v78, (uint64_t)v56, type metadata accessor for RawSearchResult);
    v87 = v56[*(int *)(v53 + 36)];
    if (v87 != 12)
      break;
    sub_1000126B0((uint64_t)v56, type metadata accessor for RawSearchResult);
LABEL_8:
    a1 = v86;
    v78 = sub_1003B2DB8(v78, v14, 0, v86);
    v14 = v82;
    if ((v83 & 1) != 0)
      goto LABEL_82;
  }
  sub_1000126B0((uint64_t)v56, type metadata accessor for RawSearchResult);
  if (v87 == 13)
    goto LABEL_8;
  a1 = v86;
  v84 = *(_DWORD *)(v86 + 36);
  v85 = 1 << *(_BYTE *)(v86 + 32);
LABEL_17:
  v88 = sub_10041D08C(v78, (uint64_t)v14, 0, v85, v84, 0, a1, (uint64_t (*)(char *))sub_10040736C);
  swift_bridgeObjectRelease();
  v89 = *(_QWORD *)(a1 + 16);
  v90 = v89 - (_QWORD)v88;
  v92 = v299;
  v91 = v300;
  v93 = v297;
  if (__OFSUB__(v89, v88))
  {
    __break(1u);
LABEL_82:
    __break(1u);
  }
  sub_10005972C((uint64_t)v291, (uint64_t)v294, type metadata accessor for LocationFetcher);
  v94 = (void (*)(NSObject *, uint64_t, uint64_t))v93[2];
  v94(v295, v92, v91);
  sub_10080B648(v92, (uint64_t)&v306);
  if (!v307)
  {
    sub_100004048((uint64_t)&v306, (uint64_t *)&unk_1010EE310);
LABEL_34:
    v131 = v296;
    v132 = v289;
    ((void (*)(char *, uint64_t, uint64_t))v296[2])(v289, (uint64_t)v291 + *(int *)(v293 + 32), v301);
    v133 = v285;
    v134 = ((uint64_t (*)(char *, uint64_t, uint64_t))v94)(v285, v92, v91);
    v135 = Logger.logObject.getter(v134);
    v136 = static os_log_type_t.default.getter(v135);
    if (os_log_type_enabled(v135, v136))
    {
      v137 = swift_slowAlloc(22, -1);
      v282 = (char *)v90;
      v138 = v137;
      v139 = swift_slowAlloc(32, -1);
      v309 = v139;
      *(_DWORD *)v138 = 141558275;
      *(_QWORD *)&v306 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, (char *)&v306 + 8, v138 + 4, v138 + 12);
      *(_WORD *)(v138 + 12) = 2081;
      v140 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v141 = dispatch thunk of CustomStringConvertible.description.getter(v300, v140);
      *(_QWORD *)&v306 = sub_100016940(v141, v142, &v309);
      v91 = v300;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, (char *)&v306 + 8, v138 + 14, v138 + 22);
      swift_bridgeObjectRelease();
      v143 = (void (*)(char *, uint64_t))v297[1];
      v143(v133, v91);
      _os_log_impl((void *)&_mh_execute_header, v135, v136, "Single-beacon termination policy in effect for %{private,mask.hash}s.", (uint8_t *)v138, 0x16u);
      swift_arrayDestroy(v139, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v139, -1, -1);
      v144 = v138;
      v90 = (uint64_t)v282;
      swift_slowDealloc(v144, -1, -1);

      ((void (*)(char *, uint64_t))v131[1])(v289, v301);
    }
    else
    {
      v143 = (void (*)(char *, uint64_t))v297[1];
      v143(v133, v91);

      ((void (*)(char *, uint64_t))v131[1])(v132, v301);
    }
    v145 = v294;
    v146 = v295;
    v102 = sub_1004073A4(v88, v90, (uint64_t)_swiftEmptyArrayStorage, v298, v294, v295);
    v143((char *)v146, v91);
    sub_1000126B0((uint64_t)v145, type metadata accessor for LocationFetcher);
    return v102 & 1;
  }
  v290 = (char *)v94;
  sub_10000F9FC(&v306, (uint64_t)&v309);
  v95 = v310;
  v96 = v311;
  sub_10001AA44(&v309, v310);
  v97 = v95;
  v98 = (uint64_t)v282;
  (*(void (**)(uint64_t, uint64_t))(v96 + 192))(v97, v96);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v93[6])(v98, 1, v91) == 1)
  {
    sub_100004048(v98, &qword_1010ED860);
    goto LABEL_33;
  }
  v115 = (uint64_t)v280;
  ((void (*)(char *, uint64_t, uint64_t))v93[4])(v280, v98, v91);
  sub_1008259D0(v115, (uint64_t)&v304);
  if (!v305)
  {
    ((void (*)(uint64_t, uint64_t))v93[1])(v115, v91);
    sub_100004048((uint64_t)&v304, (uint64_t *)&unk_101107010);
LABEL_33:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v309);
    v94 = (void (*)(NSObject *, uint64_t, uint64_t))v290;
    goto LABEL_34;
  }
  sub_10000F9FC(&v304, (uint64_t)&v306);
  v116 = v307;
  v117 = v308;
  sub_10001AA44(&v306, v307);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(v117 + 24))(v116, v117) < 2u)
  {
    ((void (*)(uint64_t, uint64_t))v93[1])(v115, v91);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v306);
    goto LABEL_33;
  }
  v118 = (char *)v296[2];
  v288 = (char *)v291 + *(int *)(v293 + 32);
  v289 = v118;
  ((void (*)(_QWORD))v118)(v279);
  v119 = v277;
  v120 = (void (*)(uint64_t, uint64_t, uint64_t))v290;
  v121 = ((uint64_t (*)(char *, uint64_t, uint64_t))v290)(v277, v92, v91);
  v122 = Logger.logObject.getter(v121);
  v123 = static os_log_type_t.default.getter(v122);
  LODWORD(v285) = v123;
  v124 = os_log_type_enabled(v122, v123);
  v268 = v88;
  if (v124)
  {
    v125 = swift_slowAlloc(22, -1);
    v126 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v304 = v126;
    *(_DWORD *)v125 = 141558275;
    v302 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v303, v125 + 4, v125 + 12);
    *(_WORD *)(v125 + 12) = 2081;
    v127 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v128 = dispatch thunk of CustomStringConvertible.description.getter(v300, v127);
    v302 = sub_100016940(v128, v129, (uint64_t *)&v304);
    v92 = v299;
    v91 = v300;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v303, v125 + 14, v125 + 22);
    swift_bridgeObjectRelease();
    v293 = v93[1];
    ((void (*)(char *, uint64_t))v293)(v119, v91);
    _os_log_impl((void *)&_mh_execute_header, v122, (os_log_type_t)v285, "Multipart termination policy for %{private,mask.hash}s.", (uint8_t *)v125, 0x16u);
    swift_arrayDestroy(v126, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v126, -1, -1);
    v130 = v125;
    v120 = (void (*)(uint64_t, uint64_t, uint64_t))v290;
    swift_slowDealloc(v130, -1, -1);
  }
  else
  {
    v293 = v93[1];
    ((void (*)(char *, uint64_t))v293)(v119, v91);
  }

  v296 = (_QWORD *)v296[1];
  ((void (*)(_QWORD, uint64_t))v296)(v279, v301);
  v148 = v291;
  sub_10005972C((uint64_t)v291, v283, type metadata accessor for LocationFetcher);
  v120(v284, v92, v91);
  v149 = v120;
  v150 = v307;
  v151 = v308;
  sub_10001AA44(&v306, v307);
  v152 = (*(uint64_t (**)(uint64_t, uint64_t))(v151 + 16))(v150, v151);
  v153 = sub_10001A9A8(&qword_1011003C0);
  v154 = *((unsigned __int8 *)v93 + 80);
  v155 = (v154 + 32) & ~v154;
  v156 = swift_allocObject(v153, v155 + v93[9], v154 | 7);
  v279 = xmmword_100E22B00;
  *(_OWORD *)(v156 + 16) = xmmword_100E22B00;
  v149(v156 + v155, v92, v91);
  *(_QWORD *)&v304 = v278;
  swift_bridgeObjectRetain(v278);
  sub_1003028FC(v156);
  v157 = sub_100640734(v304, v152);
  swift_bridgeObjectRelease();
  if (!v157[2])
  {
    swift_release();
    v182 = (void (*)(char *, uint64_t))v293;
    ((void (*)(uint64_t, uint64_t))v293)(v284, v91);
    sub_1000126B0(v283, type metadata accessor for LocationFetcher);
    v183 = v270.n128_u64[0];
    ((void (*)(unint64_t, char *, uint64_t))v289)(v270.n128_u64[0], v288, v301);
    v184 = v271;
    v185 = ((uint64_t (*)(char *, uint64_t, uint64_t))v149)(v271, v92, v91);
    v186 = Logger.logObject.getter(v185);
    v187 = static os_log_type_t.default.getter(v186);
    if (os_log_type_enabled(v186, v187))
    {
      v188 = v90;
      v189 = swift_slowAlloc(22, -1);
      v190 = v184;
      v191 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v304 = v191;
      *(_DWORD *)v189 = 141558275;
      v302 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v303, v189 + 4, v189 + 12);
      *(_WORD *)(v189 + 12) = 2081;
      v192 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v193 = dispatch thunk of CustomStringConvertible.description.getter(v300, v192);
      v302 = sub_100016940(v193, v194, (uint64_t *)&v304);
      v91 = v300;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v303, v189 + 14, v189 + 22);
      swift_bridgeObjectRelease();
      v182(v190, v91);
      _os_log_impl((void *)&_mh_execute_header, v186, v187, "Multipart termination policy found all remaining peers for %{private,mask.hash}s - applying single-beacon policy.", (uint8_t *)v189, 0x16u);
      swift_arrayDestroy(v191, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v191, -1, -1);
      v195 = v189;
      v90 = v188;
      swift_slowDealloc(v195, -1, -1);

      v196 = v270.n128_u64[0];
    }
    else
    {
      v182(v184, v91);

      v196 = v183;
    }
    ((void (*)(unint64_t, uint64_t))v296)(v196, v301);
    v264 = v280;
    v265 = v294;
    v266 = v295;
    v102 = sub_1004073A4(v268, v90, (uint64_t)_swiftEmptyArrayStorage, v298, v294, v295);
    v182(v264, v91);
    v182((char *)v266, v91);
    sub_1000126B0((uint64_t)v265, type metadata accessor for LocationFetcher);
    goto LABEL_76;
  }
  v158 = v284;
  v159 = v283;
  v282 = (char *)v90;
  v160 = sub_100408098((uint64_t)&v309, *v148);
  swift_retain();
  v161 = v272.n128_u64[0];
  v162 = (char *)sub_10041E164((uint64_t)v160, (uint64_t)v157);
  if (v161)
  {
    swift_release();
    swift_errorRelease(v161);
    v267 = (void (*)(NSObject *, uint64_t))v293;
    ((void (*)(uint64_t, uint64_t))v293)(v158, v91);
    sub_1000126B0(v159, type metadata accessor for LocationFetcher);
    v267(v295, v91);
    result = sub_1000126B0((uint64_t)v294, type metadata accessor for LocationFetcher);
    __break(1u);
  }
  else
  {
    v163 = v162;
    swift_bridgeObjectRelease();
    swift_release_n(v157, 2);
    v164 = v275;
    ((void (*)(char *, char *, uint64_t))v289)(v275, v288, v301);
    v165 = v273;
    ((void (*)(char *, uint64_t, uint64_t))v290)(v273, v92, v91);
    swift_bridgeObjectRetain_n(v163, 2);
    v167 = Logger.logObject.getter(v166);
    v168 = static os_log_type_t.default.getter(v167);
    v169 = os_log_type_enabled(v167, v168);
    v285 = v163;
    if (v169)
    {
      v170 = swift_slowAlloc(32, -1);
      v171 = v165;
      v172 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v304 = v172;
      *(_DWORD *)v170 = 141558531;
      v302 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v303, v170 + 4, v170 + 12);
      *(_WORD *)(v170 + 12) = 2081;
      v173 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v174 = dispatch thunk of CustomStringConvertible.description.getter(v91, v173);
      v302 = sub_100016940(v174, v175, (uint64_t *)&v304);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v303, v170 + 14, v170 + 22);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v293)(v171, v91);
      *(_WORD *)(v170 + 22) = 2082;
      swift_bridgeObjectRetain(v285);
      v176 = Array.description.getter(v285, &type metadata for UInt8);
      v178 = v177;
      swift_bridgeObjectRelease();
      v179 = v176;
      v163 = v285;
      v302 = sub_100016940(v179, v178, (uint64_t *)&v304);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v303, v170 + 24, v170 + 32);
      swift_bridgeObjectRelease_n(v163, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v167, v168, "Counting multipart results for %{private,mask.hash}s, multipart: %{public}s.", (uint8_t *)v170, 0x20u);
      swift_arrayDestroy(v172, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v172, -1, -1);
      swift_slowDealloc(v170, -1, -1);

      ((void (*)(char *, uint64_t))v296)(v275, v301);
    }
    else
    {
      ((void (*)(char *, uint64_t))v293)(v165, v91);

      swift_bridgeObjectRelease_n(v163, 2);
      ((void (*)(char *, uint64_t))v296)(v164, v301);
    }
    v180 = v298;
    v181 = v282;
    v291 = (uint64_t *)*((_QWORD *)v163 + 2);
    if (v291)
    {
      v277 = v303;
      v275 = (char *)&v302 + 1;
      v273 = (char *)&v302 + 4;
      v197 = swift_bridgeObjectRetain(v163);
      v198 = 0;
      v297 = _swiftEmptyDictionarySingleton;
      v197.n128_u64[0] = 141558787;
      v272 = v197;
      v271 = (char *)&type metadata for Any + 8;
      v197.n128_u64[0] = 141558275;
      v270 = v197;
      v199 = v287;
      v200 = v292;
      v269 = a1;
      do
      {
        v201 = *((char *)v198 + (_QWORD)v163 + 32);
        if (v201 >= 3)
        {
          ((void (*)(char *, char *, uint64_t))v289)(v199, v288, v301);
          v230 = ((uint64_t (*)(char *, uint64_t, uint64_t))v290)(v200, v299, v91);
          v231 = Logger.logObject.getter(v230);
          v232 = static os_log_type_t.error.getter(v231);
          if (os_log_type_enabled(v231, v232))
          {
            v233 = swift_slowAlloc(22, -1);
            v234 = swift_slowAlloc(32, -1);
            *(_QWORD *)&v304 = v234;
            *(_DWORD *)v233 = v270.n128_u32[0];
            *(_QWORD *)(v233 + 4) = 1752392040;
            *(_WORD *)(v233 + 12) = 2081;
            v235 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v236 = dispatch thunk of CustomStringConvertible.description.getter(v91, v235);
            *(_QWORD *)(v233 + 14) = sub_100016940(v236, v237, (uint64_t *)&v304);
            swift_bridgeObjectRelease();
            ((void (*)(char *, uint64_t))v293)(v292, v91);
            _os_log_impl((void *)&_mh_execute_header, v231, v232, "Could not determine multipart configuration for %{private,mask.hash}s - partId out of bounds.", (uint8_t *)v233, 0x16u);
            swift_arrayDestroy(v234, 1, (char *)&type metadata for Any + 8);
            v180 = v298;
            swift_slowDealloc(v234, -1, -1);
            v238 = v233;
            v200 = v292;
            v199 = v287;
            swift_slowDealloc(v238, -1, -1);
          }
          else
          {
            ((void (*)(char *, uint64_t))v293)(v200, v91);
          }

          ((void (*)(char *, uint64_t))v296)(v199, v301);
        }
        else
        {
          v202 = *((_BYTE *)v198 + (_QWORD)v163 + 32);
          v203 = dword_100E3D2D8[v201] | dword_100E3D2CC[v201];
          v204 = v91;
          v205 = v301;
          v206 = v283;
          v207 = v284;
          sub_100407A78(v203, 0, a1, v283, v284);
          v209 = v208;
          sub_100407A78(v203, 1, a1, v206, v207);
          v211 = v210;
          v212 = sub_10001A9A8(&qword_1010ED318);
          v213 = swift_allocObject(v212, 33, 7);
          *(_OWORD *)(v213 + 16) = v279;
          *(_BYTE *)(v213 + 32) = v202;
          LOBYTE(v211) = sub_1004073A4(v209, v211, v213, v180, v294, v295);
          swift_bridgeObjectRelease();
          v214 = v297;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v297);
          *(_QWORD *)&v304 = v214;
          v216 = v211 & 1;
          v217 = v286;
          sub_10010CA14(v216, v202, isUniquelyReferenced_nonNull_native);
          v297 = (_QWORD *)v304;
          swift_bridgeObjectRelease();
          ((void (*)(char *, char *, uint64_t))v289)(v217, v288, v205);
          v218 = v281;
          v219 = ((uint64_t (*)(char *, uint64_t, uint64_t))v290)(v281, v299, v204);
          v220 = Logger.logObject.getter(v219);
          v221 = static os_log_type_t.default.getter(v220);
          if (os_log_type_enabled(v220, v221))
          {
            v222 = swift_slowAlloc(31, -1);
            LODWORD(v278) = v216;
            v223 = v218;
            v224 = v222;
            v225 = swift_slowAlloc(32, -1);
            *(_QWORD *)&v304 = v225;
            *(_DWORD *)v224 = v272.n128_u32[0];
            v302 = 1752392040;
            v226 = v277;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v277, v224 + 4, v224 + 12);
            *(_WORD *)(v224 + 12) = 2081;
            v227 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v228 = dispatch thunk of CustomStringConvertible.description.getter(v300, v227);
            v302 = sub_100016940(v228, v229, (uint64_t *)&v304);
            v91 = v300;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v226, v224 + 14, v224 + 22);
            swift_bridgeObjectRelease();
            ((void (*)(char *, uint64_t))v293)(v223, v91);
            *(_WORD *)(v224 + 22) = 256;
            LOBYTE(v302) = v202;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v275, v224 + 24, v224 + 25);
            *(_WORD *)(v224 + 25) = 1024;
            LODWORD(v302) = v278;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v273, v224 + 27, v224 + 31);
            _os_log_impl((void *)&_mh_execute_header, v220, v221, "Multipart termination for %{private,mask.hash}s part %hhu foundEnoughConnectedPositions: %{BOOL}d.", (uint8_t *)v224, 0x1Fu);
            swift_arrayDestroy(v225, 1, v271);
            swift_slowDealloc(v225, -1, -1);
            swift_slowDealloc(v224, -1, -1);

            ((void (*)(char *, uint64_t))v296)(v286, v301);
            v180 = v298;
            a1 = v269;
            v199 = v287;
            v200 = v292;
          }
          else
          {
            ((void (*)(char *, uint64_t))v293)(v218, v204);

            ((void (*)(char *, uint64_t))v296)(v217, v205);
            v180 = v298;
            a1 = v269;
            v199 = v287;
            v200 = v292;
            v91 = v204;
          }
          v163 = v285;
        }
        v198 = (uint64_t *)((char *)v198 + 1);
      }
      while (v291 != v198);
      swift_bridgeObjectRelease();
      v181 = v282;
    }
    else
    {
      v297 = _swiftEmptyDictionarySingleton;
    }
    v239 = (void (*)(NSObject *, uint64_t))v293;
    ((void (*)(uint64_t, uint64_t))v293)(v284, v91);
    sub_1000126B0(v283, type metadata accessor for LocationFetcher);
    v240 = (uint64_t)v181;
    v241 = v294;
    v242 = v295;
    LODWORD(v300) = sub_1004073A4(v268, v240, (uint64_t)_swiftEmptyArrayStorage, v180, v294, v295);
    v239(v242, v91);
    sub_1000126B0((uint64_t)v241, type metadata accessor for LocationFetcher);
    v243 = *((_QWORD *)v163 + 2);
    v244 = v274;
    if (v243)
    {
      v245 = (unsigned __int8 *)(v163 + 32);
      v246 = v297[2];
      v247 = v276;
      v248 = v299;
      while (v246)
      {
        v249 = sub_1005191B0(*v245);
        if ((v250 & 1) == 0 || *(_BYTE *)(v297[7] + v249) != 1)
          break;
        ++v245;
        if (!--v243)
        {
          v251 = 1;
          goto LABEL_70;
        }
      }
      v251 = 0;
    }
    else
    {
      v251 = 1;
      v247 = v276;
      v248 = v299;
    }
LABEL_70:
    swift_bridgeObjectRelease();
    ((void (*)(char *, char *, uint64_t))v289)(v247, v288, v301);
    v252 = ((uint64_t (*)(char *, uint64_t, uint64_t))v290)(v244, v248, v91);
    v253 = Logger.logObject.getter(v252);
    v254 = static os_log_type_t.default.getter(v253);
    if (os_log_type_enabled(v253, v254))
    {
      v255 = swift_slowAlloc(34, -1);
      v256 = v91;
      v257 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v304 = v257;
      *(_DWORD *)v255 = 141558787;
      v302 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v303, v255 + 4, v255 + 12);
      *(_WORD *)(v255 + 12) = 2081;
      v258 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v259 = dispatch thunk of CustomStringConvertible.description.getter(v256, v258);
      v302 = sub_100016940(v259, v260, (uint64_t *)&v304);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, v303, v255 + 14, v255 + 22);
      swift_bridgeObjectRelease();
      v261 = (void (*)(char *, uint64_t))v293;
      ((void (*)(char *, uint64_t))v293)(v244, v256);
      *(_WORD *)(v255 + 22) = 1024;
      v262 = v300;
      LODWORD(v302) = v300 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, (char *)&v302 + 4, v255 + 24, v255 + 28);
      *(_WORD *)(v255 + 28) = 1024;
      LODWORD(v302) = v251;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, (char *)&v302 + 4, v255 + 30, v255 + 34);
      _os_log_impl((void *)&_mh_execute_header, v253, v254, "Multipart termination result for %{private,mask.hash}s, singleBeacon: %{BOOL}d, multipartResult: %{BOOL}d", (uint8_t *)v255, 0x22u);
      swift_arrayDestroy(v257, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v257, -1, -1);
      swift_slowDealloc(v255, -1, -1);

      ((void (*)(char *, uint64_t))v296)(v276, v301);
      v261(v280, v256);
    }
    else
    {

      v263 = (void (*)(char *, uint64_t))v293;
      ((void (*)(char *, uint64_t))v293)(v244, v91);
      ((void (*)(char *, uint64_t))v296)(v247, v301);
      v263(v280, v91);
      v262 = v300;
    }
    swift_bridgeObjectRelease();
    v102 = v262 & v251;
LABEL_76:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v306);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v309);
    return v102 & 1;
  }
  return result;
}

uint64_t sub_1003F5130(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  BOOL v39;
  int64_t v40;
  char *v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  __n128 v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  __n128 v64;
  int64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  int64_t v83;
  uint64_t result;
  char *v85;
  int64_t v86;
  char *v87;
  char *v88;
  char *v89;
  _QWORD *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD v104[2];

  v2 = type metadata accessor for UUID(0);
  v101 = *(_QWORD *)(v2 - 8);
  v102 = v2;
  __chkstk_darwin(v2);
  v97 = (char *)&v85 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LocationFetcher(0);
  __chkstk_darwin(v4);
  v96 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010FB198);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v99 = (char *)&v85 - v10;
  v95 = sub_10001A9A8(&qword_1010FB1A0);
  v11 = __chkstk_darwin(v95);
  v85 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v91 = (char *)&v85 - v14;
  v15 = __chkstk_darwin(v13);
  v89 = (char *)&v85 - v16;
  v17 = __chkstk_darwin(v15);
  v88 = (char *)&v85 - v18;
  __chkstk_darwin(v17);
  v87 = (char *)&v85 - v19;
  v104[0] = _swiftEmptyDictionarySingleton;
  v20 = *(_QWORD *)(a1 + 64);
  v92 = (char *)(a1 + 64);
  v21 = 1 << *(_BYTE *)(a1 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v86 = (unint64_t)(v21 + 63) >> 6;
  v90 = (_QWORD *)a1;
  swift_bridgeObjectRetain(a1);
  v24 = 0;
  v26 = v87;
  v25 = (uint64_t)v88;
  while (1)
  {
    if (v23)
    {
      v93 = (v23 - 1) & v23;
      v94 = v24;
      v27 = __clz(__rbit64(v23)) | (v24 << 6);
      v28 = v90;
      goto LABEL_5;
    }
    v39 = __OFADD__(v24, 1);
    v40 = v24 + 1;
    v41 = v85;
    if (v39)
      goto LABEL_82;
    v28 = v90;
    if (v40 >= v86)
      break;
    v42 = *(_QWORD *)&v92[8 * v40];
    if (!v42)
    {
      v43 = v40 + 1;
      if (v40 + 1 >= v86)
        break;
      v42 = *(_QWORD *)&v92[8 * v43];
      if (!v42)
      {
        v43 = v40 + 2;
        if (v40 + 2 >= v86)
          break;
        v42 = *(_QWORD *)&v92[8 * v43];
        if (!v42)
        {
          v43 = v40 + 3;
          if (v40 + 3 >= v86)
            break;
          v42 = *(_QWORD *)&v92[8 * v43];
          if (!v42)
          {
            while (1)
            {
              v40 = v43 + 1;
              if (__OFADD__(v43, 1))
                goto LABEL_84;
              if (v40 >= v86)
                goto LABEL_22;
              v42 = *(_QWORD *)&v92[8 * v40];
              ++v43;
              if (v42)
                goto LABEL_17;
            }
          }
        }
      }
      v40 = v43;
    }
LABEL_17:
    v93 = (v42 - 1) & v42;
    v94 = v40;
    v27 = __clz(__rbit64(v42)) + (v40 << 6);
LABEL_5:
    v30 = v101;
    v29 = v102;
    v31 = *(void (**)(char *, unint64_t, uint64_t))(v101 + 16);
    v31(v26, v28[6] + *(_QWORD *)(v101 + 72) * v27, v102);
    v32 = v28[7];
    v33 = v95;
    v34 = *(int *)(v95 + 48);
    v35 = *(_QWORD *)(v32 + 8 * v27);
    *(_QWORD *)&v26[v34] = v35;
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v25, v26, v29);
    *(_QWORD *)(v25 + v34) = v35;
    v36 = *(int *)(v33 + 48);
    v37 = (uint64_t)v89;
    v31(v89, v25, v29);
    *(_QWORD *)(v37 + v36) = v35;
    swift_bridgeObjectRetain_n(v35, 2);
    v38 = objc_autoreleasePoolPush();
    sub_10040C4A0(v37, v100, v104);
    objc_autoreleasePoolPop(v38);
    sub_100004048(v25, &qword_1010FB1A0);
    sub_100004048(v37, &qword_1010FB1A0);
    v23 = v93;
    v24 = v94;
  }
LABEL_22:
  swift_release();
  v103 = _swiftEmptyArrayStorage;
  v44 = 1 << *((_BYTE *)v28 + 32);
  v45 = -1;
  if (v44 < 64)
    v45 = ~(-1 << v44);
  v46 = v45 & v28[8];
  v47 = (unint64_t)(v44 + 63) >> 6;
  v48 = swift_bridgeObjectRetain(v28);
  v49 = 0;
  v50 = (uint64_t)v91;
  if (!v46)
    goto LABEL_26;
  while (2)
  {
    v51 = __clz(__rbit64(v46));
    v46 &= v46 - 1;
    v52 = v51 | (v49 << 6);
LABEL_39:
    (*(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v101 + 16))(v50, v28[6] + *(_QWORD *)(v101 + 72) * v52, v102, v48);
    v55 = *(_QWORD *)(v28[7] + 8 * v52);
    *(_QWORD *)(v50 + *(int *)(v95 + 48)) = v55;
    sub_100005CF0(v50, (uint64_t)v41, &qword_1010FB1A0);
    swift_bridgeObjectRetain(v55);
    sub_10040F81C(&v103, (uint64_t)v41);
    sub_100004048((uint64_t)v41, &qword_1010FB1A0);
    if (v46)
      continue;
    break;
  }
LABEL_26:
  v39 = __OFADD__(v49++, 1);
  if (v39)
  {
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  if (v49 >= v47)
    goto LABEL_45;
  v53 = *(_QWORD *)&v92[8 * v49];
  if (v53)
  {
LABEL_38:
    v46 = (v53 - 1) & v53;
    v52 = __clz(__rbit64(v53)) + (v49 << 6);
    goto LABEL_39;
  }
  v54 = v49 + 1;
  if (v49 + 1 >= v47)
    goto LABEL_45;
  v53 = *(_QWORD *)&v92[8 * v54];
  if (v53)
    goto LABEL_37;
  v54 = v49 + 2;
  if (v49 + 2 >= v47)
    goto LABEL_45;
  v53 = *(_QWORD *)&v92[8 * v54];
  if (v53)
    goto LABEL_37;
  v54 = v49 + 3;
  if (v49 + 3 >= v47)
    goto LABEL_45;
  v53 = *(_QWORD *)&v92[8 * v54];
  if (v53)
    goto LABEL_37;
  v54 = v49 + 4;
  if (v49 + 4 >= v47)
    goto LABEL_45;
  v53 = *(_QWORD *)&v92[8 * v54];
  if (v53)
  {
LABEL_37:
    v49 = v54;
    goto LABEL_38;
  }
  while (1)
  {
    v49 = v54 + 1;
    if (__OFADD__(v54, 1))
      goto LABEL_86;
    if (v49 >= v47)
      break;
    v53 = *(_QWORD *)&v92[8 * v49];
    ++v54;
    if (v53)
      goto LABEL_38;
  }
LABEL_45:
  swift_release();
  v56 = v103;
  v91 = (char *)v103[2];
  if (!v91)
  {
LABEL_79:
    swift_bridgeObjectRelease();
    return v104[0];
  }
  v57 = 0;
  v89 = (char *)v103;
  v90 = v103 + 4;
  v98 = v9;
  v58 = (uint64_t)v96;
  while (2)
  {
    if ((unint64_t)v57 >= v56[2])
      goto LABEL_83;
    v59 = v90[(_QWORD)v57];
    v60 = *(_QWORD *)(v59 + 64);
    v92 = v57 + 1;
    v93 = v59 + 64;
    v61 = 1 << *(_BYTE *)(v59 + 32);
    if (v61 < 64)
      v62 = ~(-1 << v61);
    else
      v62 = -1;
    v63 = v62 & v60;
    v94 = (unint64_t)(v61 + 63) >> 6;
    v95 = v59;
    v88 = (char *)(v94 - 1);
    v64 = swift_bridgeObjectRetain(v59);
    v65 = 0;
    if (v63)
    {
LABEL_53:
      v66 = __clz(__rbit64(v63));
      v63 &= v63 - 1;
      v67 = v66 | (v65 << 6);
      v69 = (uint64_t)v98;
      v68 = (uint64_t)v99;
      v41 = (char *)&qword_1010FB1A8;
      goto LABEL_54;
    }
LABEL_55:
    v74 = v65 + 1;
    v68 = (uint64_t)v99;
    if (__OFADD__(v65, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    v69 = (uint64_t)v98;
    v41 = (char *)&qword_1010FB1A8;
    if (v74 >= v94)
    {
LABEL_63:
      v76 = sub_10001A9A8(&qword_1010FB1A8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v69, 1, 1, v76);
      v63 = 0;
LABEL_64:
      sub_100005CF0(v69, v68, &qword_1010FB198);
      v77 = sub_10001A9A8(&qword_1010FB1A8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 48))(v68, 1, v77) == 1)
      {
        swift_release();
        v57 = v92;
        v56 = v89;
        if (v92 == v91)
          goto LABEL_79;
        continue;
      }
      v78 = *(_QWORD *)(v68 + *(int *)(v77 + 48));
      sub_10005972C((uint64_t)v100, v58, type metadata accessor for LocationFetcher);
      v79 = v101;
      v41 = v97;
      v80 = v68;
      v81 = v102;
      (*(void (**)(char *, uint64_t, uint64_t))(v101 + 32))(v97, v80, v102);
      v82 = objc_autoreleasePoolPush();
      sub_10040FF24(v58, (uint64_t)v41, v78, v104);
      objc_autoreleasePoolPop(v82);
      swift_bridgeObjectRelease();
      sub_1000126B0(v58, type metadata accessor for LocationFetcher);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v41, v81);
      if (v63)
        goto LABEL_53;
      goto LABEL_55;
    }
    break;
  }
  v75 = *(_QWORD *)(v93 + 8 * v74);
  if (v75)
    goto LABEL_58;
  v65 += 2;
  if (v74 + 1 >= v94)
  {
    v65 = v74;
    goto LABEL_63;
  }
  v75 = *(_QWORD *)(v93 + 8 * v65);
  if (v75)
  {
    ++v74;
    goto LABEL_58;
  }
  if (v74 + 2 >= v94)
    goto LABEL_63;
  v75 = *(_QWORD *)(v93 + 8 * (v74 + 2));
  if (v75)
  {
    v74 += 2;
    goto LABEL_58;
  }
  v83 = v74 + 3;
  if (v74 + 3 >= v94)
  {
    v65 = v74 + 2;
    goto LABEL_63;
  }
  v75 = *(_QWORD *)(v93 + 8 * v83);
  if (v75)
  {
    v74 += 3;
LABEL_58:
    v63 = (v75 - 1) & v75;
    v67 = __clz(__rbit64(v75)) + (v74 << 6);
    v65 = v74;
LABEL_54:
    v70 = v95;
    (*(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v101 + 16))(v69, *(_QWORD *)(v95 + 48) + *(_QWORD *)(v101 + 72) * v67, v102, v64);
    v71 = *(_QWORD *)(v70 + 56);
    v72 = sub_10001A9A8(&qword_1010FB1A8);
    v73 = *(_QWORD *)(v71 + 8 * v67);
    *(_QWORD *)(v69 + *(int *)(v72 + 48)) = v73;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v69, 0, 1, v72);
    swift_bridgeObjectRetain(v73);
    goto LABEL_64;
  }
  while (1)
  {
    v74 = v83 + 1;
    if (__OFADD__(v83, 1))
      break;
    if (v74 >= v94)
    {
      v65 = (int64_t)v88;
      goto LABEL_63;
    }
    v75 = *(_QWORD *)(v93 + 8 * v74);
    ++v83;
    if (v75)
      goto LABEL_58;
  }
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
  swift_bridgeObjectRelease();
  sub_100004048((uint64_t)v41, &qword_1010FB1A0);
  result = swift_release();
  __break(1u);
  return result;
}

BOOL sub_1003F59F8(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  BOOL v61;
  int v62;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  _QWORD v88[6];
  uint64_t v89;

  v75 = a2;
  v85 = (char *)a1;
  v89 = type metadata accessor for MemberSharingCircle(0);
  v87 = *(_QWORD *)(v89 - 8);
  v3 = __chkstk_darwin(v89);
  v5 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v86 = (char *)&v70 - v6;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v7);
  v79 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8((uint64_t *)&unk_1011057F0);
  v81 = *(_QWORD *)(v78 - 8);
  v9 = __chkstk_darwin(v78);
  v76 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v80 = (uint64_t)&v70 - v11;
  v12 = type metadata accessor for URL(0);
  v83 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v74 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (uint64_t)&v70 - v16;
  __chkstk_darwin(v15);
  v84 = (char *)&v70 - v18;
  v19 = sub_10001A9A8(&qword_1010FB1F0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v77 = (uint64_t)&v70 - v23;
  v24 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v24);
  v26 = (char *)&v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for SharedBeaconRecord(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v70 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100030784((uint64_t)v85, (uint64_t)v88);
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v32 = swift_dynamicCast(v26, v88, v31, v27, 6);
  v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
  if ((v32 & 1) != 0)
  {
    v73 = v22;
    v85 = v5;
    v82 = v2;
    v33(v26, 0, 1, v27);
    sub_1000126EC((uint64_t)v26, (uint64_t)v30, type metadata accessor for SharedBeaconRecord);
    v34 = *(_QWORD *)v75;
    v35 = *(int *)(v27 + 20);
    v71 = v30;
    v75 = &v30[v35];
    v36 = *(_QWORD *)(v34 + 160);
    if (qword_1010E9A98 != -1)
LABEL_24:
      swift_once(&qword_1010E9A98, sub_1001FFA50);
    v37 = v12;
    v38 = sub_10001A9E8(v12, (uint64_t)qword_1011B6C00);
    v39 = v84;
    v40 = *(void (**)(char *, uint64_t, uint64_t))(v83 + 16);
    v40(v84, v38, v12);
    v41 = v17;
    v40((char *)v17, (uint64_t)v39, v12);
    v42 = v78;
    v17 = (uint64_t)v76;
    v72 = &v76[*(int *)(v78 + 40)];
    v43 = (uint64_t)v72;
    v44 = type metadata accessor for DirectorySequence(0);
    v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56);
    v45(v43, 1, 1, v44);
    v40((char *)v17, v41, v37);
    *(_QWORD *)(v17 + *(int *)(v42 + 36)) = v36;
    v46 = v74;
    v40(v74, v41, v37);
    swift_retain();
    v47 = (uint64_t)v79;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)(v46, 0, 0);
    v48 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
    v48(v41, v37);
    v45(v47, 0, 1, v44);
    sub_10000C778(v47, (uint64_t)v72);
    v49 = v80;
    sub_100005CF0(v17, v80, (uint64_t *)&unk_1011057F0);
    v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v81 + 56);
    v51 = (uint64_t)v73;
    v50(v73, 1, 1, v42);
    sub_100004048(v51, &qword_101105800);
    sub_100005CF0(v49, v51, (uint64_t *)&unk_1011057F0);
    v50((char *)v51, 0, 1, v42);
    sub_100005CF0(v51, v77, &qword_1010FB1F0);
    v52 = ((uint64_t (*)(char *, uint64_t))v48)(v84, v37);
    __chkstk_darwin(v52);
    *(&v70 - 2) = (uint64_t)v75;
    v53 = v82;
    sub_100A7A30C(sub_1004273F0, (uint64_t)(&v70 - 4));
    v55 = v54;
    v36 = *(_QWORD *)(v54 + 16);
    if (v36)
    {
      v82 = v53;
      v56 = 0;
      v57 = _swiftEmptyArrayStorage;
      v88[0] = _swiftEmptyArrayStorage;
      v58 = (uint64_t)v85;
      v12 = (uint64_t)v86;
      do
      {
        if (v56 >= *(_QWORD *)(v55 + 16))
        {
          __break(1u);
          goto LABEL_24;
        }
        v59 = (*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80);
        v17 = *(_QWORD *)(v87 + 72);
        sub_10005972C(v55 + v59 + v17 * v56, v12, type metadata accessor for MemberSharingCircle);
        v60 = *(unsigned __int8 *)(v12 + *(int *)(v89 + 40));
        v61 = v60 > 4;
        v62 = (1 << v60) & 0x16;
        if (v61 || v62 == 0)
        {
          sub_1000126B0(v12, type metadata accessor for MemberSharingCircle);
        }
        else
        {
          sub_1000126EC(v12, v58, type metadata accessor for MemberSharingCircle);
          if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) == 0)
            sub_10009A4D0(0, v57[2] + 1, 1);
          v57 = (_QWORD *)v88[0];
          v65 = *(_QWORD *)(v88[0] + 16);
          v64 = *(_QWORD *)(v88[0] + 24);
          if (v65 >= v64 >> 1)
          {
            sub_10009A4D0(v64 > 1, v65 + 1, 1);
            v57 = (_QWORD *)v88[0];
          }
          v57[2] = v65 + 1;
          v66 = (uint64_t)v57 + v59 + v65 * v17;
          v58 = (uint64_t)v85;
          sub_1000126EC((uint64_t)v85, v66, type metadata accessor for MemberSharingCircle);
          v12 = (uint64_t)v86;
        }
        ++v56;
      }
      while (v36 != v56);
      swift_bridgeObjectRelease();
      v68 = *(_QWORD *)(v88[0] + 16);
      swift_release();
      sub_1000126B0((uint64_t)v71, type metadata accessor for SharedBeaconRecord);
      return v68 != 0;
    }
    else
    {
      sub_1000126B0((uint64_t)v71, type metadata accessor for SharedBeaconRecord);
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    v67 = 1;
    v33(v26, 1, 1, v27);
    sub_100004048((uint64_t)v26, (uint64_t *)&unk_1010EE180);
  }
  return v67;
}

uint64_t sub_1003F60CC(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t *a7, uint64_t a8, void (*a9)(char *, uint64_t, uint64_t), uint64_t a10)
{
  uint64_t v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t RequestBeacon;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char isUniquelyReferenced_nonNull_native;
  BOOL v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t *v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BOOL8 v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t (*v89)(unint64_t, uint64_t);
  uint64_t result;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t *v123;
  unint64_t v124[6];
  uint64_t v125;
  uint64_t v126[3];

  v110 = a8;
  v123 = a7;
  v106 = a2;
  v108 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v108 - 8);
  v17 = __chkstk_darwin(v108);
  v19 = (char *)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v107 = (char *)&v102 - v20;
  v21 = type metadata accessor for UUID(0);
  v118 = *(_QWORD *)(v21 - 8);
  v119 = v21;
  __chkstk_darwin(v21);
  v117 = (char *)&v102 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  v24 = *(_QWORD *)(RequestBeacon - 8);
  __chkstk_darwin(RequestBeacon);
  v120 = (char *)&v102 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124[2] = a3;
  v124[3] = a4;
  v109 = a4;
  v124[4] = a5;
  v124[5] = a6;
  swift_bridgeObjectRetain(a1);
  v26 = sub_10008B9CC((uint64_t (*)(char *))sub_100425DC8, v124, a1);
  v27 = v26;
  v116 = *(_QWORD *)(v26 + 16);
  if (!v116)
    return swift_bridgeObjectRelease();
  v105 = 0;
  v104 = a10;
  v103 = a9;
  v115 = v26 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  swift_bridgeObjectRetain(v26);
  v28 = 0;
  v113 = v19;
  v114 = v16;
  v112 = v27;
  v29 = (uint64_t)v120;
  v111 = v24;
  while (1)
  {
    if (v28 >= *(_QWORD *)(v27 + 16))
      goto LABEL_55;
    v40 = *(_QWORD *)(v24 + 72);
    v122 = v28;
    sub_10005972C(v115 + v40 * v28, v29, type metadata accessor for FetchRequestBeacon);
    v41 = sub_100AC2EBC();
    v43 = v42;
    v44 = *v123;
    if (*(_QWORD *)(*v123 + 16) && (v45 = sub_100003FB0(v29), (v46 & 1) != 0))
    {
      v47 = *(_QWORD **)(*(_QWORD *)(v44 + 56) + 8 * v45);
      swift_bridgeObjectRetain(v47);
    }
    else
    {
      v47 = (_QWORD *)sub_1006B85B4((uint64_t)_swiftEmptyArrayStorage);
    }
    v126[0] = (uint64_t)v41;
    sub_100302314(v43);
    v48 = *(_QWORD *)(v126[0] + 16);
    v121 = v126[0];
    if (v48)
      break;
LABEL_3:
    v30 = v122 + 1;
    swift_bridgeObjectRelease();
    v32 = (uint64_t)v117;
    v31 = v118;
    v33 = v119;
    v34 = (uint64_t)v120;
    (*(void (**)(char *, char *, uint64_t))(v118 + 16))(v117, v120, v119);
    swift_bridgeObjectRetain(v47);
    v35 = v123;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v123);
    v126[0] = *v35;
    *v35 = 0x8000000000000000;
    sub_10010CB20((uint64_t)v47, v32, isUniquelyReferenced_nonNull_native);
    *v35 = v126[0];
    swift_bridgeObjectRelease();
    v29 = v34;
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v33);
    sub_1000126B0(v34, type metadata accessor for FetchRequestBeacon);
    swift_bridgeObjectRelease();
    v28 = v30;
    v37 = v30 == v116;
    v39 = (unint64_t)v113;
    v38 = v114;
    v27 = v112;
    v24 = v111;
    if (v37)
    {
      swift_bridgeObjectRelease();
      v77 = v110;
      v78 = v109;
      if (!v110)
      {
        swift_bridgeObjectRelease();
        v91 = type metadata accessor for LocationFetcher(0);
        v92 = v107;
        v93 = v108;
        v94 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v38 + 16))(v107, v78 + *(int *)(v91 + 32), v108);
        v95 = Logger.logObject.getter(v94);
        v96 = static os_log_type_t.error.getter(v95);
        if (os_log_type_enabled(v95, v96))
        {
          v97 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v97 = 0;
          _os_log_impl((void *)&_mh_execute_header, v95, v96, "Fatal: Error fetching - while policy specified from ACSN and no server interaction controller provided.", v97, 2u);
          v98 = v97;
          v93 = v108;
          swift_slowDealloc(v98, -1, -1);
        }

        return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v92, v93);
      }
      swift_retain();
      v50 = v105;
      v79 = sub_1003F7150(v27, v78 + 24, v77);
      if (v50)
      {
        swift_bridgeObjectRelease();
        swift_release();
        v80 = type metadata accessor for LocationFetcher(0);
        v10 = v108;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v38 + 16))(v39, v78 + *(int *)(v80 + 32), v108);
        swift_errorRetain(v50);
        v81 = swift_errorRetain(v50);
        v68 = Logger.logObject.getter(v81);
        v82 = static os_log_type_t.error.getter(v68);
        if (os_log_type_enabled((os_log_t)v68, v82))
        {
          v83 = (uint8_t *)swift_slowAlloc(12, -1);
          v84 = swift_slowAlloc(32, -1);
          v125 = v50;
          v126[0] = v84;
          *(_DWORD *)v83 = 136446210;
          swift_errorRetain(v50);
          v85 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
          v86 = String.init<A>(describing:)(&v125, v85);
          v125 = sub_100016940(v86, v87, v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v83 + 4, v83 + 12);
          swift_bridgeObjectRelease();
          swift_errorRelease(v50);
          swift_errorRelease(v50);
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v68, v82, "Error fetching: %{public}s.", v83, 0xCu);
          swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v84, -1, -1);
          swift_slowDealloc(v83, -1, -1);

          swift_errorRelease(v50);
          v88 = (unint64_t)v113;
          v89 = *(uint64_t (**)(unint64_t, uint64_t))(v114 + 8);
        }
        else
        {
LABEL_49:
          swift_errorRelease(v50);
          swift_errorRelease(v50);
          swift_errorRelease(v50);

          v89 = *(uint64_t (**)(unint64_t, uint64_t))(v38 + 8);
          v88 = v39;
        }
        return v89(v88, v10);
      }
      v99 = v79;
      swift_bridgeObjectRelease();
      v100 = v104;
      swift_retain();
      v101 = v106;
      swift_bridgeObjectRetain(v106);
      sub_10041DA08(v99, v103, v100, v101);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  v49 = (uint64_t *)(v126[0] + 40);
  while (1)
  {
    v38 = *(v49 - 1);
    v50 = *v49;
    v51 = v47[2];
    swift_bridgeObjectRetain(*v49);
    if (v51)
    {
      v52 = sub_100518DA0(v38, v50);
      if ((v53 & 1) != 0)
      {
        v54 = *(_QWORD *)(v47[7] + 8 * v52);
        v55 = v54 + 1;
        if (__OFADD__(v54, 1))
          goto LABEL_52;
        v56 = swift_isUniquelyReferenced_nonNull_native(v47);
        v126[0] = (uint64_t)v47;
        v58 = sub_100518DA0(v38, v50);
        v59 = v47[2];
        v60 = (v57 & 1) == 0;
        v61 = v59 + v60;
        if (__OFADD__(v59, v60))
          goto LABEL_53;
        v10 = v57;
        if (v47[3] >= v61)
        {
          if ((v56 & 1) != 0)
          {
            v47 = (_QWORD *)v126[0];
            if ((v57 & 1) != 0)
              goto LABEL_34;
          }
          else
          {
            sub_100A9A654();
            v47 = (_QWORD *)v126[0];
            if ((v10 & 1) != 0)
              goto LABEL_34;
          }
        }
        else
        {
          sub_100A865D4(v61, v56);
          v62 = sub_100518DA0(v38, v50);
          if ((v10 & 1) != (v63 & 1))
            goto LABEL_56;
          v58 = v62;
          v47 = (_QWORD *)v126[0];
          if ((v10 & 1) != 0)
          {
LABEL_34:
            *(_QWORD *)(v47[7] + 8 * v58) = v55;
            goto LABEL_12;
          }
        }
        v47[(v58 >> 6) + 8] |= 1 << v58;
        v64 = (uint64_t *)(v47[6] + 16 * v58);
        *v64 = v38;
        v64[1] = v50;
        *(_QWORD *)(v47[7] + 8 * v58) = v55;
        v65 = v47[2];
        v66 = __OFADD__(v65, 1);
        v67 = v65 + 1;
        if (v66)
          goto LABEL_54;
        goto LABEL_31;
      }
    }
    v68 = swift_isUniquelyReferenced_nonNull_native(v47);
    v126[0] = (uint64_t)v47;
    v39 = sub_100518DA0(v38, v50);
    v70 = v47[2];
    v71 = (v69 & 1) == 0;
    v72 = v70 + v71;
    if (__OFADD__(v70, v71))
    {
      __break(1u);
      goto LABEL_49;
    }
    v10 = v69;
    if (v47[3] < v72)
      break;
    if ((v68 & 1) != 0)
    {
      v47 = (_QWORD *)v126[0];
      if ((v69 & 1) == 0)
        goto LABEL_30;
    }
    else
    {
      sub_100A9A654();
      v47 = (_QWORD *)v126[0];
      if ((v10 & 1) == 0)
        goto LABEL_30;
    }
LABEL_11:
    *(_QWORD *)(v47[7] + 8 * v39) = 1;
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v49 += 2;
    if (!--v48)
      goto LABEL_3;
  }
  sub_100A865D4(v72, v68);
  v73 = sub_100518DA0(v38, v50);
  if ((v10 & 1) != (v74 & 1))
    goto LABEL_56;
  v39 = v73;
  v47 = (_QWORD *)v126[0];
  if ((v10 & 1) != 0)
    goto LABEL_11;
LABEL_30:
  v47[(v39 >> 6) + 8] |= 1 << v39;
  v75 = (uint64_t *)(v47[6] + 16 * v39);
  *v75 = v38;
  v75[1] = v50;
  *(_QWORD *)(v47[7] + 8 * v39) = 1;
  v76 = v47[2];
  v66 = __OFADD__(v76, 1);
  v67 = v76 + 1;
  if (!v66)
  {
LABEL_31:
    v47[2] = v67;
    swift_bridgeObjectRetain(v50);
    goto LABEL_12;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1003F6988(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t RequestBeacon;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  char v57;
  uint64_t v58;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  _BOOL4 v84;
  uint64_t v85;
  uint64_t v86;
  char v87[16];
  uint64_t v88;
  uint64_t v89[3];
  char v90[32];
  uint64_t v91;
  uint64_t v92;

  v81 = a5;
  v79 = a4;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v9 = __chkstk_darwin(v8);
  v77 = (uint64_t)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v80 = (char *)&v74 - v11;
  v82 = type metadata accessor for UUID(0);
  v78 = *(_QWORD *)(v82 - 8);
  v12 = __chkstk_darwin(v82);
  v76 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v83 = (uint64_t)&v74 - v14;
  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  v16 = __chkstk_darwin(RequestBeacon);
  v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v74 - v19;
  v86 = type metadata accessor for Logger(0);
  v21 = *(_QWORD *)(v86 - 8);
  v22 = __chkstk_darwin(v86);
  v24 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v74 - v25;
  swift_beginAccess(a2, v90, 0, 0);
  v27 = *a2;
  v88 = a1;
  swift_bridgeObjectRetain(v27);
  v28 = sub_1007EF65C((uint64_t (*)(char *))sub_100426430, (_BOOL8)v87, v27);
  swift_bridgeObjectRelease();
  v29 = a3 + *(int *)(type metadata accessor for LocationFetcher(0) + 32);
  v85 = v21;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v84 = v28;
  if (v28)
  {
    v30(v24, v29, v86);
    v31 = sub_10005972C(a1, (uint64_t)v18, type metadata accessor for FetchRequestBeacon);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = swift_slowAlloc(22, -1);
      v35 = swift_slowAlloc(32, -1);
      v89[0] = v35;
      *(_DWORD *)v34 = 141558275;
      v91 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v34 + 4, v34 + 12);
      *(_WORD *)(v34 + 12) = 2081;
      v36 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v37 = dispatch thunk of CustomStringConvertible.description.getter(v82, v36);
      v91 = sub_100016940(v37, v38, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v34 + 14, v34 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v18, type metadata accessor for FetchRequestBeacon);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Skipping completed beacon %{private,mask.hash}s which has enough locations.", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v18, type metadata accessor for FetchRequestBeacon);
    }

    (*(void (**)(char *, uint64_t))(v85 + 8))(v24, v86);
    return !v84;
  }
  v30(v26, v29, v86);
  v39 = sub_10005972C(a1, (uint64_t)v20, type metadata accessor for FetchRequestBeacon);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.default.getter(v40);
  v42 = a1;
  if (os_log_type_enabled(v40, v41))
  {
    v43 = swift_slowAlloc(22, -1);
    v44 = swift_slowAlloc(32, -1);
    v89[0] = v44;
    *(_DWORD *)v43 = 141558275;
    v91 = 1752392040;
    v75 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v43 + 4, v43 + 12);
    *(_WORD *)(v43 + 12) = 2081;
    v74 = v43 + 14;
    v45 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v46 = v82;
    v47 = dispatch thunk of CustomStringConvertible.description.getter(v82, v45);
    v91 = sub_100016940(v47, v48, v89);
    v42 = v75;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v74, v43 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v20, type metadata accessor for FetchRequestBeacon);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Can continue fetching beacon %{private,mask.hash}s.", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v43, -1, -1);

    (*(void (**)(char *, uint64_t))(v85 + 8))(v26, v86);
  }
  else
  {
    sub_1000126B0((uint64_t)v20, type metadata accessor for FetchRequestBeacon);

    (*(void (**)(char *, uint64_t))(v85 + 8))(v26, v86);
    v46 = v82;
  }
  v49 = v79;
  v50 = (uint64_t)v80;
  v51 = v78;
  v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16);
  v52(v83, v42, v46);
  swift_beginAccess(v49, v89, 32, 0);
  v53 = *v49;
  v54 = v46;
  if (*(_QWORD *)(*v49 + 16))
  {
    v55 = sub_100003FB0(v42);
    v56 = v81;
    if ((v57 & 1) != 0)
      v58 = *(_QWORD *)(*(_QWORD *)(v53 + 56) + 8 * v55);
    else
      v58 = 0;
  }
  else
  {
    v58 = 0;
    v56 = v81;
  }
  result = swift_endAccess(v89);
  if (!__OFADD__(v58, 1))
  {
    swift_beginAccess(v49, v89, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v49);
    v91 = *v49;
    *v49 = 0x8000000000000000;
    v61 = v83;
    sub_10010CB3C(v58 + 1, v83, isUniquelyReferenced_nonNull_native);
    *v49 = v91;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v61, v54);
    swift_endAccess(v89);
    swift_beginAccess(v56, v89, 32, 0);
    v62 = *v56;
    if (*(_QWORD *)(*v56 + 16) && (v63 = sub_100003FB0(v42), (v64 & 1) != 0))
    {
      v65 = v63;
      v66 = *(_QWORD *)(v62 + 56);
      v67 = type metadata accessor for Date(0);
      v68 = *(_QWORD *)(v67 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v68 + 16))(v50, v66 + *(_QWORD *)(v68 + 72) * v65, v67);
      v69 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v68 + 56);
      v56 = v81;
      v69(v50, 0, 1, v67);
    }
    else
    {
      v67 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v50, 1, 1, v67);
    }
    swift_endAccess(v89);
    type metadata accessor for Date(0);
    v70 = *(_QWORD *)(v67 - 8);
    v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v50, 1, v67);
    sub_100004048(v50, (uint64_t *)&unk_1010EA690);
    if (v71 == 1)
    {
      v72 = (uint64_t)v76;
      v52((uint64_t)v76, v42, v54);
      v73 = v77;
      static Date.trustedNow.getter(v77);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v70 + 56))(v73, 0, 1, v67);
      swift_beginAccess(v56, v89, 33, 0);
      sub_1000FF4B4(v73, v72);
      swift_endAccess(v89);
    }
    return !v84;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003F7150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char v43[24];
  char v44[24];
  uint64_t v45;

  v5 = v3;
  v8 = type metadata accessor for LocationFetcher(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a3;
  v13 = v5;
  v14 = sub_1003FFAF4(v12, a1);
  if (!v4)
  {
    v15 = v14;
    v37 = 0;
    v16 = dispatch_group_create();
    dispatch_group_enter(v16);
    v17 = swift_allocObject(&unk_101075B68, 24, 7);
    v40 = a1;
    v18 = v17;
    *(_QWORD *)(v17 + 16) = 0;
    v41 = (uint64_t *)(v17 + 16);
    v42 = v15;
    sub_10005972C(v5, (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LocationFetcher);
    v19 = *(unsigned __int8 *)(v9 + 80);
    v20 = (v19 + 16) & ~v19;
    v38 = v10 + 7;
    v39 = v19 | 7;
    v21 = (v10 + 7 + v20) & 0xFFFFFFFFFFFFFFF8;
    v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    v23 = swift_allocObject(&unk_101075B90, v22 + 8, v19 | 7);
    sub_1000126EC((uint64_t)v11, v23 + v20, type metadata accessor for LocationFetcher);
    *(_QWORD *)(v23 + v21) = v18;
    *(_QWORD *)(v23 + v22) = v16;
    v45 = v18;
    swift_retain();
    v24 = v16;
    Future.addFailure(block:)(sub_100425F0C, v23);
    swift_release();
    swift_release();
    v25 = swift_allocObject(&unk_101075A28, 24, 7);
    *(_QWORD *)(v25 + 16) = _swiftEmptyDictionarySingleton;
    v36 = v25 + 16;
    sub_10005972C(v5, (uint64_t)v11, type metadata accessor for LocationFetcher);
    v26 = (v19 + 24) & ~v19;
    v27 = (v38 + v26) & 0xFFFFFFFFFFFFFFF8;
    v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF8;
    v29 = swift_allocObject(&unk_101075BB8, v28 + 8, v39);
    *(_QWORD *)(v29 + 16) = v25;
    sub_1000126EC((uint64_t)v11, v29 + v26, type metadata accessor for LocationFetcher);
    v30 = v40;
    *(_QWORD *)(v29 + v27) = v40;
    *(_QWORD *)(v29 + v28) = v24;
    v31 = v24;
    swift_retain();
    swift_bridgeObjectRetain(v30);
    Future.addSuccess(block:)(sub_100426070, v29);
    swift_release();
    swift_release();
    OS_dispatch_group.wait()();
    v32 = v41;
    swift_beginAccess(v41, v44, 0, 0);
    v13 = *v32;
    if (*v32)
    {
      v33 = swift_errorRetain(*v32);
      swift_willThrow(v33);
      swift_release();

    }
    else
    {
      swift_release();

      swift_beginAccess(v36, v43, 0, 0);
      v13 = *(_QWORD *)(v25 + 16);
      swift_bridgeObjectRetain(v13);
    }
    swift_release();
    swift_release();
  }
  return v13;
}

uint64_t sub_1003F7440(_QWORD *a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  _QWORD *v45;
  uint64_t result;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD v58[2];
  _QWORD *v59;

  v4 = v3;
  v8 = type metadata accessor for LocationFetcher(0);
  __chkstk_darwin(v8);
  v10 = (_QWORD **)((char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = v3 + 3;
  v12 = v3[6];
  v13 = v3[7];
  sub_10001AA44(v3 + 3, v12);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 56))(v12, v13);
  v59 = a1;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(a1);
  sub_1004202C8(&v59, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v56 = v59;
  v59 = 0;
  v57 = _swiftEmptyDictionarySingleton;
  v58[0] = _swiftEmptyDictionarySingleton;
  v15 = v4[6];
  v16 = v4[7];
  sub_10001AA44(v11, v15);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(v15, v16);
  v18 = v17;
  v19 = *(_QWORD *)(v17 + 16);
  if (!v19)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    sub_10005972C((uint64_t)v4, (uint64_t)v10, type metadata accessor for LocationFetcher);
    goto LABEL_24;
  }
  v55 = v11;
  swift_bridgeObjectRetain(v17);
  v20 = 0;
  while (1)
  {
    v21 = *(unsigned __int8 *)(v18 + v20 + 32);
    v22 = 0x7261646E6F636553;
    v23 = 0xE900000000000079;
    if (v21 != 1)
      break;
LABEL_6:
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, 0x7972616D697250, 0xE700000000000000, 0);
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
      goto LABEL_13;
    if (v19 == ++v20)
    {
      swift_bridgeObjectRelease_n(v18, 2);
      v11 = v55;
      goto LABEL_10;
    }
  }
  if (v21 == 2)
  {
    v22 = 0x6F4C657275636553;
    v23 = 0xEF736E6F69746163;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
LABEL_13:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10005972C((uint64_t)v4, (uint64_t)v10, type metadata accessor for LocationFetcher);
  v25 = v10[6];
  v26 = v10[7];
  sub_10001AA44(v10 + 3, v25);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 32))(v25, v26);
  v28 = v27;
  v29 = *(_QWORD *)(v27 + 16);
  if (!v29)
  {
    swift_bridgeObjectRelease();
LABEL_23:
    v11 = v55;
LABEL_24:
    sub_1000126B0((uint64_t)v10, type metadata accessor for LocationFetcher);
    goto LABEL_25;
  }
  swift_bridgeObjectRetain(v27);
  v30 = 0;
  while (!*(_BYTE *)(v28 + v30 + 32))
  {
    v32 = 0xE700000000000000;
    v31 = 0x7972616D697250;
LABEL_19:
    v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, 0x7261646E6F636553, 0xE900000000000079, 0);
    swift_bridgeObjectRelease();
    if ((v33 & 1) != 0)
      goto LABEL_37;
    if (v29 == ++v30)
    {
      swift_bridgeObjectRelease_n(v28, 2);
      goto LABEL_23;
    }
  }
  if (*(_BYTE *)(v28 + v30 + 32) == 2)
  {
    v31 = 0x6F4C657275636553;
    v32 = 0xEF736E6F69746163;
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
LABEL_37:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000126B0((uint64_t)v10, type metadata accessor for LocationFetcher);
  v11 = v55;
  v47 = v56[2];
  if (!v47)
  {
LABEL_25:
    v34 = v4[6];
    v35 = v4[7];
    sub_10001AA44(v11, v34);
    v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 16))(v34, v35);
    v37 = v4[6];
    v38 = v4[7];
    sub_10001AA44(v11, v37);
    v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 32))(v37, v38);
    if (*(_QWORD *)(v39 + 16))
      v40 = *(unsigned __int8 *)(v39 + 32);
    else
      v40 = 0;
    swift_bridgeObjectRelease();
    v41 = 0;
LABEL_29:
    v42 = v56[2];
    if (v42)
    {
      v43 = v56 + 4;
      swift_retain();
      do
      {
        v44 = objc_autoreleasePoolPush();
        sub_100403F4C(v4, v43, v36, v40, &v59, v58, v41, (uint64_t *)&v57, a2, a3);
        objc_autoreleasePoolPop(v44);
        v43 += 5;
        --v42;
      }
      while (v42);
      swift_release_n(v56, 2);
      v45 = v57;
    }
    else
    {
      swift_release();
      v45 = _swiftEmptyDictionarySingleton;
    }
    swift_bridgeObjectRetain(v45);
    sub_100406FE8(&v59, v58, v36, (uint64_t)v45, a2, a3, 1);
    swift_bridgeObjectRelease_n(v45, 2);
    return swift_bridgeObjectRelease();
  }
  v48 = v56 + 4;
  swift_retain();
  while (1)
  {
    v49 = v48[3];
    v50 = v48[4];
    sub_10001AA44(v48, v49);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v50 + 112))(v49, v50) & 1) != 0)
      break;
    v48 += 5;
    if (!--v47)
    {
      swift_release();
      goto LABEL_25;
    }
  }
  swift_release();
  v51 = sub_100DF6B18();
  if (v51 < 0)
  {
    __break(1u);
    goto LABEL_47;
  }
  v52 = v51 + 1;
  if (__OFADD__(v51, 1))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v53 = v4[6];
  v54 = v4[7];
  sub_10001AA44(v11, v53);
  v51 = sub_100656D3C(v53, v54);
  v36 = v51 * v52;
  if ((unsigned __int128)(v51 * (__int128)v52) >> 64 == (v51 * v52) >> 63)
  {
    v40 = 0;
    v41 = 1;
    goto LABEL_29;
  }
LABEL_48:
  __break(1u);
  objc_autoreleasePoolPop((void *)v51);
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1003F7998(NSObject *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_QWORD, _QWORD, _QWORD);
  os_log_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, os_log_t, uint64_t);
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  os_log_t v70;
  void (*v71)(uint64_t, os_log_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  int v85;
  _BOOL4 v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  double v105;
  void (*v106)(uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t *v113;
  char v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t);
  uint64_t v117;
  os_log_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  void (*v132)(uint64_t, os_log_t, uint64_t);
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  NSObject *v143;
  uint64_t v144;
  uint64_t v145;
  os_log_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v131 = a4;
  v125 = a3;
  v128 = a2;
  v146 = a1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v123 = (char *)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for Logger(0);
  v136 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v134 = (char *)&v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v8);
  v124 = (char *)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010FB1A0);
  v11 = __chkstk_darwin(v10);
  v126 = (char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v122 = (char *)&v121 - v14;
  v15 = __chkstk_darwin(v13);
  v133 = (uint64_t)&v121 - v16;
  v17 = __chkstk_darwin(v15);
  v143 = (uint64_t)&v121 - v18;
  v19 = __chkstk_darwin(v17);
  v130 = (char *)&v121 - v20;
  v21 = __chkstk_darwin(v19);
  v141 = (uint64_t)&v121 - v22;
  v23 = __chkstk_darwin(v21);
  v142 = (uint64_t)&v121 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v121 - v26;
  v28 = __chkstk_darwin(v25);
  v139 = (uint64_t)&v121 - v29;
  v30 = __chkstk_darwin(v28);
  v138 = (uint64_t)&v121 - v31;
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v121 - v33;
  __chkstk_darwin(v32);
  v36 = (char *)&v121 - v35;
  v37 = type metadata accessor for Date(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = __chkstk_darwin(v37);
  v121 = (uint64_t)&v121 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __chkstk_darwin(v39);
  v140 = (char *)&v121 - v42;
  __chkstk_darwin(v41);
  v148 = (char *)&v121 - v43;
  v135 = v10;
  v44 = *(int *)(v10 + 48);
  v45 = v5;
  v46 = *(void (**)(_QWORD, _QWORD, _QWORD))(v5 + 16);
  v47 = v146;
  v144 = v4;
  v48 = v4;
  v49 = v46;
  v46(v36, v146, v48);
  v50 = *(uint64_t *)((char *)&v47->isa + v44);
  v127 = v44;
  *(_QWORD *)&v36[v44] = v50;
  v51 = v128;
  swift_beginAccess(v128, &v150, 32, 0);
  v52 = *v51;
  v53 = *(_QWORD *)(*v51 + 16);
  v132 = (void (*)(uint64_t, os_log_t, uint64_t))v49;
  v129 = (uint64_t)v27;
  if (v53 && (v54 = sub_100003FB0((uint64_t)v36), (v55 & 1) != 0))
  {
    v56 = (uint64_t)v124;
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v124, *(_QWORD *)(v52 + 56) + *(_QWORD *)(v38 + 72) * v54, v37);
    v57 = 0;
    v58 = v136;
    v59 = v45;
    v60 = v38;
  }
  else
  {
    v57 = 1;
    v58 = v136;
    v59 = v45;
    v60 = v38;
    v56 = (uint64_t)v124;
  }
  v61 = v135;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v56, v57, 1, v37);
  swift_endAccess(&v150);
  v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v56, 1, v37);
  v147 = v37;
  v137 = v60;
  if ((_DWORD)v62 == 1)
  {
    static Date.distantPast.getter(v62);
    sub_100004048(v56, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v148, v56, v37);
  }
  v63 = v125;
  v64 = v144;
  v128 = *(uint64_t **)(v59 + 8);
  ((void (*)(char *, uint64_t))v128)(v36, v144);
  v65 = v63 + *(int *)(type metadata accessor for LocationFetcher(0) + 32);
  v66 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
  v125 = v59;
  v67 = v134;
  v66(v134, v65, v145);
  v68 = v61;
  v69 = *(int *)(v61 + 48);
  v70 = v146;
  v71 = v132;
  v132((uint64_t)v34, v146, v64);
  v72 = *(uint64_t *)((char *)&v70->isa + v127);
  *(_QWORD *)&v34[v69] = v72;
  sub_10000F9B8((uint64_t)v34, v138, &qword_1010FB1A0);
  sub_100005CF0((uint64_t)v34, v139, &qword_1010FB1A0);
  v73 = *(int *)(v68 + 48);
  v74 = v129;
  v71(v129, v70, v64);
  *(_QWORD *)(v74 + v73) = v72;
  sub_10000F9B8(v74, v142, &qword_1010FB1A0);
  v75 = v74;
  v76 = v64;
  sub_100005CF0(v75, v141, &qword_1010FB1A0);
  (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v140, v148, v147);
  v77 = *(int *)(v68 + 48);
  v78 = (uint64_t)v130;
  v79 = (void (*)(char *, uint64_t, uint64_t))v71;
  v71((uint64_t)v130, v70, v76);
  *(_QWORD *)(v78 + v77) = v72;
  v80 = v143;
  sub_10000F9B8(v78, v143, &qword_1010FB1A0);
  v81 = v133;
  sub_100005CF0(v78, v133, &qword_1010FB1A0);
  swift_bridgeObjectRetain_n(v72, 3);
  v82 = v131;
  v83 = swift_retain_n(v131, 2);
  v84 = Logger.logObject.getter(v83);
  v85 = static os_log_type_t.error.getter(v84);
  v86 = os_log_type_enabled(v84, (os_log_type_t)v85);
  v87 = v148;
  if (v86)
  {
    LODWORD(v130) = v85;
    v146 = v84;
    v88 = swift_slowAlloc(52, -1);
    v129 = swift_slowAlloc(32, -1);
    v149 = v129;
    *(_DWORD *)v88 = 134219011;
    v89 = *(int *)(v135 + 48);
    v90 = v122;
    v91 = v138;
    v92 = v144;
    v79(v122, v138, v144);
    v93 = v79;
    v94 = *(_QWORD *)(v91 + v89);
    *(_QWORD *)&v90[v89] = v94;
    v95 = *(_QWORD *)(v94 + 16);
    v96 = v128;
    ((void (*)(char *, uint64_t))v128)(v90, v92);
    sub_100004048(v91, &qword_1010FB1A0);
    v150 = v95;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v88 + 4, v88 + 12);
    sub_100004048(v139, &qword_1010FB1A0);
    *(_WORD *)(v88 + 12) = 2160;
    v150 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v88 + 14, v88 + 22);
    *(_WORD *)(v88 + 22) = 2081;
    v139 = v88 + 24;
    v97 = v142;
    v93(v90, v142, v92);
    v98 = v123;
    (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v123, v90, v92);
    v99 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v100 = dispatch thunk of CustomStringConvertible.description.getter(v92, v99);
    v102 = v101;
    ((void (*)(char *, uint64_t))v96)(v98, v92);
    v150 = sub_100016940(v100, v102, &v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v139, v88 + 32);
    swift_bridgeObjectRelease();
    sub_100004048(v141, &qword_1010FB1A0);
    sub_100004048(v97, &qword_1010FB1A0);
    *(_WORD *)(v88 + 32) = 2048;
    v103 = v121;
    static Date.trustedNow.getter(v121);
    v104 = v140;
    v105 = Date.timeIntervalSince(_:)(v103);
    v106 = *(void (**)(uint64_t, uint64_t))(v137 + 8);
    v107 = v147;
    v106(v103, v147);
    v150 = fabs(v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v88 + 34, v88 + 42);
    v106((uint64_t)v104, v107);
    *(_WORD *)(v88 + 42) = 2048;
    v108 = v143;
    v109 = *(int *)(v135 + 48);
    v110 = (uint64_t)v126;
    v132((uint64_t)v126, (os_log_t)v143, v92);
    *(_QWORD *)(v110 + v109) = *(_QWORD *)(v108 + v109);
    swift_beginAccess(v82 + 16, &v150, 32, 0);
    v111 = *(_QWORD *)(v82 + 16);
    if (*(_QWORD *)(v111 + 16))
    {
      v112 = sub_100003FB0(v110);
      v113 = v128;
      if ((v114 & 1) != 0)
        v115 = *(_QWORD *)(*(_QWORD *)(v111 + 56) + 8 * v112);
      else
        v115 = 0;
    }
    else
    {
      v115 = 0;
      v113 = v128;
    }
    swift_endAccess(&v150);
    ((void (*)(char *, uint64_t))v113)(v126, v144);
    swift_release();
    sub_100004048(v143, &qword_1010FB1A0);
    v150 = v115;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, &v151, v88 + 44, v88 + 52);
    swift_release();
    sub_100004048(v133, &qword_1010FB1A0);
    v119 = v146;
    _os_log_impl((void *)&_mh_execute_header, v146, (os_log_type_t)v130, "Unterminated fetch with %ld results for beacon %{private,mask.hash}s after %f seconds, %ld round trip(s).", (uint8_t *)v88, 0x34u);
    v120 = v129;
    swift_arrayDestroy(v129, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v120, -1, -1);
    swift_slowDealloc(v88, -1, -1);

    (*(void (**)(char *, uint64_t))(v136 + 8))(v134, v145);
    return ((uint64_t (*)(char *, uint64_t))v106)(v148, v147);
  }
  else
  {
    swift_release();
    sub_100004048(v80, &qword_1010FB1A0);
    sub_100004048(v138, &qword_1010FB1A0);
    swift_release();

    sub_100004048(v81, &qword_1010FB1A0);
    v116 = *(void (**)(char *, uint64_t))(v137 + 8);
    v117 = v147;
    v116(v140, v147);
    sub_100004048(v141, &qword_1010FB1A0);
    sub_100004048(v142, &qword_1010FB1A0);
    sub_100004048(v139, &qword_1010FB1A0);
    (*(void (**)(char *, uint64_t))(v136 + 8))(v67, v145);
    return ((uint64_t (*)(char *, uint64_t))v116)(v87, v117);
  }
}

uint64_t sub_1003F8440(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = type metadata accessor for BeaconObservation(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = *(_QWORD *)(a2 + 8);
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, a1, v13);
  v14 = &v11[*(int *)(v8 + 20)];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v14, a3, v15);
  v11[*(int *)(v8 + 24)] = a4;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(v16, v18 + *(_QWORD *)(v9 + 72), v17 | 7);
  *(_OWORD *)(v19 + 16) = xmmword_100E22B00;
  sub_10005972C((uint64_t)v11, v19 + v18, type metadata accessor for BeaconObservation);
  type metadata accessor for Transaction(0);
  v22 = v12;
  v23 = v19;
  v24 = 0;
  v25 = 0;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001514CC, v21, &type metadata for () + 1);
  swift_bridgeObjectRelease();
  return sub_1000126B0((uint64_t)v11, type metadata accessor for BeaconObservation);
}

uint64_t sub_1003F85D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[18] = a2;
  v3[19] = a3;
  v3[17] = a1;
  v4 = sub_10001A9A8(&qword_1010FB238);
  v3[20] = v4;
  v5 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[21] = swift_task_alloc(v5);
  v3[22] = swift_task_alloc(v5);
  v6 = type metadata accessor for Logger(0);
  v3[23] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[24] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[25] = swift_task_alloc(v8);
  v3[26] = swift_task_alloc(v8);
  return swift_task_switch(sub_1003F867C, 0, 0);
}

uint64_t sub_1003F867C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC18 + dword_1010EBC18);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC1C);
    *(_QWORD *)(v0 + 216) = v2;
    *v2 = v0;
    v2[1] = sub_1003F8768;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003F8768(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003F87C4, 0, 0);
}

uint64_t sub_1003F87C4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 224))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return swift_task_switch(sub_1003F8918, *(_QWORD *)(v0 + 224), 0);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 208);
    v4 = *(_QWORD *)(v0 + 184);
    v5 = *(_QWORD *)(v0 + 192);
    v6 = *(_QWORD *)(v0 + 144);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v7 = type metadata accessor for LocationFetcher(0);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v6 + *(int *)(v7 + 32), v4);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Missing PencilPairingService!", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }
    v12 = *(_QWORD *)(v0 + 208);
    v13 = *(_QWORD *)(v0 + 184);
    v14 = *(_QWORD *)(v0 + 192);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    v15 = sub_1006BAA34((uint64_t)_swiftEmptyArrayStorage);
    v17 = *(_QWORD *)(v0 + 200);
    v16 = *(_QWORD *)(v0 + 208);
    v19 = *(_QWORD *)(v0 + 168);
    v18 = *(_QWORD *)(v0 + 176);
    **(_QWORD **)(v0 + 136) = v15;
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003F8918()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10110BFCC);
  *(_QWORD *)(v0 + 232) = v1;
  *v1 = v0;
  v1[1] = sub_1003F8974;
  return sub_1008C6104(*(_QWORD *)(v0 + 152));
}

uint64_t sub_1003F8974(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 232);
  *(_QWORD *)(v3 + 240) = a1;
  *(_QWORD *)(v3 + 248) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1003F8CA8;
  else
    v5 = sub_1003F89E0;
  return swift_task_switch(v5, 0, 0);
}

void sub_1003F89E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v25 = *(_QWORD *)(v0 + 160);
  v26 = _swiftEmptyDictionarySingleton;
  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v23 = v1 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(v1 + 64);
  v24 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain(v1);
  v6 = 0;
  if (!v5)
    goto LABEL_5;
LABEL_4:
  v7 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v7 | (v6 << 6); ; i = __clz(__rbit64(v10)) + (v6 << 6))
  {
    v13 = *(_QWORD *)(v0 + 168);
    v12 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v1 + 48);
    v15 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * i, v15);
    v16 = *(_QWORD *)(v1 + 56);
    v17 = type metadata accessor for DeviceEvent(0);
    sub_10005972C(v16 + *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72) * i, v12 + *(int *)(v25 + 48), type metadata accessor for DeviceEvent);
    sub_100005CF0(v12, v13, &qword_1010FB238);
    sub_1003F8F10((uint64_t)&v26, v13);
    if (v2)
    {
      v18 = *(_QWORD *)(v0 + 168);
      swift_bridgeObjectRelease();
      sub_100004048(v18, &qword_1010FB238);
      swift_release();
      return;
    }
    sub_100004048(*(_QWORD *)(v0 + 168), &qword_1010FB238);
    if (v5)
      goto LABEL_4;
LABEL_5:
    v9 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v9 >= v24)
      goto LABEL_25;
    v10 = *(_QWORD *)(v23 + 8 * v9);
    ++v6;
    if (!v10)
    {
      v6 = v9 + 1;
      if (v9 + 1 >= v24)
        goto LABEL_25;
      v10 = *(_QWORD *)(v23 + 8 * v6);
      if (!v10)
      {
        v6 = v9 + 2;
        if (v9 + 2 >= v24)
          goto LABEL_25;
        v10 = *(_QWORD *)(v23 + 8 * v6);
        if (!v10)
        {
          v6 = v9 + 3;
          if (v9 + 3 >= v24)
            goto LABEL_25;
          v10 = *(_QWORD *)(v23 + 8 * v6);
          if (!v10)
            break;
        }
      }
    }
LABEL_20:
    v5 = (v10 - 1) & v10;
  }
  v11 = v9 + 4;
  if (v11 >= v24)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v20 = *(_QWORD *)(v0 + 200);
    v19 = *(_QWORD *)(v0 + 208);
    v22 = *(_QWORD *)(v0 + 168);
    v21 = *(_QWORD *)(v0 + 176);
    **(_QWORD **)(v0 + 136) = v26;
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v10 = *(_QWORD *)(v23 + 8 * v11);
  if (v10)
  {
    v6 = v11;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v6 >= v24)
      goto LABEL_25;
    v10 = *(_QWORD *)(v23 + 8 * v6);
    ++v11;
    if (v10)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_1003F8CA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 120) = v1;
  swift_errorRetain(v1);
  v2 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  if ((swift_dynamicCast(v0 + 256, v0 + 120, v2, &type metadata for PencilLocationsFetcher.Error, 6) & 1) != 0
    && *(_BYTE *)(v0 + 256) == 1)
  {
    v3 = *(_QWORD *)(v0 + 248);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 248);
    v6 = *(_QWORD *)(v0 + 192);
    v5 = *(_QWORD *)(v0 + 200);
    v7 = *(_QWORD *)(v0 + 184);
    v8 = *(_QWORD *)(v0 + 144);
    v9 = type metadata accessor for LocationFetcher(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8 + *(int *)(v9 + 32), v7);
    swift_errorRetain(v4);
    v10 = swift_errorRetain(v4);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(_QWORD *)(v0 + 248);
    if (v13)
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v15 = 138543362;
      swift_errorRetain(v14);
      v17 = _swift_stdlib_bridgeErrorToNSError(v14);
      *(_QWORD *)(v0 + 128) = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v15 + 4, v15 + 12);
      *v16 = v17;
      swift_errorRelease(v14);
      swift_errorRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failure on local findable locations fetch! %{public}@", v15, 0xCu);
      v18 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v16, 1, v18);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      swift_errorRelease(*(_QWORD *)(v0 + 248));
      swift_errorRelease(v14);
    }
    v3 = *(_QWORD *)(v0 + 248);
    v20 = *(_QWORD *)(v0 + 192);
    v19 = *(_QWORD *)(v0 + 200);
    v21 = *(_QWORD *)(v0 + 184);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  }
  v22 = sub_1006BAA34((uint64_t)_swiftEmptyArrayStorage);
  swift_release();
  swift_errorRelease(v3);
  v24 = *(_QWORD *)(v0 + 200);
  v23 = *(_QWORD *)(v0 + 208);
  v26 = *(_QWORD *)(v0 + 168);
  v25 = *(_QWORD *)(v0 + 176);
  **(_QWORD **)(v0 + 136) = v22;
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F8F10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(void);
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  void (*v62)(uint64_t, char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  _OWORD *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;

  v77 = a1;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v3);
  v76 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v83 = *(_QWORD *)(v5 - 8);
  v84 = v5;
  __chkstk_darwin(v5);
  v82 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for BeaconIdentifier(0);
  __chkstk_darwin(v73);
  v72 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v81 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v80 = (char *)&v63 - v12;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F7810);
  __chkstk_darwin(v13);
  v67 = (_OWORD *)((char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_10001A9A8(&qword_1011003F0);
  __chkstk_darwin(v15);
  v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_1010FB238);
  v19 = __chkstk_darwin(v18);
  v74 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v70 = (char *)&v63 - v22;
  v23 = __chkstk_darwin(v21);
  v78 = (char *)&v63 - v24;
  v25 = __chkstk_darwin(v23);
  v79 = (uint64_t)&v63 - v26;
  __chkstk_darwin(v25);
  v28 = (char *)&v63 - v27;
  v29 = type metadata accessor for DeviceEvent.Location(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v85 = (uint64_t *)((char *)&v63 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  v86 = v9;
  v71 = v18;
  v32 = *(int *)(v18 + 48);
  v33 = (uint64_t)&v28[v32];
  v34 = a2 + v32;
  v35 = *(void (**)(void))(v9 + 16);
  v75 = a2;
  ((void (*)(char *, uint64_t, uint64_t))v35)(v28, a2, v8);
  v69 = v34;
  sub_10005972C(v34, v33, type metadata accessor for DeviceEvent);
  v36 = type metadata accessor for DeviceEvent(0);
  sub_10000F9B8(v33 + *(int *)(v36 + 28), (uint64_t)v17, &qword_1011003F0);
  sub_1000126B0(v33, type metadata accessor for DeviceEvent);
  v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  v68 = v29;
  if (v37(v17, 1, v29) == 1)
  {
    sub_100004048((uint64_t)v17, &qword_1011003F0);
    return (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v28, v8);
  }
  else
  {
    sub_1000126EC((uint64_t)v17, (uint64_t)v85, type metadata accessor for DeviceEvent.Location);
    v65 = *(void (**)(char *, uint64_t))(v86 + 8);
    v65(v28, v8);
    v39 = v71;
    v66 = v79 + *(int *)(v71 + 48);
    v40 = v66;
    v41 = v75;
    v35();
    v42 = v69;
    v43 = sub_10005972C(v69, v40, type metadata accessor for DeviceEvent);
    UUID.init()(v43);
    v44 = (uint64_t)&v78[*(int *)(v39 + 48)];
    v35();
    v64 = v36;
    sub_10005972C(v42, v44, type metadata accessor for DeviceEvent);
    v45 = v72;
    sub_10005972C(v44 + *(int *)(v36 + 36), (uint64_t)v72, type metadata accessor for BeaconIdentifier);
    sub_1000126B0(v44, type metadata accessor for DeviceEvent);
    ((void (*)(char *, char *, uint64_t))v35)(v81, &v45[*(int *)(v73 + 20)], v8);
    sub_1000126B0((uint64_t)v45, type metadata accessor for BeaconIdentifier);
    v47 = *v85;
    v46 = v85[1];
    v48 = v85[2];
    v49 = (char *)v85 + *(int *)(v68 + 28);
    v72 = *(char **)(v83 + 16);
    ((void (*)(char *, char *, uint64_t))v72)(v82, v49, v84);
    v50 = v70;
    v51 = (uint64_t)&v70[*(int *)(v39 + 48)];
    ((void (*)(char *, uint64_t, uint64_t))v35)(v70, v41, v8);
    sub_10005972C(v42, v51, type metadata accessor for DeviceEvent);
    v52 = *(_BYTE *)(v51 + 9);
    sub_1000126B0(v51, type metadata accessor for DeviceEvent);
    v73 = 0x104121110040200uLL >> (8 * v52);
    v53 = v50;
    v54 = v65;
    v65(v53, v8);
    v55 = v74;
    v56 = (uint64_t)&v74[*(int *)(v39 + 48)];
    ((void (*)(char *, uint64_t, uint64_t))v35)(v74, v41, v8);
    sub_10005972C(v42, v56, type metadata accessor for DeviceEvent);
    v57 = (uint64_t)v76;
    v58 = v84;
    ((void (*)(char *, uint64_t, uint64_t))v72)(v76, v56 + *(int *)(v64 + 24), v84);
    sub_1000126B0(v56, type metadata accessor for DeviceEvent);
    v59 = v83;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v83 + 56))(v57, 0, 1, v58);
    v60 = (uint64_t)v67;
    *v67 = xmmword_100E22FC0;
    v61 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
    v62 = *(void (**)(uint64_t, char *, uint64_t))(v86 + 32);
    v62(v60 + v61[5], v80, v8);
    v62(v60 + v61[6], v81, v8);
    *(_QWORD *)(v60 + v61[7]) = v47;
    *(_QWORD *)(v60 + v61[8]) = v46;
    *(_QWORD *)(v60 + v61[9]) = v48;
    (*(void (**)(uint64_t, char *, uint64_t))(v59 + 32))(v60 + v61[10], v82, v58);
    *(_BYTE *)(v60 + v61[11]) = v73;
    sub_100005CF0(v57, v60 + v61[12], (uint64_t *)&unk_1010EA690);
    *(_QWORD *)(v60 + v61[13]) = 0;
    v54(v55, v8);
    v54(v78, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v61 - 1) + 56))(v60, 0, 1, v61);
    sub_1000FF71C(v60, v79);
    sub_1000126B0((uint64_t)v85, type metadata accessor for DeviceEvent.Location);
    return sub_1000126B0(v66, type metadata accessor for DeviceEvent);
  }
}

unint64_t sub_1003F95EC(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  int *v36;
  uint64_t (*v37)(uint64_t);
  char *v38;
  uint64_t (*v39)(uint64_t);
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, int *);
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  int *v66;
  void *v67;
  id v68;
  double v69;
  uint64_t v70;
  unint64_t result;
  char v72;
  int64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  BOOL v84;
  int64_t v85;
  unint64_t v86;
  int64_t v87;
  double v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD v110[4];
  uint64_t v111;

  v104 = a3;
  v105 = 0xEC0000006E6F6974;
  v100 = 0x61636F4C6E736361;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F7810);
  v11 = __chkstk_darwin(v10);
  v99 = (uint64_t)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v102 = (uint64_t)&v94 - v13;
  v111 = type metadata accessor for BeaconEstimatedLocation(0);
  v103 = *(_QWORD *)(v111 - 8);
  v14 = __chkstk_darwin(v111);
  v109 = (uint64_t)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v106 = (char *)&v94 - v17;
  v18 = __chkstk_darwin(v16);
  v98 = (uint64_t)&v94 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v94 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v94 - v24;
  __chkstk_darwin(v23);
  v101 = (uint64_t)&v94 - v26;
  v27 = a1[6];
  v28 = a1[7];
  sub_10001AA44(a1 + 3, v27);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v28 + 64))(v27, v28) & 1) != 0)
  {
    v95 = a5;
    v96 = a4;
    v97 = v5;
    v29 = _swiftEmptyArrayStorage;
    v110[0] = _swiftEmptyArrayStorage;
    v30 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain(a2);
    v94 = a2;
    if (v30)
    {
      v31 = *(_QWORD *)(v103 + 72);
      v108 = (*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
      v32 = a2 + v108;
      v33 = _swiftEmptyArrayStorage;
      v34 = type metadata accessor for BeaconEstimatedLocation;
      v35 = v30;
      v36 = (int *)v111;
      v107 = v30;
      do
      {
        sub_10005972C(v32, (uint64_t)v25, v34);
        if (v25[v36[11]] == 15)
        {
          v37 = v34;
          v38 = v22;
          v39 = v37;
          sub_1000126EC((uint64_t)v25, (uint64_t)v22, v37);
          if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0)
            sub_10009A5D0(0, v33[2] + 1, 1);
          v33 = (_QWORD *)v110[0];
          v41 = *(_QWORD *)(v110[0] + 16);
          v40 = *(_QWORD *)(v110[0] + 24);
          if (v41 >= v40 >> 1)
          {
            sub_10009A5D0(v40 > 1, v41 + 1, 1);
            v33 = (_QWORD *)v110[0];
          }
          v33[2] = v41 + 1;
          v42 = (uint64_t)v33 + v108 + v41 * v31;
          v22 = v38;
          v43 = (uint64_t)v38;
          v34 = v39;
          sub_1000126EC(v43, v42, v39);
          v36 = (int *)v111;
          v30 = v107;
        }
        else
        {
          sub_1000126B0((uint64_t)v25, v34);
        }
        v32 += v31;
        --v35;
      }
      while (v35);
      v44 = (_QWORD *)v110[0];
      a2 = v94;
      v29 = _swiftEmptyArrayStorage;
    }
    else
    {
      v44 = _swiftEmptyArrayStorage;
      v36 = (int *)v111;
    }
    swift_bridgeObjectRelease();
    v45 = v102;
    sub_100A79444((uint64_t)v44, v102);
    swift_release();
    v46 = *(unsigned int (**)(uint64_t, uint64_t, int *))(v103 + 48);
    if (v46(v45, 1, v36) == 1)
    {
      sub_100004048(v45, (uint64_t *)&unk_1010F7810);
    }
    else
    {
      sub_1000126EC(v45, v101, type metadata accessor for BeaconEstimatedLocation);
      v110[0] = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(a2);
      if (v30)
      {
        v47 = (*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
        v48 = *(_QWORD *)(v103 + 72);
        v49 = a2 + v47;
        v50 = _swiftEmptyArrayStorage;
        v51 = (uint64_t)v106;
        do
        {
          sub_10005972C(v49, v51, type metadata accessor for BeaconEstimatedLocation);
          if (*(_BYTE *)(v51 + v36[11]) == 7)
          {
            sub_1000126EC(v51, v109, type metadata accessor for BeaconEstimatedLocation);
            if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0)
              sub_10009A5D0(0, v50[2] + 1, 1);
            v50 = (_QWORD *)v110[0];
            v53 = *(_QWORD *)(v110[0] + 16);
            v52 = *(_QWORD *)(v110[0] + 24);
            if (v53 >= v52 >> 1)
            {
              sub_10009A5D0(v52 > 1, v53 + 1, 1);
              v50 = (_QWORD *)v110[0];
            }
            v50[2] = v53 + 1;
            sub_1000126EC(v109, (uint64_t)v50 + v47 + v53 * v48, type metadata accessor for BeaconEstimatedLocation);
            v36 = (int *)v111;
            v51 = (uint64_t)v106;
          }
          else
          {
            sub_1000126B0(v51, type metadata accessor for BeaconEstimatedLocation);
          }
          v49 += v48;
          --v30;
        }
        while (v30);
        v29 = (_QWORD *)v110[0];
      }
      swift_bridgeObjectRelease();
      v54 = v99;
      sub_100A79444((uint64_t)v29, v99);
      swift_release();
      if (v46(v54, 1, v36) == 1)
      {
        sub_1000126B0(v101, type metadata accessor for BeaconEstimatedLocation);
        sub_100004048(v54, (uint64_t *)&unk_1010F7810);
      }
      else
      {
        v55 = v98;
        sub_1000126EC(v54, v98, type metadata accessor for BeaconEstimatedLocation);
        v56 = v101;
        v57 = static Date.> infix(_:_:)(v101 + v36[10], v55 + v36[10]);
        if ((v57 & 1) != 0)
          v58 = 0xD000000000000013;
        else
          v58 = 0x61636F4C6E736361;
        v59 = v36[9];
        v60 = *(double *)(v56 + v59);
        v61 = *(double *)(v55 + v59);
        if ((v57 & 1) != 0)
          v62 = 0x8000000100ED6130;
        else
          v62 = 0xEC0000006E6F6974;
        if (v61 >= v60)
          v63 = 0x61636F4C6E736361;
        else
          v63 = 0xD000000000000013;
        if (v61 >= v60)
          v64 = 0xEC0000006E6F6974;
        else
          v64 = 0x8000000100ED6130;
        v65 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", *(double *)(v56 + v36[7]), *(double *)(v56 + v36[8]));
        v66 = v36;
        v67 = v65;
        v68 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", *(double *)(v55 + v66[7]), *(double *)(v55 + v66[8]));
        objc_msgSend(v67, "distanceFromLocation:", v68);
        sub_100CE4F28(v58, v62, v63, v64, v69, vabdd_f64(v60, v61));
        swift_bridgeObjectRelease();

        sub_1000126B0(v55, type metadata accessor for BeaconEstimatedLocation);
        sub_1000126B0(v56, type metadata accessor for BeaconEstimatedLocation);
        v100 = v58;
        v105 = v62;
      }
    }
    a4 = v96;
    a5 = v95;
  }
  v70 = *v104;
  if (!*(_QWORD *)(*v104 + 16))
    return swift_bridgeObjectRelease();
  result = sub_100003FB0(a4);
  if ((v72 & 1) == 0)
    return swift_bridgeObjectRelease();
  v73 = 0;
  v74 = 0;
  v75 = *(_QWORD *)(*(_QWORD *)(v70 + 56) + 8 * result);
  v76 = 1 << *(_BYTE *)(v75 + 32);
  v77 = -1;
  if (v76 < 64)
    v77 = ~(-1 << v76);
  v78 = v75 + 64;
  v79 = v77 & *(_QWORD *)(v75 + 64);
  v80 = (unint64_t)(v76 + 63) >> 6;
  while (1)
  {
    if (v79)
    {
      v81 = __clz(__rbit64(v79));
      v79 &= v79 - 1;
      v82 = v81 | (v73 << 6);
      goto LABEL_49;
    }
    v85 = v73 + 1;
    if (__OFADD__(v73, 1))
      goto LABEL_77;
    if (v85 >= v80)
      break;
    v86 = *(_QWORD *)(v78 + 8 * v85);
    ++v73;
    if (!v86)
    {
      v73 = v85 + 1;
      if (v85 + 1 >= v80)
        break;
      v86 = *(_QWORD *)(v78 + 8 * v73);
      if (!v86)
      {
        v73 = v85 + 2;
        if (v85 + 2 >= v80)
          break;
        v86 = *(_QWORD *)(v78 + 8 * v73);
        if (!v86)
        {
          v73 = v85 + 3;
          if (v85 + 3 >= v80)
            break;
          v86 = *(_QWORD *)(v78 + 8 * v73);
          if (!v86)
          {
            v73 = v85 + 4;
            if (v85 + 4 >= v80)
              break;
            v86 = *(_QWORD *)(v78 + 8 * v73);
            if (!v86)
            {
              v87 = v85 + 5;
              if (v87 >= v80)
                break;
              v86 = *(_QWORD *)(v78 + 8 * v87);
              if (!v86)
              {
                while (1)
                {
                  v73 = v87 + 1;
                  if (__OFADD__(v87, 1))
                    goto LABEL_78;
                  if (v73 >= v80)
                    goto LABEL_69;
                  v86 = *(_QWORD *)(v78 + 8 * v73);
                  ++v87;
                  if (v86)
                    goto LABEL_68;
                }
              }
              v73 = v87;
            }
          }
        }
      }
    }
LABEL_68:
    v79 = (v86 - 1) & v86;
    v82 = __clz(__rbit64(v86)) + (v73 << 6);
LABEL_49:
    v83 = *(_QWORD *)(*(_QWORD *)(v75 + 56) + 8 * v82);
    v84 = __OFADD__(v74, v83);
    v74 += v83;
    if (v84)
    {
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
      return result;
    }
  }
LABEL_69:
  v88 = (double)*(uint64_t *)(v75 + 16) / (double)v74;
  if (v88 > 1.001)
  {
    swift_beginAccess(a5, v110, 32, 0);
    v89 = *a5;
    if (*(_QWORD *)(*a5 + 16) && (v90 = sub_100003FB0(a4), (v91 & 1) != 0))
      v92 = *(_QWORD *)(*(_QWORD *)(v89 + 56) + 8 * v90);
    else
      v92 = 0;
    v93 = v100;
    swift_endAccess(v110);
    sub_100CE5090(v93, v105, v92, v74, v88);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003F9E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4[60] = a3;
  v4[61] = a4;
  v4[58] = a1;
  v4[59] = a2;
  v5 = *(_QWORD *)(type metadata accessor for LocationFetcher(0) - 8);
  v4[62] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v4[63] = v6;
  v4[64] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v4[65] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[66] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[67] = swift_task_alloc(v9);
  v4[68] = swift_task_alloc(v9);
  v10 = sub_10001A9A8(&qword_1010F1990);
  v4[69] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[70] = swift_task_alloc(v11);
  v4[71] = swift_task_alloc(v11);
  v12 = type metadata accessor for Date(0);
  v4[72] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[73] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[74] = swift_task_alloc(v14);
  v4[75] = swift_task_alloc(v14);
  return swift_task_switch(sub_1003F9F3C, 0, 0);
}

uint64_t sub_1003F9F3C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 344, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 160, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 184))
  {
    sub_10000F9FC((__int128 *)(v0 + 160), v0 + 280);
    sub_10001AA44((_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 304));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBD0 + dword_1010EBBD0);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBD4);
    *(_QWORD *)(v0 + 608) = v2;
    *v2 = v0;
    v2[1] = sub_1003FA028;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003FA028(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 608);
  *(_QWORD *)(*(_QWORD *)v1 + 616) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003FA084, 0, 0);
}

uint64_t sub_1003FA084()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, _QWORD, _QWORD);
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t inited;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, _QWORD, _QWORD);
  uint64_t v73;

  v1 = (_QWORD *)(v0 + 280);
  if (!*(_QWORD *)(v0 + 616))
  {
    v11 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
LABEL_7:
    v12 = *(_QWORD *)(v0 + 600);
    v13 = *(_QWORD *)(v0 + 592);
    v14 = *(_QWORD *)(v0 + 568);
    v15 = *(_QWORD *)(v0 + 560);
    v16 = *(_QWORD *)(v0 + 544);
    v17 = *(_QWORD *)(v0 + 536);
    v18 = *(_QWORD *)(v0 + 512);
    (*(void (**)(uint64_t))(v0 + 464))(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(_QWORD *)(v0 + 480);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v0 + 624) = v3;
  if (!v3)
  {
    v11 = swift_release();
    goto LABEL_7;
  }
  v4 = *(_QWORD *)(v0 + 480);
  *(_QWORD *)(v0 + 632) = 0;
  v5 = v4 + 32;
  swift_bridgeObjectRetain(v4);
  sub_100030784(v5, v0 + 200);
  v6 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 232);
  sub_10001AA44((_QWORD *)(v0 + 200), v6);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 112))(v6, v7) & 1) != 0)
  {
    v8 = *(_QWORD *)(v0 + 592);
    v9 = *(_QWORD *)(v0 + 584);
    v10 = *(_QWORD *)(v0 + 576);
    static Date.trustedNow.getter(v8);
    Date.addingTimeInterval(_:)(14400.0);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  else
  {
    static Date.trustedNow.getter(*(_QWORD *)(v0 + 600));
  }
  v20 = *(_QWORD **)(v0 + 488);
  v21 = v20[6];
  v22 = v20[7];
  sub_10001AA44(v20 + 3, v21);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 72))(v21, v22);
  if ((v25 & 1) != 0 || (v26 = v23) == 0)
  {
    v40 = *(_QWORD *)(v0 + 568);
    v41 = *(int *)(*(_QWORD *)(v0 + 552) + 48);
    v42 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 584) + 16);
    v42(v40, *(_QWORD *)(v0 + 600), *(_QWORD *)(v0 + 576));
    *(_QWORD *)(v40 + v41) = 7;
    if (qword_1010E99C0 != -1)
      swift_once(&qword_1010E99C0, sub_100173218);
    v43 = type metadata accessor for Logger(0);
    sub_10001A9E8(v43, (uint64_t)qword_1011B69B0);
    v44 = sub_100030784(v0 + 200, v0 + 240);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.default.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      v47 = *(_QWORD *)(v0 + 544);
      v70 = *(_QWORD *)(v0 + 528);
      v69 = *(_QWORD *)(v0 + 520);
      v48 = swift_slowAlloc(22, -1);
      v71 = swift_slowAlloc(32, -1);
      v73 = v71;
      *(_DWORD *)v48 = 141558275;
      *(_QWORD *)(v0 + 440) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v48 + 4, v48 + 12);
      *(_WORD *)(v48 + 12) = 2081;
      v72 = v42;
      v50 = *(_QWORD *)(v0 + 264);
      v49 = *(_QWORD *)(v0 + 272);
      sub_10001AA44((_QWORD *)(v0 + 240), v50);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v49 + 8) + 8) + 32))(v50);
      v51 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v52 = dispatch thunk of CustomStringConvertible.description.getter(v69, v51);
      v54 = v53;
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v47, v69);
      *(_QWORD *)(v0 + 448) = sub_100016940(v52, v54, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v0 + 456, v48 + 14, v48 + 22);
      v42 = v72;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 240));
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Fetching shared beacon: %{private,mask.hash}s.", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 240));
    }

    v55 = *(_QWORD *)(v0 + 560);
    v56 = *(_QWORD **)(v0 + 488);
    v57 = v56 + 3;
    v58 = *(int *)(*(_QWORD *)(v0 + 552) + 48);
    v42(v55, *(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576));
    *(_QWORD *)(v55 + v58) = 7;
    v59 = sub_10001A9A8(&qword_1010F7A80);
    inited = swift_initStackObject(v59, v0 + 88);
    *(_QWORD *)(v0 + 672) = inited;
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    sub_100030784(v0 + 200, inited + 32);
    v61 = v56[6];
    v62 = v56[7];
    sub_10001AA44(v57, v61);
    v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 48))(v61, v62);
    v65 = v64;
    v67 = v66;
    *(_QWORD *)(v0 + 680) = v66;
    v68 = (_QWORD *)swift_task_alloc(dword_1010F198C);
    *(_QWORD *)(v0 + 688) = v68;
    *v68 = v0;
    v68[1] = sub_1003FA7D4;
    return sub_10017E9FC(*(_QWORD *)(v0 + 560), 7, inited, v63, v65, v67);
  }
  else
  {
    v27 = v24;
    v28 = *(_QWORD **)(v0 + 488);
    v29 = v28 + 3;
    v30 = sub_10001A9A8(&qword_1010F7A80);
    v31 = swift_initStackObject(v30, v0 + 16);
    *(_QWORD *)(v0 + 640) = v31;
    *(_OWORD *)(v31 + 16) = xmmword_100E22B00;
    sub_100030784(v0 + 200, v31 + 32);
    v32 = v28[6];
    v33 = v28[7];
    sub_10001AA44(v29, v32);
    v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 48))(v32, v33);
    v36 = v35;
    v38 = v37;
    *(_QWORD *)(v0 + 648) = v37;
    v39 = (_QWORD *)swift_task_alloc(dword_1010F1914);
    *(_QWORD *)(v0 + 656) = v39;
    *v39 = v0;
    v39[1] = sub_1003FA634;
    return sub_1001732E0(v26, v27, v31, v34, v36, v38);
  }
}

uint64_t sub_1003FA634(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v3 = (_QWORD *)*v2;
  v3[46] = v2;
  v3[47] = a1;
  v3[48] = v1;
  v4 = v3[82];
  v5 = v3[80];
  v3[83] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  swift_setDeallocating(v5);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  swift_arrayDestroy(v5 + 32, v6, v7);
  if (v1)
    v8 = sub_1003FB0F4;
  else
    v8 = sub_1003FA6E4;
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1003FA6E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = v0[47];
  v3 = v0[63];
  v2 = v0[64];
  v4 = v0[62];
  sub_10005972C(v0[61], v2, type metadata accessor for LocationFetcher);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 16) & ~v5;
  v7 = (v3 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = swift_allocObject(&unk_101075960, v7 + 8, v5 | 7);
  v0[88] = v8;
  sub_1000126EC(v2, v8 + v6, type metadata accessor for LocationFetcher);
  *(_QWORD *)(v8 + v7) = v1;
  v9 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
  v0[89] = v9;
  v10 = sub_10001A9A8(&qword_1010FB180);
  *v9 = v0;
  v9[1] = sub_1003FA9A0;
  return unsafeBlocking<A>(_:)(v0 + 54, sub_100425938, v8, v10);
}

uint64_t sub_1003FA7D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v3 = (_QWORD *)*v2;
  v3[49] = v2;
  v3[50] = a1;
  v3[51] = v1;
  v4 = v3[86];
  v5 = v3[84];
  v3[87] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  swift_setDeallocating(v5);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  swift_arrayDestroy(v5 + 32, v6, v7);
  if (v1)
  {
    v8 = sub_1003FB320;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v3[73] + 8))(v3[70], v3[72]);
    v8 = sub_1003FA8A0;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_1003FA8A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  sub_100004048(v0[71], &qword_1010F1990);
  v1 = v0[50];
  v3 = v0[63];
  v2 = v0[64];
  v4 = v0[62];
  sub_10005972C(v0[61], v2, type metadata accessor for LocationFetcher);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 16) & ~v5;
  v7 = (v3 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = swift_allocObject(&unk_101075960, v7 + 8, v5 | 7);
  v0[88] = v8;
  sub_1000126EC(v2, v8 + v6, type metadata accessor for LocationFetcher);
  *(_QWORD *)(v8 + v7) = v1;
  v9 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
  v0[89] = v9;
  v10 = sub_10001A9A8(&qword_1010FB180);
  *v9 = v0;
  v9[1] = sub_1003FA9A0;
  return unsafeBlocking<A>(_:)(v0 + 54, sub_100425938, v8, v10);
}

uint64_t sub_1003FA9A0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 712));
  swift_release();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1003FAA04, 0, 0);
}

uint64_t sub_1003FAA04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  (*(void (**)(_QWORD, _QWORD))(v0[73] + 8))(v0[75], v0[72]);
  v0[90] = 0;
  v1 = v0[28];
  v2 = v0[29];
  sub_10001AA44(v0 + 25, v1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8) + 32))(v1);
  v3 = (_QWORD *)swift_task_alloc(dword_1010FB1EC);
  v0[91] = v3;
  *v3 = v0;
  v3[1] = sub_1003FAAAC;
  return sub_1003FBCF8(v0[67], 0);
}

uint64_t sub_1003FAAAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 728);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 536);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 528);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 520);
  *(_QWORD *)(*(_QWORD *)v1 + 736) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    v6 = sub_1003FB574;
  else
    v6 = sub_1003FAB34;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1003FAB34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, _QWORD, _QWORD);
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t inited;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, _QWORD, _QWORD);
  uint64_t v71;

  swift_errorRelease(*(_QWORD *)(v0 + 720));
  v1 = *(_QWORD *)(v0 + 624);
  v2 = *(_QWORD *)(v0 + 632) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 200));
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    v3 = swift_release();
    v4 = *(_QWORD *)(v0 + 600);
    v5 = *(_QWORD *)(v0 + 592);
    v6 = *(_QWORD *)(v0 + 568);
    v7 = *(_QWORD *)(v0 + 560);
    v8 = *(_QWORD *)(v0 + 544);
    v9 = *(_QWORD *)(v0 + 536);
    v10 = *(_QWORD *)(v0 + 512);
    (*(void (**)(uint64_t))(v0 + 464))(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 632) + 1;
    *(_QWORD *)(v0 + 632) = v12;
    sub_100030784(*(_QWORD *)(v0 + 480) + 40 * v12 + 32, v0 + 200);
    v13 = *(_QWORD *)(v0 + 224);
    v14 = *(_QWORD *)(v0 + 232);
    sub_10001AA44((_QWORD *)(v0 + 200), v13);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v14 + 112))(v13, v14) & 1) != 0)
    {
      v15 = *(_QWORD *)(v0 + 592);
      v16 = *(_QWORD *)(v0 + 584);
      v17 = *(_QWORD *)(v0 + 576);
      static Date.trustedNow.getter(v15);
      Date.addingTimeInterval(_:)(14400.0);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    }
    else
    {
      static Date.trustedNow.getter(*(_QWORD *)(v0 + 600));
    }
    v18 = *(_QWORD **)(v0 + 488);
    v19 = v18[6];
    v20 = v18[7];
    sub_10001AA44(v18 + 3, v19);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 72))(v19, v20);
    if ((v23 & 1) != 0 || (v24 = v21) == 0)
    {
      v38 = *(_QWORD *)(v0 + 568);
      v39 = *(int *)(*(_QWORD *)(v0 + 552) + 48);
      v40 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 584) + 16);
      v40(v38, *(_QWORD *)(v0 + 600), *(_QWORD *)(v0 + 576));
      *(_QWORD *)(v38 + v39) = 7;
      if (qword_1010E99C0 != -1)
        swift_once(&qword_1010E99C0, sub_100173218);
      v41 = type metadata accessor for Logger(0);
      sub_10001A9E8(v41, (uint64_t)qword_1011B69B0);
      v42 = sub_100030784(v0 + 200, v0 + 240);
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.default.getter(v43);
      if (os_log_type_enabled(v43, v44))
      {
        v45 = *(_QWORD *)(v0 + 544);
        v68 = *(_QWORD *)(v0 + 528);
        v67 = *(_QWORD *)(v0 + 520);
        v46 = swift_slowAlloc(22, -1);
        v69 = swift_slowAlloc(32, -1);
        v71 = v69;
        *(_DWORD *)v46 = 141558275;
        *(_QWORD *)(v0 + 440) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v46 + 4, v46 + 12);
        *(_WORD *)(v46 + 12) = 2081;
        v70 = v40;
        v48 = *(_QWORD *)(v0 + 264);
        v47 = *(_QWORD *)(v0 + 272);
        sub_10001AA44((_QWORD *)(v0 + 240), v48);
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v47 + 8) + 8) + 32))(v48);
        v49 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v50 = dispatch thunk of CustomStringConvertible.description.getter(v67, v49);
        v52 = v51;
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v45, v67);
        *(_QWORD *)(v0 + 448) = sub_100016940(v50, v52, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v0 + 456, v46 + 14, v46 + 22);
        v40 = v70;
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 240));
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Fetching shared beacon: %{private,mask.hash}s.", (uint8_t *)v46, 0x16u);
        swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v69, -1, -1);
        swift_slowDealloc(v46, -1, -1);
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 240));
      }

      v53 = *(_QWORD *)(v0 + 560);
      v54 = *(_QWORD **)(v0 + 488);
      v55 = v54 + 3;
      v56 = *(int *)(*(_QWORD *)(v0 + 552) + 48);
      v40(v53, *(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576));
      *(_QWORD *)(v53 + v56) = 7;
      v57 = sub_10001A9A8(&qword_1010F7A80);
      inited = swift_initStackObject(v57, v0 + 88);
      *(_QWORD *)(v0 + 672) = inited;
      *(_OWORD *)(inited + 16) = xmmword_100E22B00;
      sub_100030784(v0 + 200, inited + 32);
      v59 = v54[6];
      v60 = v54[7];
      sub_10001AA44(v55, v59);
      v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 48))(v59, v60);
      v63 = v62;
      v65 = v64;
      *(_QWORD *)(v0 + 680) = v64;
      v66 = (_QWORD *)swift_task_alloc(dword_1010F198C);
      *(_QWORD *)(v0 + 688) = v66;
      *v66 = v0;
      v66[1] = sub_1003FA7D4;
      return sub_10017E9FC(*(_QWORD *)(v0 + 560), 7, inited, v61, v63, v65);
    }
    else
    {
      v25 = v22;
      v26 = *(_QWORD **)(v0 + 488);
      v27 = v26 + 3;
      v28 = sub_10001A9A8(&qword_1010F7A80);
      v29 = swift_initStackObject(v28, v0 + 16);
      *(_QWORD *)(v0 + 640) = v29;
      *(_OWORD *)(v29 + 16) = xmmword_100E22B00;
      sub_100030784(v0 + 200, v29 + 32);
      v30 = v26[6];
      v31 = v26[7];
      sub_10001AA44(v27, v30);
      v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 48))(v30, v31);
      v34 = v33;
      v36 = v35;
      *(_QWORD *)(v0 + 648) = v35;
      v37 = (_QWORD *)swift_task_alloc(dword_1010F1914);
      *(_QWORD *)(v0 + 656) = v37;
      *v37 = v0;
      v37[1] = sub_1003FA634;
      return sub_1001732E0(v24, v25, v29, v32, v34, v36);
    }
  }
}

uint64_t sub_1003FB0F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  (*(void (**)(_QWORD, _QWORD))(v0[73] + 8))(v0[75], v0[72]);
  v1 = v0[83];
  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B69B0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    v0[53] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 53, v0 + 54, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to fetch shared item locations: %@.", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v0[90] = v1;
  v10 = v0[28];
  v11 = v0[29];
  sub_10001AA44(v0 + 25, v10);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8) + 32))(v10);
  v12 = (_QWORD *)swift_task_alloc(dword_1010FB1EC);
  v0[91] = v12;
  *v12 = v0;
  v12[1] = sub_1003FAAAC;
  return sub_1003FBCF8(v0[67], v1);
}

uint64_t sub_1003FB320()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = v0[75];
  v2 = v0[73];
  v3 = v0[72];
  v4 = v0[70];
  sub_100004048(v0[71], &qword_1010F1990);
  v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v5(v1, v3);
  v5(v4, v3);
  v6 = v0[87];
  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B69B0);
  swift_errorRetain(v6);
  v8 = swift_errorRetain(v6);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    swift_errorRetain(v6);
    v13 = _swift_stdlib_bridgeErrorToNSError(v6);
    v0[53] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 53, v0 + 54, v11 + 4, v11 + 12);
    *v12 = v13;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to fetch shared item locations: %@.", v11, 0xCu);
    v14 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_errorRelease(v6);
    swift_errorRelease(v6);
  }

  v0[90] = v6;
  v15 = v0[28];
  v16 = v0[29];
  sub_10001AA44(v0 + 25, v15);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 8) + 32))(v15);
  v17 = (_QWORD *)swift_task_alloc(dword_1010FB1EC);
  v0[91] = v17;
  *v17 = v0;
  v17[1] = sub_1003FAAAC;
  return sub_1003FBCF8(v0[67], v6);
}

uint64_t sub_1003FB574()
{
  uint64_t v0;
  _QWORD *v1;
  __objc2_ivar_list **p_ivars;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, _QWORD, _QWORD);
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t inited;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;

  v1 = (_QWORD *)(v0 + 200);
  v86 = v0 + 456;
  p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
  if (qword_1010E99C0 != -1)
    swift_once(&qword_1010E99C0, sub_100173218);
  v3 = *(_QWORD *)(v0 + 736);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B69B0);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 736);
  if (v8)
  {
    v83 = *(_QWORD *)(v0 + 720);
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v87 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_getErrorValue(v9, v0 + 416, v0 + 320);
    v12 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336));
    *(_QWORD *)(v0 + 456) = sub_100016940(v12, v13, &v87);
    v1 = (_QWORD *)(v0 + 200);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v86, v0 + 464, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to handle shared beacon revoke: %s.", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    v14 = v10;
    p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
    swift_slowDealloc(v14, -1, -1);

    swift_errorRelease(v9);
    swift_errorRelease(v83);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 720));
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_errorRelease(v9);

  }
  v15 = *(_QWORD *)(v0 + 624);
  v16 = *(_QWORD *)(v0 + 632) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v16 == v15)
  {
    swift_bridgeObjectRelease();
    v17 = swift_release();
    v18 = *(_QWORD *)(v0 + 600);
    v19 = *(_QWORD *)(v0 + 592);
    v20 = *(_QWORD *)(v0 + 568);
    v21 = *(_QWORD *)(v0 + 560);
    v22 = *(_QWORD *)(v0 + 544);
    v23 = *(_QWORD *)(v0 + 536);
    v24 = *(_QWORD *)(v0 + 512);
    (*(void (**)(uint64_t))(v0 + 464))(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 632) + 1;
    *(_QWORD *)(v0 + 632) = v26;
    sub_100030784(*(_QWORD *)(v0 + 480) + 40 * v26 + 32, (uint64_t)v1);
    v27 = *(_QWORD *)(v0 + 224);
    v28 = *(_QWORD *)(v0 + 232);
    sub_10001AA44(v1, v27);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v28 + 112))(v27, v28) & 1) != 0)
    {
      v29 = *(_QWORD *)(v0 + 592);
      v30 = *(_QWORD *)(v0 + 584);
      v31 = *(_QWORD *)(v0 + 576);
      static Date.trustedNow.getter(v29);
      Date.addingTimeInterval(_:)(14400.0);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    }
    else
    {
      static Date.trustedNow.getter(*(_QWORD *)(v0 + 600));
    }
    v32 = *(_QWORD **)(v0 + 488);
    v33 = v32[6];
    v34 = v32[7];
    sub_10001AA44(v32 + 3, v33);
    v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 72))(v33, v34);
    if ((v37 & 1) != 0 || (v38 = v35) == 0)
    {
      v52 = *(_QWORD *)(v0 + 568);
      v53 = *(int *)(*(_QWORD *)(v0 + 552) + 48);
      v54 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 584) + 16);
      v54(v52, *(_QWORD *)(v0 + 600), *(_QWORD *)(v0 + 576));
      *(_QWORD *)(v52 + v53) = 7;
      if (p_ivars[312] != (__objc2_ivar_list *)-1)
        swift_once(&qword_1010E99C0, sub_100173218);
      sub_10001A9E8(v4, (uint64_t)qword_1011B69B0);
      v55 = sub_100030784((uint64_t)v1, v0 + 240);
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.default.getter(v56);
      if (os_log_type_enabled(v56, v57))
      {
        v85 = v1;
        v58 = *(_QWORD *)(v0 + 544);
        v84 = *(_QWORD *)(v0 + 528);
        v82 = *(_QWORD *)(v0 + 520);
        v59 = swift_slowAlloc(22, -1);
        v60 = swift_slowAlloc(32, -1);
        v87 = v60;
        *(_DWORD *)v59 = 141558275;
        *(_QWORD *)(v0 + 440) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v59 + 4, v59 + 12);
        *(_WORD *)(v59 + 12) = 2081;
        v62 = *(_QWORD *)(v0 + 264);
        v61 = *(_QWORD *)(v0 + 272);
        sub_10001AA44((_QWORD *)(v0 + 240), v62);
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v61 + 8) + 8) + 32))(v62);
        v63 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v64 = dispatch thunk of CustomStringConvertible.description.getter(v82, v63);
        v66 = v65;
        v67 = v58;
        v1 = v85;
        (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v67, v82);
        *(_QWORD *)(v0 + 448) = sub_100016940(v64, v66, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v86, v59 + 14, v59 + 22);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 240));
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Fetching shared beacon: %{private,mask.hash}s.", (uint8_t *)v59, 0x16u);
        swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1, -1);
        swift_slowDealloc(v59, -1, -1);
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 240));
      }

      v68 = *(_QWORD *)(v0 + 560);
      v69 = *(_QWORD **)(v0 + 488);
      v70 = v69 + 3;
      v71 = *(int *)(*(_QWORD *)(v0 + 552) + 48);
      v54(v68, *(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576));
      *(_QWORD *)(v68 + v71) = 7;
      v72 = sub_10001A9A8(&qword_1010F7A80);
      inited = swift_initStackObject(v72, v0 + 88);
      *(_QWORD *)(v0 + 672) = inited;
      *(_OWORD *)(inited + 16) = xmmword_100E22B00;
      sub_100030784((uint64_t)v1, inited + 32);
      v74 = v69[6];
      v75 = v69[7];
      sub_10001AA44(v70, v74);
      v76 = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 48))(v74, v75);
      v78 = v77;
      v80 = v79;
      *(_QWORD *)(v0 + 680) = v79;
      v81 = (_QWORD *)swift_task_alloc(dword_1010F198C);
      *(_QWORD *)(v0 + 688) = v81;
      *v81 = v0;
      v81[1] = sub_1003FA7D4;
      return sub_10017E9FC(*(_QWORD *)(v0 + 560), 7, inited, v76, v78, v80);
    }
    else
    {
      v39 = v36;
      v40 = *(_QWORD **)(v0 + 488);
      v41 = v40 + 3;
      v42 = sub_10001A9A8(&qword_1010F7A80);
      v43 = swift_initStackObject(v42, v0 + 16);
      *(_QWORD *)(v0 + 640) = v43;
      *(_OWORD *)(v43 + 16) = xmmword_100E22B00;
      sub_100030784((uint64_t)v1, v43 + 32);
      v44 = v40[6];
      v45 = v40[7];
      sub_10001AA44(v41, v44);
      v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 48))(v44, v45);
      v48 = v47;
      v50 = v49;
      *(_QWORD *)(v0 + 648) = v49;
      v51 = (_QWORD *)swift_task_alloc(dword_1010F1914);
      *(_QWORD *)(v0 + 656) = v51;
      *v51 = v0;
      v51[1] = sub_1003FA634;
      return sub_1001732E0(v38, v39, v43, v46, v48, v50);
    }
  }
}

uint64_t sub_1003FBCF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v3[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MemberSharingCircle(0);
  v3[12] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[13] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[14] = swift_task_alloc(v8);
  v3[15] = swift_task_alloc(v8);
  v9 = type metadata accessor for UUID(0);
  v3[16] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[17] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v3[18] = v11;
  v3[19] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocationFetcher(0);
  v3[20] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[21] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v3[22] = v14;
  v3[23] = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003FBDEC, 0, 0);
}

uint64_t sub_1003FBDEC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v2 = v0[22];
  v1 = v0[23];
  v3 = v0[21];
  v5 = v0[18];
  v4 = v0[19];
  v7 = v0[16];
  v6 = v0[17];
  v8 = v0[6];
  sub_10005972C(v0[8], v1, type metadata accessor for LocationFetcher);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v8, v7);
  v9 = *(unsigned __int8 *)(v3 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = (v2 + v11 + v10) & ~v11;
  v13 = swift_allocObject(&unk_101075988, v12 + v5, v9 | v11 | 7);
  v0[24] = v13;
  sub_1000126EC(v1, v13 + v10, type metadata accessor for LocationFetcher);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v13 + v12, v4, v7);
  v14 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
  v0[25] = v14;
  v15 = sub_10001A9A8(&qword_1010EC840);
  *v14 = v0;
  v14[1] = sub_1003FBF20;
  return unsafeBlocking<A>(_:)(v0 + 4, sub_100425AAC, v13, v15);
}

uint64_t sub_1003FBF20()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  swift_release();
  return swift_task_switch(sub_1003FBF7C, 0, 0);
}

uint64_t sub_1003FBF7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v32;
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 208) = v1;
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 216) = v2;
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    v14 = *(_QWORD *)(v0 + 152);
    v16 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 120);
    v17 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = 0;
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 28) = v5;
  v6 = *(_QWORD *)(v4 + 72);
  *(_QWORD *)(v0 + 224) = v6;
  while (1)
  {
    *(_QWORD *)(v0 + 232) = v3;
    v7 = *(_QWORD *)(v0 + 56);
    sub_10005972C(v1 + ((v5 + 32) & ~(unint64_t)v5) + v6 * v3, *(_QWORD *)(v0 + 120), type metadata accessor for MemberSharingCircle);
    if (!v7)
      break;
    v8 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 40) = v8;
    swift_errorRetain(v8);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    if (swift_dynamicCast(v0 + 16, v0 + 40, v9, &type metadata for KeyDropInterface.KeyDropError, 6)
      && *(_BYTE *)(v0 + 24) == 1
      && *(_QWORD *)(v0 + 16) > 5uLL)
    {
      v30 = (_QWORD *)swift_task_alloc(dword_10111A224);
      *(_QWORD *)(v0 + 240) = v30;
      *v30 = v0;
      v30[1] = sub_1003FC358;
      return sub_100C2EE60(*(_QWORD *)(v0 + 120));
    }
LABEL_9:
    v12 = *(_QWORD *)(v0 + 216);
    v13 = *(_QWORD *)(v0 + 232) + 1;
    sub_1000126B0(*(_QWORD *)(v0 + 120), type metadata accessor for MemberSharingCircle);
    if (v13 == v12)
      goto LABEL_11;
    v6 = *(_QWORD *)(v0 + 224);
    v3 = *(_QWORD *)(v0 + 232) + 1;
    LOBYTE(v5) = *(_BYTE *)(v0 + 28);
    v1 = *(_QWORD *)(v0 + 208);
  }
  v10 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 248) = *(_QWORD *)(*(_QWORD *)(v0 + 64) + *(int *)(*(_QWORD *)(v0 + 160) + 44));
  if (*(_BYTE *)(v10 + *(int *)(v11 + 40)) != 4)
    goto LABEL_9;
  if (qword_1010E9938 != -1)
  {
    swift_once(&qword_1010E9938, sub_1000AFBB0);
    v10 = *(_QWORD *)(v0 + 120);
  }
  v18 = *(_QWORD *)(v0 + 112);
  v19 = type metadata accessor for Logger(0);
  sub_10001A9E8(v19, (uint64_t)qword_1011B6748);
  v20 = sub_10005972C(v10, v18, type metadata accessor for MemberSharingCircle);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = *(_QWORD *)(v0 + 128);
    v24 = *(_QWORD *)(v0 + 112);
    v25 = swift_slowAlloc(22, -1);
    v26 = swift_slowAlloc(32, -1);
    v33 = v26;
    *(_DWORD *)v25 = 141558275;
    *(_QWORD *)(v25 + 4) = 1752392040;
    *(_WORD *)(v25 + 12) = 2081;
    v27 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v23, v27);
    *(_QWORD *)(v25 + 14) = sub_100016940(v28, v29, &v33);
    swift_bridgeObjectRelease();
    sub_1000126B0(v24, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Cleaning up revoke state for circle %{private,mask.hash}s.", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 112), type metadata accessor for MemberSharingCircle);
  }

  v32 = (_QWORD *)swift_task_alloc(dword_10111A394);
  *(_QWORD *)(v0 + 256) = v32;
  *v32 = v0;
  v32[1] = sub_1003FC778;
  return sub_100C31AF8(*(_QWORD *)(v0 + 120), 1);
}

uint64_t sub_1003FC358()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 240));
  return swift_task_switch(sub_1003FC3AC, 0, 0);
}

uint64_t sub_1003FC3AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 232) + 1;
  sub_1000126B0(*(_QWORD *)(v0 + 120), type metadata accessor for MemberSharingCircle);
  if (v2 == v1)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    v3 = *(_QWORD *)(v0 + 152);
    v5 = *(_QWORD *)(v0 + 112);
    v4 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  while (1)
  {
    v12 = *(_QWORD *)(v0 + 224);
    v13 = *(_QWORD *)(v0 + 232) + 1;
    *(_QWORD *)(v0 + 232) = v13;
    v14 = *(_QWORD *)(v0 + 56);
    sub_10005972C(*(_QWORD *)(v0 + 208)+ ((*(unsigned __int8 *)(v0 + 28) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 28))+ v12 * v13, *(_QWORD *)(v0 + 120), type metadata accessor for MemberSharingCircle);
    if (!v14)
      break;
    v15 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 40) = v15;
    swift_errorRetain(v15);
    v16 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    if (swift_dynamicCast(v0 + 16, v0 + 40, v16, &type metadata for KeyDropInterface.KeyDropError, 6)
      && *(_BYTE *)(v0 + 24) == 1
      && *(_QWORD *)(v0 + 16) > 5uLL)
    {
      v17 = (_QWORD *)swift_task_alloc(dword_10111A224);
      *(_QWORD *)(v0 + 240) = v17;
      *v17 = v0;
      v17[1] = sub_1003FC358;
      return sub_100C2EE60(*(_QWORD *)(v0 + 120));
    }
LABEL_5:
    v10 = *(_QWORD *)(v0 + 216);
    v11 = *(_QWORD *)(v0 + 232) + 1;
    sub_1000126B0(*(_QWORD *)(v0 + 120), type metadata accessor for MemberSharingCircle);
    if (v11 == v10)
      goto LABEL_2;
  }
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 248) = *(_QWORD *)(*(_QWORD *)(v0 + 64) + *(int *)(*(_QWORD *)(v0 + 160) + 44));
  if (*(_BYTE *)(v8 + *(int *)(v9 + 40)) != 4)
    goto LABEL_5;
  if (qword_1010E9938 != -1)
  {
    swift_once(&qword_1010E9938, sub_1000AFBB0);
    v8 = *(_QWORD *)(v0 + 120);
  }
  v18 = *(_QWORD *)(v0 + 112);
  v19 = type metadata accessor for Logger(0);
  sub_10001A9E8(v19, (uint64_t)qword_1011B6748);
  v20 = sub_10005972C(v8, v18, type metadata accessor for MemberSharingCircle);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = *(_QWORD *)(v0 + 128);
    v24 = *(_QWORD *)(v0 + 112);
    v25 = swift_slowAlloc(22, -1);
    v26 = swift_slowAlloc(32, -1);
    v31 = v26;
    *(_DWORD *)v25 = 141558275;
    *(_QWORD *)(v25 + 4) = 1752392040;
    *(_WORD *)(v25 + 12) = 2081;
    v27 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v23, v27);
    *(_QWORD *)(v25 + 14) = sub_100016940(v28, v29, &v31);
    swift_bridgeObjectRelease();
    sub_1000126B0(v24, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Cleaning up revoke state for circle %{private,mask.hash}s.", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 112), type metadata accessor for MemberSharingCircle);
  }

  v30 = (_QWORD *)swift_task_alloc(dword_10111A394);
  *(_QWORD *)(v0 + 256) = v30;
  *v30 = v0;
  v30[1] = sub_1003FC778;
  return sub_100C31AF8(*(_QWORD *)(v0 + 120), 1);
}

uint64_t sub_1003FC778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_bridgeObjectRelease();
    v3 = sub_1003FCC54;
  }
  else
  {
    v3 = sub_1003FC7E4;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003FC7E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 120) + *(int *)(*(_QWORD *)(v0 + 96) + 24);
  v5 = sub_10001AA44((_QWORD *)(*(_QWORD *)(v0 + 248) + 32), *(_QWORD *)(*(_QWORD *)(v0 + 248) + 56));
  v6 = *v5;
  static DispatchWorkItemFlags.barrier.getter(v5);
  v7 = (_QWORD *)swift_task_alloc(48);
  v7[2] = v6;
  v7[3] = v4;
  v7[4] = sub_100C30AD0;
  v7[5] = 0;
  OS_dispatch_queue.sync<A>(flags:execute:)(v1, sub_100151538);
  swift_task_dealloc(v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v8 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 232) + 1;
  sub_1000126B0(*(_QWORD *)(v0 + 120), type metadata accessor for MemberSharingCircle);
  if (v9 == v8)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    v10 = *(_QWORD *)(v0 + 152);
    v12 = *(_QWORD *)(v0 + 112);
    v11 = *(_QWORD *)(v0 + 120);
    v13 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  while (1)
  {
    v19 = *(_QWORD *)(v0 + 224);
    v20 = *(_QWORD *)(v0 + 232) + 1;
    *(_QWORD *)(v0 + 232) = v20;
    v21 = *(_QWORD *)(v0 + 56);
    sub_10005972C(*(_QWORD *)(v0 + 208)+ ((*(unsigned __int8 *)(v0 + 28) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 28))+ v19 * v20, *(_QWORD *)(v0 + 120), type metadata accessor for MemberSharingCircle);
    if (!v21)
      break;
    v22 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 40) = v22;
    swift_errorRetain(v22);
    v23 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    if (swift_dynamicCast(v0 + 16, v0 + 40, v23, &type metadata for KeyDropInterface.KeyDropError, 6)
      && *(_BYTE *)(v0 + 24) == 1
      && *(_QWORD *)(v0 + 16) > 5uLL)
    {
      v24 = (_QWORD *)swift_task_alloc(dword_10111A224);
      *(_QWORD *)(v0 + 240) = v24;
      *v24 = v0;
      v24[1] = sub_1003FC358;
      return sub_100C2EE60(*(_QWORD *)(v0 + 120));
    }
LABEL_5:
    v17 = *(_QWORD *)(v0 + 216);
    v18 = *(_QWORD *)(v0 + 232) + 1;
    sub_1000126B0(*(_QWORD *)(v0 + 120), type metadata accessor for MemberSharingCircle);
    if (v18 == v17)
      goto LABEL_2;
  }
  v15 = *(_QWORD *)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 248) = *(_QWORD *)(*(_QWORD *)(v0 + 64) + *(int *)(*(_QWORD *)(v0 + 160) + 44));
  if (*(_BYTE *)(v15 + *(int *)(v16 + 40)) != 4)
    goto LABEL_5;
  if (qword_1010E9938 != -1)
  {
    swift_once(&qword_1010E9938, sub_1000AFBB0);
    v15 = *(_QWORD *)(v0 + 120);
  }
  v25 = *(_QWORD *)(v0 + 112);
  v26 = type metadata accessor for Logger(0);
  sub_10001A9E8(v26, (uint64_t)qword_1011B6748);
  v27 = sub_10005972C(v15, v25, type metadata accessor for MemberSharingCircle);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = *(_QWORD *)(v0 + 128);
    v31 = *(_QWORD *)(v0 + 112);
    v32 = swift_slowAlloc(22, -1);
    v33 = swift_slowAlloc(32, -1);
    v38 = v33;
    *(_DWORD *)v32 = 141558275;
    *(_QWORD *)(v32 + 4) = 1752392040;
    *(_WORD *)(v32 + 12) = 2081;
    v34 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v35 = dispatch thunk of CustomStringConvertible.description.getter(v30, v34);
    *(_QWORD *)(v32 + 14) = sub_100016940(v35, v36, &v38);
    swift_bridgeObjectRelease();
    sub_1000126B0(v31, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Cleaning up revoke state for circle %{private,mask.hash}s.", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 112), type metadata accessor for MemberSharingCircle);
  }

  v37 = (_QWORD *)swift_task_alloc(dword_10111A394);
  *(_QWORD *)(v0 + 256) = v37;
  *v37 = v0;
  v37[1] = sub_1003FC778;
  return sub_100C31AF8(*(_QWORD *)(v0 + 120), 1);
}

uint64_t sub_1003FCC54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 88);
  sub_1000126B0(v3, type metadata accessor for MemberSharingCircle);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1003FCCD8(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;

  v50 = a2;
  v51 = a3;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v4);
  v49 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1011057F0);
  v48 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v47 = (uint64_t)&v41 - v10;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v45 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v41 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v41 - v18;
  v20 = sub_10001A9A8(&qword_1010FB1F0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v46 = (uint64_t)&v41 - v24;
  v25 = *(_QWORD *)(*(_QWORD *)a1 + 160);
  if (qword_1010E9A98 != -1)
    swift_once(&qword_1010E9A98, sub_1001FFA50);
  v26 = sub_10001A9E8(v11, (uint64_t)qword_1011B6C00);
  v43 = v12;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v27(v19, v26, v11);
  v27(v17, (uint64_t)v19, v11);
  v41 = &v9[*(int *)(v6 + 40)];
  v28 = (uint64_t)v41;
  v29 = type metadata accessor for DirectorySequence(0);
  v44 = v19;
  v30 = v6;
  v42 = v6;
  v31 = v29;
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v32(v28, 1, 1, v29);
  v27(v9, (uint64_t)v17, v11);
  *(_QWORD *)&v9[*(int *)(v30 + 36)] = v25;
  v33 = v45;
  v27(v45, (uint64_t)v17, v11);
  swift_retain();
  v34 = (uint64_t)v49;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v33, 0, 0);
  v35 = *(void (**)(char *, uint64_t))(v43 + 8);
  v35(v17, v11);
  v32(v34, 0, 1, v31);
  sub_10000C778(v34, (uint64_t)v41);
  v36 = v47;
  sub_100005CF0((uint64_t)v9, v47, (uint64_t *)&unk_1011057F0);
  v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56);
  v38 = v42;
  v37(v23, 1, 1, v42);
  sub_100004048((uint64_t)v23, &qword_101105800);
  sub_100005CF0(v36, (uint64_t)v23, (uint64_t *)&unk_1011057F0);
  v37(v23, 0, 1, v38);
  sub_100005CF0((uint64_t)v23, v46, &qword_1010FB1F0);
  v39 = ((uint64_t (*)(char *, uint64_t))v35)(v44, v11);
  __chkstk_darwin(v39);
  *(&v41 - 2) = (char *)v50;
  sub_100A7A30C(sub_100425B14, (uint64_t)(&v41 - 4));
  *v51 = v40;
}

uint64_t sub_1003FD088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4[60] = a3;
  v4[61] = a4;
  v4[58] = a1;
  v4[59] = a2;
  v5 = *(_QWORD *)(type metadata accessor for LocationFetcher(0) - 8);
  v4[62] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v4[63] = v6;
  v4[64] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010FB168);
  v4[65] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RawSearchResult(0);
  v4[66] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[67] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[68] = swift_task_alloc(v10);
  v4[69] = swift_task_alloc(v10);
  v11 = *(_QWORD *)(type metadata accessor for ObservedAdvertisement(0) - 8);
  v4[70] = v11;
  v4[71] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v4[72] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[73] = v13;
  v4[74] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for BeaconIdentifier(0);
  v4[75] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v4[76] = v15;
  v4[77] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003FD1BC, 0, 0);
}

uint64_t sub_1003FD1BC()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 320, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 624) = v2;
    *v2 = v0;
    v2[1] = sub_1003FD2A8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003FD2A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 624);
  *(_QWORD *)(*(_QWORD *)v1 + 632) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003FD304, 0, 0);
}

uint64_t sub_1003FD304()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void (*v15)(_QWORD *);
  void (*v16)(__n128);
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = (_QWORD *)(v0 + 16);
  if (!*(_QWORD *)(v0 + 632))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9BD8 != -1)
      swift_once(&qword_1010E9BD8, sub_1003F1BD8);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B6E98);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "beaconsFromDisk could not get the ObservationStoreService.", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }
    v15 = *(void (**)(_QWORD *))(v0 + 464);

    v15(_swiftEmptyDictionarySingleton);
    goto LABEL_12;
  }
  v2 = *(_QWORD *)(v0 + 480);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v0 + 640) = v3;
  if (!v3)
  {
    swift_release();
    v16 = *(void (**)(__n128))(v0 + 464);
    v17 = swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
    v16(v17);
    swift_bridgeObjectRelease_n(_swiftEmptyDictionarySingleton, 2);
LABEL_12:
    v18 = *(_QWORD *)(v0 + 592);
    v19 = *(_QWORD *)(v0 + 568);
    v20 = *(_QWORD *)(v0 + 552);
    v21 = *(_QWORD *)(v0 + 544);
    v22 = *(_QWORD *)(v0 + 520);
    v23 = *(_QWORD *)(v0 + 512);
    swift_task_dealloc(*(_QWORD *)(v0 + 616));
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v4 = *(_QWORD *)(v0 + 480);
  *(_QWORD *)(v0 + 664) = 0;
  *(_QWORD *)(v0 + 656) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v0 + 648) = 0;
  v5 = v4 + 32;
  swift_bridgeObjectRetain(v4);
  sub_100030784(v5, v0 + 136);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v6 = qword_1011B71A8;
  *(_QWORD *)(v0 + 672) = qword_1011B71A8;
  v7 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v8 = (_QWORD *)swift_task_alloc(v7);
  *(_QWORD *)(v0 + 680) = v8;
  *v8 = v0;
  v8[1] = sub_1003FD568;
  return unsafeBlocking<A>(_:)(v0 + 392, sub_100033264, v6, &type metadata for Configuration);
}

uint64_t sub_1003FD568()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 680));
  swift_release();
  return swift_task_switch(sub_1003FD5C8, 0, 0);
}

uint64_t sub_1003FD5C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t KeyPath;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uid_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v12;
  uint64_t v13;

  v1 = v0[49];
  KeyPath = swift_getKeyPath(&unk_100E3D1A8);
  v0[86] = sub_100C1BED0(KeyPath, v1);
  if ((v3 & 1) != 0)
  {
    _StringGuts.grow(_:)(40);
    v0[43] = 0;
    v0[44] = 0xE000000000000000;
    v12._object = (void *)0x8000000100ED5FD0;
    v12._countAndFlagsBits = 0xD000000000000026;
    String.append(_:)(v12);
    v0[46] = KeyPath;
    v13 = sub_10001A9A8(&qword_1010FB170);
    _print_unlocked<A, B>(_:_:)(v0 + 46, v0 + 43, v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v0[43], v0[44], "searchpartyd/Configuration.swift", 32, 2, 24, 0);
  }
  else
  {
    v4 = v0[77];
    v5 = v0[74];
    v6 = v0[73];
    v7 = v0[72];
    swift_release();
    swift_bridgeObjectRelease();
    v8 = getuid();
    sub_100A06500(v8);
    v9 = v0[20];
    v10 = v0[21];
    sub_10001AA44(v0 + 17, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) + 32))(v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v5, v7);
    return swift_task_switch(sub_1003FD780, v0[79], 0);
  }
}

uint64_t sub_1003FD780()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  uint64_t v25;

  v1 = v0[79];
  v2 = v0[77];
  v3 = v0[76];
  v4 = sub_10001A9A8(&qword_1010ED1D8);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v4, v6 + *(_QWORD *)(v3 + 72), v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  v8 = v7 + v6;
  sub_10005972C(v2, v8, type metadata accessor for BeaconIdentifier);
  v9 = *(_QWORD *)(v1 + 128);
  if (v9)
  {
    v10 = v0[86];
    v11 = v0[81];
    swift_retain();
    v12 = sub_10011F8A8(v7, v10, 0, v9);
    v0[87] = v11;
    if (!v11)
    {
      v24 = v0[77];
      v25 = v0[75];
      v0[88] = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v12);
      swift_release();
      swift_release();
      swift_setDeallocating(v7);
      swift_arrayDestroy(v8, *(_QWORD *)(v7 + 16), v25);
      swift_deallocClassInstance(v7, 32, 7);
      sub_1000126B0(v24, type metadata accessor for BeaconIdentifier);
      v23 = sub_1003FD9FC;
      return swift_task_switch(v23, 0, 0);
    }
    v13 = v11;
    v14 = sub_100C69138(v11);
    swift_willThrow(v14);
    swift_release();
  }
  else
  {
    if (qword_1010EA460 != -1)
      swift_once(&qword_1010EA460, sub_100C67E60);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10001A9E8(v15, (uint64_t)qword_10111B888);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.fault.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "No observation store on this platform!", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    v20 = sub_100417FD0();
    v13 = swift_allocError(&type metadata for ObservationStoreService.ObservationStoreServiceError, v20, 0, 0);
    swift_willThrow(v13);
  }
  v0[89] = v13;
  v21 = v0[77];
  v22 = v0[75];
  swift_setDeallocating(v7);
  swift_arrayDestroy(v8, *(_QWORD *)(v7 + 16), v22);
  swift_deallocClassInstance(v7, 32, 7);
  sub_1000126B0(v21, type metadata accessor for BeaconIdentifier);
  v23 = sub_1003FE19C;
  return swift_task_switch(v23, 0, 0);
}

uint64_t sub_1003FD9FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[2];

  if (qword_1010E9BD8 != -1)
    swift_once(&qword_1010E9BD8, sub_1003F1BD8);
  v1 = *(_QWORD *)(v0 + 704);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6E98);
  sub_100030784(v0 + 136, v0 + 216);
  swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 704);
  if (v6)
  {
    v8 = *(_QWORD *)(v0 + 592);
    v62 = *(_QWORD *)(v0 + 584);
    v9 = *(_QWORD *)(v0 + 576);
    v10 = swift_slowAlloc(32, -1);
    v64 = swift_slowAlloc(32, -1);
    v66[0] = v64;
    *(_DWORD *)v10 = 141558531;
    *(_QWORD *)(v0 + 440) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    v12 = *(_QWORD *)(v0 + 240);
    v11 = *(_QWORD *)(v0 + 248);
    sub_10001AA44((_QWORD *)(v0 + 216), v12);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8) + 32))(v12);
    v13 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v9, v13);
    v16 = v15;
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v8, v9);
    *(_QWORD *)(v0 + 448) = sub_100016940(v14, v16, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v0 + 456, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 216));
    *(_WORD *)(v10 + 22) = 2048;
    v17 = *(_QWORD *)(v7 + 16);
    swift_release();
    *(_QWORD *)(v0 + 456) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 456, v0 + 464, v10 + 24, v10 + 32);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Disk fetch for beacon %{private,mask.hash}s found %ld observations.", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 216));
    swift_release();
  }

  v18 = *(_QWORD *)(v0 + 704);
  v19 = *(_QWORD *)(v18 + 16);
  if (v19)
  {
    v20 = *(_QWORD *)(v0 + 560);
    v21 = v18 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    v22 = *(_QWORD *)(v20 + 72);
    v23 = *(_QWORD *)(v0 + 696);
    swift_bridgeObjectRetain(v18);
    v24 = _swiftEmptyArrayStorage;
    do
    {
      v25 = *(_BYTE **)(v0 + 568);
      v26 = *(_BYTE **)(v0 + 520);
      sub_10005972C(v21, (uint64_t)v25, type metadata accessor for ObservedAdvertisement);
      sub_1003FF2B0(v25, v26);
      if (v23)
      {
        sub_1000126B0(*(_QWORD *)(v0 + 568), type metadata accessor for ObservedAdvertisement);
        swift_release();
        return swift_bridgeObjectRelease();
      }
      v27 = *(_QWORD *)(v0 + 536);
      v28 = *(_QWORD *)(v0 + 528);
      v29 = *(_QWORD *)(v0 + 520);
      sub_1000126B0(*(_QWORD *)(v0 + 568), type metadata accessor for ObservedAdvertisement);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v29, 1, v28) == 1)
      {
        sub_100004048(*(_QWORD *)(v0 + 520), &qword_1010FB168);
      }
      else
      {
        v30 = *(_QWORD *)(v0 + 552);
        v31 = *(_QWORD *)(v0 + 544);
        sub_1000126EC(*(_QWORD *)(v0 + 520), v30, type metadata accessor for RawSearchResult);
        sub_1000126EC(v30, v31, type metadata accessor for RawSearchResult);
        if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
          v24 = (_QWORD *)sub_1007C98E8(0, v24[2] + 1, 1, (unint64_t)v24);
        v33 = v24[2];
        v32 = v24[3];
        if (v33 >= v32 >> 1)
          v24 = (_QWORD *)sub_1007C98E8(v32 > 1, v33 + 1, 1, (unint64_t)v24);
        v34 = *(_QWORD *)(v0 + 544);
        v35 = *(_QWORD *)(v0 + 536);
        v24[2] = v33 + 1;
        sub_1000126EC(v34, (uint64_t)v24+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(_QWORD *)(v35 + 72) * v33, type metadata accessor for RawSearchResult);
      }
      v23 = 0;
      v21 += v22;
      --v19;
    }
    while (v19);
    swift_release();
  }
  else
  {
    v24 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  v37 = v0 + 136;
  sub_100030784(v0 + 136, v0 + 176);
  swift_bridgeObjectRetain_n(v24, 2);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.info.getter(v39);
  if (os_log_type_enabled(v39, v40))
  {
    v41 = *(_QWORD *)(v0 + 592);
    v63 = *(_QWORD *)(v0 + 584);
    v42 = *(_QWORD *)(v0 + 576);
    v43 = swift_slowAlloc(32, -1);
    v65 = swift_slowAlloc(32, -1);
    v66[0] = v65;
    *(_DWORD *)v43 = 141558531;
    *(_QWORD *)(v0 + 416) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424, v43 + 4, v43 + 12);
    *(_WORD *)(v43 + 12) = 2081;
    v45 = *(_QWORD *)(v0 + 200);
    v44 = *(_QWORD *)(v0 + 208);
    sub_10001AA44((_QWORD *)(v0 + 176), v45);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v44 + 8) + 8) + 32))(v45);
    v46 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v47 = dispatch thunk of CustomStringConvertible.description.getter(v42, v46);
    v49 = v48;
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v41, v42);
    *(_QWORD *)(v0 + 424) = sub_100016940(v47, v49, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 424, v0 + 432, v43 + 14, v43 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 176));
    *(_WORD *)(v43 + 22) = 2048;
    v50 = v24[2];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 432) = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 432, v0 + 440, v43 + 24, v43 + 32);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Disk fetch for beacon %{private,mask.hash}s found %ld locations.", (uint8_t *)v43, 0x20u);
    swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    v51 = v43;
    v37 = v0 + 136;
    swift_slowDealloc(v51, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 176));
    swift_bridgeObjectRelease();
  }

  v53 = *(_QWORD *)(v0 + 504);
  v52 = *(_QWORD *)(v0 + 512);
  v54 = *(_QWORD *)(v0 + 496);
  sub_10005972C(*(_QWORD *)(v0 + 488), v52, type metadata accessor for LocationFetcher);
  sub_100030784(v37, v0 + 56);
  v55 = *(unsigned __int8 *)(v54 + 80);
  v56 = (v55 + 16) & ~v55;
  v57 = (v53 + v56 + 7) & 0xFFFFFFFFFFFFFFF8;
  v58 = (v57 + 47) & 0xFFFFFFFFFFFFFFF8;
  v59 = swift_allocObject(&unk_101075870, v58 + 8, v55 | 7);
  *(_QWORD *)(v0 + 720) = v59;
  sub_1000126EC(v52, v59 + v56, type metadata accessor for LocationFetcher);
  sub_10000F9FC((__int128 *)(v0 + 56), v59 + v57);
  *(_QWORD *)(v59 + v58) = v24;
  v60 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
  *(_QWORD *)(v0 + 728) = v60;
  v61 = sub_10001A9A8(&qword_1010FB180);
  *v60 = v0;
  v60[1] = sub_1003FE628;
  return unsafeBlocking<A>(_:)(v0 + 400, sub_100418114, v59, v61);
}

uint64_t sub_1003FE19C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(__n128);
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t type;
  uint64_t v38;
  uint64_t v39;

  v1 = (_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 712);
  v3 = *(_QWORD *)(v0 + 656);
  if (qword_1010E9BD8 != -1)
    swift_once(&qword_1010E9BD8, sub_1003F1BD8);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B6E98);
  sub_100030784(v0 + 136, v0 + 256);
  swift_errorRetain(v2);
  v5 = swift_errorRetain(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(_QWORD *)(v0 + 592);
    type = v7;
    v35 = *(_QWORD *)(v0 + 584);
    v38 = v3;
    v9 = *(_QWORD *)(v0 + 576);
    v10 = swift_slowAlloc(32, -1);
    v36 = swift_slowAlloc(64, -1);
    v39 = v36;
    *(_DWORD *)v10 = 141558531;
    *(_QWORD *)(v0 + 408) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    v12 = *(_QWORD *)(v0 + 280);
    v11 = *(_QWORD *)(v0 + 288);
    sub_10001AA44((_QWORD *)(v0 + 256), v12);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8) + 32))(v12);
    v13 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v9, v13);
    v16 = v15;
    v17 = v9;
    v3 = v38;
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v8, v17);
    *(_QWORD *)(v0 + 384) = sub_100016940(v14, v16, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 384, v0 + 392, v10 + 14, v10 + 22);
    v1 = (_QWORD *)(v0 + 136);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 256));
    *(_WORD *)(v10 + 22) = 2080;
    swift_getErrorValue(v2, v0 + 360, v0 + 296);
    v18 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312));
    *(_QWORD *)(v0 + 376) = sub_100016940(v18, v19, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v0 + 384, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v6, type, "Could not fetch beacon %{private,mask.hash}s, %s.", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 256));
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  v20 = *(_QWORD *)(v0 + 640);
  v21 = *(_QWORD *)(v0 + 664) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v21 == v20)
  {
    swift_bridgeObjectRelease();
    swift_release();
    v22 = *(void (**)(__n128))(v0 + 464);
    v23 = swift_bridgeObjectRetain(v3);
    v22(v23);
    swift_bridgeObjectRelease_n(v3, 2);
    v24 = *(_QWORD *)(v0 + 592);
    v25 = *(_QWORD *)(v0 + 568);
    v26 = *(_QWORD *)(v0 + 552);
    v27 = *(_QWORD *)(v0 + 544);
    v28 = *(_QWORD *)(v0 + 520);
    v29 = *(_QWORD *)(v0 + 512);
    swift_task_dealloc(*(_QWORD *)(v0 + 616));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v31 = *(_QWORD *)(v0 + 664) + 1;
    *(_QWORD *)(v0 + 664) = v31;
    *(_QWORD *)(v0 + 656) = v3;
    *(_QWORD *)(v0 + 648) = 0;
    sub_100030784(*(_QWORD *)(v0 + 480) + 40 * v31 + 32, (uint64_t)v1);
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    v32 = qword_1011B71A8;
    *(_QWORD *)(v0 + 672) = qword_1011B71A8;
    v33 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v34 = (_QWORD *)swift_task_alloc(v33);
    *(_QWORD *)(v0 + 680) = v34;
    *v34 = v0;
    v34[1] = sub_1003FD568;
    return unsafeBlocking<A>(_:)(v0 + 392, sub_100033264, v32, &type metadata for Configuration);
  }
}

uint64_t sub_1003FE628()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 728));
  swift_release();
  return swift_task_switch(sub_1003FE688, 0, 0);
}

uint64_t sub_1003FE688()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[92] = v0[50];
  v1 = (_QWORD *)swift_task_alloc(dword_10111BAB4);
  v0[93] = v1;
  *v1 = v0;
  v1[1] = sub_1003FE6E0;
  return sub_100C65684(v0[88]);
}

uint64_t sub_1003FE6E0()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t **v5;

  v2 = (*v1)[93];
  v3 = *v1;
  v3[94] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1003FE988, 0, 0);
  v5 = (uint64_t **)swift_task_alloc(dword_10111BAAC);
  v3[95] = (uint64_t)v5;
  *v5 = v3;
  v5[1] = (uint64_t *)sub_1003FE774;
  return sub_100C657D8(v3[88]);
}

uint64_t sub_1003FE774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 760);
  *(_QWORD *)(*(_QWORD *)v1 + 768) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003FEE1C;
  else
    v3 = sub_1003FE7D8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003FE7D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(__n128);
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  swift_release();
  v1 = *(_QWORD *)(v0 + 768);
  v2 = *(_QWORD *)(v0 + 736);
  v3 = *(_QWORD *)(v0 + 640);
  v4 = *(_QWORD *)(v0 + 664) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
  if (v4 == v3)
  {
    swift_bridgeObjectRelease();
    swift_release();
    v5 = *(void (**)(__n128))(v0 + 464);
    v6 = swift_bridgeObjectRetain(v2);
    v5(v6);
    swift_bridgeObjectRelease_n(v2, 2);
    v7 = *(_QWORD *)(v0 + 592);
    v8 = *(_QWORD *)(v0 + 568);
    v9 = *(_QWORD *)(v0 + 552);
    v10 = *(_QWORD *)(v0 + 544);
    v11 = *(_QWORD *)(v0 + 520);
    v12 = *(_QWORD *)(v0 + 512);
    swift_task_dealloc(*(_QWORD *)(v0 + 616));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 664) + 1;
    *(_QWORD *)(v0 + 664) = v14;
    *(_QWORD *)(v0 + 656) = v2;
    *(_QWORD *)(v0 + 648) = v1;
    sub_100030784(*(_QWORD *)(v0 + 480) + 40 * v14 + 32, v0 + 136);
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    v15 = qword_1011B71A8;
    *(_QWORD *)(v0 + 672) = qword_1011B71A8;
    v16 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v17 = (_QWORD *)swift_task_alloc(v16);
    *(_QWORD *)(v0 + 680) = v17;
    *v17 = v0;
    v17[1] = sub_1003FD568;
    return unsafeBlocking<A>(_:)(v0 + 392, sub_100033264, v15, &type metadata for Configuration);
  }
}

uint64_t sub_1003FE988()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(__n128);
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t type;
  uint64_t v38;
  uint64_t v39;

  v1 = (_QWORD *)(v0 + 136);
  swift_release();
  v2 = *(_QWORD *)(v0 + 752);
  v3 = *(_QWORD *)(v0 + 736);
  if (qword_1010E9BD8 != -1)
    swift_once(&qword_1010E9BD8, sub_1003F1BD8);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B6E98);
  sub_100030784(v0 + 136, v0 + 256);
  swift_errorRetain(v2);
  v5 = swift_errorRetain(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(_QWORD *)(v0 + 592);
    type = v7;
    v35 = *(_QWORD *)(v0 + 584);
    v38 = v3;
    v9 = *(_QWORD *)(v0 + 576);
    v10 = swift_slowAlloc(32, -1);
    v36 = swift_slowAlloc(64, -1);
    v39 = v36;
    *(_DWORD *)v10 = 141558531;
    *(_QWORD *)(v0 + 408) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    v12 = *(_QWORD *)(v0 + 280);
    v11 = *(_QWORD *)(v0 + 288);
    sub_10001AA44((_QWORD *)(v0 + 256), v12);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8) + 32))(v12);
    v13 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v9, v13);
    v16 = v15;
    v17 = v9;
    v3 = v38;
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v8, v17);
    *(_QWORD *)(v0 + 384) = sub_100016940(v14, v16, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 384, v0 + 392, v10 + 14, v10 + 22);
    v1 = (_QWORD *)(v0 + 136);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 256));
    *(_WORD *)(v10 + 22) = 2080;
    swift_getErrorValue(v2, v0 + 360, v0 + 296);
    v18 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312));
    *(_QWORD *)(v0 + 376) = sub_100016940(v18, v19, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v0 + 384, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v6, type, "Could not fetch beacon %{private,mask.hash}s, %s.", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 256));
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  v20 = *(_QWORD *)(v0 + 640);
  v21 = *(_QWORD *)(v0 + 664) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v21 == v20)
  {
    swift_bridgeObjectRelease();
    swift_release();
    v22 = *(void (**)(__n128))(v0 + 464);
    v23 = swift_bridgeObjectRetain(v3);
    v22(v23);
    swift_bridgeObjectRelease_n(v3, 2);
    v24 = *(_QWORD *)(v0 + 592);
    v25 = *(_QWORD *)(v0 + 568);
    v26 = *(_QWORD *)(v0 + 552);
    v27 = *(_QWORD *)(v0 + 544);
    v28 = *(_QWORD *)(v0 + 520);
    v29 = *(_QWORD *)(v0 + 512);
    swift_task_dealloc(*(_QWORD *)(v0 + 616));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v31 = *(_QWORD *)(v0 + 664) + 1;
    *(_QWORD *)(v0 + 664) = v31;
    *(_QWORD *)(v0 + 656) = v3;
    *(_QWORD *)(v0 + 648) = 0;
    sub_100030784(*(_QWORD *)(v0 + 480) + 40 * v31 + 32, (uint64_t)v1);
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    v32 = qword_1011B71A8;
    *(_QWORD *)(v0 + 672) = qword_1011B71A8;
    v33 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v34 = (_QWORD *)swift_task_alloc(v33);
    *(_QWORD *)(v0 + 680) = v34;
    *v34 = v0;
    v34[1] = sub_1003FD568;
    return unsafeBlocking<A>(_:)(v0 + 392, sub_100033264, v32, &type metadata for Configuration);
  }
}

uint64_t sub_1003FEE1C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(__n128);
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t type;
  uint64_t v38;
  uint64_t v39;

  v1 = (_QWORD *)(v0 + 136);
  swift_release();
  v2 = *(_QWORD *)(v0 + 768);
  v3 = *(_QWORD *)(v0 + 736);
  if (qword_1010E9BD8 != -1)
    swift_once(&qword_1010E9BD8, sub_1003F1BD8);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B6E98);
  sub_100030784(v0 + 136, v0 + 256);
  swift_errorRetain(v2);
  v5 = swift_errorRetain(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(_QWORD *)(v0 + 592);
    type = v7;
    v35 = *(_QWORD *)(v0 + 584);
    v38 = v3;
    v9 = *(_QWORD *)(v0 + 576);
    v10 = swift_slowAlloc(32, -1);
    v36 = swift_slowAlloc(64, -1);
    v39 = v36;
    *(_DWORD *)v10 = 141558531;
    *(_QWORD *)(v0 + 408) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    v12 = *(_QWORD *)(v0 + 280);
    v11 = *(_QWORD *)(v0 + 288);
    sub_10001AA44((_QWORD *)(v0 + 256), v12);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8) + 32))(v12);
    v13 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v9, v13);
    v16 = v15;
    v17 = v9;
    v3 = v38;
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v8, v17);
    *(_QWORD *)(v0 + 384) = sub_100016940(v14, v16, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 384, v0 + 392, v10 + 14, v10 + 22);
    v1 = (_QWORD *)(v0 + 136);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 256));
    *(_WORD *)(v10 + 22) = 2080;
    swift_getErrorValue(v2, v0 + 360, v0 + 296);
    v18 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312));
    *(_QWORD *)(v0 + 376) = sub_100016940(v18, v19, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v0 + 384, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v6, type, "Could not fetch beacon %{private,mask.hash}s, %s.", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 256));
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  v20 = *(_QWORD *)(v0 + 640);
  v21 = *(_QWORD *)(v0 + 664) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v21 == v20)
  {
    swift_bridgeObjectRelease();
    swift_release();
    v22 = *(void (**)(__n128))(v0 + 464);
    v23 = swift_bridgeObjectRetain(v3);
    v22(v23);
    swift_bridgeObjectRelease_n(v3, 2);
    v24 = *(_QWORD *)(v0 + 592);
    v25 = *(_QWORD *)(v0 + 568);
    v26 = *(_QWORD *)(v0 + 552);
    v27 = *(_QWORD *)(v0 + 544);
    v28 = *(_QWORD *)(v0 + 520);
    v29 = *(_QWORD *)(v0 + 512);
    swift_task_dealloc(*(_QWORD *)(v0 + 616));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v31 = *(_QWORD *)(v0 + 664) + 1;
    *(_QWORD *)(v0 + 664) = v31;
    *(_QWORD *)(v0 + 656) = v3;
    *(_QWORD *)(v0 + 648) = 0;
    sub_100030784(*(_QWORD *)(v0 + 480) + 40 * v31 + 32, (uint64_t)v1);
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    v32 = qword_1011B71A8;
    *(_QWORD *)(v0 + 672) = qword_1011B71A8;
    v33 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v34 = (_QWORD *)swift_task_alloc(v33);
    *(_QWORD *)(v0 + 680) = v34;
    *v34 = v0;
    v34[1] = sub_1003FD568;
    return unsafeBlocking<A>(_:)(v0 + 392, sub_100033264, v32, &type metadata for Configuration);
  }
}

uint64_t sub_1003FF2B0@<X0>(_BYTE *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_BYTE *, char *, uint64_t);
  int v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  _BYTE v61[4];
  int v62;
  _BYTE *v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  _BYTE *v75;
  int *v76;
  __int128 v77;
  ValueMetadata *v78;
  unint64_t v79;
  __int128 v80[3];

  v75 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v3);
  v65 = &v61[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for Date(0);
  v71 = *(_QWORD *)(v5 - 8);
  v72 = v5;
  __chkstk_darwin(v5);
  v73 = &v61[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v64 = type metadata accessor for UUID(0);
  v68 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v67 = &v61[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v74 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v66 = &v61[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_10001A9A8(&qword_1011091A0);
  v11 = __chkstk_darwin(v10);
  v70 = &v61[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __chkstk_darwin(v11);
  v63 = &v61[-v14];
  __chkstk_darwin(v13);
  v69 = &v61[-v15];
  v16 = sub_10001A9A8(&qword_1010EF3F8);
  v17 = __chkstk_darwin(v16);
  v19 = &v61[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  v21 = &v61[-v20];
  v22 = sub_10001A9A8((uint64_t *)&unk_101100320);
  __chkstk_darwin(v22);
  v24 = &v61[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = type metadata accessor for ObservedAdvertisement.Location(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (double *)&v61[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v76 = (int *)type metadata accessor for ObservedAdvertisement(0);
  sub_10000F9B8((uint64_t)&a1[v76[12]], (uint64_t)v24, (uint64_t *)&unk_101100320);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
  {
    sub_100004048((uint64_t)v24, (uint64_t *)&unk_101100320);
    v29 = type metadata accessor for RawSearchResult(0);
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v75, 1, 1, v29);
  }
  sub_1000126EC((uint64_t)v24, (uint64_t)v28, type metadata accessor for ObservedAdvertisement.Location);
  if (a1[9] != 3)
  {
    v32 = v74;
    if ((a1[31] & 0x20) != 0)
    {
      v33 = 5;
    }
    else
    {
      sub_10000F9B8((uint64_t)&a1[v76[13]], (uint64_t)v21, &qword_1010EF3F8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v32 + 48))(v21, 1, v8) == 1)
      {
        sub_100004048((uint64_t)v21, &qword_1010EF3F8);
        v33 = 6;
      }
      else
      {
        v57 = v21[*(int *)(v8 + 20)];
        sub_1000126B0((uint64_t)v21, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        if (v57)
        {
          if (v57 == 1)
          {
            v58 = 0xE900000000000079;
            v59 = 0x7261646E6F636553;
          }
          else
          {
            v58 = 0xEF736E6F69746163;
            v59 = 0x6F4C657275636553;
          }
          v60 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v58, 0x7972616D697250, 0xE700000000000000, 0);
          swift_bridgeObjectRelease();
          if ((v60 & 1) != 0)
            v31 = 6;
          else
            v31 = 12;
          goto LABEL_5;
        }
        swift_bridgeObjectRelease();
        v33 = 6;
      }
    }
    v62 = v33;
    goto LABEL_11;
  }
  v31 = 7;
LABEL_5:
  v62 = v31;
  v32 = v74;
LABEL_11:
  sub_10000F9B8((uint64_t)&a1[v76[13]], (uint64_t)v19, &qword_1010EF3F8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v32 + 48))(v19, 1, v8) == 1)
  {
    sub_100004048((uint64_t)v19, &qword_1010EF3F8);
    v34 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
    v35 = (uint64_t)v69;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v69, 1, 1, v34);
    v36 = (uint64_t)v65;
  }
  else
  {
    v37 = v66;
    sub_1000126EC((uint64_t)v19, (uint64_t)v66, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    v38 = v64;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v68 + 16))(v67, v37, v64);
    v39 = v37[*(int *)(v8 + 20)];
    v40 = *(_QWORD *)&v37[*(int *)(v8 + 24)];
    if (v39)
    {
      v41 = (uint64_t)v69;
      if (v39 == 1)
      {
        v78 = &type metadata for SecondaryIndex;
        v42 = sub_100336B24();
      }
      else
      {
        v78 = &type metadata for SecureLocationsIndex;
        v42 = sub_1003D155C();
      }
      v79 = v42;
      *(_QWORD *)&v77 = v40;
      v36 = (uint64_t)v65;
    }
    else
    {
      v78 = &type metadata for PrimaryIndex;
      v79 = sub_100336BAC();
      *(_QWORD *)&v77 = v40;
      v36 = (uint64_t)v65;
      v41 = (uint64_t)v69;
    }
    v43 = (uint64_t)v63;
    sub_10000F9FC(&v77, (uint64_t)v80);
    sub_1000126B0((uint64_t)v66, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v68 + 32))(v43, v67, v38);
    v44 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
    sub_10000F9FC(v80, v43 + *(int *)(v44 + 20));
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 0, 1, v44);
    sub_100005CF0(v43, v41, &qword_1011091A0);
    v35 = v41;
  }
  v45 = (char *)v28 + *(int *)(v25 + 28);
  v46 = v71;
  v47 = v72;
  v48 = *(void (**)(_BYTE *, char *, uint64_t))(v71 + 16);
  v49 = a1[32];
  v50 = (uint64_t)v73;
  v48(v73, v45, v72);
  v51 = *v28;
  v52 = v28[1];
  v53 = v28[2];
  v48((_BYTE *)v36, &a1[v76[11]], v47);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v36, 0, 1, v47);
  v54 = v70;
  sub_10000F9B8(v35, (uint64_t)v70, &qword_1011091A0);
  v55 = v75;
  sub_10096339C(v49, v50, v62, v36, (uint64_t)v54, 256, v75, v51, v52, v53);
  sub_100004048(v35, &qword_1011091A0);
  sub_1000126B0((uint64_t)v28, type metadata accessor for ObservedAdvertisement.Location);
  v56 = type metadata accessor for RawSearchResult(0);
  return (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v55, 0, 1, v56);
}

uint64_t sub_1003FF9E4@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;

  v6 = sub_10001A9A8(&qword_1010FB188);
  v7 = sub_10001A9A8(&qword_1010FB190);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v6, v11 + v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
  v13 = *(int *)(v7 + 48);
  v14 = a1[3];
  v15 = a1[4];
  sub_10001AA44(a1, v14);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v15 + 8) + 8) + 32))(v14);
  swift_bridgeObjectRetain(a2);
  v17 = sub_100CA80F4(v16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v12 + v11 + v13) = v17;
  v18 = sub_1006B968C(v12);
  v19 = sub_1003F5130(v18);
  result = swift_bridgeObjectRelease();
  *a3 = v19;
  return result;
}

uint64_t sub_1003FFAF4(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  int v33;
  uint8_t *v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t result;
  uint8_t *v60;
  uint8_t *v61;
  uint64_t v62;
  int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v4 = v2;
  v70 = a1;
  v6 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v6);
  v69 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocationFetcher(0);
  v67 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = v10;
  __chkstk_darwin(v9);
  v13 = (uint8_t **)((char *)&v60 - v12);
  v14 = type metadata accessor for Logger(0);
  v71 = *(_QWORD *)(v14 - 8);
  v72 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010FB298);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v18 = Future.init()();
  if (!*(_QWORD *)(a2 + 16))
  {
    v24 = sub_100425D04();
    v25 = swift_allocError(&type metadata for LocationFetcher.LocationFetcherError, v24, 0, 0);
    *v26 = 1;
    Future.finish(error:)(v25);
    swift_errorRelease(v25);
    return v18;
  }
  v64 = v11;
  v75 = a2;
  swift_bridgeObjectRetain(a2);
  sub_1002D6E8C(&v75, type metadata accessor for FetchRequestBeacon, (uint64_t (*)(uint64_t))sub_10088F218, sub_100418170);
  if (!v3)
  {
    v65 = v18;
    v66 = a2;
    v19 = v75;
    v20 = *(_QWORD *)(v75 + 16);
    if (v20)
    {
      v21 = *(_QWORD *)(type metadata accessor for FetchRequestBeacon(0) - 8);
      v22 = v19 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
      v23 = *(_QWORD *)(v21 + 72);
      swift_retain();
      do
      {
        sub_100412C7C(v22, (uint64_t)v4);
        v22 += v23;
        --v20;
      }
      while (v20);
      swift_release_n(v19, 2);
    }
    else
    {
      swift_release();
    }
    v28 = v71;
    v27 = v72;
    v29 = v16;
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v16, &v4[*(int *)(v8 + 32)], v72);
    v30 = sub_10005972C((uint64_t)v4, (uint64_t)v13, type metadata accessor for LocationFetcher);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter(v31);
    v33 = v32;
    if (os_log_type_enabled(v31, v32))
    {
      v63 = v33;
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v62 = v35;
      *(_DWORD *)v34 = 136446210;
      v36 = v34 + 12;
      v75 = v35;
      v60 = v34 + 4;
      v61 = v34;
      v37 = v13[6];
      v38 = v13[7];
      sub_10001AA44(v13 + 3, v37);
      v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 48))(v37, v38);
      v42 = sub_100AC41D8(v39, v40, v41);
      v44 = v43;
      swift_bridgeObjectRelease();
      v73 = sub_100016940(v42, v44, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v60, v36);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v13, type metadata accessor for LocationFetcher);
      v45 = v61;
      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v63, "Location fetch request for context: %{public}s.", v61, 0xCu);
      v46 = v62;
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);

      (*(void (**)(char *, uint64_t))(v71 + 8))(v29, v72);
    }
    else
    {
      sub_1000126B0((uint64_t)v13, type metadata accessor for LocationFetcher);

      (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v27);
    }
    v47 = *((_QWORD *)v4 + 6);
    v48 = *((_QWORD *)v4 + 7);
    sub_10001AA44((_QWORD *)v4 + 3, v47);
    LODWORD(v72) = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 64))(v47, v48);
    v49 = type metadata accessor for TaskPriority(0);
    v50 = (uint64_t)v69;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v69, 1, 1, v49);
    v51 = (uint64_t)v64;
    sub_10005972C((uint64_t)v4, (uint64_t)v64, type metadata accessor for LocationFetcher);
    v52 = *(unsigned __int8 *)(v67 + 80);
    v53 = (v52 + 40) & ~v52;
    v54 = v53 + v68;
    v55 = (v53 + v68) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v55 + 23) & 0xFFFFFFFFFFFFFFF8;
    v57 = (_QWORD *)swift_allocObject(&unk_101075BE0, v56 + 8, v52 | 7);
    v57[2] = 0;
    v57[3] = 0;
    v58 = v66;
    v57[4] = v66;
    sub_1000126EC(v51, (uint64_t)v57 + v53, type metadata accessor for LocationFetcher);
    *((_BYTE *)v57 + v54) = v72 & 1;
    *(_QWORD *)((char *)v57 + v55 + 8) = v70;
    v18 = v65;
    *(_QWORD *)((char *)v57 + v56) = v65;
    swift_bridgeObjectRetain(v58);
    swift_retain();
    swift_retain();
    sub_100691AC0(v50, (uint64_t)&unk_1010FB2A8, (uint64_t)v57);
    swift_release();
    return v18;
  }
  result = swift_release();
  __break(1u);
  return result;
}

void sub_10040000C(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29[3];

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocationFetcher(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2 + *(int *)(v12 + 32), v8);
  swift_errorRetain(a1);
  v13 = swift_errorRetain(a1);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v27 = a4;
    v16 = swift_slowAlloc(12, -1);
    v26 = a3;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc(32, -1);
    v28 = a1;
    v29[0] = v18;
    *(_DWORD *)v17 = 136446210;
    v25 = v17 + 4;
    swift_errorRetain(a1);
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v20 = String.init<A>(describing:)(&v28, v19);
    v28 = sub_100016940(v20, v21, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v25, v17 + 12);
    a4 = v27;
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Fetch error: %{public}s.", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    v22 = v17;
    a3 = v26;
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_beginAccess(a3 + 16, v29, 1, 0);
  v23 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = a1;
  swift_errorRelease(v23);
  swift_errorRetain(a1);
  dispatch_group_leave(a4);
}

void sub_100400248(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  _BYTE v11[24];

  v7 = a2 + 16;
  v8 = sub_1004002FC(*a1, a4);
  swift_beginAccess(v7, v11, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a2 + 16));
  v10 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0x8000000000000000;
  sub_10041BB54(v8, (uint64_t)sub_10041B784, 0, isUniquelyReferenced_nonNull_native, &v10);
  *(_QWORD *)(a2 + 16) = v10;
  swift_bridgeObjectRelease();
  swift_endAccess(v11);
  dispatch_group_leave(a5);
}

uint64_t sub_1004002FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t RequestBeacon;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t (*v31)(_QWORD, _QWORD, _QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(unint64_t, uint64_t *, uint64_t);
  uint64_t v36;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  void *v42;
  char v43;
  unint64_t v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  char *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  BOOL v57;
  uint64_t v58;
  uint8_t *v59;
  uint8_t *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  char *v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  _BOOL4 v80;
  uint64_t *v81;
  uint8_t *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t result;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t *v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  void (*v111)(char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  _QWORD *v119;

  v107 = a1;
  v3 = type metadata accessor for LocationFetcher(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for FetchResponse.SearchResult(0);
  v106 = *(_QWORD *)(v117 - 8);
  v6 = __chkstk_darwin(v117);
  v112 = (uint64_t)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v105 = (uint64_t *)((char *)&v98 - v9);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v98 - v11;
  v13 = __chkstk_darwin(v10);
  v101 = (uint64_t *)((char *)&v98 - v14);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v98 - v16;
  __chkstk_darwin(v15);
  v109 = (char *)&v98 - v18;
  v19 = type metadata accessor for UUID(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v115 = (uint64_t *)((char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  v23 = *(_QWORD *)(RequestBeacon - 8);
  __chkstk_darwin(RequestBeacon);
  v113 = (uint64_t)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for Logger(0);
  v100 = *(_QWORD *)(v108 - 8);
  v25 = __chkstk_darwin(v108);
  v102 = (char *)&v98 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v103 = v5;
  v104 = (char *)&v98 - v27;
  v28 = *(_QWORD *)(a2 + 16);
  v110 = v12;
  v114 = a2;
  if (v28)
  {
    v98 = v3;
    v99 = v17;
    v29 = a2 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
    v111 = *(void (**)(char *, uint64_t))(v23 + 72);
    swift_bridgeObjectRetain(a2);
    v30 = _swiftEmptyDictionarySingleton;
    v31 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v115;
    v32 = v113;
    while (1)
    {
      sub_10005972C(v29, v32, type metadata accessor for FetchRequestBeacon);
      v34 = v20;
      v35 = *(uint64_t (**)(unint64_t, uint64_t *, uint64_t))(v20 + 16);
      v20 = v19;
      v35((unint64_t)v31, (uint64_t *)v32, v19);
      swift_bridgeObjectRetain(v30);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v36);
      v119 = v30;
      v39 = sub_100003FB0((uint64_t)v31);
      v40 = v30[2];
      v41 = (v38 & 1) == 0;
      v42 = (void *)(v40 + v41);
      if (__OFADD__(v40, v41))
        break;
      v43 = v38;
      if (v30[3] >= (uint64_t)v42)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_100A9B308();
      }
      else
      {
        sub_100A879D8((uint64_t)v42, isUniquelyReferenced_nonNull_native);
        v44 = sub_100003FB0((uint64_t)v115);
        if ((v43 & 1) != (v45 & 1))
          goto LABEL_58;
        v39 = v44;
      }
      v19 = v20;
      v46 = v119;
      v20 = v34;
      if ((v43 & 1) != 0)
      {
        v33 = v119[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v33 + 8 * v39) = &_swiftEmptySetSingleton;
        v31 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v115;
      }
      else
      {
        v119[(v39 >> 6) + 8] |= 1 << v39;
        v31 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v115;
        v42 = (void *)v35(v46[6] + *(_QWORD *)(v34 + 72) * v39, v115, v19);
        *(_QWORD *)(v46[7] + 8 * v39) = &_swiftEmptySetSingleton;
        v47 = v46[2];
        v48 = __OFADD__(v47, 1);
        v49 = v47 + 1;
        if (v48)
          goto LABEL_57;
        v46[2] = v49;
      }
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t (*)(_QWORD, _QWORD, _QWORD), uint64_t))(v34 + 8))(v31, v19);
      v32 = v113;
      sub_1000126B0(v113, type metadata accessor for FetchRequestBeacon);
      swift_bridgeObjectRelease();
      v29 += (uint64_t)v111;
      v30 = v46;
      if (!--v28)
      {
        swift_bridgeObjectRelease();
        v12 = v110;
        v5 = v103;
        v17 = v99;
        v3 = v98;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_57:
    __break(1u);
    objc_autoreleasePoolPop(v42);
    __break(1u);
LABEL_58:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
    __break(1u);
  }
  else
  {
    v46 = _swiftEmptyDictionarySingleton;
LABEL_16:
    v119 = v46;
    v50 = *(int *)(v3 + 32);
    v51 = v100;
    v52 = *(uint64_t **)(v100 + 16);
    v53 = v104;
    v113 = v116 + v50;
    v54 = ((uint64_t (*)(char *))v52)(v104);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.default.getter(v55);
    v57 = os_log_type_enabled(v55, v56);
    v58 = (uint64_t)v109;
    if (v57)
    {
      v59 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Owned locations processing", v59, 2u);
      v60 = v59;
      v53 = v104;
      swift_slowDealloc(v60, -1, -1);
    }

    v111 = *(void (**)(char *, uint64_t))(v51 + 8);
    v111(v53, v108);
    v61 = (char *)_swiftEmptyArrayStorage;
    v118 = (char *)_swiftEmptyArrayStorage;
    v62 = *(_QWORD *)(v107 + 16);
    swift_bridgeObjectRetain(v107);
    v115 = v52;
    if (v62)
    {
      v64 = (*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80);
      v65 = *(_QWORD *)(v106 + 72);
      v66 = v63 + v64;
      v67 = v62;
      do
      {
        sub_10005972C(v66, v58, type metadata accessor for FetchResponse.SearchResult);
        if (*(_BYTE *)(v58 + *(int *)(v117 + 28)) == 15)
        {
          sub_1000126EC(v58, (uint64_t)v17, type metadata accessor for FetchResponse.SearchResult);
          if ((swift_isUniquelyReferenced_nonNull_native(v61) & 1) == 0)
            sub_10009B0C0(0, *((_QWORD *)v61 + 2) + 1, 1);
          v61 = v118;
          v69 = *((_QWORD *)v118 + 2);
          v68 = *((_QWORD *)v118 + 3);
          if (v69 >= v68 >> 1)
          {
            sub_10009B0C0(v68 > 1, v69 + 1, 1);
            v61 = v118;
          }
          *((_QWORD *)v61 + 2) = v69 + 1;
          sub_1000126EC((uint64_t)v17, (uint64_t)&v61[v64 + v69 * v65], type metadata accessor for FetchResponse.SearchResult);
          v58 = (uint64_t)v109;
        }
        else
        {
          sub_1000126B0(v58, type metadata accessor for FetchResponse.SearchResult);
        }
        v66 += v65;
        --v67;
      }
      while (v67);
      v61 = v118;
      v12 = v110;
      v5 = v103;
    }
    swift_bridgeObjectRelease();
    v70 = *((_QWORD *)v61 + 2);
    v71 = v101;
    if (v70)
    {
      v72 = *(unsigned __int8 *)(v106 + 80);
      v109 = v61;
      v73 = (uint64_t)&v61[(v72 + 32) & ~v72];
      v74 = *(_QWORD *)(v106 + 72);
      do
      {
        sub_10005972C(v116, (uint64_t)v5, type metadata accessor for LocationFetcher);
        sub_10005972C(v73, (uint64_t)v71, type metadata accessor for FetchResponse.SearchResult);
        v75 = objc_autoreleasePoolPush();
        sub_100408550((uint64_t)v5, v71, v114, (uint64_t *)&v119);
        objc_autoreleasePoolPop(v75);
        sub_1000126B0((uint64_t)v5, type metadata accessor for LocationFetcher);
        sub_1000126B0((uint64_t)v71, type metadata accessor for FetchResponse.SearchResult);
        v73 += v74;
        --v70;
      }
      while (v70);
      swift_release();
      v12 = v110;
    }
    else
    {
      swift_release();
    }
    v76 = v102;
    v77 = ((uint64_t (*)(char *, uint64_t, uint64_t))v115)(v102, v113, v108);
    v78 = Logger.logObject.getter(v77);
    v79 = static os_log_type_t.default.getter(v78);
    v80 = os_log_type_enabled(v78, v79);
    v81 = v105;
    if (v80)
    {
      v82 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v82 = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "Unowned locations processing", v82, 2u);
      swift_slowDealloc(v82, -1, -1);
    }

    v111(v76, v108);
    v83 = (char *)_swiftEmptyArrayStorage;
    v118 = (char *)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v107);
    if (v62)
    {
      v85 = (*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80);
      v86 = *(_QWORD *)(v106 + 72);
      v87 = v84 + v85;
      v88 = v114;
      do
      {
        sub_10005972C(v87, (uint64_t)v12, type metadata accessor for FetchResponse.SearchResult);
        if (v12[*(int *)(v117 + 28)] == 15)
        {
          sub_1000126B0((uint64_t)v12, type metadata accessor for FetchResponse.SearchResult);
        }
        else
        {
          sub_1000126EC((uint64_t)v12, v112, type metadata accessor for FetchResponse.SearchResult);
          if ((swift_isUniquelyReferenced_nonNull_native(v83) & 1) == 0)
            sub_10009B0C0(0, *((_QWORD *)v83 + 2) + 1, 1);
          v83 = v118;
          v90 = *((_QWORD *)v118 + 2);
          v89 = *((_QWORD *)v118 + 3);
          if (v90 >= v89 >> 1)
          {
            sub_10009B0C0(v89 > 1, v90 + 1, 1);
            v83 = v118;
          }
          *((_QWORD *)v83 + 2) = v90 + 1;
          sub_1000126EC(v112, (uint64_t)&v83[v85 + v90 * v86], type metadata accessor for FetchResponse.SearchResult);
          v12 = v110;
        }
        v87 += v86;
        --v62;
      }
      while (v62);
      v83 = v118;
      v81 = v105;
    }
    else
    {
      v88 = v114;
    }
    swift_bridgeObjectRelease();
    v91 = (uint64_t)v119;
    v118 = (char *)v119;
    v92 = *((_QWORD *)v83 + 2);
    if (v92)
    {
      v93 = v83;
      v94 = (uint64_t)&v83[(*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80)];
      v95 = *(_QWORD *)(v106 + 72);
      swift_bridgeObjectRetain_n(v119, 2);
      swift_retain();
      do
      {
        sub_10005972C(v94, (uint64_t)v81, type metadata accessor for FetchResponse.SearchResult);
        if (*((_BYTE *)v81 + *(int *)(v117 + 28)) != 15)
        {
          v96 = objc_autoreleasePoolPush();
          sub_10040AC58(v81, v88, v116, &v118);
          objc_autoreleasePoolPop(v96);
        }
        sub_1000126B0((uint64_t)v81, type metadata accessor for FetchResponse.SearchResult);
        v94 += v95;
        --v92;
      }
      while (v92);
      swift_bridgeObjectRelease_n(v91, 2);
      swift_release_n(v93, 2);
      return (uint64_t)v118;
    }
    else
    {
      swift_release();
    }
    return v91;
  }
  return result;
}

void sub_100400C90(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t RequestBeacon;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void (*v53)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t (*v58)(uint64_t);
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  uint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  os_log_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t);
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  uint64_t v98;
  unint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  unint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  os_log_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  NSObject *v131;
  char *v132;
  os_log_type_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  char *v152;
  __n128 v153;
  char *v154;
  __n128 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  os_log_t v161;
  unint64_t *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;

  v178 = a2;
  v182 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v182 - 8);
  v6 = __chkstk_darwin(v182);
  v152 = (char *)&v145 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v172 = (char *)&v145 - v9;
  __chkstk_darwin(v8);
  v171 = (char *)&v145 - v10;
  v11 = sub_10001A9A8(&qword_1010FB248);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v145 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v151 = (uint64_t)&v145 - v16;
  __chkstk_darwin(v15);
  v177 = (uint64_t)&v145 - v17;
  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  v19 = *(_QWORD *)(RequestBeacon - 8);
  v20 = __chkstk_darwin(RequestBeacon);
  v146 = (uint64_t)&v145 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v145 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v145 - v26;
  v28 = __chkstk_darwin(v25);
  v158 = (uint64_t)&v145 - v29;
  v30 = __chkstk_darwin(v28);
  v157 = (uint64_t)&v145 - v31;
  v32 = __chkstk_darwin(v30);
  v156 = (uint64_t)&v145 - v33;
  v34 = __chkstk_darwin(v32);
  v170 = (uint64_t)&v145 - v35;
  v36 = __chkstk_darwin(v34);
  v169 = (uint64_t)&v145 - v37;
  v38 = __chkstk_darwin(v36);
  v180 = (uint64_t)&v145 - v39;
  v40 = __chkstk_darwin(v38);
  v175 = (uint64_t)&v145 - v41;
  v42 = __chkstk_darwin(v40);
  v165 = (uint64_t)&v145 - v43;
  v44 = __chkstk_darwin(v42);
  v164 = (uint64_t)&v145 - v45;
  v46 = __chkstk_darwin(v44);
  v48 = (char *)&v145 - v47;
  v49 = __chkstk_darwin(v46);
  v51 = (char *)&v145 - v50;
  __chkstk_darwin(v49);
  v166 = (uint64_t)&v145 - v52;
  v53 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56);
  v173 = a3;
  v181 = v54;
  v176 = v53;
  ((void (*)(uint64_t, uint64_t, uint64_t))v53)(a3, 1, 1);
  v55 = *(_QWORD *)(a1 + 16);
  v183 = v5;
  v148 = v27;
  v179 = v19;
  if (v55)
  {
    v149 = v48;
    v150 = v24;
    v56 = a1 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    v162 = &v188;
    v174 = *(_QWORD *)(v19 + 72);
    v147 = a1;
    v57 = swift_bridgeObjectRetain(a1);
    v58 = type metadata accessor for FetchRequestBeacon;
    v57.n128_u64[0] = 141558531;
    v155 = v57;
    v154 = (char *)&type metadata for Any + 8;
    v57.n128_u64[0] = 141559299;
    v153 = v57;
    v59 = v171;
    v60 = v172;
    v168 = v51;
    v61 = v166;
    v62 = v173;
    v163 = v14;
    while (1)
    {
      v184 = v56;
      sub_10005972C(v56, v61, v58);
      v63 = v177;
      sub_10000F9B8(v62, v177, &qword_1010FB248);
      v64 = v181;
      v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v179 + 48))(v63, 1, v181);
      v185 = v55;
      if (v65 == 1)
      {
        sub_100004048(v62, &qword_1010FB248);
        sub_100004048(v63, &qword_1010FB248);
        sub_10005972C(v61, v62, v58);
        v176(v62, 0, 1, v64);
        v66 = type metadata accessor for LocationFetcher(0);
        v68 = v182;
        v67 = v183;
        (*(void (**)(char *, uint64_t, uint64_t))(v183 + 16))(v59, v178 + *(int *)(v66 + 32), v182);
        v69 = v164;
        sub_10005972C(v61, v164, v58);
        v70 = v165;
        v71 = sub_10005972C(v61, v165, v58);
        v72 = Logger.logObject.getter(v71);
        v167 = static os_log_type_t.default.getter(v72);
        if (os_log_type_enabled(v72, (os_log_type_t)v167))
        {
          v161 = v72;
          v73 = swift_slowAlloc(32, -1);
          v160 = swift_slowAlloc(64, -1);
          v189 = v160;
          *(_DWORD *)v73 = v155.n128_u32[0];
          v187 = 1752392040;
          v74 = v162;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v162, v73 + 4, v73 + 12);
          *(_WORD *)(v73 + 12) = 2081;
          v75 = type metadata accessor for UUID(0);
          v76 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v77 = dispatch thunk of CustomStringConvertible.description.getter(v75, v76);
          v187 = sub_100016940(v77, v78, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v74, v73 + 14, v73 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0(v69, v58);
          *(_WORD *)(v73 + 22) = 2082;
          v79 = v158;
          sub_10005972C(v70, v158, v58);
          v80 = objc_autoreleasePoolPush();
          v81 = v186;
          sub_100AC4E7C(v79, (unint64_t *)&v187);
          if (v81)
            goto LABEL_26;
          objc_autoreleasePoolPop(v80);
          v82 = v187;
          v83 = v188;
          sub_1000126B0(v79, v58);
          v187 = sub_100016940(v82, v83, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v74, v73 + 24, v73 + 32);
          swift_bridgeObjectRelease();
          sub_1000126B0(v70, v58);
          v84 = v161;
          _os_log_impl((void *)&_mh_execute_header, v161, (os_log_type_t)v167, "Initial fetch instruction %{private,mask.hash}s, %{public}s.", (uint8_t *)v73, 0x20u);
          v85 = v160;
          swift_arrayDestroy(v160, 2, v154);
          swift_slowDealloc(v85, -1, -1);
          swift_slowDealloc(v73, -1, -1);

          v59 = v171;
          (*(void (**)(char *, uint64_t))(v183 + 8))(v171, v182);
          v61 = v166;
          sub_1000126B0(v166, v58);
          v186 = 0;
          v60 = v172;
          v62 = v173;
        }
        else
        {

          sub_1000126B0(v70, v58);
          sub_1000126B0(v69, v58);
          (*(void (**)(char *, uint64_t))(v67 + 8))(v59, v68);
          sub_1000126B0(v61, v58);
          v60 = v172;
          v62 = v173;
        }
      }
      else
      {
        v86 = (uint64_t)v168;
        sub_1000126EC(v63, (uint64_t)v168, v58);
        v87 = (uint64_t)v163;
        v88 = v186;
        sub_100AC3124(v61, (uint64_t)v163);
        v186 = v88;
        if (v88)
        {
          sub_1000126B0(v86, type metadata accessor for FetchRequestBeacon);
          sub_1000126B0(v61, type metadata accessor for FetchRequestBeacon);
          swift_bridgeObjectRelease();
          sub_100004048(v62, &qword_1010FB248);
          return;
        }
        v89 = v58;
        v90 = v61;
        sub_100004048(v62, &qword_1010FB248);
        v176(v87, 0, 1, v181);
        sub_100005CF0(v87, v62, &qword_1010FB248);
        v91 = type metadata accessor for LocationFetcher(0);
        v92 = v60;
        (*(void (**)(char *, uint64_t, uint64_t))(v183 + 16))(v60, v178 + *(int *)(v91 + 32), v182);
        v93 = v86;
        sub_10005972C(v86, v175, v89);
        sub_10005972C(v86, v180, v89);
        v94 = v169;
        sub_10005972C(v90, v169, v89);
        v95 = v170;
        v96 = sub_10005972C(v90, v170, v89);
        v97 = Logger.logObject.getter(v96);
        v167 = static os_log_type_t.default.getter(v97);
        if (os_log_type_enabled(v97, (os_log_type_t)v167))
        {
          v161 = v97;
          v98 = swift_slowAlloc(62, -1);
          v160 = swift_slowAlloc(128, -1);
          v189 = v160;
          *(_DWORD *)v98 = v153.n128_u32[0];
          v187 = 1752392040;
          v99 = v162;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v162, v98 + 4, v98 + 12);
          *(_WORD *)(v98 + 12) = 2081;
          v100 = type metadata accessor for UUID(0);
          v101 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v102 = v175;
          v159 = v100;
          v103 = dispatch thunk of CustomStringConvertible.description.getter(v100, v101);
          v187 = sub_100016940(v103, v104, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v99, v98 + 14, v98 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0(v102, v89);
          *(_WORD *)(v98 + 22) = 2082;
          v105 = v156;
          sub_10005972C(v180, v156, v89);
          v80 = objc_autoreleasePoolPush();
          v106 = v186;
          sub_100AC4E7C(v105, (unint64_t *)&v187);
          if (v106)
            goto LABEL_26;
          objc_autoreleasePoolPop(v80);
          v108 = v187;
          v107 = v188;
          sub_1000126B0(v105, v89);
          v187 = sub_100016940(v108, v107, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v99, v98 + 24, v98 + 32);
          swift_bridgeObjectRelease();
          sub_1000126B0(v180, v89);
          *(_WORD *)(v98 + 32) = 2160;
          v187 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v99, v98 + 34, v98 + 42);
          *(_WORD *)(v98 + 42) = 2081;
          v109 = v169;
          v110 = dispatch thunk of CustomStringConvertible.description.getter(v159, v101);
          v187 = sub_100016940(v110, v111, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v99, v98 + 44, v98 + 52);
          swift_bridgeObjectRelease();
          sub_1000126B0(v109, v89);
          *(_WORD *)(v98 + 52) = 2082;
          v112 = v170;
          v113 = v157;
          sub_10005972C(v170, v157, v89);
          v114 = objc_autoreleasePoolPush();
          sub_100AC4E7C(v113, (unint64_t *)&v187);
          v115 = v99;
          v116 = v166;
          v186 = 0;
          objc_autoreleasePoolPop(v114);
          v117 = v187;
          v118 = v188;
          sub_1000126B0(v113, v89);
          v187 = sub_100016940(v117, v118, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v115, v98 + 54, v98 + 62);
          swift_bridgeObjectRelease();
          sub_1000126B0(v112, v89);
          v119 = v161;
          _os_log_impl((void *)&_mh_execute_header, v161, (os_log_type_t)v167, "Combining fetch instruction %{private,mask.hash}s %{public}s with %{private,mask.hash}s %{public}s.", (uint8_t *)v98, 0x3Eu);
          v120 = v160;
          swift_arrayDestroy(v160, 4, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v120, -1, -1);
          swift_slowDealloc(v98, -1, -1);

          v60 = v172;
          (*(void (**)(char *, uint64_t))(v183 + 8))(v172, v182);
          sub_1000126B0((uint64_t)v168, v89);
          sub_1000126B0(v116, v89);
          v62 = v173;
          v59 = v171;
          v61 = v116;
          v58 = v89;
        }
        else
        {

          sub_1000126B0(v95, v89);
          sub_1000126B0(v94, v89);
          sub_1000126B0(v180, v89);
          sub_1000126B0(v175, v89);
          (*(void (**)(char *, uint64_t))(v183 + 8))(v92, v182);
          sub_1000126B0(v93, v89);
          sub_1000126B0(v90, v89);
          v59 = v171;
          v61 = v90;
          v58 = v89;
          v60 = v92;
        }
      }
      v56 = v184 + v174;
      v55 = v185 - 1;
      if (v185 == 1)
      {
        swift_bridgeObjectRelease();
        v121 = v152;
        v122 = (uint64_t)v150;
        v48 = v149;
        goto LABEL_17;
      }
    }
  }
  v62 = v173;
  v121 = v152;
  v122 = (uint64_t)v24;
LABEL_17:
  v123 = v151;
  sub_10000F9B8(v62, v151, &qword_1010FB248);
  v124 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v179 + 48))(v123, 1, v181);
  v125 = v183;
  if (v124 == 1)
  {
    sub_100004048(v123, &qword_1010FB248);
    return;
  }
  v126 = v123;
  v127 = (uint64_t)v148;
  sub_1000126EC(v126, (uint64_t)v48, type metadata accessor for FetchRequestBeacon);
  v128 = type metadata accessor for LocationFetcher(0);
  v129 = v182;
  (*(void (**)(char *, uint64_t, uint64_t))(v125 + 16))(v121, v178 + *(int *)(v128 + 32), v182);
  sub_10005972C((uint64_t)v48, v127, type metadata accessor for FetchRequestBeacon);
  v130 = sub_10005972C((uint64_t)v48, v122, type metadata accessor for FetchRequestBeacon);
  v131 = Logger.logObject.getter(v130);
  v132 = v48;
  v133 = static os_log_type_t.default.getter(v131);
  if (os_log_type_enabled(v131, v133))
  {
    v149 = v132;
    v134 = swift_slowAlloc(32, -1);
    v185 = swift_slowAlloc(64, -1);
    v189 = v185;
    *(_DWORD *)v134 = 141558531;
    v187 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v134 + 4, v134 + 12);
    *(_WORD *)(v134 + 12) = 2081;
    v135 = type metadata accessor for UUID(0);
    v136 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v137 = dispatch thunk of CustomStringConvertible.description.getter(v135, v136);
    v187 = sub_100016940(v137, v138, &v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v134 + 14, v134 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v127, type metadata accessor for FetchRequestBeacon);
    *(_WORD *)(v134 + 22) = 2082;
    v150 = (char *)v122;
    v139 = v146;
    sub_10005972C(v122, v146, type metadata accessor for FetchRequestBeacon);
    v80 = objc_autoreleasePoolPush();
    v140 = v186;
    sub_100AC4E7C(v139, (unint64_t *)&v187);
    v186 = v140;
    if (v140)
    {
LABEL_26:
      objc_autoreleasePoolPop(v80);
      __break(1u);
      return;
    }
    objc_autoreleasePoolPop(v80);
    v141 = v187;
    v142 = v188;
    sub_1000126B0(v139, type metadata accessor for FetchRequestBeacon);
    v187 = sub_100016940(v141, v142, &v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v134 + 24, v134 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v150, type metadata accessor for FetchRequestBeacon);
    _os_log_impl((void *)&_mh_execute_header, v131, v133, "Combined fetch instruction result %{private,mask.hash}s %{public}s.", (uint8_t *)v134, 0x20u);
    v143 = v185;
    swift_arrayDestroy(v185, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v143, -1, -1);
    swift_slowDealloc(v134, -1, -1);

    (*(void (**)(char *, uint64_t))(v183 + 8))(v152, v182);
    v144 = (uint64_t)v149;
  }
  else
  {

    sub_1000126B0(v122, type metadata accessor for FetchRequestBeacon);
    sub_1000126B0(v127, type metadata accessor for FetchRequestBeacon);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v121, v129);
    v144 = (uint64_t)v132;
  }
  sub_1000126B0(v144, type metadata accessor for FetchRequestBeacon);
}

uint64_t sub_100401D10@<X0>(char *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  void (*v90)(char *, _QWORD, uint64_t, uint64_t);
  unsigned int (*v91)(char *, uint64_t, uint64_t);
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  char *v118;
  void (*v119)(char *, char *, uint64_t);
  char *v120;
  char *v121;
  char *v122;
  void (*v123)(char *, uint64_t);
  uint64_t v124;
  uint64_t v125;
  char *v126;
  __int128 *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t *v133;
  __int128 *v134;
  uint64_t v135;
  os_log_type_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  void (*v155)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  NSObject *v168;
  os_log_type_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  NSObject *v182;
  os_log_type_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  NSObject *v198;
  os_log_type_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  char *v205;
  int64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  int v215;
  unsigned int v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  NSObject *v221;
  int v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void (*v243)(char *, char *, uint64_t);
  void (*v244)(uint64_t, uint64_t);
  uint64_t v245;
  uint64_t v246;
  uint64_t (*v247)(uint64_t, char *, uint64_t);
  char *v248;
  unint64_t v249;
  unint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  char *v265;
  char *v266;
  char *v267;
  char *v268;
  char *v269;
  char *v270;
  char *v271;
  int v272;
  char *v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t RequestBeacon;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  char *v289;
  _QWORD v290[3];
  uint64_t v291;
  _OWORD v292[13];
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;

  v284 = a5;
  v288 = a2;
  v277 = a4;
  v272 = a3;
  v289 = a1;
  v280 = a6;
  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  v279 = *(_QWORD *)(RequestBeacon - 8);
  v6 = __chkstk_darwin(RequestBeacon);
  v263 = (uint64_t)&v242 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v271 = (char *)&v242 - v9;
  __chkstk_darwin(v8);
  v270 = (char *)&v242 - v10;
  v11 = type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey(0);
  v255 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v274 = (uint64_t)&v242 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v13);
  v259 = (char *)&v242 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OwnedBeaconRecord(0);
  v261 = *(_QWORD *)(v15 - 8);
  v262 = v15;
  v16 = __chkstk_darwin(v15);
  v254 = (uint64_t)&v242 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v258 = (char *)&v242 - v19;
  v20 = __chkstk_darwin(v18);
  v256 = (uint64_t)&v242 - v21;
  v22 = __chkstk_darwin(v20);
  v253 = (uint64_t)&v242 - v23;
  v257 = v24;
  __chkstk_darwin(v22);
  v260 = (uint64_t)&v242 - v25;
  v26 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v26);
  v268 = (char *)&v242 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v278 = type metadata accessor for UUID(0);
  v276 = *(_QWORD *)(v278 - 8);
  v28 = __chkstk_darwin(v278);
  v264 = (char *)&v242 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v275 = (char *)&v242 - v30;
  v31 = type metadata accessor for Logger(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v242 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v33);
  v269 = (char *)&v242 - v37;
  __chkstk_darwin(v36);
  v283 = (char *)&v242 - v38;
  v39 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v40 = __chkstk_darwin(v39);
  v42 = (char *)&v242 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v44 = (char *)&v242 - v43;
  v45 = type metadata accessor for Date(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = __chkstk_darwin(v45);
  v267 = (char *)&v242 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __chkstk_darwin(v47);
  v266 = (char *)&v242 - v50;
  v51 = __chkstk_darwin(v49);
  v265 = (char *)&v242 - v52;
  __chkstk_darwin(v51);
  v273 = (char *)&v242 - v53;
  v54 = type metadata accessor for DateInterval(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = __chkstk_darwin(v54);
  v57 = __chkstk_darwin(v56);
  v60 = *((_QWORD *)v289 + 2);
  if (!v60)
  {
    v64 = type metadata accessor for LocationFetcher(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v35, v287 + *(int *)(v64 + 32), v31);
    v65 = sub_100030784((uint64_t)v288, (uint64_t)&v293);
    v66 = v31;
    v67 = Logger.logObject.getter(v65);
    v68 = static os_log_type_t.default.getter(v67);
    if (os_log_type_enabled(v67, (os_log_type_t)v68))
    {
      LODWORD(v288) = v68;
      v289 = v35;
      v286 = v32;
      v282 = v66;
      v69 = swift_slowAlloc(32, -1);
      v287 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v292[0] = v287;
      *(_DWORD *)v69 = 141558531;
      v308 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, &v309, v69 + 4, v69 + 12);
      *(_WORD *)(v69 + 12) = 2081;
      v70 = *((_QWORD *)&v294 + 1);
      v71 = v295;
      sub_10001AA44(&v293, *((uint64_t *)&v294 + 1));
      v72 = v275;
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v71 + 8) + 8) + 32))(v70);
      v73 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v74 = v278;
      v75 = dispatch thunk of CustomStringConvertible.description.getter(v278, v73);
      v77 = v76;
      (*(void (**)(char *, uint64_t))(v276 + 8))(v72, v74);
      v308 = sub_100016940(v75, v77, (uint64_t *)v292);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, &v309, v69 + 14, v69 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v293);
      *(_WORD *)(v69 + 22) = 2082;
      if ((_BYTE)v272)
      {
        if (v272 == 1)
        {
          v78 = 0xEA00000000007972;
          v79 = 0x61646E6F6365732ELL;
        }
        else
        {
          v78 = 0x8000000100EC6940;
          v79 = 0xD000000000000010;
        }
      }
      else
      {
        v78 = 0xE800000000000000;
        v79 = 0x7972616D6972702ELL;
      }
      v135 = v286;
      v136 = v288;
      v308 = sub_100016940(v79, v78, (uint64_t *)v292);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, &v309, v69 + 24, v69 + 32);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v67, v136, "No keys to fetch for beacon %{private,mask.hash}s, sequence: %{public}s.", (uint8_t *)v69, 0x20u);
      v137 = v287;
      swift_arrayDestroy(v287, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v137, -1, -1);
      swift_slowDealloc(v69, -1, -1);

      (*(void (**)(char *, uint64_t))(v135 + 8))(v289, v282);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v293);

      (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v66);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v279 + 56))(v280, 1, 1, RequestBeacon);
  }
  v286 = v32;
  v61 = v60;
  if ((*(_BYTE *)(v284 + 8) & 1) == 0)
  {
    v61 = *(_QWORD *)v284;
    if (*(uint64_t *)v284 <= 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v279 + 56))(v280, 1, 1, RequestBeacon);
  }
  if (__OFSUB__(v61, v277))
  {
    __break(1u);
    goto LABEL_75;
  }
  v62 = (v61 - v277) & ~((uint64_t)(v61 - v277) >> 63);
  if (v61 < v62)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  if (v60 < v62)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  if (v60 < v61)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  v251 = (char *)&v242 - v58;
  v252 = v59;
  v277 = v57;
  v282 = v31;
  v63 = type metadata accessor for TimeBasedKey(0);
  if (v62 == v61)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v44, 1, 1, v45);
    swift_bridgeObjectRetain(v289);
    v42 = v44;
LABEL_17:
    v92 = (char *)v287;
LABEL_18:
    sub_100004048((uint64_t)v42, (uint64_t *)&unk_1010EA690);
    v93 = type metadata accessor for LocationFetcher(0);
    v94 = v286;
    v95 = v282;
    v96 = v283;
    (*(void (**)(char *, char *, uint64_t))(v286 + 16))(v283, &v92[*(int *)(v93 + 32)], v282);
    v97 = sub_100030784((uint64_t)v288, (uint64_t)&v293);
    v98 = Logger.logObject.getter(v97);
    v99 = static os_log_type_t.error.getter(v98);
    if (os_log_type_enabled(v98, v99))
    {
      v100 = swift_slowAlloc(22, -1);
      v288 = (_QWORD *)swift_slowAlloc(32, -1);
      *(_QWORD *)&v292[0] = v288;
      *(_DWORD *)v100 = 141558275;
      v308 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, &v309, v100 + 4, v100 + 12);
      *(_WORD *)(v100 + 12) = 2081;
      v287 = v100 + 14;
      v101 = *((_QWORD *)&v294 + 1);
      v102 = v295;
      sub_10001AA44(&v293, *((uint64_t *)&v294 + 1));
      v103 = v275;
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v102 + 8) + 8) + 32))(v101);
      v104 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v105 = v278;
      v106 = dispatch thunk of CustomStringConvertible.description.getter(v278, v104);
      v108 = v107;
      (*(void (**)(char *, uint64_t))(v276 + 8))(v103, v105);
      v308 = sub_100016940(v106, v108, (uint64_t *)v292);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, &v309, v287, v100 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v293);
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "Keys with invalid date interval for beacon %{private,mask.hash}s.", (uint8_t *)v100, 0x16u);
      v109 = v288;
      swift_arrayDestroy(v288, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v109, -1, -1);
      swift_slowDealloc(v100, -1, -1);

      (*(void (**)(char *, uint64_t))(v286 + 8))(v283, v282);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v293);

      (*(void (**)(char *, uint64_t))(v94 + 8))(v96, v95);
    }
    v110 = sub_100425D04();
    v111 = swift_allocError(&type metadata for LocationFetcher.LocationFetcherError, v110, 0, 0);
    *v112 = 2;
    swift_willThrow(v111);
    return swift_bridgeObjectRelease();
  }
  if (v62 >= v61)
  {
LABEL_78:
    __break(1u);
    JUMPOUT(0x100403A34);
  }
  v80 = *(_QWORD *)(v63 - 8);
  v81 = *(unsigned __int8 *)(v80 + 80);
  v82 = v289;
  v83 = *(_QWORD *)(v80 + 72);
  v248 = &v289[(v81 + 32) & ~v81];
  v249 = v61;
  v245 = v83;
  v246 = v63;
  v84 = (uint64_t)&v248[v83 * v62 + *(int *)(v63 + 20)];
  v85 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v55 + 16);
  v86 = v252;
  v250 = v62;
  v87 = v277;
  v247 = v85;
  v85(v252, (char *)v84, v277);
  swift_bridgeObjectRetain(v82);
  DateInterval.start.getter(v88);
  v89 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
  v89(v86, v87);
  v90 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56);
  v90(v44, 0, 1, v45);
  v91 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
  if (v91(v44, 1, v45) == 1)
  {
    v42 = v44;
    goto LABEL_17;
  }
  v243 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  v244 = v89;
  v243(v273, v44, v45);
  if (v249 - 1 < v250)
  {
    __break(1u);
    JUMPOUT(0x100403A48);
  }
  v114 = v252;
  v115 = v277;
  v116 = v247(v252, &v248[v245 * (v249 - 1) + *(int *)(v246 + 20)], v277);
  DateInterval.end.getter(v116);
  v244(v114, v115);
  v90(v42, 0, 1, v45);
  v117 = v91(v42, 1, v45);
  v92 = (char *)v287;
  if (v117 == 1)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v273, v45);
    goto LABEL_18;
  }
  v118 = v265;
  v243(v265, v42, v45);
  v119 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v120 = v266;
  v121 = v273;
  v119(v266, v273, v45);
  v122 = v267;
  v119(v267, v118, v45);
  DateInterval.init(start:end:)(v120, v122);
  v123 = *(void (**)(char *, uint64_t))(v46 + 8);
  v123(v118, v45);
  v123(v121, v45);
  v124 = v288[3];
  v125 = v288[4];
  sub_10001AA44(v288, v124);
  v126 = v268;
  (*(void (**)(uint64_t, uint64_t))(v125 + 192))(v124, v125);
  v127 = (__int128 *)v126;
  v128 = v276;
  v129 = v126;
  v130 = v278;
  v131 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v276 + 48))(v129, 1, v278);
  v132 = (uint64_t)v289;
  if (v131 == 1)
  {
    v133 = &qword_1010ED860;
    v134 = v127;
  }
  else
  {
    v138 = (uint64_t)v264;
    (*(void (**)(char *, __int128 *, uint64_t))(v128 + 32))(v264, v127, v130);
    sub_1008259D0(v138, (uint64_t)&v293);
    v139 = *((_QWORD *)&v294 + 1);
    if (*((_QWORD *)&v294 + 1))
    {
      v140 = v295;
      sub_10001AA44(&v293, *((uint64_t *)&v294 + 1));
      LODWORD(v267) = (*(uint64_t (**)(uint64_t, uint64_t))(v140 + 24))(v139, v140);
      (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v138, v130);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v293);
      goto LABEL_36;
    }
    (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v138, v130);
    v133 = (uint64_t *)&unk_101107010;
    v134 = &v293;
  }
  sub_100004048((uint64_t)v134, v133);
  LODWORD(v267) = 0;
LABEL_36:
  v141 = *((_QWORD *)v92 + 6);
  v142 = *((_QWORD *)v92 + 7);
  sub_10001AA44((_QWORD *)v92 + 3, v141);
  v143 = (*(uint64_t (**)(uint64_t, uint64_t))(v142 + 40))(v141, v142);
  v308 = (uint64_t)_swiftEmptyArrayStorage;
  v144 = *((_QWORD *)v92 + 6);
  v145 = *((_QWORD *)v92 + 7);
  sub_10001AA44((_QWORD *)v92 + 3, v144);
  v146 = (*(uint64_t (**)(uint64_t, uint64_t))(v145 + 64))(v144, v145);
  LODWORD(v266) = v143;
  if ((v146 & 1) != 0)
  {
    v147 = v285;
    v148 = (uint64_t)v271;
    if (qword_1010EA0A8 != -1)
      swift_once(&qword_1010EA0A8, sub_10098F82C);
    v149 = qword_1011B7A48;
    swift_retain();
    v150 = v147;
    OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v149, &type metadata for SecureLocationsConfig);
    swift_release();
    v303 = v292[10];
    v304 = v292[11];
    v305 = v292[12];
    v299 = v292[6];
    v300 = v292[7];
    v301 = v292[8];
    v302 = v292[9];
    v295 = v292[2];
    v296 = v292[3];
    v297 = v292[4];
    v298 = v292[5];
    v293 = v292[0];
    v294 = v292[1];
    sub_1003D09E0(&v293);
    if (BYTE8(v300) == 1)
    {
      sub_100030784((uint64_t)v288, (uint64_t)v292);
      v151 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
      v152 = (uint64_t)v259;
      v153 = v262;
      v154 = swift_dynamicCast(v259, v292, v151, v262, 6);
      v155 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v261 + 56);
      if ((v154 & 1) != 0)
      {
        v155(v152, 0, 1, v153);
        v156 = v152;
        v157 = v260;
        sub_1000126EC(v156, v260, type metadata accessor for OwnedBeaconRecord);
        v158 = v153;
        v159 = *(_QWORD *)v92;
        v160 = v157;
        v161 = *(_QWORD *)(v159 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
        v162 = type metadata accessor for BeaconKeyManager(0);
        OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v159, v161, &type metadata for () + 1, v162);
        v163 = sub_100DD1298(v160 + *(int *)(v158 + 20));
        v164 = v282;
        v285 = v150;
        if (v150)
        {
          swift_release();
          if (qword_1010EA620 != -1)
            swift_once(&qword_1010EA620, sub_100DC7BE8);
          sub_10001A9E8(v164, (uint64_t)qword_1011B8520);
          v165 = v254;
          sub_10005972C(v160, v254, type metadata accessor for OwnedBeaconRecord);
          v166 = v285;
          swift_errorRetain(v285);
          v167 = swift_errorRetain(v166);
          v168 = Logger.logObject.getter(v167);
          v169 = static os_log_type_t.error.getter(v168);
          if (os_log_type_enabled(v168, v169))
          {
            v170 = swift_slowAlloc(32, -1);
            v283 = (char *)swift_slowAlloc(64, -1);
            *(_QWORD *)&v292[0] = v283;
            *(_DWORD *)v170 = 141558531;
            v306 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, &v307, v170 + 4, v170 + 12);
            *(_WORD *)(v170 + 12) = 2081;
            v171 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v172 = dispatch thunk of CustomStringConvertible.description.getter(v278, v171);
            v306 = sub_100016940(v172, v173, (uint64_t *)v292);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, &v307, v170 + 14, v170 + 22);
            swift_bridgeObjectRelease();
            sub_1000126B0(v165, type metadata accessor for OwnedBeaconRecord);
            *(_WORD *)(v170 + 22) = 2080;
            swift_getErrorValue(v166, &v291, v290);
            v174 = Error.localizedDescription.getter(v290[1], v290[2]);
            v306 = sub_100016940(v174, v175, (uint64_t *)v292);
            v160 = v260;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, &v307, v170 + 24, v170 + 32);
            swift_bridgeObjectRelease();
            swift_errorRelease(v166);
            swift_errorRelease(v166);
            _os_log_impl((void *)&_mh_execute_header, v168, v169, "Failed to get ownedDeviceKeys for %{private,mask.hash}s error %s.", (uint8_t *)v170, 0x20u);
            v176 = v283;
            swift_arrayDestroy(v283, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v176, -1, -1);
            swift_slowDealloc(v170, -1, -1);

            swift_errorRelease(v166);
          }
          else
          {
            swift_errorRelease(v166);
            sub_1000126B0(v165, type metadata accessor for OwnedBeaconRecord);
            swift_errorRelease(v166);
            swift_errorRelease(v166);

          }
          v285 = 0;
        }
        else
        {
          v179 = v163;
          swift_release();
          swift_bridgeObjectRelease();
          v308 = (uint64_t)v179;
          if (qword_1010EA620 != -1)
            swift_once(&qword_1010EA620, sub_100DC7BE8);
          sub_10001A9E8(v282, (uint64_t)qword_1011B8520);
          v180 = v253;
          v181 = sub_10005972C(v160, v253, type metadata accessor for OwnedBeaconRecord);
          v182 = Logger.logObject.getter(v181);
          v183 = static os_log_type_t.default.getter(v182);
          if (os_log_type_enabled(v182, v183))
          {
            v184 = swift_slowAlloc(22, -1);
            v185 = swift_slowAlloc(32, -1);
            *(_QWORD *)&v292[0] = v185;
            *(_DWORD *)v184 = 141558275;
            v306 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, &v307, v184 + 4, v184 + 12);
            *(_WORD *)(v184 + 12) = 2081;
            v186 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v187 = dispatch thunk of CustomStringConvertible.description.getter(v278, v186);
            v306 = sub_100016940(v187, v188, (uint64_t *)v292);
            v160 = v260;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, &v307, v184 + 14, v184 + 22);
            swift_bridgeObjectRelease();
            sub_1000126B0(v180, type metadata accessor for OwnedBeaconRecord);
            _os_log_impl((void *)&_mh_execute_header, v182, v183, "Successfully fetched ownedDeviceKeys for %{private,mask.hash}s.", (uint8_t *)v184, 0x16u);
            swift_arrayDestroy(v185, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v185, -1, -1);
            swift_slowDealloc(v184, -1, -1);
          }
          else
          {
            sub_1000126B0(v180, type metadata accessor for OwnedBeaconRecord);
          }

        }
        v189 = v257;
        v190 = (uint64_t)v258;
        v191 = v256;
        sub_10005972C(v160, v256, type metadata accessor for OwnedBeaconRecord);
        v192 = *(unsigned __int8 *)(v261 + 80);
        v193 = (v192 + 16) & ~v192;
        v194 = swift_allocObject(&unk_101075B40, v193 + v189, v192 | 7);
        sub_1000126EC(v191, v194 + v193, type metadata accessor for OwnedBeaconRecord);
        v195 = sub_10001A9A8(&qword_1010FB270);
        unsafeFromAsyncTask<A>(_:)(v292, &unk_1010FB268, v194, v195);
        swift_release();
        v196 = *(char **)&v292[0];
        if (qword_1010EA620 != -1)
          swift_once(&qword_1010EA620, sub_100DC7BE8);
        sub_10001A9E8(v282, (uint64_t)qword_1011B8520);
        sub_10005972C(v160, v190, type metadata accessor for OwnedBeaconRecord);
        swift_bridgeObjectRetain(v196);
        v198 = Logger.logObject.getter(v197);
        v199 = static os_log_type_t.default.getter(v198);
        if (os_log_type_enabled(v198, v199))
        {
          v200 = v190;
          v201 = swift_slowAlloc(32, -1);
          v283 = (char *)swift_slowAlloc(32, -1);
          *(_QWORD *)&v292[0] = v283;
          *(_DWORD *)v201 = 134218499;
          v306 = *((_QWORD *)v196 + 2);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, &v307, v201 + 4, v201 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v201 + 12) = 2160;
          v306 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, &v307, v201 + 14, v201 + 22);
          *(_WORD *)(v201 + 22) = 2081;
          v202 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v203 = dispatch thunk of CustomStringConvertible.description.getter(v278, v202);
          v306 = sub_100016940(v203, v204, (uint64_t *)v292);
          v160 = v260;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v306, &v307, v201 + 24, v201 + 32);
          swift_bridgeObjectRelease();
          sub_1000126B0(v200, type metadata accessor for OwnedBeaconRecord);
          _os_log_impl((void *)&_mh_execute_header, v198, v199, "Found %ld own device keys for shared beacon %{private,mask.hash}s.", (uint8_t *)v201, 0x20u);
          v205 = v283;
          swift_arrayDestroy(v283, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v205, -1, -1);
          swift_slowDealloc(v201, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease();
          sub_1000126B0(v190, type metadata accessor for OwnedBeaconRecord);
        }

        v132 = (uint64_t)v289;
        v206 = *((_QWORD *)v196 + 2);
        if (v206)
        {
          *(_QWORD *)&v292[0] = _swiftEmptyArrayStorage;
          sub_10009B0EC(0, v206, 0);
          v207 = *(unsigned __int8 *)(v255 + 80);
          v265 = v196;
          v268 = *(char **)(v255 + 72);
          v208 = v274;
          sub_10005972C((uint64_t)&v196[(v207 + 32) & ~v207], v274, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
          __asm { BR              X10 }
        }
        swift_bridgeObjectRelease();
        v177 = (uint64_t)v270;
        v178 = (uint64_t)v275;
        sub_100304040((uint64_t)_swiftEmptyArrayStorage);
        sub_1000126B0(v160, type metadata accessor for OwnedBeaconRecord);
        v148 = (uint64_t)v271;
        goto LABEL_66;
      }
      v285 = v147;
      v155(v152, 1, 1, v153);
      sub_100004048(v152, (uint64_t *)&unk_1010F47C0);
    }
    else
    {
      v285 = v147;
    }
    v177 = (uint64_t)v270;
    v178 = (uint64_t)v275;
  }
  else
  {
    v177 = (uint64_t)v270;
    v148 = (uint64_t)v271;
    v178 = (uint64_t)v275;
  }
LABEL_66:
  v209 = (2 * v249) | 1;
  v210 = v288;
  v212 = v288[3];
  v211 = v288[4];
  sub_10001AA44(v288, v212);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v211 + 8) + 8) + 32))(v212);
  v213 = v252;
  v247(v252, v251, v277);
  v214 = (_QWORD *)v308;
  if ((v266 & 1) != 0)
    v215 = 256;
  else
    v215 = 0;
  v216 = v215 & 0xFFFFFF00 | v267;
  swift_bridgeObjectRetain(v132);
  sub_100AC33D4(v178, v213, v132, (uint64_t)v248, v250, v209, v272, v216, v177, 1, v214);
  v217 = type metadata accessor for LocationFetcher(0);
  v218 = v269;
  v219 = v282;
  (*(void (**)(char *, uint64_t, uint64_t))(v286 + 16))(v269, v287 + *(int *)(v217 + 32), v282);
  sub_100030784((uint64_t)v210, (uint64_t)&v293);
  v220 = sub_10005972C(v177, v148, type metadata accessor for FetchRequestBeacon);
  v221 = Logger.logObject.getter(v220);
  v222 = static os_log_type_t.default.getter(v221);
  if (os_log_type_enabled(v221, (os_log_type_t)v222))
  {
    LODWORD(v288) = v222;
    v223 = swift_slowAlloc(32, -1);
    v287 = swift_slowAlloc(64, -1);
    v306 = v287;
    *(_DWORD *)v223 = 141558531;
    *(_QWORD *)&v292[0] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v292, (char *)v292 + 8, v223 + 4, v223 + 12);
    *(_WORD *)(v223 + 12) = 2081;
    v224 = v275;
    v225 = *((_QWORD *)&v294 + 1);
    v226 = v295;
    sub_10001AA44(&v293, *((uint64_t *)&v294 + 1));
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v226 + 8) + 8) + 32))(v225);
    v227 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v228 = v278;
    v229 = dispatch thunk of CustomStringConvertible.description.getter(v278, v227);
    v231 = v230;
    v232 = v224;
    v233 = (uint64_t)v271;
    (*(void (**)(char *, uint64_t))(v276 + 8))(v232, v228);
    *(_QWORD *)&v292[0] = sub_100016940(v229, v231, &v306);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v292, (char *)v292 + 8, v223 + 14, v223 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v293);
    *(_WORD *)(v223 + 22) = 2082;
    v234 = v263;
    sub_10005972C(v233, v263, type metadata accessor for FetchRequestBeacon);
    v235 = objc_autoreleasePoolPush();
    v236 = v285;
    sub_100AC4E7C(v234, (unint64_t *)v292);
    v285 = v236;
    if (v236)
    {
      objc_autoreleasePoolPop(v235);
      __break(1u);
      JUMPOUT(0x100403B28);
    }
    objc_autoreleasePoolPop(v235);
    v238 = *((_QWORD *)&v292[0] + 1);
    v237 = *(_QWORD *)&v292[0];
    sub_1000126B0(v234, type metadata accessor for FetchRequestBeacon);
    *(_QWORD *)&v292[0] = sub_100016940(v237, v238, &v306);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v292, (char *)v292 + 8, v223 + 24, v223 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v233, type metadata accessor for FetchRequestBeacon);
    _os_log_impl((void *)&_mh_execute_header, v221, (os_log_type_t)v288, "Created fetch instruction for beacon %{private,mask.hash}s: %{public}s.", (uint8_t *)v223, 0x20u);
    v239 = v287;
    swift_arrayDestroy(v287, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v239, -1, -1);
    swift_slowDealloc(v223, -1, -1);
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v286 + 8))(v269, v282);
    v244((uint64_t)v251, v277);
    v177 = (uint64_t)v270;
  }
  else
  {

    sub_1000126B0(v148, type metadata accessor for FetchRequestBeacon);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v293);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v286 + 8))(v218, v219);
    v244((uint64_t)v251, v277);
  }
  v240 = v284;
  *(_QWORD *)v284 = v250;
  *(_BYTE *)(v240 + 8) = 0;
  v241 = v280;
  sub_1000126EC(v177, v280, type metadata accessor for FetchRequestBeacon);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v279 + 56))(v241, 0, 1, RequestBeacon);
}

uint64_t sub_100403B78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = a2;
  return swift_task_switch(sub_100403B90, 0, 0);
}

uint64_t sub_100403B90()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBD0 + dword_1010EBBD0);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBD4);
    *(_QWORD *)(v0 + 136) = v2;
    *v2 = v0;
    v2[1] = sub_100403C7C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100403C7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100403CD8, 0, 0);
}

uint64_t sub_100403CD8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 144))
  {
    v2 = *(_QWORD *)(v0 + 128);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = v2 + *(int *)(type metadata accessor for OwnedBeaconRecord(0) + 20);
    v4 = (_QWORD *)swift_task_alloc(dword_1010F19BC);
    *(_QWORD *)(v0 + 152) = v4;
    *v4 = v0;
    v4[1] = sub_100403D6C;
    return sub_10017B020(v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    **(_QWORD **)(v0 + 120) = _swiftEmptyArrayStorage;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

