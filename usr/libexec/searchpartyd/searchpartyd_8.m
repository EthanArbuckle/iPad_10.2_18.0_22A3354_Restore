_QWORD *sub_10049CB9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  BOOL v28;
  char *v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  int64_t v36;
  Swift::String v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  int64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  Class isa;
  id v78;
  id v79;
  Class v80;
  id v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100[4];
  _QWORD *v101;

  v4 = v2;
  v96 = type metadata accessor for TimeBasedKey(0);
  v7 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v9 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TimeBasedKeysCriteria(0);
  __chkstk_darwin(v10);
  v12 = (unint64_t)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v13 = v99;
  if (a2 == 2)
  {
    v95 = v10;
    v88 = v7;
    v20 = (char *)sub_100C1B860(v99);
    v21 = sub_100C1B874(v13);
  }
  else
  {
    if (a2 != 1)
    {
      swift_bridgeObjectRelease();
      if (qword_1010E9C30 == -1)
      {
LABEL_6:
        v14 = type metadata accessor for Logger(0);
        v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B6F60);
        v16 = Logger.logObject.getter(v15);
        v17 = static os_log_type_t.error.getter(v16);
        if (os_log_type_enabled(v16, v17))
        {
          v18 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v18 = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "_offlineAdvertisingKeys called for .invalid reason!", v18, 2u);
          swift_slowDealloc(v18, -1, -1);
        }

        return _swiftEmptyArrayStorage;
      }
LABEL_49:
      swift_once(&qword_1010E9C30, sub_10047F0AC);
      goto LABEL_6;
    }
    v95 = v10;
    v88 = v7;
    v20 = (char *)sub_100C1B838(v99);
    v21 = sub_100C1B84C(v13);
  }
  v22 = v21;
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(v4 + 280);
  v24 = *(_QWORD *)(v23 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v25 = type metadata accessor for BeaconKeyManager(0);
  v93 = v23;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v23, v24, &type metadata for () + 1, v25);
  v94 = type metadata accessor for OwnedBeaconRecord(0);
  v26 = (char *)sub_100DD8B78(a1 + *(int *)(v94 + 20));
  swift_release();
  v27 = &v20[(_QWORD)v26];
  if (__CFADD__(v26, v20))
  {
    __break(1u);
    goto LABEL_49;
  }
  v28 = __CFADD__(v27, v22);
  v29 = &v27[v22];
  if (v28)
  {
    __break(1u);
    goto LABEL_51;
  }
  v23 = (int64_t)v20;
  v20 = v29 - 1;
  if (!v29)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v20 >= v26)
  {
    v91 = v3;
    v92 = (_QWORD *)a1;
    if (qword_1010E9C30 == -1)
      goto LABEL_16;
    goto LABEL_53;
  }
LABEL_52:
  __break(1u);
LABEL_53:
  swift_once(&qword_1010E9C30, sub_10047F0AC);
LABEL_16:
  v30 = type metadata accessor for Logger(0);
  v89 = sub_10001A9E8(v30, (uint64_t)qword_1011B6F60);
  v31 = Logger.logObject.getter(v89);
  v32 = static os_log_type_t.info.getter(v31);
  if (os_log_type_enabled(v31, (os_log_type_t)v32))
  {
    v33 = (_QWORD *)v22;
    v22 = swift_slowAlloc(22, -1);
    v34 = (_QWORD *)swift_slowAlloc(32, -1);
    v101 = v34;
    *(_DWORD *)v22 = 134218242;
    v90 = v33;
    if (__CFADD__(v23, v33))
    {
      __break(1u);
      goto LABEL_55;
    }
    v99 = (uint64_t)v33 + v23;
    v87 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2080;
    v85 = v22 + 14;
    v97 = v20;
    v98 = v26;
    v86 = v32;
    v35 = (unint64_t)v20;
    v99 = 0;
    v100[0] = 0xE000000000000000;
    v36 = v23;
    _print_unlocked<A, B>(_:_:)(&v98, &v99, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v37._countAndFlagsBits = 3026478;
    v37._object = (void *)0xE300000000000000;
    String.append(_:)(v37);
    _print_unlocked<A, B>(_:_:)(&v97, &v99, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v99 = sub_100016940(v99, v100[0], (uint64_t *)&v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v85, v22 + 22);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v86, "Getting %llu keys in range: %s", (uint8_t *)v22, 0x16u);
    v38 = v87;
    swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    v22 = (uint64_t)v90;
  }
  else
  {

    v35 = (unint64_t)v20;
    v36 = v23;
  }
  *(_QWORD *)v12 = sub_100509474(v26, v35);
  swift_storeEnumTagMultiPayload(v12, v95, 1);
  v100[2] = v94;
  v100[3] = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)asc_100E57B60);
  v39 = sub_100018F08(&v99);
  sub_10005972C((uint64_t)v92, (uint64_t)v39, type metadata accessor for OwnedBeaconRecord);
  v40 = v91;
  sub_100834754((uint64_t)&v99, v12);
  v19 = v41;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v99);
  if (v40)
  {
    sub_1000126B0(v12, type metadata accessor for TimeBasedKeysCriteria);
    return (_QWORD *)v19;
  }
  v93 = v12;
  v94 = v36;
  v42 = sub_10047D29C(v19);
  swift_bridgeObjectRelease();
  v43 = v42[2];
  if (v43)
  {
    v90 = (_QWORD *)v22;
    v101 = _swiftEmptyArrayStorage;
    sub_10009A92C(0, v43, 0);
    v44 = *(unsigned __int8 *)(v88 + 80);
    v92 = v42;
    v95 = *(_QWORD *)(v88 + 72);
    sub_10005972C((uint64_t)v42 + ((v44 + 32) & ~v44), (uint64_t)v9, type metadata accessor for TimeBasedKey);
    v45 = &v9[*(int *)(v96 + 24)];
    v46 = *((_QWORD *)v45 + 2);
    v47 = *((_QWORD *)v45 + 3);
    sub_10001BBBC(v46, v47);
    sub_1007E7118(v46, v47);
    v49 = v48;
    sub_1007E3D28(v48, 0);
    v51 = v50;
    CCECCryptorRelease(v49);
    sub_10001BC14(v46, v47);
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  v33 = _swiftEmptyArrayStorage;
  if (v94 < 0)
  {
    __break(1u);
    JUMPOUT(0x10049D5D8);
  }
  v23 = sub_1002F7DF8(v94, (uint64_t)_swiftEmptyArrayStorage);
  v20 = v52;
  v32 = v53;
  v12 = v54;
  if ((v54 & 1) != 0)
  {
    v55 = type metadata accessor for __ContiguousArrayStorageBase(0);
    swift_unknownObjectRetain_n(v23, 2);
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    v56 = (_QWORD *)swift_dynamicCastClass(v23, v55);
    if (!v56)
    {
      swift_unknownObjectRelease(v23);
      v56 = _swiftEmptyArrayStorage;
    }
    v57 = v56[2];
    v34 = (_QWORD *)swift_release();
    if (__OFSUB__(v12 >> 1, v32))
      goto LABEL_56;
    v34 = (_QWORD *)v23;
    if (v57 != (v12 >> 1) - v32)
      goto LABEL_57;
    v20 = (char *)swift_dynamicCastClass(v23, v55);
    if (!v20)
    {
      swift_unknownObjectRelease(v23);
      v20 = (char *)_swiftEmptyArrayStorage;
    }
    goto LABEL_33;
  }
  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  while (1)
  {
    v20 = (char *)sub_100509304(v23, (uint64_t)v20, v32, v12);
LABEL_33:
    v34 = (_QWORD *)swift_unknownObjectRelease(v23);
    if ((v22 & 0x8000000000000000) == 0)
      break;
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    swift_unknownObjectRelease(v34);
  }
  v58 = sub_100626E44(v22, (uint64_t)v33);
  v60 = v59;
  v62 = v61;
  v64 = v63;
  if ((v63 & 1) != 0)
  {
    v65 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v66 = swift_unknownObjectRetain_n(v58, 2);
    v67 = (_QWORD *)swift_dynamicCastClass(v66, v65);
    if (!v67)
    {
      swift_unknownObjectRelease(v58);
      v67 = _swiftEmptyArrayStorage;
    }
    v68 = v67[2];
    v69 = swift_release();
    if (__OFSUB__(v64 >> 1, v62))
    {
      __break(1u);
    }
    else
    {
      v69 = v58;
      if (v68 == (v64 >> 1) - v62)
      {
        if (!swift_dynamicCastClass(v58, v65))
          swift_unknownObjectRelease(v58);
        goto LABEL_42;
      }
    }
    swift_unknownObjectRelease(v69);
  }
  sub_100509304(v58, v60, v62, v64);
LABEL_42:
  v70 = swift_unknownObjectRelease(v58);
  v71 = Logger.logObject.getter(v70);
  v72 = static os_log_type_t.info.getter(v71);
  if (os_log_type_enabled(v71, v72))
  {
    v73 = swift_slowAlloc(22, -1);
    *(_DWORD *)v73 = 134218240;
    v99 = v94;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v73 + 4, v73 + 12);
    *(_WORD *)(v73 + 12) = 2048;
    v99 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v73 + 14, v73 + 22);
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "Returning %llu shortInterval keys and %llu longInterval keys", (uint8_t *)v73, 0x16u);
    swift_slowDealloc(v73, -1, -1);
  }

  v74 = sub_10001A9A8(&qword_10111BE20);
  v75 = swift_allocObject(v74, 48, 7);
  *(_OWORD *)(v75 + 16) = xmmword_100E3F4C0;
  v76 = objc_allocWithZone((Class)SPOfflineAdvertisingKeys);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  v78 = objc_msgSend(v76, "initWithInterval:keys:", 15, isa);

  *(_QWORD *)(v75 + 32) = v78;
  v79 = objc_allocWithZone((Class)SPOfflineAdvertisingKeys);
  v80 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  v81 = objc_msgSend(v79, "initWithInterval:keys:", 1440, v80);

  *(_QWORD *)(v75 + 40) = v81;
  v99 = v75;
  specialized Array._endMutation()(v82);
  v19 = v99;
  sub_1000126B0(v93, type metadata accessor for TimeBasedKeysCriteria);
  return (_QWORD *)v19;
}

uint64_t sub_10049D8A4(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v8 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v8);
  if (result)
  {
    sub_10049CB9C(a4, a5);
    a2();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_10049DAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  __int128 v19[2];

  v9 = type metadata accessor for BeaconEstimatedLocation(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  sub_10005972C(a3, (uint64_t)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  sub_100030784(a4, (uint64_t)v19);
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = (v13 + 24) & ~v13;
  v15 = (v11 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = swift_allocObject(&unk_101079500, v15 + 41, v13 | 7);
  *(_QWORD *)(v16 + 16) = a1;
  sub_1000126EC((uint64_t)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v14, type metadata accessor for BeaconEstimatedLocation);
  sub_10000F9FC(v19, v16 + v15);
  *(_BYTE *)(v16 + v15 + 40) = a5;
  swift_retain();
  sub_100801BA0(a3, (uint64_t)sub_1004D2920, v16);
  return swift_release();
}

void sub_10049DC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  os_log_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  os_log_type_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  os_log_type_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  os_log_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD v144[3];
  uint64_t v145;
  uint64_t v146;

  v135 = a5;
  v141 = (char *)a4;
  v7 = type metadata accessor for UUID(0);
  v138 = *(_QWORD *)(v7 - 8);
  v139 = v7;
  __chkstk_darwin(v7);
  v137 = (char *)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = type metadata accessor for BeaconEstimatedLocation(0);
  v9 = __chkstk_darwin(v136);
  v133 = (uint64_t)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v132 = (os_log_t)((char *)&v130 - v12);
  v13 = __chkstk_darwin(v11);
  v134 = (uint64_t)&v130 - v14;
  v15 = __chkstk_darwin(v13);
  v140 = (uint64_t)&v130 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v130 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v130 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v130 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v130 - v26;
  v28 = sub_10001A9A8(&qword_1010F4A20);
  __chkstk_darwin(v28);
  v30 = (uint64_t *)((char *)&v130 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10000F9B8(a1, (uint64_t)v30, &qword_1010F4A20);
  if (swift_getEnumCaseMultiPayload(v30, v28) == 1)
  {
    v31 = *v30;
    v144[0] = v31;
    swift_errorRetain(v31);
    v32 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    if ((swift_dynamicCast(&v143, v144, v32, &type metadata for BeaconStore.BeaconStoreError, 6) & 1) != 0)
    {
      if (v143 == 8)
      {
        if (qword_1010E9F20 != -1)
          swift_once(&qword_1010E9F20, sub_100791C44);
        v33 = type metadata accessor for Logger(0);
        sub_10001A9E8(v33, (uint64_t)qword_1011B7648);
        v34 = v132;
        sub_10005972C(a3, (uint64_t)v132, type metadata accessor for BeaconEstimatedLocation);
        v35 = sub_100030784((uint64_t)v141, (uint64_t)v144);
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.default.getter(v36);
        v38 = v37;
        if (os_log_type_enabled(v36, v37))
        {
          v39 = swift_slowAlloc(42, -1);
          v40 = swift_slowAlloc(64, -1);
          v141 = (char *)v40;
          *(_DWORD *)v39 = 141558787;
          v142 = 1752392040;
          v143 = v40;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v39 + 4, v39 + 12);
          *(_WORD *)(v39 + 12) = 2081;
          LODWORD(v140) = v38;
          v41 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v42 = v139;
          v43 = dispatch thunk of CustomStringConvertible.description.getter(v139, v41);
          v142 = sub_100016940(v43, v44, &v143);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v39 + 14, v39 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0((uint64_t)v34, type metadata accessor for BeaconEstimatedLocation);
          *(_WORD *)(v39 + 22) = 2160;
          v142 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v39 + 24, v39 + 32);
          *(_WORD *)(v39 + 32) = 2081;
          v46 = v145;
          v45 = v146;
          sub_10001AA44(v144, v145);
          v47 = v137;
          (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v45 + 8) + 8) + 32))(v46);
          v48 = dispatch thunk of CustomStringConvertible.description.getter(v42, v41);
          v50 = v49;
          (*(void (**)(char *, uint64_t))(v138 + 8))(v47, v42);
          v142 = sub_100016940(v48, v50, &v143);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v39 + 34, v39 + 42);
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
          _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v140, "Skipped saving outdated LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s.", (uint8_t *)v39, 0x2Au);
          v51 = (char *)&type metadata for Any + 8;
          v52 = (uint64_t)v141;
          v53 = (uint64_t)v141;
          v54 = 2;
LABEL_16:
          swift_arrayDestroy(v53, v54, v51);
          swift_slowDealloc(v52, -1, -1);
          v108 = v39;
LABEL_23:
          swift_slowDealloc(v108, -1, -1);

          swift_errorRelease(v31);
          return;
        }
        swift_errorRelease(v31);
        sub_1000126B0((uint64_t)v34, type metadata accessor for BeaconEstimatedLocation);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
        goto LABEL_28;
      }
      if (qword_1010E9F20 != -1)
        swift_once(&qword_1010E9F20, sub_100791C44);
      v109 = type metadata accessor for Logger(0);
      sub_10001A9E8(v109, (uint64_t)qword_1011B7648);
      v110 = v133;
      sub_10005972C(a3, v133, type metadata accessor for BeaconEstimatedLocation);
      sub_100030784((uint64_t)v141, (uint64_t)v144);
      swift_errorRetain(v31);
      v111 = swift_errorRetain(v31);
      v36 = Logger.logObject.getter(v111);
      v112 = static os_log_type_t.error.getter(v36);
      v113 = v112;
      if (os_log_type_enabled(v36, v112))
      {
        v114 = swift_slowAlloc(52, -1);
        v115 = swift_slowAlloc(96, -1);
        v140 = v115;
        *(_DWORD *)v114 = 141559043;
        v142 = 1752392040;
        v143 = v115;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v114 + 4, v114 + 12);
        *(_WORD *)(v114 + 12) = 2081;
        v141 = (char *)v32;
        LODWORD(v136) = v113;
        v116 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v117 = v139;
        v118 = dispatch thunk of CustomStringConvertible.description.getter(v139, v116);
        v142 = sub_100016940(v118, v119, &v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v114 + 14, v114 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v110, type metadata accessor for BeaconEstimatedLocation);
        *(_WORD *)(v114 + 22) = 2160;
        v142 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v114 + 24, v114 + 32);
        *(_WORD *)(v114 + 32) = 2081;
        v121 = v145;
        v120 = v146;
        sub_10001AA44(v144, v145);
        v122 = v137;
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v120 + 8) + 8) + 32))(v121);
        v123 = dispatch thunk of CustomStringConvertible.description.getter(v117, v116);
        v125 = v124;
        (*(void (**)(char *, uint64_t))(v138 + 8))(v122, v117);
        v142 = sub_100016940(v123, v125, &v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v114 + 34, v114 + 42);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
        *(_WORD *)(v114 + 42) = 2082;
        v142 = v31;
        swift_errorRetain(v31);
        v126 = String.init<A>(describing:)(&v142, v141);
        v142 = sub_100016940(v126, v127, &v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v114 + 44, v114 + 52);
        swift_bridgeObjectRelease();
        swift_errorRelease(v31);
        swift_errorRelease(v31);
        _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v136, "Failed to save LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s: %{public}s.", (uint8_t *)v114, 0x34u);
        v128 = v140;
        swift_arrayDestroy(v140, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v128, -1, -1);
        v108 = v114;
        goto LABEL_23;
      }
      swift_errorRelease(v31);
      v129 = v110;
    }
    else
    {
      if (qword_1010E9F20 != -1)
        swift_once(&qword_1010E9F20, sub_100791C44);
      v89 = type metadata accessor for Logger(0);
      sub_10001A9E8(v89, (uint64_t)qword_1011B7648);
      v90 = v134;
      sub_10005972C(a3, v134, type metadata accessor for BeaconEstimatedLocation);
      sub_100030784((uint64_t)v141, (uint64_t)v144);
      swift_errorRetain(v31);
      v91 = swift_errorRetain(v31);
      v36 = Logger.logObject.getter(v91);
      v92 = static os_log_type_t.error.getter(v36);
      v93 = v92;
      if (os_log_type_enabled(v36, v92))
      {
        v94 = swift_slowAlloc(52, -1);
        v141 = (char *)v32;
        v39 = v94;
        v95 = swift_slowAlloc(96, -1);
        v140 = v95;
        *(_DWORD *)v39 = 141559043;
        v142 = 1752392040;
        v143 = v95;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v39 + 4, v39 + 12);
        *(_WORD *)(v39 + 12) = 2081;
        LODWORD(v136) = v93;
        v96 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v97 = v139;
        v98 = dispatch thunk of CustomStringConvertible.description.getter(v139, v96);
        v142 = sub_100016940(v98, v99, &v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v39 + 14, v39 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v90, type metadata accessor for BeaconEstimatedLocation);
        *(_WORD *)(v39 + 22) = 2160;
        v142 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v39 + 24, v39 + 32);
        *(_WORD *)(v39 + 32) = 2081;
        v101 = v145;
        v100 = v146;
        sub_10001AA44(v144, v145);
        v102 = v137;
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v100 + 8) + 8) + 32))(v101);
        v103 = dispatch thunk of CustomStringConvertible.description.getter(v97, v96);
        v105 = v104;
        (*(void (**)(char *, uint64_t))(v138 + 8))(v102, v97);
        v142 = sub_100016940(v103, v105, &v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v39 + 34, v39 + 42);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
        *(_WORD *)(v39 + 42) = 2082;
        v142 = v31;
        swift_errorRetain(v31);
        v106 = String.init<A>(describing:)(&v142, v141);
        v142 = sub_100016940(v106, v107, &v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v39 + 44, v39 + 52);
        swift_bridgeObjectRelease();
        swift_errorRelease(v31);
        swift_errorRelease(v31);
        _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v136, "Failed to save LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s: %{public}s.", (uint8_t *)v39, 0x34u);
        v51 = (char *)&type metadata for Any + 8;
        v52 = v140;
        v53 = v140;
        v54 = 3;
        goto LABEL_16;
      }
      swift_errorRelease(v31);
      v129 = v90;
    }
    sub_1000126B0(v129, type metadata accessor for BeaconEstimatedLocation);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
    swift_errorRelease(v31);
    swift_errorRelease(v31);
LABEL_28:

    return;
  }
  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  v55 = type metadata accessor for Logger(0);
  sub_10001A9E8(v55, (uint64_t)qword_1011B7648);
  sub_10005972C(a3, (uint64_t)v27, type metadata accessor for BeaconEstimatedLocation);
  sub_100030784((uint64_t)v141, (uint64_t)v144);
  v141 = v25;
  sub_10005972C(a3, (uint64_t)v25, type metadata accessor for BeaconEstimatedLocation);
  sub_10005972C(a3, (uint64_t)v22, type metadata accessor for BeaconEstimatedLocation);
  v56 = v19;
  sub_10005972C(a3, (uint64_t)v19, type metadata accessor for BeaconEstimatedLocation);
  v57 = v140;
  v58 = sub_10005972C(a3, v140, type metadata accessor for BeaconEstimatedLocation);
  v59 = Logger.logObject.getter(v58);
  v60 = static os_log_type_t.default.getter(v59);
  v61 = v60;
  if (os_log_type_enabled(v59, v60))
  {
    v62 = swift_slowAlloc(92, -1);
    LODWORD(v133) = v61;
    v63 = v62;
    v64 = swift_slowAlloc(128, -1);
    v134 = v64;
    *(_DWORD *)v63 = 141560067;
    v142 = 1752392040;
    v143 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v63 + 4, v63 + 12);
    *(_WORD *)(v63 + 12) = 2081;
    v130 = v22;
    v65 = (int *)v136;
    v132 = v59;
    v66 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v131 = (uint64_t)v56;
    v67 = v66;
    v68 = v139;
    v69 = dispatch thunk of CustomStringConvertible.description.getter(v139, v66);
    v142 = sub_100016940(v69, v70, &v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v63 + 14, v63 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v27, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v63 + 22) = 2160;
    v142 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v63 + 24, v63 + 32);
    *(_WORD *)(v63 + 32) = 2081;
    v72 = v145;
    v71 = v146;
    sub_10001AA44(v144, v145);
    v73 = v137;
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v71 + 8) + 8) + 32))(v72);
    v74 = dispatch thunk of CustomStringConvertible.description.getter(v68, v67);
    v76 = v75;
    (*(void (**)(char *, uint64_t))(v138 + 8))(v73, v68);
    v142 = sub_100016940(v74, v76, &v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v63 + 34, v63 + 42);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
    *(_WORD *)(v63 + 42) = 2082;
    v77 = sub_1002E3DF8(v135);
    v142 = sub_100016940(v77, v78, &v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v63 + 44, v63 + 52);
    swift_bridgeObjectRelease();
    *(_WORD *)(v63 + 52) = 2082;
    v79 = (uint64_t)v141;
    v80 = type metadata accessor for Date(0);
    v81 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v82 = dispatch thunk of CustomStringConvertible.description.getter(v80, v81);
    v142 = sub_100016940(v82, v83, &v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v63 + 54, v63 + 62);
    swift_bridgeObjectRelease();
    sub_1000126B0(v79, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v63 + 62) = 2049;
    v84 = (uint64_t)v130;
    v142 = *(_QWORD *)&v130[v65[7]];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v63 + 64, v63 + 72);
    sub_1000126B0(v84, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v63 + 72) = 2049;
    v85 = v131;
    v142 = *(_QWORD *)(v131 + v65[8]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v63 + 74, v63 + 82);
    sub_1000126B0(v85, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v63 + 82) = 2050;
    v86 = v140;
    v142 = *(_QWORD *)(v140 + v65[9]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v63 + 84, v63 + 92);
    sub_1000126B0(v86, type metadata accessor for BeaconEstimatedLocation);
    v87 = v132;
    _os_log_impl((void *)&_mh_execute_header, v132, (os_log_type_t)v133, "Saved LKL LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s, source: %{public}s, timestamp: %{public}s, lat: %{private}f, lon: %{private}f, acc: %{public}f.", (uint8_t *)v63, 0x5Cu);
    v88 = v134;
    swift_arrayDestroy(v134, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v88, -1, -1);
    swift_slowDealloc(v63, -1, -1);

  }
  else
  {
    sub_1000126B0((uint64_t)v27, type metadata accessor for BeaconEstimatedLocation);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
    sub_1000126B0((uint64_t)v141, type metadata accessor for BeaconEstimatedLocation);
    sub_1000126B0((uint64_t)v22, type metadata accessor for BeaconEstimatedLocation);
    sub_1000126B0((uint64_t)v19, type metadata accessor for BeaconEstimatedLocation);
    sub_1000126B0(v57, type metadata accessor for BeaconEstimatedLocation);

  }
  sub_100004048((uint64_t)v30, &qword_1010F4A20);
}

uint64_t sub_10049EC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD aBlock[7];
  _QWORD *v50;

  v42 = a7;
  v40 = a5;
  v41 = a6;
  v37 = a1;
  v38 = a4;
  v36 = a2;
  v45 = type metadata accessor for DispatchWorkItemFlags(0);
  v48 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v44 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v10 - 8);
  v47 = v10;
  __chkstk_darwin(v10);
  v39 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = *(_QWORD *)(a2 + 56);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_101079230, v21 + 17, v16 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v22 + v17, v15, v12);
  v23 = v37;
  *(_QWORD *)(v22 + v18) = v38;
  *(_QWORD *)(v22 + v19) = v36;
  *(_QWORD *)(v22 + v20) = v23;
  v24 = v22 + v21;
  v25 = v41;
  *(_QWORD *)v24 = v40;
  *(_QWORD *)(v24 + 8) = v25;
  *(_BYTE *)(v24 + 16) = v42;
  aBlock[4] = sub_1004D0460;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101079248;
  v26 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v27 = swift_retain();
  v28 = v39;
  static DispatchQoS.unspecified.getter(v27);
  v50 = _swiftEmptyArrayStorage;
  v29 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v31 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v33 = v44;
  v32 = v45;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v30, v31, v45, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v28, v33, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v33, v32);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v28, v47);
  return swift_release();
}

void sub_10049EEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t a6, int a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  char *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  void (*v88)(_QWORD);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100[2];

  v83 = a7;
  v94 = a4;
  v98 = a2;
  v85 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v85);
  v87 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v12);
  v86 = (uint64_t)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v14);
  v92 = (uint64_t)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for OwnedBeaconRecord(0);
  v91 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v84 = (uint64_t)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v17);
  v19 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for OwnedBeaconGroup(0);
  v95 = *(_QWORD *)(v20 - 8);
  v96 = v20;
  __chkstk_darwin(v20);
  v90 = (uint64_t)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for UUID(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v82 = (char *)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v27 = (char *)&v75 - v26;
  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  v28 = type metadata accessor for Logger(0);
  v29 = sub_10001A9E8(v28, (uint64_t)qword_1011B7648);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v97 = a1;
  v80 = v30;
  v31 = v30(v27, a1, v22);
  v81 = v29;
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter(v32);
  v34 = os_log_type_enabled(v32, v33);
  v89 = v22;
  v79 = v23;
  if (v34)
  {
    v35 = swift_slowAlloc(32, -1);
    v88 = a5;
    v36 = v35;
    v37 = swift_slowAlloc(32, -1);
    v77 = a3;
    v76 = v37;
    *(_DWORD *)v36 = 141558531;
    v99 = 1752392040;
    v100[0] = v37;
    v78 = a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v36 + 4, v36 + 12);
    *(_WORD *)(v36 + 12) = 2081;
    v38 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v39 = dispatch thunk of CustomStringConvertible.description.getter(v22, v38);
    v99 = sub_100016940(v39, v40, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v36 + 14, v36 + 22);
    swift_bridgeObjectRelease();
    v41 = *(void (**)(char *, uint64_t))(v23 + 8);
    v41(v27, v22);
    *(_WORD *)(v36 + 22) = 2048;
    v42 = v98;
    v99 = v98;
    a6 = v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v36 + 24, v36 + 32);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "createDuplicateBeacons uuid: %{private,mask.hash}s count:%ld", (uint8_t *)v36, 0x20u);
    v43 = v76;
    swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
    a3 = v77;
    swift_slowDealloc(v43, -1, -1);
    v44 = v36;
    a5 = v88;
    swift_slowDealloc(v44, -1, -1);

  }
  else
  {
    v41 = *(void (**)(char *, uint64_t))(v23 + 8);
    v41(v27, v22);

    v42 = v98;
  }
  v45 = *(_QWORD *)(a3 + 280);
  v46 = v97;
  sub_10081EDA8(v97, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v19, 1, v96) != 1)
  {
    v61 = v90;
    sub_1000126EC((uint64_t)v19, v90, type metadata accessor for OwnedBeaconGroup);
    v62 = (_QWORD *)swift_allocObject(&unk_1010792A8, 40, 7);
    v62[2] = v94;
    v62[3] = a5;
    v62[4] = a6;
    swift_retain();
    swift_retain();
    sub_10049F774(v61, v42, (uint64_t)sub_1004D64E4, (uint64_t)v62);
    swift_release();
    v63 = v61;
    v64 = type metadata accessor for OwnedBeaconGroup;
LABEL_17:
    sub_1000126B0(v63, v64);
    return;
  }
  sub_100004048((uint64_t)v19, (uint64_t *)&unk_1010FF7F0);
  v47 = v92;
  sub_10080B950(v46, v92);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v47, 1, v93) != 1)
  {
    v65 = v84;
    sub_1000126EC(v47, v84, type metadata accessor for OwnedBeaconRecord);
    v66 = v86;
    if ((v83 & 1) != 0)
      v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56))(v86, 1, 1, v89);
    else
      v67 = sub_10000F9B8(v65 + *(int *)(v93 + 28), v86, &qword_1010ED860);
    __chkstk_darwin(v67);
    *(&v75 - 2) = v45;
    *(&v75 - 1) = v46;
    v73 = (uint64_t)v87;
    QueueSynchronizer.conditionalSync<A>(_:)(sub_10029826C);
    v74 = (_QWORD *)swift_allocObject(&unk_101079280, 40, 7);
    v74[2] = v94;
    v74[3] = a5;
    v74[4] = a6;
    swift_retain();
    swift_retain();
    sub_1004A0390(v65, v73, v66, v42, (uint64_t)sub_1004D04D4, (uint64_t)v74);
    swift_release();
    sub_100004048(v73, (uint64_t *)&unk_101105880);
    sub_100004048(v66, &qword_1010ED860);
    v64 = type metadata accessor for OwnedBeaconRecord;
    v63 = v65;
    goto LABEL_17;
  }
  sub_100004048(v47, (uint64_t *)&unk_1010F47C0);
  v48 = v82;
  v49 = v89;
  v50 = v80(v82, v46, v89);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.error.getter(v51);
  if (os_log_type_enabled(v51, v52))
  {
    v53 = swift_slowAlloc(22, -1);
    v88 = a5;
    v54 = v53;
    v55 = swift_slowAlloc(32, -1);
    v98 = v55;
    *(_DWORD *)v54 = 141558275;
    v99 = 1752392040;
    v100[0] = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v54 + 4, v54 + 12);
    *(_WORD *)(v54 + 12) = 2081;
    v56 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v57 = dispatch thunk of CustomStringConvertible.description.getter(v49, v56);
    v99 = sub_100016940(v57, v58, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v54 + 14, v54 + 22);
    swift_bridgeObjectRelease();
    v41(v48, v49);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "No beaconGroup or beacon found for %{private,mask.hash}s", (uint8_t *)v54, 0x16u);
    v59 = v98;
    swift_arrayDestroy(v98, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1, -1);
    v60 = v54;
    a5 = v88;
    swift_slowDealloc(v60, -1, -1);
  }
  else
  {
    v41(v48, v49);
  }

  type metadata accessor for SPOwnerSessionError(0);
  v69 = v68;
  v99 = 2;
  v70 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v71 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
  _BridgedStoredNSError.init(_:userInfo:)(v100, &v99, v70, v69, v71);
  v72 = (void *)v100[0];
  a5(v100[0]);

}

void sub_10049F774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  void (*v32)(_QWORD);
  Class isa;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void **v42;
  dispatch_group_t v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  dispatch_group_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  id v85;
  uint64_t v86;
  void *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  id v93;
  dispatch_group_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  void (*v123)(_QWORD, _QWORD);
  id v124;
  void (*v125)(_QWORD *, _QWORD, uint64_t);
  unsigned int v126;
  _QWORD *v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  void **v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(char *, uint64_t);
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  dispatch_group_t v146;
  void **aBlock;
  uint64_t v148;
  uint64_t (*v149)(uint64_t);
  void *v150;
  uint64_t (*v151)();
  char *v152;
  uint64_t v153;

  v5 = v4;
  v117 = a4;
  v116 = a3;
  v130 = a1;
  v115 = type metadata accessor for DispatchWorkItemFlags(0);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v113 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for DispatchQoS(0);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v110 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OwnedBeaconGroup(0);
  v109 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v108 = v10;
  v107 = (uint64_t)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v11);
  v106 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v13);
  v100 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for BeaconNamingRecord(0);
  v135 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v139 = (char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_10001A9A8(&qword_1010ED3F8);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v21 = (char *)&v100 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for UUID(0);
  v22 = *(_QWORD *)(v145 - 8);
  v23 = __chkstk_darwin(v145);
  v105 = (char *)&v100 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v100 - v25;
  v27 = type metadata accessor for DispatchPredicate(0);
  v146 = *(dispatch_group_t *)(v27 - 8);
  __chkstk_darwin(v27);
  v29 = (char **)((char *)&v100 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = *(void **)(v5 + 56);
  *v29 = v30;
  v32 = *(void (**)(_QWORD))(v31 + 104);
  v126 = enum case for DispatchPredicate.onQueue(_:);
  v125 = (void (*)(_QWORD *, _QWORD, uint64_t))v32;
  v32(v29);
  v124 = v30;
  LOBYTE(v30) = _dispatchPreconditionTest(_:)(v29);
  isa = v146[1].isa;
  v127 = v29;
  v128 = v27;
  v123 = (void (*)(_QWORD, _QWORD))isa;
  ((void (*)(_QWORD *, uint64_t))isa)(v29, v27);
  if ((v30 & 1) == 0)
    goto LABEL_21;
  v34 = swift_allocObject(&unk_1010792D0, 24, 7);
  *(_QWORD *)(v34 + 16) = 0;
  v35 = dispatch_group_create();
  v118 = v35;
  if (a2 < 0)
  {
LABEL_22:
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v36 = 0;
      v132 = 0;
      v103 = v142 + 7;
      v140 = v5;
      v104 = a2;
      v134 = v15;
      v133 = v19;
      v138 = v21;
      v141 = v26;
      v143 = v22;
      v144 = v34;
      do
      {
        if (v36 == a2)
        {
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
        v131 = v36;
        UUID.init()(v35);
        v44 = swift_allocObject(&unk_1010792F8, 24, 7);
        *(_QWORD *)(v44 + 16) = _swiftEmptyDictionarySingleton;
        v146 = dispatch_group_create();
        v45 = v127;
        v46 = v124;
        *v127 = v124;
        v47 = v128;
        v125(v45, v126, v128);
        v129 = v46;
        LOBYTE(v46) = _dispatchPreconditionTest(_:)(v45);
        v123(v45, v47);
        if ((v46 & 1) == 0)
          goto LABEL_20;
        sub_10036AC6C();
        v49 = v48;
        swift_retain();
        v50 = v132;
        sub_1004BC0C0(v49, v5);
        v52 = v51;
        swift_release();
        v53 = *(_QWORD *)(v52 + 16);
        v54 = *(_QWORD *)(v49 + 16);
        swift_bridgeObjectRelease();
        if (v53 == v54)
        {
          swift_retain();
          v55 = sub_1004BD488(v52, v5);
          v43 = v146;
          if (!v50)
          {
            v56 = v55;
            v142 = v44;
            v132 = 0;
            swift_bridgeObjectRelease();
            swift_release();
            v57 = v22;
            v58 = v56[2];
            v59 = (uint64_t)v106;
            if (v58)
            {
              v137 = &v138[*(int *)(v102 + 48)];
              v60 = v101;
              v61 = (uint64_t)v56
                  + ((*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80));
              v122 = v56;
              swift_bridgeObjectRetain(v56);
              v136 = *(void (**)(char *, uint64_t))(v60 + 72);
              v62 = (uint64_t)v100;
              v63 = (uint64_t)v139;
              do
              {
                v64 = (uint64_t)v138;
                sub_10000F9B8(v61, (uint64_t)v138, &qword_1010ED3F8);
                v65 = (uint64_t)v133;
                sub_1000126EC(v64, (uint64_t)v133, type metadata accessor for OwnedBeaconRecord);
                sub_1000126EC((uint64_t)v137, v63, type metadata accessor for BeaconNamingRecord);
                v66 = v146;
                dispatch_group_enter(v146);
                sub_10005972C(v63, v62, type metadata accessor for BeaconNamingRecord);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v135 + 56))(v62, 0, 1, v134);
                v67 = v143;
                v68 = v145;
                (*(void (**)(uint64_t, char *, uint64_t))(v143 + 16))(v59, v141, v145);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v67 + 56))(v59, 0, 1, v68);
                v69 = (_QWORD *)swift_allocObject(&unk_101079320, 48, 7);
                v70 = v140;
                v69[2] = v66;
                v69[3] = v70;
                v71 = v144;
                v69[4] = v142;
                v69[5] = v71;
                swift_retain();
                v72 = v66;
                swift_retain();
                swift_retain();
                sub_1004A1320(v65, v62, v59, (uint64_t)sub_1004D055C, (uint64_t)v69);
                v63 = (uint64_t)v139;
                swift_release();
                sub_100004048(v59, &qword_1010ED860);
                sub_100004048(v62, (uint64_t *)&unk_101105880);
                sub_1000126B0(v63, type metadata accessor for BeaconNamingRecord);
                sub_1000126B0(v65, type metadata accessor for OwnedBeaconRecord);
                v61 += (uint64_t)v136;
                --v58;
              }
              while (v58);
              v56 = v122;
              swift_bridgeObjectRelease();
              v57 = v143;
              v26 = v141;
            }
            v73 = v107;
            sub_10005972C(v130, v107, type metadata accessor for OwnedBeaconGroup);
            v74 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
            v75 = v105;
            v76 = v145;
            v74(v105, v26, v145);
            v77 = *(unsigned __int8 *)(v109 + 80);
            v78 = (v77 + 40) & ~v77;
            v79 = *(unsigned __int8 *)(v143 + 80);
            v80 = (v108 + v79 + v78) & ~v79;
            v81 = v56;
            v82 = (v103 + v80) & 0xFFFFFFFFFFFFFFF8;
            v83 = (v82 + 15) & 0xFFFFFFFFFFFFFFF8;
            v84 = (char *)swift_allocObject(&unk_101079348, v83 + 8, v77 | v79 | 7);
            *((_QWORD *)v84 + 2) = v142;
            *((_QWORD *)v84 + 3) = v81;
            v85 = v118;
            *((_QWORD *)v84 + 4) = v118;
            sub_1000126EC(v73, (uint64_t)&v84[v78], type metadata accessor for OwnedBeaconGroup);
            (*(void (**)(char *, char *, uint64_t))(v143 + 32))(&v84[v80], v75, v76);
            v5 = v140;
            *(_QWORD *)&v84[v82] = v140;
            v86 = v144;
            *(_QWORD *)&v84[v83] = v144;
            v151 = sub_1004D06B0;
            v152 = v84;
            aBlock = _NSConcreteStackBlock;
            v148 = 1107296256;
            v149 = sub_100016FB8;
            v150 = &unk_101079360;
            v87 = _Block_copy(&aBlock);
            swift_retain();
            swift_retain();
            swift_retain();
            v137 = (char *)v85;
            v88 = v110;
            static DispatchQoS.unspecified.getter(v137);
            v153 = (uint64_t)_swiftEmptyArrayStorage;
            v89 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            v120 = v89;
            v90 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
            v119 = v90;
            v121 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
            v91 = v113;
            v92 = v115;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v153, v90, v121, v115, v89);
            v93 = v129;
            v94 = v146;
            OS_dispatch_group.notify(qos:flags:queue:execute:)(v88, v91, v129, v87);
            _Block_release(v87);
            v136 = *(void (**)(char *, uint64_t))(v114 + 8);
            v136(v91, v92);
            v122 = *(_QWORD **)(v111 + 8);
            v95 = v112;
            ((void (*)(char *, uint64_t))v122)(v88, v112);
            swift_release();
            v96 = (char *)swift_allocObject(&unk_101079398, 48, 7);
            v97 = v116;
            *((_QWORD *)v96 + 2) = v86;
            *((_QWORD *)v96 + 3) = v97;
            *((_QWORD *)v96 + 4) = v117;
            *((_QWORD *)v96 + 5) = v5;
            v151 = sub_1004D073C;
            v152 = v96;
            aBlock = _NSConcreteStackBlock;
            v148 = 1107296256;
            v149 = sub_100016FB8;
            v150 = &unk_1010793B0;
            v98 = _Block_copy(&aBlock);
            swift_retain();
            swift_retain();
            v99 = swift_retain();
            static DispatchQoS.unspecified.getter(v99);
            v153 = (uint64_t)_swiftEmptyArrayStorage;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v153, v119, v121, v92, v120);
            OS_dispatch_group.notify(qos:flags:queue:execute:)(v88, v91, v93, v98);
            _Block_release(v98);

            v136(v91, v92);
            ((void (*)(char *, uint64_t))v122)(v88, v95);
            v22 = v143;
            v26 = v141;
            (*(void (**)(char *, uint64_t))(v143 + 8))(v141, v145);
            swift_release();
            v35 = (void *)swift_release();
            a2 = v104;
            goto LABEL_7;
          }
          swift_bridgeObjectRelease();
          swift_release();
          v42 = v50;
          v132 = 0;
        }
        else
        {
          swift_bridgeObjectRelease();
          type metadata accessor for SPOwnerSessionError(0);
          v38 = v37;
          v153 = 2;
          v39 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
          v40 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
          v41 = _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v153, v39, v38, v40);
          v42 = aBlock;
          swift_willThrow(v41);
          v132 = 0;
          v43 = v146;
        }
        (*(void (**)(char *, uint64_t))(v22 + 8))(v26, v145);

        swift_errorRelease(v42);
        v35 = (void *)swift_release();
LABEL_7:
        v36 = v131 + 1;
      }
      while (v131 + 1 != a2);
    }
    swift_release();

  }
}

dispatch_group_t sub_1004A0390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  dispatch_group_t result;
  uint64_t v21;
  NSObject *i;
  uint64_t v23;
  NSObject *v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD aBlock[6];

  v39 = a6;
  v37 = a5;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v43 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v41 = *(_QWORD *)(v13 - 8);
  v42 = v13;
  __chkstk_darwin(v13);
  v40 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)(v6 + 56);
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  v38 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  result = (dispatch_group_t)(*(uint64_t (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  v36 = v11;
  v21 = swift_allocObject(&unk_1010792D0, 24, 7);
  *(_QWORD *)(v21 + 16) = 0;
  result = dispatch_group_create();
  if (a4 < 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  for (i = result; a4; --a4)
  {
    dispatch_group_enter(i);
    v23 = swift_allocObject(&unk_101079488, 32, 7);
    *(_QWORD *)(v23 + 16) = i;
    *(_QWORD *)(v23 + 24) = v21;
    v24 = i;
    swift_retain();
    sub_1004A1320(a1, a2, a3, (uint64_t)sub_1004D2794, v23);
    swift_release();
  }
  v25 = (_QWORD *)swift_allocObject(&unk_1010794B0, 48, 7);
  v26 = v37;
  v25[2] = v21;
  v25[3] = v26;
  v25[4] = v39;
  v25[5] = v6;
  aBlock[4] = sub_1004D073C;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010794C8;
  v27 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v28 = swift_retain();
  v29 = v40;
  static DispatchQoS.unspecified.getter(v28);
  v45 = _swiftEmptyArrayStorage;
  v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v33 = v43;
  v34 = v31;
  v35 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v34, v32, v36, v30);
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v29, v33, v38, v27);
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v33, v35);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v42);
  swift_release();
  return (dispatch_group_t)swift_release();
}

uint64_t sub_1004A06EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  *(_QWORD *)(v8 + 144) = a8;
  *(_QWORD *)(v8 + 152) = v14;
  *(_QWORD *)(v8 + 128) = a6;
  *(_QWORD *)(v8 + 136) = a7;
  *(_BYTE *)(v8 + 272) = a5;
  *(_QWORD *)(v8 + 120) = a4;
  v9 = type metadata accessor for UUID(0);
  *(_QWORD *)(v8 + 160) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 168) = v10;
  *(_QWORD *)(v8 + 176) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010EF7C0);
  *(_QWORD *)(v8 + 184) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 192) = v12;
  *(_QWORD *)(v8 + 200) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004A0788, 0, 0);
}

uint64_t sub_1004A0788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC18 + dword_1010EBC18);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBC1C);
    *(_QWORD *)(v0 + 208) = v3;
    *v3 = v0;
    v3[1] = sub_1004A0888;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004A0888(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004A08E4, 0, 0);
}

uint64_t sub_1004A08E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void (*v6)(uint64_t);
  uint64_t v7;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 216))
  {
    v2 = *(unsigned __int8 *)(v0 + 272);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    __asm { BR              X9 }
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  v3 = sub_100033220();
  v4 = swift_allocError(&type metadata for DaemonError, v3, 0, 0);
  *v5 = 0xD000000000000014;
  v5[1] = 0x8000000100ED7130;
  swift_willThrow(v4);
  v6 = *(void (**)(uint64_t))(v0 + 144);
  swift_errorRetain(v4);
  v6(v4);
  swift_errorRelease(v4);
  swift_errorRelease(v4);
  v7 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004A09FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[22];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[21] + 16))(v1, v0[16], v0[20]);
  v2 = type metadata accessor for Peripheral(0);
  Identifier.init(_:)(v1, v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10110F7A4);
  v0[28] = v3;
  *v3 = v0;
  v3[1] = sub_1004A0CB4;
  return sub_1009B0AB0(v0[25], v0[17]);
}

uint64_t sub_1004A0A70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[22];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[21] + 16))(v1, v0[16], v0[20]);
  v2 = type metadata accessor for Peripheral(0);
  Identifier.init(_:)(v1, v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10110F8F4);
  v0[29] = v3;
  *v3 = v0;
  v3[1] = sub_1004A0D28;
  return sub_1009B0EAC(v0[25], v0[17]);
}

uint64_t sub_1004A0AE4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[22];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[21] + 16))(v1, v0[16], v0[20]);
  v2 = type metadata accessor for Peripheral(0);
  Identifier.init(_:)(v1, v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10110F8FC);
  v0[30] = v3;
  *v3 = v0;
  v3[1] = sub_1004A0D9C;
  return sub_1009B1230(v0[25], v0[17]);
}

uint64_t sub_1004A0B58()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[22];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[21] + 16))(v1, v0[16], v0[20]);
  v2 = type metadata accessor for Peripheral(0);
  Identifier.init(_:)(v1, v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10110F904);
  v0[31] = v3;
  *v3 = v0;
  v3[1] = sub_1004A0E10;
  return sub_1009B1690(v0[25], v0[17]);
}

uint64_t sub_1004A0BCC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[22];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[21] + 16))(v1, v0[16], v0[20]);
  v2 = type metadata accessor for Peripheral(0);
  Identifier.init(_:)(v1, v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10110F8E4);
  v0[32] = v3;
  *v3 = v0;
  v3[1] = sub_1004A0ED8;
  return sub_1009B1A14(v0[25], v0[17]);
}

uint64_t sub_1004A0C40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[22];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[21] + 16))(v1, v0[16], v0[20]);
  v2 = type metadata accessor for Peripheral(0);
  Identifier.init(_:)(v1, v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10110F8EC);
  v0[33] = v3;
  *v3 = v0;
  v3[1] = sub_1004A0F4C;
  return sub_1009B2BB4(v0[25], v0[17]);
}

uint64_t sub_1004A0CB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1004D64E0, 0, 0);
}

uint64_t sub_1004A0D28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 232));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1004D64E0, 0, 0);
}

uint64_t sub_1004A0D9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 240));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1004D64E0, 0, 0);
}

uint64_t sub_1004A0E10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 248));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1004A0E84, 0, 0);
}

uint64_t sub_1004A0E84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 216);
  (*(void (**)(_QWORD))(v0 + 144))(0);
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004A0ED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1004D64E0, 0, 0);
}

uint64_t sub_1004A0F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 264));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1004D64E0, 0, 0);
}

void sub_1004A0FC0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  _QWORD v41[3];

  v9 = sub_10001A9A8(&qword_1010EF198);
  __chkstk_darwin(v9);
  v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v12);
  v14 = (_QWORD *)((char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v15);
  v17 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F9B8(a1, (uint64_t)v14, (uint64_t *)&unk_101108050);
  if (swift_getEnumCaseMultiPayload(v14, v12) == 1)
  {
    v18 = *v14;
    v41[0] = *v14;
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    swift_willThrowTypedImpl(v41, v19, &protocol self-conformance witness table for Error);
  }
  else
  {
    sub_1000126EC((uint64_t)v14, (uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
    v20 = sub_1004D24AC((uint64_t)v17);
    if (v21 >> 60 != 15)
    {
      v28 = v20;
      v29 = v21;
      v39[0] = a4 + 16;
      v30 = (int *)sub_10001A9A8(&qword_1010F5DC0);
      v31 = &v11[v30[12]];
      v32 = v30[16];
      v33 = &v11[v30[20]];
      v34 = &v11[v30[24]];
      v35 = &v17[*(int *)(v15 + 20)];
      v36 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v11, v35, v36);
      v37 = type metadata accessor for MACAddress(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v31, 1, 1, v37);
      *(_OWORD *)&v11[v32] = xmmword_100E22B20;
      *(_QWORD *)v33 = 0;
      v33[8] = 1;
      *(_WORD *)v34 = 256;
      v34[2] = 3;
      v38 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
      swift_storeEnumTagMultiPayload(v11, v38, 1);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v11, 0, 1, v38);
      swift_beginAccess(v39[0], v41, 33, 0);
      sub_10001BBBC(v28, v29);
      sub_1000FE790((uint64_t)v11, v28, v29);
      swift_endAccess(v41);
      sub_10001EF3C(v28, v29);
      sub_1000126B0((uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
      goto LABEL_7;
    }
    type metadata accessor for SPOwnerSessionError(0);
    v23 = v22;
    v40 = 2;
    v24 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v25 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v26 = _BridgedStoredNSError.init(_:userInfo:)(v41, &v40, v24, v23, v25);
    v18 = v41[0];
    swift_willThrow(v26);
    sub_1000126B0((uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
  }
  swift_beginAccess(a5 + 16, v41, 1, 0);
  v27 = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v18;
  swift_errorRelease(v27);
LABEL_7:
  dispatch_group_leave(a2);
}

uint64_t sub_1004A1320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  id v28;
  uint64_t result;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  _OWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  NSObject *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t, double);
  uint64_t v81;
  char *v82;
  id v83;
  _OWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD aBlock[7];

  v92 = a4;
  v93 = a5;
  v86 = a3;
  v90 = a2;
  v87 = a1;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v98 = *(_QWORD *)(v6 - 8);
  v99 = v6;
  __chkstk_darwin(v6);
  v97 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v95 = *(_QWORD *)(v8 - 8);
  v96 = v8;
  __chkstk_darwin(v8);
  v94 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v10);
  v89 = (uint64_t)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for BeaconNamingRecord(0);
  v88 = *(_QWORD *)(v100 - 8);
  v12 = __chkstk_darwin(v100);
  v82 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v81 = (uint64_t)&v79 - v14;
  v102 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v101 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for OwnedBeaconRecord(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v20 = __chkstk_darwin(v17);
  v85 = (uint64_t)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v22 = (_OWORD *)((char *)&v79 - v21);
  v23 = type metadata accessor for DispatchPredicate(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (uint64_t *)((char *)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v91 = v5;
  v27 = *(void **)(v5 + 56);
  *v26 = v27;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v24 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v23);
  v28 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)(v26);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v24 + 8))(v26, v23);
  if ((v27 & 1) != 0)
  {
    v83 = v28;
    v30 = dispatch_group_create();
    v31 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
    v32 = v15;
    v33 = swift_allocBox(v31);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v34, 1, 1, v17);
    v35 = v18;
    v36 = swift_allocObject(&unk_1010792D0, 24, 7);
    *(_QWORD *)(v36 + 16) = 0;
    v37 = v87;
    v38 = sub_1004A2224(v87, v86, v22);
    v39 = (char *)v22 + *(int *)(v17 + 20);
    v86 = v32;
    v80 = *(void (**)(char *, char *, uint64_t, double))(v32 + 16);
    v80(v101, v39, v102, v38);
    dispatch_group_enter(v30);
    v40 = *(_QWORD *)(v91 + 280);
    v41 = v85;
    sub_10005972C(v37, v85, type metadata accessor for OwnedBeaconRecord);
    v42 = *(unsigned __int8 *)(v35 + 80);
    v43 = (v42 + 24) & ~v42;
    v44 = (v19 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
    v45 = (v44 + 15) & 0xFFFFFFFFFFFFFFF8;
    v46 = swift_allocObject(&unk_101079410, v45 + 8, v42 | 7);
    *(_QWORD *)(v46 + 16) = v30;
    sub_1000126EC(v41, v46 + v43, type metadata accessor for OwnedBeaconRecord);
    *(_QWORD *)(v46 + v44) = v33;
    *(_QWORD *)(v46 + v45) = v36;
    v47 = v30;
    v48 = v33;
    swift_retain();
    swift_retain();
    sub_100804FB8((uint64_t)v22, 0, (uint64_t)sub_1004D0B68, v46);
    swift_release();
    v49 = v89;
    sub_10000F9B8(v90, v89, (uint64_t *)&unk_101105880);
    v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v49, 1, v100);
    v51 = v101;
    v84 = v22;
    if (v50 == 1)
    {
      sub_100004048(v49, (uint64_t *)&unk_101105880);
    }
    else
    {
      v52 = v81;
      v53 = sub_1000126EC(v49, v81, type metadata accessor for BeaconNamingRecord);
      v54 = (int *)v100;
      v55 = v82;
      UUID.init()(v53);
      ((void (*)(char *, char *, uint64_t))v80)((char *)v55 + v54[6], v51, v102);
      v56 = v54[7];
      v57 = *(_QWORD *)(v52 + v56);
      v58 = (uint64_t *)(v52 + v54[8]);
      v59 = *v58;
      v60 = v58[1];
      v61 = (uint64_t *)(v52 + v54[9]);
      v63 = *v61;
      v62 = v61[1];
      *v55 = xmmword_100E22FC0;
      *(_QWORD *)((char *)v55 + v56) = v57;
      v64 = (_QWORD *)((char *)v55 + v54[8]);
      *v64 = v59;
      v64[1] = v60;
      v65 = (_QWORD *)((char *)v55 + v54[9]);
      *v65 = v63;
      v65[1] = v62;
      swift_bridgeObjectRetain(v62);
      swift_bridgeObjectRetain(v60);
      dispatch_group_enter(v47);
      v66 = v47;
      swift_retain();
      sub_10086AC90((uint64_t)v55, 0, v40, v66, v36);

      swift_release();
      sub_1000126B0((uint64_t)v55, type metadata accessor for BeaconNamingRecord);
      sub_1000126B0(v52, type metadata accessor for BeaconNamingRecord);
    }
    v67 = (_QWORD *)swift_allocObject(&unk_101079438, 48, 7);
    v68 = v92;
    v69 = v93;
    v67[2] = v48;
    v67[3] = v68;
    v67[4] = v69;
    v67[5] = v36;
    aBlock[4] = sub_1004D0BCC;
    aBlock[5] = v67;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101079450;
    v70 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    v71 = swift_retain();
    v72 = v94;
    static DispatchQoS.unspecified.getter(v71);
    v103 = _swiftEmptyArrayStorage;
    v73 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v74 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v75 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v76 = v97;
    v77 = v74;
    v78 = v99;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v103, v77, v75, v99, v73);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v72, v76, v83, v70);
    _Block_release(v70);

    (*(void (**)(char *, uint64_t))(v98 + 8))(v76, v78);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v72, v96);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v51, v102);
    sub_1000126B0((uint64_t)v84, type metadata accessor for OwnedBeaconRecord);
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004A1A10(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[4];
  int v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[4];
  uint64_t v53;
  char v54[24];

  v50 = a6;
  v51 = a7;
  v49 = a5;
  v11 = (int *)type metadata accessor for OwnedBeaconGroup(0);
  v12 = *((_QWORD *)v11 - 1);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v11);
  v15 = &v45[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  v17 = &v45[-v16];
  v18 = (uint64_t *)(a1 + 16);
  swift_beginAccess(a1 + 16, v54, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) == *(_QWORD *)(a2 + 16))
  {
    v48 = a3;
    dispatch_group_enter(a3);
    v47 = *(_QWORD *)(a4 + 16);
    v46 = *(unsigned __int8 *)(a4 + 24);
    v19 = &v17[v11[6]];
    v20 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v19, v49, v20);
    v21 = v11[7];
    v22 = a4 + v21;
    v23 = &v17[v21];
    v24 = type metadata accessor for MACAddress(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v23, v22, v24);
    LOBYTE(v22) = *(_BYTE *)(a4 + v11[8]);
    v25 = (uint64_t *)(a4 + v11[9]);
    v26 = *v25;
    v27 = v25[1];
    swift_beginAccess(v18, v52, 0, 0);
    v28 = *v18;
    *(_OWORD *)v17 = xmmword_100E22FC0;
    *((_QWORD *)v17 + 2) = v47;
    v17[24] = v46;
    v17[v11[8]] = v22;
    v29 = &v17[v11[9]];
    *v29 = v26;
    v29[1] = v27;
    *(_QWORD *)&v17[v11[10]] = v28;
    sub_10005972C((uint64_t)v17, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
    v30 = *(unsigned __int8 *)(v12 + 80);
    v31 = (v30 + 24) & ~v30;
    v32 = (v13 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    v33 = swift_allocObject(&unk_1010793E8, v32 + 8, v30 | 7);
    v34 = v48;
    *(_QWORD *)(v33 + 16) = v48;
    sub_1000126EC((uint64_t)v15, v33 + v31, type metadata accessor for OwnedBeaconGroup);
    *(_QWORD *)(v33 + v32) = v51;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    v35 = v34;
    swift_retain();
    sub_100804898((uint64_t)v17, 0, (void (*)(char *))sub_1004D0850, v33);
    swift_release();
    return sub_1000126B0((uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
  }
  else
  {
    v37 = v51;
    type metadata accessor for SPOwnerSessionError(0);
    v39 = v38;
    v53 = 2;
    v40 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v41 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v42 = _BridgedStoredNSError.init(_:userInfo:)(v52, &v53, v40, v39, v41);
    v43 = v52[0];
    swift_willThrow(v42);
    swift_beginAccess(v37 + 16, v52, 1, 0);
    v44 = *(_QWORD *)(v37 + 16);
    *(_QWORD *)(v37 + 16) = v43;
    return swift_errorRelease(v44);
  }
}

void sub_1004A1D04(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  dispatch_group_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v48 = a2;
  v7 = sub_10001A9A8(&qword_1010EEC50);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for OwnedBeaconGroup(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v45 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v45 - v17;
  sub_10000F9B8(a1, (uint64_t)v9, &qword_1010EEC50);
  if (swift_getEnumCaseMultiPayload(v9, v7) == 1)
  {
    v19 = *v9;
    v50 = *v9;
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    swift_willThrowTypedImpl(&v50, v20, &protocol self-conformance witness table for Error);
    if (qword_1010E9F20 != -1)
      swift_once(&qword_1010E9F20, sub_100791C44);
    v21 = (uint64_t *)(a4 + 16);
    v22 = type metadata accessor for Logger(0);
    sub_10001A9E8(v22, (uint64_t)qword_1011B7648);
    v23 = swift_errorRetain(v19);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v26 = 138543362;
      v28 = _convertErrorToNSError(_:)(v19);
      v50 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v26 + 4, v26 + 12);
      *v27 = v28;
      swift_errorRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Error creating duplicate OwnerBeaconGroup:%{public}@", v26, 0xCu);
      v29 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v27, 1, v29);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      swift_errorRelease(v19);
    }

    swift_beginAccess(a4 + 16, &v50, 1, 0);
    v44 = *v21;
    *v21 = v19;
    swift_errorRelease(v44);
  }
  else
  {
    sub_1000126EC((uint64_t)v9, (uint64_t)v18, type metadata accessor for OwnedBeaconGroup);
    if (qword_1010E9F20 != -1)
      swift_once(&qword_1010E9F20, sub_100791C44);
    v30 = type metadata accessor for Logger(0);
    sub_10001A9E8(v30, (uint64_t)qword_1011B7648);
    sub_10005972C(a3, (uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
    v31 = sub_10005972C((uint64_t)v18, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter(v32);
    v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      v35 = swift_slowAlloc(22, -1);
      v47 = swift_slowAlloc(64, -1);
      v50 = v47;
      *(_DWORD *)v35 = 136446466;
      v45 = v35 + 4;
      v36 = type metadata accessor for UUID(0);
      v37 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v46 = v34;
      v38 = v37;
      v39 = dispatch thunk of CustomStringConvertible.description.getter(v36, v37);
      v49 = sub_100016940(v39, v40, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v45, v35 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v35 + 12) = 2082;
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v36, v38);
      v49 = sub_100016940(v41, v42, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v35 + 14, v35 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v46, "Duplicated group %{public}s -> %{public}s", (uint8_t *)v35, 0x16u);
      v43 = v47;
      swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v35, -1, -1);

    }
    else
    {

      sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
      sub_1000126B0((uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
    }
    sub_1000126B0((uint64_t)v18, type metadata accessor for OwnedBeaconGroup);
  }
  dispatch_group_leave(v48);
}

double sub_1004A2224@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  _QWORD *v42;
  _QWORD *v43;
  double result;
  uint64_t v45;
  uint64_t v46;

  v6 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  UUID.init()(v6);
  sub_10005972C(a1 + v6[6], (uint64_t)a3 + v6[6], type metadata accessor for StableIdentifier);
  sub_10000F9B8(a2, (uint64_t)a3 + v6[7], &qword_1010ED860);
  v7 = v6[8];
  v8 = a1 + v7;
  v9 = (char *)a3 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, v8, v10);
  v11 = (uint64_t *)(a1 + v6[9]);
  v12 = *v11;
  v13 = v11[1];
  v14 = (uint64_t *)(a1 + v6[10]);
  v16 = *v14;
  v15 = v14[1];
  v17 = (uint64_t *)(a1 + v6[11]);
  v18 = *v17;
  v19 = v17[1];
  v20 = (uint64_t *)(a1 + v6[12]);
  v22 = *v20;
  v21 = v20[1];
  v23 = (uint64_t *)(a1 + v6[13]);
  v25 = *v23;
  v24 = v23[1];
  v26 = (uint64_t *)(a1 + v6[14]);
  v27 = *v26;
  v45 = v18;
  v46 = v26[1];
  v28 = (uint64_t *)(a1 + v6[15]);
  v29 = *v28;
  v30 = v28[1];
  v31 = *(_QWORD *)(a1 + v6[16]);
  v32 = *(_QWORD *)(a1 + v6[17]);
  v33 = *(_BYTE *)(a1 + v6[18]);
  v34 = *(_BYTE *)(a1 + v6[19]);
  v35 = *(_BYTE *)(a1 + v6[20]);
  *a3 = xmmword_100E22FC0;
  v36 = (uint64_t *)((char *)a3 + v6[9]);
  *v36 = v12;
  v36[1] = v13;
  v37 = (uint64_t *)((char *)a3 + v6[10]);
  *v37 = v16;
  v37[1] = v15;
  v38 = (uint64_t *)((char *)a3 + v6[11]);
  *v38 = v18;
  v38[1] = v19;
  v39 = v19;
  v40 = (uint64_t *)((char *)a3 + v6[12]);
  *v40 = v22;
  v40[1] = v21;
  v41 = (uint64_t *)((char *)a3 + v6[13]);
  *v41 = v25;
  v41[1] = v24;
  v42 = (_QWORD *)((char *)a3 + v6[14]);
  *v42 = v27;
  v42[1] = v46;
  v43 = (_QWORD *)((char *)a3 + v6[15]);
  *v43 = v29;
  v43[1] = v30;
  *(_QWORD *)((char *)a3 + v6[16]) = v31;
  *(_QWORD *)((char *)a3 + v6[17]) = v32;
  *((_BYTE *)a3 + v6[18]) = v33;
  *((_BYTE *)a3 + v6[19]) = v34;
  *((_BYTE *)a3 + v6[20]) = v35;
  sub_10001BBBC(v12, v13);
  sub_10001BD08(v16, v15);
  sub_10001BD08(v45, v39);
  sub_10001BBBC(v22, v21);
  sub_10001BBBC(v25, v24);
  swift_bridgeObjectRetain(v46);
  *(_QWORD *)&result = swift_bridgeObjectRetain(v30).n128_u64[0];
  return result;
}

void sub_1004A2418(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  dispatch_group_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v60 = a2;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v9);
  v59 = (uint64_t)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for OwnedBeaconRecord(0);
  v57 = *(_QWORD *)(v14 - 8);
  v58 = v14;
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v53 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v53 - v21;
  v23 = swift_projectBox(a4);
  sub_10000F9B8(a1, (uint64_t)v13, (uint64_t *)&unk_101108050);
  if (swift_getEnumCaseMultiPayload(v13, v11) == 1)
  {
    v24 = *v13;
    v62 = *v13;
    v25 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    swift_willThrowTypedImpl(&v62, v25, &protocol self-conformance witness table for Error);
    if (qword_1010E9F20 != -1)
      swift_once(&qword_1010E9F20, sub_100791C44);
    v26 = (uint64_t *)(a5 + 16);
    v27 = type metadata accessor for Logger(0);
    sub_10001A9E8(v27, (uint64_t)qword_1011B7648);
    v28 = swift_errorRetain(v24);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v31 = 138543362;
      v33 = _convertErrorToNSError(_:)(v24);
      v62 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v31 + 4, v31 + 12);
      *v32 = v33;
      swift_errorRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Error creating duplicate OwnedBeaconRecord:%{public}@", v31, 0xCu);
      v34 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v32, 1, v34);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      swift_errorRelease(v24);
    }

    swift_beginAccess(v26, &v62, 1, 0);
    v50 = *v26;
    *v26 = v24;
    swift_errorRelease(v50);
  }
  else
  {
    v56 = v23;
    sub_1000126EC((uint64_t)v13, (uint64_t)v22, type metadata accessor for OwnedBeaconRecord);
    if (qword_1010E9F20 != -1)
      swift_once(&qword_1010E9F20, sub_100791C44);
    v35 = type metadata accessor for Logger(0);
    sub_10001A9E8(v35, (uint64_t)qword_1011B7648);
    sub_10005972C(a3, (uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
    v36 = sub_10005972C((uint64_t)v22, (uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.default.getter(v37);
    v39 = v38;
    if (os_log_type_enabled(v37, v38))
    {
      v40 = swift_slowAlloc(22, -1);
      v55 = swift_slowAlloc(64, -1);
      v62 = v55;
      *(_DWORD *)v40 = 136446466;
      v53 = v40 + 4;
      v54 = v39;
      v41 = v58;
      v42 = type metadata accessor for UUID(0);
      v43 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v44 = dispatch thunk of CustomStringConvertible.description.getter(v42, v43);
      v61 = sub_100016940(v44, v45, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v53, v40 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
      *(_WORD *)(v40 + 12) = 2082;
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v42, v43);
      v61 = sub_100016940(v46, v47, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v40 + 14, v40 + 22);
      v48 = v41;
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v54, "Duplicated %{public}s -> %{public}s", (uint8_t *)v40, 0x16u);
      v49 = v55;
      swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {
      sub_1000126B0((uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
      sub_1000126B0((uint64_t)v17, type metadata accessor for OwnedBeaconRecord);

      v48 = v58;
    }
    v51 = v59;
    sub_1000126EC((uint64_t)v22, v59, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56))(v51, 0, 1, v48);
    v52 = v56;
    swift_beginAccess(v56, &v62, 1, 0);
    sub_100004084(v51, v52, (uint64_t *)&unk_1010F47C0);
  }
  dispatch_group_leave(v60);
}

void sub_1004A29DC(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = sub_10001A9A8(&qword_101108090);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v8, &qword_101108090);
  if (swift_getEnumCaseMultiPayload(v8, v6) == 1)
  {
    v9 = *v8;
    v22 = v9;
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    swift_willThrowTypedImpl(&v22, v10, &protocol self-conformance witness table for Error);
    if (qword_1010E9F20 != -1)
      swift_once(&qword_1010E9F20, sub_100791C44);
    v11 = (uint64_t *)(a3 + 16);
    v12 = type metadata accessor for Logger(0);
    sub_10001A9E8(v12, (uint64_t)qword_1011B7648);
    v13 = swift_errorRetain(v9);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v16 = 138543362;
      v18 = _convertErrorToNSError(_:)(v9);
      v22 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v16 + 4, v16 + 12);
      *v17 = v18;
      swift_errorRelease(v9);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Error creating duplicate BeaconNamingRecord:%{public}@", v16, 0xCu);
      v19 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v17, 1, v19);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      swift_errorRelease(v9);
    }

    swift_beginAccess(v11, &v22, 1, 0);
    v20 = *v11;
    *v11 = v9;
    swift_errorRelease(v20);
  }
  else
  {
    sub_100004048((uint64_t)v8, &qword_101108090);
  }
  dispatch_group_leave(a2);
}

uint64_t sub_1004A2C38(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v22)(_QWORD *);
  uint64_t v23;
  void (*v24)(_QWORD *);
  _QWORD v25[3];
  uint64_t v26;
  _BYTE v27[24];

  v24 = a2;
  v6 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)&v25[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v9);
  v11 = (char *)&v25[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OwnedBeaconRecord(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v25[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_projectBox(a1);
  swift_beginAccess(v16, v27, 0, 0);
  sub_10000F9B8(v16, (uint64_t)v11, (uint64_t *)&unk_1010F47C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_100004048((uint64_t)v11, (uint64_t *)&unk_1010F47C0);
    type metadata accessor for SPOwnerSessionError(0);
    v18 = v17;
    v26 = 2;
    v19 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v20 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    _BridgedStoredNSError.init(_:userInfo:)(v25, &v26, v19, v18, v20);
    *v8 = v25[0];
    swift_storeEnumTagMultiPayload(v8, v6, 1);
    v24(v8);
    return sub_100004048((uint64_t)v8, (uint64_t *)&unk_101108050);
  }
  else
  {
    v22 = v24;
    sub_1000126EC((uint64_t)v11, (uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
    swift_beginAccess(a4 + 16, v25, 0, 0);
    v23 = *(_QWORD *)(a4 + 16);
    if (v23)
    {
      *v8 = v23;
      swift_storeEnumTagMultiPayload(v8, v6, 1);
      swift_errorRetain(v23);
      swift_errorRetain(v23);
      v22(v8);
      swift_errorRelease(v23);
    }
    else
    {
      sub_10005972C((uint64_t)v15, (uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
      swift_storeEnumTagMultiPayload(v8, v6, 0);
      v22(v8);
    }
    sub_100004048((uint64_t)v8, (uint64_t *)&unk_101108050);
    return sub_1000126B0((uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
  }
}

void sub_1004A2F04(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];

  v6 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v8, (uint64_t *)&unk_101108050);
  if (swift_getEnumCaseMultiPayload(v8, v6) == 1)
  {
    v9 = *v8;
    v13[0] = v9;
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    swift_willThrowTypedImpl(v13, v10, &protocol self-conformance witness table for Error);
    swift_beginAccess(a3 + 16, v13, 1, 0);
    v11 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v9;
    swift_errorRelease(v11);
  }
  else
  {
    sub_100004048((uint64_t)v8, (uint64_t *)&unk_101108050);
  }
  dispatch_group_leave(a2);
}

uint64_t sub_1004A300C(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _BYTE v10[24];

  swift_beginAccess(a1 + 16, v10, 0, 0);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    swift_errorRetain(v8);
    a2(v8);
    return swift_errorRelease(v8);
  }
  else
  {
    QueueSynchronizer.conditionalSync<A>(_:)(a5);
    return ((uint64_t (*)(_QWORD))a2)(0);
  }
}

uint64_t sub_1004A30C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[19] = a6;
  v7[20] = a7;
  v7[17] = a4;
  v7[18] = a5;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v7[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v7[22] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[23] = v10;
  v7[24] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004A3148, 0, 0);
}

uint64_t sub_1004A3148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC30 + dword_1010EBC30);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
    *(_QWORD *)(v0 + 200) = v3;
    *v3 = v0;
    v3[1] = sub_1004A3248;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004A3248(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004A32A4, 0, 0);
}

uint64_t sub_1004A32A4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 208);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_1004A3388, *(_QWORD *)(v0 + 208), 0);
  v3 = sub_100033220();
  v4 = swift_allocError(&type metadata for DaemonError, v3, 0, 0);
  *v5 = 0xD000000000000013;
  v5[1] = 0x8000000100ED7110;
  swift_willThrow(v4);
  v6 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
  swift_errorRetain(v4);
  v6(v4, 1);
  swift_errorRelease(v4);
  swift_errorRelease(v4);
  v7 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004A3388()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_10110CD9C);
  v0[27] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1004A33E0;
  return sub_1008FBBC8(v0[21], v0[18]);
}

uint64_t sub_1004A33E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1004A3678;
  else
    v3 = sub_1004A3444;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1004A3444()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  void (*v3)(void *, uint64_t);
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  Class isa;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void *, uint64_t);
  unint64_t v15;
  unint64_t v16;
  Class v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  Class v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 184) + 48))(v1, 1, *(_QWORD *)(v0 + 176));
  v3 = *(void (**)(void *, uint64_t))(v0 + 152);
  if (v2 == 1)
  {
    sub_100004048(v1, (uint64_t *)&unk_1010EDC50);
    type metadata accessor for SPOwnerSessionError(0);
    v5 = v4;
    *(_QWORD *)(v0 + 128) = 2;
    v6 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v7 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 120), v0 + 128, v6, v5, v7);
    v8 = *(void **)(v0 + 120);
    v3(v8, 1);
    swift_release();

  }
  else
  {
    v9 = *(_QWORD *)(v0 + 192);
    sub_1000126EC(v1, v9, type metadata accessor for LocalFindableAccessoryRecord);
    v10 = objc_msgSend(objc_allocWithZone((Class)SPPeripheralConnectionMaterial), "init");
    type metadata accessor for PeripheralConnectionMaterial(0);
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v10, "setIrkData:", isa);

    v13 = MACAddress.data.getter(v12);
    v14 = v3;
    v16 = v15;
    v17 = Data._bridgeToObjectiveC()().super.isa;
    sub_10001BC14(v13, v16);
    objc_msgSend(v10, "setBtAddressData:", v17);

    v18 = MACAddress.bluetoothAddressWithType.getter();
    v20 = v19;
    v21 = Data._bridgeToObjectiveC()().super.isa;
    sub_10001BC14(v18, v20);
    objc_msgSend(v10, "setBtAddressWithTypeData:", v21);

    v14(v10, 0);
    swift_release();

    sub_1000126B0(v9, type metadata accessor for LocalFindableAccessoryRecord);
  }
  v22 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004A3678()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 208));
  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
  swift_errorRetain(v1);
  v2(v1, 1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  v3 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004A36F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7[29] = a6;
  v7[30] = a7;
  v7[27] = a4;
  v7[28] = a5;
  v8 = type metadata accessor for UUID(0);
  v7[31] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[32] = v9;
  v7[33] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010EF7C0);
  v7[34] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[35] = v11;
  v7[36] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v7[37] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v7[38] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v7[39] = v14;
  v7[40] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004A37CC, 0, 0);
}

uint64_t sub_1004A37CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC30 + dword_1010EBC30);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
    *(_QWORD *)(v0 + 328) = v3;
    *v3 = v0;
    v3[1] = sub_1004A38CC;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004A38CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 328);
  *(_QWORD *)(*(_QWORD *)v1 + 336) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004A3928, 0, 0);
}

uint64_t sub_1004A3928()
{
  uint64_t v0;
  _QWORD *v1;
  void (*v3)(void);
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 336))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return swift_task_switch(sub_1004A3A04, *(_QWORD *)(v0 + 336), 0);
  }
  else
  {
    v3 = *(void (**)(void))(v0 + 224);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = sub_100033220();
    v5 = swift_allocError(&type metadata for DaemonError, v4, 0, 0);
    *v6 = 0xD000000000000013;
    v6[1] = 0x8000000100ED7110;
    v3();
    swift_errorRelease(v5);
    v7 = *(_QWORD *)(v0 + 288);
    v8 = *(_QWORD *)(v0 + 296);
    v9 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 320));
    swift_task_dealloc(v8);
    swift_task_dealloc(v7);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1004A3A04()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_10110CD9C);
  v0[43] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1004A3A5C;
  return sub_1008FBBC8(v0[37], v0[30]);
}

uint64_t sub_1004A3A5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 344);
  *(_QWORD *)(*(_QWORD *)v1 + 352) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1004A3C94;
  else
    v3 = sub_1004A3AC0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1004A3AC0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void *);
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t (*v13)(void);

  v1 = *(_QWORD *)(v0 + 296);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 312) + 48))(v1, 1, *(_QWORD *)(v0 + 304)) == 1)
  {
    v2 = *(void (**)(void *))(v0 + 224);
    sub_100004048(v1, (uint64_t *)&unk_1010EDC50);
    type metadata accessor for SPOwnerSessionError(0);
    v4 = v3;
    *(_QWORD *)(v0 + 200) = 2;
    v5 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v6 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 208), v0 + 200, v5, v4, v6);
    v7 = *(void **)(v0 + 208);
    v2(v7);
    swift_release();

    v8 = *(_QWORD *)(v0 + 288);
    v9 = *(_QWORD *)(v0 + 296);
    v10 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 320));
    swift_task_dealloc(v9);
    swift_task_dealloc(v8);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_1000126EC(v1, *(_QWORD *)(v0 + 320), type metadata accessor for LocalFindableAccessoryRecord);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 160))
    {
      sub_10000F9FC((__int128 *)(v0 + 136), v0 + 56);
      sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
      v13 = (uint64_t (*)(void))((char *)&dword_1010EBC18 + dword_1010EBC18);
      v12 = (_QWORD *)swift_task_alloc(unk_1010EBC1C);
      *(_QWORD *)(v0 + 360) = v12;
      *v12 = v0;
      v12[1] = sub_1004A3D0C;
      return v13();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1004A3C94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release(*(_QWORD *)(v0 + 336));
  v1 = *(_QWORD *)(v0 + 352);
  (*(void (**)(uint64_t))(v0 + 224))(v1);
  swift_errorRelease(v1);
  v2 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004A3D0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 368) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004A3D68, 0, 0);
}

uint64_t sub_1004A3D68()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (_QWORD *)(v0 + 56);
  if (*(_QWORD *)(v0 + 368))
  {
    v2 = *(_QWORD *)(v0 + 320);
    v4 = *(_QWORD *)(v0 + 256);
    v3 = *(_QWORD *)(v0 + 264);
    v5 = *(_QWORD *)(v0 + 248);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
    v6 = type metadata accessor for Peripheral(0);
    Identifier.init(_:)(v3, v6);
    v7 = (_QWORD *)swift_task_alloc(dword_10110F6BC);
    *(_QWORD *)(v0 + 376) = v7;
    *v7 = v0;
    v7[1] = sub_1004A3EC8;
    return sub_1009B3CC0(*(_QWORD *)(v0 + 288), 1);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 320);
    v10 = *(void (**)(void))(v0 + 224);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v11 = sub_100033220();
    v12 = swift_allocError(&type metadata for DaemonError, v11, 0, 0);
    *v13 = 0xD000000000000014;
    v13[1] = 0x8000000100ED7130;
    v10();
    swift_release();
    sub_1000126B0(v9, type metadata accessor for LocalFindableAccessoryRecord);
    swift_errorRelease(v12);
    v14 = *(_QWORD *)(v0 + 288);
    v15 = *(_QWORD *)(v0 + 296);
    v16 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 320));
    swift_task_dealloc(v15);
    swift_task_dealloc(v14);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1004A3EC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 384) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    v6 = sub_1004A3FCC;
  else
    v6 = sub_1004A3F4C;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1004A3F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 320);
  swift_release();
  swift_release();
  sub_1000126B0(v1, type metadata accessor for LocalFindableAccessoryRecord);
  v2 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004A3FCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 320);
  swift_release();
  swift_release();
  sub_1000126B0(v1, type metadata accessor for LocalFindableAccessoryRecord);
  v2 = *(_QWORD *)(v0 + 384);
  (*(void (**)(uint64_t))(v0 + 224))(v2);
  swift_errorRelease(v2);
  v3 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004A4064(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;

  v7[2] = a6;
  v7[3] = a7;
  v10 = sub_10001A9A8(&qword_1010FD1A0);
  v7[4] = v10;
  v7[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RawAccessoryMetadata(0);
  v12 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[6] = v12;
  type metadata accessor for AccessoryMetadataManager();
  v13 = (_QWORD *)swift_task_alloc(dword_1010F3824);
  v7[7] = v13;
  *v13 = v7;
  v13[1] = sub_1004A4130;
  if ((a4 & 1) != 0)
    v14 = 3;
  else
    v14 = 2;
  return sub_1002245E0(v12, a5, v14);
}

uint64_t sub_1004A4130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1004D65C0;
  else
    v3 = sub_1004D640C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1004A4194(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;

  v7[2] = a6;
  v7[3] = a7;
  v10 = sub_10001A9A8(&qword_1010FD188);
  v7[4] = v10;
  v7[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AccessoryMetadata(0);
  v12 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[6] = v12;
  type metadata accessor for AccessoryMetadataManager();
  v13 = (_QWORD *)swift_task_alloc(dword_1010F3814);
  v7[7] = v13;
  *v13 = v7;
  v13[1] = sub_1004A4260;
  if ((a4 & 1) != 0)
    v14 = 3;
  else
    v14 = 2;
  return sub_10022B4C8(v12, a5, v14);
}

uint64_t sub_1004A4260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1004D65C4;
  else
    v3 = sub_1004D6410;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1004A42C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v7[2] = a6;
  v7[3] = a7;
  v10 = sub_10001A9A8(&qword_1010FD1A0);
  v7[4] = v10;
  v7[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RawAccessoryMetadata(0);
  v12 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[6] = v12;
  type metadata accessor for AccessoryMetadataManager();
  v13 = (_QWORD *)swift_task_alloc(dword_1010F3824);
  v7[7] = v13;
  *v13 = v7;
  v13[1] = sub_1004A4388;
  return sub_1002245E0(v12, a4, a5);
}

uint64_t sub_1004A4388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1004A448C;
  else
    v3 = sub_1004A43EC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1004A43EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(void (**)(uint64_t))(v0 + 16);
  sub_10005972C(v1, v2, type metadata accessor for RawAccessoryMetadata);
  swift_storeEnumTagMultiPayload(v2, v3, 0);
  v4(v2);
  sub_100004048(v2, &qword_1010FD1A0);
  sub_1000126B0(v1, type metadata accessor for RawAccessoryMetadata);
  v5 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004A448C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void (*v4)(_QWORD *);
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD **)(v0 + 40);
  v4 = *(void (**)(_QWORD *))(v0 + 16);
  *v3 = v1;
  swift_storeEnumTagMultiPayload(v3, v2, 1);
  swift_errorRetain(v1);
  v4(v3);
  swift_errorRelease(v1);
  sub_100004048((uint64_t)v3, &qword_1010FD1A0);
  v5 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004A4510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v7[2] = a6;
  v7[3] = a7;
  v10 = sub_10001A9A8(&qword_1010FD188);
  v7[4] = v10;
  v7[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AccessoryMetadata(0);
  v12 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[6] = v12;
  type metadata accessor for AccessoryMetadataManager();
  v13 = (_QWORD *)swift_task_alloc(dword_1010F3814);
  v7[7] = v13;
  *v13 = v7;
  v13[1] = sub_1004A45D4;
  return sub_10022B4C8(v12, a4, a5);
}

uint64_t sub_1004A45D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1004A46D8;
  else
    v3 = sub_1004A4638;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1004A4638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(void (**)(uint64_t))(v0 + 16);
  sub_10005972C(v1, v2, type metadata accessor for AccessoryMetadata);
  swift_storeEnumTagMultiPayload(v2, v3, 0);
  v4(v2);
  sub_100004048(v2, &qword_1010FD188);
  sub_1000126B0(v1, type metadata accessor for AccessoryMetadata);
  v5 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004A46D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void (*v4)(_QWORD *);
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD **)(v0 + 40);
  v4 = *(void (**)(_QWORD *))(v0 + 16);
  *v3 = v1;
  swift_storeEnumTagMultiPayload(v3, v2, 1);
  swift_errorRetain(v1);
  v4(v3);
  swift_errorRelease(v1);
  sub_100004048((uint64_t)v3, &qword_1010FD188);
  v5 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004A475C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = a2;
  return swift_task_switch(sub_1004A4774, 0, 0);
}

uint64_t sub_1004A4774()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBDA8 + dword_1010EBDA8);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBDAC);
    *(_QWORD *)(v0 + 136) = v2;
    *v2 = v0;
    v2[1] = sub_1004A4860;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004A4860(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004A48BC, 0, 0);
}

uint64_t sub_1004A48BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void (*v8)(uint64_t, uint64_t);
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 144);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_1004A4A1C, *(_QWORD *)(v0 + 144), 0);
  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7648);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error on publishWildModeRecords, no WildModeAssociationRecordsPublisher object!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v8 = *(void (**)(uint64_t, uint64_t))(v0 + 120);

  v9 = sub_100033220();
  v10 = swift_allocError(&type metadata for DaemonError, v9, 0, 0);
  *v11 = 0xD000000000000023;
  v11[1] = 0x8000000100ED85F0;
  v8(v10, 1);
  swift_errorRelease(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004A4A1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void *, uint64_t);

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v5 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                               + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 152) = v3;
  *v3 = v0;
  v3[1] = sub_1004A4AA0;
  return v5(&unk_1010FD180, v1);
}

uint64_t sub_1004A4AA0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 152);
  *(_QWORD *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 144);
  if (v0)
  {
    v5 = sub_1004A4B54;
  }
  else
  {
    swift_release();
    v5 = sub_1004A4B10;
    v4 = 0;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1004A4B10()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  (*(void (**)(_QWORD, _QWORD))(v0 + 120))(0, 0);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004A4B54()
{
  swift_release();
  return swift_task_switch(sub_1004A4B90, 0, 0);
}

uint64_t sub_1004A4B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 120);
  swift_errorRetain(v1);
  v3(v1, 1);
  swift_release(v2);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t SPBeaconObservationType.description.getter(uint64_t a1)
{
  unint64_t result;
  Swift::String v3;
  void *object;

  result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x7463656E6E6F632ELL;
      break;
    case 2:
      result = 0xD000000000000016;
      break;
    case 3:
      result = 0x6E6E6F637369642ELL;
      break;
    default:
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease(0xE000000000000000);
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      result = 0xD00000000000002DLL;
      break;
  }
  return result;
}

unint64_t sub_1004A4D20()
{
  uint64_t *v0;

  return SPBeaconObservationType.description.getter(*v0);
}

Swift::Int sub_1004A4E10(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_10088F268(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1004A535C(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1004A4E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String_optional v5;
  uint64_t countAndFlagsBits;
  void *object;
  char v8;
  Swift::String_optional v9;
  Swift::String_optional v10;
  void *v11;
  _BOOL8 v12;

  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  v5 = String.Iterator.next()();
  if (v5.value._object)
  {
    countAndFlagsBits = v5.value._countAndFlagsBits;
    object = v5.value._object;
    do
    {
      v10 = String.Iterator.next()();
      if (!v10.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(a4);
        swift_bridgeObjectRelease(a2);
        return 1;
      }
      if (countAndFlagsBits == v10.value._countAndFlagsBits && object == v10.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v10.value._object);
      }
      else
      {
        v8 = _stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, v10.value._countAndFlagsBits, v10.value._object, 0);
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v10.value._object);
        if ((v8 & 1) == 0)
        {
          swift_bridgeObjectRelease(a4);
          swift_bridgeObjectRelease(a2);
          return 0;
        }
      }
      v9 = String.Iterator.next()();
      countAndFlagsBits = v9.value._countAndFlagsBits;
      object = v9.value._object;
    }
    while (v9.value._object);
  }
  swift_bridgeObjectRelease(a4);
  v11 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease(a2);
  v12 = v11 == 0;
  swift_bridgeObjectRelease(v11);
  return v12;
}

void sub_1004A4FDC(uint64_t a1, uint64_t a2)
{
  sub_10001D244(a1, a2, &qword_1010FD118, SPBeaconingKey_ptr);
}

uint64_t sub_1004A4FF0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 96))(v3, v4);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v6 & 1;
  return result;
}

void sub_1004A5040(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1004A50A4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v2;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))CCECCryptorExportKey)(v5, &v8, v4, v3);
  v7 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v7;
  return result;
}

Swift::Int sub_1004A535C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  Swift::Int v21;
  unint64_t *v22;
  unint64_t v23;
  Swift::Int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  Swift::Int v95;
  Swift::Int v96;
  uint64_t v97;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v78 = 0;
      v79 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v81 = *(_QWORD *)(v79 + 8 * i);
        v82 = v78;
        do
        {
          v83 = *(_QWORD *)(v79 + v82);
          if (v81 >= v83)
            break;
          if (!v79)
            goto LABEL_141;
          *(_QWORD *)(v79 + v82 + 8) = v83;
          *(_QWORD *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v95 = result;
  v96 = v3;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
      v94 = v8;
      if (v12 >= 2)
      {
        v84 = *v2;
        do
        {
          v85 = v12 - 2;
          if (v12 < 2)
            goto LABEL_132;
          if (!v84)
            goto LABEL_145;
          v86 = v11;
          v87 = v11 + 32;
          v88 = *(_QWORD *)&v11[16 * v85 + 32];
          v89 = *(_QWORD *)&v11[16 * v12 + 24];
          sub_1004A5D70((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(_QWORD *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1)
            break;
          if (v89 < v88)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native(v86) & 1) == 0)
            v86 = sub_10088F088((uint64_t)v86);
          if (v85 >= *((_QWORD *)v86 + 2))
            goto LABEL_134;
          v90 = &v86[16 * v85 + 32];
          *(_QWORD *)v90 = v88;
          *((_QWORD *)v90 + 1) = v89;
          v91 = *((_QWORD *)v86 + 2);
          if (v12 > v91)
            goto LABEL_135;
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          v11 = v86;
          *((_QWORD *)v86 + 2) = v91 - 1;
          v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      v94[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v94 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for UInt64);
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v96;
    v94 = (_QWORD *)v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v92 = v2;
  v93 = *v2 - 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v97 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(_QWORD *)(v10 + 8 * v9);
      v15 = *(_QWORD *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(_QWORD *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_138;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_144;
              v20 = *(_QWORD *)(v10 + 8 * v19);
              *(_QWORD *)(v10 + 8 * v19) = *(_QWORD *)(v10 + 8 * v18);
              *(_QWORD *)(v10 + 8 * v18) = v20;
            }
            v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_47;
    if (__OFSUB__(v9, v13))
      goto LABEL_136;
    if (v9 - v13 >= v95)
      goto LABEL_47;
    v21 = v13 + v95;
    if (__OFADD__(v13, v95))
      goto LABEL_139;
    if (v21 >= v3)
      v21 = v3;
    if (v21 < v13)
      break;
    if (v9 != v21)
    {
      v22 = (unint64_t *)(v93 + 8 * v9);
      do
      {
        v23 = *(_QWORD *)(v10 + 8 * v9);
        v24 = v13;
        v25 = v22;
        do
        {
          v26 = *v25;
          if (v23 >= *v25)
            break;
          if (!v10)
            goto LABEL_142;
          *v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      v9 = v21;
    }
LABEL_47:
    if (v9 < v13)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_10088E710(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v97;
    if (v28 >= v27 >> 1)
    {
      v77 = sub_10088E710((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v97;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        v31 = v12 - 1;
        if (v12 >= 4)
        {
          v36 = &v29[16 * v12];
          v37 = *((_QWORD *)v36 - 8);
          v38 = *((_QWORD *)v36 - 7);
          v42 = __OFSUB__(v38, v37);
          v39 = v38 - v37;
          if (v42)
            goto LABEL_120;
          v41 = *((_QWORD *)v36 - 6);
          v40 = *((_QWORD *)v36 - 5);
          v42 = __OFSUB__(v40, v41);
          v34 = v40 - v41;
          v35 = v42;
          if (v42)
            goto LABEL_121;
          v43 = v12 - 2;
          v44 = &v29[16 * v12 - 32];
          v46 = *(_QWORD *)v44;
          v45 = *((_QWORD *)v44 + 1);
          v42 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          if (v42)
            goto LABEL_123;
          v42 = __OFADD__(v34, v47);
          v48 = v34 + v47;
          if (v42)
            goto LABEL_126;
          if (v48 >= v39)
          {
            v66 = &v29[16 * v31];
            v68 = *(_QWORD *)v66;
            v67 = *((_QWORD *)v66 + 1);
            v42 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v42)
              goto LABEL_130;
            v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v60 = *((_QWORD *)v11 + 4);
            v61 = *((_QWORD *)v11 + 5);
            v42 = __OFSUB__(v61, v60);
            v53 = v61 - v60;
            v54 = v42;
            goto LABEL_78;
          }
          v33 = *((_QWORD *)v11 + 4);
          v32 = *((_QWORD *)v11 + 5);
          v42 = __OFSUB__(v32, v33);
          v34 = v32 - v33;
          v35 = v42;
        }
        if ((v35 & 1) != 0)
          goto LABEL_122;
        v43 = v12 - 2;
        v49 = &v29[16 * v12 - 32];
        v51 = *(_QWORD *)v49;
        v50 = *((_QWORD *)v49 + 1);
        v52 = __OFSUB__(v50, v51);
        v53 = v50 - v51;
        v54 = v52;
        if (v52)
          goto LABEL_125;
        v55 = &v29[16 * v31];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v42 = __OFSUB__(v56, v57);
        v58 = v56 - v57;
        if (v42)
          goto LABEL_128;
        if (__OFADD__(v53, v58))
          goto LABEL_129;
        if (v53 + v58 >= v34)
        {
          v59 = v34 < v58;
LABEL_84:
          if (v59)
            v31 = v43;
          goto LABEL_86;
        }
LABEL_78:
        if ((v54 & 1) != 0)
          goto LABEL_124;
        v62 = &v29[16 * v31];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v42 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v42)
          goto LABEL_127;
        if (v65 < v53)
          goto LABEL_15;
LABEL_86:
        v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10)
          goto LABEL_143;
        v71 = &v29[16 * v70];
        v72 = *(_QWORD *)v71;
        v73 = v29;
        v74 = &v29[16 * v31];
        v75 = *((_QWORD *)v74 + 1);
        sub_1004A5D70((char *)(v10 + 8 * *(_QWORD *)v71), (char *)(v10 + 8 * *(_QWORD *)v74), v10 + 8 * v75, __dst);
        if (v1)
          goto LABEL_114;
        if (v75 < v72)
          goto LABEL_117;
        if (v31 > *((_QWORD *)v11 + 2))
          goto LABEL_118;
        *(_QWORD *)v71 = v72;
        *(_QWORD *)&v73[16 * v70 + 8] = v75;
        v76 = *((_QWORD *)v11 + 2);
        if (v31 >= v76)
          goto LABEL_119;
        v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        v29 = v73;
        *((_QWORD *)v11 + 2) = v76 - 1;
        v10 = v97;
        if (v76 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v96;
    if (v9 >= v96)
    {
      v8 = v94;
      v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_1004A59E4(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t a5)
{
  uint64_t v5;
  char *v6;
  char *v8;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char v29;
  char v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  uint64_t result;
  _QWORD v37[5];
  _QWORD v38[5];
  char *v39;
  char *v40;
  char *v41;

  v6 = __dst;
  v8 = a2;
  v10 = a2 - __src;
  v11 = (a2 - __src) / 40;
  v12 = a3 - (_QWORD)a2;
  v13 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  v41 = __src;
  v40 = __dst;
  if (v11 >= v13)
  {
    if (v12 >= -39)
    {
      if (__dst != a2 || &a2[40 * v13] <= __dst)
        memmove(__dst, a2, 40 * v13);
      v24 = &v6[40 * v13];
      v39 = v24;
      v41 = v8;
      if (__src >= v8 || v12 < 40)
        goto LABEL_44;
      v25 = a3 - 40;
      while (1)
      {
        sub_100030784((uint64_t)(v24 - 40), (uint64_t)v38);
        v28 = v8 - 40;
        sub_100030784((uint64_t)(v8 - 40), (uint64_t)v37);
        v29 = sub_10049C5EC(v38, v37, a5);
        if (v5)
          goto LABEL_43;
        v30 = v29;
        v31 = (char *)(v25 + 40);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
        if ((v30 & 1) != 0)
        {
          if (v31 != v8 || v25 >= (unint64_t)v8)
          {
            v26 = *(_OWORD *)v28;
            v27 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(v25 + 32) = *((_QWORD *)v8 - 1);
            *(_OWORD *)v25 = v26;
            *(_OWORD *)(v25 + 16) = v27;
          }
          v41 -= 40;
          v24 = v39;
          if (v39 <= v6)
            goto LABEL_44;
        }
        else
        {
          v32 = v39;
          v24 = v39 - 40;
          v39 -= 40;
          if (v31 < v32 || v25 >= (unint64_t)v32 || v31 != v32)
          {
            v33 = *(_OWORD *)v24;
            v34 = *(_OWORD *)(v32 - 24);
            *(_QWORD *)(v25 + 32) = *((_QWORD *)v32 - 1);
            *(_OWORD *)v25 = v33;
            *(_OWORD *)(v25 + 16) = v34;
          }
          v28 = v8;
          if (v24 <= v6)
            goto LABEL_44;
        }
        v25 -= 40;
        v8 = v28;
        if (v28 <= __src)
          goto LABEL_44;
      }
    }
  }
  else if (v10 >= -39)
  {
    if (__dst != __src || &__src[40 * v11] <= __dst)
      memmove(__dst, __src, 40 * v11);
    v14 = (unint64_t)&v6[40 * v11];
    v39 = (char *)v14;
    if ((unint64_t)v8 >= a3 || v10 < 40)
      goto LABEL_44;
    while (1)
    {
      sub_100030784((uint64_t)v8, (uint64_t)v38);
      sub_100030784((uint64_t)v6, (uint64_t)v37);
      v15 = sub_10049C5EC(v38, v37, a5);
      if (v5)
        break;
      v16 = v15;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
      v17 = v41;
      if ((v16 & 1) != 0)
      {
        v18 = (unint64_t)(v8 + 40);
        if (v41 >= v8 && (unint64_t)v41 < v18 && v41 == v8)
        {
          v17 = v8;
        }
        else
        {
          v19 = *(_OWORD *)v8;
          v20 = *((_OWORD *)v8 + 1);
          *((_QWORD *)v41 + 4) = *((_QWORD *)v8 + 4);
          *v17 = v19;
          v17[1] = v20;
        }
      }
      else
      {
        v21 = v40 + 40;
        if (v41 != v40 || v41 >= v21)
        {
          v22 = *(_OWORD *)v40;
          v23 = *((_OWORD *)v40 + 1);
          *((_QWORD *)v41 + 4) = *((_QWORD *)v40 + 4);
          *v17 = v22;
          v17[1] = v23;
        }
        v40 = v21;
        v18 = (unint64_t)v8;
      }
      v41 = (char *)v17 + 40;
      v6 = v40;
      if ((unint64_t)v40 < v14)
      {
        v8 = (char *)v18;
        if (v18 < a3)
          continue;
      }
      goto LABEL_44;
    }
LABEL_43:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
LABEL_44:
    sub_10088E9EC((void **)&v41, (const void **)&v40, &v39);
    swift_release();
    return 1;
  }
  swift_release();
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1004A5D70(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[8 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (unint64_t *)(a3 - 8);
        while (1)
        {
          v18 = (char *)(v17 + 1);
          v19 = v6 - 8;
          v20 = *((_QWORD *)v6 - 1);
          if (*((_QWORD *)v16 - 1) >= v20)
          {
            v22 = v16 - 8;
            if (v18 < v16 || v17 >= (unint64_t *)v16 || v18 != v16)
              *v17 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= (unint64_t *)v6)
              *v17 = v20;
            v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7)
              goto LABEL_42;
          }
          --v17;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_10088E944((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1004A5FDC(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    sub_1004A6138((unint64_t *)((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    v9 = v8;
    v10 = swift_release();
    if (v1)
      swift_willThrow(v10);
  }
  else
  {
    v11 = (void *)swift_slowAlloc(v7, -1);
    bzero(v11, v7);
    sub_1004A6138((unint64_t *)v11, v6, v2);
    v9 = v12;
    swift_release();
    swift_slowDealloc(v11, -1, -1);
  }
  return v9;
}

void sub_1004A6138(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v20;

  v20 = 0;
  v4 = 0;
  v5 = a3 + 56;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v9)
      goto LABEL_24;
    v15 = *(_QWORD *)(v5 + 8 * v14);
    ++v4;
    if (!v15)
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v9)
        goto LABEL_24;
      v15 = *(_QWORD *)(v5 + 8 * v4);
      if (!v15)
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v9)
          goto LABEL_24;
        v15 = *(_QWORD *)(v5 + 8 * v4);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v8 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v4 << 6);
LABEL_5:
    v12 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v11);
    v13 = objc_msgSend(v12, "role");

    if (v13)
    {

      *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v20++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        sub_100853890(a1, a2, v20, a3);
        return;
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v9)
    goto LABEL_24;
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v9)
      goto LABEL_24;
    v15 = *(_QWORD *)(v5 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_1004A62F8(uint64_t a1, uint64_t a2)
{
  return sub_1004A6314(a1, a2, type metadata accessor for SharedBeaconRecord, &qword_1010F4A70, (uint64_t)&unk_100E6F5CC);
}

uint64_t sub_1004A6314(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v19[5];

  v9 = sub_10001A9A8(&qword_10110EEB0);
  __chkstk_darwin(v9);
  v11 = (char *)&v19[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a3(0);
  v19[3] = v12;
  v19[4] = sub_100006204(a4, a3, a5);
  v13 = sub_100018F08(v19);
  sub_10005972C(a1, (uint64_t)v13, a3);
  sub_10081BB64((uint64_t)v13 + *(int *)(v12 + 20), (uint64_t)v11);
  v14 = type metadata accessor for BeaconProductInfoRecord(0);
  LODWORD(a5) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v11, 1, v14);
  sub_100004048((uint64_t)v11, &qword_10110EEB0);
  if ((_DWORD)a5 == 1)
  {
    v15 = sub_10001A9A8(&qword_1010F7A80);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
    sub_100030784((uint64_t)v19, v16 + 32);
    sub_100C40DD4(v16, 1, 0, 0);
    swift_bridgeObjectRelease();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
}

uint64_t sub_1004A6490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v20[5];

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v20[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_10110EEB0);
  __chkstk_darwin(v11);
  v13 = (char *)&v20[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[3] = a3;
  v20[4] = a4;
  v14 = sub_100018F08(v20);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v14, a1, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 8) + 32))(a3);
  sub_10081BB64((uint64_t)v10, (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v15 = type metadata accessor for BeaconProductInfoRecord(0);
  LODWORD(a4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v13, 1, v15);
  sub_100004048((uint64_t)v13, &qword_10110EEB0);
  if ((_DWORD)a4 == 1)
  {
    v16 = sub_10001A9A8(&qword_1010F7A80);
    v17 = swift_allocObject(v16, 72, 7);
    *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
    sub_100030784((uint64_t)v20, v17 + 32);
    sub_100C40DD4(v17, 1, 0, 0);
    swift_bridgeObjectRelease();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
}

uint64_t sub_1004A6658(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(_QWORD);
  uint64_t My;
  _QWORD *v19;
  uint64_t v20;
  int *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  int *v71;
  uint64_t v72;
  _QWORD v73[5];

  v4 = sub_10001A9A8(&qword_1010FD078);
  __chkstk_darwin(v4);
  v6 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_10110EEB0);
  __chkstk_darwin(v7);
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BeaconProductInfoRecord(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a1, (uint64_t)v16, v17);
  My = type metadata accessor for Feature.FindMy(0);
  v73[3] = My;
  v73[4] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v19 = sub_100018F08(v73);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v19, enum case for Feature.FindMy.separationAlerts(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v73);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v73);
  if ((My & 1) != 0)
  {
    v71 = (int *)v10;
    v72 = a2;
    v70 = v6;
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v20 = v73[0];
    sub_1009A2CF8();
    v22 = v21;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeDurian);
    v25 = v24;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    if (v23 == v27 && v25 == v26)
    {
      swift_bridgeObjectRelease_n(v25, 2);
LABEL_9:

      LOBYTE(v22) = sub_100C1AF20(v20);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v27, v26, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) != 0)
      goto LABEL_9;
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeAccessory);
    v32 = v31;
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    if (v30 == v34 && v32 == v33)
      goto LABEL_13;
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, v34, v33, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v35 & 1) != 0)
      goto LABEL_15;
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeHele);
    v32 = v39;
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    if (v38 == v41 && v32 == v40)
    {
LABEL_13:
      swift_bridgeObjectRelease_n(v32, 2);
LABEL_15:

      swift_bridgeObjectRelease();
      sub_10081BB64((uint64_t)&v16[*(int *)(v14 + 20)], (uint64_t)v9);
      v22 = v71;
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v11 + 48))(v9, 1, v71) != 1)
      {
        sub_1000126EC((uint64_t)v9, (uint64_t)v13, type metadata accessor for BeaconProductInfoRecord);
        LODWORD(v22) = (*(_DWORD *)&v13[v22[17]] >> 11) & 1;
        sub_1000126B0((uint64_t)v13, type metadata accessor for BeaconProductInfoRecord);
        goto LABEL_10;
      }
      v36 = &qword_10110EEB0;
      v37 = (uint64_t)v9;
      goto LABEL_17;
    }
    v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v32, v41, v40, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v42 & 1) != 0)
      goto LABEL_15;
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeSelfBeaconing);
    v45 = v44;
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    if (v43 == v47 && v45 == v46)
    {
      swift_bridgeObjectRelease_n(v45, 2);
      goto LABEL_26;
    }
    v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v45, v47, v46, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v48 & 1) != 0)
    {
LABEL_26:

      v49 = sub_100C1AF2C(v20);
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v49 + 16) && (v50 = sub_100518DB4(1), (v51 & 1) != 0))
      {
        v52 = v50;
        v53 = *(_QWORD *)(v49 + 56);
        v54 = type metadata accessor for FeatureSupportMatrix(0);
        v55 = *(_QWORD *)(v54 - 8);
        v56 = v53 + *(_QWORD *)(v55 + 72) * v52;
        v57 = (uint64_t)v70;
        sub_10005972C(v56, (uint64_t)v70, type metadata accessor for FeatureSupportMatrix);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v55 + 56))(v57, 0, 1, v54);
      }
      else
      {
        v54 = type metadata accessor for FeatureSupportMatrix(0);
        v57 = (uint64_t)v70;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v70, 1, 1, v54);
      }
      swift_bridgeObjectRelease();
      type metadata accessor for FeatureSupportMatrix(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 48))(v57, 1, v54) != 1)
      {
        LOBYTE(v22) = sub_1004A6CF0((uint64_t)v16, v57);
        sub_1000126B0(v57, type metadata accessor for FeatureSupportMatrix);
        goto LABEL_10;
      }
      v36 = &qword_1010FD078;
      v37 = v57;
LABEL_17:
      sub_100004048(v37, v36);
      LOBYTE(v22) = 0;
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeVirtualMeDevice);
    v60 = v59;
    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    if (v58 == v62 && v60 == v61)
    {
      swift_bridgeObjectRelease_n(v60, 2);
LABEL_37:

      LOBYTE(v22) = 0;
      goto LABEL_10;
    }
    v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v58, v60, v62, v61, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v63 & 1) != 0)
      goto LABEL_37;
    v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeNone);
    v66 = v65;
    v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    if (v64 == v68 && v66 == v67)
    {

      swift_bridgeObjectRelease_n(v66, 2);
      LOBYTE(v22) = 0;
    }
    else
    {
      _stringCompareWithSmolCheck(_:_:expecting:)(v64, v66, v68, v67, 0);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LOBYTE(v22) = 0;
    }
  }
  else
  {
    LOBYTE(v22) = 0;
  }
LABEL_10:
  sub_1000126B0((uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
  return v22 & 1;
}

BOOL sub_1004A6CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(_QWORD);
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  BOOL v29;
  uint64_t v31[2];

  v4 = sub_10001A9A8(&qword_1010ECF78);
  __chkstk_darwin(v4);
  v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SystemVersionNumber(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v11);
  v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a1, (uint64_t)v13, v14);
  v15 = (uint64_t *)&v13[*(int *)(v11 + 56)];
  v16 = *v15;
  v17 = v15[1];
  swift_bridgeObjectRetain(v17);
  v18 = sub_10065433C(v16, v17);
  if (v19)
  {
    v22 = v18;
    v23 = v19;
    v24 = v21;
    v31[0] = v20;
    v31[1] = a2;
    v25 = &v13[*(int *)(v11 + 60)];
    v27 = *(_QWORD *)v25;
    v26 = *((_QWORD *)v25 + 1);
    v28 = swift_bridgeObjectRetain(v26);
    SystemVersionNumber.init(rawValue:)(v27, v26, v28);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
      v29 = sub_100ABADF0(v22, v23, v31[0], v24, (uint64_t)v10);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v6, &qword_1010ECF78);
  }
  v29 = 0;
LABEL_6:
  sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
  return v29;
}

uint64_t sub_1004A6EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  _BYTE v23[16];
  _QWORD v24[5];
  _QWORD v25[5];

  v4 = sub_10001A9A8(&qword_101111B80);
  __chkstk_darwin(v4);
  v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25[3] = type metadata accessor for OwnedBeaconRecord(0);
  v25[4] = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
  v7 = sub_100018F08(v25);
  sub_10005972C(a1, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v8 = swift_retain();
  AnyCurrentValuePublisher.value.getter(v24, v8);
  swift_release();
  v9 = LOBYTE(v24[0]);
  sub_100030784((uint64_t)v25, (uint64_t)v24);
  if (v9 != 1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
LABEL_7:
    v13 = sub_100889888();
    v14 = v13[2];
    v15 = type metadata accessor for LeashRecord(0);
    v16 = *(_QWORD *)(v15 - 8);
    if (v14)
    {
      sub_10005972C((uint64_t)v13 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)), (uint64_t)v6, type metadata accessor for LeashRecord);
      v17 = 0;
    }
    else
    {
      v17 = 1;
    }
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v6, v17, 1, v15);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v6, 1, v15) == 1)
    {
      sub_100004048((uint64_t)v6, &qword_101111B80);
    }
    else
    {
      v18 = *(_QWORD *)&v6[*(int *)(v15 + 24)];
      swift_bridgeObjectRetain(v18);
      v19 = sub_1000126B0((uint64_t)v6, type metadata accessor for LeashRecord);
      __chkstk_darwin(v19);
      *(_QWORD *)&v23[-16] = v20;
      v21 = sub_1007EF65C((uint64_t (*)(char *))sub_1004D63F4, (_BOOL8)&v23[-32], v18);
      swift_bridgeObjectRelease();
      if (v21)
      {
        v12 = 0;
        goto LABEL_15;
      }
    }
    v12 = 2;
    goto LABEL_15;
  }
  v10 = sub_10001AA44(v24, v24[3]);
  v11 = sub_1004A7674((uint64_t)v10, a2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
  if ((v11 & 1) == 0)
    goto LABEL_7;
  v12 = 5;
LABEL_15:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
  return v12;
}

uint64_t sub_1004A7170(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _BYTE v20[16];
  _QWORD v21[5];
  _QWORD v22[5];

  v2 = sub_10001A9A8(&qword_101111B80);
  __chkstk_darwin(v2);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22[3] = type metadata accessor for LocalFindableAccessoryRecord(0);
  v22[4] = sub_100006204(&qword_1010F4A80, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E25DE4);
  v5 = sub_100018F08(v22);
  sub_10005972C(a1, (uint64_t)v5, type metadata accessor for LocalFindableAccessoryRecord);
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v6 = swift_retain();
  AnyCurrentValuePublisher.value.getter(v21, v6);
  swift_release();
  v7 = LOBYTE(v21[0]);
  sub_100030784((uint64_t)v22, (uint64_t)v21);
  if (v7 != 1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v21);
LABEL_7:
    v11 = sub_100889888();
    v12 = v11[2];
    v13 = type metadata accessor for LeashRecord(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (v12)
    {
      sub_10005972C((uint64_t)v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), (uint64_t)v4, type metadata accessor for LeashRecord);
      v15 = 0;
    }
    else
    {
      v15 = 1;
    }
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v4, v15, 1, v13);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
    {
      sub_100004048((uint64_t)v4, &qword_101111B80);
    }
    else
    {
      v16 = *(_QWORD *)&v4[*(int *)(v13 + 24)];
      swift_bridgeObjectRetain(v16);
      v17 = sub_1000126B0((uint64_t)v4, type metadata accessor for LeashRecord);
      __chkstk_darwin(v17);
      *(_QWORD *)&v20[-16] = v5;
      v18 = sub_1007EF65C((uint64_t (*)(char *))sub_1004D63F4, (_BOOL8)&v20[-32], v16);
      swift_bridgeObjectRelease();
      if (v18)
      {
        v10 = 0;
        goto LABEL_15;
      }
    }
    v10 = 2;
    goto LABEL_15;
  }
  v8 = sub_10001AA44(v21, v21[3]);
  v9 = sub_1004A8774((uint64_t)v8);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v21);
  if ((v9 & 1) == 0)
    goto LABEL_7;
  v10 = 5;
LABEL_15:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v22);
  return v10;
}

uint64_t sub_1004A73E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  _BYTE v23[16];
  _QWORD v24[5];
  _QWORD v25[5];

  v4 = sub_10001A9A8(&qword_101111B80);
  __chkstk_darwin(v4);
  v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25[3] = type metadata accessor for SharedBeaconRecord(0);
  v25[4] = sub_100006204(&qword_1010F4A70, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F5CC);
  v7 = sub_100018F08(v25);
  sub_10005972C(a1, (uint64_t)v7, type metadata accessor for SharedBeaconRecord);
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v8 = swift_retain();
  AnyCurrentValuePublisher.value.getter(v24, v8);
  swift_release();
  v9 = LOBYTE(v24[0]);
  sub_100030784((uint64_t)v25, (uint64_t)v24);
  if (v9 != 1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
LABEL_7:
    v13 = sub_100889888();
    v14 = v13[2];
    v15 = type metadata accessor for LeashRecord(0);
    v16 = *(_QWORD *)(v15 - 8);
    if (v14)
    {
      sub_10005972C((uint64_t)v13 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)), (uint64_t)v6, type metadata accessor for LeashRecord);
      v17 = 0;
    }
    else
    {
      v17 = 1;
    }
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v6, v17, 1, v15);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v6, 1, v15) == 1)
    {
      sub_100004048((uint64_t)v6, &qword_101111B80);
    }
    else
    {
      v18 = *(_QWORD *)&v6[*(int *)(v15 + 24)];
      swift_bridgeObjectRetain(v18);
      v19 = sub_1000126B0((uint64_t)v6, type metadata accessor for LeashRecord);
      __chkstk_darwin(v19);
      *(_QWORD *)&v23[-16] = v20;
      v21 = sub_1007EF65C((uint64_t (*)(char *))sub_100426430, (_BOOL8)&v23[-32], v18);
      swift_bridgeObjectRelease();
      if (v21)
      {
        v12 = 0;
        goto LABEL_15;
      }
    }
    v12 = 2;
    goto LABEL_15;
  }
  v10 = sub_10001AA44(v24, v24[3]);
  v11 = sub_1004A97B0((uint64_t)v10, a2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
  if ((v11 & 1) == 0)
    goto LABEL_7;
  v12 = 5;
LABEL_15:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
  return v12;
}

uint64_t sub_1004A7674(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  double v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  NSObject *v108;
  os_log_type_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  void (*v114)(char *, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  _QWORD v121[2];
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141[3];
  uint64_t v142;
  uint64_t v143;
  _QWORD v144[4];
  _QWORD v145[5];

  v130 = a2;
  v127 = type metadata accessor for Date(0);
  v126 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v125 = (uint64_t)v121 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for BeaconObservation(0);
  v135 = *(_QWORD *)(v133 - 8);
  v4 = __chkstk_darwin(v133);
  v134 = (uint64_t)v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v121 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)v121 - v9;
  v11 = sub_10001A9A8(&qword_1010EF660);
  v12 = __chkstk_darwin(v11);
  v128 = (uint64_t)v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)v121 - v14;
  v16 = type metadata accessor for UUID(0);
  v132 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v19 = (uint64_t)v121 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v129 = (char *)v121 - v20;
  v21 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v21);
  v23 = (char *)v121 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for OwnedBeaconRecord(0);
  v145[3] = v24;
  v145[4] = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
  v25 = sub_100018F08(v145);
  sub_10005972C(a1, (uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
  v131 = v24;
  LOBYTE(a1) = sub_100A2D38C(*(_QWORD *)((char *)v25 + *(int *)(v24 + 64)), *(_QWORD *)((char *)v25 + *(int *)(v24 + 68)));
  sub_100030784((uint64_t)v145, (uint64_t)v144);
  if ((a1 & 1) != 0)
  {
    v122 = v8;
    v124 = v16;
    v123 = v15;
    sub_10001AA44(v144, v144[3]);
    sub_1009A2CF8();
    v27 = v26;
    v28 = SPBeaconTypeHele;
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v31 = v30;
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    if (v29 == v33 && v31 == v32)
    {

      swift_bridgeObjectRelease_n(v31, 2);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
      v34 = v133;
    }
    else
    {
      v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, v33, v32, 0);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
      v36 = 0;
      v34 = v133;
      if ((v37 & 1) == 0)
        goto LABEL_55;
    }
    if (qword_1010E9D08 != -1)
      goto LABEL_59;
    while (1)
    {
      OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
      v38 = sub_100C1B894(v141[0]);
      swift_bridgeObjectRelease();
      v39 = v124;
      if ((v38 & 1) == 0)
      {
        v36 = 0;
        goto LABEL_55;
      }
      sub_10000F9B8((uint64_t)v25 + *(int *)(v131 + 28), (uint64_t)v23, &qword_1010ED860);
      v40 = v132;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v23, 1, v39) == 1)
      {
        v140 = 0;
        v139 = 0u;
        v138 = 0u;
LABEL_27:
        sub_100004048((uint64_t)&v138, (uint64_t *)&unk_101107010);
        if (qword_1010E9F10 != -1)
          swift_once(&qword_1010E9F10, sub_10075AEB4);
        v54 = type metadata accessor for Logger(0);
        sub_10001A9E8(v54, (uint64_t)qword_1011B75D0);
        v55 = sub_100030784((uint64_t)v145, (uint64_t)v141);
        v56 = Logger.logObject.getter(v55);
        v57 = static os_log_type_t.default.getter(v56);
        if (os_log_type_enabled(v56, v57))
        {
          v58 = (uint8_t *)swift_slowAlloc(12, -1);
          v59 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v138 = v59;
          *(_DWORD *)v58 = 136315138;
          v60 = (char *)sub_10001AA44(v141, v142);
          v61 = v132;
          v62 = v129;
          (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v129, &v60[*(int *)(v131 + 20)], v39);
          v63 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v64 = dispatch thunk of CustomStringConvertible.description.getter(v39, v63);
          v65 = v39;
          v67 = v66;
          (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v65);
          v137 = sub_100016940(v64, v67, (uint64_t *)&v138);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v58 + 4, v58 + 12);
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v141);
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "Can't monitor beacon: %s due to: airpods but missing beacon group.", v58, 0xCu);
          swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v59, -1, -1);
          swift_slowDealloc(v58, -1, -1);
        }
        else
        {
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v141);
        }

        goto LABEL_54;
      }
      v41 = (uint64_t)v129;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v129, v23, v39);
      swift_retain();
      sub_1008259D0(v41, (uint64_t)&v138);
      v42 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
      v42(v41, v39);
      swift_release();
      if (!*((_QWORD *)&v139 + 1))
        goto LABEL_27;
      sub_10000F9FC(&v138, (uint64_t)v141);
      if (qword_1010E9CF0 != -1)
        swift_once(&qword_1010E9CF0, sub_10058CADC);
      v43 = qword_1011B7160;
      v44 = v142;
      v45 = v143;
      sub_10001AA44(v141, v142);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v45);
      v46 = objc_autoreleasePoolPush();
      sub_10058DC14(v43, v19, 0, 0, &v138);
      v121[1] = 0;
      objc_autoreleasePoolPop(v46);
      v47 = (_QWORD *)v138;
      v42(v19, v124);
      v25 = _swiftEmptyArrayStorage;
      *(_QWORD *)&v138 = _swiftEmptyArrayStorage;
      v130 = v47[2];
      if (!v130)
        break;
      v121[0] = v42;
      v48 = 0;
      v23 = (char *)_swiftEmptyArrayStorage;
      v49 = v34;
      while (v48 < v47[2])
      {
        v50 = (*(unsigned __int8 *)(v135 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80);
        v19 = *(_QWORD *)(v135 + 72);
        v25 = v47;
        sub_10005972C((uint64_t)v47 + v50 + v19 * v48, (uint64_t)v10, type metadata accessor for BeaconObservation);
        sub_100374684();
        v137 = Set.init(minimumCapacity:)(2);
        v34 = (unint64_t)type metadata accessor for BeaconObservation;
        sub_100A0D090(&v136, 37);
        sub_100A0D090(&v136, 38);
        v51 = v49;
        v52 = sub_100A07E5C(v10[*(int *)(v49 + 24)], v137);
        swift_bridgeObjectRelease();
        if (v52)
        {
          sub_1000126EC((uint64_t)v10, v134, type metadata accessor for BeaconObservation);
          if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
            sub_10009AAC8(0, *((_QWORD *)v23 + 2) + 1, 1);
          v23 = (char *)v138;
          v34 = *(_QWORD *)(v138 + 16);
          v53 = *(_QWORD *)(v138 + 24);
          v47 = v25;
          if (v34 >= v53 >> 1)
          {
            sub_10009AAC8(v53 > 1, v34 + 1, 1);
            v23 = (char *)v138;
          }
          *((_QWORD *)v23 + 2) = v34 + 1;
          sub_1000126EC(v134, (uint64_t)&v23[v50 + v34 * v19], type metadata accessor for BeaconObservation);
          v49 = v133;
        }
        else
        {
          sub_1000126B0((uint64_t)v10, type metadata accessor for BeaconObservation);
          v49 = v51;
          v47 = v25;
        }
        if (v130 == ++v48)
        {
          v25 = (_QWORD *)v138;
          v42 = (void (*)(uint64_t, uint64_t))v121[0];
          goto LABEL_35;
        }
      }
      __break(1u);
LABEL_59:
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    }
    v49 = v34;
LABEL_35:
    swift_bridgeObjectRelease();
    v68 = (uint64_t)v123;
    sub_100A797E8((uint64_t)v25, (uint64_t)v123);
    swift_release();
    v69 = v128;
    sub_10000F9B8(v68, v128, &qword_1010EF660);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v69, 1, v49) == 1)
    {
      sub_100004048(v69, &qword_1010EF660);
      if (qword_1010E9F10 != -1)
        swift_once(&qword_1010E9F10, sub_10075AEB4);
      v70 = type metadata accessor for Logger(0);
      sub_10001A9E8(v70, (uint64_t)qword_1011B75D0);
      v71 = sub_100030784((uint64_t)v145, (uint64_t)&v138);
      v72 = Logger.logObject.getter(v71);
      v73 = static os_log_type_t.default.getter(v72);
      if (os_log_type_enabled(v72, v73))
      {
        v74 = (uint8_t *)swift_slowAlloc(12, -1);
        v75 = swift_slowAlloc(32, -1);
        v137 = v75;
        *(_DWORD *)v74 = 136315138;
        v76 = (char *)sub_10001AA44(&v138, *((uint64_t *)&v139 + 1));
        v77 = v129;
        v78 = v124;
        (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v129, &v76[*(int *)(v131 + 20)], v124);
        v79 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v80 = dispatch thunk of CustomStringConvertible.description.getter(v78, v79);
        v81 = (void (*)(char *, uint64_t))v42;
        v82 = v80;
        v84 = v83;
        v81(v77, v78);
        v136 = sub_100016940(v82, v84, &v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v74 + 4, v74 + 12);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v138);
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "Can't monitor beacon: %s due to: airpods but missing last BT observation.", v74, 0xCu);
        swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v75, -1, -1);
        swift_slowDealloc(v74, -1, -1);

        v85 = (uint64_t)v123;
        goto LABEL_53;
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v138);
LABEL_52:
      v85 = v68;
LABEL_53:
      sub_100004048(v85, &qword_1010EF660);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v141);
LABEL_54:
      v36 = 1;
      goto LABEL_55;
    }
    v86 = v69;
    v87 = (uint64_t)v122;
    sub_1000126EC(v86, (uint64_t)v122, type metadata accessor for BeaconObservation);
    v88 = v125;
    static Date.trustedNow.getter(v125);
    v89 = Date.timeIntervalSince(_:)(v87 + *(int *)(v49 + 20));
    (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v88, v127);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    sub_100C1B888(v138);
    v91 = v90;
    swift_bridgeObjectRelease();
    if (v91 < v89)
    {
      if (qword_1010E9F10 != -1)
        swift_once(&qword_1010E9F10, sub_10075AEB4);
      v92 = type metadata accessor for Logger(0);
      sub_10001A9E8(v92, (uint64_t)qword_1011B75D0);
      v93 = sub_100030784((uint64_t)v145, (uint64_t)&v138);
      v94 = Logger.logObject.getter(v93);
      v95 = static os_log_type_t.default.getter(v94);
      if (os_log_type_enabled(v94, v95))
      {
        v96 = swift_slowAlloc(32, -1);
        v97 = swift_slowAlloc(32, -1);
        v137 = v97;
        *(_DWORD *)v96 = 136315650;
        v135 = v96 + 4;
        v98 = (char *)sub_10001AA44(&v138, *((uint64_t *)&v139 + 1));
        v99 = v129;
        v100 = (void (*)(char *, uint64_t))v42;
        v101 = v124;
        (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v129, &v98[*(int *)(v131 + 20)], v124);
        v102 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v103 = dispatch thunk of CustomStringConvertible.description.getter(v101, v102);
        v105 = v104;
        v100(v99, v101);
        v136 = sub_100016940(v103, v105, &v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v135, v96 + 12);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v138);
        *(_WORD *)(v96 + 12) = 2048;
        v136 = *(_QWORD *)&v89;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v96 + 14, v96 + 22);
        *(_WORD *)(v96 + 22) = 2048;
        v136 = *(_QWORD *)&v91;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v96 + 24, v96 + 32);
        _os_log_impl((void *)&_mh_execute_header, v94, v95, "Can't monitor beacon: %s due to: airpods but expired (%f > %f sec ago)", (uint8_t *)v96, 0x20u);
        swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v97, -1, -1);
        swift_slowDealloc(v96, -1, -1);

      }
      else
      {

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v138);
      }
      sub_1000126B0((uint64_t)v122, type metadata accessor for BeaconObservation);
      goto LABEL_52;
    }
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v106 = type metadata accessor for Logger(0);
    sub_10001A9E8(v106, (uint64_t)qword_1011B75D0);
    v107 = sub_100030784((uint64_t)v145, (uint64_t)&v138);
    v108 = Logger.logObject.getter(v107);
    v109 = static os_log_type_t.default.getter(v108);
    if (os_log_type_enabled(v108, v109))
    {
      v110 = swift_slowAlloc(32, -1);
      v111 = swift_slowAlloc(32, -1);
      v137 = v111;
      *(_DWORD *)v110 = 136315650;
      v135 = v110 + 4;
      v112 = (char *)sub_10001AA44(&v138, *((uint64_t *)&v139 + 1));
      v113 = v129;
      v114 = (void (*)(char *, uint64_t))v42;
      v115 = v124;
      (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v129, &v112[*(int *)(v131 + 20)], v124);
      v116 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v117 = dispatch thunk of CustomStringConvertible.description.getter(v115, v116);
      v119 = v118;
      v114(v113, v115);
      v136 = sub_100016940(v117, v119, &v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v135, v110 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v138);
      *(_WORD *)(v110 + 12) = 2048;
      v136 = *(_QWORD *)&v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v110 + 14, v110 + 22);
      *(_WORD *)(v110 + 22) = 2048;
      v136 = *(_QWORD *)&v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v110 + 24, v110 + 32);
      _os_log_impl((void *)&_mh_execute_header, v108, v109, "Will monitor beacon: %s due to: airpods, not expired (%f < %f sec ago)", (uint8_t *)v110, 0x20u);
      swift_arrayDestroy(v111, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v111, -1, -1);
      swift_slowDealloc(v110, -1, -1);

    }
    else
    {

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v138);
    }
    sub_1000126B0((uint64_t)v122, type metadata accessor for BeaconObservation);
    sub_100004048(v68, &qword_1010EF660);
    v35 = v141;
  }
  else
  {
    v35 = v144;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v35);
  v36 = 0;
LABEL_55:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v145);
  return v36;
}

uint64_t sub_1004A8774(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint8_t *v72;
  uint64_t v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  double v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t (*)(uint64_t), uint64_t);
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint8_t *v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135[3];
  uint64_t v136;
  uint64_t v137;
  _QWORD v138[5];

  v2 = type metadata accessor for Date(0);
  v119 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v118 = (uint64_t)&v114 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for BeaconObservation(0);
  v129 = *(uint8_t **)(v126 - 8);
  v4 = __chkstk_darwin(v126);
  v128 = (uint64_t)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v121 = (uint64_t)&v114 - v7;
  __chkstk_darwin(v6);
  v9 = (char *)&v114 - v8;
  v10 = sub_10001A9A8(&qword_1010EF660);
  v11 = __chkstk_darwin(v10);
  v120 = (uint64_t)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v122 = (uint64_t)&v114 - v13;
  v124 = type metadata accessor for UUID(0);
  v125 = *(_QWORD *)(v124 - 8);
  v14 = __chkstk_darwin(v124);
  v16 = (uint64_t (*)(uint64_t))((char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v123 = (char *)&v114 - v17;
  v18 = sub_10001A9A8(&qword_1010ED860);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v114 - v22;
  v24 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v138[3] = v24;
  v138[4] = sub_100006204(&qword_1010F4A80, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E25DE4);
  v25 = sub_100018F08(v138);
  sub_10005972C(a1, (uint64_t)v25, type metadata accessor for LocalFindableAccessoryRecord);
  if (!sub_100A2D38C(*(_QWORD *)((char *)v25 + *(int *)(v24 + 40)), *(_QWORD *)((char *)v25 + *(int *)(v24 + 44))))
  {
LABEL_10:
    v33 = 0;
    goto LABEL_11;
  }
  v26 = SPBeaconTypeHele;
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeLocalFindable);
  v29 = v28;
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  if (v27 == v31 && v29 == v30)
  {
    swift_bridgeObjectRelease_n(v29, 2);
  }
  else
  {
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, v31, v30, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v33 = 0;
    if ((v32 & 1) == 0)
      goto LABEL_11;
  }
  if (qword_1010E9D08 != -1)
    goto LABEL_58;
  while (1)
  {
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v34 = sub_100C1B894(v135[0]);
    swift_bridgeObjectRelease();
    if ((v34 & 1) == 0)
      goto LABEL_10;
    v35 = v125;
    v36 = v124;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v125 + 56))(v23, 1, 1, v124);
    sub_10000F9B8((uint64_t)v23, (uint64_t)v21, &qword_1010ED860);
    v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v21, 1, v36);
    v117 = v2;
    if (v37 == 1)
    {
      v134 = 0;
      v132 = 0u;
      v133 = 0u;
      swift_retain();
    }
    else
    {
      v2 = (unint64_t)v123;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v123, v21, v36);
      swift_retain();
      sub_1008259D0(v2, (uint64_t)&v132);
      (*(void (**)(unint64_t, uint64_t))(v35 + 8))(v2, v36);
    }
    sub_100004048((uint64_t)v23, &qword_1010ED860);
    swift_release();
    if (!*((_QWORD *)&v133 + 1))
    {
      sub_100004048((uint64_t)&v132, (uint64_t *)&unk_101107010);
      if (qword_1010E9F10 != -1)
        swift_once(&qword_1010E9F10, sub_10075AEB4);
      v51 = type metadata accessor for Logger(0);
      sub_10001A9E8(v51, (uint64_t)qword_1011B75D0);
      v52 = sub_100030784((uint64_t)v138, (uint64_t)v135);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.default.getter(v53);
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc(12, -1);
        v56 = v36;
        v57 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v132 = v57;
        *(_DWORD *)v55 = 136315138;
        v129 = v55 + 4;
        v58 = sub_10001AA44(v135, v136);
        v59 = v125;
        v60 = v123;
        (*(void (**)(char *, _QWORD *, uint64_t))(v125 + 16))(v123, v58, v56);
        v61 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v62 = dispatch thunk of CustomStringConvertible.description.getter(v56, v61);
        v64 = v63;
        (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v56);
        v131 = sub_100016940(v62, v64, (uint64_t *)&v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, &v132, v129, v55 + 12);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v135);
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "Can't monitor beacon: %s due to: airpods but missing beacon group.", v55, 0xCu);
        swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v57, -1, -1);
        swift_slowDealloc(v55, -1, -1);
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v135);
      }

      goto LABEL_54;
    }
    sub_10000F9FC(&v132, (uint64_t)v135);
    if (qword_1010E9CF0 != -1)
      swift_once(&qword_1010E9CF0, sub_10058CADC);
    v39 = qword_1011B7160;
    v40 = v136;
    v41 = v137;
    sub_10001AA44(v135, v136);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v41);
    v42 = objc_autoreleasePoolPush();
    sub_10058DC14(v39, (uint64_t)v16, 0, 0, &v132);
    v116 = 0;
    objc_autoreleasePoolPop(v42);
    v43 = v132;
    v44 = v125;
    v115 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(v125 + 8);
    v115(v16, v124);
    v45 = _swiftEmptyArrayStorage;
    *(_QWORD *)&v132 = _swiftEmptyArrayStorage;
    v127 = *(_QWORD *)(v43 + 16);
    if (!v127)
      break;
    v46 = 0;
    v21 = (char *)_swiftEmptyArrayStorage;
    v16 = type metadata accessor for BeaconObservation;
    v23 = (char *)v126;
    while (v46 < *(_QWORD *)(v43 + 16))
    {
      v2 = (v129[80] + 32) & ~(unint64_t)v129[80];
      v47 = *((_QWORD *)v129 + 9);
      sub_10005972C(v43 + v2 + v47 * v46, (uint64_t)v9, type metadata accessor for BeaconObservation);
      sub_100374684();
      v131 = Set.init(minimumCapacity:)(2);
      sub_100A0D090(&v130, 37);
      sub_100A0D090(&v130, 38);
      v48 = sub_100A07E5C(v9[*((int *)v23 + 6)], v131);
      swift_bridgeObjectRelease();
      if (v48)
      {
        sub_1000126EC((uint64_t)v9, v128, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
          sub_10009AAC8(0, *((_QWORD *)v21 + 2) + 1, 1);
        v21 = (char *)v132;
        v50 = *(_QWORD *)(v132 + 16);
        v49 = *(_QWORD *)(v132 + 24);
        if (v50 >= v49 >> 1)
        {
          sub_10009AAC8(v49 > 1, v50 + 1, 1);
          v21 = (char *)v132;
        }
        *((_QWORD *)v21 + 2) = v50 + 1;
        sub_1000126EC(v128, (uint64_t)&v21[v2 + v50 * v47], type metadata accessor for BeaconObservation);
        v23 = (char *)v126;
      }
      else
      {
        sub_1000126B0((uint64_t)v9, type metadata accessor for BeaconObservation);
      }
      if (v127 == ++v46)
      {
        v45 = (_QWORD *)v132;
        v44 = v125;
        goto LABEL_34;
      }
    }
    __break(1u);
LABEL_58:
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  }
  v23 = (char *)v126;
LABEL_34:
  swift_bridgeObjectRelease();
  v65 = v122;
  sub_100A797E8((uint64_t)v45, v122);
  swift_release();
  v66 = v120;
  sub_10000F9B8(v65, v120, &qword_1010EF660);
  if ((*((unsigned int (**)(uint64_t, uint64_t, char *))v129 + 6))(v66, 1, v23) == 1)
  {
    sub_100004048(v66, &qword_1010EF660);
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v67 = type metadata accessor for Logger(0);
    sub_10001A9E8(v67, (uint64_t)qword_1011B75D0);
    v68 = sub_100030784((uint64_t)v138, (uint64_t)&v132);
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.default.getter(v69);
    if (os_log_type_enabled(v69, v70))
    {
      v71 = v44;
      v72 = (uint8_t *)swift_slowAlloc(12, -1);
      v73 = swift_slowAlloc(32, -1);
      v131 = v73;
      *(_DWORD *)v72 = 136315138;
      v74 = sub_10001AA44(&v132, *((uint64_t *)&v133 + 1));
      v75 = v123;
      v76 = v124;
      (*(void (**)(char *, _QWORD *, uint64_t))(v71 + 16))(v123, v74, v124);
      v77 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v78 = dispatch thunk of CustomStringConvertible.description.getter(v76, v77);
      v80 = v79;
      v115((uint64_t (*)(uint64_t))v75, v76);
      v130 = sub_100016940(v78, v80, &v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v72 + 4, v72 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v132);
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Can't monitor beacon: %s due to: airpods but missing last BT observation.", v72, 0xCu);
      swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1, -1);
      swift_slowDealloc(v72, -1, -1);

      v81 = v122;
      goto LABEL_53;
    }

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v132);
LABEL_52:
    v81 = v65;
LABEL_53:
    sub_100004048(v81, &qword_1010EF660);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v135);
LABEL_54:
    v33 = 1;
    goto LABEL_11;
  }
  v82 = v66;
  v83 = v121;
  sub_1000126EC(v82, v121, type metadata accessor for BeaconObservation);
  v84 = v118;
  static Date.trustedNow.getter(v118);
  v85 = Date.timeIntervalSince(_:)(v83 + *((int *)v23 + 5));
  (*(void (**)(uint64_t, unint64_t))(v119 + 8))(v84, v117);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B888(v132);
  v87 = v86;
  swift_bridgeObjectRelease();
  if (v87 < v85)
  {
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v88 = type metadata accessor for Logger(0);
    sub_10001A9E8(v88, (uint64_t)qword_1011B75D0);
    v89 = sub_100030784((uint64_t)v138, (uint64_t)&v132);
    v90 = Logger.logObject.getter(v89);
    v91 = static os_log_type_t.default.getter(v90);
    if (os_log_type_enabled(v90, v91))
    {
      v92 = swift_slowAlloc(32, -1);
      v93 = swift_slowAlloc(32, -1);
      v131 = v93;
      *(_DWORD *)v92 = 136315650;
      v94 = sub_10001AA44(&v132, *((uint64_t *)&v133 + 1));
      v95 = v123;
      v96 = v124;
      (*(void (**)(char *, _QWORD *, uint64_t))(v125 + 16))(v123, v94, v124);
      v97 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v98 = dispatch thunk of CustomStringConvertible.description.getter(v96, v97);
      v100 = v99;
      v115((uint64_t (*)(uint64_t))v95, v96);
      v130 = sub_100016940(v98, v100, &v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v92 + 4, v92 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v132);
      *(_WORD *)(v92 + 12) = 2048;
      v130 = *(_QWORD *)&v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v92 + 14, v92 + 22);
      *(_WORD *)(v92 + 22) = 2048;
      v130 = *(_QWORD *)&v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v92 + 24, v92 + 32);
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "Can't monitor beacon: %s due to: airpods but expired (%f > %f sec ago)", (uint8_t *)v92, 0x20u);
      swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v93, -1, -1);
      swift_slowDealloc(v92, -1, -1);

    }
    else
    {

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v132);
    }
    sub_1000126B0(v121, type metadata accessor for BeaconObservation);
    goto LABEL_52;
  }
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v101 = type metadata accessor for Logger(0);
  sub_10001A9E8(v101, (uint64_t)qword_1011B75D0);
  v102 = sub_100030784((uint64_t)v138, (uint64_t)&v132);
  v103 = Logger.logObject.getter(v102);
  v104 = static os_log_type_t.default.getter(v103);
  if (os_log_type_enabled(v103, v104))
  {
    v105 = swift_slowAlloc(32, -1);
    v106 = swift_slowAlloc(32, -1);
    v131 = v106;
    *(_DWORD *)v105 = 136315650;
    v107 = sub_10001AA44(&v132, *((uint64_t *)&v133 + 1));
    v108 = v123;
    v109 = v124;
    (*(void (**)(char *, _QWORD *, uint64_t))(v125 + 16))(v123, v107, v124);
    v110 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v111 = dispatch thunk of CustomStringConvertible.description.getter(v109, v110);
    v113 = v112;
    v115((uint64_t (*)(uint64_t))v108, v109);
    v130 = sub_100016940(v111, v113, &v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v105 + 4, v105 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v132);
    *(_WORD *)(v105 + 12) = 2048;
    v130 = *(_QWORD *)&v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v105 + 14, v105 + 22);
    *(_WORD *)(v105 + 22) = 2048;
    v130 = *(_QWORD *)&v87;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v105 + 24, v105 + 32);
    _os_log_impl((void *)&_mh_execute_header, v103, v104, "Will monitor beacon: %s due to: airpods, not expired (%f < %f sec ago)", (uint8_t *)v105, 0x20u);
    swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v106, -1, -1);
    swift_slowDealloc(v105, -1, -1);

  }
  else
  {

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v132);
  }
  sub_1000126B0(v121, type metadata accessor for BeaconObservation);
  sub_100004048(v65, &qword_1010EF660);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v135);
  v33 = 0;
LABEL_11:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v138);
  return v33;
}

uint64_t sub_1004A97B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  double v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  void (*v95)(char *, uint64_t);
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  void (*v109)(char *, uint64_t);
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t);
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint8_t *v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137[3];
  uint64_t v138;
  uint64_t v139;
  _QWORD v140[4];
  _QWORD v141[5];

  v125 = a2;
  v123 = type metadata accessor for Date(0);
  v122 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v121 = (uint64_t)&v116 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for BeaconObservation(0);
  v131 = *(uint8_t **)(v129 - 8);
  v4 = __chkstk_darwin(v129);
  v130 = (uint64_t)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v116 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v116 - v9;
  v11 = sub_10001A9A8(&qword_1010EF660);
  v12 = __chkstk_darwin(v11);
  v124 = (uint64_t)&v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v116 - v14;
  v128 = type metadata accessor for UUID(0);
  v126 = *(_QWORD *)(v128 - 8);
  v16 = __chkstk_darwin(v128);
  v18 = (uint64_t)&v116 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v116 - v19;
  v21 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v21);
  v23 = (char *)&v116 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for SharedBeaconRecord(0);
  v141[3] = v24;
  v141[4] = sub_100006204(&qword_1010F4A70, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F5CC);
  v25 = sub_100018F08(v141);
  sub_10005972C(a1, (uint64_t)v25, type metadata accessor for SharedBeaconRecord);
  v127 = v24;
  LOBYTE(a1) = sub_100A2D38C(*(_QWORD *)((char *)v25 + *(int *)(v24 + 44)), *(_QWORD *)((char *)v25 + *(int *)(v24 + 48)));
  sub_100030784((uint64_t)v141, (uint64_t)v140);
  if ((a1 & 1) != 0)
  {
    v120 = v20;
    v119 = v8;
    sub_10001AA44(v140, v140[3]);
    v26 = sub_100D3F40C();
    v27 = SPBeaconTypeHele;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v30 = v29;
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    if (v28 == v32 && v30 == v31)
    {
      swift_bridgeObjectRelease_n(v30, 2);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);
    }
    else
    {
      v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v32, v31, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);
      v34 = 0;
      if ((v35 & 1) == 0)
        goto LABEL_54;
    }
    if (qword_1010E9D08 != -1)
      goto LABEL_58;
    while (1)
    {
      OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
      v36 = sub_100C1B894(v137[0]);
      swift_bridgeObjectRelease();
      if ((v36 & 1) == 0)
      {
        v34 = 0;
        goto LABEL_54;
      }
      sub_10000F9B8((uint64_t)v25 + *(int *)(v127 + 76), (uint64_t)v23, &qword_1010ED860);
      v37 = v126;
      v38 = v128;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v126 + 48))(v23, 1, v128) == 1)
      {
        v136 = 0;
        v135 = 0u;
        v134 = 0u;
        v39 = (uint64_t)v120;
LABEL_27:
        sub_100004048((uint64_t)&v134, (uint64_t *)&unk_101107010);
        if (qword_1010E9F10 != -1)
          swift_once(&qword_1010E9F10, sub_10075AEB4);
        v52 = type metadata accessor for Logger(0);
        sub_10001A9E8(v52, (uint64_t)qword_1011B75D0);
        v53 = sub_100030784((uint64_t)v141, (uint64_t)v137);
        v54 = Logger.logObject.getter(v53);
        v55 = static os_log_type_t.default.getter(v54);
        if (os_log_type_enabled(v54, v55))
        {
          v56 = (uint8_t *)swift_slowAlloc(12, -1);
          v57 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v134 = v57;
          *(_DWORD *)v56 = 136315138;
          v58 = v39;
          v131 = v56 + 4;
          v59 = (char *)sub_10001AA44(v137, v138);
          v60 = v128;
          (*(void (**)(uint64_t, char *, uint64_t))(v37 + 16))(v39, &v59[*(int *)(v127 + 20)], v128);
          v61 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v62 = dispatch thunk of CustomStringConvertible.description.getter(v60, v61);
          v64 = v63;
          (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v58, v60);
          v133 = sub_100016940(v62, v64, (uint64_t *)&v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v131, v56 + 12);
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v137);
          _os_log_impl((void *)&_mh_execute_header, v54, v55, "Can't monitor beacon: %s due to: airpods but missing beacon group.", v56, 0xCu);
          swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v57, -1, -1);
          swift_slowDealloc(v56, -1, -1);
        }
        else
        {
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v137);
        }

        goto LABEL_53;
      }
      v39 = (uint64_t)v120;
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v120, v23, v38);
      swift_retain();
      sub_1008259D0(v39, (uint64_t)&v134);
      v40 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
      v40(v39, v38);
      swift_release();
      if (!*((_QWORD *)&v135 + 1))
        goto LABEL_27;
      v118 = v15;
      sub_10000F9FC(&v134, (uint64_t)v137);
      if (qword_1010E9CF0 != -1)
        swift_once(&qword_1010E9CF0, sub_10058CADC);
      v41 = qword_1011B7160;
      v42 = v138;
      v43 = v139;
      sub_10001AA44(v137, v138);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v43);
      v44 = objc_autoreleasePoolPush();
      sub_10058DC14(v41, v18, 0, 0, &v134);
      v116 = 0;
      objc_autoreleasePoolPop(v44);
      v45 = v134;
      v40(v18, v128);
      v46 = _swiftEmptyArrayStorage;
      *(_QWORD *)&v134 = _swiftEmptyArrayStorage;
      v47 = v129;
      v125 = *(_QWORD *)(v45 + 16);
      v117 = v40;
      if (!v125)
        break;
      v48 = 0;
      v23 = (char *)_swiftEmptyArrayStorage;
      v25 = type metadata accessor for BeaconObservation;
      while (v48 < *(_QWORD *)(v45 + 16))
      {
        v15 = (char *)((v131[80] + 32) & ~(unint64_t)v131[80]);
        v49 = *((_QWORD *)v131 + 9);
        sub_10005972C((uint64_t)&v15[v45 + v49 * v48], (uint64_t)v10, type metadata accessor for BeaconObservation);
        sub_100374684();
        v133 = Set.init(minimumCapacity:)(2);
        sub_100A0D090(&v132, 37);
        sub_100A0D090(&v132, 38);
        v18 = sub_100A07E5C(v10[*(int *)(v47 + 24)], v133);
        swift_bridgeObjectRelease();
        if ((v18 & 1) != 0)
        {
          sub_1000126EC((uint64_t)v10, v130, type metadata accessor for BeaconObservation);
          if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
            sub_10009AAC8(0, *((_QWORD *)v23 + 2) + 1, 1);
          v23 = (char *)v134;
          v51 = *(_QWORD *)(v134 + 16);
          v50 = *(_QWORD *)(v134 + 24);
          v18 = v51 + 1;
          if (v51 >= v50 >> 1)
          {
            sub_10009AAC8(v50 > 1, v51 + 1, 1);
            v23 = (char *)v134;
          }
          *((_QWORD *)v23 + 2) = v18;
          sub_1000126EC(v130, (uint64_t)&v15[(_QWORD)v23 + v51 * v49], type metadata accessor for BeaconObservation);
          v47 = v129;
        }
        else
        {
          sub_1000126B0((uint64_t)v10, type metadata accessor for BeaconObservation);
        }
        if (v125 == ++v48)
        {
          v46 = (_QWORD *)v134;
          v40 = v117;
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_58:
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    }
LABEL_34:
    swift_bridgeObjectRelease();
    v65 = (uint64_t)v118;
    sub_100A797E8((uint64_t)v46, (uint64_t)v118);
    swift_release();
    v66 = v124;
    sub_10000F9B8(v65, v124, &qword_1010EF660);
    if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v131 + 6))(v66, 1, v47) == 1)
    {
      sub_100004048(v66, &qword_1010EF660);
      v67 = v128;
      if (qword_1010E9F10 != -1)
        swift_once(&qword_1010E9F10, sub_10075AEB4);
      v68 = type metadata accessor for Logger(0);
      sub_10001A9E8(v68, (uint64_t)qword_1011B75D0);
      v69 = sub_100030784((uint64_t)v141, (uint64_t)&v134);
      v70 = Logger.logObject.getter(v69);
      v71 = static os_log_type_t.default.getter(v70);
      if (os_log_type_enabled(v70, v71))
      {
        v72 = (uint8_t *)swift_slowAlloc(12, -1);
        v73 = swift_slowAlloc(32, -1);
        v133 = v73;
        *(_DWORD *)v72 = 136315138;
        v74 = (char *)sub_10001AA44(&v134, *((uint64_t *)&v135 + 1));
        v75 = v120;
        (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v120, &v74[*(int *)(v127 + 20)], v67);
        v76 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v77 = dispatch thunk of CustomStringConvertible.description.getter(v67, v76);
        v79 = v78;
        v117((uint64_t)v75, v67);
        v132 = sub_100016940(v77, v79, &v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v72 + 4, v72 + 12);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v134);
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "Can't monitor beacon: %s due to: airpods but missing last BT observation.", v72, 0xCu);
        swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v73, -1, -1);
        swift_slowDealloc(v72, -1, -1);

        v80 = (uint64_t)v118;
        goto LABEL_52;
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v134);
LABEL_51:
      v80 = v65;
LABEL_52:
      sub_100004048(v80, &qword_1010EF660);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v137);
LABEL_53:
      v34 = 1;
      goto LABEL_54;
    }
    v81 = v66;
    v82 = (uint64_t)v119;
    sub_1000126EC(v81, (uint64_t)v119, type metadata accessor for BeaconObservation);
    v83 = v121;
    static Date.trustedNow.getter(v121);
    v84 = Date.timeIntervalSince(_:)(v82 + *(int *)(v47 + 20));
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v83, v123);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    sub_100C1B888(v134);
    v86 = v85;
    swift_bridgeObjectRelease();
    if (v86 < v84)
    {
      v87 = v128;
      if (qword_1010E9F10 != -1)
        swift_once(&qword_1010E9F10, sub_10075AEB4);
      v88 = type metadata accessor for Logger(0);
      sub_10001A9E8(v88, (uint64_t)qword_1011B75D0);
      v89 = sub_100030784((uint64_t)v141, (uint64_t)&v134);
      v90 = Logger.logObject.getter(v89);
      v91 = static os_log_type_t.default.getter(v90);
      if (os_log_type_enabled(v90, v91))
      {
        v92 = swift_slowAlloc(32, -1);
        v93 = swift_slowAlloc(32, -1);
        v133 = v93;
        *(_DWORD *)v92 = 136315650;
        v131 = (uint8_t *)(v92 + 4);
        v94 = (char *)sub_10001AA44(&v134, *((uint64_t *)&v135 + 1));
        v95 = (void (*)(char *, uint64_t))v40;
        v96 = v120;
        (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v120, &v94[*(int *)(v127 + 20)], v87);
        v97 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v98 = dispatch thunk of CustomStringConvertible.description.getter(v87, v97);
        v100 = v99;
        v95(v96, v87);
        v132 = sub_100016940(v98, v100, &v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v131, v92 + 12);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v134);
        *(_WORD *)(v92 + 12) = 2048;
        v132 = *(_QWORD *)&v84;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v92 + 14, v92 + 22);
        *(_WORD *)(v92 + 22) = 2048;
        v132 = *(_QWORD *)&v86;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v92 + 24, v92 + 32);
        _os_log_impl((void *)&_mh_execute_header, v90, v91, "Can't monitor beacon: %s due to: airpods but expired (%f > %f sec ago)", (uint8_t *)v92, 0x20u);
        swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v93, -1, -1);
        swift_slowDealloc(v92, -1, -1);

      }
      else
      {

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v134);
      }
      sub_1000126B0((uint64_t)v119, type metadata accessor for BeaconObservation);
      goto LABEL_51;
    }
    v101 = v128;
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v102 = type metadata accessor for Logger(0);
    sub_10001A9E8(v102, (uint64_t)qword_1011B75D0);
    v103 = sub_100030784((uint64_t)v141, (uint64_t)&v134);
    v104 = Logger.logObject.getter(v103);
    v105 = static os_log_type_t.default.getter(v104);
    if (os_log_type_enabled(v104, v105))
    {
      v106 = swift_slowAlloc(32, -1);
      v107 = swift_slowAlloc(32, -1);
      v133 = v107;
      *(_DWORD *)v106 = 136315650;
      v131 = (uint8_t *)(v106 + 4);
      v108 = (char *)sub_10001AA44(&v134, *((uint64_t *)&v135 + 1));
      v109 = (void (*)(char *, uint64_t))v40;
      v110 = v120;
      (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v120, &v108[*(int *)(v127 + 20)], v101);
      v111 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v112 = dispatch thunk of CustomStringConvertible.description.getter(v101, v111);
      v114 = v113;
      v109(v110, v101);
      v132 = sub_100016940(v112, v114, &v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v131, v106 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v134);
      *(_WORD *)(v106 + 12) = 2048;
      v132 = *(_QWORD *)&v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v106 + 14, v106 + 22);
      *(_WORD *)(v106 + 22) = 2048;
      v132 = *(_QWORD *)&v86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v106 + 24, v106 + 32);
      _os_log_impl((void *)&_mh_execute_header, v104, v105, "Will monitor beacon: %s due to: airpods, not expired (%f < %f sec ago)", (uint8_t *)v106, 0x20u);
      swift_arrayDestroy(v107, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v107, -1, -1);
      swift_slowDealloc(v106, -1, -1);

    }
    else
    {

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v134);
    }
    sub_1000126B0((uint64_t)v119, type metadata accessor for BeaconObservation);
    sub_100004048(v65, &qword_1010EF660);
    v33 = v137;
  }
  else
  {
    v33 = v140;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
  v34 = 0;
LABEL_54:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v141);
  return v34;
}

uint64_t sub_1004AA86C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  v9 = sub_100018F08(&v12);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v9, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return sub_10000F9FC(&v12, v10 + 40 * a1 + 32);
}

void *sub_1004AA8E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  void (*v80)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  int EnumCaseMultiPayload;
  uint64_t My;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  void (*v107)(char *, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v113;
  uint64_t v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  void (*v117)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  char v127;
  char v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  BOOL v148;
  int v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  uint64_t v180[2];
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _BYTE v184[8];
  uint64_t v185;
  _QWORD v186[5];

  v178 = (char *)a2;
  v179 = (char *)a1;
  v168 = type metadata accessor for MemberSharingCircle(0);
  v167 = *(_QWORD *)(v168 - 8);
  v2 = __chkstk_darwin(v168);
  v4 = (char *)&v150 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v150 - v5;
  v7 = sub_10001A9A8(&qword_10110EEB0);
  __chkstk_darwin(v7);
  v169 = (char *)&v150 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = type metadata accessor for LocalFindableAccessoryRecord(0);
  __chkstk_darwin(v160);
  v159 = (char *)&v150 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_10001A9A8((uint64_t *)&unk_1011057F0);
  v164 = *(_QWORD *)(v175 - 8);
  v10 = __chkstk_darwin(v175);
  v161 = (char *)&v150 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v163 = (uint64_t)&v150 - v12;
  v13 = sub_10001A9A8(&qword_1010FB1F0);
  v14 = __chkstk_darwin(v13);
  v162 = (char *)&v150 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v165 = (uint64_t)&v150 - v16;
  v17 = sub_10001A9A8((uint64_t *)&unk_101111440);
  v18 = __chkstk_darwin(v17);
  v166 = (uint64_t)&v150 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v158 = (uint64_t)&v150 - v20;
  v21 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v21);
  v172 = (char *)&v150 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = (char *)sub_10001A9A8((uint64_t *)&unk_1011115B0);
  v155 = *((_QWORD *)v156 - 1);
  v23 = __chkstk_darwin(v156);
  v153 = (char *)&v150 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v154 = (uint64_t)&v150 - v25;
  v173 = type metadata accessor for URL(0);
  v176 = *(_QWORD *)(v173 - 8);
  v26 = __chkstk_darwin(v173);
  v171 = (char *)&v150 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v170 = (char *)&v150 - v29;
  __chkstk_darwin(v28);
  v177 = (char *)&v150 - v30;
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F77B0);
  v32 = __chkstk_darwin(v31);
  v151 = (char *)&v150 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v152 = (uint64_t)&v150 - v34;
  v174 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v174);
  v36 = (char *)&v150 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for SharedBeaconRecord(0);
  v38 = __chkstk_darwin(v37);
  v157 = (uint64_t)&v150 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v38);
  v150 = (uint64_t)&v150 - v41;
  v42 = __chkstk_darwin(v40);
  v44 = (char *)&v150 - v43;
  __chkstk_darwin(v42);
  v46 = (char *)&v150 - v45;
  v47 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v48 = __chkstk_darwin(v47);
  v50 = (char *)&v150 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __chkstk_darwin(v48);
  v53 = (char *)&v150 - v52;
  v186[3] = v51;
  v186[4] = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
  v54 = sub_100018F08(v186);
  sub_10005972C((uint64_t)v179, (uint64_t)v54, type metadata accessor for OwnedBeaconRecord);
  sub_100030784((uint64_t)v186, (uint64_t)&v185);
  v55 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  if (swift_dynamicCast(v53, &v185, v55, v47, 0))
  {
    sub_1000126EC((uint64_t)v53, (uint64_t)v50, type metadata accessor for OwnedBeaconRecord);
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v179 = 0;
    swift_bridgeObjectRelease();
    v56 = &v50[v47[14]];
    v58 = *(_QWORD *)v56;
    v57 = *((_QWORD *)v56 + 1);
    v59 = v58 & 0xFFFFFFFFFFFFLL;
    if ((v57 & 0x2000000000000000) != 0)
      v60 = HIBYTE(v57) & 0xF;
    else
      v60 = v59;
    if (!v60)
    {
      v180[0] = 0;
      v180[1] = 0xE000000000000000;
      v183 = *(_QWORD *)&v50[v47[16]];
      v61._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      String.append(_:)(v61);
      swift_bridgeObjectRelease();
      v62._countAndFlagsBits = 95;
      v62._object = (void *)0xE100000000000000;
      String.append(_:)(v62);
      v183 = *(_QWORD *)&v50[v47[17]];
      v63._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      String.append(_:)(v63);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (qword_1010EA618 != -1)
      swift_once(&qword_1010EA618, sub_100DC6630);
    v64 = qword_1011B8518;
    swift_bridgeObjectRetain(qword_1011B8518);
    if ((sub_10000E13C() & 1) != 0)
    {
      v180[0] = v64;
      sub_100C81F30(2u);
      sub_100C81F30(1u);
      v64 = v180[0];
    }
    v183 = v64;
    if ((sub_1004A6658((uint64_t)v50, (uint64_t)v178) & 1) != 0 && (sub_10000E13C() & 1) == 0)
    {
      sub_100A0C6E0(v180, 8);
      sub_100A0C6E0(v180, 9);
    }
    else
    {
      sub_100C81F30(8u);
      sub_100C81F30(9u);
    }
    sub_10005972C((uint64_t)&v50[v47[6]], (uint64_t)v36, type metadata accessor for StableIdentifier);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v36, v174);
    sub_1000126B0((uint64_t)v36, type metadata accessor for StableIdentifier);
    if (EnumCaseMultiPayload != 1)
    {
      sub_100C81F30(0xCu);
      sub_100C81F30(0xDu);
    }
    if ((sub_1009A2EDC() & 1) == 0
      || (My = type metadata accessor for Feature.FindMy(0),
          v181 = My,
          v182 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy), v99 = sub_100018F08(v180), (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v99, enum case for Feature.FindMy.btRSSIFinding(_:), My), LOBYTE(My) = isFeatureEnabled(_:)(v180), _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v180), (My & 1) == 0))
    {
      sub_100C81F30(0xAu);
      sub_100C81F30(0xBu);
    }
    if ((sub_100C6F9A8() & 1) != 0
      && (v100 = type metadata accessor for Feature.FindMy(0),
          v181 = v100,
          v182 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy), v101 = sub_100018F08(v180), (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v100 - 8) + 104))(v101, enum case for Feature.FindMy.itemSharing(_:), v100), LOBYTE(v100) = isFeatureEnabled(_:)(v180), _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v180), (v100 & 1) != 0))
    {
      v102 = v170;
      sub_100A0C6E0(v180, 4);
      v174 = (uint64_t)&v50[v47[5]];
      v175 = sub_100CA8018((uint64_t)&off_101048270);
      v103 = *((_QWORD *)v178 + 20);
      if (qword_1010EA118 != -1)
        swift_once(&qword_1010EA118, sub_100A2ECA4);
      v104 = v173;
      v105 = sub_10001A9E8(v173, (uint64_t)qword_1011B7B10);
      v106 = v177;
      v107 = *(void (**)(char *, uint64_t, uint64_t))(v176 + 16);
      v107(v177, v105, v104);
      v107(v102, (uint64_t)v106, v104);
      v108 = (uint64_t)v156;
      v109 = (uint64_t)v153;
      v178 = &v153[*((int *)v156 + 10)];
      v110 = (uint64_t)v178;
      v111 = type metadata accessor for DirectorySequence(0);
      v112 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 56);
      v112(v110, 1, 1, v111);
      v107((char *)v109, (uint64_t)v102, v104);
      *(_QWORD *)(v109 + *(int *)(v108 + 36)) = v103;
      v113 = v171;
      v107(v171, (uint64_t)v102, v104);
      swift_retain();
      v114 = (uint64_t)v172;
      DirectorySequence.init(at:includingPropertiesForKeys:options:)(v113, 0, 0);
      v115 = *(void (**)(char *, uint64_t))(v176 + 8);
      v115(v102, v104);
      v112(v114, 0, 1, v111);
      sub_100004084(v114, (uint64_t)v178, (uint64_t *)&unk_1010F77A0);
      v116 = v154;
      sub_100005CF0(v109, v154, (uint64_t *)&unk_1011115B0);
      v117 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v155 + 56);
      v118 = (uint64_t)v151;
      v117(v151, 1, 1, v108);
      sub_100004048(v118, (uint64_t *)&unk_1010F77C0);
      sub_100005CF0(v116, v118, (uint64_t *)&unk_1011115B0);
      v117((char *)v118, 0, 1, v108);
      sub_100005CF0(v118, v152, (uint64_t *)&unk_1010F77B0);
      v119 = ((uint64_t (*)(char *, uint64_t))v115)(v177, v104);
      __chkstk_darwin(v119);
      v120 = v174;
      *(&v150 - 2) = v175;
      *(&v150 - 1) = v120;
      sub_100A79994(sub_1004D6568, (uint64_t)(&v150 - 4));
      v122 = v121;
      swift_bridgeObjectRelease();
      v123 = *(_QWORD *)(v122 + 16);
      swift_bridgeObjectRelease();
      v124 = v183;
      swift_bridgeObjectRetain(v183);
      LOBYTE(v122) = sub_100A077E4(5u, v124);
      swift_bridgeObjectRelease();
      if ((v122 & 1) == 0 && v123)
      {
        sub_100A0C6E0(v180, 5);
LABEL_44:
        sub_1000126B0((uint64_t)v50, type metadata accessor for OwnedBeaconRecord);
        v96 = (void *)v183;
        goto LABEL_61;
      }
      swift_bridgeObjectRetain(v124);
      v128 = sub_100A077E4(5u, v124);
      swift_bridgeObjectRelease();
      if ((v128 & 1) == 0 || v123)
        goto LABEL_44;
    }
    else
    {
      v125 = v183;
      swift_bridgeObjectRetain(v183);
      v126 = sub_100A077E4(4u, v125);
      swift_bridgeObjectRelease();
      if ((v126 & 1) != 0)
      {
        sub_100C81F30(4u);
        v125 = v183;
      }
      swift_bridgeObjectRetain(v125);
      v127 = sub_100A077E4(5u, v125);
      swift_bridgeObjectRelease();
      if ((v127 & 1) == 0)
        goto LABEL_44;
    }
    sub_100C81F30(5u);
    goto LABEL_44;
  }
  if ((swift_dynamicCast(v46, &v185, v55, v37, 0) & 1) != 0)
  {
    v65 = v170;
    sub_1000126EC((uint64_t)v46, (uint64_t)v44, type metadata accessor for SharedBeaconRecord);
    v160 = v37;
    v66 = *(int *)(v37 + 20);
    v179 = v44;
    v174 = (uint64_t)&v44[v66];
    v159 = (char *)*((_QWORD *)v178 + 20);
    if (qword_1010E9A98 != -1)
      swift_once(&qword_1010E9A98, sub_1001FFA50);
    v67 = v173;
    v68 = sub_10001A9E8(v173, (uint64_t)qword_1011B6C00);
    v69 = v177;
    v70 = *(void (**)(char *, uint64_t, uint64_t))(v176 + 16);
    v70(v177, v68, v67);
    v70(v65, (uint64_t)v69, v67);
    v71 = v175;
    v72 = (uint64_t)v161;
    v156 = &v161[*(int *)(v175 + 40)];
    v73 = (uint64_t)v156;
    v74 = type metadata accessor for DirectorySequence(0);
    v75 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56);
    v75(v73, 1, 1, v74);
    v70((char *)v72, (uint64_t)v65, v67);
    *(_QWORD *)(v72 + *(int *)(v71 + 36)) = v159;
    v76 = v171;
    v70(v171, (uint64_t)v65, v67);
    swift_retain();
    v77 = (uint64_t)v172;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)(v76, 0, 0);
    v78 = *(void (**)(char *, uint64_t))(v176 + 8);
    v78(v65, v67);
    v75(v77, 0, 1, v74);
    sub_100004084(v77, (uint64_t)v156, (uint64_t *)&unk_1010F77A0);
    v79 = v163;
    sub_100005CF0(v72, v163, (uint64_t *)&unk_1011057F0);
    v80 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v164 + 56);
    v81 = (uint64_t)v162;
    v82 = v175;
    v80(v162, 1, 1, v175);
    sub_100004048(v81, &qword_101105800);
    sub_100005CF0(v79, v81, (uint64_t *)&unk_1011057F0);
    v80((char *)v81, 0, 1, v82);
    sub_100005CF0(v81, v165, &qword_1010FB1F0);
    v83 = ((uint64_t (*)(char *, uint64_t))v78)(v177, v67);
    __chkstk_darwin(v83);
    v84 = v174;
    *(&v150 - 2) = v174;
    sub_100A7A30C(sub_1004273F0, (uint64_t)(&v150 - 4));
    v86 = *(_QWORD *)(v85 + 16);
    if (v86)
    {
      v87 = v167;
      v88 = v85 + ((*(unsigned __int8 *)(v167 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80));
      v89 = *(_QWORD *)(v167 + 72);
      v90 = v168;
      while (1)
      {
        sub_10005972C(v88, (uint64_t)v6, type metadata accessor for MemberSharingCircle);
        v91 = v6[*(int *)(v90 + 40)];
        sub_10005972C((uint64_t)v6, (uint64_t)v4, type metadata accessor for MemberSharingCircle);
        if (v91 == 1)
          break;
        v92 = v4[*(int *)(v90 + 40)];
        sub_1000126B0((uint64_t)v4, type metadata accessor for MemberSharingCircle);
        if (v92 == 4)
          goto LABEL_50;
        sub_1000126B0((uint64_t)v6, type metadata accessor for MemberSharingCircle);
        v88 += v89;
        if (!--v86)
        {
          v93 = 1;
          v94 = v158;
          goto LABEL_51;
        }
      }
      sub_1000126B0((uint64_t)v4, type metadata accessor for MemberSharingCircle);
LABEL_50:
      v94 = v158;
      sub_1000126EC((uint64_t)v6, v158, type metadata accessor for MemberSharingCircle);
      v93 = 0;
LABEL_51:
      v84 = v174;
    }
    else
    {
      v94 = v158;
      v90 = v168;
      v87 = v167;
      v93 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v87 + 56))(v94, v93, 1, v90);
    swift_bridgeObjectRelease();
    v129 = v160;
    v130 = v179[*(int *)(v160 + 52)];
    v131 = v166;
    sub_10000F9B8(v94, v166, (uint64_t *)&unk_101111440);
    v132 = (uint64_t)v169;
    if (v130 != 1 || (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v131, 1, v90) == 1)
    {
      sub_100004048(v131, (uint64_t *)&unk_101111440);
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v133 = type metadata accessor for Logger(0);
      sub_10001A9E8(v133, (uint64_t)qword_1011B77E8);
      v134 = v157;
      v135 = sub_10005972C((uint64_t)v179, v157, type metadata accessor for SharedBeaconRecord);
      v136 = Logger.logObject.getter(v135);
      v137 = static os_log_type_t.default.getter(v136);
      if (os_log_type_enabled(v136, v137))
      {
        v138 = swift_slowAlloc(22, -1);
        v139 = swift_slowAlloc(32, -1);
        v180[0] = v139;
        *(_DWORD *)v138 = 141558275;
        v183 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v138 + 4, v138 + 12);
        *(_WORD *)(v138 + 12) = 2081;
        v140 = type metadata accessor for UUID(0);
        v141 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v142 = dispatch thunk of CustomStringConvertible.description.getter(v140, v141);
        v183 = sub_100016940(v142, v143, v180);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, v184, v138 + 14, v138 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v134, type metadata accessor for SharedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v136, v137, "No accepted member circle for beacon %{private,mask.hash}s.", (uint8_t *)v138, 0x16u);
        swift_arrayDestroy(v139, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v139, -1, -1);
        swift_slowDealloc(v138, -1, -1);
      }
      else
      {
        sub_1000126B0(v134, type metadata accessor for SharedBeaconRecord);
      }

      sub_100004048(v94, (uint64_t *)&unk_101111440);
      sub_1000126B0((uint64_t)v179, type metadata accessor for SharedBeaconRecord);
      goto LABEL_60;
    }
    sub_100004048(v131, (uint64_t *)&unk_101111440);
    v180[0] = (uint64_t)&_swiftEmptySetSingleton;
    sub_10081BB64(v84, v132);
    v145 = type metadata accessor for BeaconProductInfoRecord(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v145 - 8) + 48))(v132, 1, v145) == 1)
    {
      sub_100004048(v132, &qword_10110EEB0);
      v146 = *(_QWORD *)&v179[*(int *)(v129 + 44)];
      v147 = v150;
      sub_10005972C((uint64_t)v179, v150, type metadata accessor for SharedBeaconRecord);
      if (v146 != 76)
      {
        sub_1000126B0(v147, type metadata accessor for SharedBeaconRecord);
        goto LABEL_74;
      }
      if (qword_1010EA5C0 != -1)
        swift_once(&qword_1010EA5C0, sub_100D3ADF0);
      v148 = sub_100A07598(*(_QWORD *)(v147 + *(int *)(v129 + 48)), qword_1011B8460);
      sub_1000126B0(v147, type metadata accessor for SharedBeaconRecord);
      if (!v148)
        goto LABEL_74;
      sub_100A0C6E0(&v183, 6);
      sub_100A0C6E0(&v183, 7);
      sub_100A0C6E0(&v183, 12);
      sub_100A0C6E0(&v183, 13);
LABEL_72:
      sub_100A0C6E0(&v183, 17);
      sub_100A0C6E0(&v183, 3);
      sub_100A0C6E0(&v183, 16);
LABEL_74:
      sub_100A0C6E0(&v183, 5);
      sub_100004048(v94, (uint64_t *)&unk_101111440);
      sub_1000126B0((uint64_t)v179, type metadata accessor for SharedBeaconRecord);
      v96 = (void *)v180[0];
      goto LABEL_61;
    }
    v149 = *(_DWORD *)(v132 + *(int *)(v145 + 68));
    sub_1000126B0(v132, type metadata accessor for BeaconProductInfoRecord);
    if ((v149 & 1) != 0)
    {
      sub_100A0C6E0(&v183, 6);
      sub_100A0C6E0(&v183, 7);
      if ((v149 & 0x400) == 0)
      {
LABEL_70:
        if ((v149 & 0x100) == 0)
          goto LABEL_72;
LABEL_71:
        sub_100A0C6E0(&v183, 12);
        sub_100A0C6E0(&v183, 13);
        goto LABEL_72;
      }
    }
    else if ((v149 & 0x400) == 0)
    {
      goto LABEL_70;
    }
    sub_100A0C6E0(&v183, 10);
    sub_100A0C6E0(&v183, 11);
    if ((v149 & 0x100) == 0)
      goto LABEL_72;
    goto LABEL_71;
  }
  v95 = (uint64_t)v159;
  if ((swift_dynamicCast(v159, &v185, v55, v160, 0) & 1) == 0)
  {
LABEL_60:
    v96 = &_swiftEmptySetSingleton;
    goto LABEL_61;
  }
  sub_1000126B0(v95, type metadata accessor for LocalFindableAccessoryRecord);
  v96 = sub_1003B8EB8((uint64_t)&off_101048298);
LABEL_61:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v185);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v186);
  return v96;
}

void *sub_1004ABDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, uint64_t, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  void (*v81)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  int EnumCaseMultiPayload;
  uint64_t My;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t, uint64_t);
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v116;
  uint64_t v117;
  void (*v118)(char *, uint64_t);
  uint64_t v119;
  void (*v120)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  char v131;
  char v132;
  uint64_t v133;
  char *v134;
  int v135;
  uint64_t v136;
  BOOL v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  NSObject *v143;
  os_log_type_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  BOOL v155;
  int v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187[2];
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _BYTE v191[8];
  uint64_t v192;
  _QWORD v193[5];

  v186 = (char *)a2;
  v175 = type metadata accessor for MemberSharingCircle(0);
  v174 = *(_QWORD *)(v175 - 8);
  v3 = __chkstk_darwin(v175);
  v167 = (char *)&v157 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v157 - v5;
  v7 = sub_10001A9A8(&qword_10110EEB0);
  __chkstk_darwin(v7);
  v176 = (char *)&v157 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalFindableAccessoryRecord(0);
  __chkstk_darwin(v9);
  v166 = (char *)&v157 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_10001A9A8((uint64_t *)&unk_1011057F0);
  v171 = *(_QWORD *)(v177 - 8);
  v11 = __chkstk_darwin(v177);
  v168 = (char *)&v157 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v170 = (uint64_t)&v157 - v13;
  v14 = sub_10001A9A8(&qword_1010FB1F0);
  v15 = __chkstk_darwin(v14);
  v169 = (char *)&v157 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v172 = (uint64_t)&v157 - v17;
  v18 = sub_10001A9A8((uint64_t *)&unk_101111440);
  v19 = __chkstk_darwin(v18);
  v173 = (uint64_t)&v157 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v165 = (uint64_t)&v157 - v21;
  v22 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v22);
  v180 = (char *)&v157 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = (char *)sub_10001A9A8((uint64_t *)&unk_1011115B0);
  v162 = *((_QWORD *)v163 - 1);
  v24 = __chkstk_darwin(v163);
  v160 = (char *)&v157 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v161 = (uint64_t)&v157 - v26;
  v181 = type metadata accessor for URL(0);
  v184 = *(_QWORD *)(v181 - 8);
  v27 = __chkstk_darwin(v181);
  v178 = (char *)&v157 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v179 = (char *)&v157 - v30;
  __chkstk_darwin(v29);
  v185 = (char *)&v157 - v31;
  v32 = sub_10001A9A8((uint64_t *)&unk_1010F77B0);
  v33 = __chkstk_darwin(v32);
  v158 = (char *)&v157 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v159 = (uint64_t)&v157 - v35;
  v183 = (char *)type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v183);
  v182 = (char *)&v157 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for SharedBeaconRecord(0);
  v38 = __chkstk_darwin(v37);
  v164 = (uint64_t)&v157 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v38);
  v157 = (uint64_t)&v157 - v41;
  v42 = __chkstk_darwin(v40);
  v44 = (char *)&v157 - v43;
  __chkstk_darwin(v42);
  v46 = (char *)&v157 - v45;
  v47 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v48 = __chkstk_darwin(v47);
  v50 = (char *)&v157 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v48);
  v52 = (char *)&v157 - v51;
  v53 = v9;
  v193[3] = v9;
  v193[4] = sub_100006204(&qword_1010F4A80, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E25DE4);
  v54 = sub_100018F08(v193);
  sub_10005972C(a1, (uint64_t)v54, type metadata accessor for LocalFindableAccessoryRecord);
  sub_100030784((uint64_t)v193, (uint64_t)&v192);
  v55 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  if (!swift_dynamicCast(v52, &v192, v55, v47, 0))
  {
    if ((swift_dynamicCast(v46, &v192, v55, v37, 0) & 1) == 0)
    {
      v95 = (uint64_t)v166;
      if ((swift_dynamicCast(v166, &v192, v55, v53, 0) & 1) != 0)
      {
        sub_1000126B0(v95, type metadata accessor for LocalFindableAccessoryRecord);
        v96 = sub_1003B8EB8((uint64_t)&off_101048388);
        goto LABEL_63;
      }
LABEL_62:
      v96 = &_swiftEmptySetSingleton;
      goto LABEL_63;
    }
    sub_1000126EC((uint64_t)v46, (uint64_t)v44, type metadata accessor for SharedBeaconRecord);
    v166 = (char *)v37;
    v65 = *(int *)(v37 + 20);
    v183 = v44;
    v182 = &v44[v65];
    v66 = *((_QWORD *)v186 + 20);
    if (qword_1010E9A98 != -1)
      swift_once(&qword_1010E9A98, sub_1001FFA50);
    v67 = v181;
    v68 = sub_10001A9E8(v181, (uint64_t)qword_1011B6C00);
    v69 = v185;
    v70 = *(void (**)(char *, uint64_t, uint64_t))(v184 + 16);
    v70(v185, v68, v67);
    v71 = v179;
    v70(v179, (uint64_t)v69, v67);
    v72 = v177;
    v73 = (uint64_t)v168;
    v163 = &v168[*(int *)(v177 + 40)];
    v74 = (uint64_t)v163;
    v75 = type metadata accessor for DirectorySequence(0);
    v76 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56);
    v76(v74, 1, 1, v75);
    v70((char *)v73, (uint64_t)v71, v67);
    *(_QWORD *)(v73 + *(int *)(v72 + 36)) = v66;
    v77 = v178;
    v70(v178, (uint64_t)v71, v67);
    swift_retain();
    v78 = (uint64_t)v180;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)(v77, 0, 0);
    v79 = *(void (**)(char *, uint64_t))(v184 + 8);
    v79(v71, v67);
    v76(v78, 0, 1, v75);
    sub_100004084(v78, (uint64_t)v163, (uint64_t *)&unk_1010F77A0);
    v80 = v170;
    sub_100005CF0(v73, v170, (uint64_t *)&unk_1011057F0);
    v81 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v171 + 56);
    v82 = (uint64_t)v169;
    v81(v169, 1, 1, v72);
    sub_100004048(v82, &qword_101105800);
    sub_100005CF0(v80, v82, (uint64_t *)&unk_1011057F0);
    v81((char *)v82, 0, 1, v72);
    sub_100005CF0(v82, v172, &qword_1010FB1F0);
    v83 = ((uint64_t (*)(char *, uint64_t))v79)(v185, v67);
    __chkstk_darwin(v83);
    *(&v157 - 2) = (uint64_t)v182;
    sub_100A7A30C(sub_1004273F0, (uint64_t)(&v157 - 4));
    v85 = *(_QWORD *)(v84 + 16);
    v86 = (uint64_t)v167;
    if (v85)
    {
      v87 = v174;
      v88 = v84 + ((*(unsigned __int8 *)(v174 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v174 + 80));
      v89 = *(_QWORD *)(v174 + 72);
      v90 = v175;
      while (1)
      {
        sub_10005972C(v88, (uint64_t)v6, type metadata accessor for MemberSharingCircle);
        v91 = v6[*(int *)(v90 + 40)];
        sub_10005972C((uint64_t)v6, v86, type metadata accessor for MemberSharingCircle);
        if (v91 == 1)
          break;
        v92 = *(unsigned __int8 *)(v86 + *(int *)(v90 + 40));
        sub_1000126B0(v86, type metadata accessor for MemberSharingCircle);
        if (v92 == 4)
          goto LABEL_52;
        sub_1000126B0((uint64_t)v6, type metadata accessor for MemberSharingCircle);
        v88 += v89;
        if (!--v85)
        {
          v93 = 1;
          v94 = v165;
          goto LABEL_53;
        }
      }
      sub_1000126B0(v86, type metadata accessor for MemberSharingCircle);
LABEL_52:
      v94 = v165;
      sub_1000126EC((uint64_t)v6, v165, type metadata accessor for MemberSharingCircle);
      v93 = 0;
    }
    else
    {
      v94 = v165;
      v90 = v175;
      v87 = v174;
      v93 = 1;
    }
LABEL_53:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v87 + 56))(v94, v93, 1, v90);
    swift_bridgeObjectRelease();
    v134 = v166;
    v135 = v183[*((int *)v166 + 13)];
    v136 = v173;
    sub_10000F9B8(v94, v173, (uint64_t *)&unk_101111440);
    v137 = v135 == 1;
    v138 = (uint64_t)v176;
    v139 = (uint64_t)v182;
    if (!v137 || (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v136, 1, v90) == 1)
    {
      sub_100004048(v136, (uint64_t *)&unk_101111440);
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v140 = type metadata accessor for Logger(0);
      sub_10001A9E8(v140, (uint64_t)qword_1011B77E8);
      v141 = v164;
      v142 = sub_10005972C((uint64_t)v183, v164, type metadata accessor for SharedBeaconRecord);
      v143 = Logger.logObject.getter(v142);
      v144 = static os_log_type_t.default.getter(v143);
      if (os_log_type_enabled(v143, v144))
      {
        v145 = swift_slowAlloc(22, -1);
        v146 = swift_slowAlloc(32, -1);
        v187[0] = v146;
        *(_DWORD *)v145 = 141558275;
        v190 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, v191, v145 + 4, v145 + 12);
        *(_WORD *)(v145 + 12) = 2081;
        v147 = type metadata accessor for UUID(0);
        v148 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v149 = dispatch thunk of CustomStringConvertible.description.getter(v147, v148);
        v190 = sub_100016940(v149, v150, v187);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, v191, v145 + 14, v145 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v141, type metadata accessor for SharedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v143, v144, "No accepted member circle for beacon %{private,mask.hash}s.", (uint8_t *)v145, 0x16u);
        swift_arrayDestroy(v146, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v146, -1, -1);
        swift_slowDealloc(v145, -1, -1);
      }
      else
      {
        sub_1000126B0(v141, type metadata accessor for SharedBeaconRecord);
      }

      sub_100004048(v94, (uint64_t *)&unk_101111440);
      sub_1000126B0((uint64_t)v183, type metadata accessor for SharedBeaconRecord);
      goto LABEL_62;
    }
    sub_100004048(v136, (uint64_t *)&unk_101111440);
    v187[0] = (uint64_t)&_swiftEmptySetSingleton;
    sub_10081BB64(v139, v138);
    v152 = type metadata accessor for BeaconProductInfoRecord(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v152 - 8) + 48))(v138, 1, v152) == 1)
    {
      sub_100004048(v138, &qword_10110EEB0);
      v153 = *(_QWORD *)&v183[*((int *)v134 + 11)];
      v154 = v157;
      sub_10005972C((uint64_t)v183, v157, type metadata accessor for SharedBeaconRecord);
      if (v153 != 76)
      {
        sub_1000126B0(v154, type metadata accessor for SharedBeaconRecord);
        goto LABEL_76;
      }
      if (qword_1010EA5C0 != -1)
        swift_once(&qword_1010EA5C0, sub_100D3ADF0);
      v155 = sub_100A07598(*(_QWORD *)(v154 + *((int *)v134 + 12)), qword_1011B8460);
      sub_1000126B0(v154, type metadata accessor for SharedBeaconRecord);
      if (!v155)
        goto LABEL_76;
      sub_100A0C6E0(&v190, 6);
      sub_100A0C6E0(&v190, 7);
      sub_100A0C6E0(&v190, 12);
      sub_100A0C6E0(&v190, 13);
LABEL_74:
      sub_100A0C6E0(&v190, 17);
      sub_100A0C6E0(&v190, 3);
      sub_100A0C6E0(&v190, 16);
LABEL_76:
      sub_100A0C6E0(&v190, 5);
      sub_100004048(v94, (uint64_t *)&unk_101111440);
      sub_1000126B0((uint64_t)v183, type metadata accessor for SharedBeaconRecord);
      v96 = (void *)v187[0];
      goto LABEL_63;
    }
    v156 = *(_DWORD *)(v138 + *(int *)(v152 + 68));
    sub_1000126B0(v138, type metadata accessor for BeaconProductInfoRecord);
    if ((v156 & 1) != 0)
    {
      sub_100A0C6E0(&v190, 6);
      sub_100A0C6E0(&v190, 7);
      if ((v156 & 0x400) == 0)
      {
LABEL_72:
        if ((v156 & 0x100) == 0)
          goto LABEL_74;
LABEL_73:
        sub_100A0C6E0(&v190, 12);
        sub_100A0C6E0(&v190, 13);
        goto LABEL_74;
      }
    }
    else if ((v156 & 0x400) == 0)
    {
      goto LABEL_72;
    }
    sub_100A0C6E0(&v190, 10);
    sub_100A0C6E0(&v190, 11);
    if ((v156 & 0x100) == 0)
      goto LABEL_74;
    goto LABEL_73;
  }
  sub_1000126EC((uint64_t)v52, (uint64_t)v50, type metadata accessor for OwnedBeaconRecord);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v177 = 0;
  swift_bridgeObjectRelease();
  v56 = &v50[v47[14]];
  v58 = *(_QWORD *)v56;
  v57 = *((_QWORD *)v56 + 1);
  v59 = v58 & 0xFFFFFFFFFFFFLL;
  if ((v57 & 0x2000000000000000) != 0)
    v60 = HIBYTE(v57) & 0xF;
  else
    v60 = v59;
  if (!v60)
  {
    v187[0] = 0;
    v187[1] = 0xE000000000000000;
    v190 = *(_QWORD *)&v50[v47[16]];
    v61._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    v62._countAndFlagsBits = 95;
    v62._object = (void *)0xE100000000000000;
    String.append(_:)(v62);
    v190 = *(_QWORD *)&v50[v47[17]];
    v63._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (qword_1010EA618 != -1)
    swift_once(&qword_1010EA618, sub_100DC6630);
  v64 = qword_1011B8518;
  swift_bridgeObjectRetain(qword_1011B8518);
  if ((sub_10000E13C() & 1) != 0)
  {
    v187[0] = v64;
    sub_100C81F30(2u);
    sub_100C81F30(1u);
    v64 = v187[0];
  }
  v190 = v64;
  if ((sub_1004A6658((uint64_t)v50, (uint64_t)v186) & 1) != 0 && (sub_10000E13C() & 1) == 0)
  {
    sub_100A0C6E0(v187, 8);
    sub_100A0C6E0(v187, 9);
  }
  else
  {
    sub_100C81F30(8u);
    sub_100C81F30(9u);
  }
  v97 = (uint64_t)v182;
  sub_10005972C((uint64_t)&v50[v47[6]], (uint64_t)v182, type metadata accessor for StableIdentifier);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v97, v183);
  sub_1000126B0(v97, type metadata accessor for StableIdentifier);
  if (EnumCaseMultiPayload != 1)
  {
    sub_100C81F30(0xCu);
    sub_100C81F30(0xDu);
  }
  if ((sub_1009A2EDC() & 1) == 0
    || (My = type metadata accessor for Feature.FindMy(0),
        v188 = My,
        v189 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy), v100 = sub_100018F08(v187), (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v100, enum case for Feature.FindMy.btRSSIFinding(_:), My), LOBYTE(My) = isFeatureEnabled(_:)(v187), _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v187), (My & 1) == 0))
  {
    sub_100C81F30(0xAu);
    sub_100C81F30(0xBu);
  }
  if ((sub_100C6F9A8() & 1) != 0
    && (v101 = type metadata accessor for Feature.FindMy(0),
        v188 = v101,
        v189 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy), v102 = sub_100018F08(v187), (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v101 - 8) + 104))(v102, enum case for Feature.FindMy.itemSharing(_:), v101), LOBYTE(v101) = isFeatureEnabled(_:)(v187), _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v187), (v101 & 1) != 0))
  {
    sub_100A0C6E0(v187, 4);
    v103 = v47[5];
    v183 = v50;
    v176 = &v50[v103];
    v182 = (char *)sub_100CA8018((uint64_t)&off_101048360);
    v104 = *((_QWORD *)v186 + 20);
    if (qword_1010EA118 != -1)
      swift_once(&qword_1010EA118, sub_100A2ECA4);
    v105 = v181;
    v106 = sub_10001A9E8(v181, (uint64_t)qword_1011B7B10);
    v108 = v184;
    v107 = v185;
    v109 = *(void (**)(char *, uint64_t, uint64_t))(v184 + 16);
    v109(v185, v106, v105);
    v110 = v179;
    v109(v179, (uint64_t)v107, v105);
    v111 = (uint64_t)v163;
    v112 = (uint64_t)v160;
    v186 = &v160[*((int *)v163 + 10)];
    v113 = (uint64_t)v186;
    v114 = type metadata accessor for DirectorySequence(0);
    v115 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 56);
    v115(v113, 1, 1, v114);
    v109((char *)v112, (uint64_t)v110, v105);
    *(_QWORD *)(v112 + *(int *)(v111 + 36)) = v104;
    v116 = v178;
    v109(v178, (uint64_t)v110, v105);
    swift_retain();
    v117 = (uint64_t)v180;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)(v116, 0, 0);
    v118 = *(void (**)(char *, uint64_t))(v108 + 8);
    v118(v110, v105);
    v115(v117, 0, 1, v114);
    sub_100004084(v117, (uint64_t)v186, (uint64_t *)&unk_1010F77A0);
    v119 = v161;
    sub_100005CF0(v112, v161, (uint64_t *)&unk_1011115B0);
    v120 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v162 + 56);
    v121 = (uint64_t)v158;
    v120(v158, 1, 1, v111);
    sub_100004048(v121, (uint64_t *)&unk_1010F77C0);
    sub_100005CF0(v119, v121, (uint64_t *)&unk_1011115B0);
    v120((char *)v121, 0, 1, v111);
    sub_100005CF0(v121, v159, (uint64_t *)&unk_1010F77B0);
    v122 = ((uint64_t (*)(char *, uint64_t))v118)(v185, v105);
    __chkstk_darwin(v122);
    v123 = (uint64_t)v176;
    *(&v157 - 2) = (uint64_t)v182;
    *(&v157 - 1) = v123;
    sub_100A79994(sub_1004D6568, (uint64_t)(&v157 - 4));
    v125 = v124;
    swift_bridgeObjectRelease();
    v126 = *(_QWORD *)(v125 + 16);
    swift_bridgeObjectRelease();
    v127 = v190;
    swift_bridgeObjectRetain(v190);
    LOBYTE(v125) = sub_100A077E4(5u, v127);
    swift_bridgeObjectRelease();
    if ((v125 & 1) != 0 || !v126)
    {
      swift_bridgeObjectRetain(v127);
      v132 = sub_100A077E4(5u, v127);
      swift_bridgeObjectRelease();
      v133 = (uint64_t)v183;
      if ((v132 & 1) != 0 && !v126)
        sub_100C81F30(5u);
      v128 = v133;
    }
    else
    {
      sub_100A0C6E0(v187, 5);
      v128 = (uint64_t)v183;
    }
  }
  else
  {
    v129 = v190;
    swift_bridgeObjectRetain(v190);
    v130 = sub_100A077E4(4u, v129);
    swift_bridgeObjectRelease();
    if ((v130 & 1) != 0)
    {
      sub_100C81F30(4u);
      v129 = v190;
    }
    swift_bridgeObjectRetain(v129);
    v131 = sub_100A077E4(5u, v129);
    swift_bridgeObjectRelease();
    if ((v131 & 1) != 0)
      sub_100C81F30(5u);
    v128 = (uint64_t)v50;
  }
  sub_1000126B0(v128, type metadata accessor for OwnedBeaconRecord);
  v96 = (void *)v190;
LABEL_63:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v192);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v193);
  return v96;
}

void *sub_1004AD2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Swift::String v60;
  Swift::String v61;
  Swift::String v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void (*v68)(char *, uint64_t, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  int EnumCaseMultiPayload;
  uint64_t My;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  void (*v105)(char *, uint64_t, uint64_t);
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v112;
  uint64_t v113;
  void (*v114)(char *, uint64_t);
  uint64_t v115;
  void (*v116)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  char v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  NSObject *v135;
  os_log_type_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182[2];
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _BYTE v186[8];
  uint64_t v187;
  _QWORD v188[5];

  v180 = (char *)a2;
  v181 = (char *)a1;
  v171 = type metadata accessor for MemberSharingCircle(0);
  v170 = *(_QWORD *)(v171 - 8);
  v2 = __chkstk_darwin(v171);
  v4 = (char *)&v152 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v152 - v5;
  v7 = sub_10001A9A8(&qword_10110EEB0);
  __chkstk_darwin(v7);
  v153 = (uint64_t)&v152 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = type metadata accessor for LocalFindableAccessoryRecord(0);
  __chkstk_darwin(v163);
  v162 = (char *)&v152 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_10001A9A8((uint64_t *)&unk_1011057F0);
  v167 = *(_QWORD *)(v177 - 8);
  v10 = __chkstk_darwin(v177);
  v164 = (char *)&v152 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v166 = (uint64_t)&v152 - v12;
  v13 = sub_10001A9A8(&qword_1010FB1F0);
  v14 = __chkstk_darwin(v13);
  v165 = (char *)&v152 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v168 = (uint64_t)&v152 - v16;
  v17 = sub_10001A9A8((uint64_t *)&unk_101111440);
  v18 = __chkstk_darwin(v17);
  v169 = (uint64_t)&v152 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v161 = (uint64_t)&v152 - v20;
  v21 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v21);
  v174 = (char *)&v152 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = (char *)sub_10001A9A8((uint64_t *)&unk_1011115B0);
  v158 = *((_QWORD *)v159 - 1);
  v23 = __chkstk_darwin(v159);
  v156 = (char *)&v152 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v157 = (uint64_t)&v152 - v25;
  v175 = type metadata accessor for URL(0);
  v178 = *(_QWORD *)(v175 - 8);
  v26 = __chkstk_darwin(v175);
  v172 = (char *)&v152 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v173 = (char *)&v152 - v29;
  __chkstk_darwin(v28);
  v179 = (char *)&v152 - v30;
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F77B0);
  v32 = __chkstk_darwin(v31);
  v154 = (char *)&v152 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v155 = (uint64_t)&v152 - v34;
  v176 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v176);
  v36 = (char *)&v152 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for SharedBeaconRecord(0);
  v38 = __chkstk_darwin(v37);
  v160 = (uint64_t)&v152 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v38);
  v152 = (uint64_t)&v152 - v41;
  v42 = __chkstk_darwin(v40);
  v44 = (char *)&v152 - v43;
  __chkstk_darwin(v42);
  v46 = (char *)&v152 - v45;
  v47 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v48 = __chkstk_darwin(v47);
  v50 = (char *)&v152 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v48);
  v52 = (char *)&v152 - v51;
  v188[3] = v37;
  v188[4] = sub_100006204(&qword_1010F4A70, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F5CC);
  v53 = sub_100018F08(v188);
  sub_10005972C((uint64_t)v181, (uint64_t)v53, type metadata accessor for SharedBeaconRecord);
  sub_100030784((uint64_t)v188, (uint64_t)&v187);
  v54 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  if (swift_dynamicCast(v52, &v187, v54, v47, 0))
  {
    sub_1000126EC((uint64_t)v52, (uint64_t)v50, type metadata accessor for OwnedBeaconRecord);
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v181 = 0;
    swift_bridgeObjectRelease();
    v55 = &v50[v47[14]];
    v57 = *(_QWORD *)v55;
    v56 = *((_QWORD *)v55 + 1);
    v58 = v57 & 0xFFFFFFFFFFFFLL;
    if ((v56 & 0x2000000000000000) != 0)
      v59 = HIBYTE(v56) & 0xF;
    else
      v59 = v58;
    if (!v59)
    {
      v182[0] = 0;
      v182[1] = 0xE000000000000000;
      v185 = *(_QWORD *)&v50[v47[16]];
      v60._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      String.append(_:)(v60);
      swift_bridgeObjectRelease();
      v61._countAndFlagsBits = 95;
      v61._object = (void *)0xE100000000000000;
      String.append(_:)(v61);
      v185 = *(_QWORD *)&v50[v47[17]];
      v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      String.append(_:)(v62);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (qword_1010EA618 != -1)
      swift_once(&qword_1010EA618, sub_100DC6630);
    v63 = qword_1011B8518;
    swift_bridgeObjectRetain(qword_1011B8518);
    if ((sub_10000E13C() & 1) != 0)
    {
      v182[0] = v63;
      sub_100C81F30(2u);
      sub_100C81F30(1u);
      v63 = v182[0];
    }
    v185 = v63;
    if ((sub_1004A6658((uint64_t)v50, (uint64_t)v180) & 1) != 0 && (sub_10000E13C() & 1) == 0)
    {
      sub_100A0C6E0(v182, 8);
      sub_100A0C6E0(v182, 9);
    }
    else
    {
      sub_100C81F30(8u);
      sub_100C81F30(9u);
    }
    sub_10005972C((uint64_t)&v50[v47[6]], (uint64_t)v36, type metadata accessor for StableIdentifier);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v36, v176);
    sub_1000126B0((uint64_t)v36, type metadata accessor for StableIdentifier);
    if (EnumCaseMultiPayload != 1)
    {
      sub_100C81F30(0xCu);
      sub_100C81F30(0xDu);
    }
    if ((sub_1009A2EDC() & 1) == 0
      || (My = type metadata accessor for Feature.FindMy(0),
          v183 = My,
          v184 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy), v98 = sub_100018F08(v182), (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v98, enum case for Feature.FindMy.btRSSIFinding(_:), My), LOBYTE(My) = isFeatureEnabled(_:)(v182), _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v182), (My & 1) == 0))
    {
      sub_100C81F30(0xAu);
      sub_100C81F30(0xBu);
    }
    if ((sub_100C6F9A8() & 1) != 0
      && (v99 = type metadata accessor for Feature.FindMy(0),
          v183 = v99,
          v184 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy), v100 = sub_100018F08(v182), (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v99 - 8) + 104))(v100, enum case for Feature.FindMy.itemSharing(_:), v99), LOBYTE(v99) = isFeatureEnabled(_:)(v182), _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v182), (v99 & 1) != 0))
    {
      sub_100A0C6E0(v182, 4);
      v176 = (uint64_t)&v50[v47[5]];
      v177 = sub_100CA8018((uint64_t)&off_1010481F8);
      v101 = *((_QWORD *)v180 + 20);
      if (qword_1010EA118 != -1)
        swift_once(&qword_1010EA118, sub_100A2ECA4);
      v102 = v175;
      v103 = sub_10001A9E8(v175, (uint64_t)qword_1011B7B10);
      v104 = v179;
      v105 = *(void (**)(char *, uint64_t, uint64_t))(v178 + 16);
      v105(v179, v103, v102);
      v106 = v173;
      v105(v173, (uint64_t)v104, v102);
      v107 = (uint64_t)v159;
      v108 = (uint64_t)v156;
      v180 = &v156[*((int *)v159 + 10)];
      v109 = (uint64_t)v180;
      v110 = type metadata accessor for DirectorySequence(0);
      v111 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 56);
      v111(v109, 1, 1, v110);
      v105((char *)v108, (uint64_t)v106, v102);
      *(_QWORD *)(v108 + *(int *)(v107 + 36)) = v101;
      v112 = v172;
      v105(v172, (uint64_t)v106, v102);
      swift_retain();
      v113 = (uint64_t)v174;
      DirectorySequence.init(at:includingPropertiesForKeys:options:)(v112, 0, 0);
      v114 = *(void (**)(char *, uint64_t))(v178 + 8);
      v114(v106, v102);
      v111(v113, 0, 1, v110);
      sub_100004084(v113, (uint64_t)v180, (uint64_t *)&unk_1010F77A0);
      v115 = v157;
      sub_100005CF0(v108, v157, (uint64_t *)&unk_1011115B0);
      v116 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v158 + 56);
      v117 = (uint64_t)v154;
      v116(v154, 1, 1, v107);
      sub_100004048(v117, (uint64_t *)&unk_1010F77C0);
      sub_100005CF0(v115, v117, (uint64_t *)&unk_1011115B0);
      v116((char *)v117, 0, 1, v107);
      sub_100005CF0(v117, v155, (uint64_t *)&unk_1010F77B0);
      v118 = ((uint64_t (*)(char *, uint64_t))v114)(v179, v102);
      __chkstk_darwin(v118);
      v119 = v176;
      *(&v152 - 2) = v177;
      *(&v152 - 1) = v119;
      sub_100A79994(sub_1004D6568, (uint64_t)(&v152 - 4));
      v121 = v120;
      swift_bridgeObjectRelease();
      v122 = *(_QWORD *)(v121 + 16);
      swift_bridgeObjectRelease();
      v123 = v185;
      swift_bridgeObjectRetain(v185);
      LOBYTE(v121) = sub_100A077E4(5u, v123);
      swift_bridgeObjectRelease();
      if ((v121 & 1) == 0 && v122)
      {
        sub_100A0C6E0(v182, 5);
LABEL_44:
        sub_1000126B0((uint64_t)v50, type metadata accessor for OwnedBeaconRecord);
        v95 = (void *)v185;
        goto LABEL_61;
      }
      swift_bridgeObjectRetain(v123);
      v127 = sub_100A077E4(5u, v123);
      swift_bridgeObjectRelease();
      if ((v127 & 1) == 0 || v122)
        goto LABEL_44;
    }
    else
    {
      v124 = v185;
      swift_bridgeObjectRetain(v185);
      v125 = sub_100A077E4(4u, v124);
      swift_bridgeObjectRelease();
      if ((v125 & 1) != 0)
      {
        sub_100C81F30(4u);
        v124 = v185;
      }
      swift_bridgeObjectRetain(v124);
      v126 = sub_100A077E4(5u, v124);
      swift_bridgeObjectRelease();
      if ((v126 & 1) == 0)
        goto LABEL_44;
    }
    sub_100C81F30(5u);
    goto LABEL_44;
  }
  if ((swift_dynamicCast(v46, &v187, v54, v37, 0) & 1) != 0)
  {
    sub_1000126EC((uint64_t)v46, (uint64_t)v44, type metadata accessor for SharedBeaconRecord);
    v163 = v37;
    v64 = *(int *)(v37 + 20);
    v176 = (uint64_t)v44;
    v181 = &v44[v64];
    v162 = (char *)*((_QWORD *)v180 + 20);
    if (qword_1010E9A98 != -1)
      swift_once(&qword_1010E9A98, sub_1001FFA50);
    v65 = v175;
    v66 = sub_10001A9E8(v175, (uint64_t)qword_1011B6C00);
    v67 = v179;
    v68 = *(void (**)(char *, uint64_t, uint64_t))(v178 + 16);
    v68(v179, v66, v65);
    v69 = v173;
    v68(v173, (uint64_t)v67, v65);
    v70 = v177;
    v71 = (uint64_t)v164;
    v159 = &v164[*(int *)(v177 + 40)];
    v72 = (uint64_t)v159;
    v73 = type metadata accessor for DirectorySequence(0);
    v74 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56);
    v74(v72, 1, 1, v73);
    v68((char *)v71, (uint64_t)v69, v65);
    *(_QWORD *)(v71 + *(int *)(v70 + 36)) = v162;
    v75 = v172;
    v68(v172, (uint64_t)v69, v65);
    swift_retain();
    v76 = (uint64_t)v174;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)(v75, 0, 0);
    v77 = *(void (**)(char *, uint64_t))(v178 + 8);
    v77(v69, v65);
    v74(v76, 0, 1, v73);
    sub_100004084(v76, (uint64_t)v159, (uint64_t *)&unk_1010F77A0);
    v78 = v166;
    sub_100005CF0(v71, v166, (uint64_t *)&unk_1011057F0);
    v79 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v167 + 56);
    v80 = (uint64_t)v165;
    v81 = v177;
    v79(v165, 1, 1, v177);
    sub_100004048(v80, &qword_101105800);
    sub_100005CF0(v78, v80, (uint64_t *)&unk_1011057F0);
    v79((char *)v80, 0, 1, v81);
    sub_100005CF0(v80, v168, &qword_1010FB1F0);
    v82 = ((uint64_t (*)(char *, uint64_t))v77)(v179, v65);
    __chkstk_darwin(v82);
    v83 = (uint64_t)v181;
    *(&v152 - 2) = (uint64_t)v181;
    sub_100A7A30C(sub_100425B14, (uint64_t)(&v152 - 4));
    v85 = *(_QWORD *)(v84 + 16);
    if (v85)
    {
      v86 = v170;
      v87 = v84 + ((*(unsigned __int8 *)(v170 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v170 + 80));
      v88 = *(_QWORD *)(v170 + 72);
      v89 = v171;
      while (1)
      {
        sub_10005972C(v87, (uint64_t)v6, type metadata accessor for MemberSharingCircle);
        v90 = v6[*(int *)(v89 + 40)];
        sub_10005972C((uint64_t)v6, (uint64_t)v4, type metadata accessor for MemberSharingCircle);
        if (v90 == 1)
          break;
        v91 = v4[*(int *)(v89 + 40)];
        sub_1000126B0((uint64_t)v4, type metadata accessor for MemberSharingCircle);
        if (v91 == 4)
          goto LABEL_50;
        sub_1000126B0((uint64_t)v6, type metadata accessor for MemberSharingCircle);
        v87 += v88;
        if (!--v85)
        {
          v92 = 1;
          v93 = v161;
          goto LABEL_51;
        }
      }
      sub_1000126B0((uint64_t)v4, type metadata accessor for MemberSharingCircle);
LABEL_50:
      v93 = v161;
      sub_1000126EC((uint64_t)v6, v161, type metadata accessor for MemberSharingCircle);
      v92 = 0;
LABEL_51:
      v83 = (uint64_t)v181;
    }
    else
    {
      v93 = v161;
      v89 = v171;
      v86 = v170;
      v92 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56))(v93, v92, 1, v89);
    swift_bridgeObjectRelease();
    v128 = v163;
    v129 = v176;
    v130 = *(unsigned __int8 *)(v176 + *(int *)(v163 + 52));
    v131 = v169;
    sub_10000F9B8(v93, v169, (uint64_t *)&unk_101111440);
    if (v130 != 1 || (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v131, 1, v89) == 1)
    {
      sub_100004048(v131, (uint64_t *)&unk_101111440);
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v132 = type metadata accessor for Logger(0);
      sub_10001A9E8(v132, (uint64_t)qword_1011B77E8);
      v133 = v160;
      v134 = sub_10005972C(v129, v160, type metadata accessor for SharedBeaconRecord);
      v135 = Logger.logObject.getter(v134);
      v136 = static os_log_type_t.default.getter(v135);
      if (os_log_type_enabled(v135, v136))
      {
        v137 = swift_slowAlloc(22, -1);
        v138 = swift_slowAlloc(32, -1);
        v182[0] = v138;
        *(_DWORD *)v137 = 141558275;
        v185 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v185, v186, v137 + 4, v137 + 12);
        *(_WORD *)(v137 + 12) = 2081;
        v139 = type metadata accessor for UUID(0);
        v140 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v141 = dispatch thunk of CustomStringConvertible.description.getter(v139, v140);
        v185 = sub_100016940(v141, v142, v182);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v185, v186, v137 + 14, v137 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v133, type metadata accessor for SharedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v135, v136, "No accepted member circle for beacon %{private,mask.hash}s.", (uint8_t *)v137, 0x16u);
        swift_arrayDestroy(v138, 1, (char *)&type metadata for Any + 8);
        v143 = v138;
        v129 = v176;
        swift_slowDealloc(v143, -1, -1);
        swift_slowDealloc(v137, -1, -1);
      }
      else
      {
        sub_1000126B0(v133, type metadata accessor for SharedBeaconRecord);
      }

      sub_100004048(v93, (uint64_t *)&unk_101111440);
      sub_1000126B0(v129, type metadata accessor for SharedBeaconRecord);
      goto LABEL_60;
    }
    sub_100004048(v131, (uint64_t *)&unk_101111440);
    v182[0] = (uint64_t)&_swiftEmptySetSingleton;
    v145 = v153;
    sub_10081BB64(v83, v153);
    v146 = v145;
    v147 = type metadata accessor for BeaconProductInfoRecord(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v147 - 8) + 48))(v146, 1, v147) == 1)
    {
      sub_100004048(v146, &qword_10110EEB0);
      v148 = *(_QWORD *)(v129 + *(int *)(v128 + 44));
      v149 = v152;
      sub_10005972C(v129, v152, type metadata accessor for SharedBeaconRecord);
      if (v148 != 76)
      {
        sub_1000126B0(v149, type metadata accessor for SharedBeaconRecord);
        goto LABEL_74;
      }
      if (qword_1010EA5C0 != -1)
        swift_once(&qword_1010EA5C0, sub_100D3ADF0);
      v150 = sub_100A07598(*(_QWORD *)(v149 + *(int *)(v128 + 48)), qword_1011B8460);
      sub_1000126B0(v149, type metadata accessor for SharedBeaconRecord);
      if (!v150)
        goto LABEL_74;
      sub_100A0C6E0(&v185, 6);
      sub_100A0C6E0(&v185, 7);
      sub_100A0C6E0(&v185, 12);
      sub_100A0C6E0(&v185, 13);
LABEL_72:
      sub_100A0C6E0(&v185, 17);
      sub_100A0C6E0(&v185, 3);
      sub_100A0C6E0(&v185, 16);
LABEL_74:
      sub_100A0C6E0(&v185, 5);
      sub_100004048(v93, (uint64_t *)&unk_101111440);
      sub_1000126B0(v129, type metadata accessor for SharedBeaconRecord);
      v95 = (void *)v182[0];
      goto LABEL_61;
    }
    v151 = *(_DWORD *)(v146 + *(int *)(v147 + 68));
    sub_1000126B0(v146, type metadata accessor for BeaconProductInfoRecord);
    if ((v151 & 1) != 0)
    {
      sub_100A0C6E0(&v185, 6);
      sub_100A0C6E0(&v185, 7);
      if ((v151 & 0x400) == 0)
      {
LABEL_70:
        if ((v151 & 0x100) == 0)
          goto LABEL_72;
LABEL_71:
        sub_100A0C6E0(&v185, 12);
        sub_100A0C6E0(&v185, 13);
        goto LABEL_72;
      }
    }
    else if ((v151 & 0x400) == 0)
    {
      goto LABEL_70;
    }
    sub_100A0C6E0(&v185, 10);
    sub_100A0C6E0(&v185, 11);
    if ((v151 & 0x100) == 0)
      goto LABEL_72;
    goto LABEL_71;
  }
  v94 = (uint64_t)v162;
  if ((swift_dynamicCast(v162, &v187, v54, v163, 0) & 1) == 0)
  {
LABEL_60:
    v95 = &_swiftEmptySetSingleton;
    goto LABEL_61;
  }
  sub_1000126B0(v94, type metadata accessor for LocalFindableAccessoryRecord);
  v95 = sub_1003B8EB8((uint64_t)&off_101048220);
LABEL_61:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v187);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v188);
  return v95;
}

uint64_t sub_1004AE7CC(uint64_t a1, int a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  dispatch_queue_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void **v44;
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  void *v47;
  char v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  char *v57;
  NSUUID v58;
  id v59;
  id v60;
  void **v61;
  char isUniquelyReferenced_nonNull_native;
  void *v63;
  id v64;
  void (*v65)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  id v81;
  NSDate v82;
  void *v83;
  id v84;
  NSObject *v85;
  void (*isa)(char *, uint64_t);
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void **v135;
  id v136;
  char *v137;
  id v138;
  id v139;
  void **v140;
  void **v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  void *v147;
  uint64_t result;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void **v218;
  id v219;
  char *v220;
  id v221;
  id v222;
  void **v223;
  void **v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  uint64_t v253;
  uint64_t (*v254)();
  uint64_t v255;
  uint64_t (*v256)();
  _QWORD v257[2];
  dispatch_queue_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t v278;
  void (*v279)(char *, char *, uint64_t);
  char *v280;
  char *v281;
  uint64_t v282;
  char *v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t found;
  uint64_t v289;
  char *v290;
  char *v291;
  char *v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  _QWORD *v296;
  uint64_t (*v297)();
  _QWORD *v298;
  uint64_t (*v299)();
  _QWORD *v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  void **v304;
  uint64_t v305;
  uint64_t v306;
  void (*v307)(char *, uint64_t);
  uint64_t v308;
  uint64_t v309;
  char *v310;
  void **v311;
  uint64_t v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  void **aBlock;
  uint64_t v319;
  uint64_t (*v320)(uint64_t);
  void *v321;
  uint64_t (*v322)();
  uint64_t v323;
  __int128 v324;
  id v325;
  uint64_t v326;
  _QWORD v327[5];

  LODWORD(v312) = a2;
  v5 = sub_10001A9A8(&qword_1010F33A8);
  __chkstk_darwin(v5);
  v289 = (uint64_t)v257 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v287 = *(_QWORD *)(found - 8);
  __chkstk_darwin(found);
  v286 = (uint64_t)v257 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F47F0);
  v9 = __chkstk_darwin(v8);
  v293 = (uint64_t)v257 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v295 = (uint64_t)v257 - v11;
  v12 = sub_10001A9A8(&qword_1010ED860);
  v13 = __chkstk_darwin(v12);
  v285 = (char *)v257 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v284 = (char *)v257 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)v257 - v18;
  v20 = __chkstk_darwin(v17);
  v309 = (uint64_t)v257 - v21;
  __chkstk_darwin(v20);
  v314 = (uint64_t)v257 - v22;
  v317 = type metadata accessor for Date(0);
  v23 = *(dispatch_queue_t *)(v317 - 8);
  v24 = __chkstk_darwin(v317);
  v291 = (char *)v257 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v313 = (char *)v257 - v27;
  __chkstk_darwin(v26);
  v310 = (char *)v257 - v28;
  v29 = type metadata accessor for UUID(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = __chkstk_darwin(v29);
  v283 = (char *)v257 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v290 = (char *)v257 - v34;
  v35 = __chkstk_darwin(v33);
  v294 = (char *)v257 - v36;
  v37 = __chkstk_darwin(v35);
  v301 = (char *)v257 - v38;
  __chkstk_darwin(v37);
  v40 = (char *)v257 - v39;
  v41 = type metadata accessor for SharedBeaconRecord(0);
  v327[3] = v41;
  v327[4] = sub_100006204(&qword_1010F4A70, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F5CC);
  v42 = sub_100018F08(v327);
  sub_10005972C(a1, (uint64_t)v42, type metadata accessor for SharedBeaconRecord);
  v43 = sub_10001A9A8(&qword_1010FD070);
  OS_dispatch_queue.sync<A>(execute:)(sub_1004D0010, a3, v43);
  v44 = aBlock;
  v45 = (char *)v42 + *(int *)(v41 + 20);
  v315 = v30;
  v46 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
  v316 = v29;
  v46(v40, v45, v29);
  v47 = v44[2];
  v292 = v19;
  v304 = v44;
  if (v47)
  {
    sub_100003FB0((uint64_t)v40);
    if ((v48 & 1) != 0)
      v49 = 0;
    else
      v49 = 2;
  }
  else
  {
    v49 = 2;
  }
  v307 = *(void (**)(char *, uint64_t))(v315 + 8);
  v307(v40, v316);
  v50 = sub_1004B8CE4((uint64_t)v42, a3);
  v51 = v50[2];
  if (!v51)
  {
    swift_bridgeObjectRelease();
    v256 = 0;
    v255 = 0;
    v254 = 0;
    v253 = 0;
    v55 = (void **)_swiftEmptyDictionarySingleton;
LABEL_135:
    swift_bridgeObjectRelease();
    sub_10001D8A8((uint64_t)v256, v255);
    sub_10001D8A8((uint64_t)v254, v253);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v327);
    return (uint64_t)v55;
  }
  v264 = v49;
  v279 = v46;
  v280 = v45;
  v276 = v42;
  v281 = a3;
  v299 = 0;
  v300 = 0;
  v297 = 0;
  v298 = 0;
  v275 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorModQueue;
  v274 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager;
  v308 = SPBeaconTaskNameUnknown;
  v306 = SPBeaconTaskNameStartSharing;
  v303 = SPBeaconTaskNameStopSharing;
  v282 = SPBeaconTaskNameEnableLostMode;
  v278 = SPBeaconTaskNameDisableLostMode;
  v277 = SPBeaconTaskNamePlaySound;
  v273 = SPBeaconTaskNameStopSound;
  v272 = SPBeaconTaskNameBeginLeashing;
  v271 = SPBeaconTaskNameEndLeashing;
  v270 = SPBeaconTaskNameBeginBTFinding;
  v269 = SPBeaconTaskNameEndBTFinding;
  v268 = SPBeaconTaskNameConnect;
  v267 = SPBeaconTaskNameDisconnect;
  v266 = SPBeaconTaskNameRename;
  v265 = SPBeaconTaskNameBeginRanging;
  v263 = SPBeaconTaskNameEndRanging;
  v262 = SPBeaconTaskNameAccessoryFirmwareUpdate;
  v261 = SPBeaconTaskNameEnableNotifyWhenFound;
  v260 = SPBeaconTaskNameDisableNotifyWhenFound;
  v259 = SPBeaconTaskNameLocating;
  v296 = v50;
  v52 = (void **)(v50 + 4);
  v53 = 2;
  if ((v312 & 1) != 0)
    v54 = 2;
  else
    v54 = 0;
  v302 = v54;
  if ((v312 & 1) != 0)
    v53 = 0;
  v305 = v53;
  v55 = (void **)_swiftEmptyDictionarySingleton;
  v56 = v314;
  v57 = v310;
  while (1)
  {
    v311 = v55;
    v312 = v51;
    v63 = *v52;
    v326 = 2;
    v64 = v63;
    Date.init()(v64);
    v325 = 0;
    v65 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v315 + 56);
    v65(v56, 1, 1, v316);
    v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v308);
    v68 = v67;
    v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v66 == v69 && v68 == v70)
    {
      swift_bridgeObjectRelease_n(v68, 2);
LABEL_24:
      v78 = -1;
      goto LABEL_25;
    }
    v72 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v68, v69, v70, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v72 & 1) != 0)
      goto LABEL_24;
    v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v306);
    v75 = v74;
    v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v73 == v77 && v75 == v76)
    {
      swift_bridgeObjectRelease_n(v75, 2);
LABEL_32:
      v78 = v305;
      goto LABEL_25;
    }
    v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v73, v75, v77, v76, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v89 & 1) != 0)
      goto LABEL_32;
    v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v303);
    v92 = v91;
    v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v90 == v94 && v92 == v93)
    {
      swift_bridgeObjectRelease_n(v92, 2);
LABEL_37:
      v78 = v302;
LABEL_25:
      v326 = v78;
      goto LABEL_26;
    }
    v95 = _stringCompareWithSmolCheck(_:_:expecting:)(v90, v92, v94, v93, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v95 & 1) != 0)
      goto LABEL_37;
    v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v282);
    v98 = v97;
    v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v96 == v100 && v98 == v99)
    {
      swift_bridgeObjectRelease_n(v98, 2);
LABEL_42:
      v102 = (uint64_t)v301;
      v279(v301, v280, v316);
      v103 = sub_100889F60(v102);
      v104 = v103[2];
      v105 = type metadata accessor for LostModeRecord(0);
      v106 = *(_QWORD *)(v105 - 8);
      if (v104)
      {
        v107 = v295;
        sub_10005972C((uint64_t)v103+ ((*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80)), v295, type metadata accessor for LostModeRecord);
        v108 = 0;
      }
      else
      {
        v108 = 1;
        v107 = v295;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v106 + 56))(v107, v108, 1, v105);
      swift_bridgeObjectRelease();
      v307(v301, v316);
      v109 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v107, 1, v105);
      sub_100004048(v107, (uint64_t *)&unk_1010F47F0);
      if (v109 != 1)
        goto LABEL_55;
LABEL_46:
      v78 = 2;
      goto LABEL_25;
    }
    v101 = _stringCompareWithSmolCheck(_:_:expecting:)(v96, v98, v100, v99, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v101 & 1) != 0)
      goto LABEL_42;
    v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v278);
    v112 = v111;
    v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v110 == v114 && v112 == v113)
    {
      swift_bridgeObjectRelease_n(v112, 2);
LABEL_51:
      v116 = (uint64_t)v294;
      v279(v294, v280, v316);
      v117 = sub_100889F60(v116);
      v118 = v117[2];
      v119 = type metadata accessor for LostModeRecord(0);
      v120 = *(_QWORD *)(v119 - 8);
      if (v118)
      {
        v121 = v293;
        sub_10005972C((uint64_t)v117+ ((*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80)), v293, type metadata accessor for LostModeRecord);
        v122 = 0;
      }
      else
      {
        v122 = 1;
        v121 = v293;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v120 + 56))(v121, v122, 1, v119);
      swift_bridgeObjectRelease();
      v307(v294, v316);
      v123 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v120 + 48))(v121, 1, v119);
      sub_100004048(v121, (uint64_t *)&unk_1010F47F0);
      if (v123 == 1)
      {
LABEL_55:
        v326 = 0;
        goto LABEL_26;
      }
      goto LABEL_46;
    }
    v115 = _stringCompareWithSmolCheck(_:_:expecting:)(v110, v112, v114, v113, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v115 & 1) != 0)
      goto LABEL_51;
    v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v277);
    v126 = v125;
    v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v124 == v128 && v126 == v127)
      break;
    v129 = _stringCompareWithSmolCheck(_:_:expecting:)(v124, v126, v128, v127, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v129 & 1) != 0)
      goto LABEL_60;
    v149 = static String._unconditionallyBridgeFromObjectiveC(_:)(v273);
    v151 = v150;
    v153 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v149 == v153 && v151 == v152)
    {
      swift_bridgeObjectRelease_n(v151, 2);
    }
    else
    {
      v154 = _stringCompareWithSmolCheck(_:_:expecting:)(v149, v151, v153, v152, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v154 & 1) == 0)
      {
        v159 = static String._unconditionallyBridgeFromObjectiveC(_:)(v272);
        v161 = v160;
        v163 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v159 == v163 && v161 == v162)
        {
LABEL_75:
          swift_bridgeObjectRelease_n(v161, 2);
          goto LABEL_77;
        }
        v164 = _stringCompareWithSmolCheck(_:_:expecting:)(v159, v161, v163, v162, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v164 & 1) != 0)
          goto LABEL_77;
        v165 = static String._unconditionallyBridgeFromObjectiveC(_:)(v271);
        v161 = v166;
        v168 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v165 == v168 && v161 == v167)
          goto LABEL_75;
        v169 = _stringCompareWithSmolCheck(_:_:expecting:)(v165, v161, v168, v167, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v169 & 1) != 0)
        {
LABEL_77:
          v326 = sub_1004A73E8((uint64_t)v276, (uint64_t)v281);
          goto LABEL_26;
        }
        v170 = static String._unconditionallyBridgeFromObjectiveC(_:)(v270);
        v172 = v171;
        v174 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v170 == v174 && v172 == v173)
        {
LABEL_83:
          swift_bridgeObjectRelease_n(v172, 2);
          goto LABEL_85;
        }
        v175 = _stringCompareWithSmolCheck(_:_:expecting:)(v170, v172, v174, v173, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v175 & 1) != 0)
          goto LABEL_85;
        v177 = static String._unconditionallyBridgeFromObjectiveC(_:)(v269);
        v172 = v178;
        v180 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v177 == v180 && v172 == v179)
          goto LABEL_83;
        v181 = _stringCompareWithSmolCheck(_:_:expecting:)(v177, v172, v180, v179, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v181 & 1) != 0)
          goto LABEL_85;
        v182 = static String._unconditionallyBridgeFromObjectiveC(_:)(v268);
        v172 = v183;
        v185 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v182 == v185 && v172 == v184)
          goto LABEL_83;
        v186 = _stringCompareWithSmolCheck(_:_:expecting:)(v182, v172, v185, v184, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v186 & 1) != 0)
          goto LABEL_85;
        v187 = static String._unconditionallyBridgeFromObjectiveC(_:)(v267);
        v172 = v188;
        v190 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v187 == v190 && v172 == v189)
          goto LABEL_83;
        v191 = _stringCompareWithSmolCheck(_:_:expecting:)(v187, v172, v190, v189, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v191 & 1) != 0)
          goto LABEL_85;
        v192 = static String._unconditionallyBridgeFromObjectiveC(_:)(v266);
        v172 = v193;
        v195 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v192 == v195 && v172 == v194)
          goto LABEL_83;
        v196 = _stringCompareWithSmolCheck(_:_:expecting:)(v192, v172, v195, v194, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v196 & 1) != 0)
          goto LABEL_85;
        v197 = static String._unconditionallyBridgeFromObjectiveC(_:)(v265);
        v172 = v198;
        v200 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v197 == v200 && v172 == v199)
          goto LABEL_83;
        v201 = _stringCompareWithSmolCheck(_:_:expecting:)(v197, v172, v200, v199, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v201 & 1) != 0)
          goto LABEL_85;
        v202 = static String._unconditionallyBridgeFromObjectiveC(_:)(v263);
        v172 = v203;
        v205 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v202 == v205 && v172 == v204)
          goto LABEL_83;
        v206 = _stringCompareWithSmolCheck(_:_:expecting:)(v202, v172, v205, v204, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v206 & 1) != 0)
          goto LABEL_85;
        v207 = static String._unconditionallyBridgeFromObjectiveC(_:)(v262);
        v209 = v208;
        v211 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v207 == v211 && v209 == v210)
        {
          swift_bridgeObjectRelease_n(v209, 2);
LABEL_110:
          v213 = *((_QWORD *)v281 + 22);
          if (v213)
          {
            v214 = v290;
            v215 = v316;
            v216 = ((uint64_t (*)(char *, char *, uint64_t))v279)(v290, v280, v316);
            v258 = (dispatch_queue_t)v257;
            v257[1] = *(_QWORD *)(v213 + 24);
            __chkstk_darwin(v216);
            v257[-2] = v213;
            v257[-1] = v214;
            v217 = sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
            swift_retain();
            OS_dispatch_queue.sync<A>(execute:)(sub_1004D0038, &v257[-4], v217);
            swift_release();
            v218 = aBlock;
            v307(v214, v215);
            v326 = (uint64_t)objc_msgSend(v218, "state");
            v219 = objc_msgSend(v218, "lastUpdated");
            v220 = v291;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v219);

            ((void (*)(char *, char *, uint64_t))v23[5].isa)(v310, v220, v317);
            v221 = objc_msgSend(v218, "error");
            v222 = v325;
            v325 = v221;
            swift_errorRelease(v222);
            v223 = (void **)objc_msgSend(v218, "commandIdentifier");
            if (v223)
            {
              v224 = v223;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v223);

              v225 = 0;
              v218 = v224;
            }
            else
            {
              v225 = 1;
            }

            v231 = (uint64_t)v284;
            v65((uint64_t)v284, v225, 1, v316);
            sub_100004084(v231, v314, &qword_1010ED860);
          }
LABEL_87:
          v57 = v310;
          goto LABEL_26;
        }
        v212 = _stringCompareWithSmolCheck(_:_:expecting:)(v207, v209, v211, v210, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v212 & 1) != 0)
          goto LABEL_110;
        v226 = static String._unconditionallyBridgeFromObjectiveC(_:)(v261);
        v228 = v227;
        v230 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v226 == v230 && v228 == v229)
        {
          swift_bridgeObjectRelease_n(v228, 2);
          goto LABEL_119;
        }
        v232 = _stringCompareWithSmolCheck(_:_:expecting:)(v226, v228, v230, v229, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v232 & 1) != 0)
        {
LABEL_119:
          v233 = (uint64_t)v283;
          v279(v283, v280, v316);
          v234 = sub_10088AE54(v233);
          if (v234[2])
          {
            sub_10005972C((uint64_t)v234+ ((*(unsigned __int8 *)(v287 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v287 + 80)), v289, type metadata accessor for NotifyWhenFoundRecord);
            v235 = 0;
          }
          else
          {
            v235 = 1;
          }
          v236 = v287;
          v237 = v289;
          v238 = found;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v287 + 56))(v289, v235, 1, found);
          swift_bridgeObjectRelease();
          v307(v283, v316);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v236 + 48))(v237, 1, v238) != 1)
          {
            v239 = v286;
            sub_1000126EC(v289, v286, type metadata accessor for NotifyWhenFoundRecord);
            v240 = (uint64_t)v285;
            v241 = v316;
            v279(v285, (char *)(v239 + *(int *)(found + 20)), v316);
            sub_1000126B0(v239, type metadata accessor for NotifyWhenFoundRecord);
            v65(v240, 0, 1, v241);
            sub_100004084(v240, v314, &qword_1010ED860);
            v326 = 0;
            goto LABEL_87;
          }
          sub_100004048(v289, &qword_1010F33A8);
LABEL_85:
          v176 = 2;
        }
        else
        {
          v242 = static String._unconditionallyBridgeFromObjectiveC(_:)(v260);
          v172 = v243;
          v245 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
          if (v242 == v245 && v172 == v244)
            goto LABEL_83;
          v246 = _stringCompareWithSmolCheck(_:_:expecting:)(v242, v172, v245, v244, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v246 & 1) != 0)
            goto LABEL_85;
          v247 = static String._unconditionallyBridgeFromObjectiveC(_:)(v259);
          v249 = v248;
          v251 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
          if (v247 == v251 && v249 == v250)
          {
            swift_bridgeObjectRelease_n(v249, 2);
          }
          else
          {
            v252 = _stringCompareWithSmolCheck(_:_:expecting:)(v247, v249, v251, v250, 0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v252 & 1) == 0)
              goto LABEL_87;
          }
          v176 = v264;
        }
        v326 = v176;
        goto LABEL_87;
      }
    }
    v155 = (uint64_t)v281;
    v258 = *(dispatch_queue_t *)&v281[v275];
    sub_100030784((uint64_t)v327, (uint64_t)&v324);
    v156 = (_QWORD *)swift_allocObject(&unk_101078CE0, 96, 7);
    v156[2] = v155;
    sub_10000F9FC(&v324, (uint64_t)(v156 + 3));
    v156[8] = &v326;
    v156[9] = v57;
    v156[10] = &v325;
    v156[11] = v314;
    swift_retain();
    sub_10001D8A8((uint64_t)v297, (uint64_t)v298);
    v157 = swift_allocObject(&unk_101078D08, 32, 7);
    *(_QWORD *)(v157 + 16) = sub_1004D0054;
    *(_QWORD *)(v157 + 24) = v156;
    v322 = sub_10001D850;
    v323 = v157;
    aBlock = _NSConcreteStackBlock;
    v319 = 1107296256;
    v320 = sub_10001D8B8;
    v321 = &unk_101078D20;
    v158 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    dispatch_sync(v258, v158);
    _Block_release(v158);
    LOBYTE(v158) = swift_isEscapingClosureAtFileLocation(v157, "", 151, 1872, 50, 1);
    result = swift_release();
    if ((v158 & 1) != 0)
      goto LABEL_137;
    v297 = sub_1004D0054;
    v298 = v156;
LABEL_26:
    ((void (*)(char *, char *, uint64_t))v23[2].isa)(v313, v57, v317);
    v79 = v325;
    v80 = v326;
    v81 = v64;
    swift_errorRetain(v79);
    v82.super.isa = Date._bridgeToObjectiveC()().super.isa;
    if (v79)
    {
      v83 = (void *)_convertErrorToNSError(_:)(v79);
      swift_errorRelease(v79);
    }
    else
    {
      v83 = 0;
    }
    v84 = objc_msgSend(objc_allocWithZone((Class)SPBeaconTaskInformation), "initWithName:lastUpdated:error:state:", v81, v82.super.isa, v83, v80);

    v85 = v23;
    isa = (void (*)(char *, uint64_t))v23[1].isa;
    isa(v313, v317);
    v87 = v309;
    sub_10000F9B8(v314, v309, &qword_1010ED860);
    v88 = v316;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v315 + 48))(v87, 1, v316) == 1)
    {
      v58.super.isa = 0;
    }
    else
    {
      v58.super.isa = UUID._bridgeToObjectiveC()().super.isa;
      v307((char *)v87, v88);
    }
    objc_msgSend(v84, "setCommandIdentifier:", v58.super.isa);

    v59 = v81;
    v60 = v84;
    v61 = v311;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v311);
    aBlock = v61;
    sub_10010BBE4((uint64_t)v60, v59, isUniquelyReferenced_nonNull_native);
    v55 = aBlock;

    swift_bridgeObjectRelease();
    v56 = v314;
    sub_100004048(v314, &qword_1010ED860);
    swift_errorRelease(v325);
    v57 = v310;
    isa(v310, v317);
    ++v52;
    v51 = v312 - 1;
    v23 = v85;
    if (v312 == 1)
    {
      swift_bridgeObjectRelease();
      v253 = (uint64_t)v298;
      v254 = v297;
      v255 = (uint64_t)v300;
      v256 = v299;
      goto LABEL_135;
    }
  }
  swift_bridgeObjectRelease_n(v126, 2);
LABEL_60:
  if ((sub_100D3BFD0() & 1) != 0)
  {
    v130 = *(_QWORD *)&v281[v274];
    v131 = v290;
    v132 = v316;
    v133 = ((uint64_t (*)(char *, char *, uint64_t))v279)(v290, v280, v316);
    v258 = v23;
    __chkstk_darwin(v133);
    v257[-2] = v130;
    v257[-1] = v131;
    v134 = sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
    OS_dispatch_queue.sync<A>(execute:)(sub_1004D0090, &v257[-4], v134);
    v135 = aBlock;
    v307(v131, v132);
    v326 = (uint64_t)objc_msgSend(v135, "state");
    v136 = objc_msgSend(v135, "lastUpdated");
    v137 = v291;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v136);

    v57 = v310;
    ((void (*)(char *, char *, uint64_t))v258[5].isa)(v310, v137, v317);
    v138 = objc_msgSend(v135, "error");
    v139 = v325;
    v325 = v138;
    swift_errorRelease(v139);
    v140 = (void **)objc_msgSend(v135, "commandIdentifier");
    if (v140)
    {
      v141 = v140;
      v142 = (uint64_t)v292;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v140);

      v143 = 0;
      v135 = v141;
    }
    else
    {
      v143 = 1;
      v142 = (uint64_t)v292;
    }

    v65(v142, v143, 1, v316);
    sub_100004084(v142, v314, &qword_1010ED860);
    v23 = v258;
    goto LABEL_26;
  }
  v144 = (uint64_t)v281;
  v258 = *(dispatch_queue_t *)&v281[v275];
  sub_100030784((uint64_t)v327, (uint64_t)&v324);
  v145 = (_QWORD *)swift_allocObject(&unk_101078D58, 96, 7);
  v145[2] = v144;
  sub_10000F9FC(&v324, (uint64_t)(v145 + 3));
  v145[8] = &v326;
  v145[9] = v57;
  v145[10] = &v325;
  v145[11] = v314;
  swift_retain();
  sub_10001D8A8((uint64_t)v299, (uint64_t)v300);
  v146 = swift_allocObject(&unk_101078D80, 32, 7);
  *(_QWORD *)(v146 + 16) = sub_1004D0074;
  *(_QWORD *)(v146 + 24) = v145;
  v322 = sub_10005CBA4;
  v323 = v146;
  aBlock = _NSConcreteStackBlock;
  v319 = 1107296256;
  v320 = sub_10001D8B8;
  v321 = &unk_101078D98;
  v147 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v258, v147);
  _Block_release(v147);
  LOBYTE(v147) = swift_isEscapingClosureAtFileLocation(v146, "", 151, 1861, 54, 1);
  result = swift_release();
  if ((v147 & 1) == 0)
  {
    v299 = sub_1004D0074;
    v300 = v145;
    goto LABEL_26;
  }
  __break(1u);
LABEL_137:
  __break(1u);
  return result;
}

uint64_t sub_1004B0440(uint64_t a1, int a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  dispatch_queue_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void **v44;
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  void *v47;
  char v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  char *v57;
  NSUUID v58;
  id v59;
  id v60;
  void **v61;
  char isUniquelyReferenced_nonNull_native;
  void *v63;
  id v64;
  void (*v65)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  id v81;
  NSDate v82;
  void *v83;
  id v84;
  NSObject *v85;
  void (*isa)(char *, uint64_t);
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  char v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void **v136;
  id v137;
  char *v138;
  id v139;
  id v140;
  void **v141;
  void **v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  void *v148;
  uint64_t result;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void **v219;
  id v220;
  char *v221;
  id v222;
  id v223;
  void **v224;
  void **v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char v253;
  uint64_t v254;
  uint64_t (*v255)();
  uint64_t v256;
  uint64_t (*v257)();
  _QWORD v258[2];
  dispatch_queue_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  void (*v280)(char *, char *, uint64_t);
  char *v281;
  char *v282;
  uint64_t v283;
  char *v284;
  char *v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t found;
  uint64_t v290;
  char *v291;
  char *v292;
  char *v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t (*v298)();
  _QWORD *v299;
  uint64_t (*v300)();
  _QWORD *v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  void **v305;
  uint64_t v306;
  uint64_t v307;
  void (*v308)(char *, uint64_t);
  uint64_t v309;
  uint64_t v310;
  char *v311;
  void **v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  void **aBlock;
  uint64_t v320;
  uint64_t (*v321)(uint64_t);
  void *v322;
  uint64_t (*v323)();
  uint64_t v324;
  __int128 v325;
  id v326;
  uint64_t v327;
  _QWORD v328[5];

  LODWORD(v313) = a2;
  v5 = sub_10001A9A8(&qword_1010F33A8);
  __chkstk_darwin(v5);
  v290 = (uint64_t)v258 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v288 = *(_QWORD *)(found - 8);
  __chkstk_darwin(found);
  v287 = (uint64_t)v258 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F47F0);
  v9 = __chkstk_darwin(v8);
  v294 = (uint64_t)v258 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v296 = (uint64_t)v258 - v11;
  v12 = sub_10001A9A8(&qword_1010ED860);
  v13 = __chkstk_darwin(v12);
  v286 = (char *)v258 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v285 = (char *)v258 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)v258 - v18;
  v20 = __chkstk_darwin(v17);
  v310 = (uint64_t)v258 - v21;
  __chkstk_darwin(v20);
  v315 = (uint64_t)v258 - v22;
  v318 = type metadata accessor for Date(0);
  v23 = *(dispatch_queue_t *)(v318 - 8);
  v24 = __chkstk_darwin(v318);
  v292 = (char *)v258 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v314 = (char *)v258 - v27;
  __chkstk_darwin(v26);
  v311 = (char *)v258 - v28;
  v29 = type metadata accessor for UUID(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = __chkstk_darwin(v29);
  v284 = (char *)v258 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v291 = (char *)v258 - v34;
  v35 = __chkstk_darwin(v33);
  v295 = (char *)v258 - v36;
  v37 = __chkstk_darwin(v35);
  v302 = (char *)v258 - v38;
  __chkstk_darwin(v37);
  v40 = (char *)v258 - v39;
  v41 = type metadata accessor for OwnedBeaconRecord(0);
  v328[3] = v41;
  v328[4] = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
  v42 = sub_100018F08(v328);
  sub_10005972C(a1, (uint64_t)v42, type metadata accessor for OwnedBeaconRecord);
  v43 = sub_10001A9A8(&qword_1010FD070);
  OS_dispatch_queue.sync<A>(execute:)(sub_1004D6414, a3, v43);
  v44 = aBlock;
  v45 = (char *)v42 + *(int *)(v41 + 20);
  v316 = v30;
  v46 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
  v317 = v29;
  v46(v40, v45, v29);
  v47 = v44[2];
  v293 = v19;
  v305 = v44;
  if (v47)
  {
    sub_100003FB0((uint64_t)v40);
    if ((v48 & 1) != 0)
      v49 = 0;
    else
      v49 = 2;
  }
  else
  {
    v49 = 2;
  }
  v308 = *(void (**)(char *, uint64_t))(v316 + 8);
  v308(v40, v317);
  v50 = sub_1004B76B8((uint64_t)v42, a3);
  v51 = v50[2];
  if (!v51)
  {
    swift_bridgeObjectRelease();
    v257 = 0;
    v256 = 0;
    v255 = 0;
    v254 = 0;
    v55 = (void **)_swiftEmptyDictionarySingleton;
LABEL_135:
    swift_bridgeObjectRelease();
    sub_10001D8A8((uint64_t)v257, v256);
    sub_10001D8A8((uint64_t)v255, v254);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v328);
    return (uint64_t)v55;
  }
  v265 = v49;
  v280 = v46;
  v281 = v45;
  v277 = v42;
  v282 = a3;
  v300 = 0;
  v301 = 0;
  v298 = 0;
  v299 = 0;
  v276 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorModQueue;
  v275 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager;
  v309 = SPBeaconTaskNameUnknown;
  v307 = SPBeaconTaskNameStartSharing;
  v304 = SPBeaconTaskNameStopSharing;
  v283 = SPBeaconTaskNameEnableLostMode;
  v279 = SPBeaconTaskNameDisableLostMode;
  v278 = SPBeaconTaskNamePlaySound;
  v274 = SPBeaconTaskNameStopSound;
  v273 = SPBeaconTaskNameBeginLeashing;
  v272 = SPBeaconTaskNameEndLeashing;
  v271 = SPBeaconTaskNameBeginBTFinding;
  v270 = SPBeaconTaskNameEndBTFinding;
  v269 = SPBeaconTaskNameConnect;
  v268 = SPBeaconTaskNameDisconnect;
  v267 = SPBeaconTaskNameRename;
  v266 = SPBeaconTaskNameBeginRanging;
  v264 = SPBeaconTaskNameEndRanging;
  v263 = SPBeaconTaskNameAccessoryFirmwareUpdate;
  v262 = SPBeaconTaskNameEnableNotifyWhenFound;
  v261 = SPBeaconTaskNameDisableNotifyWhenFound;
  v260 = SPBeaconTaskNameLocating;
  v297 = v50;
  v52 = (void **)(v50 + 4);
  v53 = 2;
  if ((v313 & 1) != 0)
    v54 = 2;
  else
    v54 = 0;
  v303 = v54;
  if ((v313 & 1) != 0)
    v53 = 0;
  v306 = v53;
  v55 = (void **)_swiftEmptyDictionarySingleton;
  v56 = v315;
  v57 = v311;
  while (1)
  {
    v312 = v55;
    v313 = v51;
    v63 = *v52;
    v327 = 2;
    v64 = v63;
    Date.init()(v64);
    v326 = 0;
    v65 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v316 + 56);
    v65(v56, 1, 1, v317);
    v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v309);
    v68 = v67;
    v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v66 == v69 && v68 == v70)
    {
      swift_bridgeObjectRelease_n(v68, 2);
LABEL_24:
      v78 = -1;
      goto LABEL_25;
    }
    v72 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v68, v69, v70, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v72 & 1) != 0)
      goto LABEL_24;
    v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v307);
    v75 = v74;
    v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v73 == v77 && v75 == v76)
    {
      swift_bridgeObjectRelease_n(v75, 2);
LABEL_32:
      v78 = v306;
      goto LABEL_25;
    }
    v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v73, v75, v77, v76, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v89 & 1) != 0)
      goto LABEL_32;
    v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v304);
    v92 = v91;
    v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v90 == v94 && v92 == v93)
    {
      swift_bridgeObjectRelease_n(v92, 2);
LABEL_37:
      v78 = v303;
LABEL_25:
      v327 = v78;
      goto LABEL_26;
    }
    v95 = _stringCompareWithSmolCheck(_:_:expecting:)(v90, v92, v94, v93, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v95 & 1) != 0)
      goto LABEL_37;
    v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v283);
    v98 = v97;
    v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v96 == v100 && v98 == v99)
    {
      swift_bridgeObjectRelease_n(v98, 2);
LABEL_42:
      v102 = (uint64_t)v302;
      v280(v302, v281, v317);
      v103 = sub_100889F60(v102);
      v104 = v103[2];
      v105 = type metadata accessor for LostModeRecord(0);
      v106 = *(_QWORD *)(v105 - 8);
      if (v104)
      {
        v107 = v296;
        sub_10005972C((uint64_t)v103+ ((*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80)), v296, type metadata accessor for LostModeRecord);
        v108 = 0;
      }
      else
      {
        v108 = 1;
        v107 = v296;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v106 + 56))(v107, v108, 1, v105);
      swift_bridgeObjectRelease();
      v308(v302, v317);
      v109 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v107, 1, v105);
      sub_100004048(v107, (uint64_t *)&unk_1010F47F0);
      if (v109 != 1)
        goto LABEL_55;
LABEL_46:
      v78 = 2;
      goto LABEL_25;
    }
    v101 = _stringCompareWithSmolCheck(_:_:expecting:)(v96, v98, v100, v99, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v101 & 1) != 0)
      goto LABEL_42;
    v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v279);
    v112 = v111;
    v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v110 == v114 && v112 == v113)
    {
      swift_bridgeObjectRelease_n(v112, 2);
LABEL_51:
      v116 = (uint64_t)v295;
      v280(v295, v281, v317);
      v117 = sub_100889F60(v116);
      v118 = v117[2];
      v119 = type metadata accessor for LostModeRecord(0);
      v120 = *(_QWORD *)(v119 - 8);
      if (v118)
      {
        v121 = v294;
        sub_10005972C((uint64_t)v117+ ((*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80)), v294, type metadata accessor for LostModeRecord);
        v122 = 0;
      }
      else
      {
        v122 = 1;
        v121 = v294;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v120 + 56))(v121, v122, 1, v119);
      swift_bridgeObjectRelease();
      v308(v295, v317);
      v123 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v120 + 48))(v121, 1, v119);
      sub_100004048(v121, (uint64_t *)&unk_1010F47F0);
      if (v123 == 1)
      {
LABEL_55:
        v327 = 0;
        goto LABEL_26;
      }
      goto LABEL_46;
    }
    v115 = _stringCompareWithSmolCheck(_:_:expecting:)(v110, v112, v114, v113, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v115 & 1) != 0)
      goto LABEL_51;
    v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v278);
    v126 = v125;
    v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v124 == v128 && v126 == v127)
      break;
    v129 = _stringCompareWithSmolCheck(_:_:expecting:)(v124, v126, v128, v127, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v129 & 1) != 0)
      goto LABEL_60;
    v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v274);
    v152 = v151;
    v154 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v150 == v154 && v152 == v153)
    {
      swift_bridgeObjectRelease_n(v152, 2);
    }
    else
    {
      v155 = _stringCompareWithSmolCheck(_:_:expecting:)(v150, v152, v154, v153, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v155 & 1) == 0)
      {
        v160 = static String._unconditionallyBridgeFromObjectiveC(_:)(v273);
        v162 = v161;
        v164 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v160 == v164 && v162 == v163)
        {
LABEL_75:
          swift_bridgeObjectRelease_n(v162, 2);
          goto LABEL_77;
        }
        v165 = _stringCompareWithSmolCheck(_:_:expecting:)(v160, v162, v164, v163, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v165 & 1) != 0)
          goto LABEL_77;
        v166 = static String._unconditionallyBridgeFromObjectiveC(_:)(v272);
        v162 = v167;
        v169 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v166 == v169 && v162 == v168)
          goto LABEL_75;
        v170 = _stringCompareWithSmolCheck(_:_:expecting:)(v166, v162, v169, v168, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v170 & 1) != 0)
        {
LABEL_77:
          v327 = sub_1004A6EE4((uint64_t)v277, (uint64_t)v282);
          goto LABEL_26;
        }
        v171 = static String._unconditionallyBridgeFromObjectiveC(_:)(v271);
        v173 = v172;
        v175 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v171 == v175 && v173 == v174)
        {
LABEL_83:
          swift_bridgeObjectRelease_n(v173, 2);
          goto LABEL_85;
        }
        v176 = _stringCompareWithSmolCheck(_:_:expecting:)(v171, v173, v175, v174, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v176 & 1) != 0)
          goto LABEL_85;
        v178 = static String._unconditionallyBridgeFromObjectiveC(_:)(v270);
        v173 = v179;
        v181 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v178 == v181 && v173 == v180)
          goto LABEL_83;
        v182 = _stringCompareWithSmolCheck(_:_:expecting:)(v178, v173, v181, v180, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v182 & 1) != 0)
          goto LABEL_85;
        v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(v269);
        v173 = v184;
        v186 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v183 == v186 && v173 == v185)
          goto LABEL_83;
        v187 = _stringCompareWithSmolCheck(_:_:expecting:)(v183, v173, v186, v185, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v187 & 1) != 0)
          goto LABEL_85;
        v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v268);
        v173 = v189;
        v191 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v188 == v191 && v173 == v190)
          goto LABEL_83;
        v192 = _stringCompareWithSmolCheck(_:_:expecting:)(v188, v173, v191, v190, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v192 & 1) != 0)
          goto LABEL_85;
        v193 = static String._unconditionallyBridgeFromObjectiveC(_:)(v267);
        v173 = v194;
        v196 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v193 == v196 && v173 == v195)
          goto LABEL_83;
        v197 = _stringCompareWithSmolCheck(_:_:expecting:)(v193, v173, v196, v195, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v197 & 1) != 0)
          goto LABEL_85;
        v198 = static String._unconditionallyBridgeFromObjectiveC(_:)(v266);
        v173 = v199;
        v201 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v198 == v201 && v173 == v200)
          goto LABEL_83;
        v202 = _stringCompareWithSmolCheck(_:_:expecting:)(v198, v173, v201, v200, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v202 & 1) != 0)
          goto LABEL_85;
        v203 = static String._unconditionallyBridgeFromObjectiveC(_:)(v264);
        v173 = v204;
        v206 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v203 == v206 && v173 == v205)
          goto LABEL_83;
        v207 = _stringCompareWithSmolCheck(_:_:expecting:)(v203, v173, v206, v205, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v207 & 1) != 0)
          goto LABEL_85;
        v208 = static String._unconditionallyBridgeFromObjectiveC(_:)(v263);
        v210 = v209;
        v212 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v208 == v212 && v210 == v211)
        {
          swift_bridgeObjectRelease_n(v210, 2);
LABEL_110:
          v214 = *((_QWORD *)v282 + 22);
          if (v214)
          {
            v215 = v291;
            v216 = v317;
            v217 = ((uint64_t (*)(char *, char *, uint64_t))v280)(v291, v281, v317);
            v259 = (dispatch_queue_t)v258;
            v258[1] = *(_QWORD *)(v214 + 24);
            __chkstk_darwin(v217);
            v258[-2] = v214;
            v258[-1] = v215;
            v218 = sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
            swift_retain();
            OS_dispatch_queue.sync<A>(execute:)(sub_1004D6580, &v258[-4], v218);
            swift_release();
            v219 = aBlock;
            v308(v215, v216);
            v327 = (uint64_t)objc_msgSend(v219, "state");
            v220 = objc_msgSend(v219, "lastUpdated");
            v221 = v292;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v220);

            ((void (*)(char *, char *, uint64_t))v23[5].isa)(v311, v221, v318);
            v222 = objc_msgSend(v219, "error");
            v223 = v326;
            v326 = v222;
            swift_errorRelease(v223);
            v224 = (void **)objc_msgSend(v219, "commandIdentifier");
            if (v224)
            {
              v225 = v224;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v224);

              v226 = 0;
              v219 = v225;
            }
            else
            {
              v226 = 1;
            }

            v232 = (uint64_t)v285;
            v65((uint64_t)v285, v226, 1, v317);
            sub_100004084(v232, v315, &qword_1010ED860);
          }
LABEL_87:
          v57 = v311;
          goto LABEL_26;
        }
        v213 = _stringCompareWithSmolCheck(_:_:expecting:)(v208, v210, v212, v211, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v213 & 1) != 0)
          goto LABEL_110;
        v227 = static String._unconditionallyBridgeFromObjectiveC(_:)(v262);
        v229 = v228;
        v231 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v227 == v231 && v229 == v230)
        {
          swift_bridgeObjectRelease_n(v229, 2);
          goto LABEL_119;
        }
        v233 = _stringCompareWithSmolCheck(_:_:expecting:)(v227, v229, v231, v230, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v233 & 1) != 0)
        {
LABEL_119:
          v234 = (uint64_t)v284;
          v280(v284, v281, v317);
          v235 = sub_10088AE54(v234);
          if (v235[2])
          {
            sub_10005972C((uint64_t)v235+ ((*(unsigned __int8 *)(v288 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v288 + 80)), v290, type metadata accessor for NotifyWhenFoundRecord);
            v236 = 0;
          }
          else
          {
            v236 = 1;
          }
          v237 = v288;
          v238 = v290;
          v239 = found;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v288 + 56))(v290, v236, 1, found);
          swift_bridgeObjectRelease();
          v308(v284, v317);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v237 + 48))(v238, 1, v239) != 1)
          {
            v240 = v287;
            sub_1000126EC(v290, v287, type metadata accessor for NotifyWhenFoundRecord);
            v241 = (uint64_t)v286;
            v242 = v317;
            v280(v286, (char *)(v240 + *(int *)(found + 20)), v317);
            sub_1000126B0(v240, type metadata accessor for NotifyWhenFoundRecord);
            v65(v241, 0, 1, v242);
            sub_100004084(v241, v315, &qword_1010ED860);
            v327 = 0;
            goto LABEL_87;
          }
          sub_100004048(v290, &qword_1010F33A8);
LABEL_85:
          v177 = 2;
        }
        else
        {
          v243 = static String._unconditionallyBridgeFromObjectiveC(_:)(v261);
          v173 = v244;
          v246 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
          if (v243 == v246 && v173 == v245)
            goto LABEL_83;
          v247 = _stringCompareWithSmolCheck(_:_:expecting:)(v243, v173, v246, v245, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v247 & 1) != 0)
            goto LABEL_85;
          v248 = static String._unconditionallyBridgeFromObjectiveC(_:)(v260);
          v250 = v249;
          v252 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
          if (v248 == v252 && v250 == v251)
          {
            swift_bridgeObjectRelease_n(v250, 2);
          }
          else
          {
            v253 = _stringCompareWithSmolCheck(_:_:expecting:)(v248, v250, v252, v251, 0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v253 & 1) == 0)
              goto LABEL_87;
          }
          v177 = v265;
        }
        v327 = v177;
        goto LABEL_87;
      }
    }
    v156 = (uint64_t)v282;
    v259 = *(dispatch_queue_t *)&v282[v276];
    sub_100030784((uint64_t)v328, (uint64_t)&v325);
    v157 = (_QWORD *)swift_allocObject(&unk_101078DF8, 96, 7);
    v157[2] = v156;
    sub_10000F9FC(&v325, (uint64_t)(v157 + 3));
    v157[8] = &v327;
    v157[9] = v57;
    v157[10] = &v326;
    v157[11] = v315;
    swift_retain();
    sub_10001D8A8((uint64_t)v298, (uint64_t)v299);
    v158 = swift_allocObject(&unk_101078E20, 32, 7);
    *(_QWORD *)(v158 + 16) = sub_1004D0054;
    *(_QWORD *)(v158 + 24) = v157;
    v323 = sub_10005CBA4;
    v324 = v158;
    aBlock = _NSConcreteStackBlock;
    v320 = 1107296256;
    v321 = sub_10001D8B8;
    v322 = &unk_101078E38;
    v159 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    dispatch_sync(v259, v159);
    _Block_release(v159);
    LOBYTE(v159) = swift_isEscapingClosureAtFileLocation(v158, "", 151, 1872, 50, 1);
    result = swift_release();
    if ((v159 & 1) != 0)
      goto LABEL_137;
    v298 = sub_1004D0054;
    v299 = v157;
LABEL_26:
    ((void (*)(char *, char *, uint64_t))v23[2].isa)(v314, v57, v318);
    v79 = v326;
    v80 = v327;
    v81 = v64;
    swift_errorRetain(v79);
    v82.super.isa = Date._bridgeToObjectiveC()().super.isa;
    if (v79)
    {
      v83 = (void *)_convertErrorToNSError(_:)(v79);
      swift_errorRelease(v79);
    }
    else
    {
      v83 = 0;
    }
    v84 = objc_msgSend(objc_allocWithZone((Class)SPBeaconTaskInformation), "initWithName:lastUpdated:error:state:", v81, v82.super.isa, v83, v80);

    v85 = v23;
    isa = (void (*)(char *, uint64_t))v23[1].isa;
    isa(v314, v318);
    v87 = v310;
    sub_10000F9B8(v315, v310, &qword_1010ED860);
    v88 = v317;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v316 + 48))(v87, 1, v317) == 1)
    {
      v58.super.isa = 0;
    }
    else
    {
      v58.super.isa = UUID._bridgeToObjectiveC()().super.isa;
      v308((char *)v87, v88);
    }
    objc_msgSend(v84, "setCommandIdentifier:", v58.super.isa);

    v59 = v81;
    v60 = v84;
    v61 = v312;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v312);
    aBlock = v61;
    sub_10010BBE4((uint64_t)v60, v59, isUniquelyReferenced_nonNull_native);
    v55 = aBlock;

    swift_bridgeObjectRelease();
    v56 = v315;
    sub_100004048(v315, &qword_1010ED860);
    swift_errorRelease(v326);
    v57 = v311;
    isa(v311, v318);
    ++v52;
    v51 = v313 - 1;
    v23 = v85;
    if (v313 == 1)
    {
      swift_bridgeObjectRelease();
      v254 = (uint64_t)v299;
      v255 = v298;
      v256 = (uint64_t)v301;
      v257 = v300;
      goto LABEL_135;
    }
  }
  swift_bridgeObjectRelease_n(v126, 2);
LABEL_60:
  sub_1009A2848();
  if ((v130 & 1) != 0)
  {
    v131 = *(_QWORD *)&v282[v275];
    v132 = v291;
    v133 = v317;
    v134 = ((uint64_t (*)(char *, char *, uint64_t))v280)(v291, v281, v317);
    v259 = v23;
    __chkstk_darwin(v134);
    v258[-2] = v131;
    v258[-1] = v132;
    v135 = sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
    OS_dispatch_queue.sync<A>(execute:)(sub_1004D6594, &v258[-4], v135);
    v136 = aBlock;
    v308(v132, v133);
    v327 = (uint64_t)objc_msgSend(v136, "state");
    v137 = objc_msgSend(v136, "lastUpdated");
    v138 = v292;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v137);

    v57 = v311;
    ((void (*)(char *, char *, uint64_t))v259[5].isa)(v311, v138, v318);
    v139 = objc_msgSend(v136, "error");
    v140 = v326;
    v326 = v139;
    swift_errorRelease(v140);
    v141 = (void **)objc_msgSend(v136, "commandIdentifier");
    if (v141)
    {
      v142 = v141;
      v143 = (uint64_t)v293;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v141);

      v144 = 0;
      v136 = v142;
    }
    else
    {
      v144 = 1;
      v143 = (uint64_t)v293;
    }

    v65(v143, v144, 1, v317);
    sub_100004084(v143, v315, &qword_1010ED860);
    v23 = v259;
    goto LABEL_26;
  }
  v145 = (uint64_t)v282;
  v259 = *(dispatch_queue_t *)&v282[v276];
  sub_100030784((uint64_t)v328, (uint64_t)&v325);
  v146 = (_QWORD *)swift_allocObject(&unk_101078E70, 96, 7);
  v146[2] = v145;
  sub_10000F9FC(&v325, (uint64_t)(v146 + 3));
  v146[8] = &v327;
  v146[9] = v57;
  v146[10] = &v326;
  v146[11] = v315;
  swift_retain();
  sub_10001D8A8((uint64_t)v300, (uint64_t)v301);
  v147 = swift_allocObject(&unk_101078E98, 32, 7);
  *(_QWORD *)(v147 + 16) = sub_1004D0074;
  *(_QWORD *)(v147 + 24) = v146;
  v323 = sub_10005CBA4;
  v324 = v147;
  aBlock = _NSConcreteStackBlock;
  v320 = 1107296256;
  v321 = sub_10001D8B8;
  v322 = &unk_101078EB0;
  v148 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v259, v148);
  _Block_release(v148);
  LOBYTE(v148) = swift_isEscapingClosureAtFileLocation(v147, "", 151, 1861, 54, 1);
  result = swift_release();
  if ((v148 & 1) == 0)
  {
    v300 = sub_1004D0074;
    v301 = v146;
    goto LABEL_26;
  }
  __break(1u);
LABEL_137:
  __break(1u);
  return result;
}

uint64_t sub_1004B20B4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t found;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  void (*v44)(char *, _QWORD *, uint64_t);
  void *v45;
  char v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  _QWORD *v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  uint64_t v55;
  NSUUID v56;
  id v57;
  id v58;
  char isUniquelyReferenced_nonNull_native;
  void *v60;
  id v61;
  void (*v62)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  id v78;
  NSDate v79;
  void *v80;
  id v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  void *v129;
  uint64_t result;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  void **v199;
  id v200;
  char *v201;
  id v202;
  id v203;
  void **v204;
  void **v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t (*v236)();
  uint64_t (*v237)();
  uint64_t v238;
  uint64_t v239;
  dispatch_queue_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  void (*v260)(char *, _QWORD *, uint64_t);
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  char *v267;
  char *v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  _QWORD *v275;
  uint64_t (*v276)();
  _QWORD *v277;
  uint64_t (*v278)();
  _QWORD *v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  void **v283;
  uint64_t v284;
  uint64_t v285;
  void (*v286)(char *, uint64_t);
  uint64_t v287;
  char *v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  void **aBlock;
  uint64_t v297;
  uint64_t (*v298)(uint64_t);
  void *v299;
  uint64_t (*v300)();
  uint64_t v301;
  __int128 v302;
  id v303;
  uint64_t v304;
  _QWORD v305[5];

  LODWORD(v288) = a2;
  v5 = sub_10001A9A8(&qword_1010F33A8);
  __chkstk_darwin(v5);
  v271 = (uint64_t)&v238 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v8 = *(_QWORD *)(found - 8);
  __chkstk_darwin(found);
  v270 = (uint64_t)&v238 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F47F0);
  v11 = __chkstk_darwin(v10);
  v272 = (uint64_t)&v238 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v274 = (uint64_t)&v238 - v13;
  v14 = sub_10001A9A8(&qword_1010ED860);
  v15 = __chkstk_darwin(v14);
  v269 = (char *)&v238 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v268 = (char *)&v238 - v18;
  v19 = __chkstk_darwin(v17);
  v289 = (uint64_t)&v238 - v20;
  __chkstk_darwin(v19);
  v293 = (uint64_t)&v238 - v21;
  v295 = type metadata accessor for Date(0);
  v291 = *(_QWORD *)(v295 - 8);
  v22 = __chkstk_darwin(v295);
  v267 = (char *)&v238 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v290 = (char *)&v238 - v25;
  __chkstk_darwin(v24);
  v27 = (char *)&v238 - v26;
  v28 = type metadata accessor for UUID(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = __chkstk_darwin(v28);
  v266 = (char *)&v238 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v265 = (char *)&v238 - v33;
  v34 = __chkstk_darwin(v32);
  v273 = (char *)&v238 - v35;
  v36 = __chkstk_darwin(v34);
  v280 = (char *)&v238 - v37;
  __chkstk_darwin(v36);
  v39 = (char *)&v238 - v38;
  v305[3] = type metadata accessor for LocalFindableAccessoryRecord(0);
  v305[4] = sub_100006204(&qword_1010F4A80, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E25DE4);
  v40 = sub_100018F08(v305);
  sub_10005972C(a1, (uint64_t)v40, type metadata accessor for LocalFindableAccessoryRecord);
  v41 = sub_10001A9A8(&qword_1010FD070);
  v42 = 0;
  OS_dispatch_queue.sync<A>(execute:)(sub_1004D6414, a3, v41);
  v43 = aBlock;
  v294 = v29;
  v44 = *(void (**)(char *, _QWORD *, uint64_t))(v29 + 16);
  v44(v39, v40, v28);
  v45 = v43[2];
  v283 = v43;
  if (v45)
  {
    sub_100003FB0((uint64_t)v39);
    v47 = 2;
    if ((v46 & 1) != 0)
      v47 = 0;
  }
  else
  {
    v47 = 2;
  }
  v264 = v47;
  v48 = *(void (**)(char *, uint64_t))(v294 + 8);
  v292 = v28;
  v286 = v48;
  v48(v39, v28);
  v49 = sub_1004B69A0((uint64_t)v40, a3);
  v50 = v49[2];
  if (!v50)
  {
    swift_bridgeObjectRelease();
    v237 = 0;
    v235 = 0;
    v236 = 0;
    v234 = 0;
    v54 = (void **)_swiftEmptyDictionarySingleton;
LABEL_130:
    swift_bridgeObjectRelease();
    sub_10001D8A8((uint64_t)v237, v235);
    sub_10001D8A8((uint64_t)v236, v234);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v305);
    return (uint64_t)v54;
  }
  v260 = v44;
  v261 = v40;
  v246 = v8;
  v247 = found;
  v262 = a3;
  v278 = 0;
  v279 = 0;
  v276 = 0;
  v277 = 0;
  v257 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorModQueue;
  v287 = SPBeaconTaskNameUnknown;
  v285 = SPBeaconTaskNameStartSharing;
  v282 = SPBeaconTaskNameStopSharing;
  v263 = SPBeaconTaskNameEnableLostMode;
  v259 = SPBeaconTaskNameDisableLostMode;
  v258 = SPBeaconTaskNamePlaySound;
  v256 = SPBeaconTaskNameStopSound;
  v255 = SPBeaconTaskNameBeginLeashing;
  v254 = SPBeaconTaskNameEndLeashing;
  v253 = SPBeaconTaskNameBeginBTFinding;
  v252 = SPBeaconTaskNameEndBTFinding;
  v251 = SPBeaconTaskNameConnect;
  v250 = SPBeaconTaskNameDisconnect;
  v249 = SPBeaconTaskNameRename;
  v248 = SPBeaconTaskNameBeginRanging;
  v245 = SPBeaconTaskNameEndRanging;
  v244 = SPBeaconTaskNameAccessoryFirmwareUpdate;
  v243 = SPBeaconTaskNameEnableNotifyWhenFound;
  v242 = SPBeaconTaskNameDisableNotifyWhenFound;
  v241 = SPBeaconTaskNameLocating;
  v275 = v49;
  v51 = (void **)(v49 + 4);
  v52 = 2;
  if ((v288 & 1) != 0)
    v53 = 2;
  else
    v53 = 0;
  v281 = v53;
  if ((v288 & 1) != 0)
    v52 = 0;
  v284 = v52;
  v54 = (void **)_swiftEmptyDictionarySingleton;
  v55 = v293;
  v288 = v27;
  while (1)
  {
    v60 = *v51;
    v304 = 2;
    v61 = v60;
    Date.init()(v61);
    v303 = 0;
    v62 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v294 + 56);
    v62(v55, 1, 1, v292);
    v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v287);
    v65 = v64;
    v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    if (v63 == v66 && v65 == v67)
    {
      swift_bridgeObjectRelease_n(v65, 2);
LABEL_24:
      v75 = -1;
      goto LABEL_25;
    }
    v69 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v65, v66, v67, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v69 & 1) != 0)
      goto LABEL_24;
    v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v285);
    v72 = v71;
    v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    if (v70 == v74 && v72 == v73)
    {
      swift_bridgeObjectRelease_n(v72, 2);
LABEL_32:
      v75 = v284;
      goto LABEL_25;
    }
    v85 = _stringCompareWithSmolCheck(_:_:expecting:)(v70, v72, v74, v73, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v85 & 1) != 0)
      goto LABEL_32;
    v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v282);
    v88 = v87;
    v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    if (v86 == v90 && v88 == v89)
    {
      swift_bridgeObjectRelease_n(v88, 2);
LABEL_37:
      v75 = v281;
LABEL_25:
      v304 = v75;
      goto LABEL_26;
    }
    v91 = _stringCompareWithSmolCheck(_:_:expecting:)(v86, v88, v90, v89, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v91 & 1) != 0)
      goto LABEL_37;
    v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v263);
    v94 = v93;
    v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    if (v92 == v96 && v94 == v95)
    {
      swift_bridgeObjectRelease_n(v94, 2);
LABEL_42:
      v98 = (uint64_t)v280;
      v260(v280, v261, v292);
      v99 = sub_100889F60(v98);
      v100 = v99[2];
      v101 = type metadata accessor for LostModeRecord(0);
      v102 = *(_QWORD *)(v101 - 8);
      if (v100)
      {
        v103 = v274;
        sub_10005972C((uint64_t)v99 + ((*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80)), v274, type metadata accessor for LostModeRecord);
        v104 = 0;
      }
      else
      {
        v104 = 1;
        v103 = v274;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v102 + 56))(v103, v104, 1, v101);
      swift_bridgeObjectRelease();
      v286(v280, v292);
      v105 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 48))(v103, 1, v101);
      sub_100004048(v103, (uint64_t *)&unk_1010F47F0);
      if (v105 != 1)
        goto LABEL_55;
LABEL_46:
      v75 = 2;
      goto LABEL_25;
    }
    v97 = _stringCompareWithSmolCheck(_:_:expecting:)(v92, v94, v96, v95, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v97 & 1) != 0)
      goto LABEL_42;
    v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(v259);
    v108 = v107;
    v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    if (v106 == v110 && v108 == v109)
    {
      swift_bridgeObjectRelease_n(v108, 2);
LABEL_51:
      v112 = (uint64_t)v273;
      v260(v273, v261, v292);
      v113 = sub_100889F60(v112);
      v114 = v113[2];
      v115 = type metadata accessor for LostModeRecord(0);
      v116 = *(_QWORD *)(v115 - 8);
      if (v114)
      {
        v117 = v272;
        sub_10005972C((uint64_t)v113+ ((*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80)), v272, type metadata accessor for LostModeRecord);
        v118 = 0;
      }
      else
      {
        v118 = 1;
        v117 = v272;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v116 + 56))(v117, v118, 1, v115);
      swift_bridgeObjectRelease();
      v286(v273, v292);
      v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 48))(v117, 1, v115);
      sub_100004048(v117, (uint64_t *)&unk_1010F47F0);
      if (v119 == 1)
      {
LABEL_55:
        v304 = 0;
        goto LABEL_26;
      }
      goto LABEL_46;
    }
    v111 = _stringCompareWithSmolCheck(_:_:expecting:)(v106, v108, v110, v109, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v111 & 1) != 0)
      goto LABEL_51;
    v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(v258);
    v122 = v121;
    v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    if (v120 == v124 && v122 == v123)
      break;
    v125 = _stringCompareWithSmolCheck(_:_:expecting:)(v120, v122, v124, v123, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v125 & 1) != 0)
      goto LABEL_60;
    v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(v256);
    v133 = v132;
    v135 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    if (v131 == v135 && v133 == v134)
    {
      swift_bridgeObjectRelease_n(v133, 2);
    }
    else
    {
      v136 = _stringCompareWithSmolCheck(_:_:expecting:)(v131, v133, v135, v134, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v136 & 1) == 0)
      {
        v141 = static String._unconditionallyBridgeFromObjectiveC(_:)(v255);
        v143 = v142;
        v145 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
        if (v141 == v145 && v143 == v144)
        {
LABEL_70:
          swift_bridgeObjectRelease_n(v143, 2);
        }
        else
        {
          v146 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v143, v145, v144, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v146 & 1) == 0)
          {
            v147 = static String._unconditionallyBridgeFromObjectiveC(_:)(v254);
            v143 = v148;
            v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
            if (v147 == v150 && v143 == v149)
              goto LABEL_70;
            v151 = _stringCompareWithSmolCheck(_:_:expecting:)(v147, v143, v150, v149, 0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v151 & 1) == 0)
            {
              v152 = static String._unconditionallyBridgeFromObjectiveC(_:)(v253);
              v154 = v153;
              v156 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
              if (v152 == v156 && v154 == v155)
              {
LABEL_78:
                swift_bridgeObjectRelease_n(v154, 2);
                goto LABEL_80;
              }
              v157 = _stringCompareWithSmolCheck(_:_:expecting:)(v152, v154, v156, v155, 0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v157 & 1) != 0)
                goto LABEL_80;
              v159 = static String._unconditionallyBridgeFromObjectiveC(_:)(v252);
              v154 = v160;
              v162 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
              if (v159 == v162 && v154 == v161)
                goto LABEL_78;
              v163 = _stringCompareWithSmolCheck(_:_:expecting:)(v159, v154, v162, v161, 0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v163 & 1) != 0)
                goto LABEL_80;
              v164 = static String._unconditionallyBridgeFromObjectiveC(_:)(v251);
              v154 = v165;
              v167 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
              if (v164 == v167 && v154 == v166)
                goto LABEL_78;
              v168 = _stringCompareWithSmolCheck(_:_:expecting:)(v164, v154, v167, v166, 0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v168 & 1) != 0)
                goto LABEL_80;
              v169 = static String._unconditionallyBridgeFromObjectiveC(_:)(v250);
              v154 = v170;
              v172 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
              if (v169 == v172 && v154 == v171)
                goto LABEL_78;
              v173 = _stringCompareWithSmolCheck(_:_:expecting:)(v169, v154, v172, v171, 0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v173 & 1) != 0)
                goto LABEL_80;
              v174 = static String._unconditionallyBridgeFromObjectiveC(_:)(v249);
              v154 = v175;
              v177 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
              if (v174 == v177 && v154 == v176)
                goto LABEL_78;
              v178 = _stringCompareWithSmolCheck(_:_:expecting:)(v174, v154, v177, v176, 0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v178 & 1) != 0)
                goto LABEL_80;
              v179 = static String._unconditionallyBridgeFromObjectiveC(_:)(v248);
              v154 = v180;
              v182 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
              if (v179 == v182 && v154 == v181)
                goto LABEL_78;
              v183 = _stringCompareWithSmolCheck(_:_:expecting:)(v179, v154, v182, v181, 0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v183 & 1) != 0)
                goto LABEL_80;
              v184 = static String._unconditionallyBridgeFromObjectiveC(_:)(v245);
              v154 = v185;
              v187 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
              if (v184 == v187 && v154 == v186)
                goto LABEL_78;
              v188 = _stringCompareWithSmolCheck(_:_:expecting:)(v184, v154, v187, v186, 0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v188 & 1) != 0)
                goto LABEL_80;
              v189 = static String._unconditionallyBridgeFromObjectiveC(_:)(v244);
              v191 = v190;
              v193 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
              if (v189 == v193 && v191 == v192)
              {
                swift_bridgeObjectRelease_n(v191, 2);
LABEL_105:
                v195 = *(_QWORD *)(v262 + 176);
                if (v195)
                {
                  v196 = v265;
                  v197 = ((uint64_t (*)(char *, _QWORD *, uint64_t))v260)(v265, v261, v292);
                  v240 = (dispatch_queue_t)&v238;
                  v239 = *(_QWORD *)(v195 + 24);
                  __chkstk_darwin(v197);
                  *(&v238 - 2) = v195;
                  *(&v238 - 1) = (uint64_t)v196;
                  v198 = sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
                  swift_retain();
                  OS_dispatch_queue.sync<A>(execute:)(sub_1004D6580, &v238 - 4, v198);
                  swift_release();
                  v199 = aBlock;
                  v286(v196, v292);
                  v304 = (uint64_t)objc_msgSend(v199, "state");
                  v200 = objc_msgSend(v199, "lastUpdated");
                  v201 = v267;
                  static Date._unconditionallyBridgeFromObjectiveC(_:)(v200);

                  (*(void (**)(char *, char *, uint64_t))(v291 + 40))(v288, v201, v295);
                  v202 = objc_msgSend(v199, "error");
                  v203 = v303;
                  v303 = v202;
                  swift_errorRelease(v203);
                  v204 = (void **)objc_msgSend(v199, "commandIdentifier");
                  if (v204)
                  {
                    v205 = v204;
                    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v204);

                    v206 = 0;
                    v199 = v205;
                  }
                  else
                  {
                    v206 = 1;
                  }

                  v212 = (uint64_t)v268;
                  v62((uint64_t)v268, v206, 1, v292);
                  sub_100004084(v212, v293, &qword_1010ED860);
                }
LABEL_82:
                v27 = v288;
                goto LABEL_26;
              }
              v194 = _stringCompareWithSmolCheck(_:_:expecting:)(v189, v191, v193, v192, 0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v194 & 1) != 0)
                goto LABEL_105;
              v207 = static String._unconditionallyBridgeFromObjectiveC(_:)(v243);
              v209 = v208;
              v211 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
              if (v207 == v211 && v209 == v210)
              {
                swift_bridgeObjectRelease_n(v209, 2);
                goto LABEL_114;
              }
              v213 = _stringCompareWithSmolCheck(_:_:expecting:)(v207, v209, v211, v210, 0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v213 & 1) != 0)
              {
LABEL_114:
                v214 = (uint64_t)v266;
                v260(v266, v261, v292);
                v215 = sub_10088AE54(v214);
                if (v215[2])
                {
                  sub_10005972C((uint64_t)v215+ ((*(unsigned __int8 *)(v246 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v246 + 80)), v271, type metadata accessor for NotifyWhenFoundRecord);
                  v216 = 0;
                }
                else
                {
                  v216 = 1;
                }
                v217 = v246;
                v218 = v271;
                v219 = v247;
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v246 + 56))(v271, v216, 1, v247);
                swift_bridgeObjectRelease();
                v286(v266, v292);
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v217 + 48))(v218, 1, v219) != 1)
                {
                  v220 = v270;
                  sub_1000126EC(v271, v270, type metadata accessor for NotifyWhenFoundRecord);
                  v221 = (uint64_t)v269;
                  v222 = v292;
                  v260(v269, (_QWORD *)(v220 + *(int *)(v247 + 20)), v292);
                  sub_1000126B0(v220, type metadata accessor for NotifyWhenFoundRecord);
                  v62(v221, 0, 1, v222);
                  sub_100004084(v221, v293, &qword_1010ED860);
                  v304 = 0;
                  goto LABEL_82;
                }
                sub_100004048(v271, &qword_1010F33A8);
LABEL_80:
                v158 = 2;
              }
              else
              {
                v223 = static String._unconditionallyBridgeFromObjectiveC(_:)(v242);
                v154 = v224;
                v226 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
                if (v223 == v226 && v154 == v225)
                  goto LABEL_78;
                v227 = _stringCompareWithSmolCheck(_:_:expecting:)(v223, v154, v226, v225, 0);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v227 & 1) != 0)
                  goto LABEL_80;
                v228 = static String._unconditionallyBridgeFromObjectiveC(_:)(v241);
                v230 = v229;
                v232 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
                if (v228 == v232 && v230 == v231)
                {
                  swift_bridgeObjectRelease_n(v230, 2);
                }
                else
                {
                  v233 = _stringCompareWithSmolCheck(_:_:expecting:)(v228, v230, v232, v231, 0);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v233 & 1) == 0)
                    goto LABEL_82;
                }
                v158 = v264;
              }
              v304 = v158;
              goto LABEL_82;
            }
          }
        }
        v304 = sub_1004A7170((uint64_t)v261);
        goto LABEL_26;
      }
    }
    v137 = v262;
    v240 = *(dispatch_queue_t *)(v262 + v257);
    sub_100030784((uint64_t)v305, (uint64_t)&v302);
    v138 = (_QWORD *)swift_allocObject(&unk_101078EE8, 96, 7);
    v138[2] = v137;
    sub_10000F9FC(&v302, (uint64_t)(v138 + 3));
    v138[8] = &v304;
    v138[9] = v27;
    v138[10] = &v303;
    v138[11] = v293;
    swift_retain();
    sub_10001D8A8((uint64_t)v276, (uint64_t)v277);
    v139 = swift_allocObject(&unk_101078F10, 32, 7);
    *(_QWORD *)(v139 + 16) = sub_1004D0054;
    *(_QWORD *)(v139 + 24) = v138;
    v300 = sub_10005CBA4;
    v301 = v139;
    aBlock = _NSConcreteStackBlock;
    v297 = 1107296256;
    v298 = sub_10001D8B8;
    v299 = &unk_101078F28;
    v140 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    dispatch_sync(v240, v140);
    _Block_release(v140);
    LOBYTE(v140) = swift_isEscapingClosureAtFileLocation(v139, "", 151, 1872, 50, 1);
    result = swift_release();
    if ((v140 & 1) != 0)
      goto LABEL_132;
    v276 = sub_1004D0054;
    v277 = v138;
LABEL_26:
    (*(void (**)(char *, char *, uint64_t))(v291 + 16))(v290, v27, v295);
    v76 = v303;
    v77 = v304;
    v78 = v61;
    swift_errorRetain(v76);
    v79.super.isa = Date._bridgeToObjectiveC()().super.isa;
    if (v76)
    {
      v80 = (void *)_convertErrorToNSError(_:)(v76);
      swift_errorRelease(v76);
    }
    else
    {
      v80 = 0;
    }
    v81 = objc_msgSend(objc_allocWithZone((Class)SPBeaconTaskInformation), "initWithName:lastUpdated:error:state:", v78, v79.super.isa, v80, v77);

    v82 = *(void (**)(char *, uint64_t))(v291 + 8);
    v82(v290, v295);
    v83 = v289;
    sub_10000F9B8(v293, v289, &qword_1010ED860);
    v84 = v292;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v294 + 48))(v83, 1, v292) == 1)
    {
      v56.super.isa = 0;
    }
    else
    {
      v56.super.isa = UUID._bridgeToObjectiveC()().super.isa;
      v286((char *)v83, v84);
    }
    objc_msgSend(v81, "setCommandIdentifier:", v56.super.isa);

    v57 = v78;
    v58 = v81;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v54);
    aBlock = v54;
    sub_10010BBE4((uint64_t)v58, v57, isUniquelyReferenced_nonNull_native);
    v54 = aBlock;

    swift_bridgeObjectRelease();
    v55 = v293;
    sub_100004048(v293, &qword_1010ED860);
    swift_errorRelease(v303);
    v27 = v288;
    v82(v288, v295);
    ++v51;
    if (!--v50)
    {
      swift_bridgeObjectRelease();
      v234 = (uint64_t)v277;
      v235 = (uint64_t)v279;
      v236 = v276;
      v237 = v278;
      goto LABEL_130;
    }
  }
  swift_bridgeObjectRelease_n(v122, 2);
LABEL_60:
  v239 = v42;
  v126 = v262;
  v240 = *(dispatch_queue_t *)(v262 + v257);
  sub_100030784((uint64_t)v305, (uint64_t)&v302);
  v127 = (_QWORD *)swift_allocObject(&unk_101078F60, 96, 7);
  v127[2] = v126;
  sub_10000F9FC(&v302, (uint64_t)(v127 + 3));
  v127[8] = &v304;
  v127[9] = v27;
  v127[10] = &v303;
  v127[11] = v293;
  swift_retain();
  sub_10001D8A8((uint64_t)v278, (uint64_t)v279);
  v128 = swift_allocObject(&unk_101078F88, 32, 7);
  *(_QWORD *)(v128 + 16) = sub_1004D0074;
  *(_QWORD *)(v128 + 24) = v127;
  v300 = sub_10005CBA4;
  v301 = v128;
  aBlock = _NSConcreteStackBlock;
  v297 = 1107296256;
  v298 = sub_10001D8B8;
  v299 = &unk_101078FA0;
  v129 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v240, v129);
  _Block_release(v129);
  LOBYTE(v129) = swift_isEscapingClosureAtFileLocation(v128, "", 151, 1861, 54, 1);
  result = swift_release();
  if ((v129 & 1) == 0)
  {
    v278 = sub_1004D0074;
    v279 = v127;
    v42 = v239;
    goto LABEL_26;
  }
  __break(1u);
LABEL_132:
  __break(1u);
  return result;
}

uint64_t sub_1004B3AE4(uint64_t a1, int a2, char *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(unint64_t, uint64_t);
  void **v49;
  void *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  uint64_t v60;
  NSUUID v61;
  id v62;
  id v63;
  char isUniquelyReferenced_nonNull_native;
  void *v65;
  id v66;
  void (*v67)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  id v83;
  NSDate v84;
  void *v85;
  id v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  void **v136;
  id v137;
  char *v138;
  id v139;
  id v140;
  void **v141;
  void **v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t result;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  void **v220;
  id v221;
  char *v222;
  id v223;
  id v224;
  void **v225;
  void **v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char v254;
  uint64_t v255;
  uint64_t (*v256)();
  uint64_t v257;
  uint64_t (*v258)();
  uint64_t v259;
  dispatch_queue_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  char *v282;
  uint64_t v283;
  char *v284;
  char *v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t found;
  uint64_t v290;
  char *v291;
  char *v292;
  char *v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  void **v297;
  uint64_t (*v298)();
  _QWORD *v299;
  uint64_t (*v300)();
  _QWORD *v301;
  void (*v302)(unint64_t, uint64_t);
  uint64_t v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  _QWORD *v307;
  _QWORD *v308;
  uint64_t v309;
  uint64_t v310;
  void (*v311)(char *, uint64_t);
  uint64_t v312;
  char *v313;
  uint64_t v314;
  char *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  void **aBlock;
  uint64_t v322;
  uint64_t (*v323)(uint64_t);
  void *v324;
  uint64_t (*v325)();
  uint64_t v326;
  __int128 v327;
  id v328;
  uint64_t v329;
  _QWORD v330[5];

  LODWORD(v313) = a2;
  v9 = sub_10001A9A8(&qword_1010F33A8);
  __chkstk_darwin(v9);
  v11 = (char *)&v259 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v288 = *(_QWORD *)(found - 8);
  __chkstk_darwin(found);
  v287 = (uint64_t)&v259 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F47F0);
  v14 = __chkstk_darwin(v13);
  v294 = (uint64_t)&v259 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v296 = (uint64_t)&v259 - v16;
  v17 = sub_10001A9A8(&qword_1010ED860);
  v18 = __chkstk_darwin(v17);
  v286 = (char *)&v259 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v285 = (char *)&v259 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v259 - v23;
  v25 = __chkstk_darwin(v22);
  v314 = (uint64_t)&v259 - v26;
  __chkstk_darwin(v25);
  v317 = (uint64_t)&v259 - v27;
  v320 = type metadata accessor for Date(0);
  v316 = *(_QWORD *)(v320 - 8);
  v28 = __chkstk_darwin(v320);
  v291 = (char *)&v259 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v315 = (char *)&v259 - v31;
  __chkstk_darwin(v30);
  v33 = (char *)&v259 - v32;
  v319 = type metadata accessor for UUID(0);
  v318 = *(_QWORD *)(v319 - 8);
  v34 = __chkstk_darwin(v319);
  v284 = (char *)&v259 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v34);
  v293 = (char *)&v259 - v37;
  v38 = __chkstk_darwin(v36);
  v295 = (char *)&v259 - v39;
  v40 = __chkstk_darwin(v38);
  v304 = (char *)&v259 - v41;
  __chkstk_darwin(v40);
  v43 = (char *)&v259 - v42;
  v330[3] = a4;
  v330[4] = a5;
  v44 = sub_100018F08(v330);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(v44, a1, a4);
  v45 = sub_10001A9A8(&qword_1010FD070);
  v46 = 0;
  OS_dispatch_queue.sync<A>(execute:)(sub_1004D6414, a3, v45);
  v47 = *(_QWORD *)(a5[1] + 8);
  v48 = *(void (**)(unint64_t, uint64_t))(v47 + 32);
  v308 = v44;
  v49 = aBlock;
  v303 = v47;
  v302 = v48;
  ((void (*)(uint64_t))v48)(a4);
  v50 = v49[2];
  v292 = v24;
  if (v50)
  {
    sub_100003FB0((uint64_t)v43);
    v52 = 2;
    if ((v51 & 1) != 0)
      v52 = 0;
  }
  else
  {
    v52 = 2;
  }
  v290 = v52;
  v53 = v319;
  v311 = *(void (**)(char *, uint64_t))(v318 + 8);
  v311(v43, v319);
  v54 = sub_1004BA310((uint64_t)v308, a3, a4, (uint64_t)a5);
  v55 = v54[2];
  v307 = v54;
  if (!v55)
  {
    swift_bridgeObjectRelease();
    v258 = 0;
    v257 = 0;
    v256 = 0;
    v255 = 0;
    v59 = (void **)&_swiftEmptyDictionarySingleton;
LABEL_135:
    swift_bridgeObjectRelease();
    sub_10001D8A8((uint64_t)v258, v257);
    sub_10001D8A8((uint64_t)v256, v255);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v330);
    return (uint64_t)v59;
  }
  v297 = v49;
  v266 = v11;
  v282 = a3;
  v281 = a4;
  v278 = a5;
  v300 = 0;
  v301 = 0;
  v298 = 0;
  v299 = 0;
  v277 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorModQueue;
  v276 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager;
  v312 = SPBeaconTaskNameUnknown;
  v310 = SPBeaconTaskNameStartSharing;
  v306 = SPBeaconTaskNameStopSharing;
  v283 = SPBeaconTaskNameEnableLostMode;
  v280 = SPBeaconTaskNameDisableLostMode;
  v279 = SPBeaconTaskNamePlaySound;
  v275 = SPBeaconTaskNameStopSound;
  v274 = SPBeaconTaskNameBeginLeashing;
  v273 = SPBeaconTaskNameEndLeashing;
  v272 = SPBeaconTaskNameBeginBTFinding;
  v271 = SPBeaconTaskNameEndBTFinding;
  v270 = SPBeaconTaskNameConnect;
  v269 = SPBeaconTaskNameDisconnect;
  v268 = SPBeaconTaskNameRename;
  v267 = SPBeaconTaskNameBeginRanging;
  v265 = SPBeaconTaskNameEndRanging;
  v264 = SPBeaconTaskNameAccessoryFirmwareUpdate;
  v263 = SPBeaconTaskNameEnableNotifyWhenFound;
  v262 = SPBeaconTaskNameDisableNotifyWhenFound;
  v261 = SPBeaconTaskNameLocating;
  v56 = (void **)(v54 + 4);
  v57 = 2;
  if ((v313 & 1) != 0)
    v58 = 2;
  else
    v58 = 0;
  v305 = v58;
  if ((v313 & 1) != 0)
    v57 = 0;
  v309 = v57;
  v59 = (void **)&_swiftEmptyDictionarySingleton;
  v60 = v317;
  v313 = v33;
  while (1)
  {
    v65 = *v56;
    v329 = 2;
    v66 = v65;
    Date.init()(v66);
    v328 = 0;
    v67 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v318 + 56);
    v67(v60, 1, 1, v53);
    v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v312);
    v70 = v69;
    v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    if (v68 == v71 && v70 == v72)
    {
      swift_bridgeObjectRelease_n(v70, 2);
LABEL_24:
      v80 = -1;
      goto LABEL_25;
    }
    v74 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v70, v71, v72, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v74 & 1) != 0)
      goto LABEL_24;
    v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v310);
    v77 = v76;
    v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    if (v75 == v79 && v77 == v78)
    {
      swift_bridgeObjectRelease_n(v77, 2);
LABEL_32:
      v80 = v309;
      goto LABEL_25;
    }
    v90 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v77, v79, v78, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v90 & 1) != 0)
      goto LABEL_32;
    v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v306);
    v93 = v92;
    v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    if (v91 == v95 && v93 == v94)
    {
      swift_bridgeObjectRelease_n(v93, 2);
LABEL_37:
      v80 = v305;
LABEL_25:
      v329 = v80;
      goto LABEL_26;
    }
    v96 = _stringCompareWithSmolCheck(_:_:expecting:)(v91, v93, v95, v94, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v96 & 1) != 0)
      goto LABEL_37;
    v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v283);
    v99 = v98;
    v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    if (v97 == v101 && v99 == v100)
    {
      swift_bridgeObjectRelease_n(v99, 2);
LABEL_42:
      v103 = (uint64_t)v304;
      v302(v281, v303);
      v104 = sub_100889F60(v103);
      v105 = v104[2];
      v106 = type metadata accessor for LostModeRecord(0);
      v107 = *(_QWORD *)(v106 - 8);
      if (v105)
      {
        v108 = v296;
        sub_10005972C((uint64_t)v104+ ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80)), v296, type metadata accessor for LostModeRecord);
        v109 = 0;
      }
      else
      {
        v109 = 1;
        v108 = v296;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 56))(v108, v109, 1, v106);
      swift_bridgeObjectRelease();
      v311(v304, v319);
      v110 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v108, 1, v106);
      sub_100004048(v108, (uint64_t *)&unk_1010F47F0);
      if (v110 != 1)
        goto LABEL_55;
LABEL_46:
      v80 = 2;
      goto LABEL_25;
    }
    v102 = _stringCompareWithSmolCheck(_:_:expecting:)(v97, v99, v101, v100, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v102 & 1) != 0)
      goto LABEL_42;
    v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v280);
    v113 = v112;
    v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    if (v111 == v115 && v113 == v114)
    {
      swift_bridgeObjectRelease_n(v113, 2);
LABEL_51:
      v117 = (uint64_t)v295;
      v302(v281, v303);
      v118 = sub_100889F60(v117);
      v119 = v118[2];
      v120 = type metadata accessor for LostModeRecord(0);
      v121 = *(_QWORD *)(v120 - 8);
      if (v119)
      {
        v122 = v294;
        sub_10005972C((uint64_t)v118+ ((*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80)), v294, type metadata accessor for LostModeRecord);
        v123 = 0;
      }
      else
      {
        v123 = 1;
        v122 = v294;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v121 + 56))(v122, v123, 1, v120);
      swift_bridgeObjectRelease();
      v311(v295, v319);
      v124 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v121 + 48))(v122, 1, v120);
      sub_100004048(v122, (uint64_t *)&unk_1010F47F0);
      if (v124 == 1)
      {
LABEL_55:
        v329 = 0;
        goto LABEL_26;
      }
      goto LABEL_46;
    }
    v116 = _stringCompareWithSmolCheck(_:_:expecting:)(v111, v113, v115, v114, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v116 & 1) != 0)
      goto LABEL_51;
    v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v279);
    v127 = v126;
    v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    if (v125 == v129 && v127 == v128)
      break;
    v130 = _stringCompareWithSmolCheck(_:_:expecting:)(v125, v127, v129, v128, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v130 & 1) != 0)
      goto LABEL_60;
    v151 = static String._unconditionallyBridgeFromObjectiveC(_:)(v275);
    v153 = v152;
    v155 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    if (v151 == v155 && v153 == v154)
    {
      swift_bridgeObjectRelease_n(v153, 2);
    }
    else
    {
      v156 = _stringCompareWithSmolCheck(_:_:expecting:)(v151, v153, v155, v154, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v156 & 1) == 0)
      {
        v162 = static String._unconditionallyBridgeFromObjectiveC(_:)(v274);
        v164 = v163;
        v166 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        if (v162 == v166 && v164 == v165)
        {
LABEL_75:
          swift_bridgeObjectRelease_n(v164, 2);
          goto LABEL_77;
        }
        v167 = _stringCompareWithSmolCheck(_:_:expecting:)(v162, v164, v166, v165, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v167 & 1) != 0)
          goto LABEL_77;
        v168 = static String._unconditionallyBridgeFromObjectiveC(_:)(v273);
        v164 = v169;
        v171 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        if (v168 == v171 && v164 == v170)
          goto LABEL_75;
        v172 = _stringCompareWithSmolCheck(_:_:expecting:)(v168, v164, v171, v170, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v172 & 1) != 0)
        {
LABEL_77:
          v329 = sub_100776048((uint64_t)v308, (uint64_t)v282, v281, v278);
          goto LABEL_26;
        }
        v173 = static String._unconditionallyBridgeFromObjectiveC(_:)(v272);
        v175 = v174;
        v177 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        if (v173 == v177 && v175 == v176)
        {
LABEL_83:
          swift_bridgeObjectRelease_n(v175, 2);
          goto LABEL_85;
        }
        v178 = _stringCompareWithSmolCheck(_:_:expecting:)(v173, v175, v177, v176, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v178 & 1) != 0)
          goto LABEL_85;
        v180 = static String._unconditionallyBridgeFromObjectiveC(_:)(v271);
        v175 = v181;
        v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        if (v180 == v183 && v175 == v182)
          goto LABEL_83;
        v184 = _stringCompareWithSmolCheck(_:_:expecting:)(v180, v175, v183, v182, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v184 & 1) != 0)
          goto LABEL_85;
        v185 = static String._unconditionallyBridgeFromObjectiveC(_:)(v270);
        v175 = v186;
        v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        if (v185 == v188 && v175 == v187)
          goto LABEL_83;
        v189 = _stringCompareWithSmolCheck(_:_:expecting:)(v185, v175, v188, v187, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v189 & 1) != 0)
          goto LABEL_85;
        v190 = static String._unconditionallyBridgeFromObjectiveC(_:)(v269);
        v175 = v191;
        v193 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        if (v190 == v193 && v175 == v192)
          goto LABEL_83;
        v194 = _stringCompareWithSmolCheck(_:_:expecting:)(v190, v175, v193, v192, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v194 & 1) != 0)
          goto LABEL_85;
        v195 = static String._unconditionallyBridgeFromObjectiveC(_:)(v268);
        v175 = v196;
        v198 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        if (v195 == v198 && v175 == v197)
          goto LABEL_83;
        v199 = _stringCompareWithSmolCheck(_:_:expecting:)(v195, v175, v198, v197, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v199 & 1) != 0)
          goto LABEL_85;
        v200 = static String._unconditionallyBridgeFromObjectiveC(_:)(v267);
        v175 = v201;
        v203 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        if (v200 == v203 && v175 == v202)
          goto LABEL_83;
        v204 = _stringCompareWithSmolCheck(_:_:expecting:)(v200, v175, v203, v202, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v204 & 1) != 0)
          goto LABEL_85;
        v205 = static String._unconditionallyBridgeFromObjectiveC(_:)(v265);
        v175 = v206;
        v208 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        if (v205 == v208 && v175 == v207)
          goto LABEL_83;
        v209 = _stringCompareWithSmolCheck(_:_:expecting:)(v205, v175, v208, v207, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v209 & 1) != 0)
          goto LABEL_85;
        v210 = static String._unconditionallyBridgeFromObjectiveC(_:)(v264);
        v212 = v211;
        v214 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        if (v210 == v214 && v212 == v213)
        {
          swift_bridgeObjectRelease_n(v212, 2);
LABEL_110:
          v216 = *((_QWORD *)v282 + 22);
          if (v216)
          {
            swift_retain();
            v217 = v293;
            v218 = ((uint64_t (*)(unint64_t, uint64_t))v302)(v281, v303);
            v260 = (dispatch_queue_t)&v259;
            __chkstk_darwin(v218);
            *(&v259 - 2) = v216;
            *(&v259 - 1) = (uint64_t)v217;
            v219 = sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
            OS_dispatch_queue.sync<A>(execute:)(sub_1004D6580, &v259 - 4, v219);
            swift_release(v216);
            v220 = aBlock;
            v311(v217, v319);
            v329 = (uint64_t)objc_msgSend(v220, "state");
            v221 = objc_msgSend(v220, "lastUpdated");
            v222 = v291;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v221);

            (*(void (**)(char *, char *, uint64_t))(v316 + 40))(v313, v222, v320);
            v223 = objc_msgSend(v220, "error");
            v224 = v328;
            v328 = v223;
            swift_errorRelease(v224);
            v225 = (void **)objc_msgSend(v220, "commandIdentifier");
            if (v225)
            {
              v226 = v225;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v225);

              v227 = 0;
              v220 = v226;
            }
            else
            {
              v227 = 1;
            }

            v233 = (uint64_t)v285;
            v67((uint64_t)v285, v227, 1, v319);
            sub_100004084(v233, v317, &qword_1010ED860);
          }
LABEL_87:
          v33 = v313;
          goto LABEL_26;
        }
        v215 = _stringCompareWithSmolCheck(_:_:expecting:)(v210, v212, v214, v213, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v215 & 1) != 0)
          goto LABEL_110;
        v228 = static String._unconditionallyBridgeFromObjectiveC(_:)(v263);
        v230 = v229;
        v232 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        if (v228 == v232 && v230 == v231)
        {
          swift_bridgeObjectRelease_n(v230, 2);
          goto LABEL_119;
        }
        v234 = _stringCompareWithSmolCheck(_:_:expecting:)(v228, v230, v232, v231, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v234 & 1) != 0)
        {
LABEL_119:
          v235 = (uint64_t)v284;
          v302(v281, v303);
          v236 = sub_10088AE54(v235);
          if (v236[2])
          {
            sub_10005972C((uint64_t)v236+ ((*(unsigned __int8 *)(v288 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v288 + 80)), (uint64_t)v266, type metadata accessor for NotifyWhenFoundRecord);
            v237 = 0;
          }
          else
          {
            v237 = 1;
          }
          v238 = v288;
          v239 = (uint64_t)v266;
          v240 = found;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v288 + 56))(v266, v237, 1, found);
          swift_bridgeObjectRelease();
          v311(v284, v319);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v238 + 48))(v239, 1, v240) != 1)
          {
            v241 = v287;
            sub_1000126EC((uint64_t)v266, v287, type metadata accessor for NotifyWhenFoundRecord);
            v242 = (uint64_t)v286;
            v243 = v319;
            (*(void (**)(char *, uint64_t, uint64_t))(v318 + 16))(v286, v241 + *(int *)(found + 20), v319);
            sub_1000126B0(v241, type metadata accessor for NotifyWhenFoundRecord);
            v67(v242, 0, 1, v243);
            sub_100004084(v242, v317, &qword_1010ED860);
            v329 = 0;
            goto LABEL_87;
          }
          sub_100004048((uint64_t)v266, &qword_1010F33A8);
LABEL_85:
          v179 = 2;
        }
        else
        {
          v244 = static String._unconditionallyBridgeFromObjectiveC(_:)(v262);
          v175 = v245;
          v247 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
          if (v244 == v247 && v175 == v246)
            goto LABEL_83;
          v248 = _stringCompareWithSmolCheck(_:_:expecting:)(v244, v175, v247, v246, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v248 & 1) != 0)
            goto LABEL_85;
          v249 = static String._unconditionallyBridgeFromObjectiveC(_:)(v261);
          v251 = v250;
          v253 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
          if (v249 == v253 && v251 == v252)
          {
            swift_bridgeObjectRelease_n(v251, 2);
          }
          else
          {
            v254 = _stringCompareWithSmolCheck(_:_:expecting:)(v249, v251, v253, v252, 0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v254 & 1) == 0)
              goto LABEL_87;
          }
          v179 = v290;
        }
        v329 = v179;
        goto LABEL_87;
      }
    }
    v157 = (uint64_t)v282;
    v260 = *(dispatch_queue_t *)&v282[v277];
    sub_100030784((uint64_t)v330, (uint64_t)&v327);
    v158 = (_QWORD *)swift_allocObject(&unk_101079988, 96, 7);
    v158[2] = v157;
    sub_10000F9FC(&v327, (uint64_t)(v158 + 3));
    v158[8] = &v329;
    v158[9] = v33;
    v158[10] = &v328;
    v158[11] = v317;
    swift_retain();
    sub_10001D8A8((uint64_t)v298, (uint64_t)v299);
    v159 = swift_allocObject(&unk_1010799B0, 32, 7);
    *(_QWORD *)(v159 + 16) = sub_1004D0054;
    *(_QWORD *)(v159 + 24) = v158;
    v325 = sub_10005CBA4;
    v326 = v159;
    aBlock = _NSConcreteStackBlock;
    v322 = 1107296256;
    v323 = sub_10001D8B8;
    v324 = &unk_1010799C8;
    v160 = _Block_copy(&aBlock);
    v161 = v326;
    swift_retain();
    swift_release(v161);
    dispatch_sync(v260, v160);
    _Block_release(v160);
    LOBYTE(v161) = swift_isEscapingClosureAtFileLocation(v159, "", 151, 1872, 50, 1);
    result = swift_release(v159);
    if ((v161 & 1) != 0)
      goto LABEL_137;
    v298 = sub_1004D0054;
    v299 = v158;
LABEL_26:
    (*(void (**)(char *, char *, uint64_t))(v316 + 16))(v315, v33, v320);
    v82 = v328;
    v81 = v329;
    v83 = v66;
    swift_errorRetain(v82);
    v84.super.isa = Date._bridgeToObjectiveC()().super.isa;
    if (v82)
    {
      v85 = (void *)_convertErrorToNSError(_:)(v82);
      swift_errorRelease(v82);
    }
    else
    {
      v85 = 0;
    }
    v86 = objc_msgSend(objc_allocWithZone((Class)SPBeaconTaskInformation), "initWithName:lastUpdated:error:state:", v83, v84.super.isa, v85, v81);

    v87 = *(void (**)(char *, uint64_t))(v316 + 8);
    v87(v315, v320);
    v88 = v314;
    sub_10000F9B8(v317, v314, &qword_1010ED860);
    v89 = v319;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v318 + 48))(v88, 1, v319) == 1)
    {
      v61.super.isa = 0;
    }
    else
    {
      v61.super.isa = UUID._bridgeToObjectiveC()().super.isa;
      v311((char *)v88, v89);
    }
    objc_msgSend(v86, "setCommandIdentifier:", v61.super.isa);

    v62 = v83;
    v63 = v86;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v59);
    aBlock = v59;
    sub_10010BBE4((uint64_t)v63, v62, isUniquelyReferenced_nonNull_native);
    v59 = aBlock;

    swift_bridgeObjectRelease();
    v60 = v317;
    sub_100004048(v317, &qword_1010ED860);
    swift_errorRelease(v328);
    v33 = v313;
    v87(v313, v320);
    ++v56;
    --v55;
    v53 = v319;
    if (!v55)
    {
      swift_bridgeObjectRelease();
      v255 = (uint64_t)v299;
      v256 = v298;
      v257 = (uint64_t)v301;
      v258 = v300;
      goto LABEL_135;
    }
  }
  swift_bridgeObjectRelease_n(v127, 2);
LABEL_60:
  v131 = v281;
  if ((((uint64_t (*)(unint64_t))v278[18])(v281) & 1) != 0)
  {
    v132 = *(_QWORD *)&v282[v276];
    v133 = ((uint64_t (*)(unint64_t, uint64_t))v302)(v131, v303);
    v260 = (dispatch_queue_t)&v259;
    __chkstk_darwin(v133);
    *(&v259 - 2) = v132;
    v134 = v293;
    *(&v259 - 1) = (uint64_t)v293;
    v135 = sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
    OS_dispatch_queue.sync<A>(execute:)(sub_1004D6594, &v259 - 4, v135);
    v136 = aBlock;
    v311(v134, v319);
    v329 = (uint64_t)objc_msgSend(v136, "state");
    v137 = objc_msgSend(v136, "lastUpdated");
    v138 = v291;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v137);

    (*(void (**)(char *, char *, uint64_t))(v316 + 40))(v33, v138, v320);
    v139 = objc_msgSend(v136, "error");
    v140 = v328;
    v328 = v139;
    swift_errorRelease(v140);
    v141 = (void **)objc_msgSend(v136, "commandIdentifier");
    if (v141)
    {
      v142 = v141;
      v143 = (uint64_t)v292;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v141);

      v136 = v142;
      v144 = 0;
    }
    else
    {
      v144 = 1;
      v143 = (uint64_t)v292;
    }

    v67(v143, v144, 1, v319);
    sub_100004084(v143, v317, &qword_1010ED860);
    goto LABEL_26;
  }
  v259 = v46;
  v145 = (uint64_t)v282;
  v260 = *(dispatch_queue_t *)&v282[v277];
  sub_100030784((uint64_t)v330, (uint64_t)&v327);
  v146 = (_QWORD *)swift_allocObject(&unk_101079A00, 96, 7);
  v146[2] = v145;
  sub_10000F9FC(&v327, (uint64_t)(v146 + 3));
  v146[8] = &v329;
  v146[9] = v33;
  v146[10] = &v328;
  v146[11] = v317;
  swift_retain();
  sub_10001D8A8((uint64_t)v300, (uint64_t)v301);
  v147 = swift_allocObject(&unk_101079A28, 32, 7);
  *(_QWORD *)(v147 + 16) = sub_1004D0074;
  *(_QWORD *)(v147 + 24) = v146;
  v325 = sub_10005CBA4;
  v326 = v147;
  aBlock = _NSConcreteStackBlock;
  v322 = 1107296256;
  v323 = sub_10001D8B8;
  v324 = &unk_101079A40;
  v148 = _Block_copy(&aBlock);
  v149 = v326;
  swift_retain();
  swift_release(v149);
  dispatch_sync(v260, v148);
  _Block_release(v148);
  LOBYTE(v149) = swift_isEscapingClosureAtFileLocation(v147, "", 151, 1861, 54, 1);
  result = swift_release(v147);
  if ((v149 & 1) == 0)
  {
    v300 = sub_1004D0074;
    v301 = v146;
    v46 = v259;
    goto LABEL_26;
  }
  __break(1u);
LABEL_137:
  __break(1u);
  return result;
}

id sub_1004B5784(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  id v51;
  unsigned __int8 v52;
  NSString v53;
  unsigned int v54;
  id v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  char v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  id result;
  void *v84;
  NSString v85;
  unsigned __int8 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  os_log_type_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  void (*v127)(char *, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  int *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD v141[3];
  uint64_t v142;
  _QWORD v143[6];

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v4);
  v135 = (uint64_t)&v128 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OwnedBeaconRecord(0);
  v134 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v133 = (uint64_t)&v128 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v8);
  v10 = (char *)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OwnedBeaconGroup(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v131 = (uint64_t)&v128 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v14);
  v16 = (char *)&v128 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v132 = (char *)&v128 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v136 = (char *)&v128 - v21;
  v138 = (int *)v6;
  v143[3] = v6;
  v143[4] = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
  v22 = sub_100018F08(v143);
  sub_10005972C(a1, (uint64_t)v22, type metadata accessor for OwnedBeaconRecord);
  v137 = a2;
  if ((sub_1004B6854((uint64_t)v22, a2) & 1) == 0)
  {
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v38 = type metadata accessor for Logger(0);
    sub_10001A9E8(v38, (uint64_t)qword_1011B75D0);
    v39 = sub_100030784((uint64_t)v143, (uint64_t)v141);
    v25 = Logger.logObject.getter(v39);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(22, -1);
      v40 = v18;
      v29 = swift_slowAlloc(32, -1);
      *(_DWORD *)v27 = 141558275;
      v139 = 1752392040;
      v140 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v27 + 4, v27 + 12);
      *(_WORD *)(v27 + 12) = 2081;
      v41 = v17;
      v137 = v27 + 14;
      v42 = (char *)sub_10001AA44(v141, v142);
      v43 = v136;
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v136, &v42[v138[5]], v17);
      v44 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v45 = dispatch thunk of CustomStringConvertible.description.getter(v17, v44);
      v47 = v46;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v43, v41);
      v139 = sub_100016940(v45, v47, &v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v137, v27 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v141);
      v37 = "Can't monitor beacon: %{private,mask.hash}s due to: unsupported beacon.";
      goto LABEL_11;
    }
LABEL_44:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v141);
    goto LABEL_45;
  }
  if ((sub_1009FA01C() & 1) != 0)
  {
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_1011B75D0);
    v24 = sub_100030784((uint64_t)v143, (uint64_t)v141);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(22, -1);
      v28 = v18;
      v29 = swift_slowAlloc(32, -1);
      *(_DWORD *)v27 = 141558275;
      v139 = 1752392040;
      v140 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v27 + 4, v27 + 12);
      *(_WORD *)(v27 + 12) = 2081;
      v30 = v17;
      v137 = v27 + 14;
      v31 = (char *)sub_10001AA44(v141, v142);
      v32 = v136;
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v136, &v31[v138[5]], v17);
      v33 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v17, v33);
      v36 = v35;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v32, v30);
      v139 = sub_100016940(v34, v36, &v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v137, v27 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v141);
      v37 = "Can't monitor beacon: %{private,mask.hash}s due to: this device.";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v25, v26, v37, (uint8_t *)v27, 0x16u);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v27, -1, -1);
LABEL_45:

LABEL_46:
      v87 = 0;
      goto LABEL_47;
    }
    goto LABEL_44;
  }
  v129 = v18;
  v130 = v17;
  swift_retain();
  CurrentValueSubject.value.getter(v141);
  swift_release();
  v48 = v141[0];
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v49 = (void *)qword_1011B7C08;
  v50 = (void *)objc_opt_self(FMSystemInfo);
  v51 = objc_msgSend(v50, "sharedInstance");
  v52 = objc_msgSend(v51, "isInternalBuild");

  if ((v52 & 1) != 0
    && (v53 = String._bridgeToObjectiveC()(),
        v54 = objc_msgSend(v49, "BOOLForKey:", v53),
        v53,
        v54))
  {
    v55 = objc_msgSend(v50, "sharedInstance");
    v56 = objc_msgSend(v55, "isInternalBuild");

  }
  else
  {
    v56 = 0;
  }
  v57 = v130;
  v58 = v129;
  v59 = v138;
  if (sub_100A2D38C(*(_QWORD *)((char *)v22 + v138[16]), *(_QWORD *)((char *)v22 + v138[17])))
  {
    if (v48 > 1)
      v60 = 1;
    else
      v60 = v56;
    if ((v60 & 1) == 0)
    {
      if (qword_1010E9F10 != -1)
        swift_once(&qword_1010E9F10, sub_10075AEB4);
      v63 = type metadata accessor for Logger(0);
      sub_10001A9E8(v63, (uint64_t)qword_1011B75D0);
      v64 = sub_100030784((uint64_t)v143, (uint64_t)v141);
      v25 = Logger.logObject.getter(v64);
      v26 = static os_log_type_t.default.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = swift_slowAlloc(22, -1);
        v65 = v58;
        v29 = swift_slowAlloc(32, -1);
        *(_DWORD *)v27 = 141558275;
        v139 = 1752392040;
        v140 = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v27 + 4, v27 + 12);
        *(_WORD *)(v27 + 12) = 2081;
        v66 = v57;
        v137 = v27 + 14;
        v67 = (char *)sub_10001AA44(v141, v142);
        v68 = v136;
        (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v136, &v67[v59[5]], v57);
        v69 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v70 = dispatch thunk of CustomStringConvertible.description.getter(v57, v69);
        v72 = v71;
        (*(void (**)(char *, uint64_t))(v65 + 8))(v68, v66);
        v139 = sub_100016940(v70, v72, &v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v137, v27 + 22);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v141);
        v37 = "Can't monitor beacon: %{private,mask.hash}s due to: airpods beacon but less than 2 adv buffers.";
        goto LABEL_11;
      }
      goto LABEL_44;
    }
    sub_10000F9B8((uint64_t)v22 + v59[7], (uint64_t)v16, &qword_1010ED860);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v16, 1, v57) == 1)
    {
      v61 = &qword_1010ED860;
      v62 = (uint64_t)v16;
LABEL_31:
      sub_100004048(v62, v61);
      goto LABEL_32;
    }
    v73 = (uint64_t)v132;
    (*(void (**)(void))(v58 + 32))();
    sub_10081EDA8(v73, (uint64_t)v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v73, v57);
      v61 = (uint64_t *)&unk_1010FF7F0;
      v62 = (uint64_t)v10;
      goto LABEL_31;
    }
    v112 = v131;
    sub_1000126EC((uint64_t)v10, v131, type metadata accessor for OwnedBeaconGroup);
    if ((sub_1003690A8() & 1) == 0)
    {
      if (qword_1010E9F10 != -1)
        swift_once(&qword_1010E9F10, sub_10075AEB4);
      v113 = type metadata accessor for Logger(0);
      sub_10001A9E8(v113, (uint64_t)qword_1011B75D0);
      v114 = sub_100030784((uint64_t)v143, (uint64_t)v141);
      v115 = Logger.logObject.getter(v114);
      v116 = static os_log_type_t.default.getter(v115);
      if (os_log_type_enabled(v115, v116))
      {
        v117 = swift_slowAlloc(22, -1);
        v118 = swift_slowAlloc(32, -1);
        *(_DWORD *)v117 = 141558275;
        v139 = 1752392040;
        v140 = v118;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v117 + 4, v117 + 12);
        *(_WORD *)(v117 + 12) = 2081;
        v119 = v58;
        v137 = v117 + 14;
        v120 = (char *)sub_10001AA44(v141, v142);
        v121 = v136;
        (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v136, &v120[v59[5]], v57);
        v122 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v123 = dispatch thunk of CustomStringConvertible.description.getter(v57, v122);
        v124 = v57;
        v126 = v125;
        v127 = *(void (**)(char *, uint64_t))(v119 + 8);
        v127(v121, v124);
        v139 = sub_100016940(v123, v126, &v140);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v137, v117 + 22);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v141);
        _os_log_impl((void *)&_mh_execute_header, v115, v116, "Can't monitor beacon: %{private,mask.hash}s due to: group pairing incomplete.", (uint8_t *)v117, 0x16u);
        swift_arrayDestroy(v118, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v118, -1, -1);
        swift_slowDealloc(v117, -1, -1);

        sub_1000126B0(v131, type metadata accessor for OwnedBeaconGroup);
        v127(v132, v124);
      }
      else
      {

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v141);
        sub_1000126B0(v112, type metadata accessor for OwnedBeaconGroup);
        (*(void (**)(char *, uint64_t))(v58 + 8))(v132, v57);
      }
      goto LABEL_46;
    }
    sub_1000126B0(v112, type metadata accessor for OwnedBeaconGroup);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v73, v57);
  }
LABEL_32:
  v74 = v135;
  sub_10076410C(v135);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v134 + 48))(v74, 1, v59) == 1)
  {
    sub_100004048(v74, (uint64_t *)&unk_1010F47C0);
  }
  else
  {
    v75 = v133;
    sub_1000126EC(v74, v133, type metadata accessor for OwnedBeaconRecord);
    v76 = (_QWORD *)((char *)v22 + v59[14]);
    v77 = *v76;
    v78 = v76[1];
    swift_bridgeObjectRetain(v78);
    LOBYTE(v77) = sub_1004A4E78(0x6863746157, 0xE500000000000000, v77, v78);
    swift_bridgeObjectRelease();
    if ((v77 & 1) != 0)
    {
      v79 = v59[5];
      v80 = (char *)v22 + v79;
      v81 = v75 + v79;
      v82 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v80, v81, v57, v82) & 1) == 0)
      {
        if (qword_1010E9F10 != -1)
          swift_once(&qword_1010E9F10, sub_10075AEB4);
        v98 = type metadata accessor for Logger(0);
        sub_10001A9E8(v98, (uint64_t)qword_1011B75D0);
        v99 = sub_100030784((uint64_t)v143, (uint64_t)v141);
        v100 = Logger.logObject.getter(v99);
        v101 = static os_log_type_t.default.getter(v100);
        if (os_log_type_enabled(v100, v101))
        {
          v102 = swift_slowAlloc(22, -1);
          v103 = v58;
          v104 = swift_slowAlloc(32, -1);
          *(_DWORD *)v102 = 141558275;
          v139 = 1752392040;
          v140 = v104;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v102 + 4, v102 + 12);
          *(_WORD *)(v102 + 12) = 2081;
          v105 = v57;
          v137 = v102 + 14;
          v106 = (char *)sub_10001AA44(v141, v142);
          v107 = v136;
          (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v136, &v106[v59[5]], v57);
          v108 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v109 = dispatch thunk of CustomStringConvertible.description.getter(v57, v108);
          v111 = v110;
          (*(void (**)(char *, uint64_t))(v103 + 8))(v107, v105);
          v139 = sub_100016940(v109, v111, &v140);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v137, v102 + 22);
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v141);
          _os_log_impl((void *)&_mh_execute_header, v100, v101, "Can't monitor beacon: %{private,mask.hash}s due to: watch beacon, but not actively paired.", (uint8_t *)v102, 0x16u);
          swift_arrayDestroy(v104, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v104, -1, -1);
          swift_slowDealloc(v102, -1, -1);

          sub_1000126B0(v133, type metadata accessor for OwnedBeaconRecord);
        }
        else
        {

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v141);
          sub_1000126B0(v75, type metadata accessor for OwnedBeaconRecord);
        }
        goto LABEL_46;
      }
    }
    sub_1000126B0(v75, type metadata accessor for OwnedBeaconRecord);
  }
  result = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (result)
  {
    v84 = result;
    v85 = String._bridgeToObjectiveC()();
    v86 = objc_msgSend(v84, "applicationIsInstalled:", v85);

    if ((v86 & 1) != 0)
    {
      v87 = 1;
LABEL_47:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v143);
      return (id)v87;
    }
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v88 = type metadata accessor for Logger(0);
    sub_10001A9E8(v88, (uint64_t)qword_1011B75D0);
    v89 = sub_100030784((uint64_t)v143, (uint64_t)v141);
    v25 = Logger.logObject.getter(v89);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(22, -1);
      v90 = v58;
      v29 = swift_slowAlloc(32, -1);
      *(_DWORD *)v27 = 141558275;
      v139 = 1752392040;
      v140 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v27 + 4, v27 + 12);
      *(_WORD *)(v27 + 12) = 2081;
      v91 = v57;
      v137 = v27 + 14;
      v92 = (char *)sub_10001AA44(v141, v142);
      v93 = v136;
      (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v136, &v92[v59[5]], v57);
      v94 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v95 = dispatch thunk of CustomStringConvertible.description.getter(v57, v94);
      v97 = v96;
      (*(void (**)(char *, uint64_t))(v90 + 8))(v93, v91);
      v139 = sub_100016940(v95, v97, &v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v137, v27 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v141);
      v37 = "Can't monitor beacon: %{private,mask.hash}s due to: no Find My app installed.";
      goto LABEL_11;
    }
    goto LABEL_44;
  }
  __break(1u);
  return result;
}

uint64_t sub_1004B6854(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  char v18;
  void *v19;
  uint64_t v21;

  v4 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a1, (uint64_t)v6, v7);
  sub_1009A2CF8();
  v9 = v8;
  v10 = SPBeaconTypeVirtualMeDevice;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v13 = v12;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  if (v11 == v14 && v13 == v15)
  {

    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v14, v15, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = 0;
  if ((v17 & 1) == 0)
  {
    v19 = sub_1004AA8E4((uint64_t)v6, *(_QWORD *)(a2 + 280));
    if ((sub_100A077E4(8u, (uint64_t)v19) & 1) != 0)
    {
      v18 = sub_100A077E4(9u, (uint64_t)v19);
LABEL_10:
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
LABEL_9:
    v18 = 0;
    goto LABEL_10;
  }
LABEL_11:
  sub_1000126B0((uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
  return v18 & 1;
}

_QWORD *sub_1004B69A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  int64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  int64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _QWORD v46[5];
  _QWORD v47[6];

  v4 = type metadata accessor for LocalFindableAccessoryRecord(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47[3] = v4;
  v47[4] = sub_100006204(&qword_1010F4A80, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E25DE4);
  v10 = sub_100018F08(v47);
  sub_10005972C(a1, (uint64_t)v10, type metadata accessor for LocalFindableAccessoryRecord);
  sub_100030784((uint64_t)v47, (uint64_t)v46);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  if (swift_dynamicCast(v9, v46, v11, v7, 6))
  {
    sub_1000126B0((uint64_t)v9, type metadata accessor for SharedBeaconRecord);
    v12 = sub_1004ABDCC((uint64_t)v10, *(_QWORD *)(a2 + 280));
    v13 = v12[2];
    if (v13)
    {
      v46[0] = _swiftEmptyArrayStorage;
      sub_10009AE30(0, v13, 0);
      v14 = sub_1003B2D14(v12);
      v45 = (char *)(v12 + 7);
      v43 = SPBeaconTaskNameAccessoryFirmwareUpdate;
      v42 = SPBeaconTaskNameStopSharing;
      v41 = SPBeaconTaskNameStartSharing;
      v40 = SPBeaconTaskNameRename;
      v39 = SPBeaconTaskNameDisconnect;
      v38 = SPBeaconTaskNameConnect;
      v37 = SPBeaconTaskNameDisableLostMode;
      v36 = SPBeaconTaskNameEnableLostMode;
      v35 = SPBeaconTaskNameEndRanging;
      v34 = SPBeaconTaskNameBeginRanging;
      v33 = SPBeaconTaskNameEndBTFinding;
      v32 = SPBeaconTaskNameBeginBTFinding;
      v31 = SPBeaconTaskNameEndLeashing;
      v30 = SPBeaconTaskNameBeginLeashing;
      v29 = SPBeaconTaskNameStopSound;
      v28 = SPBeaconTaskNamePlaySound;
      v27 = SPBeaconTaskNameLocating;
      v26 = SPBeaconTaskNameDisableNotifyWhenFound;
      v25 = SPBeaconTaskNameEnableNotifyWhenFound;
      v44 = SPBeaconTaskNameUnknown;
      if (v14 < 0 || v14 >= 1 << *((_BYTE *)v12 + 32))
      {
        __break(1u);
      }
      else if (((*(_QWORD *)&v45[((unint64_t)v14 >> 3) & 0xFFFFFFFFFFFFF8] >> v14) & 1) != 0)
      {
        if (*((_DWORD *)v12 + 9) == v15)
          __asm { BR              X9 }
        goto LABEL_24;
      }
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
  }
  else
  {
    sub_100030784((uint64_t)v47, (uint64_t)v46);
    if ((swift_dynamicCast(v6, v46, v11, v4, 6) & 1) != 0)
    {
      sub_1000126B0((uint64_t)v6, type metadata accessor for LocalFindableAccessoryRecord);
      v16 = sub_1004ABDCC((uint64_t)v10, *(_QWORD *)(a2 + 280));
      v17 = v16[2];
      if (v17)
      {
        v46[0] = _swiftEmptyArrayStorage;
        sub_10009AE30(0, v17, 0);
        v18 = sub_1003B2D14(v16);
        v45 = (char *)(v16 + 7);
        v43 = SPBeaconTaskNameAccessoryFirmwareUpdate;
        v42 = SPBeaconTaskNameStopSharing;
        v41 = SPBeaconTaskNameStartSharing;
        v40 = SPBeaconTaskNameRename;
        v39 = SPBeaconTaskNameDisconnect;
        v38 = SPBeaconTaskNameConnect;
        v37 = SPBeaconTaskNameDisableLostMode;
        v36 = SPBeaconTaskNameEnableLostMode;
        v35 = SPBeaconTaskNameEndRanging;
        v34 = SPBeaconTaskNameBeginRanging;
        v33 = SPBeaconTaskNameEndBTFinding;
        v32 = SPBeaconTaskNameBeginBTFinding;
        v31 = SPBeaconTaskNameEndLeashing;
        v30 = SPBeaconTaskNameBeginLeashing;
        v29 = SPBeaconTaskNameStopSound;
        v28 = SPBeaconTaskNamePlaySound;
        v27 = SPBeaconTaskNameLocating;
        v26 = SPBeaconTaskNameDisableNotifyWhenFound;
        v25 = SPBeaconTaskNameEnableNotifyWhenFound;
        v44 = SPBeaconTaskNameUnknown;
        if ((v18 & 0x8000000000000000) == 0 && v18 < 1 << *((_BYTE *)v16 + 32))
        {
          if (((*(_QWORD *)&v45[((unint64_t)v18 >> 3) & 0xFFFFFFFFFFFFF8] >> v18) & 1) != 0)
          {
            if (*((_DWORD *)v16 + 9) == v19)
              __asm { BR              X9 }
            goto LABEL_27;
          }
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
    }
    else
    {
      v20 = sub_1004ABDCC((uint64_t)v10, *(_QWORD *)(a2 + 280));
      v21 = v20[2];
      if (v21)
      {
        v46[0] = _swiftEmptyArrayStorage;
        sub_10009AE30(0, v21, 0);
        v22 = sub_1003B2D14(v20);
        v45 = (char *)(v20 + 7);
        v43 = SPBeaconTaskNameAccessoryFirmwareUpdate;
        v42 = SPBeaconTaskNameStopSharing;
        v41 = SPBeaconTaskNameStartSharing;
        v40 = SPBeaconTaskNameRename;
        v39 = SPBeaconTaskNameDisconnect;
        v38 = SPBeaconTaskNameConnect;
        v37 = SPBeaconTaskNameDisableLostMode;
        v36 = SPBeaconTaskNameEnableLostMode;
        v35 = SPBeaconTaskNameEndRanging;
        v34 = SPBeaconTaskNameBeginRanging;
        v33 = SPBeaconTaskNameEndBTFinding;
        v32 = SPBeaconTaskNameBeginBTFinding;
        v31 = SPBeaconTaskNameEndLeashing;
        v30 = SPBeaconTaskNameBeginLeashing;
        v29 = SPBeaconTaskNameStopSound;
        v28 = SPBeaconTaskNamePlaySound;
        v27 = SPBeaconTaskNameLocating;
        v26 = SPBeaconTaskNameDisableNotifyWhenFound;
        v25 = SPBeaconTaskNameEnableNotifyWhenFound;
        v44 = SPBeaconTaskNameUnknown;
        if ((v22 & 0x8000000000000000) == 0 && v22 < 1 << *((_BYTE *)v20 + 32))
        {
          if (((*(_QWORD *)&v45[((unint64_t)v22 >> 3) & 0xFFFFFFFFFFFFF8] >> v22) & 1) != 0)
          {
            if (*((_DWORD *)v20 + 9) == v23)
              __asm { BR              X9 }
LABEL_30:
            __break(1u);
            JUMPOUT(0x1004B75BCLL);
          }
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
    }
  }
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v47);
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1004B76B8(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  int v37;
  char *v38;
  int64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  int v47;
  _QWORD *v48;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  char v56;
  uint64_t v57;
  void *v58;
  id v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void *v65;
  id v66;
  char v67;
  void *My;
  _QWORD *v69;
  char v70;
  uint64_t v71;
  void *v72;
  id v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  id v99;
  id v100;
  void *v101;
  void *v102;
  id v103;
  char v104;
  char v105;
  id v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  id v130[5];
  _QWORD v131[5];

  v127 = (char *)a1;
  v128 = a2;
  v2 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v2);
  v116 = (char *)&v108 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_10001A9A8((uint64_t *)&unk_1011115B0);
  v118 = *(_QWORD *)(v120 - 8);
  v4 = __chkstk_darwin(v120);
  v115 = (char *)&v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v117 = (uint64_t)&v108 - v6;
  v119 = type metadata accessor for URL(0);
  v112 = *(_QWORD *)(v119 - 8);
  v7 = __chkstk_darwin(v119);
  v111 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v110 = (char *)&v108 - v10;
  __chkstk_darwin(v9);
  v121 = (char *)&v108 - v11;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F77B0);
  v13 = __chkstk_darwin(v12);
  v113 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v114 = (uint64_t)&v108 - v15;
  v16 = type metadata accessor for UUID(0);
  v123 = *(_QWORD *)(v16 - 8);
  v124 = v16;
  __chkstk_darwin(v16);
  v122 = (char *)&v108 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v18);
  v125 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8(&qword_10110EEB0);
  __chkstk_darwin(v20);
  v22 = (char *)&v108 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for BeaconProductInfoRecord(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v126 = (uint64_t)&v108 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for LocalFindableAccessoryRecord(0);
  __chkstk_darwin(v26);
  v28 = (char *)&v108 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v29);
  v31 = (char *)&v108 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131[3] = v18;
  v131[4] = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
  v32 = sub_100018F08(v131);
  sub_10005972C((uint64_t)v127, (uint64_t)v32, type metadata accessor for OwnedBeaconRecord);
  sub_100030784((uint64_t)v131, (uint64_t)v130);
  v33 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  if (swift_dynamicCast(v31, v130, v33, v29, 6))
  {
    sub_1000126B0((uint64_t)v31, type metadata accessor for SharedBeaconRecord);
    v34 = sub_1004AA8E4((uint64_t)v32, *((_QWORD *)v128 + 35));
    v35 = v34[2];
    if (v35)
    {
      v130[0] = _swiftEmptyArrayStorage;
      sub_10009AE30(0, v35, 0);
      v36 = sub_1003B2D14(v34);
      v127 = (char *)SPBeaconTaskNameUnpair;
      v128 = (char *)(v34 + 7);
      v126 = SPBeaconTaskNameAccessoryFirmwareUpdate;
      v125 = (char *)SPBeaconTaskNameStopSharing;
      v124 = SPBeaconTaskNameStartSharing;
      v123 = SPBeaconTaskNameRename;
      v122 = (char *)SPBeaconTaskNameDisconnect;
      v121 = (char *)SPBeaconTaskNameConnect;
      v120 = SPBeaconTaskNameDisableLostMode;
      v119 = SPBeaconTaskNameEnableLostMode;
      v118 = SPBeaconTaskNameEndRanging;
      v117 = SPBeaconTaskNameBeginRanging;
      v116 = (char *)SPBeaconTaskNameEndBTFinding;
      v115 = (char *)SPBeaconTaskNameBeginBTFinding;
      v114 = SPBeaconTaskNameEndLeashing;
      v113 = (char *)SPBeaconTaskNameBeginLeashing;
      v112 = SPBeaconTaskNameStopSound;
      v111 = (char *)SPBeaconTaskNamePlaySound;
      v110 = (char *)SPBeaconTaskNameLocating;
      v109 = SPBeaconTaskNameDisableNotifyWhenFound;
      v108 = SPBeaconTaskNameEnableNotifyWhenFound;
      if (v36 < 0 || v36 >= 1 << *((_BYTE *)v34 + 32))
      {
        __break(1u);
      }
      else if (((*(_QWORD *)&v128[((unint64_t)v36 >> 3) & 0xFFFFFFFFFFFFF8] >> v36) & 1) != 0)
      {
        if (*((_DWORD *)v34 + 9) == v37)
          __asm { BR              X9 }
        goto LABEL_52;
      }
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    goto LABEL_24;
  }
  v38 = v128;
  sub_100030784((uint64_t)v131, (uint64_t)v130);
  if ((swift_dynamicCast(v28, v130, v33, v26, 6) & 1) != 0)
  {
    sub_1000126B0((uint64_t)v28, type metadata accessor for LocalFindableAccessoryRecord);
    v34 = sub_1004AA8E4((uint64_t)v32, *((_QWORD *)v38 + 35));
    v39 = v34[2];
    if (v39)
    {
      v130[0] = _swiftEmptyArrayStorage;
      sub_10009AE30(0, v39, 0);
      v40 = sub_1003B2D14(v34);
      v127 = (char *)SPBeaconTaskNameUnpair;
      v128 = (char *)(v34 + 7);
      v126 = SPBeaconTaskNameAccessoryFirmwareUpdate;
      v125 = (char *)SPBeaconTaskNameStopSharing;
      v124 = SPBeaconTaskNameStartSharing;
      v123 = SPBeaconTaskNameRename;
      v122 = (char *)SPBeaconTaskNameDisconnect;
      v121 = (char *)SPBeaconTaskNameConnect;
      v120 = SPBeaconTaskNameDisableLostMode;
      v119 = SPBeaconTaskNameEnableLostMode;
      v118 = SPBeaconTaskNameEndRanging;
      v117 = SPBeaconTaskNameBeginRanging;
      v116 = (char *)SPBeaconTaskNameEndBTFinding;
      v115 = (char *)SPBeaconTaskNameBeginBTFinding;
      v114 = SPBeaconTaskNameEndLeashing;
      v113 = (char *)SPBeaconTaskNameBeginLeashing;
      v112 = SPBeaconTaskNameStopSound;
      v111 = (char *)SPBeaconTaskNamePlaySound;
      v110 = (char *)SPBeaconTaskNameLocating;
      v109 = SPBeaconTaskNameDisableNotifyWhenFound;
      v108 = SPBeaconTaskNameEnableNotifyWhenFound;
      if ((v40 & 0x8000000000000000) == 0 && v40 < 1 << *((_BYTE *)v34 + 32))
      {
        if (((*(_QWORD *)&v128[((unint64_t)v40 >> 3) & 0xFFFFFFFFFFFFF8] >> v40) & 1) != 0)
        {
          if (*((_DWORD *)v34 + 9) == v41)
            __asm { BR              X9 }
          goto LABEL_55;
        }
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    goto LABEL_24;
  }
  v42 = sub_1009A2EDC();
  v43 = *((_QWORD *)v38 + 35);
  if ((v42 & 1) == 0)
  {
    v34 = sub_1004AA8E4((uint64_t)v32, *((_QWORD *)v38 + 35));
    v45 = v34[2];
    if (v45)
    {
      v130[0] = _swiftEmptyArrayStorage;
      sub_10009AE30(0, v45, 0);
      v46 = sub_1003B2D14(v34);
      v127 = (char *)SPBeaconTaskNameUnpair;
      v128 = (char *)(v34 + 7);
      v126 = SPBeaconTaskNameAccessoryFirmwareUpdate;
      v125 = (char *)SPBeaconTaskNameStopSharing;
      v124 = SPBeaconTaskNameStartSharing;
      v123 = SPBeaconTaskNameRename;
      v122 = (char *)SPBeaconTaskNameDisconnect;
      v121 = (char *)SPBeaconTaskNameConnect;
      v120 = SPBeaconTaskNameDisableLostMode;
      v119 = SPBeaconTaskNameEnableLostMode;
      v118 = SPBeaconTaskNameEndRanging;
      v117 = SPBeaconTaskNameBeginRanging;
      v116 = (char *)SPBeaconTaskNameEndBTFinding;
      v115 = (char *)SPBeaconTaskNameBeginBTFinding;
      v114 = SPBeaconTaskNameEndLeashing;
      v113 = (char *)SPBeaconTaskNameBeginLeashing;
      v112 = SPBeaconTaskNameStopSound;
      v111 = (char *)SPBeaconTaskNamePlaySound;
      v110 = (char *)SPBeaconTaskNameLocating;
      v109 = SPBeaconTaskNameDisableNotifyWhenFound;
      v108 = SPBeaconTaskNameEnableNotifyWhenFound;
      if ((v46 & 0x8000000000000000) == 0 && v46 < 1 << *((_BYTE *)v34 + 32))
      {
        if (((*(_QWORD *)&v128[((unint64_t)v46 >> 3) & 0xFFFFFFFFFFFFF8] >> v46) & 1) != 0)
        {
          if (*((_DWORD *)v34 + 9) == v47)
            __asm { BR              X9 }
          goto LABEL_58;
        }
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  v44 = (uint64_t)v32 + *(int *)(v18 + 20);
  sub_10081BB64(v44, (uint64_t)v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) != 1)
  {
    v50 = v126;
    sub_1000126EC((uint64_t)v22, v126, type metadata accessor for BeaconProductInfoRecord);
    v51 = sub_100C6C1A0(*(_DWORD *)(v50 + *(int *)(v23 + 68)));
    v52 = sub_100CA8574((uint64_t)v51);
    swift_bridgeObjectRelease();
    v129 = v52;
    sub_100030784((uint64_t)v131, (uint64_t)v130);
    swift_bridgeObjectRetain(v52);
    v53 = (uint64_t)v125;
    if ((swift_dynamicCast(v125, v130, v33, v18, 6) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    v54 = v43;
    sub_1000126B0(v53, type metadata accessor for OwnedBeaconRecord);
    v55 = SPBeaconTaskNameBeginLeashing;
    v56 = sub_100A08084((uint64_t)v55, v52);

    swift_bridgeObjectRelease();
    if ((v56 & 1) == 0)
    {
      sub_100A104A4(v130, v55);

    }
    v57 = v129;
    v58 = (void *)SPBeaconTaskNameEndLeashing;
    swift_bridgeObjectRetain(v129);
    v59 = v58;
    v60 = sub_100A08084((uint64_t)v59, v57);

    swift_bridgeObjectRelease();
    v61 = v123;
    v62 = v124;
    v63 = v122;
    if ((v60 & 1) == 0)
    {
      sub_100A104A4(v130, v59);

      v57 = v129;
    }
    v64 = v44;
    v65 = (void *)SPBeaconTaskNameUnpair;
    swift_bridgeObjectRetain(v57);
    v66 = v65;
    v67 = sub_100A08084((uint64_t)v66, v57);

    swift_bridgeObjectRelease();
    if ((v67 & 1) == 0)
    {
      sub_100A104A4(v130, v66);

    }
    My = (void *)type metadata accessor for Feature.FindMy(0);
    v130[3] = My;
    v130[4] = (id)sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v69 = sub_100018F08(v130);
    (*(void (**)(_QWORD *, _QWORD, void *))(*((_QWORD *)My - 1) + 104))(v69, enum case for Feature.FindMy.itemSharing(_:), My);
    v70 = isFeatureEnabled(_:)(v130);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v130);
    v71 = v129;
    v72 = (void *)SPBeaconTaskNameStartSharing;
    swift_bridgeObjectRetain(v129);
    v73 = v72;
    v74 = sub_100A08084((uint64_t)v73, v71);

    swift_bridgeObjectRelease();
    if ((v70 & 1) == 0)
    {
      if ((v74 & 1) != 0)
      {
        v100 = v73;
        v101 = (void *)sub_100C82C5C((uint64_t)v100);

        v71 = v129;
      }
      v102 = (void *)SPBeaconTaskNameStopSharing;
      swift_bridgeObjectRetain(v71);
      v103 = v102;
      v104 = sub_100A08084((uint64_t)v103, v71);

      swift_bridgeObjectRelease();
      if ((v104 & 1) == 0)
        goto LABEL_49;
      goto LABEL_48;
    }
    if ((v74 & 1) == 0)
    {
      sub_100A104A4(v130, v73);

    }
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v63, v64, v62);
    v128 = (char *)sub_100CA8018((uint64_t)&off_1010482C0);
    v34 = *(_QWORD **)(v54 + 160);
    if (qword_1010EA118 == -1)
    {
LABEL_38:
      v75 = v119;
      v76 = sub_10001A9E8(v119, (uint64_t)qword_1011B7B10);
      v77 = v112;
      v78 = *(void (**)(char *, uint64_t, uint64_t))(v112 + 16);
      v79 = v121;
      v78(v121, v76, v75);
      v80 = v110;
      v78(v110, (uint64_t)v79, v75);
      v81 = v120;
      v82 = (uint64_t)v115;
      v127 = &v115[*(int *)(v120 + 40)];
      v83 = (uint64_t)v127;
      v84 = type metadata accessor for DirectorySequence(0);
      v85 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56);
      v85(v83, 1, 1, v84);
      v78((char *)v82, (uint64_t)v80, v75);
      *(_QWORD *)(v82 + *(int *)(v81 + 36)) = v34;
      v86 = v111;
      v78(v111, (uint64_t)v80, v75);
      swift_retain();
      v87 = (uint64_t)v116;
      DirectorySequence.init(at:includingPropertiesForKeys:options:)(v86, 0, 0);
      v88 = *(void (**)(char *, uint64_t))(v77 + 8);
      v88(v80, v75);
      v85(v87, 0, 1, v84);
      sub_100004084(v87, (uint64_t)v127, (uint64_t *)&unk_1010F77A0);
      v89 = v117;
      sub_100005CF0(v82, v117, (uint64_t *)&unk_1011115B0);
      v90 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v118 + 56);
      v91 = (uint64_t)v113;
      v90(v113, 1, 1, v81);
      sub_100004048(v91, (uint64_t *)&unk_1010F77C0);
      sub_100005CF0(v89, v91, (uint64_t *)&unk_1011115B0);
      v90((char *)v91, 0, 1, v81);
      sub_100005CF0(v91, v114, (uint64_t *)&unk_1010F77B0);
      v92 = ((uint64_t (*)(char *, uint64_t))v88)(v121, v75);
      __chkstk_darwin(v92);
      v93 = v122;
      *(&v108 - 2) = (uint64_t)v128;
      *(&v108 - 1) = (uint64_t)v93;
      sub_100A79994(sub_1004D6568, (uint64_t)(&v108 - 4));
      v95 = v94;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v123 + 8))(v93, v124);
      v96 = *(_QWORD *)(v95 + 16);
      swift_bridgeObjectRelease();
      v97 = v129;
      v98 = (void *)SPBeaconTaskNameStopSharing;
      swift_bridgeObjectRetain(v129);
      v99 = v98;
      LOBYTE(v89) = sub_100A08084((uint64_t)v99, v97);

      swift_bridgeObjectRelease();
      if ((v89 & 1) == 0 && v96)
      {
        sub_100A104A4(v130, v99);

        v50 = v126;
LABEL_49:
        v48 = sub_100508FD4(v129);
        swift_bridgeObjectRelease();
        sub_1000126B0(v50, type metadata accessor for BeaconProductInfoRecord);
        goto LABEL_26;
      }
      swift_bridgeObjectRetain(v97);
      v103 = v99;
      v105 = sub_100A08084((uint64_t)v103, v97);

      swift_bridgeObjectRelease();
      v50 = v126;
      if ((v105 & 1) == 0 || v96)
        goto LABEL_49;
LABEL_48:
      v106 = v103;
      v107 = (void *)sub_100C82C5C((uint64_t)v106);

      goto LABEL_49;
    }
LABEL_59:
    swift_once(&qword_1010EA118, sub_100A2ECA4);
    goto LABEL_38;
  }
  sub_100004048((uint64_t)v22, &qword_10110EEB0);
LABEL_25:
  v48 = _swiftEmptyArrayStorage;
LABEL_26:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v131);
  return v48;
}

_QWORD *sub_1004B8CE4(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  int64_t v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  int v48;
  _QWORD *v49;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  char v57;
  uint64_t v58;
  void *v59;
  id v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void *v66;
  id v67;
  char v68;
  void *My;
  _QWORD *v70;
  char v71;
  uint64_t v72;
  void *v73;
  id v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t);
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t);
  uint64_t v90;
  void (*v91)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  id v100;
  id v101;
  void *v102;
  void *v103;
  id v104;
  char v105;
  char v106;
  id v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  id v131[5];
  _QWORD v132[5];

  v129 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v3);
  v117 = (char *)&v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_10001A9A8((uint64_t *)&unk_1011115B0);
  v119 = *(_QWORD *)(v121 - 8);
  v5 = __chkstk_darwin(v121);
  v116 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v118 = (uint64_t)&v109 - v7;
  v120 = type metadata accessor for URL(0);
  v113 = *(_QWORD *)(v120 - 8);
  v8 = __chkstk_darwin(v120);
  v112 = (char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v111 = (char *)&v109 - v11;
  __chkstk_darwin(v10);
  v122 = (char *)&v109 - v12;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F77B0);
  v14 = __chkstk_darwin(v13);
  v114 = (char *)&v109 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v115 = (uint64_t)&v109 - v16;
  v17 = type metadata accessor for UUID(0);
  v124 = *(_QWORD *)(v17 - 8);
  v125 = v17;
  __chkstk_darwin(v17);
  v123 = (char *)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v126);
  v127 = (char *)&v109 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8(&qword_10110EEB0);
  __chkstk_darwin(v20);
  v22 = (char *)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for BeaconProductInfoRecord(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v128 = (uint64_t)&v109 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for LocalFindableAccessoryRecord(0);
  __chkstk_darwin(v26);
  v28 = (char *)&v109 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for SharedBeaconRecord(0);
  v30 = __chkstk_darwin(v29);
  v32 = (char *)&v109 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132[3] = v30;
  v132[4] = sub_100006204(&qword_1010F4A70, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F5CC);
  v33 = sub_100018F08(v132);
  sub_10005972C(a1, (uint64_t)v33, type metadata accessor for SharedBeaconRecord);
  sub_100030784((uint64_t)v132, (uint64_t)v131);
  v34 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  if (swift_dynamicCast(v32, v131, v34, v29, 6))
  {
    sub_1000126B0((uint64_t)v32, type metadata accessor for SharedBeaconRecord);
    v35 = sub_1004AD2E0((uint64_t)v33, *((_QWORD *)v129 + 35));
    v36 = v35[2];
    if (v36)
    {
      v131[0] = _swiftEmptyArrayStorage;
      sub_10009AE30(0, v36, 0);
      v37 = sub_1003B2D14(v35);
      v128 = SPBeaconTaskNameUnpair;
      v129 = (char *)(v35 + 7);
      v127 = (char *)SPBeaconTaskNameAccessoryFirmwareUpdate;
      v126 = SPBeaconTaskNameStopSharing;
      v125 = SPBeaconTaskNameStartSharing;
      v124 = SPBeaconTaskNameRename;
      v123 = (char *)SPBeaconTaskNameDisconnect;
      v122 = (char *)SPBeaconTaskNameConnect;
      v121 = SPBeaconTaskNameDisableLostMode;
      v120 = SPBeaconTaskNameEnableLostMode;
      v119 = SPBeaconTaskNameEndRanging;
      v118 = SPBeaconTaskNameBeginRanging;
      v117 = (char *)SPBeaconTaskNameEndBTFinding;
      v116 = (char *)SPBeaconTaskNameBeginBTFinding;
      v115 = SPBeaconTaskNameEndLeashing;
      v114 = (char *)SPBeaconTaskNameBeginLeashing;
      v113 = SPBeaconTaskNameStopSound;
      v112 = (char *)SPBeaconTaskNamePlaySound;
      v111 = (char *)SPBeaconTaskNameLocating;
      v110 = SPBeaconTaskNameDisableNotifyWhenFound;
      v109 = SPBeaconTaskNameEnableNotifyWhenFound;
      if (v37 < 0 || v37 >= 1 << *((_BYTE *)v35 + 32))
      {
        __break(1u);
      }
      else if (((*(_QWORD *)&v129[((unint64_t)v37 >> 3) & 0xFFFFFFFFFFFFF8] >> v37) & 1) != 0)
      {
        if (*((_DWORD *)v35 + 9) == v38)
          __asm { BR              X9 }
        goto LABEL_52;
      }
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    goto LABEL_24;
  }
  v39 = v129;
  sub_100030784((uint64_t)v132, (uint64_t)v131);
  if ((swift_dynamicCast(v28, v131, v34, v26, 6) & 1) != 0)
  {
    sub_1000126B0((uint64_t)v28, type metadata accessor for LocalFindableAccessoryRecord);
    v35 = sub_1004AD2E0((uint64_t)v33, *((_QWORD *)v39 + 35));
    v40 = v35[2];
    if (v40)
    {
      v131[0] = _swiftEmptyArrayStorage;
      sub_10009AE30(0, v40, 0);
      v41 = sub_1003B2D14(v35);
      v128 = SPBeaconTaskNameUnpair;
      v129 = (char *)(v35 + 7);
      v127 = (char *)SPBeaconTaskNameAccessoryFirmwareUpdate;
      v126 = SPBeaconTaskNameStopSharing;
      v125 = SPBeaconTaskNameStartSharing;
      v124 = SPBeaconTaskNameRename;
      v123 = (char *)SPBeaconTaskNameDisconnect;
      v122 = (char *)SPBeaconTaskNameConnect;
      v121 = SPBeaconTaskNameDisableLostMode;
      v120 = SPBeaconTaskNameEnableLostMode;
      v119 = SPBeaconTaskNameEndRanging;
      v118 = SPBeaconTaskNameBeginRanging;
      v117 = (char *)SPBeaconTaskNameEndBTFinding;
      v116 = (char *)SPBeaconTaskNameBeginBTFinding;
      v115 = SPBeaconTaskNameEndLeashing;
      v114 = (char *)SPBeaconTaskNameBeginLeashing;
      v113 = SPBeaconTaskNameStopSound;
      v112 = (char *)SPBeaconTaskNamePlaySound;
      v111 = (char *)SPBeaconTaskNameLocating;
      v110 = SPBeaconTaskNameDisableNotifyWhenFound;
      v109 = SPBeaconTaskNameEnableNotifyWhenFound;
      if ((v41 & 0x8000000000000000) == 0 && v41 < 1 << *((_BYTE *)v35 + 32))
      {
        if (((*(_QWORD *)&v129[((unint64_t)v41 >> 3) & 0xFFFFFFFFFFFFF8] >> v41) & 1) != 0)
        {
          if (*((_DWORD *)v35 + 9) == v42)
            __asm { BR              X9 }
          goto LABEL_55;
        }
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    goto LABEL_24;
  }
  v43 = sub_100D3BE00();
  v44 = *((_QWORD *)v39 + 35);
  if (!v43)
  {
    v35 = sub_1004AD2E0((uint64_t)v33, v44);
    v46 = v35[2];
    if (v46)
    {
      v131[0] = _swiftEmptyArrayStorage;
      sub_10009AE30(0, v46, 0);
      v47 = sub_1003B2D14(v35);
      v128 = SPBeaconTaskNameUnpair;
      v129 = (char *)(v35 + 7);
      v127 = (char *)SPBeaconTaskNameAccessoryFirmwareUpdate;
      v126 = SPBeaconTaskNameStopSharing;
      v125 = SPBeaconTaskNameStartSharing;
      v124 = SPBeaconTaskNameRename;
      v123 = (char *)SPBeaconTaskNameDisconnect;
      v122 = (char *)SPBeaconTaskNameConnect;
      v121 = SPBeaconTaskNameDisableLostMode;
      v120 = SPBeaconTaskNameEnableLostMode;
      v119 = SPBeaconTaskNameEndRanging;
      v118 = SPBeaconTaskNameBeginRanging;
      v117 = (char *)SPBeaconTaskNameEndBTFinding;
      v116 = (char *)SPBeaconTaskNameBeginBTFinding;
      v115 = SPBeaconTaskNameEndLeashing;
      v114 = (char *)SPBeaconTaskNameBeginLeashing;
      v113 = SPBeaconTaskNameStopSound;
      v112 = (char *)SPBeaconTaskNamePlaySound;
      v111 = (char *)SPBeaconTaskNameLocating;
      v110 = SPBeaconTaskNameDisableNotifyWhenFound;
      v109 = SPBeaconTaskNameEnableNotifyWhenFound;
      if ((v47 & 0x8000000000000000) == 0 && v47 < 1 << *((_BYTE *)v35 + 32))
      {
        if (((*(_QWORD *)&v129[((unint64_t)v47 >> 3) & 0xFFFFFFFFFFFFF8] >> v47) & 1) != 0)
        {
          if (*((_DWORD *)v35 + 9) == v48)
            __asm { BR              X9 }
          goto LABEL_58;
        }
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  v45 = (uint64_t)v33 + *(int *)(v29 + 20);
  sub_10081BB64(v45, (uint64_t)v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) != 1)
  {
    v51 = v128;
    sub_1000126EC((uint64_t)v22, v128, type metadata accessor for BeaconProductInfoRecord);
    v52 = sub_100C6C1A0(*(_DWORD *)(v51 + *(int *)(v23 + 68)));
    v53 = sub_100CA8574((uint64_t)v52);
    swift_bridgeObjectRelease();
    v130 = v53;
    sub_100030784((uint64_t)v132, (uint64_t)v131);
    swift_bridgeObjectRetain(v53);
    v54 = (uint64_t)v127;
    if ((swift_dynamicCast(v127, v131, v34, v126, 6) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    v55 = v45;
    sub_1000126B0(v54, type metadata accessor for OwnedBeaconRecord);
    v56 = SPBeaconTaskNameBeginLeashing;
    v57 = sub_100A08084((uint64_t)v56, v53);

    swift_bridgeObjectRelease();
    if ((v57 & 1) == 0)
    {
      sub_100A104A4(v131, v56);

    }
    v58 = v130;
    v59 = (void *)SPBeaconTaskNameEndLeashing;
    swift_bridgeObjectRetain(v130);
    v60 = v59;
    v61 = sub_100A08084((uint64_t)v60, v58);

    swift_bridgeObjectRelease();
    v62 = v124;
    v63 = v125;
    v64 = v123;
    if ((v61 & 1) == 0)
    {
      sub_100A104A4(v131, v60);

      v58 = v130;
    }
    v65 = v44;
    v66 = (void *)SPBeaconTaskNameUnpair;
    swift_bridgeObjectRetain(v58);
    v67 = v66;
    v68 = sub_100A08084((uint64_t)v67, v58);

    swift_bridgeObjectRelease();
    if ((v68 & 1) == 0)
    {
      sub_100A104A4(v131, v67);

    }
    My = (void *)type metadata accessor for Feature.FindMy(0);
    v131[3] = My;
    v131[4] = (id)sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v70 = sub_100018F08(v131);
    (*(void (**)(_QWORD *, _QWORD, void *))(*((_QWORD *)My - 1) + 104))(v70, enum case for Feature.FindMy.itemSharing(_:), My);
    v71 = isFeatureEnabled(_:)(v131);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v131);
    v72 = v130;
    v73 = (void *)SPBeaconTaskNameStartSharing;
    swift_bridgeObjectRetain(v130);
    v74 = v73;
    v75 = sub_100A08084((uint64_t)v74, v72);

    swift_bridgeObjectRelease();
    if ((v71 & 1) == 0)
    {
      if ((v75 & 1) != 0)
      {
        v101 = v74;
        v102 = (void *)sub_100C82C5C((uint64_t)v101);

        v72 = v130;
      }
      v103 = (void *)SPBeaconTaskNameStopSharing;
      swift_bridgeObjectRetain(v72);
      v104 = v103;
      v105 = sub_100A08084((uint64_t)v104, v72);

      swift_bridgeObjectRelease();
      if ((v105 & 1) == 0)
        goto LABEL_49;
      goto LABEL_48;
    }
    if ((v75 & 1) == 0)
    {
      sub_100A104A4(v131, v74);

    }
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v64, v55, v63);
    v129 = (char *)sub_100CA8018((uint64_t)&off_101048248);
    v35 = *(_QWORD **)(v65 + 160);
    if (qword_1010EA118 == -1)
    {
LABEL_38:
      v76 = v120;
      v77 = sub_10001A9E8(v120, (uint64_t)qword_1011B7B10);
      v78 = v113;
      v79 = *(void (**)(char *, uint64_t, uint64_t))(v113 + 16);
      v80 = v122;
      v79(v122, v77, v76);
      v81 = v111;
      v79(v111, (uint64_t)v80, v76);
      v82 = v121;
      v83 = (uint64_t)v116;
      v127 = &v116[*(int *)(v121 + 40)];
      v84 = (uint64_t)v127;
      v85 = type metadata accessor for DirectorySequence(0);
      v86 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56);
      v86(v84, 1, 1, v85);
      v79((char *)v83, (uint64_t)v81, v76);
      *(_QWORD *)(v83 + *(int *)(v82 + 36)) = v35;
      v87 = v112;
      v79(v112, (uint64_t)v81, v76);
      swift_retain();
      v88 = (uint64_t)v117;
      DirectorySequence.init(at:includingPropertiesForKeys:options:)(v87, 0, 0);
      v89 = *(void (**)(char *, uint64_t))(v78 + 8);
      v89(v81, v76);
      v86(v88, 0, 1, v85);
      sub_100004084(v88, (uint64_t)v127, (uint64_t *)&unk_1010F77A0);
      v90 = v118;
      sub_100005CF0(v83, v118, (uint64_t *)&unk_1011115B0);
      v91 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v119 + 56);
      v92 = (uint64_t)v114;
      v91(v114, 1, 1, v82);
      sub_100004048(v92, (uint64_t *)&unk_1010F77C0);
      sub_100005CF0(v90, v92, (uint64_t *)&unk_1011115B0);
      v91((char *)v92, 0, 1, v82);
      sub_100005CF0(v92, v115, (uint64_t *)&unk_1010F77B0);
      v93 = ((uint64_t (*)(char *, uint64_t))v89)(v122, v76);
      __chkstk_darwin(v93);
      v94 = v123;
      *(&v109 - 2) = (uint64_t)v129;
      *(&v109 - 1) = (uint64_t)v94;
      sub_100A79994(sub_100330A84, (uint64_t)(&v109 - 4));
      v96 = v95;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v124 + 8))(v94, v125);
      v97 = *(_QWORD *)(v96 + 16);
      swift_bridgeObjectRelease();
      v98 = v130;
      v99 = (void *)SPBeaconTaskNameStopSharing;
      swift_bridgeObjectRetain(v130);
      v100 = v99;
      LOBYTE(v90) = sub_100A08084((uint64_t)v100, v98);

      swift_bridgeObjectRelease();
      if ((v90 & 1) == 0 && v97)
      {
        sub_100A104A4(v131, v100);

        v51 = v128;
LABEL_49:
        v49 = sub_100508FD4(v130);
        swift_bridgeObjectRelease();
        sub_1000126B0(v51, type metadata accessor for BeaconProductInfoRecord);
        goto LABEL_26;
      }
      swift_bridgeObjectRetain(v98);
      v104 = v100;
      v106 = sub_100A08084((uint64_t)v104, v98);

      swift_bridgeObjectRelease();
      v51 = v128;
      if ((v106 & 1) == 0 || v97)
        goto LABEL_49;
LABEL_48:
      v107 = v104;
      v108 = (void *)sub_100C82C5C((uint64_t)v107);

      goto LABEL_49;
    }
LABEL_59:
    swift_once(&qword_1010EA118, sub_100A2ECA4);
    goto LABEL_38;
  }
  sub_100004048((uint64_t)v22, &qword_10110EEB0);
LABEL_25:
  v49 = _swiftEmptyArrayStorage;
LABEL_26:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v132);
  return v49;
}

_QWORD *sub_1004BA310(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  int64_t v38;
  id v39;
  uint64_t v40;
  int v41;
  char *v42;
  _QWORD *v43;
  int64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void (*v50)(uint64_t, char *);
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  _QWORD *v54;
  int64_t v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  char v65;
  uint64_t v66;
  void *v67;
  id v68;
  char v69;
  uint64_t v70;
  void *v71;
  id v72;
  char v73;
  void *My;
  _QWORD *v75;
  char v76;
  uint64_t v77;
  void *v78;
  id v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t, uint64_t);
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  void (*v96)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  id v105;
  id v106;
  void *v107;
  void *v108;
  id v109;
  char v110;
  char v111;
  id v112;
  void *v113;
  uint64_t v114;
  void (*v115)(uint64_t, char *);
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  void (*v133)(char *, uint64_t);
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  id v138[5];
  _QWORD v139[5];

  v136 = a2;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v7);
  v123 = (char *)&v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_10001A9A8((uint64_t *)&unk_1011115B0);
  v125 = *(_QWORD *)(v127 - 8);
  v9 = __chkstk_darwin(v127);
  v122 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v124 = (uint64_t)&v114 - v11;
  v126 = type metadata accessor for URL(0);
  v119 = *(_QWORD *)(v126 - 8);
  v12 = __chkstk_darwin(v126);
  v118 = (char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v117 = (char *)&v114 - v15;
  __chkstk_darwin(v14);
  v128 = (char *)&v114 - v16;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F77B0);
  v18 = __chkstk_darwin(v17);
  v120 = (char *)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v121 = (uint64_t)&v114 - v20;
  v129 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v129);
  v130 = (char *)&v114 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for UUID(0);
  v133 = *(void (**)(char *, uint64_t))(v135 - 8);
  __chkstk_darwin(v135);
  v134 = (char *)&v114 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8(&qword_10110EEB0);
  __chkstk_darwin(v23);
  v25 = (char *)&v114 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = (char *)type metadata accessor for BeaconProductInfoRecord(0);
  v26 = *((_QWORD *)v132 - 1);
  __chkstk_darwin(v132);
  v131 = (uint64_t)&v114 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for LocalFindableAccessoryRecord(0);
  __chkstk_darwin(v28);
  v30 = (char *)&v114 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v31);
  v33 = (char *)&v114 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139[3] = a3;
  v139[4] = a4;
  v34 = a4;
  v35 = sub_100018F08(v139);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v35, a1, a3);
  sub_100030784((uint64_t)v139, (uint64_t)v138);
  v36 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  if (swift_dynamicCast(v33, v138, v36, v31, 6))
  {
    sub_1000126B0((uint64_t)v33, type metadata accessor for SharedBeaconRecord);
    v37 = sub_100758F58((uint64_t)v35, *((_QWORD *)v136 + 35), a3, v34);
    v38 = v37[2];
    if (v38)
    {
      v138[0] = _swiftEmptyArrayStorage;
      sub_10009AE30(0, v38, 0);
      v39 = v138[0];
      v40 = sub_1003B2D14(v37);
      v135 = SPBeaconTaskNameUnpair;
      v136 = (char *)(v37 + 7);
      v134 = (char *)SPBeaconTaskNameAccessoryFirmwareUpdate;
      v133 = (void (*)(char *, uint64_t))SPBeaconTaskNameStopSharing;
      v132 = (char *)SPBeaconTaskNameStartSharing;
      v131 = SPBeaconTaskNameRename;
      v130 = (char *)SPBeaconTaskNameDisconnect;
      v129 = SPBeaconTaskNameConnect;
      v128 = (char *)SPBeaconTaskNameDisableLostMode;
      v127 = SPBeaconTaskNameEnableLostMode;
      v126 = SPBeaconTaskNameEndRanging;
      v125 = SPBeaconTaskNameBeginRanging;
      v124 = SPBeaconTaskNameEndBTFinding;
      v123 = (char *)SPBeaconTaskNameBeginBTFinding;
      v122 = (char *)SPBeaconTaskNameEndLeashing;
      v121 = SPBeaconTaskNameBeginLeashing;
      v120 = (char *)SPBeaconTaskNameStopSound;
      v119 = SPBeaconTaskNamePlaySound;
      v118 = (char *)SPBeaconTaskNameLocating;
      v117 = (char *)SPBeaconTaskNameDisableNotifyWhenFound;
      v116 = SPBeaconTaskNameEnableNotifyWhenFound;
      if (v40 < 0 || v40 >= 1 << *((_BYTE *)v37 + 32))
      {
        __break(1u);
      }
      else if (((*(_QWORD *)&v136[((unint64_t)v40 >> 3) & 0xFFFFFFFFFFFFF8] >> v40) & 1) != 0)
      {
        if (*((_DWORD *)v37 + 9) == v41)
          __asm { BR              X9 }
        goto LABEL_52;
      }
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    goto LABEL_24;
  }
  v42 = v136;
  v116 = a3;
  sub_100030784((uint64_t)v139, (uint64_t)v138);
  if ((swift_dynamicCast(v30, v138, v36, v28, 6) & 1) != 0)
  {
    sub_1000126B0((uint64_t)v30, type metadata accessor for LocalFindableAccessoryRecord);
    v43 = sub_100758F58((uint64_t)v35, *((_QWORD *)v42 + 35), v116, v34);
    v44 = v43[2];
    if (v44)
    {
      v138[0] = _swiftEmptyArrayStorage;
      sub_10009AE30(0, v44, 0);
      v39 = v138[0];
      v45 = sub_1003B2D14(v43);
      v135 = SPBeaconTaskNameUnpair;
      v136 = (char *)(v43 + 7);
      v134 = (char *)SPBeaconTaskNameAccessoryFirmwareUpdate;
      v133 = (void (*)(char *, uint64_t))SPBeaconTaskNameStopSharing;
      v132 = (char *)SPBeaconTaskNameStartSharing;
      v131 = SPBeaconTaskNameRename;
      v130 = (char *)SPBeaconTaskNameDisconnect;
      v129 = SPBeaconTaskNameConnect;
      v128 = (char *)SPBeaconTaskNameDisableLostMode;
      v127 = SPBeaconTaskNameEnableLostMode;
      v126 = SPBeaconTaskNameEndRanging;
      v125 = SPBeaconTaskNameBeginRanging;
      v124 = SPBeaconTaskNameEndBTFinding;
      v123 = (char *)SPBeaconTaskNameBeginBTFinding;
      v122 = (char *)SPBeaconTaskNameEndLeashing;
      v121 = SPBeaconTaskNameBeginLeashing;
      v120 = (char *)SPBeaconTaskNameStopSound;
      v119 = SPBeaconTaskNamePlaySound;
      v118 = (char *)SPBeaconTaskNameLocating;
      v117 = (char *)SPBeaconTaskNameDisableNotifyWhenFound;
      v116 = SPBeaconTaskNameEnableNotifyWhenFound;
      if ((v45 & 0x8000000000000000) == 0 && v45 < 1 << *((_BYTE *)v43 + 32))
      {
        if (((*(_QWORD *)&v136[((unint64_t)v45 >> 3) & 0xFFFFFFFFFFFFF8] >> v45) & 1) != 0)
        {
          if (*((_DWORD *)v43 + 9) == v46)
            __asm { BR              X9 }
          goto LABEL_55;
        }
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    goto LABEL_24;
  }
  v47 = v116;
  v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 104))(v116, v34);
  v49 = *((_QWORD *)v42 + 35);
  if ((v48 & 1) == 0)
  {
    v54 = sub_100758F58((uint64_t)v35, *((_QWORD *)v42 + 35), v47, v34);
    v55 = v54[2];
    if (v55)
    {
      v138[0] = _swiftEmptyArrayStorage;
      sub_10009AE30(0, v55, 0);
      v39 = v138[0];
      v56 = sub_1003B2D14(v54);
      v135 = SPBeaconTaskNameUnpair;
      v136 = (char *)(v54 + 7);
      v134 = (char *)SPBeaconTaskNameAccessoryFirmwareUpdate;
      v133 = (void (*)(char *, uint64_t))SPBeaconTaskNameStopSharing;
      v132 = (char *)SPBeaconTaskNameStartSharing;
      v131 = SPBeaconTaskNameRename;
      v130 = (char *)SPBeaconTaskNameDisconnect;
      v129 = SPBeaconTaskNameConnect;
      v128 = (char *)SPBeaconTaskNameDisableLostMode;
      v127 = SPBeaconTaskNameEnableLostMode;
      v126 = SPBeaconTaskNameEndRanging;
      v125 = SPBeaconTaskNameBeginRanging;
      v124 = SPBeaconTaskNameEndBTFinding;
      v123 = (char *)SPBeaconTaskNameBeginBTFinding;
      v122 = (char *)SPBeaconTaskNameEndLeashing;
      v121 = SPBeaconTaskNameBeginLeashing;
      v120 = (char *)SPBeaconTaskNameStopSound;
      v119 = SPBeaconTaskNamePlaySound;
      v118 = (char *)SPBeaconTaskNameLocating;
      v117 = (char *)SPBeaconTaskNameDisableNotifyWhenFound;
      v116 = SPBeaconTaskNameEnableNotifyWhenFound;
      if ((v56 & 0x8000000000000000) == 0 && v56 < 1 << *((_BYTE *)v54 + 32))
      {
        if (((*(_QWORD *)&v136[((unint64_t)v56 >> 3) & 0xFFFFFFFFFFFFF8] >> v56) & 1) != 0)
        {
          if (*((_DWORD *)v54 + 9) == v57)
            __asm { BR              X9 }
          goto LABEL_58;
        }
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  v50 = *(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(v34 + 8) + 8) + 32);
  v51 = (uint64_t)v134;
  v136 = *(char **)(*(_QWORD *)(v34 + 8) + 8);
  v115 = v50;
  ((void (*)(uint64_t))v50)(v47);
  sub_10081BB64(v51, (uint64_t)v25);
  v52 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v133 + 1);
  v52(v51, v135);
  v53 = (uint64_t)v132;
  if ((*(unsigned int (**)(char *, uint64_t, char *))(v26 + 48))(v25, 1, v132) != 1)
  {
    v60 = v131;
    sub_1000126EC((uint64_t)v25, v131, type metadata accessor for BeaconProductInfoRecord);
    v61 = sub_100C6C1A0(*(_DWORD *)(v60 + *(int *)(v53 + 68)));
    v62 = sub_100CA8574((uint64_t)v61);
    swift_bridgeObjectRelease();
    v137 = v62;
    sub_100030784((uint64_t)v139, (uint64_t)v138);
    swift_bridgeObjectRetain(v62);
    v63 = (uint64_t)v130;
    if ((swift_dynamicCast(v130, v138, v36, v129, 6) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    sub_1000126B0(v63, type metadata accessor for OwnedBeaconRecord);
    v64 = SPBeaconTaskNameBeginLeashing;
    v65 = sub_100A08084((uint64_t)v64, v62);

    swift_bridgeObjectRelease();
    if ((v65 & 1) == 0)
    {
      sub_100A104A4(v138, v64);

    }
    v66 = v137;
    v67 = (void *)SPBeaconTaskNameEndLeashing;
    swift_bridgeObjectRetain(v137);
    v68 = v67;
    v69 = sub_100A08084((uint64_t)v68, v66);

    swift_bridgeObjectRelease();
    if ((v69 & 1) == 0)
    {
      sub_100A104A4(v138, v68);

      v66 = v137;
    }
    v70 = v49;
    v71 = (void *)SPBeaconTaskNameUnpair;
    swift_bridgeObjectRetain(v66);
    v72 = v71;
    v73 = sub_100A08084((uint64_t)v72, v66);

    swift_bridgeObjectRelease();
    if ((v73 & 1) == 0)
    {
      sub_100A104A4(v138, v72);

    }
    My = (void *)type metadata accessor for Feature.FindMy(0);
    v138[3] = My;
    v138[4] = (id)sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v75 = sub_100018F08(v138);
    (*(void (**)(_QWORD *, _QWORD, void *))(*((_QWORD *)My - 1) + 104))(v75, enum case for Feature.FindMy.itemSharing(_:), My);
    v76 = isFeatureEnabled(_:)(v138);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v138);
    v77 = v137;
    v78 = (void *)SPBeaconTaskNameStartSharing;
    swift_bridgeObjectRetain(v137);
    v79 = v78;
    v80 = sub_100A08084((uint64_t)v79, v77);

    swift_bridgeObjectRelease();
    if ((v76 & 1) == 0)
    {
      if ((v80 & 1) != 0)
      {
        v106 = v79;
        v107 = (void *)sub_100C82C5C((uint64_t)v106);

        v77 = v137;
      }
      v108 = (void *)SPBeaconTaskNameStopSharing;
      swift_bridgeObjectRetain(v77);
      v109 = v108;
      v110 = sub_100A08084((uint64_t)v109, v77);

      swift_bridgeObjectRelease();
      if ((v110 & 1) == 0)
        goto LABEL_49;
      goto LABEL_48;
    }
    if ((v80 & 1) == 0)
    {
      sub_100A104A4(v138, v79);

    }
    v133 = (void (*)(char *, uint64_t))v52;
    v115(v116, v136);
    v136 = (char *)sub_100CA8018((uint64_t)&off_1010486C8);
    v39 = *(id *)(v70 + 160);
    if (qword_1010EA118 == -1)
    {
LABEL_38:
      v81 = v126;
      v82 = sub_10001A9E8(v126, (uint64_t)qword_1011B7B10);
      v83 = v119;
      v84 = *(void (**)(char *, uint64_t, uint64_t))(v119 + 16);
      v85 = v128;
      v84(v128, v82, v81);
      v86 = v117;
      v84(v117, (uint64_t)v85, v81);
      v87 = v127;
      v88 = (uint64_t)v122;
      v132 = &v122[*(int *)(v127 + 40)];
      v89 = (uint64_t)v132;
      v90 = type metadata accessor for DirectorySequence(0);
      v91 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56);
      v91(v89, 1, 1, v90);
      v84((char *)v88, (uint64_t)v86, v81);
      *(_QWORD *)(v88 + *(int *)(v87 + 36)) = v39;
      v92 = v118;
      v84(v118, (uint64_t)v86, v81);
      swift_retain();
      v93 = (uint64_t)v123;
      DirectorySequence.init(at:includingPropertiesForKeys:options:)(v92, 0, 0);
      v94 = *(void (**)(char *, uint64_t))(v83 + 8);
      v94(v86, v81);
      v91(v93, 0, 1, v90);
      sub_100004084(v93, (uint64_t)v132, (uint64_t *)&unk_1010F77A0);
      v95 = v124;
      sub_100005CF0(v88, v124, (uint64_t *)&unk_1011115B0);
      v96 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v125 + 56);
      v97 = (uint64_t)v120;
      v96(v120, 1, 1, v87);
      sub_100004048(v97, (uint64_t *)&unk_1010F77C0);
      sub_100005CF0(v95, v97, (uint64_t *)&unk_1011115B0);
      v96((char *)v97, 0, 1, v87);
      sub_100005CF0(v97, v121, (uint64_t *)&unk_1010F77B0);
      v98 = ((uint64_t (*)(char *, uint64_t))v94)(v128, v81);
      __chkstk_darwin(v98);
      v99 = v134;
      *(&v114 - 2) = (uint64_t)v136;
      *(&v114 - 1) = (uint64_t)v99;
      sub_100A79994(sub_1004D6568, (uint64_t)(&v114 - 4));
      v101 = v100;
      swift_bridgeObjectRelease();
      v133(v99, v135);
      v102 = *(_QWORD *)(v101 + 16);
      swift_bridgeObjectRelease();
      v103 = v137;
      v104 = (void *)SPBeaconTaskNameStopSharing;
      swift_bridgeObjectRetain(v137);
      v105 = v104;
      LOBYTE(v96) = sub_100A08084((uint64_t)v105, v103);

      swift_bridgeObjectRelease();
      if ((v96 & 1) == 0 && v102)
      {
        sub_100A104A4(v138, v105);

        v60 = v131;
LABEL_49:
        v58 = sub_100508FD4(v137);
        swift_bridgeObjectRelease();
        sub_1000126B0(v60, type metadata accessor for BeaconProductInfoRecord);
        goto LABEL_26;
      }
      swift_bridgeObjectRetain(v103);
      v109 = v105;
      v111 = sub_100A08084((uint64_t)v109, v103);

      swift_bridgeObjectRelease();
      v60 = v131;
      if ((v111 & 1) == 0 || v102)
        goto LABEL_49;
LABEL_48:
      v112 = v109;
      v113 = (void *)sub_100C82C5C((uint64_t)v112);

      goto LABEL_49;
    }
LABEL_59:
    swift_once(&qword_1010EA118, sub_100A2ECA4);
    goto LABEL_38;
  }
  sub_100004048((uint64_t)v25, &qword_10110EEB0);
LABEL_25:
  v58 = _swiftEmptyArrayStorage;
LABEL_26:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v139);
  return v58;
}

uint64_t sub_1004BB9AC(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  char v33[16];
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  char v37;
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;

  v32 = a5;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for OwnedBeaconRecord(0);
  v40 = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)asc_100E57B60);
  v16 = sub_100018F08(v38);
  v17 = sub_10005972C(a3, (uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
  UUID.init()(v17);
  v19 = v39;
  v18 = v40;
  sub_10001AA44(v38, v39);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v18 + 8) + 8) + 32))(v19);
  objc_msgSend(a1, "latitude");
  v21 = v20;
  objc_msgSend(a1, "longitude");
  v23 = v22;
  objc_msgSend(a1, "horizontalAccuracy");
  v25 = v24;
  v26 = objc_msgSend(a1, "timestamp");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

  v27 = &v15[v13[12]];
  v28 = type metadata accessor for Date(0);
  v29 = *(_QWORD *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v27, a2, v28);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v27, 0, 1, v28);
  *(_OWORD *)v15 = xmmword_100E22FC0;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v15[v13[5]], v12, v9);
  *(_QWORD *)&v15[v13[7]] = v21;
  *(_QWORD *)&v15[v13[8]] = v23;
  *(_QWORD *)&v15[v13[9]] = v25;
  v15[v13[11]] = a4;
  *(_QWORD *)&v15[v13[13]] = 0;
  type metadata accessor for Transaction(0);
  v34 = v32;
  v35 = v15;
  v36 = v38;
  v37 = a4;
  static Transaction.named<A>(_:with:)("BeaconManagerService.saveLastKnownLocation", 42, 2, sub_1004D27D4, v33, &type metadata for () + 1);
  sub_1000126B0((uint64_t)v15, type metadata accessor for BeaconEstimatedLocation);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
}

void sub_1004BBC64(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __n128 v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  void (*v29)(char *, unint64_t, uint64_t, __n128);
  void (*v30)(char *, _QWORD, uint64_t, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  char *v46;
  char *i;
  uint64_t found;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;

  v41 = a3;
  v42 = a4;
  v49 = a2;
  v5 = sub_10001A9A8(&qword_1010F33A8);
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v45 = *(_QWORD *)(found - 8);
  __chkstk_darwin(found);
  v40 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010ED860);
  v14 = __chkstk_darwin(v13);
  v39 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v38 - v16;
  v18 = *(_QWORD *)(a1 + 56);
  v43 = a1 + 56;
  v19 = 1 << *(_BYTE *)(a1 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v44 = (unint64_t)(v19 + 63) >> 6;
  v50 = a1;
  v22 = swift_bridgeObjectRetain(a1);
  v23 = 0;
  v46 = v17;
  for (i = v12; ; (*(void (**)(char *, uint64_t))(v10 + 8))(i, v9))
  {
    if (v21)
    {
      v24 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v25 = v24 | (v23 << 6);
      goto LABEL_24;
    }
    v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v26 >= v44)
      goto LABEL_30;
    v27 = *(_QWORD *)(v43 + 8 * v26);
    ++v23;
    if (!v27)
    {
      v23 = v26 + 1;
      if (v26 + 1 >= v44)
        goto LABEL_30;
      v27 = *(_QWORD *)(v43 + 8 * v23);
      if (!v27)
      {
        v23 = v26 + 2;
        if (v26 + 2 >= v44)
          goto LABEL_30;
        v27 = *(_QWORD *)(v43 + 8 * v23);
        if (!v27)
        {
          v23 = v26 + 3;
          if (v26 + 3 >= v44)
            goto LABEL_30;
          v27 = *(_QWORD *)(v43 + 8 * v23);
          if (!v27)
            break;
        }
      }
    }
LABEL_23:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_24:
    v29 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16);
    v29(v17, *(_QWORD *)(v50 + 48) + *(_QWORD *)(v10 + 72) * v25, v9, v22);
    v30 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56);
    v30(v17, 0, 1, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v17, 1, v9) == 1)
      goto LABEL_31;
    v51 = v23;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v17, v9);
    v31 = sub_10088AE54((uint64_t)v12);
    if (v31[2])
    {
      v32 = v45;
      sub_10005972C((uint64_t)v31 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80)), (uint64_t)v7, type metadata accessor for NotifyWhenFoundRecord);
      v33 = 0;
    }
    else
    {
      v33 = 1;
      v32 = v45;
    }
    v34 = found;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v7, v33, 1, found);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v7, 1, v34) == 1)
    {
      sub_100004048((uint64_t)v7, &qword_1010F33A8);
    }
    else
    {
      v35 = v40;
      sub_1000126EC((uint64_t)v7, v40, type metadata accessor for NotifyWhenFoundRecord);
      v36 = v35 + *(int *)(v34 + 20);
      v37 = (uint64_t)v39;
      ((void (*)(char *, uint64_t, uint64_t))v29)(v39, v36, v9);
      sub_1000126B0(v35, type metadata accessor for NotifyWhenFoundRecord);
      v30((char *)v37, 0, 1, v9);
      sub_100004084(v37, v41, &qword_1010ED860);
      *v42 = 0;
    }
    v17 = v46;
    v12 = i;
    v23 = v51;
  }
  v28 = v26 + 4;
  if (v28 >= v44)
  {
LABEL_30:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v17, 1, 1, v9, v22);
LABEL_31:
    swift_release(v50);
    return;
  }
  v27 = *(_QWORD *)(v43 + 8 * v28);
  if (v27)
  {
    v23 = v28;
    goto LABEL_23;
  }
  while (1)
  {
    v23 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v23 >= v44)
      goto LABEL_30;
    v27 = *(_QWORD *)(v43 + 8 * v23);
    ++v28;
    if (v27)
      goto LABEL_23;
  }
LABEL_33:
  __break(1u);
}

void sub_1004BC0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v42 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for OwnedBeaconRecord(0);
  v43 = *(_QWORD *)(v41 - 8);
  v6 = __chkstk_darwin(v41);
  v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v36 = (uint64_t)&v34 - v8;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 56);
  v39 = a1 + 56;
  v17 = 1 << *(_BYTE *)(a1 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v40 = (unint64_t)(v17 + 63) >> 6;
  v20 = swift_bridgeObjectRetain(a1);
  v21 = 0;
  v38 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v19)
    {
      v22 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v23 = v22 | (v21 << 6);
      goto LABEL_22;
    }
    v24 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v24 >= v40)
      goto LABEL_30;
    v25 = *(_QWORD *)(v39 + 8 * v24);
    ++v21;
    if (!v25)
    {
      v21 = v24 + 1;
      if (v24 + 1 >= v40)
        goto LABEL_30;
      v25 = *(_QWORD *)(v39 + 8 * v21);
      if (!v25)
      {
        v21 = v24 + 2;
        if (v24 + 2 >= v40)
          goto LABEL_30;
        v25 = *(_QWORD *)(v39 + 8 * v21);
        if (!v25)
        {
          v21 = v24 + 3;
          if (v24 + 3 >= v40)
            goto LABEL_30;
          v25 = *(_QWORD *)(v39 + 8 * v21);
          if (!v25)
            break;
        }
      }
    }
LABEL_21:
    v19 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v21 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16))(v15, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v10 + 72) * v23, v9, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
      goto LABEL_31;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    sub_10080B950((uint64_t)v12, (uint64_t)v5);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v5, 1, v41) == 1)
    {
      sub_100004048((uint64_t)v5, (uint64_t *)&unk_1010F47C0);
    }
    else
    {
      v27 = v36;
      sub_1000126EC((uint64_t)v5, v36, type metadata accessor for OwnedBeaconRecord);
      sub_1000126EC(v27, v37, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
        v38 = (_QWORD *)sub_1007C8520(0, v38[2] + 1, 1, (unint64_t)v38);
      v29 = v38[2];
      v28 = v38[3];
      v30 = v29 + 1;
      if (v29 >= v28 >> 1)
      {
        v35 = v29 + 1;
        v33 = (_QWORD *)sub_1007C8520(v28 > 1, v29 + 1, 1, (unint64_t)v38);
        v30 = v35;
        v38 = v33;
      }
      v31 = v37;
      v32 = v38;
      v38[2] = v30;
      sub_1000126EC(v31, (uint64_t)v32+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(_QWORD *)(v43 + 72) * v29, type metadata accessor for OwnedBeaconRecord);
    }
  }
  v26 = v24 + 4;
  if (v26 >= v40)
  {
LABEL_30:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v15, 1, 1, v9, v20);
LABEL_31:
    swift_release();
    return;
  }
  v25 = *(_QWORD *)(v39 + 8 * v26);
  if (v25)
  {
    v21 = v26;
    goto LABEL_21;
  }
  while (1)
  {
    v21 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v21 >= v40)
      goto LABEL_30;
    v25 = *(_QWORD *)(v39 + 8 * v21);
    ++v26;
    if (v25)
      goto LABEL_21;
  }
LABEL_33:
  __break(1u);
}

_QWORD *sub_1004BC508(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12[2];

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return _swiftEmptyArrayStorage;
  v5 = (_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain(a1);
  v6 = _swiftEmptyArrayStorage;
  do
  {
    sub_100489880(v5, a2, (uint64_t)&v10);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    if (v11)
    {
      sub_10000F9FC(&v10, (uint64_t)v12);
      sub_10000F9FC(v12, (uint64_t)&v10);
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        v6 = sub_10001BC00(0, v6[2] + 1, 1, v6);
      v8 = v6[2];
      v7 = v6[3];
      if (v8 >= v7 >> 1)
        v6 = sub_10001BC00((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
      v6[2] = v8 + 1;
      sub_10000F9FC(&v10, (uint64_t)&v6[5 * v8 + 4]);
    }
    else
    {
      sub_100004048((uint64_t)&v10, (uint64_t *)&unk_1010EE310);
    }
    v5 += 5;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1004BC670()
{
  return sub_1000077D8(40);
}

uint64_t sub_1004BC678()
{
  uint64_t v0;

  return sub_10049B3BC(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD *))(v0 + 24), *(_QWORD *)(v0 + 32));
}

_QWORD *sub_1004BC684(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  _QWORD *v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v39;
  _QWORD v41[3];
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  void (*v48)(char *, uint64_t, uint64_t, __n128);
  __int128 v49;
  __int128 v50;
  _UNKNOWN **v51;
  __int128 v52;
  __int128 v53;
  _UNKNOWN **v54;
  char *v55;

  v45 = a2;
  v4 = sub_10001A9A8(&qword_1010FD208);
  __chkstk_darwin(v4);
  v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v7);
  v9 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v55 = (char *)v41 - v15;
  v16 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v16);
  v46 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a1 + 16);
  if (v18)
  {
    v41[2] = v2;
    v42 = v6;
    v19 = a1;
    v20 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v43 = *(_QWORD *)(v11 + 72);
    v48 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
    v41[1] = v19;
    v21 = swift_bridgeObjectRetain(v19);
    v22 = _swiftEmptyArrayStorage;
    v44 = v9;
    v23 = v46;
    while (1)
    {
      v48(v23, v20, v10, v21);
      v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v24)(v23, 0, 1, v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v23, 1, v10) == 1)
        break;
      v47 = v22;
      v25 = v11;
      v26 = (uint64_t)v14;
      v27 = v25;
      v28 = (uint64_t)v55;
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v55, v23, v10);
      sub_10081EDA8(v28, (uint64_t)v9);
      v29 = (uint64_t)v9;
      v30 = type metadata accessor for OwnedBeaconGroup(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v29, 1, v30) == 1)
      {
        sub_100004048(v29, (uint64_t *)&unk_1010FF7F0);
        v52 = 0u;
        v53 = 0u;
        v54 = 0;
      }
      else
      {
        *((_QWORD *)&v53 + 1) = v30;
        v54 = &off_101070860;
        v31 = sub_100018F08(&v52);
        sub_1000126EC(v29, (uint64_t)v31, type metadata accessor for OwnedBeaconGroup);
      }
      v9 = (char *)v29;
      v14 = (char *)v26;
      ((void (*)(uint64_t, char *, uint64_t))v48)(v26, v55, v10);
      if (*((_QWORD *)&v53 + 1))
      {
        v11 = v27;
        v32 = *(void (**)(char *, uint64_t))(v27 + 8);
        v32(v14, v10);
        sub_10000F9FC(&v52, (uint64_t)&v49);
        v22 = v47;
      }
      else
      {
        v33 = (uint64_t)v42;
        sub_10081FB3C(v26, (uint64_t)v42);
        v34 = type metadata accessor for SharedBeaconGroup(0);
        v11 = v27;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v33, 1, v34) == 1)
        {
          v32 = *(void (**)(char *, uint64_t))(v27 + 8);
          v32(v14, v10);
          sub_100004048(v33, &qword_1010FD208);
          v49 = 0u;
          v50 = 0u;
          v51 = 0;
        }
        else
        {
          *((_QWORD *)&v50 + 1) = v34;
          v51 = &off_101066440;
          v35 = sub_100018F08(&v49);
          sub_1000126EC(v33, (uint64_t)v35, type metadata accessor for SharedBeaconGroup);
          v32 = *(void (**)(char *, uint64_t))(v27 + 8);
          v32(v14, v10);
        }
        v22 = v47;
        sub_100004048((uint64_t)&v52, (uint64_t *)&unk_101107010);
        v9 = v44;
      }
      v32(v55, v10);
      if (*((_QWORD *)&v50 + 1))
      {
        sub_10000F9FC(&v49, (uint64_t)&v52);
        sub_10000F9FC(&v52, (uint64_t)&v49);
        if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
          v22 = sub_10001BB20(0, v22[2] + 1, 1, v22);
        v37 = v22[2];
        v36 = v22[3];
        if (v37 >= v36 >> 1)
          v22 = sub_10001BB20((_QWORD *)(v36 > 1), v37 + 1, 1, v22);
        v22[2] = v37 + 1;
        sub_10000F9FC(&v49, (uint64_t)&v22[5 * v37 + 4]);
        v9 = v44;
      }
      else
      {
        sub_100004048((uint64_t)&v49, (uint64_t *)&unk_101107010);
      }
      v23 = v46;
      v20 += v43;
      if (!--v18)
      {
        v24(v46, 1, 1, v10, v21);
        break;
      }
    }
  }
  else
  {
    v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56);
    v39 = swift_bridgeObjectRetain(a1);
    v22 = _swiftEmptyArrayStorage;
    v38(v46, 1, 1, v10, v39);
  }
  swift_bridgeObjectRelease();
  return v22;
}

_QWORD *sub_1004BCB44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v6;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v3 = v2;
  result = _swiftEmptyArrayStorage;
  v16 = (unint64_t)_swiftEmptyArrayStorage;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v8 = (_QWORD *)(a1 + 32);
    swift_bridgeObjectRetain(a1);
    do
    {
      v9 = objc_autoreleasePoolPush();
      sub_1004869E4(a2, v8, &v15);
      if (v3)
      {
        objc_autoreleasePoolPop(v9);
        swift_errorRelease(v3);
        v3 = 0;
      }
      else
      {
        objc_autoreleasePoolPop(v9);
        v10 = v15;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        v13 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v12 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v13 >= v12 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
        specialized Array._endMutation()(v14);
      }
      v8 += 5;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return (_QWORD *)v16;
  }
  return result;
}

_QWORD *sub_1004BCC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  result = _swiftEmptyArrayStorage;
  v16 = (unint64_t)_swiftEmptyArrayStorage;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v7 = *(_QWORD *)(type metadata accessor for TimeBasedKey(0) - 8);
    v8 = (uint64_t *)(a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));
    v9 = *(_QWORD *)(v7 + 72);
    swift_bridgeObjectRetain(a1);
    do
    {
      v11 = sub_10048E898(v8, a2, &v15);
      if (v2)
      {
        swift_bridgeObjectRelease();
        return (_QWORD *)swift_bridgeObjectRelease();
      }
      v12 = v15;
      if (v15)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        v14 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v13 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v14 >= v13 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
        specialized Array._endMutation()(v10);
      }
      v8 = (uint64_t *)((char *)v8 + v9);
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    return (_QWORD *)v16;
  }
  return result;
}

_QWORD *sub_1004BCD8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *result;
  uint64_t v19;
  char **v20;
  Class v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Class isa;
  NSString v32;
  Class v33;
  uint64_t v34;
  _QWORD v35[2];
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  _QWORD v45[5];
  _QWORD *v46;

  v44 = type metadata accessor for SharedBeaconGroup(0);
  v5 = __chkstk_darwin(v44);
  v41 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v39 = (uint64_t)v35 - v8;
  __chkstk_darwin(v7);
  v40 = (char *)v35 - v9;
  v10 = type metadata accessor for OwnedBeaconGroup(0);
  v11 = __chkstk_darwin(v10);
  v43 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v35 - v14;
  __chkstk_darwin(v13);
  v42 = (char *)v35 - v16;
  v17 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (!v17)
    return result;
  v35[1] = v2;
  v46 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v17);
  v19 = a1 + 32;
  v37 = *(_QWORD *)(a2 + 280);
  v38 = a2;
  v20 = &selRef_connectedServicesChanged_;
  v36 = v15;
  while (1)
  {
    sub_100030784(v19, (uint64_t)v45);
    v25 = sub_10001A9A8(&qword_101108FB0);
    v26 = (uint64_t)v42;
    if (swift_dynamicCast(v42, v45, v25, v10, 0))
    {
      sub_1000126EC(v26, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
      v27 = sub_10081D058((uint64_t)v15);
      sub_1000126B0((uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
      v28 = (uint64_t)v43;
    }
    else
    {
      v29 = (uint64_t)v40;
      if ((swift_dynamicCast(v40, v45, v25, v44, 0) & 1) == 0)
      {
        result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001BLL, 0x8000000100ED87B0, "searchpartyd/BeaconStore.swift", 30, 2, 2441, 0);
        goto LABEL_16;
      }
      v30 = v39;
      sub_1000126EC(v29, v39, type metadata accessor for SharedBeaconGroup);
      v27 = objc_msgSend(objc_allocWithZone((Class)SPBeaconGroup), "init");
      objc_msgSend(v27, "setVersion:", -1);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v27, "setIdentifier:", isa);

      v32 = String._bridgeToObjectiveC()();
      objc_msgSend(v27, "setName:", v32);

      objc_msgSend(v27, "setClassification:", 0);
      objc_msgSend(v27, "setIsPairingComplete:", 1);
      objc_msgSend(v27, "setIsFindMyNetworkEnabled:", 0);
      objc_msgSend(v27, "setStatus:", 0);
      type metadata accessor for UUID(0);
      sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v33 = Set._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v27, "setBeaconIdentifiers:", v33);

      objc_msgSend(v27, "setIsConnected:", 0);
      sub_1000126B0(v30, type metadata accessor for SharedBeaconGroup);
      v28 = (uint64_t)v43;
      v15 = v36;
      v20 = &selRef_connectedServicesChanged_;
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v45);
    sub_100030784(v19, (uint64_t)v45);
    if ((swift_dynamicCast(v28, v45, v25, v10, 0) & 1) == 0)
      break;
    sub_1000126EC(v28, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
    sub_100495840((uint64_t)v15);
    sub_1000126B0((uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
LABEL_4:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v45);
    type metadata accessor for SPBeaconTaskName(0);
    sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
    sub_100006204(&qword_1010EB5D0, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_100E21E64);
    v21 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v27, v20[374], v21);

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
    v23 = v46[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
    v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v27);
    specialized ContiguousArray._endMutation()(v24);
    v19 += 40;
    if (!--v17)
      return v46;
  }
  v34 = (uint64_t)v41;
  if ((swift_dynamicCast(v41, v45, v25, v44, 0) & 1) != 0)
  {
    sub_1000126B0(v34, type metadata accessor for SharedBeaconGroup);
    goto LABEL_4;
  }
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001BLL, 0x8000000100ED87B0, "searchpartyd/BeaconManagerService_BeaconManagerProtocol.swift", 61, 2, 1717, 0);
LABEL_16:
  __break(1u);
  return result;
}

_QWORD *sub_1004BD314(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  Class isa;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v4 = *(_QWORD *)(type metadata accessor for WildModeAssociationRecord(0) - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = sub_100D81520(v5);
      sub_100482DA4(v5);
      type metadata accessor for SPBeaconTaskName(0);
      sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
      sub_100006204(&qword_1010EB5D0, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_100E21E64);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v7, "setTaskInformation:", isa);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
      v10 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
      v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v7);
      specialized ContiguousArray._endMutation()(v11);
      v5 += v6;
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_1004BD488(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v36 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v36);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BeaconNamingRecord(0);
  v34 = *(_QWORD *)(v6 - 8);
  v35 = v6;
  __chkstk_darwin(v6);
  v33 = (uint64_t)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED3F8);
  v31 = *(_QWORD *)(v8 - 8);
  v32 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    v39 = _swiftEmptyArrayStorage;
    sub_10009B18C(0, v11, 0);
    v13 = type metadata accessor for OwnedBeaconRecord(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v16 = *(_QWORD *)(a2 + 280);
    v29 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueueSynchronizer;
    v30 = v13;
    v28 = *(_QWORD *)(v14 + 72);
    while (1)
    {
      __chkstk_darwin(v13);
      *(&v27 - 2) = v16;
      *(&v27 - 1) = v17;
      QueueSynchronizer.conditionalSync<A>(_:)(sub_10029826C);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v5, 1, v35) == 1)
        break;
      v18 = v33;
      sub_1000126EC((uint64_t)v5, v33, type metadata accessor for BeaconNamingRecord);
      v19 = (uint64_t)&v10[*(int *)(v32 + 48)];
      sub_10005972C(v15, (uint64_t)v10, type metadata accessor for OwnedBeaconRecord);
      sub_1000126EC(v18, v19, type metadata accessor for BeaconNamingRecord);
      v12 = v39;
      if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
      {
        sub_10009B18C(0, v12[2] + 1, 1);
        v12 = v39;
      }
      v21 = v12[2];
      v20 = v12[3];
      if (v21 >= v20 >> 1)
      {
        sub_10009B18C(v20 > 1, v21 + 1, 1);
        v12 = v39;
      }
      v12[2] = v21 + 1;
      v13 = sub_100005CF0((uint64_t)v10, (uint64_t)v12+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(_QWORD *)(v31 + 72) * v21, &qword_1010ED3F8);
      v15 += v28;
      if (!--v11)
        return v12;
    }
    sub_100004048((uint64_t)v5, (uint64_t *)&unk_101105880);
    type metadata accessor for SPOwnerSessionError(0);
    v12 = v22;
    v37 = 2;
    v23 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v24 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    v25 = _BridgedStoredNSError.init(_:userInfo:)(&v38, &v37, v23, v12, v24);
    swift_willThrow(v25);
    swift_release();
  }
  return v12;
}

uint64_t sub_1004BD7C8(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  id v53;
  Class isa;
  Class v55;
  Class v56;
  Class v57;
  char *v58;
  Class v59;
  Class v60;
  void *v61;
  void *v62;
  char *v63;
  char *v64;
  void (*v65)(char *, uint64_t);
  void (*v66)(void);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  void (*v71)(char *, unint64_t, uint64_t);
  void *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  uint64_t result;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  Class v83;
  id v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  Class v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  void (*v113)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  void (*v118)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int EnumCaseMultiPayload;
  NSString v126;
  NSString v127;
  uint64_t (*v128)(uint64_t);
  uint64_t v129;
  void *v130;
  unint64_t v131[4];
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t *v143;
  char *v144;
  unint64_t v145;
  uint64_t v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  uint64_t v158;
  id v159;
  id v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;

  v140 = a3;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v5);
  v153 = (uint64_t)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = type metadata accessor for Date(0);
  v166 = *(_QWORD *)(v158 - 8);
  v7 = __chkstk_darwin(v158);
  v152 = (char *)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v151 = (char *)&v132 - v9;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v167 = (char *)&v132 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v165 = (char *)&v132 - v15;
  v16 = __chkstk_darwin(v14);
  v157 = (char *)&v132 - v17;
  __chkstk_darwin(v16);
  v164 = (char *)&v132 - v18;
  v150 = type metadata accessor for ShareRecord(0);
  v19 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v156 = (unint64_t)&v132 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v133);
  v134 = (uint64_t)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v22);
  v138 = (char *)&v132 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for OwnedBeaconRecord(0);
  v137 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v135 = (uint64_t)&v132 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v25);
  v142 = (char *)&v132 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for SafeLocation(0);
  v149 = *(_QWORD *)(v27 - 8);
  v28 = __chkstk_darwin(v27);
  v163 = (uint64_t)&v132 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v148 = (uint64_t)&v132 - v30;
  v31 = sub_10001A9A8(&qword_1010ED860);
  v32 = __chkstk_darwin(v31);
  v144 = (char *)&v132 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = (_QWORD *)static os_log_type_t.info.getter(v32);
  if (qword_1010EA248 != -1)
    goto LABEL_40;
  while (1)
  {
    v35 = qword_1011B7D28;
    v141 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v36 = swift_allocObject(v141, 112, 7);
    *(_OWORD *)(v36 + 16) = xmmword_100E22B10;
    v170 = *(_QWORD *)a2;
    v37 = sub_10001A9A8(&qword_1010F49B8);
    v38 = String.init<A>(describing:)(&v170, v37);
    v145 = a2;
    v40 = v39;
    *(_QWORD *)(v36 + 56) = &type metadata for String;
    v41 = sub_10001AA00();
    *(_QWORD *)(v36 + 32) = v38;
    *(_QWORD *)(v36 + 40) = v40;
    *(_QWORD *)(v36 + 96) = &type metadata for String;
    *(_QWORD *)(v36 + 104) = v41;
    *(_QWORD *)(v36 + 64) = v41;
    *(_QWORD *)(v36 + 72) = 0xD000000000000017;
    *(_QWORD *)(v36 + 80) = 0x8000000100ED85D0;
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "%@: %@", 6, 2, v36);
    swift_bridgeObjectRelease();
    v42 = *(_QWORD *)(v145 + 280);
    sub_10080B648((uint64_t)a1, (uint64_t)&v168);
    if (!v169)
      return sub_100004048((uint64_t)&v168, (uint64_t *)&unk_1010EE310);
    v43 = (uint64_t)a1;
    sub_10000F9FC(&v168, (uint64_t)&v170);
    v44 = sub_10088A6EC();
    v45 = v44[2];
    v155 = v10;
    v154 = v11;
    v143 = a1;
    v136 = v42;
    if (v45)
    {
      *(_QWORD *)&v168 = _swiftEmptyArrayStorage;
      v162 = v45;
      specialized ContiguousArray.reserveCapacity(_:)(v45);
      v46 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
      v132 = v44;
      v47 = (uint64_t)v44 + v46;
      v147 = (id)objc_opt_self(SPBeacon);
      v146 = *(_QWORD *)(v19 + 72);
      v48 = v158;
      v49 = v166;
      v50 = v157;
      v51 = v164;
      v52 = v11;
      v11 = v156;
      do
      {
        v161 = v47;
        sub_10005972C(v47, v11, type metadata accessor for ShareRecord);
        v70 = (int *)v150;
        v71 = *(void (**)(char *, unint64_t, uint64_t))(v52 + 16);
        v71(v51, v11 + *(int *)(v150 + 20), v10);
        v71(v50, v11 + v70[6], v10);
        UUID.init(uuid:)(0, 0, 0, 0, 0, 0, 0, 0, 0);
        UUID.init(uuid:)(0, 0, 0, 0, 0, 0, 0, 0, 0);
        v160 = objc_msgSend(v147, "SPOwner");
        v72 = (void *)sub_100ACD7B4(*(_BYTE *)(v11 + v70[9]), *(_QWORD *)(v11 + v70[9] + 8), *(void **)(v11 + v70[9] + 16));
        v73 = v151;
        (*(void (**)(char *, unint64_t, uint64_t))(v49 + 16))(v151, v11 + v70[7], v48);
        v74 = v11 + v70[8];
        v75 = v153;
        sub_10000F9B8(v74, v153, (uint64_t *)&unk_1010EA690);
        v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v75, 1, v48);
        v77 = v152;
        if ((_DWORD)v76 == 1)
        {
          static Date.distantFuture.getter(v76);
          sub_100004048(v75, (uint64_t *)&unk_1010EA690);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v152, v75, v48);
        }
        v53 = objc_allocWithZone((Class)SPBeaconShare);
        isa = UUID._bridgeToObjectiveC()().super.isa;
        v55 = UUID._bridgeToObjectiveC()().super.isa;
        v56 = UUID._bridgeToObjectiveC()().super.isa;
        v57 = UUID._bridgeToObjectiveC()().super.isa;
        v58 = v73;
        v59 = Date._bridgeToObjectiveC()().super.isa;
        v60 = Date._bridgeToObjectiveC()().super.isa;
        v61 = v53;
        v62 = v160;
        v159 = objc_msgSend(v61, "initWithIdentifier:beaconIdentifier:sharingCircleIdentifier:peerTrustIdentifier:owner:sharee:state:creationDate:expirationDate:", isa, v55, v56, v57, v160, v72, 5, v59, v60);

        v51 = v164;
        v63 = v77;
        v64 = v165;

        v65 = *(void (**)(char *, uint64_t))(v166 + 8);
        v48 = v158;
        v65(v63, v158);
        v65(v58, v48);
        v52 = v154;
        v66 = *(void (**)(void))(v154 + 8);
        v10 = v155;
        ((void (*)(char *, uint64_t))v66)(v167, v155);
        ((void (*)(char *, uint64_t))v66)(v64, v10);
        v50 = v157;
        v66();
        ((void (*)(char *, uint64_t))v66)(v51, v10);
        v11 = v156;
        v67 = sub_1000126B0(v156, type metadata accessor for ShareRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v67);
        v68 = *(_QWORD *)(v168 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v68);
        v69 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v68, v159);
        specialized ContiguousArray._endMutation()(v69);
        v47 = v161 + v146;
        --v162;
        v49 = v166;
      }
      while (v162);
      v78 = (_QWORD *)v168;
      swift_bridgeObjectRelease();
      v43 = (uint64_t)v143;
      v42 = v136;
    }
    else
    {
      swift_bridgeObjectRelease();
      v78 = _swiftEmptyArrayStorage;
    }
    sub_100CA8258((uint64_t)v78);
    swift_bridgeObjectRelease();
    v80 = v171;
    v81 = v172;
    v82 = sub_10001AA44(&v170, v171);
    a1 = sub_100854C8C((uint64_t)v82, v42, v80, v81);
    v19 = sub_10000F4A0(0, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
    sub_1000170AC((unint64_t *)&unk_1010EE150, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
    v83 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(a1, "setShares:", v83);

    if (qword_1010E9CF0 != -1)
      swift_once(&qword_1010E9CF0, sub_10058CADC);
    v84 = sub_100D1D510(v43);
    objc_msgSend(a1, "setSeparationState:", v84);

    v85 = v154;
    v86 = v144;
    v87 = v155;
    (*(void (**)(char *, uint64_t, uint64_t))(v154 + 16))(v144, v43, v155);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v86, 0, 1, v87);
    v34 = sub_10001E350();
    v88 = v34[2];
    if (!v88)
      break;
    a2 = 0;
    v89 = _swiftEmptyArrayStorage;
    while (a2 < v34[2])
    {
      v90 = (*(unsigned __int8 *)(v149 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80);
      v10 = *(_QWORD *)(v149 + 72);
      v91 = v148;
      sub_10005972C((uint64_t)v34 + v90 + v10 * a2, v148, type metadata accessor for SafeLocation);
      sub_1000126EC(v91, v163, type metadata accessor for SafeLocation);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v89);
      *(_QWORD *)&v168 = v89;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10009AC18(0, v89[2] + 1, 1);
        v89 = (_QWORD *)v168;
      }
      v11 = v89[2];
      v93 = v89[3];
      v19 = v11 + 1;
      if (v11 >= v93 >> 1)
      {
        sub_10009AC18(v93 > 1, v11 + 1, 1);
        v89 = (_QWORD *)v168;
      }
      ++a2;
      v89[2] = v19;
      sub_1000126EC(v163, (uint64_t)v89 + v90 + v11 * v10, type metadata accessor for SafeLocation);
      if (v88 == a2)
        goto LABEL_24;
    }
    __break(1u);
LABEL_40:
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  }
  v89 = _swiftEmptyArrayStorage;
LABEL_24:
  v94 = swift_bridgeObjectRelease();
  __chkstk_darwin(v94);
  v95 = (uint64_t)v144;
  v131[2] = (unint64_t)v144;
  v96 = sub_10001CEFC((uint64_t (*)(char *))sub_1004D63DC, v131, (uint64_t)v89);
  v97 = sub_10047CE18(v96);
  swift_bridgeObjectRelease();
  sub_100004048(v95, &qword_1010ED860);
  sub_10001D404((uint64_t)v97);
  swift_bridgeObjectRelease();
  sub_10000F4A0(0, &qword_1011058A0, SPSafeLocation_ptr);
  sub_1000170AC((unint64_t *)&qword_101107020, &qword_1011058A0, SPSafeLocation_ptr);
  v98 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a1, "setSafeLocations:", v98);

  v99 = v171;
  v100 = v172;
  v101 = sub_10001AA44(&v170, v171);
  v102 = v145;
  objc_msgSend(a1, "setCanBeLeashedByHost:", (unint64_t)sub_10077744C((uint64_t)v101, v145, v99, v100) & 1);
  objc_msgSend(a1, "setBeaconSeparationState:", sub_10075A5C4((uint64_t)v143));
  v103 = *(_QWORD *)(v102 + 40);
  if (v103)
  {
    v104 = *(unsigned __int8 *)(v103 + 368);
    v105 = swift_retain();
    v106 = static os_log_type_t.info.getter(v105);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v107 = qword_1011B7D30;
    v108 = swift_allocObject(v141, 72, 7);
    *(_OWORD *)(v108 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v108 + 56) = &type metadata for Bool;
    *(_QWORD *)(v108 + 64) = &protocol witness table for Bool;
    *(_BYTE *)(v108 + 32) = v104;
    os_log(_:dso:log:_:_:)(v106, &_mh_execute_header, v107, "thisDeviceConnectionAllowed: %i", (_DWORD)v132);
    swift_release();
    swift_bridgeObjectRelease();
    objc_msgSend(a1, "setConnectionAllowed:", v104);
    sub_100030784((uint64_t)&v170, (uint64_t)&v168);
    v109 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v110 = type metadata accessor for SharedBeaconRecord(0);
    v111 = (uint64_t)v142;
    v112 = swift_dynamicCast(v142, &v168, v109, v110, 6);
    v113 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 56);
    if ((v112 & 1) != 0)
    {
      v113(v111, 0, 1, v110);
      sub_100004048(v111, (uint64_t *)&unk_1010EE180);
      objc_msgSend(a1, "setConnectableDeviceCount:", 0);
LABEL_38:
      v130 = *(void **)(v140 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_targetBeacon);
      *(_QWORD *)(v140 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_targetBeacon) = a1;

      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v170);
    }
    v113(v111, 1, 1, v110);
    sub_100004048(v111, (uint64_t *)&unk_1010EE180);
    sub_100030784((uint64_t)&v170, (uint64_t)&v168);
    v114 = (uint64_t)v138;
    v115 = v109;
    v116 = v139;
    v117 = swift_dynamicCast(v138, &v168, v115, v139, 6);
    v118 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v137 + 56);
    if ((v117 & 1) == 0)
    {
      v118(v114, 1, 1, v116);
      sub_100004048(v114, (uint64_t *)&unk_1010F47C0);
      goto LABEL_38;
    }
    v118(v114, 0, 1, v116);
    v119 = v135;
    sub_1000126EC(v114, v135, type metadata accessor for OwnedBeaconRecord);
    v120 = v143;
    v121 = v116;
    v122 = sub_100711020((uint64_t)v143);
    CurrentValueSubject.value.getter(&v168);
    v123 = v168;
    sub_100481A4C(v120, v168);
    if (!__OFADD__(v123, v122))
    {
      objc_msgSend(a1, "setConnectableDeviceCount:", v123 + v122);
      v124 = v134;
      sub_10005972C(v119 + *(int *)(v121 + 24), v134, type metadata accessor for StableIdentifier);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v124, v133);
      if (EnumCaseMultiPayload == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v127 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        objc_msgSend(a1, "setSerialNumber:", v127);

        v128 = type metadata accessor for OwnedBeaconRecord;
        v129 = v119;
      }
      else
      {
        if (EnumCaseMultiPayload == 2)
        {
          sub_10001A9A8(&qword_101106F40);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v126 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          objc_msgSend(a1, "setSerialNumber:", v126);

          sub_1000126B0(v119, type metadata accessor for OwnedBeaconRecord);
          (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v124, v155);
          goto LABEL_38;
        }
        objc_msgSend(a1, "setSerialNumber:", 0);
        sub_1000126B0(v119, type metadata accessor for OwnedBeaconRecord);
        v128 = type metadata accessor for StableIdentifier;
        v129 = v124;
      }
      sub_1000126B0(v129, v128);
      goto LABEL_38;
    }
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

void sub_1004BE878(uint64_t a1, unint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  id v52;
  Class isa;
  Class v54;
  Class v55;
  Class v56;
  char *v57;
  Class v58;
  Class v59;
  void *v60;
  void *v61;
  void *v62;
  char *v63;
  char *v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  void (*v72)(unint64_t, uint64_t, uint64_t);
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  Class v82;
  uint64_t v83;
  id v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  Class v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  void (*v113)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  void (*v118)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int EnumCaseMultiPayload;
  NSString v126;
  NSString v127;
  uint64_t (*v128)(uint64_t);
  uint64_t v129;
  unint64_t v130[4];
  int v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  unint64_t v142;
  void (**v143)(_QWORD, _QWORD);
  _QWORD *v144;
  char *v145;
  uint64_t v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  uint64_t v159;
  id v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;

  v143 = a3;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v5);
  v153 = (uint64_t)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = type metadata accessor for Date(0);
  v168 = *(_QWORD *)(v157 - 8);
  v7 = __chkstk_darwin(v157);
  v152 = (char *)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v151 = (char *)&v131 - v9;
  v10 = type metadata accessor for UUID(0);
  v11 = *(uint64_t **)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v164 = (char *)&v131 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v167 = (char *)&v131 - v15;
  v16 = __chkstk_darwin(v14);
  v166 = (char *)&v131 - v17;
  __chkstk_darwin(v16);
  v165 = (char *)&v131 - v18;
  v150 = type metadata accessor for ShareRecord(0);
  v161 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v156 = (uint64_t)&v131 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v133);
  v134 = (uint64_t)&v131 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v21);
  v137 = (char *)&v131 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for OwnedBeaconRecord(0);
  v136 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v135 = (uint64_t)&v131 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v24);
  v141 = (char *)&v131 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for SafeLocation(0);
  v149 = *(_QWORD *)(v26 - 8);
  v27 = __chkstk_darwin(v26);
  v163 = (uint64_t)&v131 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v148 = (uint64_t)&v131 - v29;
  v30 = sub_10001A9A8(&qword_1010ED860);
  v31 = __chkstk_darwin(v30);
  v145 = (char *)&v131 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = (_QWORD *)static os_log_type_t.info.getter(v31);
  if (qword_1010EA248 != -1)
    goto LABEL_40;
  while (1)
  {
    v34 = qword_1011B7D28;
    v140 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v35 = swift_allocObject(v140, 112, 7);
    *(_OWORD *)(v35 + 16) = xmmword_100E22B10;
    v171 = *(_QWORD *)a2;
    v36 = sub_10001A9A8(&qword_1010F49B8);
    v37 = String.init<A>(describing:)(&v171, v36);
    v39 = v38;
    *(_QWORD *)(v35 + 56) = &type metadata for String;
    v40 = sub_10001AA00();
    *(_QWORD *)(v35 + 32) = v37;
    *(_QWORD *)(v35 + 40) = v39;
    *(_QWORD *)(v35 + 96) = &type metadata for String;
    *(_QWORD *)(v35 + 104) = v40;
    *(_QWORD *)(v35 + 64) = v40;
    *(_QWORD *)(v35 + 72) = 0xD000000000000017;
    *(_QWORD *)(v35 + 80) = 0x8000000100ED85D0;
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "%@: %@", 6, 2, v35);
    swift_bridgeObjectRelease();
    v142 = a2;
    v41 = *(_QWORD *)(a2 + 280);
    sub_10080B648(a1, (uint64_t)&v169);
    if (!v170)
    {
      sub_100004048((uint64_t)&v169, (uint64_t *)&unk_1010EE310);
      v143[2](v143, 0);
      return;
    }
    sub_10000F9FC(&v169, (uint64_t)&v171);
    v139 = v41;
    v144 = (_QWORD *)a1;
    v42 = sub_10088A6EC();
    v43 = v42[2];
    v155 = v10;
    v154 = v11;
    if (v43)
    {
      *(_QWORD *)&v169 = _swiftEmptyArrayStorage;
      v162 = v43;
      specialized ContiguousArray.reserveCapacity(_:)(v43);
      v44 = v161;
      v45 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
      v132 = v42;
      v46 = (uint64_t)v42 + v45;
      v147 = (id)objc_opt_self(SPBeacon);
      v146 = *(_QWORD *)(v44 + 72);
      v47 = v157;
      v48 = v168;
      a2 = (unint64_t)v165;
      v49 = v166;
      v50 = v11;
      v51 = v156;
      do
      {
        v161 = v46;
        sub_10005972C(v46, v51, type metadata accessor for ShareRecord);
        v71 = (int *)v150;
        v72 = (void (*)(unint64_t, uint64_t, uint64_t))v50[2];
        v72(a2, v51 + *(int *)(v150 + 20), v10);
        v72((unint64_t)v49, v51 + v71[6], v10);
        UUID.init(uuid:)(0, 0, 0, 0, 0, 0, 0, 0, 0);
        UUID.init(uuid:)(0, 0, 0, 0, 0, 0, 0, 0, 0);
        v160 = objc_msgSend(v147, "SPOwner");
        v159 = sub_100ACD7B4(*(_BYTE *)(v51 + v71[9]), *(_QWORD *)(v51 + v71[9] + 8), *(void **)(v51 + v71[9] + 16));
        v73 = v151;
        (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v151, v51 + v71[7], v47);
        v74 = v51 + v71[8];
        v75 = v153;
        sub_10000F9B8(v74, v153, (uint64_t *)&unk_1010EA690);
        v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v75, 1, v47);
        v77 = v152;
        if ((_DWORD)v76 == 1)
        {
          static Date.distantFuture.getter(v76);
          sub_100004048(v75, (uint64_t *)&unk_1010EA690);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v152, v75, v47);
        }
        v52 = objc_allocWithZone((Class)SPBeaconShare);
        isa = UUID._bridgeToObjectiveC()().super.isa;
        v54 = UUID._bridgeToObjectiveC()().super.isa;
        v55 = UUID._bridgeToObjectiveC()().super.isa;
        v56 = UUID._bridgeToObjectiveC()().super.isa;
        v57 = v73;
        v58 = Date._bridgeToObjectiveC()().super.isa;
        v59 = Date._bridgeToObjectiveC()().super.isa;
        v60 = v52;
        v62 = (void *)v159;
        v61 = v160;
        v158 = objc_msgSend(v60, "initWithIdentifier:beaconIdentifier:sharingCircleIdentifier:peerTrustIdentifier:owner:sharee:state:creationDate:expirationDate:", isa, v54, v55, v56, v160, v159, 5, v58, v59);

        v63 = v77;
        a2 = (unint64_t)v165;

        v49 = v166;
        v64 = v167;

        v65 = *(void (**)(char *, uint64_t))(v168 + 8);
        v66 = v63;
        v47 = v157;
        v65(v66, v157);
        v65(v57, v47);
        v50 = v154;
        v67 = (void (*)(char *, uint64_t))v154[1];
        v10 = v155;
        v67(v164, v155);
        v67(v64, v10);
        v67(v49, v10);
        v67((char *)a2, v10);
        v51 = v156;
        v68 = sub_1000126B0(v156, type metadata accessor for ShareRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v68);
        v69 = *(_QWORD *)(v169 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v69);
        v70 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v69, v158);
        specialized ContiguousArray._endMutation()(v70);
        v46 = v161 + v146;
        --v162;
        v48 = v168;
      }
      while (v162);
      v78 = (_QWORD *)v169;
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v78 = _swiftEmptyArrayStorage;
    }
    sub_100CA8258((uint64_t)v78);
    swift_bridgeObjectRelease();
    v79 = v172;
    v80 = v173;
    v81 = sub_10001AA44(&v171, v172);
    v11 = sub_100854C8C((uint64_t)v81, v139, v79, v80);
    sub_10000F4A0(0, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
    sub_1000170AC((unint64_t *)&unk_1010EE150, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
    v82 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v11, "setShares:", v82);

    if (qword_1010E9CF0 != -1)
      swift_once(&qword_1010E9CF0, sub_10058CADC);
    v83 = (uint64_t)v144;
    v84 = sub_100D1D510((uint64_t)v144);
    objc_msgSend(v11, "setSeparationState:", v84);

    v85 = v154;
    a1 = (uint64_t)v145;
    v86 = v155;
    ((void (*)(char *, uint64_t, uint64_t))v154[2])(v145, v83, v155);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v85[7])(a1, 0, 1, v86);
    v33 = sub_10001E350();
    v87 = v33[2];
    if (!v87)
      break;
    v88 = 0;
    v89 = _swiftEmptyArrayStorage;
    while (v88 < v33[2])
    {
      v90 = (*(unsigned __int8 *)(v149 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80);
      v10 = *(_QWORD *)(v149 + 72);
      v91 = v148;
      sub_10005972C((uint64_t)v33 + v90 + v10 * v88, v148, type metadata accessor for SafeLocation);
      sub_1000126EC(v91, v163, type metadata accessor for SafeLocation);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v89);
      *(_QWORD *)&v169 = v89;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10009AC18(0, v89[2] + 1, 1);
        v89 = (_QWORD *)v169;
      }
      a2 = v89[2];
      v93 = v89[3];
      a1 = a2 + 1;
      if (a2 >= v93 >> 1)
      {
        sub_10009AC18(v93 > 1, a2 + 1, 1);
        v89 = (_QWORD *)v169;
      }
      ++v88;
      v89[2] = a1;
      sub_1000126EC(v163, (uint64_t)v89 + v90 + a2 * v10, type metadata accessor for SafeLocation);
      if (v87 == v88)
        goto LABEL_24;
    }
    __break(1u);
LABEL_40:
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  }
  v89 = _swiftEmptyArrayStorage;
LABEL_24:
  v94 = swift_bridgeObjectRelease();
  __chkstk_darwin(v94);
  v95 = (uint64_t)v145;
  v130[2] = (unint64_t)v145;
  v96 = sub_10001CEFC((uint64_t (*)(char *))sub_1004D63DC, v130, (uint64_t)v89);
  v97 = sub_10047CE18(v96);
  swift_bridgeObjectRelease();
  sub_100004048(v95, &qword_1010ED860);
  sub_10001D404((uint64_t)v97);
  swift_bridgeObjectRelease();
  sub_10000F4A0(0, &qword_1011058A0, SPSafeLocation_ptr);
  sub_1000170AC((unint64_t *)&qword_101107020, &qword_1011058A0, SPSafeLocation_ptr);
  v98 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v11, "setSafeLocations:", v98);

  v99 = v172;
  v100 = v173;
  v101 = sub_10001AA44(&v171, v172);
  v102 = v142;
  objc_msgSend(v11, "setCanBeLeashedByHost:", (unint64_t)sub_10077744C((uint64_t)v101, v142, v99, v100) & 1);
  objc_msgSend(v11, "setBeaconSeparationState:", sub_10075A5C4((uint64_t)v144));
  v103 = *(_QWORD *)(v102 + 40);
  if (v103)
  {
    v104 = *(unsigned __int8 *)(v103 + 368);
    v105 = swift_retain();
    v106 = static os_log_type_t.info.getter(v105);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v107 = qword_1011B7D30;
    v108 = swift_allocObject(v140, 72, 7);
    *(_OWORD *)(v108 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v108 + 56) = &type metadata for Bool;
    *(_QWORD *)(v108 + 64) = &protocol witness table for Bool;
    *(_BYTE *)(v108 + 32) = v104;
    os_log(_:dso:log:_:_:)(v106, &_mh_execute_header, v107, "thisDeviceConnectionAllowed: %i", v131);
    swift_release();
    swift_bridgeObjectRelease();
    objc_msgSend(v11, "setConnectionAllowed:", v104);
    sub_100030784((uint64_t)&v171, (uint64_t)&v169);
    v109 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v110 = type metadata accessor for SharedBeaconRecord(0);
    v111 = (uint64_t)v141;
    v112 = swift_dynamicCast(v141, &v169, v109, v110, 6);
    v113 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 56);
    if ((v112 & 1) != 0)
    {
      v113(v111, 0, 1, v110);
      sub_100004048(v111, (uint64_t *)&unk_1010EE180);
      objc_msgSend(v11, "setConnectableDeviceCount:", 0);
LABEL_38:
      ((void (**)(_QWORD, uint64_t *))v143)[2](v143, v11);

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v171);
      return;
    }
    v113(v111, 1, 1, v110);
    sub_100004048(v111, (uint64_t *)&unk_1010EE180);
    sub_100030784((uint64_t)&v171, (uint64_t)&v169);
    v114 = (uint64_t)v137;
    v115 = v109;
    v116 = v138;
    v117 = swift_dynamicCast(v137, &v169, v115, v138, 6);
    v118 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v136 + 56);
    if ((v117 & 1) == 0)
    {
      v118(v114, 1, 1, v116);
      sub_100004048(v114, (uint64_t *)&unk_1010F47C0);
      goto LABEL_38;
    }
    v118(v114, 0, 1, v116);
    v119 = v135;
    sub_1000126EC(v114, v135, type metadata accessor for OwnedBeaconRecord);
    v120 = v144;
    v121 = v116;
    v122 = sub_100711020((uint64_t)v144);
    CurrentValueSubject.value.getter(&v169);
    v123 = v169;
    sub_100481A4C(v120, v169);
    if (!__OFADD__(v123, v122))
    {
      objc_msgSend(v11, "setConnectableDeviceCount:", v123 + v122);
      v124 = v134;
      sub_10005972C(v119 + *(int *)(v121 + 24), v134, type metadata accessor for StableIdentifier);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v124, v133);
      if (EnumCaseMultiPayload == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v127 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        objc_msgSend(v11, "setSerialNumber:", v127);

        v128 = type metadata accessor for OwnedBeaconRecord;
        v129 = v119;
      }
      else
      {
        if (EnumCaseMultiPayload == 2)
        {
          sub_10001A9A8(&qword_101106F40);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v126 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          objc_msgSend(v11, "setSerialNumber:", v126);

          sub_1000126B0(v119, type metadata accessor for OwnedBeaconRecord);
          ((void (*)(uint64_t, uint64_t))v154[1])(v124, v155);
          goto LABEL_38;
        }
        objc_msgSend(v11, "setSerialNumber:", 0);
        sub_1000126B0(v119, type metadata accessor for OwnedBeaconRecord);
        v128 = type metadata accessor for StableIdentifier;
        v129 = v124;
      }
      sub_1000126B0(v129, v128);
      goto LABEL_38;
    }
    __break(1u);
  }
  _Block_release(v143);
  __break(1u);
}

uint64_t sub_1004BF940()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 224) = v0;
  return swift_task_switch(sub_1004BF958, 0, 0);
}

uint64_t sub_1004BF958()
{
  uint64_t v0;
  uint64_t My;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t (__cdecl *v11)();

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v2 = sub_100018F08((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v2, enum case for Feature.FindMy.managedCBPeripheral(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if ((My & 1) != 0)
  {
    v3 = qword_1010EA5B0;
    swift_retain();
    if (v3 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 160))
    {
      sub_10000F9FC((__int128 *)(v0 + 136), v0 + 56);
      swift_release();
      sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
      v11 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC70 + dword_1010EBC70);
      v5 = (_QWORD *)swift_task_alloc(unk_1010EBC74);
      *(_QWORD *)(v0 + 232) = v5;
      *v5 = v0;
      v5[1] = sub_1004BFB94;
      return v11();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1010E9F20 != -1)
      swift_once(&qword_1010E9F20, sub_100791C44);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B7648);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "managedCBPeripheral FF is disabled!", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    return (*(uint64_t (**)(void *))(v0 + 8))(&_swiftEmptySetSingleton);
  }
  return result;
}

uint64_t sub_1004BFB94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004BFBF0, 0, 0);
}

uint64_t sub_1004BFBF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  v1 = *(_QWORD *)(v0 + 240);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  if (v1)
    return swift_task_switch(sub_1004BFD08, *(_QWORD *)(v0 + 240), 0);
  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7648);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "standaloneBeacons: missing StandaloneBeaconService service!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  return (*(uint64_t (**)(void *))(v0 + 8))(&_swiftEmptySetSingleton);
}

uint64_t sub_1004BFD08()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0[30] + 128);
  v2 = v1 + OBJC_IVAR____TtC12searchpartyd24StandaloneBeaconDatabase_standaloneBeacon;
  v3 = type metadata accessor for Table(0);
  v0[15] = v3;
  v0[16] = &protocol witness table for Table;
  v4 = sub_100018F08(v0 + 12);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v4, v2, v3);
  sub_100B8B834((uint64_t)(v0 + 12), v1);
  v0[31] = 0;
  v5 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 12);
  v0[32] = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v5);
  swift_release();
  return swift_task_switch(sub_1004BFDDC, 0, 0);
}

uint64_t sub_1004BFDDC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = sub_10047D5CC(*(_QWORD *)(v0 + 256));
  swift_release();
  v2 = sub_100CA8B10((uint64_t)v1);
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_1004BFE4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  v1 = *(_QWORD *)(v0 + 248);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7648);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 248);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v14 = v9;
    *(_DWORD *)v8 = 136446210;
    *(_QWORD *)(v0 + 200) = v7;
    swift_errorRetain(v7);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v11 = String.init<A>(describing:)(v0 + 200, v10);
    *(_QWORD *)(v0 + 208) = sub_100016940(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "standaloneBeacons error %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
    swift_release();
  }
  else
  {
    swift_release();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }
  swift_errorRelease(v7);

  return (*(uint64_t (**)(void *))(v0 + 8))(&_swiftEmptySetSingleton);
}

uint64_t sub_1004C004C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  unsigned int v44;
  NSString v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Class v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Class isa;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;

  v77 = a2;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v5);
  v79 = (uint64_t)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for OwnedBeaconGroup(0);
  v76 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ED860);
  v10 = __chkstk_darwin(v9);
  v74 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v75 = (char *)&v68 - v13;
  v14 = __chkstk_darwin(v12);
  v81 = (char *)&v68 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v68 - v17;
  v19 = __chkstk_darwin(v16);
  v72 = (uint64_t)&v68 - v20;
  __chkstk_darwin(v19);
  v22 = (char *)&v68 - v21;
  v23 = type metadata accessor for MACAddress(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v68 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B7DF8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v78 = a1;
  v30 = v29(v26, a1, v23);
  v71 = v28;
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter(v31);
  v33 = os_log_type_enabled(v31, v32);
  v73 = v22;
  v70 = v18;
  if (v33)
  {
    v34 = swift_slowAlloc(22, -1);
    v35 = swift_slowAlloc(32, -1);
    v69 = a3;
    v36 = v35;
    *(_DWORD *)v34 = 141558275;
    v82 = 1752392040;
    v83 = v35;
    v68 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v34 + 4, v34 + 12);
    *(_WORD *)(v34 + 12) = 2081;
    v37 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v23, v37);
    v82 = sub_100016940(v38, v39, &v83);
    v8 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v34 + 14, v34 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "beaconingIdentifier for %{private,mask.hash}s", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    v40 = v36;
    a3 = v69;
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v34, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  }

  v41 = (uint64_t)v81;
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v42 = (void *)qword_1011B7C08;
  v43 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v44 = objc_msgSend(v43, "isInternalBuild");

  if (v44)
  {
    v45 = String._bridgeToObjectiveC()();
    v46 = objc_msgSend(v42, "stringForKey:", v45);

    if (v46)
    {
      v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      v49 = v48;

      swift_bridgeObjectRetain_n(v49, 2);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.default.getter(v51);
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc(12, -1);
        v54 = swift_slowAlloc(32, -1);
        v83 = v54;
        *(_DWORD *)v53 = 136315138;
        swift_bridgeObjectRetain(v49);
        v82 = sub_100016940(v47, v49, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v53 + 4, v53 + 12);
        swift_bridgeObjectRelease_n(v49, 3);
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "beaconingIdentifierOverride: %s", v53, 0xCu);
        swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1, -1);
        swift_slowDealloc(v53, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v49, 2);
      }
      v65 = (uint64_t)v73;
      UUID.init(uuidString:)(v47, v49);
      swift_bridgeObjectRelease();
      v66 = v72;
      sub_10000F9B8(v65, v72, &qword_1010ED860);
      v63 = type metadata accessor for UUID(0);
      v64 = *(_QWORD *)(v63 - 8);
      goto LABEL_22;
    }
  }
  v55 = v79;
  sub_10081F5CC(v78, v79);
  v56 = v80;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v55, 1, v80) == 1)
  {
    sub_100004048(v55, (uint64_t *)&unk_1010FF7F0);
LABEL_19:
    v63 = type metadata accessor for UUID(0);
    v64 = *(_QWORD *)(v63 - 8);
    v65 = (uint64_t)v75;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v75, 1, 1, v63);
    v66 = v74;
    sub_10000F9B8(v65, v74, &qword_1010ED860);
LABEL_22:
    isa = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v66, 1, v63) != 1)
    {
      isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v66, v63);
    }
    (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);

    return sub_100004048(v65, &qword_1010ED860);
  }
  sub_1000126EC(v55, (uint64_t)v8, type metadata accessor for OwnedBeaconGroup);
  if ((v8[*(int *)(v56 + 32)] & 1) == 0)
  {
    sub_1000126B0((uint64_t)v8, type metadata accessor for OwnedBeaconGroup);
    goto LABEL_19;
  }
  v57 = &v8[*(int *)(v56 + 24)];
  v58 = type metadata accessor for UUID(0);
  v59 = *(_QWORD *)(v58 - 8);
  v60 = (uint64_t)v70;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v70, v57, v58);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v59 + 56))(v60, 0, 1, v58);
  sub_10000F9B8(v60, v41, &qword_1010ED860);
  v61 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v41, 1, v58) != 1)
  {
    v61 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v41, v58);
  }
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v61);

  sub_100004048(v60, &qword_1010ED860);
  return sub_1000126B0((uint64_t)v8, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_1004C0814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  unint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  void *v47;
  uint64_t v48;
  char *v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v55 = a2;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v5);
  v57 = (uint64_t)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for OwnedBeaconGroup(0);
  v54 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v52 = (uint64_t)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MACAddress(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v48 - v13;
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B7DF8);
  v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v17 = v50(v14, a1, v8);
  v51 = v16;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(22, -1);
    v53 = a3;
    v21 = v20;
    v22 = swift_slowAlloc(32, -1);
    v48 = a1;
    v23 = v22;
    *(_DWORD *)v21 = 141558275;
    v58 = 1752392040;
    v59 = v22;
    v49 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v21 + 4, v21 + 12);
    *(_WORD *)(v21 + 12) = 2081;
    v24 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v8, v24);
    v58 = sub_100016940(v25, v26, &v59);
    v12 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease();
    v27 = *(void (**)(char *, uint64_t))(v9 + 8);
    v27(v14, v8);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "fetchFindMyNetworkStatus for %{private,mask.hash}s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v28 = v23;
    a1 = v48;
    swift_slowDealloc(v28, -1, -1);
    v29 = v21;
    a3 = v53;
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    v27 = *(void (**)(char *, uint64_t))(v9 + 8);
    v27(v14, v8);
  }

  v30 = v57;
  sub_10081F5CC(a1, v57);
  v31 = v56;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v30, 1, v56) == 1)
  {
    sub_100004048(v30, (uint64_t *)&unk_1010FF7F0);
    v32 = v50(v12, a1, v8);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc(12, -1);
      v53 = a3;
      v36 = (uint8_t *)v35;
      v37 = swift_slowAlloc(32, -1);
      v59 = v37;
      *(_DWORD *)v36 = 136315138;
      v38 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v39 = dispatch thunk of CustomStringConvertible.description.getter(v8, v38);
      v58 = sub_100016940(v39, v40, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease();
      v27(v12, v8);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "No beacon group for %s", v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      v41 = v36;
      a3 = v53;
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {
      v27(v12, v8);
    }

    v44 = sub_10028FA08();
    v45 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v44, 0, 0);
    *v46 = 1;
    v47 = (void *)_convertErrorToNSError(_:)(v45);
    (*(void (**)(uint64_t, _QWORD, void *))(a3 + 16))(a3, 0, v47);

    return swift_errorRelease(v45);
  }
  else
  {
    v42 = v52;
    sub_1000126EC(v30, v52, type metadata accessor for OwnedBeaconGroup);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(a3 + 16))(a3, *(unsigned __int8 *)(v42 + *(int *)(v31 + 32)), 0);
    return sub_1000126B0(v42, type metadata accessor for OwnedBeaconGroup);
  }
}

uint64_t sub_1004C0D40(uint64_t *a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Class isa;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t *, uint64_t);
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  NSObject *v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void (**v60)(const void *, void *);
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  void *v64;
  uint64_t v65;
  NSObject *v66;
  NSObject *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  NSObject *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  NSObject *v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  void (**v117)(const void *, void *);
  void *v118;
  unint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  uint8_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  NSObject *v134;
  uint64_t v135;
  NSObject *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  NSObject *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  NSObject *v146;
  os_log_type_t v147;
  uint8_t *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  NSObject *v159;
  os_log_type_t v160;
  uint8_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  NSObject *v166;
  uint64_t v167;
  NSObject *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  NSObject *v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  void (**v199)(uint64_t);
  NSObject *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void (**v204)(const void *, void *);
  void *v205;
  uint64_t v206;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  NSObject *v213;
  os_log_type_t v214;
  uint8_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  void *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  unsigned __int8 *v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t (*v246)(char *, uint64_t *, uint64_t);
  char *v247;
  void (**v248)(const void *, void *);
  uint64_t v249;
  uint64_t v250;
  NSObject *v251;
  NSObject *v252;
  uint64_t v253;
  uint64_t *v254;
  char v255[8];
  uint64_t v256;
  uint64_t v257;
  char v258[8];
  unint64_t v259;
  uint64_t v260;

  LODWORD(v253) = a2;
  v226 = sub_10001A9A8(&qword_1010F4920);
  v225 = *(_QWORD *)(v226 - 8);
  __chkstk_darwin(v226);
  v223 = (char *)&v222 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v229 = sub_10001A9A8(&qword_1010F4928);
  v228 = *(_QWORD *)(v229 - 8);
  __chkstk_darwin(v229);
  v227 = (char *)&v222 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = sub_10001A9A8(&qword_1010F4930);
  v231 = *(_QWORD *)(v232 - 8);
  __chkstk_darwin(v232);
  v230 = (char *)&v222 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v235 = sub_10001A9A8(&qword_1010F4938);
  v234 = *(_QWORD *)(v235 - 8);
  __chkstk_darwin(v235);
  v233 = (char *)&v222 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v244 = type metadata accessor for DispatchTime(0);
  v239 = *(_QWORD *)(v244 - 8);
  v11 = __chkstk_darwin(v244);
  v242 = (char *)&v222 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v243 = (char *)&v222 - v13;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v14);
  v252 = ((char *)&v222 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v251 = type metadata accessor for OwnedBeaconGroup(0);
  isa = v251[-1].isa;
  v17 = __chkstk_darwin(v251);
  v224 = (uint64_t)&v222 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v237 = (uint64_t)&v222 - v20;
  v21 = __chkstk_darwin(v19);
  v236 = (uint64_t)&v222 - v22;
  v23 = __chkstk_darwin(v21);
  v238 = (uint64_t)&v222 - v24;
  v222 = v25;
  __chkstk_darwin(v23);
  v27 = (char *)&v222 - v26;
  v28 = type metadata accessor for MACAddress(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = __chkstk_darwin(v28);
  v247 = (char *)&v222 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v33 = (char *)&v222 - v32;
  v250 = swift_allocObject(&unk_101079C80, 24, 7);
  *(_QWORD *)(v250 + 16) = a4;
  _Block_copy(a4);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v34 = type metadata accessor for Logger(0);
  v35 = sub_10001A9E8(v34, (uint64_t)qword_1011B7DF8);
  v36 = *(uint64_t (**)(char *, uint64_t *, uint64_t))(v29 + 16);
  v254 = a1;
  v246 = v36;
  v37 = v36(v33, a1, v28);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter(v38);
  v40 = os_log_type_enabled(v38, v39);
  v248 = (void (**)(const void *, void *))a4;
  v249 = v35;
  if (v40)
  {
    v41 = swift_slowAlloc(18, -1);
    v240 = v27;
    v42 = v41;
    v43 = swift_slowAlloc(32, -1);
    v260 = v43;
    *(_DWORD *)v42 = 67240450;
    LODWORD(v257) = v253 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, (char *)&v257 + 4, v42 + 4, v42 + 8);
    *(_WORD *)(v42 + 8) = 2082;
    v245 = a3;
    v241 = (unsigned __int8 *)isa;
    v44 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v45 = dispatch thunk of CustomStringConvertible.description.getter(v28, v44);
    v257 = sub_100016940(v45, v46, &v260);
    isa = (Class)v241;
    a3 = v245;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, v258, v42 + 10, v42 + 18);
    swift_bridgeObjectRelease();
    v47 = *(void (**)(char *, uint64_t))(v29 + 8);
    v47(v33, v28);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "setFindMyNetworkStatus %{BOOL,public}d for %{public}s", (uint8_t *)v42, 0x12u);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    v48 = v42;
    v27 = v240;
    swift_slowDealloc(v48, -1, -1);
  }
  else
  {
    v47 = *(void (**)(char *, uint64_t))(v29 + 8);
    v47(v33, v28);
  }

  v49 = v252;
  v50 = v254;
  sub_10081F5CC((uint64_t)v254, (uint64_t)v252);
  if ((*((unsigned int (**)(NSObject *, uint64_t, NSObject *))isa + 6))(v49, 1, v251) != 1)
  {
    sub_1000126EC((uint64_t)v49, (uint64_t)v27, type metadata accessor for OwnedBeaconGroup);
    if ((v253 & 1) != 0)
    {
      sub_10047F12C(1, (uint64_t)v27, (uint64_t)sub_10001D1F0, v250);
      sub_1000126B0((uint64_t)v27, type metadata accessor for OwnedBeaconGroup);
      return swift_release();
    }
    v65 = swift_allocObject(&unk_1010792D0, 24, 7);
    *(_QWORD *)(v65 + 16) = 0;
    v254 = (uint64_t *)(v65 + 16);
    v66 = dispatch_group_create();
    dispatch_group_enter(v66);
    swift_retain();
    v67 = v66;
    v245 = a3;
    sub_100297B44((uint64_t)v27, 1, a3, v65, v67);

    v68 = swift_release();
    v69 = v242;
    static DispatchTime.now()(v68);
    v70 = v243;
    + infix(_:_:)(v69, 60.0);
    v71 = *(NSObject **)(v239 + 8);
    v72 = v244;
    ((void (*)(char *, uint64_t))v71)(v69, v244);
    v73 = OS_dispatch_group.wait(timeout:)(v70) & 1;
    v252 = v71;
    ((void (*)(char *, uint64_t))v71)(v70, v72);
    v74 = static DispatchTimeoutResult.== infix(_:_:)(v73, 1);
    v253 = v65;
    if ((v74 & 1) != 0)
    {
      v241 = (unsigned __int8 *)isa;
      v75 = v238;
      v76 = sub_10005972C((uint64_t)v27, v238, type metadata accessor for OwnedBeaconGroup);
      v77 = Logger.logObject.getter(v76);
      v78 = static os_log_type_t.error.getter(v77);
      if (os_log_type_enabled(v77, v78))
      {
        v79 = (uint8_t *)swift_slowAlloc(12, -1);
        v80 = swift_slowAlloc(32, -1);
        v260 = v80;
        v240 = v27;
        *(_DWORD *)v79 = 136315138;
        v81 = sub_10036F350();
        v257 = sub_100016940(v81, v82, &v260);
        v27 = v240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, v258, v79 + 4, v79 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v75, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "Timed out waiting for pairing lock removal %s", v79, 0xCu);
        swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
        v83 = v80;
        v65 = v253;
        swift_slowDealloc(v83, -1, -1);
        swift_slowDealloc(v79, -1, -1);
      }
      else
      {
        sub_1000126B0(v75, type metadata accessor for OwnedBeaconGroup);
      }

      v84 = sub_10028FA08();
      v85 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v84, 0, 0);
      *v86 = 9;
      v87 = v254;
      swift_beginAccess(v254, v255, 1, 0);
      v88 = *v87;
      *v87 = v85;
      swift_errorRelease(v88);
      isa = (Class)v241;
    }
    v89 = v254;
    swift_beginAccess(v254, &v260, 1, 0);
    v90 = *v89;
    if (*v89)
    {
      swift_errorRetain(*v89);
      swift_errorRetain(v90);
      v91 = swift_errorRetain(v90);
      v92 = Logger.logObject.getter(v91);
      v93 = static os_log_type_t.error.getter(v92);
      if (os_log_type_enabled(v92, v93))
      {
        v94 = (uint8_t *)swift_slowAlloc(12, -1);
        v95 = swift_slowAlloc(32, -1);
        v257 = v95;
        *(_DWORD *)v94 = 136446210;
        v259 = v90;
        swift_errorRetain(v90);
        v96 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        v97 = String.init<A>(describing:)(&v259, v96);
        v259 = sub_100016940(v97, v98, &v257);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260, v94 + 4, v94 + 12);
        swift_bridgeObjectRelease();
        swift_errorRelease(v90);
        swift_errorRelease(v90);
        _os_log_impl((void *)&_mh_execute_header, v92, v93, "Unable to remove pairing lock. Error %{public}s", v94, 0xCu);
        swift_arrayDestroy(v95, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v95, -1, -1);
        swift_slowDealloc(v94, -1, -1);
      }
      else
      {
        swift_errorRelease(v90);
        swift_errorRelease(v90);
      }

      v117 = v248;
      swift_errorRetain(v90);
      v118 = (void *)_convertErrorToNSError(_:)(v90);
      v117[2](v117, v118);

      swift_errorRelease(v90);
      swift_errorRelease(v90);

LABEL_46:
      v206 = (uint64_t)v27;
LABEL_47:
      sub_1000126B0(v206, type metadata accessor for OwnedBeaconGroup);
      swift_release();
      return swift_release();
    }
    dispatch_group_enter(v67);
    v99 = swift_allocObject(&unk_101079CA8, 32, 7);
    *(_QWORD *)(v99 + 16) = v65;
    *(_QWORD *)(v99 + 24) = v67;
    swift_retain();
    v100 = v67;
    sub_1002794D8((uint64_t)v27, (uint64_t)sub_1004D6058, v99);
    v101 = swift_release();
    v102 = v242;
    static DispatchTime.now()(v101);
    v103 = v243;
    + infix(_:_:)(v102, 60.0);
    v104 = v244;
    v105 = v252;
    ((void (*)(char *, uint64_t))v252)(v102, v244);
    v251 = v100;
    v106 = OS_dispatch_group.wait(timeout:)(v103) & 1;
    ((void (*)(char *, uint64_t))v105)(v103, v104);
    v107 = static DispatchTimeoutResult.== infix(_:_:)(v106, 1);
    v240 = v27;
    v241 = (unsigned __int8 *)isa;
    if ((v107 & 1) != 0)
    {
      v108 = v236;
      v109 = sub_10005972C((uint64_t)v27, v236, type metadata accessor for OwnedBeaconGroup);
      v110 = Logger.logObject.getter(v109);
      v111 = static os_log_type_t.error.getter(v110);
      if (os_log_type_enabled(v110, v111))
      {
        v112 = (uint8_t *)swift_slowAlloc(12, -1);
        v113 = swift_slowAlloc(32, -1);
        v257 = v113;
        *(_DWORD *)v112 = 136315138;
        v114 = sub_10036F350();
        v259 = sub_100016940(v114, v115, &v257);
        v27 = v240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260, v112 + 4, v112 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v108, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v110, v111, "Timed out waiting for unpair command response %s", v112, 0xCu);
        swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
        v116 = v113;
        v65 = v253;
        swift_slowDealloc(v116, -1, -1);
        swift_slowDealloc(v112, -1, -1);
      }
      else
      {
        sub_1000126B0(v108, type metadata accessor for OwnedBeaconGroup);
      }

      v119 = sub_10028FA08();
      v120 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v119, 0, 0);
      *v121 = 9;
      v122 = *v254;
      *v254 = v120;
      swift_errorRelease(v122);
    }
    v123 = *v254;
    if (*v254)
    {
      swift_errorRetain(*v254);
      swift_errorRetain(v123);
      v124 = swift_errorRetain(v123);
      v125 = Logger.logObject.getter(v124);
      v126 = static os_log_type_t.error.getter(v125);
      if (os_log_type_enabled(v125, v126))
      {
        v127 = (uint8_t *)swift_slowAlloc(12, -1);
        v128 = swift_slowAlloc(32, -1);
        v257 = v128;
        *(_DWORD *)v127 = 136446210;
        v259 = v123;
        swift_errorRetain(v123);
        v129 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        v130 = String.init<A>(describing:)(&v259, v129);
        v259 = sub_100016940(v130, v131, &v257);
        v27 = v240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260, v127 + 4, v127 + 12);
        swift_bridgeObjectRelease();
        swift_errorRelease(v123);
        swift_errorRelease(v123);
        _os_log_impl((void *)&_mh_execute_header, v125, v126, "Unpair command failed. Error %{public}s", v127, 0xCu);
        swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
        v132 = v128;
        v65 = v253;
        swift_slowDealloc(v132, -1, -1);
        swift_slowDealloc(v127, -1, -1);

        swift_errorRelease(v123);
      }
      else
      {
        swift_errorRelease(v123);
        swift_errorRelease(v123);
        swift_errorRelease(v123);

      }
      v133 = *v254;
      *v254 = 0;
      swift_errorRelease(v133);
    }
    v134 = v251;
    dispatch_group_enter(v251);
    v135 = swift_allocObject(&unk_101079CD0, 32, 7);
    *(_QWORD *)(v135 + 16) = v65;
    *(_QWORD *)(v135 + 24) = v134;
    swift_retain();
    v136 = v134;
    sub_10047F12C(0, (uint64_t)v27, (uint64_t)sub_1004D65C8, v135);
    v137 = swift_release();
    v138 = v242;
    static DispatchTime.now()(v137);
    v139 = v243;
    + infix(_:_:)(v138, 60.0);
    v140 = v138;
    v141 = v244;
    v142 = v252;
    ((void (*)(char *, uint64_t))v252)(v140, v244);
    v251 = v136;
    v143 = OS_dispatch_group.wait(timeout:)(v139) & 1;
    ((void (*)(char *, uint64_t))v142)(v139, v141);
    if ((static DispatchTimeoutResult.== infix(_:_:)(v143, 1) & 1) != 0)
    {
      v144 = v237;
      v145 = sub_10005972C((uint64_t)v27, v237, type metadata accessor for OwnedBeaconGroup);
      v146 = Logger.logObject.getter(v145);
      v147 = static os_log_type_t.error.getter(v146);
      if (os_log_type_enabled(v146, v147))
      {
        v148 = (uint8_t *)swift_slowAlloc(12, -1);
        v149 = swift_slowAlloc(32, -1);
        v257 = v149;
        *(_DWORD *)v148 = 136315138;
        v150 = sub_10036F350();
        v259 = sub_100016940(v150, v151, &v257);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260, v148 + 4, v148 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v144, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v146, v147, "Timed out waiting for FMNS status update %s", v148, 0xCu);
        swift_arrayDestroy(v149, 1, (char *)&type metadata for Any + 8);
        v152 = v149;
        v65 = v253;
        swift_slowDealloc(v152, -1, -1);
        swift_slowDealloc(v148, -1, -1);
      }
      else
      {
        sub_1000126B0(v144, type metadata accessor for OwnedBeaconGroup);
      }

      v153 = sub_10028FA08();
      v154 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v153, 0, 0);
      *v155 = 9;
      v156 = *v254;
      *v254 = v154;
      swift_errorRelease(v156);
    }
    v157 = *v254;
    if (*v254)
    {
      swift_errorRetain(*v254);
      swift_errorRetain(v157);
      v158 = swift_errorRetain(v157);
      v159 = Logger.logObject.getter(v158);
      v160 = static os_log_type_t.error.getter(v159);
      if (os_log_type_enabled(v159, v160))
      {
        v161 = (uint8_t *)swift_slowAlloc(12, -1);
        v162 = swift_slowAlloc(32, -1);
        v257 = v162;
        *(_DWORD *)v161 = 136446210;
        v259 = v157;
        swift_errorRetain(v157);
        v163 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        v164 = String.init<A>(describing:)(&v259, v163);
        v259 = sub_100016940(v164, v165, &v257);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260, v161 + 4, v161 + 12);
        swift_bridgeObjectRelease();
        swift_errorRelease(v157);
        swift_errorRelease(v157);
        _os_log_impl((void *)&_mh_execute_header, v159, v160, "Unable to update FMNS status. Error %{public}s", v161, 0xCu);
        swift_arrayDestroy(v162, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v162, -1, -1);
        swift_slowDealloc(v161, -1, -1);
      }
      else
      {
        swift_errorRelease(v157);
        swift_errorRelease(v157);
      }

      v204 = v248;
      swift_errorRetain(v157);
      v205 = (void *)_convertErrorToNSError(_:)(v157);
      v204[2](v204, v205);

      swift_errorRelease(v157);
      swift_errorRelease(v157);

      goto LABEL_46;
    }
    v166 = v251;
    dispatch_group_enter(v251);
    v167 = swift_allocObject(&unk_101079CF8, 32, 7);
    *(_QWORD *)(v167 + 16) = v65;
    *(_QWORD *)(v167 + 24) = v166;
    v259 = (unint64_t)_swiftEmptyArrayStorage;
    swift_retain_n(v65, 2);
    v168 = v166;
    sub_10036AC6C();
    v170 = v169;
    v171 = v245;
    swift_retain();
    sub_10028AF88(v170, v171, &v259, 0);
    swift_bridgeObjectRelease();
    swift_release();
    v172 = v259;
    if (v259 >> 62)
    {
      if ((v259 & 0x8000000000000000) != 0)
        v208 = v259;
      else
        v208 = v259 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v259);
      v209 = _CocoaArrayWrapper.endIndex.getter(v208);
      swift_bridgeObjectRelease();
      if (v209)
        goto LABEL_43;
    }
    else if (*(_QWORD *)((v259 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_43:
      v173 = swift_allocObject(&unk_101079D20, 24, 7);
      v251 = v173;
      v173[2].isa = 0;
      v174 = (uint64_t *)&v173[2];
      v257 = v172;
      swift_bridgeObjectRetain(v172);
      v175 = sub_10001A9A8(&qword_1010F4940);
      v176 = sub_10001A9A8(&qword_1010F4948);
      v252 = v168;
      v177 = v176;
      v178 = sub_1000193A4(&qword_1010F4950, &qword_1010F4940, (const char *)&protocol conformance descriptor for Future<A, B>);
      v179 = sub_1000193A4(&qword_1010F4958, &qword_1010F4948, (const char *)&protocol conformance descriptor for [A]);
      v180 = v223;
      Publishers.MergeMany.init<A>(_:)(&v257, v175, v177, v178, v179);
      v181 = sub_1000193A4(&qword_1010F4960, &qword_1010F4920, (const char *)&protocol conformance descriptor for Publishers.MergeMany<A>);
      v182 = v227;
      v183 = v226;
      Publisher.collect()(v226, v181);
      (*(void (**)(char *, uint64_t))(v225 + 8))(v180, v183);
      v184 = sub_10001A9A8(&qword_1010F4968);
      v185 = sub_1000193A4(&qword_1010F4970, &qword_1010F4928, (const char *)&protocol conformance descriptor for Publishers.Collect<A>);
      v186 = v230;
      v187 = v229;
      Publisher.map<A>(_:)(sub_10027BAEC, 0, v229, v184, v185);
      (*(void (**)(char *, uint64_t))(v228 + 8))(v182, v187);
      v188 = sub_10001A9A8(&qword_1010F4978);
      v189 = sub_1000193A4(&qword_1010F4980, &qword_1010F4930, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
      v190 = sub_1000193A4(&qword_1010F4988, &qword_1010F4978, (const char *)&protocol conformance descriptor for Just<A>);
      v191 = v233;
      v192 = v232;
      Publisher.catch<A>(_:)(sub_10027BAFC, 0, v232, v188, v189, v190);
      (*(void (**)(char *, uint64_t))(v231 + 8))(v186, v192);
      v193 = v224;
      sub_10005972C((uint64_t)v240, v224, type metadata accessor for OwnedBeaconGroup);
      v194 = v241[80];
      v195 = (v194 + 16) & ~v194;
      v196 = (v222 + v195 + 7) & 0xFFFFFFFFFFFFFFF8;
      v197 = (v196 + 23) & 0xFFFFFFFFFFFFFFF8;
      v198 = swift_allocObject(&unk_101079D48, v197 + 8, v194 | 7);
      sub_1000126EC(v193, v198 + v195, type metadata accessor for OwnedBeaconGroup);
      v199 = (void (**)(uint64_t))(v198 + v196);
      v200 = v251;
      v168 = v252;
      *v199 = sub_1004D65C8;
      v199[1] = (void (*)(uint64_t))v167;
      *(_QWORD *)(v198 + v197) = v200;
      v201 = sub_1000193A4(&qword_1010F4990, &qword_1010F4938, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
      swift_retain();
      swift_retain();
      v202 = v235;
      v203 = Publisher<>.sink(receiveValue:)(sub_100293660, v198, v235, v201);
      swift_release();
      (*(void (**)(char *, uint64_t))(v234 + 8))(v191, v202);
      swift_beginAccess(v174, &v257, 1, 0);
      *v174 = v203;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      goto LABEL_54;
    }
    v210 = *(_QWORD *)(v65 + 16);
    *(_QWORD *)(v65 + 16) = 0;
    swift_errorRelease(v210);
    dispatch_group_leave(v168);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_54:

    v211 = *v254;
    if (*v254)
    {
      swift_errorRetain(*v254);
      swift_errorRetain(v211);
      v212 = swift_errorRetain(v211);
      v213 = Logger.logObject.getter(v212);
      v214 = static os_log_type_t.error.getter(v213);
      if (os_log_type_enabled(v213, v214))
      {
        v215 = (uint8_t *)swift_slowAlloc(12, -1);
        v216 = swift_slowAlloc(32, -1);
        v259 = v216;
        *(_DWORD *)v215 = 136446210;
        v256 = v211;
        swift_errorRetain(v211);
        v217 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        v218 = String.init<A>(describing:)(&v256, v217);
        v256 = sub_100016940(v218, v219, (uint64_t *)&v259);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, &v257, v215 + 4, v215 + 12);
        swift_bridgeObjectRelease();
        swift_errorRelease(v211);
        swift_errorRelease(v211);
        _os_log_impl((void *)&_mh_execute_header, v213, v214, "Unable to remove related records. Error %{public}s", v215, 0xCu);
        swift_arrayDestroy(v216, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v216, -1, -1);
        swift_slowDealloc(v215, -1, -1);
      }
      else
      {
        swift_errorRelease(v211);
        swift_errorRelease(v211);
      }

      v220 = (uint64_t)v240;
      swift_errorRetain(v211);
      v221 = (void *)_convertErrorToNSError(_:)(v211);
      v248[2](v248, v221);

      swift_errorRelease(v211);
      swift_errorRelease(v211);

      v206 = v220;
    }
    else
    {
      v248[2](v248, 0);

      v206 = (uint64_t)v240;
    }
    goto LABEL_47;
  }
  sub_100004048((uint64_t)v49, (uint64_t *)&unk_1010FF7F0);
  v51 = v247;
  v52 = v246(v247, v50, v28);
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.error.getter(v53);
  if (os_log_type_enabled(v53, v54))
  {
    v55 = (uint8_t *)swift_slowAlloc(12, -1);
    v56 = swift_slowAlloc(32, -1);
    v260 = v56;
    *(_DWORD *)v55 = 136446210;
    v57 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v58 = dispatch thunk of CustomStringConvertible.description.getter(v28, v57);
    v257 = sub_100016940(v58, v59, &v260);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, v258, v55 + 4, v55 + 12);
    swift_bridgeObjectRelease();
    v47(v51, v28);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "No beacon group for %{public}s", v55, 0xCu);
    swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v55, -1, -1);
  }
  else
  {
    v47(v51, v28);
  }

  v60 = v248;
  v61 = sub_10028FA08();
  v62 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v61, 0, 0);
  *v63 = 1;
  v64 = (void *)_convertErrorToNSError(_:)(v62);
  v60[2](v60, v64);

  swift_errorRelease(v62);
  return swift_release();
}

uint64_t sub_1004C27B4(void *a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  void *v37;
  unint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v11 = type metadata accessor for Logger(0);
  sub_10001A9E8(v11, (uint64_t)qword_1011B7DF8);
  v12 = a1;
  swift_bridgeObjectRetain_n(a3, 2);
  v13 = v12;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(22, -1);
    v40 = swift_slowAlloc(64, -1);
    v42 = v40;
    *(_DWORD *)v16 = 136315394;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v41 = sub_100016940(v17, v18, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v16 + 4, v16 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    swift_bridgeObjectRetain(a3);
    v41 = sub_100016940(a2, a3, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "simulateAccessoryPairing type: %s name: %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeAccessory);
  v21 = v20;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  if (v19 == v22 && v21 == v23)
  {
    swift_bridgeObjectRelease_n(v21, 2);
LABEL_15:
    if ((sub_100C9B1A0(a2, a3) & 1) == 0)
      goto LABEL_19;
    return (*(uint64_t (**)(uint64_t, _QWORD))(a6 + 16))(a6, 0);
  }
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v22, v23, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v25 & 1) != 0)
    goto LABEL_15;
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeHele);
  v28 = v27;
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  if (v26 == v30 && v28 == v29)
  {
    swift_bridgeObjectRelease_n(v28, 2);
  }
  else
  {
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v30, v29, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v32 & 1) == 0)
    {
      v38 = sub_10028FA08();
      v34 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v38, 0, 0);
      v35 = v34;
      *v39 = 6;
      goto LABEL_20;
    }
  }
  if ((sub_100C9B9F8(a2, a3, a4 & 1) & 1) != 0)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a6 + 16))(a6, 0);
LABEL_19:
  v33 = sub_10028FA08();
  v34 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v33, 0, 0);
  v35 = v34;
  *v36 = 0;
LABEL_20:
  v37 = (void *)_convertErrorToNSError(_:)(v34);
  (*(void (**)(uint64_t, void *))(a6 + 16))(a6, v37);

  return swift_errorRelease(v35);
}

uint64_t sub_1004C2B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v5 = sub_100C1B5F8(v18);
  v6 = swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    v7 = sub_10020D134(a1);
    v8 = v7;
  }
  else
  {
    v9 = static os_log_type_t.default.getter(v6);
    if (qword_1010EA2A0 != -1)
      swift_once(&qword_1010EA2A0, sub_100B5DD4C);
    v7 = os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_1011B7D80, "Server configured: allowing both local and online NWF notifications.", 68, 2, _swiftEmptyArrayStorage);
    v8 = 0;
  }
  v10 = static os_log_type_t.default.getter(v7);
  if (qword_1010EA2A0 != -1)
    swift_once(&qword_1010EA2A0, sub_100B5DD4C);
  v11 = qword_1011B7D80;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v13 = swift_allocObject(v12, 112, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E22B10;
  v14 = UUID.uuidString.getter(v13);
  v16 = v15;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  *(_QWORD *)(v13 + 64) = sub_10001AA00();
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 40) = v16;
  *(_QWORD *)(v13 + 96) = &type metadata for Bool;
  *(_QWORD *)(v13 + 104) = &protocol witness table for Bool;
  *(_BYTE *)(v13 + 72) = v8 & 1;
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Posted local NWF notification for beacon %@: %d.", 48, 2, v13);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, v8 & 1);
}

void sub_1004C2D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void (*v89)(char *, uint64_t, uint64_t);
  uint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  Class isa;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(char *, uint64_t);
  uint64_t (*v123)(char *, uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135[8];

  v107 = a2;
  v5 = type metadata accessor for Date(0);
  v120 = *(_QWORD *)(v5 - 8);
  v121 = v5;
  __chkstk_darwin(v5);
  v119 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for HashAlgorithm(0);
  v117 = *(_QWORD *)(v7 - 8);
  v118 = v7;
  __chkstk_darwin(v7);
  v116 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = type metadata accessor for OwnedDeviceKeyRecord(0);
  v114 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v129 = (uint64_t)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010F7608);
  __chkstk_darwin(v10);
  v124 = (uint64_t)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v12);
  v110 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_10001A9A8(&qword_1010FD140);
  v113 = *(_QWORD *)(v128 - 8);
  v14 = __chkstk_darwin(v128);
  v108 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v111 = (uint64_t *)((char *)&v99 - v16);
  v103 = type metadata accessor for URL(0);
  v115 = *(char **)(v103 - 8);
  v17 = __chkstk_darwin(v103);
  v105 = (char *)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v104 = (char *)&v99 - v20;
  __chkstk_darwin(v19);
  v127 = (char *)&v99 - v21;
  v22 = sub_10001A9A8(&qword_1010FD148);
  v23 = __chkstk_darwin(v22);
  v106 = (char *)&v99 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v109 = (uint64_t)&v99 - v25;
  v26 = type metadata accessor for UUID(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v99 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v28);
  v131 = (char *)&v99 - v32;
  v33 = __chkstk_darwin(v31);
  v130 = (char *)&v99 - v34;
  __chkstk_darwin(v33);
  v36 = (char *)&v99 - v35;
  if (qword_1010EA620 != -1)
    swift_once(&qword_1010EA620, sub_100DC7BE8);
  v99 = type metadata accessor for Logger(0);
  sub_10001A9E8(v99, (uint64_t)qword_1011B8520);
  v123 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 16);
  v37 = v123(v36, a1, v26);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter(v38);
  v40 = os_log_type_enabled(v38, v39);
  v126 = v26;
  v101 = a3;
  v112 = a1;
  v100 = v30;
  if (v40)
  {
    v41 = swift_slowAlloc(22, -1);
    v42 = swift_slowAlloc(32, -1);
    v133 = v42;
    *(_DWORD *)v41 = 141558275;
    v134 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, v135, v41 + 4, v41 + 12);
    *(_WORD *)(v41 + 12) = 2081;
    v43 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v44 = dispatch thunk of CustomStringConvertible.description.getter(v126, v43);
    v134 = sub_100016940(v44, v45, &v133);
    v26 = v126;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, v135, v41 + 14, v41 + 22);
    swift_bridgeObjectRelease();
    v122 = *(void (**)(char *, uint64_t))(v27 + 8);
    v122(v36, v26);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "OwnedDeviceKeyRecord for uuid %{private,mask.hash}s.", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    v122 = *(void (**)(char *, uint64_t))(v27 + 8);
    v122(v36, v26);
  }

  v107 = *(_QWORD *)(*(_QWORD *)(v107 + 280) + 160);
  v46 = (int *)v125;
  if (qword_1010EA490 != -1)
    swift_once(&qword_1010EA490, sub_100C8FD48);
  v47 = v103;
  v48 = sub_10001A9E8(v103, (uint64_t)qword_1011B8038);
  v49 = UUID.uuidString.getter(v48);
  v50 = v127;
  URL.appendingPathComponent(_:isDirectory:)(v49, v51, 1);
  swift_bridgeObjectRelease();
  v52 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v115 + 2);
  v53 = v104;
  v52(v104, v50, v47);
  v54 = v128;
  v55 = (uint64_t)v108;
  v102 = &v108[*(int *)(v128 + 40)];
  v56 = (uint64_t)v102;
  v57 = type metadata accessor for DirectorySequence(0);
  v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56);
  v58(v56, 1, 1, v57);
  v52((char *)v55, v53, v47);
  *(_QWORD *)(v55 + *(int *)(v54 + 36)) = v107;
  v59 = v105;
  v52(v105, v53, v47);
  swift_retain();
  v60 = (uint64_t)v110;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v59, 0, 0);
  v61 = (void (*)(char *, uint64_t))*((_QWORD *)v115 + 1);
  v61(v53, v47);
  v58(v60, 0, 1, v57);
  sub_100004084(v60, (uint64_t)v102, (uint64_t *)&unk_1010F77A0);
  v62 = (uint64_t)v111;
  sub_100005CF0(v55, (uint64_t)v111, &qword_1010FD140);
  v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v113 + 56);
  v64 = (uint64_t)v106;
  v65 = v128;
  v63(v106, 1, 1, v128);
  sub_100004048(v64, &qword_1010FD150);
  sub_100005CF0(v62, v64, &qword_1010FD140);
  v63((char *)v64, 0, 1, v65);
  v66 = v109;
  sub_100005CF0(v64, v109, &qword_1010FD148);
  v61(v127, v47);
  v67 = sub_10001A9A8(&qword_1010FD158);
  v68 = (_QWORD *)swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
  sub_100005CF0(v66, (uint64_t)v68 + *(_QWORD *)(class metadata base offset for _SequenceBox + *v68 + 16), &qword_1010FD148);
  v134 = (uint64_t)_swiftEmptyArrayStorage;
  v69 = *(_QWORD *)(class metadata base offset for _SequenceBox + *v68 + 16);
  v111 = v68;
  v70 = (uint64_t)v68 + v69;
  v71 = sub_10001A9A8(&qword_1010FD170);
  v72 = (char *)swift_allocObject(v71, *(unsigned int *)(v71 + 48), *(unsigned __int16 *)(v71 + 52));
  sub_10000F9B8(v70, (uint64_t)&v72[*(_QWORD *)(class metadata base offset for _IteratorBox + *(_QWORD *)v72 + 16)], &qword_1010FD148);
  v73 = &v72[*(_QWORD *)(class metadata base offset for _IteratorBox + *(_QWORD *)v72 + 16)];
  v110 = v72;
  swift_retain();
  v74 = v124;
  v115 = v73;
  sub_10084E81C(v124);
  v114 = *(_QWORD *)(v114 + 48);
  v75 = ((uint64_t (*)(uint64_t, uint64_t, int *))v114)(v74, 1, v46);
  v76 = v129;
  if (v75 != 1)
  {
    LODWORD(v113) = enum case for HashAlgorithm.sha256(_:);
    sub_1000126EC(v74, v129, type metadata accessor for OwnedDeviceKeyRecord);
    v89 = (void (*)(char *, uint64_t, uint64_t))v123;
    v123(v130, v76 + v46[5], v26);
    v89(v131, v76 + v46[6], v26);
    v90 = (uint64_t *)(v76 + v46[7]);
    v91 = *v90;
    v92 = v90[1];
    sub_10001BBBC(*v90, v92);
    sub_10001BBBC(v91, v92);
    sub_1007E7118(v91, v92);
    v94 = v93;
    sub_1007E3D28(v93, 0);
    v96 = v95;
    CCECCryptorRelease(v94);
    sub_10001BC14(v91, v92);
    __asm { BR              X9 }
  }
  v77 = v110;
  swift_release();
  swift_setDeallocating(v77);
  sub_100004048((uint64_t)&v77[*(_QWORD *)(class metadata base offset for _IteratorBox + *(_QWORD *)v77 + 16)], &qword_1010FD148);
  swift_deallocClassInstance(v77, *(unsigned int *)(*(_QWORD *)v77 + 48), *(unsigned __int16 *)(*(_QWORD *)v77 + 52));
  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  sub_10001A9E8(v99, (uint64_t)qword_1011B7648);
  v78 = v134;
  v79 = v100;
  v123(v100, v112, v26);
  swift_bridgeObjectRetain_n(v78, 2);
  v81 = Logger.logObject.getter(v80);
  v82 = static os_log_type_t.default.getter(v81);
  if (os_log_type_enabled(v81, v82))
  {
    v83 = swift_slowAlloc(32, -1);
    v84 = swift_slowAlloc(32, -1);
    v133 = v84;
    *(_DWORD *)v83 = 134218499;
    if ((unint64_t)v78 >> 62)
    {
      if (v78 < 0)
        v98 = v78;
      else
        v98 = v78 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v78);
      v85 = _CocoaArrayWrapper.endIndex.getter(v98);
      swift_bridgeObjectRelease();
    }
    else
    {
      v85 = *(_QWORD *)((v78 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v132 = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v83 + 4, v83 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v83 + 12) = 2160;
    v132 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v83 + 14, v83 + 22);
    *(_WORD *)(v83 + 22) = 2081;
    v86 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v87 = dispatch thunk of CustomStringConvertible.description.getter(v26, v86);
    v132 = sub_100016940(v87, v88, &v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v83 + 24, v83 + 32);
    swift_bridgeObjectRelease();
    v122(v79, v26);
    _os_log_impl((void *)&_mh_execute_header, v81, v82, "Got %ld ownedDeviceKeyRecord for %{private,mask.hash}s.", (uint8_t *)v83, 0x20u);
    swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1, -1);
    swift_slowDealloc(v83, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v78, 2);
    v122(v79, v26);
  }

  swift_beginAccess(&v134, &v133, 0, 0);
  sub_10000F4A0(0, &qword_1010FD168, SPOwnedDeviceKeyRecord_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(v101 + 16))(v101, isa);
  swift_bridgeObjectRelease();
  swift_release();

}

uint64_t sub_1004C4194(uint64_t a1, void (*a2)(char *, uint64_t), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  Class isa;
  Class v60;
  uint64_t v61;
  Class v62;
  uint64_t v63;
  unint64_t v64;
  Class v65;
  char *v66;
  Class v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  void (*v103)(char *, uint64_t);
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t (*v108)(char *, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  _BYTE v114[16];

  v103 = a2;
  v96 = type metadata accessor for Date(0);
  v95 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v101 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for HashAlgorithm(0);
  v93 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v92 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for OwnedDeviceKeyRecord(0);
  v8 = __chkstk_darwin(v7);
  v97 = (uint64_t)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v88 - v10;
  v110 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v110 - 8);
  v13 = __chkstk_darwin(v110);
  v15 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v100 = (char *)&v88 - v17;
  v18 = __chkstk_darwin(v16);
  v107 = (char *)&v88 - v19;
  v20 = __chkstk_darwin(v18);
  v106 = (char *)&v88 - v21;
  __chkstk_darwin(v20);
  v23 = (char *)&v88 - v22;
  if (qword_1010EA620 != -1)
    swift_once(&qword_1010EA620, sub_100DC7BE8);
  v24 = type metadata accessor for Logger(0);
  v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B8520);
  v108 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v109 = a1;
  v26 = v108(v23, a1, v110);
  v104 = v25;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  v29 = os_log_type_enabled(v27, v28);
  v105 = a3;
  v99 = v15;
  if (v29)
  {
    v30 = swift_slowAlloc(22, -1);
    v31 = swift_slowAlloc(32, -1);
    v98 = v7;
    v32 = v31;
    v111 = v31;
    *(_DWORD *)v30 = 141558275;
    v113 = 1752392040;
    v33 = v110;
    v102 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v30 + 4, v30 + 12);
    *(_WORD *)(v30 + 12) = 2081;
    v34 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v35 = dispatch thunk of CustomStringConvertible.description.getter(v33, v34);
    v113 = sub_100016940(v35, v36, &v111);
    v11 = v102;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v30 + 14, v30 + 22);
    swift_bridgeObjectRelease();
    v37 = *(void (**)(char *, uint64_t))(v12 + 8);
    v37(v23, v33);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Creating ownedDeviceKeyRecord for uuid %{private,mask.hash}s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    v38 = v32;
    v7 = v98;
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    v37 = *(void (**)(char *, uint64_t))(v12 + 8);
    v37(v23, v110);
  }

  sub_1007F609C(v109, (uint64_t)v11);
  v103 = v37;
  v39 = v110;
  v40 = (void (*)(char *, char *, uint64_t))v108;
  v108(v106, (uint64_t)&v11[v7[5]], v110);
  v40(v107, &v11[v7[6]], v39);
  v41 = (uint64_t *)&v11[v7[7]];
  v43 = *v41;
  v42 = v41[1];
  sub_10001BBBC(*v41, v42);
  sub_10001BBBC(v43, v42);
  v44 = sub_1007E6F8C(v43, v42);
  v46 = v45;
  v98 = v7;
  sub_10001BC14(v43, v42);
  sub_1002F7394(v44, v46);
  sub_10001BC14(v43, v42);
  v47 = v111;
  v48 = v112;
  sub_10001BBBC(v43, v42);
  sub_10001BBBC(v43, v42);
  v49 = sub_1007E6F8C(v43, v42);
  v51 = v50;
  sub_10001BC14(v43, v42);
  sub_1002F7394(v49, v51);
  v91 = v47;
  sub_10001BC14(v43, v42);
  v52 = v111;
  v53 = v112;
  v54 = v93;
  v55 = v92;
  v56 = v94;
  (*(void (**)(char *, _QWORD, uint64_t))(v93 + 104))(v92, enum case for HashAlgorithm.sha256(_:), v94);
  v90 = Data.hash(algorithm:)(v55, v52, v53);
  v89 = v57;
  (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v56);
  sub_10001BC14(v52, v53);
  v58 = objc_autoreleasePoolPush();
  sub_10084EE10((uint64_t)v11);
  v102 = v11;
  objc_autoreleasePoolPop(v58);
  v100 = (char *)objc_allocWithZone((Class)SPOwnedDeviceKeyRecord);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v60 = UUID._bridgeToObjectiveC()().super.isa;
  v61 = v91;
  v62 = Data._bridgeToObjectiveC()().super.isa;
  v63 = v90;
  v64 = v89;
  v65 = Data._bridgeToObjectiveC()().super.isa;
  v66 = v101;
  v67 = Date._bridgeToObjectiveC()().super.isa;
  v100 = (char *)objc_msgSend(v100, "initWithIdentifier:deviceIdentifier:advertisement:hashedAdvertisement:creationDate:", isa, v60, v62, v65, v67);

  sub_10001BC14(v63, v64);
  sub_10001BC14(v61, v48);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v66, v96);
  v68 = v110;
  v69 = v103;
  v103(v107, v110);
  v69(v106, v68);
  v70 = (uint64_t)v102;
  v71 = v97;
  sub_10005972C((uint64_t)v102, v97, type metadata accessor for OwnedDeviceKeyRecord);
  v72 = v99;
  v73 = v108(v99, v109, v68);
  v74 = Logger.logObject.getter(v73);
  v75 = static os_log_type_t.default.getter(v74);
  v76 = v75;
  if (os_log_type_enabled(v74, v75))
  {
    v77 = swift_slowAlloc(42, -1);
    v109 = swift_slowAlloc(64, -1);
    v111 = v109;
    *(_DWORD *)v77 = 141558787;
    v113 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v77 + 4, v77 + 12);
    *(_WORD *)(v77 + 12) = 2081;
    LODWORD(v108) = v76;
    v78 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v79 = v110;
    v80 = dispatch thunk of CustomStringConvertible.description.getter(v110, v78);
    v113 = sub_100016940(v80, v81, &v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v77 + 14, v77 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v71, type metadata accessor for OwnedDeviceKeyRecord);
    *(_WORD *)(v77 + 22) = 2160;
    v113 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v77 + 24, v77 + 32);
    *(_WORD *)(v77 + 32) = 2081;
    v82 = v99;
    v83 = dispatch thunk of CustomStringConvertible.description.getter(v79, v78);
    v113 = sub_100016940(v83, v84, &v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v77 + 34, v77 + 42);
    swift_bridgeObjectRelease();
    v69(v82, v79);
    _os_log_impl((void *)&_mh_execute_header, v74, (os_log_type_t)v108, "New OwnedDeviceKeyRecord with uuid: %{private,mask.hash}s created for %{private,mask.hash}s.", (uint8_t *)v77, 0x2Au);
    v85 = v109;
    swift_arrayDestroy(v109, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v85, -1, -1);
    swift_slowDealloc(v77, -1, -1);
  }
  else
  {
    sub_1000126B0(v71, type metadata accessor for OwnedDeviceKeyRecord);
    v69(v72, v110);
  }

  v86 = v100;
  (*(void (**)(uint64_t, char *, _QWORD))(v105 + 16))(v105, v100, 0);

  return sub_1000126B0(v70, type metadata accessor for OwnedDeviceKeyRecord);
}

uint64_t sub_1004C4DA0(uint64_t a1, size_t a2, const void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  char *v52;
  void (*v53)(uint64_t, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t);
  size_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  size_t v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t, uint64_t);
  uint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _BYTE *v119;
  NSArray v120;
  void *v121;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  Swift::String v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  const void *v139;
  void (*v140)(char *, uint64_t);
  void (*v141)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v142;
  void (*v143)(char *, uint64_t, uint64_t, uint64_t);
  void (*v144)(uint64_t, char *, uint64_t);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  size_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  size_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(char *, uint64_t, uint64_t);
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  char v178[8];

  v139 = a3;
  v152 = a2;
  v4 = type metadata accessor for Date(0);
  v161 = *(_QWORD *)(v4 - 8);
  v162 = v4;
  __chkstk_darwin(v4);
  v151 = (char *)&v136 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for HashAlgorithm(0);
  v159 = *(_QWORD *)(v6 - 8);
  v160 = v6;
  __chkstk_darwin(v6);
  v158 = (char *)&v136 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = type metadata accessor for OwnedDeviceKeyRecord(0);
  v137 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v9 = (char *)&v136 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v10);
  v166 = (char *)&v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010FD140);
  v169 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v171 = (uint64_t)&v136 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v156 = (size_t)&v136 - v15;
  v16 = type metadata accessor for URL(0);
  v147 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v153 = (char *)&v136 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v148 = (char *)&v136 - v20;
  __chkstk_darwin(v19);
  v168 = (char *)&v136 - v21;
  v22 = sub_10001A9A8(&qword_1010FD148);
  v23 = __chkstk_darwin(v22);
  v149 = (char *)&v136 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v154 = (uint64_t)&v136 - v25;
  v26 = type metadata accessor for UUID(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = __chkstk_darwin(v26);
  v173 = (char *)&v136 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v172 = (char *)&v136 - v31;
  __chkstk_darwin(v30);
  v33 = (char *)&v136 - v32;
  if (qword_1010EA620 != -1)
    swift_once(&qword_1010EA620, sub_100DC7BE8);
  v34 = type metadata accessor for Logger(0);
  v35 = sub_10001A9E8(v34, (uint64_t)qword_1011B8520);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  v155 = a1;
  v163 = v36;
  v37 = ((uint64_t (*)(char *, uint64_t, uint64_t))v36)(v33, a1, v26);
  v150 = v35;
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter(v38);
  v40 = os_log_type_enabled(v38, v39);
  v170 = v9;
  v165 = v26;
  v157 = v27;
  v167 = v12;
  if (v40)
  {
    v41 = swift_slowAlloc(22, -1);
    v42 = swift_slowAlloc(32, -1);
    v175 = v42;
    *(_DWORD *)v41 = 141558275;
    v177 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v41 + 4, v41 + 12);
    *(_WORD *)(v41 + 12) = 2081;
    v43 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v44 = dispatch thunk of CustomStringConvertible.description.getter(v165, v43);
    v177 = sub_100016940(v44, v45, &v175);
    v12 = v167;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v41 + 14, v41 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v33, v165);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Purging ownedDeviceKeyRecord for uuid %{private,mask.hash}s.", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v33, v26);
  }

  v146 = *(_QWORD *)(v152 + 280);
  v46 = *(_QWORD *)(v146 + 160);
  if (qword_1010EA490 != -1)
    swift_once(&qword_1010EA490, sub_100C8FD48);
  v145 = sub_10001A9E8(v16, (uint64_t)qword_1011B8038);
  v47 = UUID.uuidString.getter(v145);
  v48 = v168;
  URL.appendingPathComponent(_:isDirectory:)(v47, v49, 1);
  swift_bridgeObjectRelease();
  v50 = v147;
  v51 = *(void (**)(char *, char *, uint64_t))(v147 + 16);
  v52 = v148;
  v51(v148, v48, v16);
  v53 = (void (*)(uint64_t, char *, uint64_t))v51;
  v144 = (void (*)(uint64_t, char *, uint64_t))v51;
  v54 = v12;
  v55 = v171;
  v56 = v171 + *(int *)(v12 + 40);
  v57 = type metadata accessor for DirectorySequence(0);
  v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56);
  v142 = v57;
  v58(v56, 1, 1, v57);
  v141 = v58;
  v53(v55, v52, v16);
  *(_QWORD *)(v55 + *(int *)(v54 + 36)) = v46;
  v59 = v55;
  v60 = v153;
  v53((uint64_t)v153, v52, v16);
  swift_retain();
  v61 = (uint64_t)v166;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v60, 0, 0);
  v62 = *(void (**)(char *, uint64_t))(v50 + 8);
  v62(v52, v16);
  v63 = v62;
  v140 = v62;
  v58(v61, 0, 1, v57);
  sub_100004084(v61, v56, (uint64_t *)&unk_1010F77A0);
  v64 = v156;
  sub_100005CF0(v59, v156, &qword_1010FD140);
  v65 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v169 + 56);
  v66 = (uint64_t)v149;
  v67 = v167;
  v65(v149, 1, 1, v167);
  v143 = v65;
  sub_100004048(v66, &qword_1010FD150);
  sub_100005CF0(v64, v66, &qword_1010FD140);
  v65((char *)v66, 0, 1, v67);
  v68 = v154;
  sub_100005CF0(v66, v154, &qword_1010FD148);
  v69 = v168;
  v63(v168, v16);
  v147 = sub_10001A9A8(&qword_1010FD158);
  v70 = swift_allocObject(v147, *(unsigned int *)(v147 + 48), *(unsigned __int16 *)(v147 + 52));
  sub_100005CF0(v68, v70 + *(_QWORD *)(class metadata base offset for _SequenceBox + *(_QWORD *)v70 + 16), &qword_1010FD148);
  v152 = sub_100890158(v70 + *(_QWORD *)(class metadata base offset for _SequenceBox + *(_QWORD *)v70 + 16));
  swift_setDeallocating(v70);
  sub_100004048(v70 + *(_QWORD *)(class metadata base offset for _SequenceBox + *(_QWORD *)v70 + 16), &qword_1010FD148);
  swift_deallocClassInstance(v70, *(unsigned int *)(*(_QWORD *)v70 + 48), *(unsigned __int16 *)(*(_QWORD *)v70 + 52));
  v71 = v146;
  v72 = *(_QWORD *)(v146 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v73 = type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v71, v72, &type metadata for () + 1, v73);
  v169 = 0;
  v138 = sub_100DD44C8(v155);
  v74 = swift_release();
  v75 = *(_QWORD *)(v71 + 160);
  v76 = UUID.uuidString.getter(v74);
  v77 = v67;
  URL.appendingPathComponent(_:isDirectory:)(v76, v78, 1);
  swift_bridgeObjectRelease();
  v79 = v144;
  v144((uint64_t)v52, v69, v16);
  v80 = *(int *)(v67 + 40);
  v81 = v171;
  v82 = v171 + v80;
  v83 = v142;
  v84 = v141;
  v141(v171 + v80, 1, 1, v142);
  v79(v81, v52, v16);
  *(_QWORD *)(v81 + *(int *)(v77 + 36)) = v75;
  v85 = v153;
  v86 = v16;
  v79((uint64_t)v153, v52, v16);
  swift_retain();
  v87 = (uint64_t)v166;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v85, 0, 0);
  v88 = v86;
  v89 = v140;
  v140(v52, v86);
  v84(v87, 0, 1, v83);
  v90 = v152;
  sub_100004084(v87, v82, (uint64_t *)&unk_1010F77A0);
  v91 = v156;
  sub_100005CF0(v171, v156, &qword_1010FD140);
  v92 = v167;
  v93 = v143;
  v143((char *)v66, 1, 1, v167);
  sub_100004048(v66, &qword_1010FD150);
  sub_100005CF0(v91, v66, &qword_1010FD140);
  v93((char *)v66, 0, 1, v92);
  v94 = v154;
  sub_100005CF0(v66, v154, &qword_1010FD148);
  v89(v168, v88);
  v95 = swift_allocObject(v147, *(unsigned int *)(v147 + 48), *(unsigned __int16 *)(v147 + 52));
  sub_100005CF0(v94, v95 + *(_QWORD *)(class metadata base offset for _SequenceBox + *(_QWORD *)v95 + 16), &qword_1010FD148);
  v96 = sub_100890158(v95 + *(_QWORD *)(class metadata base offset for _SequenceBox + *(_QWORD *)v95 + 16));
  swift_setDeallocating(v95);
  sub_100004048(v95 + *(_QWORD *)(class metadata base offset for _SequenceBox + *(_QWORD *)v95 + 16), &qword_1010FD148);
  swift_deallocClassInstance(v95, *(unsigned int *)(*(_QWORD *)v95 + 48), *(unsigned __int16 *)(*(_QWORD *)v95 + 52));
  swift_retain();
  v97 = swift_retain();
  v98 = Logger.logObject.getter(v97);
  v99 = static os_log_type_t.default.getter(v98);
  if (os_log_type_enabled(v98, v99))
  {
    v100 = swift_slowAlloc(22, -1);
    *(_DWORD *)v100 = 134218240;
    v175 = *(_QWORD *)(v90 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, &v176, v100 + 4, v100 + 12);
    swift_release();
    *(_WORD *)(v100 + 12) = 2048;
    v175 = *(_QWORD *)(v96 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, &v176, v100 + 14, v100 + 22);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v98, v99, "OldRecords count = %ld recordsAfterPurge count = %ld.", (uint8_t *)v100, 0x16u);
    swift_slowDealloc(v100, -1, -1);

  }
  else
  {

    swift_release();
    swift_release();
  }
  v101 = (uint64_t)v170;
  v177 = (uint64_t)_swiftEmptyArrayStorage;
  v102 = *(_QWORD *)(v90 + 16);
  v103 = v165;
  if (v102)
  {
    v104 = v90 + ((*(unsigned __int8 *)(v137 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80));
    LODWORD(v155) = enum case for HashAlgorithm.sha256(_:);
    v105 = *(_QWORD *)(v137 + 72);
    v156 = v96;
    v154 = v105;
    do
    {
      sub_10005972C(v104, v101, type metadata accessor for OwnedDeviceKeyRecord);
      if ((sub_1001C2974(v101, v96) & 1) == 0)
      {
        v107 = v163;
        v106 = v164;
        v163(v172, v101 + *(int *)(v164 + 20), v103);
        v107(v173, v101 + *(int *)(v106 + 24), v103);
        v108 = (uint64_t *)(v101 + *(int *)(v106 + 28));
        v110 = *v108;
        v109 = v108[1];
        sub_10001BBBC(*v108, v109);
        sub_10001BBBC(v110, v109);
        v111 = v169;
        sub_1007E7118(v110, v109);
        v113 = v111;
        if (!v111)
        {
          v114 = v112;
          v171 = sub_1007E3D28(v112, 0);
          v116 = v115;
          CCECCryptorRelease(v114);
          sub_10001BC14(v110, v109);
          __asm { BR              X9 }
        }
        v123 = static os_log_type_t.error.getter(v112);
        if (qword_1010E9F78 != -1)
          swift_once(&qword_1010E9F78, sub_1007E28B4);
        v124 = qword_1011B77E0;
        v125 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v126 = swift_allocObject(v125, 72, 7);
        *(_OWORD *)(v126 + 16) = xmmword_100E22B00;
        v175 = v113;
        swift_errorRetain(v113);
        v127 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        v128 = String.init<A>(describing:)(&v175, v127);
        v130 = v129;
        *(_QWORD *)(v126 + 56) = &type metadata for String;
        *(_QWORD *)(v126 + 64) = sub_10001AA00();
        *(_QWORD *)(v126 + 32) = v128;
        *(_QWORD *)(v126 + 40) = v130;
        os_log(_:dso:log:_:_:)(v123, &_mh_execute_header, v124, "Error deriving advertisementKey: %@", 35, 2, v126);
        swift_bridgeObjectRelease();
        v131 = sub_1000D95A8();
        v132 = swift_allocError(&type metadata for CryptoTokenError, v131, 0, 0);
        *v133 = 0;
        swift_willThrow(v132);
        swift_errorRelease(v113);
        v171 = v110;
        sub_10001BC14(v110, v109);
        v175 = 0;
        v176 = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        v134._object = (void *)0x8000000100EC7AC0;
        v134._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v134);
        v174 = v132;
        v135 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        _print_unlocked<A, B>(_:_:)(&v174, &v175, v135, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        _Block_release(v139);
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v175, v176, "searchpartyd/KeyRepresentable.swift", 35, 2, 256, 0);
        __break(1u);
        JUMPOUT(0x1004C625CLL);
      }
      sub_1000126B0(v101, type metadata accessor for OwnedDeviceKeyRecord);
      v104 += v105;
      --v102;
    }
    while (v102);
  }
  swift_release();
  swift_release();
  if ((v138 & 1) != 0)
  {
    v117 = 0;
  }
  else
  {
    v118 = sub_1004D4940();
    v117 = swift_allocError(&type metadata for BeaconKeyManager.Error, v118, 0, 0);
    *v119 = 9;
  }
  sub_10000F4A0(0, &qword_1010FD168, SPOwnedDeviceKeyRecord_ptr);
  v120.super.isa = Array._bridgeToObjectiveC()().super.isa;
  if (v117)
    v121 = (void *)_convertErrorToNSError(_:)(v117);
  else
    v121 = 0;
  (*((void (**)(const void *, Class, void *))v139 + 2))(v139, v120.super.isa, v121);

  swift_errorRelease(v117);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004C62B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  os_log_t v47;
  uint64_t v48;
  uint64_t found;
  int v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  unsigned int (*v55)(char *, uint64_t, uint64_t);
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t);
  char *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  os_log_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  uint64_t v107;
  void *v108;
  void (*v109)(uint64_t, uint64_t);
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  os_log_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t (*v128)(char *, uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134[3];
  uint64_t v135;
  uint64_t v136;

  v122 = a3;
  v125 = a2;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v4);
  v116 = (uint64_t)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for OwnedBeaconGroup(0);
  v115 = *(_QWORD *)(v117 - 8);
  v6 = __chkstk_darwin(v117);
  v113 = (uint64_t)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v114 = (uint64_t)&v110 - v8;
  v9 = sub_10001A9A8(&qword_1010F33A8);
  __chkstk_darwin(v9);
  v124 = (os_log_t)((char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_10001A9A8(&qword_1010ED860);
  v12 = __chkstk_darwin(v11);
  v119 = (char *)&v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v126 = (char *)&v110 - v15;
  __chkstk_darwin(v14);
  v127 = (char *)&v110 - v16;
  v17 = type metadata accessor for UUID(0);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v111 = (char *)&v110 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v112 = (char *)&v110 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v110 - v24;
  v26 = __chkstk_darwin(v23);
  v28 = (char *)&v110 - v27;
  v29 = __chkstk_darwin(v26);
  v31 = (char *)&v110 - v30;
  __chkstk_darwin(v29);
  v33 = (char *)&v110 - v32;
  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  v123 = v28;
  v34 = type metadata accessor for Logger(0);
  v35 = sub_10001A9E8(v34, (uint64_t)qword_1011B7648);
  v128 = (uint64_t (*)(char *, uint64_t, uint64_t))*((_QWORD *)v18 + 2);
  v36 = v128(v33, a1, v17);
  v120 = v35;
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  v39 = os_log_type_enabled(v37, v38);
  v118 = v25;
  v121 = a1;
  if (v39)
  {
    v40 = swift_slowAlloc(22, -1);
    v110 = swift_slowAlloc(32, -1);
    v134[0] = v110;
    *(_DWORD *)v40 = 141558275;
    *(_QWORD *)&v131 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, (char *)&v131 + 8, v40 + 4, v40 + 12);
    *(_WORD *)(v40 + 12) = 2081;
    v41 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v42 = dispatch thunk of CustomStringConvertible.description.getter(v17, v41);
    *(_QWORD *)&v131 = sub_100016940(v42, v43, v134);
    a1 = v121;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, (char *)&v131 + 8, v40 + 14, v40 + 22);
    swift_bridgeObjectRelease();
    v44 = (void (*)(char *, uint64_t))*((_QWORD *)v18 + 1);
    v44(v33, v17);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "notificationBeacon for subscriptionId %{private,mask.hash}s", (uint8_t *)v40, 0x16u);
    v45 = v110;
    swift_arrayDestroy(v110, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v40, -1, -1);
  }
  else
  {
    v44 = (void (*)(char *, uint64_t))*((_QWORD *)v18 + 1);
    v44(v33, v17);
  }

  v46 = v18;
  v47 = v124;
  v48 = *(_QWORD *)(v125 + 280);
  sub_10088AE9C(a1, (uint64_t)v124);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v50 = (*(uint64_t (**)(os_log_t, uint64_t, uint64_t))(*(_QWORD *)(found - 8) + 48))(v47, 1, found);
  v51 = (uint64_t)v126;
  if (v50 == 1)
  {
    sub_100004048((uint64_t)v47, &qword_1010F33A8);
    v52 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)v46 + 7);
    v52(v51, 1, 1, v17);
    v53 = (void (*)(char *, uint64_t, uint64_t))v128;
  }
  else
  {
    v53 = (void (*)(char *, uint64_t, uint64_t))v128;
    v128(v126, (uint64_t)v47 + *(int *)(found + 24), v17);
    sub_1000126B0((uint64_t)v47, type metadata accessor for NotifyWhenFoundRecord);
    v52 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)v46 + 7);
    v52(v51, 0, 1, v17);
  }
  v54 = (uint64_t)v123;
  v53(v123, a1, v17);
  v55 = (unsigned int (*)(char *, uint64_t, uint64_t))*((_QWORD *)v46 + 6);
  if (v55((char *)v51, 1, v17) == 1)
  {
    v56 = v127;
    sub_1007F6EC4(v54, v127);
    v44((char *)v54, v17);
    sub_100004048(v51, &qword_1010ED860);
    if (v55(v56, 1, v17) != 1)
    {
      v57 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v46 + 4);
      v57(v31, v56, v17);
      goto LABEL_17;
    }
  }
  else
  {
    v44((char *)v54, v17);
    v58 = v51;
    v57 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v46 + 4);
    v59 = v127;
    v57(v127, (char *)v58, v17);
    v52((uint64_t)v59, 0, 1, v17);
    v56 = v59;
    if (v55(v59, 1, v17) != 1)
    {
      v57(v31, v59, v17);
LABEL_17:
      sub_10080B648((uint64_t)v31, (uint64_t)&v131);
      if (!v132)
      {
        sub_100004048((uint64_t)&v131, (uint64_t *)&unk_1010EE310);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(v122 + 16))(v122, 0, 0);
        return ((uint64_t (*)(char *, uint64_t))v44)(v31, v17);
      }
      v127 = v31;
      sub_10000F9FC(&v131, (uint64_t)v134);
      v65 = v135;
      v66 = v136;
      sub_10001AA44(v134, v135);
      v67 = v65;
      v68 = v119;
      (*(void (**)(uint64_t, uint64_t))(v66 + 192))(v67, v66);
      if (v55(v68, 1, v17) == 1)
      {
        v69 = &qword_1010ED860;
        v70 = (uint64_t)v68;
      }
      else
      {
        v71 = (uint64_t)v118;
        v57(v118, v68, v17);
        v72 = v116;
        sub_10081EDA8(v71, v116);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48))(v72, 1, v117) != 1)
        {
          v78 = v114;
          sub_1000126EC(v72, v114, type metadata accessor for OwnedBeaconGroup);
          v79 = v112;
          v128(v112, v121, v17);
          sub_100030784((uint64_t)v134, (uint64_t)&v131);
          v80 = v113;
          v81 = sub_10005972C(v78, v113, type metadata accessor for OwnedBeaconGroup);
          v82 = Logger.logObject.getter(v81);
          v83 = static os_log_type_t.default.getter(v82);
          v84 = v83;
          if (os_log_type_enabled(v82, v83))
          {
            v85 = swift_slowAlloc(62, -1);
            v86 = swift_slowAlloc(96, -1);
            v126 = (char *)v86;
            *(_DWORD *)v85 = 141559299;
            v129 = 1752392040;
            v130 = v86;
            v128 = v46;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v85 + 4, v85 + 12);
            *(_WORD *)(v85 + 12) = 2081;
            v87 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            LODWORD(v125) = v84;
            v88 = dispatch thunk of CustomStringConvertible.description.getter(v17, v87);
            v129 = sub_100016940(v88, v89, &v130);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v85 + 14, v85 + 22);
            swift_bridgeObjectRelease();
            v44(v79, v17);
            *(_WORD *)(v85 + 22) = 2160;
            v129 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v85 + 24, v85 + 32);
            *(_WORD *)(v85 + 32) = 2081;
            v91 = v132;
            v90 = v133;
            sub_10001AA44(&v131, v132);
            v92 = *(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v90 + 8) + 8) + 32);
            v124 = v82;
            v93 = v111;
            v92(v91);
            v94 = dispatch thunk of CustomStringConvertible.description.getter(v17, v87);
            v96 = v95;
            v44(v93, v17);
            v129 = sub_100016940(v94, v96, &v130);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v85 + 34, v85 + 42);
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v131);
            *(_WORD *)(v85 + 42) = 2160;
            v129 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v85 + 44, v85 + 52);
            *(_WORD *)(v85 + 52) = 2081;
            v97 = v113;
            v98 = v87;
            v71 = (uint64_t)v118;
            v99 = dispatch thunk of CustomStringConvertible.description.getter(v17, v98);
            v129 = sub_100016940(v99, v100, &v130);
            v46 = v128;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v85 + 54, v85 + 62);
            swift_bridgeObjectRelease();
            sub_1000126B0(v97, type metadata accessor for OwnedBeaconGroup);
            v101 = v124;
            _os_log_impl((void *)&_mh_execute_header, v124, (os_log_type_t)v125, "Subscription %{private,mask.hash}s. Beacon %{private,mask.hash}s.\nGroup %{private,mask.hash}s", (uint8_t *)v85, 0x3Eu);
            v102 = v126;
            swift_arrayDestroy(v126, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v102, -1, -1);
            swift_slowDealloc(v85, -1, -1);

          }
          else
          {
            v44(v79, v17);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v131);
            sub_1000126B0(v80, type metadata accessor for OwnedBeaconGroup);

          }
          v103 = v135;
          v104 = v136;
          v105 = sub_10001AA44(v134, v135);
          v106 = sub_100854C8C((uint64_t)v105, v48, v103, v104);
          v107 = v114;
          v108 = sub_10081D058(v114);
          (*(void (**)(uint64_t, uint64_t *, void *))(v122 + 16))(v122, v106, v108);

          sub_1000126B0(v107, type metadata accessor for OwnedBeaconGroup);
          v109 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v46 + 1);
          v109(v71, v17);
          v109((uint64_t)v127, v17);
          return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v134);
        }
        v44((char *)v71, v17);
        v69 = (uint64_t *)&unk_1010FF7F0;
        v70 = v72;
      }
      sub_100004048(v70, v69);
      v73 = v127;
      v74 = v135;
      v75 = v136;
      v76 = sub_10001AA44(v134, v135);
      v77 = sub_100854C8C((uint64_t)v76, v48, v74, v75);
      (*(void (**)(uint64_t, uint64_t *, _QWORD))(v122 + 16))(v122, v77, 0);

      v44(v73, v17);
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v134);
    }
  }
  v60 = sub_100004048((uint64_t)v56, &qword_1010ED860);
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.error.getter(v61);
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v63 = 0;
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "No record found for notify subscriptionId", v63, 2u);
    swift_slowDealloc(v63, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v122 + 16))(v122, 0, 0);
}

uint64_t sub_1004C6EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  unsigned __int8 v6;

  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_theftDeterrenceStateManager);
  if ((sub_100B179F0() & 1) != 0)
    v4 = sub_10000E13C() ^ 1;
  else
    v4 = 0;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1004D47C8, v3, *(_QWORD *)(v3 + 16), &type metadata for () + 1, &type metadata for Bool);
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, v4 & v6 & 1);
}

void sub_1004C6F4C(char a1, uint64_t a2, void (**a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  id v10;
  _QWORD v11[7];
  char v12;

  v6 = swift_allocObject(&unk_1010798C0, 24, 7);
  *(_QWORD *)(v6 + 16) = a3;
  v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_theftDeterrenceStateManager);
  _Block_copy(a3);
  if ((sub_100B179F0() & 1) != 0)
    v8 = sub_10000E13C();
  else
    v8 = 1;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1004D47C8, v7, *(_QWORD *)(v7 + 16), &type metadata for () + 1, &type metadata for Bool);
  if ((v8 & 1) != 0 || !v12)
  {
    a3[2](a3);
    swift_release();
  }
  else
  {
    v9 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v9);
    v11[2] = a2;
    v11[3] = sub_1004D47C0;
    v11[4] = v6;
    static Transaction.named<A>(_:with:)("setUserHasAcknowledgedFindMy", 28, 2, sub_1004D47E0, v11, &type metadata for () + 1);
    v10 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    objc_msgSend(v10, "setUserHasAcknowledgedFindMy:", a1 & 1);
    swift_release();

  }
}

void sub_1004C70D4(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, void (**a5)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Class isa;
  _BYTE v35[12];
  int v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 aBlock;
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;

  v36 = a3;
  v46 = a2;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v8 - 8);
  v45 = v8;
  __chkstk_darwin(v8);
  v43 = &v35[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v42 = type metadata accessor for DispatchQoS(0);
  v41 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v40 = &v35[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v39 = type metadata accessor for DispatchQoS.QoSClass(0);
  v38 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v37 = &v35[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for UUID(0);
  v47 = *(_QWORD *)(v12 - 8);
  v48 = v12;
  __chkstk_darwin(v12);
  v49 = swift_allocObject(&unk_1010797F8, 24, 7);
  *(_QWORD *)(v49 + 16) = a5;
  v13 = _Block_copy(a5);
  v14 = static os_log_type_t.info.getter(v13);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v15 = qword_1011B7D28;
  v50 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v50, 112, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B10;
  *(_QWORD *)&aBlock = *a4;
  v17 = sub_10001A9A8(&qword_1010F49B8);
  v18 = String.init<A>(describing:)(&aBlock, v17);
  v20 = v19;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  v21 = sub_10001AA00();
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  v22 = v21;
  *(_QWORD *)(v16 + 96) = &type metadata for String;
  *(_QWORD *)(v16 + 104) = v21;
  *(_QWORD *)(v16 + 64) = v21;
  *(_QWORD *)(v16 + 72) = 0xD00000000000003CLL;
  *(_QWORD *)(v16 + 80) = 0x8000000100ED8390;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "%@: %@", 6, 2, v16);
  swift_bridgeObjectRelease();
  v23 = a4[35];
  sub_10080B648(a1, (uint64_t)&aBlock);
  if (v52)
  {
    sub_10000F9FC(&aBlock, (uint64_t)v53);
    v24 = v54;
    v25 = v55;
    v26 = sub_10001AA44(v53, v54);
    sub_1008595F4((uint64_t)v26, v46, 0, 1, v36 & 1, v23, v24, v25);
    __asm { BR              X10 }
  }
  v28 = sub_100004048((uint64_t)&aBlock, (uint64_t *)&unk_1010EE310);
  v29 = static os_log_type_t.error.getter(v28);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v30 = qword_1011B7D50;
  v31 = swift_allocObject(v50, 72, 7);
  *(_OWORD *)(v31 + 16) = xmmword_100E22B00;
  v32 = UUID.uuidString.getter(v31);
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  *(_QWORD *)(v31 + 64) = v22;
  *(_QWORD *)(v31 + 32) = v32;
  *(_QWORD *)(v31 + 40) = v33;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "allBeaconingKeys failed to retrieve beacon record for %@", 56, 2, v31);
  swift_bridgeObjectRelease();
  sub_10000F4A0(0, &qword_1010FD118, SPBeaconingKey_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  ((void (**)(_QWORD, Class))a5)[2](a5, isa);
  swift_release();

}

void sub_1004C7A90(uint64_t *a1, void (**a2)(const void *, Class, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char isUniquelyReferenced_nonNull_native;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (**v78)(const void *, Class, _QWORD);
  Class isa;
  const void *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  void (**v84)(const void *, Class, _QWORD);
  uint64_t v85;
  char *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  id v96[2];
  uint64_t v97;

  v4 = type metadata accessor for OwnedBeaconRecord(0);
  v5 = *(_QWORD *)(v4 - 8);
  v92 = (_QWORD *)v4;
  v93 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for UUID(0);
  v87 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v86 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SharedBeaconRecord(0);
  v83 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = a2;
  v12 = _Block_copy(a2);
  v13 = static os_log_type_t.info.getter(v12);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v14 = qword_1011B7D28;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v15, 112, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B10;
  v97 = *a1;
  v17 = sub_10001A9A8(&qword_1010F49B8);
  v18 = String.init<A>(describing:)(&v97, v17);
  v20 = v19;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  v21 = sub_10001AA00();
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  *(_QWORD *)(v16 + 96) = &type metadata for String;
  *(_QWORD *)(v16 + 104) = v21;
  *(_QWORD *)(v16 + 64) = v21;
  *(_QWORD *)(v16 + 72) = 0xD00000000000002ALL;
  *(_QWORD *)(v16 + 80) = 0x8000000100ED8240;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "%{public}@: %{public}@", 22, 2, v16);
  swift_bridgeObjectRelease();
  v22 = sub_1006BABA4((uint64_t)_swiftEmptyArrayStorage);
  v94 = a1[35];
  v95 = v22;
  v23 = sub_1000188D0();
  v24 = *((_QWORD *)v23 + 2);
  v85 = v9;
  if (!v24)
  {
    swift_bridgeObjectRelease();
LABEL_26:
    v56 = sub_1000181C8();
    v57 = *((_QWORD *)v56 + 2);
    if (!v57)
    {
LABEL_40:
      swift_bridgeObjectRelease();
      v78 = v84;
      _Block_copy(v84);
      sub_10001A9A8(&qword_1010FD110);
      sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      v78[2](v78, isa, 0);

      _Block_release(v78);
      swift_bridgeObjectRelease();
      _Block_release(v78);
      return;
    }
    v93 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock;
    v58 = *(unsigned __int8 *)(v83 + 80);
    v90 = (uint64_t)v56;
    v59 = (uint64_t)&v56[(v58 + 32) & ~v58];
    v60 = *(_QWORD *)(v83 + 72);
    v92 = &type metadata for () + 1;
    while (1)
    {
      sub_10005972C(v59, (uint64_t)v11, type metadata accessor for SharedBeaconRecord);
      if (v11[*(int *)(v9 + 64)] == 2)
      {
        v71 = v94;
        v72 = *(_QWORD *)(v94 + v93);
        v73 = type metadata accessor for BeaconKeyManager(0);
        OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v71, v72, v92, v73);
        v74 = (uint64_t)&v11[*(int *)(v9 + 20)];
        v75 = sub_100DCE62C(v74);
        swift_release();
        if ((unint64_t)v75 >> 62)
        {
          if (v75 < 0)
            v76 = v75;
          else
            v76 = v75 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v75);
          v77 = _CocoaArrayWrapper.endIndex.getter(v76);
          swift_bridgeObjectRelease();
          if (!v77)
          {
LABEL_34:
            sub_1000126B0((uint64_t)v11, type metadata accessor for SharedBeaconRecord);
            swift_bridgeObjectRelease();
            goto LABEL_30;
          }
        }
        else if (!*(_QWORD *)((v75 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_34;
        }
        v61 = v11;
        v62 = v87;
        v63 = v60;
        v64 = (uint64_t)v86;
        v65 = v74;
        v66 = v91;
        (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v86, v65, v91);
        v67 = (_QWORD *)v95;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v95);
        v97 = (uint64_t)v67;
        sub_10010D10C(v75, v64, isUniquelyReferenced_nonNull_native);
        v95 = v97;
        swift_bridgeObjectRelease();
        v69 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
        v11 = v61;
        v9 = v85;
        v70 = v64;
        v60 = v63;
        v69(v70, v66);
      }
      sub_1000126B0((uint64_t)v11, type metadata accessor for SharedBeaconRecord);
LABEL_30:
      v59 += v60;
      if (!--v57)
        goto LABEL_40;
    }
  }
  v81 = v23;
  v82 = v11;
  v25 = 0;
  v90 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock;
  v26 = (uint64_t)&v23[(*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80)];
  v89 = *(_QWORD *)(v93 + 72);
  v27 = type metadata accessor for OwnedBeaconRecord;
  v88 = &type metadata for () + 1;
  while (1)
  {
    sub_10005972C(v26, (uint64_t)v7, v27);
    v39 = v94;
    v40 = *(_QWORD *)(v94 + v90);
    v41 = type metadata accessor for BeaconKeyManager(0);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v39, v40, v88, v41);
    v42 = (uint64_t)&v7[*((int *)v92 + 5)];
    v97 = (uint64_t)_swiftEmptyArrayStorage;
    v43 = objc_autoreleasePoolPush();
    sub_100DCE790(v42, 0, 0, v96);
    if (v25)
      break;
    objc_autoreleasePoolPop(v43);
    if (v96[0])
    {
      v44 = v96[0];
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v44);
      v46 = *(_QWORD *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v45 = *(_QWORD *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v46 >= v45 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
      v47 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, v44);
      specialized Array._endMutation()(v47);

    }
    v48 = objc_autoreleasePoolPush();
    sub_100DCE790(v42, 1, 0, v96);
    objc_autoreleasePoolPop(v48);
    if (v96[0])
    {
      v49 = v96[0];
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v49);
      v51 = *(_QWORD *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v50 = *(_QWORD *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v51 >= v50 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1);
      v52 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v51, v49);
      specialized Array._endMutation()(v52);

    }
    v53 = v97;
    swift_release();
    if ((unint64_t)v53 >> 62)
    {
      if (v53 < 0)
        v54 = v53;
      else
        v54 = v53 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v53);
      v55 = _CocoaArrayWrapper.endIndex.getter(v54);
      swift_bridgeObjectRelease();
      if (!v55)
      {
LABEL_18:
        sub_1000126B0((uint64_t)v7, v27);
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    else if (!*(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_18;
    }
    v28 = v87;
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
    v93 = 0;
    v30 = v26;
    v31 = v24;
    v32 = v7;
    v33 = v27;
    v34 = (uint64_t)v86;
    v35 = v91;
    v29(v86, v42, v91);
    v36 = (_QWORD *)v95;
    v37 = swift_isUniquelyReferenced_nonNull_native(v95);
    v97 = (uint64_t)v36;
    sub_10010D10C(v53, v34, v37);
    v95 = v97;
    swift_bridgeObjectRelease();
    v38 = v34;
    v27 = v33;
    v7 = v32;
    v24 = v31;
    v26 = v30;
    v25 = v93;
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v38, v35);
    sub_1000126B0((uint64_t)v7, v27);
LABEL_6:
    v26 += v89;
    if (!--v24)
    {
      swift_bridgeObjectRelease();
      v9 = v85;
      v11 = v82;
      goto LABEL_26;
    }
  }
  v80 = v84;
  _Block_release(v84);
  _Block_release(v80);
  objc_autoreleasePoolPop(v43);
  __break(1u);
}

void sub_1004C81F0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSString v21;
  Class isa;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSString v36;
  NSString v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Class v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v4 = static os_log_type_t.info.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v5 = qword_1011B7D28;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B10;
  v48 = *a1;
  v8 = sub_10001A9A8(&qword_1010F49B8);
  v9 = String.init<A>(describing:)(&v48, v8);
  v11 = v10;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  v12 = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  *(_QWORD *)(v7 + 96) = &type metadata for String;
  *(_QWORD *)(v7 + 104) = v12;
  *(_QWORD *)(v7 + 64) = v12;
  *(_QWORD *)(v7 + 72) = 0xD00000000000001BLL;
  *(_QWORD *)(v7 + 80) = 0x8000000100ED8200;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "%@: %@", 6, 2, v7);
  swift_bridgeObjectRelease();
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v13 = sub_100C1AF0C((uint64_t)v48);
  swift_bridgeObjectRelease();
  v14 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v14 + 56) = sub_10001A9A8(&qword_1010ED608);
  *(_QWORD *)(v14 + 64) = sub_1000193A4(&qword_1010FD0F8, &qword_1010ED608, (const char *)&protocol conformance descriptor for [A]);
  *(_QWORD *)(v14 + 32) = v13;
  sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  swift_bridgeObjectRetain(v13);
  v16 = (void *)static OS_os_log.default.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  os_log(_:dso:log:type:_:)("Got categories - %@", 19, 2, &_mh_execute_header, v16, v17, v14);
  swift_bridgeObjectRelease();

  v18 = *(_QWORD *)(v13 + 16);
  if (v18)
  {
    v48 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v18);
    v19 = 0;
    v43 = v18;
    v44 = v13 + 32;
    do
    {
      v27 = (uint64_t *)(v44 + 32 * v19);
      v47 = *v27;
      v28 = v27[2];
      v29 = v27[3];
      v30 = *(_QWORD *)(v29 + 16);
      if (v30)
      {
        v46 = v19;
        swift_bridgeObjectRetain_n(v29, 2);
        v45 = v28;
        swift_bridgeObjectRetain(v28);
        specialized ContiguousArray.reserveCapacity(_:)(v30);
        v31 = (uint64_t *)(v29 + 64);
        do
        {
          v32 = *(v31 - 4);
          v33 = *(v31 - 2);
          v34 = *v31;
          v31 += 5;
          v35 = objc_allocWithZone((Class)SPBeaconRole);
          swift_bridgeObjectRetain(v33);
          swift_bridgeObjectRetain(v34);
          v36 = String._bridgeToObjectiveC()();
          v37 = String._bridgeToObjectiveC()();
          v38 = objc_msgSend(v35, "initWithRoleId:role:roleEmoji:", v32, v36, v37);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v39);
          v40 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v40);
          v41 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v38);
          specialized ContiguousArray._endMutation()(v41);
          --v30;
        }
        while (v30);
        swift_bridgeObjectRelease();
        v18 = v43;
        v28 = v45;
        v19 = v46;
      }
      else
      {
        swift_bridgeObjectRetain(v27[2]);
        swift_bridgeObjectRetain(v29);
      }
      ++v19;
      v20 = objc_allocWithZone((Class)SPBeaconRoleCategory);
      swift_bridgeObjectRetain(v28);
      v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_10000F4A0(0, &qword_1010FD100, SPBeaconRole_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v23 = objc_msgSend(v20, "initWithCategoryId:category:roles:", v47, v21, isa);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v24);
      v25 = v48[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v25);
      v26 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
      specialized ContiguousArray._endMutation()(v26);
    }
    while (v19 != v18);
  }
  swift_bridgeObjectRelease();
  sub_10000F4A0(0, &qword_1010FD108, SPBeaconRoleCategory_ptr);
  v42 = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, v42);
  swift_bridgeObjectRelease();

}

uint64_t sub_1004C8718(unint64_t a1, uint64_t a2, _QWORD *a3, void (**a4)(const void *, _QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  unint64_t v85;
  void (**v86)(const void *, _QWORD);
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;

  v81 = a1;
  v78 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v78);
  v79 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for BeaconNamingRecord(0);
  v76 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v80 = (uint64_t)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v9);
  v11 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OwnedBeaconRecord(0);
  v88 = *(_QWORD **)(v12 - 8);
  v89 = v12;
  v13 = v88[8];
  v14 = __chkstk_darwin(v12);
  v74 = (uint64_t)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v82 = (uint64_t)&v73 - v15;
  v16 = swift_allocObject(&unk_101079758, 24, 7);
  v86 = a4;
  v87 = v16;
  *(_QWORD *)(v16 + 16) = a4;
  v17 = _Block_copy(a4);
  v18 = static os_log_type_t.info.getter(v17);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v19 = qword_1011B7D28;
  v84 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v20 = swift_allocObject(v84, 112, 7);
  v73 = xmmword_100E22B10;
  *(_OWORD *)(v20 + 16) = xmmword_100E22B10;
  *(_QWORD *)&v90 = *a3;
  v21 = sub_10001A9A8(&qword_1010F49B8);
  v22 = String.init<A>(describing:)(&v90, v21);
  v24 = v23;
  *(_QWORD *)(v20 + 56) = &type metadata for String;
  v25 = sub_10001AA00();
  *(_QWORD *)(v20 + 32) = v22;
  *(_QWORD *)(v20 + 40) = v24;
  *(_QWORD *)(v20 + 96) = &type metadata for String;
  *(_QWORD *)(v20 + 104) = v25;
  v85 = v25;
  *(_QWORD *)(v20 + 64) = v25;
  *(_QWORD *)(v20 + 72) = 0xD00000000000001FLL;
  *(_QWORD *)(v20 + 80) = 0x8000000100ED8130;
  os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "%@: %@", 6, 2, v20);
  swift_bridgeObjectRelease();
  v75 = a3;
  v26 = a3[35];
  v27 = sub_10001A9A8(&qword_1011003C0);
  v28 = type metadata accessor for UUID(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned __int8 *)(v29 + 80);
  v31 = (v30 + 32) & ~v30;
  v32 = swift_allocObject(v27, v31 + *(_QWORD *)(v29 + 72), v30 | 7);
  v83 = xmmword_100E22B00;
  *(_OWORD *)(v32 + 16) = xmmword_100E22B00;
  v33 = v32 + v31;
  v34 = a2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v33, a2, v28);
  swift_retain();
  v35 = sub_10000BCB4(v32);
  swift_release();
  swift_setDeallocating(v32);
  swift_arrayDestroy(v33, *(_QWORD *)(v32 + 16), v28);
  swift_deallocClassInstance(v32, 32, 7);
  if (v35[2])
  {
    sub_100030784((uint64_t)(v35 + 4), (uint64_t)&v90);
  }
  else
  {
    v92 = 0;
    v90 = 0u;
    v91 = 0u;
  }
  v36 = v88;
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v91 + 1))
  {
    sub_100004048((uint64_t)&v90, (uint64_t *)&unk_1010EE310);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v36[7])(v11, 1, 1, v89);
    goto LABEL_12;
  }
  v37 = v13;
  v38 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v39 = v89;
  v40 = swift_dynamicCast(v11, &v90, v38, v89, 6);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v36[7])(v11, v40 ^ 1u, 1, v39);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v36[6])(v11, 1, v39) == 1)
  {
LABEL_12:
    v46 = sub_100004048((uint64_t)v11, (uint64_t *)&unk_1010F47C0);
    v47 = static os_log_type_t.error.getter(v46);
    v48 = qword_1011B7D28;
    v49 = swift_allocObject(v84, 72, 7);
    *(_OWORD *)(v49 + 16) = v83;
    v50 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v51 = dispatch thunk of CustomStringConvertible.description.getter(v28, v50);
    v52 = v85;
    *(_QWORD *)(v49 + 56) = &type metadata for String;
    *(_QWORD *)(v49 + 64) = v52;
    *(_QWORD *)(v49 + 32) = v51;
    *(_QWORD *)(v49 + 40) = v53;
    os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v48, "Beacon with the identifier not found - %@", 41, 2, v49);
    swift_bridgeObjectRelease();
    v86[2](v86, 0);
    return swift_release();
  }
  v41 = v82;
  sub_1000126EC((uint64_t)v11, v82, type metadata accessor for OwnedBeaconRecord);
  v42 = (_QWORD *)sub_100DC5700(v81);
  if (v42)
  {
    v88 = v42;
    __chkstk_darwin(v42);
    *((_QWORD *)&v73 - 2) = v26;
    *((_QWORD *)&v73 - 1) = v34;
    v43 = (uint64_t)v79;
    QueueSynchronizer.conditionalSync<A>(_:)(sub_10029826C);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v43, 1, v77) != 1)
    {
      sub_1000126EC(v43, v80, type metadata accessor for BeaconNamingRecord);
      v56 = swift_allocObject(v84, 112, 7);
      *(_OWORD *)(v56 + 16) = v73;
      v57 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v58 = dispatch thunk of CustomStringConvertible.description.getter(v28, v57);
      v59 = v85;
      *(_QWORD *)(v56 + 56) = &type metadata for String;
      *(_QWORD *)(v56 + 64) = v59;
      *(_QWORD *)(v56 + 32) = v58;
      *(_QWORD *)(v56 + 40) = v60;
      v61 = v88;
      v62 = objc_msgSend(v88, "roleId");
      *(_QWORD *)(v56 + 96) = &type metadata for Int;
      *(_QWORD *)(v56 + 104) = &protocol witness table for Int;
      *(_QWORD *)(v56 + 72) = v62;
      v63 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
      v64 = (void *)static OS_os_log.default.getter(v63);
      v65 = static os_log_type_t.default.getter(v64);
      os_log(_:dso:log:type:_:)("Updating beacon [%@] with role - %i", 35, 2, &_mh_execute_header, v64, v65, v56);
      swift_bridgeObjectRelease();

      v66 = v74;
      sub_10005972C(v41, v74, type metadata accessor for OwnedBeaconRecord);
      v67 = *((unsigned __int8 *)v36 + 80);
      v68 = (v67 + 40) & ~v67;
      v69 = swift_allocObject(&unk_101079780, v68 + v37, v67 | 7);
      v70 = v87;
      *(_QWORD *)(v69 + 16) = sub_10001D390;
      *(_QWORD *)(v69 + 24) = v70;
      *(_QWORD *)(v69 + 32) = v75;
      sub_1000126EC(v66, v69 + v68, type metadata accessor for OwnedBeaconRecord);
      v71 = v61;
      swift_retain();
      swift_retain();
      v72 = v80;
      sub_100868F90(v80, 0, (void (*)(uint64_t))sub_1004D417C, (void (*)(uint64_t))v69, v26, v71);
      swift_release();

      sub_1000126B0(v72, type metadata accessor for BeaconNamingRecord);
      sub_1000126B0(v41, type metadata accessor for OwnedBeaconRecord);
      return swift_release();
    }
    v44 = sub_100004048(v43, (uint64_t *)&unk_101105880);
    v45 = static os_log_type_t.error.getter(v44);
    os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, qword_1011B7D28, "Valid role not found.", 21, 2, _swiftEmptyArrayStorage);
    v86[2](v86, 0);

  }
  else
  {
    v54 = static os_log_type_t.error.getter(0);
    os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, qword_1011B7D28, "Valid role not found.", 21, 2, _swiftEmptyArrayStorage);
    v86[2](v86, 0);
  }
  sub_1000126B0(v41, type metadata accessor for OwnedBeaconRecord);
  return swift_release();
}

uint64_t sub_1004C8F2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = sub_10001A9A8(&qword_101108090);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v8, &qword_101108090);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v6);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v10 = *v8;
    v11 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v12 = qword_1011B7D38;
    v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v14 = swift_allocObject(v13, 72, 7);
    *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
    v24 = v10;
    swift_errorRetain(v10);
    v15 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v16 = String.init<A>(describing:)(&v24, v15);
    v18 = v17;
    *(_QWORD *)(v14 + 56) = &type metadata for String;
    *(_QWORD *)(v14 + 64) = sub_10001AA00();
    *(_QWORD *)(v14 + 32) = v16;
    *(_QWORD *)(v14 + 40) = v18;
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "create BeaconNameRecord failed %@.", 34, 2, v14);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, 0);
    return swift_errorRelease(v10);
  }
  else
  {
    v20 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, qword_1011B7D38, "create BeaconNameRecord success.", 32, 2, _swiftEmptyArrayStorage);
    (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, 1);
    v21 = *(_QWORD *)(a2 + 280);
    sub_1007EEF64(15);
    type metadata accessor for Transaction(0);
    static Transaction.named<A>(_:with:)("com.apple.searchpartyd.triggerSiriDeviceNameSync", 48, 2, sub_100088044, v21);
    v22 = swift_retain();
    PassthroughSubject.send(_:)(v22);
    swift_release();
    return sub_100004048((uint64_t)v8, &qword_101108090);
  }
}

void sub_1004C91B0(void (*a1)(_QWORD, _QWORD, _QWORD), void *a2, void (*a3)(char *, uint64_t), const void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(_QWORD, _QWORD, _QWORD);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, char *, uint64_t);
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  int *v54;
  uint64_t v55;
  char *v56;
  id v57;
  id v58;
  id v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void (**v72)(_QWORD, _QWORD);
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  id v87;
  id v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t (**v108)(char);
  uint64_t v109;
  id v110;
  const void *v111;
  uint64_t v112;
  id v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  void (*v120)(uint64_t, char *, uint64_t);
  uint64_t *v121;
  uint64_t *v122;
  const void *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  NSObject *v128;
  os_log_type_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void (*v135)(char *, uint64_t);
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t (**v153)();
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  void (*v168)(uint64_t, char *, uint64_t);
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  _OWORD *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void (*v188)(char *, uint64_t);
  void (*v189)(_QWORD, _QWORD, _QWORD);
  void (**v190)(_QWORD, _QWORD);
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  char v195[8];
  __int128 v196;
  uint64_t v197;
  uint64_t v198;

  v184 = a2;
  v189 = a1;
  v174 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v174);
  v175 = (char *)&v163 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_10001A9A8((uint64_t *)&unk_101105880);
  v7 = __chkstk_darwin(v186);
  v171 = (char *)&v163 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v182 = (char *)&v163 - v9;
  v187 = type metadata accessor for BeaconNamingRecord(0);
  v181 = *(_QWORD *)(v187 - 8);
  v10 = __chkstk_darwin(v187);
  v165 = (uint64_t)&v163 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v166 = (uint64_t)&v163 - v13;
  v14 = __chkstk_darwin(v12);
  v179 = (_OWORD *)((char *)&v163 - v15);
  __chkstk_darwin(v14);
  v185 = (uint64_t)&v163 - v16;
  v192 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v192 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  v19 = __chkstk_darwin(v192);
  v167 = (char *)&v163 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v19);
  v169 = (char *)&v163 - v21;
  v22 = __chkstk_darwin(v20);
  v170 = (char *)&v163 - v23;
  v24 = __chkstk_darwin(v22);
  v183 = (char *)&v163 - v25;
  v26 = __chkstk_darwin(v24);
  v178 = (char *)&v163 - v27;
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v163 - v29;
  __chkstk_darwin(v28);
  v193 = (unint64_t *)((char *)&v163 - v31);
  v191 = swift_allocObject(&unk_101079618, 24, 7);
  *(_QWORD *)(v191 + 16) = a4;
  _Block_copy(a4);
  v190 = (void (**)(_QWORD, _QWORD))a4;
  v32 = _Block_copy(a4);
  LODWORD(v188) = static os_log_type_t.info.getter(v32);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v33 = qword_1011B7D28;
  v180 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v34 = swift_allocObject(v180, 112, 7);
  *(_OWORD *)(v34 + 16) = xmmword_100E22B10;
  v198 = *(_QWORD *)a3;
  v35 = sub_10001A9A8(&qword_1010F49B8);
  v36 = String.init<A>(describing:)(&v198, v35);
  v37 = a3;
  v39 = v38;
  *(_QWORD *)(v34 + 56) = &type metadata for String;
  v40 = sub_10001AA00();
  *(_QWORD *)(v34 + 32) = v36;
  *(_QWORD *)(v34 + 40) = v39;
  *(_QWORD *)(v34 + 96) = &type metadata for String;
  *(_QWORD *)(v34 + 104) = v40;
  *(_QWORD *)(v34 + 64) = v40;
  *(_QWORD *)(v34 + 72) = 0xD000000000000023;
  *(_QWORD *)(v34 + 80) = 0x8000000100ED7FA0;
  os_log(_:dso:log:_:_:)(v188, &_mh_execute_header, v33, "%@: %@", 6, 2, v34);
  swift_bridgeObjectRelease();
  v41 = v189;
  v42 = v192;
  v189 = *(void (**)(_QWORD, _QWORD, _QWORD))(v17 + 16);
  v189(v30, v41, v192);
  v43 = *(unsigned __int8 *)(v17 + 80);
  v44 = (v43 + 24) & ~v43;
  v172 = v44 + v18;
  v173 = v43 | 7;
  v45 = swift_allocObject(&unk_101079640, v44 + v18, v43 | 7);
  *(_QWORD *)(v45 + 16) = v37;
  v46 = *(void (**)(uint64_t, char *, uint64_t))(v17 + 32);
  v46(v45 + v44, v30, v42);
  swift_retain();
  v47 = v193;
  unsafeFromAsyncTask<A>(_:)(v193, &unk_1010FD0E0, v45, v42);
  swift_release();
  v188 = v37;
  v48 = *((_QWORD *)v37 + 35);
  sub_10080B648((uint64_t)v47, (uint64_t)&v196);
  v49 = v17;
  if (!v197)
  {
    v64 = sub_100004048((uint64_t)&v196, (uint64_t *)&unk_1010EE310);
    v65 = static os_log_type_t.error.getter(v64);
    v66 = swift_allocObject(v180, 72, 7);
    *(_OWORD *)(v66 + 16) = xmmword_100E22B00;
    v67 = v193;
    v68 = UUID.uuidString.getter(v66);
    *(_QWORD *)(v66 + 56) = &type metadata for String;
    *(_QWORD *)(v66 + 64) = v40;
    *(_QWORD *)(v66 + 32) = v68;
    *(_QWORD *)(v66 + 40) = v69;
    v70 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v71 = (void *)static OS_os_log.default.getter(v70);
    os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v71, "Beacon with the identifier not found - %@", 41, 2, v66);
    swift_bridgeObjectRelease();

    v72 = v190;
    v190[2](v190, 0);
    (*(void (**)(_QWORD *, uint64_t))(v49 + 8))(v67, v42);
LABEL_36:
    swift_release();
    v123 = v72;
    goto LABEL_37;
  }
  v163 = v40;
  v168 = v46;
  v164 = v30;
  v177 = v17;
  v50 = sub_10000F9FC(&v196, (uint64_t)&v198);
  __chkstk_darwin(v50);
  v176 = v48;
  v51 = (char *)v193;
  *(&v163 - 2) = v48;
  *(&v163 - 1) = (unint64_t)v51;
  v52 = (uint64_t)v182;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10029826C);
  v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v181 + 48);
  v54 = (int *)v187;
  if (v53(v52, 1, v187) != 1)
  {
    sub_1000126EC(v52, v185, type metadata accessor for BeaconNamingRecord);
    v73 = v184;
    if ((objc_msgSend(v184, "restoreDefaultName") & 1) != 0)
    {
      sub_100030784((uint64_t)&v198, (uint64_t)&v196);
      v74 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
      v75 = (uint64_t)v175;
      if ((swift_dynamicCast(v175, &v196, v74, v174, 6) & 1) != 0)
      {
        sub_1000126B0(v75, type metadata accessor for SharedBeaconRecord);
        if (qword_1010E9F80 != -1)
          swift_once(&qword_1010E9F80, sub_1007FA778);
        v76 = type metadata accessor for Logger(0);
        sub_10001A9E8(v76, (uint64_t)qword_1011B77E8);
        v77 = v170;
        v78 = v192;
        v79 = ((uint64_t (*)(char *, char *, uint64_t))v189)(v170, v51, v192);
        v80 = Logger.logObject.getter(v79);
        v81 = static os_log_type_t.default.getter(v80);
        v82 = v81;
        if (os_log_type_enabled(v80, v81))
        {
          v83 = swift_slowAlloc(22, -1);
          v184 = (id)swift_slowAlloc(32, -1);
          *(_QWORD *)&v196 = v184;
          *(_DWORD *)v83 = 141558275;
          v194 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v194, v195, v83 + 4, v83 + 12);
          *(_WORD *)(v83 + 12) = 2081;
          v188 = (void (*)(char *, uint64_t))(v83 + 14);
          v84 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          LODWORD(v183) = v82;
          v85 = dispatch thunk of CustomStringConvertible.description.getter(v78, v84);
          v194 = sub_100016940(v85, v86, (uint64_t *)&v196);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v194, v195, v188, v83 + 22);
          swift_bridgeObjectRelease();
          v188 = *(void (**)(char *, uint64_t))(v177 + 8);
          v188(v77, v78);
          _os_log_impl((void *)&_mh_execute_header, v80, (os_log_type_t)v183, "Restoring default name for shared item Beacon: %{private,mask.hash}s.", (uint8_t *)v83, 0x16u);
          v87 = v184;
          swift_arrayDestroy(v184, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v87, -1, -1);
          swift_slowDealloc(v83, -1, -1);
        }
        else
        {
          v188 = *(void (**)(char *, uint64_t))(v177 + 8);
          v188(v77, v78);
        }

        v142 = swift_allocObject(&unk_1010796B8, 32, 7);
        v143 = v191;
        *(_QWORD *)(v142 + 16) = sub_1004D6428;
        *(_QWORD *)(v142 + 24) = v143;
        v144 = v143;
        __chkstk_darwin(v142);
        v145 = (char *)v193;
        *(&v163 - 2) = v146;
        *(&v163 - 1) = (unint64_t)v145;
        swift_retain_n(v144, 2);
        v147 = (uint64_t)v171;
        QueueSynchronizer.conditionalSync<A>(_:)(sub_10029826C);
        if (v53(v147, 1, v187) == 1)
        {
          sub_100004048(v147, (uint64_t *)&unk_101105880);
          v111 = v190;
          v190[2](v190, 1);
        }
        else
        {
          v148 = v166;
          sub_1000126EC(v147, v166, type metadata accessor for BeaconNamingRecord);
          v149 = v164;
          v150 = v192;
          v189(v164, v145, v192);
          v151 = (v172 + 7) & 0xFFFFFFFFFFFFFFF8;
          v152 = swift_allocObject(&unk_1010796E0, v151 + 16, v173);
          *(_QWORD *)(v152 + 16) = v176;
          v168(v152 + v44, v149, v150);
          v153 = (uint64_t (**)())(v152 + v151);
          *v153 = sub_10001D858;
          v153[1] = (uint64_t (*)())v142;
          swift_retain();
          v154 = swift_retain();
          v155 = static os_log_type_t.default.getter(v154);
          if (qword_1010EA258 != -1)
            swift_once(&qword_1010EA258, sub_100B5D9CC);
          v156 = qword_1011B7D38;
          v157 = swift_allocObject(v180, 72, 7);
          *(_OWORD *)(v157 + 16) = xmmword_100E22B00;
          v158 = v165;
          sub_10005972C(v148, v165, type metadata accessor for BeaconNamingRecord);
          v159 = String.init<A>(describing:)(v158, v187);
          v160 = v163;
          *(_QWORD *)(v157 + 56) = &type metadata for String;
          *(_QWORD *)(v157 + 64) = v160;
          *(_QWORD *)(v157 + 32) = v159;
          *(_QWORD *)(v157 + 40) = v161;
          os_log(_:dso:log:_:_:)(v155, &_mh_execute_header, v156, "Attempting to remove: %@", 24, 2, v157);
          swift_bridgeObjectRelease();
          swift_retain();
          sub_100869614(v148, v176, (void (*)(_QWORD))sub_1004D386C, v152);
          swift_release_n(v152, 2);
          sub_1000126B0(v148, type metadata accessor for BeaconNamingRecord);
          v111 = v190;
        }
        v162 = v192;
        swift_release();
        swift_release();
        sub_1000126B0(v185, type metadata accessor for BeaconNamingRecord);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v198);
        v188(v145, v162);
        goto LABEL_24;
      }
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v124 = type metadata accessor for Logger(0);
      sub_10001A9E8(v124, (uint64_t)qword_1011B77E8);
      v125 = v169;
      v126 = v192;
      v127 = ((uint64_t (*)(char *, char *, uint64_t))v189)(v169, v51, v192);
      v128 = Logger.logObject.getter(v127);
      v129 = static os_log_type_t.error.getter(v128);
      if (os_log_type_enabled(v128, v129))
      {
        v130 = swift_slowAlloc(22, -1);
        v131 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v196 = v131;
        *(_DWORD *)v130 = 141558275;
        v194 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v194, v195, v130 + 4, v130 + 12);
        *(_WORD *)(v130 + 12) = 2081;
        v132 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v133 = dispatch thunk of CustomStringConvertible.description.getter(v192, v132);
        v194 = sub_100016940(v133, v134, (uint64_t *)&v196);
        v126 = v192;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v194, v195, v130 + 14, v130 + 22);
        swift_bridgeObjectRelease();
        v135 = *(void (**)(char *, uint64_t))(v177 + 8);
        v135(v125, v126);
        v136 = "Cannot restore default name for owned item yet. Beacon: %{private,mask.hash}s.";
LABEL_33:
        _os_log_impl((void *)&_mh_execute_header, v128, v129, v136, (uint8_t *)v130, 0x16u);
        swift_arrayDestroy(v131, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v131, -1, -1);
        swift_slowDealloc(v130, -1, -1);
LABEL_35:

        v72 = v190;
        v190[2](v190, 0);
        sub_1000126B0(v185, type metadata accessor for BeaconNamingRecord);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v198);
        v135(v51, v126);
        goto LABEL_36;
      }
    }
    else
    {
      v88 = objc_msgSend(v73, "name");
      v89 = v180;
      if (v88)
      {
        v90 = v88;
        v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
        v93 = v92;

        v95 = static os_log_type_t.default.getter(v94);
        if (qword_1010EA258 != -1)
          swift_once(&qword_1010EA258, sub_100B5D9CC);
        v96 = qword_1011B7D38;
        v97 = swift_allocObject(v89, 72, 7);
        *(_OWORD *)(v97 + 16) = xmmword_100E22B00;
        v98 = v185;
        v99 = UUID.uuidString.getter(v97);
        v100 = v163;
        *(_QWORD *)(v97 + 56) = &type metadata for String;
        *(_QWORD *)(v97 + 64) = v100;
        *(_QWORD *)(v97 + 32) = v99;
        *(_QWORD *)(v97 + 40) = v101;
        os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, v96, "updating existing record id %@", 30, 2, v97);
        v102 = v98;
        swift_bridgeObjectRelease();
        sub_100030784((uint64_t)&v198, (uint64_t)&v196);
        v103 = (_QWORD *)swift_allocObject(&unk_101079668, 80, 7);
        v103[2] = v73;
        v103[3] = v91;
        v103[4] = v93;
        sub_10000F9FC(&v196, (uint64_t)(v103 + 5));
        v104 = v164;
        v105 = v192;
        v189(v164, v51, v192);
        v106 = (v172 + 7) & 0xFFFFFFFFFFFFFFF8;
        v107 = swift_allocObject(&unk_101079690, v106 + 16, v173);
        *(_QWORD *)(v107 + 16) = v188;
        v168(v107 + v44, v104, v105);
        v108 = (uint64_t (**)(char))(v107 + v106);
        v109 = v191;
        *v108 = sub_1004D6428;
        v108[1] = (uint64_t (*)(char))v109;
        swift_retain();
        swift_retain();
        v110 = v73;
        sub_1007A1BB0(v102, 1, (void (*)(uint64_t))sub_1004D37FC, (uint64_t)v103, (void (*)(uint64_t))sub_1004D3810, (void (*)(uint64_t))v107);
        swift_release();
        swift_release();
        v111 = v190;
        goto LABEL_23;
      }
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v137 = type metadata accessor for Logger(0);
      sub_10001A9E8(v137, (uint64_t)qword_1011B77E8);
      v125 = v167;
      v126 = v192;
      v138 = ((uint64_t (*)(char *, char *, uint64_t))v189)(v167, v51, v192);
      v128 = Logger.logObject.getter(v138);
      v129 = static os_log_type_t.error.getter(v128);
      if (os_log_type_enabled(v128, v129))
      {
        v130 = swift_slowAlloc(22, -1);
        v131 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v196 = v131;
        *(_DWORD *)v130 = 141558275;
        v194 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v194, v195, v130 + 4, v130 + 12);
        *(_WORD *)(v130 + 12) = 2081;
        v139 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v140 = dispatch thunk of CustomStringConvertible.description.getter(v192, v139);
        v194 = sub_100016940(v140, v141, (uint64_t *)&v196);
        v126 = v192;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v194, v195, v130 + 14, v130 + 22);
        swift_bridgeObjectRelease();
        v135 = *(void (**)(char *, uint64_t))(v177 + 8);
        v135(v125, v126);
        v136 = "Cannot set empty name for item. Beacon: %{private,mask.hash}s.";
        goto LABEL_33;
      }
    }
    v135 = *(void (**)(char *, uint64_t))(v177 + 8);
    v135(v125, v126);
    goto LABEL_35;
  }
  v55 = sub_100004048(v52, (uint64_t *)&unk_101105880);
  v56 = v178;
  UUID.init()(v55);
  v189(v183, v51, v192);
  v57 = v184;
  v58 = objc_msgSend(v184, "roleId");
  v59 = objc_msgSend(v57, "name");
  if (v59)
  {
    v60 = v59;
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    v63 = v62;

  }
  else
  {
    v63 = 0xE700000000000000;
    v61 = 0x4E574F4E4B4E55;
  }
  v112 = (uint64_t)v188;
  v113 = objc_msgSend(v57, "emoji");
  if (v113)
  {
    v114 = v113;
    v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v113);
    v117 = v116;

  }
  else
  {
    v115 = 0;
    v117 = 0;
  }
  v102 = (uint64_t)v179;
  *v179 = xmmword_100E22FC0;
  v118 = v56;
  v119 = v192;
  v120 = v168;
  v168(v102 + v54[5], v118, v192);
  v120(v102 + v54[6], v183, v119);
  *(_QWORD *)(v102 + v54[7]) = v58;
  v121 = (uint64_t *)(v102 + v54[8]);
  *v121 = v61;
  v121[1] = v63;
  v122 = (uint64_t *)(v102 + v54[9]);
  *v122 = v115;
  v122[1] = v117;
  v105 = v119;
  v111 = v190;
  _Block_copy(v190);
  swift_retain();
  swift_retain();
  sub_10086A4B0(v102, 0, v176, v112, v111);
  _Block_release(v111);
  swift_release();
  swift_release();
  v51 = (char *)v193;
LABEL_23:
  sub_1000126B0(v102, type metadata accessor for BeaconNamingRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v198);
  (*(void (**)(char *, uint64_t))(v177 + 8))(v51, v105);
LABEL_24:
  swift_release();
  v123 = v111;
LABEL_37:
  _Block_release(v123);
}

uint64_t sub_1004CA488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (**a7)(_QWORD, _QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t (**v50)(char);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v55[2];
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v59 = a4;
  v60 = (char *)a6;
  v63 = a5;
  v64 = a2;
  v71 = a3;
  v70 = type metadata accessor for Date(0);
  v62 = *(_QWORD *)(v70 - 8);
  v9 = *(_QWORD *)(v62 + 64);
  __chkstk_darwin(v70);
  v69 = (char *)v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for UUID(0);
  v61 = *(_QWORD *)(v68 - 8);
  v10 = *(_QWORD *)(v61 + 64);
  __chkstk_darwin(v68);
  v67 = (char *)v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OwnedBeaconRecord(0);
  v58 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v58 + 64);
  __chkstk_darwin(v11);
  v66 = (uint64_t)v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for KeySyncRecord(0);
  v57 = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(v57 + 64);
  v15 = __chkstk_darwin(v13);
  v65 = (uint64_t)v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)v55 - v16;
  v18 = sub_10001A9A8(&qword_1010FD0B0);
  __chkstk_darwin(v18);
  v20 = (_QWORD *)((char *)v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = swift_allocObject(&unk_101079578, 24, 7);
  *(_QWORD *)(v72 + 16) = a7;
  sub_10000F9B8(a1, (uint64_t)v20, &qword_1010FD0B0);
  if (swift_getEnumCaseMultiPayload(v20, v18) == 1)
  {
    v21 = *v20;
    v22 = _Block_copy(a7);
    v23 = static os_log_type_t.error.getter(v22);
    if (qword_1010EA248 != -1)
      swift_once(&qword_1010EA248, sub_100B5D8FC);
    v24 = qword_1011B7D28;
    v25 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v26 = swift_allocObject(v25, 72, 7);
    *(_OWORD *)(v26 + 16) = xmmword_100E22B00;
    v73 = v21;
    swift_errorRetain(v21);
    v27 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v28 = String.init<A>(describing:)(&v73, v27);
    v30 = v29;
    *(_QWORD *)(v26 + 56) = &type metadata for String;
    *(_QWORD *)(v26 + 64) = sub_10001AA00();
    *(_QWORD *)(v26 + 32) = v28;
    *(_QWORD *)(v26 + 40) = v30;
    os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Could not update alignment uncertainty. Error - %@", 50, 2, v26);
    swift_bridgeObjectRelease();
    a7[2](a7, 0);
    swift_errorRelease(v21);
  }
  else
  {
    sub_1000126EC((uint64_t)v20, (uint64_t)v17, type metadata accessor for KeySyncRecord);
    v31 = _Block_copy(a7);
    v32 = static os_log_type_t.default.getter(v31);
    if (qword_1010EA248 != -1)
      swift_once(&qword_1010EA248, sub_100B5D8FC);
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, qword_1011B7D28, "Successfully updated alignment uncertainty", 42, 2, _swiftEmptyArrayStorage);
    v33 = v64;
    v34 = *(_QWORD *)(v64 + 280);
    v35 = *(_QWORD *)(v34 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    v36 = type metadata accessor for BeaconKeyManager(0);
    v56 = &type metadata for () + 1;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v34, v35, &type metadata for () + 1, v36);
    v55[0] = v73;
    v55[1] = 0;
    sub_10005972C(v71, v66, type metadata accessor for OwnedBeaconRecord);
    sub_10005972C((uint64_t)v17, v65, type metadata accessor for KeySyncRecord);
    v37 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v67, v59, v68);
    v38 = v62;
    (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v69, v60, v70);
    v39 = *(unsigned __int8 *)(v58 + 80);
    v40 = (v39 + 24) & ~v39;
    v41 = *(unsigned __int8 *)(v57 + 80);
    v42 = (v12 + v41 + v40) & ~v41;
    v43 = *(unsigned __int8 *)(v37 + 80);
    v44 = (v14 + v43 + v42) & ~v43;
    v45 = (v10 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
    v46 = *(unsigned __int8 *)(v38 + 80);
    v60 = v17;
    v47 = (v46 + v45 + 8) & ~v46;
    v48 = (v9 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
    v49 = swift_allocObject(&unk_1010795A0, v48 + 16, v39 | v41 | v43 | v46 | 7);
    *(_QWORD *)(v49 + 16) = v33;
    sub_1000126EC(v66, v49 + v40, type metadata accessor for OwnedBeaconRecord);
    sub_1000126EC(v65, v49 + v42, type metadata accessor for KeySyncRecord);
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v49 + v44, v67, v68);
    *(_QWORD *)(v49 + v45) = v63;
    (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v49 + v47, v69, v70);
    v50 = (uint64_t (**)(char))(v49 + v48);
    v51 = v72;
    *v50 = sub_1001D1C04;
    v50[1] = (uint64_t (*)(char))v51;
    v52 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v52);
    v53 = v71;
    v55[-6] = v55[0];
    v55[-5] = v53;
    LOBYTE(v55[-4]) = 2;
    v55[-3] = sub_1004D2E10;
    v55[-2] = v49;
    swift_retain();
    swift_retain();
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.checkForMissingKeyMaps.forbeacon", 62, 2, sub_1004D2EEC, &v55[-8], v56);
    swift_release();
    swift_release();
    sub_1000126B0((uint64_t)v60, type metadata accessor for KeySyncRecord);
  }
  return swift_release();
}

void sub_1004CAA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, const void *a5, double a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (**v49)(_QWORD, _QWORD);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t, uint64_t);
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t, char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void (**v139)(_QWORD, _QWORD);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;

  v140 = a3;
  v130 = a2;
  v132 = a1;
  v120 = sub_10001A9A8(&qword_1010FD0B0);
  __chkstk_darwin(v120);
  v121 = (uint64_t)&v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v127 = *(_QWORD *)(v10 - 8);
  v128 = v10;
  __chkstk_darwin(v10);
  v126 = (uint64_t)&v119 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for Date(0);
  v125 = *(_QWORD *)(v133 - 8);
  v12 = __chkstk_darwin(v133);
  v122 = (char *)&v119 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v124 = (char *)&v119 - v14;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v15);
  v136 = (uint64_t)&v119 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for OwnedBeaconRecord(0);
  v134 = *(_QWORD *)(v17 - 8);
  v135 = v17;
  v18 = __chkstk_darwin(v17);
  v123 = (uint64_t)&v119 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v137 = (uint64_t)&v119 - v20;
  v21 = sub_10001A9A8(&qword_1010F7AE0);
  __chkstk_darwin(v21);
  v23 = (char *)&v119 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for KeySyncRecord(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v119 = (uint64_t)&v119 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v138 = (uint64_t)&v119 - v28;
  _Block_copy(a5);
  v139 = (void (**)(_QWORD, _QWORD))a5;
  v29 = _Block_copy(a5);
  v30 = static os_log_type_t.info.getter(v29);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v31 = qword_1011B7D28;
  v32 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v33 = swift_allocObject(v32, 112, 7);
  *(_OWORD *)(v33 + 16) = xmmword_100E22B10;
  v142 = *a4;
  v34 = sub_10001A9A8(&qword_1010F49B8);
  v35 = String.init<A>(describing:)(&v142, v34);
  v141 = (uint64_t)a4;
  v36 = v35;
  v38 = v37;
  *(_QWORD *)(v33 + 56) = &type metadata for String;
  v39 = sub_10001AA00();
  *(_QWORD *)(v33 + 32) = v36;
  *(_QWORD *)(v33 + 40) = v38;
  v40 = v39;
  *(_QWORD *)(v33 + 96) = &type metadata for String;
  *(_QWORD *)(v33 + 104) = v39;
  *(_QWORD *)(v33 + 64) = v39;
  *(_QWORD *)(v33 + 72) = 0xD000000000000038;
  *(_QWORD *)(v33 + 80) = 0x8000000100ED7A90;
  os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "%@: %@", 6, 2, v33);
  swift_bridgeObjectRelease();
  v41 = v140;
  sub_10081AECC(v140, (uint64_t)v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) != 1)
  {
    v131 = v32;
    v129 = v40;
    v50 = (uint64_t)v23;
    v51 = v138;
    sub_1000126EC(v50, v138, type metadata accessor for KeySyncRecord);
    v52 = v136;
    sub_10080B950(v41, v136);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48))(v52, 1, v135) == 1)
    {
      v53 = sub_100004048(v52, (uint64_t *)&unk_1010F47C0);
      v54 = static os_log_type_t.error.getter(v53);
      v55 = qword_1011B7D28;
      v56 = swift_allocObject(v131, 72, 7);
      *(_OWORD *)(v56 + 16) = xmmword_100E22B00;
      v57 = UUID.uuidString.getter(v56);
      v58 = v129;
      *(_QWORD *)(v56 + 56) = &type metadata for String;
      *(_QWORD *)(v56 + 64) = v58;
      *(_QWORD *)(v56 + 32) = v57;
      *(_QWORD *)(v56 + 40) = v59;
      os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, v55, "OwnedBeaconRecord with identifier not found - %@", 48, 2, v56);
      swift_bridgeObjectRelease();
      v49 = v139;
      v139[2](v139, 0);
      v60 = v51;
LABEL_14:
      sub_1000126B0(v60, type metadata accessor for KeySyncRecord);
      goto LABEL_15;
    }
    v61 = sub_1000126EC(v52, v137, type metadata accessor for OwnedBeaconRecord);
    LODWORD(v135) = static os_log_type_t.info.getter(v61);
    v136 = qword_1011B7D28;
    v62 = (int *)v24;
    v63 = swift_allocObject(v131, 192, 7);
    *(_OWORD *)(v63 + 16) = xmmword_100E26E00;
    *(_QWORD *)(v63 + 56) = &type metadata for Double;
    *(_QWORD *)(v63 + 64) = &protocol witness table for Double;
    *(double *)(v63 + 32) = a6;
    *(_QWORD *)(v63 + 96) = &type metadata for UInt64;
    *(_QWORD *)(v63 + 104) = &protocol witness table for UInt64;
    v64 = v132;
    *(_QWORD *)(v63 + 72) = v132;
    v65 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v66 = v130;
    v134 = v65;
    v67 = dispatch thunk of CustomStringConvertible.description.getter(v133, v65);
    v68 = v129;
    *(_QWORD *)(v63 + 136) = &type metadata for String;
    *(_QWORD *)(v63 + 144) = v68;
    *(_QWORD *)(v63 + 112) = v67;
    *(_QWORD *)(v63 + 120) = v69;
    v70 = v41;
    v71 = UUID.uuidString.getter(v67);
    *(_QWORD *)(v63 + 176) = &type metadata for String;
    *(_QWORD *)(v63 + 184) = v68;
    *(_QWORD *)(v63 + 152) = v71;
    *(_QWORD *)(v63 + 160) = v72;
    os_log(_:dso:log:_:_:)(v135, &_mh_execute_header, v136, "setAlignmentUncertainty called: uncertainty: %f, index: %llu, date: %@, beaconUUID: %@", 86, 2, v63);
    v73 = swift_bridgeObjectRelease();
    v74 = *(_QWORD *)(v51 + v62[5]);
    if (v74 <= v64)
    {
      v84 = v62;
      v81 = v138;
      v82 = static Date.< infix(_:_:)(v66, v138 + v62[7]);
      v85 = v66;
      v83 = v131;
      if ((v82 & 1) == 0)
      {
        v98 = v125;
        v99 = *(void (**)(char *, uint64_t, uint64_t))(v125 + 16);
        v100 = v124;
        v101 = v133;
        v99(v124, v66, v133);
        sub_10005972C(v137, v123, type metadata accessor for OwnedBeaconRecord);
        v102 = v81;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 16))(v126, v70, v128);
        v103 = v85;
        v104 = v132;
        v105 = (uint64_t)v122;
        v99(v122, v103, v101);
        v106 = v102;
        v107 = v119;
        sub_10005972C(v106, v119, type metadata accessor for KeySyncRecord);
        *(_QWORD *)(v107 + v84[5]) = v104;
        v108 = v107 + v84[7];
        v109 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v98 + 24);
        v110 = v141;
        swift_retain();
        v111 = v109(v108, v100, v101);
        v112 = v107 + v84[6];
        *(double *)v112 = a6;
        *(_BYTE *)(v112 + 8) = 0;
        __chkstk_darwin(v111);
        *(&v119 - 2) = v113;
        *(&v119 - 1) = v107;
        OS_dispatch_queue.sync<A>(execute:)(sub_1004D65A8, &v119 - 4, &type metadata for () + 1);
        sub_1007EEF64(8);
        v114 = v121;
        sub_10005972C(v107, v121, type metadata accessor for KeySyncRecord);
        swift_storeEnumTagMultiPayload(v114, v120, 0);
        v49 = v139;
        _Block_copy(v139);
        v115 = v123;
        v116 = v126;
        sub_1004CA488(v114, v110, v123, v126, v104, v105, v49);
        _Block_release(v49);
        sub_100004048(v114, &qword_1010FD0B0);
        sub_1000126B0(v107, type metadata accessor for KeySyncRecord);
        swift_release();
        sub_1000126B0(v115, type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v116, v128);
        v117 = *(void (**)(uint64_t, uint64_t))(v125 + 8);
        v118 = v133;
        v117(v105, v133);
        v117((uint64_t)v124, v118);
        sub_1000126B0(v137, type metadata accessor for OwnedBeaconRecord);
        v60 = v138;
        goto LABEL_14;
      }
    }
    else
    {
      v75 = v64;
      v76 = static os_log_type_t.error.getter(v73);
      v141 = qword_1011B7D28;
      v77 = v131;
      v78 = swift_allocObject(v131, 152, 7);
      *(_OWORD *)(v78 + 16) = xmmword_100E221E0;
      v79 = UUID.uuidString.getter(v78);
      *(_QWORD *)(v78 + 56) = &type metadata for String;
      *(_QWORD *)(v78 + 64) = v68;
      *(_QWORD *)(v78 + 32) = v79;
      *(_QWORD *)(v78 + 40) = v80;
      *(_QWORD *)(v78 + 96) = &type metadata for UInt64;
      *(_QWORD *)(v78 + 104) = &protocol witness table for UInt64;
      *(_QWORD *)(v78 + 112) = v75;
      *(_QWORD *)(v78 + 72) = v74;
      *(_QWORD *)(v78 + 136) = &type metadata for UInt64;
      *(_QWORD *)(v78 + 144) = &protocol witness table for UInt64;
      os_log(_:dso:log:_:_:)(v76, &_mh_execute_header, v141, "Ignoring setAlignmentUncertainty update because lastIndexObserved for beacon %@ -- existing: %llu new: %llu", 107, 2, v78);
      swift_bridgeObjectRelease();
      v81 = v138;
      v82 = static Date.< infix(_:_:)(v66, v138 + v62[7]);
      v83 = v77;
      if ((v82 & 1) == 0)
        goto LABEL_12;
    }
    v86 = static os_log_type_t.error.getter(v82);
    v87 = qword_1011B7D28;
    v88 = swift_allocObject(v83, 152, 7);
    *(_OWORD *)(v88 + 16) = xmmword_100E221E0;
    v89 = UUID.uuidString.getter(v88);
    v90 = v129;
    *(_QWORD *)(v88 + 56) = &type metadata for String;
    *(_QWORD *)(v88 + 64) = v90;
    *(_QWORD *)(v88 + 32) = v89;
    *(_QWORD *)(v88 + 40) = v91;
    v92 = v133;
    v93 = v134;
    v94 = dispatch thunk of CustomStringConvertible.description.getter(v133, v134);
    *(_QWORD *)(v88 + 96) = &type metadata for String;
    *(_QWORD *)(v88 + 104) = v90;
    *(_QWORD *)(v88 + 72) = v94;
    *(_QWORD *)(v88 + 80) = v95;
    v96 = dispatch thunk of CustomStringConvertible.description.getter(v92, v93);
    *(_QWORD *)(v88 + 136) = &type metadata for String;
    *(_QWORD *)(v88 + 144) = v90;
    *(_QWORD *)(v88 + 112) = v96;
    *(_QWORD *)(v88 + 120) = v97;
    os_log(_:dso:log:_:_:)(v86, &_mh_execute_header, v87, "Ignoring setAlignmentUncertainty update because lastIndexObservationDate for beacon %@ -- lastIndexObservationDate %@ date: %@", 126, 2, v88);
    swift_bridgeObjectRelease();
LABEL_12:
    v49 = v139;
    v139[2](v139, 0);
    sub_1000126B0(v137, type metadata accessor for OwnedBeaconRecord);
    v60 = v81;
    goto LABEL_14;
  }
  v42 = sub_100004048((uint64_t)v23, &qword_1010F7AE0);
  v43 = v40;
  v44 = static os_log_type_t.error.getter(v42);
  v45 = qword_1011B7D28;
  v46 = swift_allocObject(v32, 72, 7);
  *(_OWORD *)(v46 + 16) = xmmword_100E22B00;
  v47 = UUID.uuidString.getter(v46);
  *(_QWORD *)(v46 + 56) = &type metadata for String;
  *(_QWORD *)(v46 + 64) = v43;
  *(_QWORD *)(v46 + 32) = v47;
  *(_QWORD *)(v46 + 40) = v48;
  os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v45, "KeySyncRecord with the identifier not found - %@", 48, 2, v46);
  swift_bridgeObjectRelease();
  v49 = v139;
  v139[2](v139, 0);
LABEL_15:
  _Block_release(v49);
  _Block_release(v49);
}

void sub_1004CB5E4(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v47 = a2;
  v40 = a1;
  v43 = sub_10001A9A8(&qword_1010FD0B0);
  __chkstk_darwin(v43);
  v44 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010F7AE0);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for KeySyncRecord(0);
  v46 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v42 = (uint64_t)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v41 = (uint64_t)&v40 - v13;
  _Block_copy(a4);
  v45 = a4;
  v14 = _Block_copy(a4);
  v15 = static os_log_type_t.info.getter(v14);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v16 = qword_1011B7D28;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 112, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B10;
  v48 = *a3;
  v19 = sub_10001A9A8(&qword_1010F49B8);
  v20 = String.init<A>(describing:)(&v48, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  v23 = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  v24 = v23;
  *(_QWORD *)(v18 + 96) = &type metadata for String;
  *(_QWORD *)(v18 + 104) = v23;
  *(_QWORD *)(v18 + 64) = v23;
  *(_QWORD *)(v18 + 72) = 0xD00000000000002BLL;
  *(_QWORD *)(v18 + 80) = 0x8000000100ED7A00;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "%@: %@", 6, 2, v18);
  swift_bridgeObjectRelease();
  sub_10081AECC(v47, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v9, 1, v10) == 1)
  {
    v25 = sub_100004048((uint64_t)v9, &qword_1010F7AE0);
    v26 = static os_log_type_t.error.getter(v25);
    v27 = swift_allocObject(v17, 72, 7);
    *(_OWORD *)(v27 + 16) = xmmword_100E22B00;
    v28 = UUID.uuidString.getter(v27);
    *(_QWORD *)(v27 + 56) = &type metadata for String;
    *(_QWORD *)(v27 + 64) = v24;
    *(_QWORD *)(v27 + 32) = v28;
    *(_QWORD *)(v27 + 40) = v29;
    v30 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v31 = (void *)static OS_os_log.default.getter(v30);
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v31, "KeySyncRecord with the identifier not found - %@", 48, 2, v27);
    swift_bridgeObjectRelease();

    v32 = v45;
    (*((void (**)(const void *, _QWORD))v45 + 2))(v45, 0);
  }
  else
  {
    v47 = v24;
    v33 = (uint64_t)v9;
    v34 = v41;
    sub_1000126EC(v33, v41, type metadata accessor for KeySyncRecord);
    v35 = v42;
    v36 = sub_10005972C(v34, v42, type metadata accessor for KeySyncRecord);
    v37 = v35 + *(int *)(v10 + 44);
    *(_QWORD *)v37 = v40;
    *(_BYTE *)(v37 + 8) = 0;
    __chkstk_darwin(v36);
    *(&v40 - 2) = v38;
    *(&v40 - 1) = v35;
    OS_dispatch_queue.sync<A>(execute:)(sub_1004D65A8, &v40 - 4, &type metadata for () + 1);
    sub_1007EEF64(8);
    v39 = v44;
    sub_10005972C(v35, v44, type metadata accessor for KeySyncRecord);
    v32 = v45;
    swift_storeEnumTagMultiPayload(v39, v43, 0);
    _Block_copy(v32);
    sub_1004CC5D4(v39, (uint64_t)v32, "Successfully updated key roll interval", 38, "Could not update key roll interval. Error - %@", 46);
    _Block_release(v32);
    sub_100004048(v39, &qword_1010FD0B0);
    sub_1000126B0(v35, type metadata accessor for KeySyncRecord);
    sub_1000126B0(v34, type metadata accessor for KeySyncRecord);
  }
  _Block_release(v32);
  _Block_release(v32);
}

uint64_t sub_1004CBB1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v11 = sub_10001A9A8(&qword_1010FD0B0);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v13, &qword_1010FD0B0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13, v11);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v15 = *v13;
    v16 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v18 = swift_allocObject(v17, 72, 7);
    *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
    v35 = v15;
    swift_errorRetain(v15);
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v20 = String.init<A>(describing:)(&v35, v19);
    v22 = v21;
    *(_QWORD *)(v18 + 56) = &type metadata for String;
    *(_QWORD *)(v18 + 64) = sub_10001AA00();
    *(_QWORD *)(v18 + 32) = v20;
    *(_QWORD *)(v18 + 40) = v22;
    v23 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v24 = (void *)static OS_os_log.default.getter(v23);
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v24, "Could not update current wild configuration. Error - %@", 55, 2, v18);
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, _QWORD))(a6 + 16))(a6, 0);
    return swift_errorRelease(v15);
  }
  else
  {
    v26 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_1010EA2C0 != -1)
      swift_once(&qword_1010EA2C0, sub_100B5DEDC);
    v27 = qword_1011B7DA0;
    v28 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v29 = swift_allocObject(v28, 192, 7);
    *(_OWORD *)(v29 + 16) = xmmword_100E26E00;
    v30 = UUID.uuidString.getter(v29);
    v32 = v31;
    *(_QWORD *)(v29 + 56) = &type metadata for String;
    v33 = sub_10001AA00();
    *(_QWORD *)(v29 + 32) = v30;
    *(_QWORD *)(v29 + 40) = v32;
    *(_QWORD *)(v29 + 96) = &type metadata for UInt;
    *(_QWORD *)(v29 + 104) = &protocol witness table for UInt;
    *(_QWORD *)(v29 + 64) = v33;
    *(_QWORD *)(v29 + 72) = a3;
    *(_QWORD *)(v29 + 136) = &type metadata for UInt;
    *(_QWORD *)(v29 + 144) = &protocol witness table for UInt;
    *(_QWORD *)(v29 + 112) = a4;
    *(_QWORD *)(v29 + 176) = &type metadata for UInt;
    *(_QWORD *)(v29 + 184) = &protocol witness table for UInt;
    *(_QWORD *)(v29 + 152) = a5;
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "setWildKeyBase: successfully updated current wild configuration for %@, base %d, interval %d, fallback %d.", 106, 2, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(a6 + 16))(a6, 1);
    return sub_100004048((uint64_t)v13, &qword_1010FD0B0);
  }
}

void sub_1004CBDBC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5, const void *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  int *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[2];
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v89 = a4;
  v84 = a3;
  v85 = a2;
  v86 = a1;
  v78 = sub_10001A9A8(&qword_1010FD0B0);
  __chkstk_darwin(v78);
  v79 = (uint64_t)v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for UUID(0);
  v82 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v81 = (uint64_t)v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010F7AE0);
  __chkstk_darwin(v10);
  v12 = (char *)v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for KeySyncRecord(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v77 = (uint64_t)v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v83 = (uint64_t)v75 - v17;
  _Block_copy(a6);
  v87 = a6;
  v18 = _Block_copy(a6);
  v19 = static os_log_type_t.info.getter(v18);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v20 = qword_1011B7D28;
  v88 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v21 = swift_allocObject(v88, 112, 7);
  *(_OWORD *)(v21 + 16) = xmmword_100E22B10;
  v90 = *a5;
  v22 = sub_10001A9A8(&qword_1010F49B8);
  v23 = String.init<A>(describing:)(&v90, v22);
  v25 = v24;
  *(_QWORD *)(v21 + 56) = &type metadata for String;
  v26 = sub_10001AA00();
  *(_QWORD *)(v21 + 32) = v23;
  *(_QWORD *)(v21 + 40) = v25;
  v27 = v26;
  *(_QWORD *)(v21 + 96) = &type metadata for String;
  *(_QWORD *)(v21 + 104) = v26;
  *(_QWORD *)(v21 + 64) = v26;
  *(_QWORD *)(v21 + 72) = 0xD00000000000003ALL;
  *(_QWORD *)(v21 + 80) = 0x8000000100ED7D90;
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "%@: %@", 6, 2, v21);
  swift_bridgeObjectRelease();
  v28 = a5[35];
  sub_10081AECC(v89, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1)
  {
    v37 = (int *)v13;
    v75[1] = v28;
    v38 = v27;
    v39 = v83;
    v40 = sub_1000126EC((uint64_t)v12, v83, type metadata accessor for KeySyncRecord);
    v41 = static os_log_type_t.info.getter(v40);
    v42 = qword_1011B7D28;
    v43 = v88;
    v44 = swift_allocObject(v88, 192, 7);
    *(_OWORD *)(v44 + 16) = xmmword_100E26E00;
    *(_QWORD *)(v44 + 56) = &type metadata for UInt;
    *(_QWORD *)(v44 + 64) = &protocol witness table for UInt;
    v45 = v85;
    v46 = v86;
    *(_QWORD *)(v44 + 32) = v86;
    *(_QWORD *)(v44 + 96) = &type metadata for UInt;
    *(_QWORD *)(v44 + 104) = &protocol witness table for UInt;
    *(_QWORD *)(v44 + 72) = v45;
    *(_QWORD *)(v44 + 136) = &type metadata for UInt;
    *(_QWORD *)(v44 + 144) = &protocol witness table for UInt;
    v47 = v84;
    *(_QWORD *)(v44 + 112) = v84;
    v48 = UUID.uuidString.getter(v44);
    *(_QWORD *)(v44 + 176) = &type metadata for String;
    *(_QWORD *)(v44 + 184) = v38;
    *(_QWORD *)(v44 + 152) = v48;
    *(_QWORD *)(v44 + 160) = v49;
    os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v42, "setWildKeyBase called: base: %lu, interval: %lu, fallback: %lu beaconUUID: %@", 77, 2, v44);
    v50 = swift_bridgeObjectRelease();
    v51 = v39 + v37[8];
    v52 = v37;
    if (*(_BYTE *)(v51 + 8))
      v53 = v46;
    else
      v53 = *(_QWORD *)v51;
    v76 = v38;
    if (v53 <= v46)
    {
      v58 = *(_QWORD *)(v39 + v52[10]);
      if (v58 <= v47)
      {
        v66 = v80;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 16))(v81, v89, v80);
        v67 = v77;
        v68 = sub_10005972C(v39, v77, type metadata accessor for KeySyncRecord);
        v69 = v67 + v52[8];
        *(_QWORD *)v69 = v86;
        *(_BYTE *)(v69 + 8) = 0;
        v70 = v67 + v52[9];
        *(_QWORD *)v70 = v85;
        *(_BYTE *)(v70 + 8) = 0;
        *(_QWORD *)(v67 + v52[10]) = v47;
        __chkstk_darwin(v68);
        v75[-2] = v71;
        v75[-1] = v67;
        OS_dispatch_queue.sync<A>(execute:)(sub_1004D65A8, &v75[-4], &type metadata for () + 1);
        sub_1007EEF64(8);
        v72 = v79;
        sub_10005972C(v67, v79, type metadata accessor for KeySyncRecord);
        v73 = v86;
        v36 = v87;
        swift_storeEnumTagMultiPayload(v72, v78, 0);
        _Block_copy(v36);
        v74 = v81;
        sub_1004CBB1C(v72, v81, v73, v85, v47, (uint64_t)v36);
        _Block_release(v36);
        sub_100004048(v72, &qword_1010FD0B0);
        sub_1000126B0(v67, type metadata accessor for KeySyncRecord);
        (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v74, v66);
        v65 = v39;
        goto LABEL_15;
      }
    }
    else
    {
      v54 = static os_log_type_t.error.getter(v50);
      v85 = qword_1011B7D28;
      v55 = swift_allocObject(v43, 152, 7);
      *(_OWORD *)(v55 + 16) = xmmword_100E221E0;
      v56 = UUID.uuidString.getter(v55);
      *(_QWORD *)(v55 + 56) = &type metadata for String;
      *(_QWORD *)(v55 + 64) = v38;
      *(_QWORD *)(v55 + 32) = v56;
      *(_QWORD *)(v55 + 40) = v57;
      *(_QWORD *)(v55 + 96) = &type metadata for UInt64;
      *(_QWORD *)(v55 + 104) = &protocol witness table for UInt64;
      *(_QWORD *)(v55 + 72) = v53;
      *(_QWORD *)(v55 + 136) = &type metadata for UInt64;
      *(_QWORD *)(v55 + 144) = &protocol witness table for UInt64;
      *(_QWORD *)(v55 + 112) = v46;
      os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, v85, "Ignoring setWildKeyBase update because wildIndexBase for beacon %@ -- existing: %llu new: %llu", 94, 2, v55);
      v50 = swift_bridgeObjectRelease();
      v58 = *(_QWORD *)(v39 + v52[10]);
      if (v58 <= v47)
        goto LABEL_13;
    }
    v59 = static os_log_type_t.error.getter(v50);
    v60 = qword_1011B7D28;
    v61 = swift_allocObject(v88, 152, 7);
    *(_OWORD *)(v61 + 16) = xmmword_100E221E0;
    v62 = UUID.uuidString.getter(v61);
    v63 = v76;
    *(_QWORD *)(v61 + 56) = &type metadata for String;
    *(_QWORD *)(v61 + 64) = v63;
    *(_QWORD *)(v61 + 32) = v62;
    *(_QWORD *)(v61 + 40) = v64;
    *(_QWORD *)(v61 + 96) = &type metadata for UInt64;
    *(_QWORD *)(v61 + 104) = &protocol witness table for UInt64;
    *(_QWORD *)(v61 + 72) = v58;
    *(_QWORD *)(v61 + 136) = &type metadata for UInt64;
    *(_QWORD *)(v61 + 144) = &protocol witness table for UInt64;
    *(_QWORD *)(v61 + 112) = v47;
    os_log(_:dso:log:_:_:)(v59, &_mh_execute_header, v60, "Ignoring setWildKeyBase update because wildIndexFallback for beacon %@ -- existing: %llu new: %llu", 98, 2, v61);
    swift_bridgeObjectRelease();
LABEL_13:
    v36 = v87;
    (*((void (**)(const void *, _QWORD))v87 + 2))(v87, 0);
    v65 = v39;
LABEL_15:
    sub_1000126B0(v65, type metadata accessor for KeySyncRecord);
    goto LABEL_16;
  }
  v29 = sub_100004048((uint64_t)v12, &qword_1010F7AE0);
  v30 = static os_log_type_t.error.getter(v29);
  v31 = swift_allocObject(v88, 72, 7);
  *(_OWORD *)(v31 + 16) = xmmword_100E22B00;
  v32 = UUID.uuidString.getter(v31);
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  *(_QWORD *)(v31 + 64) = v27;
  *(_QWORD *)(v31 + 32) = v32;
  *(_QWORD *)(v31 + 40) = v33;
  v34 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v35 = (void *)static OS_os_log.default.getter(v34);
  os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v35, "KeySyncRecord with the identifier not found - %@", 48, 2, v31);
  swift_bridgeObjectRelease();

  v36 = v87;
  (*((void (**)(const void *, _QWORD))v87 + 2))(v87, 0);
LABEL_16:
  _Block_release(v36);
  _Block_release(v36);
}

uint64_t sub_1004CC5D4(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v12 = sub_10001A9A8(&qword_1010FD0B0);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v14, &qword_1010FD0B0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v12);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v16 = *v14;
    v17 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    v18 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100E22B00;
    v31 = v16;
    swift_errorRetain(v16);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v21 = String.init<A>(describing:)(&v31, v20);
    v23 = v22;
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = sub_10001AA00();
    *(_QWORD *)(v19 + 32) = v21;
    *(_QWORD *)(v19 + 40) = v23;
    v24 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v25 = (void *)static OS_os_log.default.getter(v24);
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v25, a5, a6, 2, v19);
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, 0);
    return swift_errorRelease(v16);
  }
  else
  {
    v27 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v28 = (void *)static OS_os_log.default.getter(v27);
    v29 = static os_log_type_t.default.getter(v28);
    os_log(_:dso:log:type:_:)(a3, a4, 2, &_mh_execute_header, v28, v29, _swiftEmptyArrayStorage);

    (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, 1);
    return sub_100004048((uint64_t)v14, &qword_1010FD0B0);
  }
}

void sub_1004CC7EC(unint64_t a1, uint64_t a2, uint64_t *a3, const void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const void *v58;
  _BYTE v59[8];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  unint64_t v67;
  void (**v68)(_QWORD, _QWORD);
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v71 = a2;
  v67 = a1;
  v63 = sub_10001A9A8(&qword_1010FD0B0);
  __chkstk_darwin(v63);
  v64 = (uint64_t)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010F7AE0);
  __chkstk_darwin(v7);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for KeySyncRecord(0);
  v70 = *((_QWORD *)v10 - 1);
  v11 = __chkstk_darwin(v10);
  v65 = (uint64_t)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v72 = (uint64_t)&v62 - v13;
  _Block_copy(a4);
  v68 = (void (**)(_QWORD, _QWORD))a4;
  v14 = _Block_copy(a4);
  v69 = static os_log_type_t.info.getter(v14);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v15 = qword_1011B7D28;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v16, 112, 7);
  v66 = xmmword_100E22B10;
  *(_OWORD *)(v17 + 16) = xmmword_100E22B10;
  v73 = *a3;
  v18 = sub_10001A9A8(&qword_1010F49B8);
  v19 = String.init<A>(describing:)(&v73, v18);
  v21 = v20;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  v22 = sub_10001AA00();
  *(_QWORD *)(v17 + 32) = v19;
  *(_QWORD *)(v17 + 40) = v21;
  *(_QWORD *)(v17 + 96) = &type metadata for String;
  *(_QWORD *)(v17 + 104) = v22;
  *(_QWORD *)(v17 + 64) = v22;
  *(_QWORD *)(v17 + 72) = 0xD00000000000002FLL;
  *(_QWORD *)(v17 + 80) = 0x8000000100ED78B0;
  os_log(_:dso:log:_:_:)(v69, &_mh_execute_header, v15, "%@: %@", 6, 2, v17);
  swift_bridgeObjectRelease();
  sub_10081AECC(v71, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v70 + 48))(v9, 1, v10) == 1)
  {
    v23 = sub_100004048((uint64_t)v9, &qword_1010F7AE0);
    v24 = static os_log_type_t.error.getter(v23);
    v25 = swift_allocObject(v16, 72, 7);
    *(_OWORD *)(v25 + 16) = xmmword_100E22B00;
    v26 = UUID.uuidString.getter(v25);
    *(_QWORD *)(v25 + 56) = &type metadata for String;
    *(_QWORD *)(v25 + 64) = v22;
    *(_QWORD *)(v25 + 32) = v26;
    *(_QWORD *)(v25 + 40) = v27;
    v28 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v29 = (void *)static OS_os_log.default.getter(v28);
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v29, "KeySyncRecord with the identifier not found - %@", 48, 2, v25);
    swift_bridgeObjectRelease();

    v30 = v68;
    v68[2](v68, 0);
LABEL_17:
    _Block_release(v30);
    _Block_release(v30);
    return;
  }
  v31 = sub_1000126EC((uint64_t)v9, v72, type metadata accessor for KeySyncRecord);
  v32 = v67;
  if ((v67 & 0x8000000000000000) == 0)
  {
    v33 = static os_log_type_t.info.getter(v31);
    v34 = qword_1011B7D28;
    v35 = swift_allocObject(v16, 112, 7);
    *(_OWORD *)(v35 + 16) = v66;
    *(_QWORD *)(v35 + 56) = &type metadata for UInt64;
    *(_QWORD *)(v35 + 64) = &protocol witness table for UInt64;
    *(_QWORD *)(v35 + 32) = v32;
    v36 = UUID.uuidString.getter(v35);
    *(_QWORD *)(v35 + 96) = &type metadata for String;
    *(_QWORD *)(v35 + 104) = v22;
    *(_QWORD *)(v35 + 72) = v36;
    *(_QWORD *)(v35 + 80) = v37;
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "setCurrentWildKeyIndex called: index: %llu, beaconUUID: %@", 58, 2, v35);
    v38 = swift_bridgeObjectRelease();
    v39 = *(_QWORD *)(v72 + v10[10]);
    if (v39 > v32)
    {
      v40 = static os_log_type_t.error.getter(v38);
      v41 = qword_1011B7D28;
      v42 = swift_allocObject(v16, 152, 7);
      *(_OWORD *)(v42 + 16) = xmmword_100E221E0;
      v43 = UUID.uuidString.getter(v42);
      *(_QWORD *)(v42 + 56) = &type metadata for String;
      *(_QWORD *)(v42 + 64) = v22;
      *(_QWORD *)(v42 + 32) = v43;
      *(_QWORD *)(v42 + 40) = v44;
      *(_QWORD *)(v42 + 96) = &type metadata for UInt64;
      *(_QWORD *)(v42 + 104) = &protocol witness table for UInt64;
      *(_QWORD *)(v42 + 112) = v32;
      *(_QWORD *)(v42 + 72) = v39;
      *(_QWORD *)(v42 + 136) = &type metadata for UInt64;
      *(_QWORD *)(v42 + 144) = &protocol witness table for UInt64;
      os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Ignoring setCurrentWildKeyindex update because wildIndexFallback for beacon %@ -- existing: %llu new: %llu", 106, 2, v42);
      swift_bridgeObjectRelease();
      v30 = v68;
      v68[2](v68, 0);
      v45 = v72;
LABEL_16:
      sub_1000126B0(v45, type metadata accessor for KeySyncRecord);
      goto LABEL_17;
    }
    v46 = v65;
    v47 = sub_10005972C(v72, v65, type metadata accessor for KeySyncRecord);
    *(_QWORD *)(v46 + v10[10]) = v32;
    v48 = v46 + v10[8];
    if ((*(_BYTE *)(v48 + 8) & 1) != 0
      || (v49 = v46 + v10[9], (*(_BYTE *)(v49 + 8) & 1) != 0)
      || (v50 = *(_QWORD *)v48, v32 < *(_QWORD *)v48))
    {
LABEL_15:
      __chkstk_darwin(v47);
      v60 = v56;
      v61 = v46;
      OS_dispatch_queue.sync<A>(execute:)(sub_1004D65A8, v59, &type metadata for () + 1);
      sub_1007EEF64(8);
      v57 = v64;
      sub_10005972C(v46, v64, type metadata accessor for KeySyncRecord);
      v30 = v68;
      swift_storeEnumTagMultiPayload(v57, v63, 0);
      _Block_copy(v30);
      sub_1004CC5D4(v57, (uint64_t)v30, "Successfully updated current wild key index", 43, "Could not update current wild key index. Error - %@", 51);
      _Block_release(v30);
      sub_100004048(v57, &qword_1010FD0B0);
      sub_1000126B0(v46, type metadata accessor for KeySyncRecord);
      v45 = v72;
      goto LABEL_16;
    }
    v51 = *(_QWORD *)v49;
    if (v51)
    {
      v52 = (v32 - *(_QWORD *)v48) / v51 + 1;
      if (is_mul_ok(v52, v51))
      {
        v53 = v52 * v51;
        v54 = __CFADD__(v50, v53);
        v55 = v50 + v53;
        if (!v54)
        {
          *(_QWORD *)v48 = v55;
          *(_BYTE *)(v48 + 8) = 0;
          goto LABEL_15;
        }
        goto LABEL_20;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_20:
    __break(1u);
  }
  v58 = v68;
  _Block_release(v68);
  _Block_release(v58);
  _Block_release(v58);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
}

void sub_1004CCF54(uint64_t a1, uint64_t a2, _QWORD *a3, const void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  void (**v42)(const void *, _QWORD);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (**v81)(const void *, _QWORD);
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  _QWORD v85[3];
  uint64_t v86;
  uint64_t v87;

  v74 = a2;
  v82 = a1;
  v72 = sub_10001A9A8(&qword_1010FD0B0);
  __chkstk_darwin(v72);
  v73 = (uint64_t)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for Date(0);
  v69 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v68 = (uint64_t)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010F7AE0);
  __chkstk_darwin(v8);
  v77 = (uint64_t)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for KeySyncRecord(0);
  v76 = *(_QWORD *)(v78 - 8);
  v10 = __chkstk_darwin(v78);
  v71 = (uint64_t)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v75 = (uint64_t)&v67 - v12;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F47D0);
  __chkstk_darwin(v13);
  v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for KeyAlignmentRecord(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v79 = (uint64_t)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a4);
  v81 = (void (**)(const void *, _QWORD))a4;
  v19 = _Block_copy(a4);
  v20 = static os_log_type_t.info.getter(v19);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v21 = qword_1011B7D28;
  v80 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v22 = swift_allocObject(v80, 112, 7);
  *(_OWORD *)(v22 + 16) = xmmword_100E22B10;
  v85[0] = *a3;
  v23 = sub_10001A9A8(&qword_1010F49B8);
  v24 = String.init<A>(describing:)(v85, v23);
  v26 = v25;
  *(_QWORD *)(v22 + 56) = &type metadata for String;
  v27 = sub_10001AA00();
  *(_QWORD *)(v22 + 32) = v24;
  *(_QWORD *)(v22 + 40) = v26;
  *(_QWORD *)(v22 + 96) = &type metadata for String;
  *(_QWORD *)(v22 + 104) = v27;
  v28 = v27;
  *(_QWORD *)(v22 + 64) = v27;
  *(_QWORD *)(v22 + 72) = 0xD000000000000029;
  *(_QWORD *)(v22 + 80) = 0x8000000100ED76B0;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "%@: %@", 6, 2, v22);
  swift_bridgeObjectRelease();
  v29 = a3;
  v30 = a3[35];
  v31 = v82;
  sub_1008892B4((uint64_t)v15);
  v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
  v33 = v31;
  if (v32 == 1)
  {
    v34 = (uint64_t *)&unk_1010F47D0;
    v35 = (uint64_t)v15;
LABEL_7:
    v40 = sub_100004048(v35, v34);
    v41 = v80;
    v42 = v81;
    v43 = static os_log_type_t.error.getter(v40);
    v44 = swift_allocObject(v41, 72, 7);
    *(_OWORD *)(v44 + 16) = xmmword_100E22B00;
    v45 = UUID.uuidString.getter(v44);
    *(_QWORD *)(v44 + 56) = &type metadata for String;
    *(_QWORD *)(v44 + 64) = v28;
    *(_QWORD *)(v44 + 32) = v45;
    *(_QWORD *)(v44 + 40) = v46;
    v47 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v48 = (void *)static OS_os_log.default.getter(v47);
    os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, v48, "KeySyncRecord with the identifier not found - %@", 48, 2, v44);
    swift_bridgeObjectRelease();

    v42[2](v42, 0);
    goto LABEL_8;
  }
  v36 = v79;
  sub_1000126EC((uint64_t)v15, v79, type metadata accessor for KeyAlignmentRecord);
  v37 = v77;
  sub_10081AECC(v33, v77);
  v38 = v30;
  v39 = (int *)v78;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v37, 1, v78) == 1)
  {
    sub_1000126B0(v36, type metadata accessor for KeyAlignmentRecord);
    v34 = &qword_1010F7AE0;
    v35 = v37;
    goto LABEL_7;
  }
  v49 = v75;
  sub_1000126EC(v37, v75, type metadata accessor for KeySyncRecord);
  v50 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v50);
  *(&v67 - 4) = (uint64_t)v29;
  *(&v67 - 3) = v36;
  v51 = v74;
  *(&v67 - 2) = v74;
  v77 = v50;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd-saveKeyAlignment", 46, 2, sub_1004D2978, &v67 - 6, &type metadata for () + 1);
  v52 = v71;
  sub_10005972C(v49, v71, type metadata accessor for KeySyncRecord);
  *(_QWORD *)(v52 + v39[5]) = v51;
  v53 = v68;
  static Date.trustedNow.getter(v68);
  v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 40))(v52 + v39[7], v53, v70);
  v55 = v52 + v39[6];
  *(_QWORD *)v55 = 0;
  *(_BYTE *)(v55 + 8) = 1;
  v56 = v52 + v39[11];
  *(_QWORD *)v56 = 0;
  *(_BYTE *)(v56 + 8) = 1;
  v57 = v52 + v39[8];
  *(_QWORD *)v57 = 0;
  *(_BYTE *)(v57 + 8) = 1;
  v58 = v52 + v39[9];
  *(_QWORD *)v58 = 0;
  *(_BYTE *)(v58 + 8) = 1;
  __chkstk_darwin(v54);
  *(&v67 - 2) = v59;
  *(&v67 - 1) = v52;
  OS_dispatch_queue.sync<A>(execute:)(sub_1004D2994, &v67 - 4, &type metadata for () + 1);
  sub_1007EEF64(8);
  v60 = v73;
  sub_10005972C(v52, v73, type metadata accessor for KeySyncRecord);
  swift_storeEnumTagMultiPayload(v60, v72, 0);
  v42 = v81;
  _Block_copy(v81);
  sub_1004CC5D4(v60, (uint64_t)v42, "Successfully last seen key index.", 33, "Could not update last seen key index. Error - %@", 48);
  _Block_release(v42);
  sub_100004048(v60, &qword_1010FD0B0);
  sub_1000126B0(v52, type metadata accessor for KeySyncRecord);
  sub_10080B648(v82, (uint64_t)&v83);
  if (v84)
  {
    sub_10000F9FC(&v83, (uint64_t)v85);
    v61 = v86;
    v62 = v87;
    v63 = sub_10001AA44(v85, v86);
    v64 = sub_100854C8C((uint64_t)v63, v38, v61, v62);
    v65 = swift_allocObject(&unk_101079528, 32, 7);
    *(_QWORD *)(v65 + 16) = v51;
    *(_QWORD *)(v65 + 24) = v64;
    v66 = v64;
    static Transaction.asyncTask(name:block:)("ItemUpdateKeyIndexAnalytics", 27, 2, &unk_1010FD0C0, v65);

    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v85);
    sub_1000126B0(v75, type metadata accessor for KeySyncRecord);
    sub_1000126B0(v79, type metadata accessor for KeyAlignmentRecord);
  }
  else
  {
    sub_1000126B0(v75, type metadata accessor for KeySyncRecord);
    sub_1000126B0(v79, type metadata accessor for KeyAlignmentRecord);
    sub_100004048((uint64_t)&v83, (uint64_t *)&unk_1010EE310);
  }
LABEL_8:
  _Block_release(v42);
  _Block_release(v42);
}

uint64_t sub_1004CD78C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  unsigned int (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  Swift::String v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  BOOL v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  char v101;
  void (*v102)(char *, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  void *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(char *, uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  void (*v127)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v128)(uint64_t, uint64_t, uint64_t);
  void (*v129)(char *, uint64_t, uint64_t);
  char *v130;
  char *v131;
  char *v132;
  unsigned int (*v133)(uint64_t, uint64_t, uint64_t);
  void (*v134)(char *, uint64_t);
  uint64_t v135;
  uint64_t (*v136)(char *, uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v6 = v5;
  v126 = a4;
  v108 = a1;
  v148 = sub_10001A9A8(&qword_1010EF160);
  v10 = __chkstk_darwin(v148);
  v115 = (char *)&v107 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v107 - v12;
  v14 = sub_10001A9A8((uint64_t *)&unk_101102F70);
  v15 = __chkstk_darwin(v14);
  v114 = (uint64_t)&v107 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v107 - v17;
  v141 = type metadata accessor for UUID(0);
  v121 = *(_QWORD *)(v141 - 8);
  v19 = __chkstk_darwin(v141);
  v132 = (char *)&v107 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v22 = (char *)&v107 - v21;
  v23 = sub_10001A9A8(&qword_1010F2CA8);
  v24 = __chkstk_darwin(v23);
  v113 = (uint64_t)&v107 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v120 = (char *)&v107 - v26;
  v27 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v28 = __chkstk_darwin(v27);
  v30 = (char *)&v107 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v119 = (char *)&v107 - v31;
  v32 = type metadata accessor for Date(0);
  v140 = *(_QWORD *)(v32 - 8);
  v33 = __chkstk_darwin(v32);
  v110 = (char *)&v107 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v33);
  v131 = (char *)&v107 - v36;
  v107 = a2;
  if (a3 != a2)
  {
    v37 = 40 * a3 - 40;
    v138 = *(_QWORD *)(a5 + 280);
    v112 = (unint64_t)"Unable to derive commandKey!: ";
    v118 = (void *)0x8000000100ED7210;
    v116 = v13;
    v130 = v18;
    v111 = v30;
    v139 = result;
    v117 = v22;
LABEL_7:
    v41 = v108;
    v109 = v37;
    v42 = v37;
    v122 = a3;
    while (1)
    {
      v125 = v41;
      v43 = *v126;
      v124 = v42;
      v44 = v43 + v42;
      sub_100030784(v43 + v42 + 40, (uint64_t)&v145);
      sub_100030784(v44, (uint64_t)&v142);
      v45 = v146;
      v46 = v147;
      sub_10001AA44(&v145, v146);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v46 + 8) + 8) + 32))(v45);
      v47._countAndFlagsBits = 0xD000000000000015;
      v47._object = v118;
      prohibitAsyncContext(functionName:)(v47);
      __chkstk_darwin(v48);
      *(&v107 - 2) = v49;
      *(&v107 - 1) = (uint64_t)v22;
      v50 = v6;
      OS_dispatch_queue.sync<A>(execute:)(sub_1004D6554, &v107 - 4, v148);
      v51 = sub_10001A9A8(&qword_1010EF168);
      v136 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 48);
      v52 = v136(v13, 1, v51);
      v137 = v51;
      if (v52 == 1)
      {
        sub_100004048((uint64_t)v13, &qword_1010EF160);
        v53 = sub_10001A9A8(&qword_101102F80);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v18, 1, 1, v53);
      }
      else
      {
        v54 = v13[*(int *)(v51 + 48)];
        v55 = sub_10001A9A8(&qword_101102F80);
        v56 = *(int *)(v55 + 48);
        sub_1000126EC((uint64_t)v13, (uint64_t)v18, type metadata accessor for BeaconStatus);
        v18[v56] = v54;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v18, 0, 1, v55);
      }
      v57 = (uint64_t)v120;
      v58 = sub_10001A9A8(&qword_101102F80);
      v59 = *(_QWORD *)(v58 - 8);
      v60 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48);
      if (v60(v18, 1, v58) == 1)
      {
        sub_100004048((uint64_t)v18, (uint64_t *)&unk_101102F70);
        v61 = type metadata accessor for BeaconStatus(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v57, 1, 1, v61);
      }
      else
      {
        sub_1000126EC((uint64_t)v18, v57, type metadata accessor for BeaconStatus);
        v61 = type metadata accessor for BeaconStatus(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v57, 0, 1, v61);
      }
      v62 = *(void (**)(char *, uint64_t))(v121 + 8);
      v62(v22, v141);
      type metadata accessor for BeaconStatus(0);
      v135 = *(_QWORD *)(v61 - 8);
      v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48);
      if (v63(v57, 1, v61) == 1)
        break;
      v133 = v63;
      v134 = v62;
      v64 = v58;
      v65 = (_QWORD *)v140;
      v66 = v57 + *(int *)(v61 + 24);
      v67 = v119;
      v68 = v139;
      v129 = *(void (**)(char *, uint64_t, uint64_t))(v140 + 16);
      v129(v119, v66, v139);
      v69 = v57;
      v70 = (uint64_t)v67;
      sub_1000126B0(v69, type metadata accessor for BeaconStatus);
      v71 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v65[7];
      v71((char *)v70, 0, 1, v68);
      v128 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v65[6];
      if (v128(v70, 1, v68) == 1)
      {
        v39 = v70;
        v13 = v116;
        v18 = v130;
        v22 = v117;
        v6 = v50;
        v40 = v122;
        goto LABEL_5;
      }
      v127 = v71;
      v123 = (void (*)(char *, uint64_t, uint64_t))v65[4];
      v123(v131, v70, v68);
      v73 = v143;
      v72 = v144;
      sub_10001AA44(&v142, v143);
      v74 = v132;
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v72 + 8) + 8) + 32))(v73);
      v75._object = (void *)(v112 | 0x8000000000000000);
      v75._countAndFlagsBits = 0xD000000000000015;
      prohibitAsyncContext(functionName:)(v75);
      __chkstk_darwin(v76);
      *(&v107 - 2) = v77;
      *(&v107 - 1) = (uint64_t)v74;
      v78 = v115;
      OS_dispatch_queue.sync<A>(execute:)(sub_1004D6554, &v107 - 4, v148);
      v79 = (uint64_t)v78;
      v80 = v78;
      v81 = v137;
      if (v136(v80, 1, v137) == 1)
      {
        sub_100004048(v79, &qword_1010EF160);
        v82 = 1;
        v83 = v114;
      }
      else
      {
        v84 = v79;
        v85 = *(_BYTE *)(v79 + *(int *)(v81 + 48));
        v86 = *(int *)(v64 + 48);
        v83 = v114;
        sub_1000126EC(v84, v114, type metadata accessor for BeaconStatus);
        v82 = 0;
        *(_BYTE *)(v83 + v86) = v85;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v83, v82, 1, v64);
      v87 = v60((char *)v83, 1, v64) == 1;
      v88 = v134;
      v89 = v83;
      if (v87)
      {
        sub_100004048(v83, (uint64_t *)&unk_101102F70);
        v91 = 1;
        v40 = v122;
        v13 = v116;
        v90 = v113;
      }
      else
      {
        v90 = v113;
        sub_1000126EC(v89, v113, type metadata accessor for BeaconStatus);
        v91 = 0;
        v40 = v122;
        v13 = v116;
      }
      v92 = v133;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v135 + 56))(v90, v91, 1, v61);
      v88(v132, v141);
      if (v92(v90, 1, v61) == 1)
      {
        sub_100004048(v90, &qword_1010F2CA8);
        v93 = (uint64_t)v111;
        v94 = v139;
        v127(v111, 1, 1, v139);
        v18 = v130;
        v22 = v117;
LABEL_31:
        (*(void (**)(char *, uint64_t))(v140 + 8))(v131, v94);
        v39 = v93;
        v6 = v50;
        goto LABEL_5;
      }
      v93 = (uint64_t)v111;
      v94 = v139;
      v129(v111, v90 + *(int *)(v61 + 24), v139);
      sub_1000126B0(v90, type metadata accessor for BeaconStatus);
      v127((char *)v93, 0, 1, v94);
      v95 = v128(v93, 1, v94);
      v18 = v130;
      v22 = v117;
      if (v95 == 1)
        goto LABEL_31;
      v96 = v117;
      v97 = v40;
      v98 = v13;
      v99 = v110;
      v123(v110, v93, v94);
      v100 = v131;
      v101 = static Date.> infix(_:_:)(v131, v99);
      v102 = *(void (**)(char *, uint64_t))(v140 + 8);
      v102(v99, v94);
      v102(v100, v94);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v142);
      result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v145);
      if ((v101 & 1) == 0)
      {
        v6 = v50;
        v13 = v98;
        v40 = v97;
        v22 = v96;
        v18 = v130;
LABEL_6:
        a3 = v40 + 1;
        v37 = v109 + 40;
        if (a3 == v107)
          return result;
        goto LABEL_7;
      }
      v103 = *v126;
      if (!*v126)
      {
        __break(1u);
        return result;
      }
      v6 = v50;
      v13 = v98;
      v104 = v124;
      v105 = v103 + v124;
      sub_10000F9FC((__int128 *)(v103 + v124 + 40), (uint64_t)&v145);
      v106 = *(_OWORD *)(v105 + 16);
      *(_OWORD *)(v105 + 40) = *(_OWORD *)v105;
      *(_OWORD *)(v105 + 56) = v106;
      *(_QWORD *)(v105 + 72) = *(_QWORD *)(v105 + 32);
      result = sub_10000F9FC(&v145, v105);
      v42 = v104 - 40;
      v41 = v125 + 1;
      v40 = v97;
      v87 = v97 == v125 + 1;
      v22 = v96;
      v18 = v130;
      if (v87)
        goto LABEL_6;
    }
    sub_100004048(v57, &qword_1010F2CA8);
    v38 = v119;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v140 + 56))(v119, 1, 1, v139);
    v39 = (uint64_t)v38;
    v13 = v116;
    v18 = v130;
    v22 = v117;
    v40 = v122;
LABEL_5:
    sub_100004048(v39, (uint64_t *)&unk_1010EA690);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v142);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v145);
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1004CE278(uint64_t *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::Int v54;
  Swift::Int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  Swift::Int v63;
  char *v64;
  uint64_t v65;
  Swift::Int v66;
  uint64_t v67;
  Swift::Int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  Swift::String v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t, uint64_t);
  int v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int (*v91)(uint64_t, uint64_t, uint64_t);
  BOOL v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  unsigned int (*v100)(uint64_t, uint64_t, uint64_t);
  int v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  Swift::String v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int (*v117)(uint64_t, uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  int v120;
  char *v121;
  char *v122;
  void (*v123)(char *, uint64_t);
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  Swift::Int v128;
  Swift::Int v129;
  Swift::Int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  void (*v135)(char *, uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  Swift::Int v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  Swift::String v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  void (*v159)(char *, uint64_t);
  uint64_t v160;
  uint64_t (*v161)(uint64_t, uint64_t, uint64_t);
  int v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(char *, uint64_t);
  uint64_t v166;
  uint64_t v167;
  char *v168;
  Swift::String v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  char *v184;
  unsigned int v185;
  char *v186;
  char *v187;
  char v188;
  void (*v189)(char *, uint64_t);
  uint64_t v190;
  char *v191;
  uint64_t v192;
  __int128 v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char *v197;
  char *v198;
  Swift::Int v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  BOOL v211;
  unint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  BOOL v221;
  uint64_t v222;
  char v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  BOOL v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  char *v244;
  unint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  char *v251;
  unint64_t v252;
  unint64_t v253;
  _QWORD *v254;
  uint64_t result;
  uint64_t *v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  char *v263;
  unint64_t v264;
  char *v265;
  char *v266;
  char *v267;
  unint64_t v268;
  char v269[8];
  uint64_t v270;
  char *v271;
  uint64_t v272;
  _QWORD *v273;
  Swift::Int v274;
  char *v275;
  char *v276;
  char *v277;
  uint64_t v278;
  char *v279;
  char *v280;
  char *v281;
  void (*v282)(char *, uint64_t, uint64_t);
  void *v283;
  char *v284;
  char *v285;
  uint64_t v286;
  char *v287;
  uint64_t (*v288)(uint64_t, uint64_t, uint64_t);
  Swift::Int v289;
  char *v290;
  char *v291;
  uint64_t v292;
  char *v293;
  char *v294;
  char *v295;
  char *v296;
  uint64_t v297;
  char *v298;
  char *v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  Swift::Int v304;
  uint64_t v305;
  void (*v306)(char *, char *, uint64_t);
  char *v307;
  uint64_t v308;
  void (*v309)(char *, uint64_t);
  unsigned int (*v310)(char *, uint64_t, uint64_t);
  void (*v311)(char *, uint64_t, uint64_t);
  char *v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t (*v316)(char *, uint64_t, uint64_t);
  uint64_t v317;
  char *v318;
  unint64_t v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  __int128 v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;

  v3 = v2;
  v322 = sub_10001A9A8(&qword_1010EF160);
  v6 = __chkstk_darwin(v322);
  v298 = (char *)&v272 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v272 - v9;
  v11 = __chkstk_darwin(v8);
  v279 = (char *)&v272 - v12;
  __chkstk_darwin(v11);
  v287 = (char *)&v272 - v13;
  v14 = sub_10001A9A8((uint64_t *)&unk_101102F70);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v272 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v301 = (uint64_t)&v272 - v19;
  v20 = __chkstk_darwin(v18);
  v278 = (uint64_t)&v272 - v21;
  __chkstk_darwin(v20);
  v286 = (uint64_t)&v272 - v22;
  v321 = type metadata accessor for UUID(0);
  v302 = *(_QWORD *)(v321 - 8);
  v23 = __chkstk_darwin(v321);
  v313 = (char *)&v272 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v320 = (char *)&v272 - v26;
  v27 = __chkstk_darwin(v25);
  v281 = (char *)&v272 - v28;
  __chkstk_darwin(v27);
  v290 = (char *)&v272 - v29;
  v30 = sub_10001A9A8(&qword_1010F2CA8);
  v31 = __chkstk_darwin(v30);
  v297 = (uint64_t)&v272 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v300 = (char *)&v272 - v34;
  v35 = __chkstk_darwin(v33);
  v277 = (char *)&v272 - v36;
  __chkstk_darwin(v35);
  v285 = (char *)&v272 - v37;
  v38 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v39 = __chkstk_darwin(v38);
  v296 = (char *)&v272 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __chkstk_darwin(v39);
  v299 = (char *)&v272 - v42;
  v43 = __chkstk_darwin(v41);
  v276 = (char *)&v272 - v44;
  __chkstk_darwin(v43);
  v284 = (char *)&v272 - v45;
  v46 = type metadata accessor for Date(0);
  v323 = *(_QWORD *)(v46 - 8);
  v47 = __chkstk_darwin(v46);
  v294 = (char *)&v272 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __chkstk_darwin(v47);
  v312 = (char *)&v272 - v50;
  v51 = __chkstk_darwin(v49);
  v275 = (char *)&v272 - v52;
  __chkstk_darwin(v51);
  v280 = (char *)&v272 - v53;
  v324 = a1;
  v54 = a1[1];
  v292 = a2;
  swift_retain_n(a2, 3);
  v55 = _minimumMergeRunLength(_:)(v54);
  if (v55 >= v54)
  {
    if (v54 < 0)
      goto LABEL_188;
    if (v54)
    {
      v60 = v292;
      swift_retain();
      sub_1004CD78C(0, v54, 1, v324, v60);
      v61 = v60;
      v62 = 3;
    }
    else
    {
      v61 = v292;
      v62 = 2;
    }
    swift_release_n(v61, v62);
    return swift_release();
  }
  if (v54 >= 0)
    v56 = v54;
  else
    v56 = v54 + 1;
  if (v54 < -1)
    goto LABEL_196;
  v274 = v55;
  if (v54 < 2)
  {
    v291 = (char *)&_swiftEmptyArrayStorage[4];
    v273 = _swiftEmptyArrayStorage;
    if (v54 != 1)
    {
      v196 = _swiftEmptyArrayStorage[2];
      v64 = (char *)_swiftEmptyArrayStorage;
LABEL_152:
      v331 = v3;
      if (v196 >= 2)
      {
        v256 = (uint64_t *)*v324;
        v324 = (uint64_t *)*v324;
        v257 = v292;
        do
        {
          v258 = v196 - 2;
          if (v196 < 2)
            goto LABEL_182;
          if (!v256)
            goto LABEL_195;
          v259 = v64;
          v260 = *(_QWORD *)&v64[16 * v258 + 32];
          v261 = *(_QWORD *)&v64[16 * v196 + 24];
          v262 = (char *)&v256[5 * v260];
          v263 = (char *)&v256[5 * *(_QWORD *)&v64[16 * v196 + 16]];
          v264 = (unint64_t)&v256[5 * v261];
          swift_retain();
          v265 = v262;
          v266 = v331;
          sub_1004A59E4(v265, v263, v264, v291, v257);
          v331 = v266;
          if (v266)
          {
            swift_bridgeObjectRelease();
            goto LABEL_166;
          }
          if (v261 < v260)
            goto LABEL_184;
          if ((swift_isUniquelyReferenced_nonNull_native(v259) & 1) == 0)
            v259 = sub_10088F088((uint64_t)v259);
          if (v258 >= *((_QWORD *)v259 + 2))
            goto LABEL_185;
          v267 = &v259[16 * v258 + 32];
          *(_QWORD *)v267 = v260;
          *((_QWORD *)v267 + 1) = v261;
          v268 = *((_QWORD *)v259 + 2);
          if (v196 > v268)
            goto LABEL_186;
          memmove(&v259[16 * v196 + 16], &v259[16 * v196 + 32], 16 * (v268 - v196));
          v64 = v259;
          *((_QWORD *)v259 + 2) = v268 - 1;
          v196 = v268 - 1;
          v256 = v324;
        }
        while (v268 > 2);
      }
      swift_bridgeObjectRelease();
      v273[2] = 0;
      swift_release_n(v292, 2);
      swift_bridgeObjectRelease();
      return swift_release();
    }
  }
  else
  {
    v57 = v56 >> 1;
    v58 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v59 = static Array._allocateBufferUninitialized(minimumCapacity:)(v57, v58);
    *(_QWORD *)(v59 + 16) = v57;
    v273 = (_QWORD *)v59;
    v291 = (char *)(v59 + 32);
  }
  v63 = 0;
  v64 = (char *)_swiftEmptyArrayStorage;
  v319 = (unint64_t)"Unable to derive commandKey!: ";
  v283 = (void *)0x8000000100ED7210;
  v303 = v10;
  v295 = v17;
  v305 = v46;
  while (1)
  {
    v293 = v64;
    v65 = v63;
    v66 = v63 + 1;
    v289 = v63;
    if (v63 + 1 >= v54)
    {
      v124 = v292;
      goto LABEL_55;
    }
    v67 = *v324;
    v68 = v63;
    sub_100030784(*v324 + 40 * v66, (uint64_t)&v328);
    v308 = v67;
    sub_100030784(v67 + 40 * v68, (uint64_t)&v325);
    LODWORD(v317) = sub_10049C5EC(&v328, &v325, v292);
    if (v3)
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v325);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v328);
      swift_bridgeObjectRelease();
LABEL_166:
      v254 = v273;
LABEL_147:
      v254[2] = 0;
      swift_release_n(v292, 2);
      swift_bridgeObjectRelease();
      return swift_release();
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v325);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v328);
    v66 = v68 + 2;
    v65 = v68;
    if (v68 + 2 < v54)
      break;
    v124 = v292;
    if ((v317 & 1) != 0)
      goto LABEL_46;
LABEL_55:
    if (v66 < v54)
    {
      if (__OFSUB__(v66, v65))
        goto LABEL_187;
      if (v66 - v65 < v274)
      {
        if (__OFADD__(v65, v274))
          goto LABEL_189;
        if (v65 + v274 >= v54)
          v135 = (void (*)(char *, uint64_t, uint64_t))v54;
        else
          v135 = (void (*)(char *, uint64_t, uint64_t))(v65 + v274);
        if ((uint64_t)v135 < v65)
        {
LABEL_190:
          __break(1u);
          goto LABEL_191;
        }
        if ((void (*)(char *, uint64_t, uint64_t))v66 != v135)
        {
          v318 = *(char **)(v124 + 280);
          v136 = 40 * v66 - 40;
          v282 = v135;
          do
          {
            v288 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v136;
            v139 = (char *)v136;
            v304 = v66;
            while (1)
            {
              v308 = v65;
              v140 = *v324;
              v307 = v139;
              v141 = (uint64_t)&v139[v140];
              sub_100030784((uint64_t)&v139[v140 + 40], (uint64_t)&v328);
              sub_100030784(v141, (uint64_t)&v325);
              v142 = v329;
              v143 = v330;
              sub_10001AA44(&v328, v329);
              v144 = v320;
              (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v143 + 8) + 8) + 32))(v142);
              v145._object = (void *)(v319 | 0x8000000000000000);
              v145._countAndFlagsBits = 0xD000000000000015;
              prohibitAsyncContext(functionName:)(v145);
              __chkstk_darwin(v146);
              v270 = v147;
              v271 = v144;
              OS_dispatch_queue.sync<A>(execute:)(sub_1004CFF10, v269, v322);
              v148 = sub_10001A9A8(&qword_1010EF168);
              v316 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v148 - 8) + 48);
              v149 = v316(v10, 1, v148);
              v331 = v3;
              v317 = v148;
              if (v149 == 1)
              {
                sub_100004048((uint64_t)v10, &qword_1010EF160);
                v150 = sub_10001A9A8(&qword_101102F80);
                v151 = v301;
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 56))(v301, 1, 1, v150);
              }
              else
              {
                v152 = v10[*(int *)(v148 + 48)];
                v153 = sub_10001A9A8(&qword_101102F80);
                v154 = *(int *)(v153 + 48);
                v151 = v301;
                sub_1000126EC((uint64_t)v10, v301, type metadata accessor for BeaconStatus);
                *(_BYTE *)(v151 + v154) = v152;
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v153 - 8) + 56))(v151, 0, 1, v153);
              }
              v155 = (uint64_t)v300;
              v156 = sub_10001A9A8(&qword_101102F80);
              v314 = *(_QWORD *)(v156 - 8);
              v315 = *(_QWORD *)(v314 + 48);
              v92 = ((unsigned int (*)(uint64_t, uint64_t, uint64_t))v315)(v151, 1, v156) == 1;
              v157 = v299;
              if (v92)
              {
                sub_100004048(v151, (uint64_t *)&unk_101102F70);
                v158 = type metadata accessor for BeaconStatus(0);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v158 - 8) + 56))(v155, 1, 1, v158);
              }
              else
              {
                sub_1000126EC(v151, v155, type metadata accessor for BeaconStatus);
                v158 = type metadata accessor for BeaconStatus(0);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v158 - 8) + 56))(v155, 0, 1, v158);
              }
              v159 = *(void (**)(char *, uint64_t))(v302 + 8);
              v159(v320, v321);
              type metadata accessor for BeaconStatus(0);
              v160 = *(_QWORD *)(v158 - 8);
              v161 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v160 + 48);
              v162 = v161(v155, 1, v158);
              v163 = v323;
              if (v162 == 1)
              {
                sub_100004048(v155, &qword_1010F2CA8);
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v163 + 56))(v157, 1, 1, v46);
LABEL_66:
                v137 = (uint64_t)v157;
                v3 = v331;
                v10 = v303;
                goto LABEL_67;
              }
              v164 = v155 + *(int *)(v158 + 24);
              v311 = *(void (**)(char *, uint64_t, uint64_t))(v323 + 16);
              v311(v157, v164, v46);
              sub_1000126B0(v155, type metadata accessor for BeaconStatus);
              v165 = *(void (**)(char *, uint64_t))(v163 + 56);
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v165)(v157, 0, 1, v46);
              v310 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v163 + 48);
              if (v310(v157, 1, v46) == 1)
                goto LABEL_66;
              v309 = v165;
              v306 = *(void (**)(char *, char *, uint64_t))(v163 + 32);
              v306(v312, v157, v46);
              v166 = v326;
              v167 = v327;
              sub_10001AA44(&v325, v326);
              v168 = v313;
              (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v167 + 8) + 8) + 32))(v166);
              v169._object = (void *)(v319 | 0x8000000000000000);
              v169._countAndFlagsBits = 0xD000000000000015;
              prohibitAsyncContext(functionName:)(v169);
              __chkstk_darwin(v170);
              v270 = v171;
              v271 = v168;
              v172 = (uint64_t)v298;
              v173 = v331;
              OS_dispatch_queue.sync<A>(execute:)(sub_1004D6554, v269, v322);
              v331 = v173;
              v174 = v317;
              if (v316((char *)v172, 1, v317) == 1)
              {
                sub_100004048(v172, &qword_1010EF160);
                v175 = 1;
                v176 = (uint64_t)v295;
              }
              else
              {
                v177 = v172;
                v178 = *(_BYTE *)(v172 + *(int *)(v174 + 48));
                v179 = *(int *)(v156 + 48);
                v176 = (uint64_t)v295;
                sub_1000126EC(v177, (uint64_t)v295, type metadata accessor for BeaconStatus);
                v175 = 0;
                *(_BYTE *)(v176 + v179) = v178;
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v314 + 56))(v176, v175, 1, v156);
              v92 = ((unsigned int (*)(uint64_t, uint64_t, uint64_t))v315)(v176, 1, v156) == 1;
              v180 = v323;
              if (v92)
              {
                sub_100004048(v176, (uint64_t *)&unk_101102F70);
                v182 = 1;
                v181 = v297;
              }
              else
              {
                v181 = v297;
                sub_1000126EC(v176, v297, type metadata accessor for BeaconStatus);
                v182 = 0;
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v160 + 56))(v181, v182, 1, v158);
              v159(v313, v321);
              v183 = v161(v181, 1, v158);
              v46 = v305;
              if (v183 == 1)
                break;
              v184 = v296;
              v311(v296, v181 + *(int *)(v158 + 24), v305);
              sub_1000126B0(v181, type metadata accessor for BeaconStatus);
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v309)(v184, 0, 1, v46);
              v185 = v310(v184, 1, v46);
              v3 = v331;
              v10 = v303;
              if (v185 == 1)
                goto LABEL_92;
              v186 = v294;
              v306(v294, v184, v46);
              v187 = v312;
              v188 = static Date.> infix(_:_:)(v312, v186);
              v189 = *(void (**)(char *, uint64_t))(v180 + 8);
              v189(v186, v46);
              v189(v187, v46);
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v325);
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v328);
              if ((v188 & 1) == 0)
                goto LABEL_68;
              v190 = *v324;
              if (!*v324)
                goto LABEL_192;
              v191 = v307;
              v192 = (uint64_t)&v307[v190];
              sub_10000F9FC((__int128 *)&v307[v190 + 40], (uint64_t)&v328);
              v193 = *(_OWORD *)(v192 + 16);
              *(_OWORD *)(v192 + 40) = *(_OWORD *)v192;
              *(_OWORD *)(v192 + 56) = v193;
              *(_QWORD *)(v192 + 72) = *(_QWORD *)(v192 + 32);
              sub_10000F9FC(&v328, v192);
              v139 = v191 - 40;
              v65 = v308 + 1;
              v138 = v304;
              if (v304 == v308 + 1)
                goto LABEL_69;
            }
            sub_100004048(v181, &qword_1010F2CA8);
            v184 = v296;
            ((void (*)(char *, uint64_t, uint64_t, uint64_t))v309)(v296, 1, 1, v46);
            v3 = v331;
            v10 = v303;
LABEL_92:
            (*(void (**)(char *, uint64_t))(v180 + 8))(v312, v46);
            v137 = (uint64_t)v184;
LABEL_67:
            sub_100004048(v137, (uint64_t *)&unk_1010EA690);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v325);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v328);
LABEL_68:
            v138 = v304;
LABEL_69:
            v66 = v138 + 1;
            v136 = (uint64_t)v288 + 40;
            v65 = v289;
          }
          while ((void (*)(char *, uint64_t, uint64_t))v66 != v282);
          v66 = (Swift::Int)v282;
        }
      }
    }
    if (v66 < v65)
      goto LABEL_183;
    v304 = v66;
    if ((swift_isUniquelyReferenced_nonNull_native(v293) & 1) != 0)
      v64 = v293;
    else
      v64 = sub_10088E710(0, *((_QWORD *)v293 + 2) + 1, 1, v293);
    v195 = *((_QWORD *)v64 + 2);
    v194 = *((_QWORD *)v64 + 3);
    v196 = v195 + 1;
    if (v195 >= v194 >> 1)
      v64 = sub_10088E710((char *)(v194 > 1), v195 + 1, 1, v64);
    *((_QWORD *)v64 + 2) = v196;
    v197 = v64 + 32;
    v198 = &v64[16 * v195 + 32];
    v199 = v304;
    *(_QWORD *)v198 = v289;
    *((_QWORD *)v198 + 1) = v199;
    if (v195)
    {
      v293 = v64;
      while (1)
      {
        v200 = v196 - 1;
        if (v196 >= 4)
        {
          v205 = &v197[16 * v196];
          v206 = *((_QWORD *)v205 - 8);
          v207 = *((_QWORD *)v205 - 7);
          v211 = __OFSUB__(v207, v206);
          v208 = v207 - v206;
          if (v211)
            goto LABEL_171;
          v210 = *((_QWORD *)v205 - 6);
          v209 = *((_QWORD *)v205 - 5);
          v211 = __OFSUB__(v209, v210);
          v203 = v209 - v210;
          v204 = v211;
          if (v211)
            goto LABEL_172;
          v212 = v196 - 2;
          v213 = &v197[16 * v196 - 32];
          v215 = *(_QWORD *)v213;
          v214 = *((_QWORD *)v213 + 1);
          v211 = __OFSUB__(v214, v215);
          v216 = v214 - v215;
          if (v211)
            goto LABEL_174;
          v211 = __OFADD__(v203, v216);
          v217 = v203 + v216;
          if (v211)
            goto LABEL_177;
          if (v217 >= v208)
          {
            v235 = &v197[16 * v200];
            v237 = *(_QWORD *)v235;
            v236 = *((_QWORD *)v235 + 1);
            v211 = __OFSUB__(v236, v237);
            v238 = v236 - v237;
            if (v211)
              goto LABEL_181;
            v228 = v203 < v238;
            goto LABEL_132;
          }
        }
        else
        {
          if (v196 != 3)
          {
            v229 = *((_QWORD *)v64 + 4);
            v230 = *((_QWORD *)v64 + 5);
            v211 = __OFSUB__(v230, v229);
            v222 = v230 - v229;
            v223 = v211;
            goto LABEL_126;
          }
          v202 = *((_QWORD *)v64 + 4);
          v201 = *((_QWORD *)v64 + 5);
          v211 = __OFSUB__(v201, v202);
          v203 = v201 - v202;
          v204 = v211;
        }
        if ((v204 & 1) != 0)
          goto LABEL_173;
        v212 = v196 - 2;
        v218 = &v197[16 * v196 - 32];
        v220 = *(_QWORD *)v218;
        v219 = *((_QWORD *)v218 + 1);
        v221 = __OFSUB__(v219, v220);
        v222 = v219 - v220;
        v223 = v221;
        if (v221)
          goto LABEL_176;
        v224 = &v197[16 * v200];
        v226 = *(_QWORD *)v224;
        v225 = *((_QWORD *)v224 + 1);
        v211 = __OFSUB__(v225, v226);
        v227 = v225 - v226;
        if (v211)
          goto LABEL_179;
        if (__OFADD__(v222, v227))
          goto LABEL_180;
        if (v222 + v227 >= v203)
        {
          v228 = v203 < v227;
LABEL_132:
          if (v228)
            v200 = v212;
          goto LABEL_134;
        }
LABEL_126:
        if ((v223 & 1) != 0)
          goto LABEL_175;
        v231 = &v197[16 * v200];
        v233 = *(_QWORD *)v231;
        v232 = *((_QWORD *)v231 + 1);
        v211 = __OFSUB__(v232, v233);
        v234 = v232 - v233;
        if (v211)
          goto LABEL_178;
        if (v234 < v222)
        {
          v64 = v293;
          goto LABEL_143;
        }
LABEL_134:
        v239 = v200 - 1;
        if (v200 - 1 >= v196)
        {
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
          goto LABEL_190;
        }
        v240 = *v324;
        if (!*v324)
          goto LABEL_193;
        v241 = v3;
        v242 = &v197[16 * v239];
        v243 = *(_QWORD *)v242;
        v244 = v197;
        v245 = v200;
        v246 = &v197[16 * v200];
        v247 = *(_QWORD *)v246;
        v248 = *((_QWORD *)v246 + 1);
        v331 = (char *)(v240 + 40 * *(_QWORD *)v242);
        v318 = (char *)(v240 + 40 * v247);
        v249 = v240 + 40 * v248;
        v250 = v292;
        swift_retain();
        sub_1004A59E4(v331, v318, v249, v291, v250);
        if (v241)
        {
          swift_bridgeObjectRelease();
          v254 = v273;
          goto LABEL_147;
        }
        v251 = v293;
        if (v248 < v243)
          goto LABEL_168;
        if (v245 > *((_QWORD *)v293 + 2))
          goto LABEL_169;
        v252 = v245;
        *(_QWORD *)v242 = v243;
        *(_QWORD *)&v244[16 * v239 + 8] = v248;
        v253 = *((_QWORD *)v251 + 2);
        if (v252 >= v253)
          goto LABEL_170;
        v197 = v244;
        v196 = v253 - 1;
        memmove(v246, v246 + 16, 16 * (v253 - 1 - v252));
        v64 = v293;
        *((_QWORD *)v293 + 2) = v253 - 1;
        v10 = v303;
        v46 = v305;
        v3 = 0;
        if (v253 <= 2)
          goto LABEL_143;
      }
    }
    v196 = 1;
LABEL_143:
    v54 = v324[1];
    v63 = v304;
    if (v304 >= v54)
      goto LABEL_152;
  }
  v318 = *(char **)(v292 + 280);
  v69 = v308 + 40 * v68 + 40;
  v311 = (void (*)(char *, uint64_t, uint64_t))v54;
  while (1)
  {
    v304 = v66;
    sub_100030784(v69 + 40, (uint64_t)&v328);
    sub_100030784(v69, (uint64_t)&v325);
    v71 = v329;
    v70 = v330;
    sub_10001AA44(&v328, v329);
    v72 = v290;
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v70 + 8) + 8) + 32))(v71);
    v73._countAndFlagsBits = 0xD000000000000015;
    v73._object = v283;
    prohibitAsyncContext(functionName:)(v73);
    __chkstk_darwin(v74);
    v270 = v75;
    v271 = v72;
    v76 = (uint64_t)v287;
    OS_dispatch_queue.sync<A>(execute:)(sub_1004D6554, v269, v322);
    v77 = sub_10001A9A8(&qword_1010EF168);
    v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 48);
    v79 = v78(v76, 1, v77);
    v331 = v3;
    v316 = (uint64_t (*)(char *, uint64_t, uint64_t))v78;
    if (v79 == 1)
    {
      sub_100004048(v76, &qword_1010EF160);
      v80 = sub_10001A9A8(&qword_101102F80);
      v81 = v286;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v286, 1, 1, v80);
    }
    else
    {
      v82 = *(_BYTE *)(v76 + *(int *)(v77 + 48));
      v83 = sub_10001A9A8(&qword_101102F80);
      v84 = *(int *)(v83 + 48);
      v85 = v76;
      v86 = v286;
      sub_1000126EC(v85, v286, type metadata accessor for BeaconStatus);
      *(_BYTE *)(v86 + v84) = v82;
      v81 = v86;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v86, 0, 1, v83);
    }
    v87 = (uint64_t)v285;
    v88 = (uint64_t)v284;
    v89 = sub_10001A9A8(&qword_101102F80);
    v90 = *(_QWORD *)(v89 - 8);
    v91 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48);
    v92 = v91(v81, 1, v89) == 1;
    v315 = v90;
    if (v92)
    {
      sub_100004048(v81, (uint64_t *)&unk_101102F70);
      v93 = type metadata accessor for BeaconStatus(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v87, 1, 1, v93);
    }
    else
    {
      sub_1000126EC(v81, v87, type metadata accessor for BeaconStatus);
      v93 = type metadata accessor for BeaconStatus(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v87, 0, 1, v93);
    }
    v94 = *(void (**)(char *, uint64_t))(v302 + 8);
    v94(v290, v321);
    type metadata accessor for BeaconStatus(0);
    v95 = *(_QWORD *)(v93 - 8);
    v314 = *(_QWORD *)(v95 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v314)(v87, 1, v93) == 1)
    {
      sub_100004048(v87, &qword_1010F2CA8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v323 + 56))(v88, 1, 1, v305);
LABEL_26:
      sub_100004048(v88, (uint64_t *)&unk_1010EA690);
      v101 = 0;
      v3 = v331;
      v46 = v305;
      v54 = (Swift::Int)v311;
      goto LABEL_27;
    }
    v309 = v94;
    v310 = (unsigned int (*)(char *, uint64_t, uint64_t))v91;
    v96 = v87 + *(int *)(v93 + 24);
    v97 = v323;
    v98 = v305;
    v307 = *(char **)(v323 + 16);
    ((void (*)(uint64_t, uint64_t, uint64_t))v307)(v88, v96, v305);
    sub_1000126B0(v87, type metadata accessor for BeaconStatus);
    v99 = *(void (**)(char *, char *, uint64_t))(v97 + 56);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v99)(v88, 0, 1, v98);
    v100 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48);
    if (v100(v88, 1, v98) == 1)
      goto LABEL_26;
    v288 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v100;
    v306 = v99;
    v282 = *(void (**)(char *, uint64_t, uint64_t))(v323 + 32);
    v282(v280, v88, v305);
    v102 = v326;
    v103 = v327;
    sub_10001AA44(&v325, v326);
    v104 = v281;
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v103 + 8) + 8) + 32))(v102);
    v105._object = (void *)(v319 | 0x8000000000000000);
    v105._countAndFlagsBits = 0xD000000000000015;
    prohibitAsyncContext(functionName:)(v105);
    __chkstk_darwin(v106);
    v270 = v107;
    v271 = v104;
    v108 = (uint64_t)v279;
    v109 = v331;
    OS_dispatch_queue.sync<A>(execute:)(sub_1004D6554, v269, v322);
    v331 = v109;
    if (v316((char *)v108, 1, v77) == 1)
    {
      sub_100004048(v108, &qword_1010EF160);
      v110 = 1;
      v111 = v278;
    }
    else
    {
      v112 = v108;
      v113 = *(_BYTE *)(v108 + *(int *)(v77 + 48));
      v114 = *(int *)(v89 + 48);
      v111 = v278;
      sub_1000126EC(v112, v278, type metadata accessor for BeaconStatus);
      v110 = 0;
      *(_BYTE *)(v111 + v114) = v113;
    }
    v115 = (uint64_t)v277;
    v116 = (uint64_t)v276;
    v117 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v310;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v315 + 56))(v111, v110, 1, v89);
    v92 = v117(v111, 1, v89) == 1;
    v118 = v323;
    v54 = (Swift::Int)v311;
    if (v92)
    {
      sub_100004048(v111, (uint64_t *)&unk_101102F70);
      v119 = 1;
    }
    else
    {
      sub_1000126EC(v111, v115, type metadata accessor for BeaconStatus);
      v119 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56))(v115, v119, 1, v93);
    v309(v281, v321);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v314)(v115, 1, v93) == 1)
    {
      sub_100004048(v115, &qword_1010F2CA8);
      v46 = v305;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v306)(v116, 1, 1, v305);
      v3 = v331;
LABEL_39:
      (*(void (**)(char *, uint64_t))(v118 + 8))(v280, v46);
      sub_100004048(v116, (uint64_t *)&unk_1010EA690);
      v101 = 0;
      goto LABEL_27;
    }
    v46 = v305;
    ((void (*)(uint64_t, uint64_t, uint64_t))v307)(v116, v115 + *(int *)(v93 + 24), v305);
    sub_1000126B0(v115, type metadata accessor for BeaconStatus);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v306)(v116, 0, 1, v46);
    v120 = v288(v116, 1, v46);
    v3 = v331;
    if (v120 == 1)
      goto LABEL_39;
    v121 = v275;
    v282(v275, v116, v46);
    v122 = v280;
    v101 = static Date.> infix(_:_:)(v280, v121);
    v123 = *(void (**)(char *, uint64_t))(v118 + 8);
    v54 = (Swift::Int)v311;
    v123(v121, v46);
    v123(v122, v46);
LABEL_27:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v325);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v328);
    if (((v317 ^ v101) & 1) != 0)
      break;
    v66 = v304 + 1;
    v69 += 40;
    if (v54 == v304 + 1)
    {
      v66 = v54;
      v124 = v292;
      v10 = v303;
      goto LABEL_45;
    }
  }
  v124 = v292;
  v10 = v303;
  v66 = v304;
LABEL_45:
  v65 = v289;
  if ((v317 & 1) == 0)
    goto LABEL_55;
LABEL_46:
  if (v66 >= v65)
  {
    if (v65 < v66)
    {
      v311 = (void (*)(char *, uint64_t, uint64_t))v54;
      v125 = v3;
      v126 = 40 * v66 - 40;
      v127 = 40 * v65;
      v128 = v66;
      v129 = v65;
      do
      {
        if (v129 != --v128)
        {
          if (!v308)
            goto LABEL_194;
          v130 = v66;
          v131 = v308 + v127;
          v132 = v308 + v126;
          sub_10000F9FC((__int128 *)(v308 + v127), (uint64_t)&v328);
          v133 = *(_QWORD *)(v132 + 32);
          v134 = *(_OWORD *)(v132 + 16);
          *(_OWORD *)v131 = *(_OWORD *)v132;
          *(_OWORD *)(v131 + 16) = v134;
          *(_QWORD *)(v131 + 32) = v133;
          sub_10000F9FC(&v328, v132);
          v124 = v292;
          v66 = v130;
          v65 = v289;
        }
        ++v129;
        v126 -= 40;
        v127 += 40;
      }
      while (v129 < v128);
      v3 = v125;
      v46 = v305;
      v54 = (Swift::Int)v311;
    }
    goto LABEL_55;
  }
LABEL_191:
  __break(1u);
LABEL_192:
  swift_release_n(v292, 3);
  __break(1u);
LABEL_193:
  swift_release_n(v292, 3);
  __break(1u);
LABEL_194:
  swift_release_n(v292, 3);
  __break(1u);
LABEL_195:
  swift_release_n(v292, 3);
  __break(1u);
LABEL_196:
  swift_release_n(v292, 4);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_1004CFE08(_QWORD **a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7[2];

  v4 = *a1;
  swift_retain_n(a2, 2);
  if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
    v4 = (_QWORD *)sub_10088F1B4(v4);
  v5 = v4[2];
  v7[0] = (uint64_t)(v4 + 4);
  v7[1] = v5;
  swift_retain();
  sub_1004CE278(v7, a2);
  swift_release();
  *a1 = v4;
  return swift_release_n(a2, 2);
}

uint64_t sub_1004CFEA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 96))(v3, v4);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1004CFEF8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_10049BD64(a1, *(_QWORD **)(v2 + 16), a2);
}

uint64_t sub_1004CFF10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10082045C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1004CFF28()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004CFF4C(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*a1, a1[1]);
}

uint64_t sub_1004CFF74()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 16))(0, 0xF000000000000000);
}

Swift::Int sub_1004CFF9C(uint64_t a1)
{
  uint64_t v1;

  return sub_100496FF8(a1, *(void (**)(void *))(v1 + 16));
}

uint64_t sub_1004CFFA4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1004CFFD8()
{
  uint64_t v0;

  return sub_10048A308(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(unsigned __int8 *)(v0 + 33), *(_QWORD *)(v0 + 40), *(_DWORD *)(v0 + 48), *(void (**)(uint64_t))(v0 + 56));
}

BOOL sub_1004CFFF4(uint64_t a1)
{
  uint64_t v1;

  return sub_10075D318(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1004D0010@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1004D0038@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100BF77B0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1004D0054()
{
  return sub_1004D49C8((uint64_t)sub_1004D00C0);
}

uint64_t sub_1004D0060()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004D0074()
{
  return sub_1004D49C8((uint64_t)sub_1004D00A8);
}

uint64_t sub_1004D0080()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004D0090@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1005DB5E4(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1004D00A8@<X0>(unint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1008D56C4(v1, a1);
}

uint64_t sub_1004D00C0@<X0>(unint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1008D5DDC(v1, a1);
}

uint64_t sub_1004D00D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1010FD084);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  v4[3] = v3;
  v4[2] = v2;
  return swift_task_switch(sub_100482544, 0, 0);
}

uint64_t sub_1004D0144()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004D0158()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004D016C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004D0180()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004D0190()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004D01B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for DateInterval(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_1004D0250()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for DateInterval(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_10048D790(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + v2, *(void (**)(uint64_t))v3, *(_QWORD *)(v3 + 8));
}

uint64_t sub_1004D0298()
{
  return sub_1004D5FEC((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_1004D02AC()
{
  uint64_t v0;

  sub_10048E15C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(_QWORD *))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1004D02B8()
{
  return sub_1000077D8(48);
}

uint64_t sub_1004D02C0()
{
  uint64_t v0;

  return sub_10048AECC(*(_QWORD *)(v0 + 16), *(uint64_t (**)(_QWORD *))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1004D02CC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004D02F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1010FD09C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  v3[2] = v2;
  return swift_task_switch(sub_10048B364, 0, 0);
}

uint64_t sub_1004D0350()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1004D035C()
{
  return sub_1004D5FEC((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1004D036C()
{
  uint64_t v0;

  return sub_10048AC80(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(__n128))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1004D0378()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1004D0384()
{
  uint64_t v0;

  return (*(uint64_t (**)(BOOL))(v0 + 16))(*(_QWORD *)(*(_QWORD *)(v0 + 32) + 32) != 0);
}

uint64_t sub_1004D03B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7));
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 17, v5);
}

void sub_1004D0460()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_10049EEE8(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(_QWORD))(v0 + ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned __int8 *)(v0 + ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16));
}

uint64_t sub_1004D04CC()
{
  return sub_1000077D8(40);
}

uint64_t sub_1004D04D4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_1004D04F4()
{
  return sub_1000077D8(40);
}

uint64_t sub_1004D04FC()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004D0520()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1004D055C(uint64_t a1)
{
  uint64_t v1;

  sub_1004A0FC0(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1004D0568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v15 = v3 | v8 | 7;
  v10 = (((*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_bridgeObjectRelease();

  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v11(v0 + v4 + *(int *)(v1 + 24), v6);
  v12 = v0 + v4 + *(int *)(v1 + 28);
  v13 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11(v0 + v9, v6);
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v10 + 8, v15);
}

uint64_t sub_1004D06B0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1004A1A10(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(NSObject **)(v0 + 32), v0 + v2, v0 + v5, *(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1004D073C()
{
  uint64_t v0;

  return sub_1004A300C(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), (uint64_t)sub_100087A38);
}

uint64_t sub_1004D0760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 28);
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1004D0850(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_1004A1D04(a1, *(NSObject **)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1004D08A4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

void sub_1004D0B68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1004A2418(a1, *(NSObject **)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1004D0BCC()
{
  uint64_t v0;

  return sub_1004A2C38(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD *))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1004D0BD8(unint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (a1 < 4)
    return (a1 + 32);
  v3 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v4 = qword_1011B7D28;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v6 + 56) = &type metadata for Int;
  *(_QWORD *)(v6 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v6 + 32) = a1;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "unsupported beaconObservationType, %d", v7);
  swift_bridgeObjectRelease();
  return 32;
}

uint64_t sub_1004D0CB8(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  id v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  NSObject *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  id v48;
  uint64_t (*v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  id v57;
  uint64_t (*v58)(uint64_t);
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void (*v63)(uint64_t (*)(uint64_t), uint64_t);
  id v64;
  uint64_t v65;
  unint64_t v66;
  id v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char **v75;
  uint64_t *v76;
  id v77;
  double v78;
  double v79;
  void *v80;
  double v81;
  id v82;
  void *v83;
  double v84;
  id v85;
  void *v86;
  double v87;
  double v88;
  os_log_t v89;
  uint64_t v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  void *v104;
  id v105;
  uint64_t v106;
  BOOL v107;
  id v108;
  NSObject *v109;
  os_log_type_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  uint64_t (*v114)(uint64_t);
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  id v120;
  NSObject *v121;
  os_log_type_t v122;
  id v123;
  NSObject *v124;
  os_log_type_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  char *v138;
  char v139;
  id v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t result;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t (**v148)(_QWORD, _QWORD);
  uint64_t v149;
  char *v150;
  __n128 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  __n128 v157;
  uint64_t (*v158)(uint64_t);
  _QWORD *v159;
  __int128 v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t (*v164)(uint64_t);
  char *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t (*v170)(uint64_t);
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  os_log_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t (*v180)(uint64_t);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183[4];

  v148 = a3;
  v149 = a2;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v4);
  v6 = (char *)&v147 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = type metadata accessor for OwnedBeaconRecord(0);
  v154 = *(_QWORD *)(v155 - 8);
  v7 = __chkstk_darwin(v155);
  v153 = (uint64_t)&v147 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v152 = (uint64_t)&v147 - v9;
  v163 = type metadata accessor for BeaconObservation(0);
  v162 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v161 = (char *)&v147 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v179 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v147 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (uint64_t (*)(uint64_t))((char *)&v147 - v15);
  v181 = type metadata accessor for UUID(0);
  v173 = *(_QWORD *)(v181 - 8);
  __chkstk_darwin(v181);
  v180 = (uint64_t (*)(uint64_t))((char *)&v147 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((unint64_t)a1 >> 62)
  {
LABEL_54:
    if (a1 < 0)
      v143 = a1;
    else
      v143 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v18 = _CocoaArrayWrapper.endIndex.getter(v143);
    if (v18)
      goto LABEL_3;
LABEL_58:
    swift_bridgeObjectRelease();
    return v148[2](v148, 0);
  }
  v18 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v19 = swift_bridgeObjectRetain(a1);
  if (!v18)
    goto LABEL_58;
LABEL_3:
  v170 = 0;
  v168 = a1 & 0xC000000000000001;
  v171 = *(_QWORD *)(v149 + 280);
  v172 = v183;
  v150 = v6;
  v20 = 4;
  v19.n128_u64[0] = 141560067;
  v157 = v19;
  v156 = (char *)&type metadata for Any + 8;
  v19.n128_u64[0] = 141558275;
  v151 = v19;
  v160 = xmmword_100E22B00;
  v159 = &type metadata for () + 1;
  v169 = a1;
  v174 = v11;
  v165 = v14;
  v164 = (uint64_t (*)(uint64_t))v18;
  v158 = v16;
  while (1)
  {
    v6 = (char *)(v20 - 4);
    if (v168)
      v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20 - 4, a1);
    else
      v38 = *(id *)(a1 + 8 * v20);
    v39 = v38;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_54;
    }
    v177 = v20 - 3;
    v178 = v20;
    if (qword_1010E9F20 != -1)
      swift_once(&qword_1010E9F20, sub_100791C44);
    v40 = type metadata accessor for Logger(0);
    v41 = sub_10001A9E8(v40, (uint64_t)qword_1011B7648);
    v42 = v39;
    v176 = v41;
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.default.getter(v43);
    if (os_log_type_enabled(v43, (os_log_type_t)v44))
    {
      LODWORD(v167) = v44;
      v175 = v43;
      v45 = swift_slowAlloc(92, -1);
      v46 = swift_slowAlloc(160, -1);
      v166 = v46;
      *(_DWORD *)v45 = v157.n128_u32[0];
      v182 = 1752392040;
      v183[0] = v46;
      v47 = v172;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v172, v45 + 4, v45 + 12);
      *(_WORD *)(v45 + 12) = 2081;
      v48 = objc_msgSend(v42, "beaconIdentifier");
      v49 = v180;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v48);

      v50 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v51 = v181;
      v52 = dispatch thunk of CustomStringConvertible.description.getter(v181, v50);
      v54 = v53;
      (*(void (**)(uint64_t (*)(uint64_t), uint64_t))(v173 + 8))(v49, v51);
      v182 = sub_100016940(v52, v54, v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v47, v45 + 14, v45 + 22);

      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 22) = 2082;
      v55 = SPBeaconObservationType.description.getter((uint64_t)objc_msgSend(v42, "type"));
      v182 = sub_100016940(v55, v56, v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v47, v45 + 24, v45 + 32);

      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 32) = 2082;
      v57 = objc_msgSend(v42, "date");
      v58 = v158;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v57);

      v59 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v60 = dispatch thunk of CustomStringConvertible.description.getter(v11, v59);
      v62 = v61;
      v63 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(v179 + 8);
      v63(v58, v11);
      v182 = sub_100016940(v60, v62, v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v47, v45 + 34, v45 + 42);

      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 42) = 2082;
      v64 = objc_msgSend(v42, "location");

      if (v64)
        v65 = 7562617;
      else
        v65 = 28526;
      if (v64)
        v66 = 0xE300000000000000;
      else
        v66 = 0xE200000000000000;
      v182 = sub_100016940(v65, v66, v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v47, v45 + 44, v45 + 52);

      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 52) = 2082;
      v67 = objc_msgSend(v42, "location");
      if (v67)
      {
        v68 = v67;
        v69 = objc_msgSend(v67, "timestamp");

        static Date._unconditionallyBridgeFromObjectiveC(_:)(v69);
        v71 = Date.debugDescription.getter(v70);
        v73 = v72;
        v63(v58, v11);
      }
      else
      {
        v71 = 0;
        v73 = 0xE000000000000000;
      }
      v182 = sub_100016940(v71, v73, v183);
      v76 = v172;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v172, v45 + 54, v45 + 62);

      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 62) = 2049;
      v77 = objc_msgSend(v42, "location");
      v78 = -1.0;
      v79 = -1.0;
      v75 = &selRef_connectedServicesChanged_;
      if (v77)
      {
        v80 = v77;
        objc_msgSend(v77, "latitude");
        v79 = v81;

      }
      v182 = *(_QWORD *)&v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v76, v45 + 64, v45 + 72);

      *(_WORD *)(v45 + 72) = 2049;
      v82 = objc_msgSend(v42, "location");
      a1 = v169;
      v74 = (uint64_t)v164;
      if (v82)
      {
        v83 = v82;
        objc_msgSend(v82, "longitude");
        v78 = v84;

      }
      v182 = *(_QWORD *)&v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v76, v45 + 74, v45 + 82);

      *(_WORD *)(v45 + 82) = 2050;
      v85 = objc_msgSend(v42, "location");
      if (v85)
      {
        v86 = v85;
        objc_msgSend(v85, "horizontalAccuracy");
        v88 = v87;

      }
      else
      {
        v88 = -1.0;
      }
      v182 = *(_QWORD *)&v88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v76, v45 + 84, v45 + 92);

      v89 = v175;
      _os_log_impl((void *)&_mh_execute_header, v175, (os_log_type_t)v167, "Updating Beacon %{private,mask.hash}s observation type: %{public}s, date: %{public}s. With location: %{public}s, timestamp: %{public}s, lat: %{private}f, lon: %{private}f, acc: %{public}f.", (uint8_t *)v45, 0x5Cu);
      v90 = v166;
      swift_arrayDestroy(v166, 5, v156);
      swift_slowDealloc(v90, -1, -1);
      swift_slowDealloc(v45, -1, -1);

      v14 = v165;
    }
    else
    {
      v74 = v18;

      v75 = &selRef_connectedServicesChanged_;
    }
    v91 = objc_msgSend(v42, "date");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v91);

    v92 = objc_msgSend(v42, v75[482]);
    v16 = v180;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v92);

    sub_10080B648((uint64_t)v16, (uint64_t)v183);
    v175 = *(os_log_t *)(v173 + 8);
    ((void (*)(uint64_t (*)(uint64_t), uint64_t))v175)(v16, v181);
    v93 = v183[3];
    sub_100004048((uint64_t)v183, (uint64_t *)&unk_1010EE310);
    if (v93)
      break;
    v120 = v42;
    v121 = Logger.logObject.getter(v120);
    v122 = static os_log_type_t.error.getter(v121);
    if (!os_log_type_enabled(v121, v122))
    {

      goto LABEL_49;
    }
    v21 = swift_slowAlloc(22, -1);
    v22 = swift_slowAlloc(32, -1);
    v176 = v22;
    *(_DWORD *)v21 = v151.n128_u32[0];
    v182 = 1752392040;
    v183[0] = v22;
    v23 = v172;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v172, v21 + 4, v21 + 12);
    *(_WORD *)(v21 + 12) = 2081;
    v167 = v21 + 14;
    v24 = objc_msgSend(v120, "beaconIdentifier");
    v25 = v180;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

    v26 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = a1;
    v28 = v181;
    v29 = dispatch thunk of CustomStringConvertible.description.getter(v181, v26);
    v31 = v30;
    v32 = v25;
    v33 = v28;
    a1 = v27;
    v16 = v164;
    ((void (*)(uint64_t (*)(uint64_t), uint64_t))v175)(v32, v33);
    v182 = sub_100016940(v29, v31, v183);
    v34 = v23;
    v18 = (uint64_t)v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v34, v167, v21 + 22);

    v14 = v165;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v121, v122, "No beacon found to updateBeaconObservations %{private,mask.hash}s.", (uint8_t *)v21, 0x16u);
    v35 = v176;
    swift_arrayDestroy(v176, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v21, -1, -1);

LABEL_5:
    v11 = v174;
    (*(void (**)(char *, uint64_t))(v179 + 8))(v14, v174);
LABEL_6:
    v36 = v177;
    v37 = v178;
LABEL_7:
    v20 = v37 + 1;
    if (v36 == v18)
      goto LABEL_58;
  }
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v94 = qword_1011B7160;
  v95 = objc_msgSend(v42, v75[482]);
  v96 = (uint64_t)v161;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v95);

  v97 = v163;
  (*(void (**)(uint64_t, char *, uint64_t))(v179 + 16))(v96 + *(int *)(v163 + 20), v14, v174);
  *(_BYTE *)(v96 + *(int *)(v97 + 24)) = sub_1004D0BD8((unint64_t)objc_msgSend(v42, "type"));
  v98 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
  v99 = *(unsigned __int8 *)(v162 + 80);
  v100 = (v99 + 32) & ~v99;
  v101 = swift_allocObject(v98, v100 + *(_QWORD *)(v162 + 72), v99 | 7);
  *(_OWORD *)(v101 + 16) = v160;
  sub_10005972C(v96, v101 + v100, type metadata accessor for BeaconObservation);
  v102 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v102);
  *(&v147 - 4) = v94;
  *(&v147 - 3) = v101;
  v145 = 0;
  v146 = 0;
  v16 = v170;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, &v147 - 6, v159);
  v170 = v16;
  swift_bridgeObjectRelease();
  sub_1000126B0(v96, type metadata accessor for BeaconObservation);
  v103 = objc_msgSend(v42, "location");
  if (!v103)
  {
    v123 = v42;
    v124 = Logger.logObject.getter(v123);
    v125 = static os_log_type_t.default.getter(v124);
    if (os_log_type_enabled(v124, v125))
    {
      v126 = swift_slowAlloc(22, -1);
      v127 = swift_slowAlloc(32, -1);
      v176 = v127;
      *(_DWORD *)v126 = v151.n128_u32[0];
      v182 = 1752392040;
      v183[0] = v127;
      v128 = v172;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v172, v126 + 4, v126 + 12);
      *(_WORD *)(v126 + 12) = 2081;
      v167 = v126 + 14;
      v129 = objc_msgSend(v123, v75[482]);
      v16 = v180;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v129);

      v130 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v131 = v181;
      v132 = dispatch thunk of CustomStringConvertible.description.getter(v181, v130);
      v134 = v133;
      v18 = (uint64_t)v164;
      ((void (*)(uint64_t (*)(uint64_t), uint64_t))v175)(v16, v131);
      v182 = sub_100016940(v132, v134, v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v128, v167, v126 + 22);

      v14 = v165;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v124, v125, "No location in observation for beacon %{private,mask.hash}s. Update completed.", (uint8_t *)v126, 0x16u);
      v135 = v176;
      swift_arrayDestroy(v176, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v135, -1, -1);
      swift_slowDealloc(v126, -1, -1);

      v11 = v174;
      (*(void (**)(char *, uint64_t))(v179 + 8))(v14, v174);
      v36 = v177;
      v37 = v178;
      a1 = v169;
    }
    else
    {

      v11 = v174;
      (*(void (**)(char *, uint64_t))(v179 + 8))(v14, v174);
      v36 = v177;
      v37 = v178;
      a1 = v169;
      v18 = v74;
    }
    goto LABEL_7;
  }
  v104 = v103;
  v105 = objc_msgSend(v42, v75[482]);
  v16 = v180;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v105);

  v106 = (uint64_t)v150;
  sub_10080B950((uint64_t)v16, (uint64_t)v150);
  ((void (*)(uint64_t (*)(uint64_t), uint64_t))v175)(v16, v181);
  v107 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v154 + 48))(v106, 1, v155) == 1;
  a1 = v169;
  if (v107)
  {
    sub_100004048(v106, (uint64_t *)&unk_1010F47C0);
    v108 = v42;
    v109 = Logger.logObject.getter(v108);
    v110 = static os_log_type_t.default.getter(v109);
    if (os_log_type_enabled(v109, v110))
    {
      v111 = swift_slowAlloc(22, -1);
      v112 = swift_slowAlloc(32, -1);
      v176 = v112;
      *(_DWORD *)v111 = v151.n128_u32[0];
      v182 = 1752392040;
      v183[0] = v112;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v172, v111 + 4, v111 + 12);
      *(_WORD *)(v111 + 12) = 2081;
      v167 = v111 + 14;
      v113 = objc_msgSend(v108, v75[482]);
      v114 = v180;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v113);

      v115 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = (uint64_t (*)(uint64_t))v181;
      v116 = dispatch thunk of CustomStringConvertible.description.getter(v181, v115);
      v118 = v117;
      ((void (*)(uint64_t (*)(uint64_t), uint64_t (*)(uint64_t)))v175)(v114, v16);
      v182 = sub_100016940(v116, v118, v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v172, v167, v111 + 22);

      v18 = (uint64_t)v164;
      a1 = v169;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "Beacon %{private,mask.hash}s is not an owned beacon. Cannot update beacon observation.", (uint8_t *)v111, 0x16u);
      v119 = v176;
      swift_arrayDestroy(v176, 1, (char *)&type metadata for Any + 8);
      v14 = v165;
      swift_slowDealloc(v119, -1, -1);
      swift_slowDealloc(v111, -1, -1);

      goto LABEL_5;
    }

LABEL_49:
    v11 = v174;
    (*(void (**)(char *, uint64_t))(v179 + 8))(v14, v174);
    v36 = v177;
    v37 = v178;
    v18 = v74;
    goto LABEL_7;
  }
  v136 = v152;
  v16 = type metadata accessor for OwnedBeaconRecord;
  sub_1000126EC(v106, v152, type metadata accessor for OwnedBeaconRecord);
  sub_10005972C(v136, v153, type metadata accessor for OwnedBeaconRecord);
  v137 = v104;
  v138 = (char *)objc_msgSend(v42, "type");
  if ((unint64_t)(v138 - 1) < 3)
  {
    v139 = (_BYTE)v138 + 1;
    v11 = v174;
    v18 = v74;
LABEL_52:
    v142 = v153;
    sub_1004BB9AC(v137, (uint64_t)v14, v153, v139, v149);

    sub_1000126B0(v152, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(char *, uint64_t))(v179 + 8))(v14, v11);
    sub_1000126B0(v142, type metadata accessor for OwnedBeaconRecord);

    goto LABEL_6;
  }
  v140 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v141 = objc_msgSend(v140, "isInternalBuild");

  v11 = v174;
  if (!v141)
  {
    v18 = v74;
    v139 = 0;
    goto LABEL_52;
  }
  _Block_release(v148);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000038, 0x8000000100ED7610, "searchpartyd/BeaconManagerService_BeaconManagerProtocol.swift", 61, 2, 3280, 0);
  __break(1u);
  return result;
}

void sub_1004D2024(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  Class isa;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a1;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnedBeaconRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v37 = (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v38 = (uint64_t)&v35 - v12;
  v40 = swift_allocObject(&unk_101079870, 24, 7);
  *(_QWORD *)(v40 + 16) = a3;
  _Block_copy(a3);
  if (qword_1010E9C30 != -1)
    swift_once(&qword_1010E9C30, sub_10047F0AC);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B6F60);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v17 = 134217984;
    v41 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v17 + 4, v17 + 12);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "offlineAdvertisingKeys for reason: %ld", v17, 0xCu);
    swift_slowDealloc(v17, -1, -1);
  }

  sub_10027081C((uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    v18 = sub_100004048((uint64_t)v7, (uint64_t *)&unk_1010F47C0);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.info.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "offlineAdvertisingKeys requested with no localBeaconRecord", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    sub_10000F4A0(0, &qword_1010FD120, SPOfflineAdvertisingKeys_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(_QWORD, Class))a3)[2](a3, isa);
    swift_release();

  }
  else
  {
    v23 = v38;
    sub_1000126EC((uint64_t)v7, v38, type metadata accessor for OwnedBeaconRecord);
    v24 = *(_QWORD *)(a2 + 280);
    v25 = *(_QWORD *)(v24 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    v26 = type metadata accessor for BeaconKeyManager(0);
    v36 = &type metadata for () + 1;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v24, v25, &type metadata for () + 1, v26);
    v35 = 0;
    v27 = v41;
    v28 = swift_allocObject(&unk_101078FD8, 24, 7);
    swift_weakInit(v28 + 16, a2);
    v29 = v37;
    sub_10005972C(v23, v37, type metadata accessor for OwnedBeaconRecord);
    v30 = *(unsigned __int8 *)(v9 + 80);
    v31 = (v30 + 40) & ~v30;
    v32 = (v10 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    v33 = (_QWORD *)swift_allocObject(&unk_101079898, v32 + 8, v30 | 7);
    v33[2] = v28;
    v33[3] = sub_1004D4480;
    v33[4] = v40;
    sub_1000126EC(v29, (uint64_t)v33 + v31, type metadata accessor for OwnedBeaconRecord);
    *(_QWORD *)((char *)v33 + v32) = v39;
    v34 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v34);
    *(&v35 - 6) = v27;
    *(&v35 - 5) = v23;
    *((_BYTE *)&v35 - 32) = 2;
    *(&v35 - 3) = (uint64_t)sub_1004D475C;
    *(&v35 - 2) = (uint64_t)v33;
    swift_retain();
    swift_retain();
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.checkForMissingKeyMaps.forbeacon", 62, 2, sub_1004D2EEC, &v35 - 8, v36);
    swift_release();
    swift_release();
    sub_1000126B0(v23, type metadata accessor for OwnedBeaconRecord);
    swift_release();
    swift_release();
  }
}

uint64_t sub_1004D24AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t v36;

  v2 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OwnedBeaconRecord(0);
  sub_10005972C(a1 + *(int *)(v5 + 24), (uint64_t)v4, type metadata accessor for StableIdentifier);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v2);
  if (EnumCaseMultiPayload == 3)
  {
    v16 = sub_10001A9A8((uint64_t *)&unk_1010F46F0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = &v4[*(int *)(v16 + 80)];
    v19 = *(_QWORD *)v17;
    v18 = *((_QWORD *)v17 + 1);
    v35 = v19;
    v36 = v18;
  }
  else
  {
    if (EnumCaseMultiPayload != 2)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v7 = *((_QWORD *)v4 + 4);
        v8 = *((_QWORD *)v4 + 5);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v35 = v7;
        v36 = v8;
        v9 = sub_1000330C8();
        v11 = Data.init<A>(hexString:)(&v35, &type metadata for String, v9, v10);
        if (v12 >> 60 != 15)
        {
          v13 = v11;
          v14 = v12;
          v35 = v11;
          v36 = v12;
          v15 = sub_100035530();
          if ((DataProtocol.isNull.getter(&type metadata for Data, v15) & 1) == 0)
          {
            v32 = Data.trimmed.getter(v13, v14);
            sub_10001EF3C(v13, v14);
            return v32;
          }
          sub_10001EF3C(v13, v14);
        }
      }
      else
      {
        sub_1000126B0((uint64_t)v4, type metadata accessor for StableIdentifier);
      }
      return 0;
    }
    v20 = sub_10001A9A8(&qword_101106F40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = &v4[*(int *)(v20 + 80)];
    v22 = *(_QWORD *)v21;
    v23 = *((_QWORD *)v21 + 1);
    swift_bridgeObjectRelease();
    v35 = v22;
    v36 = v23;
  }
  v24 = sub_1000330C8();
  v26 = Data.init<A>(hexString:)(&v35, &type metadata for String, v24, v25);
  if (v27 >> 60 == 15)
  {
    v28 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v4, v28);
    return 0;
  }
  v29 = v26;
  v30 = v27;
  v35 = v26;
  v36 = v27;
  v31 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v31) & 1) != 0)
    v32 = 0;
  else
    v32 = Data.trimmed.getter(v29, v30);
  sub_10001EF3C(v29, v30);
  v33 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v4, v33);
  return v32;
}

uint64_t sub_1004D2768()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1004D2794(uint64_t a1)
{
  uint64_t v1;

  sub_1004A2F04(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1004D27A0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1004D27D4(uint64_t a1)
{
  uint64_t v1;

  return sub_10049DAF8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
}

uint64_t sub_1004D27F4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  v9 = v0 + v4 + v1[10];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = v0 + v4 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
    v12(v13, v10);
  v14 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v14));
  return swift_deallocObject(v0, v14 + 41, v3 | 7);
}

void sub_1004D2920(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for BeaconEstimatedLocation(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_10049DC2C(a1, *(_QWORD *)(v1 + 16), v1 + v4, v5, *(unsigned __int8 *)(v5 + 40));
}

uint64_t sub_1004D2978(void (*a1)(uint64_t))
{
  uint64_t *v1;

  return sub_10049AA14(a1, v1[2], v1[3], v1[4]);
}

void sub_1004D2994()
{
  uint64_t v0;

  sub_1007AFADC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1004D29AC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004D29D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1010FD0BC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_10049AD48, 0, 0);
}

uint64_t sub_1004D2A30()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004D2A40(uint64_t a1)
{
  uint64_t v1;

  return sub_10049AAAC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1004D2A48(uint64_t a1)
{
  return sub_10049AB4C(a1);
}

uint64_t sub_1004D2A50()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004D2A74()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, uint64_t);
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(unint64_t, uint64_t);
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v29 = *(_QWORD *)(v2 + 64);
  v30 = *(unsigned __int8 *)(v2 + 80);
  v34 = type metadata accessor for KeySyncRecord(0);
  v4 = *(_QWORD *)(v34 - 8);
  v27 = *(_QWORD *)(v4 + 64);
  v28 = *(unsigned __int8 *)(v4 + 80);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v26 = *(unsigned __int8 *)(v6 + 80);
  v25 = *(_QWORD *)(v6 + 64);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v24 = *(unsigned __int8 *)(v8 + 80);
  v23 = *(_QWORD *)(v8 + 64);
  swift_release();
  v9 = v0 + v3;
  sub_10001BC14(*(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v3 + 8));
  v10 = *(void (**)(unint64_t, uint64_t))(v6 + 8);
  v10(v0 + v3 + v1[5], v5);
  v11 = v0 + v3 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v5);
      v32 = v3;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v5);
      v32 = v3;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v3 = v32;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v9 + v1[7];
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v13, 1, v5))
    v10(v13, v5);
  v14 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v14(v9 + v1[8], v7);
  sub_10001BC14(*(_QWORD *)(v9 + v1[9]), *(_QWORD *)(v9 + v1[9] + 8));
  v15 = (uint64_t *)(v9 + v1[10]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10001BC14(*v15, v16);
  v31 = v10;
  v33 = v7;
  v17 = (uint64_t *)(v9 + v1[11]);
  v18 = v17[1];
  if (v18 >> 60 != 15)
    sub_10001BC14(*v17, v18);
  v19 = (v3 + v29 + v28) & ~v28;
  v20 = (v19 + v27 + v26) & ~v26;
  v21 = (((v25 + v20 + 7) & 0xFFFFFFFFFFFFFFF8) + v24 + 8) & ~v24;
  sub_10001BC14(*(_QWORD *)(v9 + v1[12]), *(_QWORD *)(v9 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v9 + v1[13]), *(_QWORD *)(v9 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v31(v0 + v19, v5);
  v14(v0 + v19 + *(int *)(v34 + 28), v33);
  v31(v0 + v20, v5);
  v14(v0 + v21, v33);
  swift_release();
  return swift_deallocObject(v0, ((v23 + v21 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v30 | v28 | v26 | v24 | 7);
}

uint64_t sub_1004D2E10()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;

  v1 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for KeySyncRecord(0) - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v11 = (v9 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = (uint64_t *)(v0 + ((*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_100499C2C(*(_QWORD *)(v0 + 16), v0 + v2, v0 + v5, v0 + v8, *(_QWORD *)(v0 + v9), v0 + v11, *v12, v12[1]);
}

uint64_t sub_1004D2EEC(uint64_t a1)
{
  return sub_100336884(a1);
}

uint64_t sub_1004D2F00()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t *v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v25 = *(_QWORD *)(v2 + 64);
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v27 = *(unsigned __int8 *)(v5 + 80);
  v23 = *(_QWORD *)(v5 + 64);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v24 = *(unsigned __int8 *)(v7 + 80);
  v22 = *(_QWORD *)(v7 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v26 = (v3 + 32) & ~v3;
  v8 = v0 + v26;
  sub_10001BC14(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
  v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v9(v0 + v26 + v1[5], v4);
  v10 = v0 + v26 + v1[6];
  v11 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v10, v11))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v9(v10, v4);
      v28 = v3;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v4);
      v28 = v3;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v3 = v28;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v12 = v8 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4))
    v9(v12, v4);
  v29 = v4;
  v13 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v13(v8 + v1[8], v6);
  sub_10001BC14(*(_QWORD *)(v8 + v1[9]), *(_QWORD *)(v8 + v1[9] + 8));
  v14 = (uint64_t *)(v8 + v1[10]);
  v15 = v14[1];
  if (v15 >> 60 != 15)
    sub_10001BC14(*v14, v15);
  v16 = v9;
  v17 = (uint64_t *)(v8 + v1[11]);
  v18 = v17[1];
  if (v18 >> 60 != 15)
    sub_10001BC14(*v17, v18);
  v19 = (v26 + v25 + v27) & ~v27;
  v20 = (((v23 + v19 + 7) & 0xFFFFFFFFFFFFFFF8) + v24 + 8) & ~v24;
  sub_10001BC14(*(_QWORD *)(v8 + v1[12]), *(_QWORD *)(v8 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v8 + v1[13]), *(_QWORD *)(v8 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16(v0 + v19, v29);
  v13(v0 + v20, v6);
  swift_release();
  return swift_deallocObject(v0, ((v22 + v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | v27 | v24 | 7);
}

uint64_t sub_1004D323C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v11 = (v9 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v1 + 16);
  v13 = *(_QWORD *)(v1 + 24);
  v14 = v1 + v5;
  v15 = v1 + v8;
  v16 = *(_QWORD *)(v1 + v9);
  v17 = v1 + v11;
  v18 = *(_QWORD *)(v1 + ((*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8));
  v19 = (_QWORD *)swift_task_alloc(dword_1010FD0CC);
  *(_QWORD *)(v2 + 16) = v19;
  *v19 = v2;
  v19[1] = sub_100004A74;
  return sub_10049A230(a1, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_1004D335C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v28 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v28 + 24) & ~v28;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = (int *)type metadata accessor for ShareRecord(0);
  v6 = *((_QWORD *)v5 - 1);
  v31 = *(unsigned __int8 *)(v6 + 80);
  v27 = *(_QWORD *)(v6 + 64);
  swift_release();
  v7 = v0 + v3;
  sub_10001BC14(*(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v3 + 8));
  v8 = v0 + v3 + v1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v11(v8, v9);
  v12 = v0 + v3 + v1[6];
  v13 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v12, v13))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v11(v12, v9);
      v29 = v4;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v11(v12, v9);
      v29 = v4;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v4 = v29;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v30 = v0;
  v14 = v7 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v14, 1, v9))
    v11(v14, v9);
  v15 = v3 + v4 + v31;
  v16 = v7 + v1[8];
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  v19(v16, v17);
  sub_10001BC14(*(_QWORD *)(v7 + v1[9]), *(_QWORD *)(v7 + v1[9] + 8));
  v20 = (uint64_t *)(v7 + v1[10]);
  v21 = v20[1];
  if (v21 >> 60 != 15)
    sub_10001BC14(*v20, v21);
  v22 = v15 & ~v31;
  v23 = (uint64_t *)(v7 + v1[11]);
  v24 = v23[1];
  if (v24 >> 60 != 15)
    sub_10001BC14(*v23, v24);
  sub_10001BC14(*(_QWORD *)(v7 + v1[12]), *(_QWORD *)(v7 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v7 + v1[13]), *(_QWORD *)(v7 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v30 + v22), *(_QWORD *)(v30 + v22 + 8));
  v11(v30 + v22 + v5[5], v9);
  v11(v30 + v22 + v5[6], v9);
  v19(v30 + v22 + v5[7], v17);
  v25 = v30 + v22 + v5[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v25, 1, v17))
    v19(v25, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v30, v22 + v27, v28 | v31 | 7);
}

uint64_t sub_1004D36D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ShareRecord(0) - 8) + 80);
  return sub_10049A708(a1, *(_QWORD *)(v1 + 16), v1 + v4, v1 + ((v4 + v5 + v6) & ~v6));
}

uint64_t sub_1004D3748(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc(dword_1010FD0DC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004C28;
  return sub_100497494(a1, v5, v6);
}

uint64_t sub_1004D37C8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 80, 7);
}

id sub_1004D37FC(uint64_t a1)
{
  uint64_t v1;

  return sub_100497694(a1, *(id *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), (_QWORD *)(v1 + 40));
}

uint64_t sub_1004D3810(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  void (**v5)(uint64_t);

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (void (**)(uint64_t))(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_1004977C8(a1, *(_QWORD *)(v1 + 16), v1 + v4, *v5, v5[1]);
}

uint64_t sub_1004D386C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10081B9D4(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(uint64_t (**)(uint64_t))(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1004D38C4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_1004D3B5C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  sub_100498340(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_1004D3B88()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_1004D3E40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = v0 + v3;
  v6 = (uint64_t *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v7 = *v6;
  v8 = v6[1];
  v9 = (_QWORD *)swift_task_alloc(dword_1010FD0EC);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_100004A74;
  return sub_10049857C(v4, v5, v7, v8);
}

uint64_t sub_1004D3ED4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1004D417C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  return sub_100497278(a1, *(void (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), v1 + ((v3 + 40) & ~v3));
}

uint64_t sub_1004D41C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  unint64_t v12;

  v1 = type metadata accessor for TimeBasedKeysCriteria(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v4, v1);
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
  }
  else if (!EnumCaseMultiPayload)
  {
    v11 = type metadata accessor for DateInterval(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v0 + v4, v11);
  }
  v12 = (((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & ~v8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v12, v6);
  swift_release();
  return swift_deallocObject(v0, ((v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | v8 | 7);
}

void sub_1004D42D4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;

  v1 = *(_QWORD *)(type metadata accessor for TimeBasedKeysCriteria(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (uint64_t *)(v0 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  sub_100495294(v0 + v2, *(_QWORD *)(v0 + v3), v0 + v5, *v6, v6[1]);
}

uint64_t sub_1004D435C@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_10048FA40(a1, *(_QWORD **)(v2 + 16), *(_QWORD **)(v2 + 24), a2);
}

void sub_1004D4374(int **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100490224(a1, *(_QWORD *)(v2 + 16), *(_QWORD **)(v2 + 24), a2);
}

void sub_1004D438C(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100491664(a1, *(uint64_t **)(v2 + 16), a2);
}

uint64_t sub_1004D43A4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_100494C08(a1, *(_QWORD **)(v2 + 24), *(uint64_t **)(v2 + 32), a2);
}

void sub_1004D43C0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100493654(a1, *(_QWORD *)(v2 + 16), *(_QWORD **)(v2 + 24), *(int **)(v2 + 32), a2);
}

void sub_1004D43DC(uint64_t a1)
{
  uint64_t v1;

  sub_10001D244(a1, *(_QWORD *)(v1 + 16), &qword_1010FD118, SPBeaconingKey_ptr);
}

uint64_t sub_1004D4404()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

_QWORD *sub_1004D4410(_QWORD *a1, void (*a2)(_QWORD, _QWORD), void (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = a1[2];
  v8 = a1[3];
  v9 = a1[4];
  v10 = a1[5];
  a2(*a1, a1[1]);
  a3(v7, v8);
  a4(v9, v10);
  return a1;
}

void sub_1004D4480(uint64_t a1)
{
  uint64_t v1;

  sub_10001D244(a1, *(_QWORD *)(v1 + 16), &qword_1010FD120, SPOfflineAdvertisingKeys_ptr);
}

uint64_t sub_1004D44A8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1004D475C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_10049D8A4(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1004D47A4(uint64_t a1)
{
  uint64_t *v1;

  return sub_100B12DA0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1004D47C0()
{
  uint64_t v0;

  return sub_10030723C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1004D47C8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_100B12D94(v1, a1);
}

uint64_t sub_1004D47E0(uint64_t a1)
{
  uint64_t *v1;

  return sub_10048B870(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1004D47FC()
{
  return sub_1000077D8(40);
}

uint64_t sub_1004D4804()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(v0 + 24);
  Transaction.capture()();
  return v1();
}

uint64_t sub_1004D483C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1004D4878(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_1010FD12C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100004A74;
  return sub_10048A5D0(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1004D4904()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

unint64_t sub_1004D4940()
{
  unint64_t result;

  result = qword_1010FD160;
  if (!qword_1010FD160)
  {
    result = swift_getWitnessTable(aQ_20, &type metadata for BeaconKeyManager.Error);
    atomic_store(result, (unint64_t *)&qword_1010FD160);
  }
  return result;
}

uint64_t sub_1004D4988()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004D499C()
{
  uint64_t v0;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1004D49C8(uint64_t a1)
{
  uint64_t v1;

  return sub_100496960(*(_QWORD *)(v1 + 16), (_QWORD *)(v1 + 24), *(_QWORD **)(v1 + 64), *(_QWORD *)(v1 + 72), *(uint64_t **)(v1 + 80), *(_QWORD *)(v1 + 88), a1);
}

uint64_t sub_1004D49F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004D4A00()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10110CB54);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  return sub_1008F53E0();
}

uint64_t sub_1004D4A48(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD v40[13];
  uint64_t v41;
  char *v42;
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  v8 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v8);
  v40[4] = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v10);
  v40[5] = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for MACAddress(0);
  v40[10] = *(_QWORD *)(v41 - 8);
  v12 = __chkstk_darwin(v41);
  v40[3] = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40[2] = v13;
  __chkstk_darwin(v12);
  v40[6] = (char *)v40 - v14;
  v15 = type metadata accessor for TimeBasedKey(0);
  v40[11] = *(_QWORD *)(v15 - 8);
  v40[12] = v15;
  __chkstk_darwin(v15);
  v40[7] = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010FD1A0);
  __chkstk_darwin(v17);
  v19 = (_QWORD *)((char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F0EE0);
  v21 = __chkstk_darwin(v20);
  __chkstk_darwin(v21);
  v42 = (char *)v40 - v22;
  v23 = type metadata accessor for Date(0);
  __chkstk_darwin(v23);
  v25 = (char *)v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DateInterval(0);
  v40[8] = *(_QWORD *)(v26 - 8);
  v40[9] = v26;
  __chkstk_darwin(v26);
  v28 = (char *)v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = swift_allocObject(&unk_101079AC8, 32, 7);
  *(_QWORD *)(v29 + 16) = a3;
  *(_QWORD *)(v29 + 24) = a4;
  v30 = *(_QWORD *)(a2 + 280);
  swift_retain();
  sub_10080B648(a1, (uint64_t)&v46);
  if (v47)
  {
    v40[0] = a3;
    v40[1] = v29;
    sub_10000F9FC(&v46, (uint64_t)v43);
    static Date.trustedNow.getter((uint64_t)v25);
    DateInterval.init(start:duration:)(v25, 1.0);
    v31 = v44;
    v32 = v45;
    v33 = sub_10001AA44(v43, v44);
    sub_1008595F4((uint64_t)v33, (uint64_t)v28, 0, 0, 0, v30, v31, v32);
    __asm { BR              X10 }
  }
  sub_100004048((uint64_t)&v46, (uint64_t *)&unk_1010EE310);
  type metadata accessor for SPOwnerSessionError(0);
  v36 = v35;
  v43[0] = 2;
  v37 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v38 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
  _BridgedStoredNSError.init(_:userInfo:)(&v46, v43, v37, v36, v38);
  *v19 = v46;
  swift_storeEnumTagMultiPayload(v19, v17, 1);
  sub_100593E94((uint64_t)v19, a3, a4);
  sub_100004048((uint64_t)v19, &qword_1010FD1A0);
  return swift_release();
}

uint64_t sub_1004D52FC(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD v40[13];
  uint64_t v41;
  char *v42;
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  v8 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v8);
  v40[4] = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v10);
  v40[5] = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for MACAddress(0);
  v40[10] = *(_QWORD *)(v41 - 8);
  v12 = __chkstk_darwin(v41);
  v40[3] = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40[2] = v13;
  __chkstk_darwin(v12);
  v40[6] = (char *)v40 - v14;
  v15 = type metadata accessor for TimeBasedKey(0);
  v40[11] = *(_QWORD *)(v15 - 8);
  v40[12] = v15;
  __chkstk_darwin(v15);
  v40[7] = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010FD188);
  __chkstk_darwin(v17);
  v19 = (_QWORD *)((char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F0EE0);
  v21 = __chkstk_darwin(v20);
  __chkstk_darwin(v21);
  v42 = (char *)v40 - v22;
  v23 = type metadata accessor for Date(0);
  __chkstk_darwin(v23);
  v25 = (char *)v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DateInterval(0);
  v40[8] = *(_QWORD *)(v26 - 8);
  v40[9] = v26;
  __chkstk_darwin(v26);
  v28 = (char *)v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = swift_allocObject(&unk_101079A78, 32, 7);
  *(_QWORD *)(v29 + 16) = a3;
  *(_QWORD *)(v29 + 24) = a4;
  v30 = *(_QWORD *)(a2 + 280);
  swift_retain();
  sub_10080B648(a1, (uint64_t)&v46);
  if (v47)
  {
    v40[0] = a3;
    v40[1] = v29;
    sub_10000F9FC(&v46, (uint64_t)v43);
    static Date.trustedNow.getter((uint64_t)v25);
    DateInterval.init(start:duration:)(v25, 1.0);
    v31 = v44;
    v32 = v45;
    v33 = sub_10001AA44(v43, v44);
    sub_1008595F4((uint64_t)v33, (uint64_t)v28, 0, 0, 0, v30, v31, v32);
    __asm { BR              X10 }
  }
  sub_100004048((uint64_t)&v46, (uint64_t *)&unk_1010EE310);
  type metadata accessor for SPOwnerSessionError(0);
  v36 = v35;
  v43[0] = 2;
  v37 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v38 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
  _BridgedStoredNSError.init(_:userInfo:)(&v46, v43, v37, v36, v38);
  *v19 = v46;
  swift_storeEnumTagMultiPayload(v19, v17, 1);
  sub_100593FAC((uint64_t)v19, a3, a4);
  sub_100004048((uint64_t)v19, &qword_1010FD188);
  return swift_release();
}

uint64_t sub_1004D5BB0(uint64_t a1)
{
  uint64_t v1;

  return sub_100593FAC(a1, *(void (**)(void *, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1004D5BBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + v1;
  v8 = *(_QWORD *)(v1 + 16);
  v9 = *(_QWORD *)(v1 + 24);
  v10 = v1 + v5;
  v11 = *(_QWORD *)(v7 + 8);
  v12 = *(_QWORD *)(v7 + 16);
  v13 = *(_BYTE *)(v1 + v6);
  v14 = (_QWORD *)swift_task_alloc(dword_1010FD194);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_100004A74;
  return sub_1004A4510(a1, v8, v9, v10, v13, v11, v12);
}

uint64_t sub_1004D5C74(uint64_t a1)
{
  uint64_t v1;

  return sub_100593E94(a1, *(void (**)(void *, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1004D5C80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + v0;
  v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 24;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v7 + 16));
  return swift_deallocObject(v0, v8, v6);
}

uint64_t sub_1004D5D10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + v1;
  v8 = *(_QWORD *)(v1 + 16);
  v9 = *(_QWORD *)(v1 + 24);
  v10 = v1 + v5;
  v11 = *(_QWORD *)(v7 + 8);
  v12 = *(_QWORD *)(v7 + 16);
  v13 = *(_BYTE *)(v1 + v6);
  v14 = (_QWORD *)swift_task_alloc(dword_1010FD1AC);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_100004A74;
  return sub_1004A42C4(a1, v8, v9, v10, v13, v11, v12);
}

uint64_t sub_1004D5DC8()
{
  return sub_1004D5FEC((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1004D5DDC()
{
  return sub_1000077D8(40);
}

uint64_t sub_1004D5DE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_1010FD1DC);
  v4 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100004A74;
  *(_QWORD *)(v3 + 152) = v2;
  *(_OWORD *)(v3 + 136) = v4;
  return swift_task_switch(sub_1004837B0, 0, 0);
}

uint64_t sub_1004D5E4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1004D5EC8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = (uint64_t)v0 + ((v2 + 40) & ~v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1010FD1EC);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100004A74;
  return sub_100484090(v3, v4, v5, v6);
}

uint64_t sub_1004D5F4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc(dword_1010FD1FC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004C28;
  v7[3] = v5;
  v7[4] = v6;
  v7[2] = a1;
  return swift_task_switch(sub_100486944, v5, 0);
}

uint64_t sub_1004D5FD8()
{
  return sub_1004D5FEC((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1004D5FEC(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  _QWORD *v2;

  a1(v2[2]);
  a2(v2[3]);
  swift_release(v2[5]);
  return swift_deallocObject(v2, 48, 7);
}

uint64_t sub_1004D6030()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1004D603C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1005DE620(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_1004D6058(uint64_t a1)
{
  uint64_t v1;

  sub_100203C68(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_1004D6078()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004D609C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 28);
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1004D6198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 17) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 28);
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1004D6264(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8) + 80);
  return sub_10047F450(a1, *(_BYTE *)(v1 + 16), v1 + ((v3 + 17) & ~v3));
}

uint64_t sub_1004D62A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 28);
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1004D6380(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8) + 80);
  return sub_10047F518(a1, *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), v1 + ((v3 + 48) & ~v3));
}

uint64_t sub_1004D63C8()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1004D63D4(_QWORD *a1)
{
  uint64_t v1;

  return sub_10047FF10(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

BOOL sub_1004D63DC(uint64_t a1)
{
  return sub_1004CFFF4(a1);
}

uint64_t sub_1004D63F4(uint64_t a1)
{
  return sub_100426430(a1) & 1;
}

uint64_t sub_1004D6414@<X0>(_QWORD *a1@<X8>)
{
  return sub_1004D0010(a1);
}

uint64_t sub_1004D6554@<X0>(uint64_t a1@<X8>)
{
  return sub_1004CFF10(a1);
}

uint64_t sub_1004D6568(uint64_t a1)
{
  return sub_100330A84(a1) & 1;
}

uint64_t sub_1004D6580@<X0>(_QWORD *a1@<X8>)
{
  return sub_1004D0038(a1);
}

uint64_t sub_1004D6594@<X0>(_QWORD *a1@<X8>)
{
  return sub_1004D0090(a1);
}

void sub_1004D65A8()
{
  sub_1004D2994();
}

uint64_t sub_1004D65CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004D65D8);
}

uint64_t sub_1004D65D8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FMNAccountType(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1004D6654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004D6660);
}

char *sub_1004D6660(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FMNAccountType(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AirPodsPairingLockAckEndPoint(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FD280;
  if (!qword_1010FD280)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirPodsPairingLockAckEndPoint);
  return result;
}

void sub_1004D6710()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t *, _QWORD);
  Swift::String v5;
  void *v6;
  id v7;
  unsigned int v8;
  NSString v9;
  id v10;
  uint64_t v11;

  v1 = *v0;
  v2 = sub_10001A9A8(&qword_1010EBF60);
  v3 = OS_dispatch_queue.sync<A>(execute:)(sub_10003403C, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.host.setter();
  URLComponents.path.setter();
  v4 = (void (*)(uint64_t *, _QWORD))URLComponents.path.modify(&v11);
  v5._countAndFlagsBits = 0xD00000000000001ALL;
  v5._object = (void *)0x8000000100ED87F0;
  String.append(_:)(v5);
  v4(&v11, 0);
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v6 = (void *)qword_1011B7C08;
  v7 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v8 = objc_msgSend(v7, "isInternalBuild");

  if (v8)
  {
    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v6, "stringForKey:", v9);

    if (v10)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

      URLComponents.host.setter();
    }
  }
}

uint64_t sub_1004D68D4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  *(_BYTE *)(v3 + 26) = a2;
  *(_QWORD *)(v3 + 256) = a1;
  *(_QWORD *)(v3 + 264) = v2;
  v4 = sub_10001A9A8(&qword_1010F46C0);
  *(_QWORD *)(v3 + 272) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BookmarkMetaData(0);
  *(_QWORD *)(v3 + 280) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 288) = v6;
  *(_QWORD *)(v3 + 296) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010FD398);
  *(_QWORD *)(v3 + 304) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SystemInfo.DeviceLockState(0);
  *(_QWORD *)(v3 + 312) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 320) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 328) = swift_task_alloc(v10);
  *(_QWORD *)(v3 + 336) = swift_task_alloc(v10);
  v11 = type metadata accessor for BeaconKeyManager.FileKey(0);
  *(_QWORD *)(v3 + 344) = v11;
  *(_QWORD *)(v3 + 352) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OwnerSharingCircle(0);
  *(_QWORD *)(v3 + 360) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v3 + 368) = v13;
  v14 = *(_QWORD *)(v13 + 64);
  *(_QWORD *)(v3 + 376) = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 384) = swift_task_alloc(v15);
  *(_QWORD *)(v3 + 392) = swift_task_alloc(v15);
  *(_QWORD *)(v3 + 400) = swift_task_alloc(v15);
  *(_QWORD *)(v3 + 408) = swift_task_alloc(v15);
  *(_QWORD *)(v3 + 416) = swift_task_alloc(v15);
  *(_QWORD *)(v3 + 424) = swift_task_alloc(v15);
  *(_QWORD *)(v3 + 432) = swift_task_alloc(v15);
  *(_QWORD *)(v3 + 440) = swift_task_alloc(v15);
  *(_QWORD *)(v3 + 448) = swift_task_alloc(v15);
  return swift_task_switch(sub_1004D6A6C, v2, 0);
}

uint64_t sub_1004D6A6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _UNKNOWN **v19;
  char v20;
  _BYTE *v21;
  char v22;
  int64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v38;
  _QWORD *v39;
  _UNKNOWN **v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;

  if (qword_1010E9938 != -1)
    goto LABEL_43;
  while (1)
  {
    v1 = *(_QWORD *)(v0 + 440);
    v2 = *(_QWORD *)(v0 + 448);
    v3 = *(_QWORD *)(v0 + 256);
    v4 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 456) = sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
    sub_10005972C(v3, v2, type metadata accessor for OwnerSharingCircle);
    v5 = sub_10005972C(v3, v1, type metadata accessor for OwnerSharingCircle);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v0 + 440);
    v10 = *(_QWORD *)(v0 + 448);
    if (v8)
    {
      v43 = *(unsigned __int8 *)(v0 + 26);
      v11 = swift_slowAlloc(48, -1);
      v44 = swift_slowAlloc(64, -1);
      v45 = v44;
      *(_DWORD *)v11 = 141559043;
      *(_QWORD *)(v0 + 232) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v11 + 4, v11 + 12);
      *(_WORD *)(v11 + 12) = 2081;
      v12 = type metadata accessor for UUID(0);
      v13 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v14 = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
      *(_QWORD *)(v0 + 240) = sub_100016940(v14, v15, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v11 + 14, v11 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v10, type metadata accessor for OwnerSharingCircle);
      *(_WORD *)(v11 + 22) = 2160;
      *(_QWORD *)(v0 + 248) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v11 + 24, v11 + 32);
      *(_WORD *)(v11 + 32) = 2081;
      v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
      *(_QWORD *)(v0 + 128) = sub_100016940(v16, v17, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v11 + 34, v11 + 42);
      swift_bridgeObjectRelease();
      sub_1000126B0(v9, type metadata accessor for OwnerSharingCircle);
      *(_WORD *)(v11 + 42) = 1024;
      *(_DWORD *)(v0 + 28) = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 28, v0 + 32, v11 + 44, v11 + 48);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Upload keys: share-id: %{private,mask.hash}s,             beacon: %{private,mask.hash}s, initial: %{BOOL}d.", (uint8_t *)v11, 0x30u);
      swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 448), type metadata accessor for OwnerSharingCircle);
      sub_1000126B0(v9, type metadata accessor for OwnerSharingCircle);
    }

    v18 = *(_QWORD *)(v0 + 256);
    if (!*(_BYTE *)(v18 + *(int *)(*(_QWORD *)(v0 + 360) + 28)))
    {
      v20 = *(_BYTE *)(v0 + 26);
      v21 = sub_1003B98CC((uint64_t)&off_1010484C0);
      if ((v20 & 1) == 0)
      {
        v22 = 1;
        goto LABEL_40;
      }
      goto LABEL_14;
    }
    if (*(_BYTE *)(v18 + *(int *)(*(_QWORD *)(v0 + 360) + 28)) == 1)
    {
      if ((*(_BYTE *)(v0 + 26) & 1) == 0)
      {
        v22 = 2;
        v40 = &off_101048510;
        goto LABEL_39;
      }
      v19 = &off_1010484E8;
      goto LABEL_13;
    }
    if ((*(_BYTE *)(v0 + 26) & 1) == 0)
      break;
    v19 = &off_101048538;
LABEL_13:
    v21 = sub_1003B98CC((uint64_t)v19);
LABEL_14:
    v23 = 0;
    *(_QWORD *)(v0 + 496) = v21;
    *(_QWORD *)(v0 + 504) = _swiftEmptyDictionarySingleton;
    v24 = v21[32];
    *(_BYTE *)(v0 + 27) = v24;
    v25 = 1 << v24;
    v26 = -1;
    if (v25 < 64)
      v26 = ~(-1 << v25);
    v27 = v21 + 56;
    v28 = v26 & *((_QWORD *)v21 + 7);
    *(_DWORD *)(v0 + 44) = enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:);
    v29 = (unint64_t)(v25 + 63) >> 6;
    while (1)
    {
      *(_QWORD *)(v0 + 512) = 0;
      if (v28)
      {
        v30 = __clz(__rbit64(v28));
        v28 &= v28 - 1;
        v31 = v30 | (v23 << 6);
        goto LABEL_33;
      }
      v32 = v23 + 1;
      if (__OFADD__(v23, 1))
      {
        __break(1u);
        goto LABEL_42;
      }
      if (v32 >= v29)
        goto LABEL_36;
      v33 = *(_QWORD *)&v27[8 * v32];
      ++v23;
      if (!v33)
      {
        v23 = v32 + 1;
        if (v32 + 1 >= v29)
          goto LABEL_36;
        v33 = *(_QWORD *)&v27[8 * v23];
        if (!v33)
        {
          v23 = v32 + 2;
          if (v32 + 2 >= v29)
            goto LABEL_36;
          v33 = *(_QWORD *)&v27[8 * v23];
          if (!v33)
            break;
        }
      }
LABEL_32:
      v28 = (v33 - 1) & v33;
      v31 = __clz(__rbit64(v33)) + (v23 << 6);
LABEL_33:
      *(_QWORD *)(v0 + 528) = v28;
      *(_QWORD *)(v0 + 520) = v23;
      v35 = *(unsigned __int8 *)(*((_QWORD *)v21 + 6) + v31);
      *(_BYTE *)(v0 + 41) = v35;
      if ((v35 - 7) >= 7 && ((1 << v35) & 0x1C) == 0)
      {
        *(_BYTE *)(v0 + 42) = ((1 << v35) & 0x21) == 0;
        v36 = *(_QWORD *)(*(_QWORD *)(v0 + 264) + 152);
        *(_QWORD *)(v0 + 560) = v36;
        return swift_task_switch(sub_1004D7AF4, v36, 0);
      }
    }
    v34 = v32 + 3;
    if (v34 >= v29)
    {
LABEL_36:
      v38 = *(_QWORD *)(v0 + 264);
      swift_release();
      sub_10001AA44((_QWORD *)(v38 + 112), *(_QWORD *)(v38 + 136));
      v39 = (_QWORD *)swift_task_alloc(dword_10110D124);
      *(_QWORD *)(v0 + 536) = v39;
      *v39 = v0;
      v39[1] = sub_1004D72B8;
      return sub_100907990(*(_QWORD *)(v0 + 256), *(_BYTE *)(v0 + 26), *(_QWORD *)(v0 + 504));
    }
    v33 = *(_QWORD *)&v27[8 * v34];
    if (v33)
    {
      v23 = v34;
      goto LABEL_32;
    }
    while (1)
    {
      v23 = v34 + 1;
      if (__OFADD__(v34, 1))
        break;
      if (v23 >= v29)
        goto LABEL_36;
      v33 = *(_QWORD *)&v27[8 * v23];
      ++v34;
      if (v33)
        goto LABEL_32;
    }
LABEL_42:
    __break(1u);
LABEL_43:
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  }
  v22 = 0;
  v40 = &off_101048568;
LABEL_39:
  v21 = sub_1003B98CC((uint64_t)v40);
LABEL_40:
  *(_QWORD *)(v0 + 464) = v21;
  v41 = *(_QWORD *)(v0 + 256) + *(int *)(*(_QWORD *)(v0 + 360) + 20);
  v42 = (_QWORD *)swift_task_alloc(dword_1010FD2EC);
  *(_QWORD *)(v0 + 472) = v42;
  *v42 = v0;
  v42[1] = sub_1004D705C;
  return sub_1004D918C(v41, v22, (uint64_t)v21);
}

uint64_t sub_1004D705C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 472);
  *(_QWORD *)(*v2 + 480) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 264);
  if (v1)
  {
    v7 = sub_1004D83D4;
  }
  else
  {
    *(_QWORD *)(v4 + 488) = a1;
    v7 = sub_1004D70D0;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1004D70D0()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v1 = 0;
  v2 = *(_QWORD *)(v0 + 480);
  v3 = *(_QWORD *)(v0 + 488);
  result = *(_QWORD *)(v0 + 464);
  *(_QWORD *)(v0 + 496) = result;
  *(_QWORD *)(v0 + 504) = v3;
  v5 = *(_BYTE *)(result + 32);
  *(_BYTE *)(v0 + 27) = v5;
  v6 = 1 << v5;
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = result + 56;
  v9 = v7 & *(_QWORD *)(result + 56);
  *(_DWORD *)(v0 + 44) = enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:);
  v10 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    *(_QWORD *)(v0 + 512) = v2;
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v1 << 6);
      goto LABEL_20;
    }
    v13 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v10)
      goto LABEL_23;
    v14 = *(_QWORD *)(v8 + 8 * v13);
    ++v1;
    if (!v14)
    {
      v1 = v13 + 1;
      if (v13 + 1 >= v10)
        goto LABEL_23;
      v14 = *(_QWORD *)(v8 + 8 * v1);
      if (!v14)
      {
        v1 = v13 + 2;
        if (v13 + 2 >= v10)
          goto LABEL_23;
        v14 = *(_QWORD *)(v8 + 8 * v1);
        if (!v14)
          break;
      }
    }
LABEL_19:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v1 << 6);
LABEL_20:
    *(_QWORD *)(v0 + 528) = v9;
    *(_QWORD *)(v0 + 520) = v1;
    v16 = *(unsigned __int8 *)(*(_QWORD *)(result + 48) + v12);
    *(_BYTE *)(v0 + 41) = v16;
    if ((v16 - 7) >= 7 && ((1 << v16) & 0x1C) == 0)
    {
      *(_BYTE *)(v0 + 42) = ((1 << v16) & 0x21) == 0;
      v17 = *(_QWORD *)(*(_QWORD *)(v0 + 264) + 152);
      *(_QWORD *)(v0 + 560) = v17;
      return swift_task_switch(sub_1004D7AF4, v17, 0);
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
  {
LABEL_23:
    v18 = *(_QWORD *)(v0 + 264);
    swift_release();
    sub_10001AA44((_QWORD *)(v18 + 112), *(_QWORD *)(v18 + 136));
    v19 = (_QWORD *)swift_task_alloc(dword_10110D124);
    *(_QWORD *)(v0 + 536) = v19;
    *v19 = v0;
    v19[1] = sub_1004D72B8;
    return sub_100907990(*(_QWORD *)(v0 + 256), *(_BYTE *)(v0 + 26), *(_QWORD *)(v0 + 504));
  }
  v14 = *(_QWORD *)(v8 + 8 * v15);
  if (v14)
  {
    v1 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    v1 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v1 >= v10)
      goto LABEL_23;
    v14 = *(_QWORD *)(v8 + 8 * v1);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1004D72B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t);

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 536);
  v3 = *(_QWORD **)v1;
  v3[68] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1004D747C, v3[33], 0);
  swift_bridgeObjectRelease();
  v6 = (uint64_t (*)(uint64_t))((char *)&dword_1011135B8 + dword_1011135B8);
  v5 = (_QWORD *)swift_task_alloc(unk_1011135BC);
  v3[69] = v5;
  *v5 = v3;
  v5[1] = sub_1004D7368;
  return v6(2);
}

uint64_t sub_1004D7368()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v1 = *(_QWORD **)v0;
  v18 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 552));
  v3 = v1[55];
  v2 = v1[56];
  v5 = v1[53];
  v4 = v1[54];
  v7 = v1[51];
  v6 = v1[52];
  v9 = v1[49];
  v8 = v1[50];
  v10 = v1[48];
  v13 = v1[44];
  v14 = v1[42];
  v15 = v1[41];
  v16 = v1[38];
  v17 = v1[37];
  v11 = v1[34];
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v11);
  return ((uint64_t (*)(void))v18[1])();
}

uint64_t sub_1004D747C()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  os_log_t log;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(char);
  uint64_t v58;
  uint64_t (*v59)(char);
  uint64_t v60;

  v1 = (_BYTE *)(v0 + 25);
  v2 = *(_QWORD *)(v0 + 544);
  v4 = *(_QWORD *)(v0 + 424);
  v3 = *(_QWORD *)(v0 + 432);
  v5 = *(_QWORD *)(v0 + 256);
  swift_bridgeObjectRelease();
  sub_10005972C(v5, v3, type metadata accessor for OwnerSharingCircle);
  sub_10005972C(v5, v4, type metadata accessor for OwnerSharingCircle);
  swift_errorRetain(v2);
  v6 = swift_errorRetain(v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v49 = *(_QWORD *)(v0 + 544);
    v9 = *(_QWORD *)(v0 + 432);
    v50 = *(_QWORD *)(v0 + 424);
    v10 = swift_slowAlloc(52, -1);
    v52 = (uint64_t *)swift_slowAlloc(8, -1);
    v54 = swift_slowAlloc(64, -1);
    *(_QWORD *)(v0 + 152) = 1752392040;
    v60 = v54;
    *(_DWORD *)v10 = 141559043;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    v11 = type metadata accessor for UUID(0);
    v12 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    *(_QWORD *)(v0 + 160) = sub_100016940(v13, v14, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v9, type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v10 + 22) = 2160;
    *(_QWORD *)(v0 + 168) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v10 + 24, v10 + 32);
    *(_WORD *)(v10 + 32) = 2081;
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    *(_QWORD *)(v0 + 176) = sub_100016940(v15, v16, &v60);
    v1 = (_BYTE *)(v0 + 25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v10 + 34, v10 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v50, type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v10 + 42) = 2114;
    swift_errorRetain(v49);
    v17 = _swift_stdlib_bridgeErrorToNSError(v49);
    *(_QWORD *)(v0 + 184) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v10 + 44, v10 + 52);
    *v52 = v17;
    swift_errorRelease(v49);
    swift_errorRelease(v49);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Keys upload failure for circle: %{private,mask.hash}s, beacon: %{private,mask.hash}s, error %{public}@.", (uint8_t *)v10, 0x34u);
    v18 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v52, 1, v18);
    swift_slowDealloc(v52, -1, -1);
    swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {
    v19 = *(_QWORD *)(v0 + 544);
    v20 = *(_QWORD *)(v0 + 424);
    sub_1000126B0(*(_QWORD *)(v0 + 432), type metadata accessor for OwnerSharingCircle);
    sub_1000126B0(v20, type metadata accessor for OwnerSharingCircle);
    swift_errorRelease(v19);
    swift_errorRelease(v19);

  }
  v21 = *(_QWORD *)(v0 + 544);
  *(_QWORD *)(v0 + 120) = v21;
  swift_errorRetain(v21);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  if (swift_dynamicCast(v1, v0 + 120, v22, &type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, 0)&& *v1 == 20)
  {
    v57 = (uint64_t (*)(char))((char *)&dword_1011135B8 + dword_1011135B8);
    v23 = (_QWORD *)swift_task_alloc(unk_1011135BC);
    *(_QWORD *)(v0 + 584) = v23;
    *v23 = v0;
    v23[1] = sub_1004D8B60;
    return v57(1);
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 544);
    swift_errorRelease(*(_QWORD *)(v0 + 120));
    *(_QWORD *)(v0 + 136) = v25;
    swift_errorRetain(v25);
    if (swift_dynamicCast(v0 + 16, v0 + 136, v22, &type metadata for KeyDropInterface.KeyDropError, 0)
      && *(_BYTE *)(v0 + 24) == 1
      && *(_QWORD *)(v0 + 16) >= 6uLL)
    {
      v26 = *(_QWORD *)(v0 + 544);
      v28 = *(_QWORD *)(v0 + 376);
      v27 = *(_QWORD *)(v0 + 384);
      v29 = *(_QWORD *)(v0 + 368);
      v31 = *(_QWORD *)(v0 + 264);
      v30 = *(_QWORD *)(v0 + 272);
      v32 = *(_QWORD *)(v0 + 256);
      v33 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v30, 1, 1, v33);
      sub_10005972C(v32, v27, type metadata accessor for OwnerSharingCircle);
      v35 = sub_100006C64(&qword_1010FD3B0, v34, (uint64_t (*)(uint64_t))type metadata accessor for ShareKeysUploadUseCase, (uint64_t)&unk_100E3F7F8);
      v36 = *(unsigned __int8 *)(v29 + 80);
      v37 = (v36 + 40) & ~v36;
      v38 = (_QWORD *)swift_allocObject(&unk_101079FB0, v37 + v28, v36 | 7);
      v38[2] = v31;
      v38[3] = v35;
      v38[4] = v31;
      sub_1000126EC(v27, (uint64_t)v38 + v37, type metadata accessor for OwnerSharingCircle);
      swift_retain_n(v31, 2);
      sub_100626BC4(v30, (uint64_t)&unk_1010FD3B8, (uint64_t)v38);
      swift_errorRelease(v26);
      swift_release();
      swift_errorRelease(*(_QWORD *)(v0 + 136));
      v39 = *(_QWORD *)(v0 + 440);
      v41 = *(_QWORD *)(v0 + 424);
      v40 = *(_QWORD *)(v0 + 432);
      v43 = *(_QWORD *)(v0 + 408);
      v42 = *(_QWORD *)(v0 + 416);
      v45 = *(_QWORD *)(v0 + 392);
      v44 = *(_QWORD *)(v0 + 400);
      v46 = *(_QWORD *)(v0 + 384);
      v47 = *(_QWORD *)(v0 + 352);
      log = *(os_log_t *)(v0 + 336);
      v53 = *(_QWORD *)(v0 + 328);
      v55 = *(_QWORD *)(v0 + 304);
      v56 = *(_QWORD *)(v0 + 296);
      v58 = *(_QWORD *)(v0 + 272);
      swift_task_dealloc(*(_QWORD *)(v0 + 448));
      swift_task_dealloc(v39);
      swift_task_dealloc(v40);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(log);
      swift_task_dealloc(v53);
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      swift_task_dealloc(v58);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      swift_errorRelease(*(_QWORD *)(v0 + 136));
      v59 = (uint64_t (*)(char))((char *)&dword_1011135B8 + dword_1011135B8);
      v48 = (_QWORD *)swift_task_alloc(unk_1011135BC);
      *(_QWORD *)(v0 + 592) = v48;
      *v48 = v0;
      v48[1] = sub_1004D8CC0;
      return v59(0);
    }
  }
}

uint64_t sub_1004D7AF4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 568) = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  *v2 = v0;
  v2[1] = sub_1004D7B6C;
  return unsafeBlocking<A>(_:)(v0 + 48, sub_10007C6FC, *(_QWORD *)(v0 + 560), v3);
}

uint64_t sub_1004D7B6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 560);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 568));
  swift_release();
  return swift_task_switch(sub_1004D7BCC, v1, 0);
}

uint64_t sub_1004D7BCC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[33];
  v0[72] = v0[6];
  return swift_task_switch(sub_1004D7BE8, v1, 0);
}

void sub_1004D7BE8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int64_t v56;
  uint64_t v57;
  unint64_t v58;
  int64_t v59;
  int v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  NSObject *log;
  uint64_t v68;
  uint64_t v69[2];

  v1 = *(_QWORD *)(v0 + 576);
  v2 = *(_BYTE *)(v0 + 42);
  v3 = *(_QWORD *)(v0 + 512);
  v4 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 344);
  v6 = *(_QWORD *)(v0 + 256) + *(int *)(*(_QWORD *)(v0 + 360) + 24);
  v68 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v4, v6);
  *(_BYTE *)(v4 + *(int *)(v5 + 20)) = v2;
  v7 = *(_QWORD *)(v1 + 72);
  v8 = swift_task_alloc(32);
  *(_QWORD *)(v8 + 16) = v1;
  *(_QWORD *)(v8 + 24) = v4;
  v9 = sub_10001A9A8(&qword_1010FD3A0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1004DB8C4, v8, v7, (char *)&type metadata for () + 8, v9);
  swift_task_dealloc(v8);
  v10 = *(_QWORD *)(v0 + 56);
  if (v10)
    goto LABEL_2;
  v22 = sub_100DD79CC(v6, *(unsigned __int8 *)(v0 + 42), 0);
  if (v22)
  {
    v10 = v22;
    v23 = *(unsigned int *)(v0 + 44);
    v25 = *(_QWORD *)(v0 + 328);
    v24 = *(_QWORD *)(v0 + 336);
    v27 = *(_QWORD *)(v0 + 312);
    v26 = *(_QWORD *)(v0 + 320);
    static SystemInfo.lockState.getter(v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 104))(v25, v23, v27);
    v28 = sub_100006C64((unint64_t *)&qword_1010F46E0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
    LOBYTE(v23) = dispatch thunk of static Equatable.== infix(_:_:)(v24, v25, v27, v28);
    v29 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v29(v25, v27);
    v29(v24, v27);
    if ((v23 & 1) == 0)
    {
      v30 = *(_QWORD *)(v0 + 576);
      v31 = *(_QWORD *)(v0 + 352);
      v32 = (_QWORD *)swift_task_alloc(48);
      v32[2] = v30;
      v32[3] = v31;
      v32[4] = v10;
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1004DB8DC, v32, v7, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8);
      swift_task_dealloc(v32);
      v11 = v31;
      goto LABEL_3;
    }
LABEL_2:
    v11 = *(_QWORD *)(v0 + 352);
LABEL_3:
    sub_1000126B0(v11, type metadata accessor for BeaconKeyManager.FileKey);
    v12 = *(unsigned int *)(v10 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_firstIndex);
    v13 = *(_DWORD *)(v10 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_lastIndex);
    swift_release();
    swift_release();
    if (v13 < v12)
      goto LABEL_42;
    if (*(_QWORD *)(*(_QWORD *)(v0 + 504) + 16)
      && (v14 = sub_100518EE0(*(unsigned __int8 *)(v0 + 41)), (v15 & 1) != 0))
    {
      sub_10005972C(*(_QWORD *)(*(_QWORD *)(v0 + 504) + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 288) + 72) * v14, *(_QWORD *)(v0 + 304), type metadata accessor for BookmarkMetaData);
      v16 = 0;
    }
    else
    {
      v16 = 1;
    }
    v17 = *(_QWORD *)(v0 + 304);
    v19 = *(_QWORD *)(v0 + 280);
    v18 = *(_QWORD *)(v0 + 288);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v17, v16, 1, v19);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v17, 1, v19);
    v21 = *(_QWORD *)(v0 + 304);
    if (v20)
    {
      sub_100004048(*(_QWORD *)(v0 + 304), &qword_1010FD398);
    }
    else
    {
      v33 = *(_QWORD *)(v0 + 296);
      sub_10005972C(*(_QWORD *)(v0 + 304), v33, type metadata accessor for BookmarkMetaData);
      sub_100004048(v21, &qword_1010FD398);
      v34 = *(_QWORD *)(v33 + 8);
      sub_1000126B0(v33, type metadata accessor for BookmarkMetaData);
      if (v34 < v12)
      {
        v35 = *(_QWORD *)(v0 + 408);
        v36 = *(_QWORD *)(v0 + 256);
        sub_10005972C(v36, *(_QWORD *)(v0 + 416), type metadata accessor for OwnerSharingCircle);
        v37 = sub_10005972C(v36, v35, type metadata accessor for OwnerSharingCircle);
        v38 = Logger.logObject.getter(v37);
        v39 = static os_log_type_t.error.getter(v38);
        if (os_log_type_enabled(v38, v39))
        {
          log = v38;
          v40 = *(_QWORD *)(v0 + 416);
          v64 = *(_QWORD *)(v0 + 408);
          v65 = *(_BYTE *)(v0 + 41);
          v41 = swift_slowAlloc(72, -1);
          v66 = swift_slowAlloc(96, -1);
          v69[0] = v66;
          *(_DWORD *)v41 = 141559555;
          *(_QWORD *)(v0 + 64) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v41 + 4, v41 + 12);
          *(_WORD *)(v41 + 12) = 2081;
          v42 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v43 = dispatch thunk of CustomStringConvertible.description.getter(v68, v42);
          *(_QWORD *)(v0 + 72) = sub_100016940(v43, v44, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v41 + 14, v41 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0(v40, type metadata accessor for OwnerSharingCircle);
          *(_WORD *)(v41 + 22) = 2160;
          *(_QWORD *)(v0 + 80) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v41 + 24, v41 + 32);
          *(_WORD *)(v41 + 32) = 2081;
          v45 = dispatch thunk of CustomStringConvertible.description.getter(v68, v42);
          *(_QWORD *)(v0 + 88) = sub_100016940(v45, v46, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v41 + 34, v41 + 42);
          swift_bridgeObjectRelease();
          sub_1000126B0(v64, type metadata accessor for OwnerSharingCircle);
          *(_WORD *)(v41 + 42) = 2082;
          v47 = sub_100D79CA8(v65);
          *(_QWORD *)(v0 + 96) = sub_100016940(v47, v48, v69);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v41 + 44, v41 + 52);
          swift_bridgeObjectRelease();
          *(_WORD *)(v41 + 52) = 2048;
          *(_QWORD *)(v0 + 104) = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v41 + 54, v41 + 62);
          *(_WORD *)(v41 + 62) = 2048;
          *(_QWORD *)(v0 + 112) = v34;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v41 + 64, v41 + 72);
          _os_log_impl((void *)&_mh_execute_header, log, v39, "Bookmark updated for circle: %{private,mask.hash}s, beacon: %{private,mask.hash}s, keyType: %{public}s, lower bound on disk is %llu, bookmark: %llu.", (uint8_t *)v41, 0x48u);
          swift_arrayDestroy(v66, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v66, -1, -1);
          swift_slowDealloc(v41, -1, -1);

        }
        else
        {
          v49 = *(_QWORD *)(v0 + 408);
          sub_1000126B0(*(_QWORD *)(v0 + 416), type metadata accessor for OwnerSharingCircle);
          sub_1000126B0(v49, type metadata accessor for OwnerSharingCircle);

        }
      }
    }
    goto LABEL_18;
  }
  sub_1000126B0(*(_QWORD *)(v0 + 352), type metadata accessor for BeaconKeyManager.FileKey);
  swift_release();
LABEL_18:
  v50 = *(_QWORD *)(v0 + 528);
  v51 = *(_QWORD *)(v0 + 520);
  while (1)
  {
    *(_QWORD *)(v0 + 512) = v3;
    if (v50)
    {
      v52 = __clz(__rbit64(v50));
      v50 &= v50 - 1;
      v53 = v52 | (v51 << 6);
      v54 = *(_QWORD *)(v0 + 496);
      goto LABEL_32;
    }
    if (__OFADD__(v51++, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    v56 = (unint64_t)((1 << *(_BYTE *)(v0 + 27)) + 63) >> 6;
    v54 = *(_QWORD *)(v0 + 496);
    if (v51 >= v56)
      goto LABEL_39;
    v57 = v54 + 56;
    v58 = *(_QWORD *)(v54 + 56 + 8 * v51);
    if (!v58)
      break;
LABEL_31:
    v50 = (v58 - 1) & v58;
    v53 = __clz(__rbit64(v58)) + (v51 << 6);
LABEL_32:
    *(_QWORD *)(v0 + 528) = v50;
    *(_QWORD *)(v0 + 520) = v51;
    v60 = *(unsigned __int8 *)(*(_QWORD *)(v54 + 48) + v53);
    *(_BYTE *)(v0 + 41) = v60;
    if ((v60 - 7) >= 7 && ((1 << v60) & 0x1C) == 0)
    {
      *(_BYTE *)(v0 + 42) = ((1 << v60) & 0x21) == 0;
      v63 = *(_QWORD *)(*(_QWORD *)(v0 + 264) + 152);
      *(_QWORD *)(v0 + 560) = v63;
      swift_task_switch(sub_1004D7AF4, v63, 0);
      return;
    }
  }
  v59 = v51 + 1;
  if (v51 + 1 >= v56)
    goto LABEL_39;
  v58 = *(_QWORD *)(v57 + 8 * v59);
  if (v58)
    goto LABEL_30;
  v59 = v51 + 2;
  if (v51 + 2 >= v56)
    goto LABEL_39;
  v58 = *(_QWORD *)(v57 + 8 * v59);
  if (v58)
    goto LABEL_30;
  v59 = v51 + 3;
  if (v51 + 3 >= v56)
  {
LABEL_39:
    v61 = *(_QWORD *)(v0 + 264);
    swift_release();
    sub_10001AA44((_QWORD *)(v61 + 112), *(_QWORD *)(v61 + 136));
    v62 = (_QWORD *)swift_task_alloc(dword_10110D124);
    *(_QWORD *)(v0 + 536) = v62;
    *v62 = v0;
    v62[1] = sub_1004D72B8;
    sub_100907990(*(_QWORD *)(v0 + 256), *(_BYTE *)(v0 + 26), *(_QWORD *)(v0 + 504));
    return;
  }
  v58 = *(_QWORD *)(v57 + 8 * v59);
  if (v58)
  {
LABEL_30:
    v51 = v59;
    goto LABEL_31;
  }
  while (1)
  {
    v51 = v59 + 1;
    if (__OFADD__(v59, 1))
      break;
    if (v51 >= v56)
      goto LABEL_39;
    v58 = *(_QWORD *)(v57 + 8 * v51);
    ++v59;
    if (v58)
      goto LABEL_31;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
}

uint64_t sub_1004D83D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  int64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  os_log_t log;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v1 = *(_QWORD *)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 256);
  sub_10005972C(v3, *(_QWORD *)(v0 + 400), type metadata accessor for OwnerSharingCircle);
  sub_10005972C(v3, v2, type metadata accessor for OwnerSharingCircle);
  swift_errorRetain(v1);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 480);
    v8 = *(_QWORD *)(v0 + 400);
    v64 = *(_QWORD *)(v0 + 392);
    v9 = swift_slowAlloc(52, -1);
    v63 = (uint64_t *)swift_slowAlloc(8, -1);
    v67 = swift_slowAlloc(64, -1);
    *(_QWORD *)(v0 + 192) = 1752392040;
    v71 = v67;
    *(_DWORD *)v9 = 141559043;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v10 = v8;
    v62 = type metadata accessor for UUID(0);
    v11 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v62, v11);
    *(_QWORD *)(v0 + 200) = sub_100016940(v12, v13, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v10, type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v9 + 22) = 2112;
    swift_errorRetain(v7);
    v14 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 208) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v9 + 24, v9 + 32);
    *v63 = v14;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    *(_WORD *)(v9 + 32) = 2160;
    *(_QWORD *)(v0 + 216) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v9 + 34, v9 + 42);
    *(_WORD *)(v9 + 42) = 2081;
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v62, v11);
    *(_QWORD *)(v0 + 224) = sub_100016940(v15, v16, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v9 + 44, v9 + 52);
    swift_bridgeObjectRelease();
    sub_1000126B0(v64, type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to set bookmark for sharing circle. beacon: %{private,mask.hash}s, Error: %@, circle: %{private,mask.hash}s.", (uint8_t *)v9, 0x34u);
    v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v63, 1, v17);
    swift_slowDealloc(v63, -1, -1);
    swift_arrayDestroy(v67, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {
    v18 = *(_QWORD *)(v0 + 480);
    v19 = *(_QWORD *)(v0 + 392);
    sub_1000126B0(*(_QWORD *)(v0 + 400), type metadata accessor for OwnerSharingCircle);
    swift_errorRelease(v18);
    swift_errorRelease(v18);
    sub_1000126B0(v19, type metadata accessor for OwnerSharingCircle);

  }
  v20 = *(_QWORD *)(v0 + 480);
  *(_QWORD *)(v0 + 144) = v20;
  swift_errorRetain(v20);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  if (swift_dynamicCast(v0 + 32, v0 + 144, v21, &type metadata for KeyDropInterface.KeyDropError, 6))
  {
    v22 = *(_QWORD *)(v0 + 480);
    if (*(_BYTE *)(v0 + 40) == 1 && *(_QWORD *)(v0 + 32) > 5uLL)
    {
      v24 = *(_QWORD *)(v0 + 376);
      v23 = *(_QWORD *)(v0 + 384);
      v25 = *(_QWORD *)(v0 + 368);
      v27 = *(_QWORD *)(v0 + 264);
      v26 = *(_QWORD *)(v0 + 272);
      v28 = *(_QWORD *)(v0 + 256);
      swift_bridgeObjectRelease();
      v29 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v26, 1, 1, v29);
      sub_10005972C(v28, v23, type metadata accessor for OwnerSharingCircle);
      v31 = sub_100006C64(&qword_1010FD3B0, v30, (uint64_t (*)(uint64_t))type metadata accessor for ShareKeysUploadUseCase, (uint64_t)&unk_100E3F7F8);
      v32 = *(unsigned __int8 *)(v25 + 80);
      v33 = (v32 + 40) & ~v32;
      v34 = (_QWORD *)swift_allocObject(&unk_101079FD8, v33 + v24, v32 | 7);
      v34[2] = v27;
      v34[3] = v31;
      v34[4] = v27;
      sub_1000126EC(v23, (uint64_t)v34 + v33, type metadata accessor for OwnerSharingCircle);
      swift_retain_n(v27, 2);
      sub_100626BC4(v26, (uint64_t)&unk_1010FD3C8, (uint64_t)v34);
      swift_errorRelease(v22);
      swift_release();
      v35 = *(_QWORD *)(v0 + 440);
      v37 = *(_QWORD *)(v0 + 424);
      v36 = *(_QWORD *)(v0 + 432);
      v39 = *(_QWORD *)(v0 + 408);
      v38 = *(_QWORD *)(v0 + 416);
      v41 = *(_QWORD *)(v0 + 392);
      v40 = *(_QWORD *)(v0 + 400);
      v42 = *(_QWORD *)(v0 + 384);
      v43 = *(_QWORD *)(v0 + 352);
      v65 = *(_QWORD *)(v0 + 336);
      log = *(os_log_t *)(v0 + 328);
      v68 = *(_QWORD *)(v0 + 304);
      v69 = *(_QWORD *)(v0 + 296);
      v70 = *(_QWORD *)(v0 + 272);
      swift_task_dealloc(*(_QWORD *)(v0 + 448));
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      swift_task_dealloc(v40);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v65);
      swift_task_dealloc(log);
      swift_task_dealloc(v68);
      swift_task_dealloc(v69);
      swift_task_dealloc(v70);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v45 = *(_QWORD *)(v0 + 480);
  }
  else
  {
    v45 = *(_QWORD *)(v0 + 480);
  }
  swift_errorRelease(v45);
  v46 = 0;
  result = *(_QWORD *)(v0 + 464);
  *(_QWORD *)(v0 + 496) = result;
  *(_QWORD *)(v0 + 504) = _swiftEmptyDictionarySingleton;
  v47 = *(_BYTE *)(result + 32);
  *(_BYTE *)(v0 + 27) = v47;
  v48 = 1 << v47;
  v49 = -1;
  if (v48 < 64)
    v49 = ~(-1 << v48);
  v50 = result + 56;
  v51 = v49 & *(_QWORD *)(result + 56);
  *(_DWORD *)(v0 + 44) = enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:);
  v52 = (unint64_t)(v48 + 63) >> 6;
  while (1)
  {
    *(_QWORD *)(v0 + 512) = 0;
    if (v51)
    {
      v53 = __clz(__rbit64(v51));
      v51 &= v51 - 1;
      v54 = v53 | (v46 << 6);
      goto LABEL_29;
    }
    v55 = v46 + 1;
    if (__OFADD__(v46, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v55 >= v52)
      goto LABEL_32;
    v56 = *(_QWORD *)(v50 + 8 * v55);
    ++v46;
    if (!v56)
    {
      v46 = v55 + 1;
      if (v55 + 1 >= v52)
        goto LABEL_32;
      v56 = *(_QWORD *)(v50 + 8 * v46);
      if (!v56)
      {
        v46 = v55 + 2;
        if (v55 + 2 >= v52)
          goto LABEL_32;
        v56 = *(_QWORD *)(v50 + 8 * v46);
        if (!v56)
          break;
      }
    }
LABEL_28:
    v51 = (v56 - 1) & v56;
    v54 = __clz(__rbit64(v56)) + (v46 << 6);
LABEL_29:
    *(_QWORD *)(v0 + 528) = v51;
    *(_QWORD *)(v0 + 520) = v46;
    v58 = *(unsigned __int8 *)(*(_QWORD *)(result + 48) + v54);
    *(_BYTE *)(v0 + 41) = v58;
    if ((v58 - 7) >= 7 && ((1 << v58) & 0x1C) == 0)
    {
      *(_BYTE *)(v0 + 42) = ((1 << v58) & 0x21) == 0;
      v59 = *(_QWORD *)(*(_QWORD *)(v0 + 264) + 152);
      *(_QWORD *)(v0 + 560) = v59;
      return swift_task_switch(sub_1004D7AF4, v59, 0);
    }
  }
  v57 = v55 + 3;
  if (v57 >= v52)
  {
LABEL_32:
    v60 = *(_QWORD *)(v0 + 264);
    swift_release();
    sub_10001AA44((_QWORD *)(v60 + 112), *(_QWORD *)(v60 + 136));
    v61 = (_QWORD *)swift_task_alloc(dword_10110D124);
    *(_QWORD *)(v0 + 536) = v61;
    *v61 = v0;
    v61[1] = sub_1004D72B8;
    return sub_100907990(*(_QWORD *)(v0 + 256), *(_BYTE *)(v0 + 26), *(_QWORD *)(v0 + 504));
  }
  v56 = *(_QWORD *)(v50 + 8 * v57);
  if (v56)
  {
    v46 = v57;
    goto LABEL_28;
  }
  while (1)
  {
    v46 = v57 + 1;
    if (__OFADD__(v57, 1))
      break;
    if (v46 >= v52)
      goto LABEL_32;
    v56 = *(_QWORD *)(v50 + 8 * v46);
    ++v57;
    if (v56)
      goto LABEL_28;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1004D8B60()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 264);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 584));
  return swift_task_switch(sub_1004D8BB8, v1, 0);
}

uint64_t sub_1004D8BB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_errorRelease(*(_QWORD *)(v0 + 544));
  swift_errorRelease(*(_QWORD *)(v0 + 120));
  v1 = *(_QWORD *)(v0 + 440);
  v3 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 432);
  v5 = *(_QWORD *)(v0 + 408);
  v4 = *(_QWORD *)(v0 + 416);
  v7 = *(_QWORD *)(v0 + 392);
  v6 = *(_QWORD *)(v0 + 400);
  v8 = *(_QWORD *)(v0 + 384);
  v9 = *(_QWORD *)(v0 + 352);
  v11 = *(_QWORD *)(v0 + 336);
  v12 = *(_QWORD *)(v0 + 328);
  v13 = *(_QWORD *)(v0 + 304);
  v14 = *(_QWORD *)(v0 + 296);
  v15 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004D8CC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 264);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 592));
  return swift_task_switch(sub_1004D8D18, v1, 0);
}

uint64_t sub_1004D8D18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(_QWORD *)(v1 + 440);
  v2 = *(_QWORD *)(v1 + 448);
  v5 = *(_QWORD *)(v1 + 424);
  v4 = *(_QWORD *)(v1 + 432);
  v7 = *(_QWORD *)(v1 + 408);
  v6 = *(_QWORD *)(v1 + 416);
  v8 = *(_QWORD *)(v1 + 392);
  v9 = *(_QWORD *)(v1 + 400);
  v11 = *(_QWORD *)(v1 + 384);
  v12 = *(_QWORD *)(v1 + 352);
  v13 = *(_QWORD *)(v1 + 336);
  v14 = *(_QWORD *)(v1 + 328);
  v15 = *(_QWORD *)(v1 + 304);
  v16 = *(_QWORD *)(v1 + 296);
  v17 = *(_QWORD *)(v1 + 272);
  swift_willThrow(a1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1004D8E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_1004D8E38, a4, 0);
}

uint64_t sub_1004D8E38()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = *sub_10001AA44((_QWORD *)(*(_QWORD *)(v0 + 16) + 160), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 184));
  return swift_task_switch(sub_1004D8E84, 0, 0);
}

uint64_t sub_1004D8E84()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 32) + 16);
  *(_QWORD *)(v0 + 40) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 24);
  ObjectType = swift_getObjectType(Strong);
  v5 = v2 + *(int *)(type metadata accessor for OwnerSharingCircle(0) + 20);
  v6 = *(int **)(v3 + 8);
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  *(_QWORD *)(v0 + 48) = v7;
  *v7 = v0;
  v7[1] = sub_1004D8F48;
  return v9(v5, ObjectType, v3);
}

uint64_t sub_1004D8F48()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 48);
  v3 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1004DB9F8, 0, 0);
  swift_unknownObjectRelease(*(_QWORD *)(v3 + 40));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1004D8FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_1004D8FD4, a4, 0);
}

uint64_t sub_1004D8FD4()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = *sub_10001AA44((_QWORD *)(*(_QWORD *)(v0 + 16) + 160), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 184));
  return swift_task_switch(sub_1004D9020, 0, 0);
}

uint64_t sub_1004D9020()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 32) + 16);
  *(_QWORD *)(v0 + 40) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 24);
  ObjectType = swift_getObjectType(Strong);
  v5 = v2 + *(int *)(type metadata accessor for OwnerSharingCircle(0) + 20);
  v6 = *(int **)(v3 + 8);
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  *(_QWORD *)(v0 + 48) = v7;
  *v7 = v0;
  v7[1] = sub_1004D90E4;
  return v9(v5, ObjectType, v3);
}

uint64_t sub_1004D90E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 48);
  v3 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1004D9158, 0, 0);
  swift_unknownObjectRelease(*(_QWORD *)(v3 + 40));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1004D9158()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004D918C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v4 + 32) = a3;
  *(_QWORD *)(v4 + 40) = v3;
  *(_BYTE *)(v4 + 168) = a2;
  *(_QWORD *)(v4 + 24) = a1;
  v5 = type metadata accessor for BookmarkMetaData(0);
  *(_QWORD *)(v4 + 48) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 56) = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 64) = swift_task_alloc(v7);
  *(_QWORD *)(v4 + 72) = swift_task_alloc(v7);
  *(_QWORD *)(v4 + 80) = swift_task_alloc(v7);
  *(_QWORD *)(v4 + 88) = swift_task_alloc(v7);
  v8 = type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData(0);
  *(_QWORD *)(v4 + 96) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 104) = v9;
  *(_QWORD *)(v4 + 112) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for KeyDropShareMetaDataResponse(0);
  *(_QWORD *)(v4 + 120) = v10;
  *(_QWORD *)(v4 + 128) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004D9268, v3, 0);
}

uint64_t sub_1004D9268()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10001AA44((_QWORD *)(*(_QWORD *)(v0 + 40) + 112), *(_QWORD *)(*(_QWORD *)(v0 + 40) + 136));
  v1 = (_QWORD *)swift_task_alloc(dword_10110D1A4);
  *(_QWORD *)(v0 + 136) = v1;
  *v1 = v0;
  v1[1] = sub_1004D92D0;
  return sub_10091F7D0(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 168), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1004D92D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1004D99D4;
  else
    v4 = sub_1004D9334;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 40), 0);
}

uint64_t sub_1004D9334()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = *(_QWORD *)(v0[16] + *(int *)(v0[15] + 28));
  v0[19] = v1;
  v2 = dword_1010FD394;
  swift_bridgeObjectRetain(v1);
  v3 = (uint64_t **)swift_task_alloc(v2);
  v0[20] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_1004D93A8;
  return sub_1004D9A4C(v1, v0[3]);
}

uint64_t sub_1004D93A8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 160));
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1004D9408, v1, 0);
}

uint64_t sub_1004D9408()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v1 = *(_QWORD *)(*((_QWORD *)v0 + 16) + *(int *)(*((_QWORD *)v0 + 15) + 24));
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    swift_bridgeObjectRetain(v1);
LABEL_29:
    swift_bridgeObjectRelease();
    if (qword_1010E9938 != -1)
      goto LABEL_40;
    goto LABEL_30;
  }
  v4 = (int *)*((_QWORD *)v0 + 12);
  v3 = *((_QWORD *)v0 + 13);
  v58 = *((_QWORD *)v0 + 11);
  v59 = *((_QWORD *)v0 + 9);
  v5 = *((_QWORD *)v0 + 7);
  v62 = *((_QWORD *)v0 + 6);
  v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v60 = *(_QWORD *)(v3 + 72);
  swift_bridgeObjectRetain(v1);
  v61 = v5;
  v57 = v0;
  while (1)
  {
    v7 = (unsigned __int8 *)*((_QWORD *)v0 + 14);
    v63 = v6;
    sub_10005972C(v6, (uint64_t)v7, type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData);
    v8 = &v7[v4[6]];
    v9 = *v7;
    v10 = *(_QWORD *)&v7[v4[7]];
    if ((v8[8] & 1) != 0)
      break;
    v26 = *v7;
    v27 = *(_QWORD *)v8;
    if (v10 < *(_QWORD *)v8)
      goto LABEL_36;
    v29 = *((_QWORD *)v0 + 10);
    v28 = (_QWORD *)*((_QWORD *)v0 + 11);
    v30 = (uint64_t)v28 + *(int *)(v62 + 20);
    sub_10005972C(*((_QWORD *)v0 + 14) + v4[5], v30, type metadata accessor for KeyDropInterface.KeyAlignment);
    v31 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 0, 1, v31);
    *v28 = v27;
    *(_QWORD *)(v58 + 8) = v10;
    *((_BYTE *)v28 + *(int *)(v62 + 24)) = v26;
    sub_1000126EC((uint64_t)v28, v29, type metadata accessor for BookmarkMetaData);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v18 = sub_100518EE0(v26);
    v34 = _swiftEmptyDictionarySingleton[2];
    v35 = (v33 & 1) == 0;
    v36 = v34 + v35;
    if (__OFADD__(v34, v35))
      goto LABEL_37;
    v37 = v33;
    if (_swiftEmptyDictionarySingleton[3] >= v36)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_100A9A1A4();
      v25 = v61;
      v40 = *((_QWORD *)v0 + 10);
      if ((v37 & 1) == 0)
        goto LABEL_26;
    }
    else
    {
      sub_100A859AC(v36, isUniquelyReferenced_nonNull_native);
      v38 = sub_100518EE0(v26);
      v25 = v61;
      if ((v37 & 1) != (v39 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for KeyDropInterface.KeyType);
      v18 = v38;
      v40 = *((_QWORD *)v0 + 10);
      if ((v37 & 1) == 0)
      {
LABEL_26:
        _swiftEmptyDictionarySingleton[(v18 >> 6) + 8] |= 1 << v18;
        *(_BYTE *)(_swiftEmptyDictionarySingleton[6] + v18) = v26;
        sub_1000126EC(v40, _swiftEmptyDictionarySingleton[7] + *(_QWORD *)(v25 + 72) * v18, type metadata accessor for BookmarkMetaData);
        v44 = _swiftEmptyDictionarySingleton[2];
        v42 = __OFADD__(v44, 1);
        v43 = v44 + 1;
        if (v42)
          goto LABEL_39;
LABEL_27:
        _swiftEmptyDictionarySingleton[2] = v43;
        goto LABEL_4;
      }
    }
LABEL_3:
    sub_1004DB738(v40, _swiftEmptyDictionarySingleton[7] + *(_QWORD *)(v25 + 72) * v18);
LABEL_4:
    swift_bridgeObjectRelease();
    sub_1000126B0(*((_QWORD *)v0 + 14), type metadata accessor for KeyDropShareMetaDataResponse.ShareMetaData);
    v6 = v63 + v60;
    if (!--v2)
      goto LABEL_29;
  }
  v11 = *((_QWORD *)v0 + 14);
  v13 = *((_QWORD *)v0 + 8);
  v12 = (unint64_t *)*((_QWORD *)v0 + 9);
  v14 = (uint64_t)v12 + *(int *)(v62 + 20);
  v0 = v4;
  sub_10005972C(v11 + v4[5], v14, type metadata accessor for KeyDropInterface.KeyAlignment);
  v15 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 0, 1, v15);
  *v12 = v10;
  *(_QWORD *)(v59 + 8) = v10;
  *((_BYTE *)v12 + *(int *)(v62 + 24)) = v9;
  sub_1000126EC((uint64_t)v12, v13, type metadata accessor for BookmarkMetaData);
  v16 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  v18 = sub_100518EE0(v9);
  v19 = _swiftEmptyDictionarySingleton[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (!__OFADD__(v19, v20))
  {
    v22 = v17;
    if (_swiftEmptyDictionarySingleton[3] >= v21)
    {
      if ((v16 & 1) == 0)
        sub_100A9A1A4();
      v25 = v61;
      v0 = v57;
    }
    else
    {
      sub_100A859AC(v21, v16);
      v23 = sub_100518EE0(v9);
      v25 = v61;
      v0 = v57;
      if ((v22 & 1) != (v24 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for KeyDropInterface.KeyType);
      v18 = v23;
    }
    v40 = *((_QWORD *)v0 + 8);
    if ((v22 & 1) == 0)
    {
      _swiftEmptyDictionarySingleton[(v18 >> 6) + 8] |= 1 << v18;
      *(_BYTE *)(_swiftEmptyDictionarySingleton[6] + v18) = v9;
      sub_1000126EC(v40, _swiftEmptyDictionarySingleton[7] + *(_QWORD *)(v25 + 72) * v18, type metadata accessor for BookmarkMetaData);
      v41 = _swiftEmptyDictionarySingleton[2];
      v42 = __OFADD__(v41, 1);
      v43 = v41 + 1;
      if (v42)
        goto LABEL_38;
      goto LABEL_27;
    }
    goto LABEL_3;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  swift_once(&qword_1010E9938, sub_1000AFBB0);
LABEL_30:
  v45 = type metadata accessor for Logger(0);
  sub_10001A9E8(v45, (uint64_t)qword_1011B6748);
  swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.error.getter(v47);
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v49 = 134217984;
    *((_QWORD *)v0 + 2) = _swiftEmptyDictionarySingleton[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 6, v49 + 4, v49 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Generated existing metadata, found %ld key types ranges.", v49, 0xCu);
    swift_slowDealloc(v49, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v50 = *((_QWORD *)v0 + 16);
  v51 = *((_QWORD *)v0 + 14);
  v53 = *((_QWORD *)v0 + 10);
  v52 = *((_QWORD *)v0 + 11);
  v55 = *((_QWORD *)v0 + 8);
  v54 = *((_QWORD *)v0 + 9);
  sub_1000126B0(v50, type metadata accessor for KeyDropShareMetaDataResponse);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  return (*((uint64_t (**)(_QWORD *))v0 + 1))(_swiftEmptyDictionarySingleton);
}

uint64_t sub_1004D99D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004D9A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  v4 = sub_10001A9A8(&qword_1010EC870);
  v3[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010F7820) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[19] = swift_task_alloc(v5);
  v3[20] = swift_task_alloc(v5);
  v6 = type metadata accessor for UUID(0);
  v3[21] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[22] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[23] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[24] = swift_task_alloc(v9);
  v3[25] = swift_task_alloc(v9);
  v3[26] = swift_task_alloc(v9);
  v3[27] = swift_task_alloc(v9);
  v3[28] = swift_task_alloc(v9);
  v3[29] = swift_task_alloc(v9);
  v3[30] = swift_task_alloc(v9);
  v3[31] = swift_task_alloc(v9);
  v3[32] = swift_task_alloc(v9);
  v10 = sub_10001A9A8(&qword_1010EE0E0);
  v3[33] = v10;
  v3[34] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OwnerSharingCircle(0);
  v3[35] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[36] = v12;
  v3[37] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004D9BC0, v2, 0);
}

uint64_t sub_1004D9BC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 136) + 152);
  *(_QWORD *)(v0 + 304) = v1;
  return swift_task_switch(sub_1004D9BDC, v1, 0);
}

uint64_t sub_1004D9BDC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = v0[38];
  v2 = v0[32];
  v4 = v0[22];
  v3 = v0[23];
  v5 = v0[21];
  v6 = v0[16];
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[39] = v7;
  v7(v2, v6, v5);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_101079F88, v9 + v3, v8 | 7);
  v0[40] = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v0[41] = v11;
  v11(v10 + v9, v2, v5);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[42] = v13;
  *v13 = v0;
  v13[1] = sub_1004D9CC0;
  return unsafeBlocking<A>(_:)(v0[34], sub_1004DB7F0, v10, v0[33]);
}

uint64_t sub_1004D9CC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 336));
  swift_release();
  return swift_task_switch(sub_1004D9D24, v1, 0);
}

uint64_t sub_1004D9D24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 272);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 288) + 48))(v1, 1, *(_QWORD *)(v0 + 280)) == 1)
  {
    sub_100004048(v1, &qword_1010EE0E0);
    v2 = *(_QWORD *)(v0 + 272);
    v4 = *(_QWORD *)(v0 + 248);
    v3 = *(_QWORD *)(v0 + 256);
    v6 = *(_QWORD *)(v0 + 232);
    v5 = *(_QWORD *)(v0 + 240);
    v8 = *(_QWORD *)(v0 + 216);
    v7 = *(_QWORD *)(v0 + 224);
    v10 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 208);
    v14 = *(_QWORD *)(v0 + 192);
    v15 = *(_QWORD *)(v0 + 160);
    v16 = *(_QWORD *)(v0 + 152);
    v17 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 136);
    sub_1000126EC(v1, *(_QWORD *)(v0 + 296), type metadata accessor for OwnerSharingCircle);
    sub_10001AA44((_QWORD *)(v12 + 112), *(_QWORD *)(v12 + 136));
    v13 = (_QWORD *)swift_task_alloc(dword_10110D1AC);
    *(_QWORD *)(v0 + 344) = v13;
    *v13 = v0;
    v13[1] = sub_1004D9EA8;
    return sub_100920434(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
  }
}

uint64_t sub_1004D9EA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 344);
  v3[44] = a1;
  v3[45] = v1;
  swift_task_dealloc(v4);
  v5 = v3[17];
  if (v1)
  {
    swift_errorRelease(v1);
    v6 = sub_1004DAC1C;
  }
  else
  {
    v6 = sub_1004D9F20;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1004D9F20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void (*v59)(unint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  _BOOL4 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  os_log_type_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147[3];

  *(_QWORD *)(v1 + 104) = _swiftEmptyDictionarySingleton;
  v127 = v1 + 72;
  v129 = v1 + 80;
  v130 = v1 + 104;
  v2 = *(_QWORD *)(v1 + 352);
  v144 = *(_QWORD *)(v1 + 176);
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 296) + *(int *)(*(_QWORD *)(v1 + 280) + 32));
  v132 = v3 + 64;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(v3 + 64);
  v7 = (unint64_t)(63 - v5) >> 6;
  v125 = v7 - 1;
  swift_bridgeObjectRetain(v3);
  v8 = 0;
  v137 = v9;
  v126 = v9 + 104;
  v134 = v7;
  v128 = v7 - 5;
  v133 = v2;
  if (!v6)
    goto LABEL_9;
LABEL_7:
  while (2)
  {
    v11 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    v13 = *(_QWORD *)(v1 + 152);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(v1 + 312))(v13, *(_QWORD *)(v137 + 48) + *(_QWORD *)(v144 + 72) * v12, *(_QWORD *)(v1 + 168));
    v0 = *(_QWORD *)(v137 + 56);
    v14 = sub_10001A9A8(&qword_1010F2B78);
    *(_BYTE *)(v13 + *(int *)(v14 + 48)) = *(_BYTE *)(v0 + v12);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 0, 1, v14);
    while (1)
    {
      v20 = *(_QWORD *)(v1 + 160);
      sub_1004DB830(*(_QWORD *)(v1 + 152), v20);
      v21 = sub_10001A9A8(&qword_1010F2B78);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21) == 1)
      {
        swift_release();
        swift_bridgeObjectRelease();
        if (!*(_QWORD *)(*(_QWORD *)(v1 + 104) + 16))
        {
          sub_1000126B0(*(_QWORD *)(v1 + 296), type metadata accessor for OwnerSharingCircle);
LABEL_64:
          swift_bridgeObjectRelease();
          v116 = *(_QWORD *)(v1 + 272);
          v118 = *(_QWORD *)(v1 + 248);
          v117 = *(_QWORD *)(v1 + 256);
          v120 = *(_QWORD *)(v1 + 232);
          v119 = *(_QWORD *)(v1 + 240);
          v122 = *(_QWORD *)(v1 + 216);
          v121 = *(_QWORD *)(v1 + 224);
          v124 = *(_QWORD *)(v1 + 200);
          v123 = *(_QWORD *)(v1 + 208);
          v138 = *(_QWORD *)(v1 + 192);
          v140 = *(_QWORD *)(v1 + 160);
          v143 = *(_QWORD *)(v1 + 152);
          v146 = *(_QWORD *)(v1 + 144);
          swift_task_dealloc(*(_QWORD *)(v1 + 296));
          swift_task_dealloc(v116);
          swift_task_dealloc(v117);
          swift_task_dealloc(v118);
          swift_task_dealloc(v119);
          swift_task_dealloc(v120);
          swift_task_dealloc(v121);
          swift_task_dealloc(v122);
          swift_task_dealloc(v123);
          swift_task_dealloc(v124);
          swift_task_dealloc(v138);
          swift_task_dealloc(v140);
          swift_task_dealloc(v143);
          swift_task_dealloc(v146);
          return (*(uint64_t (**)(void))(v1 + 8))();
        }
        v0 = *(_QWORD *)(v1 + 360);
        v89 = *(_QWORD *)(v1 + 296);
        v90 = *(_QWORD *)(v1 + 144);
        v91 = swift_task_alloc(32);
        *(_QWORD *)(v91 + 16) = v89;
        *(_QWORD *)(v91 + 24) = v130;
        sub_100ADB304((void (*)(uint64_t, _UNKNOWN **))sub_1004DB878, v90);
        if (!v0)
        {
          v114 = *(_QWORD *)(v1 + 304);
          swift_task_dealloc(v91);
          return swift_task_switch(sub_1004DAD10, v114, 0);
        }
        swift_task_dealloc(v91);
        if (qword_1010E9938 == -1)
        {
LABEL_58:
          v92 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 312);
          v93 = *(_QWORD *)(v1 + 192);
          v94 = *(_QWORD *)(v1 + 168);
          v95 = *(_QWORD *)(v1 + 128);
          v96 = type metadata accessor for Logger(0);
          sub_10001A9E8(v96, (uint64_t)qword_1011B6748);
          v97 = v92(v93, v95, v94);
          v98 = Logger.logObject.getter(v97);
          v99 = static os_log_type_t.error.getter(v98);
          v100 = os_log_type_enabled(v98, v99);
          v101 = *(_QWORD *)(v1 + 192);
          v103 = *(_QWORD *)(v1 + 168);
          v102 = *(_QWORD *)(v1 + 176);
          if (v100)
          {
            v104 = swift_slowAlloc(32, -1);
            v145 = swift_slowAlloc(64, -1);
            v147[0] = v145;
            *(_DWORD *)v104 = 141558531;
            *(_QWORD *)(v1 + 72) = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v127, v129, v104 + 4, v104 + 12);
            *(_WORD *)(v104 + 12) = 2081;
            v105 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v106 = dispatch thunk of CustomStringConvertible.description.getter(v103, v105);
            v142 = v99;
            *(_QWORD *)(v1 + 64) = sub_100016940(v106, v107, v147);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v127, v104 + 14, v104 + 22);
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v101, v103);
            *(_WORD *)(v104 + 22) = 2080;
            swift_beginAccess(v130, v1 + 40, 0, 0);
            v108 = *(_QWORD *)(v1 + 104);
            v109 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            swift_bridgeObjectRetain(v108);
            v111 = Dictionary.description.getter(v110, v103, &type metadata for OwnerCircleMemberState, v109);
            v113 = v112;
            swift_bridgeObjectRelease();
            *(_QWORD *)(v1 + 80) = sub_100016940(v111, v113, v147);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v129, v1 + 88, v104 + 24, v104 + 32);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v98, v142, "Failed to update members from server response,\nshare-id: %{private,mask.hash}s, updatedMembers: %s.", (uint8_t *)v104, 0x20u);
            swift_arrayDestroy(v145, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v145, -1, -1);
            swift_slowDealloc(v104, -1, -1);
          }
          else
          {
            (*(void (**)(_QWORD, _QWORD))(v102 + 8))(*(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 168));
          }
          swift_errorRelease(v0);

          sub_1000126B0(*(_QWORD *)(v1 + 296), type metadata accessor for OwnerSharingCircle);
          goto LABEL_64;
        }
LABEL_69:
        swift_once(&qword_1010E9938, sub_1000AFBB0);
        goto LABEL_58;
      }
      v22 = *(_BYTE *)(*(_QWORD *)(v1 + 160) + *(int *)(v21 + 48));
      (*(void (**)(_QWORD))(v1 + 328))(*(_QWORD *)(v1 + 248));
      if (!*(_QWORD *)(v2 + 16) || (v23 = sub_100003FB0(*(_QWORD *)(v1 + 248)), (v24 & 1) == 0))
      {
        v139 = v6;
        v141 = v8;
        if (qword_1010E9938 != -1)
          swift_once(&qword_1010E9938, sub_1000AFBB0);
        v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 312);
        v38 = *(_QWORD *)(v1 + 248);
        v40 = *(_QWORD *)(v1 + 208);
        v39 = *(_QWORD *)(v1 + 216);
        v41 = *(_QWORD *)(v1 + 168);
        v42 = *(_QWORD *)(v1 + 128);
        v43 = type metadata accessor for Logger(0);
        sub_10001A9E8(v43, (uint64_t)qword_1011B6748);
        v37(v39, v42, v41);
        v44 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v37)(v40, v38, v41);
        v45 = Logger.logObject.getter(v44);
        v46 = static os_log_type_t.error.getter(v45);
        v47 = os_log_type_enabled(v45, v46);
        v0 = *(_QWORD *)(v1 + 248);
        v49 = *(_QWORD *)(v1 + 208);
        v48 = *(_QWORD *)(v1 + 216);
        v50 = *(_QWORD *)(v1 + 168);
        if (v47)
        {
          v51 = swift_slowAlloc(42, -1);
          v52 = swift_slowAlloc(64, -1);
          v147[0] = v52;
          *(_DWORD *)v51 = 141558787;
          *(_QWORD *)(v51 + 4) = 1752392040;
          *(_WORD *)(v51 + 12) = 2081;
          v135 = v0;
          v0 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v53 = dispatch thunk of CustomStringConvertible.description.getter(v50, v0);
          *(_QWORD *)(v51 + 14) = sub_100016940(v53, v54, v147);
          swift_bridgeObjectRelease();
          v55 = *(void (**)(uint64_t, uint64_t))(v144 + 8);
          v55(v48, v50);
          *(_WORD *)(v51 + 22) = 2160;
          *(_QWORD *)(v51 + 24) = 1752392040;
          *(_WORD *)(v51 + 32) = 2081;
          v56 = dispatch thunk of CustomStringConvertible.description.getter(v50, v0);
          *(_QWORD *)(v51 + 34) = sub_100016940(v56, v57, v147);
          swift_bridgeObjectRelease();
          v55(v49, v50);
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "Owner circle contains a member which is not in the server share,\nshare-id: %{private,mask.hash}s,\nmember-id: %{private,mask.hash}s.", (uint8_t *)v51, 0x2Au);
          swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
          v58 = v52;
          v2 = v133;
          swift_slowDealloc(v58, -1, -1);
          swift_slowDealloc(v51, -1, -1);

          v55(v135, v50);
        }
        else
        {

          v10 = *(void (**)(uint64_t, uint64_t))(v144 + 8);
          v10(v49, v50);
          v10(v48, v50);
          v10(v0, v50);
        }
        goto LABEL_6;
      }
      if (((1 << v22) & 0x16) == 0 && *(_BYTE *)(*(_QWORD *)(v2 + 56) + v23) == 1)
        break;
      (*(void (**)(_QWORD, _QWORD))(v144 + 8))(*(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 168));
      if (v6)
        goto LABEL_7;
LABEL_9:
      v15 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      if (v15 >= v134)
      {
        v17 = v8;
      }
      else
      {
        v16 = *(_QWORD *)(v132 + 8 * v15);
        if (v16)
          goto LABEL_12;
        v17 = v8 + 1;
        if ((uint64_t)(v8 + 2) < v134)
        {
          v16 = *(_QWORD *)(v132 + 8 * (v8 + 2));
          if (v16)
          {
            v15 = v8 + 2;
LABEL_12:
            v6 = (v16 - 1) & v16;
            v12 = __clz(__rbit64(v16)) + (v15 << 6);
            v8 = v15;
            goto LABEL_8;
          }
          v17 = v8 + 2;
          if ((uint64_t)(v8 + 3) < v134)
          {
            v16 = *(_QWORD *)(v132 + 8 * (v8 + 3));
            if (v16)
            {
              v15 = v8 + 3;
              goto LABEL_12;
            }
            v15 = v8 + 4;
            v17 = v8 + 3;
            if ((uint64_t)(v8 + 4) < v134)
            {
              v16 = *(_QWORD *)(v132 + 8 * v15);
              if (v16)
                goto LABEL_12;
              while (v128 != v8)
              {
                v16 = *(_QWORD *)(v126 + 8 * v8++);
                if (v16)
                {
                  v15 = v8 + 4;
                  goto LABEL_12;
                }
              }
              v17 = v125;
            }
          }
        }
      }
      v18 = *(_QWORD *)(v1 + 152);
      v19 = sub_10001A9A8(&qword_1010F2B78);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
      v6 = 0;
      v8 = v17;
    }
    v25 = *(_QWORD *)(v1 + 240);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v1 + 312))(v25, *(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 168));
    v26 = *(_QWORD **)(v1 + 104);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
    v147[0] = (uint64_t)v26;
    v29 = sub_100003FB0(v25);
    v30 = v26[2];
    v31 = (v28 & 1) == 0;
    v32 = v30 + v31;
    if (__OFADD__(v30, v31))
      goto LABEL_67;
    v33 = v28;
    if (v26[3] >= v32)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v28 & 1) == 0)
          goto LABEL_47;
      }
      else
      {
        sub_100A9A608();
        v26 = (_QWORD *)v147[0];
        if ((v33 & 1) == 0)
          goto LABEL_47;
      }
      goto LABEL_36;
    }
    v34 = *(_QWORD *)(v1 + 240);
    sub_100A862AC(v32, isUniquelyReferenced_nonNull_native);
    v26 = (_QWORD *)v147[0];
    v35 = sub_100003FB0(v34);
    if ((v33 & 1) == (v36 & 1))
    {
      v29 = v35;
      if ((v33 & 1) == 0)
      {
LABEL_47:
        v59 = *(void (**)(unint64_t, uint64_t, uint64_t))(v1 + 312);
        v60 = *(_QWORD *)(v1 + 240);
        v61 = *(_QWORD *)(v1 + 168);
        v0 = 1;
        v26[(v29 >> 6) + 8] |= 1 << v29;
        v59(v26[6] + *(_QWORD *)(v144 + 72) * v29, v60, v61);
        *(_BYTE *)(v26[7] + v29) = 1;
        v62 = v26[2];
        v63 = __OFADD__(v62, 1);
        v64 = v62 + 1;
        if (v63)
          goto LABEL_68;
        v26[2] = v64;
LABEL_49:
        v139 = v6;
        v141 = v8;
        v65 = *(_QWORD *)(v1 + 240);
        v66 = *(_QWORD *)(v1 + 168);
        *(_QWORD *)(v1 + 104) = v26;
        swift_bridgeObjectRelease();
        v0 = *(_QWORD *)(v144 + 8);
        ((void (*)(uint64_t, uint64_t))v0)(v65, v66);
        if (qword_1010E9938 != -1)
          swift_once(&qword_1010E9938, sub_1000AFBB0);
        v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 312);
        v68 = *(_QWORD *)(v1 + 248);
        v70 = *(_QWORD *)(v1 + 224);
        v69 = *(_QWORD *)(v1 + 232);
        v71 = *(_QWORD *)(v1 + 168);
        v72 = *(_QWORD *)(v1 + 128);
        v73 = type metadata accessor for Logger(0);
        sub_10001A9E8(v73, (uint64_t)qword_1011B6748);
        v67(v69, v72, v71);
        v74 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v67)(v70, v68, v71);
        v75 = Logger.logObject.getter(v74);
        v76 = static os_log_type_t.error.getter(v75);
        v77 = os_log_type_enabled(v75, v76);
        v78 = *(_QWORD *)(v1 + 248);
        v80 = *(_QWORD *)(v1 + 224);
        v79 = *(_QWORD *)(v1 + 232);
        v81 = *(_QWORD *)(v1 + 168);
        if (v77)
        {
          v136 = *(_QWORD *)(v1 + 248);
          v82 = swift_slowAlloc(42, -1);
          v131 = swift_slowAlloc(64, -1);
          v147[0] = v131;
          *(_DWORD *)v82 = 141558787;
          *(_QWORD *)(v82 + 4) = 1752392040;
          *(_WORD *)(v82 + 12) = 2081;
          v83 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v84 = dispatch thunk of CustomStringConvertible.description.getter(v81, v83);
          *(_QWORD *)(v82 + 14) = sub_100016940(v84, v85, v147);
          swift_bridgeObjectRelease();
          ((void (*)(uint64_t, uint64_t))v0)(v79, v81);
          *(_WORD *)(v82 + 22) = 2160;
          *(_QWORD *)(v82 + 24) = 1752392040;
          *(_WORD *)(v82 + 32) = 2081;
          v86 = dispatch thunk of CustomStringConvertible.description.getter(v81, v83);
          *(_QWORD *)(v82 + 34) = sub_100016940(v86, v87, v147);
          swift_bridgeObjectRelease();
          ((void (*)(uint64_t, uint64_t))v0)(v80, v81);
          _os_log_impl((void *)&_mh_execute_header, v75, v76, "Circle on server contains a member who accepted,\nshare-id: %{private,mask.hash}s, member-id: %{private,mask.hash}s.", (uint8_t *)v82, 0x2Au);
          swift_arrayDestroy(v131, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v131, -1, -1);
          swift_slowDealloc(v82, -1, -1);

          v88 = v136;
        }
        else
        {

          ((void (*)(uint64_t, uint64_t))v0)(v80, v81);
          ((void (*)(uint64_t, uint64_t))v0)(v79, v81);
          v88 = v78;
        }
        ((void (*)(uint64_t, uint64_t))v0)(v88, v81);
        v2 = v133;
LABEL_6:
        v6 = v139;
        v8 = v141;
        if (v139)
          continue;
        goto LABEL_9;
      }
LABEL_36:
      *(_BYTE *)(v26[7] + v29) = 1;
      goto LABEL_49;
    }
    return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(_QWORD *)(v1 + 168));
  }
}

uint64_t sub_1004DAC1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1000126B0(*(_QWORD *)(v0 + 296), type metadata accessor for OwnerSharingCircle);
  v1 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 224);
  v9 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 208);
  v11 = *(_QWORD *)(v0 + 192);
  v12 = *(_QWORD *)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 152);
  v14 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004DAD10()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 368) = *(_QWORD *)(*(_QWORD *)(v0 + 304) + 128);
  return swift_task_switch(sub_1004DAD30, 0, 0);
}

uint64_t sub_1004DAD30()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[46];
  v2 = v0[18];
  v3 = swift_task_alloc(32);
  v0[47] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[48] = v4;
  *v4 = v0;
  v4[1] = sub_1004DADD4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x8000000100EC6890, sub_100067DDC, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_1004DADD4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 384);
  *(_QWORD *)(*v1 + 392) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1004DAE40;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 376));
    v4 = sub_1004DB220;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1004DAE40()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  return swift_task_switch(sub_1004DAE80, v1, 0);
}

uint64_t sub_1004DAE80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  sub_100004048(*(_QWORD *)(v0 + 144), &qword_1010EC870);
  v1 = *(_QWORD *)(v0 + 392);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 312);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B6748);
  v7 = v2(v3, v5, v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 192);
  v13 = *(_QWORD *)(v0 + 168);
  v12 = *(_QWORD *)(v0 + 176);
  if (v10)
  {
    v14 = swift_slowAlloc(32, -1);
    v39 = swift_slowAlloc(64, -1);
    v41 = v39;
    *(_DWORD *)v14 = 141558531;
    *(_QWORD *)(v0 + 72) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v37 = v1;
    v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    *(_QWORD *)(v0 + 64) = sub_100016940(v16, v17, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    *(_WORD *)(v14 + 22) = 2080;
    swift_beginAccess(v0 + 104, v0 + 40, 0, 0);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    swift_bridgeObjectRetain(v18);
    v21 = Dictionary.description.getter(v20, v13, &type metadata for OwnerCircleMemberState, v19);
    v23 = v22;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 80) = sub_100016940(v21, v23, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to update members from server response,\nshare-id: %{private,mask.hash}s, updatedMembers: %s.", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v14, -1, -1);
    v24 = v37;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 168));
    v24 = v1;
  }
  swift_errorRelease(v24);

  sub_1000126B0(*(_QWORD *)(v0 + 296), type metadata accessor for OwnerSharingCircle);
  swift_bridgeObjectRelease();
  v25 = *(_QWORD *)(v0 + 272);
  v27 = *(_QWORD *)(v0 + 248);
  v26 = *(_QWORD *)(v0 + 256);
  v29 = *(_QWORD *)(v0 + 232);
  v28 = *(_QWORD *)(v0 + 240);
  v31 = *(_QWORD *)(v0 + 216);
  v30 = *(_QWORD *)(v0 + 224);
  v33 = *(_QWORD *)(v0 + 200);
  v32 = *(_QWORD *)(v0 + 208);
  v35 = *(_QWORD *)(v0 + 192);
  v36 = *(_QWORD *)(v0 + 160);
  v38 = *(_QWORD *)(v0 + 152);
  v40 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004DB220()
{
  uint64_t v0;

  return swift_task_switch(sub_1004DB234, *(_QWORD *)(v0 + 136), 0);
}

uint64_t sub_1004DB234()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 312);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B6748);
  v6 = v1(v2, v4, v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 200);
  v12 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 176);
  v13 = *(_QWORD *)(v0 + 144);
  if (v9)
  {
    v39 = *(_QWORD *)(v0 + 144);
    v14 = swift_slowAlloc(32, -1);
    v37 = swift_slowAlloc(64, -1);
    v41 = v37;
    *(_DWORD *)v14 = 141558531;
    *(_QWORD *)(v0 + 88) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    *(_QWORD *)(v0 + 96) = sub_100016940(v16, v17, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    *(_WORD *)(v14 + 22) = 2080;
    swift_beginAccess(v0 + 104, v0 + 16, 0, 0);
    v18 = *(_QWORD *)(v0 + 104);
    v19 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    swift_bridgeObjectRetain(v18);
    v21 = Dictionary.description.getter(v20, v12, &type metadata for OwnerCircleMemberState, v19);
    v23 = v22;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 112) = sub_100016940(v21, v23, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Circle on server updated members state,\nshare-id: %{private,mask.hash}s, updatedMembers: %s.", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    v24 = v39;
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    v24 = v13;
  }
  sub_100004048(v24, &qword_1010EC870);
  sub_1000126B0(*(_QWORD *)(v0 + 296), type metadata accessor for OwnerSharingCircle);
  swift_bridgeObjectRelease();
  v25 = *(_QWORD *)(v0 + 272);
  v27 = *(_QWORD *)(v0 + 248);
  v26 = *(_QWORD *)(v0 + 256);
  v29 = *(_QWORD *)(v0 + 232);
  v28 = *(_QWORD *)(v0 + 240);
  v31 = *(_QWORD *)(v0 + 216);
  v30 = *(_QWORD *)(v0 + 224);
  v33 = *(_QWORD *)(v0 + 200);
  v32 = *(_QWORD *)(v0 + 208);
  v35 = *(_QWORD *)(v0 + 192);
  v36 = *(_QWORD *)(v0 + 160);
  v38 = *(_QWORD *)(v0 + 152);
  v40 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004DB5E4()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 112));
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 160));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ShareKeysUploadUseCase()
{
  return objc_opt_self(_TtC12searchpartyd22ShareKeysUploadUseCase);
}

uint64_t sub_1004DB638(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v6 = type metadata accessor for OwnerSharingCircle(0);
  v7 = *(_QWORD *)(a2 + *(int *)(v6 + 32));
  v8 = *a3;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v10 = sub_1004DB6BC(v9, v7);
  v11 = *(int *)(v6 + 32);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v11) = v10;
  return result;
}

uint64_t sub_1004DB6BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  v8 = a2;
  sub_1001EF7F4(a1, (uint64_t)sub_1001EF47C, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1004DB738(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BookmarkMetaData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004DB77C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1004DB7F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100A814F0(v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_1004DB830(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F7820);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1004DB878()
{
  uint64_t v0;

  sub_100984858(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1004DB8BC(uint64_t a1)
{
  uint64_t v1;

  return sub_1004DB638(a1, *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

void sub_1004DB8C4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_100DD8154(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1004DB8DC()
{
  uint64_t *v0;

  return sub_100DD81F0(v0[2], v0[3], v0[4]);
}

uint64_t sub_1004DB8FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnerSharingCircle(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1010FD3AC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004C28;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch(sub_1004D8FD4, v3, 0);
}

uint64_t sub_1004DB97C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnerSharingCircle(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1010FD3C4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch(sub_1004D8E38, v3, 0);
}

void sub_1004DBAC0(char *a1, int a2, void *aBlock, void (*a4)(uint64_t, void *))
{
  void *v6;
  uint64_t v7;
  char *v8;

  v6 = _Block_copy(aBlock);
  v7 = *(_QWORD *)&a1[OBJC_IVAR____TtC12searchpartyd28AccessoryDiscoveryTrampoline_implementation];
  _Block_copy(v6);
  v8 = a1;
  a4(v7, v6);
  _Block_release(v6);
  _Block_release(v6);

}

void sub_1004DBCD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  id v5;

  if (a1)
    v4 = _convertErrorToNSError(_:)(a1);
  else
    v4 = 0;
  v5 = (id)v4;
  (*(void (**)(uint64_t))(a3 + 16))(a3);

}

uint64_t sub_1004DBD24(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;

  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd28AccessoryDiscoveryTrampoline_implementation);
  v8 = static os_log_type_t.debug.getter(a1);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, qword_1011B7DF0, "AccessoryDiscoveryService.pairingStatus", 39, 2, _swiftEmptyArrayStorage);
  type metadata accessor for Transaction(0);
  v9 = swift_allocObject(&unk_10107A020, 24, 7);
  swift_weakInit(v9 + 16, v7);
  v10 = (_QWORD *)swift_allocObject(&unk_10107A048, 48, 7);
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = v9;
  v11 = a1;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("PairingStatusForRequest", 23, 2, &unk_1010FD460, v10);
  swift_release();
  return swift_release();
}

id sub_1004DC024()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccessoryDiscoveryTrampoline();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AccessoryDiscoveryTrampoline()
{
  return objc_opt_self(_TtC12searchpartyd28AccessoryDiscoveryTrampoline);
}

uint64_t sub_1004DC084()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004DC0A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1004DC0DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_1011106CC);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100004A74;
  return sub_100A3635C(v2, v3, v5, v4);
}

uint64_t sub_1004DC140()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1004DC164(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1004DBCD0(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1004DC16C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1004DC1E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = (uint64_t *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v6 = *v5;
  v7 = v5[1];
  v8 = (_QWORD *)swift_task_alloc(dword_1011106DC);
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_100004C28;
  return sub_100A377E8(v4, v6, v7);
}

uint64_t sub_1004DC278()
{
  void *v0;
  NSString v1;
  id v2;
  unint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "valueForProperty:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v6, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100147814((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = sub_1004DC424();
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_10014785C((uint64_t)v7);
    return 0;
  }
}

uint64_t sub_1004DC360()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v4;
  _OWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;

  v1 = objc_msgSend(v0, "valueForProperty:", NRDevicePropertyUDID);
  if (v1)
  {
    v2 = v1;
    _bridgeAnyObjectToAny(_:)(v5, v1);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100147814((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast(&v4, v6, (char *)&type metadata for Any + 8, &type metadata for String, 6))
      return v4;
    else
      return 0;
  }
  else
  {
    sub_10014785C((uint64_t)v6);
    return 0;
  }
}

unint64_t sub_1004DC424()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010EE388;
  if (!qword_1010EE388)
  {
    v1 = objc_opt_self(NSUUID);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1010EE388);
  }
  return result;
}

uint64_t sub_1004DC460()
{
  return sub_1004DC360();
}

uint64_t *sub_1004DC480(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  _OWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    sub_10001BBBC(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    v11 = a2[4];
    v12 = a2[5];
    sub_10001BBBC(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    v13 = a2[6];
    v14 = a2[7];
    sub_10001BBBC(v13, v14);
    a1[6] = v13;
    a1[7] = v14;
    v15 = a3[8];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = a3[9];
    v20 = a3[10];
    v21 = (uint64_t *)((char *)a1 + v19);
    v22 = (uint64_t *)((char *)a2 + v19);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = (char *)a1 + v20;
    v25 = (_OWORD *)((char *)a2 + v20);
    v26 = *(uint64_t *)((char *)a2 + v20 + 8);
    swift_bridgeObjectRetain(v23);
    if (v26 >> 60 == 15)
    {
      *(_OWORD *)v24 = *v25;
    }
    else
    {
      v28 = *(_QWORD *)v25;
      sub_10001BBBC(v28, v26);
      *(_QWORD *)v24 = v28;
      *((_QWORD *)v24 + 1) = v26;
    }
    *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  }
  return a1;
}

uint64_t sub_1004DC5BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  unint64_t v8;

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10001BC14(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_10001BC14(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  sub_10001BC14(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  result = swift_bridgeObjectRelease();
  v7 = (uint64_t *)(a1 + *(int *)(a2 + 40));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    return sub_10001BC14(*v7, v8);
  return result;
}

uint64_t *sub_1004DC668(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  unint64_t v25;
  uint64_t v26;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  sub_10001BBBC(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  v10 = a2[4];
  v11 = a2[5];
  sub_10001BBBC(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  v12 = a2[6];
  v13 = a2[7];
  sub_10001BBBC(v12, v13);
  a1[6] = v12;
  a1[7] = v13;
  v14 = a3[8];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  v18 = a3[9];
  v19 = a3[10];
  v20 = (uint64_t *)((char *)a1 + v18);
  v21 = (uint64_t *)((char *)a2 + v18);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = (char *)a1 + v19;
  v24 = (_OWORD *)((char *)a2 + v19);
  v25 = *(uint64_t *)((char *)a2 + v19 + 8);
  swift_bridgeObjectRetain(v22);
  if (v25 >> 60 == 15)
  {
    *(_OWORD *)v23 = *v24;
  }
  else
  {
    v26 = *(_QWORD *)v24;
    sub_10001BBBC(v26, v25);
    *(_QWORD *)v23 = v26;
    *((_QWORD *)v23 + 1) = v25;
  }
  *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  return a1;
}

uint64_t *sub_1004DC778(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  sub_10001BBBC(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_10001BC14(v12, v13);
  v14 = a2[4];
  v15 = a2[5];
  sub_10001BBBC(v14, v15);
  v16 = a1[4];
  v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_10001BC14(v16, v17);
  v18 = a2[6];
  v19 = a2[7];
  sub_10001BBBC(v18, v19);
  v20 = a1[6];
  v21 = a1[7];
  a1[6] = v18;
  a1[7] = v19;
  sub_10001BC14(v20, v21);
  v22 = a3[8];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
  v26 = a3[9];
  v27 = (uint64_t *)((char *)a1 + v26);
  v28 = (uint64_t *)((char *)a2 + v26);
  *v27 = *v28;
  v29 = v28[1];
  v27[1] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease();
  v30 = a3[10];
  v31 = (uint64_t *)((char *)a1 + v30);
  v32 = (uint64_t *)((char *)a2 + v30);
  v33 = *(uint64_t *)((char *)a2 + v30 + 8);
  if (*(unint64_t *)((char *)a1 + v30 + 8) >> 60 != 15)
  {
    if (v33 >> 60 != 15)
    {
      v35 = *v32;
      sub_10001BBBC(v35, v33);
      v36 = *v31;
      v37 = v31[1];
      *v31 = v35;
      v31[1] = v33;
      sub_10001BC14(v36, v37);
      goto LABEL_8;
    }
    sub_1000DC964((uint64_t)v31);
    goto LABEL_6;
  }
  if (v33 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v31 = *(_OWORD *)v32;
    goto LABEL_8;
  }
  v34 = *v32;
  sub_10001BBBC(v34, v33);
  *v31 = v34;
  v31[1] = v33;
LABEL_8:
  *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  return a1;
}

_OWORD *sub_1004DC904(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[8];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  return a1;
}

uint64_t *sub_1004DC998(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001BC14(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10001BC14(v8, v9);
  v10 = a1[4];
  v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10001BC14(v10, v11);
  v12 = a1[6];
  v13 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_10001BC14(v12, v13);
  v14 = a3[8];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  v18 = a3[9];
  v19 = (uint64_t *)((char *)a1 + v18);
  v20 = (uint64_t *)((char *)a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  v23 = a3[10];
  v24 = (uint64_t *)((char *)a1 + v23);
  v25 = (uint64_t *)((char *)a2 + v23);
  v26 = *(uint64_t *)((char *)a1 + v23 + 8);
  if (v26 >> 60 != 15)
  {
    v27 = v25[1];
    if (v27 >> 60 != 15)
    {
      v28 = *v24;
      *v24 = *v25;
      v24[1] = v27;
      sub_10001BC14(v28, v26);
      goto LABEL_6;
    }
    sub_1000DC964((uint64_t)v24);
  }
  *(_OWORD *)v24 = *(_OWORD *)v25;
LABEL_6:
  *(uint64_t *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  return a1;
}

uint64_t sub_1004DCAB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004DCAC4);
}

uint64_t sub_1004DCAC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 32), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1004DCB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004DCB60);
}

uint64_t sub_1004DCB60(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 32), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36) + 8) = a2;
  return result;
}

uint64_t type metadata accessor for PencilPairingLockCheckResponse(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FD4C8;
  if (!qword_1010FD4C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PencilPairingLockCheckResponse);
  return result;
}

uint64_t sub_1004DCC1C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_100E3F8E0;
  v4[1] = &unk_100E3F8E0;
  v4[2] = &unk_100E3F8E0;
  v4[3] = &unk_100E3F8E0;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = &unk_100E3F8F8;
    v4[6] = &unk_100E3F910;
    v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1004DCCB4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1004DCCF0
                                                            + 4 * asc_100E3F8A0[a1]))(0x754E6C6169726573, 0xEC0000007265626DLL);
}

uint64_t sub_1004DCCF0()
{
  return 0x6169726553746C61;
}

uint64_t sub_1004DCD14()
{
  return 0x5364656573;
}

uint64_t sub_1004DCD28()
{
  return 0x6953726576726573;
}

uint64_t sub_1004DCD44()
{
  return 0x6449616E6D66;
}

uint64_t sub_1004DCD58()
{
  return 0x704164656B73616DLL;
}

unint64_t sub_1004DCD7C()
{
  return 0xD000000000000013;
}

uint64_t sub_1004DCD98(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1004DCDD4 + 4 * byte_100E3F8A7[a1]))(0x754E6C6169726573, 0xEC0000007265626DLL);
}

uint64_t sub_1004DCDD4()
{
  return 0x6169726553746C61;
}

uint64_t sub_1004DCDF8()
{
  return 0x5364656573;
}

uint64_t sub_1004DCE0C()
{
  return 0x6953726576726573;
}

uint64_t sub_1004DCE28()
{
  return 0x6449616E6D66;
}

uint64_t sub_1004DCE3C()
{
  return 0x704164656B73616DLL;
}

unint64_t sub_1004DCE60()
{
  return 0xD000000000000013;
}

uint64_t sub_1004DCE7C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD v32[2];
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  __int128 v41;
  char v42;

  v35 = a2;
  v36 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v5 = (_QWORD *)((char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = sub_10001A9A8(&qword_1010FD518);
  v6 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PencilPairingLockCheckResponse(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v12[*(int *)(v10 + 44)] = 0;
  v13 = a1[3];
  v14 = a1[4];
  v39 = a1;
  sub_10001AA44(a1, v13);
  v15 = sub_1004DD434();
  v37 = v8;
  v16 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PencilPairingLockCheckResponse.CodingKeys, &type metadata for PencilPairingLockCheckResponse.CodingKeys, v15, v13, v14);
  if (v16)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v39);
  v33 = v5;
  v34 = v3;
  v17 = v6;
  v40 = v9;
  v18 = v12;
  v42 = 0;
  v19 = sub_100036994();
  v20 = v37;
  v21 = v38;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v41, &type metadata for Data, &v42, v38, &type metadata for Data, v19);
  v22 = *((_QWORD *)&v41 + 1);
  *(_QWORD *)v18 = v41;
  *((_QWORD *)v18 + 1) = v22;
  v42 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v41, &type metadata for Data, &v42, v21, &type metadata for Data, v19);
  *((_OWORD *)v18 + 1) = v41;
  v42 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v41, &type metadata for Data, &v42, v21, &type metadata for Data, v19);
  *((_OWORD *)v18 + 2) = v41;
  v42 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v41, &type metadata for Data, &v42, v21, &type metadata for Data, v19);
  v23 = (uint64_t)v18;
  *((_OWORD *)v18 + 3) = v41;
  LOBYTE(v41) = 4;
  v24 = sub_100252A08();
  v25 = v33;
  v26 = v36;
  v32[1] = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v33, v36, &v41, v21, v36, v24);
  v27 = v40;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v34 + 32))(v23 + *(int *)(v40 + 32), v25, v26);
  LOBYTE(v41) = 5;
  v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v41, v21);
  v29 = (uint64_t *)(v23 + *(int *)(v27 + 36));
  *v29 = v28;
  v29[1] = v30;
  v42 = 6;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v42, v21, &type metadata for Data, v19);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v21);
  *(_OWORD *)(v23 + *(int *)(v27 + 40)) = v41;
  sub_1004DD478(v23, v35);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v39);
  return sub_1004DD4BC(v23);
}

uint64_t sub_1004DD328(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100511118(*a1, *a2);
}

uint64_t sub_1004DD334()
{
  unsigned __int8 *v0;

  return sub_10051616C(0, *v0);
}

uint64_t sub_1004DD340(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_100514F84(a1, *v1);
}

uint64_t sub_1004DD348(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_10051616C(a1, *v1);
}

unint64_t sub_1004DD350@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1004DD69C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1004DD37C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1004DCCB4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1004DD3A4()
{
  unsigned __int8 *v0;

  return sub_1004DCD98(*v0);
}

unint64_t sub_1004DD3AC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1004DD69C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1004DD3D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004DD434();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004DD3F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004DD434();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004DD420@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004DCE7C(a1, a2);
}

unint64_t sub_1004DD434()
{
  unint64_t result;

  result = qword_1010FD520;
  if (!qword_1010FD520)
  {
    result = swift_getWitnessTable(byte_100E3FA5C, &type metadata for PencilPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FD520);
  }
  return result;
}

uint64_t sub_1004DD478(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PencilPairingLockCheckResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004DD4BC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PencilPairingLockCheckResponse(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for PencilPairingLockCheckResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1004DD544 + 4 * byte_100E3F8B3[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1004DD578 + 4 * byte_100E3F8AE[v4]))();
}

uint64_t sub_1004DD578(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004DD580(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004DD588);
  return result;
}

uint64_t sub_1004DD594(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004DD59CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1004DD5A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004DD5A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PencilPairingLockCheckResponse.CodingKeys()
{
  return &type metadata for PencilPairingLockCheckResponse.CodingKeys;
}

unint64_t sub_1004DD5C8()
{
  unint64_t result;

  result = qword_1010FD528;
  if (!qword_1010FD528)
  {
    result = swift_getWitnessTable(byte_100E3FA34, &type metadata for PencilPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FD528);
  }
  return result;
}

unint64_t sub_1004DD610()
{
  unint64_t result;

  result = qword_1010FD530;
  if (!qword_1010FD530)
  {
    result = swift_getWitnessTable(asc_100E3F96C, &type metadata for PencilPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FD530);
  }
  return result;
}

unint64_t sub_1004DD658()
{
  unint64_t result;

  result = qword_1010FD538;
  if (!qword_1010FD538)
  {
    result = swift_getWitnessTable(aE_20, &type metadata for PencilPairingLockCheckResponse.CodingKeys);
    atomic_store(result, &qword_1010FD538);
  }
  return result;
}

unint64_t sub_1004DD69C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104A820, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

uint64_t sub_1004DD6E4(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _BOOL4 v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  _QWORD v70[3];
  char v71[16];
  uint64_t v72[6];

  v55 = type metadata accessor for TimeBasedKey(0);
  v54 = *(_QWORD *)(v55 - 8);
  v4 = __chkstk_darwin(v55);
  v69 = (uint64_t)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v68 = (uint64_t *)((char *)&v48 - v6);
  v53 = type metadata accessor for Date(0);
  v52 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v51 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DateInterval(0);
  v66 = *(_QWORD *)(v8 - 8);
  v67 = v8;
  __chkstk_darwin(v8);
  v65 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(int *)(type metadata accessor for SharedBeaconRecord(0) + 20);
  v56 = a1;
  v11 = a1 + v10;
  v57 = a2;
  v12 = sub_100DD7EF4(a1 + v10, a2, 0);
  if (v12)
  {
    v13 = v12;
    v14 = *(unsigned int *)(v12 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_firstIndex);
    v15 = *(unsigned int *)(v12 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_lastIndex);
    if (v15 < v14)
    {
      __break(1u);
    }
    else
    {
      v16 = objc_autoreleasePoolPush();
      a1 = 0;
      sub_100B2F14C(v14, v13, 0, v72);
      v48 = v11;
      v17 = v14 == v15;
      v49 = v15 - 1;
      v18 = _swiftEmptyArrayStorage;
      v50 = v13;
      do
      {
        v64 = v17;
        v59 = a1;
        objc_autoreleasePoolPop(v16);
        v20 = v72[0];
        v19 = v72[1];
        v22 = v72[2];
        v21 = v72[3];
        v23 = v72[4];
        v60 = v72[5];
        v24 = v51;
        sub_100D3A990((uint64_t)v51);
        v25 = sub_1004DDCE4(v57);
        v26 = (unint64_t)v18;
        v27 = v65;
        sub_10064C538(v24, v14, v25, v65);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v24, v53);
        v28 = v55;
        v29 = v68;
        v30 = v27;
        v18 = (_QWORD *)v26;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))((uint64_t)v68 + *(int *)(v55 + 20), v30, v67);
        v58 = v14;
        *v29 = v14;
        v31 = (uint64_t *)((char *)v29 + *(int *)(v28 + 24));
        *v31 = v20;
        v31[1] = v19;
        v31[2] = v22;
        v31[3] = v21;
        v32 = v60;
        v31[4] = v23;
        v31[5] = v32;
        sub_10005972C((uint64_t)v29, v69, type metadata accessor for TimeBasedKey);
        v61 = v20;
        sub_10001BD08(v20, v19);
        v62 = v22;
        v63 = v21;
        sub_10001BBBC(v22, v21);
        sub_10001BD08(v23, v32);
        if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
          v18 = (_QWORD *)sub_1007C80D0(0, *(_QWORD *)(v26 + 16) + 1, 1, v26);
        v34 = v18[2];
        v33 = v18[3];
        if (v34 >= v33 >> 1)
          v18 = (_QWORD *)sub_1007C80D0(v33 > 1, v34 + 1, 1, (unint64_t)v18);
        v18[2] = v34 + 1;
        sub_1000126EC(v69, (uint64_t)v18+ ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))+ *(_QWORD *)(v54 + 72) * v34, type metadata accessor for TimeBasedKey);
        sub_10001EF3C(v61, v19);
        sub_10001BC14(v62, v63);
        sub_10001EF3C(v23, v32);
        sub_1000126B0((uint64_t)v68, type metadata accessor for TimeBasedKey);
        (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v67);
        if (v64)
        {
          swift_release();
          return (uint64_t)v18;
        }
        v35 = v50;
        if (v58 == 0xFFFFFFFFLL)
        {
          result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
          __break(1u);
          return result;
        }
        v36 = v58 + 1;
        v17 = v49 == v58;
        v16 = objc_autoreleasePoolPush();
        a1 = v59;
        sub_100B2F14C(v36, v35, 0, v72);
        v14 = v36;
      }
      while (!a1);
      v14 = v36;
      objc_autoreleasePoolPop(v16);
      v37 = swift_bridgeObjectRelease();
      v15 = static os_log_type_t.error.getter(v37);
      if (qword_1010E9DF8 == -1)
        goto LABEL_14;
    }
    swift_once(&qword_1010E9DF8, sub_100654FE4);
LABEL_14:
    v38 = qword_1011B73B8;
    v39 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v40 = swift_allocObject(v39, 152, 7);
    *(_OWORD *)(v40 + 16) = xmmword_100E221E0;
    *(_QWORD *)(v40 + 56) = &type metadata for UInt64;
    *(_QWORD *)(v40 + 64) = &protocol witness table for UInt64;
    *(_QWORD *)(v40 + 32) = v14;
    v41 = UUID.uuidString.getter(v40);
    v43 = v42;
    *(_QWORD *)(v40 + 96) = &type metadata for String;
    v44 = sub_10001AA00();
    *(_QWORD *)(v40 + 104) = v44;
    *(_QWORD *)(v40 + 72) = v41;
    *(_QWORD *)(v40 + 80) = v43;
    swift_getErrorValue(a1, v71, v70);
    v45 = Error.localizedDescription.getter(v70[1], v70[2]);
    *(_QWORD *)(v40 + 136) = &type metadata for String;
    *(_QWORD *)(v40 + 144) = v44;
    *(_QWORD *)(v40 + 112) = v45;
    *(_QWORD *)(v40 + 120) = v46;
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v38, "subsequence.rootKeys failed for index %lu for %@: %@", 52, 2, v40);
    swift_bridgeObjectRelease();
    swift_release();
    swift_errorRelease(a1);
  }
  return 0;
}

uint64_t sub_1004DDCC0()
{
  uid_t v0;

  v0 = getuid();
  return sub_100A06500(v0);
}

uint64_t sub_1004DDCE4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (a1)
  {
    if (a1 != 1)
      return -1;
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v1 = sub_100C1AE40(v4);
  }
  else
  {
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v1 = sub_100C1A848(v4);
  }
  v2 = v1;
  swift_bridgeObjectRelease();
  if (v2 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
    return -1;
  }
  return v2;
}

_QWORD *sub_1004DDE38(_QWORD *result, unint64_t a2, int a3, char a4)
{
  _QWORD *v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v7 = a2;
  if ((_BYTE)a3)
  {
    v8 = a2;
    if (a3 != 1)
    {
      v9 = sub_1004E2558();
      v10 = swift_allocError(&type metadata for BeaconKeyManagerError, v9, 0, 0);
      *v11 = 0;
      return (_QWORD *)swift_willThrow(v10);
    }
    goto LABEL_12;
  }
  if (!a2)
    goto LABEL_11;
  if (is_mul_ok(a2, 0x60uLL))
  {
    v7 = 96 * a2 - 1;
    if (96 * a2 - 96 <= 1)
      v8 = 1;
    else
      v8 = 96 * a2 - 96;
    if (v7 >= v8)
      goto LABEL_12;
    __break(1u);
LABEL_11:
    v8 = 0;
LABEL_12:
    v12 = result[3];
    v13 = result[4];
    v14 = sub_10001AA44(result, v12);
    return sub_1004DF978((unint64_t)v14, (int *)v8, v7, a3, a4 & 1, 0, v4, v12, v13);
  }
  __break(1u);
  return result;
}

uint64_t sub_1004DDF38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, int a7, unint64_t *a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  uint64_t result;
  _BYTE v35[12];
  int v36;
  unint64_t *v37;
  uint64_t v38;

  v37 = a8;
  v36 = a7;
  v11 = type metadata accessor for TimeBasedKey(0);
  v38 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = &v35[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v16 = &v35[-v15];
  v17 = type metadata accessor for DateInterval(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = &v35[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = (char *)(a5 + *(int *)(type metadata accessor for OwnedBeaconRecord(0) + 32));
  v22 = *a6;
  v23 = sub_1004DDCE4(v36);
  sub_10064C538(v21, v22, v23, (uint64_t)v20);
  v24 = *a6;
  (*(void (**)(char *, _BYTE *, uint64_t))(v18 + 16))(&v16[*(int *)(v11 + 20)], v20, v17);
  *(_QWORD *)v16 = v24;
  v25 = *(int *)(v11 + 24);
  v26 = v37;
  v27 = &v16[v25];
  v28 = *((_OWORD *)a4 + 2);
  v29 = *(_OWORD *)a4;
  *((_OWORD *)v27 + 1) = *((_OWORD *)a4 + 1);
  *((_OWORD *)v27 + 2) = v28;
  *(_OWORD *)v27 = v29;
  sub_10005972C((uint64_t)v16, (uint64_t)v14, type metadata accessor for TimeBasedKey);
  v30 = *v26;
  sub_100153E4C(a4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v30);
  *v26 = v30;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v30 = sub_1007C80D0(0, *(_QWORD *)(v30 + 16) + 1, 1, v30);
    *v26 = v30;
  }
  v33 = *(_QWORD *)(v30 + 16);
  v32 = *(_QWORD *)(v30 + 24);
  if (v33 >= v32 >> 1)
  {
    v30 = sub_1007C80D0(v32 > 1, v33 + 1, 1, v30);
    *v26 = v30;
  }
  *(_QWORD *)(v30 + 16) = v33 + 1;
  sub_1000126EC((uint64_t)v14, v30+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(_QWORD *)(v38 + 72) * v33, type metadata accessor for TimeBasedKey);
  sub_1000126B0((uint64_t)v16, type metadata accessor for TimeBasedKey);
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v18 + 8))(v20, v17);
  if (*a6 == -1)
    __break(1u);
  else
    ++*a6;
  return result;
}

uint64_t sub_1004DE174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[8] = swift_task_alloc(v7);
  v4[9] = swift_task_alloc(v7);
  return swift_task_switch(sub_1004DE1E8, 0, 0);
}

uint64_t sub_1004DE1E8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uid_t v4;
  _QWORD *v5;

  v1 = (_QWORD *)v0[4];
  v2 = v1[3];
  v3 = v1[4];
  sub_10001AA44(v1, v2);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) + 32))(v2);
  v4 = getuid();
  sub_100A06500(v4);
  v5 = (_QWORD *)swift_task_alloc(dword_1010FCECC);
  v0[10] = v5;
  *v5 = v0;
  v5[1] = sub_1004DE298;
  return sub_100477D48(v0[8], v0[9], v0[5]);
}

uint64_t sub_1004DE298(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t (*v13)();
  void (*v14)(uint64_t, uint64_t);

  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 80);
  *(_QWORD *)(*(_QWORD *)v3 + 88) = v2;
  swift_task_dealloc(v7);
  v8 = v6[8];
  v9 = v6[9];
  v11 = v6[6];
  v10 = v6[7];
  if (v2)
  {
    v12 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v12(v8, v6[6]);
    v12(v9, v11);
    v13 = sub_1004DE39C;
  }
  else
  {
    v6[12] = a2;
    v6[13] = a1;
    v14 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v14(v8, v11);
    v14(v9, v11);
    v13 = sub_1004DE350;
  }
  return swift_task_switch(v13, 0, 0);
}

uint64_t sub_1004DE350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  *(int8x16_t *)*(_QWORD *)(v0 + 16) = vextq_s8(*(int8x16_t *)(v0 + 96), *(int8x16_t *)(v0 + 96), 8uLL);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004DE39C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004DE3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[8] = swift_task_alloc(v7);
  v4[9] = swift_task_alloc(v7);
  return swift_task_switch(sub_1004DE44C, 0, 0);
}

uint64_t sub_1004DE44C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uid_t v8;
  _QWORD *v9;

  v1 = (_QWORD *)v0[5];
  v2 = (_QWORD *)v0[3];
  v3 = v2[3];
  v4 = v2[4];
  v5 = sub_10001AA44(v2, v3);
  v6 = v1[3];
  v7 = v1[4];
  sub_10001AA44(v1, v6);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 8) + 32))(v6);
  v8 = getuid();
  sub_100A06500(v8);
  v9 = (_QWORD *)swift_task_alloc(dword_1010FCEBC);
  v0[10] = v9;
  *v9 = v0;
  v9[1] = sub_1004DE52C;
  return sub_10047701C(v0[8], v0[9], (uint64_t)v5, v3, v4);
}

uint64_t sub_1004DE52C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t (*v13)();
  void (*v14)(uint64_t, uint64_t);

  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 80);
  *(_QWORD *)(*(_QWORD *)v3 + 88) = v2;
  swift_task_dealloc(v7);
  v8 = v6[8];
  v9 = v6[9];
  v11 = v6[6];
  v10 = v6[7];
  if (v2)
  {
    v12 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v12(v8, v6[6]);
    v12(v9, v11);
    v13 = sub_1004E2DD0;
  }
  else
  {
    v6[12] = a2;
    v6[13] = a1;
    v14 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v14(v8, v11);
    v14(v9, v11);
    v13 = sub_1004E2DD8;
  }
  return swift_task_switch(v13, 0, 0);
}

uint64_t sub_1004DE5E4@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  double v25;
  double v26;
  uint64_t (*v27)(_BYTE *, uint64_t);
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v58;
  void (*v59)(_BYTE *, uint64_t);
  _BYTE v61[12];
  unsigned int v62;
  uint64_t *v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v64 = a3;
  v67 = a4;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v65 = &v61[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v8);
  v12 = &v61[-v11];
  v13 = __chkstk_darwin(v10);
  v15 = &v61[-v14];
  v16 = __chkstk_darwin(v13);
  v18 = &v61[-v17];
  v19 = __chkstk_darwin(v16);
  v21 = &v61[-v20];
  v22 = __chkstk_darwin(v19);
  v24 = &v61[-v23];
  v66 = v7;
  if ((a1 & 1) != 0)
  {
    DateInterval.start.getter(v22);
    v25 = Date.timeIntervalSince(_:)(a2);
    if (v25 > 0.0)
      v26 = v25 * 0.0002;
    else
      v26 = 0.0;
    v27 = *(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8);
    v28 = v27(v18, v6);
    DateInterval.end.getter(v28);
    v29 = Date.timeIntervalSince(_:)(a2);
    if (v29 > 0.0)
      v30 = v29 * 0.0002;
    else
      v30 = 0.0;
    v31 = v27(v15, v6);
    DateInterval.start.getter(v31);
    Date.addingTimeInterval(_:)(-v26);
    v32 = v27(v12, v6);
    DateInterval.end.getter(v32);
    Date.addingTimeInterval(_:)(v30);
    v33 = v27(v12, v6);
    v62 = static os_log_type_t.default.getter(v33);
    if (qword_1010E9DF8 != -1)
      swift_once(&qword_1010E9DF8, sub_100654FE4);
    v34 = qword_1011B73B8;
    v35 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v36 = swift_allocObject(v35, 232, 7);
    *(_OWORD *)(v36 + 16) = xmmword_100E27910;
    v68 = *v63;
    v37 = sub_10001A9A8(&qword_1010FA1E8);
    v38 = String.init<A>(describing:)(&v68, v37);
    v40 = v39;
    *(_QWORD *)(v36 + 56) = &type metadata for String;
    v41 = sub_10001AA00();
    *(_QWORD *)(v36 + 32) = v38;
    *(_QWORD *)(v36 + 40) = v40;
    *(_QWORD *)(v36 + 96) = &type metadata for String;
    *(_QWORD *)(v36 + 104) = v41;
    *(_QWORD *)(v36 + 64) = v41;
    *(_QWORD *)(v36 + 72) = 0xD000000000000053;
    *(_QWORD *)(v36 + 80) = 0x8000000100ED89E0;
    v42 = UUID.uuidString.getter(v41);
    *(_QWORD *)(v36 + 136) = &type metadata for String;
    *(_QWORD *)(v36 + 144) = v41;
    *(_QWORD *)(v36 + 112) = v42;
    *(_QWORD *)(v36 + 120) = v43;
    *(_QWORD *)(v36 + 176) = &type metadata for Double;
    *(_QWORD *)(v36 + 184) = &protocol witness table for Double;
    *(double *)(v36 + 152) = v26;
    *(_QWORD *)(v36 + 216) = &type metadata for Double;
    *(_QWORD *)(v36 + 224) = &protocol witness table for Double;
    *(double *)(v36 + 192) = v30;
    os_log(_:dso:log:_:_:)(v62, &_mh_execute_header, v34, "%{public}@: %{public}@. Is drift compensated for beacon %{mask.hash}@, drift %f - %f", 84, 2, v36);
  }
  else
  {
    v44 = DateInterval.start.getter(v22);
    v45 = DateInterval.end.getter(v44);
    v62 = static os_log_type_t.default.getter(v45);
    if (qword_1010E9DF8 != -1)
      swift_once(&qword_1010E9DF8, sub_100654FE4);
    v46 = qword_1011B73B8;
    v47 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v48 = swift_allocObject(v47, 152, 7);
    *(_OWORD *)(v48 + 16) = xmmword_100E221E0;
    v68 = *v63;
    v49 = sub_10001A9A8(&qword_1010FA1E8);
    v50 = String.init<A>(describing:)(&v68, v49);
    v52 = v51;
    *(_QWORD *)(v48 + 56) = &type metadata for String;
    v53 = sub_10001AA00();
    *(_QWORD *)(v48 + 32) = v50;
    *(_QWORD *)(v48 + 40) = v52;
    *(_QWORD *)(v48 + 96) = &type metadata for String;
    *(_QWORD *)(v48 + 104) = v53;
    *(_QWORD *)(v48 + 64) = v53;
    *(_QWORD *)(v48 + 72) = 0xD000000000000053;
    *(_QWORD *)(v48 + 80) = 0x8000000100ED89E0;
    v54 = UUID.uuidString.getter(v53);
    *(_QWORD *)(v48 + 136) = &type metadata for String;
    *(_QWORD *)(v48 + 144) = v53;
    *(_QWORD *)(v48 + 112) = v54;
    *(_QWORD *)(v48 + 120) = v55;
    os_log(_:dso:log:_:_:)(v62, &_mh_execute_header, v46, "%{public}@: %{public}@. No drift compensation for beacon %{mask.hash}@", 70, 2, v48);
  }
  swift_bridgeObjectRelease();
  v56 = v66;
  v57 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v66 + 16);
  v57(v12, v24, v6);
  v58 = v65;
  v57(v65, v21, v6);
  DateInterval.init(start:end:)(v12, v58);
  v59 = *(void (**)(_BYTE *, uint64_t))(v56 + 8);
  v59(v21, v6);
  return ((uint64_t (*)(_BYTE *, uint64_t))v59)(v24, v6);
}

uint64_t sub_1004DEA64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  v4 = sub_10001A9A8(&qword_1010FD568);
  v3[10] = v4;
  v3[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v3[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[13] = v6;
  v3[14] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010FD558);
  v3[15] = v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[16] = swift_task_alloc(v8);
  v3[17] = swift_task_alloc(v8);
  v9 = sub_10001A9A8(&qword_1010F7AE0);
  v3[18] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[19] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v3[20] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[21] = swift_task_alloc(v12);
  v3[22] = swift_task_alloc(v12);
  v13 = type metadata accessor for UUID(0);
  v3[23] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v3[24] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v3[25] = v15;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[26] = swift_task_alloc(v16);
  v3[27] = swift_task_alloc(v16);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F47D0);
  v3[28] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v3[29] = v18;
  v19 = *(_QWORD *)(v18 + 64);
  v3[30] = v19;
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[31] = swift_task_alloc(v20);
  v3[32] = swift_task_alloc(v20);
  return swift_task_switch(sub_1004DEBE4, 0, 0);
}

uint64_t sub_1004DEBE4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD **)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = v1[3];
  v4 = v1[4];
  sub_10001AA44(v1, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) + 32))(v3);
  return swift_task_switch(sub_1004DEC50, v2, 0);
}

uint64_t sub_1004DEC50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v2 = *(_QWORD *)(v0 + 208);
  v1 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 72);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 264) = v7;
  v7(v2, v1, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 352) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_10107A288, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 272) = v10;
  *(_QWORD *)(v10 + 16) = v6;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 280) = v11;
  v11(v10 + v9, v2, v5);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 288) = v13;
  *v13 = v0;
  v13[1] = sub_1004DED3C;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 256), sub_1004E2180, v10, *(_QWORD *)(v0 + 224));
}

uint64_t sub_1004DED3C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 216);
  v3 = *(_QWORD *)(*v0 + 184);
  v4 = *(_QWORD *)(*v0 + 192);
  swift_task_dealloc(*(_QWORD *)(*v0 + 288));
  swift_release();
  v5 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(_QWORD *)(v1 + 296) = v5;
  v5(v2, v3);
  return swift_task_switch(sub_1004DEDC4, 0, 0);
}

uint64_t sub_1004DEDC4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD **)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = v1[3];
  v4 = v1[4];
  sub_10001AA44(v1, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) + 32))(v3);
  return swift_task_switch(sub_1004DEE30, v2, 0);
}

uint64_t sub_1004DEE30()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 280);
  v2 = *(unsigned __int8 *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 200);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 264))(v3, *(_QWORD *)(v0 + 216), v4);
  v9 = swift_allocObject(&unk_10107A2B0, v7, v8);
  *(_QWORD *)(v0 + 304) = v9;
  *(_QWORD *)(v9 + 16) = v5;
  v1(v9 + v6, v3, v4);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 312) = v11;
  *v11 = v0;
  v11[1] = sub_1004DEF1C;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 176), sub_10007CAF0, v9, *(_QWORD *)(v0 + 144));
}

uint64_t sub_1004DEF1C()
{
  uint64_t *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  v2 = *(void (**)(uint64_t, uint64_t))(*v0 + 296);
  v3 = *(_QWORD *)(*v0 + 216);
  v4 = *(_QWORD *)(*v0 + 184);
  v5 = *(_QWORD *)(*v0 + 120);
  v6 = *(_QWORD *)(*v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*v0 + 312));
  swift_release();
  v2(v3, v4);
  *(_DWORD *)(v1 + 356) = *(_DWORD *)(v5 + 48);
  return swift_task_switch(sub_1004DEFB4, v6, 0);
}

uint64_t sub_1004DEFB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 232);
  v17 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 72);
  sub_100030784(*(_QWORD *)(v0 + 64), v0 + 16);
  sub_10000F9B8(v4, v5, &qword_1010F7AE0);
  sub_10000F9B8(v2, v1, (uint64_t *)&unk_1010F47D0);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = (v9 + 64) & ~v9;
  v11 = *(unsigned __int8 *)(v3 + 80);
  v12 = (v6 + v11 + v10) & ~v11;
  v13 = swift_allocObject(&unk_10107A2D8, v12 + v17, v9 | v11 | 7);
  *(_QWORD *)(v0 + 320) = v13;
  *(_QWORD *)(v13 + 16) = v8;
  sub_10000F9FC((__int128 *)(v0 + 16), v13 + 24);
  sub_100005CF0(v5, v13 + v10, &qword_1010F7AE0);
  sub_100005CF0(v1, v13 + v12, (uint64_t *)&unk_1010F47D0);
  v14 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v15 = (_QWORD *)swift_task_alloc(v14);
  *(_QWORD *)(v0 + 328) = v15;
  *v15 = v0;
  v15[1] = sub_1004DF100;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 88), sub_1004E2328, v13, *(_QWORD *)(v0 + 80));
}

uint64_t sub_1004DF100()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 328));
  swift_release();
  return swift_task_switch(sub_1004DF160, v1, 0);
}

uint64_t sub_1004DF160()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  void (*v7)(uint64_t, char *, uint64_t);

  v2 = v0[13];
  v1 = v0[14];
  v4 = (_QWORD *)v0[11];
  v3 = v0[12];
  v5 = v0[10];
  v0[42] = *v4;
  v6 = (char *)v4 + *(int *)(v5 + 48);
  v7 = *(void (**)(uint64_t, char *, uint64_t))(v2 + 32);
  v0[43] = v7;
  v7(v1, v6, v3);
  return swift_task_switch(sub_1004DF1BC, 0, 0);
}

uint64_t sub_1004DF1BC()
{
  uint64_t v0;
  void (*v1)(char *);
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void (**)(char *))(v0 + 344);
  v2 = *(_QWORD *)(v0 + 256);
  v12 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 216);
  v15 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 176);
  v4 = *(uint64_t **)(v0 + 128);
  v16 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 112);
  v18 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 56);
  v8 = v16 + *(int *)(v0 + 356);
  v9 = (char *)v4 + *(int *)(v5 + 48);
  *v4 = *(_QWORD *)(v0 + 336);
  v1(v9);
  sub_100004048(v3, &qword_1010F7AE0);
  sub_100004048(v2, (uint64_t *)&unk_1010F47D0);
  v14 = *v4;
  ((void (*)(uint64_t, char *, uint64_t))v1)(v8, v9, v6);
  v10 = (char *)v4 + *(int *)(v5 + 48);
  ((void (*)(char *, uint64_t, uint64_t))v1)(v10, v8, v6);
  ((void (*)(uint64_t, char *, uint64_t))v1)(v7, v10, v6);
  swift_task_dealloc(v2);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v3);
  swift_task_dealloc(v18);
  swift_task_dealloc(v16);
  swift_task_dealloc(v4);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
}

unint64_t sub_1004DF310(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  unint64_t *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[3];
  uint64_t v62;
  uint64_t v63;

  v56 = a1;
  v5 = type metadata accessor for Date(0);
  v59 = *(_QWORD *)(v5 - 8);
  v60 = v5;
  __chkstk_darwin(v5);
  v53 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010FD550);
  __chkstk_darwin(v7);
  v57 = (unint64_t *)((char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_10001A9A8(&qword_1010FD558);
  v58 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v55 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (unint64_t *)((char *)&v52 - v12);
  v14 = sub_10001A9A8(&qword_1010F7AE0);
  __chkstk_darwin(v14);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010F47D0);
  __chkstk_darwin(v21);
  v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = v16;
  if (a3)
  {
    v52 = v13;
    v25 = a2[3];
    v24 = a2[4];
    sub_10001AA44(a2, v25);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v24 + 8) + 8) + 32))(v25);
    sub_1008892B4((uint64_t)v23);
    v26 = *(void (**)(char *, uint64_t))(v18 + 8);
    v26(v20, v17);
    v28 = a2[3];
    v27 = a2[4];
    sub_10001AA44(a2, v28);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v27 + 8) + 8) + 32))(v28);
    sub_10081AECC((uint64_t)v20, (uint64_t)v16);
    v26(v20, v17);
    v29 = v53;
    v30 = sub_100826274(v53, a2, (uint64_t)v16, (uint64_t)v23);
    v13 = v52;
    v31 = v57;
    v32 = (char *)v57 + *(int *)(v9 + 48);
    *v57 = v30;
    v33 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))(v32, v29, v60);
    v34 = 0;
  }
  else
  {
    v35 = type metadata accessor for KeyAlignmentRecord(0);
    v34 = 1;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v23, 1, 1, v35);
    v36 = type metadata accessor for KeySyncRecord(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v16, 1, 1, v36);
    v33 = v59;
    v31 = v57;
  }
  v37 = v58;
  (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v58 + 56))(v31, v34, 1, v9);
  v38 = (char *)v13 + *(int *)(v9 + 48);
  sub_100030784((uint64_t)a2, (uint64_t)v61);
  if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v37 + 48))(v31, 1, v9) == 1)
  {
    *v13 = 1;
    v39 = v33;
    v40 = v62;
    v41 = v63;
    sub_10001AA44(v61, v62);
    v42 = *(void (**)(uint64_t, uint64_t))(v41 + 184);
    v43 = v41;
    v33 = v39;
    v42(v40, v43);
    sub_100004048((uint64_t)v54, &qword_1010F7AE0);
    sub_100004048((uint64_t)v23, (uint64_t *)&unk_1010F47D0);
    sub_100004048((uint64_t)v31, &qword_1010FD550);
  }
  else
  {
    sub_100004048((uint64_t)v54, &qword_1010F7AE0);
    sub_100004048((uint64_t)v23, (uint64_t *)&unk_1010F47D0);
    v44 = (char *)v31 + *(int *)(v9 + 48);
    *v13 = *v31;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v38, v44, v60);
  }
  v45 = v55;
  v46 = v56;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v61);
  v47 = &v45[*(int *)(v9 + 48)];
  v48 = *v13;
  v49 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
  v50 = v60;
  v49(v47, v38, v60);
  v49(v46, v47, v50);
  return v48;
}

uint64_t sub_1004DF760(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  char v23;
  char v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  _QWORD v38[5];

  v35 = a2;
  v36 = a6;
  v32 = a4;
  v37 = a3;
  v12 = type metadata accessor for UUID(0);
  v29 = *(_QWORD *)(v12 - 8);
  v30 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DateInterval(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Date(0);
  v33 = *(_QWORD *)(v19 - 8);
  v34 = v19;
  __chkstk_darwin(v19);
  v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38[3] = a7;
  v38[4] = a8;
  v22 = sub_100018F08(v38);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 16))(v22, a1, a7);
  v31 = sub_1004DF310(v21, v38, a5);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 112))(a7, a8);
  if ((v32 & 1) != 0)
  {
    v24 = v23;
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a8 + 8) + 8) + 32))(a7);
    v25 = v36;
    sub_1004DE5E4(v24 & 1, (uint64_t)v21, (uint64_t)v14, (uint64_t)v18);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v30);
    v26 = v25;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v35, v15);
    v26 = v36;
  }
  v27 = sub_1004E1BAC((uint64_t)v22, (uint64_t)v18, v31, (unint64_t)v21, v37, v26, a7, a8);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v34);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
  return v27;
}

_QWORD *sub_1004DF978(unint64_t a1, int *a2, unint64_t a3, int a4, int a5, int a6, _QWORD *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  void (*v55)(_QWORD *, unint64_t, uint64_t);
  __int128 v56;
  int *v57;
  uint64_t v58;
  char v59;
  void (*v60)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  os_log_type_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  int v78;
  void (*v79)(char *, uint64_t, uint64_t, int *);
  int v80;
  uint64_t v82;
  unint64_t v83;
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t);
  char *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  _OWORD *v102;
  __int128 v103;
  __int128 v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  int v122;
  uint64_t v123;
  void (*v124)(uint64_t);
  char *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  os_log_type_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned __int8 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t ObjectType;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  NSObject *v178;
  os_log_type_t v179;
  BOOL v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void (*v184)(uint64_t, uint64_t);
  char *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned __int8 v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  _QWORD *v229;
  _QWORD *v230;
  uint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v236;
  _QWORD *v237;
  unint64_t v238;
  unint64_t v239;
  _QWORD *v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  int *v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  int *v292;
  unint64_t v293;
  _QWORD *v294;
  double v295;
  uint64_t v296;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  char *v301;
  __int128 v302;
  _QWORD *v303;
  char *v304;
  char *v305;
  char *v306;
  char *v307;
  char *v308;
  __int128 v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  _QWORD *v314;
  int *v315;
  uint64_t *v316;
  uint64_t v317;
  char *v318;
  char *v319;
  char *v320;
  _QWORD *v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  uint64_t v326;
  _QWORD *v327;
  unint64_t v328;
  uint64_t v329;
  int v330;
  uint64_t v331;
  uint64_t *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  char *v339;
  uint64_t v340;
  char *v341;
  unint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  uint64_t v345;
  uint64_t v346;
  _QWORD *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  unint64_t v352;
  char *v353;
  int v354;
  uint64_t v355;
  _QWORD v356[3];
  uint64_t v357;
  _QWORD v358[4];
  _QWORD v359[3];
  uint64_t v360;
  uint64_t v361;
  _QWORD v362[5];
  __int128 v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  __int128 v368;
  ValueMetadata *v369;
  unint64_t v370;
  _QWORD v371[3];
  ValueMetadata *v372;
  unint64_t v373;
  _QWORD *v374;
  _QWORD v375[5];
  __int128 v376;
  uint64_t v377;
  unint64_t v378;
  unint64_t v379;
  unint64_t v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;

  LODWORD(v343) = a6;
  LODWORD(v355) = a5;
  v354 = a4;
  v315 = a2;
  v352 = a1;
  v329 = 0;
  v344 = a7;
  v313 = *a7;
  v11 = type metadata accessor for TimeBasedKey(0);
  v322 = *(_QWORD *)(v11 - 8);
  v323 = v11;
  v12 = __chkstk_darwin(v11);
  v335 = (uint64_t)&v298 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v332 = (uint64_t *)((char *)&v298 - v14);
  v334 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  __chkstk_darwin(v334);
  v333 = (char *)&v298 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1010F46C0);
  v17 = __chkstk_darwin(v16);
  v305 = (char *)&v298 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v319 = (char *)&v298 - v19;
  v20 = _s18ConnectionKeyGroupVMa(0);
  v310 = *(_QWORD *)(v20 - 8);
  v311 = v20;
  __chkstk_darwin(v20);
  v316 = (uint64_t *)((char *)&v298 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = type metadata accessor for Date(0);
  v325 = *(_QWORD *)(v22 - 8);
  v326 = v22;
  __chkstk_darwin(v22);
  v324 = (char *)&v298 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DateInterval(0);
  v336 = *(_QWORD *)(v24 - 8);
  v337 = v24;
  v25 = __chkstk_darwin(v24);
  v331 = (uint64_t)&v298 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v317 = (uint64_t)&v298 - v27;
  v346 = type metadata accessor for UUID(0);
  v28 = *(_QWORD *)(v346 - 8);
  v29 = *(_QWORD *)(v28 + 64);
  v30 = __chkstk_darwin(v346);
  v353 = (char *)&v298 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v30);
  v308 = (char *)&v298 - v32;
  v33 = __chkstk_darwin(v31);
  v318 = (char *)&v298 - v34;
  v35 = __chkstk_darwin(v33);
  v307 = (char *)&v298 - v36;
  v37 = __chkstk_darwin(v35);
  v304 = (char *)&v298 - v38;
  v39 = __chkstk_darwin(v37);
  v306 = (char *)&v298 - v40;
  __chkstk_darwin(v39);
  v320 = (char *)&v298 - v41;
  v42 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v42);
  v339 = (char *)&v298 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v340 = type metadata accessor for SharedBeaconRecord(0);
  v345 = *(_QWORD *)(v340 - 8);
  v44 = __chkstk_darwin(v340);
  v341 = (char *)&v298 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v351 = (unint64_t)&v298 - v46;
  v47 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v47);
  v49 = (char *)&v298 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for OwnedBeaconRecord(0);
  v51 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v53 = (char *)&v298 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v375[3] = a8;
  v348 = a9;
  v375[4] = a9;
  v54 = sub_100018F08(v375);
  v55 = *(void (**)(_QWORD *, unint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 16);
  v347 = v54;
  v349 = a8;
  v55(v54, v352, a8);
  v374 = _swiftEmptyArrayStorage;
  if ((v355 & 1) != 0)
  {
    v57 = v315;
    sub_100030784((uint64_t)v375, (uint64_t)&v384);
    v58 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v59 = swift_dynamicCast(v49, &v384, v58, v50, 6);
    v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
    if ((v59 & 1) != 0)
    {
      v60(v49, 0, 1, v50);
      v61 = sub_1000126EC((uint64_t)v49, (uint64_t)v53, type metadata accessor for OwnedBeaconRecord);
      v29 = static os_log_type_t.error.getter(v61);
      if (qword_1010E9DF8 == -1)
        goto LABEL_4;
      goto LABEL_155;
    }
    v60(v49, 1, 1, v50);
    v233 = sub_100004048((uint64_t)v49, (uint64_t *)&unk_1010F47C0);
    v234 = static os_log_type_t.error.getter(v233);
    if (qword_1010E9DF8 != -1)
      swift_once(&qword_1010E9DF8, sub_100654FE4);
    os_log(_:dso:log:_:_:)(v234, &_mh_execute_header, qword_1011B73B8, "Can't use forceGenerate for a SharedBeaconRecord!", 49, 2, _swiftEmptyArrayStorage);
LABEL_144:
    swift_bridgeObjectRelease();
    v230 = 0;
    goto LABEL_149;
  }
  v57 = v315;
  if (a3 < (unint64_t)v315)
  {
LABEL_154:
    __break(1u);
LABEL_155:
    swift_once(&qword_1010E9DF8, sub_100654FE4);
LABEL_4:
    v62 = os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, qword_1011B73B8, "*** forceGenerate triggered ***", 31, 2, _swiftEmptyArrayStorage);
    *(_QWORD *)&v384 = v57;
    __chkstk_darwin(v62);
    *(&v298 - 4) = (uint64_t)v53;
    *(&v298 - 3) = (uint64_t)&v384;
    v63 = v354;
    *((_BYTE *)&v298 - 16) = v354;
    *(&v298 - 1) = (uint64_t)&v374;
    v64 = v329;
    v66 = sub_100DF6580((uint64_t)v53, v63, v65, a3, (void (*)(unint64_t, uint64_t, unint64_t, _OWORD *))sub_1003D1768);
    if (v64)
    {
      v67 = static os_log_type_t.error.getter(v66);
      v68 = qword_1011B73B8;
      v69 = v67;
      if (os_log_type_enabled((os_log_t)qword_1011B73B8, v67))
      {
        swift_errorRetain(v64);
        swift_errorRetain(v64);
        v70 = (uint8_t *)swift_slowAlloc(12, -1);
        v71 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v381 = v71;
        *(_DWORD *)v70 = 136315138;
        swift_getErrorValue(v64, &v357, v356);
        v72 = Error.localizedDescription.getter(v356[1], v356[2]);
        *(_QWORD *)&v376 = sub_100016940(v72, v73, (uint64_t *)&v381);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v376, (char *)&v376 + 8, v70 + 4, v70 + 12);
        swift_bridgeObjectRelease();
        swift_errorRelease(v64);
        swift_errorRelease(v64);
        _os_log_impl((void *)&_mh_execute_header, v68, v69, "Error during forceGenerate: %s", v70, 0xCu);
        swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v71, -1, -1);
        swift_slowDealloc(v70, -1, -1);
      }
      swift_errorRelease(v64);
      sub_1000126B0((uint64_t)v53, type metadata accessor for OwnedBeaconRecord);
    }
    else
    {
      sub_1000126B0((uint64_t)v53, type metadata accessor for OwnedBeaconRecord);
    }
LABEL_148:
    v230 = v374;
    goto LABEL_149;
  }
  v352 = 0;
  v312 = v29 + 7;
  v303 = v316 + 4;
  v350 = 1;
  *(_QWORD *)&v56 = 141558275;
  v302 = v56;
  v301 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v56 = 141558531;
  v309 = v56;
  v300 = (char *)&type metadata for () + 8;
  v330 = v343 & 1;
  v74 = (uint64_t)v315;
  v327 = _swiftEmptyArrayStorage;
  v321 = _swiftEmptyArrayStorage;
  v338 = a3;
  v343 = v28;
  v53 = v339;
  v57 = (int *)v340;
  v75 = (uint64_t)v341;
  while (1)
  {
    sub_100030784((uint64_t)v375, (uint64_t)v371);
    v77 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v78 = swift_dynamicCast(v53, v371, v77, v57, 6);
    v79 = *(void (**)(char *, uint64_t, uint64_t, int *))(v345 + 56);
    v355 = v74;
    if (v78)
      break;
    v79(v53, 1, 1, v57);
    sub_100004048((uint64_t)v53, (uint64_t *)&unk_1010EE180);
LABEL_23:
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v348 + 8) + 8) + 32))(v349);
    if ((_BYTE)v354)
    {
      if (v354 == 1)
      {
        v369 = &type metadata for SecondaryIndex;
        v83 = sub_100336B24();
      }
      else
      {
        v369 = &type metadata for SecureLocationsIndex;
        v83 = sub_1003D155C();
      }
    }
    else
    {
      v369 = &type metadata for PrimaryIndex;
      v83 = sub_100336BAC();
    }
    v370 = v83;
    *(_QWORD *)&v368 = v74;
    sub_10000F9FC(&v368, (uint64_t)v371);
    v84 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
    v85 = (uint64_t)v333;
    v86 = v353;
    v87 = v28;
    v88 = v346;
    v84(v333, v353, v346);
    sub_100030784((uint64_t)v371, v85 + *(int *)(v334 + 20));
    sub_100DD0430(v85, v330, &v376);
    v89 = v376;
    v90 = v377;
    v91 = v378;
    v29 = v379;
    v342 = v380;
    sub_1000126B0(v85, type metadata accessor for BeaconKeyManager.IndexInformation);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v371);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v88);
    sub_100005CF0((uint64_t)&v376, (uint64_t)&v381, &qword_1010FA1E0);
    if (*((_QWORD *)&v382 + 1) >> 60 == 15)
    {
      v92 = v352;
      v74 = v355;
      if ((v350 & 1) != 0)
        v92 = v355;
      v352 = v92;
      a3 = v338;
      v53 = v339;
      v57 = (int *)v340;
      if (v338 == v355)
      {
        swift_bridgeObjectRelease();
        goto LABEL_114;
      }
      v350 = 0;
      v28 = v343;
      v75 = (uint64_t)v341;
    }
    else
    {
      v384 = v381;
      v385 = v382;
      v386 = v383;
      v93 = *(void (**)(uint64_t))(v348 + 184);
      v94 = v324;
      v328 = v29;
      v93(v349);
      v95 = sub_1004DDCE4(v354);
      v96 = v331;
      v97 = v355;
      sub_10064C538(v94, v355, v95, v331);
      v98 = v94;
      v99 = v97;
      (*(void (**)(char *, uint64_t))(v325 + 8))(v98, v326);
      v100 = v323;
      v101 = v332;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v336 + 16))((uint64_t)v332 + *(int *)(v323 + 20), v96, v337);
      *v101 = v99;
      v102 = (_OWORD *)((char *)v101 + *(int *)(v100 + 24));
      v103 = v386;
      v104 = v384;
      v102[1] = v385;
      v102[2] = v103;
      *v102 = v104;
      sub_10005972C((uint64_t)v101, v335, type metadata accessor for TimeBasedKey);
      v29 = (unint64_t)v374;
      sub_10001BD08(v89, *((unint64_t *)&v89 + 1));
      sub_10001BBBC(v90, v91);
      sub_10001BD08(v328, v342);
      if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
        v29 = sub_1007C80D0(0, *(_QWORD *)(v29 + 16) + 1, 1, v29);
      v28 = v343;
      v53 = v339;
      v57 = (int *)v340;
      v75 = (uint64_t)v341;
      v106 = *(_QWORD *)(v29 + 16);
      v105 = *(_QWORD *)(v29 + 24);
      a3 = v338;
      if (v106 >= v105 >> 1)
        v29 = sub_1007C80D0(v105 > 1, v106 + 1, 1, v29);
      *(_QWORD *)(v29 + 16) = v106 + 1;
      sub_1000126EC(v335, v29+ ((*(unsigned __int8 *)(v322 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v322 + 80))+ *(_QWORD *)(v322 + 72) * v106, type metadata accessor for TimeBasedKey);
      v374 = (_QWORD *)v29;
      if ((v350 & 1) == 0)
      {
        v107 = v355 - 1;
        if (!v355)
          goto LABEL_152;
        if (v107 < v352)
          goto LABEL_153;
        if ((swift_isUniquelyReferenced_nonNull_native(v327) & 1) != 0)
          v108 = v327;
        else
          v108 = sub_1007C8D58(0, v327[2] + 1, 1, v327);
        v110 = v108[2];
        v109 = v108[3];
        v29 = v110 + 1;
        if (v110 >= v109 >> 1)
          v108 = sub_1007C8D58((_QWORD *)(v109 > 1), v110 + 1, 1, v108);
        v108[2] = v29;
        v327 = v108;
        v111 = &v108[2 * v110];
        v111[4] = v352;
        v111[5] = v107;
      }
      v74 = v355;
      sub_1003D15A0((uint64_t)&v376);
      sub_1000126B0((uint64_t)v332, type metadata accessor for TimeBasedKey);
      (*(void (**)(uint64_t, uint64_t))(v336 + 8))(v331, v337);
      if (a3 == v74)
      {
        isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
LABEL_113:
        v236 = v346;
        v237 = v327;
        goto LABEL_120;
      }
      v352 = 0;
      v350 = 1;
    }
LABEL_12:
    if (__CFADD__(v74++, 1))
    {
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }
  }
  v79(v53, 0, 1, v57);
  v29 = v351;
  sub_1000126EC((uint64_t)v53, v351, type metadata accessor for SharedBeaconRecord);
  v80 = *(unsigned __int8 *)(v29 + v57[16]);
  if (v80 != 2 && v80 != 4)
  {
    sub_1000126B0(v351, type metadata accessor for SharedBeaconRecord);
    goto LABEL_23;
  }
  if (!(_BYTE)v354)
  {
    v328 = v57[16];
    v372 = &type metadata for PrimaryIndex;
    v373 = sub_100336BAC();
    v371[0] = v74;
    v112 = *(_QWORD *)(v351 + v57[11]);
    sub_10005972C(v351, v75, type metadata accessor for SharedBeaconRecord);
    if (v112 == -1)
    {
      sub_1000126B0(v75, type metadata accessor for SharedBeaconRecord);
    }
    else
    {
      v113 = *(_QWORD *)(v75 + v57[12]);
      sub_1000126B0(v75, type metadata accessor for SharedBeaconRecord);
      if (v113 != -1)
      {
        sub_100030784((uint64_t)v375, (uint64_t)&v368);
        v114 = swift_allocObject(&unk_10107A378, 72, 7);
        *(_QWORD *)(v114 + 16) = v344;
        sub_10000F9FC(&v368, v114 + 24);
        *(_QWORD *)(v114 + 64) = v74;
        swift_retain();
        v115 = sub_10001A9A8(&qword_1010FA220);
        v116 = v329;
        unsafeFromAsyncTask<A>(_:)(&unk_1010FA218, v114, v115);
        v329 = v116;
        if (v116)
        {
          swift_release();
          if (qword_1010E9938 != -1)
            swift_once(&qword_1010E9938, sub_1000AFBB0);
          v117 = type metadata accessor for Logger(0);
          sub_10001A9E8(v117, (uint64_t)qword_1011B6748);
          sub_100030784((uint64_t)v375, (uint64_t)&v368);
          v118 = v329;
          swift_errorRetain(v329);
          v119 = swift_errorRetain(v118);
          v120 = Logger.logObject.getter(v119);
          v121 = static os_log_type_t.error.getter(v120);
          v122 = v121;
          if (os_log_type_enabled(v120, v121))
          {
            v123 = swift_slowAlloc(32, -1);
            v342 = swift_slowAlloc(64, -1);
            *(_QWORD *)&v363 = v342;
            *(_DWORD *)v123 = v309;
            *(_QWORD *)(v123 + 4) = 1752392040;
            *(_WORD *)(v123 + 12) = 2081;
            sub_10001AA44(&v368, (uint64_t)v369);
            v124 = *(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v348 + 8) + 8) + 32);
            v125 = v320;
            LODWORD(v314) = v122;
            v124(v349);
            v126 = sub_1001D4C18();
            v127 = v346;
            v128 = dispatch thunk of CustomStringConvertible.description.getter(v346, v126);
            v130 = v129;
            v131 = v127;
            v57 = (int *)v340;
            (*(void (**)(char *, uint64_t))(v28 + 8))(v125, v131);
            *(_QWORD *)(v123 + 14) = sub_100016940(v128, v130, (uint64_t *)&v363);
            v75 = (uint64_t)v341;
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v368);
            *(_WORD *)(v123 + 22) = 2080;
            swift_getErrorValue(v118, &v360, v359);
            v132 = Error.localizedDescription.getter(v359[1], v359[2]);
            *(_QWORD *)(v123 + 24) = sub_100016940(v132, v133, (uint64_t *)&v363);
            swift_bridgeObjectRelease();
            swift_errorRelease(v118);
            swift_errorRelease(v118);
            _os_log_impl((void *)&_mh_execute_header, v120, (os_log_type_t)v314, "Error getting connectionKeys for beacon: %{private,mask.hash}s %s.", (uint8_t *)v123, 0x20u);
            v134 = v342;
            swift_arrayDestroy(v342, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v134, -1, -1);
            swift_slowDealloc(v123, -1, -1);

            swift_errorRelease(v118);
          }
          else
          {
            swift_errorRelease(v118);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v368);
            swift_errorRelease(v118);
            swift_errorRelease(v118);

          }
          v82 = 0;
          v329 = 0;
          v342 = 0xF000000000000000;
          v53 = v339;
        }
        else
        {
          swift_release();
          v342 = *((_QWORD *)&v363 + 1);
          v82 = v363;
          if (*((_QWORD *)&v363 + 1) >> 60 == 15)
          {
            v150 = v308;
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v348 + 8) + 8) + 32))(v349);
            v151 = type metadata accessor for TaskPriority(0);
            v299 = *(_QWORD *)(v151 - 8);
            v152 = (uint64_t)v305;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v299 + 56))(v305, 1, 1, v151);
            v153 = v320;
            v154 = v346;
            (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v320, v150, v346);
            v155 = *(unsigned __int8 *)(v28 + 80);
            v156 = (v155 + 32) & ~v155;
            v157 = (v312 + v156) & 0xFFFFFFFFFFFFFFF8;
            v158 = swift_allocObject(&unk_10107A3A0, v157 + 8, v155 | 7);
            *(_QWORD *)(v158 + 16) = 0;
            v314 = (_QWORD *)(v158 + 16);
            *(_QWORD *)(v158 + 24) = 0;
            v159 = v154;
            v160 = v299;
            (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v158 + v156, v153, v159);
            *(_QWORD *)(v158 + v157) = v313;
            v161 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v160 + 48))(v152, 1, v151);
            if ((_DWORD)v161 == 1)
            {
              sub_100004048(v152, &qword_1010F46C0);
              v162 = 0;
            }
            else
            {
              v163 = TaskPriority.rawValue.getter(v161);
              (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v152, v151);
              v162 = v163;
            }
            v164 = *v314;
            v28 = v343;
            v53 = v339;
            if (*v314)
            {
              v165 = *(_QWORD *)(v158 + 24);
              ObjectType = swift_getObjectType(*v314);
              swift_unknownObjectRetain(v164);
              v167 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v165);
              v169 = v168;
              swift_unknownObjectRelease(v164);
            }
            else
            {
              v167 = 0;
              v169 = 0;
            }
            v57 = (int *)v340;
            v75 = (uint64_t)v341;
            v170 = swift_allocObject(&unk_10107A3C8, 32, 7);
            *(_QWORD *)(v170 + 16) = &unk_1010FD570;
            *(_QWORD *)(v170 + 24) = v158;
            if (v169 | v167)
            {
              v358[1] = 0;
              v358[0] = 0;
              v171 = v358;
              v358[2] = v167;
              v358[3] = v169;
            }
            else
            {
              v171 = 0;
            }
            swift_task_create(v162 | 0x1C00, v171, v300, &unk_1010FD578, v170);
            swift_release();
            (*(void (**)(char *, uint64_t))(v28 + 8))(v308, v346);
            a3 = v338;
          }
        }
        goto LABEL_74;
      }
    }
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v135 = type metadata accessor for Logger(0);
    sub_10001A9E8(v135, (uint64_t)qword_1011B6748);
    v136 = sub_100030784((uint64_t)v375, (uint64_t)&v368);
    v137 = Logger.logObject.getter(v136);
    v138 = static os_log_type_t.debug.getter(v137);
    if (os_log_type_enabled(v137, v138))
    {
      v139 = swift_slowAlloc(22, -1);
      v140 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v363 = v140;
      *(_DWORD *)v139 = v302;
      *(_QWORD *)(v139 + 4) = 1752392040;
      *(_WORD *)(v139 + 12) = 2081;
      sub_10001AA44(&v368, (uint64_t)v369);
      v141 = v320;
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v348 + 8) + 8) + 32))(v349);
      v142 = sub_1001D4C18();
      v143 = v346;
      v144 = dispatch thunk of CustomStringConvertible.description.getter(v346, v142);
      v146 = v145;
      v147 = v141;
      v53 = v339;
      v148 = v143;
      v28 = v343;
      (*(void (**)(char *, uint64_t))(v343 + 8))(v147, v148);
      *(_QWORD *)(v139 + 14) = sub_100016940(v144, v146, (uint64_t *)&v363);
      a3 = v338;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v368);
      _os_log_impl((void *)&_mh_execute_header, v137, v138, "Skipping connection keys fetching: %{private,mask.hash}s.", (uint8_t *)v139, 0x16u);
      swift_arrayDestroy(v140, 1, v301);
      v149 = v140;
      v57 = (int *)v340;
      swift_slowDealloc(v149, -1, -1);
      swift_slowDealloc(v139, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v368);
    }

    v82 = 0;
    v342 = 0xF000000000000000;
    v75 = (uint64_t)v341;
LABEL_74:
    sub_100030784((uint64_t)v371, (uint64_t)&v368);
    sub_100030784((uint64_t)v375, (uint64_t)&v363);
    v172 = swift_allocObject(&unk_10107A300, 104, 7);
    sub_10000F9FC(&v368, v172 + 16);
    *(_QWORD *)(v172 + 56) = v344;
    sub_10000F9FC(&v363, v172 + 64);
    swift_retain();
    v173 = sub_10001A9A8(&qword_1010FA208);
    v174 = v329;
    unsafeFromAsyncTask<A>(_:)(&unk_1010FA200, v172, v173);
    if (v174)
    {
      swift_errorRelease(v174);
      swift_release();
      v329 = 0;
    }
    else
    {
      v329 = 0;
      swift_release();
      v175 = v367;
      if (v367 >> 60 != 15)
      {
        v218 = v366;
        v219 = v324;
        (*(void (**)(uint64_t))(v348 + 184))(v349);
        v220 = sub_1004DDCE4(v354);
        sub_10064C538(v219, v355, v220, v317);
        (*(void (**)(char *, uint64_t))(v325 + 8))(v219, v326);
        v221 = type metadata accessor for __DataStorage(0);
        swift_allocObject(v221, *(unsigned int *)(v221 + 48), *(unsigned __int16 *)(v221 + 52));
        v328 = __DataStorage.init(length:)(32);
        v222 = v342;
        v223 = v82;
        v224 = v82;
        if (v342 >> 60 == 15)
        {
          v222 = v328 | 0x4000000000000000;
          v224 = 0x2000000000;
          sub_10001BBBC(0x2000000000, v328 | 0x4000000000000000);
        }
        sub_100030784((uint64_t)v371, (uint64_t)v303);
        v225 = v316;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v336 + 16))((uint64_t)v316 + *(int *)(v311 + 28), v317, v337);
        *v225 = v218;
        v225[1] = v175;
        v225[2] = v224;
        v225[3] = v222;
        sub_10001BD08(v223, v342);
        sub_10001BD08(v218, v175);
        v226 = (unint64_t)v321;
        if ((swift_isUniquelyReferenced_nonNull_native(v321) & 1) == 0)
          v226 = sub_1007C8E64(0, *(_QWORD *)(v226 + 16) + 1, 1, v226);
        v228 = *(_QWORD *)(v226 + 16);
        v227 = *(_QWORD *)(v226 + 24);
        v321 = (_QWORD *)v226;
        if (v228 >= v227 >> 1)
          v321 = (_QWORD *)sub_1007C8E64(v227 > 1, v228 + 1, 1, (unint64_t)v321);
        v229 = v321;
        v321[2] = v228 + 1;
        v230 = v229;
        sub_1000126EC((uint64_t)v316, (uint64_t)v229+ ((*(unsigned __int8 *)(v310 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v310 + 80))+ *(_QWORD *)(v310 + 72) * v228, _s18ConnectionKeyGroupVMa);
        sub_10001EF3C(v223, v342);
        swift_release();
        sub_10001EF3C(v218, v175);
        v29 = v230[2];
        (*(void (**)(uint64_t, uint64_t))(v336 + 8))(v317, v337);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v371);
        sub_1000126B0(v351, type metadata accessor for SharedBeaconRecord);
        v74 = v355;
        if (v29 && a3 == v355)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_149;
        }
        v57 = (int *)v340;
        v75 = (uint64_t)v341;
        goto LABEL_11;
      }
    }
    v74 = v355;
    if (*(_BYTE *)(v351 + v328) == 2)
    {
      if (qword_1010E9938 != -1)
        swift_once(&qword_1010E9938, sub_1000AFBB0);
      v176 = type metadata accessor for Logger(0);
      sub_10001A9E8(v176, (uint64_t)qword_1011B6748);
      sub_100030784((uint64_t)v375, (uint64_t)&v368);
      v177 = sub_100030784((uint64_t)v371, (uint64_t)&v363);
      v178 = Logger.logObject.getter(v177);
      v179 = static os_log_type_t.default.getter(v178);
      v180 = os_log_type_enabled(v178, v179);
      v181 = v349;
      v314 = (_QWORD *)v82;
      if (v180)
      {
        v182 = swift_slowAlloc(32, -1);
        v328 = swift_slowAlloc(32, -1);
        v366 = v328;
        *(_DWORD *)v182 = v309;
        *(_QWORD *)(v182 + 4) = 1752392040;
        *(_WORD *)(v182 + 12) = 2081;
        sub_10001AA44(&v368, (uint64_t)v369);
        v183 = *(_QWORD *)(*(_QWORD *)(v348 + 8) + 8);
        v184 = *(void (**)(uint64_t, uint64_t))(v183 + 32);
        v185 = v320;
        v184(v181, v183);
        v186 = sub_1001D4C18();
        v187 = v346;
        v188 = dispatch thunk of CustomStringConvertible.description.getter(v346, v186);
        v190 = v189;
        (*(void (**)(char *, uint64_t))(v343 + 8))(v185, v187);
        *(_QWORD *)(v182 + 14) = sub_100016940(v188, v190, (uint64_t *)&v366);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v368);
        *(_WORD *)(v182 + 22) = 2048;
        v191 = v364;
        v192 = v365;
        sub_10001AA44(&v363, v364);
        v193 = v191;
        v181 = v349;
        dispatch thunk of RawRepresentable.rawValue.getter(&v361, v193, *(_QWORD *)(v192 + 56));
        v194 = v361;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v363);
        *(_QWORD *)(v182 + 24) = v194;
        _os_log_impl((void *)&_mh_execute_header, v178, v179, "Didn't find keys for beacon: %{private,mask.hash}s, requesting download - index %llu.", (uint8_t *)v182, 0x20u);
        v195 = v328;
        swift_arrayDestroy(v328, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v195, -1, -1);
        swift_slowDealloc(v182, -1, -1);

      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v363);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v368);

        v183 = *(_QWORD *)(*(_QWORD *)(v348 + 8) + 8);
        v184 = *(void (**)(uint64_t, uint64_t))(v183 + 32);
      }
      v196 = v318;
      v184(v181, v183);
      v197 = type metadata accessor for TaskPriority(0);
      v198 = *(_QWORD *)(v197 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v198 + 56))(v319, 1, 1, v197);
      v199 = v343;
      v200 = v320;
      v201 = v346;
      (*(void (**)(char *, char *, uint64_t))(v343 + 16))(v320, v196, v346);
      v202 = *(unsigned __int8 *)(v199 + 80);
      v203 = (v202 + 32) & ~v202;
      v204 = (v312 + v203) & 0xFFFFFFFFFFFFFFF8;
      v205 = swift_allocObject(&unk_10107A328, v204 + 8, v202 | 7);
      *(_QWORD *)(v205 + 16) = 0;
      v206 = (_QWORD *)(v205 + 16);
      *(_QWORD *)(v205 + 24) = 0;
      (*(void (**)(uint64_t, char *, uint64_t))(v199 + 32))(v205 + v203, v200, v201);
      *(_QWORD *)(v205 + v204) = v313;
      v207 = (uint64_t)v319;
      v208 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v198 + 48))(v319, 1, v197);
      if ((_DWORD)v208 == 1)
      {
        sub_100004048(v207, &qword_1010F46C0);
        v209 = 0;
      }
      else
      {
        v210 = TaskPriority.rawValue.getter(v208);
        (*(void (**)(uint64_t, uint64_t))(v198 + 8))(v207, v197);
        v209 = v210;
      }
      v53 = v339;
      v211 = (uint64_t)v314;
      v212 = *v206;
      v28 = v343;
      if (*v206)
      {
        v213 = *(_QWORD *)(v205 + 24);
        v214 = swift_getObjectType(*v206);
        swift_unknownObjectRetain(v212);
        v215 = dispatch thunk of Actor.unownedExecutor.getter(v214, v213);
        v217 = v216;
        swift_unknownObjectRelease(v212);
      }
      else
      {
        v215 = 0;
        v217 = 0;
      }
      v57 = (int *)v340;
      v75 = (uint64_t)v341;
      v231 = swift_allocObject(&unk_10107A350, 32, 7);
      *(_QWORD *)(v231 + 16) = &unk_1010FA210;
      *(_QWORD *)(v231 + 24) = v205;
      if (v217 | v215)
      {
        v362[1] = 0;
        v362[0] = 0;
        v232 = v362;
        v362[2] = v215;
        v362[3] = v217;
      }
      else
      {
        v232 = 0;
      }
      v74 = v355;
      swift_task_create(v209 | 0x1C00, v232, (char *)&type metadata for () + 8, &unk_1010EE4A0, v231);
      swift_release();
      sub_10001EF3C(v211, v342);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v318, v346);
      a3 = v338;
    }
    else
    {
      sub_10001EF3C(v82, v342);
    }
    v29 = v321[2];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v371);
    sub_1000126B0(v351, type metadata accessor for SharedBeaconRecord);
    if (v29 && a3 == v74)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v230 = v321;
      goto LABEL_149;
    }
    goto LABEL_11;
  }
  if (v354 == 1)
  {
    v328 = v57[16];
    v372 = &type metadata for SecondaryIndex;
    v82 = 0;
    v373 = sub_100336B24();
    v371[0] = v74;
    v342 = 0xF000000000000000;
    goto LABEL_74;
  }
  sub_1000126B0(v351, type metadata accessor for SharedBeaconRecord);
LABEL_11:
  if (a3 != v74)
    goto LABEL_12;
  isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
  if ((v350 & 1) != 0)
    goto LABEL_113;
LABEL_114:
  v236 = v346;
  if (v352 > a3)
  {
    __break(1u);
    goto LABEL_157;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v327);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_157:
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_1007C8D58(0, v327[2] + 1, 1, v327);
    v237 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    goto LABEL_117;
  }
  v237 = v327;
LABEL_117:
  v239 = v237[2];
  v238 = v237[3];
  if (v239 >= v238 >> 1)
  {
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_1007C8D58((_QWORD *)(v238 > 1), v239 + 1, 1, v237);
    v237 = (_QWORD *)isUniquelyReferenced_nonNull_native;
  }
  v237[2] = v239 + 1;
  v240 = &v237[2 * v239];
  v240[4] = v352;
  v240[5] = a3;
LABEL_120:
  if (!v374[2])
  {
    v259 = swift_bridgeObjectRelease();
    LODWORD(v355) = static os_log_type_t.error.getter(v259);
    if (qword_1010E9DF8 != -1)
      swift_once(&qword_1010E9DF8, sub_100654FE4);
    v260 = 0xD000000000000010;
    v261 = qword_1011B73B8;
    v262 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v263 = swift_allocObject(v262, 272, 7);
    *(_OWORD *)(v263 + 16) = xmmword_100E26E10;
    v371[0] = *v344;
    v264 = sub_10001A9A8(&qword_1010FA1E8);
    v265 = String.init<A>(describing:)(v371, v264);
    v267 = v266;
    *(_QWORD *)(v263 + 56) = &type metadata for String;
    v268 = sub_10001AA00();
    *(_QWORD *)(v263 + 32) = v265;
    *(_QWORD *)(v263 + 40) = v267;
    *(_QWORD *)(v263 + 96) = &type metadata for String;
    *(_QWORD *)(v263 + 104) = v268;
    *(_QWORD *)(v263 + 64) = v268;
    *(_QWORD *)(v263 + 72) = 0xD00000000000004DLL;
    *(_QWORD *)(v263 + 80) = 0x8000000100ED3F80;
    v269 = v306;
    v270 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v348 + 8) + 8) + 32))(v349);
    v271 = UUID.uuidString.getter(v270);
    v273 = v272;
    (*(void (**)(char *, uint64_t))(v343 + 8))(v269, v236);
    *(_QWORD *)(v263 + 136) = &type metadata for String;
    *(_QWORD *)(v263 + 144) = v268;
    *(_QWORD *)(v263 + 112) = v271;
    *(_QWORD *)(v263 + 120) = v273;
    if ((_BYTE)v354)
    {
      v274 = v338;
      if (v354 == 1)
      {
        v260 = 0x61646E6F6365732ELL;
        v275 = 0xEA00000000007972;
      }
      else
      {
        v275 = 0x8000000100EC6940;
      }
    }
    else
    {
      v260 = 0x7972616D6972702ELL;
      v275 = 0xE800000000000000;
      v274 = v338;
    }
    v296 = v355;
    *(_QWORD *)(v263 + 176) = &type metadata for String;
    *(_QWORD *)(v263 + 184) = v268;
    *(_QWORD *)(v263 + 152) = v260;
    *(_QWORD *)(v263 + 160) = v275;
    *(_QWORD *)(v263 + 216) = &type metadata for UInt64;
    *(_QWORD *)(v263 + 224) = &protocol witness table for UInt64;
    *(_QWORD *)(v263 + 192) = v315;
    *(_QWORD *)(v263 + 256) = &type metadata for UInt64;
    *(_QWORD *)(v263 + 264) = &protocol witness table for UInt64;
    *(_QWORD *)(v263 + 232) = v274;
    os_log(_:dso:log:_:_:)(v296, &_mh_execute_header, v261, "%@: %@. Unable to obtain keys for beacon %{mask.hash}@, sequence %@, index %llu - %llu", 86, 2, v263);
    swift_bridgeObjectRelease();
    goto LABEL_144;
  }
  v241 = 0x7972616D6972702ELL;
  if (!v237[2])
  {
    v276 = swift_bridgeObjectRelease();
    v277 = static os_log_type_t.default.getter(v276);
    if (qword_1010E9DF8 != -1)
      swift_once(&qword_1010E9DF8, sub_100654FE4);
    v278 = qword_1011B73B8;
    v279 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v280 = swift_allocObject(v279, 272, 7);
    *(_OWORD *)(v280 + 16) = xmmword_100E26E10;
    v371[0] = *v344;
    v281 = sub_10001A9A8(&qword_1010FA1E8);
    v282 = String.init<A>(describing:)(v371, v281);
    v284 = v283;
    *(_QWORD *)(v280 + 56) = &type metadata for String;
    v285 = sub_10001AA00();
    *(_QWORD *)(v280 + 32) = v282;
    *(_QWORD *)(v280 + 40) = v284;
    *(_QWORD *)(v280 + 96) = &type metadata for String;
    *(_QWORD *)(v280 + 104) = v285;
    *(_QWORD *)(v280 + 64) = v285;
    *(_QWORD *)(v280 + 72) = 0xD00000000000004DLL;
    *(_QWORD *)(v280 + 80) = 0x8000000100ED3F80;
    v286 = v304;
    v287 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v348 + 8) + 8) + 32))(v349);
    v288 = UUID.uuidString.getter(v287);
    v290 = v289;
    (*(void (**)(char *, uint64_t))(v343 + 8))(v286, v346);
    *(_QWORD *)(v280 + 136) = &type metadata for String;
    *(_QWORD *)(v280 + 144) = v285;
    *(_QWORD *)(v280 + 112) = v288;
    *(_QWORD *)(v280 + 120) = v290;
    if ((_BYTE)v354)
    {
      v291 = v338;
      v292 = v315;
      if (v354 == 1)
      {
        v241 = 0x61646E6F6365732ELL;
        v293 = 0xEA00000000007972;
      }
      else
      {
        v293 = 0x8000000100EC6940;
        v241 = 0xD000000000000010;
      }
    }
    else
    {
      v293 = 0xE800000000000000;
      v291 = v338;
      v292 = v315;
    }
    *(_QWORD *)(v280 + 176) = &type metadata for String;
    *(_QWORD *)(v280 + 184) = v285;
    *(_QWORD *)(v280 + 152) = v241;
    *(_QWORD *)(v280 + 160) = v293;
    *(_QWORD *)(v280 + 216) = &type metadata for UInt64;
    *(_QWORD *)(v280 + 224) = &protocol witness table for UInt64;
    *(_QWORD *)(v280 + 192) = v292;
    *(_QWORD *)(v280 + 256) = &type metadata for UInt64;
    *(_QWORD *)(v280 + 264) = &protocol witness table for UInt64;
    *(_QWORD *)(v280 + 232) = v291;
    os_log(_:dso:log:_:_:)(v277, &_mh_execute_header, v278, "%{public}@: %{public}@. Keys for Beacon %{mask.hash}@, sequence %{public}@, index %llu - %llu", 93, 2, v280);
    swift_bridgeObjectRelease();
    goto LABEL_148;
  }
  v327 = v237;
  v242 = static os_log_type_t.error.getter(isUniquelyReferenced_nonNull_native);
  if (qword_1010E9DF8 != -1)
    swift_once(&qword_1010E9DF8, sub_100654FE4);
  v243 = qword_1011B73B8;
  v244 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v245 = swift_allocObject(v244, 312, 7);
  *(_OWORD *)(v245 + 16) = xmmword_100E22340;
  v371[0] = *v344;
  v246 = sub_10001A9A8(&qword_1010FA1E8);
  v247 = String.init<A>(describing:)(v371, v246);
  v249 = v248;
  *(_QWORD *)(v245 + 56) = &type metadata for String;
  v250 = sub_10001AA00();
  *(_QWORD *)(v245 + 32) = v247;
  *(_QWORD *)(v245 + 40) = v249;
  *(_QWORD *)(v245 + 96) = &type metadata for String;
  *(_QWORD *)(v245 + 104) = v250;
  *(_QWORD *)(v245 + 64) = v250;
  *(_QWORD *)(v245 + 72) = 0xD00000000000004DLL;
  *(_QWORD *)(v245 + 80) = 0x8000000100ED3F80;
  v251 = v307;
  v252 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v348 + 8) + 8) + 32))(v349);
  v253 = UUID.uuidString.getter(v252);
  v255 = v254;
  (*(void (**)(char *, uint64_t))(v343 + 8))(v251, v346);
  *(_QWORD *)(v245 + 136) = &type metadata for String;
  *(_QWORD *)(v245 + 144) = v250;
  *(_QWORD *)(v245 + 112) = v253;
  *(_QWORD *)(v245 + 120) = v255;
  if ((_BYTE)v354)
  {
    v256 = v338;
    v257 = v315;
    if (v354 == 1)
    {
      v241 = 0x61646E6F6365732ELL;
      v258 = 0xEA00000000007972;
    }
    else
    {
      v258 = 0x8000000100EC6940;
      v241 = 0xD000000000000010;
    }
  }
  else
  {
    v258 = 0xE800000000000000;
    v256 = v338;
    v257 = v315;
  }
  *(_QWORD *)(v245 + 176) = &type metadata for String;
  *(_QWORD *)(v245 + 184) = v250;
  *(_QWORD *)(v245 + 152) = v241;
  *(_QWORD *)(v245 + 160) = v258;
  *(_QWORD *)(v245 + 216) = &type metadata for UInt64;
  *(_QWORD *)(v245 + 224) = &protocol witness table for UInt64;
  *(_QWORD *)(v245 + 192) = v257;
  *(_QWORD *)(v245 + 256) = &type metadata for UInt64;
  *(_QWORD *)(v245 + 264) = &protocol witness table for UInt64;
  *(_QWORD *)(v245 + 232) = v256;
  *(_QWORD *)(v245 + 296) = sub_10001A9A8(&qword_1010FA1F0);
  *(_QWORD *)(v245 + 304) = sub_1004E23DC();
  v294 = v327;
  *(_QWORD *)(v245 + 272) = v327;
  *(_QWORD *)&v295 = swift_bridgeObjectRetain(v294).n128_u64[0];
  os_log(_:dso:log:_:_:)(v242, &_mh_execute_header, v243, "%@: %@. Unable to obtain keys for beacon %{mask.hash}@, sequence %@, index %llu - %llu, gaps %@.", 96, 2, v245, v295);
  swift_bridgeObjectRelease();
  v230 = v374;
LABEL_149:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v375);
  return v230;
}

uint64_t sub_1004E1BAC(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, int a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __objc2_ivar_list **p_ivars;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  uint64_t *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;

  v64 = a6;
  v72 = a4;
  v74 = a2;
  v13 = type metadata accessor for UUID(0);
  v67 = *(_QWORD *)(v13 - 8);
  v68 = v13;
  __chkstk_darwin(v13);
  v65 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v71 - 8);
  v16 = __chkstk_darwin(v71);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v63 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v23, a1, a7);
  v75 = a5;
  v72 = sub_10064EDD0((uint64_t)v23, a5, a3, v72, a7, a8);
  v25 = *(uint64_t (**)(uint64_t, uint64_t))(a8 + 184);
  v26 = v25(a7, a8);
  DateInterval.start.getter(v26);
  v70 = sub_10064EF44((uint64_t)v23, (uint64_t)v21, (uint64_t)v18, a5, a7, a8);
  v27 = *(void (**)(char *, uint64_t))(v15 + 8);
  v28 = v71;
  v27(v18, v71);
  v27(v21, v28);
  v29 = v25(a7, a8);
  DateInterval.end.getter(v29);
  v30 = v23;
  v74 = a7;
  v66 = a8;
  v31 = sub_10064EF44((uint64_t)v23, (uint64_t)v21, (uint64_t)v18, v75, a7, a8);
  v27(v18, v28);
  v32 = ((uint64_t (*)(char *, uint64_t))v27)(v21, v28);
  v33 = v70;
  v34 = v72;
  p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
  v36 = &unk_1011B7000;
  v73 = v30;
  if ((v72 & 0x8000000000000000) == 0 && v72 >= v70)
  {
    v37 = static os_log_type_t.default.getter(v32);
    if (qword_1010E9DF8 != -1)
      swift_once(&qword_1010E9DF8, sub_100654FE4);
    v38 = qword_1011B73B8;
    v39 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v40 = swift_allocObject(v39, 112, 7);
    *(_OWORD *)(v40 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v40 + 56) = &type metadata for UInt64;
    *(_QWORD *)(v40 + 64) = &protocol witness table for UInt64;
    *(_QWORD *)(v40 + 32) = v33;
    *(_QWORD *)(v40 + 96) = &type metadata for Int64;
    *(_QWORD *)(v40 + 104) = &protocol witness table for Int64;
    *(_QWORD *)(v40 + 72) = v34;
    os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v38, "startBucket (%llu) <= factor (%llu) -- clamping to 1", v63, v64);
    v32 = swift_bridgeObjectRelease();
    v41 = 1;
    if (v34)
    {
      v36 = (_QWORD *)&unk_1011B7000;
      p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
      if (v31 < v34)
      {
        if (v31 <= 1)
          v42 = 1;
        else
          v42 = v31;
        v71 = v42;
        v41 = 1;
        goto LABEL_26;
      }
    }
    else
    {
      v36 = &unk_1011B7000;
      p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
    }
    goto LABEL_20;
  }
  if ((v70 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v41 = v70 - v72;
  if (__OFSUB__(v70, v72))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if ((v41 & 0x8000000000000000) != 0)
    goto LABEL_38;
  if ((uint64_t)v72 < 1 || v31 >= v72)
  {
LABEL_20:
    if ((v31 & 0x8000000000000000) == 0)
    {
      v43 = v31 - v34;
      if (!__OFSUB__(v31, v34))
      {
        if ((v43 & 0x8000000000000000) == 0)
        {
          if (v41 > v43)
            v43 = v41;
          goto LABEL_25;
        }
LABEL_38:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
        __break(1u);
        return result;
      }
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    goto LABEL_35;
  }
  if (v41 <= v31)
    v43 = v31;
  else
    v43 = v70 - v72;
LABEL_25:
  v71 = v43;
LABEL_26:
  v44 = v34;
  LODWORD(v70) = static os_log_type_t.default.getter(v32);
  if (p_ivars[447] != (__objc2_ivar_list *)-1)
    swift_once(&qword_1010E9DF8, sub_100654FE4);
  v45 = 0xD000000000000010;
  v46 = v36[119];
  v47 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v48 = swift_allocObject(v47, 312, 7);
  *(_OWORD *)(v48 + 16) = xmmword_100E22340;
  v76 = *v64;
  v49 = sub_10001A9A8(&qword_1010FA1E8);
  v50 = String.init<A>(describing:)(&v76, v49);
  v52 = v51;
  *(_QWORD *)(v48 + 56) = &type metadata for String;
  v53 = sub_10001AA00();
  *(_QWORD *)(v48 + 32) = v50;
  *(_QWORD *)(v48 + 40) = v52;
  *(_QWORD *)(v48 + 96) = &type metadata for String;
  *(_QWORD *)(v48 + 104) = v53;
  *(_QWORD *)(v48 + 64) = v53;
  *(_QWORD *)(v48 + 72) = 0xD00000000000004CLL;
  *(_QWORD *)(v48 + 80) = 0x8000000100ED4210;
  v54 = v65;
  v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v66 + 8) + 8) + 32))(v74);
  v56 = UUID.uuidString.getter(v55);
  v58 = v57;
  (*(void (**)(char *, uint64_t))(v67 + 8))(v54, v68);
  *(_QWORD *)(v48 + 136) = &type metadata for String;
  *(_QWORD *)(v48 + 144) = v53;
  *(_QWORD *)(v48 + 112) = v56;
  *(_QWORD *)(v48 + 120) = v58;
  if ((_BYTE)v75)
  {
    if (v75 == 1)
    {
      v59 = 0xEA00000000007972;
      v45 = 0x61646E6F6365732ELL;
    }
    else
    {
      v59 = 0x8000000100EC6940;
    }
  }
  else
  {
    v59 = 0xE800000000000000;
    v45 = 0x7972616D6972702ELL;
  }
  v60 = v70;
  *(_QWORD *)(v48 + 176) = &type metadata for String;
  *(_QWORD *)(v48 + 184) = v53;
  *(_QWORD *)(v48 + 152) = v45;
  *(_QWORD *)(v48 + 160) = v59;
  *(_QWORD *)(v48 + 216) = &type metadata for UInt64;
  *(_QWORD *)(v48 + 192) = v41;
  *(_QWORD *)(v48 + 256) = &type metadata for UInt64;
  *(_QWORD *)(v48 + 264) = &protocol witness table for UInt64;
  v61 = v71;
  *(_QWORD *)(v48 + 224) = &protocol witness table for UInt64;
  *(_QWORD *)(v48 + 232) = v61;
  *(_QWORD *)(v48 + 296) = &type metadata for Int64;
  *(_QWORD *)(v48 + 304) = &protocol witness table for Int64;
  *(_QWORD *)(v48 + 272) = v44;
  os_log(_:dso:log:_:_:)(v60, &_mh_execute_header, v46, "%{public}@: %{public}@. Buckets for beacon %{mask.hash}@, sequence %{public}@, index %llu - %llu (factor %d)", 108, 2, v48);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v69 + 8))(v73, v74);
  return v41;
}

uint64_t sub_1004E2180()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A839E8);
}

uint64_t sub_1004E2190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(sub_10001A9A8(&qword_1010F7AE0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 64) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010F47D0) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  v9 = v0 + v3;
  v10 = type metadata accessor for KeySyncRecord(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v11 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
    v12 = v9 + *(int *)(v10 + 28);
    v13 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  }
  v14 = v0 + v7;
  v15 = (int *)type metadata accessor for KeyAlignmentRecord(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v15 - 1) + 48))(v0 + v7, 1, v15))
  {
    sub_10001BC14(*(_QWORD *)v14, *(_QWORD *)(v14 + 8));
    v16 = v14 + v15[5];
    v17 = type metadata accessor for UUID(0);
    v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
    v18(v16, v17);
    v18(v14 + v15[6], v17);
    v19 = v14 + v15[8];
    v20 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  }
  return swift_deallocObject(v0, v7 + v8, v2 | v6 | 7);
}

unint64_t sub_1004E2328@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(sub_10001A9A8(&qword_1010F7AE0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010F47D0) - 8) + 80);
  return sub_100A83A10((_QWORD *)(v1 + 24), v1 + v4, v1 + ((v4 + v5 + v6) & ~v6), a1);
}

uint64_t _s18ConnectionKeyGroupVMa(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FD5E0;
  if (!qword_1010FD5E0)
    return swift_getSingletonMetadata(a1, &_s18ConnectionKeyGroupVMn);
  return result;
}

unint64_t sub_1004E23DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010FA1F8;
  if (!qword_1010FA1F8)
  {
    v1 = sub_10001F784(&qword_1010FA1F0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1010FA1F8);
  }
  return result;
}

uint64_t sub_1004E2428()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_1004E2460()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004E2484()
{
  uint64_t v0;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1004E24B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v8 = (_QWORD *)swift_task_alloc(dword_101121004);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004C28;
  return sub_100DCDF84(a1, v5, v6, v7);
}

unint64_t sub_1004E2558()
{
  unint64_t result;

  result = qword_1010FD580;
  if (!qword_1010FD580)
  {
    result = swift_getWitnessTable(byte_100E3FBB0, &type metadata for BeaconKeyManagerError);
    atomic_store(result, (unint64_t *)&qword_1010FD580);
  }
  return result;
}

uint64_t sub_1004E25A0(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 - 1 < 2)
    return swift_bridgeObjectRetain(result);
  if (!a3)
  {
    swift_bridgeObjectRetain(result);
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t _s9KeyResultOwxx(uint64_t a1)
{
  return sub_100217264(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s9KeyResultOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1004E25A0(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s9KeyResultOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1004E25A0(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100217264(v6, v7, v8);
  return a1;
}

uint64_t _s9KeyResultOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100217264(v4, v5, v6);
  return a1;
}

uint64_t _s9KeyResultOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s9KeyResultOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1004E2768(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_1004E2780(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *_s9KeyResultOMa()
{
  return &_s9KeyResultON;
}

uint64_t storeEnumTagSinglePayload for BeaconKeyManagerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1004E27F4 + 4 * byte_100E3FAC5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1004E2828 + 4 * byte_100E3FAC0[v4]))();
}

uint64_t sub_1004E2828(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004E2830(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004E2838);
  return result;
}

uint64_t sub_1004E2844(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004E284CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1004E2850(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004E2858(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconKeyManagerError()
{
  return &type metadata for BeaconKeyManagerError;
}

unint64_t sub_1004E2874(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    sub_10001BBBC(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    sub_10001BBBC(v9, v10);
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    v11 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 56) = v11;
    (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 32, a2 + 32);
    v12 = *(int *)(a3 + 28);
    v13 = a1 + v12;
    v14 = a2 + v12;
    v15 = type metadata accessor for DateInterval(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_1004E294C(uint64_t *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(a1[2], a1[3]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1 + 4);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for DateInterval(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_1004E29A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v8, v9);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 32, a2 + 32);
  v11 = *(int *)(a3 + 28);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t *sub_1004E2A54(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  sub_10001BBBC(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_10001BC14(v12, v13);
  sub_1001BA974(a1 + 4, a2 + 4);
  v14 = *(int *)(a3 + 28);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t sub_1004E2AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t sub_1004E2B68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v8, v9);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(a1 + 32));
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v11 = *(int *)(a3 + 28);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_1004E2C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004E2C0C);
}

uint64_t sub_1004E2C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 56);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DateInterval(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_1004E2C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004E2C94);
}

uint64_t sub_1004E2C94(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 56) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for DateInterval(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1004E2D08(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100E3FB18;
  v4[1] = &unk_100E3FB18;
  v4[2] = &unk_100E3FB30;
  result = type metadata accessor for DateInterval(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_1004E2D8C()
{
  unint64_t result;

  result = qword_1010FD620;
  if (!qword_1010FD620)
  {
    result = swift_getWitnessTable(byte_100E3FB88, &type metadata for BeaconKeyManagerError);
    atomic_store(result, (unint64_t *)&qword_1010FD620);
  }
  return result;
}

uint64_t sub_1004E2DDC(uint64_t a1, uint64_t a2)
{
  return sub_1004E2DFC(a1, a2, 40, (uint64_t)sub_1001523C8);
}

uint64_t sub_1004E2DEC(uint64_t a1, uint64_t a2)
{
  return sub_1004E2DFC(a1, a2, 39, (uint64_t)sub_1001514CC);
}

uint64_t sub_1004E2DFC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v9 = type metadata accessor for BeaconObservation(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v22[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = *(_QWORD *)(v4 + 16);
  v14 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, a1, v14);
  v15 = &v12[*(int *)(v9 + 20)];
  v16 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v15, a2, v16);
  v12[*(int *)(v9 + 24)] = a3;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
  v18 = *(unsigned __int8 *)(v10 + 80);
  v19 = (v18 + 32) & ~v18;
  v20 = swift_allocObject(v17, v19 + *(_QWORD *)(v10 + 72), v18 | 7);
  *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
  sub_10012D874((uint64_t)v12, v20 + v19);
  type metadata accessor for Transaction(0);
  v23 = v13;
  v24 = v20;
  v25 = 0;
  v26 = 0;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, a4, v22, &type metadata for () + 1);
  swift_bridgeObjectRelease();
  return sub_10012D8F8((uint64_t)v12);
}

uint64_t sub_1004E2F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  void (*v67)(char *, uint64_t);
  _QWORD *v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char **v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;

  v104 = a2;
  v4 = type metadata accessor for BeaconObservation(0);
  v5 = *(_QWORD *)(v4 - 8);
  v109 = v4;
  v110 = v5;
  v6 = __chkstk_darwin(v4);
  v106 = (uint64_t)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v105 = (char *)&v90 - v9;
  v10 = __chkstk_darwin(v8);
  v108 = (char **)((char *)&v90 - v11);
  __chkstk_darwin(v10);
  v13 = (char *)&v90 - v12;
  v14 = sub_10001A9A8(&qword_1010EF660);
  v15 = __chkstk_darwin(v14);
  v107 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v103 = (char *)&v90 - v17;
  v18 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v19 = __chkstk_darwin(v18);
  v95 = (char *)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v102 = (char *)&v90 - v21;
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v90 - v28;
  v30 = __chkstk_darwin(v27);
  v32 = (char *)&v90 - v31;
  __chkstk_darwin(v30);
  v34 = (char *)&v90 - v33;
  v35 = *(_QWORD *)(v2 + 16);
  v101 = objc_autoreleasePoolPush();
  v99 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue;
  v36 = sub_10001A9A8(&qword_1010F7770);
  v100 = v35;
  v98 = v36;
  OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v35, v36);
  v37 = v111;
  v38 = v111[2];
  v96 = v29;
  v97 = v26;
  v94 = a1;
  if (v38 && (v39 = sub_100003FB0(a1), (v40 & 1) != 0))
  {
    v93 = v23;
    v41 = *(_QWORD *)(v37[7] + 8 * v39);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRelease();
    v42 = sub_100508D98(v41);
    swift_bridgeObjectRelease();
    sub_10088FD00((uint64_t)v42);
    v44 = v43;
    result = swift_release();
    v46 = _swiftEmptyArrayStorage;
    v111 = _swiftEmptyArrayStorage;
    v47 = *(_QWORD *)(v44 + 16);
    if (v47)
    {
      v90 = v34;
      v91 = v32;
      v92 = v22;
      v48 = 0;
      v49 = v109;
      while (v48 < *(_QWORD *)(v44 + 16))
      {
        v50 = (*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80);
        v51 = *(_QWORD *)(v110 + 72);
        sub_10012D874(v44 + v50 + v51 * v48, (uint64_t)v13);
        if (v13[*(int *)(v49 + 24)] == 39)
        {
          sub_10012D934((uint64_t)v13, (uint64_t)v108);
          if ((swift_isUniquelyReferenced_nonNull_native(v46) & 1) == 0)
            sub_10009AAC8(0, v46[2] + 1, 1);
          v46 = v111;
          v53 = v111[2];
          v52 = v111[3];
          if (v53 >= v52 >> 1)
          {
            sub_10009AAC8(v52 > 1, v53 + 1, 1);
            v46 = v111;
          }
          v46[2] = v53 + 1;
          result = sub_10012D934((uint64_t)v108, (uint64_t)v46 + v50 + v53 * v51);
          v49 = v109;
        }
        else
        {
          result = sub_10012D8F8((uint64_t)v13);
        }
        if (v47 == ++v48)
        {
          v46 = v111;
          v22 = v92;
          v32 = v91;
          v34 = v90;
          goto LABEL_16;
        }
      }
      __break(1u);
      goto LABEL_48;
    }
LABEL_16:
    swift_release();
    v23 = v93;
  }
  else
  {
    swift_bridgeObjectRelease();
    v46 = _swiftEmptyArrayStorage;
  }
  v54 = (uint64_t)v107;
  objc_autoreleasePoolPop(v101);
  v55 = v103;
  sub_100A797E8((uint64_t)v46, (uint64_t)v103);
  v56 = (uint64_t)v55;
  swift_bridgeObjectRelease();
  v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48);
  v58 = v55;
  v59 = v109;
  if (v57(v58, 1, v109) == 1)
  {
    sub_100004048(v56, &qword_1010EF660);
    v60 = (uint64_t)v102;
    v108 = *(char ***)(v23 + 56);
    v61 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v108)(v102, 1, 1, v22);
    v62 = v104;
LABEL_20:
    static Date.distantPast.getter(v61);
    v64 = sub_100004048(v60, (uint64_t *)&unk_1010EA690);
    goto LABEL_22;
  }
  v63 = v56 + *(int *)(v59 + 20);
  v60 = (uint64_t)v102;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v102, v63, v22);
  sub_10012D8F8(v56);
  v108 = *(char ***)(v23 + 56);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v108)(v60, 0, 1, v22);
  v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v60, 1, v22);
  v62 = v104;
  if ((_DWORD)v61 == 1)
    goto LABEL_20;
  v64 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 32))(v34, v60, v22);
LABEL_22:
  Date.advanced(by:)(v64, 3600.0);
  v65 = sub_1001F447C();
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v62, v32, v22, v65) & 1) != 0)
  {
    v66 = 0;
    v67 = *(void (**)(char *, uint64_t))(v23 + 8);
    v67(v32, v22);
LABEL_46:
    v67(v34, v22);
    return v66 & 1;
  }
  v103 = (char *)objc_autoreleasePoolPush();
  OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v100, v98);
  v68 = v111;
  if (!v111[2] || (v69 = sub_100003FB0(v94), (v70 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    v75 = _swiftEmptyArrayStorage;
    goto LABEL_40;
  }
  v93 = v23;
  v71 = *(_QWORD *)(v68[7] + 8 * v69);
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease();
  v72 = sub_100508D98(v71);
  swift_bridgeObjectRelease();
  sub_10088FD00((uint64_t)v72);
  v74 = v73;
  result = swift_release();
  v75 = _swiftEmptyArrayStorage;
  v111 = _swiftEmptyArrayStorage;
  v76 = *(_QWORD *)(v74 + 16);
  if (!v76)
  {
LABEL_39:
    v23 = v93;
    swift_release();
LABEL_40:
    v84 = (uint64_t)v95;
    objc_autoreleasePoolPop(v103);
    sub_100A797E8((uint64_t)v75, v54);
    swift_bridgeObjectRelease();
    v85 = v109;
    if (v57((char *)v54, 1, v109) == 1)
    {
      sub_100004048(v54, &qword_1010EF660);
      v86 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v108)(v84, 1, 1, v22);
      v87 = v96;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v84, v54 + *(int *)(v85 + 20), v22);
      sub_10012D8F8(v54);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v108)(v84, 0, 1, v22);
      v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v84, 1, v22);
      v87 = v96;
      if ((_DWORD)v86 != 1)
      {
        v88 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 32))(v96, v84, v22);
        goto LABEL_45;
      }
    }
    static Date.distantPast.getter(v86);
    v88 = sub_100004048(v84, (uint64_t *)&unk_1010EA690);
LABEL_45:
    v89 = v97;
    Date.advanced(by:)(v88, 86400.0);
    v66 = dispatch thunk of static Comparable.< infix(_:_:)(v62, v89, v22, v65) ^ 1;
    v67 = *(void (**)(char *, uint64_t))(v23 + 8);
    v67(v89, v22);
    v67(v87, v22);
    v67(v32, v22);
    goto LABEL_46;
  }
  v90 = v34;
  v91 = v32;
  v92 = v22;
  v77 = 0;
  v78 = v109;
  v79 = (uint64_t)v105;
  while (v77 < *(_QWORD *)(v74 + 16))
  {
    v80 = (*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80);
    v81 = *(_QWORD *)(v110 + 72);
    sub_10012D874(v74 + v80 + v81 * v77, v79);
    if (*(_BYTE *)(v79 + *(int *)(v78 + 24)) == 40)
    {
      sub_10012D934(v79, v106);
      if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0)
        sub_10009AAC8(0, v75[2] + 1, 1);
      v75 = v111;
      v83 = v111[2];
      v82 = v111[3];
      if (v83 >= v82 >> 1)
      {
        sub_10009AAC8(v82 > 1, v83 + 1, 1);
        v75 = v111;
      }
      v75[2] = v83 + 1;
      result = sub_10012D934(v106, (uint64_t)v75 + v80 + v83 * v81);
      v78 = v109;
      v79 = (uint64_t)v105;
    }
    else
    {
      result = sub_10012D8F8(v79);
    }
    ++v77;
    v54 = (uint64_t)v107;
    if (v76 == v77)
    {
      v75 = v111;
      v62 = v104;
      v22 = v92;
      v32 = v91;
      v34 = v90;
      goto LABEL_39;
    }
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_1004E3814()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for SPObserverAnalyticsAttempts()
{
  return objc_opt_self(_TtC12searchpartyd27SPObserverAnalyticsAttempts);
}

unint64_t sub_1004E3858(uint64_t a1)
{
  unint64_t result;

  result = sub_1004E387C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1004E387C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010FD6E0;
  if (!qword_1010FD6E0)
  {
    v1 = sub_10000F4A0(255, (unint64_t *)&qword_101111D20, NRDevice_ptr);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1010FD6E0);
  }
  return result;
}

id sub_1004E38D4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  Class isa;
  id v15;
  uint64_t v17;

  v0 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v0);
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (void *)sub_1004DC278();
  if (!v7)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
    goto LABEL_5;
  }
  v8 = v7;
  v9 = objc_msgSend(v7, "UUIDString");

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  UUID.init(uuidString:)(v10, v12);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
LABEL_5:
    sub_100004048((uint64_t)v2, &qword_1010ED860);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  v13 = (void *)objc_opt_self(NRDeviceIdentifier);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(v13, "newDeviceIdentifierWithBluetoothUUID:", isa);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v15;
}

void sub_1004E3A78(uint64_t a1, void *a2, void *a3)
{
  id v4;

  v4 = a2;
  sub_100AE0F50((uint64_t)a3, (uint64_t)v4);

}

void sub_1004E3AC4(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  char **v19;
  char **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t Strong;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65[2];

  v3 = v2;
  LODWORD(v62) = a2;
  v5 = type metadata accessor for UUID(0);
  v63 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v57 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v57 - v12;
  if (qword_1010E99A0 != -1)
    swift_once(&qword_1010E99A0, sub_100146CAC);
  v61 = v8;
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B67F0);
  v16 = a1;
  v60 = v15;
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  v19 = &selRef_connectedServicesChanged_;
  v20 = &selRef_connectedServicesChanged_;
  if (os_log_type_enabled(v17, v18))
  {
    v21 = swift_slowAlloc(28, -1);
    v58 = v3;
    v22 = v21;
    v23 = swift_slowAlloc(32, -1);
    *(_DWORD *)v22 = 141558531;
    v64 = 1752392040;
    v65[0] = v23;
    v59 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2081;
    v57 = v22 + 14;
    v24 = objc_msgSend(v16, "deviceIdentifier");
    v25 = objc_msgSend(v24, "nrDeviceIdentifier");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v26 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v5, v26);
    v29 = v28;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v13, v5);
    v30 = v27;
    v19 = &selRef_connectedServicesChanged_;
    v64 = sub_100016940(v30, v29, v65);
    v11 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v57, v22 + 22);

    v20 = &selRef_connectedServicesChanged_;
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 22) = 1024;
    LODWORD(v64) = v62 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, (char *)&v64 + 4, v22 + 24, v22 + 28);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Device BT Monitoring: Connection Changed\n%{private,mask.hash}s as %{BOOL}d", (uint8_t *)v22, 0x1Cu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    v31 = v22;
    v3 = v58;
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

  }
  v32 = objc_msgSend(v16, v19[508]);
  v33 = objc_msgSend(v32, v20[509]);

  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v34 = *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd27BluetoothConnectionObserver_currentlyMonitoringDevices);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v34 + 24));
  v35 = *(_QWORD *)(v34 + 16);
  swift_bridgeObjectRetain(v35);
  os_unfair_lock_unlock((os_unfair_lock_t)(v34 + 24));
  v36 = swift_release();
  __chkstk_darwin(v36);
  *(&v57 - 2) = (uint64_t)v11;
  sub_100A782E4((uint64_t (*)(_QWORD *))sub_1004E477C, (uint64_t)(&v57 - 4), v35);
  v38 = v37;
  v40 = v39;
  swift_bridgeObjectRelease();
  if (v38)
  {

    Strong = swift_unknownObjectWeakLoadStrong(v3 + OBJC_IVAR____TtC12searchpartyd27BluetoothConnectionObserver_delegate);
    v42 = v63;
    if (Strong)
    {
      v43 = Strong;
      v44 = v38;
      sub_1004E4798(v44, v62 & 1, v43);
      swift_unknownObjectRelease(v43);

      (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v5);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v5);
    }
  }
  else
  {
    v45 = v63;
    v46 = v61;
    v47 = (*(uint64_t (**)(char *, char *, uint64_t))(v63 + 16))(v61, v11, v5);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      v50 = swift_slowAlloc(22, -1);
      v51 = swift_slowAlloc(32, -1);
      v62 = v51;
      *(_DWORD *)v50 = 141558275;
      v64 = 1752392040;
      v65[0] = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v50 + 4, v50 + 12);
      *(_WORD *)(v50 + 12) = 2081;
      v52 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v53 = dispatch thunk of CustomStringConvertible.description.getter(v5, v52);
      v64 = sub_100016940(v53, v54, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v50 + 14, v50 + 22);
      swift_bridgeObjectRelease();
      v55 = *(void (**)(char *, uint64_t))(v45 + 8);
      v55(v46, v5);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Notified about a device that didn't match monitored list %{private,mask.hash}s.", (uint8_t *)v50, 0x16u);
      v56 = v62;
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v50, -1, -1);
    }
    else
    {
      v55 = *(void (**)(char *, uint64_t))(v45 + 8);
      v55(v46, v5);
    }

    v55(v11, v5);
  }
}

uint64_t sub_1004E40A4(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  char *v19;
  id v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  int v24;
  uint64_t *v25;
  char v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  char *v31;
  char *v32;

  v32 = a2;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v31 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED860);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v31 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v31 - v15;
  v17 = sub_1004E38D4();
  if (v17)
  {
    v18 = v17;
    v19 = v11;
    v20 = objc_msgSend(v17, "nrDeviceIdentifier");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v11 = v19;
    v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v21(v16, 0, 1, v2);
  }
  else
  {
    v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v21(v16, 1, 1, v2);
  }
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v14, v32, v2);
  v21(v14, 0, 1, v2);
  v22 = (uint64_t)&v7[*(int *)(v5 + 48)];
  sub_1002A380C((uint64_t)v16, (uint64_t)v7);
  sub_1002A380C((uint64_t)v14, v22);
  v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v23((uint64_t)v7, 1, v2) == 1)
  {
    sub_100004048((uint64_t)v14, &qword_1010ED860);
    sub_100004048((uint64_t)v16, &qword_1010ED860);
    v24 = v23(v22, 1, v2);
    if (v24 == 1)
      v25 = &qword_1010ED860;
    else
      v25 = (uint64_t *)&unk_10110EE90;
    if (v24 == 1)
      v26 = -1;
    else
      v26 = 0;
  }
  else
  {
    sub_1002A380C((uint64_t)v7, (uint64_t)v11);
    if (v23(v22, 1, v2) == 1)
    {
      sub_100004048((uint64_t)v14, &qword_1010ED860);
      sub_100004048((uint64_t)v16, &qword_1010ED860);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
      v26 = 0;
      v25 = (uint64_t *)&unk_10110EE90;
    }
    else
    {
      v27 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v31, v22, v2);
      v28 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v26 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v27, v2, v28);
      v32 = v11;
      v29 = *(void (**)(char *, uint64_t))(v3 + 8);
      v29(v27, v2);
      v25 = &qword_1010ED860;
      sub_100004048((uint64_t)v14, &qword_1010ED860);
      sub_100004048((uint64_t)v16, &qword_1010ED860);
      v29(v32, v2);
    }
  }
  sub_100004048((uint64_t)v7, v25);
  return v26 & 1;
}

void sub_1004E4458(uint64_t *a1@<X0>, void *a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v4;
  id v5;
  void *v6;

  v4 = *a1;
  v5 = a2;
  v6 = sub_100BBE3D8(v5, v4);

  if (v6)
  *a3 = v6 != 0;
}

id sub_1004E44B4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  objc_class *ObjectType;
  objc_super v24;
  _QWORD *v25;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v21 = *(_QWORD *)(v2 - 8);
  v22 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = &v1[OBJC_IVAR____TtC12searchpartyd27BluetoothConnectionObserver_delegate];
  *((_QWORD *)v11 + 1) = 0;
  swift_unknownObjectWeakInit(v11, 0);
  v12 = OBJC_IVAR____TtC12searchpartyd27BluetoothConnectionObserver_currentlyMonitoringDevices;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010FD790);
  v14 = swift_allocObject(v13, 28, 7);
  *(_DWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 16) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)&v1[v12] = v14;
  v15 = OBJC_IVAR____TtC12searchpartyd27BluetoothConnectionObserver_bluetoothObserverQueue;
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v16 = v1;
  static DispatchQoS.unspecified.getter(v16);
  v25 = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v19 = sub_10001F738();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v5, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v22);
  *(_QWORD *)&v1[v15] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000037, 0x8000000100ED8B50, v10, v7, v4, 0);

  v24.receiver = v16;
  v24.super_class = ObjectType;
  return objc_msgSendSuper2(&v24, "init");
}

uint64_t type metadata accessor for BluetoothConnectionObserver()
{
  return objc_opt_self(_TtC12searchpartyd27BluetoothConnectionObserver);
}

uint64_t sub_1004E477C(uint64_t a1)
{
  uint64_t v1;

  return sub_1004E40A4(a1, *(char **)(v1 + 16)) & 1;
}

void sub_1004E4798(void *a1, char a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject *oslog;
  int v16;
  uint64_t v17;

  v5 = a1;
  v6 = sub_1004DC360();
  if (v7)
  {
    v8 = v6;
    v9 = v7;
    v10 = swift_allocObject(&unk_10107A5A0, 41, 7);
    *(_QWORD *)(v10 + 16) = a3;
    *(_QWORD *)(v10 + 24) = v8;
    *(_QWORD *)(v10 + 32) = v9;
    *(_BYTE *)(v10 + 40) = a2 & 1;
    swift_retain();
    dispatch thunk of WorkItemQueue.enqueue(_:)(&unk_1010FD7A0, v10);

    swift_release();
    swift_release();
  }
  else
  {
    if (qword_1010E99A0 != -1)
      swift_once(&qword_1010E99A0, sub_100146CAC);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B67F0);
    oslog = Logger.logObject.getter(v12);
    v13 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 67109120;
      v16 = a2 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v14 + 4, v14 + 8);
      _os_log_impl((void *)&_mh_execute_header, oslog, v13, "Cannot read udid from paired device with nearby state %{BOOL}d.", v14, 8u);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_1004E496C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1004E4998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_BYTE *)(v0 + 40);
  v6 = (_QWORD *)swift_task_alloc(dword_1011105CC);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100004C28;
  return sub_100A30B6C(v2, v3, v4, v5);
}

uint64_t sub_1004E4A00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 72))
  {
    v1 = *(_QWORD *)(v0 + 72);
  }
  else
  {
    v2 = swift_allocObject(&unk_10107A5D0, 24, 7);
    swift_weakInit(v2 + 16, v0);
    swift_retain();
    v1 = sub_1004E4DF4((uint64_t)sub_1004E5514, v2);
    swift_release_n(v2, 2);
    *(_QWORD *)(v0 + 72) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1004E4AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    Transaction.capture()();
    (*(void (**)(void))(v5 + 56))();
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_1004E4B00()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain(v1);
  v3._countAndFlagsBits = v2;
  v3._object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v1);
  v4._countAndFlagsBits = 62;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0x656863534350583CLL;
}

uint64_t sub_1004E4BA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t (*v19)(uint64_t);
  void *v20;
  uint64_t (*v21)();
  uint64_t v22;

  v1 = v0;
  v2 = sub_1004E4A00();
  v3 = *(NSObject **)(v2 + 16);
  v4 = swift_allocObject(&unk_10107A620, 32, 7);
  *(_QWORD *)(v4 + 16) = sub_1003D8448;
  *(_QWORD *)(v4 + 24) = v2;
  v21 = sub_10001D850;
  v22 = v4;
  v17 = (uint64_t)_NSConcreteStackBlock;
  v18 = 1107296256;
  v19 = sub_10001D8B8;
  v20 = &unk_10107A638;
  v5 = _Block_copy(&v17);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v3, v5);
  _Block_release(v5);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation(v4, "", 90, 53, 20, 1);
  swift_release_n(v2, 2);
  v6 = swift_release();
  if ((v3 & 1) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v4 = static os_log_type_t.default.getter(v6);
  if (qword_1010EA2B8 != -1)
LABEL_5:
    swift_once(&qword_1010EA2B8, sub_100B5DE78);
  v7 = qword_1011B7D98;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  v17 = 0;
  v18 = 0xE000000000000000;
  swift_retain();
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v17 = 0x656863534350583CLL;
  v18 = 0xEF203A72656C7564;
  v10 = *(_QWORD *)(v1 + 16);
  v11 = *(void **)(v1 + 24);
  swift_bridgeObjectRetain(v11);
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 62;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  swift_release();
  v14 = v17;
  v15 = v18;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v14;
  *(_QWORD *)(v9 + 40) = v15;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v7, "Invalidating timer: %@", 22, 2, v9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004E4DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v24;
  double v25;

  v3 = v2;
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static os_log_type_t.default.getter(v7);
  if (qword_1010EA2B8 != -1)
    swift_once(&qword_1010EA2B8, sub_100B5DE78);
  v11 = qword_1011B7D98;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v13 = swift_allocObject(v12, 112, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v13 + 56) = &type metadata for Double;
  *(_QWORD *)(v13 + 64) = &protocol witness table for Double;
  v14 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v13 + 96) = &type metadata for Double;
  *(_QWORD *)(v13 + 104) = &protocol witness table for Double;
  *(_QWORD *)(v13 + 72) = v14;
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Creating XPCActivity frequency: %f gracePeriod: %f", v24, v25);
  swift_bridgeObjectRelease();
  v15 = *(Swift::String *)(v3 + 16);
  v24 = -2.31584178e77;
  v25 = COERCE_DOUBLE(0x8000000100ED8C20);
  String.append(_:)(v15);
  v16 = *(_QWORD *)&v24;
  v17 = v25;
  static DispatchQoS.background.getter(v18);
  v19 = swift_allocObject(&unk_10107A5D0, 24, 7);
  swift_weakInit(v19 + 16, v3);
  v20 = swift_allocObject(&unk_10107A5F8, 32, 7);
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  v21 = type metadata accessor for XPCActivity();
  swift_allocObject(v21, 112, 7);
  swift_retain();
  v22 = sub_100734F68(v16, *(void **)&v17, (uint64_t)v9, (uint64_t)sub_1004E5488, v19, (uint64_t)sub_1004E54B4, v20);
  swift_release();
  swift_release();
  return v22;
}

uint64_t sub_1004E4FF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  double *v12;
  double v13;
  double v14;
  double v15;
  _BYTE v16[24];
  _QWORD v17[5];
  _BYTE v18[40];

  sub_1004E54BC(a1, (uint64_t)v17);
  v7 = v17[0];
  v6 = v17[1];
  v8 = v17[2];
  v9 = v17[3];
  a2 += 16;
  v10 = v17[4];
  swift_beginAccess(a2, v16, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (!result)
  {
    v6 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v7 = 2;
    goto LABEL_15;
  }
  v12 = (double *)result;
  result = sub_1004E54BC(a1, (uint64_t)v18);
  if (v18[0] != 2)
  {
    result = swift_release();
    goto LABEL_15;
  }
  v13 = v12[4];
  if ((~*(_QWORD *)&v13 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v13 <= -9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v13 >= 9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v14 = v12[6];
  if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) == 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v14 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v14 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v15 = v12[5];
  result = swift_release();
  if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) == 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v15 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v15 < 9.22337204e18)
  {
    v6 = (uint64_t)v13;
    v8 = (uint64_t)v14;
    v10 = 707;
    v7 = 256;
    v9 = (uint64_t)v15;
LABEL_15:
    *a3 = v7;
    a3[1] = v6;
    a3[2] = v8;
    a3[3] = v9;
    a3[4] = v10;
    return result;
  }
LABEL_24:
  __break(1u);
  return result;
}

void sub_1004E51B4(uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t, uint64_t))
{
  Transaction.capture()();
  if (a3 == 3)
  {
    sub_1007329F0();
  }
  else if (a3 == 2)
  {
    a4(a1, a2);
    sub_100732A0C();
  }
}

uint64_t sub_1004E522C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t type metadata accessor for XPCScheduler()
{
  return objc_opt_self(_TtC12searchpartyd12XPCScheduler);
}

uint64_t sub_1004E5280()
{
  return sub_1004E4B00();
}

uint64_t sub_1004E52A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;

  *(_QWORD *)(v7 + 64) = a4;
  *(_QWORD *)(v7 + 72) = 0;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  *(double *)(v7 + 32) = a7;
  *(double *)(v7 + 40) = a5;
  *(double *)(v7 + 48) = a6;
  *(_QWORD *)(v7 + 56) = a3;
  swift_retain();
  v8 = sub_1004E4A00();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100139464, v8, *(_QWORD *)(v8 + 40), (char *)&type metadata for () + 8, (char *)&type metadata for () + 8);
  v9 = swift_release();
  v10 = static os_log_type_t.default.getter(v9);
  if (qword_1010EA2B8 != -1)
    swift_once(&qword_1010EA2B8, sub_100B5DE78);
  v11 = qword_1011B7D98;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E22B00;
  swift_retain();
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(v7 + 16);
  v15 = *(void **)(v7 + 24);
  swift_bridgeObjectRetain(v15);
  v16._countAndFlagsBits = v14;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 62;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  swift_release();
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  *(_QWORD *)(v13 + 64) = sub_10001AA00();
  *(_QWORD *)(v13 + 32) = 0x656863534350583CLL;
  *(_QWORD *)(v13 + 40) = 0xEF203A72656C7564;
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Scheduling timer: %{public}@", 28, 2, v13);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1004E5464()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004E5488@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1004E4FF8(a1, v2, a2);
}

uint64_t sub_1004E5490()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1004E54B4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  sub_1004E51B4(a1, a2, a3, *(void (**)(uint64_t, uint64_t))(v3 + 16));
}

uint64_t sub_1004E54BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_101106350);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004E5504()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004E5514(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1004E4AA0(a1, a2, v2);
}

uint64_t sub_1004E551C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v17 = a4;
  v18 = a5;
  v9 = sub_10001A9A8(&qword_1010FD9E0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v14);
  v15 = sub_1004E8324();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LegacyBeaconingKey.CodingKeys, &type metadata for LegacyBeaconingKey.CodingKeys, v15, v14, v13);
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v20, v9);
  if (!v5)
  {
    v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v19, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1004E5644(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010FD988);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1004E78D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LegacyBeaconState.CodingKeys, &type metadata for LegacyBeaconState.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v35) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v35, v5);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for LegacyBeaconState(0);
    v15 = (char *)v3 + v14[5];
    LOBYTE(v35) = 1;
    v16 = type metadata accessor for UUID(0);
    v17 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v35, v5, v16, v17);
    v18 = (uint64_t *)((char *)v3 + v14[6]);
    v19 = *v18;
    v20 = v18[1];
    LOBYTE(v35) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v35, v5);
    v21 = (uint64_t *)((char *)v3 + v14[7]);
    v22 = *v21;
    v23 = v21[1];
    LOBYTE(v35) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v35, v5);
    v24 = *((unsigned __int8 *)v3 + v14[8]);
    LOBYTE(v35) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v24, &v35, v5);
    v25 = (uint64_t *)((char *)v3 + v14[9]);
    v26 = *v25;
    v27 = v25[1];
    LOBYTE(v35) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, &v35, v5);
    v28 = (uint64_t *)((char *)v3 + v14[10]);
    v29 = *v28;
    v30 = v28[1];
    LOBYTE(v35) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, v30, &v35, v5);
    v35 = *(uint64_t *)((char *)v3 + v14[11]);
    HIBYTE(v34) = 7;
    v31 = sub_10001A9A8(&qword_1010FD998);
    v32 = sub_1004E7918();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v35, (char *)&v34 + 7, v5, v31, v32);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004E58D8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_10001A9A8(&qword_1010FD960);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  v10 = sub_1004E7814();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LegacyBeaconStateCapture.CodingKeys, &type metadata for LegacyBeaconStateCapture.CodingKeys, v10, v8, v9);
  v16 = a2;
  v11 = sub_10001A9A8(&qword_1010FD970);
  v12 = sub_1004E7858();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1004E59DC()
{
  _BYTE *v0;

  if (*v0)
    return 0x7461447472617473;
  else
    return 0x61446E6F63616562;
}

uint64_t sub_1004E5A20@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1004E7E84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004E5A44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004E8324();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004E5A6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004E8324();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004E5A94(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1004E551C(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1004E5AB0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1004E5AE4 + 4 * byte_100E3FD10[*v0]))(0x614E6E6F63616562, 0xEA0000000000656DLL);
}

uint64_t sub_1004E5AE4()
{
  return 0x55556E6F63616562;
}

uint64_t sub_1004E5B00()
{
  return 0x754E6C6169726573;
}

uint64_t sub_1004E5B20()
{
  return 0x6F69737265567766;
}

uint64_t sub_1004E5B3C()
{
  return 0x656E694D7369;
}

uint64_t sub_1004E5B50()
{
  return 0x6574614472696170;
}

uint64_t sub_1004E5B68()
{
  return 0x3050766461;
}

uint64_t sub_1004E5B7C()
{
  return 0x6E696E6F63616562;
}

uint64_t sub_1004E5BA0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1004E7F8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004E5BC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004E78D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004E5BEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004E78D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004E5C14(_QWORD *a1)
{
  return sub_1004E5644(a1);
}

uint64_t sub_1004E5C28()
{
  return 0x736E6F63616562;
}

uint64_t sub_1004E5C40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x736E6F63616562 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease(0xE700000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736E6F63616562, 0xE700000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1004E5CD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004E7814();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004E5CFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004E7814();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004E5D24(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1004E58D8(a1, *v1);
}

void sub_1004E5D3C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  _QWORD *v5;

  v5 = _swiftEmptyArrayStorage;
  v4 = objc_autoreleasePoolPush();
  sub_1004E5DA0(a1, (unint64_t *)&v5);
  objc_autoreleasePoolPop(v4);
  *a2 = v5;
}

void sub_1004E5DA0(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[5];

  v3 = v2;
  v6 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "setDateFormat:", v7);

  v8 = sub_100017368();
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = v8 + 32;
    while (1)
    {
      sub_100030784(v10, (uint64_t)v12);
      v11 = objc_autoreleasePoolPush();
      sub_1004E5EBC(a1, v12, a2, (uint64_t)v6);
      if (v3)
        break;
      v3 = 0;
      objc_autoreleasePoolPop(v11);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
      v10 += 40;
      if (!--v9)
        goto LABEL_5;
    }
    objc_autoreleasePoolPop(v11);
    __break(1u);
  }
  else
  {
LABEL_5:

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1004E5EBC(uint64_t a1, _QWORD *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  void (*v57)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  void (*v81)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[10];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char v121[8];
  uint64_t v122;

  v100[9] = a4;
  v111 = a3;
  v101 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v101);
  v102 = (uint64_t)v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for LegacyBeaconState(0);
  v112 = *(_QWORD *)(v110 - 8);
  v7 = __chkstk_darwin(v110);
  v100[3] = (char *)v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v100[6] = (char *)v100 - v10;
  v11 = __chkstk_darwin(v9);
  v100[2] = (char *)v100 - v12;
  v13 = __chkstk_darwin(v11);
  v100[5] = (char *)v100 - v14;
  v15 = __chkstk_darwin(v13);
  v100[7] = (char *)v100 - v16;
  v17 = __chkstk_darwin(v15);
  v100[8] = (char *)v100 - v18;
  v19 = __chkstk_darwin(v17);
  v100[1] = (char *)v100 - v20;
  v21 = __chkstk_darwin(v19);
  v100[4] = (char *)v100 - v22;
  v23 = __chkstk_darwin(v21);
  v108 = (uint64_t)v100 - v24;
  __chkstk_darwin(v23);
  v107 = (_QWORD *)((char *)v100 - v25);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v26);
  v105 = (char *)v100 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for OwnedBeaconRecord(0);
  v104 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v103 = (uint64_t)v100 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v29);
  v114 = (char *)v100 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for SharedBeaconRecord(0);
  v113 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v106 = (uint64_t)v100 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = type metadata accessor for UUID(0);
  v32 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  v34 = (char *)v100 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v35);
  v37 = (char *)v100 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for BeaconNamingRecord(0);
  v39 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v41 = *(_QWORD *)(a1 + 280);
  v42 = a2;
  v43 = a2[3];
  v44 = v42[4];
  v115 = v42;
  v116 = (uint64_t)v100 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001AA44(v42, v43);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v44 + 8) + 8) + 32))(v43);
  v119 = v41;
  v120 = v34;
  v45 = v122;
  v46 = (uint64_t)v118;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10029183C);
  v47 = *(void (**)(char *, uint64_t))(v32 + 8);
  v118 = v34;
  v47(v34, v45);
  v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
  v49 = v38;
  if (v48(v37, 1, v38) == 1)
    return sub_100004048((uint64_t)v37, (uint64_t *)&unk_101105880);
  v51 = (uint64_t)v37;
  v52 = v116;
  sub_1000126EC(v51, v116, type metadata accessor for BeaconNamingRecord);
  v53 = v115;
  sub_100030784((uint64_t)v115, (uint64_t)v121);
  v54 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v55 = (uint64_t)v114;
  v56 = swift_dynamicCast(v114, v121, v54, v117, 6);
  v57 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v113 + 56);
  if ((v56 & 1) != 0)
  {
    v58 = v117;
    v57(v55, 0, 1, v117);
    v59 = v55;
    v60 = v106;
    sub_1000126EC(v59, v106, type metadata accessor for SharedBeaconRecord);
    v61 = (_QWORD *)(v52 + *(int *)(v49 + 32));
    v62 = v61[1];
    v63 = v60 + *(int *)(v58 + 20);
    v64 = (uint64_t)v107;
    *v107 = *v61;
    *(_QWORD *)(v64 + 8) = v62;
    v65 = v45;
    v66 = (int *)v110;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v64 + *(int *)(v110 + 20), v63, v65);
    v67 = (_QWORD *)(v64 + v66[6]);
    *v67 = 0;
    v67[1] = 0;
    v68 = (_QWORD *)(v64 + v66[7]);
    *v68 = 0;
    v68[1] = 0;
    *(_BYTE *)(v64 + v66[8]) = 0;
    v69 = (_QWORD *)(v64 + v66[9]);
    *v69 = 0;
    v69[1] = 0;
    v70 = (_QWORD *)(v64 + v66[10]);
    *v70 = 0;
    v70[1] = 0;
    *(_QWORD *)(v64 + v66[11]) = _swiftEmptyArrayStorage;
    v71 = v108;
    sub_10005972C(v64, v108, type metadata accessor for LegacyBeaconState);
    v72 = v111;
    v73 = *v111;
    swift_bridgeObjectRetain(v62);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v73);
    *v72 = v73;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v73 = sub_1007C9F38(0, *(_QWORD *)(v73 + 16) + 1, 1, v73);
      *v72 = v73;
    }
    v76 = *(_QWORD *)(v73 + 16);
    v75 = *(_QWORD *)(v73 + 24);
    if (v76 >= v75 >> 1)
    {
      v73 = sub_1007C9F38(v75 > 1, v76 + 1, 1, v73);
      *v72 = v73;
    }
    *(_QWORD *)(v73 + 16) = v76 + 1;
    sub_1000126EC(v71, v73+ ((*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80))+ *(_QWORD *)(v112 + 72) * v76, type metadata accessor for LegacyBeaconState);
    sub_1000126B0(v64, type metadata accessor for LegacyBeaconState);
    sub_1000126B0(v60, type metadata accessor for SharedBeaconRecord);
    return sub_1000126B0(v52, type metadata accessor for BeaconNamingRecord);
  }
  else
  {
    v57(v55, 1, 1, v117);
    sub_100004048(v55, (uint64_t *)&unk_1010EE180);
    sub_100030784((uint64_t)v53, (uint64_t)v121);
    v77 = v105;
    v78 = v54;
    v79 = v109;
    v80 = swift_dynamicCast(v105, v121, v78, v109, 6);
    v81 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v104 + 56);
    if ((v80 & 1) != 0)
    {
      v118 = (char *)v49;
      v81(v77, 0, 1, v79);
      v82 = (uint64_t)v77;
      v83 = v103;
      sub_1000126EC(v82, v103, type metadata accessor for OwnedBeaconRecord);
      v84 = v102;
      sub_10005972C(v83 + *(int *)(v79 + 24), v102, type metadata accessor for StableIdentifier);
      v85 = (char *)&loc_1004E65B0 + dword_1004E7044[swift_getEnumCaseMultiPayload(v84, v101)];
      __asm { BR              X10 }
    }
    v86 = (uint64_t)v77;
    v87 = v45;
    v117 = v46;
    v81((char *)v86, 1, 1, v79);
    v88 = sub_100004048(v86, (uint64_t *)&unk_1010F47C0);
    v89 = static os_log_type_t.default.getter(v88);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v90 = qword_1011B7D38;
    v91 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v92 = swift_allocObject(v91, 72, 7);
    *(_OWORD *)(v92 + 16) = xmmword_100E22B00;
    v94 = v53[3];
    v93 = v53[4];
    sub_10001AA44(v53, v94);
    v95 = v118;
    v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v93 + 8) + 8) + 32))(v94);
    v97 = UUID.uuidString.getter(v96);
    v99 = v98;
    v47(v95, v87);
    *(_QWORD *)(v92 + 56) = &type metadata for String;
    *(_QWORD *)(v92 + 64) = sub_10001AA00();
    *(_QWORD *)(v92 + 32) = v97;
    *(_QWORD *)(v92 + 40) = v99;
    os_log(_:dso:log:_:_:)(v89, &_mh_execute_header, v90, "name record not found for %@", 28, 2, v92);
    swift_bridgeObjectRelease();
    return sub_1000126B0(v116, type metadata accessor for BeaconNamingRecord);
  }
}

uint64_t type metadata accessor for LegacyBeaconState(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FD910;
  if (!qword_1010FD910)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LegacyBeaconState);
  return result;
}

_QWORD *sub_1004E7094(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v31 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v31);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UUID(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (_QWORD *)((char *)v4 + v13);
    v16 = (_QWORD *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (_QWORD *)((char *)v4 + v14);
    v19 = (_QWORD *)((char *)a2 + v14);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = a3[9];
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    v22 = (_QWORD *)((char *)v4 + v21);
    v23 = (_QWORD *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = a3[10];
    v26 = a3[11];
    v27 = (_QWORD *)((char *)v4 + v25);
    v28 = (_QWORD *)((char *)a2 + v25);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    v30 = *(_QWORD *)((char *)a2 + v26);
    *(_QWORD *)((char *)v4 + v26) = v30;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
  }
  return v4;
}

uint64_t sub_1004E71C0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11]));
}

_QWORD *sub_1004E725C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v12);
  v15 = (_QWORD *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (_QWORD *)((char *)a1 + v13);
  v18 = (_QWORD *)((char *)a2 + v13);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = a3[10];
  v25 = a3[11];
  v26 = (_QWORD *)((char *)a1 + v24);
  v27 = (_QWORD *)((char *)a2 + v24);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = *(_QWORD *)((char *)a2 + v25);
  *(_QWORD *)((char *)a1 + v25) = v29;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  return a1;
}

_QWORD *sub_1004E735C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[7];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v22 = a3[9];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = a3[10];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = a3[11];
  v33 = *(_QWORD *)((char *)a2 + v32);
  v34 = *(_QWORD *)((char *)a1 + v32);
  *(_QWORD *)((char *)a1 + v32) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  return a1;
}

_OWORD *sub_1004E74B8(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  v11 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  v12 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  return a1;
}

_QWORD *sub_1004E7560(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  v17 = v13[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  v18 = a3[7];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  v23 = v19[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  v24 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  v28 = *v26;
  v27 = v26[1];
  v29 = v25[1];
  *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease(v29);
  v30 = a3[10];
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (_QWORD *)((char *)a2 + v30);
  v34 = *v32;
  v33 = v32[1];
  v35 = v31[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease(v35);
  v36 = a3[11];
  v37 = *(_QWORD *)((char *)a1 + v36);
  *(_QWORD *)((char *)a1 + v36) = *(_QWORD *)((char *)a2 + v36);
  swift_bridgeObjectRelease(v37);
  return a1;
}

uint64_t sub_1004E7660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004E766C);
}

uint64_t sub_1004E766C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1004E76E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004E76F4);
}

uint64_t sub_1004E76F4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1004E7768(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_100E3FD58;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100E3FD70;
    v4[3] = &unk_100E3FD70;
    v4[4] = &unk_100E3FD88;
    v4[5] = &unk_100E3FD70;
    v4[6] = &unk_100E3FD70;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyBeaconStateCapture()
{
  return &type metadata for LegacyBeaconStateCapture;
}

unint64_t sub_1004E7814()
{
  unint64_t result;

  result = qword_1010FD968;
  if (!qword_1010FD968)
  {
    result = swift_getWitnessTable(byte_100E4001C, &type metadata for LegacyBeaconStateCapture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FD968);
  }
  return result;
}

unint64_t sub_1004E7858()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FD978;
  if (!qword_1010FD978)
  {
    v1 = sub_10001F784(&qword_1010FD970);
    v2 = sub_100006204(&qword_1010FD980, type metadata accessor for LegacyBeaconState, (uint64_t)&unk_100E3FDBC);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FD978);
  }
  return result;
}

unint64_t sub_1004E78D4()
{
  unint64_t result;

  result = qword_1010FD990;
  if (!qword_1010FD990)
  {
    result = swift_getWitnessTable(aE_21, &type metadata for LegacyBeaconState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FD990);
  }
  return result;
}

unint64_t sub_1004E7918()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1010FD9A0;
  if (!qword_1010FD9A0)
  {
    v1 = sub_10001F784(&qword_1010FD998);
    v2 = sub_1004E797C();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FD9A0);
  }
  return result;
}

unint64_t sub_1004E797C()
{
  unint64_t result;

  result = qword_1010FD9A8;
  if (!qword_1010FD9A8)
  {
    result = swift_getWitnessTable(asc_100E3FFA4, &type metadata for LegacyBeaconingKey);
    atomic_store(result, (unint64_t *)&qword_1010FD9A8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LegacyBeaconState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1004E7A0C + 4 * byte_100E3FD1D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1004E7A40 + 4 * byte_100E3FD18[v4]))();
}

uint64_t sub_1004E7A40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004E7A48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004E7A50);
  return result;
}

uint64_t sub_1004E7A5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004E7A64);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1004E7A68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004E7A70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LegacyBeaconState.CodingKeys()
{
  return &type metadata for LegacyBeaconState.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for LegacyBeaconStateCapture.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1004E7ACC + 4 * byte_100E3FD22[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1004E7AEC + 4 * byte_100E3FD27[v4]))();
}

_BYTE *sub_1004E7ACC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1004E7AEC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1004E7AF4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1004E7AFC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1004E7B04(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1004E7B0C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LegacyBeaconStateCapture.CodingKeys()
{
  return &type metadata for LegacyBeaconStateCapture.CodingKeys;
}

uint64_t destroy for LegacyBeaconingKey(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for LegacyBeaconingKey(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for LegacyBeaconingKey(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for LegacyBeaconingKey(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureSupportMatrixProductType(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FeatureSupportMatrixProductType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LegacyBeaconingKey()
{
  return &type metadata for LegacyBeaconingKey;
}

unint64_t sub_1004E7CD8()
{
  unint64_t result;

  result = qword_1010FD9B0;
  if (!qword_1010FD9B0)
  {
    result = swift_getWitnessTable(asc_100E3FEC4, &type metadata for LegacyBeaconStateCapture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FD9B0);
  }
  return result;
}

unint64_t sub_1004E7D20()
{
  unint64_t result;

  result = qword_1010FD9B8;
  if (!qword_1010FD9B8)
  {
    result = swift_getWitnessTable(byte_100E3FF7C, &type metadata for LegacyBeaconState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FD9B8);
  }
  return result;
}

unint64_t sub_1004E7D68()
{
  unint64_t result;

  result = qword_1010FD9C0;
  if (!qword_1010FD9C0)
  {
    result = swift_getWitnessTable(byte_100E3FEEC, &type metadata for LegacyBeaconState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FD9C0);
  }
  return result;
}

unint64_t sub_1004E7DB0()
{
  unint64_t result;

  result = qword_1010FD9C8;
  if (!qword_1010FD9C8)
  {
    result = swift_getWitnessTable("թ#", &type metadata for LegacyBeaconState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FD9C8);
  }
  return result;
}

unint64_t sub_1004E7DF8()
{
  unint64_t result;

  result = qword_1010FD9D0;
  if (!qword_1010FD9D0)
  {
    result = swift_getWitnessTable(byte_100E3FE34, &type metadata for LegacyBeaconStateCapture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FD9D0);
  }
  return result;
}

unint64_t sub_1004E7E40()
{
  unint64_t result;

  result = qword_1010FD9D8;
  if (!qword_1010FD9D8)
  {
    result = swift_getWitnessTable(byte_100E3FE5C, &type metadata for LegacyBeaconStateCapture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FD9D8);
  }
  return result;
}

uint64_t sub_1004E7E84(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x61446E6F63616562 && a2 == 0xEA00000000006174)
  {
    v5 = 0xEA00000000006174;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61446E6F63616562, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7461447472617473 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7461447472617473, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1004E7F8C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  if (a1 == 0x614E6E6F63616562 && a2 == 0xEA0000000000656DLL)
  {
    v5 = 0xEA0000000000656DLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614E6E6F63616562, 0xEA0000000000656DLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x55556E6F63616562 && a2 == 0xEA00000000004449)
  {
    v7 = 0xEA00000000004449;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x55556E6F63616562, 0xEA00000000004449, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v8 = 0xEC0000007265626DLL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6F69737265567766 && a2 == 0xE90000000000006ELL)
  {
    v9 = 0xE90000000000006ELL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F69737265567766, 0xE90000000000006ELL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x656E694D7369 && a2 == 0xE600000000000000)
  {
    v10 = 0xE600000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656E694D7369, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x6574614472696170 && a2 == 0xE800000000000000)
  {
    v11 = 0xE800000000000000;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574614472696170, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x3050766461 && a2 == 0xE500000000000000)
  {
    v12 = 0xE500000000000000;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x3050766461, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x6E696E6F63616562 && a2 == 0xED00007379654B67)
  {
    swift_bridgeObjectRelease(0xED00007379654B67);
    return 7;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E696E6F63616562, 0xED00007379654B67, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

unint64_t sub_1004E8324()
{
  unint64_t result;

  result = qword_1010FD9E8;
  if (!qword_1010FD9E8)
  {
    result = swift_getWitnessTable(asc_100E40124, &type metadata for LegacyBeaconingKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FD9E8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LegacyBeaconingKey.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1004E83B4 + 4 * byte_100E3FD31[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1004E83E8 + 4 * byte_100E3FD2C[v4]))();
}

uint64_t sub_1004E83E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004E83F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004E83F8);
  return result;
}

uint64_t sub_1004E8404(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004E840CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1004E8410(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004E8418(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LegacyBeaconingKey.CodingKeys()
{
  return &type metadata for LegacyBeaconingKey.CodingKeys;
}

unint64_t sub_1004E8438()
{
  unint64_t result;

  result = qword_1010FD9F0;
  if (!qword_1010FD9F0)
  {
    result = swift_getWitnessTable(asc_100E400FC, &type metadata for LegacyBeaconingKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FD9F0);
  }
  return result;
}

unint64_t sub_1004E8480()
{
  unint64_t result;

  result = qword_1010FD9F8;
  if (!qword_1010FD9F8)
  {
    result = swift_getWitnessTable(aM_20, &type metadata for LegacyBeaconingKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FD9F8);
  }
  return result;
}

unint64_t sub_1004E84C8()
{
  unint64_t result;

  result = qword_1010FDA00;
  if (!qword_1010FDA00)
  {
    result = swift_getWitnessTable(aU_14, &type metadata for LegacyBeaconingKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDA00);
  }
  return result;
}

ValueMetadata *type metadata accessor for GetiCloudIdentifierPayload()
{
  return &type metadata for GetiCloudIdentifierPayload;
}

unint64_t sub_1004E851C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1004E8548();
  result = sub_10043A0A4();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1004E8548()
{
  unint64_t result;

  result = qword_1010FDA08;
  if (!qword_1010FDA08)
  {
    result = swift_getWitnessTable(byte_100E401E0, &type metadata for GetiCloudIdentifierPayload);
    atomic_store(result, (unint64_t *)&qword_1010FDA08);
  }
  return result;
}

uint64_t sub_1004E858C(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v18, v3, v4);
  v17 = *v1;
  v5 = v19;
  v6 = v20;
  sub_10009F5D0((uint64_t)v18, v19);
  v7 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v17, &type metadata for Data, v7, v5, v6);
  if (!v2)
  {
    v17 = v1[1];
    v8 = v19;
    v9 = v20;
    sub_10009F5D0((uint64_t)v18, v19);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v17, &type metadata for Data, v7, v8, v9);
    v17 = v1[2];
    v10 = v19;
    v11 = v20;
    sub_10009F5D0((uint64_t)v18, v19);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v17, &type metadata for Data, v7, v10, v11);
    v17 = v1[3];
    v12 = v19;
    v13 = v20;
    sub_10009F5D0((uint64_t)v18, v19);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v17, &type metadata for Data, v7, v12, v13);
    v17 = v1[4];
    v14 = v19;
    v15 = v20;
    sub_10009F5D0((uint64_t)v18, v19);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v17, &type metadata for Data, v7, v14, v15);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
}

__n128 sub_1004E8748@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[5];

  sub_1004E8D40(a1, v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1004E8790(_QWORD *a1)
{
  return sub_1004E858C(a1);
}

uint64_t sub_1004E87A4(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_1004E87B4 + *((int *)qword_1004E8970 + (a2 >> 62))))();
}

uint64_t sub_1004E87C4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (BYTE6(a2) != 89)
  {
    __break(1u);
    JUMPOUT(0x1004E8964);
  }
  return ((uint64_t (*)(void))((char *)&loc_1004E8800 + *((int *)qword_1004E8980 + (a4 >> 62))))();
}

uint64_t destroy for AirPodsLEInitiatePairingCommandPayload(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10001BC14(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_10001BC14(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  sub_10001BC14(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  return sub_10001BC14(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
}

uint64_t *initializeWithCopy for AirPodsLEInitiatePairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  sub_10001BBBC(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  v8 = a2[4];
  v9 = a2[5];
  sub_10001BBBC(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  v10 = a2[6];
  v11 = a2[7];
  sub_10001BBBC(v10, v11);
  a1[6] = v10;
  a1[7] = v11;
  v13 = a2[8];
  v12 = a2[9];
  sub_10001BBBC(v13, v12);
  a1[8] = v13;
  a1[9] = v12;
  return a1;
}

uint64_t *assignWithCopy for AirPodsLEInitiatePairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001BC14(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_10001BBBC(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001BC14(v10, v11);
  v12 = a2[4];
  v13 = a2[5];
  sub_10001BBBC(v12, v13);
  v14 = a1[4];
  v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_10001BC14(v14, v15);
  v16 = a2[6];
  v17 = a2[7];
  sub_10001BBBC(v16, v17);
  v18 = a1[6];
  v19 = a1[7];
  a1[6] = v16;
  a1[7] = v17;
  sub_10001BC14(v18, v19);
  v21 = a2[8];
  v20 = a2[9];
  sub_10001BBBC(v21, v20);
  v22 = a1[8];
  v23 = a1[9];
  a1[8] = v21;
  a1[9] = v20;
  sub_10001BC14(v22, v23);
  return a1;
}

uint64_t *assignWithTake for AirPodsLEInitiatePairingCommandPayload(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001BC14(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10001BC14(v6, v7);
  v8 = a1[4];
  v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10001BC14(v8, v9);
  v10 = a1[6];
  v11 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_10001BC14(v10, v11);
  v12 = a1[8];
  v13 = a1[9];
  *((_OWORD *)a1 + 4) = a2[4];
  sub_10001BC14(v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for InitialPairingInfo(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for InitialPairingInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FinalizePairingCommandPayload()
{
  return &type metadata for FinalizePairingCommandPayload;
}

unint64_t sub_1004E8C8C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1004E8CB8();
  result = sub_1004E8CFC();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1004E8CB8()
{
  unint64_t result;

  result = qword_1010FDA10;
  if (!qword_1010FDA10)
  {
    result = swift_getWitnessTable(aI_20, &type metadata for FinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010FDA10);
  }
  return result;
}

unint64_t sub_1004E8CFC()
{
  unint64_t result;

  result = qword_1010FDA18;
  if (!qword_1010FDA18)
  {
    result = swift_getWitnessTable(byte_100E40230, &type metadata for FinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010FDA18);
  }
  return result;
}

uint64_t sub_1004E8D40@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  __int128 v23;
  __int128 v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v25, v5, v6);
  v7 = v26;
  v8 = v27;
  sub_10009F5D0((uint64_t)v25, v26);
  v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(89, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = v9;
    v12 = v10;
    v13 = v26;
    v14 = v27;
    sub_10009F5D0((uint64_t)v25, v26);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(1040, v13, v14);
    v33 = v15;
    v17 = v26;
    v16 = v27;
    sub_10009F5D0((uint64_t)v25, v26);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v17, v16);
    v18 = v26;
    v19 = v27;
    sub_10009F5D0((uint64_t)v25, v26);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(60, v18, v19);
    v20 = v26;
    v21 = v27;
    sub_10009F5D0((uint64_t)v25, v26);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(100, v20, v21);
    sub_1004E87A4(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    v23 = v31;
    a2[2] = v30;
    a2[3] = v23;
    a2[4] = v32;
    v24 = v29;
    *a2 = v28;
    a2[1] = v24;
  }
  return result;
}

uint64_t sub_1004E8F48()
{
  return 0x65746143656C6F72;
}

uint64_t sub_1004E8F6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x65746143656C6F72 && a2 == 0xEE00736569726F67)
  {
    result = swift_bridgeObjectRelease(0xEE00736569726F67);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65746143656C6F72, 0xEE00736569726F67, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1004E9024(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004E9C2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004E904C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004E9C2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_1004E9074@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1004E9AE0(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1004E909C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010FDA50);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1004E9FD8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Role.CodingKeys, &type metadata for Role.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v21, v5);
  if (!v2)
  {
    v13 = v3[1];
    v14 = v3[2];
    v20 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v20, v5);
    v15 = v3[3];
    v16 = v3[4];
    v19 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v19, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004E91D8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;

  v20 = a3;
  v21 = a4;
  v9 = sub_10001A9A8(&qword_1010FDA80);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v14);
  v15 = sub_1004EA3A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RoleCategory.CodingKeys, &type metadata for RoleCategory.CodingKeys, v15, v14, v13);
  v25 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v25, v9);
  if (!v5)
  {
    v24 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v24, v9);
    v22 = a5;
    v23 = 2;
    v16 = sub_10001A9A8(&qword_1010FDA68);
    v17 = sub_100365CCC(&qword_1010FDA88, &qword_1010FDA68, (uint64_t (*)(void))sub_1004EA428, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v23, v9, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1004E9364()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1701605234;
  if (*v0 != 1)
    v1 = 0x6A6F6D45656C6F72;
  if (*v0)
    return v1;
  else
    return 0x6449656C6F72;
}

uint64_t sub_1004E93B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1004E9CB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004E93DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004E9FD8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004E9404(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004E9FD8();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1004E942C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1004E9DFC(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1004E9470(_QWORD *a1)
{
  return sub_1004E909C(a1);
}

uint64_t sub_1004E9484(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_1004E964C(v5, v7) & 1;
}

uint64_t sub_1004E94CC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x73656C6F72;
  if (*v0 == 1)
    v1 = 0x79726F6765746163;
  if (*v0)
    return v1;
  else
    return 0x79726F6765746163;
}

uint64_t sub_1004E9520@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1004EA01C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004E9544(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004EA3A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004E956C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004EA3A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004E9594@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1004EA184(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1004E95C0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1004E91D8(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1004E95DC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  if (*a1 == *a2
    && ((v4 = a1[1], v5 = a1[2], v6 = a1[3], v7 = a2[1], v8 = a2[2], v9 = a2[3], v4 == v7)
      ? (v10 = v5 == v8)
      : (v10 = 0),
        v10 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v7, v8, 0) & 1) != 0))
  {
    return sub_100248970(v6, v9);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1004E964C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*a1 != *a2)
    return 0;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a2[1];
  v7 = a2[2];
  v8 = v4 == v6 && v5 == v7;
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0), result = 0, (v9 & 1) != 0))
  {
    v11 = a1[3];
    v12 = a1[4];
    v13 = a2[3];
    v14 = a2[4];
    if (v11 == v13 && v12 == v14)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v13, v14, 0);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BeaconKeyService.KeyStreamChange(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for RolesResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t *assignWithTake for RolesResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for RolesResponse()
{
  return &type metadata for RolesResponse;
}

uint64_t initializeWithCopy for Role(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for Role(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[3] = a2[3];
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithCopy for XPCActivity.Criteria(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Role(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Role(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Role(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Role()
{
  return &type metadata for Role;
}

uint64_t destroy for RoleCategory(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for RoleCategory(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for RoleCategory(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for RoleCategory(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for RoleCategory(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RoleCategory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RoleCategory()
{
  return &type metadata for RoleCategory;
}

_QWORD *sub_1004E9AE0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v3 = sub_10001A9A8(&qword_1010FDA20);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10001AA44(a1, v7);
  v10 = sub_1004E9C2C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RolesResponse.CodingKeys, &type metadata for RolesResponse.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = sub_10001A9A8(&qword_1010ED608);
    v12 = sub_100365CCC(&qword_1010FDA30, &qword_1010ED608, (uint64_t (*)(void))sub_1004E9C70, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = (_QWORD *)v15[1];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return v9;
}

unint64_t sub_1004E9C2C()
{
  unint64_t result;

  result = qword_1010FDA28;
  if (!qword_1010FDA28)
  {
    result = swift_getWitnessTable(a1_14, &type metadata for RolesResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDA28);
  }
  return result;
}

unint64_t sub_1004E9C70()
{
  unint64_t result;

  result = qword_1010FDA38;
  if (!qword_1010FDA38)
  {
    result = swift_getWitnessTable(asc_100E40324, &type metadata for RoleCategory);
    atomic_store(result, (unint64_t *)&qword_1010FDA38);
  }
  return result;
}

uint64_t sub_1004E9CB4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6449656C6F72 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449656C6F72, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1701605234 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701605234, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6A6F6D45656C6F72 && a2 == 0xE900000000000069)
  {
    swift_bridgeObjectRelease(0xE900000000000069);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6A6F6D45656C6F72, 0xE900000000000069, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1004E9DFC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v5 = sub_10001A9A8(&qword_1010FDA40);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1004E9FD8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Role.CodingKeys, &type metadata for Role.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v27 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v27, v5);
  v26 = 1;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v5);
  v15 = v14;
  v24 = v13;
  v25 = 2;
  swift_bridgeObjectRetain(v14);
  v16 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
  v18 = v17;
  v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20 = v16;
  v19(v8, v5);
  swift_bridgeObjectRetain(v18);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v22 = v24;
  *a2 = v12;
  a2[1] = v22;
  a2[2] = v15;
  a2[3] = v20;
  a2[4] = v18;
  return result;
}

unint64_t sub_1004E9FD8()
{
  unint64_t result;

  result = qword_1010FDA48;
  if (!qword_1010FDA48)
  {
    result = swift_getWitnessTable(byte_100E40680, &type metadata for Role.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDA48);
  }
  return result;
}

uint64_t sub_1004EA01C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x79726F6765746163 && a2 == 0xEA00000000006449)
  {
    v5 = 0xEA00000000006449;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79726F6765746163, 0xEA00000000006449, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x79726F6765746163 && a2 == 0xEC000000656D614ELL)
  {
    v7 = 0xEC000000656D614ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79726F6765746163, 0xEC000000656D614ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x73656C6F72 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73656C6F72, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1004EA184(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;

  v3 = sub_10001A9A8(&qword_1010FDA58);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_1004EA3A0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RoleCategory.CodingKeys, &type metadata for RoleCategory.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v19 = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v3);
    v18 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v18, v3);
    v12 = v11;
    v13 = sub_10001A9A8(&qword_1010FDA68);
    v17 = 2;
    v14 = sub_100365CCC(&qword_1010FDA70, &qword_1010FDA68, (uint64_t (*)(void))sub_1004EA3E4, (const char *)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v12);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v13, &v17, v3, v13, v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain(v16);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_1004EA3A0()
{
  unint64_t result;

  result = qword_1010FDA60;
  if (!qword_1010FDA60)
  {
    result = swift_getWitnessTable("ѭ#", &type metadata for RoleCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDA60);
  }
  return result;
}

unint64_t sub_1004EA3E4()
{
  unint64_t result;

  result = qword_1010FDA78;
  if (!qword_1010FDA78)
  {
    result = swift_getWitnessTable(byte_100E4039C, &type metadata for Role);
    atomic_store(result, (unint64_t *)&qword_1010FDA78);
  }
  return result;
}

unint64_t sub_1004EA428()
{
  unint64_t result;

  result = qword_1010FDA90;
  if (!qword_1010FDA90)
  {
    result = swift_getWitnessTable(byte_100E40374, &type metadata for Role);
    atomic_store(result, (unint64_t *)&qword_1010FDA90);
  }
  return result;
}

ValueMetadata *type metadata accessor for RoleCategory.CodingKeys()
{
  return &type metadata for RoleCategory.CodingKeys;
}

uint64_t _s12searchpartyd12RoleCategoryV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1004EA4D0 + 4 * byte_100E402A1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1004EA504 + 4 * byte_100E4029C[v4]))();
}

uint64_t sub_1004EA504(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004EA50C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004EA514);
  return result;
}

uint64_t sub_1004EA520(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004EA528);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1004EA52C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004EA534(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Role.CodingKeys()
{
  return &type metadata for Role.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for RolesResponse.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1004EA590 + 4 * byte_100E402A6[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1004EA5B0 + 4 * byte_100E402AB[v4]))();
}

_BYTE *sub_1004EA590(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1004EA5B0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1004EA5B8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1004EA5C0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1004EA5C8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1004EA5D0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RolesResponse.CodingKeys()
{
  return &type metadata for RolesResponse.CodingKeys;
}

unint64_t sub_1004EA5F0()
{
  unint64_t result;

  result = qword_1010FDA98;
  if (!qword_1010FDA98)
  {
    result = swift_getWitnessTable(byte_100E40498, &type metadata for RolesResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDA98);
  }
  return result;
}

unint64_t sub_1004EA638()
{
  unint64_t result;

  result = qword_1010FDAA0;
  if (!qword_1010FDAA0)
  {
    result = swift_getWitnessTable(a1_15, &type metadata for Role.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDAA0);
  }
  return result;
}

unint64_t sub_1004EA680()
{
  unint64_t result;

  result = qword_1010FDAA8;
  if (!qword_1010FDAA8)
  {
    result = swift_getWitnessTable(aY_40, &type metadata for RoleCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDAA8);
  }
  return result;
}

unint64_t sub_1004EA6C8()
{
  unint64_t result;

  result = qword_1010FDAB0;
  if (!qword_1010FDAB0)
  {
    result = swift_getWitnessTable(aA_30, &type metadata for RoleCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDAB0);
  }
  return result;
}

unint64_t sub_1004EA710()
{
  unint64_t result;

  result = qword_1010FDAB8;
  if (!qword_1010FDAB8)
  {
    result = swift_getWitnessTable(asc_100E405A0, &type metadata for RoleCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDAB8);
  }
  return result;
}

unint64_t sub_1004EA758()
{
  unint64_t result;

  result = qword_1010FDAC0;
  if (!qword_1010FDAC0)
  {
    result = swift_getWitnessTable(byte_100E404C0, &type metadata for Role.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDAC0);
  }
  return result;
}

unint64_t sub_1004EA7A0()
{
  unint64_t result;

  result = qword_1010FDAC8;
  if (!qword_1010FDAC8)
  {
    result = swift_getWitnessTable(byte_100E404E8, &type metadata for Role.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDAC8);
  }
  return result;
}

unint64_t sub_1004EA7E8()
{
  unint64_t result;

  result = qword_1010FDAD0;
  if (!qword_1010FDAD0)
  {
    result = swift_getWitnessTable(byte_100E40408, &type metadata for RolesResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDAD0);
  }
  return result;
}

unint64_t sub_1004EA830()
{
  unint64_t result;

  result = qword_1010FDAD8;
  if (!qword_1010FDAD8)
  {
    result = swift_getWitnessTable(byte_100E40430, &type metadata for RolesResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDAD8);
  }
  return result;
}

_QWORD *sub_1004EA878(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[7];
    v13 = a3[8];
    v14 = (_QWORD *)((char *)a1 + v12);
    v15 = (_QWORD *)((char *)a2 + v12);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = (_QWORD *)((char *)a1 + v13);
    v18 = (_QWORD *)((char *)a2 + v13);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v17[2] = v18[2];
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v19);
  }
  return a1;
}

uint64_t sub_1004EA968(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[6];
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
}

uint64_t sub_1004EA9EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[7];
  v12 = a3[8];
  v13 = (_QWORD *)(a1 + v11);
  v14 = (_QWORD *)(a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (_QWORD *)(a1 + v12);
  v17 = (_QWORD *)(a2 + v12);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v16[2] = v17[2];
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t sub_1004EAAB0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[7];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v14 = v13[1];
  v15 = v12[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  *v17 = *v18;
  v19 = v18[1];
  v20 = *(_QWORD *)(a1 + v16 + 8);
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v17[2] = v18[2];
  return a1;
}

uint64_t sub_1004EABA0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  return a1;
}

uint64_t sub_1004EAC50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  v16 = v12[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease(v16);
  v17 = a3[8];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = v19[1];
  v21 = *(_QWORD *)(a1 + v17 + 8);
  *v18 = *v19;
  v18[1] = v20;
  swift_bridgeObjectRelease(v21);
  v18[2] = v19[2];
  return a1;
}

uint64_t sub_1004EAD1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004EAD28);
}

uint64_t sub_1004EAD28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v15;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  v15 = v14 - 1;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t sub_1004EADE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004EADEC);
}

uint64_t sub_1004EADEC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  return result;
}

uint64_t type metadata accessor for AccessoryFirmwareUpdateStateInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FDB38;
  if (!qword_1010FDB38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryFirmwareUpdateStateInfo);
  return result;
}

uint64_t sub_1004EAED0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_100E40768;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = &unk_100E40780;
      v5[4] = &unk_100E40798;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1004EAF70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1004EC24C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1004EAFCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1004EC24C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1004EB018(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  void *object;

  _StringGuts.grow(_:)(56);
  v4._object = (void *)0x8000000100ED8D30;
  v4._countAndFlagsBits = 0xD000000000000029;
  String.append(_:)(v4);
  swift_bridgeObjectRetain(a2);
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(a2);
  v6._countAndFlagsBits = 0x6F43726F72726520;
  v6._object = (void *)0xEB00000000206564;
  String.append(_:)(v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  return 0;
}

uint64_t sub_1004EB100(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v17 = a4;
  v8 = sub_10001A9A8(&qword_1010FDBB0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_1004EC208();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError.CodingKeys, &type metadata for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError.CodingKeys, v14, v12, v13);
  v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v19, v8);
  if (!v4)
  {
    v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v18, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1004EB228()
{
  _BYTE *v0;

  if (*v0)
    return 0x646F43726F727265;
  else
    return 0x6D6F44726F727265;
}

uint64_t sub_1004EB270@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1004EBF64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004EB294(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004EC208();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004EB2BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004EC208();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004EB2E4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1004EC078(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1004EB310(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1004EB100(a1, *v1, v1[1], v1[2]);
}

BOOL sub_1004EB32C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  _BOOL8 result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a2[1];
  v8 = a2[2];
  if (v4 == *a2 && v5 == v7)
    return v6 == v8;
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v7, 0);
  result = 0;
  if ((v10 & 1) != 0)
    return v6 == v8;
  return result;
}

Swift::Int sub_1004EB384()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)(v5);
  String.hash(into:)(v5, v1, v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1004EB3E4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v4;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  String.hash(into:)(a1, v2, v3);
  Hasher._combine(_:)(v4);
}

Swift::Int sub_1004EB418()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)(v5);
  String.hash(into:)(v5, v1, v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_1004EB474()
{
  uint64_t v0;

  return sub_1004EB018(*(_QWORD *)v0, *(void **)(v0 + 8));
}

uint64_t sub_1004EB480()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  int *updated;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  Swift::String v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  __int128 v20;

  *(_QWORD *)&v18 = 0;
  *((_QWORD *)&v18 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(117);
  v20 = v18;
  v1._countAndFlagsBits = 0xD00000000000002CLL;
  v1._object = (void *)0x8000000100ED8CE0;
  String.append(_:)(v1);
  v2 = type metadata accessor for UUID(0);
  v3 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x657461647075202CLL;
  v5._object = (void *)0xEE00206574617453;
  String.append(_:)(v5);
  updated = (int *)type metadata accessor for AccessoryFirmwareUpdateStateInfo(0);
  LOBYTE(v18) = *(_BYTE *)(v0 + updated[5]);
  _print_unlocked<A, B>(_:_:)(&v18, &v20, &type metadata for AccessoryFirmwareUpdateState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v7._countAndFlagsBits = 0x6470557473616C20;
  v7._object = (void *)0xEC00000020657461;
  String.append(_:)(v7);
  v8 = type metadata accessor for Date(0);
  v9 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v8, v9);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._object = (void *)0x8000000100ED8D10;
  v11._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v11);
  v18 = *(_OWORD *)(v0 + updated[7]);
  v12 = sub_10001A9A8(&qword_1010F6350);
  _print_unlocked<A, B>(_:_:)(&v18, &v20, v12, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v13._countAndFlagsBits = 0x4565746164707520;
  v13._object = (void *)0xED000020726F7272;
  String.append(_:)(v13);
  v14 = (__int128 *)(v0 + updated[8]);
  v15 = *((_QWORD *)v14 + 2);
  v18 = *v14;
  v19 = v15;
  v16 = sub_10001A9A8(&qword_1010FDB88);
  _print_unlocked<A, B>(_:_:)(&v18, &v20, v16, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  return v20;
}

void sub_1004EB6D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int *updated;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  Swift::UInt v13;
  uint64_t v14;

  v3 = type metadata accessor for UUID(0);
  v4 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  updated = (int *)type metadata accessor for AccessoryFirmwareUpdateStateInfo(0);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + updated[5]));
  v6 = type metadata accessor for Date(0);
  v7 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v6, v7);
  v8 = (uint64_t *)(v1 + updated[7]);
  v9 = v8[1];
  if (v9)
  {
    v10 = *v8;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v9);
    String.hash(into:)(a1, v10, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v11 = (uint64_t *)(v1 + updated[8]);
  v12 = v11[1];
  if (v12)
  {
    v13 = v11[2];
    v14 = *v11;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v12);
    String.hash(into:)(a1, v14, v12);
    Hasher._combine(_:)(v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_1004EB854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *updated;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  Swift::UInt v11;
  uint64_t v12;
  _QWORD v14[9];

  Hasher.init(_seed:)(v14);
  v1 = type metadata accessor for UUID(0);
  v2 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v14, v1, v2);
  updated = (int *)type metadata accessor for AccessoryFirmwareUpdateStateInfo(0);
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + updated[5]));
  v4 = type metadata accessor for Date(0);
  v5 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v14, v4, v5);
  v6 = (uint64_t *)(v0 + updated[7]);
  v7 = v6[1];
  if (v7)
  {
    v8 = *v6;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v7);
    String.hash(into:)(v14, v8, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v9 = (uint64_t *)(v0 + updated[8]);
  v10 = v9[1];
  if (v10)
  {
    v11 = v9[2];
    v12 = *v9;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v10);
    String.hash(into:)(v14, v12, v10);
    Hasher._combine(_:)(v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int sub_1004EB9E8(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  Swift::UInt v13;
  uint64_t v14;
  _QWORD v16[9];

  Hasher.init(_seed:)(v16);
  v4 = type metadata accessor for UUID(0);
  v5 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v16, v4, v5);
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + a2[5]));
  v6 = type metadata accessor for Date(0);
  v7 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v16, v6, v7);
  v8 = (uint64_t *)(v2 + a2[7]);
  v9 = v8[1];
  if (v9)
  {
    v10 = *v8;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v9);
    String.hash(into:)(v16, v10, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v11 = (uint64_t *)(v2 + a2[8]);
  v12 = v11[1];
  if (v12)
  {
    v13 = v11[2];
    v14 = *v11;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v12);
    String.hash(into:)(v16, v14, v12);
    Hasher._combine(_:)(v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_1004EBB70()
{
  return sub_100006204(&qword_1010FDB80, type metadata accessor for AccessoryFirmwareUpdateStateInfo, (uint64_t)&unk_100E407B0);
}

uint64_t sub_1004EBB9C(uint64_t a1, uint64_t a2)
{
  uint64_t updated;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;

  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  updated = type metadata accessor for AccessoryFirmwareUpdateStateInfo(0);
  if (*(unsigned __int8 *)(a1 + *(int *)(updated + 20)) != *(unsigned __int8 *)(a2 + *(int *)(updated + 20)))
    return 0;
  v5 = updated;
  if ((static Date.== infix(_:_:)(a1 + *(int *)(updated + 24), a2 + *(int *)(updated + 24)) & 1) == 0)
    return 0;
  v6 = *(int *)(v5 + 28);
  v7 = (_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  v9 = (_QWORD *)(a2 + v6);
  v10 = v9[1];
  if (!v8)
  {
    if (v10)
      return 0;
    goto LABEL_13;
  }
  if (!v10)
    return 0;
  v11 = *v7 == *v9 && v8 == v10;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(*v7, v8, *v9, v10, 0), result = 0, (v12 & 1) != 0))
  {
LABEL_13:
    v14 = *(int *)(v5 + 32);
    v15 = (_QWORD *)(a1 + v14);
    v16 = *(_QWORD *)(a1 + v14 + 8);
    v17 = (_QWORD *)(a2 + v14);
    v18 = v17[1];
    if (v16)
    {
      if (v18)
      {
        v19 = v15[2];
        v20 = v17[2];
        v21 = *v15 == *v17 && v16 == v18;
        if ((v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v15, v16, *v17, v18, 0) & 1) != 0) && v19 == v20)
          return 1;
      }
    }
    else if (!v18)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

_QWORD *sub_1004EBCAC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError()
{
  return &type metadata for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError;
}

uint64_t storeEnumTagSinglePayload for AccessoryFirmwareUpdateState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1004EBE54 + 4 * byte_100E40725[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1004EBE88 + 4 * byte_100E40720[v4]))();
}

uint64_t sub_1004EBE88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004EBE90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004EBE98);
  return result;
}

uint64_t sub_1004EBEA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004EBEACLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1004EBEB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004EBEB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryFirmwareUpdateState()
{
  return &type metadata for AccessoryFirmwareUpdateState;
}

unint64_t sub_1004EBED8()
{
  unint64_t result;

  result = qword_1010FDB90;
  if (!qword_1010FDB90)
  {
    result = swift_getWitnessTable(byte_100E40948, &type metadata for AccessoryFirmwareUpdateState);
    atomic_store(result, (unint64_t *)&qword_1010FDB90);
  }
  return result;
}

unint64_t sub_1004EBF20()
{
  unint64_t result;

  result = qword_1010FDB98;
  if (!qword_1010FDB98)
  {
    result = swift_getWitnessTable(byte_100E409D8, &type metadata for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError);
    atomic_store(result, (unint64_t *)&qword_1010FDB98);
  }
  return result;
}

uint64_t sub_1004EBF64(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6D6F44726F727265 && a2 == 0xEB000000006E6961)
  {
    v5 = 0xEB000000006E6961;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D6F44726F727265, 0xEB000000006E6961, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x646F43726F727265 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x646F43726F727265, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1004EC078(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v3 = sub_10001A9A8(&qword_1010FDBA0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_1004EC208();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError.CodingKeys, &type metadata for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v14 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
    v13 = 1;
    swift_bridgeObjectRetain(v11);
    KeyedDecodingContainer.decode(_:forKey:)(&v13, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
  }
  return v8;
}

unint64_t sub_1004EC208()
{
  unint64_t result;

  result = qword_1010FDBA8;
  if (!qword_1010FDBA8)
  {
    result = swift_getWitnessTable(asc_100E40B14, &type metadata for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDBA8);
  }
  return result;
}

unint64_t sub_1004EC24C()
{
  unint64_t result;

  result = qword_1010FDBB8;
  if (!qword_1010FDBB8)
  {
    result = swift_getWitnessTable(aQ_21, &type metadata for AccessoryFirmwareUpdateState);
    atomic_store(result, (unint64_t *)&qword_1010FDBB8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1004EC2DC + 4 * byte_100E4072F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1004EC310 + 4 * byte_100E4072A[v4]))();
}

uint64_t sub_1004EC310(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004EC318(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004EC320);
  return result;
}

uint64_t sub_1004EC32C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004EC334);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1004EC338(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004EC340(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError.CodingKeys()
{
  return &type metadata for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError.CodingKeys;
}

unint64_t sub_1004EC360()
{
  unint64_t result;

  result = qword_1010FDBC0;
  if (!qword_1010FDBC0)
  {
    result = swift_getWitnessTable(byte_100E40AEC, &type metadata for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDBC0);
  }
  return result;
}

unint64_t sub_1004EC3A8()
{
  unint64_t result;

  result = qword_1010FDBC8;
  if (!qword_1010FDBC8)
  {
    result = swift_getWitnessTable(byte_100E40A5C, &type metadata for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDBC8);
  }
  return result;
}

unint64_t sub_1004EC3F0()
{
  unint64_t result;

  result = qword_1010FDBD0;
  if (!qword_1010FDBD0)
  {
    result = swift_getWitnessTable("ݫ#", &type metadata for AccessoryFirmwareUpdateStateInfo.AccessoryFirmwareUpdateError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDBD0);
  }
  return result;
}

uint64_t sub_1004EC434()
{
  return URL.init(fileURLWithPath:)(0x642F2F3A656C6966, 0xEF6C6C756E2F7665);
}

uint64_t sub_1004EC458@<X0>(uint64_t a1@<X8>)
{
  return sub_1004EC6F8(&qword_1010E99F8, (uint64_t)qword_1011B6A48, (uint64_t)sub_1001D7F04, a1);
}

uint64_t sub_1004EC474@<X0>(uint64_t a1@<X8>)
{
  return sub_1004EC6F8(&qword_1010E9A10, (uint64_t)qword_1011B6A90, (uint64_t)sub_1001EB610, a1);
}

uint64_t sub_1004EC490@<X0>(uint64_t a1@<X8>)
{
  return sub_1004EC6F8(&qword_1010E9A98, (uint64_t)qword_1011B6C00, (uint64_t)sub_1001FFA50, a1);
}

uint64_t sub_1004EC4AC@<X0>(uint64_t a1@<X8>)
{
  return sub_1004EC6F8(&qword_1010E9B90, (uint64_t)qword_1011B6DE0, (uint64_t)sub_10036E07C, a1);
}

uint64_t sub_1004EC4C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1004EC6F8(&qword_1010E9C00, (uint64_t)qword_1011B6F00, (uint64_t)sub_10043C1BC, a1);
}

uint64_t sub_1004EC4E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1010E9C40 != -1)
    swift_once(&qword_1010E9C40, sub_1004EF95C);
  v2 = type metadata accessor for URL(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B6F90);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_1004EC554@<X0>(uint64_t a1@<X8>)
{
  return sub_1004EC6F8(&qword_1010E9D40, (uint64_t)qword_1011B7200, (uint64_t)sub_100601994, a1);
}

uint64_t sub_1004EC570@<X0>(uint64_t a1@<X8>)
{
  return sub_1004EC6F8(&qword_1010E9FD8, (uint64_t)qword_1011B7878, (uint64_t)sub_1008AB7A8, a1);
}

uint64_t sub_1004EC58C@<X0>(uint64_t a1@<X8>)
{
  return sub_1004EC6F8(&qword_1010E9FE0, (uint64_t)qword_1011B7890, (uint64_t)sub_1008AC5B8, a1);
}

uint64_t sub_1004EC5A8@<X0>(uint64_t a1@<X8>)
{
  return sub_1004EC6F8(&qword_1010EA0C8, (uint64_t)qword_1011B7A80, (uint64_t)sub_1009997C8, a1);
}

uint64_t sub_1004EC5C4@<X0>(uint64_t a1@<X8>)
{
  return sub_1004EC6F8(&qword_1010EA0D8, (uint64_t)qword_1011B7AA8, (uint64_t)sub_1009A3098, a1);
}

uint64_t sub_1004EC5E0@<X0>(uint64_t a1@<X8>)
{
  return sub_1004EC6F8(&qword_1010EA118, (uint64_t)qword_1011B7B10, (uint64_t)sub_100A2ECA4, a1);
}

uint64_t sub_1004EC5FC@<X0>(uint64_t a1@<X8>)
{
  return sub_1004EC6F8(&qword_1010EA170, (uint64_t)qword_1011B7BC0, (uint64_t)sub_100AB843C, a1);
}

uint64_t sub_1004EC618@<X0>(uint64_t a1@<X8>)
{
  return sub_1004EC6F8(&qword_1010EA1B8, (uint64_t)qword_1011B7C40, (uint64_t)sub_100AFC4C0, a1);
}

uint64_t sub_1004EC634@<X0>(uint64_t a1@<X8>)
{
  return sub_1004EC6F8(&qword_1010EA1C0, (uint64_t)qword_1011B7C58, (uint64_t)sub_100B00710, a1);
}

uint64_t sub_1004EC650@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1010EA3B8 != -1)
    swift_once(&qword_1010EA3B8, sub_100BE94A8);
  v2 = type metadata accessor for URL(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7EB0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_1004EC6C0@<X0>(uint64_t a1@<X8>)
{
  return sub_1004EC6F8(&qword_1010EA5B8, (uint64_t)qword_1011B8448, (uint64_t)sub_100D3AD18, a1);
}

uint64_t sub_1004EC6DC@<X0>(uint64_t a1@<X8>)
{
  return sub_1004EC6F8(&qword_1010EA5E8, (uint64_t)qword_1011B8498, (uint64_t)sub_100D784F0, a1);
}

uint64_t sub_1004EC6F8@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for URL(0);
  v7 = sub_10001A9E8(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

uint64_t sub_1004EC764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6F78);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B6F78);
  if (qword_1010E9E38 != -1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7440);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1004EC7F4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v1[3] = *v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004EC858, v0, 0);
}

uint64_t sub_1004EC858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v10;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for TaskPriority(0);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56);
  v10 = *(_OWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 16);
  v3(v1, 1, 1, v2);
  v5 = swift_allocObject(&unk_10107B788, 48, 7);
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_OWORD *)(v5 + 32) = v10;
  swift_retain();
  sub_100028774(v1, (uint64_t)&unk_1010FDD20, v5);
  swift_release();
  sub_100004048(v1, &qword_1010F46C0);
  v3(v1, 1, 1, v2);
  v7 = sub_100006C64(&qword_1010FDCD0, v6, (uint64_t (*)(uint64_t))type metadata accessor for ObservationPruneSchedulerService, (uint64_t)&unk_100E40BF0);
  v8 = (_QWORD *)swift_allocObject(&unk_10107B7B0, 40, 7);
  v8[2] = v10;
  v8[3] = v7;
  v8[4] = v10;
  swift_retain_n(v4, 2);
  sub_100691AC0(v1, (uint64_t)&unk_1010FDD30, (uint64_t)v8);
  swift_release();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004EC9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4[15] = a4;
  v5 = sub_10001A9A8(&qword_1010FDD38);
  v4[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EBAC8);
  v4[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FinderStateInfo(0);
  v4[18] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[19] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[20] = swift_task_alloc(v9);
  v4[21] = swift_task_alloc(v9);
  v10 = sub_10001A9A8(&qword_1010EBAD0);
  v4[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010EBAD8);
  v4[23] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[24] = v12;
  v4[25] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010EBAE0);
  v4[26] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[27] = v14;
  v4[28] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004ECAD8, 0, 0);
}

uint64_t sub_1004ECAD8()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBAE8 + dword_1010EBAE8);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBAEC);
    *(_QWORD *)(v0 + 232) = v2;
    *v2 = v0;
    v2[1] = sub_1004ECBC4;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004ECBC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004ECC20, 0, 0);
}

uint64_t sub_1004ECC20()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 240))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_1011011C4);
    *(_QWORD *)(v0 + 248) = v2;
    *v2 = v0;
    v2[1] = sub_1004ECDA0;
    return sub_10061306C(*(_QWORD *)(v0 + 200));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9C38 != -1)
      swift_once(&qword_1010E9C38, sub_1004EC764);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6F78);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing FinderStateObserver service.", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = *(_QWORD *)(v0 + 200);
    v11 = *(_QWORD *)(v0 + 168);
    v10 = *(_QWORD *)(v0 + 176);
    v12 = *(_QWORD *)(v0 + 160);
    v14 = *(_QWORD *)(v0 + 128);
    v13 = *(_QWORD *)(v0 + 136);
    swift_task_dealloc(*(_QWORD *)(v0 + 224));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1004ECDA0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 248));
  return swift_task_switch(sub_1004ECDF4, 0, 0);
}

uint64_t sub_1004ECDF4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[24];
  v1 = v0[25];
  v3 = v0[23];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[32] = v4;
  *v4 = v0;
  v4[1] = sub_1004ECE80;
  return AsyncStream.Iterator.next(isolation:)(v0[22], 0, 0, v0[26]);
}

uint64_t sub_1004ECE80()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  return swift_task_switch(sub_1004ECED4, 0, 0);
}

uint64_t sub_1004ECED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  _QWORD *v21;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = sub_10001A9A8(&qword_1010EBAF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
    swift_release();
    v3 = *(_QWORD *)(v0 + 200);
    v5 = *(_QWORD *)(v0 + 168);
    v4 = *(_QWORD *)(v0 + 176);
    v6 = *(_QWORD *)(v0 + 160);
    v8 = *(_QWORD *)(v0 + 128);
    v7 = *(_QWORD *)(v0 + 136);
    swift_task_dealloc(*(_QWORD *)(v0 + 224));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v10 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 136);
  swift_release();
  v14 = v1 + *(int *)(v2 + 48);
  v15 = sub_10001A9A8(&qword_1010EBAF8);
  sub_1000306A0(v14 + *(int *)(v15 + 48), v10);
  sub_1004EF38C(v14, v13);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11);
  v17 = *(unsigned __int8 **)(v0 + 168);
  if (v16 == 1)
  {
    v18 = *(_QWORD *)(v0 + 136);
    sub_1000306E4(*(_QWORD *)(v0 + 168));
    sub_100004048(v18, &qword_1010EBAC8);
  }
  else
  {
    v19 = *(unsigned __int8 **)(v0 + 160);
    sub_1000306A0(*(_QWORD *)(v0 + 136), (uint64_t)v19);
    if (*v19 != *v17)
      return swift_task_switch(sub_1004ED0D4, *(_QWORD *)(v0 + 120), 0);
    v20 = *(_QWORD *)(v0 + 168);
    sub_1000306E4(*(_QWORD *)(v0 + 160));
    sub_1000306E4(v20);
  }
  v21 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 256) = v21;
  *v21 = v0;
  v21[1] = sub_1004ECE80;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 176), 0, 0, *(_QWORD *)(v0 + 208));
}

uint64_t sub_1004ED0D4()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 264) = *(_QWORD *)(*(_QWORD *)(v0 + 120) + 128);
  swift_retain();
  return swift_task_switch(sub_1004ED118, 0, 0);
}

uint64_t sub_1004ED118()
{
  uint64_t *v0;
  uint64_t **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t (*v7)(uint64_t);

  if (v0[33])
  {
    v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria()
                                         + async function pointer to dispatch thunk of XPCActivity.updateCriteria());
    v1 = (uint64_t **)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria()
                                      + 1));
    v0[34] = (uint64_t)v1;
    *v1 = v0;
    v1[1] = (uint64_t *)sub_1004ED21C;
    return v7(v0[16]);
  }
  else
  {
    v3 = v0[21];
    v4 = v0[16];
    sub_1000306E4(v0[20]);
    sub_1000306E4(v3);
    v5 = type metadata accessor for XPCActivity.State(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
    sub_100004048(v0[16], &qword_1010FDD38);
    v6 = (uint64_t **)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    v0[32] = (uint64_t)v6;
    *v6 = v0;
    v6[1] = (uint64_t *)sub_1004ECE80;
    return AsyncStream.Iterator.next(isolation:)(v0[22], 0, 0, v0[26]);
  }
}

uint64_t sub_1004ED21C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 272));
  swift_release();
  return swift_task_switch(sub_1004ED278, 0, 0);
}

uint64_t sub_1004ED278()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;

  v1 = v0[21];
  v2 = v0[16];
  sub_1000306E4(v0[20]);
  sub_1000306E4(v1);
  v3 = type metadata accessor for XPCActivity.State(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 0, 1, v3);
  sub_100004048(v0[16], &qword_1010FDD38);
  v4 = (uint64_t **)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[32] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = (uint64_t *)sub_1004ECE80;
  return AsyncStream.Iterator.next(isolation:)(v0[22], 0, 0, v0[26]);
}

uint64_t sub_1004ED320()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1010FDC0C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  return sub_1004ED368();
}

uint64_t sub_1004ED368()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1[15] = v0;
  v1[16] = *v0;
  v2 = type metadata accessor for DispatchQoS(0);
  v1[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004ED3C8, v0, 0);
}

uint64_t sub_1004ED3C8()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 144) = v2;
    *v2 = v0;
    v2[1] = sub_1004ED4B4;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004ED4B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004ED514, v3, 0);
}

uint64_t sub_1004ED514()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 152);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 128);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = type metadata accessor for XPCActivity(0);
    static DispatchQoS.background.getter(v4);
    v5 = swift_allocObject(&unk_10107B738, 24, 7);
    *(_QWORD *)(v5 + 16) = v3;
    v6 = swift_allocObject(&unk_10107B760, 32, 7);
    *(_QWORD *)(v6 + 16) = v2;
    *(_QWORD *)(v6 + 24) = v3;
    v7 = async function pointer to XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)[1];
    swift_retain();
    v8 = (_QWORD *)swift_task_alloc(v7);
    *(_QWORD *)(v0 + 160) = v8;
    *v8 = v0;
    v8[1] = sub_1004ED6E0;
    return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)(0xD00000000000003ALL, 0x8000000100ED8DA0, *(_QWORD *)(v0 + 136), &unk_1010FDCE0, v5, &unk_1010FDCF0, v6);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9C38 != -1)
      swift_once(&qword_1010E9C38, sub_1004EC764);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B6F78);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Missing ObservationStoreService.", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1004ED6E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004ED740, v3, 0);
}

uint64_t sub_1004ED740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 152));
  v3 = *(_QWORD *)(v2 + 128);
  *(_QWORD *)(v2 + 128) = v1;
  swift_release(v3);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004ED78C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v2[16] = a1;
  v2[17] = a2;
  v3 = type metadata accessor for XPCActivity.Criteria.Options(0);
  v2[18] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[19] = v4;
  v2[20] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for XPCActivity.Priority(0);
  v2[21] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[22] = v6;
  v2[23] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010FDCF8);
  v2[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for XPCActivity.Criteria(0);
  v2[25] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[26] = v9;
  v2[27] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010EBAC8);
  v2[28] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[29] = swift_task_alloc(v11);
  v2[30] = swift_task_alloc(v11);
  return swift_task_switch(sub_1004ED898, 0, 0);
}

uint64_t sub_1004ED898()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBAE8 + dword_1010EBAE8);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBAEC);
    *(_QWORD *)(v0 + 248) = v2;
    *v2 = v0;
    v2[1] = sub_1004ED984;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004ED984(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  *(_QWORD *)(*(_QWORD *)v1 + 256) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004ED9E0, 0, 0);
}

uint64_t sub_1004ED9E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 256);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 256);
    swift_retain();
    return swift_task_switch(sub_1004EDBB4, v2, 0);
  }
  else
  {
    if (qword_1010E9C38 != -1)
      swift_once(&qword_1010E9C38, sub_1004EC764);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6F78);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc(14, -1);
      *(_DWORD *)v8 = 67109376;
      *(_DWORD *)(v0 + 288) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 292, v8 + 4, v8 + 8);
      *(_WORD *)(v8 + 8) = 1024;
      *(_DWORD *)(v0 + 292) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 292, v0 + 296, v8 + 10, v8 + 14);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "finderState:%{BOOL}d isLeechScannerEnabled:%{BOOL}d, prune activity unregistered.", (uint8_t *)v8, 0xEu);
      swift_slowDealloc(v8, -1, -1);
    }

    swift_release();
    v9 = *(_QWORD *)(v0 + 232);
    v10 = *(_QWORD *)(v0 + 240);
    v11 = *(_QWORD *)(v0 + 216);
    v12 = *(_QWORD *)(v0 + 192);
    v13 = *(_QWORD *)(v0 + 184);
    v14 = *(_QWORD *)(v0 + 160);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 208) + 56))(*(_QWORD *)(v0 + 128), 1, 1, *(_QWORD *)(v0 + 200));
    swift_task_dealloc(v10);
    swift_task_dealloc(v9);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1004EDBB4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[32];
  v2 = sub_100006C64((unint64_t *)&qword_1010EBEA8, 255, type metadata accessor for FinderStateObserver, (uint64_t)aE_59);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[33] = v3;
  *v3 = v0;
  v3[1] = sub_1004EDC60;
  return withCheckedContinuation<A>(isolation:function:_:)(v0[30], v0[32], v2, 0x6E4965746174735FLL, 0xEC00000029286F66, sub_100033604, v1, v0[28]);
}

uint64_t sub_1004EDC60()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 264));
  swift_release();
  return swift_task_switch(sub_1004EDCBC, 0, 0);
}

uint64_t sub_1004EDCBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = type metadata accessor for FinderStateInfo(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v1, &qword_1010EBAC8);
    *(_BYTE *)(v0 + 297) = 0;
    v3 = *(_QWORD *)(v0 + 256);
    swift_retain();
    return swift_task_switch(sub_1004EDE3C, v3, 0);
  }
  else
  {
    v5 = (_QWORD *)swift_task_alloc(dword_101103D4C);
    *(_QWORD *)(v0 + 272) = v5;
    *v5 = v0;
    v5[1] = sub_1004EDD70;
    return sub_10069F77C();
  }
}

uint64_t sub_1004EDD70(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 272));
  if (v1)
  {
    swift_errorRelease(v1);
    v5 = sub_1004EE2C0;
  }
  else
  {
    *(_BYTE *)(v4 + 296) = a1 & 1;
    v5 = sub_1004EDDEC;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1004EDDEC()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000306E4(*(_QWORD *)(v0 + 240));
  *(_BYTE *)(v0 + 297) = *(_BYTE *)(v0 + 296);
  v1 = *(_QWORD *)(v0 + 256);
  swift_retain();
  return swift_task_switch(sub_1004EDE3C, v1, 0);
}

uint64_t sub_1004EDE3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[32];
  v2 = sub_100006C64((unint64_t *)&qword_1010EBEA8, 255, type metadata accessor for FinderStateObserver, (uint64_t)aE_59);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[35] = v3;
  *v3 = v0;
  v3[1] = sub_1004EDEE4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0[29], v0[32], v2, 0x6E4965746174735FLL, 0xEC00000029286F66, sub_100033604, v1, v0[28]);
}

uint64_t sub_1004EDEE4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 280));
  swift_release();
  return swift_task_switch(sub_1004EDF44, 0, 0);
}

uint64_t sub_1004EDF44()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(unsigned __int8 **)(v0 + 232);
  v2 = type metadata accessor for FinderStateInfo(0);
  v3 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  v4 = *(unsigned __int8 *)(v0 + 297);
  if (v3 != 1)
  {
    v11 = *v1;
    sub_1000306E4((uint64_t)v1);
    if (((v11 | v4) & 1) == 0)
      goto LABEL_3;
LABEL_9:
    v12 = *(_QWORD *)(v0 + 200);
    v13 = *(_QWORD *)(v0 + 208);
    v14 = *(_QWORD *)(v0 + 192);
    sub_10000F9B8(*(_QWORD *)(v0 + 136), v14, &qword_1010FDCF8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12) == 1)
    {
      v15 = *(_QWORD *)(v0 + 184);
      v16 = *(_QWORD *)(v0 + 168);
      v17 = *(_QWORD *)(v0 + 176);
      v19 = *(_QWORD *)(v0 + 152);
      v18 = *(_QWORD *)(v0 + 160);
      v20 = *(_QWORD *)(v0 + 144);
      sub_100004048(*(_QWORD *)(v0 + 192), &qword_1010FDCF8);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 104))(v15, enum case for XPCActivity.Priority.maintenance(_:), v16);
      v21 = sub_10001A9A8(&qword_1010FDD00);
      v22 = swift_allocObject(v21, ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(_QWORD *)(v19 + 72), *(unsigned __int8 *)(v19 + 80) | 7);
      *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
      static XPCActivity.Criteria.Options.requiresClassC.getter();
      *(_QWORD *)(v0 + 120) = v22;
      v23 = sub_100006C64(&qword_1010EBEB8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options, (uint64_t)&protocol conformance descriptor for XPCActivity.Criteria.Options);
      v24 = sub_10001A9A8(&qword_1010FDD08);
      v25 = sub_1004EF218();
      dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 120, v24, v25, v20, v23);
      XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)(v15, 1, 0, 9000, 18000, v18);
      swift_release();
    }
    else
    {
      v27 = *(_QWORD *)(v0 + 208);
      v26 = *(_QWORD *)(v0 + 216);
      v29 = *(_QWORD *)(v0 + 192);
      v28 = *(_QWORD *)(v0 + 200);
      v30 = *(_QWORD *)(v0 + 128);
      swift_release();
      v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32);
      v31(v26, v29, v28);
      v31(v30, v26, v28);
    }
    v10 = 0;
    goto LABEL_13;
  }
  sub_100004048((uint64_t)v1, &qword_1010EBAC8);
  if (v4)
    goto LABEL_9;
LABEL_3:
  if (qword_1010E9C38 != -1)
    swift_once(&qword_1010E9C38, sub_1004EC764);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10001A9E8(v5, (uint64_t)qword_1011B6F78);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(14, -1);
    *(_DWORD *)v9 = 67109376;
    *(_DWORD *)(v0 + 288) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 292, v9 + 4, v9 + 8);
    *(_WORD *)(v9 + 8) = 1024;
    *(_DWORD *)(v0 + 292) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 292, v0 + 296, v9 + 10, v9 + 14);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "finderState:%{BOOL}d isLeechScannerEnabled:%{BOOL}d, prune activity unregistered.", (uint8_t *)v9, 0xEu);
    swift_slowDealloc(v9, -1, -1);
  }

  swift_release();
  v10 = 1;
LABEL_13:
  v32 = *(_QWORD *)(v0 + 232);
  v33 = *(_QWORD *)(v0 + 240);
  v34 = *(_QWORD *)(v0 + 216);
  v35 = *(_QWORD *)(v0 + 192);
  v36 = *(_QWORD *)(v0 + 184);
  v37 = *(_QWORD *)(v0 + 160);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 208) + 56))(*(_QWORD *)(v0 + 128), v10, 1, *(_QWORD *)(v0 + 200));
  swift_task_dealloc(v33);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004EE2C0()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000306E4(*(_QWORD *)(v0 + 240));
  *(_BYTE *)(v0 + 297) = 0;
  v1 = *(_QWORD *)(v0 + 256);
  swift_retain();
  return swift_task_switch(sub_1004EDE3C, v1, 0);
}

uint64_t sub_1004EE30C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  v4 = type metadata accessor for XPCActivity.State(0);
  v3[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[10] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v6);
  v3[12] = swift_task_alloc(v6);
  return swift_task_switch(sub_1004EE380, 0, 0);
}

uint64_t sub_1004EE380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;

  if (qword_1010E9C38 != -1)
    swift_once(&qword_1010E9C38, sub_1004EC764);
  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 104) = v5;
  *(_QWORD *)(v0 + 112) = sub_10001A9E8(v5, (uint64_t)qword_1011B6F78);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7 = v6(v1, v4, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 80);
  if (v10)
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = v6;
    v33 = swift_slowAlloc(32, -1);
    v15 = v33;
    *(_DWORD *)v14 = 136315138;
    v16 = sub_100006C64(&qword_1010EBE98, 255, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.State, (uint64_t)&protocol conformance descriptor for XPCActivity.State);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
    *(_QWORD *)(v0 + 40) = sub_100016940(v17, v18, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Publisher prune activity state: %s.", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    v20 = v15;
    v6 = v32;
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72));
  }

  v22 = *(_QWORD *)(v0 + 80);
  v21 = *(_QWORD *)(v0 + 88);
  v23 = *(_QWORD *)(v0 + 72);
  v6(v21, *(_QWORD *)(v0 + 56), v23);
  v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 88))(v21, v23);
  if (v24 == enum case for XPCActivity.State.checkIn(_:) || v24 == enum case for XPCActivity.State.wait(_:))
  {
LABEL_18:
    v31 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (v24 != enum case for XPCActivity.State.run(_:))
  {
    if (v24 == enum case for XPCActivity.State.defer(_:))
    {
      v27 = type metadata accessor for XPCActivity(0);
      v28 = sub_100006C64(&qword_1010EBE90, 255, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
      v29 = dispatch thunk of Actor.unownedExecutor.getter(v27, v28);
      return swift_task_switch(sub_1004EE748, v29, v30);
    }
    if (v24 != enum case for XPCActivity.State.continue(_:)
      && v24 != enum case for XPCActivity.State.done(_:)
      && v24 != enum case for XPCActivity.State.invalidated(_:))
    {
      v19(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    }
    goto LABEL_18;
  }
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v25 = *(_QWORD *)(v0 + 64);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = sub_100C1B8E4(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1004EE7BC, v25, 0);
}

uint64_t sub_1004EE748()
{
  dispatch thunk of XPCActivity.defer()();
  return swift_task_switch(sub_1004EE784, 0, 0);
}

uint64_t sub_1004EE784()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004EE7BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t (*v4)();

  v1 = *(_QWORD *)(v0 + 120);
  v2 = sub_100C681A4(*(_QWORD *)(v0 + 128));
  *(_QWORD *)(v0 + 136) = v1;
  *(_QWORD *)(v0 + 144) = v2;
  *(_BYTE *)(v0 + 184) = v3;
  if (v1)
  {
    v4 = sub_1004EEADC;
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = sub_1004EE824;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1004EE824()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  char v4;
  uint64_t v5;
  uint8_t *v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;

  if (qword_1010E9E38 != -1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v1 = sub_10001A9E8(*(_QWORD *)(v0 + 104), (uint64_t)qword_1011B7440);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_BYTE *)(v0 + 184);
    v5 = *(_QWORD *)(v0 + 144);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = v6;
    *(_DWORD *)v6 = 134217984;
    if ((v4 & 1) != 0)
      v8 = 0;
    else
      v8 = v5;
    *(_QWORD *)(v0 + 32) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Scheduled observation purge removed %ld observations.", v7, 0xCu);
    swift_slowDealloc(v7, -1, -1);
  }

  v9 = (_QWORD *)swift_task_alloc(dword_10111BB5C);
  *(_QWORD *)(v0 + 152) = v9;
  *v9 = v0;
  v9[1] = sub_1004EE964;
  return sub_100C644B0();
}

uint64_t sub_1004EE964()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*v1 + 152);
  v3 = *v1;
  *(_QWORD *)(v3 + 160) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1004EECB0, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(dword_10111B8D4);
  *(_QWORD *)(v3 + 168) = v5;
  *v5 = v3;
  v5[1] = sub_1004EE9F0;
  return sub_100C682E0();
}

uint64_t sub_1004EE9F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v3 = sub_1004EEE7C;
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v6 = type metadata accessor for XPCActivity(0);
    v7 = sub_100006C64(&qword_1010EBE90, 255, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
    v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, v7);
    v10 = v9;
    v3 = sub_1004EEAA0;
    v4 = v8;
    v5 = v10;
  }
  return swift_task_switch(v3, v4, v5);
}

uint64_t sub_1004EEAA0()
{
  dispatch thunk of XPCActivity.done()();
  return swift_task_switch(sub_1004EF3D4, 0, 0);
}

uint64_t sub_1004EEADC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 136);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 24) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to run scheduled obsevation purge: %{public}@.", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = type metadata accessor for XPCActivity(0);
  v10 = sub_100006C64(&qword_1010EBE90, 255, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v9, v10);
  return swift_task_switch(sub_1004EEAA0, v11, v12);
}

uint64_t sub_1004EECB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 160);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 24) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to run scheduled obsevation purge: %{public}@.", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = type metadata accessor for XPCActivity(0);
  v10 = sub_100006C64(&qword_1010EBE90, 255, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v9, v10);
  return swift_task_switch(sub_1004EEAA0, v11, v12);
}

uint64_t sub_1004EEE7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 176);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 24) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to run scheduled obsevation purge: %{public}@.", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = type metadata accessor for XPCActivity(0);
  v10 = sub_100006C64(&qword_1010EBE90, 255, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v9, v10);
  return swift_task_switch(sub_1004EEAA0, v11, v12);
}

uint64_t sub_1004EF048()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 128));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ObservationPruneSchedulerService()
{
  return objc_opt_self(_TtC12searchpartyd32ObservationPruneSchedulerService);
}

uint64_t sub_1004EF094()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1010FDC04);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  return sub_1004EC7F4();
}

uint64_t sub_1004EF0D8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_1010FDCD0, a2, (uint64_t (*)(uint64_t))type metadata accessor for ObservationPruneSchedulerService, (uint64_t)&unk_100E40BF0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1004EF114()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004EF124(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1010FDCDC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004C28;
  return sub_1004ED78C(a1, a2);
}

uint64_t sub_1004EF18C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004EF1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_1010FDCEC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100004A74;
  return sub_1004EE30C(a1, a2, v6);
}

unint64_t sub_1004EF218()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010FDD10;
  if (!qword_1010FDD10)
  {
    v1 = sub_10001F784(&qword_1010FDD08);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, &qword_1010FDD10);
  }
  return result;
}

uint64_t sub_1004EF264()
{
  return sub_1004EF2EC(48);
}

uint64_t sub_1004EF26C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1010FDD1C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_1004EC9A4(a1, v4, v5, v6);
}

uint64_t sub_1004EF2E4()
{
  return sub_1004EF2EC(40);
}

uint64_t sub_1004EF2EC(uint64_t a1)
{
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1004EF324()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_1010FDD2C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  v2 = (_QWORD *)swift_task_alloc(dword_1010FDC0C);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_1004ED368();
}

uint64_t sub_1004EF38C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010EBAC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004EF3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1004EF56C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1004EF434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1004EF56C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1004EF480()
{
  char *v0;
  char v1;
  Swift::String v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;

  v1 = *v0;
  v2._countAndFlagsBits = 0x203A4D6F427BLL;
  v2._object = (void *)0xE600000000000000;
  String.append(_:)(v2);
  if ((v1 & 4) != 0)
    v3 = 1702195828;
  else
    v3 = 0x65736C6166;
  if ((v1 & 4) != 0)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(v4);
  v6._countAndFlagsBits = 125;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0;
}

ValueMetadata *type metadata accessor for ExtraKeyBits()
{
  return &type metadata for ExtraKeyBits;
}

unint64_t sub_1004EF528()
{
  unint64_t result;

  result = qword_1010FDD40;
  if (!qword_1010FDD40)
  {
    result = swift_getWitnessTable("٫#", &type metadata for ExtraKeyBits);
    atomic_store(result, (unint64_t *)&qword_1010FDD40);
  }
  return result;
}

unint64_t sub_1004EF56C()
{
  unint64_t result;

  result = qword_1010FDD48;
  if (!qword_1010FDD48)
  {
    result = swift_getWitnessTable(byte_100E40CB8, &type metadata for ExtraKeyBits);
    atomic_store(result, (unint64_t *)&qword_1010FDD48);
  }
  return result;
}

uint64_t sub_1004EF5B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  void (*v29)(_BYTE *, _QWORD);
  Swift::String v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[32];

  v34 = a1;
  v1 = sub_10001A9A8(&qword_1010F2C10);
  __chkstk_darwin(v1);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for URLComponents(0);
  v4 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v32 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FMNAccountType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FMNAuthenticationProvider(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for FMNAccountType.secureLocations(_:), v6);
  static FMNAuthenticationProvider.configurationURL(accountType:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v17 = &qword_1010FBA40;
    v18 = (uint64_t)v12;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    URLComponents.init(url:resolvingAgainstBaseURL:)(v16, 0);
    v19 = v33;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v3, 1, v33) != 1)
    {
      v27 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      v28 = v32;
      v27(v32, v3, v19);
      v29 = (void (*)(_BYTE *, _QWORD))URLComponents.path.modify(v35);
      v30._countAndFlagsBits = 0x6769666E6F63;
      v30._object = (void *)0xE600000000000000;
      String.append(_:)(v30);
      v29(v35, 0);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v34, v28, v19);
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v17 = &qword_1010F2C10;
    v18 = (uint64_t)v3;
  }
  sub_100004048(v18, v17);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_10001A9E8(v20, (uint64_t)qword_1011B7A18);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "No url found in account bag.", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }

  URLComponents.init()(v25);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.path.setter();
  return URLComponents.host.setter();
}

uint64_t sub_1004EF95C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B6F90);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6F90);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000012, 0x8000000100ED8E40, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_1004EFA2C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v0 = type metadata accessor for UUID(0);
  sub_1000234D8(v0, qword_1011B6FA8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6FA8);
  v1 = String.utf8Data.getter(0xD00000000000001BLL, 0x8000000100ED8E60);
  v3 = v2;
  v4 = sub_100035530();
  DataProtocol.stableUUID.getter(&type metadata for Data, v4);
  return sub_10001BC14(v1, v3);
}

uint64_t sub_1004EFAD0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1004EFB10 + 4 * byte_100E40D40[a1]))(0x6556747065636361, 0xED00006E6F697372);
}

uint64_t sub_1004EFB10()
{
  return 0x4565727574616566;
}

unint64_t sub_1004EFB34()
{
  return 0xD00000000000001ELL;
}

unint64_t sub_1004EFBB0()
{
  return 0xD00000000000001DLL;
}

unint64_t sub_1004EFBC8()
{
  return 0xD000000000000017;
}

unint64_t sub_1004EFBE0()
{
  return 0xD00000000000001DLL;
}

unint64_t sub_1004EFBF8()
{
  return 0xD000000000000020;
}

unint64_t sub_1004EFC10()
{
  return 0xD000000000000025;
}

unint64_t sub_1004EFC28()
{
  return 0xD00000000000001FLL;
}

unint64_t sub_1004EFC40()
{
  return 0xD00000000000002ELL;
}

void sub_1004EFC58()
{
  JUMPOUT(0x1004EFC6CLL);
}

uint64_t sub_1004EFC78(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1004EFCB8 + 4 * byte_100E40D50[a1]))(0x6556747065636361, 0xED00006E6F697372);
}

uint64_t sub_1004EFCB8()
{
  return 0x4565727574616566;
}

unint64_t sub_1004EFCDC()
{
  return 0xD00000000000001ELL;
}

unint64_t sub_1004EFD58()
{
  return 0xD00000000000001DLL;
}

unint64_t sub_1004EFD70()
{
  return 0xD000000000000017;
}

unint64_t sub_1004EFD88()
{
  return 0xD00000000000001DLL;
}

unint64_t sub_1004EFDA0()
{
  return 0xD000000000000020;
}

unint64_t sub_1004EFDB8()
{
  return 0xD000000000000025;
}

unint64_t sub_1004EFDD0()
{
  return 0xD00000000000001FLL;
}

unint64_t sub_1004EFDE8()
{
  return 0xD00000000000002ELL;
}

void sub_1004EFE00()
{
  JUMPOUT(0x1004EFE14);
}

uint64_t sub_1004EFE20(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = sub_1004EFAD0(*a1);
  v5 = v4;
  v6 = sub_1004EFAD0(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_1004EFEA8()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = sub_1004EFAD0(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1004EFF08(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1004EFAD0(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1004EFF48()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = sub_1004EFAD0(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1004EFFA4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1004F13CC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1004EFFD0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1004EFAD0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1004EFFF8()
{
  unsigned __int8 *v0;

  return sub_1004EFC78(*v0);
}

unint64_t sub_1004F0000@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1004F13CC(a1);
  *a2 = result;
  return result;
}

void sub_1004F0024(_BYTE *a1@<X8>)
{
  *a1 = 16;
}

uint64_t sub_1004F0030(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004F1C84();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004F0058(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004F1C84();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004F0080()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  _QWORD v33[2];

  v33[0] = 0;
  v33[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(436);
  v1._countAndFlagsBits = 0xD000000000000024;
  v1._object = (void *)0x8000000100ED8EA0;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0xD000000000000011;
  v4._object = (void *)0x8000000100ED8ED0;
  String.append(_:)(v4);
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
    v5 = 1702195828;
  else
    v5 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease(v6);
  v8._object = (void *)0x8000000100ED8EF0;
  v8._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v8);
  Double.write<A>(to:)(v33, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 16));
  v9._object = (void *)0x8000000100ED8F20;
  v9._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v9);
  Double.write<A>(to:)(v33, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 24));
  v10._countAndFlagsBits = 0xD00000000000001CLL;
  v10._object = (void *)0x8000000100ED8F50;
  String.append(_:)(v10);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v12 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v12);
  v13._countAndFlagsBits = 0xD000000000000018;
  v13._object = (void *)0x8000000100ED8F70;
  String.append(_:)(v13);
  Double.write<A>(to:)(v33, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 40));
  v14._object = (void *)0x8000000100ED8F90;
  v14._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v14);
  Double.write<A>(to:)(v33, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 48));
  v15._countAndFlagsBits = 0xD000000000000021;
  v15._object = (void *)0x8000000100ED8FB0;
  String.append(_:)(v15);
  if ((*(_BYTE *)(v0 + 56) & 1) != 0)
    v16 = 1702195828;
  else
    v16 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 56) & 1) != 0)
    v17 = 0xE400000000000000;
  else
    v17 = 0xE500000000000000;
  v18 = v17;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease(v17);
  v19._object = (void *)0x8000000100ED8FE0;
  v19._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v19);
  v20 = *(_QWORD *)(v0 + 64);
  v21 = swift_bridgeObjectRetain(v20);
  v22._countAndFlagsBits = Set.description.getter(v21, &type metadata for String, &protocol witness table for String);
  v23 = v22._object;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v23);
  v24._countAndFlagsBits = 0xD000000000000019;
  v24._object = (void *)0x8000000100ED9000;
  String.append(_:)(v24);
  Double.write<A>(to:)(v33, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 72));
  v25._object = (void *)0x8000000100ED9020;
  v25._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v25);
  if ((*(_BYTE *)(v0 + 80) & 1) != 0)
    v26 = 1702195828;
  else
    v26 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 80) & 1) != 0)
    v27 = 0xE400000000000000;
  else
    v27 = 0xE500000000000000;
  v28 = v27;
  String.append(_:)(*(Swift::String *)&v26);
  swift_bridgeObjectRelease(v27);
  v29._object = (void *)0x8000000100ED9040;
  v29._countAndFlagsBits = 0xD000000000000024;
  String.append(_:)(v29);
  Double.write<A>(to:)(v33, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 88));
  v30._countAndFlagsBits = 0xD00000000000001DLL;
  v30._object = (void *)0x8000000100ED9070;
  String.append(_:)(v30);
  Double.write<A>(to:)(v33, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 104));
  v31._object = (void *)0x8000000100ED9090;
  v31._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v31);
  Double.write<A>(to:)(v33, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 112));
  return v33[0];
}

uint64_t sub_1004F0490@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1010E9C48 != -1)
    swift_once(&qword_1010E9C48, sub_1004EFA2C);
  v2 = type metadata accessor for UUID(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B6FA8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

__n128 sub_1004F0500@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[13];

  sub_1004F1414(a1, v10);
  if (!v2)
  {
    v5 = v10[11];
    *(_OWORD *)(a2 + 160) = v10[10];
    *(_OWORD *)(a2 + 176) = v5;
    *(_OWORD *)(a2 + 192) = v10[12];
    v6 = v10[7];
    *(_OWORD *)(a2 + 96) = v10[6];
    *(_OWORD *)(a2 + 112) = v6;
    v7 = v10[9];
    *(_OWORD *)(a2 + 128) = v10[8];
    *(_OWORD *)(a2 + 144) = v7;
    v8 = v10[3];
    *(_OWORD *)(a2 + 32) = v10[2];
    *(_OWORD *)(a2 + 48) = v8;
    v9 = v10[5];
    *(_OWORD *)(a2 + 64) = v10[4];
    *(_OWORD *)(a2 + 80) = v9;
    result = (__n128)v10[1];
    *(_OWORD *)a2 = v10[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1004F0568(_QWORD *a1)
{
  return sub_1004F057C(a1);
}

uint64_t sub_1004F057C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  _OWORD v32[5];
  uint64_t v33;
  char v34;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010FDED0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1004F1C84();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationsConfig.CodingKeys, &type metadata for SecureLocationsConfig.CodingKeys, v11, v9, v10);
  v12 = *(double *)v3;
  LOBYTE(v32[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(*(_QWORD *)&v12, v32, v5);
  if (!v2)
  {
    v13 = *((unsigned __int8 *)v3 + 8);
    LOBYTE(v32[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v32, v5);
    v14 = *((double *)v3 + 2);
    LOBYTE(v32[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v5, v14);
    v15 = *((double *)v3 + 3);
    LOBYTE(v32[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v5, v15);
    v16 = v3[4];
    LOBYTE(v32[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v32, v5);
    v17 = *((double *)v3 + 5);
    LOBYTE(v32[0]) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v5, v17);
    v18 = *((double *)v3 + 6);
    LOBYTE(v32[0]) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v5, v18);
    v19 = *((unsigned __int8 *)v3 + 56);
    LOBYTE(v32[0]) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v32, v5);
    v20 = *((double *)v3 + 9);
    LOBYTE(v32[0]) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v5, v20);
    *(_QWORD *)&v32[0] = v3[8];
    v34 = 8;
    v21 = sub_10001A9A8(&qword_1010F9F48);
    v22 = sub_1004F1D60((unint64_t *)&qword_1010FDED8, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <> Set<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v32, &v34, v5, v21, v22);
    v23 = *((unsigned __int8 *)v3 + 80);
    LOBYTE(v32[0]) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v23, v32, v5);
    v24 = *((double *)v3 + 11);
    LOBYTE(v32[0]) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v5, v24);
    v25 = v3[12];
    LOBYTE(v32[0]) = 12;
    KeyedEncodingContainer.encode(_:forKey:)(v25, v32, v5);
    v26 = *((double *)v3 + 13);
    LOBYTE(v32[0]) = 13;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v5, v26);
    v27 = *((double *)v3 + 14);
    LOBYTE(v32[0]) = 14;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v5, v27);
    v28 = *(_OWORD *)(v3 + 21);
    v32[2] = *(_OWORD *)(v3 + 19);
    v32[3] = v28;
    v32[4] = *(_OWORD *)(v3 + 23);
    v33 = v3[25];
    v29 = *(_OWORD *)(v3 + 17);
    v32[0] = *(_OWORD *)(v3 + 15);
    v32[1] = v29;
    v34 = 15;
    v30 = sub_1004F1DC0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v32, &v34, v5, &type metadata for OwnedDeviceConfig, v30);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1004F0934()
{
  qword_1011B6FC0 = (uint64_t)&_swiftEmptySetSingleton;
}

uint64_t sub_1004F0948(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1004F0984 + 4 * byte_100E40D60[a1]))(0xD000000000000017, 0x8000000100ED90B0);
}

uint64_t sub_1004F0984()
{
  uint64_t v0;

  return v0 - 18;
}

uint64_t sub_1004F0A44(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010FDFA0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1004F2C34();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OwnedDeviceConfig.CodingKeys, &type metadata for OwnedDeviceConfig.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v35 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v35, v5);
  if (!v2)
  {
    v13 = v3[1];
    v34 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v34, v5);
    v14 = v3[2];
    v33 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v33, v5);
    v15 = v3[3];
    v32 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v32, v5);
    v16 = *((_QWORD *)v3 + 1);
    v31 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v31, v5);
    v17 = *((double *)v3 + 2);
    v30 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(&v30, v5, v17);
    v18 = *((double *)v3 + 3);
    v29 = 6;
    KeyedEncodingContainer.encode(_:forKey:)(&v29, v5, v18);
    v19 = v3[32];
    v28 = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v28, v5);
    v20 = *((_QWORD *)v3 + 5);
    v21 = *((_QWORD *)v3 + 6);
    HIBYTE(v27) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, (char *)&v27 + 7, v5);
    v22 = *((_QWORD *)v3 + 7);
    v23 = *((_QWORD *)v3 + 8);
    BYTE6(v27) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, (char *)&v27 + 6, v5);
    v24 = *((_QWORD *)v3 + 9);
    v25 = *((_QWORD *)v3 + 10);
    BYTE5(v27) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v25, (char *)&v27 + 5, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004F0CC0()
{
  unsigned __int8 *v0;

  return sub_1004F0948(*v0);
}

uint64_t sub_1004F0CC8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1004F2434(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004F0CEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004F2C34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004F0D14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004F2C34();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1004F0D3C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[5];
  uint64_t v8;

  sub_1004F2854(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_QWORD *)(a2 + 80) = v8;
    result = *(double *)v7;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1004F0D94(_QWORD *a1)
{
  return sub_1004F0A44(a1);
}

uint64_t sub_1004F0DA8()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for OwnedDeviceConfigsDefaults()
{
  return objc_opt_self(_TtC12searchpartyd26OwnedDeviceConfigsDefaults);
}

uint64_t sub_1004F0DD8()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for OwnedDevicePublishPolicy();
  result = swift_allocObject(v0, 24, 7);
  *(_QWORD *)(result + 16) = 0;
  qword_1011B6FC8 = result;
  return result;
}

uint64_t type metadata accessor for OwnedDevicePublishPolicy()
{
  return objc_opt_self(_TtC12searchpartyd24OwnedDevicePublishPolicy);
}

uint64_t assignWithCopy for SecureLocationsConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  *(_BYTE *)(a1 + 123) = *(_BYTE *)(a2 + 123);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v6 = *(_QWORD *)(a2 + 168);
  v7 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v8 = *(_QWORD *)(a2 + 184);
  v9 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v10 = *(_QWORD *)(a2 + 200);
  v11 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t assignWithTake for SecureLocationsConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  *(_BYTE *)(a1 + 123) = *(_BYTE *)(a2 + 123);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  v5 = *(_QWORD *)(a2 + 168);
  v6 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 184);
  v8 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 200);
  v10 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v9;
  swift_bridgeObjectRelease(v10);
  return a1;
}

ValueMetadata *type metadata accessor for SecureLocationsConfig()
{
  return &type metadata for SecureLocationsConfig;
}

unint64_t sub_1004F107C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1004F10A8();
  result = sub_1004F10EC();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1004F10A8()
{
  unint64_t result;

  result = qword_1010FDEA8;
  if (!qword_1010FDEA8)
  {
    result = swift_getWitnessTable("ѭ#", &type metadata for SecureLocationsConfig);
    atomic_store(result, (unint64_t *)&qword_1010FDEA8);
  }
  return result;
}

unint64_t sub_1004F10EC()
{
  unint64_t result;

  result = qword_1011083F0;
  if (!qword_1011083F0)
  {
    result = swift_getWitnessTable(byte_100E40DE8, &type metadata for SecureLocationsConfig);
    atomic_store(result, (unint64_t *)&qword_1011083F0);
  }
  return result;
}

id sub_1004F1130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  id result;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  v26 = v4;
  result = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (result)
  {
    v6 = result;
    v7 = objc_msgSend(result, "serverFriendlyDescription");

    if (v7)
    {
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v10 = v9;

      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
      v25 = v4;
      v26 = 0x8000000000000000;
      sub_100109D28(v8, v10, 0xD000000000000011, 0x8000000100ECA2C0, isUniquelyReferenced_nonNull_native);
      v12 = v25;
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100102BE0(0xD000000000000011, 0x8000000100ECA2C0);
      swift_bridgeObjectRelease();
      v12 = v26;
    }
    v13 = swift_isUniquelyReferenced_nonNull_native(v12);
    v25 = v12;
    sub_100109D28(49, 0xE100000000000000, 0x562D747065636341, 0xEE006E6F69737265, v13);
    v14 = v25;
    swift_bridgeObjectRelease();
    v15 = swift_isUniquelyReferenced_nonNull_native(v14);
    v25 = v14;
    sub_100109D28(0xD000000000000010, 0x8000000100ECC390, 0x2D746E65746E6F43, 0xEC00000065707954, v15);
    v26 = v25;
    v16 = swift_bridgeObjectRelease();
    v17 = Date.init()(v16);
    v18 = Date.epoch.getter(v17);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    v25 = v18;
    v19 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
    v21 = v20;
    v22 = v26;
    v23 = swift_isUniquelyReferenced_nonNull_native(v26);
    v25 = v22;
    v26 = 0x8000000000000000;
    sub_100109D28(v19, v21, 0xD000000000000015, 0x8000000100ECC3B0, v23);
    v24 = v25;
    swift_bridgeObjectRelease();
    return (id)v24;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1004F13CC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104A8E8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0x10)
    return 16;
  else
    return v3;
}

_QWORD *sub_1004F1414@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  double v18;
  char v19;
  double v20;
  double v21;
  char v22;
  double v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  double v27;
  char v28;
  double v29;
  double v30;
  char v31;
  double v32;
  int v33;
  double v34;
  char v35;
  _QWORD *result;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  char v43;
  double v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  double v48;
  char v49;
  double v50;
  double v51;
  char v52;
  double v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  unint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  unint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  unint64_t v112;
  __int128 v113;
  double v114;
  uint64_t v115;
  double v116;
  double v117;
  char v118;
  char v119;
  char v120;
  char v121;
  __int128 v122;
  uint64_t v123;
  char v124;
  _BYTE v125[7];
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  __int128 v130;
  _BYTE v131[7];
  _BYTE v132[7];
  _BYTE v133[7];
  _DWORD v134[3];
  _QWORD *v135;

  v5 = sub_10001A9A8(&qword_1010FDEB0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v135 = a1;
  sub_10001AA44(a1, v9);
  v11 = sub_1004F1C84();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SecureLocationsConfig.CodingKeys, &type metadata for SecureLocationsConfig.CodingKeys, v11, v9, v10);
  if (v2)
    return (_QWORD *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v135);
  v12 = v6;
  LOBYTE(v105) = 0;
  v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v5);
  v14 = v5;
  if ((v15 & 1) != 0)
    v16 = 0;
  else
    v16 = v13;
  LOBYTE(v105) = 1;
  v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v14);
  v91 = v16;
  LOBYTE(v105) = 2;
  v18 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v14));
  LODWORD(v90) = v17 == 2;
  if ((v19 & 1) != 0)
    v20 = 100.0;
  else
    v20 = v18;
  LOBYTE(v105) = 3;
  v21 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v14));
  if ((v22 & 1) != 0)
    v23 = 604800.0;
  else
    v23 = v21;
  LOBYTE(v105) = 4;
  v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v14);
  if ((v25 & 1) != 0)
    v26 = 5;
  else
    v26 = v24;
  LOBYTE(v105) = 5;
  v27 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v14));
  v89 = v26;
  if ((v28 & 1) != 0)
    v29 = 3600.0;
  else
    v29 = v27;
  LOBYTE(v105) = 6;
  v30 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v14));
  if ((v31 & 1) != 0)
    v32 = 120.0;
  else
    v32 = v30;
  LOBYTE(v105) = 7;
  v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v14);
  LOBYTE(v105) = 9;
  v34 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v14));
  LODWORD(v88) = v33;
  DWORD2(v87) = v17;
  if ((v35 & 1) != 0)
    v37 = 120.0;
  else
    v37 = v34;
  v38 = sub_10001A9A8(&qword_1010F9F48);
  LOBYTE(v92) = 8;
  v39 = sub_1004F1D60(&qword_1010FDEC0, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <> Set<A>);
  v40 = v14;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v38, &v92, v14, v38, v39);
  v41 = v105;
  if (!v105)
  {
    if (qword_1010E9C50 != -1)
      swift_once(&qword_1010E9C50, sub_1004F0934);
    v41 = qword_1011B6FC0;
    swift_bridgeObjectRetain(qword_1011B6FC0);
  }
  LOBYTE(v105) = 10;
  swift_bridgeObjectRetain(v41);
  LODWORD(v87) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v40);
  DWORD2(v86) = v87 == 2;
  LOBYTE(v105) = 11;
  v42 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v40));
  if ((v43 & 1) != 0)
    v44 = 1800.0;
  else
    v44 = v42;
  LOBYTE(v105) = 12;
  v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v40);
  if ((v46 & 1) != 0)
    v47 = 5;
  else
    v47 = v45;
  LOBYTE(v105) = 13;
  v48 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v40));
  if ((v49 & 1) != 0)
    v50 = 900.0;
  else
    v50 = v48;
  LOBYTE(v105) = 14;
  v51 = COERCE_DOUBLE(KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v105, v40));
  if ((v52 & 1) != 0)
    v53 = 1000.0;
  else
    v53 = v51;
  LOBYTE(v92) = 15;
  v54 = sub_1004F1CC8();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for OwnedDeviceConfig, &v92, v40, &type metadata for OwnedDeviceConfig, v54);
  v81 = (v90 | BYTE8(v87)) & 1;
  v82 = v88 & 1;
  v80 = v105;
  v84 = (BYTE8(v86) | v87) & 1;
  v83 = v107;
  v78 = v108;
  v55 = *(_QWORD *)&v110;
  v90 = v111;
  v85 = v112;
  v86 = v106;
  v87 = v113;
  v88 = v109;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v40);
  if (v55)
  {
    v56 = v55;
    v57 = (v80 >> 8) & 1;
    v58 = v80 & 1;
    v59 = (v80 >> 16) & 1;
    v60 = v78 & 1;
    v61 = (v80 >> 24) & 1;
  }
  else
  {
    v90 = 808334129;
    *((_QWORD *)&v87 + 1) = 0xE300000000000000;
    v88 = 808334897;
    v56 = 0xE400000000000000;
    v58 = 1;
    *(_QWORD *)&v87 = 3157561;
    v83 = 0x417E133800000000;
    *((_QWORD *)&v86 + 1) = 0x416E133800000000;
    *(_QWORD *)&v86 = 5;
    v57 = 1;
    v59 = 1;
    v61 = 1;
    v60 = 1;
    v85 = 0xE400000000000000;
  }
  v62 = v91;
  *(_QWORD *)&v92 = v91;
  v64 = v81;
  v63 = v82;
  BYTE8(v92) = v81;
  *(double *)&v93 = v20;
  *((double *)&v93 + 1) = v23;
  v65 = v89;
  *(_QWORD *)&v94 = v89;
  *((double *)&v94 + 1) = v29;
  *(double *)&v95 = v32;
  BYTE8(v95) = v82;
  *(_QWORD *)&v96 = v41;
  *((double *)&v96 + 1) = v37;
  LOBYTE(v97) = v84;
  *((double *)&v97 + 1) = v44;
  *(_QWORD *)&v98 = v47;
  v79 = v50;
  *((double *)&v98 + 1) = v50;
  *(double *)&v99 = v53;
  v66 = v53;
  LODWORD(v78) = v58;
  BYTE8(v99) = v58;
  v76 = v59;
  v77 = v57;
  BYTE9(v99) = v57;
  BYTE10(v99) = v59;
  v75 = v61;
  BYTE11(v99) = v61;
  v100 = v86;
  v67 = v83;
  *(_QWORD *)&v101 = v83;
  HIDWORD(v74) = v60;
  BYTE8(v101) = v60;
  *(_QWORD *)&v102 = v88;
  *((_QWORD *)&v102 + 1) = v56;
  v80 = v56;
  *(_QWORD *)&v103 = v90;
  *((_QWORD *)&v103 + 1) = v85;
  v104 = v87;
  sub_1004F1D0C(&v92);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v135);
  v105 = v62;
  LOBYTE(v106) = v64;
  *(_DWORD *)((char *)&v106 + 1) = v134[0];
  DWORD1(v106) = *(_DWORD *)((char *)v134 + 3);
  *((double *)&v106 + 1) = v20;
  v107 = *(_QWORD *)&v23;
  v108 = v65;
  v109 = *(_QWORD *)&v29;
  v110 = v32;
  LOBYTE(v111) = v63;
  *(_DWORD *)((char *)&v111 + 1) = *(_DWORD *)v133;
  HIDWORD(v111) = *(_DWORD *)&v133[3];
  v112 = v41;
  *(double *)&v113 = v37;
  BYTE8(v113) = v84;
  HIDWORD(v113) = *(_DWORD *)&v132[3];
  *(_DWORD *)((char *)&v113 + 9) = *(_DWORD *)v132;
  v114 = v44;
  v115 = v47;
  v116 = v79;
  v117 = v66;
  v118 = v78;
  v119 = v77;
  v120 = v76;
  v121 = v75;
  v122 = v86;
  v123 = v67;
  v124 = BYTE4(v74);
  *(_DWORD *)&v125[3] = *(_DWORD *)&v131[3];
  *(_DWORD *)v125 = *(_DWORD *)v131;
  v126 = v88;
  v127 = v80;
  v128 = v90;
  v129 = v85;
  v130 = v87;
  result = sub_1003D09E0(&v105);
  v68 = v103;
  a2[10] = v102;
  a2[11] = v68;
  a2[12] = v104;
  v69 = v99;
  a2[6] = v98;
  a2[7] = v69;
  v70 = v101;
  a2[8] = v100;
  a2[9] = v70;
  v71 = v95;
  a2[2] = v94;
  a2[3] = v71;
  v72 = v97;
  a2[4] = v96;
  a2[5] = v72;
  v73 = v93;
  *a2 = v92;
  a2[1] = v73;
  return result;
}

unint64_t sub_1004F1C84()
{
  unint64_t result;

  result = qword_1010FDEB8;
  if (!qword_1010FDEB8)
  {
    result = swift_getWitnessTable(asc_100E4108C, &type metadata for SecureLocationsConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDEB8);
  }
  return result;
}

unint64_t sub_1004F1CC8()
{
  unint64_t result;

  result = qword_1010FDEC8;
  if (!qword_1010FDEC8)
  {
    result = swift_getWitnessTable(asc_100E41064, &type metadata for OwnedDeviceConfig);
    atomic_store(result, (unint64_t *)&qword_1010FDEC8);
  }
  return result;
}

_QWORD *sub_1004F1D0C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[21];
  v3 = a1[23];
  v4 = a1[25];
  swift_bridgeObjectRetain(a1[8]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_1004F1D60(unint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_10001F784(&qword_1010F9F48);
    v8 = a2;
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1004F1DC0()
{
  unint64_t result;

  result = qword_1010FDEE0;
  if (!qword_1010FDEE0)
  {
    result = swift_getWitnessTable(byte_100E4103C, &type metadata for OwnedDeviceConfig);
    atomic_store(result, (unint64_t *)&qword_1010FDEE0);
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsConfigRequest()
{
  return &type metadata for SecureLocationsConfigRequest;
}

uint64_t sub_1004F1E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004F1E20);
}

uint64_t sub_1004F1E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for FMNAccountType(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for URLComponents(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1004F1E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004F1EA0);
}

uint64_t sub_1004F1EA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for FMNAccountType(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for URLComponents(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SecureLocationsConfigEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FDF40;
  if (!qword_1010FDF40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecureLocationsConfigEndpoint);
  return result;
}

uint64_t getEnumTagSinglePayload for SecureLocationsConfig.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 15 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 15) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 15;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 15;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 15;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_1004F2034 + 4 * byte_100E40D70[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_1004F2068 + 4 * byte_100E40D6B[v4]))();
}

uint64_t sub_1004F2068(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004F2070(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004F2078);
  return result;
}

uint64_t sub_1004F2084(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004F208CLL);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_1004F2090(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004F2098(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsConfig.CodingKeys()
{
  return &type metadata for SecureLocationsConfig.CodingKeys;
}

uint64_t destroy for OwnedDeviceConfig(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  return swift_bridgeObjectRelease(a1[10]);
}

uint64_t initializeWithCopy for OwnedDeviceConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  v5 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for OwnedDeviceConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t assignWithTake for OwnedDeviceConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for OwnedDeviceConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OwnedDeviceConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceConfig()
{
  return &type metadata for OwnedDeviceConfig;
}

unint64_t sub_1004F2360()
{
  unint64_t result;

  result = qword_1010FDF78;
  if (!qword_1010FDF78)
  {
    result = swift_getWitnessTable("լ#", &type metadata for SecureLocationsConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDF78);
  }
  return result;
}

unint64_t sub_1004F23A8()
{
  unint64_t result;

  result = qword_1010FDF80;
  if (!qword_1010FDF80)
  {
    result = swift_getWitnessTable(a5_2, &type metadata for SecureLocationsConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDF80);
  }
  return result;
}

unint64_t sub_1004F23F0()
{
  unint64_t result;

  result = qword_1010FDF88;
  if (!qword_1010FDF88)
  {
    result = swift_getWitnessTable(byte_100E40EEC, &type metadata for SecureLocationsConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDF88);
  }
  return result;
}

uint64_t sub_1004F2434(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  if (a1 == 0xD000000000000017 && a2 == 0x8000000100ED90B0)
  {
    v4 = 0x8000000100ED90B0;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100ED90B0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x8000000100ED90D0)
  {
    v6 = 0x8000000100ED90D0;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100ED90D0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x8000000100ED90F0)
  {
    v7 = 0x8000000100ED90F0;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x8000000100ED90F0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_18;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x8000000100ED9110)
  {
    v8 = 0x8000000100ED9110;
LABEL_24:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100ED9110, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_24;
  }
  if (a1 == 0x4B664F6F4E78616DLL && a2 == 0xEB00000000737965)
  {
    v9 = 0xEB00000000737965;
LABEL_30:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B664F6F4E78616DLL, 0xEB00000000737965, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_30;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100ED9130)
  {
    v10 = 0x8000000100ED9130;
LABEL_36:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100ED9130, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_36;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100ED9150)
  {
    v11 = 0x8000000100ED9150;
LABEL_42:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100ED9150, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_42;
  }
  if (a1 == 0xD000000000000028)
  {
    v12 = 0x8000000100ED9170;
    if (a2 == 0x8000000100ED9170)
      goto LABEL_47;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000028, 0x8000000100ED9170, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_47:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if (a1 == 0xD000000000000026 && a2 == 0x8000000100ED91A0)
  {
    v13 = 0x8000000100ED91A0;
LABEL_53:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000026, 0x8000000100ED91A0, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_53;
  }
  if (a1 == 0xD000000000000028)
  {
    v14 = 0x8000000100ED91D0;
    if (a2 == 0x8000000100ED91D0)
      goto LABEL_58;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000028, 0x8000000100ED91D0, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_58:
    swift_bridgeObjectRelease(v14);
    return 9;
  }
  if (a1 == 0xD00000000000002ALL && a2 == 0x8000000100ED9200)
  {
    swift_bridgeObjectRelease(0x8000000100ED9200);
    return 10;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002ALL, 0x8000000100ED9200, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_1004F2854@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  void (*v22)(char *, uint64_t);
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;

  v5 = sub_10001A9A8(&qword_1010FDF90);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1004F2C34();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OwnedDeviceConfig.CodingKeys, &type metadata for OwnedDeviceConfig.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v48 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v48, v5);
  v47 = 1;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v47, v5);
  v46 = 2;
  v37 = KeyedDecodingContainer.decode(_:forKey:)(&v46, v5);
  v45 = 3;
  v36 = KeyedDecodingContainer.decode(_:forKey:)(&v45, v5);
  v44 = 4;
  v35 = KeyedDecodingContainer.decode(_:forKey:)(&v44, v5);
  v43 = 5;
  v14 = KeyedDecodingContainer.decode(_:forKey:)(&v43, v5);
  v42 = 6;
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v42, v5);
  v41 = 7;
  v33 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v5);
  v40 = 8;
  v34 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v5);
  v39 = 9;
  v32 = v16;
  swift_bridgeObjectRetain(v16);
  v30 = KeyedDecodingContainer.decode(_:forKey:)(&v39, v5);
  v31 = v17;
  v38 = 10;
  swift_bridgeObjectRetain(v17);
  v29 = KeyedDecodingContainer.decode(_:forKey:)(&v38, v5);
  v19 = v18;
  v27 = v13 & 1;
  v28 = v12 & 1;
  v20 = v37 & 1;
  v21 = v36 & 1;
  v22 = *(void (**)(char *, uint64_t))(v6 + 8);
  v23 = v33 & 1;
  v22(v8, v5);
  v24 = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  swift_bridgeObjectRelease();
  v25 = v31;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v28;
  *(_BYTE *)(a2 + 1) = v27;
  *(_BYTE *)(a2 + 2) = v20;
  *(_BYTE *)(a2 + 3) = v21;
  *(_QWORD *)(a2 + 8) = v35;
  *(double *)(a2 + 16) = v14;
  *(double *)(a2 + 24) = v15;
  *(_BYTE *)(a2 + 32) = v23;
  *(_QWORD *)(a2 + 40) = v34;
  *(_QWORD *)(a2 + 48) = v24;
  *(_QWORD *)(a2 + 56) = v30;
  *(_QWORD *)(a2 + 64) = v25;
  *(_QWORD *)(a2 + 72) = v29;
  *(_QWORD *)(a2 + 80) = v19;
  return result;
}

unint64_t sub_1004F2C34()
{
  unint64_t result;

  result = qword_1010FDF98;
  if (!qword_1010FDF98)
  {
    result = swift_getWitnessTable(a5_3, &type metadata for OwnedDeviceConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDF98);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for OwnedDeviceConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1004F2CC4 + 4 * byte_100E40D7A[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1004F2CF8 + 4 * byte_100E40D75[v4]))();
}

uint64_t sub_1004F2CF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004F2D00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004F2D08);
  return result;
}

uint64_t sub_1004F2D14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004F2D1CLL);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1004F2D20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004F2D28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceConfig.CodingKeys()
{
  return &type metadata for OwnedDeviceConfig.CodingKeys;
}

unint64_t sub_1004F2D48()
{
  unint64_t result;

  result = qword_1010FDFA8;
  if (!qword_1010FDFA8)
  {
    result = swift_getWitnessTable(byte_100E4116C, &type metadata for OwnedDeviceConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDFA8);
  }
  return result;
}

unint64_t sub_1004F2D90()
{
  unint64_t result;

  result = qword_1010FDFB0;
  if (!qword_1010FDFB0)
  {
    result = swift_getWitnessTable(byte_100E410DC, &type metadata for OwnedDeviceConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDFB0);
  }
  return result;
}

unint64_t sub_1004F2DD8()
{
  unint64_t result;

  result = qword_1010FDFB8;
  if (!qword_1010FDFB8)
  {
    result = swift_getWitnessTable(byte_100E41104, &type metadata for OwnedDeviceConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FDFB8);
  }
  return result;
}

_QWORD *sub_1004F2E1C(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  unsigned int (*v16)(_QWORD *, uint64_t, int *, __n128);
  __n128 v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t, __n128);
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  void (*v58)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  char *__dst;
  char *v89;
  uint64_t v90;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = a2[4];
    v7 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v7;
    v8 = a2[7];
    v9 = a2[8];
    *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
    v10 = a2[9];
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v10;
    v11 = a3[6];
    v12 = (_QWORD *)(a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    *(_QWORD *)(a1 + 56) = v8;
    v14 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    v15 = *((_QWORD *)v14 - 1);
    v16 = *(unsigned int (**)(_QWORD *, uint64_t, int *, __n128))(v15 + 48);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    v17 = swift_bridgeObjectRetain(v9);
    if (v16(v13, 1, v14, v17))
    {
      v18 = sub_10001A9A8(&qword_1010FBA50);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      v19 = a3;
    }
    else
    {
      v90 = v15;
      v21 = v13[1];
      *v12 = *v13;
      v12[1] = v21;
      v22 = v13[3];
      v12[2] = v13[2];
      v12[3] = v22;
      v23 = v13[5];
      v12[4] = v13[4];
      v12[5] = v23;
      *((_WORD *)v12 + 24) = *((_WORD *)v13 + 24);
      *((_BYTE *)v12 + 72) = *((_BYTE *)v13 + 72);
      v24 = v13[8];
      v12[7] = v13[7];
      v12[8] = v24;
      v25 = v14[10];
      __dst = (char *)v12 + v25;
      v89 = (char *)v13 + v25;
      v26 = type metadata accessor for URL(0);
      v27 = *(_QWORD *)(v26 - 8);
      v28 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v27 + 48);
      v29 = v21;
      v30 = v26;
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v22);
      v31 = swift_bridgeObjectRetain(v23);
      v87 = v27;
      if (v28(v89, 1, v30, v31))
      {
        v32 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(__dst, v89, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dst, v89, v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v30);
      }
      v19 = a3;
      v33 = v14[11];
      v34 = (char *)v12 + v33;
      v35 = (char *)v13 + v33;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v28)((char *)v13 + v33, 1, v30))
      {
        v36 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v34, v35, v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v34, 0, 1, v30);
      }
      v37 = v14[12];
      v38 = (char *)v12 + v37;
      v39 = (char *)v13 + v37;
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      v40 = v14[13];
      v41 = (_QWORD *)((char *)v12 + v40);
      v42 = (_QWORD *)((char *)v13 + v40);
      v43 = v42[1];
      *v41 = *v42;
      v41[1] = v43;
      v44 = v14[14];
      v45 = *(_QWORD *)((char *)v13 + v44);
      *(_QWORD *)((char *)v12 + v44) = v45;
      v46 = v14[15];
      v47 = (_QWORD *)((char *)v12 + v46);
      v48 = (_QWORD *)((char *)v13 + v46);
      v49 = v48[1];
      *v47 = *v48;
      v47[1] = v49;
      v50 = v14[16];
      v51 = *(_QWORD *)((char *)v13 + v50);
      *(_QWORD *)((char *)v12 + v50) = v51;
      v52 = v14[17];
      v53 = (char *)v12 + v52;
      v54 = (char *)v13 + v52;
      *(_OWORD *)v53 = *(_OWORD *)v54;
      v53[16] = v54[16];
      v55 = v14[18];
      v56 = (char *)v12 + v55;
      v57 = (char *)v13 + v55;
      *(_OWORD *)v56 = *(_OWORD *)v57;
      v56[16] = v57[16];
      v58 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v90 + 56);
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRetain(v49);
      v59 = swift_bridgeObjectRetain(v51);
      v58(v12, 0, 1, v14, v59);
    }
    v60 = v19[7];
    v61 = (char *)v4 + v60;
    v62 = (char *)a2 + v60;
    v63 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0);
    v64 = *((_QWORD *)v63 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v64 + 48))(v62, 1, v63))
    {
      v65 = sub_10001A9A8(&qword_1010FBA48);
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
    else
    {
      v66 = type metadata accessor for URL(0);
      v67 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16);
      v67(v61, v62, v66);
      v67(&v61[v63[5]], &v62[v63[5]], v66);
      v67(&v61[v63[6]], &v62[v63[6]], v66);
      v67(&v61[v63[7]], &v62[v63[7]], v66);
      v67(&v61[v63[8]], &v62[v63[8]], v66);
      v67(&v61[v63[9]], &v62[v63[9]], v66);
      v67(&v61[v63[10]], &v62[v63[10]], v66);
      v67(&v61[v63[11]], &v62[v63[11]], v66);
      v67(&v61[v63[12]], &v62[v63[12]], v66);
      v67(&v61[v63[13]], &v62[v63[13]], v66);
      v67(&v61[v63[14]], &v62[v63[14]], v66);
      v67(&v61[v63[15]], &v62[v63[15]], v66);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v64 + 56))(v61, 0, 1, v63);
    }
    v68 = v19[8];
    v69 = v19[9];
    v70 = (_QWORD *)((char *)v4 + v68);
    v71 = (uint64_t *)((char *)a2 + v68);
    v72 = v71[1];
    *v70 = *v71;
    v70[1] = v72;
    v73 = (_QWORD *)((char *)v4 + v69);
    v74 = (uint64_t *)((char *)a2 + v69);
    v75 = *(uint64_t *)((char *)a2 + v69 + 8);
    swift_bridgeObjectRetain(v72);
    if (v75)
    {
      *v73 = *v74;
      v73[1] = v75;
      v76 = v74[3];
      v73[2] = v74[2];
      v73[3] = v76;
      v77 = v74[4];
      v78 = v74[5];
      v73[4] = v77;
      v73[5] = v78;
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRetain(v76);
      swift_bridgeObjectRetain(v78);
    }
    else
    {
      v79 = *((_OWORD *)v74 + 1);
      *(_OWORD *)v73 = *(_OWORD *)v74;
      *((_OWORD *)v73 + 1) = v79;
      *((_OWORD *)v73 + 2) = *((_OWORD *)v74 + 2);
    }
    v80 = v19[10];
    v81 = (char *)v4 + v80;
    v82 = (uint64_t)a2 + v80;
    v83 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 16))(v81, v82, v83);
    v84 = v19[11];
    v85 = *(uint64_t *)((char *)a2 + v84);
    *(_QWORD *)((char *)v4 + v84) = v85;
    swift_bridgeObjectRetain(v85);
  }
  return v4;
}

uint64_t type metadata accessor for AccessoryInfoResponseContent.Configuration(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010FE188, (uint64_t)&nominal type descriptor for AccessoryInfoResponseContent.Configuration);
}

uint64_t type metadata accessor for AccessoryInfoResponseContent.Assets(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010FE0D0, (uint64_t)&nominal type descriptor for AccessoryInfoResponseContent.Assets);
}

uint64_t sub_1004F33BC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = v4 + *(int *)(v5 + 40);
    v7 = type metadata accessor for URL(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    if (!v9(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    v10 = v4 + *(int *)(v5 + 44);
    if (!v9(v10, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v11 = a1 + a2[7];
  v12 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v12 - 1) + 48))(v11, 1, v12))
  {
    v13 = type metadata accessor for URL(0);
    v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
    v14(v11, v13);
    v14(v11 + v12[5], v13);
    v14(v11 + v12[6], v13);
    v14(v11 + v12[7], v13);
    v14(v11 + v12[8], v13);
    v14(v11 + v12[9], v13);
    v14(v11 + v12[10], v13);
    v14(v11 + v12[11], v13);
    v14(v11 + v12[12], v13);
    v14(v11 + v12[13], v13);
    v14(v11 + v12[14], v13);
    v14(v11 + v12[15], v13);
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[9] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v15 = a1 + a2[10];
  v16 = type metadata accessor for ServerStatusCode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004F3658(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int *v13;
  uint64_t v14;
  unsigned int (*v15)(_QWORD *, uint64_t, int *, __n128);
  __n128 v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t, __n128);
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  void (*v56)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v57;
  uint64_t v58;
  char *v59;
  char *v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  char *__dst;
  uint64_t v87;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = v9;
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *(_QWORD *)(a1 + 56) = v7;
  v13 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(unsigned int (**)(_QWORD *, uint64_t, int *, __n128))(v14 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v16 = swift_bridgeObjectRetain(v8);
  if (v15(v12, 1, v13, v16))
  {
    v17 = sub_10001A9A8(&qword_1010FBA50);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    v18 = a3;
  }
  else
  {
    v87 = v14;
    v19 = v12[1];
    *v11 = *v12;
    v11[1] = v19;
    v20 = v12[3];
    v11[2] = v12[2];
    v11[3] = v20;
    v21 = v12[5];
    v11[4] = v12[4];
    v11[5] = v21;
    *((_WORD *)v11 + 24) = *((_WORD *)v12 + 24);
    *((_BYTE *)v11 + 72) = *((_BYTE *)v12 + 72);
    v22 = v12[8];
    v11[7] = v12[7];
    v11[8] = v22;
    v23 = v13[10];
    __dst = (char *)v11 + v23;
    v24 = (char *)v12 + v23;
    v25 = type metadata accessor for URL(0);
    v85 = *(_QWORD *)(v25 - 8);
    v26 = v19;
    v27 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v85 + 48);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v20);
    v28 = swift_bridgeObjectRetain(v21);
    if (v27(v24, 1, v25, v28))
    {
      v29 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v85 + 16))(__dst, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(__dst, 0, 1, v25);
    }
    v30 = v13[11];
    v31 = (char *)v11 + v30;
    v32 = (char *)v12 + v30;
    v33 = ((uint64_t (*)(char *, uint64_t, uint64_t))v27)((char *)v12 + v30, 1, v25);
    v18 = a3;
    if (v33)
    {
      v34 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v31, v32, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v31, 0, 1, v25);
    }
    v35 = v13[12];
    v36 = (char *)v11 + v35;
    v37 = (char *)v12 + v35;
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
    v38 = v13[13];
    v39 = (_QWORD *)((char *)v11 + v38);
    v40 = (_QWORD *)((char *)v12 + v38);
    v41 = v40[1];
    *v39 = *v40;
    v39[1] = v41;
    v42 = v13[14];
    v43 = *(_QWORD *)((char *)v12 + v42);
    *(_QWORD *)((char *)v11 + v42) = v43;
    v44 = v13[15];
    v45 = (_QWORD *)((char *)v11 + v44);
    v46 = (_QWORD *)((char *)v12 + v44);
    v47 = v46[1];
    *v45 = *v46;
    v45[1] = v47;
    v48 = v13[16];
    v49 = *(_QWORD *)((char *)v12 + v48);
    *(_QWORD *)((char *)v11 + v48) = v49;
    v50 = v13[17];
    v51 = (char *)v11 + v50;
    v52 = (char *)v12 + v50;
    *(_OWORD *)v51 = *(_OWORD *)v52;
    v51[16] = v52[16];
    v53 = v13[18];
    v54 = (char *)v11 + v53;
    v55 = (char *)v12 + v53;
    *(_OWORD *)v54 = *(_OWORD *)v55;
    v54[16] = v55[16];
    v56 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v87 + 56);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v47);
    v57 = swift_bridgeObjectRetain(v49);
    v56(v11, 0, 1, v13, v57);
  }
  v58 = v18[7];
  v59 = (char *)(a1 + v58);
  v60 = (char *)(a2 + v58);
  v61 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  v62 = *((_QWORD *)v61 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v62 + 48))(v60, 1, v61))
  {
    v63 = sub_10001A9A8(&qword_1010FBA48);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
  }
  else
  {
    v64 = type metadata accessor for URL(0);
    v65 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16);
    v65(v59, v60, v64);
    v65(&v59[v61[5]], &v60[v61[5]], v64);
    v65(&v59[v61[6]], &v60[v61[6]], v64);
    v65(&v59[v61[7]], &v60[v61[7]], v64);
    v65(&v59[v61[8]], &v60[v61[8]], v64);
    v65(&v59[v61[9]], &v60[v61[9]], v64);
    v65(&v59[v61[10]], &v60[v61[10]], v64);
    v65(&v59[v61[11]], &v60[v61[11]], v64);
    v65(&v59[v61[12]], &v60[v61[12]], v64);
    v65(&v59[v61[13]], &v60[v61[13]], v64);
    v65(&v59[v61[14]], &v60[v61[14]], v64);
    v65(&v59[v61[15]], &v60[v61[15]], v64);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v62 + 56))(v59, 0, 1, v61);
  }
  v66 = v18[8];
  v67 = v18[9];
  v68 = (_QWORD *)(a1 + v66);
  v69 = (_QWORD *)(a2 + v66);
  v70 = v69[1];
  *v68 = *v69;
  v68[1] = v70;
  v71 = (_QWORD *)(a1 + v67);
  v72 = (_QWORD *)(a2 + v67);
  v73 = *(_QWORD *)(a2 + v67 + 8);
  swift_bridgeObjectRetain(v70);
  if (v73)
  {
    *v71 = *v72;
    v71[1] = v73;
    v74 = v72[3];
    v71[2] = v72[2];
    v71[3] = v74;
    v75 = v72[4];
    v76 = v72[5];
    v71[4] = v75;
    v71[5] = v76;
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v76);
  }
  else
  {
    v77 = *((_OWORD *)v72 + 1);
    *(_OWORD *)v71 = *(_OWORD *)v72;
    *((_OWORD *)v71 + 1) = v77;
    *((_OWORD *)v71 + 2) = *((_OWORD *)v72 + 2);
  }
  v78 = v18[10];
  v79 = a1 + v78;
  v80 = a2 + v78;
  v81 = type metadata accessor for ServerStatusCode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v79, v80, v81);
  v82 = v18[11];
  v83 = *(_QWORD *)(a2 + v82);
  *(_QWORD *)(a1 + v82) = v83;
  swift_bridgeObjectRetain(v83);
  return a1;
}

uint64_t sub_1004F3BA0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, int *);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(const void *, uint64_t, uint64_t, __n128);
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t (*v39)(void *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  __int128 v70;
  void (*v71)(uint64_t, _QWORD, uint64_t, int *, __n128);
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 *v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  __int128 v103;
  uint64_t v104;
  char *v105;
  char *v106;
  int *v107;
  uint64_t v108;
  uint64_t (*v109)(char *, uint64_t, int *);
  int v110;
  int v111;
  uint64_t v112;
  void (*v113)(char *, char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  void (*v133)(char *, char *, uint64_t);
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const void *v143;
  void *__dst;
  uint64_t v145;
  uint64_t v146;
  int *v147;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  v7 = a2[3];
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
  *(_BYTE *)(a1 + 34) = *((_BYTE *)a2 + 34);
  *(_BYTE *)(a1 + 35) = *((_BYTE *)a2 + 35);
  *(_BYTE *)(a1 + 36) = *((_BYTE *)a2 + 36);
  *(_BYTE *)(a1 + 37) = *((_BYTE *)a2 + 37);
  *(_BYTE *)(a1 + 38) = *((_BYTE *)a2 + 38);
  *(_BYTE *)(a1 + 39) = *((_BYTE *)a2 + 39);
  *(_QWORD *)(a1 + 40) = a2[5];
  v8 = a2[6];
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = a2[7];
  v9 = a2[8];
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  v10 = a2[9];
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  *(_QWORD *)(a1 + 72) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = (uint64_t)a2 + v11;
  v14 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      v145 = v15;
      v147 = a3;
      *(_QWORD *)v12 = *(_QWORD *)v13;
      v19 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v12 + 8) = v19;
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
      v20 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v12 + 24) = v20;
      *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
      v21 = *(_QWORD *)(v13 + 40);
      *(_QWORD *)(v12 + 40) = v21;
      *(_WORD *)(v12 + 48) = *(_WORD *)(v13 + 48);
      *(_QWORD *)(v12 + 56) = *(_QWORD *)(v13 + 56);
      v22 = *(_QWORD *)(v13 + 64);
      *(_BYTE *)(v12 + 72) = *(_BYTE *)(v13 + 72);
      *(_QWORD *)(v12 + 64) = v22;
      v23 = v14[10];
      v143 = (const void *)(v13 + v23);
      __dst = (void *)(v12 + v23);
      v24 = type metadata accessor for URL(0);
      v25 = *(_QWORD *)(v24 - 8);
      v26 = v19;
      v27 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v25 + 48);
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v20);
      v28 = swift_bridgeObjectRetain(v21);
      if (v27(v143, 1, v24, v28))
      {
        v29 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(__dst, v143, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(__dst, v143, v24);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v24);
      }
      v42 = v25;
      v43 = v14[11];
      v44 = (void *)(v12 + v43);
      v45 = (const void *)(v13 + v43);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v27)(v13 + v43, 1, v24))
      {
        v46 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v42 + 16))(v44, v45, v24);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v44, 0, 1, v24);
      }
      v47 = v14[12];
      v48 = v12 + v47;
      v49 = (uint64_t *)(v13 + v47);
      v50 = *v49;
      *(_BYTE *)(v48 + 8) = *((_BYTE *)v49 + 8);
      *(_QWORD *)v48 = v50;
      v51 = v14[13];
      v52 = (_QWORD *)(v12 + v51);
      v53 = (_QWORD *)(v13 + v51);
      *v52 = *v53;
      v54 = v53[1];
      v52[1] = v54;
      v55 = v14[14];
      v56 = *(_QWORD *)(v13 + v55);
      *(_QWORD *)(v12 + v55) = v56;
      v57 = v14[15];
      v58 = (_QWORD *)(v12 + v57);
      v59 = (_QWORD *)(v13 + v57);
      *v58 = *v59;
      v60 = v59[1];
      v58[1] = v60;
      v61 = v14[16];
      v62 = *(_QWORD *)(v13 + v61);
      *(_QWORD *)(v12 + v61) = v62;
      v63 = v14[17];
      v64 = v12 + v63;
      v65 = (__int128 *)(v13 + v63);
      v66 = *v65;
      *(_BYTE *)(v64 + 16) = *((_BYTE *)v65 + 16);
      *(_OWORD *)v64 = v66;
      v67 = v14[18];
      v68 = v12 + v67;
      v69 = (__int128 *)(v13 + v67);
      v70 = *v69;
      *(_BYTE *)(v68 + 16) = *((_BYTE *)v69 + 16);
      *(_OWORD *)v68 = v70;
      v71 = *(void (**)(uint64_t, _QWORD, uint64_t, int *, __n128))(v145 + 56);
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRetain(v60);
      v72 = swift_bridgeObjectRetain(v62);
      v71(v12, 0, 1, v14, v72);
      goto LABEL_26;
    }
LABEL_7:
    v30 = sub_10001A9A8(&qword_1010FBA50);
    memcpy((void *)v12, (const void *)v13, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_27;
  }
  if (v18)
  {
    sub_1000126B0(v12, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    goto LABEL_7;
  }
  v147 = a3;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v31 = *(_QWORD *)(v13 + 8);
  *(_QWORD *)(v12 + 8) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v13 + 16);
  v32 = *(_QWORD *)(v13 + 24);
  *(_QWORD *)(v12 + 24) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
  v33 = *(_QWORD *)(v13 + 40);
  *(_QWORD *)(v12 + 40) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease();
  *(_WORD *)(v12 + 48) = *(_WORD *)(v13 + 48);
  *(_QWORD *)(v12 + 56) = *(_QWORD *)(v13 + 56);
  v34 = *(_QWORD *)(v13 + 64);
  *(_BYTE *)(v12 + 72) = *(_BYTE *)(v13 + 72);
  *(_QWORD *)(v12 + 64) = v34;
  v35 = v14[10];
  v36 = (void *)(v12 + v35);
  v37 = (void *)(v13 + v35);
  v38 = type metadata accessor for URL(0);
  v146 = *(_QWORD *)(v38 - 8);
  v39 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v146 + 48);
  v40 = v39(v36, 1, v38);
  v41 = v39(v37, 1, v38);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(void *, void *, uint64_t))(v146 + 16))(v36, v37, v38);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v36, 0, 1, v38);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v41)
  {
    (*(void (**)(void *, uint64_t))(v146 + 8))(v36, v38);
LABEL_18:
    v73 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v146 + 24))(v36, v37, v38);
LABEL_19:
  v74 = v14[11];
  v75 = (void *)(v12 + v74);
  v76 = (void *)(v13 + v74);
  v77 = v39((void *)(v12 + v74), 1, v38);
  v78 = v39(v76, 1, v38);
  if (!v77)
  {
    if (!v78)
    {
      (*(void (**)(void *, void *, uint64_t))(v146 + 24))(v75, v76, v38);
      goto LABEL_25;
    }
    (*(void (**)(void *, uint64_t))(v146 + 8))(v75, v38);
    goto LABEL_24;
  }
  if (v78)
  {
LABEL_24:
    v79 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v146 + 16))(v75, v76, v38);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v75, 0, 1, v38);
LABEL_25:
  v80 = v14[12];
  v81 = v12 + v80;
  v82 = (uint64_t *)(v13 + v80);
  v83 = *v82;
  *(_BYTE *)(v81 + 8) = *((_BYTE *)v82 + 8);
  *(_QWORD *)v81 = v83;
  v84 = v14[13];
  v85 = (_QWORD *)(v12 + v84);
  v86 = (_QWORD *)(v13 + v84);
  *v85 = *v86;
  v87 = v86[1];
  v85[1] = v87;
  swift_bridgeObjectRetain(v87);
  swift_bridgeObjectRelease();
  v88 = v14[14];
  v89 = *(_QWORD *)(v13 + v88);
  *(_QWORD *)(v12 + v88) = v89;
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRelease();
  v90 = v14[15];
  v91 = (_QWORD *)(v12 + v90);
  v92 = (_QWORD *)(v13 + v90);
  *v91 = *v92;
  v93 = v92[1];
  v91[1] = v93;
  swift_bridgeObjectRetain(v93);
  swift_bridgeObjectRelease();
  v94 = v14[16];
  v95 = *(_QWORD *)(v13 + v94);
  *(_QWORD *)(v12 + v94) = v95;
  swift_bridgeObjectRetain(v95);
  swift_bridgeObjectRelease();
  v96 = v14[17];
  v97 = v12 + v96;
  v98 = (__int128 *)(v13 + v96);
  v99 = *v98;
  *(_BYTE *)(v97 + 16) = *((_BYTE *)v98 + 16);
  *(_OWORD *)v97 = v99;
  v100 = v14[18];
  v101 = v12 + v100;
  v102 = (__int128 *)(v13 + v100);
  v103 = *v102;
  *(_BYTE *)(v101 + 16) = *((_BYTE *)v102 + 16);
  *(_OWORD *)v101 = v103;
LABEL_26:
  a3 = v147;
LABEL_27:
  v104 = a3[7];
  v105 = (char *)(a1 + v104);
  v106 = (char *)a2 + v104;
  v107 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  v108 = *((_QWORD *)v107 - 1);
  v109 = *(uint64_t (**)(char *, uint64_t, int *))(v108 + 48);
  v110 = v109(v105, 1, v107);
  v111 = v109(v106, 1, v107);
  if (v110)
  {
    if (!v111)
    {
      v112 = type metadata accessor for URL(0);
      v113 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v112 - 8) + 16);
      v113(v105, v106, v112);
      v113(&v105[v107[5]], &v106[v107[5]], v112);
      v113(&v105[v107[6]], &v106[v107[6]], v112);
      v113(&v105[v107[7]], &v106[v107[7]], v112);
      v113(&v105[v107[8]], &v106[v107[8]], v112);
      v113(&v105[v107[9]], &v106[v107[9]], v112);
      v113(&v105[v107[10]], &v106[v107[10]], v112);
      v113(&v105[v107[11]], &v106[v107[11]], v112);
      v113(&v105[v107[12]], &v106[v107[12]], v112);
      v113(&v105[v107[13]], &v106[v107[13]], v112);
      v113(&v105[v107[14]], &v106[v107[14]], v112);
      v113(&v105[v107[15]], &v106[v107[15]], v112);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v108 + 56))(v105, 0, 1, v107);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (v111)
  {
    sub_1000126B0((uint64_t)v105, type metadata accessor for AccessoryInfoResponseContent.Assets);
LABEL_32:
    v114 = sub_10001A9A8(&qword_1010FBA48);
    memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
    goto LABEL_33;
  }
  v132 = type metadata accessor for URL(0);
  v133 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v132 - 8) + 24);
  v133(v105, v106, v132);
  v133(&v105[v107[5]], &v106[v107[5]], v132);
  v133(&v105[v107[6]], &v106[v107[6]], v132);
  v133(&v105[v107[7]], &v106[v107[7]], v132);
  v133(&v105[v107[8]], &v106[v107[8]], v132);
  v133(&v105[v107[9]], &v106[v107[9]], v132);
  v133(&v105[v107[10]], &v106[v107[10]], v132);
  v133(&v105[v107[11]], &v106[v107[11]], v132);
  v133(&v105[v107[12]], &v106[v107[12]], v132);
  v133(&v105[v107[13]], &v106[v107[13]], v132);
  v133(&v105[v107[14]], &v106[v107[14]], v132);
  v133(&v105[v107[15]], &v106[v107[15]], v132);
LABEL_33:
  v115 = a3[8];
  v116 = (_QWORD *)(a1 + v115);
  v117 = (uint64_t *)((char *)a2 + v115);
  *v116 = *v117;
  v118 = v117[1];
  v116[1] = v118;
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRelease();
  v119 = a3[9];
  v120 = (_QWORD *)(a1 + v119);
  v121 = (uint64_t *)((char *)a2 + v119);
  v122 = *(_QWORD *)(a1 + v119 + 8);
  v123 = *(uint64_t *)((char *)a2 + v119 + 8);
  if (v122)
  {
    if (v123)
    {
      *v120 = *v121;
      v124 = v121[1];
      v120[1] = v124;
      swift_bridgeObjectRetain(v124);
      swift_bridgeObjectRelease();
      v120[2] = v121[2];
      v125 = v121[3];
      v120[3] = v125;
      swift_bridgeObjectRetain(v125);
      swift_bridgeObjectRelease();
      v120[4] = v121[4];
      v126 = v121[5];
      v120[5] = v126;
      swift_bridgeObjectRetain(v126);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1004F4694(v120);
      v131 = *((_OWORD *)v121 + 1);
      v130 = *((_OWORD *)v121 + 2);
      *(_OWORD *)v120 = *(_OWORD *)v121;
      *((_OWORD *)v120 + 1) = v131;
      *((_OWORD *)v120 + 2) = v130;
    }
  }
  else if (v123)
  {
    *v120 = *v121;
    v127 = v121[1];
    v120[1] = v127;
    v120[2] = v121[2];
    v128 = v121[3];
    v120[3] = v128;
    v120[4] = v121[4];
    v129 = v121[5];
    v120[5] = v129;
    swift_bridgeObjectRetain(v127);
    swift_bridgeObjectRetain(v128);
    swift_bridgeObjectRetain(v129);
  }
  else
  {
    v134 = *(_OWORD *)v121;
    v135 = *((_OWORD *)v121 + 2);
    *((_OWORD *)v120 + 1) = *((_OWORD *)v121 + 1);
    *((_OWORD *)v120 + 2) = v135;
    *(_OWORD *)v120 = v134;
  }
  v136 = a3[10];
  v137 = a1 + v136;
  v138 = (uint64_t)a2 + v136;
  v139 = type metadata accessor for ServerStatusCode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v139 - 8) + 24))(v137, v138, v139);
  v140 = a3[11];
  v141 = *(uint64_t *)((char *)a2 + v140);
  *(_QWORD *)(a1 + v140) = v141;
  swift_bridgeObjectRetain(v141);
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_1004F4694(_QWORD *a1)
{
  destroy for AccessoryInfoResponseContent.PublicKeys(a1);
  return a1;
}

uint64_t sub_1004F46C0(uint64_t a1, __int128 *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  _OWORD *v46;
  _OWORD *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  char *__dst;

  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  v8 = *a2;
  v7 = a2[1];
  v9 = *((_QWORD *)a2 + 9);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 72) = v9;
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  v10 = a3[6];
  v11 = (_OWORD *)(a1 + v10);
  v12 = (__int128 *)((char *)a2 + v10);
  *(_OWORD *)a1 = v8;
  *(_OWORD *)(a1 + 16) = v7;
  v13 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v14 = *((_QWORD *)v13 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_10001A9A8(&qword_1010FBA50);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v16 = v12[1];
    *v11 = *v12;
    v11[1] = v16;
    v11[2] = v12[2];
    *((_WORD *)v11 + 24) = *((_WORD *)v12 + 24);
    v17 = *((_QWORD *)v12 + 8);
    *((_QWORD *)v11 + 7) = *((_QWORD *)v12 + 7);
    *((_QWORD *)v11 + 8) = v17;
    *((_BYTE *)v11 + 72) = *((_BYTE *)v12 + 72);
    v18 = v13[10];
    v55 = v14;
    __dst = (char *)v11 + v18;
    v19 = (char *)v12 + v18;
    v20 = type metadata accessor for URL(0);
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    v54 = v21;
    if (v22(v19, 1, v20))
    {
      v23 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(__dst, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
    }
    v24 = v13[11];
    v25 = (char *)v11 + v24;
    v26 = (char *)v12 + v24;
    if (v22((char *)v12 + v24, 1, v20))
    {
      v27 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v25, v26, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v25, 0, 1, v20);
    }
    v28 = v13[12];
    v29 = (char *)v11 + v28;
    v30 = (char *)v12 + v28;
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    *(_OWORD *)((char *)v11 + v13[13]) = *(_OWORD *)((char *)v12 + v13[13]);
    *(_QWORD *)((char *)v11 + v13[14]) = *(_QWORD *)((char *)v12 + v13[14]);
    *(_OWORD *)((char *)v11 + v13[15]) = *(_OWORD *)((char *)v12 + v13[15]);
    *(_QWORD *)((char *)v11 + v13[16]) = *(_QWORD *)((char *)v12 + v13[16]);
    v31 = v13[17];
    v32 = (char *)v11 + v31;
    v33 = (char *)v12 + v31;
    v32[16] = v33[16];
    *(_OWORD *)v32 = *(_OWORD *)v33;
    v34 = v13[18];
    v35 = (char *)v11 + v34;
    v36 = (char *)v12 + v34;
    v35[16] = v36[16];
    *(_OWORD *)v35 = *(_OWORD *)v36;
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v55 + 56))(v11, 0, 1, v13);
  }
  v37 = a3[7];
  v38 = (char *)(a1 + v37);
  v39 = (char *)a2 + v37;
  v40 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  v41 = *((_QWORD *)v40 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v41 + 48))(v39, 1, v40))
  {
    v42 = sub_10001A9A8(&qword_1010FBA48);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    v43 = type metadata accessor for URL(0);
    v44 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32);
    v44(v38, v39, v43);
    v44(&v38[v40[5]], &v39[v40[5]], v43);
    v44(&v38[v40[6]], &v39[v40[6]], v43);
    v44(&v38[v40[7]], &v39[v40[7]], v43);
    v44(&v38[v40[8]], &v39[v40[8]], v43);
    v44(&v38[v40[9]], &v39[v40[9]], v43);
    v44(&v38[v40[10]], &v39[v40[10]], v43);
    v44(&v38[v40[11]], &v39[v40[11]], v43);
    v44(&v38[v40[12]], &v39[v40[12]], v43);
    v44(&v38[v40[13]], &v39[v40[13]], v43);
    v44(&v38[v40[14]], &v39[v40[14]], v43);
    v44(&v38[v40[15]], &v39[v40[15]], v43);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v41 + 56))(v38, 0, 1, v40);
  }
  v45 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(__int128 *)((char *)a2 + a3[8]);
  v46 = (_OWORD *)(a1 + v45);
  v47 = (__int128 *)((char *)a2 + v45);
  v48 = v47[1];
  *v46 = *v47;
  v46[1] = v48;
  v46[2] = v47[2];
  v49 = a3[10];
  v50 = a1 + v49;
  v51 = (uint64_t)a2 + v49;
  v52 = type metadata accessor for ServerStatusCode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  return a1;
}

uint64_t sub_1004F4B1C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, int *);
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(const void *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t (*v34)(void *, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  int *v79;
  uint64_t v80;
  uint64_t (*v81)(char *, uint64_t, int *);
  int v82;
  int v83;
  uint64_t v84;
  int *v85;
  void (*v86)(char *, char *, uint64_t);
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t);
  void (**__src)(void *, const void *, uint64_t);
  void *__dst;
  _QWORD *__dsta;
  int *v110;
  int *v111;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  v9 = a3[6];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (v16)
    {
      sub_1000126B0(v10, type metadata accessor for AccessoryInfoResponseContent.Configuration);
      goto LABEL_7;
    }
    v111 = a3;
    v26 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *(_QWORD *)(v10 + 8) = v26;
    swift_bridgeObjectRelease();
    v27 = *(_QWORD *)(v11 + 24);
    *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v10 + 24) = v27;
    swift_bridgeObjectRelease();
    v28 = *(_QWORD *)(v11 + 40);
    *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
    *(_QWORD *)(v10 + 40) = v28;
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 48) = *(_WORD *)(v11 + 48);
    v29 = *(_QWORD *)(v11 + 64);
    *(_QWORD *)(v10 + 56) = *(_QWORD *)(v11 + 56);
    *(_QWORD *)(v10 + 64) = v29;
    *(_BYTE *)(v10 + 72) = *(_BYTE *)(v11 + 72);
    v30 = v12[10];
    v31 = (void *)(v10 + v30);
    v32 = (void *)(v11 + v30);
    v33 = type metadata accessor for URL(0);
    __dsta = *(_QWORD **)(v33 - 8);
    v34 = (uint64_t (*)(void *, uint64_t, uint64_t))__dsta[6];
    v35 = v34(v31, 1, v33);
    v36 = v34(v32, 1, v33);
    if (v35)
    {
      if (!v36)
      {
        ((void (*)(void *, const void *, uint64_t))__dsta[4])(v31, v32, v33);
        ((void (*)(void *, _QWORD, uint64_t, uint64_t))__dsta[7])(v31, 0, 1, v33);
        goto LABEL_19;
      }
    }
    else
    {
      if (!v36)
      {
        ((void (*)(void *, const void *, uint64_t))__dsta[5])(v31, v32, v33);
LABEL_19:
        v51 = v12[11];
        v52 = (void *)(v10 + v51);
        v53 = (void *)(v11 + v51);
        v54 = v34((void *)(v10 + v51), 1, v33);
        v55 = v34(v53, 1, v33);
        if (v54)
        {
          a3 = v111;
          if (!v55)
          {
            ((void (*)(void *, const void *, uint64_t))__dsta[4])(v52, v53, v33);
            ((void (*)(void *, _QWORD, uint64_t, uint64_t))__dsta[7])(v52, 0, 1, v33);
LABEL_25:
            v57 = v12[12];
            v58 = v10 + v57;
            v59 = v11 + v57;
            *(_QWORD *)v58 = *(_QWORD *)v59;
            *(_BYTE *)(v58 + 8) = *(_BYTE *)(v59 + 8);
            v60 = v12[13];
            v61 = (_QWORD *)(v10 + v60);
            v62 = (uint64_t *)(v11 + v60);
            v64 = *v62;
            v63 = v62[1];
            *v61 = v64;
            v61[1] = v63;
            swift_bridgeObjectRelease();
            *(_QWORD *)(v10 + v12[14]) = *(_QWORD *)(v11 + v12[14]);
            swift_bridgeObjectRelease();
            v65 = v12[15];
            v66 = (_QWORD *)(v10 + v65);
            v67 = (uint64_t *)(v11 + v65);
            v69 = *v67;
            v68 = v67[1];
            *v66 = v69;
            v66[1] = v68;
            swift_bridgeObjectRelease();
            *(_QWORD *)(v10 + v12[16]) = *(_QWORD *)(v11 + v12[16]);
            swift_bridgeObjectRelease();
            v70 = v12[17];
            v71 = v10 + v70;
            v72 = v11 + v70;
            *(_OWORD *)v71 = *(_OWORD *)v72;
            *(_BYTE *)(v71 + 16) = *(_BYTE *)(v72 + 16);
            v73 = v12[18];
            v74 = v10 + v73;
            v75 = v11 + v73;
            *(_BYTE *)(v74 + 16) = *(_BYTE *)(v75 + 16);
            *(_OWORD *)v74 = *(_OWORD *)v75;
            goto LABEL_26;
          }
        }
        else
        {
          a3 = v111;
          if (!v55)
          {
            ((void (*)(void *, const void *, uint64_t))__dsta[5])(v52, v53, v33);
            goto LABEL_25;
          }
          ((void (*)(void *, uint64_t))__dsta[1])(v52, v33);
        }
        v56 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
        goto LABEL_25;
      }
      ((void (*)(void *, uint64_t))__dsta[1])(v31, v33);
    }
    v50 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    goto LABEL_19;
  }
  if (v16)
  {
LABEL_7:
    v25 = sub_10001A9A8(&qword_1010FBA50);
    memcpy((void *)v10, (const void *)v11, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_26;
  }
  v17 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v17;
  *(_OWORD *)(v10 + 32) = *(_OWORD *)(v11 + 32);
  *(_WORD *)(v10 + 48) = *(_WORD *)(v11 + 48);
  v18 = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v10 + 56) = *(_QWORD *)(v11 + 56);
  *(_QWORD *)(v10 + 64) = v18;
  *(_BYTE *)(v10 + 72) = *(_BYTE *)(v11 + 72);
  v19 = v12[10];
  __dst = (void *)(v10 + v19);
  v110 = a3;
  v20 = (const void *)(v11 + v19);
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48);
  __src = (void (**)(void *, const void *, uint64_t))v22;
  if (v23(v20, 1, v21))
  {
    v24 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(__dst, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(__dst, v20, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
  }
  v37 = v12[11];
  v38 = (void *)(v10 + v37);
  v39 = (const void *)(v11 + v37);
  if (v23((const void *)(v11 + v37), 1, v21))
  {
    v40 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    __src[4](v38, v39, v21);
    ((void (*)(void *, _QWORD, uint64_t, uint64_t))__src[7])(v38, 0, 1, v21);
  }
  v41 = v12[12];
  v42 = v10 + v41;
  v43 = v11 + v41;
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
  *(_OWORD *)(v10 + v12[13]) = *(_OWORD *)(v11 + v12[13]);
  *(_QWORD *)(v10 + v12[14]) = *(_QWORD *)(v11 + v12[14]);
  *(_OWORD *)(v10 + v12[15]) = *(_OWORD *)(v11 + v12[15]);
  *(_QWORD *)(v10 + v12[16]) = *(_QWORD *)(v11 + v12[16]);
  v44 = v12[17];
  v45 = v10 + v44;
  v46 = v11 + v44;
  *(_BYTE *)(v45 + 16) = *(_BYTE *)(v46 + 16);
  *(_OWORD *)v45 = *(_OWORD *)v46;
  v47 = v12[18];
  v48 = v10 + v47;
  v49 = v11 + v47;
  *(_BYTE *)(v48 + 16) = *(_BYTE *)(v49 + 16);
  *(_OWORD *)v48 = *(_OWORD *)v49;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  a3 = v110;
LABEL_26:
  v76 = a3[7];
  v77 = (char *)(a1 + v76);
  v78 = (char *)(a2 + v76);
  v79 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  v80 = *((_QWORD *)v79 - 1);
  v81 = *(uint64_t (**)(char *, uint64_t, int *))(v80 + 48);
  v82 = v81(v77, 1, v79);
  v83 = v81(v78, 1, v79);
  if (v82)
  {
    if (!v83)
    {
      v84 = type metadata accessor for URL(0);
      v85 = a3;
      v86 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 32);
      v86(v77, v78, v84);
      v86(&v77[v79[5]], &v78[v79[5]], v84);
      v86(&v77[v79[6]], &v78[v79[6]], v84);
      v86(&v77[v79[7]], &v78[v79[7]], v84);
      v86(&v77[v79[8]], &v78[v79[8]], v84);
      v86(&v77[v79[9]], &v78[v79[9]], v84);
      v86(&v77[v79[10]], &v78[v79[10]], v84);
      v86(&v77[v79[11]], &v78[v79[11]], v84);
      v86(&v77[v79[12]], &v78[v79[12]], v84);
      v86(&v77[v79[13]], &v78[v79[13]], v84);
      v86(&v77[v79[14]], &v78[v79[14]], v84);
      v86(&v77[v79[15]], &v78[v79[15]], v84);
      a3 = v85;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v80 + 56))(v77, 0, 1, v79);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v83)
  {
    sub_1000126B0((uint64_t)v77, type metadata accessor for AccessoryInfoResponseContent.Assets);
LABEL_31:
    v87 = sub_10001A9A8(&qword_1010FBA48);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    goto LABEL_32;
  }
  v105 = type metadata accessor for URL(0);
  v106 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 40);
  v106(v77, v78, v105);
  v106(&v77[v79[5]], &v78[v79[5]], v105);
  v106(&v77[v79[6]], &v78[v79[6]], v105);
  v106(&v77[v79[7]], &v78[v79[7]], v105);
  v106(&v77[v79[8]], &v78[v79[8]], v105);
  v106(&v77[v79[9]], &v78[v79[9]], v105);
  v106(&v77[v79[10]], &v78[v79[10]], v105);
  v106(&v77[v79[11]], &v78[v79[11]], v105);
  v106(&v77[v79[12]], &v78[v79[12]], v105);
  v106(&v77[v79[13]], &v78[v79[13]], v105);
  v106(&v77[v79[14]], &v78[v79[14]], v105);
  v106(&v77[v79[15]], &v78[v79[15]], v105);
LABEL_32:
  v88 = a3[8];
  v89 = (_QWORD *)(a1 + v88);
  v90 = (uint64_t *)(a2 + v88);
  v92 = *v90;
  v91 = v90[1];
  *v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease();
  v93 = a3[9];
  v94 = a1 + v93;
  v95 = a2 + v93;
  if (!*(_QWORD *)(a1 + v93 + 8))
  {
LABEL_36:
    v99 = *(_OWORD *)(v95 + 16);
    *(_OWORD *)v94 = *(_OWORD *)v95;
    *(_OWORD *)(v94 + 16) = v99;
    *(_OWORD *)(v94 + 32) = *(_OWORD *)(v95 + 32);
    goto LABEL_37;
  }
  v96 = *(_QWORD *)(v95 + 8);
  if (!v96)
  {
    sub_1004F4694((_QWORD *)v94);
    goto LABEL_36;
  }
  *(_QWORD *)v94 = *(_QWORD *)v95;
  *(_QWORD *)(v94 + 8) = v96;
  swift_bridgeObjectRelease();
  v97 = *(_QWORD *)(v95 + 24);
  *(_QWORD *)(v94 + 16) = *(_QWORD *)(v95 + 16);
  *(_QWORD *)(v94 + 24) = v97;
  swift_bridgeObjectRelease();
  v98 = *(_QWORD *)(v95 + 40);
  *(_QWORD *)(v94 + 32) = *(_QWORD *)(v95 + 32);
  *(_QWORD *)(v94 + 40) = v98;
  swift_bridgeObjectRelease();
LABEL_37:
  v100 = a3[10];
  v101 = a1 + v100;
  v102 = a2 + v100;
  v103 = type metadata accessor for ServerStatusCode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 40))(v101, v102, v103);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1004F5418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004F5424);
}

uint64_t sub_1004F5424(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10001A9A8(&qword_1010FBA50);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = sub_10001A9A8(&qword_1010FBA48);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        v10 = type metadata accessor for ServerStatusCode(0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1004F54F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004F54FC);
}

uint64_t sub_1004F54FC(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v8 = sub_10001A9A8(&qword_1010FBA50);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = sub_10001A9A8(&qword_1010FBA48);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v10 = type metadata accessor for ServerStatusCode(0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[10];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for AccessoryInfoResponseContent(uint64_t a1)
{
  return sub_10001B630(a1, (uint64_t *)&unk_1010FE018, (uint64_t)&nominal type descriptor for AccessoryInfoResponseContent);
}

void sub_1004F55D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[8];

  v8[0] = "H";
  v8[1] = &unk_100E41388;
  sub_100149C5C(319, &qword_1010FE028, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  if (v3 <= 0x3F)
  {
    v8[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_100149C5C(319, (unint64_t *)&unk_1010FE030, type metadata accessor for AccessoryInfoResponseContent.Assets);
    if (v5 <= 0x3F)
    {
      v8[3] = *(_QWORD *)(v4 - 8) + 64;
      v8[4] = &unk_100E413A0;
      v8[5] = &unk_100E413B8;
      v6 = type metadata accessor for ServerStatusCode(319);
      if (v7 <= 0x3F)
      {
        v8[6] = *(_QWORD *)(v6 - 8) + 64;
        v8[7] = &unk_100E413D0;
        swift_initStructMetadata(a1, 256, 8, v8, a1 + 16);
      }
    }
  }
}

uint64_t destroy for AccessoryInfoResponseContent.PublicKeys(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *initializeWithCopy for AccessoryInfoResponseContent.PublicKeys(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for AccessoryInfoResponseContent.PublicKeys(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for AccessoryInfoResponseContent.PublicKeys(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryInfoResponseContent.PublicKeys(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoResponseContent.PublicKeys(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponseContent.PublicKeys()
{
  return &type metadata for AccessoryInfoResponseContent.PublicKeys;
}

uint64_t *sub_1004F58D0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v8((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    v8((uint64_t *)((char *)a1 + a3[7]), (uint64_t *)((char *)a2 + a3[7]), v7);
    v8((uint64_t *)((char *)a1 + a3[8]), (uint64_t *)((char *)a2 + a3[8]), v7);
    v8((uint64_t *)((char *)a1 + a3[9]), (uint64_t *)((char *)a2 + a3[9]), v7);
    v8((uint64_t *)((char *)a1 + a3[10]), (uint64_t *)((char *)a2 + a3[10]), v7);
    v8((uint64_t *)((char *)a1 + a3[11]), (uint64_t *)((char *)a2 + a3[11]), v7);
    v8((uint64_t *)((char *)a1 + a3[12]), (uint64_t *)((char *)a2 + a3[12]), v7);
    v8((uint64_t *)((char *)a1 + a3[13]), (uint64_t *)((char *)a2 + a3[13]), v7);
    v8((uint64_t *)((char *)a1 + a3[14]), (uint64_t *)((char *)a2 + a3[14]), v7);
    v8((uint64_t *)((char *)a1 + a3[15]), (uint64_t *)((char *)a2 + a3[15]), v7);
  }
  return a1;
}

uint64_t sub_1004F5A34(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = type metadata accessor for URL(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);
  v6(a1 + a2[5], v4);
  v6(a1 + a2[6], v4);
  v6(a1 + a2[7], v4);
  v6(a1 + a2[8], v4);
  v6(a1 + a2[9], v4);
  v6(a1 + a2[10], v4);
  v6(a1 + a2[11], v4);
  v6(a1 + a2[12], v4);
  v6(a1 + a2[13], v4);
  v6(a1 + a2[14], v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + a2[15], v4);
}

uint64_t sub_1004F5B64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for URL(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  v7(a1 + a3[12], a2 + a3[12], v6);
  v7(a1 + a3[13], a2 + a3[13], v6);
  v7(a1 + a3[14], a2 + a3[14], v6);
  v7(a1 + a3[15], a2 + a3[15], v6);
  return a1;
}

uint64_t sub_1004F5C9C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for URL(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  v7(a1 + a3[12], a2 + a3[12], v6);
  v7(a1 + a3[13], a2 + a3[13], v6);
  v7(a1 + a3[14], a2 + a3[14], v6);
  v7(a1 + a3[15], a2 + a3[15], v6);
  return a1;
}

uint64_t sub_1004F5DD4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for URL(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  v7(a1 + a3[12], a2 + a3[12], v6);
  v7(a1 + a3[13], a2 + a3[13], v6);
  v7(a1 + a3[14], a2 + a3[14], v6);
  v7(a1 + a3[15], a2 + a3[15], v6);
  return a1;
}

uint64_t sub_1004F5F0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for URL(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v7(a1 + a3[8], a2 + a3[8], v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v7(a1 + a3[10], a2 + a3[10], v6);
  v7(a1 + a3[11], a2 + a3[11], v6);
  v7(a1 + a3[12], a2 + a3[12], v6);
  v7(a1 + a3[13], a2 + a3[13], v6);
  v7(a1 + a3[14], a2 + a3[14], v6);
  v7(a1 + a3[15], a2 + a3[15], v6);
  return a1;
}

uint64_t sub_1004F6044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004F6050);
}

uint64_t sub_1004F6050(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1004F608C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004F6098);
}

uint64_t sub_1004F6098(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1004F60D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[12];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    v4[2] = v4[0];
    v4[3] = v4[0];
    v4[4] = v4[0];
    v4[5] = v4[0];
    v4[6] = v4[0];
    v4[7] = v4[0];
    v4[8] = v4[0];
    v4[9] = v4[0];
    v4[10] = v4[0];
    v4[11] = v4[0];
    swift_initStructMetadata(a1, 256, 12, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_1004F6154(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[4];
    v10 = a2[5];
    *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    v11 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v11;
    v12 = a3[10];
    v13 = (void *)(a1 + v12);
    v14 = (char *)a2 + v12;
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    v15 = type metadata accessor for URL(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = v7;
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v16 + 48);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v8);
    v19 = swift_bridgeObjectRetain(v10);
    if (v18(v14, 1, v15, v19))
    {
      v20 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v22 = a3[11];
    v23 = (char *)v4 + v22;
    v24 = (char *)a2 + v22;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v18)((char *)a2 + v22, 1, v15))
    {
      v25 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v23, v24, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v23, 0, 1, v15);
    }
    v26 = a3[12];
    v27 = a3[13];
    v28 = (char *)v4 + v26;
    v29 = (uint64_t)a2 + v26;
    *(_QWORD *)v28 = *(_QWORD *)v29;
    v28[8] = *(_BYTE *)(v29 + 8);
    v30 = (_QWORD *)((char *)v4 + v27);
    v31 = (uint64_t *)((char *)a2 + v27);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    v33 = a3[14];
    v34 = a3[15];
    v35 = *(uint64_t *)((char *)a2 + v33);
    *(_QWORD *)((char *)v4 + v33) = v35;
    v36 = (_QWORD *)((char *)v4 + v34);
    v37 = (uint64_t *)((char *)a2 + v34);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    v39 = a3[16];
    v40 = a3[17];
    v41 = *(uint64_t *)((char *)a2 + v39);
    *(_QWORD *)((char *)v4 + v39) = v41;
    v42 = (char *)v4 + v40;
    v43 = (uint64_t)a2 + v40;
    *(_OWORD *)v42 = *(_OWORD *)v43;
    v42[16] = *(_BYTE *)(v43 + 16);
    v44 = a3[18];
    v45 = (char *)v4 + v44;
    v46 = (uint64_t)a2 + v44;
    *(_OWORD *)v45 = *(_OWORD *)v46;
    v45[16] = *(_BYTE *)(v46 + 16);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v41);
  }
  return v4;
}

uint64_t sub_1004F63AC(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(char *, uint64_t, uint64_t);
  char *v8;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = (char *)a1 + a2[10];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v8 = (char *)a1 + a2[11];
  if (!v7(v8, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[14]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[15] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[16]));
}

uint64_t sub_1004F6494(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  v11 = a3[10];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = v6;
  v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v15 + 48);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v7);
  v18 = swift_bridgeObjectRetain(v9);
  if (v17(v13, 1, v14, v18))
  {
    v19 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v20 = a3[11];
  v21 = (void *)(a1 + v20);
  v22 = (const void *)(a2 + v20);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v17)(a2 + v20, 1, v14))
  {
    v23 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v21, v22, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v21, 0, 1, v14);
  }
  v24 = a3[12];
  v25 = a3[13];
  v26 = a1 + v24;
  v27 = a2 + v24;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_BYTE *)(v26 + 8) = *(_BYTE *)(v27 + 8);
  v28 = (_QWORD *)(a1 + v25);
  v29 = (_QWORD *)(a2 + v25);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v31 = a3[14];
  v32 = a3[15];
  v33 = *(_QWORD *)(a2 + v31);
  *(_QWORD *)(a1 + v31) = v33;
  v34 = (_QWORD *)(a1 + v32);
  v35 = (_QWORD *)(a2 + v32);
  v36 = v35[1];
  *v34 = *v35;
  v34[1] = v36;
  v37 = a3[16];
  v38 = a3[17];
  v39 = *(_QWORD *)(a2 + v37);
  *(_QWORD *)(a1 + v37) = v39;
  v40 = a1 + v38;
  v41 = a2 + v38;
  *(_OWORD *)v40 = *(_OWORD *)v41;
  *(_BYTE *)(v40 + 16) = *(_BYTE *)(v41 + 16);
  v42 = a3[18];
  v43 = a1 + v42;
  v44 = a2 + v42;
  *(_OWORD *)v43 = *(_OWORD *)v44;
  *(_BYTE *)(v43 + 16) = *(_BYTE *)(v44 + 16);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v39);
  return a1;
}

uint64_t sub_1004F66C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  __int128 v48;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v9;
  v10 = a3[10];
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  v19 = a3[11];
  v20 = (void *)(a1 + v19);
  v21 = (void *)(a2 + v19);
  v22 = v15((void *)(a1 + v19), 1, v13);
  v23 = v15(v21, 1, v13);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v20, v21, v13);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v20, v13);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    v24 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v20, v21, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v20, 0, 1, v13);
LABEL_13:
  v25 = a3[12];
  v26 = a1 + v25;
  v27 = (uint64_t *)(a2 + v25);
  v28 = *v27;
  *(_BYTE *)(v26 + 8) = *((_BYTE *)v27 + 8);
  *(_QWORD *)v26 = v28;
  v29 = a3[13];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (_QWORD *)(a2 + v29);
  *v30 = *v31;
  v32 = v31[1];
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease();
  v33 = a3[14];
  v34 = *(_QWORD *)(a2 + v33);
  *(_QWORD *)(a1 + v33) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease();
  v35 = a3[15];
  v36 = (_QWORD *)(a1 + v35);
  v37 = (_QWORD *)(a2 + v35);
  *v36 = *v37;
  v38 = v37[1];
  v36[1] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease();
  v39 = a3[16];
  v40 = *(_QWORD *)(a2 + v39);
  *(_QWORD *)(a1 + v39) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease();
  v41 = a3[17];
  v42 = a1 + v41;
  v43 = (__int128 *)(a2 + v41);
  v44 = *v43;
  *(_BYTE *)(v42 + 16) = *((_BYTE *)v43 + 16);
  *(_OWORD *)v42 = v44;
  v45 = a3[18];
  v46 = a1 + v45;
  v47 = (__int128 *)(a2 + v45);
  v48 = *v47;
  *(_BYTE *)(v46 + 16) = *((_BYTE *)v47 + 16);
  *(_OWORD *)v46 = v48;
  return a1;
}

uint64_t sub_1004F69E8(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(const void *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v9 = a3[10];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  *(_OWORD *)(a1 + 32) = v7;
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v11, 1, v12))
  {
    v15 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v16 = a3[11];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  if (v14((const void *)(a2 + v16), 1, v12))
  {
    v19 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v17, v18, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
  }
  v20 = a3[12];
  v21 = a3[13];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(_OWORD *)(a1 + v21) = *(_OWORD *)(a2 + v21);
  v24 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_OWORD *)(a1 + v24) = *(_OWORD *)(a2 + v24);
  v25 = a3[17];
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  v26 = a1 + v25;
  v27 = a2 + v25;
  *(_OWORD *)v26 = *(_OWORD *)v27;
  *(_BYTE *)(v26 + 16) = *(_BYTE *)(v27 + 16);
  v28 = a3[18];
  v29 = a1 + v28;
  v30 = a2 + v28;
  *(_OWORD *)v29 = *(_OWORD *)v30;
  *(_BYTE *)(v29 + 16) = *(_BYTE *)(v30 + 16);
  return a1;
}

uint64_t sub_1004F6BBC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v10 = a3[10];
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
LABEL_7:
  v19 = a3[11];
  v20 = (void *)(a1 + v19);
  v21 = (void *)(a2 + v19);
  v22 = v15((void *)(a1 + v19), 1, v13);
  v23 = v15(v21, 1, v13);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v20, v21, v13);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v20, v13);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    v24 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v20, v21, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v20, 0, 1, v13);
LABEL_13:
  v25 = a3[12];
  v26 = a3[13];
  v27 = a1 + v25;
  v28 = a2 + v25;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = (_QWORD *)(a1 + v26);
  v30 = (uint64_t *)(a2 + v26);
  v32 = *v30;
  v31 = v30[1];
  *v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  swift_bridgeObjectRelease();
  v33 = a3[15];
  v34 = (_QWORD *)(a1 + v33);
  v35 = (uint64_t *)(a2 + v33);
  v37 = *v35;
  v36 = v35[1];
  *v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[16]) = *(_QWORD *)(a2 + a3[16]);
  swift_bridgeObjectRelease();
  v38 = a3[17];
  v39 = a3[18];
  v40 = a1 + v38;
  v41 = a2 + v38;
  *(_OWORD *)v40 = *(_OWORD *)v41;
  *(_BYTE *)(v40 + 16) = *(_BYTE *)(v41 + 16);
  v42 = a1 + v39;
  v43 = a2 + v39;
  *(_OWORD *)v42 = *(_OWORD *)v43;
  *(_BYTE *)(v42 + 16) = *(_BYTE *)(v43 + 16);
  return a1;
}

uint64_t sub_1004F6E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004F6E80);
}

uint64_t sub_1004F6E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10001A9A8(&qword_1010FBA40);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t sub_1004F6F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004F6F0C);
}

uint64_t sub_1004F6F0C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_10001A9A8(&qword_1010FBA40);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

void sub_1004F6F84(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v4[0] = &unk_100E413A0;
  v4[1] = &unk_100E41408;
  v4[2] = &unk_100E41408;
  v4[3] = &unk_100E41420;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = &unk_100E41438;
  sub_100149C5C(319, (unint64_t *)&qword_1010FCE00, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    v7 = &unk_100E41438;
    v8 = &unk_100E41408;
    v9 = &unk_100E413D0;
    v10 = &unk_100E41408;
    v11 = &unk_100E413D0;
    v12 = &unk_100E41450;
    v13 = &unk_100E41450;
    swift_initStructMetadata(a1, 256, 15, v4, a1 + 16);
  }
}

uint64_t sub_1004F705C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  uint64_t result;
  void (*v45)(char *, char *, uint64_t);
  void (*v46)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v47;
  int *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int *v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;

  v76 = a1;
  v1 = sub_10001A9A8(&qword_1010FBA48);
  __chkstk_darwin(v1);
  v75 = (char *)&v74 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_1010FBA40);
  v4 = __chkstk_darwin(v3);
  v77 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v78 = (char *)&v74 - v7;
  v8 = __chkstk_darwin(v6);
  v80 = (char *)&v74 - v9;
  v10 = __chkstk_darwin(v8);
  v81 = (char *)&v74 - v11;
  v12 = __chkstk_darwin(v10);
  v82 = (char *)&v74 - v13;
  v14 = __chkstk_darwin(v12);
  v83 = (char *)&v74 - v15;
  v16 = __chkstk_darwin(v14);
  v84 = (char *)&v74 - v17;
  v18 = __chkstk_darwin(v16);
  v85 = (char *)&v74 - v19;
  v20 = __chkstk_darwin(v18);
  v86 = (char *)&v74 - v21;
  v22 = __chkstk_darwin(v20);
  v87 = (char *)&v74 - v23;
  v24 = __chkstk_darwin(v22);
  v88 = (char *)&v74 - v25;
  v26 = __chkstk_darwin(v24);
  v89 = (char *)&v74 - v27;
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v74 - v29;
  v31 = __chkstk_darwin(v28);
  v79 = (char *)&v74 - v32;
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v74 - v34;
  __chkstk_darwin(v33);
  v37 = (char *)&v74 - v36;
  v38 = sub_10001A9A8(&qword_1010FBA50);
  __chkstk_darwin(v38);
  v40 = (char *)&v74 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)(0xD000000000000011, 0x8000000100ED9230);
  v41 = type metadata accessor for URL(0);
  v42 = *(_QWORD **)(v41 - 8);
  v43 = (uint64_t (*)(char *, uint64_t, uint64_t))v42[6];
  result = v43(v35, 1, v41);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_17;
  }
  v45 = (void (*)(char *, char *, uint64_t))v42[4];
  v45(v37, v35, v41);
  v46 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v42[7];
  v46(v37, 0, 1, v41);
  URL.init(string:)(0xD000000000000011, 0x8000000100ED9230);
  result = v43(v30, 1, v41);
  if ((_DWORD)result == 1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v47 = (uint64_t)v79;
  v45(v79, v30, v41);
  v46((char *)v47, 0, 1, v41);
  *(_OWORD *)v40 = xmmword_100E411F0;
  *((_QWORD *)v40 + 2) = 0x6E6F796E6143;
  *((_QWORD *)v40 + 3) = 0xE600000000000000;
  strcpy(v40 + 32, "Endurace CF7");
  v40[45] = 0;
  *((_WORD *)v40 + 23) = -5120;
  *((_WORD *)v40 + 24) = 0;
  *(_OWORD *)(v40 + 56) = xmmword_100E41200;
  v40[72] = 0;
  v48 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  sub_100005CF0((uint64_t)v37, (uint64_t)&v40[v48[10]], &qword_1010FBA40);
  sub_100005CF0(v47, (uint64_t)&v40[v48[11]], &qword_1010FBA40);
  v49 = &v40[v48[12]];
  *(_QWORD *)v49 = 0;
  v49[8] = 0;
  v50 = &v40[v48[13]];
  *(_QWORD *)v50 = 0xD000000000000012;
  *((_QWORD *)v50 + 1) = 0x8000000100ED9250;
  *(_QWORD *)&v40[v48[14]] = &off_1010496C8;
  v51 = &v40[v48[15]];
  *(_QWORD *)v51 = 0xD000000000000010;
  *((_QWORD *)v51 + 1) = 0x8000000100ED9270;
  *(_QWORD *)&v40[v48[16]] = &off_1010496F8;
  v52 = &v40[v48[17]];
  *(_QWORD *)v52 = 0;
  *((_QWORD *)v52 + 1) = 0;
  v52[16] = 1;
  v53 = &v40[v48[18]];
  *(_QWORD *)v53 = 0;
  *((_QWORD *)v53 + 1) = 0;
  v53[16] = 1;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(*((_QWORD *)v48 - 1) + 56))(v40, 0, 1, v48);
  v54 = v89;
  URL.init(string:)(0xD00000000000005FLL, 0x8000000100ED9290);
  result = v43(v54, 1, v41);
  v55 = v80;
  if ((_DWORD)result == 1)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v56 = v88;
  URL.init(string:)(0xD00000000000005CLL, 0x8000000100ED92F0);
  result = v43(v56, 1, v41);
  v57 = v78;
  if ((_DWORD)result == 1)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v58 = v87;
  URL.init(string:)(0xD000000000000063, 0x8000000100ED9350);
  result = v43(v58, 1, v41);
  if ((_DWORD)result == 1)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v59 = v86;
  URL.init(string:)(0xD000000000000060, 0x8000000100ED93C0);
  result = v43(v59, 1, v41);
  if ((_DWORD)result == 1)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v60 = v85;
  URL.init(string:)(0xD000000000000063, 0x8000000100ED9430);
  result = v43(v60, 1, v41);
  if ((_DWORD)result == 1)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v61 = v84;
  URL.init(string:)(0xD000000000000060, 0x8000000100ED94A0);
  result = v43(v61, 1, v41);
  if ((_DWORD)result == 1)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v62 = v83;
  URL.init(string:)(0xD000000000000062, 0x8000000100ED9510);
  result = v43(v62, 1, v41);
  if ((_DWORD)result == 1)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v63 = v82;
  URL.init(string:)(0xD000000000000062, 0x8000000100ED9510);
  result = v43(v63, 1, v41);
  if ((_DWORD)result == 1)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v64 = v81;
  URL.init(string:)(0xD000000000000062, 0x8000000100ED9510);
  result = v43(v64, 1, v41);
  if ((_DWORD)result == 1)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  URL.init(string:)(0xD000000000000062, 0x8000000100ED9510);
  result = v43(v55, 1, v41);
  if ((_DWORD)result == 1)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  URL.init(string:)(0xD000000000000062, 0x8000000100ED9510);
  result = v43(v57, 1, v41);
  if ((_DWORD)result == 1)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v65 = v77;
  URL.init(string:)(0xD000000000000062, 0x8000000100ED9510);
  result = v43(v65, 1, v41);
  if ((_DWORD)result != 1)
  {
    v66 = (uint64_t)v75;
    v45(v75, v89, v41);
    v67 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0);
    v45((char *)(v66 + v67[5]), v88, v41);
    v45((char *)(v66 + v67[6]), v87, v41);
    v45((char *)(v66 + v67[7]), v86, v41);
    v45((char *)(v66 + v67[8]), v85, v41);
    v45((char *)(v66 + v67[9]), v84, v41);
    v45((char *)(v66 + v67[10]), v83, v41);
    v45((char *)(v66 + v67[11]), v82, v41);
    v45((char *)(v66 + v67[12]), v81, v41);
    v45((char *)(v66 + v67[13]), v55, v41);
    v45((char *)(v66 + v67[14]), v57, v41);
    v45((char *)(v66 + v67[15]), v65, v41);
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v67 - 1) + 56))(v66, 0, 1, v67);
    v68 = (int *)type metadata accessor for AccessoryInfoResponseContent(0);
    v69 = v76;
    v70 = v76 + v68[10];
    v71 = enum case for ServerStatusCode.success(_:);
    v72 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 104))(v70, v71, v72);
    *(_QWORD *)v69 = 0;
    *(_BYTE *)(v69 + 8) = 1;
    *(_QWORD *)(v69 + 16) = 0x64695F796D6D7564;
    *(_QWORD *)(v69 + 24) = 0xE800000000000000;
    *(_BYTE *)(v69 + 32) = 1;
    *(_DWORD *)(v69 + 33) = 33686018;
    *(_DWORD *)(v69 + 36) = 33686018;
    *(_OWORD *)(v69 + 40) = 0u;
    *(_OWORD *)(v69 + 56) = 0u;
    *(_QWORD *)(v69 + 72) = 0x101010101010101;
    *(_DWORD *)(v69 + 80) = 16843009;
    sub_100005CF0((uint64_t)v40, v69 + v68[6], &qword_1010FBA50);
    result = sub_100005CF0(v66, v69 + v68[7], &qword_1010FBA48);
    *(_OWORD *)(v69 + v68[8]) = xmmword_100E41210;
    v73 = (_OWORD *)(v69 + v68[9]);
    v73[1] = 0u;
    v73[2] = 0u;
    *v73 = 0u;
    *(_QWORD *)(v69 + v68[11]) = 0;
    return result;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1004F7A0C(unint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x8_t v8;
  int8x16_t v9;
  int32x2_t v10;
  unsigned __int32 v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t v14;

  v2 = a1 & 0x10000;
  if ((a1 & 1) != 0)
  {
    v4 = v2 == 0;
    if ((a1 & 0x100) == 0)
    {
      v3 = 5;
      if (v4)
        v3 = 1;
      if ((a1 & 0x1000000) != 0)
        goto LABEL_16;
      goto LABEL_17;
    }
    v3 = 7;
    v5 = 3;
  }
  else
  {
    if ((a1 & 0x100) == 0)
    {
      v3 = v2 >> 14;
      if ((a1 & 0x1000000) == 0)
        goto LABEL_17;
LABEL_16:
      v3 |= 8uLL;
      goto LABEL_17;
    }
    v4 = v2 == 0;
    v3 = 6;
    v5 = 2;
  }
  if (v4)
    v3 = v5;
  if ((a1 & 0x1000000) != 0)
    goto LABEL_16;
LABEL_17:
  v6 = (int8x16_t)vdupq_n_s64(a1);
  v7 = vandq_s8(vbicq_s8((int8x16_t)vshlq_u64((uint64x2_t)v6, (uint64x2_t)xmmword_100E41240), (int8x16_t)vceqq_s64((int64x2_t)vandq_s8(v6, (int8x16_t)xmmword_100E41230), (int64x2_t)xmmword_100E41260)), (int8x16_t)xmmword_100E41290);
  v8 = (int8x8_t)vdup_n_s32(a2);
  v9 = vandq_s8(vbicq_s8((int8x16_t)vshlq_u64((uint64x2_t)v6, (uint64x2_t)xmmword_100E41250), (int8x16_t)vceqq_s64((int64x2_t)vandq_s8(v6, (int8x16_t)xmmword_100E41220), (int64x2_t)xmmword_100E41270)), (int8x16_t)xmmword_100E41280);
  v10 = (int32x2_t)vand_s8(vbic_s8((int8x8_t)vshl_u32((uint32x2_t)v8, (uint32x2_t)0x30000000ALL), (int8x8_t)vceq_s32((int32x2_t)vand_s8(v8, (int8x8_t)0xFF00000000FFLL), (int32x2_t)0x20000000002)), (int8x8_t)0x80000000400);
  v11 = vorr_s8((int8x8_t)v10, (int8x8_t)vdup_lane_s32(v10, 1)).u32[0];
  if ((a2 & 0xFF0000) == 0x20000)
    v12 = 0;
  else
    v12 = (a2 >> 7) & 0x200;
  LODWORD(v13) = (a2 >> 12) & 0x1000;
  if (HIBYTE(a2) == 2)
    v13 = 0;
  else
    v13 = v13;
  v14 = vorrq_s8(v9, v7);
  return *(_QWORD *)&vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)) | v12 | v3 | v13 | v11;
}

uint64_t sub_1004F7B58(_QWORD *a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  char v17;

  v7 = sub_10001A9A8(&qword_1010FE430);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v11);
  v13 = sub_100503314();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Coordinates.CodingKeys, &type metadata for Coordinates.CodingKeys, v13, v11, v12);
  v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v17, v7, a2);
  if (!v3)
  {
    v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v16, v7, a3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int sub_1004F7C74(double a1, double a2)
{
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)&a1;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = *(_QWORD *)&a2;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t sub_1004F7CE0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_10001A9A8(&qword_1010FE468);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  v10 = sub_10050328C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessoryInfoResponse.CodingKeys, &type metadata for AccessoryInfoResponse.CodingKeys, v10, v8, v9);
  v16 = a2;
  v11 = sub_10001A9A8(&qword_1010FE3F0);
  v12 = sub_10050379C(&qword_1010FE470, &qword_1010FE478, (uint64_t)&unk_100E41720, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_1004F7E04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  Swift::UInt8 v8;
  int v9;
  Swift::UInt8 v10;
  int v11;
  Swift::UInt8 v12;
  int v13;
  Swift::UInt8 v14;
  int v15;
  Swift::UInt8 v16;
  int v17;
  Swift::UInt8 v18;
  int v19;
  Swift::UInt8 v20;
  int v21;
  Swift::UInt8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v4 = *(_QWORD *)v2;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  swift_bridgeObjectRelease(v6);
  v7 = *(unsigned __int8 *)(v2 + 32);
  if (v7 == 2)
  {
    v8 = 0;
  }
  else
  {
    v8 = v7 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v8);
  v9 = *(unsigned __int8 *)(v2 + 33);
  if (v9 == 2)
  {
    v10 = 0;
  }
  else
  {
    v10 = v9 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  v11 = *(unsigned __int8 *)(v2 + 34);
  if (v11 == 2)
  {
    v12 = 0;
  }
  else
  {
    v12 = v11 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v12);
  v13 = *(unsigned __int8 *)(v2 + 35);
  if (v13 == 2)
  {
    v14 = 0;
  }
  else
  {
    v14 = v13 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v14);
  v15 = *(unsigned __int8 *)(v2 + 36);
  if (v15 == 2)
  {
    v16 = 0;
  }
  else
  {
    v16 = v15 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v16);
  v17 = *(unsigned __int8 *)(v2 + 37);
  if (v17 == 2)
  {
    v18 = 0;
  }
  else
  {
    v18 = v17 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v18);
  v19 = *(unsigned __int8 *)(v2 + 38);
  if (v19 == 2)
  {
    v20 = 0;
  }
  else
  {
    v20 = v19 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v20);
  v21 = *(unsigned __int8 *)(v2 + 39);
  if (v21 == 2)
  {
    v22 = 0;
  }
  else
  {
    v22 = v21 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v22);
  v23 = *(_QWORD *)(v2 + 48);
  if (v23)
  {
    v24 = *(_QWORD *)(v2 + 40);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(a1, v24, v23);
    swift_bridgeObjectRelease(v23);
    v25 = *(_QWORD *)(v2 + 64);
    if (v25)
    {
LABEL_30:
      v26 = *(_QWORD *)(v2 + 56);
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v25);
      String.hash(into:)(a1, v26, v25);
      swift_bridgeObjectRelease(v25);
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    v25 = *(_QWORD *)(v2 + 64);
    if (v25)
      goto LABEL_30;
  }
  Hasher._combine(_:)(0);
}

uint64_t sub_1004F8048(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1004F8080 + 4 * byte_100E412C0[a1]))(0xD000000000000012, 0x8000000100ED9750);
}

uint64_t sub_1004F8080()
{
  return 0x7250796D646E6966;
}

uint64_t sub_1004F8134()
{
  return 0x5565636166727573;
}

uint64_t sub_1004F8154()
{
  return 0x496B726F7774656ELL;
}

uint64_t sub_1004F8170()
{
  return 0x70756B6F6F4C6E73;
}

uint64_t sub_1004F8190(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010FE458);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100503714();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessorySoftwareInfo.CodingKeys, &type metadata for AccessorySoftwareInfo.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = *((unsigned __int8 *)v3 + 8);
  v37 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v37, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v36 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v36, v5);
    v16 = *((unsigned __int8 *)v3 + 32);
    v35 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, &v35, v5);
    v17 = *((unsigned __int8 *)v3 + 33);
    v34 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, &v34, v5);
    v18 = *((unsigned __int8 *)v3 + 34);
    v33 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, &v33, v5);
    v19 = *((unsigned __int8 *)v3 + 35);
    v32 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, &v32, v5);
    v20 = *((unsigned __int8 *)v3 + 36);
    v31 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, &v31, v5);
    v21 = *((unsigned __int8 *)v3 + 37);
    v30 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, &v30, v5);
    v22 = *((unsigned __int8 *)v3 + 38);
    HIBYTE(v29) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, (char *)&v29 + 7, v5);
    v23 = *((unsigned __int8 *)v3 + 39);
    BYTE6(v29) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, (char *)&v29 + 6, v5);
    v24 = v3[5];
    v25 = v3[6];
    BYTE5(v29) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, (char *)&v29 + 5, v5);
    v26 = v3[7];
    v27 = v3[8];
    BYTE4(v29) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, (char *)&v29 + 4, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1004F8438(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt8 v9;
  int v10;
  int v11;
  int v12;

  Hasher._combine(_:)(a2 & 1);
  Hasher._combine(_:)(BYTE1(a2) & 1);
  Hasher._combine(_:)(BYTE2(a2) & 1);
  Hasher._combine(_:)(BYTE3(a2) & 1);
  if ((a2 & 0xFF00000000) == 0x200000000)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v5 = HIDWORD(a2) & 1;
  }
  Hasher._combine(_:)(v5);
  if ((a2 & 0xFF0000000000) == 0x20000000000)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v6 = (a2 >> 40) & 1;
  }
  Hasher._combine(_:)(v6);
  if ((a2 & 0xFF000000000000) == 0x2000000000000)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v7 = HIWORD(a2) & 1;
  }
  Hasher._combine(_:)(v7);
  if (HIBYTE(a2) == 2)
  {
    LOBYTE(v8) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v8 = HIBYTE(a2) & 1;
  }
  Hasher._combine(_:)(v8);
  if (a3 == 2)
  {
    v9 = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v9 = a3 & 1;
  }
  Hasher._combine(_:)(v9);
  if ((a3 & 0xFF00) == 0x200)
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v10 = (a3 >> 8) & 1;
  }
  Hasher._combine(_:)(v10);
  if ((a3 & 0xFF0000) == 0x20000)
  {
    LOBYTE(v11) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v11 = HIWORD(a3) & 1;
  }
  Hasher._combine(_:)(v11);
  if (HIBYTE(a3) == 2)
  {
    LOBYTE(v12) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v12 = HIBYTE(a3) & 1;
  }
  Hasher._combine(_:)(v12);
}

uint64_t sub_1004F85B0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1004F85EC + 4 * byte_100E412CC[a1]))(0x6E756F5379616C70, 0xE900000000000064);
}

uint64_t sub_1004F85EC()
{
  return 0x6C656363417475;
}

uint64_t sub_1004F8604()
{
  return 0x756B6F6F4C63666ELL;
}

uint64_t sub_1004F862C()
{
  return 0x65646F4D74736F6CLL;
}

uint64_t sub_1004F8644()
{
  return 0x6857796669746F6ELL;
}

uint64_t sub_1004F8668()
{
  return 0x7449656D616E6572;
}

uint64_t sub_1004F8684()
{
  return 0x65676E6172;
}

uint64_t sub_1004F8698()
{
  return 0x6E69646E69467462;
}

unint64_t sub_1004F86B0()
{
  return 0xD000000000000014;
}

uint64_t sub_1004F86CC()
{
  return 1886544245;
}

unint64_t sub_1004F86DC()
{
  return 0xD000000000000018;
}

uint64_t sub_1004F86FC(_QWORD *a1, unint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;

  v17 = a3;
  v6 = a2 & 1;
  v7 = sub_10001A9A8(&qword_1010FE460);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v12);
  v13 = sub_100503758();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessoryInfoCapabilities.CodingKeys, &type metadata for AccessoryInfoCapabilities.CodingKeys, v13, v12, v11);
  v29 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v6, &v29, v7);
  if (!v3)
  {
    v14 = v17;
    v28 = 1;
    KeyedEncodingContainer.encode(_:forKey:)((a2 >> 8) & 1, &v28, v7);
    v27 = 2;
    KeyedEncodingContainer.encode(_:forKey:)((a2 >> 16) & 1, &v27, v7);
    v26 = 3;
    KeyedEncodingContainer.encode(_:forKey:)((a2 >> 24) & 1, &v26, v7);
    v25 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(HIDWORD(a2), &v25, v7);
    v24 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2 >> 40, &v24, v7);
    v23 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(HIWORD(a2), &v23, v7);
    v22 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(HIBYTE(a2), &v22, v7);
    v21 = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, &v21, v7);
    v20 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14 >> 8, &v20, v7);
    v19 = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(WORD1(v14), &v19, v7);
    v18 = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(BYTE3(v14), &v18, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1004F89DC()
{
  _BYTE *v0;

  if (*v0)
    return 121;
  else
    return 120;
}

uint64_t sub_1004F89F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1004FFB0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004F8A18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100503314();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004F8A40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100503314();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1004F8A68(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;

  v4 = sub_1004FFBC8(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
  }
}

uint64_t sub_1004F8A90(_QWORD *a1)
{
  double *v1;

  return sub_1004F7B58(a1, *v1, v1[1]);
}

Swift::Int sub_1004F8AA8()
{
  double *v0;

  return sub_1004F7C74(*v0, v0[1]);
}

void sub_1004F8AB0()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;

  v1 = v0[1];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v0;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
}

Swift::Int sub_1004F8AF4()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  _QWORD v6[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v6);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL sub_1004F8B50(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_1004F8B7C()
{
  return 0x73746375646F7270;
}

uint64_t sub_1004F8B94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x73746375646F7270 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease(0xE800000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73746375646F7270, 0xE800000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1004F8C28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10050328C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004F8C50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10050328C();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_1004F8C78@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1004FFD20(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1004F8CA0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1004F7CE0(a1, *v1);
}

uint64_t sub_1004F8CB8()
{
  unsigned __int8 *v0;

  return sub_1004F8048(*v0);
}

uint64_t sub_1004F8CC0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1004FFE6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004F8CE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100503714();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004F8D0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100503714();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_1004F8D34@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  sub_100500374(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_QWORD *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1004F8D84(_QWORD *a1)
{
  return sub_1004F8190(a1);
}

Swift::Int sub_1004F8D98()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_1004F7E04((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1004F8DD8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_1004F7E04((uint64_t)v1);
  return Hasher._finalize()();
}

BOOL sub_1004F8E10(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_1004FDBAC((uint64_t)v7, (uint64_t)v9);
}

uint64_t sub_1004F8E68()
{
  unsigned __int8 *v0;

  return sub_1004F85B0(*v0);
}

uint64_t sub_1004F8E70@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10050076C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004F8E94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100503758();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004F8EBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100503758();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1004F8EE4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t result;
  int v5;

  result = sub_100500C5C(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result & 1;
    *(_BYTE *)(a2 + 1) = BYTE1(result) & 1;
    *(_BYTE *)(a2 + 2) = BYTE2(result) & 1;
    *(_BYTE *)(a2 + 3) = BYTE3(result) & 1;
    *(_BYTE *)(a2 + 4) = BYTE4(result);
    *(_BYTE *)(a2 + 5) = BYTE5(result);
    *(_BYTE *)(a2 + 6) = BYTE6(result);
    *(_BYTE *)(a2 + 7) = HIBYTE(result);
    *(_DWORD *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_1004F8F64(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = 256;
  if (!v1[1])
    v2 = 0;
  v3 = v2 | *v1;
  v4 = 0x10000;
  if (!v1[2])
    v4 = 0;
  v5 = 0x1000000;
  if (!v1[3])
    v5 = 0;
  return sub_1004F86FC(a1, v3 | v4 | v5 | ((unint64_t)v1[4] << 32) | ((unint64_t)v1[5] << 40) | ((unint64_t)v1[6] << 48) | ((unint64_t)v1[7] << 56), *((_DWORD *)v1 + 2));
}

Swift::Int sub_1004F8FDC()
{
  unsigned __int8 *v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  v7 = v0[6];
  v8 = *((_DWORD *)v0 + 2);
  v9 = v0[7];
  Hasher.init(_seed:)(v15);
  v10 = 256;
  if (!v2)
    v10 = 0;
  v11 = v10 | v1;
  v12 = 0x10000;
  if (!v3)
    v12 = 0;
  v13 = 0x1000000;
  if (!v4)
    v13 = 0;
  sub_1004F8438((uint64_t)v15, v11 | v12 | v13 | (v5 << 32) | (v6 << 40) | (v7 << 48) | (v9 << 56), v8);
  return Hasher._finalize()();
}

void sub_1004F90A0(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = 256;
  if (!v1[1])
    v2 = 0;
  v3 = v2 | *v1;
  v4 = 0x10000;
  if (!v1[2])
    v4 = 0;
  v5 = 0x1000000;
  if (!v1[3])
    v5 = 0;
  sub_1004F8438(a1, v3 | v4 | v5 | ((unint64_t)v1[4] << 32) | ((unint64_t)v1[5] << 40) | ((unint64_t)v1[6] << 48) | ((unint64_t)v1[7] << 56), *((_DWORD *)v1 + 2));
}

Swift::Int sub_1004F9108()
{
  unsigned __int8 *v0;
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  v7 = v0[6];
  v8 = *((_DWORD *)v0 + 2);
  v9 = v0[7];
  Hasher.init(_seed:)(v15);
  v10 = 256;
  if (!v2)
    v10 = 0;
  v11 = v10 | v1;
  v12 = 0x10000;
  if (!v3)
    v12 = 0;
  v13 = 0x1000000;
  if (!v4)
    v13 = 0;
  sub_1004F8438((uint64_t)v15, v11 | v12 | v13 | (v5 << 32) | (v6 << 40) | (v7 << 48) | (v9 << 56), v8);
  return Hasher._finalize()();
}

uint64_t sub_1004F91C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)a1 + 2);
  if (a1[1])
    v3 = 256;
  else
    v3 = 0;
  v4 = v3 | *a1;
  if (a1[2])
    v5 = 0x10000;
  else
    v5 = 0;
  if (a1[3])
    v6 = 0x1000000;
  else
    v6 = 0;
  v7 = v4 | v5 | v6 | ((unint64_t)a1[4] << 32) | ((unint64_t)a1[5] << 40) | ((unint64_t)a1[6] << 48) | ((unint64_t)a1[7] << 56);
  if (a2[1])
    v8 = 256;
  else
    v8 = 0;
  v9 = v8 | *a2;
  if (a2[2])
    v10 = 0x10000;
  else
    v10 = 0;
  if (a2[3])
    v11 = 0x1000000;
  else
    v11 = 0;
  return sub_1004FDE64(v7, v2, v9 | v10 | v11 | ((unint64_t)a2[4] << 32) | ((unint64_t)a2[5] << 40) | ((unint64_t)a2[6] << 48) | ((unint64_t)a2[7] << 56), *((_DWORD *)a2 + 2));
}

uint64_t sub_1004F9294()
{
  unsigned __int8 *v0;
  Swift::String v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  _BYTE v18[9];

  v18[8] = 0;
  _StringGuts.grow(_:)(52);
  v1._countAndFlagsBits = 0x3A6449747261703CLL;
  v1._object = (void *)0xE900000000000020;
  String.append(_:)(v1);
  *(_QWORD *)v18 = *v0;
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0x7079547472617020;
  v4._object = (void *)0xEB00000000203A65;
  String.append(_:)(v4);
  v5 = *((_QWORD *)v0 + 1);
  v6 = (void *)*((_QWORD *)v0 + 2);
  swift_bridgeObjectRetain(v6);
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 0x6D614E7472617020;
  v8._object = (void *)0xEB00000000203A65;
  String.append(_:)(v8);
  v9 = *((_QWORD *)v0 + 3);
  v10 = (void *)*((_QWORD *)v0 + 4);
  swift_bridgeObjectRetain(v10);
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 0x616D697250736920;
  v12._object = (void *)0xEC000000203A7972;
  String.append(_:)(v12);
  if ((v0[56] & 1) != 0)
    v13 = 1702195828;
  else
    v13 = 0x65736C6166;
  if ((v0[56] & 1) != 0)
    v14 = 0xE400000000000000;
  else
    v14 = 0xE500000000000000;
  v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease(v14);
  v16._countAndFlagsBits = 62;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return *(_QWORD *)&v18[1];
}

void sub_1004F9438(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  Swift::UInt8 v11;

  v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v2);
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 32);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v6, v7);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(v2 + 48);
  if (v8)
  {
    v9 = *(_QWORD *)(v2 + 40);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v8);
    String.hash(into:)(a1, v9, v8);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v10 = *(unsigned __int8 *)(v2 + 56);
  if (v10 == 2)
  {
    v11 = 0;
  }
  else
  {
    v11 = v10 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
}

uint64_t sub_1004F9518(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010FE428);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1005032D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessoryLayoutTemplate.CodingKeys, &type metadata for AccessoryLayoutTemplate.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v26 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v26, v5);
  if (!v2)
  {
    v13 = *((_QWORD *)v3 + 1);
    v14 = *((_QWORD *)v3 + 2);
    v25 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v25, v5);
    v15 = *((_QWORD *)v3 + 3);
    v16 = *((_QWORD *)v3 + 4);
    v24 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v24, v5);
    v17 = *((_QWORD *)v3 + 5);
    v18 = *((_QWORD *)v3 + 6);
    v23 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v23, v5);
    v19 = v3[56];
    v22 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, &v22, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1004F96A4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::UInt8 v20;
  Swift::UInt v21;
  int *v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  Swift::UInt64 v27;
  Swift::UInt64 v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  Swift::UInt64 v46;
  Swift::UInt64 v47;
  Swift::UInt64 v48;
  Swift::UInt64 v49;
  char *v50;
  Swift::UInt64 v51;
  Swift::UInt64 v52;
  Swift::UInt64 v53;
  Swift::UInt64 v54;
  uint64_t v55;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010FBA40);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v55 - v12;
  v14 = v1[1];
  if (v14)
  {
    v15 = *v1;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v14);
    String.hash(into:)(a1, v15, v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v16 = v1[2];
  v17 = v2[3];
  swift_bridgeObjectRetain(v17);
  String.hash(into:)(a1, v16, v17);
  swift_bridgeObjectRelease();
  v18 = v2[4];
  v19 = v2[5];
  swift_bridgeObjectRetain(v19);
  String.hash(into:)(a1, v18, v19);
  swift_bridgeObjectRelease();
  if ((*((_BYTE *)v2 + 49) & 1) != 0)
  {
    v20 = 0;
  }
  else
  {
    v20 = *((_BYTE *)v2 + 48);
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v20);
  Hasher._combine(_:)(v2[7]);
  if (*((_BYTE *)v2 + 72) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v21 = v2[8];
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
  }
  v22 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  sub_10000F9B8((uint64_t)v2 + v22[10], (uint64_t)v13, &qword_1010FBA40);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v23(v13, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v13, v4);
    Hasher._combine(_:)(1u);
    v24 = sub_100006204(&qword_1010FE228, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v24);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  sub_10000F9B8((uint64_t)v2 + v22[11], (uint64_t)v11, &qword_1010FBA40);
  if (v23(v11, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, v4);
    Hasher._combine(_:)(1u);
    v25 = sub_100006204(&qword_1010FE228, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v25);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v26 = (char *)v2 + v22[12];
  if (v26[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v27 = *(_QWORD *)v26;
    Hasher._combine(_:)(1u);
    if ((v27 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v28 = v27;
    else
      v28 = 0;
    Hasher._combine(_:)(v28);
  }
  v29 = (_QWORD *)((char *)v2 + v22[13]);
  v30 = *v29;
  v31 = v29[1];
  swift_bridgeObjectRetain(v31);
  String.hash(into:)(a1, v30, v31);
  swift_bridgeObjectRelease();
  v32 = *(_QWORD *)((char *)v2 + v22[14]);
  if (v32)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(_QWORD *)(v32 + 16));
    v33 = *(_QWORD *)(v32 + 16);
    if (v33)
    {
      swift_bridgeObjectRetain(v32);
      v34 = (_QWORD *)(v32 + 40);
      do
      {
        v35 = *(v34 - 1);
        v36 = *v34;
        swift_bridgeObjectRetain(*v34);
        String.hash(into:)(a1, v35, v36);
        swift_bridgeObjectRelease();
        v34 += 2;
        --v33;
      }
      while (v33);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v37 = (_QWORD *)((char *)v2 + v22[15]);
  v38 = *v37;
  v39 = v37[1];
  swift_bridgeObjectRetain(v39);
  String.hash(into:)(a1, v38, v39);
  swift_bridgeObjectRelease();
  v40 = *(_QWORD *)((char *)v2 + v22[16]);
  if (v40)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(_QWORD *)(v40 + 16));
    v41 = *(_QWORD *)(v40 + 16);
    if (v41)
    {
      swift_bridgeObjectRetain(v40);
      v42 = (_QWORD *)(v40 + 40);
      do
      {
        v43 = *(v42 - 1);
        v44 = *v42;
        swift_bridgeObjectRetain(*v42);
        String.hash(into:)(a1, v43, v44);
        swift_bridgeObjectRelease();
        v42 += 2;
        --v41;
      }
      while (v41);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v45 = (char *)v2 + v22[17];
  if ((v45[16] & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v47 = *(_QWORD *)v45;
    v46 = *((_QWORD *)v45 + 1);
    Hasher._combine(_:)(1u);
    if ((v47 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v48 = v47;
    else
      v48 = 0;
    Hasher._combine(_:)(v48);
    if ((v46 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v49 = v46;
    else
      v49 = 0;
    Hasher._combine(_:)(v49);
  }
  v50 = (char *)v2 + v22[18];
  if (v50[16] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v52 = *(_QWORD *)v50;
    v51 = *((_QWORD *)v50 + 1);
    Hasher._combine(_:)(1u);
    if ((v52 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v53 = v52;
    else
      v53 = 0;
    Hasher._combine(_:)(v53);
    if ((v51 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v54 = v51;
    else
      v54 = 0;
    Hasher._combine(_:)(v54);
  }
}

uint64_t sub_1004F9BE0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1004F9C1C + 4 * byte_100E412D8[a1]))(0xD000000000000013, 0x8000000100ED9680);
}

unint64_t sub_1004F9C1C()
{
  return 0xD000000000000010;
}

uint64_t sub_1004F9D20()
{
  uint64_t v0;

  return v0 + 10;
}

uint64_t sub_1004F9D30()
{
  uint64_t v0;

  return v0 + 8;
}

void sub_1004F9D40()
{
  JUMPOUT(0x1004F9D4CLL);
}

uint64_t sub_1004F9D58(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  char v40;
  unint64_t v41;
  __int128 *v42;
  char v43;
  __int128 v45;
  char v46;
  _BYTE v47[2];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010FE350);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100502474();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessoryInfoResponseContent.Configuration.CodingKeys, &type metadata for AccessoryInfoResponseContent.Configuration.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v45) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v45, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    LOBYTE(v45) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v45, v5);
    v16 = v3[4];
    v17 = v3[5];
    LOBYTE(v45) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v45, v5);
    v18 = *((unsigned __int8 *)v3 + 48);
    v19 = *((unsigned __int8 *)v3 + 49);
    LOBYTE(v45) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18 | (v19 << 8), &v45, v5);
    v20 = v3[7];
    LOBYTE(v45) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v45, v5);
    v21 = v3[8];
    v22 = *((unsigned __int8 *)v3 + 72);
    LOBYTE(v45) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v45, v5);
    v23 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    v24 = (uint64_t)v3 + v23[10];
    LOBYTE(v45) = 6;
    v25 = type metadata accessor for URL(0);
    v26 = sub_100006204(&qword_1010FE330, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v24, &v45, v5, v25, v26);
    v27 = (uint64_t)v3 + v23[11];
    LOBYTE(v45) = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v27, &v45, v5, v25, v26);
    v28 = (uint64_t *)((char *)v3 + v23[12]);
    v29 = *v28;
    v30 = *((unsigned __int8 *)v28 + 8);
    LOBYTE(v45) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, v30, &v45, v5);
    v31 = (uint64_t *)((char *)v3 + v23[13]);
    v32 = *v31;
    v33 = v31[1];
    LOBYTE(v45) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v32, v33, &v45, v5);
    *(_QWORD *)&v45 = *(uint64_t *)((char *)v3 + v23[14]);
    v47[0] = 10;
    v34 = sub_10001A9A8(&qword_1011063B0);
    v35 = sub_100365C28((unint64_t *)&qword_1010F9680, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v45, v47, v5, v34, v35);
    v36 = (uint64_t *)((char *)v3 + v23[15]);
    v37 = *v36;
    v38 = v36[1];
    LOBYTE(v45) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v37, v38, &v45, v5);
    *(_QWORD *)&v45 = *(uint64_t *)((char *)v3 + v23[16]);
    v47[0] = 12;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v45, v47, v5, v34, v35);
    v39 = (__int128 *)((char *)v3 + v23[17]);
    v40 = *((_BYTE *)v39 + 16);
    v45 = *v39;
    v46 = v40;
    v47[0] = 13;
    v41 = sub_1005024FC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v45, v47, v5, &type metadata for Coordinates, v41);
    v42 = (__int128 *)((char *)v3 + v23[18]);
    v43 = *((_BYTE *)v42 + 16);
    v45 = *v42;
    v46 = v43;
    v47[0] = 14;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v45, v47, v5, &type metadata for Coordinates, v41);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004FA1A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char *v41;
  char v42;
  uint64_t v43;
  char *v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  int *v53;
  __int128 v54;
  char v55;
  char v56;

  v5 = sub_10001A9A8(&qword_1010FBA40);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v46 - v9;
  v50 = sub_10001A9A8(&qword_1010FE338);
  v11 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  __chkstk_darwin(v53);
  v51 = a1;
  v52 = (uint64_t *)((char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = a1[3];
  v16 = a1[4];
  sub_10001AA44(a1, v15);
  v17 = sub_100502474();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessoryInfoResponseContent.Configuration.CodingKeys, &type metadata for AccessoryInfoResponseContent.Configuration.CodingKeys, v17, v15, v16);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v51);
  v48 = a2;
  v49 = v11;
  LOBYTE(v54) = 0;
  v18 = v50;
  v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v50);
  v20 = v53;
  v21 = v52;
  *v52 = v19;
  v21[1] = v22;
  LOBYTE(v54) = 1;
  v21[2] = KeyedDecodingContainer.decode(_:forKey:)(&v54, v18);
  v21[3] = v23;
  LOBYTE(v54) = 2;
  v21[4] = KeyedDecodingContainer.decode(_:forKey:)(&v54, v18);
  v21[5] = v24;
  LOBYTE(v54) = 3;
  v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v18);
  *((_BYTE *)v21 + 48) = v25;
  *((_BYTE *)v21 + 49) = HIBYTE(v25) & 1;
  LOBYTE(v54) = 4;
  v21[7] = KeyedDecodingContainer.decode(_:forKey:)(&v54, v18);
  LOBYTE(v54) = 5;
  v21[8] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v18);
  *((_BYTE *)v21 + 72) = v26 & 1;
  v27 = type metadata accessor for URL(0);
  LOBYTE(v54) = 6;
  v47 = sub_100006204(&qword_1010FE320, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v27, &v54, v18, v27, v47);
  sub_100005CF0((uint64_t)v10, (uint64_t)v21 + v20[10], &qword_1010FBA40);
  LOBYTE(v54) = 7;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v27, &v54, v18, v27, v47);
  sub_100005CF0((uint64_t)v8, (uint64_t)v21 + v20[11], &qword_1010FBA40);
  LOBYTE(v54) = 8;
  v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v18);
  v29 = (char *)v21 + v20[12];
  *(_QWORD *)v29 = v28;
  v29[8] = v30 & 1;
  LOBYTE(v54) = 9;
  v31 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v18);
  v32 = (uint64_t *)((char *)v52 + v53[13]);
  *v32 = v31;
  v32[1] = v33;
  v34 = sub_10001A9A8(&qword_1011063B0);
  v56 = 10;
  v35 = sub_100365C28((unint64_t *)&qword_1010F9668, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v34, &v56, v50, v34, v35);
  *(uint64_t *)((char *)v52 + v53[14]) = v54;
  LOBYTE(v54) = 11;
  v36 = KeyedDecodingContainer.decode(_:forKey:)(&v54, v50);
  v37 = (uint64_t *)((char *)v52 + v53[15]);
  *v37 = v36;
  v37[1] = v38;
  v56 = 12;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v34, &v56, v50, v34, v35);
  *(uint64_t *)((char *)v52 + v53[16]) = v54;
  v56 = 13;
  v39 = sub_1005024B8();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Coordinates, &v56, v50, &type metadata for Coordinates, v39);
  v40 = v55;
  v41 = (char *)v52 + v53[17];
  *(_OWORD *)v41 = v54;
  v41[16] = v40;
  v56 = 14;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Coordinates, &v56, v50, &type metadata for Coordinates, v39);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v50);
  v42 = v55;
  v43 = (uint64_t)v52;
  v44 = (char *)v52 + v53[18];
  *(_OWORD *)v44 = v54;
  v44[16] = v42;
  sub_10005972C(v43, v48, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v51);
  return sub_1000126B0(v43, type metadata accessor for AccessoryInfoResponseContent.Configuration);
}

uint64_t sub_1004FA990(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1004FA9D0 + 4 * byte_100E412E7[a1]))(0x48746C7561666564, 0xEF6E6F63496F7265);
}

uint64_t sub_1004FA9D0()
{
  return 0x4C746C7561666564;
}

unint64_t sub_1004FA9F4()
{
  return 0xD000000000000011;
}

uint64_t sub_1004FAA34()
{
  return 0x726F4D6E7261656CLL;
}

void sub_1004FAAB0()
{
  JUMPOUT(0x1004FAAC8);
}

uint64_t sub_1004FAAD4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010FE328);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100502430();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessoryInfoResponseContent.Assets.CodingKeys, &type metadata for AccessoryInfoResponseContent.Assets.CodingKeys, v11, v9, v10);
  v39 = 0;
  v12 = type metadata accessor for URL(0);
  v13 = sub_100006204(&qword_1010FE330, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v39, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0);
    v15 = v3 + v14[5];
    v38 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v38, v5, v12, v13);
    v16 = v3 + v14[6];
    v37 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v37, v5, v12, v13);
    v17 = v3 + v14[7];
    v36 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v36, v5, v12, v13);
    v18 = v3 + v14[8];
    v35 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v35, v5, v12, v13);
    v19 = v3 + v14[9];
    v34 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v34, v5, v12, v13);
    v20 = v3 + v14[10];
    v33 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v33, v5, v12, v13);
    v21 = v3 + v14[11];
    v32 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v32, v5, v12, v13);
    v22 = v3 + v14[12];
    v31 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v31, v5, v12, v13);
    v23 = v3 + v14[13];
    v30 = 9;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v30, v5, v12, v13);
    v24 = v3 + v14[14];
    v29 = 10;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v24, &v29, v5, v12, v13);
    v25 = v3 + v14[15];
    v28 = 11;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v28, v5, v12, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004FAE44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  void (*v41)(char *, _QWORD *, uint64_t);
  char *v42;
  _QWORD *v43;
  int *v44;
  _QWORD *v45;
  int *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  int *v72;
  char *v73;
  char v74;
  char v75;
  char v76;
  char v77[9];
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;

  v57 = a2;
  v69 = type metadata accessor for URL(0);
  v71 = *(_QWORD *)(v69 - 8);
  v3 = __chkstk_darwin(v69);
  v58 = (_QWORD **)((char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __chkstk_darwin(v3);
  v59 = (_QWORD **)((char *)&v54 - v6);
  v7 = __chkstk_darwin(v5);
  v60 = (_QWORD **)((char *)&v54 - v8);
  v9 = __chkstk_darwin(v7);
  v61 = (_QWORD **)((char *)&v54 - v10);
  v11 = __chkstk_darwin(v9);
  v62 = (_QWORD **)((char *)&v54 - v12);
  v13 = __chkstk_darwin(v11);
  v63 = (_QWORD **)((char *)&v54 - v14);
  v15 = __chkstk_darwin(v13);
  v64 = (_QWORD **)((char *)&v54 - v16);
  v17 = __chkstk_darwin(v15);
  v19 = (_QWORD **)((char *)&v54 - v18);
  v20 = __chkstk_darwin(v17);
  v22 = (_QWORD **)((char *)&v54 - v21);
  v23 = __chkstk_darwin(v20);
  v25 = (_QWORD **)((char *)&v54 - v24);
  v26 = __chkstk_darwin(v23);
  v28 = (_QWORD **)((char *)&v54 - v27);
  __chkstk_darwin(v26);
  v65 = (_QWORD **)((char *)&v54 - v29);
  v67 = sub_10001A9A8(&qword_1010FE310);
  v30 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v32 = (char *)&v54 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  __chkstk_darwin(v72);
  v73 = (char *)&v54 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = a1[3];
  v35 = a1[4];
  v70 = a1;
  sub_10001AA44(a1, v34);
  v36 = sub_100502430();
  v66 = v32;
  v37 = v68;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessoryInfoResponseContent.Assets.CodingKeys, &type metadata for AccessoryInfoResponseContent.Assets.CodingKeys, v36, v34, v35);
  if (v37)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v70);
  v55 = v22;
  v56 = v25;
  v54 = v19;
  v68 = v30;
  v85 = 0;
  v38 = (_QWORD *)sub_100006204(&qword_1010FE320, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v39 = v65;
  v40 = v69;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v65, v69, &v85, v67, v69, v38);
  v41 = *(void (**)(char *, _QWORD *, uint64_t))(v71 + 32);
  v42 = v73;
  v41(v73, v39, v40);
  v84 = 1;
  v43 = v28;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v28, v40, &v84, v67, v40, v38);
  v44 = v72;
  v41(&v42[v72[5]], v43, v40);
  v83 = 2;
  v45 = v56;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v56, v40, &v83, v67, v40, v38);
  v41(&v42[v44[6]], v45, v40);
  v82 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v55, v40, &v82, v67, v40, v38);
  v46 = v44;
  v41(&v42[v44[7]], v55, v40);
  v81 = 4;
  v47 = v54;
  v65 = v38;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v54, v40, &v81, v67, v40, v38);
  v41(&v42[v46[8]], v47, v40);
  v80 = 5;
  v48 = v64;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v64, v40, &v80, v67, v40, v65);
  v41(&v42[v46[9]], v48, v40);
  v79 = 6;
  v49 = v63;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v63, v40, &v79, v67, v40, v65);
  v41(&v42[v46[10]], v49, v40);
  v78 = 7;
  v50 = v62;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v62, v40, &v78, v67, v40, v65);
  v41(&v42[v46[11]], v50, v40);
  v77[0] = 8;
  v51 = v61;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v61, v40, v77, v67, v40, v65);
  v41(&v42[v46[12]], v51, v40);
  v76 = 9;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v60, v40, &v76, v67, v40, v65);
  v41(&v73[v72[13]], v60, v40);
  v75 = 10;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v59, v40, &v75, v67, v40, v65);
  v41(&v73[v72[14]], v59, v40);
  v74 = 11;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v58, v40, &v74, v67, v40, v65);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v66, v67);
  v52 = (uint64_t)v73;
  v41(&v73[v72[15]], v58, v40);
  sub_10005972C(v52, v57, type metadata accessor for AccessoryInfoResponseContent.Assets);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v70);
  return sub_1000126B0(v52, type metadata accessor for AccessoryInfoResponseContent.Assets);
}

uint64_t sub_1004FB810()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1004FB84C + 4 * byte_100E412F3[*v0]))(0x6E65644974726170, 0xEE00726569666974);
}

uint64_t sub_1004FB84C()
{
  return 0x6570795474726170;
}

uint64_t sub_1004FB864()
{
  return 0x656D614E74726170;
}

uint64_t sub_1004FB87C()
{
  return 0x626D795374726170;
}

uint64_t sub_1004FB898()
{
  return 0x72616D6972507369;
}

uint64_t sub_1004FB8B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100500FAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004FB8D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005032D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004FB900(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005032D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1004FB928@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  _OWORD v7[2];

  sub_100501204(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v7[0];
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 41) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_1004FB970(_QWORD *a1)
{
  return sub_1004F9518(a1);
}

Swift::Int sub_1004FB984()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_1004F9438((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1004FB9C4()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_1004F9438((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_1004FBA00(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  _OWORD v6[2];
  _OWORD v7[2];
  _OWORD v8[2];

  v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 41);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a2 + 41);
  return sub_1004FE09C((unsigned __int8 *)v5, (unsigned __int8 *)v7) & 1;
}

uint64_t sub_1004FBA58()
{
  unsigned __int8 *v0;

  return sub_1004F9BE0(*v0);
}

uint64_t sub_1004FBA60@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1005014EC(a1, a2);
  *a3 = result;
  return result;
}

void sub_1004FBA84(_BYTE *a1@<X8>)
{
  *a1 = 15;
}

uint64_t sub_1004FBA90(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100502474();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004FBAB8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100502474();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004FBAE0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004FA1A0(a1, a2);
}

uint64_t sub_1004FBAF4(_QWORD *a1)
{
  return sub_1004F9D58(a1);
}

Swift::Int sub_1004FBB08(uint64_t a1, uint64_t a2)
{
  return sub_100132C8C(a1, a2, (void (*)(_QWORD *))sub_1004F96A4);
}

Swift::Int sub_1004FBB18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100132CDC(a1, a2, a3, (void (*)(_QWORD *))sub_1004F96A4);
}

uint64_t sub_1004FBB28()
{
  return sub_100006204(&qword_1010FE1F8, type metadata accessor for AccessoryInfoResponseContent.Configuration, (uint64_t)&unk_100E41468);
}

uint64_t sub_1004FBB54()
{
  unsigned __int8 *v0;

  return sub_1004FA990(*v0);
}

uint64_t sub_1004FBB5C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100501AF0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004FBB80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100502430();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004FBBA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100502430();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004FBBD0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004FAE44(a1, a2);
}

uint64_t sub_1004FBBE4(_QWORD *a1)
{
  return sub_1004FAAD4(a1);
}

Swift::Int sub_1004FBBF8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v0 = type metadata accessor for URL(0);
  v1 = sub_100006204(&qword_1010FE228, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_1004FBD88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for URL(0);
  v3 = sub_100006204(&qword_1010FE228, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int sub_1004FBF00()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v0 = type metadata accessor for URL(0);
  v1 = sub_100006204(&qword_1010FE228, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_1004FC090()
{
  return sub_100006204(&qword_1010FE200, type metadata accessor for AccessoryInfoResponseContent.Assets, (uint64_t)&unk_100E41520);
}

uint64_t sub_1004FC0BC()
{
  uint64_t *v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;

  _StringGuts.grow(_:)(51);
  v1._countAndFlagsBits = 0x7972636E4531653CLL;
  v1._object = (void *)0xEE003A6E6F697470;
  String.append(_:)(v1);
  v2 = *v0;
  v3 = (void *)v0[1];
  swift_bridgeObjectRetain(v3);
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._countAndFlagsBits = 0x7972636E45326520;
  v5._object = (void *)0xEE003A6E6F697470;
  String.append(_:)(v5);
  v6 = v0[2];
  v7 = (void *)v0[3];
  swift_bridgeObjectRetain(v7);
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9._object = (void *)0x8000000100ED9580;
  v9._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v9);
  v11 = v0[4];
  v10 = (void *)v0[5];
  swift_bridgeObjectRetain(v10);
  v12._countAndFlagsBits = v11;
  v12._object = v10;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v10);
  v13._countAndFlagsBits = 62;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return 0;
}

uint64_t sub_1004FC1F4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010FE308);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1005023EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessoryInfoResponseContent.PublicKeys.CodingKeys, &type metadata for AccessoryInfoResponseContent.PublicKeys.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v21 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v21, v5);
    v16 = v3[4];
    v17 = v3[5];
    v20 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v20, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004FC330()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x707972636E453265;
  if (*v0 != 1)
    v1 = 0x6966697265563273;
  if (*v0)
    return v1;
  else
    return 0x707972636E453165;
}

uint64_t sub_1004FC390@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100502030(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004FC3B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005023EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004FC3DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1005023EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1004FC404@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1005021B8(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1004FC444(_QWORD *a1)
{
  return sub_1004FC1F4(a1);
}

Swift::Int sub_1004FC458()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v6 = v0[4];
  v5 = v0[5];
  Hasher.init(_seed:)(v8);
  String.hash(into:)(v8, v1, v2);
  String.hash(into:)(v8, v3, v4);
  String.hash(into:)(v8, v6, v5);
  return Hasher._finalize()();
}

uint64_t sub_1004FC4D8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v8 = v1[4];
  v7 = v1[5];
  String.hash(into:)(a1, v3, v4);
  String.hash(into:)(a1, v5, v6);
  return String.hash(into:)(a1, v8, v7);
}

Swift::Int sub_1004FC530()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v6 = v0[4];
  v5 = v0[5];
  Hasher.init(_seed:)(v8);
  String.hash(into:)(v8, v1, v2);
  String.hash(into:)(v8, v3, v4);
  String.hash(into:)(v8, v6, v5);
  return Hasher._finalize()();
}

uint64_t sub_1004FC5B0(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_1004FE1A4((uint64_t *)v7, v8) & 1;
}

unint64_t sub_1004FC5F8()
{
  unint64_t result;

  result = qword_1010FE208;
  if (!qword_1010FE208)
  {
    result = swift_getWitnessTable(aI_21, &type metadata for AccessoryInfoResponseContent.PublicKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE208);
  }
  return result;
}

void sub_1004FC63C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[4];
  uint64_t v43;

  v2 = v1;
  v4 = type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  v41 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010FBA48);
  __chkstk_darwin(v7);
  v40 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v9 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010FBA50);
  __chkstk_darwin(v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_OWORD *)(v1 + 48);
  v42[2] = *(_OWORD *)(v1 + 32);
  v42[3] = v15;
  v43 = *(_QWORD *)(v1 + 64);
  v16 = *(_OWORD *)(v1 + 16);
  v42[0] = *(_OWORD *)v1;
  v42[1] = v16;
  sub_1004FFA7C(v42);
  sub_1004F7E04(a1);
  sub_1004FFAC4(v42);
  v17 = *(_QWORD *)(v1 + 72);
  if (v17 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v18 = *(_DWORD *)(v1 + 80);
    Hasher._combine(_:)(1u);
    sub_1004F8438(a1, v17 & 0xFFFFFFFF01010101, v18);
  }
  v19 = v39;
  v20 = (int *)type metadata accessor for AccessoryInfoResponseContent(0);
  sub_10000F9B8(v2 + v20[6], (uint64_t)v14, &qword_1010FBA50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v19) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_1000126EC((uint64_t)v14, (uint64_t)v11, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    Hasher._combine(_:)(1u);
    sub_1004F96A4(a1);
    sub_1000126B0((uint64_t)v11, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  }
  v22 = v40;
  v21 = v41;
  sub_10000F9B8(v2 + v20[7], v40, &qword_1010FBA48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v22, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_1000126EC(v22, (uint64_t)v6, type metadata accessor for AccessoryInfoResponseContent.Assets);
    Hasher._combine(_:)(1u);
    v23 = type metadata accessor for URL(0);
    v24 = sub_100006204(&qword_1010FE228, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    dispatch thunk of Hashable.hash(into:)(a1, v23, v24);
    sub_1000126B0((uint64_t)v6, type metadata accessor for AccessoryInfoResponseContent.Assets);
  }
  v25 = (uint64_t *)(v2 + v20[8]);
  v26 = v25[1];
  if (v26)
  {
    v27 = *v25;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v26);
    String.hash(into:)(a1, v27, v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v28 = (uint64_t *)(v2 + v20[9]);
  v29 = v28[1];
  if (v29)
  {
    v31 = v28[4];
    v30 = v28[5];
    v33 = v28[2];
    v32 = v28[3];
    v34 = *v28;
    Hasher._combine(_:)(1u);
    sub_100433FB4(v34, v29, v33, v32, v31, v30);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v30);
    String.hash(into:)(a1, v34, v29);
    String.hash(into:)(a1, v33, v32);
    String.hash(into:)(a1, v31, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1004FF7B8(v34, v29, v33, v32, v31, v30);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v35 = type metadata accessor for ServerStatusCode(0);
  v36 = sub_100006204(&qword_1010FE2D8, (uint64_t (*)(uint64_t))&type metadata accessor for ServerStatusCode, (uint64_t)&protocol conformance descriptor for ServerStatusCode);
  dispatch thunk of Hashable.hash(into:)(a1, v35, v36);
  v37 = *(_QWORD *)(v2 + v20[11]);
  if (v37)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v37);
    sub_100969AF0(a1, v37);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t sub_1004FCBDC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[3];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010FE290);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1004FF774();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessoryInfoResponseContent.CodingKeys, &type metadata for AccessoryInfoResponseContent.CodingKeys, v11, v9, v10);
  v12 = *(_BYTE *)(v3 + 8);
  v13 = *(_QWORD *)(v3 + 16);
  v14 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)&v39 = *(_QWORD *)v3;
  BYTE8(v39) = v12;
  *(_QWORD *)&v40 = v13;
  *((_QWORD *)&v40 + 1) = v14;
  *(_QWORD *)&v41[0] = *(_QWORD *)(v3 + 32);
  *(_OWORD *)((char *)v41 + 8) = *(_OWORD *)(v3 + 40);
  *(_OWORD *)((char *)&v41[1] + 8) = *(_OWORD *)(v3 + 56);
  v38 = 0;
  v15 = sub_1004FF904();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v39, &v38, v5, &type metadata for AccessorySoftwareInfo, v15);
  if (!v2)
  {
    v16 = *(_DWORD *)(v3 + 80);
    *(_QWORD *)&v39 = *(_QWORD *)(v3 + 72);
    DWORD2(v39) = v16;
    v38 = 1;
    v17 = sub_1004FF948();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v39, &v38, v5, &type metadata for AccessoryInfoCapabilities, v17);
    v18 = (int *)type metadata accessor for AccessoryInfoResponseContent(0);
    v19 = v3 + v18[6];
    LOBYTE(v39) = 2;
    v20 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    v21 = sub_100006204(&qword_1010FE2A8, type metadata accessor for AccessoryInfoResponseContent.Configuration, (uint64_t)&unk_100E414D0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, &v39, v5, v20, v21);
    v22 = v3 + v18[7];
    LOBYTE(v39) = 3;
    v23 = type metadata accessor for AccessoryInfoResponseContent.Assets(0);
    v24 = sub_100006204(&qword_1010FE2B0, type metadata accessor for AccessoryInfoResponseContent.Assets, (uint64_t)&unk_100E41588);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v39, v5, v23, v24);
    v25 = (uint64_t *)(v3 + v18[8]);
    v26 = *v25;
    v27 = v25[1];
    LOBYTE(v39) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, &v39, v5);
    v28 = (__int128 *)(v3 + v18[9]);
    v29 = v28[1];
    v39 = *v28;
    v40 = v29;
    v41[0] = v28[2];
    v38 = 5;
    v30 = sub_1004FF98C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v39, &v38, v5, &type metadata for AccessoryInfoResponseContent.PublicKeys, v30);
    v31 = v3 + v18[10];
    LOBYTE(v39) = 6;
    v32 = type metadata accessor for ServerStatusCode(0);
    v33 = sub_100006204(&qword_1010FE2C0, (uint64_t (*)(uint64_t))&type metadata accessor for ServerStatusCode, (uint64_t)&protocol conformance descriptor for ServerStatusCode);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v31, &v39, v5, v32, v33);
    *(_QWORD *)&v39 = *(_QWORD *)(v3 + v18[11]);
    v38 = 7;
    v34 = sub_10001A9A8(&qword_1010FE278);
    v35 = sub_1004FF9D0(&qword_1010FE2C8, (uint64_t (*)(void))sub_1004FFA38, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v39, &v38, v5, v34, v35);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004FCF64@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  _QWORD *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  _OWORD *v39;
  __int128 v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  _QWORD *v50;
  int *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  _OWORD v63[3];
  char v64;

  v53 = a2;
  v3 = type metadata accessor for ServerStatusCode(0);
  v55 = *(_QWORD *)(v3 - 8);
  v56 = v3;
  __chkstk_darwin(v3);
  v54 = (uint64_t *)((char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_10001A9A8(&qword_1010FBA48);
  __chkstk_darwin(v5);
  v57 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010FBA50);
  __chkstk_darwin(v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_10001A9A8(&qword_1010FE240);
  v10 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AccessoryInfoResponseContent(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v16 = a1[4];
  sub_10001AA44(a1, v17);
  v18 = sub_1004FF774();
  v58 = v12;
  v19 = v60;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessoryInfoResponseContent.CodingKeys, &type metadata for AccessoryInfoResponseContent.CodingKeys, v18, v17, v16);
  if (v19)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v20 = v57;
  v60 = v10;
  v51 = (int *)v13;
  v52 = a1;
  v50 = v15;
  v64 = 0;
  v21 = sub_1004FF7F4();
  v22 = v58;
  v23 = v59;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v61, &type metadata for AccessorySoftwareInfo, &v64, v59, &type metadata for AccessorySoftwareInfo, v21);
  v24 = BYTE8(v61);
  v25 = v62;
  v26 = v50;
  *v50 = v61;
  *((_BYTE *)v26 + 8) = v24;
  *((_OWORD *)v26 + 1) = v25;
  v26[4] = *(_QWORD *)&v63[0];
  *(_OWORD *)(v26 + 5) = *(_OWORD *)((char *)v63 + 8);
  *(_OWORD *)(v26 + 7) = *(_OWORD *)((char *)&v63[1] + 8);
  v64 = 1;
  v27 = sub_1004FF838();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for AccessoryInfoCapabilities, &v64, v23, &type metadata for AccessoryInfoCapabilities, v27);
  v28 = DWORD2(v61);
  v26[9] = v61;
  *((_DWORD *)v26 + 20) = v28;
  v29 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  LOBYTE(v61) = 2;
  v30 = sub_100006204(&qword_1010FE260, type metadata accessor for AccessoryInfoResponseContent.Configuration, (uint64_t)&unk_100E414F8);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v29, &v61, v23, v29, v30);
  sub_100005CF0((uint64_t)v9, (uint64_t)v26 + v51[6], &qword_1010FBA50);
  v31 = type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  LOBYTE(v61) = 3;
  v32 = sub_100006204(&qword_1010FE268, type metadata accessor for AccessoryInfoResponseContent.Assets, (uint64_t)&unk_100E415B0);
  v33 = (uint64_t)v20;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v31, &v61, v23, v31, v32);
  v34 = v51;
  sub_100005CF0(v33, (uint64_t)v26 + v51[7], &qword_1010FBA48);
  LOBYTE(v61) = 4;
  v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v61, v23);
  v36 = (_QWORD *)((char *)v26 + v34[8]);
  *v36 = v35;
  v36[1] = v37;
  v64 = 5;
  v38 = sub_1004FF87C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for AccessoryInfoResponseContent.PublicKeys, &v64, v23, &type metadata for AccessoryInfoResponseContent.PublicKeys, v38);
  v39 = (_OWORD *)((char *)v26 + v34[9]);
  v40 = v62;
  *v39 = v61;
  v39[1] = v40;
  v39[2] = v63[0];
  LOBYTE(v61) = 6;
  v41 = sub_100006204((unint64_t *)&qword_1010EFF30, (uint64_t (*)(uint64_t))&type metadata accessor for ServerStatusCode, (uint64_t)&protocol conformance descriptor for ServerStatusCode);
  v42 = v54;
  v43 = (char *)v26;
  v44 = v56;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v54, v56, &v61, v23, v56, v41);
  (*(void (**)(char *, _QWORD *, uint64_t))(v55 + 32))(&v43[v34[10]], v42, v44);
  v45 = sub_10001A9A8(&qword_1010FE278);
  v64 = 7;
  v46 = sub_1004FF9D0(&qword_1010FE280, (uint64_t (*)(void))sub_1004FF8C0, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v45, &v64, v23, v45, v46);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v22, v23);
  v47 = (uint64_t)v50;
  *(_QWORD *)((char *)v50 + v34[11]) = v61;
  sub_10005972C(v47, v53, type metadata accessor for AccessoryInfoResponseContent);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v52);
  return sub_1000126B0(v47, type metadata accessor for AccessoryInfoResponseContent);
}

uint64_t sub_1004FD69C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1004FD6D4 + 4 * byte_100E412F8[*v0]))(0x6572617774666F73, 0xEC0000006F666E49);
}

uint64_t sub_1004FD6D4()
{
  return 0x696C696261706163;
}

uint64_t sub_1004FD6F4()
{
  return 0x72756769666E6F63;
}

uint64_t sub_1004FD718()
{
  return 0x737465737361;
}

uint64_t sub_1004FD72C()
{
  return 0x6E6F6973726576;
}

uint64_t sub_1004FD744()
{
  return 0x654B63696C627570;
}

uint64_t sub_1004FD760()
{
  return 0x737574617473;
}

uint64_t sub_1004FD774()
{
  return 0x655474756F79616CLL;
}

uint64_t sub_1004FD798@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100503358(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004FD7BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004FF774();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004FD7E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1004FF774();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004FD80C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004FCF64(a1, a2);
}

uint64_t sub_1004FD820(_QWORD *a1)
{
  return sub_1004FCBDC(a1);
}

Swift::Int sub_1004FD834(uint64_t a1, uint64_t a2)
{
  return sub_100132C8C(a1, a2, (void (*)(_QWORD *))sub_1004FC63C);
}

Swift::Int sub_1004FD844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100132CDC(a1, a2, a3, (void (*)(_QWORD *))sub_1004FC63C);
}

uint64_t sub_1004FD854()
{
  return sub_100006204(&qword_1010FE210, type metadata accessor for AccessoryInfoResponseContent, (uint64_t)&unk_100E416B8);
}

uint64_t sub_1004FD880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  Swift::String v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  __int128 *v18;
  __int128 v19;
  uint64_t v20;
  Swift::String v21;
  __int128 v23;
  __int128 v24;
  _OWORD v25[3];
  __int128 v26;

  v1 = sub_10001A9A8(&qword_1010FBA50);
  __chkstk_darwin(v1);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v23 = 0;
  *((_QWORD *)&v23 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  v26 = v23;
  v4._countAndFlagsBits = 60;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5 = *(_BYTE *)(v0 + 8);
  v6 = *(_QWORD *)(v0 + 16);
  v7 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)&v23 = *(_QWORD *)v0;
  BYTE8(v23) = v5;
  *(_QWORD *)&v24 = v6;
  *((_QWORD *)&v24 + 1) = v7;
  *(_QWORD *)&v25[0] = *(_QWORD *)(v0 + 32);
  *(_OWORD *)((char *)v25 + 8) = *(_OWORD *)(v0 + 40);
  *(_OWORD *)((char *)&v25[1] + 8) = *(_OWORD *)(v0 + 56);
  _print_unlocked<A, B>(_:_:)(&v23, &v26, &type metadata for AccessorySoftwareInfo, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v8._countAndFlagsBits = 0x3A73757461747320;
  v8._object = (void *)0xE800000000000000;
  String.append(_:)(v8);
  v9 = (int *)type metadata accessor for AccessoryInfoResponseContent(0);
  v10 = type metadata accessor for ServerStatusCode(0);
  v11 = sub_100006204(&qword_1010FE218, (uint64_t (*)(uint64_t))&type metadata accessor for ServerStatusCode, (uint64_t)&protocol conformance descriptor for ServerStatusCode);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x6E6F697372657620;
  v13._object = (void *)0xE90000000000003ALL;
  String.append(_:)(v13);
  v23 = *(_OWORD *)(v0 + v9[8]);
  v14 = sub_10001A9A8(&qword_1010F6350);
  _print_unlocked<A, B>(_:_:)(&v23, &v26, v14, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v15._countAndFlagsBits = 0x3A6769666E6F6320;
  v15._object = (void *)0xE800000000000000;
  String.append(_:)(v15);
  sub_10000F9B8(v0 + v9[6], (uint64_t)v3, &qword_1010FBA50);
  v16._countAndFlagsBits = String.init<A>(describing:)(v3, v1);
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x4B63696C62757020;
  v17._object = (void *)0xEC0000003A737965;
  String.append(_:)(v17);
  v18 = (__int128 *)(v0 + v9[9]);
  v19 = v18[1];
  v23 = *v18;
  v24 = v19;
  v25[0] = v18[2];
  v20 = sub_10001A9A8(&qword_1010FE220);
  _print_unlocked<A, B>(_:_:)(&v23, &v26, v20, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v21._countAndFlagsBits = 62;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  return v26;
}

unint64_t sub_1004FDB04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v2 = type metadata accessor for AccessoryInfoResponseContent(0);
  swift_bridgeObjectRetain(a1);
  v4._countAndFlagsBits = Array.description.getter(v3, v2);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000020;
}

unint64_t sub_1004FDBA4()
{
  uint64_t *v0;

  return sub_1004FDB04(*v0);
}

BOOL sub_1004FDBAC(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  _BOOL8 result;
  int v12;
  int v13;
  _BOOL4 v14;
  int v15;
  int v16;
  _BOOL4 v17;
  int v18;
  int v19;
  _BOOL4 v20;
  int v21;
  int v22;
  _BOOL4 v23;
  int v24;
  int v25;
  _BOOL4 v26;
  int v27;
  int v28;
  _BOOL4 v29;
  int v30;
  int v31;
  _BOOL4 v32;
  int v33;
  int v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(_QWORD *)a1 != *(_QWORD *)a2)
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), result = 0, (v10 & 1) != 0))
  {
    v12 = *(unsigned __int8 *)(a1 + 32);
    v13 = *(unsigned __int8 *)(a2 + 32);
    if (v12 == 2)
    {
      if (v13 != 2)
        return 0;
    }
    else
    {
      result = 0;
      v14 = (v12 & 1) == 0;
      if (v13 == 2 || ((v14 ^ v13) & 1) == 0)
        return result;
    }
    v15 = *(unsigned __int8 *)(a1 + 33);
    v16 = *(unsigned __int8 *)(a2 + 33);
    if (v15 == 2)
    {
      if (v16 != 2)
        return 0;
    }
    else
    {
      result = 0;
      v17 = (v15 & 1) == 0;
      if (v16 == 2 || ((v17 ^ v16) & 1) == 0)
        return result;
    }
    v18 = *(unsigned __int8 *)(a1 + 34);
    v19 = *(unsigned __int8 *)(a2 + 34);
    if (v18 == 2)
    {
      if (v19 != 2)
        return 0;
    }
    else
    {
      result = 0;
      v20 = (v18 & 1) == 0;
      if (v19 == 2 || ((v20 ^ v19) & 1) == 0)
        return result;
    }
    v21 = *(unsigned __int8 *)(a1 + 35);
    v22 = *(unsigned __int8 *)(a2 + 35);
    if (v21 == 2)
    {
      if (v22 != 2)
        return 0;
    }
    else
    {
      result = 0;
      v23 = (v21 & 1) == 0;
      if (v22 == 2 || ((v23 ^ v22) & 1) == 0)
        return result;
    }
    v24 = *(unsigned __int8 *)(a1 + 36);
    v25 = *(unsigned __int8 *)(a2 + 36);
    if (v24 == 2)
    {
      if (v25 != 2)
        return 0;
    }
    else
    {
      result = 0;
      v26 = (v24 & 1) == 0;
      if (v25 == 2 || ((v26 ^ v25) & 1) == 0)
        return result;
    }
    v27 = *(unsigned __int8 *)(a1 + 37);
    v28 = *(unsigned __int8 *)(a2 + 37);
    if (v27 == 2)
    {
      if (v28 != 2)
        return 0;
    }
    else
    {
      result = 0;
      v29 = (v27 & 1) == 0;
      if (v28 == 2 || ((v29 ^ v28) & 1) == 0)
        return result;
    }
    v30 = *(unsigned __int8 *)(a1 + 38);
    v31 = *(unsigned __int8 *)(a2 + 38);
    if (v30 == 2)
    {
      if (v31 != 2)
        return 0;
    }
    else
    {
      result = 0;
      v32 = (v30 & 1) == 0;
      if (v31 == 2 || ((v32 ^ v31) & 1) == 0)
        return result;
    }
    v33 = *(unsigned __int8 *)(a1 + 39);
    v34 = *(unsigned __int8 *)(a2 + 39);
    if (v33 == 2)
    {
      if (v34 != 2)
        return 0;
    }
    else
    {
      result = 0;
      v35 = (v33 & 1) == 0;
      if (v34 == 2 || ((v35 ^ v34) & 1) == 0)
        return result;
    }
    v36 = *(_QWORD *)(a1 + 48);
    v37 = *(_QWORD *)(a2 + 48);
    if (v36)
    {
      if (!v37)
        return 0;
      v38 = *(_QWORD *)(a1 + 40);
      v39 = *(_QWORD *)(a2 + 40);
      if (v38 != v39 || v36 != v37)
      {
        v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v36, v39, v37, 0);
        result = 0;
        if ((v40 & 1) == 0)
          return result;
      }
    }
    else if (v37)
    {
      return 0;
    }
    v41 = *(_QWORD *)(a1 + 64);
    v42 = *(_QWORD *)(a2 + 64);
    if (v41)
    {
      if (!v42)
        return 0;
      v43 = *(_QWORD *)(a1 + 56);
      v44 = *(_QWORD *)(a2 + 56);
      return v43 == v44 && v41 == v42 || (_stringCompareWithSmolCheck(_:_:expecting:)(v43, v41, v44, v42, 0) & 1) != 0;
    }
    return !v42;
  }
  return result;
}

uint64_t sub_1004FDE64(unint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4)
{
  uint64_t result;
  unint64_t v6;
  _BOOL4 v7;
  unsigned int v8;

  result = 0;
  if (((a1 ^ a3) & 1) == 0
    && ((a1 >> 8) & 1) == ((a3 >> 8) & 1)
    && ((a1 >> 16) & 1) == ((a3 >> 16) & 1)
    && ((a1 >> 24) & 1) == ((a3 >> 24) & 1))
  {
    if ((a1 & 0xFF00000000) == 0x200000000)
    {
      if (BYTE4(a3) != 2)
        return 0;
    }
    else
    {
      result = 0;
      if (BYTE4(a3) == 2 || ((a1 & (unint64_t)&_mh_execute_header) == 0) == (BYTE4(a3) & 1))
        return result;
    }
    if ((a1 & 0xFF0000000000) == 0x20000000000)
    {
      if (BYTE5(a3) != 2)
        return 0;
    }
    else
    {
      result = 0;
      if (BYTE5(a3) == 2 || ((a1 & 0x10000000000) == 0) == ((a3 >> 40) & 1))
        return result;
    }
    if ((a1 & 0xFF000000000000) == 0x2000000000000)
    {
      if (BYTE6(a3) != 2)
        return 0;
    }
    else
    {
      result = 0;
      if (BYTE6(a3) == 2 || ((a1 & 0x1000000000000) == 0) == (HIWORD(a3) & 1))
        return result;
    }
    v6 = HIBYTE(a3);
    if (HIBYTE(a1) == 2)
    {
      if ((_DWORD)v6 != 2)
        return 0;
    }
    else
    {
      result = 0;
      v7 = (a1 & 0x100000000000000) == 0;
      if ((_DWORD)v6 == 2 || ((v7 ^ HIBYTE(a3) & 1) & 1) == 0)
        return result;
    }
    if (a2 == 2)
    {
      if (a4 != 2)
        return 0;
    }
    else
    {
      result = 0;
      if (a4 == 2 || ((((a2 & 1) == 0) ^ a4) & 1) == 0)
        return result;
    }
    if ((a2 & 0xFF00) == 0x200)
    {
      if (BYTE1(a4) != 2)
        return 0;
    }
    else
    {
      result = 0;
      if (BYTE1(a4) == 2 || ((((a2 & 0x100) == 0) ^ ((unsigned __int16)(a4 & 0x100) >> 8)) & 1) == 0)
        return result;
    }
    if ((a2 & 0xFF0000) == 0x20000)
    {
      if (BYTE2(a4) != 2)
        return 0;
LABEL_40:
      v8 = HIBYTE(a4);
      if (HIBYTE(a2) == 2)
      {
        if (v8 == 2)
          return 1;
      }
      else if (v8 != 2 && ((((a2 & 0x1000000) == 0) ^ ((a4 & 0x1000000) >> 24)) & 1) != 0)
      {
        return 1;
      }
      return 0;
    }
    result = 0;
    if (BYTE2(a4) != 2 && ((((a2 & 0x10000) == 0) ^ ((a4 & 0x10000) >> 16)) & 1) != 0)
      goto LABEL_40;
  }
  return result;
}

uint64_t sub_1004FE09C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  int v23;
  _BOOL4 v24;

  if (*a1 != *a2)
    return 0;
  v4 = *((_QWORD *)a1 + 1);
  v5 = *((_QWORD *)a1 + 2);
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a2 + 2);
  v8 = v4 == v6 && v5 == v7;
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0), result = 0, (v9 & 1) != 0))
  {
    v11 = *((_QWORD *)a1 + 3);
    v12 = *((_QWORD *)a1 + 4);
    v13 = *((_QWORD *)a2 + 3);
    v14 = *((_QWORD *)a2 + 4);
    v15 = v11 == v13 && v12 == v14;
    if (v15
      || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v13, v14, 0), result = 0, (v16 & 1) != 0))
    {
      v17 = *((_QWORD *)a1 + 6);
      v18 = *((_QWORD *)a2 + 6);
      if (v17)
      {
        if (v18)
        {
          v19 = *((_QWORD *)a1 + 5);
          v20 = *((_QWORD *)a2 + 5);
          if (v19 != v20 || v17 != v18)
          {
            v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v17, v20, v18, 0);
            result = 0;
            if ((v21 & 1) == 0)
              return result;
          }
LABEL_19:
          v22 = a1[56];
          v23 = a2[56];
          if (v22 == 2)
          {
            if (v23 != 2)
              return 0;
          }
          else
          {
            v24 = (v22 & 1) == 0;
            if (v23 == 2 || ((v24 ^ v23) & 1) == 0)
              return 0;
          }
          return 1;
        }
      }
      else if (!v18)
      {
        goto LABEL_19;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1004FE1A4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    v10 = a1[2];
    v11 = a1[3];
    v12 = a2[2];
    v13 = a2[3];
    v14 = v10 == v12 && v11 == v13;
    if (v14
      || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0), result = 0, (v15 & 1) != 0))
    {
      v16 = a1[4];
      v17 = a1[5];
      v18 = a2[4];
      v19 = a2[5];
      if (v16 == v18 && v17 == v19)
        return 1;
      else
        return _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v19, 0);
    }
  }
  return result;
}

uint64_t sub_1004FE244(uint64_t a1, uint64_t a2)
{
  int *v4;

  if ((static URL.== infix(_:_:)(a1, a2) & 1) != 0
    && (v4 = (int *)type metadata accessor for AccessoryInfoResponseContent.Assets(0),
        (static URL.== infix(_:_:)(a1 + v4[5], a2 + v4[5]) & 1) != 0)
    && (static URL.== infix(_:_:)(a1 + v4[6], a2 + v4[6]) & 1) != 0
    && (static URL.== infix(_:_:)(a1 + v4[7], a2 + v4[7]) & 1) != 0
    && (static URL.== infix(_:_:)(a1 + v4[8], a2 + v4[8]) & 1) != 0
    && (static URL.== infix(_:_:)(a1 + v4[9], a2 + v4[9]) & 1) != 0
    && (static URL.== infix(_:_:)(a1 + v4[10], a2 + v4[10]) & 1) != 0
    && (static URL.== infix(_:_:)(a1 + v4[11], a2 + v4[11]) & 1) != 0
    && (static URL.== infix(_:_:)(a1 + v4[12], a2 + v4[12]) & 1) != 0
    && (static URL.== infix(_:_:)(a1 + v4[13], a2 + v4[13]) & 1) != 0
    && (static URL.== infix(_:_:)(a1 + v4[14], a2 + v4[14]) & 1) != 0)
  {
    return static URL.== infix(_:_:)(a1 + v4[15], a2 + v4[15]);
  }
  else
  {
    return 0;
  }
}

BOOL sub_1004FE368(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  int v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  _BOOL8 result;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _OWORD v142[4];
  uint64_t v143;
  _OWORD v144[4];
  uint64_t v145;

  v137 = type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  v136 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v132 = (uint64_t)&v128 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_10001A9A8(&qword_1010FE2E0);
  __chkstk_darwin(v135);
  v6 = (char *)&v128 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010FBA48);
  v8 = __chkstk_darwin(v7);
  v133 = (uint64_t)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v139 = (uint64_t)&v128 - v11;
  __chkstk_darwin(v10);
  v138 = (uint64_t)&v128 - v12;
  v13 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v134 = (uint64_t)&v128 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1010FE2E8);
  __chkstk_darwin(v16);
  v18 = (char *)&v128 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8(&qword_1010FBA50);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v128 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v128 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v128 - v26;
  v28 = *(_OWORD *)(a1 + 48);
  v142[2] = *(_OWORD *)(a1 + 32);
  v142[3] = v28;
  v143 = *(_QWORD *)(a1 + 64);
  v29 = *(_OWORD *)(a1 + 16);
  v142[0] = *(_OWORD *)a1;
  v142[1] = v29;
  v30 = *(_OWORD *)(a2 + 48);
  v144[2] = *(_OWORD *)(a2 + 32);
  v144[3] = v30;
  v145 = *(_QWORD *)(a2 + 64);
  v31 = *(_OWORD *)(a2 + 16);
  v144[0] = *(_OWORD *)a2;
  v144[1] = v31;
  if (!sub_1004FDBAC((uint64_t)v142, (uint64_t)v144))
    return 0;
  v32 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72) == 2)
  {
    if (v32 != 2)
      return 0;
  }
  else if (v32 == 2
         || (sub_1004FDE64(*(_QWORD *)(a1 + 72) & 0xFFFFFFFF01010101, *(_DWORD *)(a1 + 80), *(_QWORD *)(a2 + 72) & 0xFFFFFFFF01010101, *(_DWORD *)(a2 + 80)) & 1) == 0)
  {
    return 0;
  }
  v131 = v6;
  v33 = type metadata accessor for AccessoryInfoResponseContent(0);
  v34 = *(int *)(v33 + 24);
  v128 = a1;
  sub_10000F9B8(a1 + v34, (uint64_t)v27, &qword_1010FBA50);
  v129 = v33;
  v35 = *(int *)(v33 + 24);
  v130 = a2;
  sub_10000F9B8(a2 + v35, (uint64_t)v25, &qword_1010FBA50);
  v36 = (uint64_t)&v18[*(int *)(v16 + 48)];
  sub_10000F9B8((uint64_t)v27, (uint64_t)v18, &qword_1010FBA50);
  sub_10000F9B8((uint64_t)v25, v36, &qword_1010FBA50);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (v37((uint64_t)v18, 1, v13) == 1)
  {
    sub_100004048((uint64_t)v25, &qword_1010FBA50);
    sub_100004048((uint64_t)v27, &qword_1010FBA50);
    v38 = v37(v36, 1, v13);
    v39 = v139;
    if (v38 == 1)
    {
      sub_100004048((uint64_t)v18, &qword_1010FBA50);
      goto LABEL_14;
    }
LABEL_12:
    v41 = &qword_1010FE2E8;
    v42 = (uint64_t)v18;
LABEL_20:
    sub_100004048(v42, v41);
    return 0;
  }
  sub_10000F9B8((uint64_t)v18, (uint64_t)v22, &qword_1010FBA50);
  v40 = v37(v36, 1, v13);
  v39 = v139;
  if (v40 == 1)
  {
    sub_100004048((uint64_t)v25, &qword_1010FBA50);
    sub_100004048((uint64_t)v27, &qword_1010FBA50);
    sub_1000126B0((uint64_t)v22, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    goto LABEL_12;
  }
  v43 = v134;
  sub_1000126EC(v36, v134, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  v44 = sub_1004FEF84((uint64_t)v22, v43);
  sub_1000126B0(v43, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  sub_100004048((uint64_t)v25, &qword_1010FBA50);
  sub_100004048((uint64_t)v27, &qword_1010FBA50);
  sub_1000126B0((uint64_t)v22, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  sub_100004048((uint64_t)v18, &qword_1010FBA50);
  if (!v44)
    return 0;
LABEL_14:
  v45 = v129;
  v46 = v128;
  v47 = v138;
  sub_10000F9B8(v128 + *(int *)(v129 + 28), v138, &qword_1010FBA48);
  v48 = v130;
  sub_10000F9B8(v130 + *(int *)(v45 + 28), v39, &qword_1010FBA48);
  v49 = (uint64_t)v131;
  v50 = (uint64_t)&v131[*(int *)(v135 + 48)];
  sub_10000F9B8(v47, (uint64_t)v131, &qword_1010FBA48);
  sub_10000F9B8(v39, v50, &qword_1010FBA48);
  v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v136 + 48);
  v52 = v137;
  if (v51(v49, 1, v137) == 1)
  {
    sub_100004048(v39, &qword_1010FBA48);
    sub_100004048(v47, &qword_1010FBA48);
    if (v51(v50, 1, v52) == 1)
    {
      sub_100004048((uint64_t)v131, &qword_1010FBA48);
      goto LABEL_24;
    }
    goto LABEL_19;
  }
  v53 = v133;
  sub_10000F9B8(v49, v133, &qword_1010FBA48);
  if (v51(v50, 1, v52) == 1)
  {
    sub_100004048(v39, &qword_1010FBA48);
    sub_100004048(v138, &qword_1010FBA48);
    sub_1000126B0(v53, type metadata accessor for AccessoryInfoResponseContent.Assets);
LABEL_19:
    v41 = &qword_1010FE2E0;
    v42 = (uint64_t)v131;
    goto LABEL_20;
  }
  v55 = v132;
  sub_1000126EC(v50, v132, type metadata accessor for AccessoryInfoResponseContent.Assets);
  v56 = sub_1004FE244(v53, v55);
  sub_1000126B0(v55, type metadata accessor for AccessoryInfoResponseContent.Assets);
  sub_100004048(v39, &qword_1010FBA48);
  sub_100004048(v138, &qword_1010FBA48);
  sub_1000126B0(v53, type metadata accessor for AccessoryInfoResponseContent.Assets);
  sub_100004048(v49, &qword_1010FBA48);
  if ((v56 & 1) == 0)
    return 0;
LABEL_24:
  v57 = *(int *)(v45 + 32);
  v58 = (_QWORD *)(v46 + v57);
  v59 = *(_QWORD *)(v46 + v57 + 8);
  v60 = (_QWORD *)(v48 + v57);
  v61 = v60[1];
  if (!v59)
  {
    if (v61)
      return 0;
    goto LABEL_31;
  }
  if (!v61)
    return 0;
  if (*v58 == *v60 && v59 == v61
    || (v62 = _stringCompareWithSmolCheck(_:_:expecting:)(*v58, v59, *v60, v61, 0), result = 0, (v62 & 1) != 0))
  {
LABEL_31:
    v63 = *(int *)(v129 + 36);
    v65 = *(_QWORD *)(v46 + v63);
    v64 = *(_QWORD *)(v46 + v63 + 8);
    v66 = *(_QWORD *)(v46 + v63 + 16);
    v67 = *(_QWORD *)(v46 + v63 + 24);
    v69 = *(_QWORD *)(v46 + v63 + 32);
    v68 = *(_QWORD *)(v46 + v63 + 40);
    v70 = (uint64_t *)(v130 + v63);
    v71 = *v70;
    v72 = v70[1];
    v73 = v70[2];
    v139 = v70[3];
    v74 = v70[4];
    v75 = v70[5];
    if (v64)
    {
      if (v72)
      {
        v136 = v70[4];
        if (v65 == v71 && v64 == v72)
          goto LABEL_56;
        v76 = v65;
        v77 = v64;
        v135 = v67;
        v138 = v64;
        v78 = v68;
        v79 = v65;
        v80 = v69;
        v81 = v66;
        v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v76, v77, v71, v72, 0);
        v66 = v81;
        v69 = v80;
        v65 = v79;
        v68 = v78;
        v64 = v138;
        v67 = v135;
        if ((v82 & 1) != 0)
        {
LABEL_56:
          if (v66 == v73 && v67 == v139)
            goto LABEL_39;
          v83 = v67;
          v135 = v67;
          v84 = v64;
          v85 = v68;
          v86 = v65;
          v87 = v69;
          v88 = v66;
          v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v83, v73, v139, 0);
          v66 = v88;
          v69 = v87;
          v65 = v86;
          v68 = v85;
          v64 = v84;
          v67 = v135;
          if ((v89 & 1) != 0)
          {
LABEL_39:
            v134 = v72;
            if (v69 == v136 && v68 == v75)
            {
              v90 = v65;
              v91 = v65;
              v92 = v64;
              v93 = v64;
              v94 = v71;
              v95 = v73;
              v96 = v66;
              v97 = v67;
              v98 = v67;
              v99 = v68;
              sub_100433FB4(v91, v92, v66, v98, v69, v68);
              sub_100433FB4(v90, v93, v96, v97, v69, v99);
              sub_100433FB4(v94, v134, v95, v139, v69, v99);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1004FF7B8(v90, v93, v96, v97, v69, v99);
            }
            else
            {
              v119 = v68;
              v120 = v66;
              LODWORD(v138) = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v68, v136, v75, 0);
              v133 = v120;
              sub_100433FB4(v65, v64, v120, v67, v69, v119);
              sub_100433FB4(v65, v64, v120, v67, v69, v119);
              sub_100433FB4(v71, v134, v73, v139, v136, v75);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1004FF7B8(v65, v64, v133, v67, v69, v119);
              result = 0;
              if ((v138 & 1) == 0)
                return result;
            }
LABEL_47:
            v121 = v129;
            v122 = v130;
            v123 = type metadata accessor for ServerStatusCode(0);
            v124 = sub_100006204(&qword_1010FE2F0, (uint64_t (*)(uint64_t))&type metadata accessor for ServerStatusCode, (uint64_t)&protocol conformance descriptor for ServerStatusCode);
            dispatch thunk of RawRepresentable.rawValue.getter(&v141, v123, v124);
            dispatch thunk of RawRepresentable.rawValue.getter(&v140, v123, v124);
            if (v141 == v140)
            {
              v125 = *(int *)(v121 + 44);
              v126 = *(_QWORD *)(v46 + v125);
              v127 = *(_QWORD *)(v122 + v125);
              if (v126)
                return v127 && (sub_1002483C0(v126, v127) & 1) != 0;
              if (!v127)
                return 1;
            }
            return 0;
          }
        }
        v115 = v65;
        v116 = v65;
        v117 = v66;
        v118 = v68;
        sub_100433FB4(v116, v64, v66, v67, v69, v68);
        sub_100433FB4(v115, v64, v117, v67, v69, v118);
        sub_100433FB4(v71, v72, v73, v139, v136, v75);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v109 = v115;
        v110 = v64;
        v111 = v117;
        v112 = v67;
        v113 = v69;
        v114 = v118;
LABEL_45:
        sub_1004FF7B8(v109, v110, v111, v112, v113, v114);
        return 0;
      }
    }
    else if (!v72)
    {
      goto LABEL_47;
    }
    v100 = v65;
    v101 = v65;
    v102 = v64;
    v103 = v66;
    v137 = v73;
    v104 = v74;
    v138 = v64;
    v105 = v68;
    sub_100433FB4(v101, v102, v66, v67, v69, v68);
    v106 = v73;
    v107 = v75;
    v108 = v139;
    sub_100433FB4(v71, v72, v106, v139, v104, v107);
    sub_1004FF7B8(v100, v138, v103, v67, v69, v105);
    v109 = v71;
    v110 = v72;
    v111 = v137;
    v112 = v108;
    v113 = v104;
    v114 = v107;
    goto LABEL_45;
  }
  return result;
}

BOOL sub_1004FEF84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _BOOL8 result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  char v52;
  void (*v53)(_BYTE *, uint64_t);
  uint64_t v54;
  double *v55;
  char v56;
  double *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  double *v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  double *v82;
  char v83;
  uint64_t v84;
  _BYTE v85[4];
  int v86;
  unsigned int (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;

  v4 = type metadata accessor for URL(0);
  v93 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v92 = &v85[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_10001A9A8(&qword_1010FE230);
  v7 = __chkstk_darwin(v6);
  v91 = &v85[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v10 = &v85[-v9];
  v11 = sub_10001A9A8(&qword_1010FBA40);
  v12 = __chkstk_darwin(v11);
  v13 = __chkstk_darwin(v12);
  v15 = &v85[-v14];
  v16 = __chkstk_darwin(v13);
  v18 = &v85[-v17];
  v19 = __chkstk_darwin(v16);
  v21 = &v85[-v20];
  v22 = __chkstk_darwin(v19);
  v24 = &v85[-v23];
  __chkstk_darwin(v22);
  v27 = &v85[-v26];
  v28 = *(_QWORD *)(a1 + 8);
  v29 = *(_QWORD *)(a2 + 8);
  if (v28)
  {
    if (!v29)
      return 0;
    v90 = v25;
    if (*(_QWORD *)a1 != *(_QWORD *)a2 || v28 != v29)
    {
      v30 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)a1, v28, *(_QWORD *)a2, v29, 0);
      result = 0;
      if ((v30 & 1) == 0)
        return result;
    }
  }
  else
  {
    v90 = v25;
    if (v29)
      return 0;
  }
  v32 = *(_QWORD *)(a1 + 16);
  v33 = *(_QWORD *)(a1 + 24);
  v34 = *(_QWORD *)(a2 + 16);
  v35 = *(_QWORD *)(a2 + 24);
  if (v32 == v34 && v33 == v35
    || (v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, v34, v35, 0), result = 0, (v36 & 1) != 0))
  {
    if ((v37 = *(_QWORD *)(a1 + 32),
          v38 = *(_QWORD *)(a1 + 40),
          v39 = *(_QWORD *)(a2 + 32),
          v40 = *(_QWORD *)(a2 + 40),
          v37 == v39)
      && v38 == v40
      || (v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, v39, v40, 0), result = 0, (v41 & 1) != 0))
    {
      v42 = *(_BYTE *)(a2 + 49);
      if ((*(_BYTE *)(a1 + 49) & 1) != 0)
      {
        if (!*(_BYTE *)(a2 + 49))
          return 0;
      }
      else
      {
        if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48))
          v42 = 1;
        if ((v42 & 1) != 0)
          return 0;
      }
      if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
        return 0;
      v43 = *(_BYTE *)(a2 + 72);
      if ((*(_BYTE *)(a1 + 72) & 1) != 0)
      {
        if (!*(_BYTE *)(a2 + 72))
          return 0;
      }
      else
      {
        if (*(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
          v43 = 1;
        if ((v43 & 1) != 0)
          return 0;
      }
      v88 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
      sub_10000F9B8(a1 + *(int *)(v88 + 40), (uint64_t)v27, &qword_1010FBA40);
      sub_10000F9B8(a2 + *(int *)(v88 + 40), (uint64_t)v24, &qword_1010FBA40);
      v89 = &v10[*(int *)(v6 + 48)];
      sub_10000F9B8((uint64_t)v27, (uint64_t)v10, &qword_1010FBA40);
      sub_10000F9B8((uint64_t)v24, (uint64_t)v89, &qword_1010FBA40);
      v87 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
      if (v87((uint64_t)v10, 1, v4) == 1)
      {
        sub_100004048((uint64_t)v24, &qword_1010FBA40);
        sub_100004048((uint64_t)v27, &qword_1010FBA40);
        if (v87((uint64_t)v89, 1, v4) != 1)
          goto LABEL_38;
        sub_100004048((uint64_t)v10, &qword_1010FBA40);
      }
      else
      {
        sub_10000F9B8((uint64_t)v10, (uint64_t)v21, &qword_1010FBA40);
        if (v87((uint64_t)v89, 1, v4) == 1)
        {
          sub_100004048((uint64_t)v24, &qword_1010FBA40);
          sub_100004048((uint64_t)v27, &qword_1010FBA40);
          (*(void (**)(_BYTE *, uint64_t))(v93 + 8))(v21, v4);
          goto LABEL_38;
        }
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v93 + 32))(v92, v89, v4);
        v44 = sub_100006204(&qword_1010FE238, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v86 = dispatch thunk of static Equatable.== infix(_:_:)(v21, v92, v4, v44);
        v89 = *(_BYTE **)(v93 + 8);
        ((void (*)(_BYTE *, uint64_t))v89)(v92, v4);
        sub_100004048((uint64_t)v24, &qword_1010FBA40);
        sub_100004048((uint64_t)v27, &qword_1010FBA40);
        ((void (*)(_BYTE *, uint64_t))v89)(v21, v4);
        sub_100004048((uint64_t)v10, &qword_1010FBA40);
        if ((v86 & 1) == 0)
          return 0;
      }
      v45 = (int *)v88;
      sub_10000F9B8(a1 + *(int *)(v88 + 44), (uint64_t)v18, &qword_1010FBA40);
      sub_10000F9B8(a2 + v45[11], (uint64_t)v15, &qword_1010FBA40);
      v10 = v91;
      v46 = (uint64_t)&v91[*(int *)(v6 + 48)];
      sub_10000F9B8((uint64_t)v18, (uint64_t)v91, &qword_1010FBA40);
      sub_10000F9B8((uint64_t)v15, v46, &qword_1010FBA40);
      v47 = v87;
      if (v87((uint64_t)v10, 1, v4) == 1)
      {
        sub_100004048((uint64_t)v15, &qword_1010FBA40);
        sub_100004048((uint64_t)v18, &qword_1010FBA40);
        if (v47(v46, 1, v4) == 1)
        {
          sub_100004048((uint64_t)v10, &qword_1010FBA40);
LABEL_42:
          v54 = v45[12];
          v55 = (double *)(a1 + v54);
          v56 = *(_BYTE *)(a1 + v54 + 8);
          v57 = (double *)(a2 + v54);
          v58 = *(unsigned __int8 *)(a2 + v54 + 8);
          if ((v56 & 1) != 0)
          {
            if (!v58)
              return 0;
          }
          else
          {
            if (*v55 != *v57)
              LOBYTE(v58) = 1;
            if ((v58 & 1) != 0)
              return 0;
          }
          v59 = v45[13];
          v60 = *(_QWORD *)(a1 + v59);
          v61 = *(_QWORD *)(a1 + v59 + 8);
          v62 = (_QWORD *)(a2 + v59);
          v63 = v62[1];
          if (v60 != *v62 || v61 != v63)
          {
            v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v61, *v62, v63, 0);
            result = 0;
            if ((v64 & 1) == 0)
              return result;
          }
          v65 = v45[14];
          v66 = *(_QWORD **)(a1 + v65);
          v67 = *(_QWORD **)(a2 + v65);
          if (v66)
          {
            if (!v67 || (sub_1002478F4(v66, v67) & 1) == 0)
              return 0;
          }
          else if (v67)
          {
            return 0;
          }
          v68 = v45[15];
          v69 = *(_QWORD *)(a1 + v68);
          v70 = *(_QWORD *)(a1 + v68 + 8);
          v71 = (_QWORD *)(a2 + v68);
          v72 = v71[1];
          if (v69 != *v71 || v70 != v72)
          {
            v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v70, *v71, v72, 0);
            result = 0;
            if ((v73 & 1) == 0)
              return result;
          }
          v74 = v45[16];
          v75 = *(_QWORD **)(a1 + v74);
          v76 = *(_QWORD **)(a2 + v74);
          if (v75)
          {
            if (!v76 || (sub_1002478F4(v75, v76) & 1) == 0)
              return 0;
          }
          else if (v76)
          {
            return 0;
          }
          v77 = v45[17];
          v78 = (double *)(a1 + v77);
          v79 = *(_BYTE *)(a1 + v77 + 16);
          v80 = a2 + v77;
          if ((v79 & 1) != 0)
          {
            if (!*(_BYTE *)(v80 + 16))
              return 0;
          }
          else
          {
            if ((*(_BYTE *)(v80 + 16) & 1) != 0)
              return 0;
            result = 0;
            if (*v78 != *(double *)v80)
              return result;
            v45 = (int *)v88;
            if (v78[1] != *(double *)(v80 + 8))
              return result;
          }
          v81 = v45[18];
          v82 = (double *)(a1 + v81);
          v83 = *(_BYTE *)(a1 + v81 + 16);
          v84 = a2 + v81;
          if ((v83 & 1) == 0)
            return (*(_BYTE *)(v84 + 16) & 1) == 0 && *v82 == *(double *)v84 && v82[1] == *(double *)(v84 + 8);
          return (*(_BYTE *)(v84 + 16) & 1) != 0;
        }
      }
      else
      {
        v48 = v90;
        sub_10000F9B8((uint64_t)v10, v90, &qword_1010FBA40);
        if (v47(v46, 1, v4) != 1)
        {
          v50 = v92;
          v49 = v93;
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v93 + 32))(v92, v46, v4);
          v51 = sub_100006204(&qword_1010FE238, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v52 = dispatch thunk of static Equatable.== infix(_:_:)(v48, v50, v4, v51);
          v53 = *(void (**)(_BYTE *, uint64_t))(v49 + 8);
          v53(v50, v4);
          sub_100004048((uint64_t)v15, &qword_1010FBA40);
          sub_100004048((uint64_t)v18, &qword_1010FBA40);
          v53((_BYTE *)v48, v4);
          v45 = (int *)v88;
          sub_100004048((uint64_t)v10, &qword_1010FBA40);
          if ((v52 & 1) == 0)
            return 0;
          goto LABEL_42;
        }
        sub_100004048((uint64_t)v15, &qword_1010FBA40);
        sub_100004048((uint64_t)v18, &qword_1010FBA40);
        (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v48, v4);
      }
LABEL_38:
      sub_100004048((uint64_t)v10, &qword_1010FE230);
      return 0;
    }
  }
  return result;
}

unint64_t sub_1004FF774()
{
  unint64_t result;

  result = qword_1010FE248;
  if (!qword_1010FE248)
  {
    result = swift_getWitnessTable(byte_100E41EB4, &type metadata for AccessoryInfoResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE248);
  }
  return result;
}

uint64_t sub_1004FF7B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a6);
  }
  return result;
}

unint64_t sub_1004FF7F4()
{
  unint64_t result;

  result = qword_1010FE250;
  if (!qword_1010FE250)
  {
    result = swift_getWitnessTable("ݦ#", &type metadata for AccessorySoftwareInfo);
    atomic_store(result, (unint64_t *)&qword_1010FE250);
  }
  return result;
}

unint64_t sub_1004FF838()
{
  unint64_t result;

  result = qword_1010FE258;
  if (!qword_1010FE258)
  {
    result = swift_getWitnessTable(byte_100E41E64, &type metadata for AccessoryInfoCapabilities);
    atomic_store(result, (unint64_t *)&qword_1010FE258);
  }
  return result;
}

unint64_t sub_1004FF87C()
{
  unint64_t result;

  result = qword_1010FE270;
  if (!qword_1010FE270)
  {
    result = swift_getWitnessTable("ٮ#", &type metadata for AccessoryInfoResponseContent.PublicKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE270);
  }
  return result;
}

unint64_t sub_1004FF8C0()
{
  unint64_t result;

  result = qword_1010FE288;
  if (!qword_1010FE288)
  {
    result = swift_getWitnessTable(byte_100E41F7C, &type metadata for AccessoryLayoutTemplate);
    atomic_store(result, (unint64_t *)&qword_1010FE288);
  }
  return result;
}

unint64_t sub_1004FF904()
{
  unint64_t result;

  result = qword_1010FE298;
  if (!qword_1010FE298)
  {
    result = swift_getWitnessTable(byte_100E41E3C, &type metadata for AccessorySoftwareInfo);
    atomic_store(result, (unint64_t *)&qword_1010FE298);
  }
  return result;
}

unint64_t sub_1004FF948()
{
  unint64_t result;

  result = qword_1010FE2A0;
  if (!qword_1010FE2A0)
  {
    result = swift_getWitnessTable(aE_22, &type metadata for AccessoryInfoCapabilities);
    atomic_store(result, (unint64_t *)&qword_1010FE2A0);
  }
  return result;
}

unint64_t sub_1004FF98C()
{
  unint64_t result;

  result = qword_1010FE2B8;
  if (!qword_1010FE2B8)
  {
    result = swift_getWitnessTable(byte_100E41668, &type metadata for AccessoryInfoResponseContent.PublicKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE2B8);
  }
  return result;
}

uint64_t sub_1004FF9D0(unint64_t *a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_10001F784(&qword_1010FE278);
    v8 = a2();
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1004FFA38()
{
  unint64_t result;

  result = qword_1010FE2D0;
  if (!qword_1010FE2D0)
  {
    result = swift_getWitnessTable(asc_100E41F2C, &type metadata for AccessoryLayoutTemplate);
    atomic_store(result, (unint64_t *)&qword_1010FE2D0);
  }
  return result;
}

_QWORD *sub_1004FFA7C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[3];
  v3 = a1[6];
  swift_bridgeObjectRetain(a1[8]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *sub_1004FFAC4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[6];
  v3 = a1[8];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t sub_1004FFB0C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 120 && a2 == 0xE100000000000000)
  {
    v4 = 0xE100000000000000;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(120, 0xE100000000000000, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 121 && a2 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease(0xE100000000000000);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(121, 0xE100000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

double sub_1004FFBC8(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  char v14;

  v4 = sub_10001A9A8(&qword_1010FE418);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  v10 = sub_100503314();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Coordinates.CodingKeys, &type metadata for Coordinates.CodingKeys, v10, v8, v9);
  if (!v1)
  {
    v14 = 0;
    v2 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v4);
    v13 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v13, v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v2;
}

_QWORD *sub_1004FFD20(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v3 = sub_10001A9A8(&qword_1010FE3E0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10001AA44(a1, v7);
  v10 = sub_10050328C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessoryInfoResponse.CodingKeys, &type metadata for AccessoryInfoResponse.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = sub_10001A9A8(&qword_1010FE3F0);
    v12 = sub_10050379C(&qword_1010FE3F8, &qword_1010FE400, (uint64_t)&unk_100E41748, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v16;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return v9;
}

uint64_t sub_1004FFE6C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  if (a1 == 0xD000000000000012)
  {
    v4 = 0x8000000100ED9750;
    if (a2 == 0x8000000100ED9750)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100ED9750, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x7250796D646E6966 && a2 == 0xEF6449746375646FLL)
  {
    v6 = 0xEF6449746375646FLL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7250796D646E6966, 0xEF6449746375646FLL, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000012)
  {
    v7 = 0x8000000100ED9770;
    if (a2 == 0x8000000100ED9770)
      goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100ED9770, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0x6341454C45487369 && a2 == 0xEF79726F73736563)
  {
    v8 = 0xEF79726F73736563;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6341454C45487369, 0xEF79726F73736563, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_22;
  }
  if (a1 == 0xD000000000000012)
  {
    v9 = 0x8000000100ED9790;
    if (a2 == 0x8000000100ED9790)
      goto LABEL_27;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100ED9790, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_27:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x8000000100ED97B0)
  {
    v10 = 0x8000000100ED97B0;
LABEL_33:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100ED97B0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_33;
  }
  if (a1 == 0x6E6564646968 && a2 == 0xE600000000000000)
  {
    v11 = 0xE600000000000000;
LABEL_39:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6564646968, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_39;
  }
  if (a1 == 0x6761547269417369 && a2 == 0xE800000000000000)
  {
    v12 = 0xE800000000000000;
LABEL_45:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6761547269417369, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_45;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100ED97D0)
  {
    v13 = 0x8000000100ED97D0;
LABEL_51:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100ED97D0, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_51;
  }
  if (a1 == 0x5565636166727573 && a2 == 0xE900000000000074)
  {
    v14 = 0xE900000000000074;
LABEL_57:
    swift_bridgeObjectRelease(v14);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5565636166727573, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_57;
  }
  if (a1 == 0x496B726F7774656ELL && a2 == 0xE900000000000064)
  {
    v15 = 0xE900000000000064;
LABEL_63:
    swift_bridgeObjectRelease(v15);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x496B726F7774656ELL, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_63;
  }
  if (a1 == 0x70756B6F6F4C6E73 && a2 == 0xEB000000006C7255)
  {
    swift_bridgeObjectRelease(0xEB000000006C7255);
    return 11;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x70756B6F6F4C6E73, 0xEB000000006C7255, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

uint64_t sub_100500374@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v5 = sub_10001A9A8(&qword_1010FE438);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100503714();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessorySoftwareInfo.CodingKeys, &type metadata for AccessorySoftwareInfo.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v47 = 0;
  v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v47, v5);
  v35 = v13;
  v46 = 1;
  v14 = KeyedDecodingContainer.decode(_:forKey:)(&v46, v5);
  v16 = v15;
  v34 = v14;
  v45 = 2;
  swift_bridgeObjectRetain(v15);
  v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v45, v5);
  v44 = 3;
  v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v44, v5);
  v43 = 4;
  v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v43, v5);
  v42 = 5;
  v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v42, v5);
  v41 = 6;
  v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v41, v5);
  v40 = 7;
  v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v40, v5);
  v39 = 8;
  v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v39, v5);
  v38 = 9;
  v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v38, v5);
  v37 = 10;
  v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v37, v5);
  v25 = v17;
  v36 = 11;
  swift_bridgeObjectRetain(v17);
  v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v36, v5);
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain(v19);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  swift_bridgeObjectRelease();
  v20 = v25;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = v35 & 1;
  *(_QWORD *)(a2 + 16) = v34;
  *(_QWORD *)(a2 + 24) = v16;
  *(_BYTE *)(a2 + 32) = v33;
  *(_BYTE *)(a2 + 33) = v32;
  *(_BYTE *)(a2 + 34) = v31;
  *(_BYTE *)(a2 + 35) = v30;
  *(_BYTE *)(a2 + 36) = v29;
  *(_BYTE *)(a2 + 37) = v28;
  *(_BYTE *)(a2 + 38) = v27;
  *(_BYTE *)(a2 + 39) = v26;
  *(_QWORD *)(a2 + 40) = v24;
  *(_QWORD *)(a2 + 48) = v20;
  *(_QWORD *)(a2 + 56) = v23;
  *(_QWORD *)(a2 + 64) = v19;
  return result;
}

uint64_t sub_10050076C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  if (a1 == 0x6E756F5379616C70 && a2 == 0xE900000000000064)
  {
    v4 = 0xE900000000000064;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E756F5379616C70, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0x6C656363417475 && a2 == 0xE700000000000000)
  {
    v6 = 0xE700000000000000;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C656363417475, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0x756B6F6F4C63666ELL && a2 == 0xE900000000000070)
  {
    v7 = 0xE900000000000070;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x756B6F6F4C63666ELL, 0xE900000000000070, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_18;
  }
  if (a1 == 0x756B6F6F4C656C62 && a2 == 0xE900000000000070)
  {
    v8 = 0xE900000000000070;
LABEL_24:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x756B6F6F4C656C62, 0xE900000000000070, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_24;
  }
  if (a1 == 0x65646F4D74736F6CLL && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_30:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65646F4D74736F6CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_30;
  }
  if (a1 == 0x6857796669746F6ELL && a2 == 0xEF646E756F466E65)
  {
    v10 = 0xEF646E756F466E65;
LABEL_36:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6857796669746F6ELL, 0xEF646E756F466E65, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_36;
  }
  if (a1 == 0x7449656D616E6572 && a2 == 0xEA00000000006D65)
  {
    v11 = 0xEA00000000006D65;
LABEL_42:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7449656D616E6572, 0xEA00000000006D65, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_42;
  }
  if (a1 == 0x65676E6172 && a2 == 0xE500000000000000)
  {
    v12 = 0xE500000000000000;
LABEL_48:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65676E6172, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_48;
  }
  if (a1 == 0x6E69646E69467462 && a2 == 0xE900000000000067)
  {
    v13 = 0xE900000000000067;
LABEL_54:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E69646E69467462, 0xE900000000000067, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_54;
  }
  if (a1 == 0xD000000000000014)
  {
    v14 = 0x8000000100ED97F0;
    if (a2 == 0x8000000100ED97F0)
      goto LABEL_59;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100ED97F0, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_59:
    swift_bridgeObjectRelease(v14);
    return 9;
  }
  if (a1 == 1886544245 && a2 == 0xE400000000000000)
  {
    v15 = 0xE400000000000000;
LABEL_65:
    swift_bridgeObjectRelease(v15);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1886544245, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_65;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x8000000100ED9810)
  {
    swift_bridgeObjectRelease(0x8000000100ED9810);
    return 11;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100ED9810, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

unint64_t sub_100500C5C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  char v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD v19[4];
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v3 = sub_10001A9A8(&qword_1010FE448);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_100503758();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessoryInfoCapabilities.CodingKeys, &type metadata for AccessoryInfoCapabilities.CodingKeys, v9, v7, v8);
  if (v1)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v36 = 0;
  v10 = KeyedDecodingContainer.decode(_:forKey:)(&v36, v3);
  v35 = 1;
  v11 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v3);
  v34 = 2;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v3);
  v33 = 3;
  v24 = KeyedDecodingContainer.decode(_:forKey:)(&v33, v3);
  v32 = 4;
  v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v3);
  v31 = 5;
  v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v3);
  v30 = 6;
  v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v3);
  v29 = 7;
  v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v29, v3);
  v28 = 8;
  v19[3] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v28, v3);
  v27 = 9;
  v19[2] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v27, v3);
  v26 = 10;
  v19[1] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v26, v3);
  v25 = 11;
  KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v25, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v14 = 256;
  if ((v11 & 1) == 0)
    v14 = 0;
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  v16 = 0x10000;
  if ((v12 & 1) == 0)
    v16 = 0;
  v17 = v15 | v16;
  v18 = 0x1000000;
  if ((v24 & 1) == 0)
    v18 = 0;
  return v17 | v18 | ((unint64_t)v23 << 32) | ((unint64_t)v22 << 40) | ((unint64_t)v21 << 48) | (v20 << 56);
}

uint64_t sub_100500FAC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6E65644974726170 && a2 == 0xEE00726569666974)
  {
    v5 = 0xEE00726569666974;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65644974726170, 0xEE00726569666974, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6570795474726170 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6570795474726170, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x656D614E74726170 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D614E74726170, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x626D795374726170 && a2 == 0xEA00000000006C6FLL)
  {
    v9 = 0xEA00000000006C6FLL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x626D795374726170, 0xEA00000000006C6FLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x72616D6972507369 && a2 == 0xE900000000000079)
  {
    swift_bridgeObjectRelease(0xE900000000000079);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72616D6972507369, 0xE900000000000079, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100501204@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v5 = sub_10001A9A8(&qword_1010FE408);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1005032D0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessoryLayoutTemplate.CodingKeys, &type metadata for AccessoryLayoutTemplate.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v33 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v33, v5);
  v32 = 1;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v5);
  v15 = v14;
  v28 = v13;
  v31 = 2;
  swift_bridgeObjectRetain(v14);
  v16 = KeyedDecodingContainer.decode(_:forKey:)(&v31, v5);
  v18 = v17;
  v25 = v16;
  v30 = 3;
  swift_bridgeObjectRetain(v17);
  v26 = 0;
  v27 = v18;
  v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
  v29 = 4;
  v26 = v19;
  swift_bridgeObjectRetain(v19);
  LOBYTE(v18) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v29, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v20 = v26;
  swift_bridgeObjectRelease();
  v21 = v27;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_BYTE *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v28;
  *(_QWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 24) = v25;
  *(_QWORD *)(a2 + 32) = v21;
  *(_QWORD *)(a2 + 40) = v24;
  *(_QWORD *)(a2 + 48) = v20;
  *(_BYTE *)(a2 + 56) = v18;
  return result;
}

uint64_t sub_1005014EC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;

  if (a1 == 0xD000000000000013)
  {
    v4 = 0x8000000100ED9680;
    if (a2 == 0x8000000100ED9680)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100ED9680, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v6 = 0x8000000100EC83B0;
    if (a2 == 0x8000000100EC83B0)
      goto LABEL_10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC83B0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_10:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if (a1 == 0x6D614E6C65646F6DLL && a2 == 0xE900000000000065)
  {
    v7 = 0xE900000000000065;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E6C65646F6DLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_16;
  }
  if (a1 == 0x5479726574746162 && a2 == 0xEB00000000657079)
  {
    v8 = 0xEB00000000657079;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5479726574746162, 0xEB00000000657079, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_22;
  }
  if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79726F6765746163, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_28;
  }
  if (a1 == 0x52746C7561666564 && a2 == 0xEB00000000656C6FLL)
  {
    v10 = 0xEB00000000656C6FLL;
LABEL_34:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x52746C7561666564, 0xEB00000000656C6FLL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_34;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100ED96A0)
  {
    v11 = 0x8000000100ED96A0;
LABEL_40:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ED96A0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_40;
  }
  if (a1 == 0xD000000000000018)
  {
    v12 = 0x8000000100ED96C0;
    if (a2 == 0x8000000100ED96C0)
      goto LABEL_45;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100ED96C0, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_45:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100ED96E0)
  {
    v13 = 0x8000000100ED96E0;
LABEL_51:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100ED96E0, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_51;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100ED9250)
  {
    v14 = 0x8000000100ED9250;
LABEL_57:
    swift_bridgeObjectRelease(v14);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100ED9250, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_57;
  }
  if (a1 == 0x726F4D6E7261656CLL && a2 == 0xEE00736D65744965)
  {
    v15 = 0xEE00736D65744965;
LABEL_63:
    swift_bridgeObjectRelease(v15);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F4D6E7261656CLL, 0xEE00736D65744965, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_63;
  }
  if (a1 == 0xD000000000000010)
  {
    v16 = 0x8000000100ED9270;
    if (a2 == 0x8000000100ED9270)
      goto LABEL_68;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100ED9270, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_68:
    swift_bridgeObjectRelease(v16);
    return 11;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100EC2E20)
  {
    v17 = 0x8000000100EC2E20;
LABEL_74:
    swift_bridgeObjectRelease(v17);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100EC2E20, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_74;
  }
  if (a1 == 0xD000000000000018)
  {
    v18 = 0x8000000100ED9700;
    if (a2 == 0x8000000100ED9700)
      goto LABEL_79;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100ED9700, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
LABEL_79:
    swift_bridgeObjectRelease(v18);
    return 13;
  }
  if (a1 == 0xD000000000000024 && a2 == 0x8000000100ED9720)
  {
    swift_bridgeObjectRelease(0x8000000100ED9720);
    return 14;
  }
  else
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000024, 0x8000000100ED9720, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v19 & 1) != 0)
      return 14;
    else
      return 15;
  }
}

uint64_t sub_100501AF0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;

  if (a1 == 0x48746C7561666564 && a2 == 0xEF6E6F63496F7265)
  {
    v5 = 0xEF6E6F63496F7265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x48746C7561666564, 0xEF6E6F63496F7265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x4C746C7561666564 && a2 == 0xEF6E6F6349747369)
  {
    v7 = 0xEF6E6F6349747369;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4C746C7561666564, 0xEF6E6F6349747369, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000011)
  {
    v8 = 0x8000000100ED95A0;
    if (a2 == 0x8000000100ED95A0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ED95A0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000011)
  {
    v9 = 0x8000000100ED95C0;
    if (a2 == 0x8000000100ED95C0)
      goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ED95C0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD000000000000011)
  {
    v10 = 0x8000000100ED95E0;
    if (a2 == 0x8000000100ED95E0)
      goto LABEL_29;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ED95E0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0xD000000000000011)
  {
    v11 = 0x8000000100ED9600;
    if (a2 == 0x8000000100ED9600)
      goto LABEL_34;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ED9600, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_34:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0x726F4D6E7261656CLL && a2 == 0xED00006E6F634965)
  {
    v12 = 0xED00006E6F634965;
LABEL_40:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F4D6E7261656CLL, 0xED00006E6F634965, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_40;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x8000000100ED9620)
  {
    v13 = 0x8000000100ED9620;
LABEL_46:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x8000000100ED9620, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_46;
  }
  if (a1 == 0x726F4D6E7261656CLL && a2 == 0xEF78326E6F634965)
  {
    v14 = 0xEF78326E6F634965;
LABEL_52:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F4D6E7261656CLL, 0xEF78326E6F634965, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_52;
  }
  if (a1 == 0xD00000000000001BLL)
  {
    v15 = 0x8000000100ED9640;
    if (a2 == 0x8000000100ED9640)
      goto LABEL_57;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100ED9640, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_57:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if (a1 == 0x726F4D6E7261656CLL && a2 == 0xEF78336E6F634965)
  {
    v16 = 0xEF78336E6F634965;
LABEL_63:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F4D6E7261656CLL, 0xEF78336E6F634965, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_63;
  }
  if (a1 == 0xD00000000000001BLL && a2 == 0x8000000100ED9660)
  {
    swift_bridgeObjectRelease(0x8000000100ED9660);
    return 11;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100ED9660, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v17 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

uint64_t sub_100502030(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x707972636E453165 && a2 == 0xEC0000006E6F6974)
  {
    v5 = 0xEC0000006E6F6974;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x707972636E453165, 0xEC0000006E6F6974, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x707972636E453265 && a2 == 0xEC0000006E6F6974)
  {
    v7 = 0xEC0000006E6F6974;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x707972636E453265, 0xEC0000006E6F6974, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6966697265563273 && a2 == 0xEE006E6F69746163)
  {
    swift_bridgeObjectRelease(0xEE006E6F69746163);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6966697265563273, 0xEE006E6F69746163, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1005021B8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;

  v5 = sub_10001A9A8(&qword_1010FE2F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1005023EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessoryInfoResponseContent.PublicKeys.CodingKeys, &type metadata for AccessoryInfoResponseContent.PublicKeys.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v30 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v5);
  v14 = v13;
  v27 = v12;
  v29 = 1;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v5);
  v17 = v16;
  v25 = v15;
  v28 = 2;
  swift_bridgeObjectRetain(v16);
  v26 = v17;
  v18 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v5);
  v20 = v19;
  v21 = v18;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain(v20);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  swift_bridgeObjectRelease();
  v22 = v26;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v27;
  a2[1] = v14;
  a2[2] = v25;
  a2[3] = v22;
  a2[4] = v21;
  a2[5] = v20;
  return result;
}

unint64_t sub_1005023EC()
{
  unint64_t result;

  result = qword_1010FE300;
  if (!qword_1010FE300)
  {
    result = swift_getWitnessTable("է#", &type metadata for AccessoryInfoResponseContent.PublicKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE300);
  }
  return result;
}

unint64_t sub_100502430()
{
  unint64_t result;

  result = qword_1010FE318;
  if (!qword_1010FE318)
  {
    result = swift_getWitnessTable(asc_100E41D74, &type metadata for AccessoryInfoResponseContent.Assets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE318);
  }
  return result;
}

unint64_t sub_100502474()
{
  unint64_t result;

  result = qword_1010FE340;
  if (!qword_1010FE340)
  {
    result = swift_getWitnessTable(aU_15, &type metadata for AccessoryInfoResponseContent.Configuration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE340);
  }
  return result;
}

unint64_t sub_1005024B8()
{
  unint64_t result;

  result = qword_1010FE348;
  if (!qword_1010FE348)
  {
    result = swift_getWitnessTable(byte_100E41F54, &type metadata for Coordinates);
    atomic_store(result, (unint64_t *)&qword_1010FE348);
  }
  return result;
}

unint64_t sub_1005024FC()
{
  unint64_t result;

  result = qword_1010FE358;
  if (!qword_1010FE358)
  {
    result = swift_getWitnessTable(aU_16, &type metadata for Coordinates);
    atomic_store(result, (unint64_t *)&qword_1010FE358);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AccessoryInfoResponseContent.Configuration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoResponseContent.Configuration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_10050261C + 4 * byte_100E41305[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_100502650 + 4 * byte_100E41300[v4]))();
}

uint64_t sub_100502650(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100502658(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100502660);
  return result;
}

uint64_t sub_10050266C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100502674);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_100502678(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100502680(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponseContent.Configuration.CodingKeys()
{
  return &type metadata for AccessoryInfoResponseContent.Configuration.CodingKeys;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponseContent.Assets.CodingKeys()
{
  return &type metadata for AccessoryInfoResponseContent.Assets.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoResponseContent.PublicKeys.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100502700 + 4 * byte_100E4130F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100502734 + 4 * byte_100E4130A[v4]))();
}

uint64_t sub_100502734(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10050273C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100502744);
  return result;
}

uint64_t sub_100502750(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100502758);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10050275C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100502764(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponseContent.PublicKeys.CodingKeys()
{
  return &type metadata for AccessoryInfoResponseContent.PublicKeys.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoResponseContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1005027CC + 4 * byte_100E41319[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100502800 + 4 * byte_100E41314[v4]))();
}

uint64_t sub_100502800(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100502808(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100502810);
  return result;
}

uint64_t sub_10050281C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100502824);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100502828(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100502830(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponseContent.CodingKeys()
{
  return &type metadata for AccessoryInfoResponseContent.CodingKeys;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponse()
{
  return &type metadata for AccessoryInfoResponse;
}

uint64_t destroy for AccessoryLayoutTemplate(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for AccessoryLayoutTemplate(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for AccessoryLayoutTemplate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

__n128 initializeWithTake for AccessoryLayoutTemplate(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AccessoryLayoutTemplate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryLayoutTemplate(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryLayoutTemplate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryLayoutTemplate()
{
  return &type metadata for AccessoryLayoutTemplate;
}

uint64_t initializeBufferWithCopyOfBuffer for AccessoryInfoCapabilities(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AccessoryInfoCapabilities(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[12])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoCapabilities(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoCapabilities()
{
  return &type metadata for AccessoryInfoCapabilities;
}

uint64_t destroy for AccessorySoftwareInfo(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for AccessorySoftwareInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for AccessorySoftwareInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  v5 = a2[3];
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
  *(_BYTE *)(a1 + 34) = *((_BYTE *)a2 + 34);
  *(_BYTE *)(a1 + 35) = *((_BYTE *)a2 + 35);
  *(_BYTE *)(a1 + 36) = *((_BYTE *)a2 + 36);
  *(_BYTE *)(a1 + 37) = *((_BYTE *)a2 + 37);
  *(_BYTE *)(a1 + 38) = *((_BYTE *)a2 + 38);
  *(_BYTE *)(a1 + 39) = *((_BYTE *)a2 + 39);
  *(_QWORD *)(a1 + 40) = a2[5];
  v7 = a2[6];
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 56) = a2[7];
  v9 = a2[8];
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t assignWithTake for AccessorySoftwareInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessorySoftwareInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessorySoftwareInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessorySoftwareInfo()
{
  return &type metadata for AccessorySoftwareInfo;
}

ValueMetadata *type metadata accessor for Coordinates()
{
  return &type metadata for Coordinates;
}

unint64_t sub_100502E10()
{
  unint64_t result;

  result = qword_1010FE360;
  if (!qword_1010FE360)
  {
    result = swift_getWitnessTable("ͬ#", &type metadata for Coordinates);
    atomic_store(result, (unint64_t *)&qword_1010FE360);
  }
  return result;
}

unint64_t sub_100502E58()
{
  unint64_t result;

  result = qword_1010FE368;
  if (!qword_1010FE368)
  {
    result = swift_getWitnessTable(aE_24, &type metadata for AccessorySoftwareInfo);
    atomic_store(result, (unint64_t *)&qword_1010FE368);
  }
  return result;
}

unint64_t sub_100502EA0()
{
  unint64_t result;

  result = qword_1010FE370;
  if (!qword_1010FE370)
  {
    result = swift_getWitnessTable(byte_100E41924, &type metadata for AccessoryInfoCapabilities);
    atomic_store(result, (unint64_t *)&qword_1010FE370);
  }
  return result;
}

unint64_t sub_100502EE8()
{
  unint64_t result;

  result = qword_1010FE378;
  if (!qword_1010FE378)
  {
    result = swift_getWitnessTable(byte_100E4198C, &type metadata for AccessoryLayoutTemplate);
    atomic_store(result, (unint64_t *)&qword_1010FE378);
  }
  return result;
}

unint64_t sub_100502F30()
{
  unint64_t result;

  result = qword_1010FE380;
  if (!qword_1010FE380)
  {
    result = swift_getWitnessTable(aM_21, &type metadata for AccessoryInfoResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE380);
  }
  return result;
}

unint64_t sub_100502F78()
{
  unint64_t result;

  result = qword_1010FE388;
  if (!qword_1010FE388)
  {
    result = swift_getWitnessTable(byte_100E41B8C, &type metadata for AccessoryInfoResponseContent.PublicKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE388);
  }
  return result;
}

unint64_t sub_100502FC0()
{
  unint64_t result;

  result = qword_1010FE390;
  if (!qword_1010FE390)
  {
    result = swift_getWitnessTable("ݨ#", &type metadata for AccessoryInfoResponseContent.Assets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE390);
  }
  return result;
}

unint64_t sub_100503008()
{
  unint64_t result;

  result = qword_1010FE398;
  if (!qword_1010FE398)
  {
    result = swift_getWitnessTable(asc_100E41CFC, &type metadata for AccessoryInfoResponseContent.Configuration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE398);
  }
  return result;
}

unint64_t sub_100503050()
{
  unint64_t result;

  result = qword_1010FE3A0;
  if (!qword_1010FE3A0)
  {
    result = swift_getWitnessTable(byte_100E41C6C, &type metadata for AccessoryInfoResponseContent.Configuration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE3A0);
  }
  return result;
}

unint64_t sub_100503098()
{
  unint64_t result;

  result = qword_1010FE3A8;
  if (!qword_1010FE3A8)
  {
    result = swift_getWitnessTable(byte_100E41C94, &type metadata for AccessoryInfoResponseContent.Configuration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE3A8);
  }
  return result;
}

unint64_t sub_1005030E0()
{
  unint64_t result;

  result = qword_1010FE3B0;
  if (!qword_1010FE3B0)
  {
    result = swift_getWitnessTable("թ#", &type metadata for AccessoryInfoResponseContent.Assets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE3B0);
  }
  return result;
}

unint64_t sub_100503128()
{
  unint64_t result;

  result = qword_1010FE3B8;
  if (!qword_1010FE3B8)
  {
    result = swift_getWitnessTable(byte_100E41BDC, &type metadata for AccessoryInfoResponseContent.Assets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE3B8);
  }
  return result;
}

unint64_t sub_100503170()
{
  unint64_t result;

  result = qword_1010FE3C0;
  if (!qword_1010FE3C0)
  {
    result = swift_getWitnessTable(byte_100E41AFC, &type metadata for AccessoryInfoResponseContent.PublicKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE3C0);
  }
  return result;
}

unint64_t sub_1005031B8()
{
  unint64_t result;

  result = qword_1010FE3C8;
  if (!qword_1010FE3C8)
  {
    result = swift_getWitnessTable(aU_17, &type metadata for AccessoryInfoResponseContent.PublicKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE3C8);
  }
  return result;
}

unint64_t sub_100503200()
{
  unint64_t result;

  result = qword_1010FE3D0;
  if (!qword_1010FE3D0)
  {
    result = swift_getWitnessTable(aE_25, &type metadata for AccessoryInfoResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE3D0);
  }
  return result;
}

unint64_t sub_100503248()
{
  unint64_t result;

  result = qword_1010FE3D8;
  if (!qword_1010FE3D8)
  {
    result = swift_getWitnessTable(asc_100E41A6C, &type metadata for AccessoryInfoResponseContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE3D8);
  }
  return result;
}

unint64_t sub_10050328C()
{
  unint64_t result;

  result = qword_1010FE3E8;
  if (!qword_1010FE3E8)
  {
    result = swift_getWitnessTable(byte_100E424A4, &type metadata for AccessoryInfoResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE3E8);
  }
  return result;
}

unint64_t sub_1005032D0()
{
  unint64_t result;

  result = qword_1010FE410;
  if (!qword_1010FE410)
  {
    result = swift_getWitnessTable(aE_26, &type metadata for AccessoryLayoutTemplate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE410);
  }
  return result;
}

unint64_t sub_100503314()
{
  unint64_t result;

  result = qword_1010FE420;
  if (!qword_1010FE420)
  {
    result = swift_getWitnessTable(byte_100E42404, &type metadata for Coordinates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE420);
  }
  return result;
}

uint64_t sub_100503358(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  if (a1 == 0x6572617774666F73 && a2 == 0xEC0000006F666E49)
  {
    v5 = 0xEC0000006F666E49;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6572617774666F73, 0xEC0000006F666E49, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x696C696261706163 && a2 == 0xEC00000073656974)
  {
    v7 = 0xEC00000073656974;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696C696261706163, 0xEC00000073656974, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x72756769666E6F63 && a2 == 0xED00006E6F697461)
  {
    v8 = 0xED00006E6F697461;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72756769666E6F63, 0xED00006E6F697461, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x737465737361 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737465737361, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    v10 = 0xE700000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x654B63696C627570 && a2 == 0xEA00000000007379)
  {
    v11 = 0xEA00000000007379;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654B63696C627570, 0xEA00000000007379, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x737574617473 && a2 == 0xE600000000000000)
  {
    v12 = 0xE600000000000000;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737574617473, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x655474756F79616CLL && a2 == 0xEE006574616C706DLL)
  {
    swift_bridgeObjectRelease(0xEE006574616C706DLL);
    return 7;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x655474756F79616CLL, 0xEE006574616C706DLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

unint64_t sub_100503714()
{
  unint64_t result;

  result = qword_1010FE440;
  if (!qword_1010FE440)
  {
    result = swift_getWitnessTable(byte_100E423B4, &type metadata for AccessorySoftwareInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE440);
  }
  return result;
}

unint64_t sub_100503758()
{
  unint64_t result;

  result = qword_1010FE450;
  if (!qword_1010FE450)
  {
    result = swift_getWitnessTable(a5_4, &type metadata for AccessoryInfoCapabilities.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE450);
  }
  return result;
}

uint64_t sub_10050379C(unint64_t *a1, unint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001F784(&qword_1010FE3F0);
    v10 = sub_100006204(a2, type metadata accessor for AccessoryInfoResponseContent, a3);
    result = swift_getWitnessTable(a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoCapabilities.CodingKeys()
{
  return &type metadata for AccessoryInfoCapabilities.CodingKeys;
}

uint64_t _s12searchpartyd28AccessoryInfoResponseContentV6AssetsV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_10050387C + 4 * byte_100E41323[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1005038B0 + 4 * byte_100E4131E[v4]))();
}

uint64_t sub_1005038B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005038B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005038C0);
  return result;
}

uint64_t sub_1005038CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005038D4);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1005038D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005038E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessorySoftwareInfo.CodingKeys()
{
  return &type metadata for AccessorySoftwareInfo.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for Coordinates.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100503948 + 4 * byte_100E4132D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10050397C + 4 * byte_100E41328[v4]))();
}

uint64_t sub_10050397C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100503984(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10050398CLL);
  return result;
}

uint64_t sub_100503998(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005039A0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1005039A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005039AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Coordinates.CodingKeys()
{
  return &type metadata for Coordinates.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AccessoryLayoutTemplate.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100503A14 + 4 * byte_100E41337[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100503A48 + 4 * byte_100E41332[v4]))();
}

uint64_t sub_100503A48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100503A50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100503A58);
  return result;
}

uint64_t sub_100503A64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100503A6CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100503A70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100503A78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryLayoutTemplate.CodingKeys()
{
  return &type metadata for AccessoryLayoutTemplate.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoResponse.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100503AD4 + 4 * byte_100E4133C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100503AF4 + 4 * byte_100E41341[v4]))();
}

_BYTE *sub_100503AD4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100503AF4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100503AFC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100503B04(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100503B0C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100503B14(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponse.CodingKeys()
{
  return &type metadata for AccessoryInfoResponse.CodingKeys;
}

unint64_t sub_100503B34()
{
  unint64_t result;

  result = qword_1010FE480;
  if (!qword_1010FE480)
  {
    result = swift_getWitnessTable("Ť#", &type metadata for AccessoryInfoResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE480);
  }
  return result;
}

unint64_t sub_100503B7C()
{
  unint64_t result;

  result = qword_1010FE488;
  if (!qword_1010FE488)
  {
    result = swift_getWitnessTable(asc_100E42114, &type metadata for AccessoryLayoutTemplate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE488);
  }
  return result;
}

unint64_t sub_100503BC4()
{
  unint64_t result;

  result = qword_1010FE490;
  if (!qword_1010FE490)
  {
    result = swift_getWitnessTable(aU_18, &type metadata for Coordinates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE490);
  }
  return result;
}

unint64_t sub_100503C0C()
{
  unint64_t result;

  result = qword_1010FE498;
  if (!qword_1010FE498)
  {
    result = swift_getWitnessTable(byte_100E42284, &type metadata for AccessorySoftwareInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE498);
  }
  return result;
}

unint64_t sub_100503C54()
{
  unint64_t result;

  result = qword_1010FE4A0;
  if (!qword_1010FE4A0)
  {
    result = swift_getWitnessTable(byte_100E4233C, &type metadata for AccessoryInfoCapabilities.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE4A0);
  }
  return result;
}

unint64_t sub_100503C9C()
{
  unint64_t result;

  result = qword_1010FE4A8;
  if (!qword_1010FE4A8)
  {
    result = swift_getWitnessTable("ݢ#", &type metadata for AccessoryInfoCapabilities.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE4A8);
  }
  return result;
}

unint64_t sub_100503CE4()
{
  unint64_t result;

  result = qword_1010FE4B0;
  if (!qword_1010FE4B0)
  {
    result = swift_getWitnessTable(byte_100E422D4, &type metadata for AccessoryInfoCapabilities.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE4B0);
  }
  return result;
}

unint64_t sub_100503D2C()
{
  unint64_t result;

  result = qword_1010FE4B8;
  if (!qword_1010FE4B8)
  {
    result = swift_getWitnessTable(byte_100E421F4, &type metadata for AccessorySoftwareInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE4B8);
  }
  return result;
}

unint64_t sub_100503D74()
{
  unint64_t result;

  result = qword_1010FE4C0;
  if (!qword_1010FE4C0)
  {
    result = swift_getWitnessTable(asc_100E4221C, &type metadata for AccessorySoftwareInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE4C0);
  }
  return result;
}

unint64_t sub_100503DBC()
{
  unint64_t result;

  result = qword_1010FE4C8;
  if (!qword_1010FE4C8)
  {
    result = swift_getWitnessTable(aM_22, &type metadata for Coordinates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE4C8);
  }
  return result;
}

unint64_t sub_100503E04()
{
  unint64_t result;

  result = qword_1010FE4D0;
  if (!qword_1010FE4D0)
  {
    result = swift_getWitnessTable(byte_100E42164, &type metadata for Coordinates.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE4D0);
  }
  return result;
}

unint64_t sub_100503E4C()
{
  unint64_t result;

  result = qword_1010FE4D8;
  if (!qword_1010FE4D8)
  {
    result = swift_getWitnessTable(byte_100E42084, &type metadata for AccessoryLayoutTemplate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE4D8);
  }
  return result;
}

unint64_t sub_100503E94()
{
  unint64_t result;

  result = qword_1010FE4E0;
  if (!qword_1010FE4E0)
  {
    result = swift_getWitnessTable("ͤ#", &type metadata for AccessoryLayoutTemplate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE4E0);
  }
  return result;
}

unint64_t sub_100503EDC()
{
  unint64_t result;

  result = qword_1010FE4E8;
  if (!qword_1010FE4E8)
  {
    result = swift_getWitnessTable(byte_100E41FCC, &type metadata for AccessoryInfoResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE4E8);
  }
  return result;
}

unint64_t sub_100503F24()
{
  unint64_t result;

  result = qword_1010FE4F0;
  if (!qword_1010FE4F0)
  {
    result = swift_getWitnessTable(byte_100E41FF4, &type metadata for AccessoryInfoResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE4F0);
  }
  return result;
}

_QWORD *sub_100503F68(uint64_t a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v36;
  char *v37;
  _QWORD v38[3];
  uint64_t v39;
  _UNKNOWN **v40;

  v3 = v2;
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6);
  v37 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_101108020);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v15 = (void *)qword_1011B7160;
  v16 = type metadata accessor for SPObserverAnalyticsAttempts();
  v17 = swift_allocObject(v16, 24, 7);
  *(_QWORD *)(v17 + 16) = v15;
  v3[6] = 0;
  v3[7] = 0;
  v3[5] = v17;
  v18 = sub_10001A9A8(&qword_1010FAAF0);
  v19 = swift_allocObject(v18, 20, 7);
  *(_DWORD *)(v19 + 16) = 0;
  v3[9] = 0;
  v3[10] = 0;
  v3[8] = v19;
  v3[2] = a1;
  v3[3] = a2;
  swift_retain();
  swift_retain();
  v36 = a2;
  v3[4] = sub_1006BA87C((uint64_t)_swiftEmptyArrayStorage);
  v39 = type metadata accessor for SPObserverAnalytics();
  v40 = &off_10107C5D0;
  v38[0] = v3;
  __chkstk_darwin(v39);
  *(&v36 - 2) = v38;
  *(&v36 - 1) = v15;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_100150D80, &v36 - 4, v11);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
  v20 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v10, 1, 1, v20);
  v21 = swift_allocObject(&unk_10107C640, 32, 7);
  *(_QWORD *)(v21 + 16) = 0;
  *(_QWORD *)(v21 + 24) = 0;
  sub_100028774((uint64_t)v10, (uint64_t)&unk_1010FE710, v21);
  swift_release();
  v22 = sub_100004048((uint64_t)v10, &qword_1010F46C0);
  v23 = (uint64_t)v37;
  static DispatchQoS.default.getter(v22);
  v24 = swift_allocObject(&unk_10107C668, 24, 7);
  swift_weakInit(v24 + 16, v3);
  v25 = swift_allocObject(&unk_10107C690, 32, 7);
  *(_QWORD *)(v25 + 16) = v24;
  *(_QWORD *)(v25 + 24) = a1;
  v26 = swift_allocObject(&unk_10107C668, 24, 7);
  swift_weakInit(v26 + 16, v3);
  v27 = swift_allocObject(&unk_10107C6B8, 32, 7);
  *(_QWORD *)(v27 + 16) = v26;
  *(_QWORD *)(v27 + 24) = a1;
  v28 = type metadata accessor for XPCActivity();
  swift_allocObject(v28, 112, 7);
  swift_retain_n(a1, 2);
  v29 = sub_100734F68(0xD000000000000034, (void *)0x8000000100ED9980, v23, (uint64_t)sub_10050D9F4, v25, (uint64_t)sub_10050DA00, v27);
  swift_release();
  swift_release();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100139464, v29, *(_QWORD *)(v29 + 40), &type metadata for () + 1, &type metadata for () + 1);
  v3[10] = v29;
  swift_retain();
  swift_release();
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v30 = swift_retain();
  v31 = AnyCurrentValuePublisher.publisher.getter(v30);
  swift_release();
  v38[0] = v31;
  swift_retain();
  v32 = sub_10001A9A8(&qword_1011194D0);
  v33 = sub_1000193A4(&qword_101108430, &qword_1011194D0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v34 = Publisher<>.sink(receiveValue:)(sub_10050DA08, v29, v32, v33);
  swift_release();

  swift_release_n(v29, 2);
  swift_release();
  v3[6] = v34;
  swift_release();
  return v3;
}

uint64_t sub_100504400()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_10001A9A8(&qword_1010EBAC8);
  v0[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for FinderStateInfo(0);
  v0[16] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v0[17] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[18] = swift_task_alloc(v4);
  v0[19] = swift_task_alloc(v4);
  v5 = sub_10001A9A8(&qword_1010EBAD0);
  v0[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EBAD8);
  v0[21] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v0[22] = v7;
  v0[23] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EBAE0);
  v0[24] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v0[25] = v9;
  v0[26] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10050450C, 0, 0);
}

uint64_t sub_10050450C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBAE8 + dword_1010EBAE8);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBAEC);
    *(_QWORD *)(v0 + 216) = v2;
    *v2 = v0;
    v2[1] = sub_1005045F8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005045F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100504654, 0, 0);
}

uint64_t sub_100504654()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 224))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_1011011C4);
    *(_QWORD *)(v0 + 232) = v2;
    *v2 = v0;
    v2[1] = sub_100504780;
    return sub_10061306C(*(_QWORD *)(v0 + 184));
  }
  else
  {
    v4 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v5 = static os_log_type_t.error.getter(v4);
    if (qword_1010EA240 != -1)
      swift_once(&qword_1010EA240, sub_100B5D89C);
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, qword_1011B7D20, "Missing FinderStateObserver service.", 36, 2, _swiftEmptyArrayStorage);
    v6 = *(_QWORD *)(v0 + 184);
    v8 = *(_QWORD *)(v0 + 152);
    v7 = *(_QWORD *)(v0 + 160);
    v9 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 120);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100504780()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 232));
  return swift_task_switch(sub_1005047D4, 0, 0);
}

uint64_t sub_1005047D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[22];
  v1 = v0[23];
  v3 = v0[21];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[30] = 0;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[31] = v4;
  *v4 = v0;
  v4[1] = sub_100504864;
  return AsyncStream.Iterator.next(isolation:)(v0[20], 0, 0, v0[24]);
}

uint64_t sub_100504864()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 248));
  return swift_task_switch(sub_1005048B8, 0, 0);
}

uint64_t sub_1005048B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = sub_10001A9A8(&qword_1010EBAF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));
    swift_release();
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 152);
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 136);
    v6 = *(_QWORD *)(v0 + 120);
    swift_release();
    v7 = v1 + *(int *)(v2 + 48);
    v8 = sub_10001A9A8(&qword_1010EBAF8);
    sub_1000126EC(v7 + *(int *)(v8 + 48), v3, type metadata accessor for FinderStateInfo);
    sub_100005CF0(v7, v6, &qword_1010EBAC8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1)
    {
      v9 = *(_QWORD *)(v0 + 152);
      v10 = *(_QWORD *)(v0 + 120);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));
      swift_release();
      sub_1000126B0(v9, type metadata accessor for FinderStateInfo);
      sub_100004048(v10, &qword_1010EBAC8);
    }
    else
    {
      v12 = *(unsigned __int8 **)(v0 + 144);
      v11 = *(unsigned __int8 **)(v0 + 152);
      sub_1000126EC(*(_QWORD *)(v0 + 120), (uint64_t)v12, type metadata accessor for FinderStateInfo);
      if (*v12 != *v11)
      {
        v13 = *(_QWORD *)(v0 + 152);
        v14 = type metadata accessor for AnalyticsEvent(0);
        v15 = (char *)swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
        *(_QWORD *)(v0 + 256) = v15;
        swift_defaultActor_initialize(v15);
        v16 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
        *((_QWORD *)v15 + 14) = v16;
        UUID.init()(v16);
        v17 = &v15[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
        v18 = type metadata accessor for DispatchTime(0);
        v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
        v19(v17, 1, 1, v18);
        v19(&v15[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v18);
        *((_QWORD *)v15 + 15) = 0xD00000000000002BLL;
        *((_QWORD *)v15 + 16) = 0x8000000100ED9B50;
        v20 = swift_task_alloc(32);
        *(_QWORD *)(v0 + 264) = v20;
        *(_QWORD *)(v20 + 16) = v13;
        return swift_task_switch(sub_100504B9C, v15, 0);
      }
      v23 = *(_QWORD *)(v0 + 200);
      v22 = *(_QWORD *)(v0 + 208);
      v24 = *(_QWORD *)(v0 + 192);
      v26 = *(_QWORD *)(v0 + 144);
      v25 = *(_QWORD *)(v0 + 152);
      swift_release();
      sub_1000126B0(v26, type metadata accessor for FinderStateInfo);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
      sub_1000126B0(v25, type metadata accessor for FinderStateInfo);
    }
  }
  v27 = *(_QWORD *)(v0 + 184);
  v29 = *(_QWORD *)(v0 + 152);
  v28 = *(_QWORD *)(v0 + 160);
  v30 = *(_QWORD *)(v0 + 144);
  v31 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100504B9C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = v0[30];
  sub_100CCC4A0((uint64_t (*)(uint64_t))sub_10050DE70);
  v0[34] = v1;
  v2 = v0[33];
  if (v1)
  {
    swift_errorRelease(v1);
    swift_task_dealloc(v2);
    v3 = sub_100504D88;
  }
  else
  {
    swift_task_dealloc(v0[33]);
    v3 = sub_100504C1C;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100504C1C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v0[35] = v0[34];
  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[36] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[37] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_100504C90;
  return sub_100CD63AC(v0[32]);
}

uint64_t sub_100504C90()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 296));
  swift_release();
  return swift_task_switch(sub_100504CEC, 0, 0);
}

uint64_t sub_100504CEC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[18];
  v2 = v0[19];
  swift_release();
  sub_1000126B0(v1, type metadata accessor for FinderStateInfo);
  sub_1000126B0(v2, type metadata accessor for FinderStateInfo);
  v0[30] = v0[35];
  v3 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[31] = v3;
  *v3 = v0;
  v3[1] = sub_100504864;
  return AsyncStream.Iterator.next(isolation:)(v0[20], 0, 0, v0[24]);
}

uint64_t sub_100504D88()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v0[35] = 0;
  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[36] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[37] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_100504C90;
  return sub_100CD63AC(v0[32]);
}

unint64_t sub_100504DF8(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t inited;
  uint64_t v6;
  char v7;

  v1 = *a1;
  v2 = sub_10001A9A8(&qword_1010EEBD0);
  if ((_DWORD)v1)
    v3 = &v6;
  else
    v3 = (uint64_t *)&v7;
  inited = swift_initStackObject(v2, v3);
  *(_OWORD *)(inited + 16) = xmmword_100E22B10;
  *(_QWORD *)(inited + 32) = 0x7669746341646964;
  *(_QWORD *)(inited + 40) = 0xEB00000000657461;
  *(_QWORD *)(inited + 48) = v1;
  *(_BYTE *)(inited + 56) = 1;
  *(_QWORD *)(inited + 64) = 0x6E6F73616572;
  *(_QWORD *)(inited + 72) = 0xE600000000000000;
  sub_10000F4A0(0, &qword_101106C10, NSString_ptr);
  *(_QWORD *)(inited + 80) = NSString.init(stringLiteral:)("", 0, 2);
  *(_BYTE *)(inited + 88) = 0;
  return sub_1006B9444(inited);
}

uint64_t sub_100504ECC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[24];
  _OWORD v19[2];
  uint64_t v20;
  unsigned __int8 v21[40];

  sub_100005CF0(a1, (uint64_t)v19, &qword_101106350);
  v16 = v19[1];
  v17 = v19[0];
  v6 = v20;
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v7 = swift_retain();
  AnyCurrentValuePublisher.value.getter(v21, v7);
  swift_release();
  if (v21[0] != 1)
  {
    swift_beginAccess(a2 + 16, v18, 0, 0);
    result = swift_weakLoadStrong(a2 + 16);
    v9 = xmmword_100E2E3C0;
    v10 = 0uLL;
    if (!result)
    {
      v6 = 0;
      goto LABEL_16;
    }
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10050DE64, result, *(_QWORD *)(result + 64), &type metadata for () + 1, &type metadata for Int);
    result = swift_release();
    if (*(_QWORD *)v21 != 1)
    {
      v6 = 0;
      v9 = xmmword_100E2E3C0;
      v10 = 0uLL;
      goto LABEL_16;
    }
  }
  v11 = sub_100017368();
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = (_QWORD *)(v11 + 32);
    while (1)
    {
      v14 = v13[3];
      v15 = v13[4];
      sub_10001AA44(v13, v14);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v15 + 96))(v14, v15) & 1) != 0)
        break;
      v13 += 5;
      if (!--v12)
        goto LABEL_10;
    }
    swift_bridgeObjectRelease();
    result = sub_100005CF0(a1, (uint64_t)v21, &qword_101106350);
    if (v21[0] == 2)
    {
      v10 = xmmword_100E42500;
      v9 = xmmword_100E42510;
      v6 = 580;
    }
    else
    {
      v10 = v16;
      v9 = v17;
    }
  }
  else
  {
LABEL_10:
    result = swift_bridgeObjectRelease();
    v6 = 0;
    v9 = xmmword_100E2E3C0;
    v10 = 0uLL;
  }
LABEL_16:
  *(_OWORD *)a3 = v9;
  *(_OWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 32) = v6;
  return result;
}

uint64_t sub_1005050DC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _BYTE v15[24];

  v6 = a4 + 16;
  swift_beginAccess(a4 + 16, v15, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    v8 = result;
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_1007329F0();
    }
    else if (a3 == 2)
    {
      v9 = sub_1000188D0();
      v10 = sub_10050D5C4((uint64_t)v9);
      swift_bridgeObjectRelease();
      v11 = v10[2];
      if (v11)
      {
        v12 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
        v13 = (void (*)(char *, char *, uint64_t))((char *)v10
                                                           + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)));
        v14 = *(_QWORD *)(v12 + 72);
        swift_bridgeObjectRetain(v10);
        do
        {
          sub_10050D1D0(v13, a2, v8);
          v13 = (void (*)(char *, char *, uint64_t))((char *)v13 + v14);
          --v11;
        }
        while (v11);
        swift_bridgeObjectRelease_n(v10, 2);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      sub_100732A0C();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100505208(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[5];
  _BYTE v10[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v9[2] = __chkstk_darwin(result);
    v9[3] = v2;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10050D938, v9, v6, &type metadata for () + 1, &type metadata for () + 1);
    v7 = *(_QWORD *)(v5 + 80);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 40);
      swift_retain();
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100139464, v7, v8, &type metadata for () + 1, &type metadata for () + 1);
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1005053D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 80));
  return v0;
}

uint64_t sub_10050542C()
{
  uint64_t v0;

  sub_1005053D8();
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for SPObserverAnalytics()
{
  return objc_opt_self(_TtC12searchpartyd19SPObserverAnalytics);
}

uint64_t sub_10050546C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[40];

  v2 = *(_QWORD *)(v1 + 16);
  sub_10080B648(a1, (uint64_t)v15);
  sub_10000F9B8((uint64_t)v15, (uint64_t)&v10, (uint64_t *)&unk_1010EE310);
  if (v11)
  {
    sub_10000F9FC(&v10, (uint64_t)v12);
    v3 = v13;
    v4 = v14;
    v5 = sub_10001AA44(v12, v13);
    v6 = sub_100854C8C((uint64_t)v5, v2, v3, v4);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
  }
  else
  {
    sub_100004048((uint64_t)&v10, (uint64_t *)&unk_1010EE310);
    v6 = 0;
  }
  type metadata accessor for Transaction(0);
  v7 = swift_allocObject(&unk_10107C618, 24, 7);
  *(_QWORD *)(v7 + 16) = v6;
  v8 = v6;
  static Transaction.asyncTask(name:block:)("MultiConnectionAnalytics", 24, 2, &unk_1010FE690, v7);

  swift_release();
  return sub_100004048((uint64_t)v15, (uint64_t *)&unk_1010EE310);
}

uint64_t sub_100505578(uint64_t (*a1)(uint64_t a1))
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(void);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t (*v74)(uint64_t);
  _QWORD *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t, unint64_t);
  uint64_t v85;
  uint64_t v86;
  double v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(uint64_t, uint64_t, unint64_t);
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  void (*v149)(void);
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t (*v153)(uint64_t);
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  unint64_t v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;

  v2 = type metadata accessor for BeaconObservation(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v136 = (uint64_t)&v134 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (unint64_t)&v134 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v134 - v10;
  v12 = __chkstk_darwin(v9);
  v142 = (uint64_t)&v134 - v13;
  v14 = __chkstk_darwin(v12);
  v154 = (uint64_t)&v134 - v15;
  v16 = __chkstk_darwin(v14);
  v155 = (uint64_t)&v134 - v17;
  v18 = __chkstk_darwin(v16);
  v138 = (char *)&v134 - v19;
  v20 = __chkstk_darwin(v18);
  v156 = (char *)&v134 - v21;
  __chkstk_darwin(v20);
  v23 = (uint64_t (*)(uint64_t))((char *)&v134 - v22);
  v24 = sub_10001A9A8(&qword_1010EF660);
  v25 = __chkstk_darwin(v24);
  v140 = (uint64_t)&v134 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v135 = (uint64_t)&v134 - v28;
  v29 = __chkstk_darwin(v27);
  v139 = (char *)&v134 - v30;
  v31 = __chkstk_darwin(v29);
  v151 = (uint64_t)&v134 - v32;
  v33 = __chkstk_darwin(v31);
  v137 = (uint64_t)&v134 - v34;
  v35 = __chkstk_darwin(v33);
  v143 = (uint64_t)&v134 - v36;
  v37 = __chkstk_darwin(v35);
  v148 = (uint64_t)&v134 - v38;
  v39 = __chkstk_darwin(v37);
  v144 = (uint64_t)&v134 - v40;
  v41 = __chkstk_darwin(v39);
  v43 = (unint64_t)&v134 - v42;
  __chkstk_darwin(v41);
  v159 = v3;
  v44 = *(void (**)(void))(v3 + 56);
  v152 = (unint64_t)&v134 - v45;
  v149 = v44;
  v44();
  if (qword_1010E9CF0 != -1)
    goto LABEL_83;
  while (1)
  {
    v46 = qword_1011B7160;
    v147 = objc_autoreleasePoolPush();
    v47 = sub_10001A9A8(&qword_1010F7770);
    v48 = v46;
    v150 = v47;
    v49 = 0;
    OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v48, v47);
    v50 = v162;
    v51 = v162[2];
    v158 = v2;
    v153 = a1;
    v157 = v11;
    v145 = v43;
    if (!v51)
      goto LABEL_15;
    v52 = sub_100003FB0((uint64_t)a1);
    if ((v53 & 1) != 0)
    {
      v146 = 0;
      v54 = *(_QWORD *)(v50[7] + 8 * v52);
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRelease();
      v55 = sub_100509958(v54, &qword_1010FA4C8, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_10050AC94);
      swift_bridgeObjectRelease();
      sub_10088FD00((uint64_t)v55);
      v11 = v56;
      swift_release();
      v57 = _swiftEmptyArrayStorage;
      v162 = _swiftEmptyArrayStorage;
      v58 = *((_QWORD *)v11 + 2);
      if (v58)
      {
        v134 = v8;
        v8 = 0;
        a1 = type metadata accessor for BeaconObservation;
        while (v8 < *((_QWORD *)v11 + 2))
        {
          v59 = (*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80);
          v60 = *(_QWORD *)(v159 + 72);
          sub_10005972C((uint64_t)&v11[v59 + v60 * v8], (uint64_t)v23, type metadata accessor for BeaconObservation);
          if (*((_BYTE *)v23 + *(int *)(v2 + 24)) == 33)
          {
            sub_1000126EC((uint64_t)v23, (uint64_t)v156, type metadata accessor for BeaconObservation);
            if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) == 0)
              sub_10009AAC8(0, v57[2] + 1, 1);
            v57 = v162;
            v43 = v162[2];
            v61 = v162[3];
            if (v43 >= v61 >> 1)
            {
              sub_10009AAC8(v61 > 1, v43 + 1, 1);
              v57 = v162;
            }
            v57[2] = v43 + 1;
            sub_1000126EC((uint64_t)v156, (uint64_t)v57 + v59 + v43 * v60, type metadata accessor for BeaconObservation);
            v2 = v158;
          }
          else
          {
            sub_1000126B0((uint64_t)v23, type metadata accessor for BeaconObservation);
          }
          if (v58 == ++v8)
          {
            v57 = v162;
            a1 = v153;
            v8 = v134;
            goto LABEL_17;
          }
        }
        __break(1u);
        goto LABEL_81;
      }
LABEL_17:
      swift_release();
      v43 = v145;
      v11 = v157;
      v49 = v146;
    }
    else
    {
LABEL_15:
      swift_bridgeObjectRelease();
      v57 = _swiftEmptyArrayStorage;
    }
    objc_autoreleasePoolPop(v147);
    v146 = *(int *)(v2 + 24);
    if (*((_BYTE *)a1 + v146) == 33)
      sub_1001E6810((uint64_t)v57, v43);
    else
      sub_100A797E8((uint64_t)v57, v43);
    swift_bridgeObjectRelease();
    v62 = v144;
    sub_10000F9B8(v43, v144, &qword_1010EF660);
    v147 = *(void **)(v159 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))v147)(v62, 1, v2) == 1)
    {
      sub_100004048(v62, &qword_1010EF660);
      v63 = 0.0;
    }
    else
    {
      v64 = v49;
      v65 = v138;
      v66 = sub_1000126EC(v62, (uint64_t)v138, type metadata accessor for BeaconObservation);
      v63 = fabs(Date.timeIntervalSinceNow.getter(v66));
      v43 = v152;
      sub_100004048(v152, &qword_1010EF660);
      v67 = (uint64_t)v65;
      v49 = v64;
      v11 = v157;
      sub_1000126EC(v67, v43, type metadata accessor for BeaconObservation);
      ((void (*)(unint64_t, _QWORD, uint64_t, unint64_t))v149)(v43, 0, 1, v2);
    }
    v68 = qword_1011B7160;
    v138 = (char *)objc_autoreleasePoolPush();
    OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v68, v150);
    v144 = v49;
    v69 = v162;
    if (!v162[2] || (v70 = sub_100003FB0((uint64_t)a1), (v71 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      v75 = _swiftEmptyArrayStorage;
      goto LABEL_40;
    }
    v72 = *(_QWORD *)(v69[7] + 8 * v70);
    swift_bridgeObjectRetain(v72);
    swift_bridgeObjectRelease();
    v73 = sub_100509958(v72, &qword_1010FA4C8, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_10050AC94);
    swift_bridgeObjectRelease();
    sub_10088FD00((uint64_t)v73);
    v23 = v74;
    swift_release();
    v75 = _swiftEmptyArrayStorage;
    v162 = _swiftEmptyArrayStorage;
    v156 = (char *)*((_QWORD *)v23 + 2);
    if (!v156)
      break;
    v134 = v8;
    v8 = 0;
    a1 = type metadata accessor for BeaconObservation;
    while (v8 < *((_QWORD *)v23 + 2))
    {
      v76 = v11;
      v77 = (*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80);
      v78 = *(_QWORD *)(v159 + 72);
      v79 = v2;
      v80 = v155;
      sub_10005972C((uint64_t)v23 + v77 + v78 * v8, v155, type metadata accessor for BeaconObservation);
      if (*(_BYTE *)(v80 + *(int *)(v79 + 24)) == 35)
      {
        sub_1000126EC(v80, v154, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0)
          sub_10009AAC8(0, v75[2] + 1, 1);
        v75 = v162;
        v82 = v162[2];
        v81 = v162[3];
        if (v82 >= v81 >> 1)
        {
          sub_10009AAC8(v81 > 1, v82 + 1, 1);
          v75 = v162;
        }
        v75[2] = v82 + 1;
        sub_1000126EC(v154, (uint64_t)v75 + v77 + v82 * v78, type metadata accessor for BeaconObservation);
        v11 = v157;
        v2 = v158;
      }
      else
      {
        v43 = v79;
        sub_1000126B0(v80, type metadata accessor for BeaconObservation);
        v2 = v79;
        v11 = v76;
      }
      if (v156 == (char *)++v8)
      {
        v75 = v162;
        a1 = v153;
        v8 = v134;
        goto LABEL_39;
      }
    }
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  }
LABEL_39:
  swift_release();
LABEL_40:
  v83 = v148;
  v84 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))v147;
  objc_autoreleasePoolPop(v138);
  if (*((_BYTE *)a1 + v146) == 35)
    sub_1001E6810((uint64_t)v75, v83);
  else
    sub_100A797E8((uint64_t)v75, v83);
  swift_bridgeObjectRelease();
  v85 = v83;
  v86 = v143;
  sub_10000F9B8(v85, v143, &qword_1010EF660);
  if (v84(v86, 1, v2) == 1)
  {
    sub_100004048(v86, &qword_1010EF660);
    v87 = 0.0;
    v88 = v63;
  }
  else
  {
    v89 = sub_1000126EC(v86, v142, type metadata accessor for BeaconObservation);
    v87 = fabs(Date.timeIntervalSinceNow.getter(v89));
    v90 = v137;
    sub_10000F9B8(v152, v137, &qword_1010EF660);
    v91 = v84(v90, 1, v2);
    sub_100004048(v90, &qword_1010EF660);
    if (v91 == 1 || v87 < v63)
    {
      v92 = v152;
      sub_100004048(v152, &qword_1010EF660);
      sub_1000126EC(v142, v92, type metadata accessor for BeaconObservation);
      ((void (*)(uint64_t, _QWORD, uint64_t, unint64_t))v149)(v92, 0, 1, v2);
      v88 = v87;
    }
    else
    {
      sub_1000126B0(v142, type metadata accessor for BeaconObservation);
      v88 = v63;
    }
    v11 = v157;
  }
  v93 = qword_1011B7160;
  v156 = (char *)objc_autoreleasePoolPush();
  OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v93, v150);
  v94 = v162;
  if (!v162[2])
  {
    swift_bridgeObjectRelease();
    v102 = _swiftEmptyArrayStorage;
    v96 = v151;
    goto LABEL_67;
  }
  v95 = sub_100003FB0((uint64_t)a1);
  v96 = v151;
  if ((v97 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v102 = _swiftEmptyArrayStorage;
    goto LABEL_67;
  }
  v98 = *(_QWORD *)(v94[7] + 8 * v95);
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease();
  v99 = sub_100509958(v98, &qword_1010FA4C8, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_10050AC94);
  swift_bridgeObjectRelease();
  sub_10088FD00((uint64_t)v99);
  v101 = v100;
  swift_release();
  v102 = _swiftEmptyArrayStorage;
  v162 = _swiftEmptyArrayStorage;
  v43 = *(_QWORD *)(v101 + 16);
  if (v43)
  {
    v2 = 0;
    v23 = type metadata accessor for BeaconObservation;
    while (v2 < *(_QWORD *)(v101 + 16))
    {
      v103 = (*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80);
      v104 = *(_QWORD *)(v159 + 72);
      sub_10005972C(v101 + v103 + v104 * v2, (uint64_t)v11, type metadata accessor for BeaconObservation);
      if (v11[*(int *)(v158 + 24)] == 34)
      {
        v105 = (uint64_t)v11;
        v106 = v8;
        sub_1000126EC(v105, v8, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(v102) & 1) == 0)
          sub_10009AAC8(0, v102[2] + 1, 1);
        v102 = v162;
        v108 = v162[2];
        v107 = v162[3];
        if (v108 >= v107 >> 1)
        {
          sub_10009AAC8(v107 > 1, v108 + 1, 1);
          v102 = v162;
        }
        v102[2] = v108 + 1;
        v109 = (uint64_t)v102 + v103 + v108 * v104;
        v8 = v106;
        sub_1000126EC(v106, v109, type metadata accessor for BeaconObservation);
        a1 = v153;
        v11 = v157;
      }
      else
      {
        sub_1000126B0((uint64_t)v11, type metadata accessor for BeaconObservation);
      }
      if (v43 == ++v2)
      {
        v102 = v162;
        v2 = v158;
        v96 = v151;
        goto LABEL_66;
      }
    }
    goto LABEL_82;
  }
LABEL_66:
  swift_release();
LABEL_67:
  v110 = (uint64_t)v139;
  objc_autoreleasePoolPop(v156);
  if (*((_BYTE *)a1 + v146) == 34)
    sub_1001E6810((uint64_t)v102, v96);
  else
    sub_100A797E8((uint64_t)v102, v96);
  swift_bridgeObjectRelease();
  sub_10000F9B8(v96, v110, &qword_1010EF660);
  v111 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))v147;
  if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))v147)(v110, 1, v2) == 1)
  {
    sub_100004048(v110, &qword_1010EF660);
    v112 = 0.0;
  }
  else
  {
    v113 = v136;
    v114 = sub_1000126EC(v110, v136, type metadata accessor for BeaconObservation);
    v112 = fabs(Date.timeIntervalSinceNow.getter(v114));
    v115 = v135;
    sub_10000F9B8(v152, v135, &qword_1010EF660);
    v116 = v111(v115, 1, v2);
    sub_100004048(v115, &qword_1010EF660);
    if (v116 == 1 || v112 < v88)
    {
      v117 = v152;
      sub_100004048(v152, &qword_1010EF660);
      sub_1000126EC(v113, v117, type metadata accessor for BeaconObservation);
      ((void (*)(uint64_t, _QWORD, uint64_t, unint64_t))v149)(v117, 0, 1, v2);
    }
    else
    {
      sub_1000126B0(v113, type metadata accessor for BeaconObservation);
    }
  }
  v118 = *(_QWORD *)(v141 + 16);
  sub_10080B648((uint64_t)a1, (uint64_t)&v160);
  if (v161)
  {
    sub_10000F9FC(&v160, (uint64_t)&v162);
    v119 = v163;
    v120 = v164;
    v121 = sub_10001AA44(&v162, v163);
    v122 = sub_100854C8C((uint64_t)v121, v118, v119, v120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v162);
  }
  else
  {
    sub_100004048((uint64_t)&v160, (uint64_t *)&unk_1010EE310);
    v122 = 0;
  }
  v123 = v140;
  sub_10005972C((uint64_t)a1, v140, type metadata accessor for BeaconObservation);
  ((void (*)(uint64_t, _QWORD, uint64_t, unint64_t))v149)(v123, 0, 1, v2);
  v124 = sub_100CEAECC(v123);
  v126 = v125;
  sub_100004048(v123, &qword_1010EF660);
  v127 = v152;
  v128 = sub_100CEAECC(v152);
  v130 = v129;
  type metadata accessor for Transaction(0);
  v131 = swift_allocObject(&unk_10107C5F0, 80, 7);
  *(_QWORD *)(v131 + 16) = v124;
  *(_QWORD *)(v131 + 24) = v126;
  *(_QWORD *)(v131 + 32) = v128;
  *(_QWORD *)(v131 + 40) = v130;
  *(double *)(v131 + 48) = v63;
  *(double *)(v131 + 56) = v112;
  *(double *)(v131 + 64) = v87;
  *(_QWORD *)(v131 + 72) = v122;
  v132 = v122;
  static Transaction.asyncTask(name:block:)("ConnectionEventAnalytics", 24, 2, &unk_1010FE680, v131);

  swift_release();
  sub_100004048(v151, &qword_1010EF660);
  sub_100004048(v148, &qword_1010EF660);
  sub_100004048(v145, &qword_1010EF660);
  return sub_100004048(v127, &qword_1010EF660);
}

uint64_t sub_1005064E0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_1005064F8, 0, 0);
}

uint64_t sub_1005064F8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);
  id v8;

  v1 = *(void **)(v0 + 16);
  v2 = type metadata accessor for AnalyticsEvent(0);
  v3 = (char *)swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(_QWORD *)(v0 + 24) = v3;
  swift_defaultActor_initialize(v3);
  v4 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v3 + 14) = v4;
  UUID.init()(v4);
  v5 = &v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v7(&v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v6);
  *((_QWORD *)v3 + 15) = 0xD00000000000003DLL;
  *((_QWORD *)v3 + 16) = 0x8000000100ED72F0;
  v8 = v1;
  return swift_task_switch(sub_1005065FC, v3, 0);
}

uint64_t sub_1005065FC()
{
  uint64_t v0;

  sub_100CEB07C(*(_QWORD *)(v0 + 24), *(void **)(v0 + 16));

  return swift_task_switch(sub_10048B4D4, 0, 0);
}

id sub_100506664(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t inited;
  unint64_t v8;
  id v9;
  id result;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  id v17;
  char v18;
  unint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  id v29;
  Class isa;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  id v35;
  void *v36;
  id v37;
  NSString v38;
  char v39;
  id v40;
  unsigned int v41;
  id v42;
  uint64_t v43;
  NSString v44;
  char v45;
  id v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  char v51[96];

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EEBD0);
  inited = swift_initStackObject(v6, v51);
  *(_OWORD *)(inited + 16) = xmmword_100E22B10;
  *(_QWORD *)(inited + 32) = 0xD000000000000016;
  *(_QWORD *)(inited + 40) = 0x8000000100ED7330;
  sub_10000F4A0(0, (unint64_t *)&qword_101103A90, NSNumber_ptr);
  *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)(1);
  *(_BYTE *)(inited + 56) = 0;
  *(_QWORD *)(inited + 64) = 0x6E6F697461727564;
  *(_QWORD *)(inited + 72) = 0xE800000000000000;
  *(NSNumber *)(inited + 80) = NSNumber.init(integerLiteral:)(0);
  *(_BYTE *)(inited + 88) = 0;
  v8 = sub_1006B9444(inited);
  if (!a1)
    return (id)v8;
  v9 = a1;
  result = objc_msgSend(v9, "systemVersion");
  if (result)
  {
    v11 = (uint64_t)result;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
    v50 = v8;
    sub_10010AC08(v11, 0, 0xD000000000000013, 0x8000000100ED0EC0, isUniquelyReferenced_nonNull_native);
    v13 = v50;
    swift_bridgeObjectRelease();
    result = objc_msgSend(v9, "systemVersion");
    if (result)
    {
      v14 = (uint64_t)result;
      v15 = swift_isUniquelyReferenced_nonNull_native(v13);
      v50 = v13;
      sub_10010AC08(v14, 0, 0xD00000000000001BLL, 0x8000000100ED0EE0, v15);
      v16 = v50;
      swift_bridgeObjectRelease();
      v17 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", objc_msgSend(v9, "batteryLevel"));
      v18 = swift_isUniquelyReferenced_nonNull_native(v16);
      v50 = v16;
      sub_10010AC08((uint64_t)v17, 0, 0x4C79726574746162, 0xEC0000006C657665, v18);
      v19 = v50;
      swift_bridgeObjectRelease();
      v20 = SPBeaconTaskNameBeginLeashing;
      v21 = objc_msgSend(v9, "taskInformation");
      type metadata accessor for SPBeaconTaskName(0);
      v23 = v22;
      v24 = sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
      v25 = sub_100006204(&qword_1010EB5D0, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_100E21E64);
      v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v21, v23, v24, v25);

      if (*(_QWORD *)(v26 + 16) && (v27 = sub_100519464(v20), (v28 & 1) != 0))
      {
        v29 = *(id *)(*(_QWORD *)(v26 + 56) + 8 * v27);

        swift_bridgeObjectRelease();
        objc_msgSend(v29, "state");

      }
      else
      {

        swift_bridgeObjectRelease();
      }
      isa = Bool._bridgeToObjectiveC()().super.super.isa;
      v31 = swift_isUniquelyReferenced_nonNull_native(v19);
      v50 = v19;
      sub_10010AC08((uint64_t)isa, 0, 0x6563697665447369, 0xEF6465687361654CLL, v31);
      v32 = v50;
      swift_bridgeObjectRelease();
      v33 = objc_msgSend(v9, "connected");
      v34 = swift_isUniquelyReferenced_nonNull_native(v32);
      v50 = v32;
      sub_10010AC08(v33, 1, 0xD000000000000011, 0x8000000100ECAF20, v34);
      v8 = v50;
      swift_bridgeObjectRelease();
      v35 = objc_msgSend(v9, "role");
      if (v35)
      {
        v36 = v35;
        v37 = objc_msgSend(v35, "role");

        static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        v38 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v39 = swift_isUniquelyReferenced_nonNull_native(v8);
        v50 = v8;
        sub_10010AC08((uint64_t)v38, 0, 1701605234, 0xE400000000000000, v39);
        v8 = v50;
        swift_bridgeObjectRelease();
      }
      v40 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
      v41 = objc_msgSend(v40, "isInternalBuild");

      if (!v41)
        goto LABEL_13;
      v42 = objc_msgSend(v9, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v42);

      UUID.uuidString.getter(v43);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v44 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v45 = swift_isUniquelyReferenced_nonNull_native(v8);
      v50 = v8;
      sub_10010AC08((uint64_t)v44, 0, 0x6544646572696170, 0xEE00444965636976, v45);
      v8 = v50;
      swift_bridgeObjectRelease();
      v46 = objc_msgSend(v9, "serialNumber");
      if (v46)
      {
        v47 = (uint64_t)v46;
        v48 = swift_isUniquelyReferenced_nonNull_native(v8);
        v50 = v8;
        sub_10010AC08(v47, 0, 0xD000000000000018, 0x8000000100ECAF40, v48);
        v8 = v50;

        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_13:

      }
      return (id)v8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100506C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8)
{
  uint64_t v8;

  *(_QWORD *)(v8 + 72) = a5;
  *(double *)(v8 + 56) = a7;
  *(double *)(v8 + 64) = a8;
  *(double *)(v8 + 48) = a6;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  return swift_task_switch(sub_100506C90, 0, 0);
}

uint64_t sub_100506C90()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t, uint64_t);
  id v10;

  v1 = (void *)v0[9];
  v2 = v0[5];
  v3 = v0[3];
  v4 = type metadata accessor for AnalyticsEvent(0);
  v5 = (char *)swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v0[10] = v5;
  swift_defaultActor_initialize(v5);
  v6 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v5 + 14) = v6;
  UUID.init()(v6);
  v7 = &v5[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v9(v7, 1, 1, v8);
  v9(&v5[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v8);
  *((_QWORD *)v5 + 15) = 0xD00000000000002DLL;
  *((_QWORD *)v5 + 16) = 0x8000000100ED9910;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  v10 = v1;
  return swift_task_switch(sub_100506DB4, v5, 0);
}

uint64_t sub_100506DB4()
{
  uint64_t v0;
  void *v1;

  sub_100CECE88(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 72), *(double *)(v0 + 48), *(double *)(v0 + 56), *(double *)(v0 + 64));
  v1 = *(void **)(v0 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_task_switch(sub_100506E40, 0, 0);
}

uint64_t sub_100506E40()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[11] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[12] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_100506EAC;
  return sub_100CD63AC(v0[10]);
}

uint64_t sub_100506EAC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_release();
  return swift_task_switch(sub_100506F08, 0, 0);
}

uint64_t sub_100506F08()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100506F38(double a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t inited;
  unint64_t v18;
  id v19;
  id result;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  id v36;
  Class isa;
  char v38;
  id v39;
  id v40;
  uint64_t v41;
  NSString v42;
  char v43;
  id v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  char v48[200];

  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = &v48[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v16 = sub_10001A9A8(&qword_1010EEBD0);
  inited = swift_initStackObject(v16, v48);
  *(_OWORD *)(inited + 16) = xmmword_100E27910;
  *(_QWORD *)(inited + 32) = 0x746341746E657665;
  *(_QWORD *)(inited + 40) = 0xEB000000006E6F69;
  *(_QWORD *)(inited + 48) = String._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 56) = 0;
  strcpy((char *)(inited + 64), "previousEvent");
  *(_WORD *)(inited + 78) = -4864;
  *(_QWORD *)(inited + 80) = String._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 88) = 0;
  *(_QWORD *)(inited + 96) = 0xD000000000000014;
  *(_QWORD *)(inited + 104) = 0x8000000100ED9940;
  *(_QWORD *)(inited + 112) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", a1);
  *(_BYTE *)(inited + 120) = 0;
  *(_QWORD *)(inited + 128) = 0x6E6F697461727564;
  *(_QWORD *)(inited + 136) = 0xEF4D4365636E6953;
  *(_QWORD *)(inited + 144) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", a2);
  *(_BYTE *)(inited + 152) = 0;
  *(_QWORD *)(inited + 160) = 0xD000000000000017;
  *(_QWORD *)(inited + 168) = 0x8000000100ED9960;
  *(_QWORD *)(inited + 176) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", a3);
  *(_BYTE *)(inited + 184) = 0;
  v18 = sub_1006B9444(inited);
  if (!a8)
    return (id)v18;
  v19 = a8;
  result = objc_msgSend(v19, "systemVersion");
  if (result)
  {
    v21 = (uint64_t)result;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    v47 = v18;
    sub_10010AC08(v21, 0, 0xD000000000000013, 0x8000000100ED0EC0, isUniquelyReferenced_nonNull_native);
    v23 = v47;
    swift_bridgeObjectRelease();
    result = objc_msgSend(v19, "systemVersion");
    if (result)
    {
      v24 = (uint64_t)result;
      v25 = swift_isUniquelyReferenced_nonNull_native(v23);
      v47 = v23;
      sub_10010AC08(v24, 0, 0xD00000000000001BLL, 0x8000000100ED0EE0, v25);
      v26 = v47;
      swift_bridgeObjectRelease();
      v27 = SPBeaconTaskNameBeginLeashing;
      v28 = objc_msgSend(v19, "taskInformation");
      type metadata accessor for SPBeaconTaskName(0);
      v30 = v29;
      v31 = sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
      v32 = sub_100006204(&qword_1010EB5D0, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_100E21E64);
      v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v28, v30, v31, v32);

      if (*(_QWORD *)(v33 + 16) && (v34 = sub_100519464(v27), (v35 & 1) != 0))
      {
        v36 = *(id *)(*(_QWORD *)(v33 + 56) + 8 * v34);

        swift_bridgeObjectRelease();
        objc_msgSend(v36, "state");

      }
      else
      {

        swift_bridgeObjectRelease();
      }
      isa = Bool._bridgeToObjectiveC()().super.super.isa;
      v38 = swift_isUniquelyReferenced_nonNull_native(v26);
      v47 = v26;
      sub_10010AC08((uint64_t)isa, 0, 0x6563697665447369, 0xEF6465687361654CLL, v38);
      v18 = v47;
      swift_bridgeObjectRelease();
      v39 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
      LODWORD(isa) = objc_msgSend(v39, "isInternalBuild");

      if (!(_DWORD)isa)
        goto LABEL_11;
      v40 = objc_msgSend(v19, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v40);

      UUID.uuidString.getter(v41);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      v42 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v43 = swift_isUniquelyReferenced_nonNull_native(v18);
      v47 = v18;
      sub_10010AC08((uint64_t)v42, 0, 0x6544646572696170, 0xEE00444965636976, v43);
      v18 = v47;
      swift_bridgeObjectRelease();
      v44 = objc_msgSend(v19, "serialNumber");
      if (v44)
      {
        v45 = (uint64_t)v44;
        v46 = swift_isUniquelyReferenced_nonNull_native(v18);
        v47 = v18;
        sub_10010AC08(v45, 0, 0xD000000000000018, 0x8000000100ECAF40, v46);
        v18 = v47;

        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_11:

      }
      return (id)v18;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1005074D4(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;

  v34 = a4;
  v35 = a5;
  v32 = a3;
  v33 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v33 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v33);
  v9 = sub_10001A9A8(&qword_1010F46C0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v39 = a1[2];
  v40 = v13;
  v41 = *((_BYTE *)a1 + 64);
  v14 = a1[1];
  v37 = *a1;
  v38 = v14;
  v15 = static os_log_type_t.default.getter(v10);
  if (qword_1010EA240 != -1)
    swift_once(&qword_1010EA240, sub_100B5D89C);
  v16 = qword_1011B7D20;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  v19 = UUID.uuidString.getter(v18);
  v21 = v20;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v19;
  *(_QWORD *)(v18 + 40) = v21;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "SPObserverAnalytics: Fetched User Stats for %@", 46, 2, v18);
  swift_bridgeObjectRelease();
  v22 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v12, 1, 1, v22);
  sub_100030784(v32, (uint64_t)v36);
  v23 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v33);
  v24 = *(unsigned __int8 *)(v7 + 80);
  v25 = (v24 + 152) & ~v24;
  v26 = (v8 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = swift_allocObject(&unk_10107C730, v26 + 8, v24 | 7);
  *(_QWORD *)(v27 + 16) = 0;
  *(_QWORD *)(v27 + 24) = 0;
  v28 = v40;
  *(_OWORD *)(v27 + 64) = v39;
  *(_OWORD *)(v27 + 80) = v28;
  *(_BYTE *)(v27 + 96) = v41;
  v29 = v38;
  *(_OWORD *)(v27 + 32) = v37;
  *(_OWORD *)(v27 + 48) = v29;
  sub_10000F9FC(v36, v27 + 104);
  *(_QWORD *)(v27 + 144) = v34;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v27 + v25, (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v23);
  *(_QWORD *)(v27 + v26) = v35;
  sub_1002B1E20((uint64_t)&v37);
  swift_retain();
  swift_retain();
  sub_100626BC4((uint64_t)v12, (uint64_t)&unk_1010FE720, v27);
  return swift_release();
}

uint64_t sub_100507754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  v9 = type metadata accessor for Date(0);
  v8[7] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[8] = v10;
  v8[9] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005077BC, 0, 0);
}

uint64_t sub_1005077BC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  __int128 v10;

  v1 = type metadata accessor for AnalyticsEvent(0);
  v2 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  *(_QWORD *)(v0 + 80) = v2;
  v10 = *(_OWORD *)(v0 + 16);
  swift_defaultActor_initialize(v2);
  v3 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v2 + 14) = v3;
  UUID.init()(v3);
  v4 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v5 = type metadata accessor for DispatchTime(0);
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v6(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v5);
  *((_QWORD *)v2 + 15) = 0xD000000000000031;
  *((_QWORD *)v2 + 16) = 0x8000000100ED9AA0;
  v7 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 88) = v7;
  *(_OWORD *)(v7 + 16) = v10;
  v8 = (_QWORD *)swift_task_alloc(dword_10111D0D4);
  *(_QWORD *)(v0 + 96) = v8;
  *v8 = v0;
  v8[1] = sub_1005078F8;
  return sub_100CD48A8((uint64_t)&unk_1010FE730, v7);
}

uint64_t sub_1005078F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100507AC0;
  else
    v4 = sub_100507964;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100507964()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[14] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[15] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_1005079D0;
  return sub_100CD63AC(v0[10]);
}

uint64_t sub_1005079D0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_release();
  return swift_task_switch(sub_100507A2C, 0, 0);
}

uint64_t sub_100507A2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  static Date.trustedNow.getter(v1);
  sub_1004E2DDC(v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  Transaction.capture()();
  swift_release();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100507AC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100507AFC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[85] = a2;
  v2[84] = a1;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v2[86] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for StableIdentifier(0);
  v2[87] = v4;
  v5 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[88] = swift_task_alloc(v5);
  v2[89] = swift_task_alloc(v5);
  v2[90] = swift_task_alloc(v5);
  v6 = type metadata accessor for UUID(0);
  v2[91] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[92] = v7;
  v2[93] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100507BC4, 0, 0);
}

uint64_t sub_100507BC4()
{
  uint64_t v0;
  int v1;
  _UNKNOWN **v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  Swift::String v29;
  char v30;
  id v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void (*v48)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int EnumCaseMultiPayload;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 672) + 64);
  if (v1 == 1)
  {
    v2 = &off_101049988;
    goto LABEL_5;
  }
  if (v1 == 2)
  {
    v2 = &off_1010499B8;
LABEL_5:
    v69 = v0;
    if (v2[2])
    {
      swift_bridgeObjectRetain(v2);
      __asm { BR              X8 }
    }
    swift_bridgeObjectRelease();
    v14 = *(_QWORD **)(v0 + 680);
    v67 = *(_QWORD *)(v0 + 672);
    v16 = v14[3];
    v15 = v14[4];
    sub_10001AA44(v14, v16);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 24))(v16, v15);
    v19 = v18;
    *(_QWORD *)(v0 + 280) = &type metadata for String;
    v20 = sub_1000330C8();
    *(_QWORD *)(v0 + 288) = v20;
    *(_QWORD *)(v0 + 256) = v17;
    *(_QWORD *)(v0 + 264) = v19;
    *(_WORD *)(v0 + 296) = 1;
    sub_10050DE28(v0 + 256, v0 + 304);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10010D254(v0 + 304, 0xD000000000000013, 0x8000000100ED0EC0, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    v22 = v14[3];
    v23 = v14[4];
    sub_10001AA44(v14, v22);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 24))(v22, v23);
    *(_QWORD *)(v0 + 376) = &type metadata for String;
    v70 = v20;
    *(_QWORD *)(v0 + 384) = v20;
    *(_QWORD *)(v0 + 352) = v24;
    *(_QWORD *)(v0 + 360) = v25;
    *(_WORD *)(v0 + 392) = 1;
    sub_10050DE28(v0 + 352, v0 + 16);
    v26 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_10010D254(v0 + 16, 0xD00000000000001BLL, 0x8000000100ED0EE0, v26);
    v27 = _swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    sub_100005CF0(v67, v0 + 632, &qword_1011194A0);
    sub_100005CF0(v0 + 632, v0 + 648, &qword_1011194A0);
    if (*(_QWORD *)(v0 + 656) >> 60 != 15)
    {
      v28 = *(_QWORD *)(v0 + 672);
      sub_1002B1E20(v28);
      v29 = Data.base64EncodedString(options:)(0);
      *(_QWORD *)(v0 + 88) = &type metadata for String;
      *(_QWORD *)(v0 + 96) = v20;
      *(Swift::String *)(v0 + 64) = v29;
      *(_WORD *)(v0 + 104) = 1;
      sub_10050DE28(v0 + 64, v0 + 400);
      v30 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      sub_10010D254(v0 + 400, 0xD000000000000017, 0x8000000100ECECE0, v30);
      swift_bridgeObjectRelease();
      sub_1002B1E4C(v28);
    }
    v31 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
    v32 = objc_msgSend(v31, "isInternalBuild");

    if (v32)
    {
      v33 = *(_QWORD *)(v0 + 744);
      v34 = *(_QWORD *)(v0 + 736);
      v35 = *(_QWORD *)(v69 + 728);
      v68 = *(_QWORD *)(v69 + 688);
      v36 = *(_QWORD **)(v69 + 680);
      v37 = v14[3];
      v38 = v14[4];
      sub_10001AA44(v36, v37);
      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v38 + 8) + 8) + 32))(v37);
      v40 = UUID.uuidString.getter(v39);
      v42 = v41;
      v43 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
      v0 = v69;
      v43(v33, v35);
      *(_QWORD *)(v69 + 472) = &type metadata for String;
      *(_QWORD *)(v69 + 480) = v70;
      *(_QWORD *)(v69 + 448) = v40;
      *(_QWORD *)(v69 + 456) = v42;
      *(_WORD *)(v69 + 488) = 1;
      sub_10050DE28(v69 + 448, v69 + 496);
      v44 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      sub_10010D254(v69 + 496, 0x6544646572696170, 0xEE00444965636976, v44);
      swift_bridgeObjectRelease();
      sub_100030784((uint64_t)v36, v69 + 592);
      v45 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
      v46 = type metadata accessor for OwnedBeaconRecord(0);
      v47 = swift_dynamicCast(v68, v69 + 592, v45, v46, 6);
      v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56);
      if ((v47 & 1) != 0)
      {
        v49 = *(_QWORD *)(v69 + 720);
        v50 = *(_QWORD *)(v69 + 712);
        v51 = *(_QWORD *)(v69 + 704);
        v52 = *(_QWORD *)(v69 + 696);
        v53 = *(_QWORD *)(v69 + 688);
        v48(v53, 0, 1, v46);
        sub_10005972C(v53 + *(int *)(v46 + 24), v50, type metadata accessor for StableIdentifier);
        sub_1000126B0(v53, type metadata accessor for OwnedBeaconRecord);
        sub_1000126EC(v50, v49, type metadata accessor for StableIdentifier);
        sub_10005972C(v49, v51, type metadata accessor for StableIdentifier);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v51, v52);
        v55 = *(_QWORD *)(v69 + 720);
        v56 = *(_QWORD *)(v69 + 704);
        if (EnumCaseMultiPayload == 1)
        {
          v57 = *(_QWORD *)(v56 + 32);
          v58 = *(_QWORD *)(v56 + 40);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v69 + 568) = &type metadata for String;
          *(_QWORD *)(v69 + 576) = v70;
          *(_QWORD *)(v69 + 544) = v57;
          *(_QWORD *)(v69 + 552) = v58;
          *(_WORD *)(v69 + 584) = 1;
          sub_10050DE28(v69 + 544, v69 + 112);
          v59 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
          sub_10010D254(v69 + 112, 0xD000000000000018, 0x8000000100ECAF40, v59);
          swift_bridgeObjectRelease();
          v60 = v55;
        }
        else
        {
          sub_1000126B0(*(_QWORD *)(v69 + 720), type metadata accessor for StableIdentifier);
          v60 = v56;
        }
        sub_1000126B0(v60, type metadata accessor for StableIdentifier);
      }
      else
      {
        v61 = *(_QWORD *)(v69 + 688);
        v48(v61, 1, 1, v46);
        sub_100004048(v61, (uint64_t *)&unk_1010F47C0);
      }
    }
    goto LABEL_21;
  }
  v3 = sub_10050DDE4();
  v4 = swift_allocError(&type metadata for SPObserverAnalytics.SPObserverAnalyticsError, v3, 0, 0);
  v5 = swift_willThrow(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (qword_1010EA240 != -1)
    swift_once(&qword_1010EA240, sub_100B5D89C);
  v7 = qword_1011B7D20;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v0 + 664) = v4;
  swift_errorRetain(v4);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v11 = String.init<A>(describing:)(v0 + 664, v10);
  v13 = v12;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 40) = v13;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "User Stats could not compute fields - not sending: %@", 53, 2, v9);
  swift_bridgeObjectRelease();
  v27 = (_QWORD *)sub_1006B8C78((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRelease(v4);
  swift_bridgeObjectRelease();
LABEL_21:
  v62 = *(_QWORD *)(v0 + 720);
  v63 = *(_QWORD *)(v0 + 712);
  v64 = *(_QWORD *)(v0 + 704);
  v65 = *(_QWORD *)(v0 + 688);
  swift_task_dealloc(*(_QWORD *)(v0 + 744));
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v27);
}

void sub_100508794(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA240 != -1)
    swift_once(&qword_1010EA240, sub_100B5D89C);
  v3 = qword_1011B7D20;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v5 = swift_allocObject(v4, 112, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E22B10;
  v6 = UUID.uuidString.getter(v5);
  v8 = v7;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  v9 = sub_10001AA00();
  *(_QWORD *)(v5 + 64) = v9;
  *(_QWORD *)(v5 + 32) = v6;
  *(_QWORD *)(v5 + 40) = v8;
  v13 = a1;
  swift_errorRetain(a1);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v11 = String.init<A>(describing:)(&v13, v10);
  *(_QWORD *)(v5 + 96) = &type metadata for String;
  *(_QWORD *)(v5 + 104) = v9;
  *(_QWORD *)(v5 + 72) = v11;
  *(_QWORD *)(v5 + 80) = v12;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "SPObserverAnalytics: Failed to fetch user stats for %@. Error - %@", 66, 2, v5);
  swift_bridgeObjectRelease();
  Transaction.capture()();
}

uint64_t sub_1005088CC(uint64_t (*a1)(uint64_t a1))
{
  uint64_t result;
  int v3;

  result = type metadata accessor for BeaconObservation(0);
  v3 = *((unsigned __int8 *)a1 + *(int *)(result + 24));
  if ((v3 - 33) < 3)
    return sub_100505578(a1);
  if (v3 == 30)
    return sub_10050546C((uint64_t)a1);
  return result;
}

uint64_t sub_100508924(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;

  if (!a2)
  {
    v7 = 0;
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    v7 = 0;
LABEL_14:
    v8 = a4;
LABEL_15:
    *(_QWORD *)result = a4;
    *(_QWORD *)(result + 8) = a5;
    *(_QWORD *)(result + 16) = v8;
    *(_BYTE *)(result + 24) = v7;
    return a3;
  }
  if (a3 < 0)
    goto LABEL_17;
  v5 = 0;
  v6 = a4;
  while (1)
  {
    v7 = v6 == a5;
    if (v6 != a5)
      break;
    v8 = 0;
LABEL_8:
    *(_QWORD *)(a2 + 8 * v5) = v6;
    if (a3 - 1 == v5)
      goto LABEL_15;
    ++v5;
    v9 = v6 == a5;
    v6 = v8;
    if (v9)
    {
      v7 = 1;
      a3 = v5;
      goto LABEL_15;
    }
  }
  v8 = v6 + 1;
  if (v6 != -1)
    goto LABEL_8;
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1005089B0(uint64_t result, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t v4;
  unsigned __int8 v5;
  BOOL v6;
  unsigned __int8 v7;
  BOOL v8;

  if (!a2)
  {
    v6 = 0;
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    v6 = 0;
LABEL_14:
    v7 = a4;
LABEL_15:
    *(_WORD *)result = a4;
    *(_BYTE *)(result + 2) = v7;
    *(_BYTE *)(result + 3) = v6;
    return a3;
  }
  if (a3 < 0)
    goto LABEL_17;
  v4 = 0;
  v5 = a4;
  while (1)
  {
    v6 = v5 == (unsigned __int16)(a4 & 0xFF00) >> 8;
    if (v5 != (unsigned __int16)(a4 & 0xFF00) >> 8)
      break;
    v7 = 0;
LABEL_8:
    *(_BYTE *)(a2 + v4) = v5;
    if (a3 - 1 == v4)
      goto LABEL_15;
    ++v4;
    v8 = v5 == (unsigned __int16)(a4 & 0xFF00) >> 8;
    v5 = v7;
    if (v8)
    {
      v6 = 1;
      a3 = v4;
      goto LABEL_15;
    }
  }
  v7 = v5 + 1;
  if (((v5 + 1) & 0x100) == 0)
    goto LABEL_8;
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

_QWORD *sub_100508A58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10001A9A8(&qword_1010F5D18);
  v4 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup.PairingState(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      v11 = sub_100509D04(&v13, (uint64_t)v8 + v7, v1, a1);
      v12 = v13;
      swift_bridgeObjectRetain(a1);
      sub_10007CC38(v12);
      if (v11 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *sub_100508B70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *result;
  uint64_t v9;

  v1 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      goto LABEL_5;
    return _swiftEmptyArrayStorage;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v2 = __CocoaDictionary.count.getter(a1);
  if (!v2)
    return _swiftEmptyArrayStorage;
LABEL_5:
  if (v2 <= 0)
  {
    v4 = _swiftEmptyArrayStorage;
  }
  else
  {
    v3 = sub_10001A9A8(&qword_10111BE20);
    v4 = (uint64_t *)swift_allocObject(v3, 8 * v2 + 32, 7);
    v5 = j__malloc_size(v4);
    v6 = v5 - 32;
    if (v5 < 32)
      v6 = v5 - 25;
    v4[2] = v2;
    v4[3] = (2 * (v6 >> 3)) | 1;
  }
  swift_bridgeObjectRetain(v1);
  v7 = sub_100509FC0((uint64_t)&v9, v4 + 4, v2, v1);
  result = (uint64_t *)sub_10007CC38(v9);
  if (v7 == v2)
    return v4;
  __break(1u);
  return result;
}

_QWORD *sub_100508C68(uint64_t a1)
{
  return sub_100509A64(a1, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_10050A5E8);
}

_QWORD *sub_100508C74(uint64_t a1)
{
  return sub_100508FE0(a1, &qword_1011091E0);
}

_QWORD *sub_100508C80(uint64_t a1)
{
  return sub_100509104(a1, &qword_1010ED668, type metadata accessor for BeaconNamingRecord);
}

_QWORD *sub_100508C94(uint64_t a1)
{
  return sub_100509104(a1, (uint64_t *)&unk_101109100, type metadata accessor for SharedBeaconRecord);
}

_QWORD *sub_100508CA8(uint64_t a1)
{
  return sub_100509568(a1, &qword_1010FE700);
}

_QWORD *sub_100508CB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10001A9A8(&qword_101106C20);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_10050AA98((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10007CC38(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_100508D98(uint64_t a1)
{
  return sub_100509958(a1, &qword_1010FA4C8, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_10050AC94);
}

_QWORD *sub_100508DAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10001A9A8(&qword_1011003C0);
  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      swift_bridgeObjectRetain(a1);
      v11 = sub_10050AE8C(&v12, (uint64_t)v8 + v7, v1, a1);
      sub_10007CC38(v12);
      if (v11 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_100508EA4(uint64_t a1)
{
  return sub_100509104(a1, &qword_1010EE360, type metadata accessor for OwnerSharingCircle);
}

_QWORD *sub_100508EB8(uint64_t a1)
{
  return sub_100509104(a1, (uint64_t *)&unk_1011092A0, type metadata accessor for OwnedBeaconGroup);
}

_QWORD *sub_100508ECC(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_10001A9A8(&qword_10111BE20);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    sub_10050C960((unint64_t)(v4 + 4), v2, v1);
    v1 = v7;
    swift_bridgeObjectRelease();
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v8 = v1;
    else
      v8 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease();
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_100508FC0(uint64_t a1)
{
  return sub_100509104(a1, &qword_1010ED3D0, type metadata accessor for BeaconStatus);
}

_QWORD *sub_100508FD4(uint64_t a1)
{
  return sub_100508FE0(a1, &qword_1010ED3D8);
}

_QWORD *sub_100508FE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_10001A9A8(a2);
  v5 = (_QWORD *)swift_allocObject(v4, 8 * v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v7 = v6 - 32;
  if (v6 < 32)
    v7 = v6 - 25;
  v5[2] = v2;
  v5[3] = 2 * (v7 >> 3);
  v8 = sub_10050B700(&v11, v5 + 4, v2, a1);
  v9 = v11;
  swift_bridgeObjectRetain(a1);
  sub_10007CC38(v9);
  if (v8 != (_QWORD *)v2)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v5;
}

_QWORD *sub_1005090C0(uint64_t a1)
{
  return sub_100509104(a1, &qword_101109150, type metadata accessor for WildModeTrackingLocation);
}

uint64_t **sub_1005090D4(uint64_t a1)
{
  return sub_100509734(a1, &qword_1010F4B10, SPUnauthorizedTrackingObservation_ptr, &qword_1010FF860);
}

_QWORD *sub_1005090F0(uint64_t a1)
{
  return sub_100509104(a1, &qword_1010ED220, type metadata accessor for RawSearchResult);
}

_QWORD *sub_100509104(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return _swiftEmptyArrayStorage;
  v6 = sub_10001A9A8(a2);
  v7 = *(_QWORD *)(a3(0) - 8);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = (_QWORD *)swift_allocObject(v6, v10 + v8 * v3, v9 | 7);
  result = (_QWORD *)j__malloc_size(v11);
  if (v8)
  {
    if ((_QWORD *)((char *)result - v10) != (_QWORD *)0x8000000000000000 || v8 != -1)
    {
      v11[2] = v3;
      v11[3] = 2 * (((uint64_t)result - v10) / v8);
      v14 = sub_10050A7E0(&v16, (uint64_t)v11 + v10, v3, a1, a3);
      v15 = v16;
      swift_bridgeObjectRetain(a1);
      sub_10007CC38(v15);
      if (v14 == v3)
        return v11;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_100509220(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10001A9A8(&qword_1010ED228);
  v4 = (_QWORD *)swift_allocObject(v3, 8 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 3);
  v7 = sub_10050B3D8(&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10007CC38(v8);
  if (v7 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_100509304(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v5)
    return _swiftEmptyArrayStorage;
  v8 = 16 * v5;
  if (v5 <= 0)
  {
    v10 = _swiftEmptyArrayStorage;
    if (v4 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v9 = sub_10001A9A8(&qword_1010F4A30);
  v10 = (_QWORD *)swift_allocObject(v9, v8 + 32, 7);
  v11 = j__malloc_size(v10);
  v12 = v11 - 32;
  if (v11 < 32)
    v12 = v11 - 17;
  v10[2] = v5;
  v10[3] = 2 * (v12 >> 4);
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v5 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v13 = v10 + 4;
  v14 = a2 + 16 * a3;
  if (v14 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)v13 >= v14 + v8)
  {
    swift_arrayInitWithCopy(v13);
    return v10;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

_QWORD *sub_100509474(_QWORD *result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (uint64_t)result;
  v4 = a2 - (_QWORD)result;
  if (a2 < (unint64_t)result)
  {
    if ((uint64_t)((uint64_t)result - a2) < 0)
    {
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
    v4 = a2 - (_QWORD)result;
LABEL_5:
    v5 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
    }
    else
    {
      if (v4 == -1)
        return _swiftEmptyArrayStorage;
      if (v5 <= 0)
      {
        v7 = _swiftEmptyArrayStorage;
      }
      else
      {
        v6 = sub_10001A9A8(&qword_1010ED228);
        v7 = (_QWORD *)swift_allocObject(v6, 8 * v5 + 32, 7);
        v8 = j__malloc_size(v7);
        v9 = v8 - 32;
        if (v8 < 32)
          v9 = v8 - 25;
        v7[2] = v5;
        v7[3] = 2 * (v9 >> 3);
      }
      result = (_QWORD *)sub_100508924((uint64_t)&v10, (uint64_t)(v7 + 4), v5, v3, a2);
      if (result == (_QWORD *)v5)
        return v7;
    }
    __break(1u);
    goto LABEL_17;
  }
  if ((uint64_t)(a2 - (_QWORD)result) >= 0)
    goto LABEL_5;
LABEL_18:
  __break(1u);
  return result;
}

_QWORD *sub_10050955C(uint64_t a1)
{
  return sub_100509568(a1, &qword_101109360);
}

_QWORD *sub_100509568(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_10001A9A8(a2);
  v5 = swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size((const void *)v5);
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = 2 * v6 - 64;
  v7 = sub_10050B56C(&v10, (_BYTE *)(v5 + 32), v2, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10007CC38(v8);
  if (v7 != (_QWORD *)v2)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v5;
}

_QWORD *sub_100509638(uint64_t a1)
{
  return sub_100508FE0(a1, &qword_1011002F0);
}

_QWORD *sub_100509644(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10001A9A8(&qword_1010ED500);
  v4 = swift_allocObject(v3, v1 + 32, 7);
  v5 = j__malloc_size((const void *)v4);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = 2 * v5 - 64;
  v6 = sub_10050B8F8(&v9, (_BYTE *)(v4 + 32), v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_10007CC38(v7);
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v4;
}

uint64_t **sub_100509718(uint64_t a1)
{
  return sub_100509734(a1, &qword_101110020, SPCBPeripheralManagerSessionKey_ptr, &qword_1010FE6B8);
}

uint64_t **sub_100509734(uint64_t a1, unint64_t *a2, _QWORD *a3, unint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **result;
  uint64_t v15;

  v7 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
    return (uint64_t **)_swiftEmptyArrayStorage;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v8 = __CocoaSet.count.getter(a1);
  if (!v8)
    return (uint64_t **)_swiftEmptyArrayStorage;
LABEL_5:
  if (v8 <= 0)
  {
    v10 = (uint64_t **)_swiftEmptyArrayStorage;
  }
  else
  {
    v9 = sub_10001A9A8(&qword_10111BE20);
    v10 = (uint64_t **)swift_allocObject(v9, 8 * v8 + 32, 7);
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = (uint64_t *)v8;
    v10[3] = (uint64_t *)((2 * (v12 >> 3)) | 1);
  }
  swift_bridgeObjectRetain(v7);
  v13 = sub_10050BE80(&v15, v10 + 4, v8, v7, a2, a3, a4);
  result = (uint64_t **)sub_10007CC38(v15);
  if (v13 == (uint64_t *)v8)
    return v10;
  __break(1u);
  return result;
}

_QWORD *sub_100509854(uint64_t a1)
{
  return sub_100509A64(a1, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_10050BA8C);
}

_QWORD *sub_100509860(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10001A9A8(&qword_101106C20);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_10050BC84((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10007CC38(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_100509944(uint64_t a1)
{
  return sub_100509958(a1, &qword_1010FE698, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_10050BA8C);
}

_QWORD *sub_100509958(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return _swiftEmptyArrayStorage;
  v6 = sub_10001A9A8(a2);
  v7 = (_QWORD *)swift_allocObject(v6, 8 * v3 + 32, 7);
  v8 = j__malloc_size(v7);
  v9 = v8 - 32;
  if (v8 < 32)
    v9 = v8 - 25;
  v7[2] = v3;
  v7[3] = 2 * (v9 >> 3);
  v10 = a3(&v13, v7 + 4, v3, a1);
  v11 = v13;
  swift_bridgeObjectRetain(a1);
  sub_10007CC38(v11);
  if (v10 != v3)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v7;
}

uint64_t **sub_100509A3C(uint64_t a1)
{
  return sub_100509734(a1, (unint64_t *)&unk_10110FFC0, CKRecordZoneID_ptr, &qword_1010FE6A0);
}

_QWORD *sub_100509A58(uint64_t a1)
{
  return sub_100509A64(a1, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_10050C178);
}

_QWORD *sub_100509A64(uint64_t a1, uint64_t (*a2)(uint64_t *, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  v5 = sub_10001A9A8(&qword_10111BE20);
  v6 = (_QWORD *)swift_allocObject(v5, 8 * v2 + 32, 7);
  v7 = j__malloc_size(v6);
  v8 = v7 - 32;
  if (v7 < 32)
    v8 = v7 - 25;
  v6[2] = v2;
  v6[3] = (2 * (v8 >> 3)) | 1;
  v9 = a2(&v12, v6 + 4, v2, a1);
  v10 = v12;
  swift_bridgeObjectRetain(a1);
  sub_10007CC38(v10);
  if (v9 != v2)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v6;
}

_QWORD *sub_100509B50(__int16 a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  size_t v6;
  _QWORD *result;
  _BYTE v8[4];

  if (HIBYTE(a1) < a1)
    v1 = -(uint64_t)(a1 - HIBYTE(a1));
  else
    v1 = HIBYTE(a1) - a1;
  v2 = v1 + 1;
  if (v1 == -1)
    return _swiftEmptyArrayStorage;
  if (v1 >= 0x7FFFFFFFFFFFFFFFLL)
  {
    v3 = _swiftEmptyArrayStorage;
  }
  else
  {
    v5 = sub_10001A9A8(&qword_1010ED318);
    v3 = (_QWORD *)swift_allocObject(v5, v1 + 33, 7);
    v6 = j__malloc_size(v3);
    v3[2] = v2;
    v3[3] = 2 * v6 - 64;
  }
  result = (_QWORD *)sub_1005089B0((uint64_t)v8, (uint64_t)(v3 + 4), v2, a1);
  if (result == (_QWORD *)v2)
    return v3;
  __break(1u);
  return result;
}

_QWORD *sub_100509C0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10001A9A8(&qword_1011003C0);
  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      swift_bridgeObjectRetain(a1);
      v11 = sub_10050A298(&v12, (uint64_t)v8 + v7, v1, a1);
      sub_10007CC38(v12);
      if (v11 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100509D04(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;

  v8 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v15 = (char *)&v31 - v14;
  v36 = a4;
  v18 = *(_QWORD *)(a4 + 64);
  v17 = a4 + 64;
  v16 = v18;
  v35 = v17;
  v19 = -1 << *(_BYTE *)(v17 - 32);
  if (-v19 < 64)
    v20 = ~(-1 << -(char)v19);
  else
    v20 = -1;
  v21 = v20 & v16;
  if (!a2)
  {
    v22 = 0;
    a3 = 0;
LABEL_38:
    v30 = v35;
    *a1 = v36;
    a1[1] = v30;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v32 = -1 << *(_BYTE *)(v17 - 32);
  v33 = a1;
  v22 = 0;
  v23 = 0;
  v34 = (unint64_t)(63 - v19) >> 6;
  v31 = v34 - 1;
  if (!v21)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    v29 = *(_QWORD *)(v9 + 72);
    sub_10005972C(*(_QWORD *)(v36 + 56) + v29 * v25, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_1000126EC((uint64_t)v12, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup.PairingState);
    result = sub_1000126EC((uint64_t)v15, a2, type metadata accessor for OwnedBeaconGroup.PairingState);
    if (v23 == a3)
      goto LABEL_37;
    a2 += v29;
    if (v21)
      goto LABEL_8;
LABEL_9:
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v34)
      goto LABEL_32;
    v27 = *(_QWORD *)(v35 + 8 * v26);
    if (!v27)
      break;
LABEL_18:
    v21 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v34)
  {
    v21 = 0;
    v22 = v26;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v35 + 8 * v22);
  if (v27)
    goto LABEL_14;
  v28 = v26 + 2;
  if (v26 + 2 >= v34)
    goto LABEL_32;
  v27 = *(_QWORD *)(v35 + 8 * v28);
  if (v27)
    goto LABEL_17;
  v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    v21 = 0;
    v22 = v26 + 2;
    goto LABEL_36;
  }
  v27 = *(_QWORD *)(v35 + 8 * v22);
  if (v27)
  {
LABEL_14:
    v26 = v22;
    goto LABEL_18;
  }
  v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }
  v27 = *(_QWORD *)(v35 + 8 * v28);
  if (v27)
  {
LABEL_17:
    v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v26 >= v34)
    {
      v21 = 0;
      v22 = v31;
      goto LABEL_36;
    }
    v27 = *(_QWORD *)(v35 + 8 * v26);
    ++v28;
    if (v27)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100509FC0(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = a4;
  v6 = a2;
  v7 = (_QWORD *)result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a4 < 0)
      v8 = a4;
    else
      v8 = a4 & 0xFFFFFFFFFFFFFF8;
    result = __CocoaDictionary.makeIterator()(v8);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v4 = result | 0x8000000000000000;
    if (v6)
      goto LABEL_6;
LABEL_40:
    v12 = 0;
    a3 = 0;
LABEL_49:
    *v7 = v4;
    v7[1] = v9;
    v7[2] = v10;
    v7[3] = v12;
    v7[4] = v11;
    return a3;
  }
  v25 = -1 << *(_BYTE *)(a4 + 32);
  v9 = a4 + 64;
  v26 = ~v25;
  v27 = -v25;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  else
    v28 = -1;
  v11 = v28 & *(_QWORD *)(a4 + 64);
  v10 = v26;
  if (!a2)
    goto LABEL_40;
LABEL_6:
  if (!a3)
  {
    v12 = 0;
    goto LABEL_49;
  }
  if (a3 < 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v29 = v10;
  v30 = v7;
  v12 = 0;
  v13 = 0;
  v31 = (unint64_t)(v10 + 64) >> 6;
  while ((v4 & 0x8000000000000000) != 0)
  {
    v16 = v9;
    v17 = __CocoaDictionary.Iterator.next()();
    if (!v17)
      goto LABEL_42;
    v19 = v18;
    swift_unknownObjectRelease(v17);
    v32 = v19;
    v20 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
    swift_unknownObjectRetain(v19);
    swift_dynamicCast(&v33, &v32, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
    v21 = v33;
    result = swift_unknownObjectRelease(v19);
    if (!v21)
    {
LABEL_42:
      a3 = v13;
      v9 = v16;
LABEL_48:
      v10 = v29;
      v7 = v30;
      goto LABEL_49;
    }
    v9 = v16;
LABEL_9:
    ++v13;
    *v6++ = v21;
    if (v13 == a3)
      goto LABEL_48;
  }
  if (v11)
  {
    v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v15 = v14 | (v12 << 6);
LABEL_26:
    result = (uint64_t)*(id *)(*(_QWORD *)(v4 + 56) + 8 * v15);
    if (!result)
      goto LABEL_47;
    v21 = result;
    goto LABEL_9;
  }
  v22 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_51;
  }
  if (v22 >= v31)
    goto LABEL_43;
  v23 = *(_QWORD *)(v9 + 8 * v22);
  if (v23)
    goto LABEL_25;
  v12 += 2;
  if (v22 + 1 >= v31)
  {
    v11 = 0;
    v12 = v22;
    goto LABEL_47;
  }
  v23 = *(_QWORD *)(v9 + 8 * v12);
  if (v23)
  {
LABEL_21:
    v22 = v12;
LABEL_25:
    v11 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v22 << 6);
    v12 = v22;
    goto LABEL_26;
  }
  v24 = v22 + 2;
  if (v22 + 2 >= v31)
    goto LABEL_43;
  v23 = *(_QWORD *)(v9 + 8 * v24);
  if (v23)
  {
LABEL_24:
    v22 = v24;
    goto LABEL_25;
  }
  v12 = v22 + 3;
  if (v22 + 3 >= v31)
  {
    v11 = 0;
    v12 = v22 + 2;
    goto LABEL_47;
  }
  v23 = *(_QWORD *)(v9 + 8 * v12);
  if (v23)
    goto LABEL_21;
  v24 = v22 + 4;
  if (v22 + 4 >= v31)
  {
LABEL_43:
    v11 = 0;
LABEL_47:
    a3 = v13;
    goto LABEL_48;
  }
  v23 = *(_QWORD *)(v9 + 8 * v24);
  if (v23)
    goto LABEL_24;
  while (1)
  {
    v22 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v22 >= v31)
    {
      v11 = 0;
      v12 = v31 - 1;
      goto LABEL_47;
    }
    v23 = *(_QWORD *)(v9 + 8 * v22);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_52:
  __break(1u);
  return result;
}

uint64_t sub_10050A298(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v8 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v11 - 8);
  result = __chkstk_darwin(v11);
  v40 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a4;
  v15 = a4 + 64;
  v14 = *(_QWORD *)(a4 + 64);
  v16 = -1 << *(_BYTE *)(a4 + 32);
  v35 = a1;
  v36 = v16;
  v17 = -v16;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & v14;
  if (!a2)
  {
    v20 = 0;
    v21 = 0;
LABEL_39:
    v31 = v35;
    v32 = ~v36;
    *v35 = v42;
    v31[1] = v15;
    v31[2] = v32;
    v31[3] = v20;
    v31[4] = v19;
    return v21;
  }
  if (!a3)
  {
    v20 = 0;
    v21 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v20 = 0;
  v21 = 0;
  v37 = a4 + 64;
  v38 = (unint64_t)(63 - v36) >> 6;
  v34 = v38 - 1;
  v39 = a3;
  v22 = v40;
  v23 = v41;
  if (!v19)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v25 = v24 | (v20 << 6);
  while (1)
  {
    v29 = *(_QWORD *)(v23 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v10, *(_QWORD *)(v42 + 48) + v29 * v25, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1, v11) == 1)
    {
      v15 = v37;
      goto LABEL_38;
    }
    ++v21;
    v30 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v30(v22, v10, v11);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v11);
    if (v21 == v39)
    {
      v21 = v39;
      v15 = v37;
      goto LABEL_39;
    }
    a2 += v29;
    v23 = v41;
    if (v19)
      goto LABEL_8;
LABEL_9:
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    v15 = v37;
    if (v26 >= v38)
      goto LABEL_37;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
    {
      v28 = v20 + 2;
      ++v20;
      if (v26 + 1 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * v28);
      if (v27)
        goto LABEL_14;
      v20 = v26 + 1;
      if (v26 + 2 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * (v26 + 2));
      if (v27)
      {
        v26 += 2;
      }
      else
      {
        v20 = v26 + 2;
        if (v26 + 3 >= v38)
          goto LABEL_37;
        v27 = *(_QWORD *)(v37 + 8 * (v26 + 3));
        if (!v27)
        {
          v28 = v26 + 4;
          v20 = v26 + 3;
          if (v26 + 4 < v38)
          {
            v27 = *(_QWORD *)(v37 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                v26 = v28 + 1;
                if (__OFADD__(v28, 1))
                  goto LABEL_42;
                if (v26 >= v38)
                {
                  v20 = v34;
                  goto LABEL_37;
                }
                v27 = *(_QWORD *)(v37 + 8 * v26);
                ++v28;
                if (v27)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v26 = v28;
            goto LABEL_21;
          }
LABEL_37:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v10, 1, 1, v11);
          v19 = 0;
LABEL_38:
          sub_100004048((uint64_t)v10, &qword_1010ED860);
          goto LABEL_39;
        }
        v26 += 3;
      }
    }
LABEL_21:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v20 = v26;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_10050A5E8(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      swift_retain(v20);
      goto LABEL_38;
    }
    ++v11;
    result = swift_retain(v20);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10050A7E0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  v10 = a5(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v12);
  v17 = (char *)&v33 - v16;
  v38 = a4;
  v20 = *(_QWORD *)(a4 + 56);
  v19 = a4 + 56;
  v18 = v20;
  v37 = v19;
  v21 = -1 << *(_BYTE *)(v19 - 24);
  if (-v21 < 64)
    v22 = ~(-1 << -(char)v21);
  else
    v22 = -1;
  v23 = v22 & v18;
  if (!a2)
  {
    v24 = 0;
    a3 = 0;
LABEL_38:
    v32 = v37;
    *a1 = v38;
    a1[1] = v32;
    a1[2] = ~v21;
    a1[3] = v24;
    a1[4] = v23;
    return a3;
  }
  if (!a3)
  {
    v24 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v34 = -1 << *(_BYTE *)(v19 - 24);
  v35 = a1;
  v24 = 0;
  v25 = 0;
  v36 = (unint64_t)(63 - v21) >> 6;
  v33 = v36 - 1;
  if (!v23)
    goto LABEL_9;
LABEL_8:
  v26 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  v27 = v26 | (v24 << 6);
  while (1)
  {
    ++v25;
    v31 = *(_QWORD *)(v11 + 72);
    sub_10005972C(*(_QWORD *)(v38 + 48) + v31 * v27, (uint64_t)v14, a5);
    sub_1000126EC((uint64_t)v14, (uint64_t)v17, a5);
    result = sub_1000126EC((uint64_t)v17, a2, a5);
    if (v25 == a3)
      goto LABEL_37;
    a2 += v31;
    if (v23)
      goto LABEL_8;
LABEL_9:
    v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v28 >= v36)
      goto LABEL_32;
    v29 = *(_QWORD *)(v37 + 8 * v28);
    if (!v29)
      break;
LABEL_18:
    v23 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v28 << 6);
    v24 = v28;
  }
  v24 += 2;
  if (v28 + 1 >= v36)
  {
    v23 = 0;
    v24 = v28;
    goto LABEL_36;
  }
  v29 = *(_QWORD *)(v37 + 8 * v24);
  if (v29)
    goto LABEL_14;
  v30 = v28 + 2;
  if (v28 + 2 >= v36)
    goto LABEL_32;
  v29 = *(_QWORD *)(v37 + 8 * v30);
  if (v29)
    goto LABEL_17;
  v24 = v28 + 3;
  if (v28 + 3 >= v36)
  {
    v23 = 0;
    v24 = v28 + 2;
    goto LABEL_36;
  }
  v29 = *(_QWORD *)(v37 + 8 * v24);
  if (v29)
  {
LABEL_14:
    v28 = v24;
    goto LABEL_18;
  }
  v30 = v28 + 4;
  if (v28 + 4 >= v36)
  {
LABEL_32:
    v23 = 0;
LABEL_36:
    a3 = v25;
LABEL_37:
    v21 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  v29 = *(_QWORD *)(v37 + 8 * v30);
  if (v29)
  {
LABEL_17:
    v28 = v30;
    goto LABEL_18;
  }
  while (1)
  {
    v28 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v28 >= v36)
    {
      v23 = 0;
      v24 = v33;
      goto LABEL_36;
    }
    v29 = *(_QWORD *)(v37 + 8 * v28);
    ++v30;
    if (v29)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10050AA98(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10050AC94(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v20);
      goto LABEL_38;
    }
    ++v11;
    result = swift_bridgeObjectRetain(v20);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10050AE8C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v8 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v11 - 8);
  result = __chkstk_darwin(v11);
  v40 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a4;
  v15 = a4 + 56;
  v14 = *(_QWORD *)(a4 + 56);
  v16 = -1 << *(_BYTE *)(a4 + 32);
  v35 = a1;
  v36 = v16;
  v17 = -v16;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & v14;
  if (!a2)
  {
    v20 = 0;
    v21 = 0;
LABEL_39:
    v31 = v35;
    v32 = ~v36;
    *v35 = v42;
    v31[1] = v15;
    v31[2] = v32;
    v31[3] = v20;
    v31[4] = v19;
    return v21;
  }
  if (!a3)
  {
    v20 = 0;
    v21 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v20 = 0;
  v21 = 0;
  v37 = a4 + 56;
  v38 = (unint64_t)(63 - v36) >> 6;
  v34 = v38 - 1;
  v39 = a3;
  v22 = v40;
  v23 = v41;
  if (!v19)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v25 = v24 | (v20 << 6);
  while (1)
  {
    v29 = *(_QWORD *)(v23 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v10, *(_QWORD *)(v42 + 48) + v29 * v25, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1, v11) == 1)
    {
      v15 = v37;
      goto LABEL_38;
    }
    ++v21;
    v30 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v30(v22, v10, v11);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v11);
    if (v21 == v39)
    {
      v21 = v39;
      v15 = v37;
      goto LABEL_39;
    }
    a2 += v29;
    v23 = v41;
    if (v19)
      goto LABEL_8;
LABEL_9:
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    v15 = v37;
    if (v26 >= v38)
      goto LABEL_37;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
    {
      v28 = v20 + 2;
      ++v20;
      if (v26 + 1 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * v28);
      if (v27)
        goto LABEL_14;
      v20 = v26 + 1;
      if (v26 + 2 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * (v26 + 2));
      if (v27)
      {
        v26 += 2;
      }
      else
      {
        v20 = v26 + 2;
        if (v26 + 3 >= v38)
          goto LABEL_37;
        v27 = *(_QWORD *)(v37 + 8 * (v26 + 3));
        if (!v27)
        {
          v28 = v26 + 4;
          v20 = v26 + 3;
          if (v26 + 4 < v38)
          {
            v27 = *(_QWORD *)(v37 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                v26 = v28 + 1;
                if (__OFADD__(v28, 1))
                  goto LABEL_42;
                if (v26 >= v38)
                {
                  v20 = v34;
                  goto LABEL_37;
                }
                v27 = *(_QWORD *)(v37 + 8 * v26);
                ++v28;
                if (v27)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v26 = v28;
            goto LABEL_21;
          }
LABEL_37:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v10, 1, 1, v11);
          v19 = 0;
LABEL_38:
          sub_100004048((uint64_t)v10, &qword_1010ED860);
          goto LABEL_39;
        }
        v26 += 3;
      }
    }
LABEL_21:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v20 = v26;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_10050B1DC(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (uint64_t *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    *v11 = *v20;
    v11[1] = v22;
    if (v13 == v10)
    {
      sub_10001BBBC(v21, v22);
      goto LABEL_38;
    }
    v11 += 2;
    result = sub_10001BBBC(v21, v22);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_10050B3D8(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

_QWORD *sub_10050B56C(_QWORD *result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_BYTE *)(*(_QWORD *)(a4 + 48) + v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

_QWORD *sub_10050B700(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 48) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_10050B8F8(_QWORD *result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_BYTE *)(*(_QWORD *)(a4 + 48) + v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

_QWORD *sub_10050BA8C(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10050BC84(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t *sub_10050BE80(uint64_t *result, uint64_t **a2, uint64_t a3, uint64_t a4, unint64_t *a5, _QWORD *a6, unint64_t *a7)
{
  uint64_t v7;
  uint64_t **v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v41;
  uint64_t *v42;
  _QWORD v43[5];

  v7 = a4;
  v9 = a2;
  v37 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a4 < 0)
      v13 = a4;
    else
      v13 = a4 & 0xFFFFFFFFFFFFFF8;
    v14 = __CocoaSet.makeIterator()(v13);
    v15 = sub_10000F4A0(0, a5, a6);
    v16 = sub_1000170AC(a7, a5, a6);
    result = Set.Iterator.init(_cocoa:)(v43, v14, v15, v16);
    v7 = v43[0];
    v17 = v43[1];
    v18 = v43[2];
    v19 = v43[3];
    v20 = v43[4];
    if (v9)
      goto LABEL_6;
LABEL_39:
    v21 = 0;
    goto LABEL_41;
  }
  v19 = 0;
  v32 = -1 << *(_BYTE *)(a4 + 32);
  v17 = a4 + 56;
  v18 = ~v32;
  v33 = -v32;
  if (v33 < 64)
    v34 = ~(-1 << v33);
  else
    v34 = -1;
  v20 = v34 & *(_QWORD *)(a4 + 56);
  if (!a2)
    goto LABEL_39;
LABEL_6:
  if (!a3)
  {
    v21 = 0;
LABEL_41:
    v35 = v37;
LABEL_44:
    *v35 = v7;
    v35[1] = v17;
    v35[2] = v18;
    v35[3] = v19;
    v35[4] = v20;
    return (uint64_t *)v21;
  }
  if (a3 < 0)
    goto LABEL_51;
  v21 = 0;
  v38 = (unint64_t)(v18 + 64) >> 6;
  v36 = v18;
  while (1)
  {
    if (v7 < 0)
    {
      v28 = __CocoaSet.Iterator.next()(result);
      if (!v28)
        goto LABEL_43;
      v29 = v28;
      v41 = v28;
      v30 = sub_10000F4A0(0, a5, a6);
      swift_unknownObjectRetain(v29);
      swift_dynamicCast(&v42, &v41, (char *)&type metadata for Swift.AnyObject + 8, v30, 7);
      v24 = v42;
      result = (uint64_t *)swift_unknownObjectRelease(v29);
      if (!v24)
        goto LABEL_43;
      goto LABEL_11;
    }
    if (v20)
    {
      v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v23 = v22 | (v19 << 6);
      goto LABEL_10;
    }
    v25 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v25 >= v38)
    {
      v20 = 0;
      goto LABEL_43;
    }
    v26 = *(_QWORD *)(v17 + 8 * v25);
    if (v26)
      goto LABEL_26;
    v27 = v19 + 2;
    if (v19 + 2 >= v38)
    {
      v20 = 0;
      ++v19;
      goto LABEL_43;
    }
    v26 = *(_QWORD *)(v17 + 8 * v27);
    if (!v26)
    {
      if (v19 + 3 >= v38)
        goto LABEL_47;
      v26 = *(_QWORD *)(v17 + 8 * (v19 + 3));
      if (v26)
      {
        v25 = v19 + 3;
        goto LABEL_26;
      }
      v27 = v19 + 4;
      if (v19 + 4 >= v38)
      {
        v20 = 0;
        v19 += 3;
        goto LABEL_43;
      }
      v26 = *(_QWORD *)(v17 + 8 * v27);
      if (!v26)
      {
        v25 = v19 + 5;
        if (v19 + 5 >= v38)
        {
LABEL_47:
          v20 = 0;
          v19 = v27;
          goto LABEL_43;
        }
        v26 = *(_QWORD *)(v17 + 8 * v25);
        if (!v26)
        {
          v31 = v19 + 6;
          while (v38 != v31)
          {
            v26 = *(_QWORD *)(v17 + 8 * v31++);
            if (v26)
            {
              v25 = v31 - 1;
              goto LABEL_26;
            }
          }
          v20 = 0;
          v19 = v38 - 1;
          goto LABEL_43;
        }
        goto LABEL_26;
      }
    }
    v25 = v27;
LABEL_26:
    v20 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v25 << 6);
    v19 = v25;
LABEL_10:
    result = (uint64_t *)*(id *)(*(_QWORD *)(v7 + 48) + 8 * v23);
    v24 = result;
    if (!result)
      goto LABEL_43;
LABEL_11:
    ++v21;
    *v9++ = v24;
    if (v21 == a3)
    {
      v21 = a3;
LABEL_43:
      v18 = v36;
      v35 = v37;
      goto LABEL_44;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

_QWORD *sub_10050C178(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 48) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

void (*sub_10050C370(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_10050C448(v6, a2, a3);
  return sub_10050C3C4;
}

void (*sub_10050C3C8(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_10050C4B4(v6, a2, a3);
  return sub_10050C3C4;
}

void sub_10050C41C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_10050C448(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v3)();
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_10050DF60;
  }
  __break(1u);
  return result;
}

void (*sub_10050C4B4(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_10050C520;
  }
  __break(1u);
  return result;
}

void sub_10050C520(id *a1)
{

}

uint64_t sub_10050C528(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t (*v18[4])();

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000193A4(&qword_1010FE758, &qword_1010FE750, (const char *)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A9A8(&qword_1010FE750);
          v13 = sub_10050C370(v18, i, a3);
          v15 = *v14;
          ((void (*)(uint64_t (**)(), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000F4A0(0, &qword_1010ECAA0, SPMemberCircleDataIntegrity_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10050C744(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t (*v18[4])();

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000193A4(&qword_1010FE748, &qword_1010FE740, (const char *)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A9A8(&qword_1010FE740);
          v13 = sub_10050C370(v18, i, a3);
          v15 = *v14;
          ((void (*)(uint64_t (**)(), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000F4A0(0, &qword_1010ECAA8, SPOwnedCircleDataIntegrity_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10050C960(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000193A4(&qword_1010FE6B0, &qword_1010FE6A8, (const char *)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A9A8(&qword_1010FE6A8);
          v13 = sub_10050C3C8(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000F4A0(0, (unint64_t *)&qword_1010F89C0, CLLocation_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10050CB7C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t (*v18[4])();

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000193A4(&qword_1010FE6D8, &qword_1010FE6D0, (const char *)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A9A8(&qword_1010FE6D0);
          v13 = sub_10050C370(v18, i, a3);
          v15 = *v14;
          ((void (*)(uint64_t (**)(), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000F4A0(0, &qword_1010F2158, SPBeacon_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10050CD98(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t (*v18[4])();

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000193A4(&qword_1010FE6C8, &qword_1010FE6C0, (const char *)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A9A8(&qword_1010FE6C0);
          v13 = sub_10050C370(v18, i, a3);
          v15 = *v14;
          ((void (*)(uint64_t (**)(), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000F4A0(0, &qword_1011169F0, SPCommandKeys_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10050CFB4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t (*v18[4])();

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000193A4(&qword_1010FE6E8, &qword_1010FE6E0, (const char *)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001A9A8(&qword_1010FE6E0);
          v13 = sub_10050C370(v18, i, a3);
          v15 = *v14;
          ((void (*)(uint64_t (**)(), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000F4A0(0, &qword_101116A00, SPCommandKey_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10050D1D0(void (*a1)(char *, char *, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  __int128 v54[2];
  _QWORD v55[5];

  v51 = a2;
  v53 = a1;
  v4 = type metadata accessor for Date(0);
  v52 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v50 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - v11;
  v13 = type metadata accessor for OwnedBeaconRecord(0);
  v55[3] = v13;
  v55[4] = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)asc_100E57B60);
  v14 = (char *)sub_100018F08(v55);
  sub_10005972C((uint64_t)v53, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
  v15 = *(int *)(v13 + 20);
  v16 = v7;
  v53 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v53(v12, &v14[v15], v7);
  v17 = a3;
  v18 = v4;
  static Date.trustedNow.getter((uint64_t)v6);
  v19 = sub_1004E2F6C((uint64_t)v12, (uint64_t)v6);
  v20 = *(uint64_t (**)(char *, uint64_t))(v52 + 8);
  v21 = v20(v6, v18);
  if ((v19 & 1) != 0)
  {
    static Date.trustedNow.getter((uint64_t)v6);
    sub_1004E2DEC((uint64_t)v12, (uint64_t)v6);
    v20(v6, v18);
    v22 = (uint64_t)v12;
    v23 = v17;
    v52 = sub_100668604(v22);
    v24 = v50;
    v53(v50, (char *)v22, v7);
    sub_100030784((uint64_t)v55, (uint64_t)v54);
    v25 = *(unsigned __int8 *)(v8 + 80);
    v26 = v25 | 7;
    v48 = v25 | 7;
    v49 = (v25 + 16) & ~v25;
    v27 = v9 + v49;
    v28 = v49;
    v29 = (v27 + 7) & 0xFFFFFFFFFFFFFFF8;
    v30 = v7;
    v31 = (v29 + 47) & 0xFFFFFFFFFFFFFFF8;
    v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF8;
    v33 = swift_allocObject(&unk_10107C6E0, v32 + 8, v26);
    v34 = v33 + v28;
    v35 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
    v35(v34, v24, v30);
    sub_10000F9FC(v54, v33 + v29);
    *(_QWORD *)(v33 + v31) = v23;
    v16 = v30;
    v36 = v8;
    v37 = v51;
    *(_QWORD *)(v33 + v32) = v51;
    v12 = (char *)v22;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_10050DAEC, v33);
    swift_release();
    swift_release();
    v53(v24, (char *)v22, v16);
    v38 = swift_allocObject(&unk_10107C708, v29 + 8, v48);
    v35(v38 + v49, v24, v16);
    *(_QWORD *)(v38 + v29) = v37;
    swift_retain();
    Future.addFailure(block:)(sub_10050DBC8, v38);
    swift_release();
    swift_release();
    swift_release();
    v39 = v36;
  }
  else
  {
    v39 = v8;
    v40 = static os_log_type_t.default.getter(v21);
    if (qword_1010EA240 != -1)
      swift_once(&qword_1010EA240, sub_100B5D89C);
    v41 = qword_1011B7D20;
    v42 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v43 = swift_allocObject(v42, 72, 7);
    *(_OWORD *)(v43 + 16) = xmmword_100E22B00;
    v44 = UUID.uuidString.getter(v43);
    v46 = v45;
    *(_QWORD *)(v43 + 56) = &type metadata for String;
    *(_QWORD *)(v43 + 64) = sub_10001AA00();
    *(_QWORD *)(v43 + 32) = v44;
    *(_QWORD *)(v43 + 40) = v46;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "SPObserverAnalytics: Skipping reportDeviceUserStats - device recently reported %@", 81, 2, v43);
    swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v16);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
}

_QWORD *sub_10050D5C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int EnumCaseMultiPayload;
  unint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v23 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v23);
  v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for OwnedBeaconRecord(0);
  v5 = __chkstk_darwin(v22);
  v21 = (uint64_t)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v19 - v8;
  result = _swiftEmptyArrayStorage;
  v24 = _swiftEmptyArrayStorage;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = *(unsigned __int8 *)(v7 + 80);
    v13 = *(_QWORD *)(v7 + 72);
    v19[1] = v1;
    v20 = (v12 + 32) & ~v12;
    v14 = a1 + v20;
    v15 = _swiftEmptyArrayStorage;
    do
    {
      sub_10005972C(v14, (uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
      sub_10005972C((uint64_t)&v9[*(int *)(v22 + 24)], (uint64_t)v4, type metadata accessor for StableIdentifier);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v23);
      sub_1000126B0((uint64_t)v4, type metadata accessor for StableIdentifier);
      if (EnumCaseMultiPayload == 1)
      {
        sub_1000126EC((uint64_t)v9, v21, type metadata accessor for OwnedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
          sub_10009A680(0, v15[2] + 1, 1);
        v15 = v24;
        v18 = v24[2];
        v17 = v24[3];
        if (v18 >= v17 >> 1)
        {
          sub_10009A680(v17 > 1, v18 + 1, 1);
          v15 = v24;
        }
        v15[2] = v18 + 1;
        sub_1000126EC(v21, (uint64_t)v15 + v20 + v18 * v13, type metadata accessor for OwnedBeaconRecord);
      }
      else
      {
        sub_1000126B0((uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
      }
      v14 += v13;
      --v11;
    }
    while (v11);
    return v24;
  }
  return result;
}

uint64_t sub_10050D7E4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10050D818()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v8 = *(_OWORD *)(v0 + 48);
  v9 = *(_OWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = swift_task_alloc(dword_1010FE67C);
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = sub_100004A74;
  *(_QWORD *)(v6 + 72) = v5;
  *(_QWORD *)(v6 + 64) = v4;
  *(_OWORD *)(v6 + 48) = v8;
  *(_QWORD *)(v6 + 32) = v2;
  *(_QWORD *)(v6 + 40) = v3;
  *(_OWORD *)(v6 + 16) = v9;
  return swift_task_switch(sub_100506C90, 0, 0);
}

uint64_t sub_10050D8B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10050D8D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1010FE68C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  v3[2] = v2;
  return swift_task_switch(sub_1005064F8, 0, 0);
}

void sub_10050D938()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + 72) = *(_QWORD *)(v0 + 24);
}

uint64_t sub_10050D944()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10050D968()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1010FE70C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004C28;
  return sub_100504400();
}

uint64_t sub_10050D9CC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10050D9F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100504ECC(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_10050DA00(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_1005050DC(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_10050DA08()
{
  uint64_t v0;

  return OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100139464, v0, *(_QWORD *)(v0 + 40), &type metadata for () + 1, &type metadata for () + 1);
}

uint64_t sub_10050DA50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v6));
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v6 + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_10050DAEC(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1005074D4(a1, v1 + v4, v1 + v5, *(_QWORD *)(v1 + ((v5 + 47) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10050DB54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_10050DBC8(uint64_t a1)
{
  type metadata accessor for UUID(0);
  sub_100508794(a1);
}

uint64_t sub_10050DC18()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  v5 = *((_QWORD *)v0 + 5);
  if (v5 >> 60 != 15)
    sub_10001BC14(*((_QWORD *)v0 + 4), v5);
  v6 = (v3 + 152) & ~v3;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)v0 + 13);
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v6], v1);
  swift_release();
  return swift_deallocObject(v0, ((v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_10050DCD0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 152) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = (uint64_t)(v1 + 4);
  v9 = (uint64_t)(v1 + 13);
  v10 = v1[18];
  v11 = (uint64_t)v1 + v5;
  v12 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v13 = (_QWORD *)swift_task_alloc(dword_1010FE71C);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_100004C28;
  return sub_100507754(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_10050DD94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1010FE72C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000D9CC0;
  return sub_100507AFC(v2, v3);
}

unint64_t sub_10050DDE4()
{
  unint64_t result;

  result = qword_1010FE738;
  if (!qword_1010FE738)
  {
    result = swift_getWitnessTable(byte_100E42634, &type metadata for SPObserverAnalytics.SPObserverAnalyticsError);
    atomic_store(result, (unint64_t *)&qword_1010FE738);
  }
  return result;
}

uint64_t sub_10050DE28(uint64_t a1, uint64_t a2)
{
  initializeWithTake for AnalyticsEvent.Mode(a2, a1);
  return a2;
}

void sub_10050DE64(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 72);
}

unint64_t sub_10050DE70()
{
  uint64_t v0;

  return sub_100504DF8(*(unsigned __int8 **)(v0 + 16));
}

uint64_t storeEnumTagSinglePayload for SPObserverAnalytics.SPObserverAnalyticsError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10050DEB8 + 4 * byte_100E42520[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10050DED8 + 4 * byte_100E42525[v4]))();
}

_BYTE *sub_10050DEB8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10050DED8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10050DEE0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10050DEE8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10050DEF0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10050DEF8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SPObserverAnalytics.SPObserverAnalyticsError()
{
  return &type metadata for SPObserverAnalytics.SPObserverAnalyticsError;
}

unint64_t sub_10050DF18()
{
  unint64_t result;

  result = qword_1010FE760;
  if (!qword_1010FE760)
  {
    result = swift_getWitnessTable(byte_100E4260C, &type metadata for SPObserverAnalytics.SPObserverAnalyticsError);
    atomic_store(result, (unint64_t *)&qword_1010FE760);
  }
  return result;
}

uint64_t sub_10050DF64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1010FE768);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1010FE768);
  if (qword_1010E9CD0 != -1)
    swift_once(&qword_1010E9CD0, sub_10050FCEC);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7108);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10050DFF4()
{
  uint64_t v0;

  v0 = type metadata accessor for Table(0);
  sub_1000234D8(v0, qword_1011B6FD0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6FD0);
  return Table.init(_:database:)(0xD000000000000018, 0x8000000100ED9C40, 0, 0);
}

uint64_t sub_10050E05C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_connectionPair));
  v3 = v0 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_baseContainerURL;
  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10050E0E0()
{
  return type metadata accessor for CloudStorageDatabase(0);
}

uint64_t sub_10050E0E8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = &unk_100E426C0;
    result = type metadata accessor for URL(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      v5[4] = &unk_100E426D8;
      v5[5] = (char *)&value witness table for Builtin.Int32 + 64;
      result = swift_updateClassMetadata2(a1, 256, 6, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_10050E19C()
{
  return sub_10050FF2C((unint64_t *)&unk_1010FE870, byte_100E427E8);
}

uint64_t sub_10050E1C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_baseContainerURL;
  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10050E204(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_connectionPair);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_release(v4);
}

uint64_t (*sub_10050E254(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_connectionPair, a1, 33, 0);
  return j__swift_endAccess_0;
}

uint64_t sub_10050E298()
{
  return sub_10050FD6C();
}

uint64_t sub_10050E2AC()
{
  URL.appendingPathComponent(_:isDirectory:)(0x6F745364756F6C43, 0xEF62642E65676172, 0);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000013, 0x8000000100ED9C80, 0);
  return URL.appendingPathComponent(_:isDirectory:)(0xD000000000000013, 0x8000000100ED9CA0, 0);
}

void sub_10050E354()
{
  type metadata accessor for CloudStorageDatabase(0);
  Database.startup()();
}

void sub_10050E388()
{
  type metadata accessor for CloudStorageDatabase(0);
  Database.databaseAvailable()();
}

void sub_10050E3B0(int a1, int a2, uint64_t a3)
{
  sub_10050E3C4(a1, a2, a3);
}

void sub_10050E3C4(int a1, int a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  Swift::String v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  int v41;

  v8 = *v3;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v38 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9C60 != -1)
    swift_once(&qword_1010E9C60, sub_10050DF64);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1010FE768);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (_DWORD *)swift_slowAlloc(14, -1);
    v37 = v4;
    v17 = v8;
    v18 = a3;
    v19 = v10;
    v20 = v9;
    v21 = v16;
    *v16 = 67109376;
    LODWORD(v39) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, (char *)&v39 + 4, v16 + 1, v16 + 2);
    *((_WORD *)v21 + 4) = 1024;
    LODWORD(v39) = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, (char *)&v39 + 4, (char *)v21 + 10, (char *)v21 + 14);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Migrate schema %d -> %d", (uint8_t *)v21, 0xEu);
    v22 = v21;
    v9 = v20;
    v10 = v19;
    a3 = v18;
    v8 = v17;
    swift_slowDealloc(v22, -1, -1);
  }

  if (a2 == 1)
  {
    v23._countAndFlagsBits = 0xD00000000000001FLL;
    v23._object = (void *)0x8000000100ECBA70;
    Connection.execute(_:)(v23);
    if (!v24)
    {
      v25._countAndFlagsBits = 0xD000000000000018;
      v25._object = (void *)0x8000000100ECBA90;
      Connection.execute(_:)(v25);
      if (!v27)
      {
        v28 = __chkstk_darwin(v26);
        v35 = a3;
        v36 = v8;
        v29 = v38;
        v30 = UUID.init()(v28);
        v31 = UUID.uuidString.getter(v30);
        v33 = v32;
        (*(void (**)(char *, uint64_t))(v10 + 8))(v29, v9);
        Connection.savepoint(_:block:)(v31, v33, sub_10050EB48, &v37 - 4);
        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    v39 = 0;
    v40 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v39 = 0xD000000000000013;
    v40 = 0x8000000100ED9C20;
    v41 = a2;
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v39, v40, "searchpartyd/CloudStorageDatabase.swift", 39, 2, 102, 0);
    __break(1u);
  }
}

void sub_10050E6F4()
{
  type metadata accessor for CloudStorageDatabase(0);
  Database.purge()();
}

void sub_10050E728()
{
  type metadata accessor for CloudStorageDatabase(0);
  Database.reset()();
}

void sub_10050E75C()
{
  type metadata accessor for CloudStorageDatabase(0);
  Database.createIfNecessary()();
}

uint64_t sub_10050E790()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for CloudStorageDatabase(0);
  v1 = sub_10050FF2C(&qword_1010FE8B0, asc_100E42748);
  return Database.description.getter(v0, v1);
}

uint64_t sub_10050E7D8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to Database.isolatedDescription.getter[1]);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = type metadata accessor for CloudStorageDatabase(0);
  v3 = sub_10050FF2C(&qword_1010FE8B0, asc_100E42748);
  *v1 = v0;
  v1[1] = sub_10050E854;
  return Database.isolatedDescription.getter(v2, v3);
}

uint64_t sub_10050E854(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t sub_10050E8AC()
{
  return sub_10050FF2C(&qword_1010FE880, aY_88);
}

uint64_t sub_10050E8D0()
{
  return sub_10050FF2C(&qword_1010FE888, aA_74);
}

uint64_t sub_10050E8F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v3 = type metadata accessor for Table(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9C68 != -1)
    swift_once(&qword_1010E9C68, sub_10050DFF4);
  v7 = sub_10001A9E8(v3, (uint64_t)qword_1011B6FD0);
  v8 = Table.create(temporary:ifNotExists:withoutRowid:block:)(0, 0, 0, sub_10050EB60, 0);
  Connection.run(_:_:)(v8, v9, _swiftEmptyArrayStorage);
  if (v1)
    return swift_bridgeObjectRelease();
  v19[1] = a1;
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  v10 = sub_10001A9A8(&qword_1010EF3C8);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B00;
  if (qword_1010E9C88 != -1)
    swift_once(&qword_1010E9C88, sub_10050F7BC);
  v12 = sub_10001A9A8(&qword_1010EF408);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B7030);
  *(_QWORD *)(v11 + 56) = v12;
  *(_QWORD *)(v11 + 64) = sub_1000193A4(&qword_1010EF508, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  v14 = sub_100018F08((_QWORD *)(v11 + 32));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v14, v13, v12);
  v15 = Table.createIndex(_:unique:ifNotExists:)(v11, 0, 0);
  v17 = v16;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  Connection.run(_:_:)(v15, v17, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_10050EB48()
{
  uint64_t v0;

  return sub_10050E8F4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10050EB60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  __int128 v49;
  uint64_t v50;
  char *v51;
  __int128 v52;

  v0 = sub_10001A9A8(&qword_1010EF358);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v51 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_1010FE890);
  __chkstk_darwin(v3);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010F2EA0);
  __chkstk_darwin(v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010F2ED0);
  __chkstk_darwin(v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010F2EB8);
  __chkstk_darwin(v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010F2EC0);
  __chkstk_darwin(v15);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9C70 != -1)
    swift_once(&qword_1010E9C70, sub_10050F610);
  *(_QWORD *)&v49 = v5;
  v18 = sub_10001A9A8(&qword_1010EF3B8);
  v19 = sub_10001A9E8(v18, (uint64_t)qword_1011B6FE8);
  v50 = v1;
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
  v20(v17, 1, 1, v0);
  v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v47 = v18;
  v46(v14, 1, 1, v18);
  v45 = type metadata accessor for UUID(0);
  TableBuilder.column<A>(_:primaryKey:check:defaultValue:)(v19, 1, v17, v14);
  sub_100004048((uint64_t)v14, &qword_1010F2EB8);
  sub_100004048((uint64_t)v17, &qword_1010F2EC0);
  if (qword_1010E9C78 != -1)
    swift_once(&qword_1010E9C78, sub_10050F694);
  v21 = sub_10001A9A8(&qword_1010F2E50);
  v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B7000);
  v20(v17, 1, 1, v0);
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v23(v11, 1, 1, v21);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v22, 0, v17, v11, &type metadata for String, &protocol witness table for String);
  sub_100004048((uint64_t)v11, &qword_1010F2ED0);
  sub_100004048((uint64_t)v17, &qword_1010F2EC0);
  if (qword_1010E9C80 != -1)
    swift_once(&qword_1010E9C80, sub_10050F720);
  v24 = sub_10001A9E8(v21, (uint64_t)qword_1011B7018);
  v20(v17, 1, 1, v0);
  v23(v11, 1, 1, v21);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v24, 0, v17, v11, &type metadata for String, &protocol witness table for String);
  sub_100004048((uint64_t)v11, &qword_1010F2ED0);
  sub_100004048((uint64_t)v17, &qword_1010F2EC0);
  if (qword_1010E9C88 != -1)
    swift_once(&qword_1010E9C88, sub_10050F7BC);
  v25 = sub_10001A9A8(&qword_1010EF408);
  v26 = sub_10001A9E8(v25, (uint64_t)qword_1011B7030);
  v20(v17, 1, 1, v0);
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v27(v8, 1, 1, v25);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v26, 0, v17, v8, &type metadata for Data, &protocol witness table for Data);
  sub_100004048((uint64_t)v8, &qword_1010F2EA0);
  sub_100004048((uint64_t)v17, &qword_1010F2EC0);
  v28 = v49;
  if (qword_1010E9C90 != -1)
    swift_once(&qword_1010E9C90, sub_10050F850);
  v29 = sub_10001A9A8(&qword_1010FE898);
  v30 = sub_10001A9E8(v29, (uint64_t)qword_1011B7048);
  v20(v17, 1, 1, v0);
  v27(v8, 1, 1, v25);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v30, 0, v17, v8, &type metadata for Data, &protocol witness table for Data);
  sub_100004048((uint64_t)v8, &qword_1010F2EA0);
  sub_100004048((uint64_t)v17, &qword_1010F2EC0);
  if (qword_1010E9C98 != -1)
    swift_once(&qword_1010E9C98, sub_10050F8E4);
  v48 = v27;
  v31 = v47;
  v32 = sub_10001A9E8(v47, (uint64_t)qword_1011B7060);
  v20(v17, 1, 1, v0);
  v46(v14, 1, 1, v31);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v32, 0, v17, v14, v45, &protocol witness table for UUID);
  sub_100004048((uint64_t)v14, &qword_1010F2EB8);
  sub_100004048((uint64_t)v17, &qword_1010F2EC0);
  if (qword_1010E9CA8 != -1)
    swift_once(&qword_1010E9CA8, sub_10050FA04);
  v33 = sub_10001A9A8(&qword_1010EF370);
  v34 = sub_10001A9E8(v33, (uint64_t)qword_1011B7090);
  v20(v17, 1, 1, v0);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56);
  v35(v28, 1, 1, v33);
  v47 = v34;
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v34, 0, v17, v28, &type metadata for Int64, &protocol witness table for Int64);
  sub_100004048(v28, &qword_1010FE890);
  sub_100004048((uint64_t)v17, &qword_1010F2EC0);
  if (qword_1010E9CA0 != -1)
    swift_once(&qword_1010E9CA0, sub_10050F970);
  v36 = sub_10001A9E8(v33, (uint64_t)qword_1011B7078);
  v20(v17, 1, 1, v0);
  v35(v28, 1, 1, v33);
  v46 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v36;
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v36, 0, v17, v28, &type metadata for Int64, &protocol witness table for Int64);
  sub_100004048(v28, &qword_1010FE890);
  sub_100004048((uint64_t)v17, &qword_1010F2EC0);
  if (qword_1010E9CB0 != -1)
    swift_once(&qword_1010E9CB0, sub_10050FA94);
  v37 = sub_10001A9E8(v33, (uint64_t)qword_1011B70A8);
  v20(v17, 1, 1, v0);
  v35(v28, 1, 1, v33);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v37, 0, v17, v28, &type metadata for Int64, &protocol witness table for Int64);
  sub_100004048(v28, &qword_1010FE890);
  sub_100004048((uint64_t)v17, &qword_1010F2EC0);
  if (qword_1010E9CB8 != -1)
    swift_once(&qword_1010E9CB8, sub_10050FB2C);
  v38 = sub_10001A9E8(v25, (uint64_t)qword_1011B70C0);
  v20(v17, 1, 1, v0);
  v39 = v48;
  v48(v8, 1, 1, v25);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v38, 0, v17, v8, &type metadata for Data, &protocol witness table for Data);
  sub_100004048((uint64_t)v8, &qword_1010F2EA0);
  sub_100004048((uint64_t)v17, &qword_1010F2EC0);
  if (qword_1010E9CC0 != -1)
    swift_once(&qword_1010E9CC0, sub_10050FBC0);
  v40 = sub_10001A9E8(v25, (uint64_t)qword_1011B70D8);
  v20(v17, 1, 1, v0);
  v39(v8, 1, 1, v25);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v40, 0, v17, v8, &type metadata for Data, &protocol witness table for Data);
  sub_100004048((uint64_t)v8, &qword_1010F2EA0);
  sub_100004048((uint64_t)v17, &qword_1010F2EC0);
  if (qword_1010E9CC8 != -1)
    swift_once(&qword_1010E9CC8, sub_10050FC54);
  v41 = sub_10001A9E8(v25, (uint64_t)qword_1011B70F0);
  v20(v17, 1, 1, v0);
  v39(v8, 1, 1, v25);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v41, 0, v17, v8, &type metadata for Data, &protocol witness table for Data);
  sub_100004048((uint64_t)v8, &qword_1010F2EA0);
  sub_100004048((uint64_t)v17, &qword_1010F2EC0);
  v49 = xmmword_100E42680;
  v52 = xmmword_100E42680;
  v42 = v51;
  ~= infix<A>(_:_:)(&v52, v47, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
  TableBuilder.check(_:)(v42);
  v43 = *(void (**)(char *, uint64_t))(v50 + 8);
  v43(v42, v0);
  v52 = v49;
  ~= infix<A>(_:_:)(&v52, v46, &type metadata for Int64, &protocol witness table for Int64, &protocol witness table for Int64, &protocol witness table for Int64, &protocol witness table for Int64);
  TableBuilder.check(_:)(v42);
  return ((uint64_t (*)(char *, uint64_t))v43)(v42, v0);
}

uint64_t sub_10050F610()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF3B8);
  sub_1000234D8(v0, qword_1011B6FE8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6FE8);
  v1 = sub_1000193A4(&qword_1010F2E28, &qword_1010EF3B8, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(25705, 0xE200000000000000, v0, v1);
}

uint64_t sub_10050F694()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010F2E50);
  sub_1000234D8(v0, qword_1011B7000);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7000);
  v1 = sub_1000193A4(&qword_1010F2E58, &qword_1010F2E50, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x6C65646F6DLL, 0xE500000000000000, v0, v1);
}

uint64_t sub_10050F720()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010F2E50);
  sub_1000234D8(v0, qword_1011B7018);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7018);
  v1 = sub_1000193A4(&qword_1010F2E58, &qword_1010F2E50, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x65566D6574737973, 0xED00006E6F697372, v0, v1);
}

uint64_t sub_10050F7BC()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF408);
  sub_1000234D8(v0, qword_1011B7030);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7030);
  v1 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000015, 0x8000000100EC7640, v0, v1);
}

uint64_t sub_10050F850()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010FE898);
  sub_1000234D8(v0, qword_1011B7048);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7048);
  v1 = sub_1000193A4(&qword_1010FE8A8, &qword_1010FE898, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000015, 0x8000000100EC7660, v0, v1);
}

uint64_t sub_10050F8E4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF3B8);
  sub_1000234D8(v0, qword_1011B7060);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7060);
  v1 = sub_1000193A4(&qword_1010F2E28, &qword_1010EF3B8, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x64496E6D66, 0xE500000000000000, v0, v1);
}

uint64_t sub_10050F970()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF370);
  sub_1000234D8(v0, qword_1011B7078);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7078);
  v1 = sub_1000193A4(&qword_1010FE8A0, &qword_1010EF370, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x49746375646F7270, 0xE900000000000064, v0, v1);
}

uint64_t sub_10050FA04()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF370);
  sub_1000234D8(v0, qword_1011B7090);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7090);
  v1 = sub_1000193A4(&qword_1010FE8A0, &qword_1010EF370, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x6449726F646E6576, 0xE800000000000000, v0, v1);
}

uint64_t sub_10050FA94()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF370);
  sub_1000234D8(v0, qword_1011B70A8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B70A8);
  v1 = sub_1000193A4(&qword_1010FE8A0, &qword_1010EF370, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x45676E6972696170, 0xEC00000068636F70, v0, v1);
}

uint64_t sub_10050FB2C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF408);
  sub_1000234D8(v0, qword_1011B70C0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B70C0);
  v1 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000012, 0x8000000100EC7680, v0, v1);
}

uint64_t sub_10050FBC0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF408);
  sub_1000234D8(v0, qword_1011B70D8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B70D8);
  v1 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x4B65746176697270, 0xEA00000000007965, v0, v1);
}

uint64_t sub_10050FC54()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF408);
  sub_1000234D8(v0, qword_1011B70F0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B70F0);
  v1 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x697274656D6D7973, 0xEC00000079654B63, v0, v1);
}

uint64_t sub_10050FCEC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7108);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7108);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000011, 0x8000000100ED9C60);
}

uint64_t sub_10050FD6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD v12[2];

  v2 = type metadata accessor for Keychain.DataProtectionClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = static Keychain.data(account:service:)(0x6170686372616573, 0xEB00000000797472, 0x6F745364756F6C43);
  if (!v1)
  {
    if (v7 >> 60 == 15)
    {
      v0 = static Data.random(bytes:)(32);
      v9 = v8;
      v12[0] = v0;
      v12[1] = v8;
      (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Keychain.DataProtectionClass.c(_:), v2);
      sub_10001BBBC(v0, v9);
      v10 = sub_100035530();
      static Keychain.set<A>(data:account:service:dataProtectionClass:)(v12, 0x6170686372616573, 0xEB00000000797472, 0x6F745364756F6C43, 0xEC00000065676172, v5, &type metadata for Data, v10);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      sub_10001BC14(v0, v9);
    }
    else
    {
      return v6;
    }
  }
  return v0;
}

uint64_t sub_10050FF2C(unint64_t *a1, const char *a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for CloudStorageDatabase(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10050FF6C(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[16];
  __int128 v22;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v18, v3, v4);
  v17 = *v1;
  v5 = v19;
  v6 = v20;
  sub_10009F5D0((uint64_t)v18, v19);
  v7 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v17, &type metadata for Data, v7, v5, v6);
  if (!v2)
  {
    v17 = v1[1];
    v8 = v19;
    v9 = v20;
    sub_10009F5D0((uint64_t)v18, v19);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v17, &type metadata for Data, v7, v8, v9);
    v17 = v1[2];
    v10 = v19;
    v11 = v20;
    sub_10009F5D0((uint64_t)v18, v19);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v17, &type metadata for Data, v7, v10, v11);
    v17 = v1[3];
    v12 = v19;
    v13 = v20;
    sub_10009F5D0((uint64_t)v18, v19);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v17, &type metadata for Data, v7, v12, v13);
    sub_10016924C((uint64_t)(v1 + 4), (uint64_t)v21);
    sub_10016924C((uint64_t)v21, (uint64_t)&v22);
    if (*((_QWORD *)&v22 + 1) >> 60 != 15)
    {
      v17 = v22;
      v14 = v19;
      v15 = v20;
      sub_10009F5D0((uint64_t)v18, v19);
      dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v17, &type metadata for Data, v7, v14, v15);
    }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
}

__n128 sub_100510150@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[5];

  sub_1005105D8(a1, v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100510198(_QWORD *a1)
{
  return sub_10050FF6C(a1);
}

void sub_1005101D8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10051023C()
{
  uint64_t v0;

  if (BYTE6(v0) == 32)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1005104BCLL);
}

void sub_1005104C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  unint64_t v13;

  sub_10001EF3C(a13, v13);
  JUMPOUT(0x1005104D0);
}

unint64_t sub_100510524(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100510550();
  result = sub_100510594();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100510550()
{
  unint64_t result;

  result = qword_1010FE8B8;
  if (!qword_1010FE8B8)
  {
    result = swift_getWitnessTable(byte_100E42854, &type metadata for AirPodsInitiatePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010FE8B8);
  }
  return result;
}

unint64_t sub_100510594()
{
  unint64_t result;

  result = qword_1010FE8C0;
  if (!qword_1010FE8C0)
  {
    result = swift_getWitnessTable(byte_100E4282C, &type metadata for AirPodsInitiatePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010FE8C0);
  }
  return result;
}

uint64_t sub_1005105D8@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  __int128 v23;
  __int128 v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v25, v5, v6);
  v7 = v26;
  v8 = v27;
  sub_10009F5D0((uint64_t)v25, v26);
  v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = v9;
    v12 = v10;
    v13 = v26;
    v14 = v27;
    sub_10009F5D0((uint64_t)v25, v26);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(113, v13, v14);
    v33 = v15;
    v17 = v26;
    v16 = v27;
    sub_10009F5D0((uint64_t)v25, v26);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v17, v16);
    v18 = v26;
    v19 = v27;
    sub_10009F5D0((uint64_t)v25, v26);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(60, v18, v19);
    v20 = v26;
    v21 = v27;
    sub_10009F5D0((uint64_t)v25, v26);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(96, v20, v21);
    sub_1005101D8(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    v23 = v31;
    a2[2] = v30;
    a2[3] = v23;
    a2[4] = v32;
    v24 = v29;
    *a2 = v28;
    a2[1] = v24;
  }
  return result;
}

uint64_t destroy for AirPodsInitiatePairingCommandPayload(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;

  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(a1[2], a1[3]);
  sub_10001BC14(a1[4], a1[5]);
  result = sub_10001BC14(a1[6], a1[7]);
  v3 = a1[9];
  if (v3 >> 60 != 15)
    return sub_10001BC14(a1[8], v3);
  return result;
}

uint64_t initializeWithCopy for AirPodsInitiatePairingCommandPayload(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = a2[3];
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2[4];
  v9 = a2[5];
  sub_10001BBBC(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = a2[6];
  v11 = a2[7];
  sub_10001BBBC(v10, v11);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  v12 = a2 + 8;
  v13 = a2[9];
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v12;
  }
  else
  {
    v14 = *v12;
    sub_10001BBBC(*v12, v13);
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = v13;
  }
  return a1;
}

uint64_t *assignWithCopy for AirPodsInitiatePairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001BC14(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_10001BBBC(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001BC14(v10, v11);
  v12 = a2[4];
  v13 = a2[5];
  sub_10001BBBC(v12, v13);
  v14 = a1[4];
  v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_10001BC14(v14, v15);
  v16 = a2[6];
  v17 = a2[7];
  sub_10001BBBC(v16, v17);
  v18 = a1[6];
  v19 = a1[7];
  a1[6] = v16;
  a1[7] = v17;
  sub_10001BC14(v18, v19);
  v20 = a2 + 8;
  v21 = a2[9];
  if ((unint64_t)a1[9] >> 60 != 15)
  {
    if (v21 >> 60 != 15)
    {
      v23 = *v20;
      sub_10001BBBC(*v20, v21);
      v24 = a1[8];
      v25 = a1[9];
      a1[8] = v23;
      a1[9] = v21;
      sub_10001BC14(v24, v25);
      return a1;
    }
    sub_1000DC964((uint64_t)(a1 + 8));
    goto LABEL_6;
  }
  if (v21 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 4) = *(_OWORD *)v20;
    return a1;
  }
  v22 = *v20;
  sub_10001BBBC(*v20, v21);
  a1[8] = v22;
  a1[9] = v21;
  return a1;
}

uint64_t *assignWithTake for AirPodsInitiatePairingCommandPayload(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v6, v7);
  v8 = a1[4];
  v9 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_10001BC14(v8, v9);
  v10 = a1[6];
  v11 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_10001BC14(v10, v11);
  v12 = (uint64_t *)(a2 + 64);
  v13 = a1[9];
  if (v13 >> 60 != 15)
  {
    v14 = *(_QWORD *)(a2 + 72);
    if (v14 >> 60 != 15)
    {
      v15 = a1[8];
      a1[8] = *v12;
      a1[9] = v14;
      sub_10001BC14(v15, v13);
      return a1;
    }
    sub_1000DC964((uint64_t)(a1 + 8));
  }
  *((_OWORD *)a1 + 4) = *(_OWORD *)v12;
  return a1;
}

ValueMetadata *type metadata accessor for AirPodsInitiatePairingCommandPayload()
{
  return &type metadata for AirPodsInitiatePairingCommandPayload;
}

ValueMetadata *type metadata accessor for AccessoryGenericPayload()
{
  return &type metadata for AccessoryGenericPayload;
}

unint64_t sub_100510AE8(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100244454();
  result = sub_1001E99C4();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100510B14(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x7972616D697250;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x7261646E6F636553;
    else
      v4 = 0x6F4C657275636553;
    if (v3 == 1)
      v5 = 0xE900000000000079;
    else
      v5 = 0xEF736E6F69746163;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x7261646E6F636553;
      else
        v2 = 0x6F4C657275636553;
      if (v6 == 1)
        v7 = 0xE900000000000079;
      else
        v7 = 0xEF736E6F69746163;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x7972616D697250;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x7972616D697250)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_100510C4C(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 80;
  else
    v2 = 84;
  if ((a2 & 1) != 0)
    v3 = 80;
  else
    v3 = 84;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE100000000000000, v3, 0xE100000000000000, 0);
  swift_bridgeObjectRelease_n(0xE100000000000000, 2);
  return v4 & 1;
}

void sub_100510CB0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100510D0C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100510D6C + 4 * byte_100E4293C[a2]))(0x64696C6176);
}

uint64_t sub_100510D6C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x64696C6176 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x64696C6176, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  return v2 & 1;
}

void sub_100510E14(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100510E80(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100510EE4 + 4 * byte_100E42944[a2]))(1818322280);
}

uint64_t sub_100510EE4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1818322280 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1818322280, 0xE400000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE400000000000000);
  return v2 & 1;
}

void sub_100510F90(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100510FEC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10051105C + 4 * byte_100E4294D[a2]))(29556);
}

uint64_t sub_10051105C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 29556 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 29556, 0xE200000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE200000000000000);
  return v2 & 1;
}

void sub_10051111C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100511164(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100511200 + 4 * byte_100E42958[a2]))(0x6953726576726573);
}

uint64_t sub_100511200(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6953726576726573 && v1 == 0xEA00000000006E67)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6953726576726573, 0xEA00000000006E67, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000006E67);
  return v2 & 1;
}

void sub_1005112EC(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1005113DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;

  v4 = 0x8000000100EC2A00;
  if (a1 == a3 && v3 == 0x8000000100EC2A00)
  {
    v5 = 1;
    v4 = v3;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, 0x8000000100EC2A00, 0);
  }
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return v5 & 1;
}

void sub_1005114C4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100511504(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1005115D8 + 4 * byte_100E42972[a2]))(0x644970696863);
}

uint64_t sub_1005115D8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x644970696863 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x644970696863, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

void sub_100511700(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100511764(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100511824 + 4 * byte_100E42981[a2]))(0x6169726553746C61);
}

uint64_t sub_100511824(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6169726553746C61 && v1 == 0xEF7265626D754E6CLL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6169726553746C61, 0xEF7265626D754E6CLL, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEF7265626D754E6CLL);
  return v2 & 1;
}

void sub_100511940(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_10051198C(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100511A8C + 4 * byte_100E42991[a2]))(a3 + 2);
}

uint64_t sub_100511A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v4 = a3 + 2;
  v5 = 0x8000000100EC53D0;
  if (a1 == v4 && v3 == 0x8000000100EC53D0)
  {
    v6 = 1;
    v5 = v3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, v4, 0x8000000100EC53D0, 0);
  }
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  return v6 & 1;
}

uint64_t sub_100511BEC(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 29548;
  else
    v2 = 27496;
  if ((a2 & 1) != 0)
    v3 = 29548;
  else
    v3 = 27496;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE200000000000000, v3, 0xE200000000000000, 0);
  swift_bridgeObjectRelease_n(0xE200000000000000, 2);
  return v4 & 1;
}

uint64_t sub_100511C50(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x8000000100EC2BA0;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0xD000000000000036;
    else
      v4 = 0xD000000000000035;
    if (v3 == 1)
      v5 = 0x8000000100EC2BE0;
    else
      v5 = 0x8000000100EC2C20;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v7 = 0xD000000000000036;
      else
        v7 = 0xD000000000000035;
      if (v6 == 1)
        v2 = 0x8000000100EC2BE0;
      else
        v2 = 0x8000000100EC2C20;
      if (v4 != v7)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xD000000000000037;
    v5 = 0x8000000100EC2BA0;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xD000000000000037;
  if (v4 != 0xD000000000000037)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v7, v2, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v2)
    goto LABEL_21;
  v8 = 1;
  v2 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

void sub_100511D44(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_100511D90(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))((char *)sub_100511E28 + 4 * byte_100E429A0[a2]))(v2 + 7);
}

uint64_t sub_100511E28(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v4;

  v3 = 0x8000000100EC3370;
  if (a1 == v1 + 7 && v2 == 0x8000000100EC3370)
  {
    v4 = 1;
    v3 = v2;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, v1 + 7, 0x8000000100EC3370, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

BOOL static DatabaseCheckpointMode.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void sub_100511F0C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100511F68(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100512044 + 4 * byte_100E429AF[a2]))(0x6449646D63);
}

uint64_t sub_100512044(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6449646D63 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6449646D63, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  return v2 & 1;
}

void sub_10051218C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1005121DC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100512294 + 4 * byte_100E429C0[a2]))(0x646567617473);
}

uint64_t sub_100512294(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x646567617473 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x646567617473, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

uint64_t sub_1005123AC(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000014;
  else
    v3 = 0x6E776F6E6B6E75;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0x8000000100EC5310;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000014;
  else
    v5 = 0x6E776F6E6B6E75;
  if ((a2 & 1) != 0)
    v6 = 0x8000000100EC5310;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_100512454(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5 = v4;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v8 = v6;
  if (v3 == v7 && v5 == v6)
  {
    v9 = 1;
    v8 = v5;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v7, v6, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v8);
  return v9 & 1;
}

void sub_1005124DC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10051252C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1005125B4 + 4 * byte_100E429CD[a2]))(0x726576726573);
}

uint64_t sub_1005125B4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x726576726573 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x726576726573, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

uint64_t sub_100512684(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7354746E657665;
  else
    v3 = 0x746E657665;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x7354746E657665;
  else
    v5 = 0x746E657665;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_100512724(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 1802661751;
  else
    v2 = 1701670760;
  if ((a2 & 1) != 0)
    v3 = 1802661751;
  else
    v3 = 1701670760;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE400000000000000, v3, 0xE400000000000000, 0);
  swift_bridgeObjectRelease_n(0xE400000000000000, 2);
  return v4 & 1;
}

void sub_100512790(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1005127E0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100512838 + 4 * byte_100E429D6[a2]))(0x676E696C637963);
}

uint64_t sub_100512838(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x676E696C637963 && v1 == v2)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x676E696C637963, v2, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_1005128DC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100512924(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1005129B0 + 4 * byte_100E429DF[a2]))(0x6953726576726573);
}

uint64_t sub_1005129B0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6953726576726573 && v1 == 0xEA00000000006E67)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6953726576726573, 0xEA00000000006E67, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000006E67);
  return v2 & 1;
}

uint64_t sub_100512A84(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x61636F4C6E736361;
  else
    v3 = 0xD000000000000014;
  if (v2)
    v4 = 0x8000000100EC52E0;
  else
    v4 = 0xED0000736E6F6974;
  if ((a2 & 1) != 0)
    v5 = 0x61636F4C6E736361;
  else
    v5 = 0xD000000000000014;
  if ((a2 & 1) != 0)
    v6 = 0xED0000736E6F6974;
  else
    v6 = 0x8000000100EC52E0;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_100512B38(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_100512B88(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100512C14 + 4 * byte_100E429EB[a2]))(0xD00000000000002CLL);
}

uint64_t sub_100512C14(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x8000000100EC5170;
  if (a1 == 0xD00000000000002CLL && v1 == 0x8000000100EC5170)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD00000000000002CLL, 0x8000000100EC5170, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_100512CDC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100512D14(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100512D54 + 4 * byte_100E429F6[a2]))(21840);
}

uint64_t sub_100512D54(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 21840 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 21840, 0xE200000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE200000000000000);
  return v2 & 1;
}

void sub_100512DD4(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_100512E20(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100512F0C + 4 * byte_100E42A03[a2]))(0x696669746E656469);
}

uint64_t sub_100512F0C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x696669746E656469 && v1 == 0xEA00000000007265)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x696669746E656469, 0xEA00000000007265, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000007265);
  return v2 & 1;
}

uint64_t sub_100513058(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6F43737574617473;
  else
    v3 = 0x7069726373627573;
  if (v2)
    v4 = 0xEE0064496E6F6974;
  else
    v4 = 0xEA00000000006564;
  if ((a2 & 1) != 0)
    v5 = 0x6F43737574617473;
  else
    v5 = 0x7069726373627573;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000006564;
  else
    v6 = 0xEE0064496E6F6974;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_10051310C(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_10051315C(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))((char *)sub_100513238 + 4 * byte_100E42A14[a2]))(v2 + 9);
}

uint64_t sub_100513238(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v4;

  v3 = 0x8000000100EC5080;
  if (a1 == v1 + 9 && v2 == 0x8000000100EC5080)
  {
    v4 = 1;
    v3 = v2;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, v1 + 9, 0x8000000100EC5080, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

uint64_t sub_100513344(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x657669746361;
  else
    v3 = 0x7472656E69;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x657669746361;
  else
    v5 = 0x7472656E69;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1005133E0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100513420(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100513488 + 4 * byte_100E42A20[a2]))(1936094325);
}

uint64_t sub_100513488(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 1936094325 && v1 == v2)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1936094325, v2, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_100513534(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x646572616873;
  else
    v3 = 0x72656E776FLL;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x646572616873;
  else
    v5 = 0x72656E776FLL;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_1005135D4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6E6F697461636F6CLL;
  else
    v3 = 25705;
  if (v2)
    v4 = 0xE200000000000000;
  else
    v4 = 0xEC0000006F666E49;
  if ((a2 & 1) != 0)
    v5 = 0x6E6F697461636F6CLL;
  else
    v5 = 25705;
  if ((a2 & 1) != 0)
    v6 = 0xEC0000006F666E49;
  else
    v6 = 0xE200000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_100513674(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1005136BC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100513720 + 4 * byte_100E42A29[a2]))(1684107369);
}

uint64_t sub_100513720(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1684107369 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1684107369, 0xE400000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE400000000000000);
  return v2 & 1;
}

void sub_1005137CC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100513814(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100513864 + 4 * byte_100E42A32[a2]))(1684107369);
}

uint64_t sub_100513864(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1684107369 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1684107369, 0xE400000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE400000000000000);
  return v2 & 1;
}

void sub_1005138F8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100513930(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1005139D8 + 4 * byte_100E42A3D[a2]))(0x6C6562616CLL);
}

uint64_t sub_1005139D8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6C6562616CLL && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6C6562616CLL, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  return v2 & 1;
}

uint64_t sub_100513ACC(char a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  char v5;

  v2 = 0x8000000100EC39F0;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x8000000100EC3A10;
    else
      v3 = 0x8000000100EC3A30;
    v4 = a2;
    if (a2)
      goto LABEL_6;
  }
  else
  {
    v3 = 0x8000000100EC39F0;
    v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1)
        v2 = 0x8000000100EC3A10;
      else
        v2 = 0x8000000100EC3A30;
    }
  }
  if (v3 == v2)
  {
    v5 = 1;
    v2 = v3;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, v3, 0xD000000000000010, v2, 0);
  }
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return v5 & 1;
}

uint64_t sub_100513BA8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6974737561687865;
  else
    v3 = 0x6F4C74736574616CLL;
  if (v2)
    v4 = 0xEE006E6F69746163;
  else
    v4 = 0xEA00000000006576;
  if ((a2 & 1) != 0)
    v5 = 0x6974737561687865;
  else
    v5 = 0x6F4C74736574616CLL;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000006576;
  else
    v6 = 0xEE006E6F69746163;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_100513C5C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100513CB8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100513D3C + 4 * byte_100E42A49[a2]))(0x65746144646E65);
}

uint64_t sub_100513D3C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x65746144646E65 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x65746144646E65, 0xE700000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE700000000000000);
  return v2 & 1;
}

uint64_t sub_100513E0C(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = qword_100E42E28[a1];
  v3 = qword_100E42E28[a2];
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE100000000000000, v3, 0xE100000000000000, 0);
  swift_bridgeObjectRelease_n(0xE100000000000000, 2);
  return v4 & 1;
}

uint64_t sub_100513E70(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = qword_100E42E40[a1];
  v3 = qword_100E42E40[a2];
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE100000000000000, v3, 0xE100000000000000, 0);
  swift_bridgeObjectRelease_n(0xE100000000000000, 2);
  return v4 & 1;
}

uint64_t sub_100513ED4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7265706F72504B52;
  else
    v3 = 0x6669747265434B52;
  if (v2)
    v4 = 0xEF6E6F6974616369;
  else
    v4 = 0xEC00000073656974;
  if ((a2 & 1) != 0)
    v5 = 0x7265706F72504B52;
  else
    v5 = 0x6669747265434B52;
  if ((a2 & 1) != 0)
    v6 = 0xEC00000073656974;
  else
    v6 = 0xEF6E6F6974616369;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_100513F8C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100513FDC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10051410C + 4 * byte_100E42A57[a2]))(0x6F506D756964656DLL);
}

uint64_t sub_10051410C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6F506D756964656DLL && v1 == 0xEB00000000726577)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6F506D756964656DLL, 0xEB00000000726577, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEB00000000726577);
  return v2 & 1;
}

void sub_100514298(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1005142E4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100514398 + 4 * byte_100E42A67[a2]))(0x6E6F6973726576);
}

uint64_t sub_100514398(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E6F6973726576 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6E6F6973726576, 0xE700000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE700000000000000);
  return v2 & 1;
}

uint64_t sub_1005144A4(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000010;
  v3 = 0x8000000100EC28D0;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x65636E6575716573;
    else
      v5 = 0x7865646E69;
    if (v4 == 1)
      v6 = 0xE800000000000000;
    else
      v6 = 0xE500000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000010;
  v6 = 0x8000000100EC28D0;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0x65636E6575716573;
    else
      v2 = 0x7865646E69;
    if (v7 == 1)
      v3 = 0xE800000000000000;
    else
      v3 = 0xE500000000000000;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
  {
    v8 = 1;
    v3 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

void sub_1005145A8(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1005145F4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100514684 + 4 * byte_100E42A75[a2]))(0xD000000000000016);
}

uint64_t sub_100514684(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x8000000100EC2E60;
  if (a1 == 0xD000000000000016 && v1 == 0x8000000100EC2E60)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000016, 0x8000000100EC2E60, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_10051474C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1005147B8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10051488C + 4 * byte_100E42A84[a2]))(0x6D617473656D6974);
}

uint64_t sub_10051488C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6D617473656D6974 && v1 == 0xE900000000000070)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6D617473656D6974, 0xE900000000000070, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE900000000000070);
  return v2 & 1;
}

void sub_1005149C4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100514A0C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100514B04 + 4 * byte_100E42A95[a2]))(0x444970696843);
}

uint64_t sub_100514B04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x444970696843 && v1 == v2)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x444970696843, v2, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_100514C58(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 3158066;
  else
    v3 = 0x726F7272456F6ELL;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE300000000000000;
  if ((a2 & 1) != 0)
    v5 = 3158066;
  else
    v5 = 0x726F7272456F6ELL;
  if ((a2 & 1) != 0)
    v6 = 0xE300000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_100514CF4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x616E65746E69616DLL;
  else
    v3 = 0x7974696C697475;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xEB0000000065636ELL;
  if ((a2 & 1) != 0)
    v5 = 0x616E65746E69616DLL;
  else
    v5 = 0x7974696C697475;
  if ((a2 & 1) != 0)
    v6 = 0xEB0000000065636ELL;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_100514DA0(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x7265747369676572;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x7473696765726E75;
    else
      v4 = 0x6E6F697461636F6CLL;
    if (v3 == 1)
      v5 = 0xEA00000000007265;
    else
      v5 = 0xEE00657461647055;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x7473696765726E75;
      else
        v2 = 0x6E6F697461636F6CLL;
      if (v6 == 1)
        v7 = 0xEA00000000007265;
      else
        v7 = 0xEE00657461647055;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE800000000000000;
    v4 = 0x7265747369676572;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE800000000000000;
  if (v4 != 0x7265747369676572)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_100514ED8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100514F24(uint64_t a1)
{
  String.hash(into:)(a1, 1818322280, 0xE400000000000000);
  return swift_bridgeObjectRelease(0xE400000000000000);
}

void sub_100514F88(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100514FC4(uint64_t a1)
{
  String.hash(into:)(a1, 0x6953726576726573, 0xEA00000000006E67);
  return swift_bridgeObjectRelease(0xEA00000000006E67);
}

void sub_100515058(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10051509C(uint64_t a1, uint64_t a2)
{
  String.hash(into:)(a1, a2, 0x8000000100EC2A00);
  return swift_bridgeObjectRelease(0x8000000100EC2A00);
}

void sub_10051513C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100515174(uint64_t a1)
{
  String.hash(into:)(a1, 0x644970696863, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_100515240(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100515288(uint64_t a1)
{
  String.hash(into:)(a1, 0x6169726553746C61, 0xEF7265626D754E6CLL);
  return swift_bridgeObjectRelease(0xEF7265626D754E6CLL);
}

void sub_100515344(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100515388(uint64_t a1, uint64_t a2)
{
  String.hash(into:)(a1, a2 + 2, 0x8000000100EC53D0);
  return swift_bridgeObjectRelease(0x8000000100EC53D0);
}

uint64_t sub_100515480(uint64_t a1, unsigned __int8 a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;

  v2 = a2;
  if (a2)
  {
    if (a2 == 1)
      v3 = 0xD000000000000036;
    else
      v3 = 0xD000000000000035;
    if (v2 == 1)
      v4 = 0x8000000100EC2BE0;
    else
      v4 = 0x8000000100EC2C20;
  }
  else
  {
    v3 = 0xD000000000000037;
    v4 = 0x8000000100EC2BA0;
  }
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

void sub_1005154F8(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_100515540(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, v1 + 7, 0x8000000100EC3370);
  return swift_bridgeObjectRelease(0x8000000100EC3370);
}

void sub_1005155CC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100515610(uint64_t a1)
{
  String.hash(into:)(a1, 0x6449646D63, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

void sub_1005156E8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100515728(uint64_t a1)
{
  String.hash(into:)(a1, 0x646567617473, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_1005157D8(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_100515820(uint64_t a1)
{
  String.hash(into:)(a1, 0xD00000000000002CLL, 0x8000000100EC5170);
  return swift_bridgeObjectRelease(0x8000000100EC5170);
}

void sub_1005158A4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1005158E8(uint64_t a1)
{
  String.hash(into:)(a1, 0x696669746E656469, 0xEA00000000007265);
  return swift_bridgeObjectRelease(0xEA00000000007265);
}

void sub_1005159CC(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_100515A18(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, v1 + 9, 0x8000000100EC5080);
  return swift_bridgeObjectRelease(0x8000000100EC5080);
}

uint64_t sub_100515AE8(uint64_t a1, char a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 == 1)
      v2 = 0x8000000100EC3A10;
    else
      v2 = 0x8000000100EC3A30;
  }
  else
  {
    v2 = 0x8000000100EC39F0;
  }
  String.hash(into:)(a1, 0xD000000000000010, v2);
  return swift_bridgeObjectRelease(v2);
}

void sub_100515B58(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100515B98(uint64_t a1)
{
  String.hash(into:)(a1, 0x6F506D756964656DLL, 0xEB00000000726577);
  return swift_bridgeObjectRelease(0xEB00000000726577);
}

void sub_100515C9C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100515CE0(uint64_t a1)
{
  String.hash(into:)(a1, 0x6E6F6973726576, 0xE700000000000000);
  return swift_bridgeObjectRelease(0xE700000000000000);
}

void sub_100515D8C(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_100515DD4(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000016, 0x8000000100EC2E60);
  return swift_bridgeObjectRelease(0x8000000100EC2E60);
}

void sub_100515E58(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100515EA4(uint64_t a1)
{
  String.hash(into:)(a1, 0x6D617473656D6974, 0xE900000000000070);
  return swift_bridgeObjectRelease(0xE900000000000070);
}

void sub_100515F74(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100515FB0(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, 0x444970696843, v1);
  return swift_bridgeObjectRelease(v1);
}

void sub_1005160A0(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1005160F8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1818322280, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

void sub_100516170(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1005161B8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6953726576726573, 0xEA00000000006E67);
  swift_bridgeObjectRelease(0xEA00000000006E67);
  return Hasher._finalize()();
}

void sub_100516260(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1005162B4()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0, 0x8000000100EC2A00);
  swift_bridgeObjectRelease(0x8000000100EC2A00);
  return Hasher._finalize()();
}

void sub_100516370(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1005163B4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x644970696863, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void sub_100516494(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1005164E8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6169726553746C61, 0xEF7265626D754E6CLL);
  swift_bridgeObjectRelease(0xEF7265626D754E6CLL);
  return Hasher._finalize()();
}

Swift::Int sub_1005165B8(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  if (a2)
  {
    if (a2 == 1)
      v3 = 0xD000000000000036;
    else
      v3 = 0xD000000000000035;
    if (a2 == 1)
      v4 = 0x8000000100EC2BE0;
    else
      v4 = 0x8000000100EC2C20;
  }
  else
  {
    v3 = 0xD000000000000037;
    v4 = 0x8000000100EC2BA0;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_100516654(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1005166AC()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 7, 0x8000000100EC3370);
  swift_bridgeObjectRelease(0x8000000100EC3370);
  return Hasher._finalize()();
}

void sub_100516750(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_10051679C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x646567617473, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void sub_100516860(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1005168B8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD00000000000002CLL, 0x8000000100EC5170);
  swift_bridgeObjectRelease(0x8000000100EC5170);
  return Hasher._finalize()();
}

void sub_100516954(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1005169B0()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 9, 0x8000000100EC5080);
  swift_bridgeObjectRelease(0x8000000100EC5080);
  return Hasher._finalize()();
}

void sub_100516A98(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_100516AD8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6C6562616CLL, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_100516B88(uint64_t a1, char a2)
{
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  if (a2)
  {
    if (a2 == 1)
      v3 = 0x8000000100EC3A10;
    else
      v3 = 0x8000000100EC3A30;
  }
  else
  {
    v3 = 0x8000000100EC39F0;
  }
  String.hash(into:)(v5, 0xD000000000000010, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_100516C1C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_100516C70()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6E6F6973726576, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

void sub_100516D38(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_100516D90()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000016, 0x8000000100EC2E60);
  swift_bridgeObjectRelease(0x8000000100EC2E60);
  return Hasher._finalize()();
}

void sub_100516E2C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_100516E84()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6D617473656D6974, 0xE900000000000070);
  swift_bridgeObjectRelease(0xE900000000000070);
  return Hasher._finalize()();
}

uint64_t sub_100516F68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v37 = 0x2000000000;
  v38 = __DataStorage.init(length:)(32);
  sub_10051ED28((int *)&v37, 0);
  v5 = v37;
  v6 = HIDWORD(v37);
  if (__OFSUB__(HIDWORD(v37), (_DWORD)v37))
  {
    __break(1u);
    goto LABEL_7;
  }
  v7 = v38;
  if (HIDWORD(v37) - (_DWORD)v37 != 32)
  {
LABEL_8:
    swift_release();
    v32 = 94;
    v31 = "Could not create fakeSharedSecretKey";
    goto LABEL_10;
  }
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v8 = __DataStorage.init(length:)(32);
  v37 = 0x2000000000;
  v38 = v8;
  sub_10051ED28((int *)&v37, 0);
  v9 = v37;
  v10 = HIDWORD(v37);
  if (__OFSUB__(HIDWORD(v37), (_DWORD)v37))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v34 = v7;
  v35 = v6;
  v36 = v5;
  v33 = v38;
  if (HIDWORD(v37) - (_DWORD)v37 == 32)
  {
    v11 = type metadata accessor for TimeBasedKey(0);
    v12 = a1 + *(int *)(v11 + 20);
    v13 = type metadata accessor for DateInterval(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a2, v12, v13);
    v14 = (_QWORD *)(a1 + *(int *)(v11 + 24));
    v15 = v14[4];
    v16 = v14[5];
    v17 = (int *)type metadata accessor for CryptoKeys(0);
    v18 = (uint64_t *)(a2 + v17[5]);
    *v18 = v15;
    v18[1] = v16;
    v19 = v14[2];
    v20 = v14[3];
    v21 = (uint64_t *)(a2 + v17[6]);
    *v21 = v19;
    v21[1] = v20;
    sub_10001BBBC(v19, v20);
    sub_10001BBBC(v19, v20);
    sub_10001BD08(v15, v16);
    v22 = sub_1007E6F8C(v19, v20);
    v24 = v23;
    sub_10001BC14(v19, v20);
    sub_1002F7394(v22, v24);
    v25 = v37;
    v26 = v38;
    result = sub_1000126B0(a1, type metadata accessor for TimeBasedKey);
    v28 = (uint64_t *)(a2 + v17[7]);
    *v28 = v25;
    v28[1] = v26;
    v29 = (uint64_t *)(a2 + v17[8]);
    *v29 = v36 | (v35 << 32);
    v29[1] = v34 | 0x4000000000000000;
    v30 = (uint64_t *)(a2 + v17[9]);
    *v30 = v9 | (v10 << 32);
    v30[1] = v33 | 0x4000000000000000;
    return result;
  }
  swift_release();
  v32 = 98;
  v31 = "Could not create fakeIntermediateKey";
LABEL_10:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, (unint64_t)(v31 - 32) | 0x8000000000000000, "searchpartyd/CryptoKeys.swift", 29, 2, v32, 0);
  __break(1u);
  return result;
}

uint64_t CryptoKeys.privateKey.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CryptoKeys(0) + 20);
  v2 = *(_QWORD *)v1;
  sub_10001BD08(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t type metadata accessor for CryptoKeys(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FE948;
  if (!qword_1010FE948)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CryptoKeys);
  return result;
}

uint64_t CryptoKeys.publicKey.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CryptoKeys(0) + 24);
  v2 = *(_QWORD *)v1;
  sub_10001BBBC(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t CryptoKeys.advertisement.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CryptoKeys(0) + 28);
  v2 = *(_QWORD *)v1;
  sub_10001BBBC(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t CryptoKeys.sharedSecretKey.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CryptoKeys(0) + 32);
  v2 = *(_QWORD *)v1;
  sub_10001BBBC(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t CryptoKeys.intermediateKey.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for CryptoKeys(0) + 36);
  v2 = *(_QWORD *)v1;
  sub_10001BBBC(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t CryptoKeys.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;

  v2 = v1;
  v4 = type metadata accessor for DateInterval(0);
  v5 = sub_100006204(&qword_1010FE8C8, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v5);
  v6 = (int *)type metadata accessor for CryptoKeys(0);
  v7 = (uint64_t *)(v1 + v6[5]);
  v8 = v7[1];
  if (v8 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v9 = *v7;
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v9, v8);
    Data.hash(into:)(a1, v9, v8);
    sub_10001EF3C(v9, v8);
  }
  v10 = (uint64_t *)(v1 + v6[6]);
  v11 = *v10;
  v12 = v10[1];
  sub_10001BBBC(*v10, v12);
  Data.hash(into:)(a1, v11, v12);
  sub_10001BC14(v11, v12);
  v13 = (uint64_t *)(v2 + v6[7]);
  v14 = *v13;
  v15 = v13[1];
  sub_10001BBBC(*v13, v15);
  Data.hash(into:)(a1, v14, v15);
  sub_10001BC14(v14, v15);
  v16 = (uint64_t *)(v2 + v6[8]);
  v17 = *v16;
  v18 = v16[1];
  sub_10001BBBC(*v16, v18);
  Data.hash(into:)(a1, v17, v18);
  sub_10001BC14(v17, v18);
  v19 = (uint64_t *)(v2 + v6[9]);
  v20 = *v19;
  v21 = v19[1];
  sub_10001BBBC(*v19, v21);
  Data.hash(into:)(a1, v20, v21);
  return sub_10001BC14(v20, v21);
}

Swift::Int CryptoKeys.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  CryptoKeys.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_100517604(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10051762C + 4 * byte_100E42B76[a1]))(68, 0xE100000000000000);
}

uint64_t sub_10051762C()
{
  return 21072;
}

uint64_t sub_100517638()
{
  return 21840;
}

uint64_t sub_100517644()
{
  return 65;
}

uint64_t sub_10051764C()
{
  return 19283;
}

uint64_t sub_100517658()
{
  return 79;
}

uint64_t sub_100517660()
{
  return 17747;
}

uint64_t sub_10051766C()
{
  return 18771;
}

uint64_t sub_100517678()
{
  return 73;
}

uint64_t sub_100517680()
{
  return 19779;
}

uint64_t sub_10051768C()
{
  return 20035;
}

uint64_t sub_100517698()
{
  return 78;
}

uint64_t sub_1005176A0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1005176C8 + 4 * byte_100E42B82[a1]))(68, 0xE100000000000000);
}

uint64_t sub_1005176C8()
{
  return 21072;
}

uint64_t sub_1005176D4()
{
  return 21840;
}

uint64_t sub_1005176E0()
{
  return 65;
}

uint64_t sub_1005176E8()
{
  return 19283;
}

uint64_t sub_1005176F4()
{
  return 79;
}

uint64_t sub_1005176FC()
{
  return 17747;
}

uint64_t sub_100517708()
{
  return 18771;
}

uint64_t sub_100517714()
{
  return 73;
}

uint64_t sub_10051771C()
{
  return 19779;
}

uint64_t sub_100517728()
{
  return 20035;
}

uint64_t sub_100517734()
{
  return 78;
}

Swift::Int sub_100517740()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  CryptoKeys.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_100517778(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = sub_100517604(*a1);
  v5 = v4;
  v6 = sub_100517604(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_100517800()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = sub_100517604(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100517860(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_100517604(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1005178A0()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = sub_100517604(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1005178FC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10051F9EC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100517928@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100517604(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100517950()
{
  unsigned __int8 *v0;

  return sub_1005176A0(*v0);
}

unint64_t sub_100517958@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10051F9EC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10051797C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10051F038();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005179A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10051F038();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CryptoKeys.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;

  v2 = type metadata accessor for Date(0);
  v90 = *(_QWORD *)(v2 - 8);
  v91 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CodingUserInfoKey(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010FE8D0);
  v93 = *(_QWORD *)(v9 - 8);
  v94 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_10051F038();
  v96 = v11;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CryptoKeys.CodingKeys, &type metadata for CryptoKeys.CodingKeys, v14, v12, v13);
  v15 = a1[3];
  v16 = a1[4];
  sub_10001AA44(a1, v15);
  v17 = dispatch thunk of Encoder.userInfo.getter(v15, v16);
  if (qword_1010EA610 != -1)
    swift_once(&qword_1010EA610, sub_100DB0924);
  v18 = sub_10001A9E8(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v18, v5);
  if (*(_QWORD *)(v17 + 16) && (v19 = sub_100518F54((uint64_t)v8), (v20 & 1) != 0))
  {
    sub_100016A30(*(_QWORD *)(v17 + 56) + 32 * v19, (uint64_t)&v98);
  }
  else
  {
    v98 = 0u;
    v99 = 0u;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (*((_QWORD *)&v99 + 1))
  {
    v21 = swift_dynamicCast(&v97, &v98, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
    v22 = v95;
    v24 = v91;
    v23 = v92;
    v25 = v90;
    if (v21)
      v26 = v97;
    else
      v26 = 0;
  }
  else
  {
    sub_100004048((uint64_t)&v98, (uint64_t *)&unk_1010F6390);
    v26 = 0;
    v22 = v95;
    v24 = v91;
    v23 = v92;
    v25 = v90;
  }
  v27 = sub_10001A9A8(&qword_1010F6618);
  v28 = swift_allocObject(v27, 48, 7);
  *(_OWORD *)(v28 + 16) = xmmword_100E22B10;
  v29 = DateInterval.start.getter(v28);
  v30 = Date.timeIntervalSinceReferenceDate.getter(v29);
  v31 = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v4, v24);
  *(double *)(v28 + 32) = v30;
  *(double *)(v28 + 40) = DateInterval.duration.getter(v31);
  *(_QWORD *)&v98 = v28;
  LOBYTE(v97) = 0;
  v32 = sub_10001A9A8(&qword_1010F6620);
  v33 = sub_1002EE788(&qword_1010F6628, (uint64_t)&protocol witness table for Double, (const char *)&protocol conformance descriptor for <A> [A]);
  v34 = v94;
  v35 = v32;
  v36 = v96;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v94, v35, v33);
  if (v23)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v36, v34);
  }
  else
  {
    swift_bridgeObjectRelease();
    v37 = (int *)type metadata accessor for CryptoKeys(0);
    v38 = (uint64_t *)(v22 + v37[5]);
    v40 = *v38;
    v39 = v38[1];
    if (v39 >> 60 == 15)
    {
      v40 = 0;
      v39 = 0xF000000000000000;
    }
    *(_QWORD *)&v98 = v40;
    *((_QWORD *)&v98 + 1) = v39;
    LOBYTE(v97) = 1;
    v41 = sub_100036A58();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v98, &v97, v34, &type metadata for Data, v41);
    v98 = *(_OWORD *)(v22 + v37[6]);
    LOBYTE(v97) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v34, &type metadata for Data, v41);
    v42 = (_QWORD *)(v22 + v37[7]);
    v44 = v42[1];
    *(_QWORD *)&v98 = *v42;
    v43 = v98;
    *((_QWORD *)&v98 + 1) = v44;
    LOBYTE(v97) = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v34, &type metadata for Data, v41);
    v92 = v43;
    v45 = (_QWORD *)(v22 + v37[9]);
    v46 = v45[1];
    *(_QWORD *)&v98 = *v45;
    v47 = v98;
    *((_QWORD *)&v98 + 1) = v46;
    LOBYTE(v97) = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v34, &type metadata for Data, v41);
    v91 = v47;
    if (v26)
    {
      v95 = v46;
      v49 = v34;
      v50 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
      v51 = __DataStorage.init(length:)(32);
      *(_QWORD *)&v98 = 0x2000000000;
      *((_QWORD *)&v98 + 1) = v51;
      sub_10051ED28((int *)&v98, 0);
      *((_QWORD *)&v98 + 1) |= 0x4000000000000000uLL;
      LOBYTE(v97) = 4;
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v49, &type metadata for Data, v41);
      swift_release();
      swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
      v72 = __DataStorage.init(length:)(32);
      *(_QWORD *)&v98 = 0x2000000000;
      *((_QWORD *)&v98 + 1) = v72;
      sub_10051ED28((int *)&v98, 0);
      *((_QWORD *)&v98 + 1) |= 0x4000000000000000uLL;
      LOBYTE(v97) = 5;
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v49, &type metadata for Data, v41);
      swift_release();
      swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
      v73 = __DataStorage.init(length:)(32);
      *(_QWORD *)&v98 = 0x2000000000;
      *((_QWORD *)&v98 + 1) = v73;
      sub_10051ED28((int *)&v98, 0);
      *((_QWORD *)&v98 + 1) |= 0x4000000000000000uLL;
      LOBYTE(v97) = 6;
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v49, &type metadata for Data, v41);
      swift_release();
      swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
      v74 = __DataStorage.init(length:)(16);
      *(_QWORD *)&v98 = 0x1000000000;
      *((_QWORD *)&v98 + 1) = v74;
      sub_10051ED28((int *)&v98, 0);
      *((_QWORD *)&v98 + 1) |= 0x4000000000000000uLL;
      LOBYTE(v97) = 7;
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v49, &type metadata for Data, v41);
      swift_release();
    }
    else
    {
      v98 = *(_OWORD *)(v95 + v37[8]);
      LOBYTE(v97) = 4;
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v34, &type metadata for Data, v41);
      v95 = v46;
    }
    v52 = String.utf8Data.getter(0x646E616D6D6F63, 0xE700000000000000);
    v54 = v53;
    v55 = v91;
    v56 = v95;
    sub_10001BBBC(v91, v95);
    sub_1007E6A88(v55, v56, v52, v54, 32);
    v58 = v57;
    v60 = v59;
    sub_10001BC14(v55, v56);
    sub_1002F702C(v58, v60);
    sub_10001BC14(v52, v54);
    v61 = v98;
    LOBYTE(v97) = 9;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v94, &type metadata for Data, v41);
    sub_10001BC14(v61, *((unint64_t *)&v61 + 1));
    v62 = String.utf8Data.getter(0x7463656E6E6F63, 0xE700000000000000);
    v64 = v63;
    v65 = v91;
    v66 = v95;
    sub_10001BBBC(v91, v95);
    sub_1007E6A88(v65, v66, v62, v64, 32);
    v68 = v67;
    v70 = v69;
    sub_10001BC14(v65, v66);
    sub_1002F702C(v68, v70);
    sub_10001BC14(v62, v64);
    v71 = v98;
    LOBYTE(v97) = 10;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v94, &type metadata for Data, v41);
    sub_10001BC14(v71, *((unint64_t *)&v71 + 1));
    v75 = String.utf8Data.getter(0x646E616D6D6F63, 0xE700000000000000);
    v77 = v76;
    v78 = v91;
    v79 = v95;
    sub_10001BBBC(v91, v95);
    sub_1007E6A88(v78, v79, v75, v77, 32);
    v81 = v80;
    v83 = v82;
    sub_10001BC14(v78, v79);
    sub_1002F702C(v81, v83);
    sub_10001BC14(v75, v77);
    v84 = v98;
    v85 = sub_1002F955C(v98, *((unint64_t *)&v98 + 1), v92, v44);
    v87 = v86;
    sub_10001BC14(v84, *((unint64_t *)&v84 + 1));
    *(_QWORD *)&v98 = v85;
    *((_QWORD *)&v98 + 1) = v87;
    LOBYTE(v97) = 11;
    v88 = v94;
    v89 = v96;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v98, &v97, v94, &type metadata for Data, v41);
    sub_10001BC14(v85, v87);
    return (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v89, v88);
  }
}

_QWORD *CryptoKeys.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD *result;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  int *v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  __int128 v58;
  char v59;

  v55 = a2;
  v3 = type metadata accessor for Date(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010FE8E0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CryptoKeys(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  v56 = a1;
  sub_10001AA44(a1, v14);
  v15 = sub_10051F038();
  v16 = v57;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CryptoKeys.CodingKeys, &type metadata for CryptoKeys.CodingKeys, v15, v14, v13);
  if (v16)
    return (_QWORD *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v56);
  v53 = v5;
  v54 = (int *)v10;
  v17 = v7;
  v57 = v12;
  v18 = sub_10001A9A8(&qword_1010F6620);
  v59 = 0;
  v19 = sub_1002EE788(&qword_1010F6638, (uint64_t)&protocol witness table for Double, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v58, v18, &v59, v6, v18, v19);
  v20 = v58;
  v59 = 1;
  v21 = sub_100036994();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v59, v6, &type metadata for Data, v21);
  v52 = v20;
  v22 = v58;
  v59 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v58, &type metadata for Data, &v59, v6, &type metadata for Data, v21);
  v50 = *((_QWORD *)&v22 + 1);
  v51 = v22;
  v23 = v58;
  v59 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v58, &type metadata for Data, &v59, v6, &type metadata for Data, v21);
  v48 = *((_QWORD *)&v23 + 1);
  v49 = v23;
  v24 = v58;
  v59 = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v58, &type metadata for Data, &v59, v6, &type metadata for Data, v21);
  v47 = v24;
  v25 = v58;
  v59 = 8;
  result = KeyedDecodingContainer.decode<A>(_:forKey:)(&v58, &type metadata for Data, &v59, v6, &type metadata for Data, v21);
  v46 = v25;
  v27 = v52;
  v28 = v48;
  if (!*(_QWORD *)(v52 + 16))
  {
    __break(1u);
    goto LABEL_11;
  }
  v45 = v58;
  v29 = v53;
  result = (_QWORD *)Date.init(timeIntervalSinceReferenceDate:)(result);
  v30 = v57;
  v31 = v50;
  if (*(_QWORD *)(v27 + 16) < 2uLL)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v32 = *(double *)(v27 + 40);
  swift_bridgeObjectRelease();
  DateInterval.init(start:duration:)(v29, v32);
  if (v31 >> 60 == 15)
  {
    v33 = 0;
    v34 = 0xF000000000000000;
  }
  else
  {
    v35 = v51;
    sub_10001BD08(v51, v31);
    v33 = sub_1002FB3AC(v35, v31);
  }
  v36 = (uint64_t *)&v30[v54[5]];
  *v36 = v33;
  v36[1] = v34;
  v37 = v49;
  sub_10001BBBC(v49, v28);
  v38 = sub_1002FB6C8(v37, v28);
  v39 = v47;
  v40 = (uint64_t *)&v30[v54[6]];
  *v40 = v38;
  v40[1] = v41;
  v42 = *((_QWORD *)&v47 + 1);
  sub_10001BBBC(v39, *((unint64_t *)&v47 + 1));
  sub_1002F7394(v39, v42);
  *(_OWORD *)&v30[v54[7]] = v58;
  sub_10001BBBC(v46, *((unint64_t *)&v46 + 1));
  sub_1002F702C(v46, *((uint64_t *)&v46 + 1));
  *(_OWORD *)&v30[v54[8]] = v58;
  sub_1002F702C(v45, *((uint64_t *)&v45 + 1));
  (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v6);
  sub_10001EF3C(v51, v50);
  sub_10001BC14(v49, v48);
  sub_10001BC14(v47, *((unint64_t *)&v47 + 1));
  sub_10001BC14(v46, *((unint64_t *)&v46 + 1));
  v43 = v55;
  v44 = (uint64_t)v57;
  *(_OWORD *)&v57[v54[9]] = v58;
  sub_10005972C(v44, v43, type metadata accessor for CryptoKeys);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v56);
  return (_QWORD *)sub_1000126B0(v44, type metadata accessor for CryptoKeys);
}

_QWORD *sub_100518D10@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CryptoKeys.init(from:)(a1, a2);
}

uint64_t sub_100518D24(_QWORD *a1)
{
  return CryptoKeys.encode(to:)(a1);
}

unint64_t sub_100518D38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_10051C2EC(a1, v3);
}

uint64_t sub_100518D70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_100516750(*(_QWORD *)(v1 + 40), a1);
  return sub_100519E10(a1, v3);
}

uint64_t sub_100518DA0(uint64_t a1, uint64_t a2)
{
  return sub_100519778(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10051A0B0);
}

unint64_t sub_100518DB4(char a1)
{
  char v2;
  unint64_t v3;
  unint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  v2 = a1 & 1;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000014;
  else
    v3 = 0x6E776F6E6B6E75;
  if ((a1 & 1) != 0)
    v4 = 0x8000000100EC5310;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v4);
  v5 = Hasher._finalize()();
  return sub_10051A190(v2, v5);
}

uint64_t sub_100518E4C(uint64_t a1, unint64_t a2)
{
  return sub_1005197FC(a1, a2, (uint64_t (*)(uint64_t, unint64_t, Swift::Int))sub_10051A2D0);
}

unint64_t sub_100518E58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10051ACC0(a1, v4);
}

uint64_t sub_100518E88(uint64_t a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  sub_100515B58((uint64_t)v4, a1);
  v2 = Hasher._finalize()();
  return sub_10051AD84(a1, v2);
}

uint64_t sub_100518EE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  v2 = sub_100D79CA8(a1);
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease();
  v4 = Hasher._finalize()();
  return sub_10051B110(a1, v4);
}

unint64_t sub_100518F54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for CodingUserInfoKey(0);
  v6 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, &protocol witness table for CodingUserInfoKey);
  return sub_10051B574(a1, v6);
}

unint64_t sub_100518FA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10051B8C4(a1, v4, (unint64_t *)&qword_1010EF170, CKRecordID_ptr);
}

unint64_t sub_100518FF0(char a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(qword_100E42E58[a1]);
  v2 = Hasher._finalize()();
  return sub_10051B69C(a1, v2);
}

unint64_t sub_100519054(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return sub_10051B750(a1, v5);
}

unint64_t sub_1005190D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10051B8C4(a1, v4, (unint64_t *)&qword_1011100A0, SPHandle_ptr);
}

unint64_t sub_100519120(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  Hasher._combine(_:)(a1);
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(v8, a2, a3);
  swift_bridgeObjectRelease();
  v6 = Hasher._finalize()();
  return sub_10051B9D4(a1, a2, a3, v6);
}

unint64_t sub_1005191B0(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v1 + 40), a1, 1);
  return sub_10051BAA8(a1, v3);
}

unint64_t sub_1005191EC(uint64_t a1)
{
  return sub_100519930(a1, (void (*)(_QWORD))type metadata accessor for BeaconIdentifier);
}

unint64_t sub_1005191F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10051B8C4(a1, v4, &qword_1010F7800, NSObject_ptr);
}

unint64_t sub_100519244(unsigned __int8 a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(a1 + 1);
  v2 = Hasher._finalize()();
  return sub_10051BAA8(a1, v2);
}

unint64_t sub_1005192AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::Int v11;
  _QWORD v13[9];

  Hasher.init(_seed:)(v13);
  swift_bridgeObjectRetain(a2);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 44;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  String.hash(into:)(v13, a1, a2);
  swift_bridgeObjectRelease();
  v11 = Hasher._finalize()();
  return sub_10051BB48(a1, a2, a3, a4, v11);
}

unint64_t sub_1005193C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for MACAddress(0);
  v6 = sub_100006204((unint64_t *)&unk_101110150, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10001CCA0(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, &qword_10111C3A0, (uint64_t)&protocol conformance descriptor for MACAddress);
}

unint64_t sub_100519468(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  v5 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return sub_10051B750(a1, v5);
}

unint64_t sub_1005194F4(uint64_t a1)
{
  return sub_100519BF0(a1, (void (*)(_QWORD *))sub_1009A31E0, type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(char *, uint64_t))sub_1009A6610);
}

unint64_t sub_100519510(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10051B8C4(a1, v4, &qword_1010EF1F8, IDSService_ptr);
}

unint64_t sub_10051955C(uint64_t a1)
{
  Swift::Int v2;
  __int128 v4[4];

  Hasher.init(_seed:)(v4);
  sub_100AA44BC(v4, a1);
  v2 = Hasher._finalize()();
  return sub_10051BD6C(a1, v2);
}

uint64_t sub_1005195B4(uint64_t a1)
{
  return sub_100519A0C(a1, (void (*)(_QWORD *))sub_1003429A0, (uint64_t (*)(uint64_t, Swift::Int))sub_10051BE3C);
}

unint64_t sub_1005195C8(Swift::UInt a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return sub_10051C2EC(a1, v2);
}

unint64_t sub_10051962C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9);
  v2 = type metadata accessor for UUID(0);
  v3 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v9, v2, v3);
  type metadata accessor for BeaconIdentifier(0);
  dispatch thunk of Hashable.hash(into:)(v9, v2, v3);
  v4 = type metadata accessor for BeaconKeyServiceBuilder.FileKey(0);
  if (*(_BYTE *)(a1 + *(int *)(v4 + 20)))
  {
    if (*(_BYTE *)(a1 + *(int *)(v4 + 20)) == 1)
    {
      v5 = 0xE900000000000079;
      v6 = 0x7261646E6F636553;
    }
    else
    {
      v5 = 0xEF736E6F69746163;
      v6 = 0x6F4C657275636553;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v6 = 0x7972616D697250;
  }
  String.hash(into:)(v9, v6, v5);
  swift_bridgeObjectRelease();
  v7 = Hasher._finalize()();
  return sub_10051C388(a1, v7);
}

uint64_t sub_100519764(uint64_t a1, uint64_t a2)
{
  return sub_100519778(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&Data.hash(into:), sub_10051C604);
}

uint64_t sub_100519778(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Swift::Int v7;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10);
  a3(v10, a1, a2);
  v7 = Hasher._finalize()();
  return a4(a1, a2, v7);
}

uint64_t sub_1005197F0(uint64_t a1, unint64_t a2)
{
  return sub_1005197FC(a1, a2, (uint64_t (*)(uint64_t, unint64_t, Swift::Int))sub_10051CF94);
}

uint64_t sub_1005197FC(uint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t, unint64_t, Swift::Int))
{
  Swift::Int v5;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  sub_10001BBBC(a1, a2);
  Data.hash(into:)(v8, a1, a2);
  sub_10001BC14(a1, a2);
  v5 = Hasher._finalize()();
  return a3(a1, a2, v5);
}

unint64_t sub_100519880(Swift::UInt64 a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return sub_10051D984(a1, v2);
}

unint64_t sub_1005198D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10051B8C4(a1, v4, (unint64_t *)&qword_101111D20, NRDevice_ptr);
}

unint64_t sub_100519924(uint64_t a1)
{
  return sub_100519930(a1, (void (*)(_QWORD))type metadata accessor for ManagedCBPeripheralManager.KeyType);
}

unint64_t sub_100519930(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  v4 = type metadata accessor for UUID(0);
  v5 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v8, v4, v5);
  a2(0);
  dispatch thunk of Hashable.hash(into:)(v8, v4, v5);
  v6 = Hasher._finalize()();
  return sub_10051DA14(a1, v6, (uint64_t (*)(_QWORD))a2);
}

uint64_t sub_1005199F8(uint64_t a1)
{
  return sub_100519A0C(a1, (void (*)(_QWORD *))sub_100C93A0C, (uint64_t (*)(uint64_t, Swift::Int))sub_10051DB40);
}

uint64_t sub_100519A0C(uint64_t a1, void (*a2)(_QWORD *), uint64_t (*a3)(uint64_t, Swift::Int))
{
  Swift::Int v5;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  a2(v8);
  v5 = Hasher._finalize()();
  return a3(a1, v5);
}

unint64_t sub_100519A70(unsigned __int8 a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return sub_10051BAA8(a1, v2);
}

unint64_t sub_100519AC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9);
  v2 = type metadata accessor for UUID(0);
  v3 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v9, v2, v3);
  v4 = type metadata accessor for BeaconKeyManager.FileKey(0);
  if (*(_BYTE *)(a1 + *(int *)(v4 + 20)))
  {
    if (*(_BYTE *)(a1 + *(int *)(v4 + 20)) == 1)
    {
      v5 = 0xE900000000000079;
      v6 = 0x7261646E6F636553;
    }
    else
    {
      v5 = 0xEF736E6F69746163;
      v6 = 0x6F4C657275636553;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v6 = 0x7972616D697250;
  }
  String.hash(into:)(v9, v6, v5);
  swift_bridgeObjectRelease(v5);
  v7 = Hasher._finalize()();
  return sub_10051DFFC(a1, v7);
}

unint64_t sub_100519BD4(uint64_t a1)
{
  return sub_100519BF0(a1, (void (*)(_QWORD *))sub_100C70898, type metadata accessor for StableIdentifier, (uint64_t (*)(char *, uint64_t))sub_100C72B64);
}

unint64_t sub_100519BF0(uint64_t a1, void (*a2)(_QWORD *), uint64_t (*a3)(_QWORD), uint64_t (*a4)(char *, uint64_t))
{
  Swift::Int v8;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10);
  a2(v10);
  v8 = Hasher._finalize()();
  return sub_10051E25C(a1, v8, a3, a4);
}

unint64_t sub_100519C70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = sub_10001A9A8(&qword_1010EF7C0);
  v6 = sub_10051FA34((unint64_t *)&qword_1010EF1B0, (const char *)&protocol conformance descriptor for Identifier<A>);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10051E368(a1, v7);
}

unint64_t sub_100519CD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10051B8C4(a1, v4, (unint64_t *)&qword_1011074C0, CBUUID_ptr);
}

unint64_t sub_100519D24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10051B8C4(a1, v4, (unint64_t *)&unk_10110FFC0, CKRecordZoneID_ptr);
}

unint64_t sub_100519D70(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  Hasher._combine(_:)(*a1);
  type metadata accessor for ShareAttemptTracker.AttemptKey(0);
  v2 = type metadata accessor for UUID(0);
  v3 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v6, v2, v3);
  v4 = Hasher._finalize()();
  return sub_10051E4A4(a1, v4);
}

uint64_t sub_100519E10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_10051A0B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10051A190(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v11;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    if ((a1 & 1) != 0)
      v6 = 0xD000000000000014;
    else
      v6 = 0x6E776F6E6B6E75;
    if ((a1 & 1) != 0)
      v7 = 0x8000000100EC5310;
    else
      v7 = 0xE700000000000000;
    while (1)
    {
      v8 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0xD000000000000014 : 0x6E776F6E6B6E75;
      v9 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0x8000000100EC5310 : 0xE700000000000000;
      if (v8 == v6 && v9 == v7)
        break;
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v6, v7, 0);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      if ((v11 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n(v7, 2);
  }
  return v4;
}

uint64_t sub_10051A2D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X8 }
  return a3 & ~v4;
}

unint64_t sub_10051ACC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_10010F9DC(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_1002EAB4C((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_10051AD84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

uint64_t sub_10051B110(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_10051B574(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  v17 = a1;
  v5 = type metadata accessor for CodingUserInfoKey(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v17, v5, &protocol witness table for CodingUserInfoKey);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_10051B69C(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = qword_100E42E58[a1];
    v8 = *(_QWORD *)(v2 + 48);
    if (qword_100E42E58[*(char *)(v8 + result)] != v7)
    {
      v9 = ~v5;
      for (result = (result + 1) & v9;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v9)
      {
        if (qword_100E42E58[*(char *)(v8 + result)] == v7)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_10051B750(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_10051B8C4(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  id v9;
  char v10;
  uint64_t v11;
  id v12;
  char v13;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  i = a2 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_10000F4A0(0, a3, a4);
    v9 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * i);
    v10 = static NSObject.== infix(_:_:)(v9, a1);

    if ((v10 & 1) == 0)
    {
      v11 = ~v6;
      for (i = (i + 1) & v11; ((*(_QWORD *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v11)
      {
        v12 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * i);
        v13 = static NSObject.== infix(_:_:)(v12, a1);

        if ((v13 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_10051B9D4(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    v10 = a1;
    v11 = ~v6;
    v12 = *(_QWORD *)(v4 + 48);
    do
    {
      v13 = (unsigned __int8 *)(v12 + 24 * v7);
      if (*v13 == v10)
      {
        v14 = *((_QWORD *)v13 + 1);
        v15 = *((_QWORD *)v13 + 2);
        v16 = v14 == a2 && v15 == a3;
        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a2, a3, 0) & 1) != 0)
          break;
      }
      v7 = (v7 + 1) & v11;
    }
    while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

unint64_t sub_10051BAA8(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_10051BB48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  Swift::String v12;
  void *object;
  Swift::String v14;
  Swift::String v15;
  void *v16;
  Swift::String v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  void *v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v6 = -1 << *(_BYTE *)(v5 + 32);
  v7 = a5 & ~v6;
  v25 = v5 + 64;
  if (((*(_QWORD *)(v5 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    v8 = v5;
    v24 = ~v6;
    while (1)
    {
      v10 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 32 * v7);
      v11 = v10[1];
      v27 = *v10;
      swift_bridgeObjectRetain_n(v11, 2);
      v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v12._object;
      String.append(_:)(v12);
      swift_bridgeObjectRelease(object);
      v14._countAndFlagsBits = 44;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);
      v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v16 = v15._object;
      String.append(_:)(v15);
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRetain(a2);
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v18 = v17._object;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(v18);
      v19._countAndFlagsBits = 44;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v21 = v20._object;
      String.append(_:)(v20);
      swift_bridgeObjectRelease(v21);
      if (v27 == a1 && v11 == a2)
        break;
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v11, a1, a2, 0);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(a2);
      if ((v22 & 1) == 0)
      {
        v7 = (v7 + 1) & v24;
        if (((*(_QWORD *)(v25 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
          continue;
      }
      return v7;
    }
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease_n(v11, 2);
  }
  return v7;
}

unint64_t sub_10051BD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v7;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0
    && (sub_10051E94C(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i), a1) & 1) == 0)
  {
    v7 = ~v4;
    for (i = (i + 1) & v7; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v7)
    {
      if ((sub_10051E94C(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i), a1) & 1) != 0)
        break;
    }
  }
  return i;
}

unint64_t sub_10051BE3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  char *v32;
  int EnumCaseMultiPayload;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char v46;
  void (*v47)(char *, uint64_t);
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v3 = v2;
  v64 = a1;
  v5 = type metadata accessor for UUID(0);
  v60 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v51 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v50 = (char *)&v49 - v8;
  v9 = sub_10001A9A8(&qword_1010F8170);
  __chkstk_darwin(v9);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BeaconSharingSessionContext(0);
  v13 = __chkstk_darwin(v12);
  v14 = __chkstk_darwin(v13);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v49 - v16;
  __chkstk_darwin(v15);
  v22 = (char *)&v49 - v19;
  v23 = -1 << *(_BYTE *)(v3 + 32);
  v24 = a2 & ~v23;
  v63 = v3 + 64;
  if (((*(_QWORD *)(v3 + 64 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
    return v24;
  v53 = (unsigned __int8 *)v21;
  v54 = v20;
  v61 = ~v23;
  v62 = *(_QWORD *)(v18 + 72);
  v55 = v9;
  v56 = v17;
  v57 = v12;
  v58 = v3;
  v52 = v5;
  v59 = (char *)&v49 - v19;
  while (1)
  {
    sub_10005972C(*(_QWORD *)(v3 + 48) + v62 * v24, (uint64_t)v22, type metadata accessor for BeaconSharingSessionContext);
    v32 = &v11[*(int *)(v9 + 48)];
    sub_10005972C((uint64_t)v22, (uint64_t)v11, type metadata accessor for BeaconSharingSessionContext);
    sub_10005972C(v64, (uint64_t)v32, type metadata accessor for BeaconSharingSessionContext);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v12);
    if (!EnumCaseMultiPayload)
    {
      sub_10005972C((uint64_t)v11, (uint64_t)v17, type metadata accessor for BeaconSharingSessionContext);
      if (!swift_getEnumCaseMultiPayload(v32, v12))
      {
        v44 = v60;
        v45 = v50;
        (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v50, v32, v5);
        v46 = static UUID.== infix(_:_:)(v17, v45);
        v47 = *(void (**)(char *, uint64_t))(v44 + 8);
        v47(v45, v5);
        v47(v17, v5);
        v3 = v58;
        if ((v46 & 1) != 0)
          goto LABEL_28;
        goto LABEL_4;
      }
      (*(void (**)(char *, uint64_t))(v60 + 8))(v17, v5);
      goto LABEL_22;
    }
    v34 = v9;
    if (EnumCaseMultiPayload == 1)
      break;
    v41 = v5;
    v42 = v54;
    sub_10005972C((uint64_t)v11, v54, type metadata accessor for BeaconSharingSessionContext);
    if (swift_getEnumCaseMultiPayload(v32, v12) != 2)
    {
      v43 = v42;
      v5 = v41;
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v43, v41);
      goto LABEL_21;
    }
    v25 = v60;
    v26 = v51;
    v27 = v32;
    v28 = v41;
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v51, v27, v41);
    v29 = static UUID.== infix(_:_:)(v42, v26);
    v30 = *(void (**)(char *, uint64_t))(v25 + 8);
    v30(v26, v28);
    v31 = v42;
    v5 = v28;
    v30((char *)v31, v28);
    v3 = v58;
    v22 = v59;
    if ((v29 & 1) != 0)
      goto LABEL_28;
LABEL_4:
    sub_1000126B0((uint64_t)v11, type metadata accessor for BeaconSharingSessionContext);
    v9 = v55;
    v17 = v56;
    v12 = v57;
LABEL_5:
    sub_1000126B0((uint64_t)v22, type metadata accessor for BeaconSharingSessionContext);
    v24 = (v24 + 1) & v61;
    if (((*(_QWORD *)(v63 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
      return v24;
  }
  v35 = v53;
  sub_10005972C((uint64_t)v11, (uint64_t)v53, type metadata accessor for BeaconSharingSessionContext);
  v37 = *((_QWORD *)v35 + 1);
  v36 = *((_QWORD *)v35 + 2);
  if (swift_getEnumCaseMultiPayload(v32, v12) != 1)
  {
    swift_bridgeObjectRelease();
    v12 = v57;
    v3 = v58;
    v5 = v52;
    v17 = v56;
LABEL_21:
    v9 = v34;
    v22 = v59;
LABEL_22:
    sub_100004048((uint64_t)v11, &qword_1010F8170);
    goto LABEL_5;
  }
  v22 = v59;
  if (*v35 != *v32)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = v58;
    v5 = v52;
    goto LABEL_4;
  }
  v38 = *((_QWORD *)v32 + 1);
  if (v37 != v38 || v36 != *((_QWORD *)v32 + 2))
  {
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v36, v38, *((_QWORD *)v32 + 2), 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = v58;
    v5 = v52;
    if ((v40 & 1) != 0)
      goto LABEL_28;
    goto LABEL_4;
  }
  swift_bridgeObjectRelease_n(v36, 2);
LABEL_28:
  sub_1000126B0((uint64_t)v11, type metadata accessor for BeaconSharingSessionContext);
  sub_1000126B0((uint64_t)v22, type metadata accessor for BeaconSharingSessionContext);
  return v24;
}

unint64_t sub_10051C2EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_10051C388(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = type metadata accessor for BeaconKeyServiceBuilder.FileKey(0);
  __chkstk_darwin(v25);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v2 + 64;
  v9 = -1 << *(_BYTE *)(v2 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
    return v10;
  v11 = ~v9;
  v12 = *(_QWORD *)(v5 + 72);
  v23 = v2 + 64;
  v24 = v2;
  while (1)
  {
    sub_10005972C(*(_QWORD *)(v2 + 48) + v12 * v10, (uint64_t)v7, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
    if ((static UUID.== infix(_:_:)(v7, a1) & 1) == 0)
      goto LABEL_4;
    v14 = type metadata accessor for BeaconIdentifier(0);
    if ((static UUID.== infix(_:_:)(&v7[*(int *)(v14 + 20)], a1 + *(int *)(v14 + 20)) & 1) == 0)
      goto LABEL_4;
    v15 = *(int *)(v25 + 20);
    if (v7[v15])
      break;
    v17 = 0xE700000000000000;
    v16 = 0x7972616D697250;
    v18 = *(unsigned __int8 *)(a1 + v15);
    if (v18)
      goto LABEL_12;
LABEL_16:
    v20 = 0xE700000000000000;
    v19 = 0x7972616D697250;
    if (v16 == 0x7972616D697250)
      goto LABEL_19;
LABEL_3:
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v19, v20, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = v23;
    v2 = v24;
    if ((v13 & 1) != 0)
      goto LABEL_21;
LABEL_4:
    sub_1000126B0((uint64_t)v7, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
    v10 = (v10 + 1) & v11;
    if (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      return v10;
  }
  if (v7[v15] == 1)
  {
    v16 = 0x7261646E6F636553;
    v17 = 0xE900000000000079;
    v18 = *(unsigned __int8 *)(a1 + v15);
    if (v18)
      goto LABEL_12;
    goto LABEL_16;
  }
  v16 = 0x6F4C657275636553;
  v17 = 0xEF736E6F69746163;
  v18 = *(unsigned __int8 *)(a1 + v15);
  if (!v18)
    goto LABEL_16;
LABEL_12:
  if (v18 == 1)
  {
    v19 = 0x7261646E6F636553;
    v20 = 0xE900000000000079;
    if (v16 == 0x7261646E6F636553)
      goto LABEL_19;
    goto LABEL_3;
  }
  v19 = 0x6F4C657275636553;
  v20 = 0xEF736E6F69746163;
  if (v16 != 0x6F4C657275636553)
    goto LABEL_3;
LABEL_19:
  if (v17 != v20)
    goto LABEL_3;
  swift_bridgeObjectRelease_n(v17, 2);
LABEL_21:
  sub_1000126B0((uint64_t)v7, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
  return v10;
}

uint64_t sub_10051C604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X8 }
  return a3 & ~v4;
}

uint64_t sub_10051CF94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X8 }
  return a3 & ~v4;
}

unint64_t sub_10051D984(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) == 0)
    return result;
  v6 = ~v4;
  while (1)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * result);
    if (v7 > a1)
      break;
    v8 = a1 - v7;
    if ((uint64_t)(a1 - v7) < 0)
      goto LABEL_12;
LABEL_7:
    if (v8)
    {
      result = (result + 1) & v6;
      if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
        continue;
    }
    return result;
  }
  if ((uint64_t)(v7 - a1) >= 0)
  {
    v8 = a1 - v7;
    goto LABEL_7;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10051DA14(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = a3(0);
  __chkstk_darwin(v7);
  v10 = (char *)&v16 - v9;
  v11 = -1 << *(_BYTE *)(v3 + 32);
  v12 = a2 & ~v11;
  if (((*(_QWORD *)(v3 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v11;
    v14 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      sub_10005972C(*(_QWORD *)(v3 + 48) + v14 * v12, (uint64_t)v10, a3);
      if ((static UUID.== infix(_:_:)(v10, a1) & 1) != 0
        && (static UUID.== infix(_:_:)(&v10[*(int *)(v7 + 20)], a1 + *(int *)(v7 + 20)) & 1) != 0)
      {
        break;
      }
      sub_1000126B0((uint64_t)v10, a3);
      v12 = (v12 + 1) & v13;
      if (((*(_QWORD *)(v3 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        return v12;
    }
    sub_1000126B0((uint64_t)v10, a3);
  }
  return v12;
}

unint64_t sub_10051DB40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  int *v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v59 = a1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v55 = v4;
  v56 = v5;
  __chkstk_darwin(v4);
  v48 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  __chkstk_darwin(v54);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ED860);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v48 - v13;
  v50 = type metadata accessor for ManagedCBPeripheralBeaconInfo(0);
  __chkstk_darwin(v50);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = -1 << *(_BYTE *)(v2 + 32);
  v19 = a2 & ~v18;
  if (((*(_QWORD *)(v2 + 64 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
  {
    v20 = v2 + 64;
    v49 = v12;
    v57 = ~v18;
    v58 = *(_QWORD *)(v15 + 72);
    v21 = type metadata accessor for ManagedCBPeripheralBeaconInfo;
    v51 = v8;
    v52 = v2 + 64;
    v22 = (int *)v50;
    v53 = v2;
    do
    {
      v23 = v21;
      sub_10005972C(*(_QWORD *)(v2 + 48) + v58 * v19, (uint64_t)v17, v21);
      if ((static UUID.== infix(_:_:)(v17, v59) & 1) == 0
        || (static UUID.== infix(_:_:)(&v17[v22[5]], v59 + v22[5]) & 1) == 0)
      {
        goto LABEL_5;
      }
      v24 = v22[6];
      v25 = (uint64_t)v8;
      v26 = (uint64_t)&v17[v24];
      sub_1002A380C(v59 + v24, (uint64_t)v14);
      v27 = v25 + *(int *)(v54 + 48);
      sub_1002A380C(v26, v25);
      sub_1002A380C((uint64_t)v14, v27);
      v28 = v55;
      v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
      if (v29(v25, 1, v55) == 1)
      {
        sub_100004048((uint64_t)v14, &qword_1010ED860);
        v30 = v29(v27, 1, v28);
        v2 = v53;
        if (v30 != 1)
          goto LABEL_4;
        v8 = v51;
        sub_100004048((uint64_t)v51, &qword_1010ED860);
        v20 = v52;
      }
      else
      {
        v31 = (uint64_t)v49;
        sub_1002A380C(v25, (uint64_t)v49);
        if (v29(v27, 1, v28) == 1)
        {
          sub_100004048((uint64_t)v14, &qword_1010ED860);
          (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v31, v28);
          v2 = v53;
          v22 = (int *)v50;
LABEL_4:
          v8 = v51;
          sub_100004048((uint64_t)v51, (uint64_t *)&unk_10110EE90);
          v20 = v52;
          goto LABEL_5;
        }
        v32 = v56;
        v33 = v48;
        (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v48, v27, v28);
        v34 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v35 = dispatch thunk of static Equatable.== infix(_:_:)(v31, v33, v28, v34);
        v36 = *(void (**)(char *, uint64_t))(v32 + 8);
        v36(v33, v28);
        sub_100004048((uint64_t)v14, &qword_1010ED860);
        v36((char *)v31, v28);
        sub_100004048(v25, &qword_1010ED860);
        v8 = (char *)v25;
        v22 = (int *)v50;
        v20 = v52;
        v2 = v53;
        if ((v35 & 1) == 0)
          goto LABEL_5;
      }
      if ((static Date.== infix(_:_:)(&v17[v22[7]], v59 + v22[7]) & 1) != 0)
      {
        if ((v37 = v22[8],
              v38 = *(_QWORD *)&v17[v37],
              v39 = *(_QWORD *)&v17[v37 + 8],
              v40 = (_QWORD *)(v59 + v37),
              v41 = v40[1],
              v38 == *v40)
          && v39 == v41
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, *v40, v41, 0) & 1) != 0)
        {
          if (*(_DWORD *)&v17[v22[9]] == *(_DWORD *)(v59 + v22[9]))
          {
            if ((v42 = v22[10],
                  v43 = *(_QWORD *)&v17[v42],
                  v44 = *(_QWORD *)&v17[v42 + 8],
                  v45 = (_QWORD *)(v59 + v42),
                  v46 = v45[1],
                  v43 == *v45)
              && v44 == v46
              || (_stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, *v45, v46, 0) & 1) != 0)
            {
              if (v17[v22[11]] == *(_BYTE *)(v59 + v22[11]) && v17[v22[12]] == *(_BYTE *)(v59 + v22[12]))
              {
                sub_1000126B0((uint64_t)v17, type metadata accessor for ManagedCBPeripheralBeaconInfo);
                return v19;
              }
            }
          }
        }
      }
LABEL_5:
      v21 = v23;
      sub_1000126B0((uint64_t)v17, v23);
      v19 = (v19 + 1) & v57;
    }
    while (((*(_QWORD *)(v20 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0);
  }
  return v19;
}

unint64_t sub_10051DFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v21 = type metadata accessor for BeaconKeyManager.FileKey(0);
  __chkstk_darwin(v21);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = -1 << *(_BYTE *)(v2 + 32);
  v9 = a2 & ~v8;
  if (((*(_QWORD *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    return v9;
  v10 = ~v8;
  v11 = *(_QWORD *)(v5 + 72);
  v20 = ~v8;
  while (1)
  {
    sub_10005972C(*(_QWORD *)(v2 + 48) + v11 * v9, (uint64_t)v7, type metadata accessor for BeaconKeyManager.FileKey);
    if ((static UUID.== infix(_:_:)(v7, a1) & 1) == 0)
      goto LABEL_4;
    v13 = *(int *)(v21 + 20);
    if (v7[v13])
      break;
    v15 = 0xE700000000000000;
    v14 = 0x7972616D697250;
    v16 = *(unsigned __int8 *)(a1 + v13);
    if (v16)
      goto LABEL_11;
LABEL_15:
    v18 = 0xE700000000000000;
    v17 = 0x7972616D697250;
    if (v14 == 0x7972616D697250)
      goto LABEL_18;
LABEL_3:
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v17, v18, 0);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v18);
    v10 = v20;
    if ((v12 & 1) != 0)
      goto LABEL_20;
LABEL_4:
    sub_1000126B0((uint64_t)v7, type metadata accessor for BeaconKeyManager.FileKey);
    v9 = (v9 + 1) & v10;
    if (((*(_QWORD *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      return v9;
  }
  if (v7[v13] == 1)
  {
    v14 = 0x7261646E6F636553;
    v15 = 0xE900000000000079;
    v16 = *(unsigned __int8 *)(a1 + v13);
    if (v16)
      goto LABEL_11;
    goto LABEL_15;
  }
  v14 = 0x6F4C657275636553;
  v15 = 0xEF736E6F69746163;
  v16 = *(unsigned __int8 *)(a1 + v13);
  if (!v16)
    goto LABEL_15;
LABEL_11:
  if (v16 == 1)
  {
    v17 = 0x7261646E6F636553;
    v18 = 0xE900000000000079;
    if (v14 == 0x7261646E6F636553)
      goto LABEL_18;
    goto LABEL_3;
  }
  v17 = 0x6F4C657275636553;
  v18 = 0xEF736E6F69746163;
  if (v14 != 0x6F4C657275636553)
    goto LABEL_3;
LABEL_18:
  if (v15 != v18)
    goto LABEL_3;
  swift_bridgeObjectRelease_n(v15, 2);
LABEL_20:
  sub_1000126B0((uint64_t)v7, type metadata accessor for BeaconKeyManager.FileKey);
  return v9;
}

unint64_t sub_10051E25C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(char *, uint64_t))
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;

  v9 = a3(0);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - v11;
  v13 = -1 << *(_BYTE *)(v4 + 32);
  v14 = a2 & ~v13;
  if (((*(_QWORD *)(v4 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v15 = ~v13;
    v16 = *(_QWORD *)(v10 + 72);
    do
    {
      sub_10005972C(*(_QWORD *)(v4 + 48) + v16 * v14, (uint64_t)v12, a3);
      v17 = a4(v12, a1);
      sub_1000126B0((uint64_t)v12, a3);
      if ((v17 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
    }
    while (((*(_QWORD *)(v4 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  return v14;
}

unint64_t sub_10051E368(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = sub_10001A9A8(&qword_1010EF7C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_10051FA34(&qword_1010FE9A8, (const char *)&protocol conformance descriptor for Identifier<A>);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_10051E4A4(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = type metadata accessor for ShareAttemptTracker.AttemptKey(0);
  __chkstk_darwin(v5);
  v8 = (unsigned __int8 *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v2 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      sub_10005972C(*(_QWORD *)(v2 + 48) + v12 * v10, (uint64_t)v8, type metadata accessor for ShareAttemptTracker.AttemptKey);
      if (*v8 == *a1 && (static UUID.== infix(_:_:)(&v8[*(int *)(v5 + 20)], &a1[*(int *)(v5 + 20)]) & 1) != 0)
        break;
      sub_1000126B0((uint64_t)v8, type metadata accessor for ShareAttemptTracker.AttemptKey);
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        return v10;
    }
    sub_1000126B0((uint64_t)v8, type metadata accessor for ShareAttemptTracker.AttemptKey);
  }
  return v10;
}

uint64_t sub_10051E5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = type metadata accessor for UUID(0);
  v43 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v36 - v9;
  result = __chkstk_darwin(v8);
  v13 = (char *)&v36 - v12;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v14 = 0;
  v15 = *(_QWORD *)(a1 + 56);
  v37 = a1;
  v38 = a1 + 56;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v18 = v17 & v15;
  v39 = (unint64_t)(v16 + 63) >> 6;
  v42 = a2 + 56;
  v36 = (char *)&v36 - v12;
  if (!v18)
    goto LABEL_9;
LABEL_7:
  v40 = (v18 - 1) & v18;
  v41 = v14;
  for (i = __clz(__rbit64(v18)) | (v14 << 6); ; i = __clz(__rbit64(v21)) + (v22 << 6))
  {
    v24 = v43;
    v25 = *(_QWORD *)(v43 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v43 + 16);
    v26(v13, *(_QWORD *)(a1 + 48) + v25 * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v10, v13, v4);
    v27 = *(_QWORD *)(a2 + 40);
    v28 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v29 = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v4, v28);
    v30 = -1 << *(_BYTE *)(a2 + 32);
    v31 = v29 & ~v30;
    if (((*(_QWORD *)(v42 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v4);
      return 0;
    }
    v32 = ~v30;
    while (1)
    {
      v26(v7, *(_QWORD *)(a2 + 48) + v31 * v25, v4);
      v33 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v34 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v10, v4, v33);
      v35 = *(void (**)(char *, uint64_t))(v43 + 8);
      v35(v7, v4);
      if ((v34 & 1) != 0)
        break;
      v31 = (v31 + 1) & v32;
      if (((*(_QWORD *)(v42 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
      {
        v35(v10, v4);
        return 0;
      }
    }
    result = ((uint64_t (*)(char *, uint64_t))v35)(v10, v4);
    v13 = v36;
    a1 = v37;
    v18 = v40;
    v14 = v41;
    if (v40)
      goto LABEL_7;
LABEL_9:
    v20 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v20 >= v39)
      return 1;
    v21 = *(_QWORD *)(v38 + 8 * v20);
    v22 = v14 + 1;
    if (!v21)
    {
      v22 = v20 + 1;
      if (v20 + 1 >= v39)
        return 1;
      v21 = *(_QWORD *)(v38 + 8 * v22);
      if (!v21)
      {
        v22 = v20 + 2;
        if (v20 + 2 >= v39)
          return 1;
        v21 = *(_QWORD *)(v38 + 8 * v22);
        if (!v21)
        {
          v22 = v20 + 3;
          if (v20 + 3 >= v39)
            return 1;
          v21 = *(_QWORD *)(v38 + 8 * v22);
          if (!v21)
            break;
        }
      }
    }
LABEL_24:
    v40 = (v21 - 1) & v21;
    v41 = v22;
  }
  v23 = v20 + 4;
  if (v23 >= v39)
    return 1;
  v21 = *(_QWORD *)(v38 + 8 * v23);
  if (v21)
  {
    v22 = v23;
    goto LABEL_24;
  }
  while (1)
  {
    v22 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v22 >= v39)
      return 1;
    v21 = *(_QWORD *)(v38 + 8 * v22);
    ++v23;
    if (v21)
      goto LABEL_24;
  }
LABEL_35:
  __break(1u);
  return result;
}

Swift::Int sub_10051E94C(Swift::Int result, uint64_t a2)
{
  Swift::Int v3;
  int64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  Swift::UInt v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[9];

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(result + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_25;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return result;
    }
    if (v13 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (v14)
      goto LABEL_24;
    v4 = v13 + 1;
    if (v13 + 1 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v4 = v13 + 2;
    if (v13 + 2 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v4 = v13 + 3;
    if (v13 + 3 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v15 = v13 + 4;
    if (v15 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v4 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_35;
        if (v4 >= v9)
          return 1;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        ++v15;
        if (v14)
          goto LABEL_24;
      }
    }
    v4 = v15;
LABEL_24:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_25:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v12);
    Hasher.init(_seed:)(v21);
    Hasher._combine(_:)(v16);
    result = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = result & ~v17;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    v19 = *(_QWORD *)(a2 + 48);
  }
  while (*(unsigned __int8 *)(v19 + v18) == (_DWORD)v16);
  v20 = ~v17;
  while (1)
  {
    v18 = (v18 + 1) & v20;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    if (*(unsigned __int8 *)(v19 + v18) == (_DWORD)v16)
      goto LABEL_7;
  }
}

void sub_10051EB40(uint64_t a1)
{
  __asm { BR              X13 }
}

void *sub_10051EB9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __b, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  void *result;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;

  v30 = v25;
  LOWORD(v31) = v24;
  BYTE2(v31) = BYTE2(v24);
  HIBYTE(v31) = BYTE3(v24);
  v32 = BYTE4(v24);
  v33 = BYTE5(v24);
  v34 = BYTE6(v24);
  result = memset(&v30, v27, BYTE6(v24));
  v29 = v31 | ((unint64_t)v32 << 32) | ((unint64_t)v33 << 40) | ((unint64_t)v34 << 48);
  *v26 = v30;
  v26[1] = v29;
  return result;
}

void sub_10051ED28(int *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  size_t v12;

  Data.InlineSlice.ensureUniqueReference()();
  v4 = *a1;
  v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v7 = v6;
  v8 = __DataStorage._offset.getter();
  v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v10 = v5 - v4;
  v11 = __DataStorage._length.getter();
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  memset((void *)(v7 + v9), a2, v12);
}

uint64_t _s12searchpartyd10CryptoKeysV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;

  if ((static DateInterval.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for CryptoKeys(0);
  v5 = v4[5];
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (uint64_t *)(a2 + v5);
  v9 = *v8;
  v10 = v8[1];
  if (v7 >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      sub_10001BD08(v6, v7);
      sub_10001BD08(v9, v10);
      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
      v12 = v11;
      sub_10001EF3C(v9, v10);
      sub_10001EF3C(v6, v7);
      if ((v12 & 1) == 0)
        return 0;
      goto LABEL_8;
    }
LABEL_6:
    sub_10001BD08(v6, v7);
    sub_10001BD08(v9, v10);
    sub_10001EF3C(v6, v7);
    sub_10001EF3C(v9, v10);
    return 0;
  }
  if (v10 >> 60 != 15)
    goto LABEL_6;
LABEL_8:
  v13 = v4[6];
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a1 + v13 + 8);
  v16 = (uint64_t *)(a2 + v13);
  v17 = *v16;
  v18 = v16[1];
  sub_10001BBBC(v14, v15);
  sub_10001BBBC(v17, v18);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v14, v15);
  v20 = v19;
  sub_10001BC14(v17, v18);
  sub_10001BC14(v14, v15);
  if ((v20 & 1) != 0)
  {
    v21 = v4[7];
    v22 = *(_QWORD *)(a1 + v21);
    v23 = *(_QWORD *)(a1 + v21 + 8);
    v24 = (uint64_t *)(a2 + v21);
    v25 = *v24;
    v26 = v24[1];
    sub_10001BBBC(v22, v23);
    sub_10001BBBC(v25, v26);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v22, v23);
    v28 = v27;
    sub_10001BC14(v25, v26);
    sub_10001BC14(v22, v23);
    if ((v28 & 1) != 0)
    {
      v29 = v4[8];
      v30 = *(_QWORD *)(a1 + v29);
      v31 = *(_QWORD *)(a1 + v29 + 8);
      v32 = (uint64_t *)(a2 + v29);
      v33 = *v32;
      v34 = v32[1];
      sub_10001BBBC(v30, v31);
      sub_10001BBBC(v33, v34);
      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v30, v31);
      v36 = v35;
      sub_10001BC14(v33, v34);
      sub_10001BC14(v30, v31);
      if ((v36 & 1) != 0)
      {
        v37 = v4[9];
        v38 = a1 + v37;
        v39 = *(_QWORD *)(a1 + v37);
        v40 = *(_QWORD *)(v38 + 8);
        v41 = (uint64_t *)(a2 + v37);
        v42 = *v41;
        v43 = v41[1];
        sub_10001BBBC(v39, v40);
        sub_10001BBBC(v42, v43);
        _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v39, v40);
        v45 = v44;
        sub_10001BC14(v42, v43);
        sub_10001BC14(v39, v40);
        return v45 & 1;
      }
    }
  }
  return 0;
}

unint64_t sub_10051F038()
{
  unint64_t result;

  result = qword_1010FE8D8;
  if (!qword_1010FE8D8)
  {
    result = swift_getWitnessTable("͝#", &type metadata for CryptoKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE8D8);
  }
  return result;
}

uint64_t sub_10051F07C()
{
  return sub_100006204(&qword_1010FE8E8, type metadata accessor for CryptoKeys, (uint64_t)&protocol conformance descriptor for CryptoKeys);
}

uint64_t *initializeBufferWithCopyOfBuffer for CryptoKeys(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for DateInterval(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *(_QWORD *)v10;
      sub_10001BBBC(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
    v14 = a3[6];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = *v16;
    v18 = v16[1];
    sub_10001BBBC(*v16, v18);
    *v15 = v17;
    v15[1] = v18;
    v19 = a3[7];
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = *v21;
    v23 = v21[1];
    sub_10001BBBC(*v21, v23);
    *v20 = v22;
    v20[1] = v23;
    v24 = a3[8];
    v25 = (uint64_t *)((char *)a1 + v24);
    v26 = (uint64_t *)((char *)a2 + v24);
    v27 = *v26;
    v28 = v26[1];
    sub_10001BBBC(*v26, v28);
    *v25 = v27;
    v25[1] = v28;
    v29 = a3[9];
    v30 = (uint64_t *)((char *)a1 + v29);
    v31 = (uint64_t *)((char *)a2 + v29);
    v32 = *v31;
    v33 = v31[1];
    sub_10001BBBC(*v31, v33);
    *v30 = v32;
    v30[1] = v33;
  }
  return a1;
}

uint64_t destroy for CryptoKeys(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;

  v4 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (uint64_t *)(a1 + a2[5]);
  v6 = v5[1];
  if (v6 >> 60 != 15)
    sub_10001BC14(*v5, v6);
  sub_10001BC14(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8));
  sub_10001BC14(*(_QWORD *)(a1 + a2[7]), *(_QWORD *)(a1 + a2[7] + 8));
  sub_10001BC14(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8));
  return sub_10001BC14(*(_QWORD *)(a1 + a2[9]), *(_QWORD *)(a1 + a2[9] + 8));
}

uint64_t initializeWithCopy for CryptoKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;

  v6 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_10001BBBC(*v9, v9[1]);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  v12 = a3[6];
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v15 = *v14;
  v16 = v14[1];
  sub_10001BBBC(*v14, v16);
  *v13 = v15;
  v13[1] = v16;
  v17 = a3[7];
  v18 = (uint64_t *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v20 = *v19;
  v21 = v19[1];
  sub_10001BBBC(*v19, v21);
  *v18 = v20;
  v18[1] = v21;
  v22 = a3[8];
  v23 = (uint64_t *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v25 = *v24;
  v26 = v24[1];
  sub_10001BBBC(*v24, v26);
  *v23 = v25;
  v23[1] = v26;
  v27 = a3[9];
  v28 = (uint64_t *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v30 = *v29;
  v31 = v29[1];
  sub_10001BBBC(*v29, v31);
  *v28 = v30;
  v28[1] = v31;
  return a1;
}

uint64_t assignWithCopy for CryptoKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v6 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      v12 = *v9;
      sub_10001BBBC(v12, v10);
      v13 = *v8;
      v14 = v8[1];
      *v8 = v12;
      v8[1] = v10;
      sub_10001BC14(v13, v14);
      goto LABEL_8;
    }
    sub_1002EEEE0((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  v11 = *v9;
  sub_10001BBBC(v11, v10);
  *v8 = v11;
  v8[1] = v10;
LABEL_8:
  v15 = a3[6];
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  v19 = v17[1];
  sub_10001BBBC(*v17, v19);
  v20 = *v16;
  v21 = v16[1];
  *v16 = v18;
  v16[1] = v19;
  sub_10001BC14(v20, v21);
  v22 = a3[7];
  v23 = (uint64_t *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v25 = *v24;
  v26 = v24[1];
  sub_10001BBBC(*v24, v26);
  v27 = *v23;
  v28 = v23[1];
  *v23 = v25;
  v23[1] = v26;
  sub_10001BC14(v27, v28);
  v29 = a3[8];
  v30 = (uint64_t *)(a1 + v29);
  v31 = (uint64_t *)(a2 + v29);
  v32 = *v31;
  v33 = v31[1];
  sub_10001BBBC(*v31, v33);
  v34 = *v30;
  v35 = v30[1];
  *v30 = v32;
  v30[1] = v33;
  sub_10001BC14(v34, v35);
  v36 = a3[9];
  v37 = (uint64_t *)(a1 + v36);
  v38 = (uint64_t *)(a2 + v36);
  v39 = *v38;
  v40 = v38[1];
  sub_10001BBBC(*v38, v40);
  v41 = *v37;
  v42 = v37[1];
  *v37 = v39;
  v37[1] = v40;
  sub_10001BC14(v41, v42);
  return a1;
}

uint64_t initializeWithTake for CryptoKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for CryptoKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v6 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      v12 = *v8;
      *v8 = *v9;
      v8[1] = v11;
      sub_10001BC14(v12, v10);
      goto LABEL_6;
    }
    sub_1002EEEE0((uint64_t)v8);
  }
  *(_OWORD *)v8 = *(_OWORD *)v9;
LABEL_6:
  v13 = a3[6];
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a1 + v13 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  sub_10001BC14(v14, v15);
  v16 = a3[7];
  v17 = *(_QWORD *)(a1 + v16);
  v18 = *(_QWORD *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  sub_10001BC14(v17, v18);
  v19 = a3[8];
  v20 = *(_QWORD *)(a1 + v19);
  v21 = *(_QWORD *)(a1 + v19 + 8);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  sub_10001BC14(v20, v21);
  v22 = a3[9];
  v23 = *(_QWORD *)(a1 + v22);
  v24 = *(_QWORD *)(a1 + v22 + 8);
  *(_OWORD *)(a1 + v22) = *(_OWORD *)(a2 + v22);
  sub_10001BC14(v23, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CryptoKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10051F6A4);
}

uint64_t sub_10051F6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v6 = type metadata accessor for DateInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) >> 60;
  if (((4 * (_DWORD)v9) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CryptoKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10051F740);
}

uint64_t sub_10051F740(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = type metadata accessor for DateInterval(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 24));
  *v10 = 0;
  v10[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  return result;
}

uint64_t sub_10051F7C8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for DateInterval(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E42CA8;
    v4[2] = &unk_100E42CC0;
    v4[3] = &unk_100E42CC0;
    v4[4] = &unk_100E42CC0;
    v4[5] = &unk_100E42CC0;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CryptoKeys.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_10051F894 + 4 * byte_100E42BD1[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_10051F8C8 + 4 * byte_100E42BCC[v4]))();
}

uint64_t sub_10051F8C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10051F8D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10051F8D8);
  return result;
}

uint64_t sub_10051F8E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10051F8ECLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_10051F8F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10051F8F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CryptoKeys.CodingKeys()
{
  return &type metadata for CryptoKeys.CodingKeys;
}

unint64_t sub_10051F918()
{
  unint64_t result;

  result = qword_1010FE990;
  if (!qword_1010FE990)
  {
    result = swift_getWitnessTable(byte_100E42DAC, &type metadata for CryptoKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE990);
  }
  return result;
}

unint64_t sub_10051F960()
{
  unint64_t result;

  result = qword_1010FE998;
  if (!qword_1010FE998)
  {
    result = swift_getWitnessTable(asc_100E42CE4, &type metadata for CryptoKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE998);
  }
  return result;
}

unint64_t sub_10051F9A8()
{
  unint64_t result;

  result = qword_1010FE9A0;
  if (!qword_1010FE9A0)
  {
    result = swift_getWitnessTable(aE_28, &type metadata for CryptoKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FE9A0);
  }
  return result;
}

unint64_t sub_10051F9EC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104AA88, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xC)
    return 12;
  else
    return v3;
}

uint64_t sub_10051FA34(unint64_t *a1, const char *a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_10001F784(&qword_1010EF7C0);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_10051FA78(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_10051FAD0()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0, 0x8000000100EC2A00);
  swift_bridgeObjectRelease(0x8000000100EC2A00);
  return Hasher._finalize()();
}

Swift::Int sub_10051FB8C(char a1)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  if (a1)
  {
    if (a1 == 1)
      v2 = 0xD000000000000036;
    else
      v2 = 0xD000000000000035;
    if (a1 == 1)
      v3 = 0x8000000100EC2BE0;
    else
      v3 = 0x8000000100EC2C20;
  }
  else
  {
    v2 = 0xD000000000000037;
    v3 = 0x8000000100EC2BA0;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_10051FC2C(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_10051FC88()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1818322280, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

void sub_10051FCFC(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_10051FD58()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 7, 0x8000000100EC3370);
  swift_bridgeObjectRelease(0x8000000100EC3370);
  return Hasher._finalize()();
}

Swift::Int sub_10051FDFC(char a1)
{
  unint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  if (a1)
  {
    if (a1 == 1)
      v2 = 0x8000000100EC3A10;
    else
      v2 = 0x8000000100EC3A30;
  }
  else
  {
    v2 = 0x8000000100EC39F0;
  }
  String.hash(into:)(v4, 0xD000000000000010, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

void sub_10051FE94(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_10051FEE0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6953726576726573, 0xEA00000000006E67);
  swift_bridgeObjectRelease(0xEA00000000006E67);
  return Hasher._finalize()();
}

Swift::Int sub_10051FF88(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_10088F27C(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_100545370(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_10051FFF0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100547274(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t SPSecureLocationSubscriptionMode.init(from:)(_QWORD *a1)
{
  return sub_100547274(a1);
}

uint64_t sub_10052002C(_QWORD *a1)
{
  uint64_t *v1;

  return SPSecureLocationSubscriptionMode.encode(to:)(a1, *v1);
}

uint64_t SPSecureLocationSubscriptionMode.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v10, v3, v4);
  v5 = 0xE900000000000065;
  v6 = 0x76697463616F7270;
  switch(a2)
  {
    case 0:
      break;
    case 1:
      v5 = 0xE700000000000000;
      v6 = 0x776F6C6C616873;
      break;
    case 2:
      v5 = 0xE400000000000000;
      v6 = 1702259052;
      break;
    case 3:
      v5 = 0xE500000000000000;
      v6 = 0x72656E776FLL;
      break;
    case 4:
      v5 = 0xEE00657669746361;
      v6 = 0x6F725072656E776FLL;
      break;
    case 5:
      v5 = 0x8000000100ED9D40;
      v6 = 0xD000000000000013;
      break;
    default:
      v5 = 0xE700000000000000;
      v6 = 0x6E776F6E6B6E75;
      break;
  }
  v7 = v11;
  v8 = v12;
  sub_10009F5D0((uint64_t)v10, v11);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v6, v5, v7, v8);
  swift_bridgeObjectRelease();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v10);
}

uint64_t sub_1005201AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1010FE9B0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1010FE9B0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7A18);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_10052023C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t (*v65)(char *);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  _QWORD *v80;

  v6 = (_QWORD *)v5;
  v70 = a5;
  v71 = a4;
  v68 = a1;
  v69 = a3;
  v67 = a2;
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v14 = *(_QWORD *)(v13 - 8);
  v75 = v13;
  __chkstk_darwin(v13);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_QWORD *)(v5 + 104) = _swiftEmptyArrayStorage;
  v76 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  v78 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v65 = *(uint64_t (**)(char *))(v14 + 104);
  v17 = v65(v16);
  static DispatchQoS.unspecified.getter(v17);
  v80 = _swiftEmptyArrayStorage;
  v18 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v74 = v18;
  v19 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v79 = v19;
  v73 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  v77 = v7;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v80, v19, v73, v7, v18);
  v20 = v12;
  v21 = v12;
  v22 = v9;
  v72 = v16;
  *(_QWORD *)(v5 + 128) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003CLL, 0x8000000100EDA9B0, v20, v9, v16, 0);
  v23 = (void *)SPSecureLocationsOnDemandPublishRequest;
  v66 = type metadata accessor for DarwinNotificationHelper(0);
  swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
  *(_QWORD *)(v5 + 136) = DarwinNotificationHelper.init(notificationName:rateLimit:)(v23, 0.0);
  v24 = v78;
  v25 = v75;
  v26 = (uint64_t (*)(char *, uint64_t, uint64_t))v65;
  v27 = ((uint64_t (*)(char *, _QWORD, uint64_t))v65)(v16, v78, v75);
  static DispatchQoS.unspecified.getter(v27);
  v80 = _swiftEmptyArrayStorage;
  v29 = v73;
  v28 = v74;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v80, v79, v73, v77, v74);
  v30 = v9;
  v31 = v72;
  *(_QWORD *)(v5 + 144) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000036, 0x8000000100EDA9F0, v21, v30, v72, 0);
  *(_QWORD *)(v5 + 152) = 0;
  *(_QWORD *)(v5 + 160) = 0;
  *(_QWORD *)(v5 + 168) = 0;
  v32 = v26(v31, v24, v25);
  static DispatchQoS.unspecified.getter(v32);
  v80 = _swiftEmptyArrayStorage;
  v33 = v79;
  v34 = v29;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v80, v79, v29, v77, v28);
  *(_QWORD *)(v5 + 176) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000038, 0x8000000100EDAA30, v21, v22, v31, 0);
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_QWORD *)(v5 + 280) = 0;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  v35 = v75;
  v36 = v26(v31, v78, v75);
  static DispatchQoS.unspecified.getter(v36);
  v80 = _swiftEmptyArrayStorage;
  v37 = v33;
  v38 = v77;
  v39 = v74;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v80, v37, v34, v77, v74);
  v40 = v72;
  *(_QWORD *)(v5 + 288) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003FLL, 0x8000000100EDAA70, v21, v22, v72, 0);
  v41 = v26(v40, v78, v35);
  static DispatchQoS.unspecified.getter(v41);
  v80 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v80, v79, v73, v38, v39);
  *(_QWORD *)(v5 + 296) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002ELL, 0x8000000100EDAAB0, v21, v22, v40, 0);
  *(_QWORD *)(v5 + 304) = _swiftEmptyDictionarySingleton;
  v42 = type metadata accessor for DeviceIdentityUtility(0);
  v43 = swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  swift_defaultActor_initialize(v43);
  v44 = v43 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  v45 = type metadata accessor for Date(0);
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56);
  v46(v44, 1, 1, v45);
  *(_QWORD *)(v43 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(_QWORD *)(v43 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v43 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 2;
  v6[39] = v43;
  v47 = swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  swift_defaultActor_initialize(v47);
  v48 = v67;
  v49 = v45;
  v50 = v69;
  v46(v47 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate, 1, 1, v49);
  v51 = v68;
  *(_QWORD *)(v47 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(_QWORD *)(v47 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  v52 = v70;
  v53 = v71;
  *(_BYTE *)(v47 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 0;
  v6[40] = v47;
  v54 = (void *)SPSecureLocationsStewiePublishRequest;
  swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
  v6[42] = DarwinNotificationHelper.init(notificationName:rateLimit:)(v54, 0.0);
  v6[43] = 0;
  v6[2] = v51;
  v6[3] = v48;
  v6[4] = v50;
  v6[5] = v53;
  v6[6] = v52;
  v55 = objc_allocWithZone((Class)type metadata accessor for SecureLocationsStewieManager(0));
  swift_retain_n(v51, 2);
  swift_retain_n(v48, 2);
  swift_retain_n(v53, 2);
  swift_retain();
  swift_retain();
  v6[41] = sub_100BFAEAC(v51, v53, v48);
  v56 = swift_allocObject(&unk_10107DD08, 24, 7);
  swift_weakInit(v56 + 16, v6);
  v57 = *(_QWORD *)(v48 + 16);
  v58 = *(_QWORD *)(v48 + 24);
  *(_QWORD *)(v48 + 16) = sub_100555A18;
  *(_QWORD *)(v48 + 24) = v56;
  sub_10001D8A8(v57, v58);
  sub_100520BA8();
  sub_100521404();
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v59 = type metadata accessor for Logger(0);
  v60 = sub_10001A9E8(v59, (uint64_t)qword_1011B7A18);
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.default.getter(v61);
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v63 = 0;
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "TDW: INIT SECURELOCATIONS v1", v63, 2u);
    swift_slowDealloc(v63, -1, -1);
  }
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  return v6;
}

uint64_t sub_10052098C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14[3];

  v5 = a3 + 16;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain_n(a2, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(32, -1);
    *(_DWORD *)v10 = 141558275;
    v13 = 1752392040;
    v14[0] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, v14, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    swift_bridgeObjectRetain(a2);
    v13 = sub_100016940(a1, a2, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, v14, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "keyDidDistributedCallback: startLocationMonitoring for id: %{private,mask.hash}s with backgroundProactive and forcePublish", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  swift_beginAccess(v5, v14, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    sub_1005479A0(a1, a2, 0xD000000000000013, 0x8000000100ED9D40, 1);
    return swift_release();
  }
  return result;
}

uint64_t sub_100520BA8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010FEEE8);
  __chkstk_darwin(v2);
  v52 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010FEEF0);
  __chkstk_darwin(v4);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride(0);
  v7 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010FEEF8);
  v54 = *(_QWORD *)(v10 - 8);
  v55 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v0[3];
  v14 = *(_QWORD *)(v13 + 40);
  v15 = *(_QWORD *)(v14 + 328);
  v16 = *(_QWORD *)(v14 + 336);
  *(_QWORD *)(v14 + 328) = sub_1005556B8;
  *(_QWORD *)(v14 + 336) = v1;
  swift_retain();
  sub_10001D8A8(v15, v16);
  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  v17 = swift_retain();
  v18 = AnyCurrentValuePublisher.publisher.getter(v17);
  swift_release();
  v58 = v18;
  swift_retain();
  v19 = sub_10001A9A8(&qword_1010F2080);
  v20 = sub_1000193A4(&qword_1010F2088, &qword_1010F2080, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v21 = Publisher<>.sink(receiveValue:)(sub_1005556C0, v1, v19, v20);
  swift_release();
  swift_release();
  v1[7] = v21;
  swift_release();
  v58 = *(_QWORD *)(qword_1011B7A48 + 88);
  swift_retain();
  swift_retain();
  v56 = v19;
  v22 = Publisher<>.sink(receiveValue:)(SharingCircleWildAdvertisementKey.init(key:), v1, v19, v20);
  swift_release();
  swift_release();
  v1[10] = v22;
  swift_release();
  v58 = *(_QWORD *)(qword_1011B7A48 + 104);
  swift_retain();
  swift_retain();
  v23 = Publisher<>.sink(receiveValue:)(SharingCircleWildAdvertisementKey.init(key:), v1, v19, v20);
  swift_release();
  swift_release();
  v1[12] = v23;
  swift_release();
  v24 = swift_retain();
  v25 = AnyCurrentValuePublisher.publisher.getter(v24);
  v51 = v13;
  v26 = v25;
  v27 = swift_release();
  v58 = v26;
  NSRunLoop.SchedulerTimeType.Stride.init(floatLiteral:)(v27, 3.0);
  v28 = v9;
  v29 = v7;
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v31 = v53;
  v30(v6, 1, 1, v53);
  v57 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v32 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  v33 = (uint64_t)v52;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v52, 1, 1, v32);
  v34 = sub_10000F4A0(0, &qword_1010FEF00, NSRunLoop_ptr);
  v35 = sub_1005556C8();
  Publisher.delay<A>(for:tolerance:scheduler:options:)(v28, v6, &v57, v33, v56, v34, v20, v35);
  sub_100004048(v33, &qword_1010FEEE8);

  sub_100004048((uint64_t)v6, &qword_1010FEEF0);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v28, v31);
  swift_release();
  v36 = sub_1000193A4(&qword_1010FEF10, &qword_1010FEEF8, (const char *)&protocol conformance descriptor for Publishers.Delay<A, B>);
  swift_retain();
  v37 = v55;
  v38 = Publisher<>.sink(receiveValue:)(sub_100555720, v1, v55, v36);
  swift_release();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v12, v37);
  v1[8] = v38;
  swift_release();
  v58 = *(_QWORD *)(qword_1011B7A48 + 72);
  swift_retain();
  swift_retain();
  v39 = Publisher<>.sink(receiveValue:)(sub_100555728, v1, v56, v20);
  swift_release();
  swift_release();
  v1[9] = v39;
  swift_release();
  v58 = *(_QWORD *)(v1[2] + 48);
  swift_retain();
  swift_retain();
  v40 = sub_10001A9A8(&qword_1010FEF18);
  v41 = sub_1000193A4(&qword_1010FEF20, &qword_1010FEF18, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v42 = Publisher<>.sink(receiveValue:)(sub_100555730, v1, v40, v41);
  swift_release();
  swift_release();
  v1[11] = v42;
  swift_release();
  v58 = *(_QWORD *)(v51 + 128);
  swift_retain();
  swift_retain();
  v43 = sub_10001A9A8(&qword_1010FEF28);
  v44 = sub_1000193A4(&qword_1010FEF30, &qword_1010FEF28, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v45 = Publisher<>.sink(receiveValue:)(sub_100555738, v1, v43, v44);
  swift_release();
  swift_release();
  v1[20] = v45;
  swift_release();
  v58 = *(_QWORD *)(v1[4] + 304);
  v46 = swift_allocObject(&unk_10107E0C8, 32, 7);
  *(_QWORD *)(v46 + 16) = sub_100555740;
  *(_QWORD *)(v46 + 24) = v1;
  swift_retain();
  swift_retain();
  v47 = sub_10001A9A8(&qword_1010FEF38);
  v48 = sub_1000193A4(&qword_1010FEF40, &qword_1010FEF38, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v49 = Publisher<>.sink(receiveValue:)(sub_100555748, v46, v47, v48);
  swift_release();
  swift_release();
  v1[21] = v49;
  return swift_release();
}

uint64_t sub_100521230()
{
  type metadata accessor for Transaction(0);
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.SubscribeAfterKeysRecv", 68, 2, sub_100555874);
}

uint64_t sub_1005212A4()
{
  char v0;

  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  swift_retain();
  v0 = sub_10000D338();
  swift_release();
  return sub_1005368F4(v0 & 1);
}

void sub_10052131C(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (*a1 == 1)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7A18);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "performKeyroll: requesting republish post keyroll complete delay", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

    sub_10052F540(0);
  }
}

_QWORD *sub_100521404()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint8_t *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  void *v23;
  _QWORD *result;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint8_t *v33;
  _OWORD v34[13];
  uint64_t v35;
  _OWORD v36[13];
  __int128 aBlock;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v1 = v0;
  v2 = sub_1004470AC();
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7A18);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "CheckAndFetchConfig: Checking for config", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  if (v2)
  {
    if (v11)
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "CheckAndFetchConfig: Existing config found. Not fetching from server", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    if (qword_1010EA0A8 != -1)
      swift_once(&qword_1010EA0A8, sub_10098F82C);
    v13 = qword_1011B7A48;
    swift_retain();
    sub_100446994((uint64_t)v36);
    v14 = *(NSObject **)(v13 + 144);
    v15 = swift_allocObject(&unk_10107DFD8, 232, 7);
    v16 = v36[8];
    *(_OWORD *)(v15 + 168) = v36[9];
    v17 = v36[11];
    *(_OWORD *)(v15 + 184) = v36[10];
    *(_OWORD *)(v15 + 200) = v17;
    *(_OWORD *)(v15 + 216) = v36[12];
    v18 = v36[4];
    *(_OWORD *)(v15 + 104) = v36[5];
    v19 = v36[7];
    *(_OWORD *)(v15 + 120) = v36[6];
    *(_OWORD *)(v15 + 136) = v19;
    *(_OWORD *)(v15 + 152) = v16;
    v20 = v36[0];
    *(_OWORD *)(v15 + 40) = v36[1];
    v21 = v36[3];
    *(_OWORD *)(v15 + 56) = v36[2];
    *(_OWORD *)(v15 + 72) = v21;
    *(_OWORD *)(v15 + 88) = v18;
    *(_QWORD *)(v15 + 16) = v13;
    *(_OWORD *)(v15 + 24) = v20;
    v22 = swift_allocObject(&unk_10107E000, 32, 7);
    *(_QWORD *)(v22 + 16) = sub_100555E14;
    *(_QWORD *)(v22 + 24) = v15;
    *(_QWORD *)&v39 = sub_10005CBA4;
    *((_QWORD *)&v39 + 1) = v22;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v38 = sub_10001D8B8;
    *((_QWORD *)&v38 + 1) = &unk_10107E018;
    v23 = _Block_copy(&aBlock);
    swift_retain();
    sub_1004F1D0C(v36);
    swift_retain();
    swift_release();
    dispatch_sync(v14, v23);
    _Block_release(v23);
    LOBYTE(v14) = swift_isEscapingClosureAtFileLocation(v22, "", 105, 553, 32, 1);
    swift_release();
    swift_release();
    sub_1003D09E0(v36);
    result = (_QWORD *)swift_release();
    if ((v14 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v25 = Logger.logObject.getter(result);
      v26 = static os_log_type_t.default.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(12, -1);
        v28 = swift_slowAlloc(32, -1);
        v35 = v28;
        *(_DWORD *)v27 = 136315138;
        v29 = qword_1011B7A48;
        swift_retain();
        OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v29, &type metadata for SecureLocationsConfig);
        swift_release();
        v47 = v34[10];
        v48 = v34[11];
        v49 = v34[12];
        v43 = v34[6];
        v44 = v34[7];
        v45 = v34[8];
        v46 = v34[9];
        v39 = v34[2];
        v40 = v34[3];
        v41 = v34[4];
        v42 = v34[5];
        aBlock = v34[0];
        v38 = v34[1];
        v30 = sub_1004F0080();
        v32 = v31;
        sub_1003D09E0(&aBlock);
        *(_QWORD *)&v34[0] = sub_100016940(v30, v32, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, (char *)v34 + 8, v27 + 4, v27 + 12);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "CheckAndFetchConfig: Existing config %s", v27, 0xCu);
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v27, -1, -1);
      }

      return sub_1005224CC();
    }
  }
  else
  {
    if (v11)
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "CheckAndFetchConfig - we don't have a local copy of config. doing a fetch", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    swift_retain();
    sub_100521DA8((uint64_t)sub_1005555FC, v1);
    return (_QWORD *)swift_release();
  }
  return result;
}

void sub_100521948(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  NSObject *oslog;
  uint64_t aBlock;
  _QWORD v28[5];
  _OWORD v29[13];

  if (!a1)
  {
    if (qword_1010EA098 == -1)
    {
LABEL_7:
      v11 = type metadata accessor for Logger(0);
      v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B7A18);
      oslog = Logger.logObject.getter(v12);
      v13 = static os_log_type_t.default.getter(oslog);
      if (os_log_type_enabled(oslog, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, oslog, v13, "CheckAndFetchConfig - successfully fetched config since we don't have a copy", v14, 2u);
        swift_slowDealloc(v14, -1, -1);
      }

      return;
    }
LABEL_15:
    swift_once(&qword_1010EA098, sub_10098F7D8);
    goto LABEL_7;
  }
  swift_errorRetain(a1);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7A18);
  swift_errorRetain(a1);
  v3 = swift_errorRetain(a1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v29[0] = v7;
    *(_DWORD *)v6 = 136315138;
    aBlock = a1;
    swift_errorRetain(a1);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v9 = String.init<A>(describing:)(&aBlock, v8);
    aBlock = sub_100016940(v9, v10, (uint64_t *)v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v28, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CheckAndFetchConfig - error fetching config %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  v15 = qword_1011B7A48;
  swift_retain();
  sub_100446994((uint64_t)v29);
  v16 = *(NSObject **)(v15 + 144);
  v17 = swift_allocObject(&unk_10107E050, 232, 7);
  v18 = v29[8];
  *(_OWORD *)(v17 + 168) = v29[9];
  v19 = v29[11];
  *(_OWORD *)(v17 + 184) = v29[10];
  *(_OWORD *)(v17 + 200) = v19;
  *(_OWORD *)(v17 + 216) = v29[12];
  v20 = v29[4];
  *(_OWORD *)(v17 + 104) = v29[5];
  v21 = v29[7];
  *(_OWORD *)(v17 + 120) = v29[6];
  *(_OWORD *)(v17 + 136) = v21;
  *(_OWORD *)(v17 + 152) = v18;
  v22 = v29[0];
  *(_OWORD *)(v17 + 40) = v29[1];
  v23 = v29[3];
  *(_OWORD *)(v17 + 56) = v29[2];
  *(_OWORD *)(v17 + 72) = v23;
  *(_OWORD *)(v17 + 88) = v20;
  *(_QWORD *)(v17 + 16) = v15;
  *(_OWORD *)(v17 + 24) = v22;
  v24 = swift_allocObject(&unk_10107E078, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_100555E14;
  *(_QWORD *)(v24 + 24) = v17;
  v28[3] = sub_10005CBA4;
  v28[4] = v24;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v28[0] = 1107296256;
  v28[1] = sub_10001D8B8;
  v28[2] = &unk_10107E090;
  v25 = _Block_copy(&aBlock);
  swift_retain();
  sub_1004F1D0C(v29);
  swift_retain();
  swift_release();
  dispatch_sync(v16, v25);
  _Block_release(v25);
  LOBYTE(v16) = swift_isEscapingClosureAtFileLocation(v24, "", 105, 553, 32, 1);
  swift_release();
  swift_release();
  sub_1003D09E0(v29);
  swift_release();
  swift_errorRelease(a1);
  if ((v16 & 1) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
}

uint64_t sub_100521DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v59[2];
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v65 = a1;
  v3 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v3);
  v63 = (char *)v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v5);
  v7 = (char *)v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SecureLocationsConfigEndpoint(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v59 - v12;
  v14 = enum case for FMNAccountType.searchParty(_:);
  v15 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v13, v14, v15);
  sub_1004EF5B0((uint64_t)&v13[*(int *)(v8 + 20)]);
  v16 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v17 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v7, 1, 1, v17);
  v18 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v7);
  v19 = type metadata accessor for ServerInteractionController(0);
  v20 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  sub_10005972C((uint64_t)v13, (uint64_t)v11, type metadata accessor for SecureLocationsConfigEndpoint);
  v21 = (_QWORD *)sub_10041D880((uint64_t)v11, v18, v20);
  v22 = sub_1004F1130();
  if (v22)
  {
    v25 = (uint64_t)v22;
    v26 = v23;
    v27 = v24;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_10001A9E8(v28, (uint64_t)qword_1011B7A18);
    sub_100555020(v25, v26, v27);
    swift_bridgeObjectRetain(v25);
    v30 = sub_10001BBBC(v26, v27);
    v59[1] = v29;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.debug.getter(v31);
    v33 = os_log_type_enabled(v31, v32);
    v61 = a2;
    v62 = v13;
    v60 = v21;
    if (v33)
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v67 = v35;
      *(_DWORD *)v34 = 136315138;
      v59[0] = v34 + 4;
      swift_bridgeObjectRetain(v25);
      v37 = Dictionary.description.getter(v36, &type metadata for String, &type metadata for String, &protocol witness table for String);
      v39 = v38;
      swift_bridgeObjectRelease();
      v66 = sub_100016940(v37, v39, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v59[0], v34 + 12);
      swift_bridgeObjectRelease();
      sub_100153D94(v25, v26, v27);
      sub_100153D94(v25, v26, v27);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "FetchConfig request headers %s", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      sub_100153D94(v25, v26, v27);
      sub_100153D94(v25, v26, v27);
    }

    swift_bridgeObjectRetain(v25);
    sub_10001BBBC(v26, v27);
    swift_bridgeObjectRetain(v25);
    v45 = sub_10001BBBC(v26, v27);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.debug.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      v67 = v49;
      *(_DWORD *)v48 = 136315138;
      v50 = v63;
      static String.Encoding.utf8.getter(v49);
      v51 = String.init(data:encoding:)(v26, v27, v50);
      if (v52)
      {
        v53 = v52;
      }
      else
      {
        v51 = 7104878;
        v53 = 0xE300000000000000;
      }
      v66 = sub_100016940(v51, v53, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease();
      sub_100153D94(v25, v26, v27);
      sub_100153D94(v25, v26, v27);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "FetchConfig request body %s", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {
      sub_100153D94(v25, v26, v27);
      sub_100153D94(v25, v26, v27);
    }

    v13 = v62;
    swift_bridgeObjectRetain(v25);
    sub_10001BBBC(v26, v27);
    sub_10034D220(v25, v26, v27, 0, v60);
    sub_100153D94(v25, v26, v27);
    v54 = (_QWORD *)swift_allocObject(&unk_10107CD18, 40, 7);
    v55 = v65;
    v54[2] = v64;
    v54[3] = v55;
    v56 = v61;
    v54[4] = v61;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_10055157C, v54);
    swift_release();
    swift_release();
    v57 = swift_allocObject(&unk_10107CD40, 32, 7);
    *(_QWORD *)(v57 + 16) = v55;
    *(_QWORD *)(v57 + 24) = v56;
    swift_retain();
    Future.addFailure(block:)(sub_100551588, v57);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100153D94(v25, v26, v27);
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v40 = type metadata accessor for Logger(0);
    v41 = sub_10001A9E8(v40, (uint64_t)qword_1011B7A18);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.default.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "FetchConfig - failed to create request", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    swift_release();
  }
  return sub_1000126B0((uint64_t)v13, type metadata accessor for SecureLocationsConfigEndpoint);
}

_QWORD *sub_1005224CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  unsigned __int8 v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _QWORD *result;
  id v25;
  NSString v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BYTE *v33;
  uint64_t v34;
  _BYTE *v35;
  uint8_t *v36;
  uint8_t *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void (*v51)(_BYTE *, uint64_t);
  _BYTE *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t (*v59)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  _BYTE v75[4];
  int v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t (*v80)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  _BYTE *v84;
  _BYTE *v85;
  _BYTE *v86;
  _OWORD v87[13];
  _OWORD v88[14];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v75[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __chkstk_darwin(v4);
  v9 = &v75[-v8];
  v10 = __chkstk_darwin(v7);
  v86 = &v75[-v11];
  v12 = __chkstk_darwin(v10);
  v14 = &v75[-v13];
  v15 = __chkstk_darwin(v12);
  v17 = &v75[-v16];
  __chkstk_darwin(v15);
  v19 = &v75[-v18];
  v20 = sub_100546A18();
  v83 = v1;
  v85 = v9;
  if ((v20 & 1) != 0)
  {
    v79 = 0;
LABEL_7:
    v25 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v26 = String._bridgeToObjectiveC()();
    objc_msgSend(v25, "doubleForKey:", v26);
    v28 = v27;

    v82 = v6;
    if (v28 == 0.0)
    {
      sub_100546BCC();
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v29 = type metadata accessor for Logger(0);
      v30 = sub_10001A9E8(v29, (uint64_t)qword_1011B7A18);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.default.getter(v31);
      if (os_log_type_enabled(v31, v32))
      {
        v33 = v14;
        v34 = v3;
        v35 = v19;
        v36 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "CheckAndFetchConfig: nextCheckTime is zero. Fetching now but setting an explicit next check time", v36, 2u);
        v37 = v36;
        v19 = v35;
        v3 = v34;
        v14 = v33;
        swift_slowDealloc(v37, -1, -1);
      }

    }
    Date.init(timeIntervalSince1970:)(v28);
    static Date.trustedNow.getter((uint64_t)v17);
    v38 = v86;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v39 = type metadata accessor for Logger(0);
    v40 = sub_10001A9E8(v39, (uint64_t)qword_1011B7A18);
    v41 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 16);
    v84 = v17;
    v41(v14, v17, v2);
    v80 = (uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v41;
    v42 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v41)(v38, v19, v2);
    v81 = v40;
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.default.getter(v43);
    v45 = v44;
    if (os_log_type_enabled(v43, v44))
    {
      v46 = swift_slowAlloc(22, -1);
      v78 = v19;
      v47 = v46;
      v77 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v88[0] = v77;
      *(_DWORD *)v47 = 136315394;
      v48 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v76 = v45;
      v49 = dispatch thunk of CustomStringConvertible.description.getter(v2, v48);
      *(_QWORD *)&v87[0] = sub_100016940(v49, v50, (uint64_t *)v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v87, (char *)v87 + 8, v47 + 4, v47 + 12);
      swift_bridgeObjectRelease();
      v51 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
      v51(v14, v2);
      *(_WORD *)(v47 + 12) = 2080;
      v52 = v86;
      v53 = dispatch thunk of CustomStringConvertible.description.getter(v2, v48);
      *(_QWORD *)&v87[0] = sub_100016940(v53, v54, (uint64_t *)v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v87, (char *)v87 + 8, v47 + 14, v47 + 22);
      swift_bridgeObjectRelease();
      v51(v52, v2);
      _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v76, "CheckAndFetchConfig: currentTime %s nextCheckDateTime %s", (uint8_t *)v47, 0x16u);
      v55 = v77;
      swift_arrayDestroy(v77, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      v56 = v47;
      v19 = v78;
      swift_slowDealloc(v56, -1, -1);
    }
    else
    {
      v51 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
      v51(v14, v2);
      v51(v38, v2);
    }

    v58 = v84;
    v57 = v85;
    if ((static Date.> infix(_:_:)(v84, v19) & 1) != 0)
    {
      v59 = v80;
      v80(v57, v58, v2);
      v60 = v82;
      v61 = v59(v82, v19, v2);
      v62 = Logger.logObject.getter(v61);
      v63 = static os_log_type_t.default.getter(v62);
      v64 = v63;
      if (os_log_type_enabled(v62, v63))
      {
        v65 = swift_slowAlloc(22, -1);
        v78 = v19;
        v66 = v65;
        v86 = (_BYTE *)swift_slowAlloc(64, -1);
        *(_QWORD *)&v88[0] = v86;
        *(_DWORD *)v66 = 136315394;
        v80 = (uint64_t (*)(_BYTE *, _BYTE *, uint64_t))(v66 + 4);
        v67 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        LODWORD(v81) = v64;
        v68 = dispatch thunk of CustomStringConvertible.description.getter(v2, v67);
        *(_QWORD *)&v87[0] = sub_100016940(v68, v69, (uint64_t *)v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v87, (char *)v87 + 8, v80, v66 + 12);
        swift_bridgeObjectRelease();
        v51(v57, v2);
        *(_WORD *)(v66 + 12) = 2080;
        v70 = v67;
        v58 = v84;
        v71 = dispatch thunk of CustomStringConvertible.description.getter(v2, v70);
        *(_QWORD *)&v87[0] = sub_100016940(v71, v72, (uint64_t *)v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v87, (char *)v87 + 8, v66 + 14, v66 + 22);
        swift_bridgeObjectRelease();
        v51(v60, v2);
        _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v81, "CheckAndFetchConfig: Feature disabled. Fetching config because Current time %s greater than checkTime %s", (uint8_t *)v66, 0x16u);
        v73 = v86;
        swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v73, -1, -1);
        v74 = v66;
        v19 = v78;
        swift_slowDealloc(v74, -1, -1);
      }
      else
      {
        v51(v57, v2);
        v51(v60, v2);
      }

      type metadata accessor for Transaction(0);
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocationsFetchConfig", 56, 2, sub_100555618, v83, &type metadata for () + 1);
    }
    v51(v58, v2);
    return (_QWORD *)((uint64_t (*)(_BYTE *, uint64_t))v51)(v19, v2);
  }
  v84 = v14;
  v21 = v3;
  v22 = v19;
  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  v23 = qword_1011B7A48;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v23, &type metadata for SecureLocationsConfig);
  swift_release();
  v88[10] = v87[10];
  v88[11] = v87[11];
  v88[12] = v87[12];
  v88[6] = v87[6];
  v88[7] = v87[7];
  v88[8] = v87[8];
  v88[9] = v87[9];
  v88[2] = v87[2];
  v88[3] = v87[3];
  v88[4] = v87[4];
  v88[5] = v87[5];
  v88[0] = v87[0];
  v88[1] = v87[1];
  result = sub_1003D09E0(v88);
  if ((BYTE8(v88[0]) & 1) == 0)
  {
    v79 = 0;
    v19 = v22;
    v3 = v21;
    v14 = v84;
    goto LABEL_7;
  }
  return result;
}

void sub_100522C80(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  char *v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  os_log_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  const void *v40;
  id v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  id v50;
  Class isa;
  id v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  id v60;
  NSString v61;
  id v62;
  id v63;
  Class v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  os_log_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  _QWORD *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _OWORD v92[14];

  v76 = a3;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v74 = *(_QWORD *)(v11 - 8);
  v75 = v11;
  __chkstk_darwin(v11);
  v73 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain_n(a1, 2);
  v15 = a2;
  v77 = v14;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    v19 = swift_slowAlloc(38, -1);
    v70 = v18;
    v20 = v19;
    v69 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v92[0] = v69;
    *(_DWORD *)v20 = 134218754;
    *(_QWORD *)&v79 = *(_QWORD *)(a1 + 16);
    v71 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, (char *)&v79 + 8, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2080;
    v72 = v7;
    v67 = v20 + 14;
    v21 = objc_msgSend(v15, "clientApp");
    v68 = v16;
    v22 = v10;
    v23 = v8;
    v24 = v15;
    v25 = v21;
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v28 = v27;

    v15 = v24;
    v8 = v23;
    v10 = v22;
    *(_QWORD *)&v79 = sub_100016940(v26, v28, (uint64_t *)v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, (char *)&v79 + 8, v67, v20 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 22) = 2080;
    swift_bridgeObjectRetain(a1);
    v30 = Array.description.getter(v29, &type metadata for String);
    v32 = v31;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v79 = sub_100016940(v30, v32, (uint64_t *)v92);
    a4 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, (char *)&v79 + 8, v20 + 24, v20 + 32);
    swift_bridgeObjectRelease_n(a1, 2);
    v7 = v72;
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 32) = 1024;
    LODWORD(v79) = v76 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, (char *)&v79 + 4, v20 + 34, v20 + 38);
    v33 = v68;
    _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v70, "SubscribeAndFetch location for %ld IDs for clientApp %s ids %s forceKeyRefresh %{BOOL}d", (uint8_t *)v20, 0x26u);
    v34 = v69;
    swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    v35 = sub_100546A18();
    if ((v35 & 1) != 0)
      goto LABEL_12;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    v35 = sub_100546A18();
    if ((v35 & 1) != 0)
    {
LABEL_12:
      v47 = Logger.logObject.getter(v35);
      v48 = static os_log_type_t.default.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "SubscribeAndFetch: secureLocations feature disabled. Not proceeding with subscribe", v49, 2u);
        swift_slowDealloc(v49, -1, -1);
      }

      objc_msgSend(v15, "subscriptionMode");
      v50 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F1598, SPSecureLocation_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      v52 = objc_msgSend(v50, "initWithExpiryTime:locations:", isa, 15.0);

      type metadata accessor for SecureLocationsError(0);
      v54 = v53;
      *(_QWORD *)&v79 = 6;
      v55 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v56 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
      _BridgedStoredNSError.init(_:userInfo:)(v92, &v79, v55, v54, v56);

      return;
    }
  }
  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  v36 = qword_1011B7A48;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v36, &type metadata for SecureLocationsConfig);
  swift_release();
  v92[10] = v89;
  v92[11] = v90;
  v92[12] = v91;
  v92[6] = v85;
  v92[7] = v86;
  v92[8] = v87;
  v92[9] = v88;
  v92[2] = v81;
  v92[3] = v82;
  v92[4] = v83;
  v92[5] = v84;
  v92[0] = v79;
  v92[1] = v80;
  v35 = sub_1003D09E0(v92);
  if ((BYTE8(v92[0]) & 1) == 0)
    goto LABEL_12;
  if (*(_QWORD *)(a1 + 16))
  {
    v37 = swift_allocObject(&unk_10107D9C0, 64, 7);
    *(_QWORD *)(v37 + 16) = a1;
    *(_QWORD *)(v37 + 24) = a4;
    *(_QWORD *)(v37 + 32) = v15;
    *(_BYTE *)(v37 + 40) = v76 & 1;
    *(_QWORD *)(v37 + 48) = SharingCircleWildAdvertisementKey.init(key:);
    *(_QWORD *)(v37 + 56) = 0;
    *(_QWORD *)&v81 = sub_100553DC0;
    *((_QWORD *)&v81 + 1) = v37;
    *(_QWORD *)&v79 = _NSConcreteStackBlock;
    *((_QWORD *)&v79 + 1) = 1107296256;
    *(_QWORD *)&v80 = sub_100016FB8;
    *((_QWORD *)&v80 + 1) = &unk_10107D9D8;
    v38 = _Block_copy(&v79);
    v39 = a1;
    v40 = v38;
    swift_bridgeObjectRetain(v39);
    v41 = v15;
    v42 = swift_retain();
    v43 = v73;
    static DispatchQoS.unspecified.getter(v42);
    v78 = _swiftEmptyArrayStorage;
    v44 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v45 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v46 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v45, v46, v7, v44);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v43, v10, v40);
    _Block_release(v40);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v43, v75);
    swift_release();
  }
  else
  {
    v57 = Logger.logObject.getter(v35);
    v58 = static os_log_type_t.default.getter(v57);
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "No findMyIds specified for SubscribeAndFetch - not proceeding", v59, 2u);
      swift_slowDealloc(v59, -1, -1);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    v60 = objc_allocWithZone((Class)NSError);
    v61 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v62 = objc_msgSend(v60, "initWithDomain:code:userInfo:", v61, 0, 0);

    objc_msgSend(v15, "subscriptionMode");
    v63 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
    sub_10000F4A0(0, (unint64_t *)&qword_1010F1598, SPSecureLocation_ptr);
    v64 = Array._bridgeToObjectiveC()().super.isa;
    v65 = objc_msgSend(v63, "initWithExpiryTime:locations:", v64, 15.0);

  }
}

void sub_100523494(uint64_t a1, void *a2, int a3, void (*a4)(_QWORD, _QWORD), uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  os_log_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  id v49;
  Class isa;
  id v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  id v60;
  NSString v61;
  id v62;
  id v63;
  Class v64;
  id v65;
  id v66;
  uint64_t v67;
  os_log_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(_QWORD, _QWORD);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  _QWORD *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _OWORD v95[14];

  v6 = v5;
  v79 = a3;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v78 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v77 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v75 = *(_QWORD *)(v13 - 8);
  v76 = v13;
  __chkstk_darwin(v13);
  v74 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain_n(a1, 2);
  v17 = a2;
  v80 = v16;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    v21 = swift_slowAlloc(38, -1);
    v70 = v20;
    v22 = v21;
    v69 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v95[0] = v69;
    *(_DWORD *)v22 = 134218754;
    *(_QWORD *)&v82 = *(_QWORD *)(a1 + 16);
    v71 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, (char *)&v82 + 8, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2080;
    v68 = v18;
    v23 = objc_msgSend(v17, "clientApp");
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v72 = a5;
    v73 = a4;
    v25 = v24;
    v27 = v26;

    *(_QWORD *)&v82 = sub_100016940(v25, v27, (uint64_t *)v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, (char *)&v82 + 8, v22 + 14, v22 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 22) = 2080;
    swift_bridgeObjectRetain(a1);
    v29 = Array.description.getter(v28, &type metadata for String);
    v31 = v30;
    swift_bridgeObjectRelease();
    v32 = v29;
    a5 = v72;
    *(_QWORD *)&v82 = sub_100016940(v32, v31, (uint64_t *)v95);
    v11 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, (char *)&v82 + 8, v22 + 24, v22 + 32);
    swift_bridgeObjectRelease_n(a1, 2);
    a4 = v73;
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 32) = 1024;
    LODWORD(v82) = v79 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, (char *)&v82 + 4, v22 + 34, v22 + 38);
    v33 = v68;
    _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v70, "SubscribeAndFetch location for %ld IDs for clientApp %s ids %s forceKeyRefresh %{BOOL}d", (uint8_t *)v22, 0x26u);
    v34 = v69;
    swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    v35 = sub_100546A18();
    if ((v35 & 1) != 0)
      goto LABEL_12;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    v35 = sub_100546A18();
    if ((v35 & 1) != 0)
    {
LABEL_12:
      v46 = Logger.logObject.getter(v35);
      v47 = static os_log_type_t.default.getter(v46);
      if (os_log_type_enabled(v46, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "SubscribeAndFetch: secureLocations feature disabled. Not proceeding with subscribe", v48, 2u);
        swift_slowDealloc(v48, -1, -1);
      }

      objc_msgSend(v17, "subscriptionMode");
      v49 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F1598, SPSecureLocation_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      v51 = objc_msgSend(v49, "initWithExpiryTime:locations:", isa, 15.0);

      type metadata accessor for SecureLocationsError(0);
      v53 = v52;
      *(_QWORD *)&v82 = 6;
      v54 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v55 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
      _BridgedStoredNSError.init(_:userInfo:)(v95, &v82, v54, v53, v55);
      v56 = *(void **)&v95[0];
      a4(v51, *(_QWORD *)&v95[0]);

      return;
    }
  }
  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  v36 = qword_1011B7A48;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v36, &type metadata for SecureLocationsConfig);
  swift_release();
  v95[10] = v92;
  v95[11] = v93;
  v95[12] = v94;
  v95[6] = v88;
  v95[7] = v89;
  v95[8] = v90;
  v95[9] = v91;
  v95[2] = v84;
  v95[3] = v85;
  v95[4] = v86;
  v95[5] = v87;
  v95[0] = v82;
  v95[1] = v83;
  v35 = sub_1003D09E0(v95);
  if ((BYTE8(v95[0]) & 1) == 0)
    goto LABEL_12;
  if (*(_QWORD *)(a1 + 16))
  {
    v37 = swift_allocObject(&unk_10107DF88, 64, 7);
    *(_QWORD *)(v37 + 16) = a1;
    *(_QWORD *)(v37 + 24) = v6;
    *(_QWORD *)(v37 + 32) = v17;
    *(_BYTE *)(v37 + 40) = v79 & 1;
    *(_QWORD *)(v37 + 48) = a4;
    *(_QWORD *)(v37 + 56) = a5;
    *(_QWORD *)&v84 = sub_100553DC0;
    *((_QWORD *)&v84 + 1) = v37;
    *(_QWORD *)&v82 = _NSConcreteStackBlock;
    *((_QWORD *)&v82 + 1) = 1107296256;
    *(_QWORD *)&v83 = sub_100016FB8;
    *((_QWORD *)&v83 + 1) = &unk_10107DFA0;
    v38 = _Block_copy(&v82);
    swift_bridgeObjectRetain(a1);
    v39 = v17;
    swift_retain();
    v40 = swift_retain();
    v41 = v74;
    static DispatchQoS.unspecified.getter(v40);
    v81 = _swiftEmptyArrayStorage;
    v42 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v43 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v44 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v45 = v77;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v81, v43, v44, v11, v42);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v41, v45, v38);
    _Block_release(v38);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v45, v11);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v41, v76);
    swift_release();
  }
  else
  {
    v57 = Logger.logObject.getter(v35);
    v58 = static os_log_type_t.default.getter(v57);
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "No findMyIds specified for SubscribeAndFetch - not proceeding", v59, 2u);
      swift_slowDealloc(v59, -1, -1);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    v60 = objc_allocWithZone((Class)NSError);
    v61 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v62 = objc_msgSend(v60, "initWithDomain:code:userInfo:", v61, 0, 0);

    objc_msgSend(v17, "subscriptionMode");
    v63 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
    sub_10000F4A0(0, (unint64_t *)&qword_1010F1598, SPSecureLocation_ptr);
    v64 = Array._bridgeToObjectiveC()().super.isa;
    v65 = objc_msgSend(v63, "initWithExpiryTime:locations:", v64, 15.0);

    v66 = v62;
    a4(v65, v62);

  }
}

void sub_100523CE0(uint64_t a1, uint64_t a2, void *a3, char a4, void (*a5)(id, uint64_t), uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  __n128 v34;
  unint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  id v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  NSObject *v132;
  os_log_type_t v133;
  uint8_t *v134;
  void *v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  NSObject *v145;
  os_log_type_t v146;
  uint8_t *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  NSObject *v153;
  os_log_type_t v154;
  uint8_t *v155;
  uint64_t MyAppURLSessionFactory;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  id v163;
  void *v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  id v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  NSObject *v184;
  os_log_type_t v185;
  uint8_t *v186;
  uint64_t v187;
  NSObject *v188;
  os_log_type_t v189;
  _BOOL4 v190;
  uint8_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  NSObject *v198;
  os_log_type_t v199;
  uint8_t *v200;
  const char *v201;
  uint64_t v202;
  id v203;
  NSString v204;
  id v205;
  id v206;
  Class v207;
  id v208;
  id v209;
  uint64_t v210;
  NSObject *v211;
  os_log_type_t v212;
  uint8_t *v213;
  id v214;
  Class isa;
  id v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  void *v221;
  uint64_t v222;
  NSObject *v223;
  os_log_type_t v224;
  uint8_t *v225;
  uint64_t v226;
  uint64_t v227;
  uint8_t *v228;
  uint64_t v229;
  NSObject *v230;
  os_log_type_t v231;
  _BOOL4 v232;
  uint8_t *v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  void **v244;
  uint64_t v245;
  NSObject *v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  id v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  _QWORD *v254;
  void *v255;
  uint64_t v256;
  void (*v257)(id, uint64_t);
  uint64_t v258;
  id v259;
  _QWORD *v260;
  id v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  char *v267;
  _QWORD *v268;
  __int128 v269;
  char *v270;
  uint64_t Endpoint;
  void (*v272)(id, uint64_t);
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  char *v282;
  __n128 v283;
  uint64_t *v284;
  char *v285;
  __n128 v286;
  uint64_t v287;
  __n128 v288;
  char *v289;
  int v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t v300;
  void *v301;
  uint64_t v302;
  _QWORD *v303;
  unint64_t v304;
  uint8_t *v305;
  _QWORD *v306;
  uint64_t v307;
  uint8_t *v308;
  uint64_t v309;
  unint64_t aBlock;
  uint64_t v311;
  uint64_t (*v312)(uint64_t);
  void *v313;
  uint64_t (*v314)();
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char v318[8];
  unsigned __int8 v319;
  char v320[8];
  _QWORD v321[2];
  uint64_t v322;
  char v323;
  _BYTE v324[7];

  v273 = a6;
  v272 = a5;
  v10 = 0;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v11);
  v267 = (char *)&v263 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Endpoint = type metadata accessor for SecureLocationsFetchEndpoint(0);
  v13 = __chkstk_darwin(Endpoint);
  v15 = (char *)&v263 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v266 = (uint64_t)&v263 - v17;
  __chkstk_darwin(v16);
  v276 = (uint64_t)&v263 - v18;
  v19 = sub_10001A9A8(&qword_101111AE0);
  __chkstk_darwin(v19);
  v279 = (uint64_t)&v263 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for SecureLocation(0);
  v274 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v263 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v277 = (uint64_t)&v263 - v26;
  __chkstk_darwin(v25);
  v28 = (char *)&v263 - v27;
  v294 = type metadata accessor for String.Encoding(0);
  v293 = *(_QWORD *)(v294 - 8);
  __chkstk_darwin(v294);
  v295 = (char *)&v263 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v30);
  v292 = (char *)&v263 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v298 = type metadata accessor for UUID(0);
  v297 = *(_QWORD *)(v298 - 8);
  __chkstk_darwin(v298);
  v281 = (char *)&v263 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v287 = swift_allocObject(&unk_10107CEA8, 24, 7);
  *(_QWORD *)(v287 + 16) = _swiftEmptyDictionarySingleton;
  v319 = 0;
  v33 = *(_QWORD **)(a1 + 16);
  v301 = a3;
  v280 = a2;
  v275 = a1;
  v265 = v33;
  if (v33)
  {
    v296 = *(_QWORD *)(a2 + 48);
    v291 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain(a1);
    v34 = swift_beginAccess(&v319, v318, 1, 0);
    v299 = &v317;
    v285 = (char *)&v316 + 4;
    v284 = &v311;
    v35 = (unint64_t *)(a1 + 40);
    v306 = _swiftEmptyArrayStorage;
    v34.n128_u64[0] = 136315138;
    v288 = v34;
    v282 = (char *)&type metadata for Any + 8;
    v34.n128_u64[0] = 67109634;
    v283 = v34;
    v34.n128_u64[0] = 136315394;
    v286 = v34;
    v290 = a4 & 1;
    v269 = xmmword_100E22B00;
    v268 = &type metadata for () + 1;
    v289 = v15;
    v270 = v24;
    v278 = v28;
    while (1)
    {
      v303 = v33;
      v38 = *(v35 - 1);
      v37 = *v35;
      v302 = (uint64_t)v35;
      v39 = qword_1010EA0A8;
      swift_bridgeObjectRetain(v37);
      if (v39 != -1)
        v40 = swift_once(&qword_1010EA0A8, sub_10098F82C);
      v41 = qword_1011B7A48;
      __chkstk_darwin(v40);
      *(&v263 - 4) = v41;
      *(&v263 - 3) = v38;
      *(&v263 - 2) = v37;
      swift_retain();
      v300 = sub_10001A9A8(&qword_1010F6350);
      OS_dispatch_queue.sync<A>(execute:)(sub_100553DE8, &v263 - 6, v300);
      v42 = swift_release();
      v304 = aBlock;
      v43 = v311;
      v44 = v295;
      static String.Encoding.utf8.getter(v42);
      v45 = String.data(using:allowLossyConversion:)(v44, 0, v38, v37);
      v47 = v46;
      (*(void (**)(char *, uint64_t))(v293 + 8))(v44, v294);
      v48 = &qword_1010EA000;
      v308 = (uint8_t *)v38;
      if (v47 >> 60 == 15)
        break;
      aBlock = v45;
      v311 = v47;
      v50 = sub_100035530();
      v49 = (uint64_t)v292;
      DataProtocol.stableUUID.getter(&type metadata for Data, v50);
      sub_10001EF3C(v45, v47);
      v51 = v297;
      v52 = v298;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v297 + 56))(v49, 0, 1, v298);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v49, 1, v52) == 1)
        goto LABEL_10;
      v67 = (uint64_t)v281;
      (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v281, v49, v52);
      v68 = v51;
      swift_retain();
      v69 = v279;
      sub_10081CC74(v67, v279);
      swift_release();
      v70 = type metadata accessor for SecureLocationsCachedPayload(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 48))(v69, 1, v70) == 1)
      {
        sub_100004048(v69, &qword_101111AE0);
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v52);
        v38 = (uint64_t)v308;
        goto LABEL_11;
      }
      v107 = v69 + *(int *)(v70 + 20);
      v108 = v277;
      sub_10005972C(v107, v277, type metadata accessor for SecureLocation);
      sub_1000126B0(v69, type metadata accessor for SecureLocationsCachedPayload);
      v109 = (uint64_t)v278;
      sub_1000126EC(v108, (uint64_t)v278, type metadata accessor for SecureLocation);
      swift_retain();
      v110 = sub_100995F58(v109);
      swift_release();
      if ((v110 & 1) != 0)
      {
        v111 = *(_QWORD *)(v280 + 40);
        v112 = sub_10001A9A8(&qword_1010ED490);
        v113 = *(unsigned __int8 *)(v274 + 80);
        v114 = (v113 + 32) & ~v113;
        v115 = swift_allocObject(v112, v114 + *(_QWORD *)(v274 + 72), v113 | 7);
        *(_OWORD *)(v115 + 16) = v269;
        sub_10005972C(v109, v115 + v114, type metadata accessor for SecureLocation);
        v116 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v116);
        *(&v263 - 4) = v111;
        *(&v263 - 3) = (uint64_t)SharingCircleWildAdvertisementKey.init(key:);
        *(&v263 - 2) = 0;
        *(&v263 - 1) = v115;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.receivedUpdatedLocations", 70, 2, sub_100553FAC, &v263 - 6, v268);
        swift_bridgeObjectRelease();
        if (qword_1010EA098 != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v117 = type metadata accessor for Logger(0);
        sub_10001A9E8(v117, (uint64_t)qword_1011B7A18);
        v118 = (uint64_t)v270;
        sub_10005972C(v109, (uint64_t)v270, type metadata accessor for SecureLocation);
        swift_bridgeObjectRetain_n(v37, 2);
        v120 = Logger.logObject.getter(v119);
        v121 = static os_log_type_t.default.getter(v120);
        v122 = v121;
        if (os_log_type_enabled(v120, v121))
        {
          v123 = swift_slowAlloc(22, -1);
          v307 = swift_slowAlloc(64, -1);
          aBlock = v307;
          *(_DWORD *)v123 = v286.n128_u32[0];
          LODWORD(v305) = v122;
          swift_bridgeObjectRetain(v37);
          v124 = (uint64_t)v308;
          v316 = sub_100016940((uint64_t)v308, v37, (uint64_t *)&aBlock);
          v125 = v299;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v316, v299, v123 + 4, v123 + 12);
          swift_bridgeObjectRelease_n(v37, 3);
          *(_WORD *)(v123 + 12) = 2080;
          v264 = v123 + 14;
          v126 = sub_100AA64E4();
          v316 = sub_100016940(v126, v127, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v316, v125, v264, v123 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0(v118, type metadata accessor for SecureLocation);
          _os_log_impl((void *)&_mh_execute_header, v120, (os_log_type_t)v305, "SubscribeAndFetch: cached location for id: %s, sending before subscribe %s", (uint8_t *)v123, 0x16u);
          v128 = v307;
          swift_arrayDestroy(v307, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v128, -1, -1);
          swift_slowDealloc(v123, -1, -1);

          v129 = v109;
          v38 = v124;
          a3 = v301;
          sub_1000126B0(v129, type metadata accessor for SecureLocation);
          v59 = (*(uint64_t (**)(char *, uint64_t))(v297 + 8))(v281, v298);
          v48 = &qword_1010EA000;
          goto LABEL_16;
        }

        sub_1000126B0(v118, type metadata accessor for SecureLocation);
        swift_bridgeObjectRelease_n(v37, 2);
        sub_1000126B0(v109, type metadata accessor for SecureLocation);
        v59 = (*(uint64_t (**)(char *, uint64_t))(v297 + 8))(v281, v298);
        v48 = &qword_1010EA000;
      }
      else
      {
        if (qword_1010EA098 != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v130 = type metadata accessor for Logger(0);
        sub_10001A9E8(v130, (uint64_t)qword_1011B7A18);
        swift_bridgeObjectRetain_n(v37, 2);
        v132 = Logger.logObject.getter(v131);
        v133 = static os_log_type_t.default.getter(v132);
        if (os_log_type_enabled(v132, v133))
        {
          v134 = (uint8_t *)swift_slowAlloc(12, -1);
          v307 = swift_slowAlloc(32, -1);
          aBlock = v307;
          *(_DWORD *)v134 = v288.n128_u32[0];
          v305 = v134 + 4;
          swift_bridgeObjectRetain(v37);
          v135 = a3;
          v136 = (uint64_t)v308;
          v316 = sub_100016940((uint64_t)v308, v37, (uint64_t *)&aBlock);
          v38 = v136;
          a3 = v135;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v316, v299, v305, v134 + 12);
          swift_bridgeObjectRelease_n(v37, 3);
          _os_log_impl((void *)&_mh_execute_header, v132, v133, "SubscribeAndFetch: cached location for id: %s- got cached location but not within the cache validity timeframe, moving on", v134, 0xCu);
          v137 = v307;
          swift_arrayDestroy(v307, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v137, -1, -1);
          swift_slowDealloc(v134, -1, -1);

          sub_1000126B0((uint64_t)v278, type metadata accessor for SecureLocation);
          v59 = (*(uint64_t (**)(char *, uint64_t))(v297 + 8))(v281, v298);
          goto LABEL_16;
        }
        swift_bridgeObjectRelease_n(v37, 2);

        sub_1000126B0((uint64_t)v278, type metadata accessor for SecureLocation);
        v59 = (*(uint64_t (**)(char *, uint64_t))(v297 + 8))(v281, v298);
      }
      v38 = (uint64_t)v308;
LABEL_16:
      __chkstk_darwin(v59);
      *(&v263 - 4) = v60;
      *(&v263 - 3) = v38;
      *(&v263 - 2) = v37;
      *(&v263 - 1) = (uint64_t)a3;
      OS_dispatch_queue.sync<A>(execute:)(sub_100553E04, &v263 - 6, &type metadata for Bool);
      v319 = aBlock;
      if ((aBlock & 1) == 0)
      {
        if (v48[19] != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v61 = type metadata accessor for Logger(0);
        sub_10001A9E8(v61, (uint64_t)qword_1011B7A18);
        swift_bridgeObjectRetain_n(v37, 2);
        v63 = Logger.logObject.getter(v62);
        v64 = static os_log_type_t.default.getter(v63);
        if (os_log_type_enabled(v63, v64))
        {
          v65 = (uint8_t *)swift_slowAlloc(12, -1);
          v66 = swift_slowAlloc(32, -1);
          aBlock = v66;
          *(_DWORD *)v65 = v288.n128_u32[0];
          swift_bridgeObjectRetain(v37);
          v316 = sub_100016940((uint64_t)v308, v37, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v316, v299, v65 + 4, v65 + 12);
          swift_bridgeObjectRelease_n(v37, 3);
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "SubscribeAndFetch - shouldProceed false for %s", v65, 0xCu);
          swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v66, -1, -1);
          swift_slowDealloc(v65, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v37, 2);
        }
      }
      if (v48[19] != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v71 = type metadata accessor for Logger(0);
      v72 = sub_10001A9E8(v71, (uint64_t)qword_1011B7A18);
      v73 = v43;
      swift_bridgeObjectRetain_n(v43, 2);
      swift_bridgeObjectRetain_n(v37, 2);
      v305 = (uint8_t *)v72;
      v75 = Logger.logObject.getter(v74);
      v76 = static os_log_type_t.debug.getter(v75);
      v77 = os_log_type_enabled(v75, v76);
      v307 = v10;
      if (v77)
      {
        v78 = swift_slowAlloc(28, -1);
        v79 = swift_slowAlloc(64, -1);
        aBlock = v79;
        *(_DWORD *)v78 = v283.n128_u32[0];
        LODWORD(v316) = v319;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v316, v285, v78 + 4, v78 + 8);
        *(_WORD *)(v78 + 8) = 2080;
        swift_bridgeObjectRetain(v37);
        v316 = sub_100016940((uint64_t)v308, v37, (uint64_t *)&aBlock);
        v80 = v299;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v316, v299, v78 + 10, v78 + 18);
        swift_bridgeObjectRelease_n(v37, 3);
        *(_WORD *)(v78 + 18) = 2080;
        if (v43)
          v81 = v304;
        else
          v81 = 7104878;
        if (v43)
          v82 = v43;
        else
          v82 = 0xE300000000000000;
        swift_bridgeObjectRetain(v43);
        v316 = sub_100016940(v81, v82, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v316, v80, v78 + 20, v78 + 28);
        swift_bridgeObjectRelease_n(v43, 2);
        v73 = v43;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "SubscribeAndFetch - shouldProceed %{BOOL}d for %s %s", (uint8_t *)v78, 0x1Cu);
        swift_arrayDestroy(v79, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v79, -1, -1);
        swift_slowDealloc(v78, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v43, 2);
        swift_bridgeObjectRelease_n(v37, 2);
      }
      swift_bridgeObjectRetain_n(v37, 2);
      swift_bridgeObjectRetain(v73);
      v84 = Logger.logObject.getter(v83);
      v85 = static os_log_type_t.default.getter(v84);
      if (os_log_type_enabled(v84, v85))
      {
        v86 = swift_slowAlloc(22, -1);
        v87 = swift_slowAlloc(64, -1);
        v316 = v87;
        *(_DWORD *)v86 = v286.n128_u32[0];
        swift_bridgeObjectRetain(v37);
        v88 = (uint64_t)v308;
        aBlock = sub_100016940((uint64_t)v308, v37, &v316);
        v89 = v284;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v284, v86 + 4, v86 + 12);
        swift_bridgeObjectRelease_n(v37, 3);
        *(_WORD *)(v86 + 12) = 2080;
        aBlock = v304;
        v311 = v73;
        swift_bridgeObjectRetain(v73);
        v90 = String.init<A>(describing:)(&aBlock, v300);
        aBlock = sub_100016940(v90, v91, &v316);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v89, v86 + 14, v86 + 22);
        swift_bridgeObjectRelease_n(v73, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "SubscribeAndFetch request data for %s %s", (uint8_t *)v86, 0x16u);
        swift_arrayDestroy(v87, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v87, -1, -1);
        swift_slowDealloc(v86, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v73, 2);
        swift_bridgeObjectRelease_n(v37, 2);
        v88 = (uint64_t)v308;
      }
      v92 = v88;
      a3 = v301;
      sub_10043CBEC(v92, v37, v301, v290, (uint64_t)v320);
      sub_100005CF0((uint64_t)v320, (uint64_t)v321, &qword_1010FEE70);
      v93 = v322;
      if (!v322)
        goto LABEL_3;
      v94 = v321[0];
      v95 = v321[1];
      v96 = v323;
      v97 = objc_msgSend(a3, "subscriptionMode", swift_bridgeObjectRetain(v322).n128_f64[0]);
      if ((swift_isUniquelyReferenced_nonNull_native(v306) & 1) != 0)
        v98 = v306;
      else
        v98 = sub_1007C9F4C(0, v306[2] + 1, 1, v306);
      v100 = v98[2];
      v99 = v98[3];
      if (v100 >= v99 >> 1)
        v98 = sub_1007C9F4C((_QWORD *)(v99 > 1), v100 + 1, 1, v98);
      v98[2] = v100 + 1;
      v306 = v98;
      v101 = &v98[5 * v100];
      v101[4] = v94;
      v101[5] = v95;
      v101[6] = v93;
      v101[7] = v97;
      *((_BYTE *)v101 + 64) = v96;
      v102 = *(_QWORD *)(v93 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain(v37);
      v103 = v287;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v287 + 16));
      aBlock = *(_QWORD *)(v103 + 16);
      *(_QWORD *)(v103 + 16) = 0x8000000000000000;
      v105 = (uint64_t)v308;
      sub_10010D37C(v102 == 0, (uint64_t)v308, v37, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(v103 + 16) = aBlock;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v102)
      {
LABEL_3:
        v15 = v289;
        v36 = v302;
        v10 = v307;
      }
      else
      {
        v106 = objc_msgSend(a3, "subscriptionMode");
        v15 = v289;
        v10 = v307;
        if (v106 == (id)4)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v210 = swift_bridgeObjectRelease();
          v211 = Logger.logObject.getter(v210);
          v212 = static os_log_type_t.default.getter(v211);
          if (os_log_type_enabled(v211, v212))
          {
            v213 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v213 = 0;
            _os_log_impl((void *)&_mh_execute_header, v211, v212, "SubscribeAndFetch - failed to get own keys for ownerProactive mode - not proceeding", v213, 2u);
            swift_slowDealloc(v213, -1, -1);
          }

          objc_msgSend(a3, "subscriptionMode");
          v214 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
          sub_10000F4A0(0, (unint64_t *)&qword_1010F1598, SPSecureLocation_ptr);
          isa = Array._bridgeToObjectiveC()().super.isa;
          v216 = objc_msgSend(v214, "initWithExpiryTime:locations:", isa, 15.0);

          type metadata accessor for SecureLocationsError(0);
          v218 = v217;
          v316 = 0;
          v219 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
          v220 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
          _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v316, v219, v218, v220);
          v221 = (void *)aBlock;
          v272(v216, aBlock);
          swift_release();

          return;
        }
        if (v319 == 1)
          sub_1005CF7D0(v105, v37, a3);
        v36 = v302;
      }
      v35 = (unint64_t *)(v36 + 16);
      swift_bridgeObjectRelease();
      v33 = (_QWORD *)((char *)v303 - 1);
      if (v303 == (_QWORD *)1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_63;
      }
    }
    v49 = (uint64_t)v292;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v297 + 56))(v292, 1, 1, v298);
LABEL_10:
    sub_100004048(v49, &qword_1010ED860);
LABEL_11:
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v53 = type metadata accessor for Logger(0);
    sub_10001A9E8(v53, (uint64_t)qword_1011B7A18);
    swift_bridgeObjectRetain_n(v37, 2);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.default.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(12, -1);
      v58 = swift_slowAlloc(32, -1);
      aBlock = v58;
      *(_DWORD *)v57 = v288.n128_u32[0];
      swift_bridgeObjectRetain(v37);
      v316 = sub_100016940((uint64_t)v308, v37, (uint64_t *)&aBlock);
      a3 = v301;
      v38 = (uint64_t)v308;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v316, v299, v57 + 4, v57 + 12);
      swift_bridgeObjectRelease_n(v37, 3);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "SubscribeAndFetch: cached location for id: %s- no cached location, moving on", v57, 0xCu);
      swift_arrayDestroy(v58, 1, v282);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v57, -1, -1);

    }
    else
    {

      v59 = swift_bridgeObjectRelease_n(v37, 2);
    }
    goto LABEL_16;
  }
  v306 = _swiftEmptyArrayStorage;
LABEL_63:
  swift_beginAccess(&v319, &v316, 0, 0);
  if ((v319 & 1) != 0)
  {
    v307 = v10;
    v138 = v15;
    v139 = type metadata accessor for FMNAccountType(0);
    isEscapingClosureAtFileLocation = v276;
    (*(void (**)(void))(*(_QWORD *)(v139 - 8) + 104))();
    sub_100362C5C(isEscapingClosureAtFileLocation + *(int *)(Endpoint + 20));
    if (qword_1010EA098 != -1)
      goto LABEL_114;
    while (1)
    {
      v141 = type metadata accessor for Logger(0);
      v142 = sub_10001A9E8(v141, (uint64_t)qword_1011B7A18);
      v143 = v266;
      v144 = sub_10005972C(isEscapingClosureAtFileLocation, v266, type metadata accessor for SecureLocationsFetchEndpoint);
      v145 = Logger.logObject.getter(v144);
      v146 = static os_log_type_t.default.getter(v145);
      if (os_log_type_enabled(v145, v146))
      {
        v147 = (uint8_t *)swift_slowAlloc(12, -1);
        v148 = swift_slowAlloc(32, -1);
        aBlock = v148;
        *(_DWORD *)v147 = 136315138;
        v308 = v147 + 4;
        sub_10005972C(v143, (uint64_t)v138, type metadata accessor for SecureLocationsFetchEndpoint);
        v149 = String.init<A>(describing:)(v138, Endpoint);
        v309 = sub_100016940(v149, v150, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, &aBlock, v308, v147 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v143, type metadata accessor for SecureLocationsFetchEndpoint);
        _os_log_impl((void *)&_mh_execute_header, v145, v146, "SubscribeAndFetch endpoint %s", v147, 0xCu);
        swift_arrayDestroy(v148, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v148, -1, -1);
        swift_slowDealloc(v147, -1, -1);
      }
      else
      {
        sub_1000126B0(v143, type metadata accessor for SecureLocationsFetchEndpoint);
      }

      MyAppURLSessionFactory = type metadata accessor for FindMyAppURLSessionFactory(0);
      swift_allocObject(MyAppURLSessionFactory, *(unsigned int *)(MyAppURLSessionFactory + 48), *(unsigned __int16 *)(MyAppURLSessionFactory + 52));
      v157 = type metadata accessor for FMNMockingPreferences(0);
      v158 = v267;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v157 - 8) + 56))(v267, 1, 1, v157);
      v159 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v158);
      v160 = type metadata accessor for ServerInteractionController(0);
      v161 = swift_allocObject(v160, *(unsigned int *)(v160 + 48), *(unsigned __int16 *)(v160 + 52));
      sub_10005972C(v276, (uint64_t)v138, type metadata accessor for SecureLocationsFetchEndpoint);
      swift_retain();
      v162 = (_QWORD *)sub_10041D89C((uint64_t)v138, v159, v161);
      if (!v306[2])
      {
        v202 = swift_bridgeObjectRelease();
        v198 = Logger.logObject.getter(v202);
        v199 = static os_log_type_t.error.getter(v198);
        if (os_log_type_enabled(v198, v199))
        {
          v200 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v200 = 0;
          v201 = "No SubscribeAndFetch request data generated. Not sending request";
LABEL_86:
          _os_log_impl((void *)&_mh_execute_header, v198, v199, v201, v200, 2u);
          swift_slowDealloc(v200, -1, -1);
        }
LABEL_87:

        static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
        v203 = objc_allocWithZone((Class)NSError);
        v204 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v205 = objc_msgSend(v203, "initWithDomain:code:userInfo:", v204, 0, 0);

        objc_msgSend(a3, "subscriptionMode");
        v206 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
        sub_10000F4A0(0, (unint64_t *)&qword_1010F1598, SPSecureLocation_ptr);
        v207 = Array._bridgeToObjectiveC()().super.isa;
        v208 = objc_msgSend(v206, "initWithExpiryTime:locations:", v207, 15.0);

        v209 = v205;
        v272(v208, (uint64_t)v205);
        swift_release();

LABEL_88:
        swift_release();
        goto LABEL_89;
      }
      v163 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
      if (!v163
        || (v164 = v163,
            v165 = objc_msgSend(v163, "uniqueDeviceIdentifier"),
            v164,
            !v165))
      {
        v197 = swift_bridgeObjectRelease();
        v198 = Logger.logObject.getter(v197);
        v199 = static os_log_type_t.error.getter(v198);
        if (os_log_type_enabled(v198, v199))
        {
          v200 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v200 = 0;
          v201 = "Unable to get device identifier for server SubscribeAndFetch";
          goto LABEL_86;
        }
        goto LABEL_87;
      }
      v305 = (uint8_t *)static String._unconditionallyBridgeFromObjectiveC(_:)(v165);
      v167 = v166;

      v168 = v280;
      v169 = sub_10001A9A8(&qword_1010F6350);
      OS_dispatch_queue.sync<A>(execute:)(sub_100553E20, v168, v169);
      v170 = v311;
      if (!v311)
        break;
      v308 = (uint8_t *)v142;
      v304 = v159;
      v171 = aBlock;
      v172 = objc_msgSend(a3, "clientApp");
      v173 = static String._unconditionallyBridgeFromObjectiveC(_:)(v172);
      v175 = v174;

      v176 = swift_allocObject(&unk_10107CED0, 152, 7);
      v177 = v306;
      *(_QWORD *)(v176 + 16) = v306;
      *(_QWORD *)(v176 + 24) = v171;
      v178 = (uint64_t)v305;
      *(_QWORD *)(v176 + 32) = v170;
      *(_QWORD *)(v176 + 40) = v178;
      *(_QWORD *)(v176 + 48) = v167;
      *(_QWORD *)(v176 + 56) = v173;
      *(_QWORD *)(v176 + 64) = v175;
      *(_QWORD *)(v176 + 72) = _swiftEmptyDictionarySingleton;
      *(_OWORD *)(v176 + 80) = 0u;
      *(_OWORD *)(v176 + 96) = 0u;
      *(_OWORD *)(v176 + 112) = 0u;
      *(_BYTE *)(v176 + 128) = 0;
      *(_DWORD *)(v176 + 129) = *(_DWORD *)v324;
      *(_DWORD *)(v176 + 132) = *(_DWORD *)&v324[3];
      *(_QWORD *)(v176 + 136) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v176 + 144) = v168;
      swift_bridgeObjectRetain(v177);
      swift_retain();
      v179 = sub_10001A9A8(&qword_1010FEE88);
      unsafeFromAsyncTask<A>(_:)(&aBlock, &unk_1010FEE80, v176, v179);
      swift_release();
      v180 = aBlock;
      if (!aBlock)
      {
        v226 = swift_bridgeObjectRelease();
        v198 = Logger.logObject.getter(v226);
        v227 = static os_log_type_t.error.getter(v198);
        if (os_log_type_enabled(v198, (os_log_type_t)v227))
        {
          v228 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v228 = 0;
          _os_log_impl((void *)&_mh_execute_header, v198, (os_log_type_t)v227, "Failed to create request for server SubscribeAndFetch", v228, 2u);
          swift_slowDealloc(v228, -1, -1);
        }
        goto LABEL_87;
      }
      v181 = v311;
      v182 = (unint64_t)v312;
      swift_bridgeObjectRetain(aBlock);
      v183 = sub_10001BBBC(v181, v182);
      v184 = Logger.logObject.getter(v183);
      v185 = static os_log_type_t.default.getter(v184);
      if (os_log_type_enabled(v184, v185))
      {
        v186 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v186 = 0;
        _os_log_impl((void *)&_mh_execute_header, v184, v185, "Sending SubscribeAndFetch server request", v186, 2u);
        swift_slowDealloc(v186, -1, -1);
      }

      sub_100555020(v180, v181, v182);
      swift_bridgeObjectRetain(v180);
      v187 = sub_10001BBBC(v181, v182);
      v188 = Logger.logObject.getter(v187);
      v189 = static os_log_type_t.debug.getter(v188);
      v190 = os_log_type_enabled(v188, v189);
      v307 = v182;
      v303 = v162;
      if (v190)
      {
        v191 = (uint8_t *)swift_slowAlloc(12, -1);
        v192 = swift_slowAlloc(32, -1);
        aBlock = v192;
        *(_DWORD *)v191 = 136315138;
        swift_bridgeObjectRetain(v180);
        v194 = Dictionary.description.getter(v193, &type metadata for String, &type metadata for String, &protocol witness table for String);
        v196 = v195;
        swift_bridgeObjectRelease();
        v309 = sub_100016940(v194, v196, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, &aBlock, v191 + 4, v191 + 12);
        v182 = v307;
        swift_bridgeObjectRelease();
        sub_100153D94(v180, v181, v182);
        sub_100153D94(v180, v181, v182);
        _os_log_impl((void *)&_mh_execute_header, v188, v189, "SubscribeAndFetch request headers %s", v191, 0xCu);
        swift_arrayDestroy(v192, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v192, -1, -1);
        swift_slowDealloc(v191, -1, -1);
      }
      else
      {
        sub_100153D94(v180, v181, v182);
        sub_100153D94(v180, v181, v182);
      }

      swift_bridgeObjectRetain(v180);
      sub_10001BBBC(v181, v182);
      swift_bridgeObjectRetain(v180);
      v229 = sub_10001BBBC(v181, v182);
      v230 = Logger.logObject.getter(v229);
      v231 = static os_log_type_t.debug.getter(v230);
      v232 = os_log_type_enabled(v230, v231);
      v305 = (uint8_t *)v180;
      v302 = v181;
      if (v232)
      {
        v233 = (uint8_t *)swift_slowAlloc(12, -1);
        v234 = swift_slowAlloc(32, -1);
        aBlock = v234;
        *(_DWORD *)v233 = 136315138;
        v235 = v295;
        static String.Encoding.utf8.getter(v234);
        v236 = String.init(data:encoding:)(v181, v182, v235);
        if (v237)
        {
          v238 = v237;
        }
        else
        {
          v236 = 7104878;
          v238 = 0xE300000000000000;
        }
        v309 = sub_100016940(v236, v238, (uint64_t *)&aBlock);
        v239 = v307;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, &aBlock, v233 + 4, v233 + 12);
        swift_bridgeObjectRelease();
        sub_100153D94(v180, v181, v239);
        sub_100153D94(v180, v181, v239);
        _os_log_impl((void *)&_mh_execute_header, v230, v231, "SubscribeAndFetch request body %s", v233, 0xCu);
        swift_arrayDestroy(v234, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v234, -1, -1);
        swift_slowDealloc(v233, -1, -1);
      }
      else
      {
        sub_100153D94(v180, v181, v182);
        sub_100153D94(v180, v181, v182);
      }

      v240 = v280;
      v241 = v275;
      v242 = v265;
      if (!v265)
      {
LABEL_112:
        swift_bridgeObjectRelease();
        v251 = (uint64_t)v305;
        v252 = v302;
        v253 = v307;
        sub_100555020((uint64_t)v305, v302, v307);
        sub_10034D4B0(v251, v252, v253, 0, v303);
        sub_100153D94(v251, v252, v253);
        v254 = (_QWORD *)swift_allocObject(&unk_10107CF70, 64, 7);
        v254[2] = v240;
        v254[3] = v241;
        v255 = v301;
        v256 = v287;
        v254[4] = v301;
        v254[5] = v256;
        v257 = v272;
        v258 = v273;
        v254[6] = v272;
        v254[7] = v258;
        swift_bridgeObjectRetain(v241);
        swift_retain();
        v259 = v255;
        swift_retain();
        swift_retain();
        Future.addSuccess(block:)(sub_100553F6C, v254);
        swift_release();
        swift_release();
        v260 = (_QWORD *)swift_allocObject(&unk_10107CF98, 56, 7);
        v260[2] = v240;
        v260[3] = v241;
        v260[4] = v259;
        v260[5] = v257;
        v260[6] = v258;
        swift_bridgeObjectRetain(v241);
        swift_retain();
        v261 = v259;
        swift_retain();
        Future.addFailure(block:)(sub_100553FA0, v260);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v262 = v307;
        sub_100153D94(v251, v252, v307);
        sub_100153D94(v251, v252, v262);
        goto LABEL_88;
      }
      v243 = *(_QWORD *)(v280 + 48);
      swift_bridgeObjectRetain(v275);
      v244 = (void **)(v241 + 40);
      v138 = v301;
      while (1)
      {
        v245 = (uint64_t)*(v244 - 1);
        a3 = *v244;
        v246 = *(NSObject **)(v243 + 16);
        v247 = swift_allocObject(&unk_10107CEF8, 49, 7);
        *(_QWORD *)(v247 + 16) = v243;
        *(_QWORD *)(v247 + 24) = v245;
        *(_QWORD *)(v247 + 32) = a3;
        *(_QWORD *)(v247 + 40) = v138;
        *(_BYTE *)(v247 + 48) = 0;
        v248 = swift_allocObject(&unk_10107CF20, 32, 7);
        *(_QWORD *)(v248 + 16) = sub_100553F14;
        *(_QWORD *)(v248 + 24) = v247;
        v314 = sub_10005CBA4;
        v315 = v248;
        aBlock = (unint64_t)_NSConcreteStackBlock;
        v311 = 1107296256;
        v312 = sub_10001D8B8;
        v313 = &unk_10107CF38;
        v249 = _Block_copy(&aBlock);
        swift_bridgeObjectRetain_n(a3, 2);
        v250 = v138;
        swift_retain();
        swift_retain();
        swift_release();
        dispatch_sync(v246, v249);
        _Block_release(v249);
        isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v248, "", 120, 101, 35, 1);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        if ((isEscapingClosureAtFileLocation & 1) != 0)
          break;
        v244 += 2;
        v242 = (_QWORD *)((char *)v242 - 1);
        if (!v242)
        {
          swift_bridgeObjectRelease();
          v241 = v275;
          v240 = v280;
          goto LABEL_112;
        }
      }
      __break(1u);
LABEL_114:
      swift_once(&qword_1010EA098, sub_10098F7D8);
    }
    swift_bridgeObjectRelease();
    v222 = swift_bridgeObjectRelease();
    v223 = Logger.logObject.getter(v222);
    v224 = static os_log_type_t.error.getter(v223);
    if (os_log_type_enabled(v223, v224))
    {
      v225 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v225 = 0;
      _os_log_impl((void *)&_mh_execute_header, v223, v224, "No APS token. Not proceeding with SubscribeAndFetch request", v225, 2u);
      swift_slowDealloc(v225, -1, -1);
    }
    swift_release();
    swift_release();

LABEL_89:
    sub_1000126B0(v276, type metadata accessor for SecureLocationsFetchEndpoint);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v151 = type metadata accessor for Logger(0);
    v152 = sub_10001A9E8(v151, (uint64_t)qword_1011B7A18);
    v153 = Logger.logObject.getter(v152);
    v154 = static os_log_type_t.default.getter(v153);
    if (os_log_type_enabled(v153, v154))
    {
      v155 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v155 = 0;
      _os_log_impl((void *)&_mh_execute_header, v153, v154, "SubscribeAndFetch - not proceeding with subscribe", v155, 2u);
      swift_slowDealloc(v155, -1, -1);
    }

    sub_100529600(v275, 0, 0xF000000000000000, 0, a3, v272, v273);
  }
  swift_release();
}

uint64_t sub_1005264B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_1005264CC, 0, 0);
}

uint64_t sub_1005264CC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v6;

  v1 = (_QWORD *)v0[4];
  v2 = *(_QWORD *)(v0[5] + 320);
  swift_bridgeObjectRetain(v0[3]);
  sub_1005541A0(v1);
  v3 = unk_1010F94EC;
  v6 = (char *)&dword_1010F94E8 + dword_1010F94E8;
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[6] = v4;
  *v4 = v0;
  v4[1] = sub_100526558;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v6)(v0[3], v0[4], v2);
}

uint64_t sub_100526558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v9)();

  v8 = *(_QWORD **)v4;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v4 + 48));
  if (v3)
  {
    swift_errorRelease(v3);
    v9 = sub_100526604;
  }
  else
  {
    v8[7] = a3;
    v8[8] = a2;
    v8[9] = a1;
    v9 = sub_1005265E4;
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_1005265E4()
{
  uint64_t v0;
  uint64_t v1;
  int8x16_t *v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(int8x16_t **)(v0 + 16);
  *v2 = vextq_s8(*(int8x16_t *)(v0 + 64), *(int8x16_t *)(v0 + 64), 8uLL);
  v2[1].i64[0] = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100526604()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)(v0 + 16);
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100526618(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD aBlock[7];

  v45 = a6;
  v46 = a7;
  v43 = a4;
  v44 = a5;
  v41 = a2;
  v42 = a3;
  v50 = type metadata accessor for DispatchWorkItemFlags(0);
  v53 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v49 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v10 - 8);
  v52 = v10;
  __chkstk_darwin(v10);
  v47 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = *(_QWORD *)(a2 + 296);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_10107D088, v22 + 16, v16 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v23 + v17, v15, v12);
  v24 = v41;
  v25 = v42;
  *(_QWORD *)(v23 + v18) = v42;
  v26 = v43;
  *(_QWORD *)(v23 + v19) = v43;
  *(_QWORD *)(v23 + v20) = v24;
  v27 = v45;
  *(_QWORD *)(v23 + v21) = v44;
  v28 = (_QWORD *)(v23 + v22);
  v29 = v46;
  *v28 = v27;
  v28[1] = v29;
  aBlock[4] = sub_1005540FC;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10107D0A0;
  v30 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(v25);
  v31 = v26;
  swift_retain();
  swift_retain();
  v32 = swift_retain();
  v33 = v47;
  static DispatchQoS.unspecified.getter(v32);
  v54 = _swiftEmptyArrayStorage;
  v34 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v35 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v36 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v38 = v49;
  v37 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v35, v36, v50, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v33, v38, v30);
  _Block_release(v30);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v38, v37);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v33, v52);
  return swift_release();
}

void sub_100526904(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void (*a6)(id, uint64_t), uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  void **v59;
  void **v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  void **v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  char **v82;
  id v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char **v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  id v95;
  NSString v96;
  id v97;
  id v98;
  uint64_t v99;
  void **v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(id, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  _BYTE v110[16];
  void **aBlock;
  uint64_t v112;
  uint64_t (*v113)(uint64_t);
  void *v114;
  uint64_t (*v115)();
  char *v116;

  v103 = a6;
  v104 = a7;
  v102 = a5;
  v105 = a4;
  v107 = a2;
  v9 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v99 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v99 - v21;
  v23 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v20);
  isEscapingClosureAtFileLocation = *(_QWORD *)(v13 + 16);
  v106 = a1;
  v25 = ((uint64_t (*)(char *, uint64_t, uint64_t))isEscapingClosureAtFileLocation)(v22, a1, v12);
  if (v23 == 200)
  {
    v26 = *(void (**)(char *, uint64_t))(v13 + 8);
    v26(v22, v12);
    goto LABEL_4;
  }
  v27 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v25);
  v26 = *(void (**)(char *, uint64_t))(v13 + 8);
  v26(v22, v12);
  if (v27 == 206)
  {
LABEL_4:
    if (qword_1010EA098 != -1)
      goto LABEL_37;
    while (1)
    {
      v28 = type metadata accessor for Logger(0);
      v29 = sub_10001A9E8(v28, (uint64_t)qword_1011B7A18);
      ((void (*)(char *, uint64_t, uint64_t))isEscapingClosureAtFileLocation)(v19, v106, v12);
      v30 = v107;
      swift_bridgeObjectRetain_n(v107, 2);
      v31 = a3;
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      v34 = os_log_type_enabled(v32, v33);
      v108 = v31;
      if (v34)
      {
        v35 = swift_slowAlloc(42, -1);
        v101 = v29;
        v36 = v35;
        v37 = (void **)swift_slowAlloc(64, -1);
        v100 = v37;
        aBlock = v37;
        *(_DWORD *)v36 = 134218754;
        v38 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v37);
        v26(v19, v12);
        v109 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v36 + 4, v36 + 12);
        *(_WORD *)(v36 + 12) = 2048;
        v109 = *(_QWORD *)(v107 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v36 + 14, v36 + 22);
        *(_WORD *)(v36 + 22) = 2080;
        v39 = objc_msgSend(v108, "clientApp");
        v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        v42 = v41;

        v109 = sub_100016940(v40, v42, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v36 + 24, v36 + 32);

        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 32) = 2080;
        v31 = v108;
        swift_bridgeObjectRetain(v107);
        v43 = Array.description.getter(v107, &type metadata for String);
        v45 = v44;
        swift_bridgeObjectRelease();
        v46 = v43;
        v30 = v107;
        v109 = sub_100016940(v46, v45, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v36 + 34, v36 + 42);
        swift_bridgeObjectRelease_n(v30, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "SubscribeAndFetch received status %ld for %ld IDs for clientApp %s ids %s. Now decoding...", (uint8_t *)v36, 0x2Au);
        v47 = v100;
        swift_arrayDestroy(v100, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v36, -1, -1);

      }
      else
      {
        v26(v19, v12);

        swift_bridgeObjectRelease_n(v30, 2);
      }
      v49 = FMNServerInteractionController.FMNResponseFields.data.getter(v48);
      v51 = v50;
      static String.Encoding.utf8.getter(v49);
      v52 = String.init(data:encoding:)(v49, v51, v11);
      v54 = v53;
      sub_10001BC14(v49, v51);
      if (v54)
      {
        swift_bridgeObjectRetain(v54);
        v56 = Logger.logObject.getter(v55);
        v57 = static os_log_type_t.debug.getter(v56);
        if (os_log_type_enabled(v56, v57))
        {
          v58 = (uint8_t *)swift_slowAlloc(12, -1);
          v59 = (void **)swift_slowAlloc(32, -1);
          aBlock = v59;
          *(_DWORD *)v58 = 136315138;
          v31 = v108;
          swift_bridgeObjectRetain(v54);
          v109 = sub_100016940(v52, v54, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v58 + 4, v58 + 12);
          swift_bridgeObjectRelease_n(v54, 3);
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "Received responseString %s", v58, 0xCu);
          swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
          v60 = v59;
          v30 = v107;
          swift_slowDealloc(v60, -1, -1);
          swift_slowDealloc(v58, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v54, 2);
        }
      }
      v73 = objc_msgSend(v31, "subscriptionMode");
      if (!v73)
      {
        v74 = objc_msgSend(v31, "clientApp");
        v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
        v77 = v76;

        if (v75 != 0xD000000000000015 || v77 != 0x8000000100ED6920)
        {
          v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v77, 0xD000000000000015, 0x8000000100ED6920, 0);
          v73 = (id)swift_bridgeObjectRelease();
          if ((v78 & 1) != 0)
            goto LABEL_23;
          v79 = (uint64_t *)(v102 + 16);
          swift_beginAccess(v102 + 16, &v109, 0, 0);
          v80 = *v79;
          swift_bridgeObjectRetain(v80);
          sub_10052C830(v30, v80);
        }
        v73 = (id)swift_bridgeObjectRelease();
      }
LABEL_23:
      v81 = *(_QWORD *)(v30 + 16);
      if (!v81)
      {
LABEL_28:
        v88 = FMNServerInteractionController.FMNResponseFields.data.getter(v73);
        v90 = v89;
        sub_100529600(v30, v88, v89, 0, v31, v103, v104);
        sub_10001BC14(v88, v90);
        return;
      }
      v12 = *(_QWORD *)(v105 + 48);
      swift_bridgeObjectRetain(v30);
      v82 = (char **)(v30 + 40);
      v83 = v108;
      while (1)
      {
        v84 = (uint64_t)*(v82 - 1);
        v19 = *v82;
        v85 = *(NSObject **)(v12 + 16);
        v86 = swift_allocObject(&unk_10107D150, 49, 7);
        *(_QWORD *)(v86 + 16) = v12;
        *(_QWORD *)(v86 + 24) = v84;
        *(_QWORD *)(v86 + 32) = v19;
        *(_QWORD *)(v86 + 40) = v83;
        *(_BYTE *)(v86 + 48) = 1;
        v11 = (char *)swift_allocObject(&unk_10107D178, 32, 7);
        *((_QWORD *)v11 + 2) = sub_100553F14;
        *((_QWORD *)v11 + 3) = v86;
        v115 = sub_10005CBA4;
        v116 = v11;
        aBlock = _NSConcreteStackBlock;
        v112 = 1107296256;
        v113 = sub_10001D8B8;
        v114 = &unk_10107D190;
        v26 = (void (*)(char *, uint64_t))_Block_copy(&aBlock);
        a3 = v116;
        swift_bridgeObjectRetain_n(v19, 2);
        v87 = v83;
        swift_retain();
        swift_retain();
        swift_release();
        dispatch_sync(v85, v26);
        _Block_release(v26);
        isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v11, "", 120, 101, 35, 1);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        if ((isEscapingClosureAtFileLocation & 1) != 0)
          break;
        v82 += 2;
        if (!--v81)
        {
          v30 = v107;
          v73 = (id)swift_bridgeObjectRelease();
          v31 = v108;
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      swift_once(&qword_1010EA098, sub_10098F7D8);
    }
  }
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v61 = type metadata accessor for Logger(0);
  sub_10001A9E8(v61, (uint64_t)qword_1011B7A18);
  ((void (*)(char *, uint64_t, uint64_t))isEscapingClosureAtFileLocation)(v16, v106, v12);
  v62 = v107;
  swift_bridgeObjectRetain_n(v107, 2);
  v64 = Logger.logObject.getter(v63);
  v65 = static os_log_type_t.error.getter(v64);
  if (os_log_type_enabled(v64, v65))
  {
    v66 = swift_slowAlloc(32, -1);
    v67 = (void **)swift_slowAlloc(32, -1);
    aBlock = v67;
    *(_DWORD *)v66 = 134218498;
    v68 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v67);
    v26(v16, v12);
    v109 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v66 + 4, v66 + 12);
    *(_WORD *)(v66 + 12) = 2048;
    v109 = *(_QWORD *)(v107 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v66 + 14, v66 + 22);
    *(_WORD *)(v66 + 22) = 2080;
    swift_bridgeObjectRetain(v107);
    v69 = Array.description.getter(v107, &type metadata for String);
    v71 = v70;
    swift_bridgeObjectRelease();
    v109 = sub_100016940(v69, v71, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110, v66 + 24, v66 + 32);
    swift_bridgeObjectRelease_n(v107, 2);
    v62 = v107;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "Error during SubscribeAndFetch %ld. %ld IDs. ForIds %s", (uint8_t *)v66, 0x20u);
    swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v66, -1, -1);

    v72 = *(_QWORD *)(v62 + 16);
    if (!v72)
      goto LABEL_34;
LABEL_30:
    v12 = *(_QWORD *)(v105 + 48);
    swift_bridgeObjectRetain(v62);
    v91 = (char **)(v62 + 40);
    do
    {
      v92 = (uint64_t)*(v91 - 1);
      v19 = *v91;
      isEscapingClosureAtFileLocation = *(_QWORD *)(v12 + 16);
      v93 = swift_allocObject(&unk_10107D0D8, 49, 7);
      *(_QWORD *)(v93 + 16) = v12;
      *(_QWORD *)(v93 + 24) = v92;
      *(_QWORD *)(v93 + 32) = v19;
      *(_QWORD *)(v93 + 40) = a3;
      *(_BYTE *)(v93 + 48) = 2;
      v11 = (char *)swift_allocObject(&unk_10107D100, 32, 7);
      *((_QWORD *)v11 + 2) = sub_100553F14;
      *((_QWORD *)v11 + 3) = v93;
      v115 = sub_10005CBA4;
      v116 = v11;
      aBlock = _NSConcreteStackBlock;
      v112 = 1107296256;
      v113 = sub_10001D8B8;
      v114 = &unk_10107D118;
      v26 = (void (*)(char *, uint64_t))_Block_copy(&aBlock);
      swift_bridgeObjectRetain_n(v19, 2);
      v94 = a3;
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync((dispatch_queue_t)isEscapingClosureAtFileLocation, v26);
      _Block_release(v26);
      LOBYTE(v92) = swift_isEscapingClosureAtFileLocation(v11, "", 120, 101, 35, 1);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if ((v92 & 1) != 0)
        goto LABEL_36;
      v91 += 2;
      --v72;
    }
    while (v72);
    v62 = v107;
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  v26(v16, v12);

  swift_bridgeObjectRelease_n(v62, 2);
  v72 = *(_QWORD *)(v62 + 16);
  if (v72)
    goto LABEL_30;
LABEL_34:
  static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
  v95 = objc_allocWithZone((Class)NSError);
  v96 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v97 = objc_msgSend(v95, "initWithDomain:code:userInfo:", v96, 0, 0);

  v98 = v97;
  sub_100529600(v62, 0, 0xF000000000000000, (char *)v97, a3, v103, v104);

}

uint64_t sub_1005274D8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[6];

  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(a2 + 296);
  v18 = (_QWORD *)swift_allocObject(&unk_10107CFC0, 64, 7);
  v18[2] = a1;
  v18[3] = a3;
  v18[4] = a2;
  v18[5] = a4;
  v18[6] = a5;
  v18[7] = a6;
  aBlock[4] = sub_10055400C;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10107CFD8;
  v19 = _Block_copy(aBlock);
  swift_errorRetain(a1);
  swift_bridgeObjectRetain(a3);
  swift_retain();
  v20 = a4;
  v21 = swift_retain();
  static DispatchQoS.unspecified.getter(v21);
  v29 = _swiftEmptyArrayStorage;
  v22 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v24 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v23, v24, v12, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v27);
  return swift_release();
}

void sub_100527700(uint64_t *a1, uint64_t a2, _QWORD *a3, void *a4, void (*a5)(id, uint64_t), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t aBlock[6];

  if (qword_1010EA098 != -1)
    goto LABEL_12;
  while (1)
  {
    v11 = type metadata accessor for Logger(0);
    sub_10001A9E8(v11, (uint64_t)qword_1011B7A18);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a2);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a2);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    v34 = a6;
    v32 = (char *)a1;
    if (!os_log_type_enabled(v13, v14))
      break;
    v15 = swift_slowAlloc(22, -1);
    v31 = swift_slowAlloc(64, -1);
    v35 = (uint64_t)a1;
    aBlock[0] = v31;
    *(_DWORD *)v15 = 136315394;
    swift_errorRetain(a1);
    v16 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v17 = String.init<A>(describing:)(&v35, v16);
    v35 = sub_100016940(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, aBlock, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    *(_WORD *)(v15 + 12) = 2080;
    swift_bridgeObjectRetain(a2);
    v20 = Array.description.getter(v19, &type metadata for String);
    v22 = v21;
    swift_bridgeObjectRelease();
    v23 = v20;
    a6 = v34;
    v35 = sub_100016940(v23, v22, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, aBlock, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "subscribeAndFetch failed %s forIds %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    v24 = *(_QWORD *)(a2 + 16);
    if (!v24)
      goto LABEL_10;
LABEL_6:
    v25 = a3[6];
    swift_bridgeObjectRetain(a2);
    v30 = a2;
    a1 = (uint64_t *)(a2 + 40);
    while (1)
    {
      v26 = *(a1 - 1);
      a2 = *a1;
      v27 = *(NSObject **)(v25 + 16);
      v28 = swift_allocObject(&unk_10107D010, 49, 7);
      *(_QWORD *)(v28 + 16) = v25;
      *(_QWORD *)(v28 + 24) = v26;
      *(_QWORD *)(v28 + 32) = a2;
      *(_QWORD *)(v28 + 40) = a4;
      *(_BYTE *)(v28 + 48) = 2;
      a6 = swift_allocObject(&unk_10107D038, 32, 7);
      *(_QWORD *)(a6 + 16) = sub_100553F14;
      *(_QWORD *)(a6 + 24) = v28;
      aBlock[4] = (uint64_t)sub_10005CBA4;
      aBlock[5] = a6;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10001D8B8;
      aBlock[3] = (uint64_t)&unk_10107D050;
      a3 = _Block_copy(aBlock);
      swift_bridgeObjectRetain_n(a2, 2);
      swift_retain();
      v29 = a4;
      swift_retain();
      swift_release();
      dispatch_sync(v27, a3);
      _Block_release(a3);
      LOBYTE(v27) = swift_isEscapingClosureAtFileLocation(a6, "", 120, 101, 35, 1);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if ((v27 & 1) != 0)
        break;
      a1 += 2;
      if (!--v24)
      {
        a2 = v30;
        swift_bridgeObjectRelease();
        a6 = v34;
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_12:
    swift_once(&qword_1010EA098, sub_10098F7D8);
  }
  swift_errorRelease(a1);
  swift_errorRelease(a1);

  swift_bridgeObjectRelease_n(a2, 2);
  v24 = *(_QWORD *)(a2 + 16);
  if (v24)
    goto LABEL_6;
LABEL_10:
  sub_100529600(a2, 0, 0xF000000000000000, v32, a4, a5, a6);
}

uint64_t sub_100527AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  id v57;
  NSString v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  id v73;
  NSString v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  _QWORD *v114;
  id v115;
  NSString v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v120;
  uint64_t v121;
  __n128 v122;
  char *v123;
  unint64_t *v124;
  _QWORD *v125;
  _QWORD *v126;
  unint64_t v127;
  uint64_t v128;
  char v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  NSObject *v135;
  os_log_type_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  os_log_type_t v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  id v153;
  NSString v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  NSString v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD v162[2];
  uint64_t v163;
  char *v164;
  __n128 v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  __n128 v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  char v177[24];
  char v178[24];
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  _QWORD *v184;
  char v185[8];
  uint64_t aBlock[6];
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;

  v3 = v2;
  v172 = (char *)type metadata accessor for DispatchWorkItemFlags(0);
  v171 = *((_QWORD *)v172 - 1);
  __chkstk_darwin(v172);
  v170 = (char *)v162 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = type metadata accessor for DispatchQoS(0);
  v168 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v167 = (char *)v162 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = _swiftEmptyArrayStorage;
  v189 = _swiftEmptyArrayStorage;
  v173.n128_u64[0] = (unint64_t)_swiftEmptyArrayStorage;
  v187 = _swiftEmptyArrayStorage;
  v8 = *(_QWORD *)(a1 + 16);
  v163 = a2;
  if (v8)
  {
    v176 = v3;
    v9 = *(_QWORD *)(a2 + 48);
    v11 = swift_bridgeObjectRetain(a1);
    v162[1] = a1;
    v12 = (unint64_t *)(a1 + 40);
    v11.n128_u64[0] = 141558275;
    v165 = v11;
    v164 = (char *)&type metadata for Any + 8;
    v166 = v9;
    do
    {
      v175 = v8;
      v13 = *(v12 - 1);
      v14 = *v12;
      __chkstk_darwin(v10);
      v162[-4] = 0;
      v162[-3] = v9;
      v162[-2] = v13;
      v162[-1] = v14;
      swift_bridgeObjectRetain(v14);
      v15 = v176;
      isUniquelyReferenced_nonNull_native = OS_dispatch_queue.sync<A>(execute:)(sub_10055588C, &v162[-6], &type metadata for Bool);
      v17 = aBlock[0];
      if (LOBYTE(aBlock[0]) == 1)
      {
        v18 = v189;
        swift_bridgeObjectRetain(v14);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)sub_1007C7438(0, v18[2] + 1, 1, v18);
          v18 = (_QWORD *)isUniquelyReferenced_nonNull_native;
        }
        v20 = v18[2];
        v19 = v18[3];
        if (v20 >= v19 >> 1)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)sub_1007C7438((_QWORD *)(v19 > 1), v20 + 1, 1, v18);
          v18 = (_QWORD *)isUniquelyReferenced_nonNull_native;
        }
        v18[2] = v20 + 1;
        v21 = &v18[2 * v20];
        v21[4] = v13;
        v21[5] = v14;
        v189 = v18;
      }
      __chkstk_darwin(isUniquelyReferenced_nonNull_native);
      v162[-4] = 1;
      v162[-3] = v9;
      v162[-2] = v13;
      v162[-1] = v14;
      OS_dispatch_queue.sync<A>(execute:)(sub_100555D04, &v162[-6], &type metadata for Bool);
      v176 = v15;
      if (LOBYTE(aBlock[0]) == 1)
      {
        v22 = v188;
        swift_bridgeObjectRetain(v14);
        if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
          v22 = sub_1007C7438(0, v22[2] + 1, 1, v22);
        v24 = v22[2];
        v23 = v22[3];
        if (v24 >= v23 >> 1)
          v22 = sub_1007C7438((_QWORD *)(v23 > 1), v24 + 1, 1, v22);
        v22[2] = v24 + 1;
        v25 = &v22[2 * v24];
        v25[4] = v13;
        v25[5] = v14;
        v188 = v22;
      }
      else if ((v17 & 1) == 0)
      {
        if (qword_1010EA098 != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v26 = type metadata accessor for Logger(0);
        sub_10001A9E8(v26, (uint64_t)qword_1011B7A18);
        swift_bridgeObjectRetain_n(v14, 2);
        v28 = Logger.logObject.getter(v27);
        v29 = static os_log_type_t.default.getter(v28);
        if (os_log_type_enabled(v28, v29))
        {
          v30 = swift_slowAlloc(22, -1);
          v31 = swift_slowAlloc(32, -1);
          aBlock[0] = v31;
          *(_DWORD *)v30 = v165.n128_u32[0];
          *(_QWORD *)(v30 + 4) = 1752392040;
          *(_WORD *)(v30 + 12) = 2081;
          swift_bridgeObjectRetain(v14);
          *(_QWORD *)(v30 + 14) = sub_100016940(v13, v14, aBlock);
          swift_bridgeObjectRelease_n(v14, 3);
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Received Key: No pending subscription for %{private,mask.hash}s", (uint8_t *)v30, 0x16u);
          swift_arrayDestroy(v31, 1, v164);
          swift_slowDealloc(v31, -1, -1);
          swift_slowDealloc(v30, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v14, 2);
        }
        v32 = v187;
        swift_bridgeObjectRetain(v14);
        if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
          v32 = sub_1007C7438(0, v32[2] + 1, 1, v32);
        v34 = v32[2];
        v33 = v32[3];
        if (v34 >= v33 >> 1)
          v32 = sub_1007C7438((_QWORD *)(v33 > 1), v34 + 1, 1, v32);
        v32[2] = v34 + 1;
        v35 = &v32[2 * v34];
        v35[4] = v13;
        v35[5] = v14;
        v187 = v32;
      }
      if (qword_1010EA428 != -1)
        swift_once(&qword_1010EA428, sub_100C48554);
      v12 += 2;
      v36 = qword_1011B7F60;
      v174 = *(_QWORD **)(qword_1011B7F60 + 16);
      v37 = swift_allocObject(&unk_10107E258, 41, 7);
      *(_QWORD *)(v37 + 16) = v36;
      *(_QWORD *)(v37 + 24) = v13;
      *(_QWORD *)(v37 + 32) = v14;
      *(_BYTE *)(v37 + 40) = 1;
      aBlock[4] = (uint64_t)sub_1005558C0;
      aBlock[5] = v37;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100016FB8;
      aBlock[3] = (uint64_t)&unk_10107E270;
      v38 = _Block_copy(aBlock);
      swift_retain_n(v36, 2);
      swift_bridgeObjectRetain(v14);
      v39 = v167;
      static DispatchQoS.unspecified.getter(v40);
      v184 = _swiftEmptyArrayStorage;
      v41 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v42 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v43 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v173.n128_u64[0] = v14;
      v44 = v170;
      v45 = v172;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v184, v42, v43, v172, v41);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v39, v44, v38);
      _Block_release(v38);
      (*(void (**)(char *, char *))(v171 + 8))(v44, v45);
      (*(void (**)(char *, uint64_t))(v168 + 8))(v39, v169);
      swift_release();
      swift_bridgeObjectRelease();
      v10 = swift_release();
      v8 = v175 - 1;
      v9 = v166;
    }
    while (v175 != 1);
    swift_bridgeObjectRelease();
    v173.n128_u64[0] = (unint64_t)v189;
    v3 = v176;
  }
  if (!*(_QWORD *)(v173.n128_u64[0] + 16))
    goto LABEL_37;
  v176 = v3;
  if (qword_1010EA098 != -1)
    goto LABEL_101;
  while (1)
  {
    v46 = type metadata accessor for Logger(0);
    v47 = sub_10001A9E8(v46, (uint64_t)qword_1011B7A18);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.default.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(12, -1);
      v51 = swift_slowAlloc(32, -1);
      aBlock[0] = v51;
      *(_DWORD *)v50 = 136315138;
      swift_beginAccess(&v189, v177, 0, 0);
      swift_bridgeObjectRetain(v189);
      v53 = Array.description.getter(v52, &type metadata for String);
      v55 = v54;
      swift_bridgeObjectRelease();
      v184 = (_QWORD *)sub_100016940(v53, v55, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v50 + 4, v50 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Received Key: Subscribing in proactive to %s", v50, 0xCu);
      swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v50, -1, -1);
    }

    swift_beginAccess(&v189, aBlock, 0, 0);
    v56 = v189;
    if (v189[2])
    {
      v57 = objc_msgSend(objc_allocWithZone((Class)SPSecureLocationsSubscriptionContext), "init", swift_bridgeObjectRetain(v189).n128_f64[0]);
      objc_msgSend(v57, "setSubscriptionMode:", 0);
      v58 = String._bridgeToObjectiveC()();
      objc_msgSend(v57, "setClientApp:", v58);

      objc_msgSend(v57, "setFetchMode:", 0);
      v59 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v59);
      v60 = v163;
      v162[-4] = v56;
      v162[-3] = v60;
      v162[-2] = v57;
      v162[-1] = 0;
      v61 = v176;
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.subAfterKeysRecv", 46, 2, sub_1005558D0, &v162[-6], &type metadata for () + 1);
      v3 = v61;
      swift_bridgeObjectRelease();

    }
    else
    {
      v3 = v176;
    }
LABEL_37:
    if (v188[2])
    {
      v176 = v3;
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v62 = type metadata accessor for Logger(0);
      v63 = sub_10001A9E8(v62, (uint64_t)qword_1011B7A18);
      v64 = Logger.logObject.getter(v63);
      v65 = static os_log_type_t.default.getter(v64);
      if (os_log_type_enabled(v64, v65))
      {
        v66 = (uint8_t *)swift_slowAlloc(12, -1);
        v67 = (_QWORD *)swift_slowAlloc(32, -1);
        v184 = v67;
        *(_DWORD *)v66 = 136315138;
        swift_beginAccess(&v188, v178, 0, 0);
        swift_bridgeObjectRetain(v188);
        v69 = Array.description.getter(v68, &type metadata for String);
        v71 = v70;
        swift_bridgeObjectRelease();
        v182 = (_QWORD *)sub_100016940(v69, v71, (uint64_t *)&v184);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, &v183, v66 + 4, v66 + 12);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "Received Key: Subscribing in shallow to %s", v66, 0xCu);
        swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v67, -1, -1);
        swift_slowDealloc(v66, -1, -1);
      }

      swift_beginAccess(&v188, &v184, 0, 0);
      v72 = v188;
      if (v188[2])
      {
        v73 = objc_msgSend(objc_allocWithZone((Class)SPSecureLocationsSubscriptionContext), "init", swift_bridgeObjectRetain(v188).n128_f64[0]);
        objc_msgSend(v73, "setSubscriptionMode:", 1);
        v74 = String._bridgeToObjectiveC()();
        objc_msgSend(v73, "setClientApp:", v74);

        objc_msgSend(v73, "setFetchMode:", 0);
        v75 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v75);
        v76 = v163;
        v162[-4] = v72;
        v162[-3] = v76;
        v162[-2] = v73;
        v162[-1] = 1;
        v77 = v176;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.subAfterKeysRecv", 46, 2, sub_100555BEC, &v162[-6], &type metadata for () + 1);
        v3 = v77;
        swift_bridgeObjectRelease();

      }
      else
      {
        v3 = v176;
      }
    }
    if (!v187[2])
    {
      swift_bridgeObjectRelease();
LABEL_67:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v78 = sub_10001A9A8(&qword_1010FA368);
    v79 = v3;
    unsafeFromAsyncTask<A>(_:)(&unk_10110C0F8, 0, v78);
    v80 = v3;
    if (v3)
    {
      sub_1000FE298(v3, 1);
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v81 = type metadata accessor for Logger(0);
      sub_10001A9E8(v81, (uint64_t)qword_1011B7A18);
      sub_1000FE298(v3, 1);
      v82 = sub_1000FE298(v3, 1);
      v83 = Logger.logObject.getter(v82);
      v84 = static os_log_type_t.default.getter(v83);
      if (os_log_type_enabled(v83, v84))
      {
        v85 = swift_slowAlloc(22, -1);
        v86 = (_QWORD *)swift_slowAlloc(64, -1);
        v182 = v86;
        *(_DWORD *)v85 = 136446466;
        v180 = v79;
        sub_1000FE298(v79, 1);
        v87 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        v88 = String.init<A>(describing:)(&v180, v87);
        v180 = sub_100016940(v88, v89, (uint64_t *)&v182);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, &v181, v85 + 4, v85 + 12);
        swift_bridgeObjectRelease();
        swift_errorRelease(v79);
        sub_1000FE214(v79, 1);
        *(_WORD *)(v85 + 12) = 2080;
        swift_beginAccess(&v187, &v180, 0, 0);
        swift_bridgeObjectRetain(v187);
        v91 = Array.description.getter(v90, &type metadata for String);
        v93 = v92;
        swift_bridgeObjectRelease();
        v179 = sub_100016940(v91, v93, (uint64_t *)&v182);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &v180, v85 + 14, v85 + 22);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v83, v84, "Received Key: Unable to get following handles %{public}s,\nso subscribing with intent to notify server of keys received %s", (uint8_t *)v85, 0x16u);
        swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v86, -1, -1);
        swift_slowDealloc(v85, -1, -1);
      }
      else
      {
        swift_errorRelease(v79);
        sub_1000FE214(v79, 1);
      }

      swift_beginAccess(&v187, &v182, 0, 0);
      v114 = v187;
      if (!v187[2])
      {
        sub_1000FE214(v79, 1);
        sub_1000FE214(v79, 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v115 = objc_msgSend(objc_allocWithZone((Class)SPSecureLocationsSubscriptionContext), "init", swift_bridgeObjectRetain(v187).n128_f64[0]);
      objc_msgSend(v115, "setSubscriptionMode:", 0);
      v116 = String._bridgeToObjectiveC()();
      objc_msgSend(v115, "setClientApp:", v116);

      objc_msgSend(v115, "setFetchMode:", 0);
      v117 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v117);
      v118 = v163;
      v162[-4] = v114;
      v162[-3] = v118;
      v162[-2] = v115;
      v162[-1] = 0;
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.subAfterKeysRecv", 46, 2, sub_100555BEC, &v162[-6], &type metadata for () + 1);

      sub_1000FE214(v80, 1);
      swift_bridgeObjectRelease();
      sub_1000FE214(v80, 1);
      swift_bridgeObjectRelease();
      goto LABEL_67;
    }
    v94 = (uint64_t)v182;
    v95 = qword_1010EA010;
    swift_bridgeObjectRetain(v182);
    if (v95 != -1)
      v96 = swift_once(&qword_1010EA010, sub_1008CC734);
    __chkstk_darwin(v96);
    v162[-2] = v94;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1005558EC, &v162[-4], v97, &type metadata for () + 1, &type metadata for () + 1);
    v176 = 0;
    sub_1000FE214(v94, 0);
    v98 = *(_QWORD *)(v94 + 16);
    v99 = _swiftEmptyArrayStorage;
    if (!v98)
      break;
    v182 = _swiftEmptyArrayStorage;
    sub_10009A2F4(0, v98, 0);
    v99 = v182;
    v100 = sub_1003B2D14(v94);
    v102 = v101;
    v104 = v103 & 1;
    v174 = (_QWORD *)(v94 + 56);
    while ((v100 & 0x8000000000000000) == 0 && v100 < 1 << *(_BYTE *)(v94 + 32))
    {
      if (((*(_QWORD *)((char *)v174 + (((unint64_t)v100 >> 3) & 0xFFFFFFFFFFFFF8)) >> v100) & 1) == 0)
        goto LABEL_99;
      if (*(_DWORD *)(v94 + 36) != (_DWORD)v102)
        goto LABEL_100;
      LODWORD(v175) = v104;
      v105 = *(_QWORD *)(v94 + 48) + 40 * v100;
      v106 = *(_QWORD *)(v105 + 24);
      v107 = *(_QWORD *)(v105 + 32);
      v182 = v99;
      v108 = v99[2];
      v109 = v99[3];
      swift_bridgeObjectRetain(v107);
      if (v108 >= v109 >> 1)
      {
        sub_10009A2F4(v109 > 1, v108 + 1, 1);
        v99 = v182;
      }
      v99[2] = v108 + 1;
      v110 = &v99[2 * v108];
      v110[4] = v106;
      v110[5] = v107;
      v111 = sub_1003B2DB8(v100, v102, v175 & 1, v94);
      v100 = v111;
      v102 = v112;
      v104 = v113 & 1;
      if (!--v98)
      {
        sub_1000FE2A4(v111, v112, v104);
        goto LABEL_70;
      }
    }
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    swift_once(&qword_1010EA098, sub_10098F7D8);
  }
LABEL_70:
  v171 = v94;
  v120 = sub_100CA7D78((uint64_t)v99);
  swift_bridgeObjectRelease();
  v121 = v187[2];
  if (v121)
  {
    v122 = swift_bridgeObjectRetain(v187);
    v170 = v123;
    v124 = (unint64_t *)(v123 + 40);
    v125 = _swiftEmptyArrayStorage;
    v122.n128_u64[0] = 136315138;
    v173 = v122;
    v172 = (char *)&type metadata for Any + 8;
    v126 = _swiftEmptyArrayStorage;
    v175 = v120;
    while (1)
    {
      v128 = *(v124 - 1);
      v127 = *v124;
      swift_bridgeObjectRetain(*v124);
      v129 = sub_100A06590(v128, v127, v120);
      swift_bridgeObjectRetain(v127);
      if ((v129 & 1) != 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v126) & 1) == 0)
          v126 = sub_1007C7438(0, v126[2] + 1, 1, v126);
        v131 = v126[2];
        v130 = v126[3];
        if (v131 >= v130 >> 1)
          v126 = sub_1007C7438((_QWORD *)(v130 > 1), v131 + 1, 1, v126);
        v126[2] = v131 + 1;
        v132 = &v126[2 * v131];
        v132[4] = v128;
        v132[5] = v127;
        if (qword_1010EA098 != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v133 = type metadata accessor for Logger(0);
        sub_10001A9E8(v133, (uint64_t)qword_1011B7A18);
        swift_bridgeObjectRetain(v127);
        v135 = Logger.logObject.getter(v134);
        v136 = static os_log_type_t.default.getter(v135);
        if (os_log_type_enabled(v135, v136))
        {
          v137 = swift_slowAlloc(12, -1);
          v174 = v126;
          v138 = v125;
          v139 = v137;
          v140 = (_QWORD *)swift_slowAlloc(32, -1);
          v182 = v140;
          *(_DWORD *)v139 = v173.n128_u32[0];
          swift_bridgeObjectRetain(v127);
          *(_QWORD *)(v139 + 4) = sub_100016940(v128, v127, (uint64_t *)&v182);
          swift_bridgeObjectRelease_n(v127, 3);
          _os_log_impl((void *)&_mh_execute_header, v135, v136, "Received Key: Subscribing in proactive from following: %s", (uint8_t *)v139, 0xCu);
          swift_arrayDestroy(v140, 1, v172);
          swift_slowDealloc(v140, -1, -1);
          v141 = v139;
          v125 = v138;
          v126 = v174;
LABEL_91:
          swift_slowDealloc(v141, -1, -1);

          goto LABEL_73;
        }
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v125) & 1) == 0)
          v125 = sub_1007C7438(0, v125[2] + 1, 1, v125);
        v143 = v125[2];
        v142 = v125[3];
        if (v143 >= v142 >> 1)
          v125 = sub_1007C7438((_QWORD *)(v142 > 1), v143 + 1, 1, v125);
        v125[2] = v143 + 1;
        v144 = &v125[2 * v143];
        v144[4] = v128;
        v144[5] = v127;
        if (qword_1010EA098 != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v145 = type metadata accessor for Logger(0);
        sub_10001A9E8(v145, (uint64_t)qword_1011B7A18);
        swift_bridgeObjectRetain(v127);
        v135 = Logger.logObject.getter(v146);
        v147 = static os_log_type_t.default.getter(v135);
        if (os_log_type_enabled(v135, v147))
        {
          v148 = swift_slowAlloc(12, -1);
          v149 = (_QWORD *)swift_slowAlloc(32, -1);
          v174 = v126;
          v150 = v125;
          v151 = v149;
          v182 = v149;
          *(_DWORD *)v148 = v173.n128_u32[0];
          swift_bridgeObjectRetain(v127);
          *(_QWORD *)(v148 + 4) = sub_100016940(v128, v127, (uint64_t *)&v182);
          swift_bridgeObjectRelease_n(v127, 3);
          _os_log_impl((void *)&_mh_execute_header, v135, v147, "Received Key: Subscribing with intent to notify server of keys received: %s", (uint8_t *)v148, 0xCu);
          swift_arrayDestroy(v151, 1, (char *)&type metadata for Any + 8);
          v152 = v151;
          v125 = v150;
          v126 = v174;
          swift_slowDealloc(v152, -1, -1);
          v141 = v148;
          goto LABEL_91;
        }
      }

      swift_bridgeObjectRelease_n(v127, 2);
LABEL_73:
      v120 = v175;
      v124 += 2;
      if (!--v121)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v126[2])
          goto LABEL_93;
LABEL_96:
        swift_bridgeObjectRelease();
        if (!v125[2])
          goto LABEL_97;
LABEL_94:
        v158 = objc_msgSend(objc_allocWithZone((Class)SPSecureLocationsSubscriptionContext), "init");
        objc_msgSend(v158, "setSubscriptionMode:", 5);
        v159 = String._bridgeToObjectiveC()();
        objc_msgSend(v158, "setClientApp:", v159);

        objc_msgSend(v158, "setFetchMode:", 0);
        v160 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v160);
        v161 = v163;
        v162[-4] = v125;
        v162[-3] = v161;
        v162[-2] = v158;
        v162[-1] = 5;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.subAfterKeysRecv", 46, 2, sub_100555BEC, &v162[-6], &type metadata for () + 1);

        sub_1000FE214(v171, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
  }
  swift_bridgeObjectRelease();
  v125 = _swiftEmptyArrayStorage;
  v126 = _swiftEmptyArrayStorage;
  if (!_swiftEmptyArrayStorage[2])
    goto LABEL_96;
LABEL_93:
  v153 = objc_msgSend(objc_allocWithZone((Class)SPSecureLocationsSubscriptionContext), "init");
  objc_msgSend(v153, "setSubscriptionMode:", 5);
  v154 = String._bridgeToObjectiveC()();
  objc_msgSend(v153, "setClientApp:", v154);

  objc_msgSend(v153, "setFetchMode:", 0);
  v155 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v155);
  v156 = v163;
  v162[-4] = v126;
  v162[-3] = v156;
  v162[-2] = v153;
  v162[-1] = 5;
  v157 = v176;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.subAfterKeysRecv", 46, 2, sub_100555BEC, &v162[-6], &type metadata for () + 1);
  v176 = v157;
  swift_bridgeObjectRelease();

  if (v125[2])
    goto LABEL_94;
LABEL_97:
  sub_1000FE214(v171, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1005293CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  id v16;
  char isEscapingClosureAtFileLocation;
  id v18;
  uint64_t v21;
  uint64_t v23;
  NSObject *queue;
  _QWORD aBlock[6];

  v5 = a5;
  v6 = a3;
  v7 = a2;
  v8 = a1;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
  {
    v23 = *(_QWORD *)(a3 + 48);
    swift_bridgeObjectRetain(a2);
    v21 = v7;
    v10 = (uint64_t *)(v7 + 40);
    while (1)
    {
      v11 = *(v10 - 1);
      v12 = *v10;
      queue = *(NSObject **)(v23 + 16);
      v13 = (_QWORD *)swift_allocObject(&unk_10107E2A8, 48, 7);
      v13[2] = v23;
      v13[3] = v11;
      v13[4] = v12;
      v13[5] = a4;
      v14 = swift_allocObject(&unk_10107E2D0, 32, 7);
      *(_QWORD *)(v14 + 16) = sub_100555C04;
      *(_QWORD *)(v14 + 24) = v13;
      aBlock[4] = sub_10005CBA4;
      aBlock[5] = v14;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10001D8B8;
      aBlock[3] = &unk_10107E2E8;
      v15 = _Block_copy(aBlock);
      swift_bridgeObjectRetain_n(v12, 2);
      v16 = a4;
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(queue, v15);
      _Block_release(v15);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 120, 116, 35, 1);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
        break;
      v10 += 2;
      if (!--v9)
      {
        v7 = v21;
        swift_bridgeObjectRelease();
        v6 = a3;
        v5 = a5;
        v8 = a1;
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRetain(v7);
    swift_retain();
    swift_retain();
    v18 = a4;
    sub_100548664(v7, v18, 0, v6, v8, v5, v7, v6, v18);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

  }
}

void sub_100529600(uint64_t a1, uint64_t a2, unint64_t a3, char *a4, void *a5, void (*a6)(id, uint64_t), uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  void **v29;
  void *v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void **v54;
  char v55;
  id v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  char *v65;
  void **v66;
  unint64_t v67;
  unint64_t v68;
  int64_t v69;
  unint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint64_t v88;
  void **v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  id v94;
  id v95;
  unint64_t v96;
  double v97;
  uint64_t v98;
  id v99;
  Class isa;
  id v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  NSObject *v108;
  os_log_type_t v109;
  _BOOL4 v110;
  uint8_t *v111;
  void **v112;
  void **v113;
  void **v114;
  uint64_t v115;
  void **v116;
  uint64_t *v117;
  void **v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void **v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  void **v139;
  uint64_t v140;
  void **v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  int64_t v146;
  int64_t v147;
  unint64_t v148;
  unint64_t v149;
  void ***v150;
  uint64_t v151;
  void **v152;
  unint64_t v154;
  int64_t v155;
  uint64_t v156;
  NSObject *v157;
  os_log_type_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD v163[3];
  void **v164;
  void **v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  id v170;
  uint64_t v171;
  void (*v172)(id, uint64_t);
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  void **v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  void **aBlock;
  uint64_t v187;
  uint64_t (*v188)(uint64_t);
  char *v189;
  uint64_t (*v190)();
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;

  v8 = v7;
  v171 = a7;
  v172 = a6;
  v170 = a5;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v180 = *(_QWORD *)(v13 - 8);
  v181 = (void **)v13;
  __chkstk_darwin(v13);
  v179 = (char *)v163 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v177 = *(_QWORD *)(v15 - 8);
  v178 = v15;
  __chkstk_darwin(v15);
  v176 = (char *)v163 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (_QWORD *)((char *)v163 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *(void **)(v8 + 296);
  *v20 = v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)(v20);
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) != 0)
  {
    v23 = type metadata accessor for JSONDecoder(0);
    v24 = swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    v173 = JSONDecoder.init()(v24);
    v25 = *(_QWORD *)(a1 + 16);
    v169 = a4;
    if (v25)
    {
      v175 = a3;
      v26 = v8;
      v27 = a2;
      aBlock = (void **)_swiftEmptyArrayStorage;
      sub_10009A2F4(0, v25, 0);
      v28 = aBlock;
      v29 = (void **)(a1 + 40);
      do
      {
        v31 = *(v29 - 1);
        v30 = *v29;
        aBlock = v28;
        v32 = (unint64_t)v28[2];
        v33 = (unint64_t)v28[3];
        swift_bridgeObjectRetain(v30);
        if (v32 >= v33 >> 1)
        {
          sub_10009A2F4(v33 > 1, v32 + 1, 1);
          v28 = aBlock;
        }
        v29 += 2;
        v28[2] = (void *)(v32 + 1);
        v34 = &v28[2 * v32];
        v34[4] = v31;
        v34[5] = v30;
        --v25;
      }
      while (v25);
      a2 = v27;
      v8 = v26;
      a3 = v175;
    }
    else
    {
      v28 = (void **)_swiftEmptyArrayStorage;
    }
    v35 = sub_100CA7D78((uint64_t)v28);
    swift_bridgeObjectRelease();
    v193 = v35;
    if (a3 >> 60 == 15)
    {
      swift_bridgeObjectRetain(v35);
      v37 = sub_10044275C(v36);
      swift_bridgeObjectRelease();
      v192 = (uint64_t)_swiftEmptyArrayStorage;
      v38 = *(char **)(v37 + 16);
      if (v38)
      {
        v35 = *(_QWORD *)(type metadata accessor for SecureLocation(0) - 8);
        v39 = v37 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80));
        v40 = v37;
        v41 = qword_1010EA0A8;
        v168 = v40;
        swift_bridgeObjectRetain(v40);
        if (v41 == -1)
          goto LABEL_12;
        goto LABEL_111;
      }
      swift_bridgeObjectRelease();
LABEL_26:
      v61 = *(_QWORD *)(v35 + 56);
      v174 = v35 + 56;
      v62 = 1 << *(_BYTE *)(v35 + 32);
      v63 = -1;
      if (v62 < 64)
        v63 = ~(-1 << v62);
      v39 = v63 & v61;
      v175 = (unint64_t)(v62 + 63) >> 6;
      swift_bridgeObjectRetain_n(v35, 2);
      v64 = 0;
      v65 = v176;
      v66 = v181;
      if (v39)
      {
LABEL_29:
        v67 = __clz(__rbit64(v39));
        v39 &= v39 - 1;
        v68 = v67 | (v64 << 6);
        goto LABEL_48;
      }
      while (1)
      {
        v69 = v64 + 1;
        if (__OFADD__(v64, 1))
        {
          __break(1u);
          goto LABEL_107;
        }
        if (v69 >= v175)
          goto LABEL_52;
        v70 = *(_QWORD *)(v174 + 8 * v69);
        ++v64;
        if (!v70)
        {
          v64 = v69 + 1;
          if (v69 + 1 >= v175)
            goto LABEL_52;
          v70 = *(_QWORD *)(v174 + 8 * v64);
          if (!v70)
          {
            v64 = v69 + 2;
            if (v69 + 2 >= v175)
              goto LABEL_52;
            v70 = *(_QWORD *)(v174 + 8 * v64);
            if (!v70)
            {
              v64 = v69 + 3;
              if (v69 + 3 >= v175)
                goto LABEL_52;
              v70 = *(_QWORD *)(v174 + 8 * v64);
              if (!v70)
              {
                v64 = v69 + 4;
                if (v69 + 4 >= v175)
                  goto LABEL_52;
                v70 = *(_QWORD *)(v174 + 8 * v64);
                if (!v70)
                {
                  v71 = v69 + 5;
                  if (v71 >= v175)
                  {
LABEL_52:
                    swift_release();
                    swift_bridgeObjectRelease();
                    if (qword_1010EA098 != -1)
                      goto LABEL_109;
                    goto LABEL_53;
                  }
                  v70 = *(_QWORD *)(v174 + 8 * v71);
                  if (!v70)
                  {
                    while (1)
                    {
                      v64 = v71 + 1;
                      if (__OFADD__(v71, 1))
                        break;
                      if (v64 >= v175)
                        goto LABEL_52;
                      v70 = *(_QWORD *)(v174 + 8 * v64);
                      ++v71;
                      if (v70)
                        goto LABEL_47;
                    }
                    __break(1u);
LABEL_111:
                    swift_once(&qword_1010EA0A8, sub_10098F82C);
LABEL_12:
                    v42 = &qword_1010EA000;
                    v182 = *(_QWORD *)(v35 + 72);
                    do
                    {
                      swift_retain();
                      v55 = sub_100995F58(v39);
                      swift_release();
                      if ((v55 & 1) != 0)
                      {
                        v56 = sub_100AA6310();
                        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v56);
                        v58 = *(_QWORD *)((v192 & 0xFFFFFFFFFFFFFF8) + 0x10);
                        v57 = *(_QWORD *)((v192 & 0xFFFFFFFFFFFFFF8) + 0x18);
                        if (v58 >= v57 >> 1)
                          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1);
                        v59 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, v56);
                        specialized Array._endMutation()(v59);
                        if (v42[133] != -1)
                          swift_once(&qword_1010EA428, sub_100C48554);
                        v44 = *(_QWORD *)v39;
                        v45 = *(_QWORD *)(v39 + 8);
                        swift_retain();
                        sub_100C49D84(v44, v45, 1);
                        swift_release();
                      }
                      else
                      {
                        v175 = (uint64_t)v38;
                        if (v42[133] != -1)
                          swift_once(&qword_1010EA428, sub_100C48554);
                        v43 = qword_1011B7F60;
                        v44 = *(_QWORD *)v39;
                        v45 = *(_QWORD *)(v39 + 8);
                        v174 = *(_QWORD *)(qword_1011B7F60 + 16);
                        v46 = swift_allocObject(&unk_10107DDA8, 41, 7);
                        *(_QWORD *)(v46 + 16) = v43;
                        *(_QWORD *)(v46 + 24) = v44;
                        *(_QWORD *)(v46 + 32) = v45;
                        *(_BYTE *)(v46 + 40) = 2;
                        v190 = sub_10016C900;
                        v191 = v46;
                        aBlock = _NSConcreteStackBlock;
                        v187 = 1107296256;
                        v188 = sub_100016FB8;
                        v189 = (char *)&unk_10107DDC0;
                        v47 = _Block_copy(&aBlock);
                        swift_retain_n(v43, 2);
                        swift_bridgeObjectRetain(v45);
                        v48 = v176;
                        static DispatchQoS.unspecified.getter(v49);
                        v184 = _swiftEmptyArrayStorage;
                        v50 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
                        v51 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
                        v52 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
                        v53 = v179;
                        v54 = v181;
                        dispatch thunk of SetAlgebra.init<A>(_:)(&v184, v51, v52, v181, v50);
                        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v48, v53, v47);
                        _Block_release(v47);
                        (*(void (**)(char *, void **))(v180 + 8))(v53, v54);
                        (*(void (**)(char *, uint64_t))(v177 + 8))(v48, v178);
                        swift_release();
                        swift_release();
                        v38 = (char *)v175;
                        v42 = &qword_1010EA000;
                      }
                      swift_bridgeObjectRetain(v45);
                      sub_100C8346C(v44, v45);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v39 += v182;
                      --v38;
                    }
                    while (v38);
                    swift_bridgeObjectRelease_n(v168, 2);
                    v35 = v193;
                    goto LABEL_26;
                  }
                  v64 = v71;
                }
              }
            }
          }
        }
LABEL_47:
        v39 = (v70 - 1) & v70;
        v68 = __clz(__rbit64(v70)) + (v64 << 6);
LABEL_48:
        v182 = v64;
        v72 = v35;
        v73 = (uint64_t *)(*(_QWORD *)(v35 + 48) + 16 * v68);
        v74 = *v73;
        v75 = v73[1];
        if (qword_1010EA428 != -1)
          swift_once(&qword_1010EA428, sub_100C48554);
        v76 = qword_1011B7F60;
        v77 = swift_allocObject(&unk_10107DDF8, 41, 7);
        *(_QWORD *)(v77 + 16) = v76;
        *(_QWORD *)(v77 + 24) = v74;
        *(_QWORD *)(v77 + 32) = v75;
        *(_BYTE *)(v77 + 40) = 0;
        v190 = sub_100555C00;
        v191 = v77;
        aBlock = _NSConcreteStackBlock;
        v187 = 1107296256;
        v188 = sub_100016FB8;
        v189 = (char *)&unk_10107DE10;
        v38 = (char *)_Block_copy(&aBlock);
        swift_retain_n(v76, 2);
        swift_bridgeObjectRetain(v75);
        static DispatchQoS.unspecified.getter(v78);
        v184 = _swiftEmptyArrayStorage;
        v79 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v80 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v81 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v82 = v179;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v184, v80, v81, v66, v79);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v65, v82, v38);
        _Block_release(v38);
        (*(void (**)(char *, void **))(v180 + 8))(v82, v66);
        (*(void (**)(char *, uint64_t))(v177 + 8))(v65, v178);
        swift_release();
        swift_release();
        v35 = v72;
        v64 = v182;
        if (v39)
          goto LABEL_29;
      }
    }
    sub_10001BBBC(a2, a3);
    v60 = sub_100555454();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for SecureLocationsFetchResponseBody, a2, a3, &type metadata for SecureLocationsFetchResponseBody, v60);
    v102 = (uint64_t)aBlock;
    v182 = v187;
    v103 = (unint64_t)v188;
    v104 = v189;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v105 = type metadata accessor for Logger(0);
    v106 = sub_10001A9E8(v105, (uint64_t)qword_1011B7A18);
    swift_bridgeObjectRetain_n(v104, 2);
    swift_bridgeObjectRetain_n(v102, 2);
    swift_bridgeObjectRetain_n(v103, 2);
    v108 = Logger.logObject.getter(v107);
    v109 = static os_log_type_t.default.getter(v108);
    v110 = os_log_type_enabled(v108, v109);
    v168 = a2;
    v167 = v106;
    if (v110)
    {
      v111 = (uint8_t *)swift_slowAlloc(12, -1);
      v112 = (void **)swift_slowAlloc(32, -1);
      v169 = v104;
      v113 = v112;
      aBlock = v112;
      v166 = v102;
      *(_DWORD *)v111 = 136315138;
      swift_bridgeObjectRetain(v103);
      v184 = (_QWORD *)sub_100016940(v182, v103, (uint64_t *)&aBlock);
      v102 = v166;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, &v185, v111 + 4, v111 + 12);
      swift_bridgeObjectRelease_n(v169, 2);
      swift_bridgeObjectRelease_n(v102, 2);
      swift_bridgeObjectRelease_n(v103, 3);
      _os_log_impl((void *)&_mh_execute_header, v108, v109, "Decoded SubscribeAndFetch response successfully %s. Now attempting to decrypt", v111, 0xCu);
      swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
      v114 = v113;
      v104 = v169;
      swift_slowDealloc(v114, -1, -1);
      swift_slowDealloc(v111, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v104, 2);
      swift_bridgeObjectRelease_n(v103, 2);
      swift_bridgeObjectRelease_n(v102, 2);
    }
    v165 = *(void ***)(v193 + 16);
    v175 = a3;
    v174 = v8;
    if (v104)
    {
      swift_bridgeObjectRetain(v104);
      sub_10052B438(v115);
      v116 = (void **)*((_QWORD *)v104 + 2);
      if (v116)
      {
        v163[1] = v103;
        v166 = v102;
        v163[2] = 0;
        swift_bridgeObjectRetain(v104);
        v169 = v104;
        v117 = (uint64_t *)(v104 + 40);
        v164 = v116;
        v118 = v116;
        v119 = v179;
        do
        {
          v120 = *(v117 - 1);
          v121 = *v117;
          swift_bridgeObjectRetain(*v117);
          sub_100C8346C(v120, v121);
          swift_bridgeObjectRelease();
          if (qword_1010EA428 != -1)
            swift_once(&qword_1010EA428, sub_100C48554);
          v117 += 2;
          v122 = qword_1011B7F60;
          v182 = *(_QWORD *)(qword_1011B7F60 + 16);
          v123 = swift_allocObject(&unk_10107DE70, 41, 7);
          *(_QWORD *)(v123 + 16) = v122;
          *(_QWORD *)(v123 + 24) = v120;
          *(_QWORD *)(v123 + 32) = v121;
          *(_BYTE *)(v123 + 40) = 3;
          v190 = sub_100555C00;
          v191 = v123;
          aBlock = _NSConcreteStackBlock;
          v187 = 1107296256;
          v188 = sub_100016FB8;
          v189 = (char *)&unk_10107DE88;
          v124 = _Block_copy(&aBlock);
          swift_retain_n(v122, 2);
          swift_bridgeObjectRetain(v121);
          v125 = v176;
          static DispatchQoS.unspecified.getter(v126);
          v184 = _swiftEmptyArrayStorage;
          v127 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v128 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
          v129 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
          v130 = v181;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v184, v128, v129, v181, v127);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v125, v119, v124);
          _Block_release(v124);
          (*(void (**)(char *, void **))(v180 + 8))(v119, v130);
          (*(void (**)(char *, uint64_t))(v177 + 8))(v125, v178);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          v118 = (void **)((char *)v118 - 1);
        }
        while (v118);
        swift_bridgeObjectRelease();
        v102 = v166;
      }
      else
      {
        v164 = 0;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v164 = 0;
    }
    v131 = sub_100444148(v102);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v132 = sub_100545FA4((uint64_t)v131, (uint64_t)&v193);
    swift_bridgeObjectRelease();
    v133 = v193;
    v134 = *(_QWORD *)(v193 + 16);
    v181 = (void **)v132[2];
    v182 = v134;
    v135 = swift_allocObject(&unk_10107DE48, 24, 7);
    swift_bridgeObjectRetain(v133);
    v137 = sub_10044275C(v136);
    swift_bridgeObjectRelease();
    v138 = sub_1005461F8(v137, (uint64_t)&v193);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v135 + 16) = v138;
    v139 = (void **)v138[2];
    v140 = v193;
    v141 = *(void ***)(v193 + 16);
    v142 = v193 + 56;
    v143 = 1 << *(_BYTE *)(v193 + 32);
    v144 = -1;
    if (v143 < 64)
      v144 = ~(-1 << v143);
    v145 = v144 & *(_QWORD *)(v193 + 56);
    v146 = (unint64_t)(v143 + 63) >> 6;
    swift_bridgeObjectRetain_n(v193, 2);
    v147 = 0;
    while (1)
    {
      if (v145)
      {
        v148 = __clz(__rbit64(v145));
        v145 &= v145 - 1;
        v149 = v148 | (v147 << 6);
      }
      else
      {
        if (__OFADD__(v147++, 1))
        {
LABEL_107:
          __break(1u);
          break;
        }
        if (v147 >= v146)
        {
LABEL_102:
          swift_release();
          v156 = swift_bridgeObjectRelease();
          v157 = Logger.logObject.getter(v156);
          v158 = static os_log_type_t.default.getter(v157);
          if (os_log_type_enabled(v157, v158))
          {
            v159 = swift_slowAlloc(62, -1);
            *(_DWORD *)v159 = 134219264;
            aBlock = v165;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v187, v159 + 4, v159 + 12);
            *(_WORD *)(v159 + 12) = 2048;
            aBlock = v164;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v187, v159 + 14, v159 + 22);
            *(_WORD *)(v159 + 22) = 2048;
            aBlock = v181;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v187, v159 + 24, v159 + 32);
            *(_WORD *)(v159 + 32) = 2048;
            aBlock = (void **)v182;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v187, v159 + 34, v159 + 42);
            *(_WORD *)(v159 + 42) = 2048;
            aBlock = v139;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v187, v159 + 44, v159 + 52);
            *(_WORD *)(v159 + 52) = 2048;
            aBlock = v141;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v187, v159 + 54, v159 + 62);
            _os_log_impl((void *)&_mh_execute_header, v157, v158, "subscribeAndFetch location counts. requested %ld failed %ld fromServer %ld notOnServer %ld notOnServerButInCache %ld noLocationFound %ld", (uint8_t *)v159, 0x3Eu);
            swift_slowDealloc(v159, -1, -1);
          }

          v160 = type metadata accessor for Transaction(0);
          __chkstk_darwin(v160);
          v163[-6] = v174;
          v163[-5] = v132;
          v163[-4] = v170;
          v163[-3] = v135;
          v161 = v171;
          v163[-2] = v172;
          v163[-1] = v161;
          static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.saveFetchedLocation", 49, 2, sub_100555498, &v163[-8], &type metadata for () + 1);
          sub_10001EF3C(v168, v175);
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_105;
        }
        v154 = *(_QWORD *)(v142 + 8 * v147);
        if (!v154)
        {
          v155 = v147 + 1;
          if (v147 + 1 >= v146)
            goto LABEL_102;
          v154 = *(_QWORD *)(v142 + 8 * v155);
          if (!v154)
          {
            v155 = v147 + 2;
            if (v147 + 2 >= v146)
              goto LABEL_102;
            v154 = *(_QWORD *)(v142 + 8 * v155);
            if (!v154)
            {
              v155 = v147 + 3;
              if (v147 + 3 >= v146)
                goto LABEL_102;
              v154 = *(_QWORD *)(v142 + 8 * v155);
              if (!v154)
              {
                v155 = v147 + 4;
                if (v147 + 4 >= v146)
                  goto LABEL_102;
                v154 = *(_QWORD *)(v142 + 8 * v155);
                if (!v154)
                {
                  v155 = v147 + 5;
                  if (v147 + 5 >= v146)
                    goto LABEL_102;
                  v154 = *(_QWORD *)(v142 + 8 * v155);
                  if (!v154)
                  {
                    while (1)
                    {
                      v147 = v155 + 1;
                      if (__OFADD__(v155, 1))
                        break;
                      if (v147 >= v146)
                        goto LABEL_102;
                      v154 = *(_QWORD *)(v142 + 8 * v147);
                      ++v155;
                      if (v154)
                        goto LABEL_97;
                    }
                    __break(1u);
                    return;
                  }
                }
              }
            }
          }
          v147 = v155;
        }
LABEL_97:
        v145 = (v154 - 1) & v154;
        v149 = __clz(__rbit64(v154)) + (v147 << 6);
      }
      v150 = (void ***)(*(_QWORD *)(v140 + 48) + 16 * v149);
      v152 = *v150;
      v151 = (uint64_t)v150[1];
      aBlock = v152;
      v187 = v151;
      sub_10052AD58((uint64_t *)&aBlock);
    }
  }
  __break(1u);
LABEL_109:
  swift_once(&qword_1010EA098, sub_10098F7D8);
LABEL_53:
  v83 = type metadata accessor for Logger(0);
  sub_10001A9E8(v83, (uint64_t)qword_1011B7A18);
  v84 = (uint64_t)v169;
  swift_errorRetain(v169);
  v85 = swift_errorRetain(v84);
  v86 = Logger.logObject.getter(v85);
  v87 = static os_log_type_t.default.getter(v86);
  if (os_log_type_enabled(v86, v87))
  {
    v88 = swift_slowAlloc(22, -1);
    v89 = (void **)swift_slowAlloc(32, -1);
    aBlock = v89;
    *(_DWORD *)v88 = 134218242;
    swift_beginAccess(&v192, &v184, 0, 0);
    if ((unint64_t)v192 >> 62)
    {
      if (v192 < 0)
        v162 = v192;
      else
        v162 = v192 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v192);
      v90 = _CocoaArrayWrapper.endIndex.getter(v162);
      swift_bridgeObjectRelease();
    }
    else
    {
      v90 = *(_QWORD *)((v192 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v183 = v90;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, &v184, v88 + 4, v88 + 12);
    *(_WORD *)(v88 + 12) = 2080;
    v183 = v84;
    swift_errorRetain(v84);
    v91 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
    v92 = String.init<A>(describing:)(&v183, v91);
    v183 = sub_100016940(v92, v93, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, &v184, v88 + 14, v88 + 22);
    swift_bridgeObjectRelease();
    swift_errorRelease(v84);
    swift_errorRelease(v84);
    _os_log_impl((void *)&_mh_execute_header, v86, v87, "SubscribeAndFetch - no response data. Returning locations from cache. count %ld error %s", (uint8_t *)v88, 0x16u);
    swift_arrayDestroy(v89, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v89, -1, -1);
    swift_slowDealloc(v88, -1, -1);
  }
  else
  {
    swift_errorRelease(v84);
    swift_errorRelease(v84);
  }

  v94 = v170;
  v95 = objc_msgSend(v170, "subscriptionMode");
  v96 = (unint64_t)objc_msgSend(v94, "subscriptionMode");
  v97 = 15.0;
  if (v95 == (id)5)
  {
    v97 = 0.0;
    if (v96 <= 5)
      v97 = dbl_100E43450[v96];
  }
  swift_beginAccess(&v192, &aBlock, 0, 0);
  v98 = v192;
  v99 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
  sub_10000F4A0(0, (unint64_t *)&qword_1010F1598, SPSecureLocation_ptr);
  swift_bridgeObjectRetain(v98);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v101 = objc_msgSend(v99, "initWithExpiryTime:locations:", isa, v97);

  v172(v101, v84);
  swift_release();
  swift_bridgeObjectRelease();
LABEL_105:
  swift_bridgeObjectRelease();
}

void sub_10052AD58(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[7];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *a1;
  v2 = a1[1];
  if (qword_1010EA428 != -1)
    swift_once(&qword_1010EA428, sub_100C48554);
  swift_retain();
  sub_100C49D84(v3, v2, 0);
  v4 = swift_release();
  if (qword_1010EA0A8 != -1)
    v4 = swift_once(&qword_1010EA0A8, sub_10098F82C);
  v5 = qword_1011B7A48;
  __chkstk_darwin(v4);
  v18[2] = v5;
  v18[3] = v3;
  v18[4] = v2;
  swift_retain();
  v6 = sub_10001A9A8(&qword_1010F6350);
  OS_dispatch_queue.sync<A>(execute:)(sub_100555DE4, v18, v6);
  swift_release();
  v8 = v22;
  v7 = v23;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v9 = type metadata accessor for Logger(0);
  sub_10001A9E8(v9, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain_n(v2, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(42, -1);
    v14 = swift_slowAlloc(64, -1);
    v19 = v6;
    v20 = v14;
    v24 = v14;
    *(_DWORD *)v13 = 141558787;
    v21 = v1;
    v22 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    swift_bridgeObjectRetain(v2);
    v22 = sub_100016940(v3, v2, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease_n(v2, 3);
    *(_WORD *)(v13 + 22) = 2160;
    v22 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v13 + 24, v13 + 32);
    *(_WORD *)(v13 + 32) = 2081;
    v22 = v8;
    v23 = v7;
    swift_bridgeObjectRetain(v7);
    v15 = String.init<A>(describing:)(&v22, v19);
    v22 = sub_100016940(v15, v16, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v13 + 34, v13 + 42);
    swift_bridgeObjectRelease_n(v7, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "subscribeAndFetch: No Location Found for %{private,mask.hash}s %{private,mask.hash}s", (uint8_t *)v13, 0x2Au);
    v17 = v20;
    swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v7, 2);
    swift_bridgeObjectRelease_n(v2, 2);
  }
}

uint64_t sub_10052B0C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v13;

  v13 = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10054B044(a3, 0, a2, v13, a2, a5, a6, a7, a1);

  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void sub_10052B18C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(_QWORD, _QWORD), uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD, _QWORD);
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  double v32;
  id v33;
  Class isa;
  id v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  _QWORD *v39;
  _BYTE v40[24];

  v37 = a5;
  v38 = a7;
  v13 = type metadata accessor for SecureLocation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (uint64_t *)(a4 + 16);
  if ((a2 & 1) != 0)
  {
    __chkstk_darwin(v15);
    *(&v36 - 4) = v19;
    *(&v36 - 3) = (uint64_t)SharingCircleWildAdvertisementKey.init(key:);
    *(&v36 - 2) = 0;
    *(&v36 - 1) = a1;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.receivedUpdatedLocations", 70, 2, sub_100555BC4, &v36 - 6, &type metadata for () + 1);
  }
  swift_beginAccess(v18, v40, 33, 0);
  swift_bridgeObjectRetain(a1);
  sub_1003046AC(v20);
  swift_endAccess(v40);
  *(_QWORD *)&v21 = swift_beginAccess(v18, v40, 0, 0).n128_u64[0];
  v22 = *v18;
  v23 = *(_QWORD *)(*v18 + 16);
  if (v23)
  {
    v36 = a8;
    v24 = a6;
    v39 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v22);
    specialized ContiguousArray.reserveCapacity(_:)(v23);
    v25 = v22 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v26 = *(_QWORD *)(v14 + 72);
    do
    {
      sub_10005972C(v25, (uint64_t)v17, type metadata accessor for SecureLocation);
      v27 = sub_100AA6310();
      v28 = sub_1000126B0((uint64_t)v17, type metadata accessor for SecureLocation);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v28);
      v29 = v39[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v29);
      v30 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v27);
      specialized ContiguousArray._endMutation()(v30);
      v25 += v26;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease();
    a6 = v24;
  }
  v31 = (unint64_t)objc_msgSend(v37, "subscriptionMode", v21);
  v32 = 0.0;
  if (v31 < 6)
    v32 = dbl_100E43450[v31];
  v33 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
  sub_10000F4A0(0, (unint64_t *)&qword_1010F1598, SPSecureLocation_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v35 = objc_msgSend(v33, "initWithExpiryTime:locations:", isa, v32);

  a6(v35, 0);
  Transaction.capture()();

}

uint64_t sub_10052B438(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t aBlock[7];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v47 = v9;
  v48 = v8;
  v43 = v7;
  v49 = v5;
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain_n(a1, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  v16 = os_log_type_enabled(v14, v15);
  v44 = v11;
  v45 = v2;
  v17 = v4;
  if (v16)
  {
    v18 = swift_slowAlloc(22, -1);
    v19 = swift_slowAlloc(32, -1);
    *(_DWORD *)v18 = 134218242;
    v51 = *(_QWORD **)(a1 + 16);
    aBlock[0] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, aBlock, v18 + 4, v18 + 12);
    *(_WORD *)(v18 + 12) = 2080;
    swift_bridgeObjectRetain(a1);
    v21 = Array.description.getter(v20, &type metadata for String);
    v23 = v22;
    swift_bridgeObjectRelease();
    v51 = (_QWORD *)sub_100016940(v21, v23, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, aBlock, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "subscribeAndFetch - clearing cached locations for %ld ids %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    v24 = v18;
    v2 = v45;
    swift_slowDealloc(v24, -1, -1);

    v25 = *(_QWORD *)(a1 + 16);
    if (!v25)
      goto LABEL_10;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    v25 = *(_QWORD *)(a1 + 16);
    if (!v25)
      goto LABEL_10;
  }
  v46 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain(a1);
  v42 = a1;
  v26 = (uint64_t *)(a1 + 40);
  v27 = v17;
  v28 = v43;
  v29 = v44;
  do
  {
    v30 = *(v26 - 1);
    v31 = *v26;
    v32 = v46;
    v50 = *(_QWORD *)(v46 + 16);
    v33 = (_QWORD *)swift_allocObject(&unk_10107DD58, 56, 7);
    v33[2] = v30;
    v33[3] = v31;
    v33[4] = v32;
    v33[5] = SharingCircleWildAdvertisementKey.init(key:);
    v33[6] = 0;
    aBlock[4] = (uint64_t)sub_100555400;
    aBlock[5] = (uint64_t)v33;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100016FB8;
    aBlock[3] = (uint64_t)&unk_10107DD70;
    v34 = _Block_copy(aBlock);
    swift_bridgeObjectRetain_n(v31, 2);
    v35 = swift_retain();
    static DispatchQoS.unspecified.getter(v35);
    v51 = _swiftEmptyArrayStorage;
    v36 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v37 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v38 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v37, v38, v27, v36);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v29, v28, v34);
    _Block_release(v34);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v28, v27);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v29, v48);
    swift_bridgeObjectRelease();
    swift_release();
    v26 += 2;
    --v25;
  }
  while (v25);
  a1 = v42;
  swift_bridgeObjectRelease();
  v2 = v45;
LABEL_10:
  v39 = *(_QWORD *)(v2 + 40);
  v40 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v40);
  *(&v42 - 2) = v39;
  *(&v42 - 1) = a1;
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.clearLocationsForFailedSubscriptions", 82, 2, sub_10055540C, &v42 - 4, &type metadata for () + 1);
}

_QWORD *sub_10052B8CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[13];
  _OWORD v14[13];

  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  v2 = qword_1011B7A48;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v2, &type metadata for SecureLocationsConfig);
  swift_release();
  v14[10] = v13[10];
  v14[11] = v13[11];
  v14[12] = v13[12];
  v14[6] = v13[6];
  v14[7] = v13[7];
  v14[8] = v13[8];
  v14[9] = v13[9];
  v14[2] = v13[2];
  v14[3] = v13[3];
  v14[4] = v13[4];
  v14[5] = v13[5];
  v14[0] = v13[0];
  v14[1] = v13[1];
  if (qword_1010E9CD8 != -1)
    swift_once(&qword_1010E9CD8, sub_1005201AC);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1010FE9B0);
  v4 = sub_1004F1D0C(v14);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(32, -1);
    v8 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v13[0] = v8;
    *(_DWORD *)v7 = 136446722;
    v11 = sub_100016940(0xD000000000000034, 0x8000000100EDA720, (uint64_t *)v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2048;
    v11 = *(_QWORD *)&v14[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v7 + 14, v7 + 22);
    sub_1003D09E0(v14);
    *(_WORD *)(v7 + 22) = 2048;
    v11 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v7 + 24, v7 + 32);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s local version: %ld - server: %ld", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    sub_1003D09E0(v14);
  }

  result = sub_1003D09E0(v14);
  if (*(uint64_t *)&v14[0] < a1)
  {
    v10 = swift_allocObject(&unk_10107DCE0, 24, 7);
    *(_QWORD *)(v10 + 16) = a1;
    sub_100521DA8((uint64_t)sub_100555314, v10);
    return (_QWORD *)swift_release();
  }
  return result;
}

uint64_t sub_10052BB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;

  v12 = (_QWORD *)swift_allocObject(&unk_10107CE30, 64, 7);
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = a2;
  v12[7] = a1;
  swift_bridgeObjectRetain(a4);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100441EA8(a3, a4, (uint64_t)sub_100553D28, (uint64_t)v12);
  return swift_release();
}

void sub_10052BC4C(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD, _QWORD), uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  char v50;
  id v51;
  uint64_t v52;
  uint8_t *v53;
  void (*v54)(_QWORD, _QWORD);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v55 = *a7;
  v56 = a5;
  v12 = sub_10001A9A8(&qword_101119450);
  __chkstk_darwin(v12);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SecureLocation(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100553D34(a1, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
  {
    sub_1000126EC((uint64_t)v14, (uint64_t)v18, type metadata accessor for SecureLocation);
    if (qword_1010EA0A8 != -1)
      swift_once(&qword_1010EA0A8, sub_10098F82C);
    swift_retain();
    v25 = sub_100995F58((uint64_t)v18);
    swift_release();
    if ((v25 & 1) == 0)
    {
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v36 = type metadata accessor for Logger(0);
      sub_10001A9E8(v36, (uint64_t)qword_1011B7A18);
      swift_bridgeObjectRetain_n(a3, 2);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.default.getter(v38);
      if (os_log_type_enabled(v38, v39))
      {
        v40 = swift_slowAlloc(12, -1);
        v54 = a4;
        v41 = (uint8_t *)v40;
        v42 = swift_slowAlloc(32, -1);
        v58 = v42;
        *(_DWORD *)v41 = 136315138;
        swift_bridgeObjectRetain(a3);
        v57 = sub_100016940(a2, a3, &v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v41 + 4, v41 + 12);
        swift_bridgeObjectRelease_n(a3, 3);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "latestLocationFromCache - location is older than acceptable threshold. Returning nil for %s", v41, 0xCu);
        swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1, -1);
        v43 = v41;
        a4 = v54;
        swift_slowDealloc(v43, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
      }
      if (qword_1010EA428 != -1)
        swift_once(&qword_1010EA428, sub_100C48554);
      sub_100C4C4B8(3);
      a4(0, 0);
      goto LABEL_42;
    }
    swift_retain();
    v26 = sub_100996350((uint64_t)v18);
    swift_release();
    if ((v26 & 1) != 0)
    {
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v27 = type metadata accessor for Logger(0);
      sub_10001A9E8(v27, (uint64_t)qword_1011B7A18);
      swift_bridgeObjectRetain_n(a3, 2);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.default.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = swift_slowAlloc(12, -1);
        v54 = a4;
        v32 = (uint8_t *)v31;
        v33 = swift_slowAlloc(32, -1);
        v58 = v33;
        *(_DWORD *)v32 = 136315138;
        v53 = v32 + 4;
        swift_bridgeObjectRetain(a3);
        v57 = sub_100016940(a2, a3, &v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v53, v32 + 12);
        swift_bridgeObjectRelease_n(a3, 3);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "latestLocationFromCache - location is valid but aging. Returning it for now and requesting a refetch for %s", v32, 0xCu);
        swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1, -1);
        v34 = v32;
        a4 = v54;
        swift_slowDealloc(v34, -1, -1);

      }
      else
      {

        v35 = swift_bridgeObjectRelease_n(a3, 2);
      }
      __chkstk_darwin(v35);
      *(&v52 - 4) = a6;
      *(&v52 - 3) = a2;
      *(&v52 - 2) = a3;
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocationsSubscribeExpiringLocation", 70, 2, sub_100553D9C, &v52 - 6, &type metadata for () + 1);
      if (qword_1010EA428 != -1)
        swift_once(&qword_1010EA428, sub_100C48554);
      v50 = 2;
    }
    else
    {
      if ((sub_10052C4DC(a2, a3) & 1) != 0)
      {
        if (qword_1010EA098 != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v44 = type metadata accessor for Logger(0);
        v45 = sub_10001A9E8(v44, (uint64_t)qword_1011B7A18);
        v46 = Logger.logObject.getter(v45);
        v47 = static os_log_type_t.default.getter(v46);
        if (os_log_type_enabled(v46, v47))
        {
          v48 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v48 = 0;
          _os_log_impl((void *)&_mh_execute_header, v46, v47, "latestLocationFromCache - proactive subscription needs renewal", v48, 2u);
          swift_slowDealloc(v48, -1, -1);
        }

        if (qword_1010EA428 != -1)
          swift_once(&qword_1010EA428, sub_100C48554);
        sub_100C4C4B8(1);
        __chkstk_darwin(v49);
        *(&v52 - 6) = a6;
        *(&v52 - 5) = a2;
        *(&v52 - 4) = a3;
        *(&v52 - 3) = (uint64_t)a4;
        *(&v52 - 2) = v56;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocationsProactiveSubscriptionRenewal", 73, 2, sub_100553D7C, &v52 - 8, &type metadata for () + 1);
        goto LABEL_42;
      }
      if (qword_1010EA428 != -1)
        swift_once(&qword_1010EA428, sub_100C48554);
      v50 = 0;
    }
    sub_100C4C4B8(v50);
    v51 = sub_100AA6310();
    a4(v51, 0);

LABEL_42:
    sub_1000126B0((uint64_t)v18, type metadata accessor for SecureLocation);
    goto LABEL_43;
  }
  sub_100004048((uint64_t)v14, &qword_101119450);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v19 = type metadata accessor for Logger(0);
  sub_10001A9E8(v19, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain_n(a3, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v58 = v24;
    *(_DWORD *)v23 = 136315138;
    swift_bridgeObjectRetain(a3);
    v57 = sub_100016940(a2, a3, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "latestLocationFromCache - no cached location for %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  if (qword_1010EA428 != -1)
    swift_once(&qword_1010EA428, sub_100C48554);
  sub_100C4C4B8(4);
  a4(0, 0);
LABEL_43:
  Transaction.capture()();
}

uint64_t sub_10052C4DC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _BOOL8 v19;
  double v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v28 - v12;
  sub_10043E624(a1, a2, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100004048((uint64_t)v6, (uint64_t *)&unk_1010EA690);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B7A18);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "proactiveSubscriptionNeedsRenewal is true since there is no last proactive subscribtion time.", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    return 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
    static Date.trustedNow.getter((uint64_t)v11);
    v20 = Date.timeIntervalSince(_:)(v13);
    v21 = *(void (**)(char *, uint64_t))(v8 + 8);
    v21(v11, v7);
    v19 = v20 >= 64800.0;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B7A18);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(28, -1);
      *(_DWORD *)v26 = 67109632;
      LODWORD(v29) = v20 >= 64800.0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, (char *)&v29 + 4, v26 + 4, v26 + 8);
      *(_WORD *)(v26 + 8) = 2048;
      v29 = 0x40EFA40000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v26 + 10, v26 + 18);
      *(_WORD *)(v26 + 18) = 2048;
      v29 = *(_QWORD *)&v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v26 + 20, v26 + 28);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "proactiveSubscriptionNeedsRenewal %{BOOL}d threshold %f timeSinceLastSubscribe %f", (uint8_t *)v26, 0x1Cu);
      swift_slowDealloc(v26, -1, -1);
    }

    v21(v13, v7);
  }
  return v19;
}

uint64_t sub_10052C830(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.trustedNow.getter((uint64_t)v7);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v16 = v4;
    swift_bridgeObjectRetain(a1);
    v9 = (unint64_t *)(a1 + 40);
    do
    {
      if (*(_QWORD *)(a2 + 16))
      {
        v11 = *(v9 - 1);
        v10 = *v9;
        swift_bridgeObjectRetain(*v9);
        v12 = sub_100518DA0(v11, v10);
        if ((v13 & 1) != 0 && (*(_BYTE *)(*(_QWORD *)(a2 + 56) + v12) & 1) == 0)
          sub_10043EA98(v11, v10, (uint64_t)v7);
        swift_bridgeObjectRelease();
      }
      v9 += 2;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    v4 = v16;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10052C954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t), uint64_t a6)
{
  id v12;
  NSString v13;
  uint64_t v14;
  uint64_t v15;

  v12 = objc_msgSend(objc_allocWithZone((Class)SPSecureLocationsSubscriptionContext), "init");
  objc_msgSend(v12, "setSubscriptionMode:", 0);
  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v12, "setClientApp:", v13);

  objc_msgSend(v12, "setFetchMode:", 0);
  v14 = sub_10001A9A8(&qword_101106C20);
  v15 = swift_allocObject(v14, 48, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v15 + 32) = a3;
  *(_QWORD *)(v15 + 40) = a4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(a4);
  sub_100548F50(v15, v12, 0, a2, a5, a6, a1);

  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void sub_10052CAA4(void *a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;

  v5 = objc_msgSend(a1, "locations");
  v6 = sub_10000F4A0(0, (unint64_t *)&qword_1010F1598, SPSecureLocation_ptr);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v10 = v7;
    else
      v10 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v8 = (void *)_CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease();
    if (!v8)
      goto LABEL_7;
  }
  else
  {
    v8 = *(void **)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v8)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      a3(v8, a2);

      Transaction.capture()();
      return;
    }
  }
  if ((v7 & 0xC000000000000001) != 0)
  {
    v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v7);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v9 = *(id *)(v7 + 32);
LABEL_6:
    v8 = v9;
    goto LABEL_7;
  }
  __break(1u);
}

uint64_t sub_10052CBB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8;
  NSString v9;
  uint64_t v10;
  uint64_t v11;

  v8 = objc_msgSend(objc_allocWithZone((Class)SPSecureLocationsSubscriptionContext), "init");
  objc_msgSend(v8, "setSubscriptionMode:", 0);
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setClientApp:", v9);

  objc_msgSend(v8, "setFetchMode:", 0);
  v10 = sub_10001A9A8(&qword_101106C20);
  v11 = swift_allocObject(v10, 48, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v11 + 32) = a3;
  *(_QWORD *)(v11 + 40) = a4;
  swift_retain();
  swift_bridgeObjectRetain(a4);
  sub_100549814(v11, v8, 1, a2, a1);

  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_10052CCE0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v25;
  uint64_t v26;

  v7 = &qword_1010EA000;
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v9 = type metadata accessor for Logger(0);
    sub_10001A9E8(v9, (uint64_t)qword_1011B7A18);
    swift_errorRetain(a2);
    v10 = swift_errorRetain(a2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (!os_log_type_enabled(v11, v12))
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

      if (*(_QWORD *)(a1 + 16))
        goto LABEL_7;
      goto LABEL_9;
    }
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v25 = a2;
    v26 = v14;
    *(_DWORD *)v13 = 136315138;
    swift_errorRetain(a2);
    v15 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v16 = String.init<A>(describing:)(&v25, v15);
    v25 = sub_100016940(v16, v17, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v13 + 4, v13 + 12);
    v7 = &qword_1010EA000;
    swift_bridgeObjectRelease();
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Error resolving label before publish. Proceeding without label. Error %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(a2);
  }
  if (*(_QWORD *)(a1 + 16))
  {
LABEL_7:
    v18 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SecureLocation(0) - 8) + 80);
    sub_10052CFDC(a1 + ((v18 + 32) & ~v18), 0, a4, a5);
    return;
  }
LABEL_9:
  if (v7[19] != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10001A9E8(v19, (uint64_t)qword_1011B7A18);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.error.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Got empty locations after resolving labels. This shouldn't happen", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

}

void sub_10052CFDC(uint64_t a1, int a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  id v42;
  NSString v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  id v90;
  NSString v91;
  id v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint8_t *v98;
  id v99;
  NSString v100;
  id v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  void (*v106)(_QWORD);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v110 = a2;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v8);
  v105 = (char *)&v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for SecureLocationsSubmitEndpoint(0);
  v10 = __chkstk_darwin(v112);
  v114 = (char *)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v104 = (uint64_t)&v103 - v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v103 - v14;
  v113 = type metadata accessor for SecureLocation(0);
  v16 = __chkstk_darwin(v113);
  v18 = (char *)&v103 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v103 - v19;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B7A18);
  sub_10005972C(a1, (uint64_t)v20, type metadata accessor for SecureLocation);
  v23 = sub_10005972C(a1, (uint64_t)v18, type metadata accessor for SecureLocation);
  v111 = v22;
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter(v24);
  v26 = os_log_type_enabled(v24, v25);
  v108 = v4;
  if (v26)
  {
    v27 = swift_slowAlloc(22, -1);
    v28 = swift_slowAlloc(64, -1);
    v109 = a4;
    v29 = v28;
    v117 = v28;
    *(_DWORD *)v27 = 136446466;
    v30 = sub_100AA723C(*(_QWORD *)&v20[*(int *)(v113 + 60)]);
    v106 = a3;
    v115 = sub_100016940(v30, v31, &v117);
    v107 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v27 + 4, v27 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v20, type metadata accessor for SecureLocation);
    *(_WORD *)(v27 + 12) = 2080;
    v32 = sub_100AA64E4();
    v115 = sub_100016940(v32, v33, &v117);
    a1 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v27 + 14, v27 + 22);
    swift_bridgeObjectRelease();
    a3 = v106;
    sub_1000126B0((uint64_t)v18, type metadata accessor for SecureLocation);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "publishLocation with reason %{public}s location: %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    v34 = v29;
    a4 = v109;
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v20, type metadata accessor for SecureLocation);
    sub_1000126B0((uint64_t)v18, type metadata accessor for SecureLocation);
  }

  v35 = (uint64_t)v114;
  v36 = v112;
  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  swift_retain();
  v37 = sub_10000D338();
  v38 = swift_release();
  if ((v37 & 1) != 0 || (v110 & 1) != 0)
  {
    if (*(_QWORD *)(a1 + *(int *)(v113 + 60)) == 8)
    {
      v46 = v108;
      if (*(_QWORD *)(v108 + 344))
      {
        swift_retain();
        DispatchTimer.cancel()();
        swift_release();
        *(_QWORD *)(v46 + 344) = 0;
        swift_release();
      }
      sub_100BFDB8C(a1);
      a3(0);
    }
    else
    {
      v47 = enum case for FMNAccountType.searchParty(_:);
      v48 = type metadata accessor for FMNAccountType(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v15, v47, v48);
      sub_10024F1F0((uint64_t)&v15[*(int *)(v36 + 20)]);
      v49 = v104;
      v50 = sub_10005972C((uint64_t)v15, v104, type metadata accessor for SecureLocationsSubmitEndpoint);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.default.getter(v51);
      v53 = os_log_type_enabled(v51, v52);
      v107 = a1;
      if (v53)
      {
        v106 = a3;
        v54 = v36;
        v55 = v49;
        v56 = (uint8_t *)swift_slowAlloc(12, -1);
        v57 = swift_slowAlloc(32, -1);
        v109 = a4;
        v58 = v57;
        v117 = v57;
        *(_DWORD *)v56 = 136315138;
        sub_10005972C(v55, v35, type metadata accessor for SecureLocationsSubmitEndpoint);
        v59 = String.init<A>(describing:)(v35, v54);
        v115 = sub_100016940(v59, v60, &v117);
        a3 = v106;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v56 + 4, v56 + 12);
        v35 = (uint64_t)v114;
        swift_bridgeObjectRelease();
        sub_1000126B0(v55, type metadata accessor for SecureLocationsSubmitEndpoint);
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "SubmitLocation endpoint %s", v56, 0xCu);
        swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
        v61 = v58;
        a4 = v109;
        swift_slowDealloc(v61, -1, -1);
        swift_slowDealloc(v56, -1, -1);
      }
      else
      {
        sub_1000126B0(v49, type metadata accessor for SecureLocationsSubmitEndpoint);
      }

      v62 = type metadata accessor for SearchPartyURLSessionFactory(0);
      swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
      v63 = type metadata accessor for FMNMockingPreferences(0);
      v64 = v105;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v105, 1, 1, v63);
      v65 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v64);
      v66 = type metadata accessor for ServerInteractionController(0);
      v67 = swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
      sub_10005972C((uint64_t)v15, v35, type metadata accessor for SecureLocationsSubmitEndpoint);
      v68 = sub_10041D8D4(v35, v65, v67);
      v69 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
      if (v69
        && (v70 = v69,
            v71 = objc_msgSend(v69, "uniqueDeviceIdentifier"),
            v70,
            v71))
      {
        v114 = v15;
        v109 = a4;
        v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
        v74 = v73;

        v75 = v108;
        v76 = sub_10001A9A8(&qword_1010F6350);
        OS_dispatch_queue.sync<A>(execute:)(sub_100553E20, v75, v76);
        v77 = v118;
        if (v118)
        {
          v112 = v117;
          v78 = swift_allocBox(v113);
          v80 = (_QWORD *)v79;
          v113 = 0;
          v81 = v68;
          v82 = v107;
          sub_10005972C(v107, v79, type metadata accessor for SecureLocation);
          *v80 = v72;
          v80[1] = v74;
          swift_bridgeObjectRetain(v74);
          swift_bridgeObjectRelease();
          v83 = type metadata accessor for Transaction(0);
          __chkstk_darwin(v83);
          *(&v103 - 10) = v75;
          *(&v103 - 9) = v78;
          v84 = v109;
          *(&v103 - 8) = (uint64_t)a3;
          *(&v103 - 7) = v84;
          v85 = v112;
          *(&v103 - 6) = v82;
          *(&v103 - 5) = v85;
          *(&v103 - 4) = v77;
          *(&v103 - 3) = v72;
          *(&v103 - 2) = v74;
          *(&v103 - 1) = v81;
          static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.publishEncodedPayload", 51, 2, sub_100554A04, &v103 - 12, &type metadata for () + 1);
          swift_bridgeObjectRelease();
          sub_1000126B0((uint64_t)v114, type metadata accessor for SecureLocationsSubmitEndpoint);
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          return;
        }
        v95 = swift_bridgeObjectRelease();
        v96 = Logger.logObject.getter(v95);
        v97 = static os_log_type_t.error.getter(v96);
        if (os_log_type_enabled(v96, v97))
        {
          v98 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v98 = 0;
          _os_log_impl((void *)&_mh_execute_header, v96, v97, "No APS token. Not proceeding", v98, 2u);
          swift_slowDealloc(v98, -1, -1);
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
        v99 = objc_allocWithZone((Class)NSError);
        v100 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v101 = objc_msgSend(v99, "initWithDomain:code:userInfo:", v100, 13, 0);

        v102 = v101;
        a3(v101);

        swift_release();
        v94 = (uint64_t)v114;
      }
      else
      {
        v86 = v15;
        v87 = Logger.logObject.getter(v69);
        v88 = static os_log_type_t.error.getter(v87);
        if (os_log_type_enabled(v87, v88))
        {
          v89 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v89 = 0;
          _os_log_impl((void *)&_mh_execute_header, v87, v88, "Unable to get device identifier for server SubscribeAndFetch", v89, 2u);
          swift_slowDealloc(v89, -1, -1);
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
        v90 = objc_allocWithZone((Class)NSError);
        v91 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v92 = objc_msgSend(v90, "initWithDomain:code:userInfo:", v91, 0, 0);

        v93 = v92;
        a3(v92);

        swift_release();
        v94 = (uint64_t)v86;
      }
      sub_1000126B0(v94, type metadata accessor for SecureLocationsSubmitEndpoint);
    }
  }
  else
  {
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.default.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Not a location publishing device. Not publishing location", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

    sub_10054B3CC();
    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    v42 = objc_allocWithZone((Class)NSError);
    v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v44 = objc_msgSend(v42, "initWithDomain:code:userInfo:", v43, 12, 0);

    v45 = v44;
    a3(v44);

  }
}

uint64_t sub_10052DAF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[24];
  uint64_t v47;

  v45 = a8;
  v44 = a7;
  v38 = a4;
  v39 = a5;
  v47 = a3;
  v36 = a1;
  v41 = a10;
  v42 = a11;
  v40 = a9;
  v14 = type metadata accessor for SecureLocation(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = __chkstk_darwin(v14);
  v18 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v36 - v19;
  v37 = (uint64_t)&v36 - v19;
  v21 = swift_projectBox(a3);
  v43 = *(_QWORD *)(a2 + 16);
  swift_beginAccess(v21, v46, 0, 0);
  sub_10005972C(v21, (uint64_t)v20, type metadata accessor for SecureLocation);
  sub_10005972C(a6, (uint64_t)v18, type metadata accessor for SecureLocation);
  v22 = *(unsigned __int8 *)(v15 + 80);
  v23 = (v22 + 56) & ~v22;
  v24 = (v16 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8;
  v27 = (_QWORD *)swift_allocObject(&unk_10107D880, v26 + 8, v22 | 7);
  v28 = v38;
  v29 = v39;
  v27[2] = v36;
  v27[3] = v28;
  v27[4] = v29;
  v27[5] = a2;
  v27[6] = v47;
  sub_1000126EC((uint64_t)v18, (uint64_t)v27 + v23, type metadata accessor for SecureLocation);
  v30 = (_QWORD *)((char *)v27 + v24);
  v31 = v45;
  *v30 = v44;
  v30[1] = v31;
  v32 = (_QWORD *)((char *)v27 + v25);
  v33 = v41;
  *v32 = v40;
  v32[1] = v33;
  *(_QWORD *)((char *)v27 + v26) = v42;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v33);
  swift_retain();
  v34 = v37;
  sub_100443360(v37, (uint64_t)sub_100554B20, (uint64_t)v27);
  swift_release();
  return sub_1000126B0(v34, type metadata accessor for SecureLocation);
}

void sub_10052DD00(uint64_t a1, void *a2, void (*a3)(id), void (*a4)(id), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  id v36;
  NSString v37;
  id v38;
  void (*v39)(id);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  id v76;
  NSString v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  void (**v98)(id);
  void (*v99)(id);
  id v100;
  void (*v101)(id);
  _QWORD *v102;
  uint8_t *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(id);
  uint64_t v113;
  uint64_t v114;
  void (*v115)(id);
  id v116;
  uint64_t v117;
  _BYTE v118[24];
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;

  v116 = a2;
  v109 = a12;
  v113 = a10;
  v114 = a8;
  v18 = type metadata accessor for SecureLocation(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v110 = v20;
  v111 = (uint64_t)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v21);
  if (*(_QWORD *)(a1 + 16))
  {
    v105 = (char *)&v103 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    v115 = a3;
    v112 = a4;
    v23 = swift_projectBox(a6);
    v24 = sub_10001A9A8(&qword_1010ED490);
    v25 = *(_QWORD *)(v19 + 72);
    v26 = *(unsigned __int8 *)(v19 + 80);
    v27 = (v26 + 32) & ~v26;
    v108 = v26;
    v106 = v26 | 7;
    v28 = swift_allocObject(v24, v27 + v25, v26 | 7);
    *(_OWORD *)(v28 + 16) = xmmword_100E22B00;
    swift_beginAccess(v23, v118, 0, 0);
    sub_10005972C(v23, v28 + v27, type metadata accessor for SecureLocation);
    sub_10044036C(v28, 1, (uint64_t)SharingCircleWildAdvertisementKey.init(key:), 0);
    swift_bridgeObjectRelease();
    v29 = *(_QWORD *)(a7 + *(int *)(v18 + 60));
    if (v29 == 7)
    {
      v30 = *(_OWORD *)(a1 + 48);
      v119 = *(_OWORD *)(a1 + 32);
      v120 = v30;
      v121 = *(_OWORD *)(a1 + 64);
      v122 = *(_QWORD *)(a1 + 80);
      sub_1003D84A8((uint64_t *)&v119);
      sub_10052E830((uint64_t)&v119);
      sub_1003D84F4((uint64_t)&v119);
      v115(0);
      Transaction.capture()();
    }
    else
    {
      v104 = a7;
      v107 = a5;
      v39 = v115;
      if (qword_1010EA0A8 != -1)
        swift_once(&qword_1010EA0A8, sub_10098F82C);
      v40 = sub_10001A9A8(&qword_1011063B0);
      unsafeFromAsyncTask<A>(_:)(&v119, &unk_1010FEEB8, 0, v40);
      v41 = v119;
      v42 = sub_100AA723C(v29);
      v44 = v43;
      v45 = swift_allocObject(&unk_10107D8A8, 112, 7);
      v46 = v114;
      *(_QWORD *)(v45 + 16) = a1;
      *(_QWORD *)(v45 + 24) = v46;
      v47 = v113;
      *(_QWORD *)(v45 + 32) = a9;
      *(_QWORD *)(v45 + 40) = v47;
      *(_QWORD *)(v45 + 48) = a11;
      strcpy((char *)(v45 + 56), "searchpartyd");
      *(_BYTE *)(v45 + 69) = 0;
      *(_WORD *)(v45 + 70) = -5120;
      *(_BYTE *)(v45 + 72) = 0;
      *(_QWORD *)(v45 + 80) = v42;
      *(_QWORD *)(v45 + 88) = v44;
      v48 = v107;
      *(_QWORD *)(v45 + 96) = v41;
      *(_QWORD *)(v45 + 104) = v48;
      swift_bridgeObjectRetain(a9);
      swift_bridgeObjectRetain(a11);
      swift_bridgeObjectRetain(a1);
      swift_retain();
      v49 = sub_10001A9A8(&qword_1010FEED0);
      unsafeFromAsyncTask<A>(_:)(&v119, &unk_1010FEEC8, v45, v49);
      swift_release();
      v50 = v119;
      v51 = v108;
      if ((_QWORD)v119)
      {
        v52 = *((_QWORD *)&v119 + 1);
        v53 = v120;
        if (qword_1010EA098 != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v54 = type metadata accessor for Logger(0);
        v55 = sub_10001A9E8(v54, (uint64_t)qword_1011B7A18);
        v56 = Logger.logObject.getter(v55);
        v57 = static os_log_type_t.default.getter(v56);
        if (os_log_type_enabled(v56, v57))
        {
          v58 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v58 = 0;
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "Sending SubmitLocation server request", v58, 2u);
          swift_slowDealloc(v58, -1, -1);
        }

        sub_100555020(v50, v52, v53);
        swift_bridgeObjectRetain(v50);
        v59 = sub_10001BBBC(v52, v53);
        v60 = Logger.logObject.getter(v59);
        v61 = static os_log_type_t.debug.getter(v60);
        if (os_log_type_enabled(v60, v61))
        {
          v62 = swift_slowAlloc(12, -1);
          v114 = v55;
          v63 = (uint8_t *)v62;
          v113 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v119 = v113;
          *(_DWORD *)v63 = 136315138;
          v103 = v63 + 4;
          swift_bridgeObjectRetain(v50);
          v65 = v51;
          v66 = Dictionary.description.getter(v64, &type metadata for String, &type metadata for String, &protocol witness table for String);
          v68 = v67;
          swift_bridgeObjectRelease();
          v69 = v66;
          v51 = v65;
          v117 = sub_100016940(v69, v68, (uint64_t *)&v119);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, v118, v103, v63 + 12);
          swift_bridgeObjectRelease();
          sub_100153D94(v50, v52, v53);
          sub_100153D94(v50, v52, v53);
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "SubmitLocation request headers %s", v63, 0xCu);
          v70 = v113;
          swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v70, -1, -1);
          swift_slowDealloc(v63, -1, -1);
        }
        else
        {
          sub_100153D94(v50, v52, v53);
          sub_100153D94(v50, v52, v53);
        }

        v80 = ~v51;
        swift_bridgeObjectRetain(v50);
        sub_10001BBBC(v52, v53);
        swift_bridgeObjectRetain(v50);
        v81 = sub_10001BBBC(v52, v53);
        v82 = Logger.logObject.getter(v81);
        v83 = static os_log_type_t.debug.getter(v82);
        if (os_log_type_enabled(v82, v83))
        {
          v84 = swift_slowAlloc(12, -1);
          v114 = ~v51;
          v85 = (uint8_t *)v84;
          v86 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v119 = v86;
          *(_DWORD *)v85 = 136315138;
          v87 = v105;
          static String.Encoding.utf8.getter(v86);
          v88 = String.init(data:encoding:)(v52, v53, v87);
          if (v89)
          {
            v90 = v89;
          }
          else
          {
            v88 = 7104878;
            v90 = 0xE300000000000000;
          }
          v117 = sub_100016940(v88, v90, (uint64_t *)&v119);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, v118, v85 + 4, v85 + 12);
          v51 = v108;
          swift_bridgeObjectRelease();
          sub_100153D94(v50, v52, v53);
          sub_100153D94(v50, v52, v53);
          _os_log_impl((void *)&_mh_execute_header, v82, v83, "SubmitLocation request body %s", v85, 0xCu);
          swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v86, -1, -1);
          v91 = v85;
          v80 = v114;
          swift_slowDealloc(v91, -1, -1);
        }
        else
        {
          sub_100153D94(v50, v52, v53);
          sub_100153D94(v50, v52, v53);
        }

        swift_bridgeObjectRetain(v50);
        sub_10001BBBC(v52, v53);
        sub_10034D9D0(v50, v52, v53, 0, v109);
        sub_100153D94(v50, v52, v53);
        objc_msgSend((id)objc_opt_self(0x1010E6000), "sentSecureLocation");
        v114 = v52;
        v92 = v111;
        sub_10005972C(v104, v111, type metadata accessor for SecureLocation);
        v93 = (v51 + 16) & v80;
        v94 = (v110 + v93 + 7) & 0xFFFFFFFFFFFFFFF8;
        v95 = (v94 + 15) & 0xFFFFFFFFFFFFFFF8;
        v96 = (v95 + 23) & 0xFFFFFFFFFFFFFFF8;
        v97 = swift_allocObject(&unk_10107D8D0, v96 + 8, v106);
        sub_1000126EC(v92, v97 + v93, type metadata accessor for SecureLocation);
        *(_QWORD *)(v97 + v94) = v107;
        v98 = (void (**)(id))(v97 + v95);
        v99 = v115;
        v100 = v116;
        v101 = v112;
        *v98 = v115;
        v98[1] = v101;
        *(_QWORD *)(v97 + v96) = v100;
        swift_retain();
        swift_retain();
        swift_retain();
        Future.addSuccess(block:)(sub_100554D60, v97);
        swift_release();
        swift_release();
        v102 = (_QWORD *)swift_allocObject(&unk_10107D8F8, 40, 7);
        v102[2] = v99;
        v102[3] = v101;
        v102[4] = v100;
        swift_retain();
        swift_retain();
        Future.addFailure(block:)(sub_100554DD8, v102);
        swift_release();
        swift_release();
        swift_release();
        sub_100153D94(v50, v114, v53);
      }
      else
      {
        if (qword_1010EA098 != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v71 = type metadata accessor for Logger(0);
        v72 = sub_10001A9E8(v71, (uint64_t)qword_1011B7A18);
        v73 = Logger.logObject.getter(v72);
        v74 = static os_log_type_t.default.getter(v73);
        if (os_log_type_enabled(v73, v74))
        {
          v75 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v75 = 0;
          _os_log_impl((void *)&_mh_execute_header, v73, v74, "Failed to create request for server SubscribeAndFetch", v75, 2u);
          swift_slowDealloc(v75, -1, -1);
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
        v76 = objc_allocWithZone((Class)NSError);
        v77 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v78 = objc_msgSend(v76, "initWithDomain:code:userInfo:", v77, 0, 0);

        v79 = v78;
        v39(v78);

        Transaction.capture()();
      }
    }
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_10001A9E8(v31, (uint64_t)qword_1011B7A18);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Encoded payload to submit locations is empty.", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    Transaction.capture()();
    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    v36 = objc_allocWithZone((Class)NSError);
    v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v38 = objc_msgSend(v36, "initWithDomain:code:userInfo:", v37, 14, 0);

    v116 = v38;
    a3(v38);

  }
}

void sub_10052E830(uint64_t a1)
{
  void *v2;
  id v3;
  NSString v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  NSObject *oslog;

  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  v2 = (void *)objc_opt_self(NSUserDefaults);
  swift_retain();
  v3 = objc_msgSend(v2, "standardUserDefaults");
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "BOOLForKey:", v4);
  swift_release();

  if ((v5 & 1) != 0)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B7A18);
    oslog = Logger.logObject.getter(v7);
    v8 = static os_log_type_t.default.getter(oslog);
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "autoMe is active - not publishing live location", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

  }
  else
  {
    swift_retain();
    sub_100399D48(a1);
    swift_release();
    objc_msgSend((id)objc_opt_self(0x1010E6000), "sentSecureLocation");
  }
}

uint64_t sub_10052EA10(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = a1;
  return swift_task_switch(sub_10052EA28, 0, 0);
}

uint64_t sub_10052EA28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  objc_class *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = type metadata accessor for PairedAutoMeCapableWatches();
  v2 = swift_allocObject(v1, 120, 15);
  v0[8] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (objc_class *)type metadata accessor for BluetoothConnectionObserver();
  v4 = objc_msgSend(objc_allocWithZone(v3), "init");
  v0[5] = v3;
  v0[6] = &off_10107A580;
  v0[2] = v4;
  v5 = type metadata accessor for PairedBluetoothState(0);
  v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v7 = sub_10009F5D0((uint64_t)(v0 + 2), (uint64_t)v3);
  v8 = *((_QWORD *)v3 - 1);
  v9 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, objc_class *))(v8 + 16))(v9, v7, v3);
  v10 = *v9;
  v11 = v4;
  v12 = sub_100545E84(v10, v6);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);

  swift_task_dealloc(v9);
  *(_QWORD *)(v2 + 112) = v12;
  v13 = (_QWORD *)swift_task_alloc(dword_1010EFFCC);
  v0[9] = v13;
  *v13 = v0;
  v13[1] = sub_10052EB5C;
  return sub_100146D2C();
}

uint64_t sub_10052EB5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = a1;
  swift_task_dealloc(v2);
  swift_release(v3);
  return swift_task_switch(sub_100555E0C, 0, 0);
}

uint64_t sub_10052EBC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_10052EBDC, 0, 0);
}

uint64_t sub_10052EBDC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v6;

  v1 = (_QWORD *)v0[4];
  v2 = *(_QWORD *)(v0[5] + 312);
  swift_bridgeObjectRetain(v0[3]);
  sub_100554DE4(v1);
  v3 = unk_1010F3CF4;
  v6 = (char *)&dword_1010F3CF0 + dword_1010F3CF0;
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[6] = v4;
  *v4 = v0;
  v4[1] = sub_10052EC68;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v6)(v0[3], v0[4], v2);
}

uint64_t sub_10052EC68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 48);
  v4[7] = a1;
  v4[8] = a2;
  v4[9] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_10052ECC8, 0, 0);
}

uint64_t sub_10052ECC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 16);
  *(_OWORD *)v2 = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v2 + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10052ECE4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(id), uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  id v57;
  NSString v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void (*v64)(char *, uint64_t);
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(id);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v73 = a4;
  v74 = a6;
  v72 = a5;
  v69 = a3;
  v8 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v8);
  v68 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for SecureLocation(0);
  v10 = __chkstk_darwin(v70);
  v75 = (uint64_t)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v64 - v12;
  v14 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v64 - v19;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B7A18);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v23(v20, a1, v14);
  sub_10005972C(a2, (uint64_t)v13, type metadata accessor for SecureLocation);
  sub_10005972C(a2, v75, type metadata accessor for SecureLocation);
  v71 = a1;
  v24 = ((uint64_t (*)(char *, uint64_t, uint64_t))v23)(v18, a1, v14);
  v67 = v22;
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter(v25);
  v27 = v26;
  v28 = v18;
  if (os_log_type_enabled(v25, v26))
  {
    v29 = swift_slowAlloc(42, -1);
    v30 = swift_slowAlloc(96, -1);
    v66 = v30;
    v77 = v30;
    *(_DWORD *)v29 = 134218754;
    v65 = v27;
    v31 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v30);
    v64 = *(void (**)(char *, uint64_t))(v15 + 8);
    v64(v20, v14);
    v76 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v29 + 4, v29 + 12);
    *(_WORD *)(v29 + 12) = 2082;
    v32 = sub_100AA723C(*(_QWORD *)&v13[*(int *)(v70 + 60)]);
    v76 = sub_100016940(v32, v33, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v29 + 14, v29 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v13, type metadata accessor for SecureLocation);
    *(_WORD *)(v29 + 22) = 2080;
    v34 = v75;
    v35 = sub_100AA64E4();
    v76 = sub_100016940(v35, v36, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v29 + 24, v29 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v34, type metadata accessor for SecureLocation);
    *(_WORD *)(v29 + 32) = 2080;
    v37 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v14, v37);
    v76 = sub_100016940(v38, v39, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v29 + 34, v29 + 42);
    swift_bridgeObjectRelease();
    v64(v28, v14);
    _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v65, "SubmitLocation received status %ld for reason %{public}s location: %s. response: %s", (uint8_t *)v29, 0x2Au);
    v40 = v66;
    swift_arrayDestroy(v66, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    v41 = *(void (**)(char *, uint64_t))(v15 + 8);
    v41(v20, v14);
    sub_1000126B0((uint64_t)v13, type metadata accessor for SecureLocation);
    sub_1000126B0(v75, type metadata accessor for SecureLocation);
    v41(v18, v14);
  }

  v43 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v42);
  if (v43 == 428)
  {
    sub_10054F6F0(0, 0, 0, 0, 1);
LABEL_15:
    v73(0);
    goto LABEL_16;
  }
  if (v43 == 200)
  {
    v44 = FMNServerInteractionController.FMNResponseFields.data.getter(200);
    v46 = v45;
    v47 = v68;
    static String.Encoding.utf8.getter(v44);
    v48 = String.init(data:encoding:)(v44, v46, v47);
    v50 = v49;
    v51 = sub_10001BC14(v44, v46);
    if (v50)
    {
      swift_bridgeObjectRetain(v50);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.default.getter(v53);
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc(12, -1);
        v56 = swift_slowAlloc(32, -1);
        v77 = v56;
        *(_DWORD *)v55 = 136315138;
        swift_bridgeObjectRetain(v50);
        v76 = sub_100016940(v48, v50, &v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v55 + 4, v55 + 12);
        swift_bridgeObjectRelease_n(v50, 3);
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "SubmitLocation Received responseString %s", v55, 0xCu);
        swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v56, -1, -1);
        swift_slowDealloc(v55, -1, -1);

      }
      else
      {

        v51 = swift_bridgeObjectRelease_n(v50, 2);
      }
    }
    v61 = FMNServerInteractionController.FMNResponseFields.data.getter(v51);
    v63 = v62;
    sub_1005301EC(v61, v62);
    sub_10001BC14(v61, v63);
    goto LABEL_15;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
  v57 = objc_allocWithZone((Class)NSError);
  v58 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v59 = objc_msgSend(v57, "initWithDomain:code:userInfo:", v58, 0, 0);

  v60 = v59;
  v73(v59);

LABEL_16:
  Transaction.capture()();
}

void sub_10052F360(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B7A18);
  swift_errorRetain(a1);
  v5 = swift_errorRetain(a1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(a1);
    v10 = _swift_stdlib_bridgeErrorToNSError(a1);
    v12 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "SubmitLocation failed %{public}@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  a2(a1);
  Transaction.capture()();
}

void sub_10052F540(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  _QWORD v18[5];
  char v19;
  NSObject *v20;

  v2 = v1;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B7A18);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "republishLastLocation requested", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (v9
    && (v10 = v9,
        v11 = objc_msgSend(v9, "uniqueDeviceIdentifier"),
        v10,
        v11))
  {
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v15 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v15);
    v18[2] = v2;
    v18[3] = v12;
    v18[4] = v14;
    v19 = a1 & 1;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.republishLocation", 47, 2, sub_10055537C, v18, &type metadata for () + 1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = Logger.logObject.getter(v9);
    v16 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v16, "Unable to get device identifier for server Republish", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

  }
}

uint64_t sub_10052F77C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;

  v10 = swift_allocObject(&unk_10107DD30, 40, 7);
  *(_QWORD *)(v10 + 16) = a2;
  *(_BYTE *)(v10 + 24) = a5;
  *(_QWORD *)(v10 + 32) = a1;
  swift_retain();
  swift_retain();
  sub_100441EA8(a3, a4, (uint64_t)sub_1005553B0, v10);
  return swift_release();
}

void sub_10052F820(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v33 = a3;
  v34 = a2;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_10001A9A8(&qword_101119450);
  v10 = __chkstk_darwin(v32);
  v31 = (uint64_t)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v31 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v31 - v15;
  v17 = type metadata accessor for SecureLocation(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100553D34(a1, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_100004048((uint64_t)v16, &qword_101119450);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v21 = type metadata accessor for Logger(0);
    sub_10001A9E8(v21, (uint64_t)qword_1011B7A18);
    v22 = sub_100553D34(a1, (uint64_t)v14);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v36 = v26;
      *(_DWORD *)v25 = 136315138;
      v27 = v31;
      sub_100553D34((uint64_t)v14, v31);
      v28 = String.init<A>(describing:)(v27, v32);
      v35 = sub_100016940(v28, v29, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease();
      sub_100004048((uint64_t)v14, &qword_101119450);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unable to get location for republish %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      sub_100004048((uint64_t)v14, &qword_101119450);
    }

    Transaction.capture()();
  }
  else
  {
    sub_1000126EC((uint64_t)v16, (uint64_t)v20, type metadata accessor for SecureLocation);
    v30 = &v20[*(int *)(v17 + 52)];
    Date.addingTimeInterval(_:)(1.0);
    (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v30, v9, v6);
    swift_retain();
    sub_10054EC34((uint64_t)v20, v33 & 1, v34, a4);
    swift_release();
    sub_1000126B0((uint64_t)v20, type metadata accessor for SecureLocation);
  }
}

void sub_10052FB8C(void (*a1)(_QWORD, uint64_t), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24[2];

  v3 = v2;
  v6 = *(_QWORD *)(v2 + 328);
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10055531C);
  if (LOBYTE(v24[0]) == 1)
  {
    sub_100C03B84((uint64_t)a1, a2);
    sub_100BFC0AC();
    if (*(_QWORD *)(v2 + 344))
    {
      swift_retain();
      DispatchTimer.cancel()();
      swift_release();
      *(_QWORD *)(v2 + 344) = 0;
      swift_release();
    }
    v7 = swift_allocObject(&unk_10107DD08, 24, 7);
    swift_weakInit(v7 + 16, v3);
    v8 = type metadata accessor for DispatchTimer(0);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    *(_QWORD *)(v3 + 344) = DispatchTimer.init(deadline:repeating:leeway:queue:block:)(0, sub_10055535C, v7, 300.0, 0.0, 30.0);
    swift_release();
    if (*(_QWORD *)(v3 + 344))
    {
      swift_retain();
      DispatchTimer.resume()();
      swift_release();
    }
    sub_10053848C();
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v9 = type metadata accessor for Logger(0);
    sub_10001A9E8(v9, (uint64_t)qword_1011B7A18);
    v10 = swift_retain();
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v24[0] = v14;
      *(_DWORD *)v13 = 136315138;
      v15 = v6 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix;
      v17 = *(_QWORD *)(v6 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix);
      v16 = *(_QWORD *)(v15 + 8);
      swift_bridgeObjectRetain(v16);
      v23 = sub_100016940(v17, v16, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v13 + 4, v13 + 12);
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s - not available for publish.", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

      swift_release();
    }
    type metadata accessor for SecureLocationsStewieError(0);
    v19 = v18;
    v23 = 5;
    v20 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v21 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
    _BridgedStoredNSError.init(_:userInfo:)(v24, &v23, v20, v19, v21);
    v22 = (void *)v24[0];
    a1(0, v24[0]);

  }
}

void sub_10052FEE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t Strong;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[5];
  _BYTE v22[32];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[3];

  v2 = a1 + 16;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1011B7A18);
  v4 = swift_retain_n(a1, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v25[0] = v8;
    *(_DWORD *)v7 = 136315138;
    swift_beginAccess(v2, v22, 0, 0);
    Strong = swift_weakLoadStrong(v2);
    if (Strong)
    {
      v10 = (char *)*(id *)(Strong + 328);
      swift_release();
      v12 = *(_QWORD *)&v10[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v11 = *(_QWORD *)&v10[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v11);

    }
    else
    {
      v11 = 0xE800000000000000;
      v12 = 0x3A636F6C6574696CLL;
    }
    v24 = sub_100016940(v12, v11, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v7 + 4, v7 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s timed out waiting to get a location fix from GPS", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
  swift_beginAccess(v2, v25, 0, 0);
  v13 = swift_weakLoadStrong(v2);
  if (v13)
  {
    v14 = *(id *)(v13 + 328);
    swift_release();
    type metadata accessor for SecureLocationsStewieError(0);
    v16 = v15;
    v23 = 7;
    v17 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v18 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
    _BridgedStoredNSError.init(_:userInfo:)(&v24, &v23, v17, v16, v18);
    v19 = (void *)v24;
    v20 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v20);
    v21[2] = v14;
    v21[3] = v19;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty.secureLocations.exitLiteLocationReq", 64, 2, sub_100555364, v21, &type metadata for () + 1);

  }
}

uint64_t sub_1005301EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  if (qword_1010E9CD8 != -1)
    swift_once(&qword_1010E9CD8, sub_1005201AC);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1010FE9B0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v16 = v9;
    *(_DWORD *)v8 = 136446210;
    v14 = sub_100016940(0xD00000000000002FLL, 0x8000000100EDA6F0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v8 + 4, v8 + 12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  v10 = type metadata accessor for JSONDecoder(0);
  v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  JSONDecoder.init()(v11);
  v12 = sub_1005552C0();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for SecureLocationsSubmitResponseBody, a1, a2, &type metadata for SecureLocationsSubmitResponseBody, v12);
  if (v17 != 1)
    sub_10052B8CC(v16);
  return swift_release();
}

void sub_1005304A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  char *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  id v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t aBlock[6];

  v5 = v4;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v11 = *(_QWORD *)(v10 - 8);
  v55 = v10;
  v56 = v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v58 = *(_QWORD *)(v14 - 8);
  v59 = v14;
  __chkstk_darwin(v14);
  v57 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v16 = type metadata accessor for Logger(0);
  sub_10001A9E8(v16, (uint64_t)qword_1011B7A18);
  v17 = a2;
  swift_bridgeObjectRetain(a1);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  v54 = v20;
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v52 = a3;
    v22 = v21;
    v23 = swift_slowAlloc(32, -1);
    v50 = v23;
    *(_DWORD *)v22 = 134218242;
    v60 = *(_QWORD **)(a1 + 16);
    aBlock[0] = v23;
    v53 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, aBlock, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    v49 = v22 + 14;
    v24 = objc_msgSend(v17, "clientApp");
    v25 = v17;
    v26 = v13;
    v27 = v24;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v51 = a1;
    v29 = v28;
    v31 = v30;

    v13 = v26;
    v17 = v25;
    v32 = v29;
    v5 = v4;
    a1 = v51;
    v60 = (_QWORD *)sub_100016940(v32, v31, aBlock);
    a4 = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, aBlock, v49, v22 + 22);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v54, "Unsubscribe for %ld IDs for clientApp %s", (uint8_t *)v22, 0x16u);
    v33 = v50;
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    v34 = v22;
    a3 = v52;
    swift_slowDealloc(v34, -1, -1);

    if (*(_QWORD *)(a1 + 16))
    {
LABEL_5:
      v36 = (_QWORD *)swift_allocObject(&unk_10107DAB0, 56, 7);
      v36[2] = a1;
      v36[3] = v5;
      v36[4] = v17;
      v36[5] = a3;
      v36[6] = a4;
      aBlock[4] = (uint64_t)sub_100555014;
      aBlock[5] = (uint64_t)v36;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100016FB8;
      aBlock[3] = (uint64_t)&unk_10107DAC8;
      v37 = _Block_copy(aBlock);
      v38 = v17;
      swift_bridgeObjectRetain(a1);
      swift_retain();
      v39 = swift_retain();
      v40 = v57;
      static DispatchQoS.unspecified.getter(v39);
      v60 = _swiftEmptyArrayStorage;
      v41 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v42 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v43 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v44 = v42;
      v45 = v55;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v44, v43, v55, v41);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v40, v13, v37);
      _Block_release(v37);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v13, v45);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v40, v59);
      swift_release();
      return;
    }
  }
  else
  {

    v35 = swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
  }
  v46 = Logger.logObject.getter(v35);
  v47 = static os_log_type_t.default.getter(v46);
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "No findMyIds specified for Unsubscribe - not proceeding", v48, 2u);
    swift_slowDealloc(v48, -1, -1);
  }

}

uint64_t sub_10053092C(_QWORD *a1, uint64_t a2, char *a3, void (*a4)(id), uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t MyAppURLSessionFactory;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  unint64_t v53;
  unint64_t v54;
  id v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  id v77;
  NSString v78;
  id v79;
  id v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  const char *v85;
  uint64_t v87;
  id v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  __int128 v95;
  __int128 v96;
  _QWORD *v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  BOOL v105;
  uint8_t *v106;
  uint8_t *v107;
  unint64_t v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  _BOOL4 v112;
  uint8_t *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  os_log_type_t v122;
  uint8_t *v123;
  id v124;
  NSString v125;
  id v126;
  id v127;
  uint64_t v128;
  NSObject *v129;
  os_log_type_t v130;
  uint8_t *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  _QWORD *v144;
  uint64_t v145;
  id v146;
  void (*v147)(id);
  unint64_t v148;
  uint64_t v149;
  id v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  char *v162;
  void (*v163)(id);
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  char *v170;
  dispatch_queue_t v171;
  char *v172;
  uint64_t v173;
  uint64_t aBlock;
  _QWORD v175[4];
  char *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  _QWORD *v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  char v184;
  _QWORD *v185;

  v164 = a5;
  v163 = a4;
  v172 = a3;
  v168 = a2;
  v6 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v6);
  v162 = (char *)&v152 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v8);
  v10 = (char *)&v152 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SecureLocationsUnsubscribeEndpoint(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v152 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v152 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v152 - v18;
  v20 = enum case for FMNAccountType.searchParty(_:);
  v21 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v19, v20, v21);
  sub_100883790((uint64_t)&v19[*(int *)(v11 + 20)]);
  if (qword_1010EA098 != -1)
    goto LABEL_64;
  while (1)
  {
    v22 = type metadata accessor for Logger(0);
    v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B7A18);
    v24 = sub_10005972C((uint64_t)v19, (uint64_t)v17, type metadata accessor for SecureLocationsUnsubscribeEndpoint);
    v171 = v23;
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    v27 = os_log_type_enabled(v25, v26);
    v170 = v19;
    v169 = a1;
    if (v27)
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v177 = v29;
      *(_DWORD *)v28 = 136315138;
      sub_10005972C((uint64_t)v17, (uint64_t)v14, type metadata accessor for SecureLocationsUnsubscribeEndpoint);
      v30 = String.init<A>(describing:)(v14, v11);
      aBlock = sub_100016940(v30, v31, (uint64_t *)&v177);
      a1 = v169;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v175, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v17, type metadata accessor for SecureLocationsUnsubscribeEndpoint);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Unsubscribe endpoint %s", v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      v32 = v29;
      v19 = v170;
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v17, type metadata accessor for SecureLocationsUnsubscribeEndpoint);
    }

    MyAppURLSessionFactory = type metadata accessor for FindMyAppURLSessionFactory(0);
    swift_allocObject(MyAppURLSessionFactory, *(unsigned int *)(MyAppURLSessionFactory + 48), *(unsigned __int16 *)(MyAppURLSessionFactory + 52));
    v34 = type metadata accessor for FMNMockingPreferences(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v10, 1, 1, v34);
    v35 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v10);
    v36 = type metadata accessor for ServerInteractionController(0);
    v37 = swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
    sub_10005972C((uint64_t)v19, (uint64_t)v14, type metadata accessor for SecureLocationsUnsubscribeEndpoint);
    swift_retain();
    v38 = (_QWORD *)sub_10041D8F0((uint64_t)v14, v35, v37);
    v39 = v38;
    v40 = a1[2];
    v41 = _swiftEmptyArrayStorage;
    if (v40)
    {
      v165 = v38;
      v166 = v35;
      swift_bridgeObjectRetain(a1);
      v42 = a1 + 5;
      v167 = v40;
      v43 = v40;
      do
      {
        v45 = *(v42 - 1);
        v46 = *v42;
        swift_bridgeObjectRetain(*v42);
        v47 = sub_10043F8D0(v45, v46);
        v49 = v48;
        v51 = v50;
        swift_bridgeObjectRelease();
        if (v51)
        {
          v52 = objc_msgSend(v172, "subscriptionMode");
          if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
            v41 = sub_1007C9F60(0, v41[2] + 1, 1, v41);
          v54 = v41[2];
          v53 = v41[3];
          if (v54 >= v53 >> 1)
            v41 = sub_1007C9F60((_QWORD *)(v53 > 1), v54 + 1, 1, v41);
          v41[2] = v54 + 1;
          v44 = &v41[4 * v54];
          v44[4] = v47;
          v44[5] = v49;
          v44[6] = v51;
          v44[7] = v52;
        }
        v42 += 2;
        --v43;
      }
      while (v43);
      swift_bridgeObjectRelease();
      v19 = v170;
      v35 = v166;
      v39 = v165;
      v40 = v167;
    }
    if (!v41[2])
    {
      v81 = swift_bridgeObjectRelease();
      v82 = Logger.logObject.getter(v81);
      v83 = static os_log_type_t.error.getter(v82);
      if (os_log_type_enabled(v82, v83))
      {
        v84 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v84 = 0;
        v85 = "No Unsubscribe request data generated. Not sending request";
        goto LABEL_28;
      }
LABEL_29:

      swift_release();
LABEL_30:
      swift_release();
      return sub_1000126B0((uint64_t)v19, type metadata accessor for SecureLocationsUnsubscribeEndpoint);
    }
    v55 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
    if (!v55
      || (v56 = v55,
          v57 = objc_msgSend(v55, "uniqueDeviceIdentifier"),
          v56,
          !v57))
    {
      v73 = swift_bridgeObjectRelease();
      v74 = Logger.logObject.getter(v73);
      v75 = static os_log_type_t.error.getter(v74);
      if (os_log_type_enabled(v74, v75))
      {
        v76 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v76 = 0;
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "Unable to get device identifier for server Unsubscribe", v76, 2u);
        swift_slowDealloc(v76, -1, -1);
      }

      static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
      v77 = objc_allocWithZone((Class)NSError);
      v78 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v79 = objc_msgSend(v77, "initWithDomain:code:userInfo:", v78, 4, 0);

      v80 = v79;
      v163(v79);
      swift_release();

      goto LABEL_30;
    }
    v167 = v40;
    v160 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
    v59 = v58;

    v60 = v168;
    v61 = sub_10001A9A8(&qword_1010F6350);
    OS_dispatch_queue.sync<A>(execute:)(sub_100553E20, v60, v61);
    v62 = *((_QWORD *)&v177 + 1);
    if (!*((_QWORD *)&v177 + 1))
    {
      swift_bridgeObjectRelease();
      v87 = swift_bridgeObjectRelease();
      v82 = Logger.logObject.getter(v87);
      v83 = static os_log_type_t.error.getter(v82);
      if (os_log_type_enabled(v82, v83))
      {
        v84 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v84 = 0;
        v85 = "No APS token. Not proceeding with SubscribeAndFetch request";
LABEL_28:
        _os_log_impl((void *)&_mh_execute_header, v82, v83, v85, v84, 2u);
        swift_slowDealloc(v84, -1, -1);
      }
      goto LABEL_29;
    }
    v63 = v59;
    v64 = v177;
    v65 = v172;
    v66 = objc_msgSend(v172, "clientApp");
    v157 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    v68 = v67;

    v158 = v62;
    swift_bridgeObjectRetain(v62);
    v159 = v63;
    swift_bridgeObjectRetain(v63);
    v69 = objc_msgSend(v65, "subscriptionMode", swift_bridgeObjectRetain(v68).n128_f64[0]);
    v70 = &qword_1010EA000;
    v166 = v35;
    v165 = v39;
    if (v69 == (id)1)
    {
      if (qword_1010EA428 != -1)
        v69 = (id)swift_once(&qword_1010EA428, sub_100C48554);
      v71 = qword_1011B7F60;
      __chkstk_darwin(v69);
      *(&v152 - 4) = (uint64_t)v169;
      *(&v152 - 3) = v71;
      *((_BYTE *)&v152 - 16) = 1;
      swift_retain();
      v72 = sub_10001A9A8(&qword_1010F9C60);
      OS_dispatch_queue.sync<A>(execute:)(sub_100555124, &v152 - 6, v72);
      swift_release();
      v161 = (_QWORD *)v177;
      swift_bridgeObjectRelease();
      v70 = &qword_1010EA000;
    }
    else
    {
      v161 = _swiftEmptyDictionarySingleton;
    }
    v88 = objc_msgSend(v172, "subscriptionMode");
    v89 = 0uLL;
    if (v88 == (id)2)
    {
      if (v70[133] != -1)
        swift_once(&qword_1010EA428, sub_100C48554);
      v90 = qword_1011B7F60;
      swift_retain();
      v91 = sub_10001A9A8(&qword_1010F9C78);
      OS_dispatch_queue.sync<A>(execute:)(sub_10055510C, v90, v91);
      swift_release();
      v92 = (uint64_t)v170;
      v93 = v158;
      if ((_QWORD)v179)
      {
        v155 = v177;
        v154 = v178;
        v94 = (char)v180;
        v156 = v179;
        swift_bridgeObjectRelease();
        v95 = v154;
        v96 = v156;
        v89 = v155;
      }
      else
      {
        v94 = 0;
        v95 = 0uLL;
        v96 = 0uLL;
        v89 = 0uLL;
      }
    }
    else
    {
      v94 = 0;
      v95 = 0uLL;
      v96 = 0uLL;
      v92 = (uint64_t)v170;
      v93 = v158;
    }
    *(_QWORD *)&v177 = v64;
    *((_QWORD *)&v177 + 1) = v93;
    *(_QWORD *)&v178 = v160;
    *((_QWORD *)&v178 + 1) = v159;
    *(_QWORD *)&v179 = v157;
    *((_QWORD *)&v179 + 1) = v68;
    v97 = v161;
    v180 = v161;
    v181 = v89;
    v182 = v95;
    v183 = v96;
    v184 = v94;
    v185 = _swiftEmptyArrayStorage;
    *(_QWORD *)&v155 = v96;
    swift_bridgeObjectRetain(v96);
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v97);
    swift_bridgeObjectRelease();
    v98 = sub_100884064((uint64_t)v41, (uint64_t *)&v177);
    if (!v98)
    {
      v120 = swift_bridgeObjectRelease();
      v121 = Logger.logObject.getter(v120);
      v122 = static os_log_type_t.error.getter(v121);
      if (os_log_type_enabled(v121, v122))
      {
        v123 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v123 = 0;
        _os_log_impl((void *)&_mh_execute_header, v121, v122, "Failed to create request for server SubscribeAndFetch", v123, 2u);
        swift_slowDealloc(v123, -1, -1);
      }

      static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
      v124 = objc_allocWithZone((Class)NSError);
      v125 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v126 = objc_msgSend(v124, "initWithDomain:code:userInfo:", v125, 4, 0);

      v127 = v126;
      v163(v126);
      swift_release();

      swift_release();
      sub_1000126B0(v92, type metadata accessor for SecureLocationsUnsubscribeEndpoint);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v101 = (uint64_t)v98;
    v102 = v99;
    *(_QWORD *)&v156 = v100;
    *(_QWORD *)&v154 = v68;
    v103 = Logger.logObject.getter(v98);
    v104 = static os_log_type_t.default.getter(v103);
    v105 = os_log_type_enabled(v103, v104);
    v160 = v102;
    if (v105)
    {
      v106 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v106 = 0;
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "Sending Unsubscribe server request", v106, 2u);
      v107 = v106;
      v102 = v160;
      swift_slowDealloc(v107, -1, -1);
    }

    v108 = v156;
    sub_100555020(v101, v102, v156);
    swift_bridgeObjectRetain(v101);
    v109 = sub_10001BBBC(v102, v108);
    v110 = Logger.logObject.getter(v109);
    v111 = static os_log_type_t.debug.getter(v110);
    v112 = os_log_type_enabled(v110, v111);
    v157 = v101;
    if (v112)
    {
      v113 = (uint8_t *)swift_slowAlloc(12, -1);
      v153 = swift_slowAlloc(32, -1);
      aBlock = v153;
      *(_DWORD *)v113 = 136315138;
      swift_bridgeObjectRetain(v101);
      v115 = Dictionary.description.getter(v114, &type metadata for String, &type metadata for String, &protocol witness table for String);
      v117 = v116;
      swift_bridgeObjectRelease();
      v118 = v115;
      v101 = v157;
      v173 = sub_100016940(v118, v117, &aBlock);
      v108 = v156;
      v102 = v160;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, &aBlock, v113 + 4, v113 + 12);
      swift_bridgeObjectRelease();
      sub_100153D94(v101, v102, v108);
      sub_100153D94(v101, v102, v108);
      _os_log_impl((void *)&_mh_execute_header, v110, v111, "Unsubscribe request headers %s", v113, 0xCu);
      v119 = v153;
      swift_arrayDestroy(v153, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v119, -1, -1);
      swift_slowDealloc(v113, -1, -1);
    }
    else
    {
      sub_100153D94(v101, v102, v108);
      sub_100153D94(v101, v102, v108);
    }

    swift_bridgeObjectRetain(v101);
    sub_10001BBBC(v102, v108);
    swift_bridgeObjectRetain(v101);
    v128 = sub_10001BBBC(v102, v108);
    v129 = Logger.logObject.getter(v128);
    v130 = static os_log_type_t.debug.getter(v129);
    if (os_log_type_enabled(v129, v130))
    {
      v131 = (uint8_t *)swift_slowAlloc(12, -1);
      v132 = swift_slowAlloc(32, -1);
      aBlock = v132;
      *(_DWORD *)v131 = 136315138;
      v133 = v162;
      static String.Encoding.utf8.getter(v132);
      v134 = String.init(data:encoding:)(v160, v156, v133);
      if (v135)
      {
        v136 = v135;
      }
      else
      {
        v134 = 7104878;
        v136 = 0xE300000000000000;
      }
      v173 = sub_100016940(v134, v136, &aBlock);
      v102 = v160;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v173, &aBlock, v131 + 4, v131 + 12);
      v108 = v156;
      swift_bridgeObjectRelease();
      sub_100153D94(v157, v102, v108);
      sub_100153D94(v157, v102, v108);
      _os_log_impl((void *)&_mh_execute_header, v129, v130, "Unsubscribe request body %s", v131, 0xCu);
      swift_arrayDestroy(v132, 1, (char *)&type metadata for Any + 8);
      v137 = v132;
      v101 = v157;
      swift_slowDealloc(v137, -1, -1);
      swift_slowDealloc(v131, -1, -1);
    }
    else
    {
      sub_100153D94(v101, v102, v108);
      sub_100153D94(v101, v102, v108);
    }

    v138 = v169;
    v139 = v167;
    if (!v167)
      break;
    v167 = *(_QWORD *)(v168 + 48);
    swift_bridgeObjectRetain(v169);
    v11 = (uint64_t)(v138 + 5);
    while (1)
    {
      v140 = *(_QWORD *)(v11 - 8);
      v141 = *(_QWORD *)v11;
      v142 = v167;
      v171 = *(dispatch_queue_t *)(v167 + 16);
      v14 = (char *)swift_allocObject(&unk_10107DB00, 49, 7);
      *((_QWORD *)v14 + 2) = v142;
      *((_QWORD *)v14 + 3) = v140;
      v10 = v172;
      *((_QWORD *)v14 + 4) = v141;
      *((_QWORD *)v14 + 5) = v10;
      v14[48] = 3;
      v17 = (char *)swift_allocObject(&unk_10107DB28, 32, 7);
      *((_QWORD *)v17 + 2) = sub_100553F14;
      *((_QWORD *)v17 + 3) = v14;
      v175[3] = sub_10005CBA4;
      v176 = v17;
      aBlock = (uint64_t)_NSConcreteStackBlock;
      v175[0] = 1107296256;
      v175[1] = sub_10001D8B8;
      v175[2] = &unk_10107DB40;
      a1 = _Block_copy(&aBlock);
      v19 = v176;
      swift_bridgeObjectRetain_n(v141, 2);
      v143 = v10;
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v171, a1);
      _Block_release(a1);
      LOBYTE(v142) = swift_isEscapingClosureAtFileLocation(v17, "", 120, 101, 35, 1);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if ((v142 & 1) != 0)
        break;
      v11 += 16;
      if (!--v139)
      {
        swift_bridgeObjectRelease();
        v138 = v169;
        v101 = v157;
        v102 = v160;
        v108 = v156;
        goto LABEL_61;
      }
    }
    __break(1u);
LABEL_64:
    swift_once(&qword_1010EA098, sub_10098F7D8);
  }
LABEL_61:
  swift_bridgeObjectRelease();
  sub_100555020(v101, v102, v108);
  sub_10034DC60(v101, v102, v108, 0, v165);
  sub_100153D94(v101, v102, v108);
  v144 = (_QWORD *)swift_allocObject(&unk_10107DB78, 56, 7);
  v145 = v168;
  v144[2] = v168;
  v144[3] = v138;
  v146 = v172;
  v147 = v163;
  v144[4] = v172;
  v144[5] = v147;
  v148 = v108;
  v149 = v164;
  v144[6] = v164;
  swift_bridgeObjectRetain(v138);
  swift_retain();
  v150 = v146;
  swift_retain();
  Future.addSuccess(block:)(sub_1005550DC, v144);
  swift_release();
  swift_release();
  v151 = (_QWORD *)swift_allocObject(&unk_10107DBA0, 40, 7);
  v151[2] = v145;
  v151[3] = v147;
  v151[4] = v149;
  swift_retain();
  swift_retain();
  Future.addFailure(block:)(sub_100555100, v151);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100153D94(v101, v160, v148);
  swift_release();
  sub_1000126B0((uint64_t)v170, type metadata accessor for SecureLocationsUnsubscribeEndpoint);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

