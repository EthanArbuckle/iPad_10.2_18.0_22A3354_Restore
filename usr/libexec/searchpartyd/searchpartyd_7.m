uint64_t sub_100403D6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100403DC8, 0, 0);
}

uint64_t sub_100403DC8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 144));
  **(_QWORD **)(v0 + 120) = *(_QWORD *)(v0 + 160);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100403E04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(a2 + 32));
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v5 == v8 && v7 == v9)
  {
    v13 = 0;
LABEL_17:
    swift_bridgeObjectRelease_n(v7, 2);
    return v13;
  }
  v11 = v9;
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v11);
  v13 = 0;
  if ((v12 & 1) == 0)
  {
    v14 = v2 - 1;
    while (1)
    {
      if (v14 == v13)
        return 0;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(a2 + 40 + 8 * v13));
      v7 = v16;
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      if (v15 == v17 && v7 == v18)
        break;
      v20 = v18;
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v7, v17, v18, 0);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v20);
      ++v13;
      if ((v21 & 1) != 0)
        return v13;
    }
    ++v13;
    goto LABEL_17;
  }
  return v13;
}

void sub_100403F4C(uint64_t *a1, _QWORD *a2, uint64_t a3, int a4, _QWORD *a5, _QWORD *a6, int a7, uint64_t *a8, void (*a9)(uint64_t, uint64_t), uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  void (*v50)(_BYTE *, uint64_t);
  uint64_t v51;
  char v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  char isUniquelyReferenced_nonNull_native;
  _BYTE v59[16];
  uint64_t v60;
  uint64_t *v61;
  int v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  int v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;

  v11 = v10;
  v78 = a8;
  v67 = a7;
  v75 = a5;
  v76 = a6;
  v16 = type metadata accessor for UUID(0);
  v72 = *(_QWORD *)(v16 - 8);
  v73 = v16;
  __chkstk_darwin(v16);
  v71 = &v59[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = type metadata accessor for Logger(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v66 = &v59[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = __chkstk_darwin(v20);
  v65 = &v59[-v23];
  __chkstk_darwin(v22);
  v64 = &v59[-v24];
  v25 = type metadata accessor for DateInterval(0);
  v69 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v27 = &v59[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100404930(a2, a1 + 3, (uint64_t)v27);
  v74 = a3;
  v70 = v25;
  v77 = a1;
  v68 = v27;
  if (a3 >= 1)
  {
    v28 = *a1;
    v29 = a2[3];
    v66 = (_BYTE *)a2[4];
    v30 = sub_10001AA44(a2, v29);
    sub_1008595F4((uint64_t)v30, (uint64_t)v27, a4, 1, 0, v28, v29, (uint64_t)v66);
    __asm { BR              X10 }
  }
  v32 = type metadata accessor for LocationFetcher(0);
  (*(void (**)(_BYTE *, char *, uint64_t))(v19 + 16))(v66, (char *)a1 + *(int *)(v32 + 32), v18);
  v33 = sub_100030784((uint64_t)a2, (uint64_t)&v80);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter(v34);
  v36 = v35;
  if (os_log_type_enabled(v34, v35))
  {
    v37 = swift_slowAlloc(22, -1);
    v62 = v36;
    v38 = v37;
    v64 = (_BYTE *)swift_slowAlloc(32, -1);
    v84 = v64;
    *(_DWORD *)v38 = 141558275;
    v65 = (_BYTE *)v19;
    v39 = (uint8_t *)v38;
    v79 = 1752392040;
    v61 = &v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v38 + 4, v38 + 12);
    *(_WORD *)(v38 + 12) = 2081;
    v60 = v38 + 14;
    v41 = v82;
    v40 = v83;
    sub_10001AA44(&v80, v82);
    v42 = v71;
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v40 + 8) + 8) + 32))(v41);
    v43 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v63 = v18;
    v44 = v73;
    v45 = dispatch thunk of CustomStringConvertible.description.getter(v73, v43);
    v47 = v46;
    (*(void (**)(_BYTE *, uint64_t))(v72 + 8))(v42, v44);
    v79 = sub_100016940(v45, v47, (uint64_t *)&v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v61, v60, v39 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v80);
    v48 = v64;
    swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v39, -1, -1);

    v49 = v66;
    v50 = (void (*)(_BYTE *, uint64_t))*((_QWORD *)v65 + 1);
    v51 = v63;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v80);

    v50 = *(void (**)(_BYTE *, uint64_t))(v19 + 8);
    v49 = v66;
    v51 = v18;
  }
  v50(v49, v51);
  v80 = 0;
  v81 = 1;
  v52 = v67 & 1;
  LOBYTE(v79) = 1;
  while (1)
  {
    v53 = objc_autoreleasePoolPush();
    sub_100406738((uint64_t)v77, (char *)_swiftEmptyArrayStorage, a2, a4, v74, v75, (uint64_t)&v80, v76, v52, v78, a9, a10, &v79);
    if (v11)
      break;
    v11 = 0;
    objc_autoreleasePoolPop(v53);
    if ((v79 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v55 = a2[3];
      v54 = a2[4];
      sub_10001AA44(a2, v55);
      v56 = (uint64_t)v71;
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v54 + 8) + 8) + 32))(v55);
      v57 = v78;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v78);
      v84 = (_BYTE *)*v57;
      *v57 = 0x8000000000000000;
      sub_10010CE10(1, v56, isUniquelyReferenced_nonNull_native);
      *v57 = (uint64_t)v84;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v56, v73);
      (*(void (**)(_BYTE *, uint64_t))(v69 + 8))(v68, v70);
      return;
    }
  }
  objc_autoreleasePoolPop(v53);
  __break(1u);
}

uint64_t sub_100404930@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  uint64_t v70;
  _UNKNOWN **v71;
  ValueMetadata *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _UNKNOWN **v101;
  ValueMetadata *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  ValueMetadata *v125;
  _UNKNOWN **v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  _QWORD *v143;
  char *v144;
  uint64_t v145;
  NSObject *v146;
  os_log_type_t v147;
  uint64_t v148;
  uint64_t v149;
  _UNKNOWN **v150;
  ValueMetadata *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t (*v161)(uint64_t, char *, uint64_t);
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char v167;
  void *v168;
  id v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  void (*v176)(char *, uint64_t, uint64_t);
  char *v177;
  uint64_t v178;
  NSObject *v179;
  os_log_type_t v180;
  uint64_t v181;
  uint64_t v182;
  _UNKNOWN **v183;
  ValueMetadata *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  void (*v191)(char *, uint64_t);
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  NSObject *v195;
  os_log_type_t v196;
  uint64_t v197;
  uint64_t v198;
  _UNKNOWN **v199;
  ValueMetadata *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  char *v207;
  uint64_t v208;
  NSObject *v209;
  os_log_type_t v210;
  uint64_t v211;
  uint64_t v212;
  _UNKNOWN **v213;
  ValueMetadata *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  double v225;
  char *v226;
  uint64_t v227;
  void (*v228)(char *, char *, uint64_t);
  char *v229;
  char *v230;
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  NSObject *v238;
  os_log_type_t v239;
  uint64_t v240;
  _UNKNOWN **v241;
  ValueMetadata *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  void (*v255)(char *, uint64_t);
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v260;
  void (*v261)(uint64_t, uint64_t);
  char *v262;
  char *v263;
  char *v264;
  void (*v265)(char *, uint64_t, uint64_t, uint64_t);
  char *v266;
  char *v267;
  char *v268;
  char *v269;
  void (*v270)(char *, uint64_t, uint64_t);
  uint64_t v271;
  uint64_t (*v272)(uint64_t, char *, uint64_t);
  uint64_t v273;
  void (*v274)(char *, uint64_t, uint64_t);
  char *v275;
  char *v276;
  uint64_t v277;
  char *v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  _QWORD *v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  char *v288;
  char *v289;
  uint64_t v290;
  char *v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  ValueMetadata *v304;
  _UNKNOWN **v305;

  v287 = a2;
  v277 = a3;
  v281 = type metadata accessor for DateInterval(0);
  v280 = *(_QWORD *)(v281 - 8);
  __chkstk_darwin(v281);
  v279 = (char *)&v260 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v295 = *(_QWORD *)(v5 - 8);
  v296 = v5;
  v6 = __chkstk_darwin(v5);
  v282 = (char *)&v260 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v278 = (char *)&v260 - v9;
  v10 = __chkstk_darwin(v8);
  v264 = (char *)&v260 - v11;
  v12 = __chkstk_darwin(v10);
  v263 = (char *)&v260 - v13;
  v14 = __chkstk_darwin(v12);
  v268 = (char *)&v260 - v15;
  v16 = __chkstk_darwin(v14);
  v269 = (char *)&v260 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v260 - v19;
  __chkstk_darwin(v18);
  v267 = (char *)&v260 - v21;
  v294 = type metadata accessor for UUID(0);
  v285 = *(_QWORD *)(v294 - 8);
  v22 = __chkstk_darwin(v294);
  v274 = (void (*)(char *, uint64_t, uint64_t))((char *)&v260 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22);
  v288 = (char *)&v260 - v24;
  v25 = sub_10001A9A8(&qword_1010F7AE0);
  __chkstk_darwin(v25);
  v27 = (char *)&v260 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v29 = __chkstk_darwin(v28);
  v273 = (uint64_t)&v260 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v272 = (uint64_t (*)(uint64_t, char *, uint64_t))((char *)&v260 - v32);
  v33 = __chkstk_darwin(v31);
  v266 = (char *)&v260 - v34;
  v35 = __chkstk_darwin(v33);
  v292 = (char *)&v260 - v36;
  v37 = __chkstk_darwin(v35);
  v39 = (char *)&v260 - v38;
  v40 = __chkstk_darwin(v37);
  v42 = (char *)&v260 - v41;
  __chkstk_darwin(v40);
  v291 = (char *)&v260 - v43;
  v44 = type metadata accessor for Date(0);
  v293 = *(_QWORD *)(v44 - 8);
  v45 = __chkstk_darwin(v44);
  v276 = (char *)&v260 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __chkstk_darwin(v45);
  v275 = (char *)&v260 - v48;
  v49 = __chkstk_darwin(v47);
  v289 = (char *)&v260 - v50;
  v51 = __chkstk_darwin(v49);
  v284 = (char *)&v260 - v52;
  v53 = __chkstk_darwin(v51);
  v262 = (char *)&v260 - v54;
  __chkstk_darwin(v53);
  v290 = (uint64_t)&v260 - v55;
  static Date.trustedNow.getter((uint64_t)&v260 - v55);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v271 = 0;
  v56 = sub_100C1B7B0(v303);
  swift_bridgeObjectRelease();
  v286 = v44;
  v283 = a1;
  if ((v56 & 1) != 0)
  {
    v58 = a1[3];
    v57 = a1[4];
    sub_10001AA44(a1, v58);
    v59 = (uint64_t)v288;
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v57 + 8) + 8) + 32))(v58);
    sub_10081AECC(v59, (uint64_t)v27);
    v261 = *(void (**)(uint64_t, uint64_t))(v285 + 8);
    v261(v59, v294);
    v60 = type metadata accessor for KeySyncRecord(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 48))(v27, 1, v60) == 1)
    {
      sub_100004048((uint64_t)v27, &qword_1010F7AE0);
      v61 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v293 + 56);
      v61(v42, 1, 1, v44);
    }
    else
    {
      v84 = &v27[*(int *)(v60 + 28)];
      v85 = v293;
      (*(void (**)(char *, char *, uint64_t))(v293 + 16))(v42, v84, v44);
      sub_1000126B0((uint64_t)v27, type metadata accessor for KeySyncRecord);
      v61 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56);
      v61(v42, 0, 1, v44);
    }
    v86 = v295;
    v87 = (uint64_t)v291;
    sub_100005CF0((uint64_t)v42, (uint64_t)v291, (uint64_t *)&unk_1010EA690);
    v88 = type metadata accessor for LocationFetcher(0);
    v89 = v296;
    v90 = v297 + *(int *)(v88 + 32);
    v91 = v267;
    v270 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
    v270(v267, v90, v296);
    v92 = v87;
    v93 = v91;
    sub_10000F9B8(v92, (uint64_t)v39, (uint64_t *)&unk_1010EA690);
    v94 = sub_100030784((uint64_t)a1, (uint64_t)&v303);
    v95 = Logger.logObject.getter(v94);
    v96 = static os_log_type_t.default.getter(v95);
    if (os_log_type_enabled(v95, v96))
    {
      v97 = swift_slowAlloc(32, -1);
      v265 = v61;
      v98 = v97;
      v260 = swift_slowAlloc(64, -1);
      v299 = v260;
      *(_DWORD *)v98 = 136446723;
      v99 = Optional.debugDescription.getter(v28);
      v302 = sub_100016940(v99, v100, &v299);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v98 + 4, v98 + 12);
      swift_bridgeObjectRelease();
      sub_100004048((uint64_t)v39, (uint64_t *)&unk_1010EA690);
      *(_WORD *)(v98 + 12) = 2160;
      v302 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v98 + 14, v98 + 22);
      *(_WORD *)(v98 + 22) = 2081;
      v102 = v304;
      v101 = v305;
      sub_10001AA44(&v303, (uint64_t)v304);
      v103 = v288;
      (*(void (**)(ValueMetadata *))(*((_QWORD *)v101[1] + 1) + 32))(v102);
      v104 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v105 = v294;
      v106 = dispatch thunk of CustomStringConvertible.description.getter(v294, v104);
      v108 = v107;
      v109 = v105;
      a1 = v283;
      v261((uint64_t)v103, v109);
      v302 = sub_100016940(v106, v108, &v299);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v98 + 24, v98 + 32);
      v110 = v295;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v303);
      _os_log_impl((void *)&_mh_execute_header, v95, v96, "Using last known good key: %{public}s, for beacon %{private,mask.hash}s.", (uint8_t *)v98, 0x20u);
      v111 = v260;
      swift_arrayDestroy(v260, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v111, -1, -1);
      v112 = v98;
      v61 = v265;
      swift_slowDealloc(v112, -1, -1);

      v83 = *(void (**)(char *, uint64_t))(v110 + 8);
      v83(v267, v89);
    }
    else
    {
      sub_100004048((uint64_t)v39, (uint64_t *)&unk_1010EA690);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v303);

      v83 = *(void (**)(char *, uint64_t))(v86 + 8);
      v83(v93, v89);
    }
    v63 = v89;
    v44 = v286;
  }
  else
  {
    v265 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v293 + 56);
    v265(v291, 1, 1, v44);
    v62 = type metadata accessor for LocationFetcher(0);
    v63 = v296;
    v64 = v297 + *(int *)(v62 + 32);
    v65 = v295;
    v270 = *(void (**)(char *, uint64_t, uint64_t))(v295 + 16);
    v270(v20, v64, v296);
    v66 = sub_100030784((uint64_t)a1, (uint64_t)&v303);
    v67 = Logger.logObject.getter(v66);
    v68 = static os_log_type_t.default.getter(v67);
    if (os_log_type_enabled(v67, v68))
    {
      v69 = swift_slowAlloc(22, -1);
      v70 = swift_slowAlloc(32, -1);
      v299 = v70;
      *(_DWORD *)v69 = 141558275;
      v302 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v69 + 4, v69 + 12);
      *(_WORD *)(v69 + 12) = 2081;
      v267 = (char *)(v69 + 14);
      v72 = v304;
      v71 = v305;
      sub_10001AA44(&v303, (uint64_t)v304);
      v73 = v288;
      (*(void (**)(ValueMetadata *))(*((_QWORD *)v71[1] + 1) + 32))(v72);
      v74 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v75 = v294;
      v76 = dispatch thunk of CustomStringConvertible.description.getter(v294, v74);
      v78 = v77;
      v79 = v75;
      a1 = v283;
      (*(void (**)(char *, uint64_t))(v285 + 8))(v73, v79);
      v302 = sub_100016940(v76, v78, &v299);
      v80 = v295;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v267, v69 + 22);
      v44 = v286;
      v81 = v296;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v303);
      swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
      v82 = v70;
      v63 = v81;
      swift_slowDealloc(v82, -1, -1);
      swift_slowDealloc(v69, -1, -1);

      v83 = *(void (**)(char *, uint64_t))(v80 + 8);
      v83(v20, v81);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v303);

      v83 = *(void (**)(char *, uint64_t))(v65 + 8);
      v83(v20, v63);
    }
    v61 = v265;
  }
  v113 = v287[3];
  v114 = v287[4];
  sub_10001AA44(v287, v113);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v114 + 40))(v113, v114) & 1) != 0)
  {
    v267 = (char *)v83;
    v115 = a1[3];
    v116 = a1[4];
    sub_10001AA44(a1, v115);
    v117 = (uint64_t)v266;
    (*(void (**)(uint64_t, uint64_t))(v116 + 184))(v115, v116);
    v61((char *)v117, 0, 1, v44);
    sub_100005CF0(v117, (uint64_t)v292, (uint64_t *)&unk_1010EA690);
    v287 = (_QWORD *)type metadata accessor for LocationFetcher(0);
    v118 = v269;
    v270(v269, v297 + *((int *)v287 + 8), v63);
    sub_100030784((uint64_t)a1, (uint64_t)&v303);
    v119 = sub_100030784((uint64_t)a1, (uint64_t)&v299);
    v120 = Logger.logObject.getter(v119);
    v121 = static os_log_type_t.default.getter(v120);
    if (os_log_type_enabled(v120, v121))
    {
      v122 = v44;
      v123 = swift_slowAlloc(32, -1);
      v124 = swift_slowAlloc(64, -1);
      v302 = v124;
      *(_DWORD *)v123 = 136446723;
      v125 = v304;
      v126 = v305;
      sub_10001AA44(&v303, (uint64_t)v304);
      v127 = v262;
      ((void (*)(ValueMetadata *, _UNKNOWN **))v126[23])(v125, v126);
      v128 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v129 = dispatch thunk of CustomStringConvertible.description.getter(v122, v128);
      v131 = v130;
      (*(void (**)(char *, uint64_t))(v293 + 8))(v127, v122);
      v298 = sub_100016940(v129, v131, &v302);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v298, &v299, v123 + 4, v123 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v303);
      *(_WORD *)(v123 + 12) = 2160;
      v298 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v298, &v299, v123 + 14, v123 + 22);
      *(_WORD *)(v123 + 22) = 2081;
      v133 = v300;
      v132 = v301;
      sub_10001AA44(&v299, v300);
      v134 = v288;
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v132 + 8) + 8) + 32))(v133);
      v135 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v136 = v294;
      v137 = dispatch thunk of CustomStringConvertible.description.getter(v294, v135);
      v139 = v138;
      v140 = v134;
      a1 = v283;
      (*(void (**)(char *, uint64_t))(v285 + 8))(v140, v136);
      v298 = sub_100016940(v137, v139, &v302);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v298, &v299, v123 + 24, v123 + 32);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v299);
      _os_log_impl((void *)&_mh_execute_header, v120, v121, "Using policy fetch limit of baseDate/Pairing: %{public}s for beacon %{private,mask.hash}s.", (uint8_t *)v123, 0x20u);
      swift_arrayDestroy(v124, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v124, -1, -1);
      swift_slowDealloc(v123, -1, -1);

      v141 = v269;
      v142 = v296;
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v303);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v299);

      v141 = v118;
      v142 = v63;
    }
    ((void (*)(char *, uint64_t))v267)(v141, v142);
    v159 = v278;
    v160 = (uint64_t)v274;
    v161 = v272;
    v143 = v287;
  }
  else
  {
    v61(v292, 1, 1, v44);
    v143 = (_QWORD *)type metadata accessor for LocationFetcher(0);
    v144 = v268;
    v270(v268, v297 + *((int *)v143 + 8), v63);
    v145 = sub_100030784((uint64_t)a1, (uint64_t)&v303);
    v146 = Logger.logObject.getter(v145);
    v147 = static os_log_type_t.default.getter(v146);
    if (os_log_type_enabled(v146, v147))
    {
      v148 = swift_slowAlloc(22, -1);
      v149 = swift_slowAlloc(32, -1);
      v299 = v149;
      *(_DWORD *)v148 = 141558275;
      v302 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v148 + 4, v148 + 12);
      *(_WORD *)(v148 + 12) = 2081;
      v287 = v143;
      v151 = v304;
      v150 = v305;
      sub_10001AA44(&v303, (uint64_t)v304);
      v152 = v288;
      (*(void (**)(ValueMetadata *))(*((_QWORD *)v150[1] + 1) + 32))(v151);
      v153 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v267 = (char *)v83;
      v154 = v294;
      v155 = dispatch thunk of CustomStringConvertible.description.getter(v294, v153);
      v157 = v156;
      v158 = v152;
      a1 = v283;
      (*(void (**)(char *, uint64_t))(v285 + 8))(v158, v154);
      v302 = sub_100016940(v155, v157, &v299);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v148 + 14, v148 + 22);
      v143 = v287;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v303);
      swift_arrayDestroy(v149, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v149, -1, -1);
      swift_slowDealloc(v148, -1, -1);

      ((void (*)(char *, uint64_t))v267)(v268, v296);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v303);

      v83(v144, v63);
    }
    v159 = v278;
    v160 = (uint64_t)v274;
    v161 = v272;
  }
  sub_10000F9B8((uint64_t)v292, (uint64_t)v161, (uint64_t *)&unk_1010EA690);
  v162 = v273;
  sub_10000F9B8((uint64_t)v291, v273, (uint64_t *)&unk_1010EA690);
  type metadata accessor for LocationFetcher(0);
  v163 = *(_QWORD *)(v297 + *((int *)v143 + 9));
  v165 = a1[3];
  v164 = a1[4];
  sub_10001AA44(a1, v165);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v164 + 8) + 8) + 32))(v165);
  if (*(_QWORD *)(v163 + 16) && (v166 = sub_100003FB0(v160), (v167 & 1) != 0))
  {
    v168 = *(void **)(*(_QWORD *)(v163 + 56) + 8 * v166);
    v169 = v168;
  }
  else
  {
    v168 = 0;
  }
  v285 = *(_QWORD *)(v285 + 8);
  ((void (*)(uint64_t, uint64_t))v285)(v160, v294);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v304 = &type metadata for Configuration;
  v305 = &off_10105B898;
  sub_10064C894(a1, v290, v161, v162, v168, &v303, v284);

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v303);
  sub_100004048(v162, (uint64_t *)&unk_1010EA690);
  sub_100004048((uint64_t)v161, (uint64_t *)&unk_1010EA690);
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v170 = swift_retain();
  AnyCurrentValuePublisher.value.getter(&v303, v170);
  swift_release();
  v171 = v296;
  LODWORD(v273) = v303;
  v287 = v143;
  if ((v303 & 1) == 0)
  {
    v192 = v297 + *((int *)v143 + 8);
    v193 = v295;
    v274 = *(void (**)(char *, uint64_t, uint64_t))(v295 + 16);
    v274(v159, v192, v296);
    v194 = sub_100030784((uint64_t)a1, (uint64_t)&v303);
    v195 = Logger.logObject.getter(v194);
    v196 = static os_log_type_t.default.getter(v195);
    if (os_log_type_enabled(v195, v196))
    {
      v197 = swift_slowAlloc(22, -1);
      v198 = swift_slowAlloc(32, -1);
      v299 = v198;
      *(_DWORD *)v197 = 141558275;
      v302 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v197 + 4, v197 + 12);
      *(_WORD *)(v197 + 12) = 2081;
      v200 = v304;
      v199 = v305;
      sub_10001AA44(&v303, (uint64_t)v304);
      v201 = v288;
      (*(void (**)(ValueMetadata *))(*((_QWORD *)v199[1] + 1) + 32))(v200);
      v202 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v203 = v294;
      v204 = dispatch thunk of CustomStringConvertible.description.getter(v294, v202);
      v206 = v205;
      ((void (*)(char *, uint64_t))v285)(v201, v203);
      v302 = sub_100016940(v204, v206, &v299);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v197 + 14, v197 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v303);
      _os_log_impl((void *)&_mh_execute_header, v195, v196, "Manual time is enabled. Adding 24h to current time for end date for beacon %{private,mask.hash}s.", (uint8_t *)v197, 0x16u);
      swift_arrayDestroy(v198, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v198, -1, -1);
      swift_slowDealloc(v197, -1, -1);

      v191 = *(void (**)(char *, uint64_t))(v295 + 8);
      v191(v278, v296);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v303);

      v191 = *(void (**)(char *, uint64_t))(v193 + 8);
      v191(v159, v171);
    }
    v221 = v282;
    v222 = v281;
    v223 = v280;
    v224 = v286;
    v225 = 86400.0;
    goto LABEL_42;
  }
  v172 = a1[3];
  v173 = a1[4];
  sub_10001AA44(a1, v172);
  v174 = (*(uint64_t (**)(uint64_t, uint64_t))(v173 + 112))(v172, v173);
  v175 = v297 + *((int *)v143 + 8);
  v176 = *(void (**)(char *, uint64_t, uint64_t))(v295 + 16);
  v274 = v176;
  if ((v174 & 1) != 0)
  {
    v177 = v263;
    v176(v263, v175, v171);
    v178 = sub_100030784((uint64_t)a1, (uint64_t)&v303);
    v179 = Logger.logObject.getter(v178);
    v180 = static os_log_type_t.default.getter(v179);
    if (os_log_type_enabled(v179, v180))
    {
      v181 = swift_slowAlloc(22, -1);
      v182 = swift_slowAlloc(32, -1);
      v299 = v182;
      *(_DWORD *)v181 = 141558275;
      v302 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v181 + 4, v181 + 12);
      *(_WORD *)(v181 + 12) = 2081;
      v278 = (char *)(v181 + 14);
      v184 = v304;
      v183 = v305;
      sub_10001AA44(&v303, (uint64_t)v304);
      v185 = v288;
      (*(void (**)(ValueMetadata *))(*((_QWORD *)v183[1] + 1) + 32))(v184);
      v186 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v187 = v294;
      v188 = dispatch thunk of CustomStringConvertible.description.getter(v294, v186);
      v190 = v189;
      ((void (*)(char *, uint64_t))v285)(v185, v187);
      v302 = sub_100016940(v188, v190, &v299);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v278, v181 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v303);
      _os_log_impl((void *)&_mh_execute_header, v179, v180, "Manual time is disabled. Adding 4h to current time for end date for beacon %{private,mask.hash}s.", (uint8_t *)v181, 0x16u);
      swift_arrayDestroy(v182, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v182, -1, -1);
      swift_slowDealloc(v181, -1, -1);

      v191 = *(void (**)(char *, uint64_t))(v295 + 8);
      v191(v177, v296);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v303);

      v191 = *(void (**)(char *, uint64_t))(v295 + 8);
      v191(v177, v171);
    }
    v221 = v282;
    v222 = v281;
    v223 = v280;
    v224 = v286;
    v225 = 14400.0;
LABEL_42:
    Date.addingTimeInterval(_:)(v225);
    v226 = v289;
    v227 = v293;
    goto LABEL_45;
  }
  v207 = v264;
  v176(v264, v175, v171);
  v208 = sub_100030784((uint64_t)a1, (uint64_t)&v303);
  v209 = Logger.logObject.getter(v208);
  v210 = static os_log_type_t.default.getter(v209);
  if (os_log_type_enabled(v209, v210))
  {
    v211 = swift_slowAlloc(22, -1);
    v212 = swift_slowAlloc(32, -1);
    v299 = v212;
    *(_DWORD *)v211 = 141558275;
    v302 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v211 + 4, v211 + 12);
    *(_WORD *)(v211 + 12) = 2081;
    v278 = (char *)(v211 + 14);
    v214 = v304;
    v213 = v305;
    sub_10001AA44(&v303, (uint64_t)v304);
    v215 = v288;
    (*(void (**)(ValueMetadata *))(*((_QWORD *)v213[1] + 1) + 32))(v214);
    v216 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v217 = v294;
    v218 = dispatch thunk of CustomStringConvertible.description.getter(v294, v216);
    v220 = v219;
    ((void (*)(char *, uint64_t))v285)(v215, v217);
    v302 = sub_100016940(v218, v220, &v299);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v278, v211 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v303);
    _os_log_impl((void *)&_mh_execute_header, v209, v210, "Manual time is disabled. Using current time as end date for beacon %{private,mask.hash}s.", (uint8_t *)v211, 0x16u);
    swift_arrayDestroy(v212, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v212, -1, -1);
    swift_slowDealloc(v211, -1, -1);

    v191 = *(void (**)(char *, uint64_t))(v295 + 8);
    v191(v207, v296);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v303);

    v191 = *(void (**)(char *, uint64_t))(v295 + 8);
    v191(v207, v171);
  }
  v221 = v282;
  v222 = v281;
  v223 = v280;
  v224 = v286;
  v226 = v289;
  v227 = v293;
  (*(void (**)(char *, uint64_t, uint64_t))(v293 + 16))(v289, v290, v286);
LABEL_45:
  v228 = *(void (**)(char *, char *, uint64_t))(v227 + 16);
  v229 = v275;
  v230 = v284;
  v228(v275, v284, v224);
  v231 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.>= infix(_:_:)(v230, v226, v224, v231) & 1) != 0)
    v232 = v230;
  else
    v232 = v226;
  v233 = v276;
  v228(v276, v232, v224);
  v234 = v277;
  DateInterval.init(start:end:)(v229, v233);
  v274(v221, v297 + *((int *)v287 + 8), v296);
  sub_100030784((uint64_t)v283, (uint64_t)&v303);
  v235 = v224;
  v236 = v279;
  v237 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v223 + 16))(v279, v234, v222);
  v238 = Logger.logObject.getter(v237);
  v239 = static os_log_type_t.default.getter(v238);
  if (os_log_type_enabled(v238, v239))
  {
    v240 = swift_slowAlloc(38, -1);
    v297 = swift_slowAlloc(64, -1);
    v299 = v297;
    *(_DWORD *)v240 = 141558787;
    v302 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v240 + 4, v240 + 12);
    *(_WORD *)(v240 + 12) = 2081;
    v242 = v304;
    v241 = v305;
    sub_10001AA44(&v303, (uint64_t)v304);
    v243 = v288;
    (*(void (**)(ValueMetadata *))(*((_QWORD *)v241[1] + 1) + 32))(v242);
    v244 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v245 = v294;
    v246 = dispatch thunk of CustomStringConvertible.description.getter(v294, v244);
    v248 = v247;
    ((void (*)(char *, uint64_t))v285)(v243, v245);
    v302 = sub_100016940(v246, v248, &v299);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v240 + 14, v240 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v303);
    *(_WORD *)(v240 + 22) = 1024;
    LODWORD(v302) = v273;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, (char *)&v302 + 4, v240 + 24, v240 + 28);
    *(_WORD *)(v240 + 28) = 2082;
    v249 = sub_100006204(&qword_1010F2168, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
    v250 = v279;
    v251 = v281;
    v252 = dispatch thunk of CustomStringConvertible.description.getter(v281, v249);
    v302 = sub_100016940(v252, v253, &v299);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v302, &v303, v240 + 30, v240 + 38);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v280 + 8))(v250, v251);
    _os_log_impl((void *)&_mh_execute_header, v238, v239, "Fetch interval computed for beacon %{private,mask.hash}s, automaticTime: %{BOOL}d, dateInterval: %{public}s.", (uint8_t *)v240, 0x26u);
    v254 = v297;
    swift_arrayDestroy(v297, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v254, -1, -1);
    swift_slowDealloc(v240, -1, -1);

    (*(void (**)(char *, uint64_t))(v295 + 8))(v282, v296);
    v255 = *(void (**)(char *, uint64_t))(v293 + 8);
    v256 = v286;
    v255(v289, v286);
    v255(v230, v256);
    sub_100004048((uint64_t)v292, (uint64_t *)&unk_1010EA690);
    sub_100004048((uint64_t)v291, (uint64_t *)&unk_1010EA690);
    v257 = v290;
    v258 = v256;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v223 + 8))(v236, v222);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v303);
    v191(v221, v296);
    v255 = *(void (**)(char *, uint64_t))(v293 + 8);
    v255(v289, v235);
    v255(v230, v235);
    sub_100004048((uint64_t)v292, (uint64_t *)&unk_1010EA690);
    sub_100004048((uint64_t)v291, (uint64_t *)&unk_1010EA690);
    v257 = v290;
    v258 = v235;
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v255)(v257, v258);
}

uint64_t sub_100406738(uint64_t a1, char *a2, _QWORD *a3, int a4, uint64_t a5, _QWORD *a6, uint64_t a7, _QWORD *a8, char a9, uint64_t *a10, void (*a11)(uint64_t, uint64_t), uint64_t a12, _BYTE *a13)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t RequestBeacon;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t result;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;

  LODWORD(v69) = a4;
  v20 = type metadata accessor for UUID(0);
  v67 = *(_QWORD *)(v20 - 8);
  v68 = v20;
  __chkstk_darwin(v20);
  v66 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  v23 = *(_QWORD *)(RequestBeacon - 8);
  v71 = RequestBeacon;
  v72 = v23;
  __chkstk_darwin(RequestBeacon);
  v62 = (uint64_t)&v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10001A9A8(&qword_1010FB248);
  v26 = __chkstk_darwin(v25);
  v63 = (uint64_t)&v60 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v61 = (uint64_t *)((char *)&v60 - v29);
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v60 - v31;
  result = __chkstk_darwin(v30);
  v35 = (uint64_t *)((char *)&v60 - v34);
  v73 = a6;
  v36 = a5 - *a6;
  if (__OFSUB__(a5, *a6))
  {
    __break(1u);
  }
  else
  {
    v37 = a5;
    v38 = v70;
    sub_100401D10(a2, a3, v69, v36, a7, (uint64_t)&v60 - v34);
    if (v38)
    {
      swift_errorRelease(v38);
      v39 = v71;
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v72 + 56))(v35, 1, 1, v71);
      v64 = 0;
    }
    else
    {
      v64 = 0;
      v39 = v71;
    }
    v69 = a1;
    v70 = a8;
    sub_100406BA0(v35, v73, a8);
    v41 = a3[3];
    v40 = a3[4];
    sub_10001AA44(a3, v41);
    v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 112))(v41, v40);
    v65 = a7;
    if ((v42 & 1) == 0 || (a9 & 1) == 0)
    {
      v63 = v37;
      goto LABEL_15;
    }
    sub_10000F9B8((uint64_t)v35, (uint64_t)v32, &qword_1010FB248);
    v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48);
    if (v43(v32, 1, v39) == 1)
    {
      v63 = v37;
      sub_100004048((uint64_t)v32, &qword_1010FB248);
LABEL_15:
      v55 = a3[3];
      v54 = a3[4];
      sub_10001AA44(a3, v55);
      v56 = (uint64_t)v66;
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v54 + 8) + 8) + 32))(v55);
      v57 = (*(_QWORD *)v65 == 0) & ~*(_BYTE *)(v65 + 8);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a10);
      v74 = *a10;
      *a10 = 0x8000000000000000;
      sub_10010CE10(v57, v56, isUniquelyReferenced_nonNull_native);
      *a10 = v74;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v56, v68);
      v59 = *a10;
      swift_bridgeObjectRetain(*a10);
      sub_100406FE8(v73, v70, v63, v59, a11, a12, 0);
      swift_bridgeObjectRelease();
      LOBYTE(v59) = (*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v72 + 48))(v35, 1, v71) != 1;
      result = sub_100004048((uint64_t)v35, &qword_1010FB248);
      *a13 = v59;
      return result;
    }
    v44 = v62;
    sub_1000126EC((uint64_t)v32, v62, type metadata accessor for FetchRequestBeacon);
    v45 = v61;
    sub_100406E6C(a3, (uint64_t)v61);
    v46 = v63;
    sub_10000F9B8((uint64_t)v45, v63, &qword_1010FB248);
    v47 = v43((char *)v46, 1, v39);
    v48 = v70;
    if (v47 == 1)
    {
      result = sub_100004048(v46, &qword_1010FB248);
      v49 = 0;
    }
    else
    {
      v50 = v46;
      v51 = *(_QWORD *)(v46 + *(int *)(v39 + 28));
      swift_bridgeObjectRetain(v51);
      sub_1000126B0(v50, type metadata accessor for FetchRequestBeacon);
      v49 = *(_QWORD *)(v51 + 16);
      result = swift_bridgeObjectRelease();
    }
    v52 = __OFADD__(v37, v49);
    v53 = v37 + v49;
    if (!v52)
    {
      v63 = v53;
      sub_100406BA0(v45, v73, v48);
      sub_100004048((uint64_t)v45, &qword_1010FB248);
      sub_1000126B0(v44, type metadata accessor for FetchRequestBeacon);
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100406BA0(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t RequestBeacon;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for UUID(0);
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010FB248);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  v13 = *(_QWORD *)(RequestBeacon - 8);
  v14 = __chkstk_darwin(RequestBeacon);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v31 - v17;
  sub_10000F9B8((uint64_t)a1, (uint64_t)v11, &qword_1010FB248);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, RequestBeacon) == 1)
    return sub_100004048((uint64_t)v11, &qword_1010FB248);
  sub_1000126EC((uint64_t)v11, (uint64_t)v18, type metadata accessor for FetchRequestBeacon);
  v20 = *(_QWORD *)(*(_QWORD *)&v18[*(int *)(RequestBeacon + 28)] + 16);
  v21 = __OFADD__(*a2, v20);
  v22 = *a2 + v20;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *a2 = v22;
    v23 = *a3;
    if (*(_QWORD *)(*a3 + 16) && (v24 = sub_100003FB0((uint64_t)v18), (v25 & 1) != 0))
    {
      a1 = *(_QWORD **)(*(_QWORD *)(v23 + 56) + 8 * v24);
      swift_bridgeObjectRetain(a1);
    }
    else
    {
      a1 = _swiftEmptyArrayStorage;
    }
    sub_10005972C((uint64_t)v18, (uint64_t)v16, type metadata accessor for FetchRequestBeacon);
    if ((swift_isUniquelyReferenced_nonNull_native(a1) & 1) != 0)
      goto LABEL_9;
  }
  a1 = (_QWORD *)sub_1007C95CC(0, a1[2] + 1, 1, (unint64_t)a1);
LABEL_9:
  v27 = a1[2];
  v26 = a1[3];
  if (v27 >= v26 >> 1)
    a1 = (_QWORD *)sub_1007C95CC(v26 > 1, v27 + 1, 1, (unint64_t)a1);
  a1[2] = v27 + 1;
  sub_1000126EC((uint64_t)v16, (uint64_t)a1+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v27, type metadata accessor for FetchRequestBeacon);
  v29 = v32;
  v28 = v33;
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v8, v18, v33);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
  v34 = *a3;
  *a3 = 0x8000000000000000;
  sub_10010CF64((uint64_t)a1, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  *a3 = v34;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v28);
  return sub_1000126B0((uint64_t)v18, type metadata accessor for FetchRequestBeacon);
}

uint64_t sub_100406E6C@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t RequestBeacon;
  _QWORD v12[5];
  uint64_t v13;
  char v14;

  v5 = sub_100AC6C14(0);
  if ((v6 & 1) != 0)
  {
    RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RequestBeacon - 8) + 56))(a2, 1, 1, RequestBeacon);
  }
  else
  {
    __chkstk_darwin(v5);
    v12[2] = v2;
    v12[3] = a1;
    v9 = sub_100A76AA0((void (*)(_QWORD))sub_100425CEC, (uint64_t)v12, v7, v8);
    v13 = 0;
    v14 = 1;
    sub_100401D10((char *)v9, a1, 1, *(_QWORD *)(v9 + 16), (uint64_t)&v13, a2);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100406FE8(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  void (*v20)(uint64_t, uint64_t);

  v15 = type metadata accessor for Logger(0);
  result = __chkstk_darwin(v15);
  if (__OFSUB__(a3, *a1))
  {
    __break(1u);
  }
  else if (a3 - *a1 < 1 || (a7 & 1) != 0)
  {
    v19[1] = a6;
    v20 = a5;
    v17 = __chkstk_darwin(*a2);
    v19[-2] = v7;
    sub_10041DD24(v17, (void (*)(char *, uint64_t, __n128))sub_100425CD4);
    if (*(_QWORD *)(v18 + 16))
    {
      v20(v18, a4);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      *a2 = _swiftEmptyDictionarySingleton;
      *a1 = 0;
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1004072D0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;

  sub_1007F4FBC(a2, *a1, 1, 0, a3);
  if (v3)
  {
    swift_errorRelease(v3);
    v5 = type metadata accessor for TimeBasedKey(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a3, 1, 1, v5);
  }
  else
  {
    v7 = type metadata accessor for TimeBasedKey(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a3, 0, 1, v7);
  }
}

BOOL sub_10040736C(uint64_t a1)
{
  return (*(_BYTE *)(a1 + *(int *)(type metadata accessor for RawSearchResult(0) + 36)) & 0xFE) != 12;
}

uint64_t sub_1004073A4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, NSObject *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  _BOOL4 v25;
  char *v26;
  void (*v27)(NSObject *, char *, uint64_t);
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  NSObject *v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  NSObject *v70;
  void (*v71)(NSObject *, uint64_t);
  _BYTE v72[4];
  int v73;
  NSObject *v74;
  _BYTE *v75;
  _BYTE *v76;
  _BOOL4 v77;
  uint64_t v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v79 = a6;
  v81 = a3;
  v80 = type metadata accessor for UUID(0);
  v82 = *(_QWORD *)(v80 - 8);
  v10 = __chkstk_darwin(v80);
  v76 = &v72[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v75 = &v72[-v12];
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = &v72[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  v19 = &v72[-v18];
  v20 = a5[6];
  v21 = a5[7];
  sub_10001AA44(a5 + 3, v20);
  result = sub_100656D3C(v20, v21);
  v23 = a4 * result;
  if ((unsigned __int128)(a4 * (__int128)result) >> 64 == (a4 * result) >> 63)
  {
    v74 = a1;
    v25 = (uint64_t)a1 >= a4 || v23 <= a2;
    v26 = (char *)a5 + *(int *)(type metadata accessor for LocationFetcher(0) + 32);
    v78 = v14;
    v27 = *(void (**)(NSObject *, char *, uint64_t))(v14 + 16);
    v77 = v25;
    if (v25)
    {
      v28 = a2;
      v29 = (_BYTE *)v13;
      v27(v19, v26, v13);
      v30 = v75;
      v31 = v80;
      (*(void (**)(_BYTE *, NSObject *, uint64_t))(v82 + 16))(v75, v79, v80);
      v32 = v81;
      swift_bridgeObjectRetain_n(v81, 2);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.default.getter(v34);
      v36 = v35;
      v79 = v34;
      if (os_log_type_enabled(v34, v35))
      {
        v73 = v36;
        v76 = v29;
        v37 = (uint64_t)v74 >= a4;
        v38 = swift_slowAlloc(44, -1);
        v74 = v19;
        v39 = v38;
        v40 = swift_slowAlloc(64, -1);
        v84 = v40;
        *(_DWORD *)v39 = 67110147;
        LODWORD(v83) = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, (char *)&v83 + 4, v39 + 4, v39 + 8);
        *(_WORD *)(v39 + 8) = 1024;
        LODWORD(v83) = v23 <= v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, (char *)&v83 + 4, v39 + 10, v39 + 14);
        *(_WORD *)(v39 + 14) = 2160;
        v83 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v39 + 16, v39 + 24);
        *(_WORD *)(v39 + 24) = 2081;
        v41 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v42 = dispatch thunk of CustomStringConvertible.description.getter(v31, v41);
        v83 = sub_100016940(v42, v43, &v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v39 + 26, v39 + 34);
        swift_bridgeObjectRelease();
        (*(void (**)(_BYTE *, uint64_t))(v82 + 8))(v30, v31);
        *(_WORD *)(v39 + 34) = 2082;
        swift_bridgeObjectRetain(v32);
        v45 = Array.description.getter(v44, &type metadata for UInt8);
        v46 = v32;
        v48 = v47;
        swift_bridgeObjectRelease();
        v83 = sub_100016940(v45, v48, &v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v39 + 36, v39 + 44);
        swift_bridgeObjectRelease_n(v46, 2);
        swift_bridgeObjectRelease();
        v49 = v79;
        _os_log_impl((void *)&_mh_execute_header, v79, (os_log_type_t)v73, "Found enough primary results: %{BOOL}d, or enough secondary results: %{BOOL}d to terminate beacon: %{private,mask.hash}s, parts: %{public}s.", (uint8_t *)v39, 0x2Cu);
        swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v39, -1, -1);

        (*(void (**)(NSObject *, _BYTE *))(v78 + 8))(v74, v76);
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t))(v82 + 8))(v30, v31);

        swift_bridgeObjectRelease_n(v32, 2);
        (*(void (**)(NSObject *, _BYTE *))(v78 + 8))(v19, v29);
      }
    }
    else
    {
      v50 = v17;
      v51 = v13;
      v27(v17, v26, v13);
      v52 = v82;
      v53 = v76;
      v54 = v80;
      (*(void (**)(_BYTE *, NSObject *, uint64_t))(v82 + 16))(v76, v79, v80);
      v55 = v81;
      swift_bridgeObjectRetain_n(v81, 2);
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.default.getter(v57);
      if (os_log_type_enabled(v57, v58))
      {
        v59 = swift_slowAlloc(44, -1);
        v60 = swift_slowAlloc(64, -1);
        v79 = v50;
        v75 = (_BYTE *)v60;
        v84 = v60;
        *(_DWORD *)v59 = 67110147;
        LODWORD(v83) = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, (char *)&v83 + 4, v59 + 4, v59 + 8);
        *(_WORD *)(v59 + 8) = 1024;
        LODWORD(v83) = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, (char *)&v83 + 4, v59 + 10, v59 + 14);
        *(_WORD *)(v59 + 14) = 2160;
        v83 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v59 + 16, v59 + 24);
        *(_WORD *)(v59 + 24) = 2081;
        v61 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v62 = dispatch thunk of CustomStringConvertible.description.getter(v54, v61);
        v83 = sub_100016940(v62, v63, &v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v59 + 26, v59 + 34);
        swift_bridgeObjectRelease();
        (*(void (**)(_BYTE *, uint64_t))(v82 + 8))(v53, v54);
        *(_WORD *)(v59 + 34) = 2082;
        swift_bridgeObjectRetain(v55);
        v65 = Array.description.getter(v64, &type metadata for UInt8);
        v66 = v55;
        v68 = v67;
        swift_bridgeObjectRelease();
        v83 = sub_100016940(v65, v68, &v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v59 + 36, v59 + 44);
        swift_bridgeObjectRelease_n(v66, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Not enough primary results: %{BOOL}d, or enough secondary results: %{BOOL}d to terminate beacon: %{private,mask.hash}s, parts: %{public}s.", (uint8_t *)v59, 0x2Cu);
        v69 = v75;
        swift_arrayDestroy(v75, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v69, -1, -1);
        swift_slowDealloc(v59, -1, -1);

        v70 = v79;
        v71 = *(void (**)(NSObject *, uint64_t))(v78 + 8);
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t))(v52 + 8))(v53, v54);

        swift_bridgeObjectRelease_n(v55, 2);
        v71 = *(void (**)(NSObject *, uint64_t))(v78 + 8);
        v70 = v50;
      }
      v71(v70, v51);
    }
    return v77;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100407A78(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v48 = a4;
  v49 = a5;
  v51 = type metadata accessor for UUID(0);
  v54 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v50 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for Logger(0);
  v55 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v52 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RawSearchResult(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_BYTE *)swift_allocObject(&unk_101075C80, 21, 7);
  v14[16] = a2;
  v14[17] = a1;
  v14[18] = BYTE1(a1) & 1;
  v14[19] = BYTE2(a1) & 1;
  v56 = a1;
  v47 = v14;
  v14[20] = HIBYTE(a1) & 1;
  v15 = sub_1003B2D14(a3);
  v17 = v16;
  v19 = v18;
  swift_bridgeObjectRetain(a3);
  if ((v19 & 1) != 0)
  {
LABEL_30:
    __break(1u);
    return;
  }
  LODWORD(v58) = v56 & 0x1010100;
  if ((v56 & 0x10000) != 0)
    v20 = 0x10000;
  else
    v20 = 0x1000000;
  if ((v56 & 0x100) != 0)
    v21 = 256;
  else
    v21 = v20;
  LODWORD(v57) = v21;
  while (1)
  {
    if (*(_DWORD *)(a3 + 36) != (_DWORD)v17)
    {
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v24 = 1 << *(_BYTE *)(a3 + 32);
    if (v15 == v24)
      goto LABEL_24;
    if (v15 < 0 || v15 >= v24)
      goto LABEL_28;
    if (((*(_QWORD *)(a3 + 56 + (((unint64_t)v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      goto LABEL_29;
    sub_10005972C(*(_QWORD *)(a3 + 48) + *(_QWORD *)(v11 + 72) * v15, (uint64_t)v13, type metadata accessor for RawSearchResult);
    v25 = v13[*(int *)(v10 + 36)];
    if (v25 == 12)
    {
      if ((a2 & 1) == 0)
        goto LABEL_9;
    }
    else if ((((v25 != 13) ^ a2) & 1) == 0)
    {
LABEL_9:
      sub_1000126B0((uint64_t)v13, type metadata accessor for RawSearchResult);
      goto LABEL_10;
    }
    v26 = sub_1000AF25C(*v13 & 0xB);
    v27 = v26;
    if (!(_DWORD)v58)
      break;
    v28 = v26 & v57;
    sub_1000126B0((uint64_t)v13, type metadata accessor for RawSearchResult);
    if (v28)
      goto LABEL_24;
LABEL_10:
    v15 = sub_1003B2DB8(v15, v17, 0, a3);
    v17 = v22;
    if ((v23 & 1) != 0)
      goto LABEL_30;
  }
  sub_1000126B0((uint64_t)v13, type metadata accessor for RawSearchResult);
  if ((v27 & 0x1010100) != 0)
    goto LABEL_10;
LABEL_24:
  v29 = sub_10041D08C(v15, v17, 0, 1 << *(_BYTE *)(a3 + 32), *(unsigned int *)(a3 + 36), 0, a3, (uint64_t (*)(char *))sub_10042645C);
  swift_release();
  swift_bridgeObjectRelease();
  v30 = type metadata accessor for LocationFetcher(0);
  v31 = v55;
  v32 = v52;
  v33 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v52, v48 + *(int *)(v30 + 32), v53);
  v34 = v54;
  v35 = v50;
  v36 = v51;
  v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 16))(v50, v49, v51);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter(v38);
  if (os_log_type_enabled(v38, v39))
  {
    v40 = swift_slowAlloc(42, -1);
    v57 = swift_slowAlloc(64, -1);
    v59 = v29;
    v60 = v57;
    *(_DWORD *)v40 = 134218755;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v40 + 4, v40 + 12);
    *(_WORD *)(v40 + 12) = 2160;
    v59 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v40 + 14, v40 + 22);
    *(_WORD *)(v40 + 22) = 2081;
    v58 = v29;
    v41 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v42 = dispatch thunk of CustomStringConvertible.description.getter(v36, v41);
    v59 = sub_100016940(v42, v43, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v40 + 24, v40 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v35, v36);
    *(_WORD *)(v40 + 32) = 2082;
    v44 = sub_1000AEBCC(v56 & 0x10101FF);
    v59 = sub_100016940(v44, v45, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v40 + 34, v40 + 42);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Found %ld results for %{private,mask.hash}s, multipart: %{public}s.", (uint8_t *)v40, 0x2Au);
    v46 = v57;
    swift_arrayDestroy(v57, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v40, -1, -1);

    (*(void (**)(char *, uint64_t))(v55 + 8))(v32, v33);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
  }
}

BOOL sub_100407FD4(_BYTE *a1, char a2, int a3)
{
  int v6;
  _BOOL8 v7;
  int v8;
  int v9;
  int v10;

  v6 = a1[*(int *)(type metadata accessor for RawSearchResult(0) + 36)];
  if (v6 == 12)
  {
    if ((a2 & 1) == 0)
      return 0;
  }
  else if ((v6 != 13) == (a2 & 1))
  {
    return 0;
  }
  v8 = sub_1000AF25C(*a1 & 0xB);
  if ((a3 & 0x10000) != 0)
    v9 = 0x10000;
  else
    v9 = 0x1000000;
  v10 = v8 & v9;
  if ((a3 & 0x100) != 0)
    v10 = v8 & 0x100;
  if (v10)
    v7 = (a3 & 0x1010100) != 0;
  else
    v7 = 0;
  if (!(a3 & 0x1010100 | v8 & 0x100))
    return (v8 & 0x1010000) == 0;
  return v7;
}

_QWORD *sub_100408098(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  _UNKNOWN **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];
  char *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _QWORD v48[3];
  uint64_t v49;
  uint64_t v50;

  v44 = a2;
  v3 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v3);
  v5 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v43 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v8);
  v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v11);
  v13 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OwnedBeaconRecord(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = __chkstk_darwin(v14);
  v42[0] = (uint64_t)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)v42 - v18;
  sub_100030784(a1, (uint64_t)v48);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v21 = swift_dynamicCast(v13, v48, v20, v14, 6);
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if (!v21)
  {
    v22(v13, 1, 1, v14);
    sub_100004048((uint64_t)v13, (uint64_t *)&unk_1010F47C0);
    return _swiftEmptyArrayStorage;
  }
  v22(v13, 0, 1, v14);
  sub_1000126EC((uint64_t)v13, (uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
  sub_10005972C((uint64_t)&v19[*(int *)(v14 + 24)], (uint64_t)v10, type metadata accessor for StableIdentifier);
  if (swift_getEnumCaseMultiPayload(v10, v8) != 3)
  {
    sub_1000126B0((uint64_t)v10, type metadata accessor for StableIdentifier);
    goto LABEL_7;
  }
  v23 = sub_10001A9A8((uint64_t *)&unk_1010F46F0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24 = v10[*(int *)(v23 + 96)];
  v25 = *(void (**)(char *, uint64_t))(v6 + 8);
  v26 = v45;
  v25(v10, v45);
  sub_10000F9B8((uint64_t)&v19[*(int *)(v14 + 28)], (uint64_t)v5, &qword_1010ED860);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, v26) == 1)
  {
    sub_100004048((uint64_t)v5, &qword_1010ED860);
LABEL_7:
    sub_1000126B0((uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
    return _swiftEmptyArrayStorage;
  }
  v29 = (uint64_t)v43;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v43, v5, v26);
  sub_1008259D0(v29, (uint64_t)&v46);
  if (!v47)
  {
    v25((char *)v29, v26);
    sub_100004048((uint64_t)&v46, (uint64_t *)&unk_101107010);
    goto LABEL_7;
  }
  sub_10000F9FC(&v46, (uint64_t)v48);
  if (v24 > 3)
    v30 = &off_10104A638;
  else
    v30 = off_101075E18[v24];
  v31 = v49;
  v32 = v50;
  sub_10001AA44(v48, v49);
  v33 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v32 + 16);
  v34 = swift_bridgeObjectRetain(v30);
  v35 = v33(v31, v32, v34);
  v36 = v42[0];
  sub_10005972C((uint64_t)v19, v42[0], type metadata accessor for OwnedBeaconRecord);
  v37 = *(unsigned __int8 *)(v15 + 80);
  v38 = (v37 + 16) & ~v37;
  v39 = swift_allocObject(&unk_101075CA8, v38 + v16, v37 | 7);
  v40 = sub_1000126EC(v36, v39 + v38, type metadata accessor for OwnedBeaconRecord);
  __chkstk_darwin(v40);
  v42[-4] = v44;
  v42[-3] = (uint64_t)v30;
  v42[-2] = v42[1];
  v42[-1] = (uint64_t)v19;
  v41 = sub_100307624((uint64_t)_swiftEmptyArrayStorage, (void (*)(uint64_t *, char *))sub_10042677C, (uint64_t)&v42[-6], v35, (uint64_t (*)(char *))sub_100426740, v39);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v27 = sub_1007EE340(v41);
  swift_bridgeObjectRelease();
  v25((char *)v29, v45);
  sub_1000126B0((uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
  return v27;
}

uint64_t sub_100408550(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __SecKey *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __SecKey *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;

  v50 = a4;
  v8 = type metadata accessor for Logger(0);
  v52 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v51 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010FB288);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (uint64_t)&v48 - v15;
  __chkstk_darwin(v14);
  v18 = (uint64_t)&v48 - v17;
  v19 = sub_100408974((uint64_t)&v48 - v17, a2, a3);
  if (v4)
  {
    v20 = type metadata accessor for LocationFetcher(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, a1 + *(int *)(v20 + 32), v8);
    swift_errorRetain(v4);
    v21 = swift_errorRetain(v4);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(12, -1);
      v50 = (uint64_t *)v8;
      v25 = (uint8_t *)v24;
      v26 = (void *)swift_slowAlloc(32, -1);
      v55 = v26;
      *(_DWORD *)v25 = 136446210;
      v53 = v4;
      swift_errorRetain(v4);
      v27 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v28 = String.init<A>(describing:)(&v53, v27);
      v53 = sub_100016940(v28, v29, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Error getting owned device keys %{public}s.", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      swift_errorRelease(v4);
      return (*(uint64_t (**)(char *, uint64_t *))(v52 + 8))(v51, v50);
    }
    else
    {
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      swift_errorRelease(v4);

      return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v51, v8);
    }
  }
  else
  {
    v31 = v19;
    v32 = (char *)*(int *)(v10 + 48);
    *(_QWORD *)&v32[v18] = v19;
    v33 = type metadata accessor for UUID(0);
    v34 = *(_QWORD *)(v33 - 8);
    v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16);
    v49(v16, v18, v33);
    v51 = v32;
    *(_QWORD *)&v32[v16] = v31;
    v36 = *v50;
    if (*(_QWORD *)(*v50 + 16) && (v37 = sub_100003FB0(v16), (v38 & 1) != 0))
    {
      v55 = *(void **)(*(_QWORD *)(v36 + 56) + 8 * v37);
      v35 = swift_bridgeObjectRetain(v55);
    }
    else
    {
      v55 = &_swiftEmptySetSingleton;
    }
    v52 = *(_QWORD *)(v34 + 8);
    ((void (*)(uint64_t, uint64_t, __n128))v52)(v16, v33, v35);
    v39 = *(int *)(v10 + 48);
    v40 = (void (*)(char *, uint64_t, uint64_t))v49;
    v49((uint64_t)v13, v18, v33);
    v41 = v51;
    v42 = *(_QWORD *)&v51[v18];
    *(_QWORD *)&v13[v39] = v42;
    swift_bridgeObjectRetain(v42);
    sub_100BD2170(v43);
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v52)(v13, v33);
    v44 = *(int *)(v10 + 48);
    v40(v13, v18, v33);
    *(_QWORD *)&v13[v44] = *(_QWORD *)&v41[v18];
    v45 = (uint64_t)v55;
    v46 = v50;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v50);
    v53 = *v46;
    *v46 = 0x8000000000000000;
    sub_10010ABB4(v45, (uint64_t)v13, isUniquelyReferenced_nonNull_native);
    *v46 = v53;
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v52)(v13, v33);
    return sub_100004048(v18, &qword_1010FB288);
  }
}

__SecKey *sub_100408974(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __SecKey *v3;
  __SecKey *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t RequestBeacon;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  NSObject *v66;
  uint64_t *v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  os_log_t v95;
  void (*v96)(uint64_t, os_log_t, uint64_t);
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  void (*v111)(os_log_t, char *, uint64_t);
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(os_log_t, char *, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  os_log_t v128;
  uint64_t **v129;
  uint64_t v130;
  char *v131;
  uint64_t **v132;
  uint64_t *v133;
  uint64_t v134;
  NSObject *v135;
  uint64_t v136;
  uint64_t v137;
  NSObject *v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(uint64_t, uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  os_log_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  _BYTE *v157;
  uint64_t v159;
  NSObject *v160;
  uint64_t v161;
  __n128 v162;
  uint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  SecKeyRef v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t v171;
  NSObject *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int *v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  double v182;
  double v183;
  double v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _BYTE *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  NSObject *v196;
  os_log_type_t v197;
  int v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  int *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  os_log_t v227;
  void (*v228)(_QWORD, _QWORD);
  uint64_t v229;
  char isUniquelyReferenced_nonNull_native;
  os_log_t v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  Swift::String v237;
  Swift::String v238;
  Swift::String v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t *v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  NSObject *v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  unint64_t v267;
  _BYTE *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  Swift::String v287;
  uint64_t v288;
  NSObject **i;
  Swift::String v290;
  Swift::String v291;
  uint64_t v292;
  char *v293;
  __n128 v294;
  void (*v295)(SecKeyRef, uint64_t, uint64_t);
  uint64_t v296;
  uint64_t *v297;
  uint64_t *v298;
  void (*v299)(os_log_t, char *, uint64_t);
  uint64_t *v300;
  uint64_t v301;
  NSObject *v302;
  NSObject *v303;
  uint64_t v304;
  char *v305;
  uint64_t *v306;
  os_log_t v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  os_log_t v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  char *v316;
  uint64_t v317;
  SecKeyRef v318;
  unint64_t *v319;
  NSObject *v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  __SecKey *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  NSObject *v346;
  _BYTE *v347;
  uint64_t v348;
  uint64_t v349;
  __SecKey *v350;
  _BYTE *v351;
  _QWORD v352[3];
  char v353[8];
  NSObject *v354;
  _QWORD v355[3];
  char v356[8];
  uint64_t v357;
  uint64_t v358[3];

  v4 = v3;
  v348 = a3;
  v317 = a1;
  v6 = type metadata accessor for FetchResponse.SearchResult(0);
  __chkstk_darwin(v6);
  v344 = (uint64_t)&v292 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1011091A0);
  __chkstk_darwin(v8);
  v331 = (char *)&v292 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v323 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v323);
  v330 = (uint64_t)&v292 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v337 = type metadata accessor for Date(0);
  v329 = *(_QWORD *)(v337 - 8);
  __chkstk_darwin(v337);
  v328 = (char *)&v292 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v322 = type metadata accessor for RawSearchResult(0);
  v327 = *(_QWORD *)(v322 - 8);
  v12 = __chkstk_darwin(v322);
  v345 = (uint64_t)&v292 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v326 = (uint64_t)&v292 - v15;
  __chkstk_darwin(v14);
  v347 = (char *)&v292 - v16;
  v336 = type metadata accessor for BeaconPayloadv1(0);
  v17 = __chkstk_darwin(v336);
  v334 = (uint64_t *)((char *)&v292 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = __chkstk_darwin(v17);
  v343 = (uint64_t)&v292 - v20;
  v21 = __chkstk_darwin(v19);
  v342 = (uint64_t)&v292 - v22;
  v23 = __chkstk_darwin(v21);
  v341 = (uint64_t)&v292 - v24;
  v25 = __chkstk_darwin(v23);
  v340 = (uint64_t)&v292 - v26;
  __chkstk_darwin(v25);
  v346 = ((char *)&v292 - v27);
  v28 = type metadata accessor for Logger(0);
  v324 = *(_QWORD *)(v28 - 8);
  v29 = __chkstk_darwin(v28);
  v31 = (char *)&v292 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v29);
  v339 = (__SecKey *)((char *)&v292 - v33);
  __chkstk_darwin(v32);
  v318 = (SecKeyRef)((char *)&v292 - v34);
  v35 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v35);
  v321 = (unint64_t)&v292 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v333 = type metadata accessor for OwnedBeaconRecord(0);
  v320 = *(NSObject **)(v333 - 8);
  v37 = __chkstk_darwin(v333);
  v332 = (uint64_t)&v292 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v37);
  v325 = (uint64_t)&v292 - v40;
  v41 = __chkstk_darwin(v39);
  v319 = (unint64_t *)((char *)&v292 - v42);
  __chkstk_darwin(v41);
  v44 = (char *)&v292 - v43;
  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  v46 = *(_QWORD *)(RequestBeacon - 8);
  __chkstk_darwin(RequestBeacon);
  v48 = (char *)&v292 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_10001A9A8(&qword_1010FB290);
  v50 = __chkstk_darwin(v49);
  v51 = __chkstk_darwin(v50);
  v52 = __chkstk_darwin(v51);
  v53 = __chkstk_darwin(v52);
  v55 = ((char *)&v292 - v54);
  v56 = __chkstk_darwin(v53);
  v57 = __chkstk_darwin(v56);
  v58 = __chkstk_darwin(v57);
  v59 = __chkstk_darwin(v58);
  v60 = __chkstk_darwin(v59);
  v61 = __chkstk_darwin(v60);
  v62 = __chkstk_darwin(v61);
  v335 = v6;
  if (*((_BYTE *)a2 + *(int *)(v6 + 28)) != 15)
  {
    v84 = sub_100425D04();
    v85 = swift_allocError(&type metadata for LocationFetcher.LocationFetcherError, v84, 0, 0);
    *v86 = 3;
    swift_willThrow(v85);
    return v4;
  }
  v312 = v68;
  v306 = v67;
  v307 = v66;
  v311 = v65;
  v309 = v64;
  v315 = v63;
  v303 = v55;
  v313 = v62;
  v302 = v72;
  v308 = (char *)v71;
  v304 = v70;
  v316 = (char *)&v292 - v69;
  v314 = v44;
  v305 = v31;
  v73 = *a2;
  v74 = a2[1];
  sub_10001BBBC(*a2, v74);
  sub_1002F702C(v73, v74);
  if (!v4)
  {
    v300 = a2;
    v301 = v28;
    v75 = v357;
    v4 = (__SecKey *)v358[0];
    v76 = *(_QWORD *)(v348 + 16);
    if (!v76)
    {
LABEL_21:
      v155 = sub_100425D04();
      v156 = swift_allocError(&type metadata for LocationFetcher.LocationFetcherError, v155, 0, 0);
      *v157 = 0;
      swift_willThrow(v156);
      sub_10001BC14(v75, (unint64_t)v4);
      return v4;
    }
    v349 = v357;
    v350 = (__SecKey *)v358[0];
    v310 = 0;
    v77 = v348 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
    v78 = *(_QWORD *)(v46 + 72);
    swift_bridgeObjectRetain(v348);
    v80 = v349;
    v79 = (unint64_t)v350;
    while (1)
    {
      sub_10005972C(v77, (uint64_t)v48, type metadata accessor for FetchRequestBeacon);
      v81 = *(_QWORD *)&v48[*(int *)(RequestBeacon + 36)];
      if (*(_QWORD *)(v81 + 16))
      {
        swift_bridgeObjectRetain(*(_QWORD *)&v48[*(int *)(RequestBeacon + 36)]);
        sub_10001BBBC(v80, v79);
        v82 = sub_1005197F0(v80, v79);
        if ((v83 & 1) != 0)
        {
          v87 = (uint64_t)v316;
          v297 = (uint64_t *)&v316[*(int *)(v313 + 48)];
          v298 = (uint64_t *)&v316[*(int *)(v313 + 64)];
          v88 = (uint64_t *)(*(_QWORD *)(v81 + 56) + 32 * v82);
          v89 = *v88;
          v90 = v88[1];
          v91 = v88[2];
          v92 = v88[3];
          sub_10001BBBC(*v88, v90);
          sub_10001BBBC(v91, v92);
          swift_bridgeObjectRelease();
          sub_10001BC14(v80, v79);
          swift_bridgeObjectRelease();
          v93 = type metadata accessor for UUID(0);
          v94 = *(_QWORD *)(v93 - 8);
          v95 = v312;
          v299 = *(void (**)(os_log_t, char *, uint64_t))(v94 + 16);
          v299(v312, v48, v93);
          sub_1000126B0((uint64_t)v48, type metadata accessor for FetchRequestBeacon);
          sub_10001BBBC(v89, v90);
          sub_10001BBBC(v91, v92);
          sub_10001BC14(v91, v92);
          sub_10001BC14(v89, v90);
          v296 = v94;
          v96 = *(void (**)(uint64_t, os_log_t, uint64_t))(v94 + 32);
          v348 = v93;
          v96(v87, v95, v93);
          v97 = v297;
          *v297 = v89;
          v97[1] = v90;
          v98 = v298;
          *v298 = v91;
          v98[1] = v92;
          sub_10080B648(v87, (uint64_t)&v357);
          if (v358[2])
          {
            v99 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
            v100 = v321;
            v101 = v333;
            v102 = swift_dynamicCast(v321, &v357, v99, v333, 6);
            v103 = (uint64_t)v320;
            ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v320[7].isa)(v100, v102 ^ 1u, 1, v101);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(v100, 1, v101) != 1)
            {
              v104 = (uint64_t)v314;
              sub_1000126EC(v100, (uint64_t)v314, type metadata accessor for OwnedBeaconRecord);
              if (qword_1010EA620 != -1)
                swift_once(&qword_1010EA620, sub_100DC7BE8);
              v105 = v301;
              v106 = sub_10001A9E8(v301, (uint64_t)qword_1011B8520);
              v107 = (uint64_t)v318;
              v295 = *(void (**)(SecKeyRef, uint64_t, uint64_t))(v324 + 16);
              v295(v318, v106, v105);
              sub_10005972C(v104, (uint64_t)v319, type metadata accessor for OwnedBeaconRecord);
              v108 = (uint64_t)v306;
              v109 = (uint64_t *)((char *)v306 + *(int *)(v313 + 48));
              v110 = (uint64_t *)((char *)v306 + *(int *)(v313 + 64));
              v111 = v299;
              v299((os_log_t)v306, v316, v348);
              v112 = *v297;
              v113 = v297[1];
              *v109 = *v297;
              v109[1] = v113;
              v114 = *v298;
              v115 = v298[1];
              *v110 = *v298;
              v110[1] = v115;
              sub_10000F9B8(v108, (uint64_t)v311, &qword_1010FB290);
              v116 = v309;
              sub_100005CF0(v108, v309, &qword_1010FB290);
              sub_10001BBBC(v112, v113);
              v117 = sub_10001BBBC(v114, v115);
              v118 = Logger.logObject.getter(v117);
              v119 = static os_log_type_t.default.getter(v118);
              if (os_log_type_enabled(v118, (os_log_type_t)v119))
              {
                LODWORD(v321) = v119;
                v312 = v118;
                v120 = swift_slowAlloc(42, -1);
                v320 = swift_slowAlloc(64, -1);
                v354 = v320;
                *(_DWORD *)v120 = 141558787;
                v357 = 1752392040;
                v121 = v348;
                v122 = v111;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v120 + 4, v120 + 12);
                *(_WORD *)(v120 + 12) = 2081;
                v123 = (uint64_t)v319;
                v124 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
                v125 = dispatch thunk of CustomStringConvertible.description.getter(v121, v124);
                v357 = sub_100016940(v125, v126, (uint64_t *)&v354);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v120 + 14, v120 + 22);
                swift_bridgeObjectRelease();
                sub_1000126B0(v123, type metadata accessor for OwnedBeaconRecord);
                *(_WORD *)(v120 + 22) = 2160;
                v357 = 1752392040;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v120 + 24, v120 + 32);
                *(_WORD *)(v120 + 32) = 2081;
                v127 = *(int *)(v313 + 48);
                v128 = v307;
                v129 = (uint64_t **)((char *)v307 + v127);
                v130 = *(int *)(v313 + 64);
                v131 = v311;
                v132 = (uint64_t **)&v311[v127];
                v122(v307, v311, v121);
                v133 = *v132;
                v134 = (uint64_t)v132[1];
                *v129 = v133;
                v129[1] = (uint64_t *)v134;
                *(_OWORD *)((char *)&v128->isa + v130) = *(_OWORD *)&v131[v130];
                sub_10001BBBC((uint64_t)v133, v134);
                sub_10001BBBC((uint64_t)v133, v134);
                v135 = v310;
                v136 = sub_1007E6F8C((uint64_t)v133, v134);
                v138 = v135;
                if (v135)
                  goto LABEL_46;
                v139 = v136;
                v140 = v137;
                v141 = (void (*)(uint64_t, uint64_t, uint64_t))v122;
                sub_10001BC14((uint64_t)v133, v134);
                sub_1002F7394(v139, v140);
                v310 = 0;
                sub_10001BC14((uint64_t)v133, v134);
                v142 = v357;
                v143 = v358[0];
                v144 = sub_10001BBBC(v357, v358[0]);
                v145 = static MACAddress.length.getter(v144);
                sub_1002F7C0C(v145, v142, v143);
                sub_10001BC14(v142, v143);
                v146 = v357;
                v147 = v358[0];
                v148 = Data.hexString.getter(v357, v358[0]);
                v150 = v149;
                sub_10001BC14(v146, v147);
                (*(void (**)(os_log_t, uint64_t))(v296 + 8))(v307, v348);
                v357 = sub_100016940(v148, v150, (uint64_t *)&v354);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v120 + 34, v120 + 42);
                swift_bridgeObjectRelease();
                sub_100004048(v309, &qword_1010FB290);
                sub_100004048((uint64_t)v311, &qword_1010FB290);
                v151 = v312;
                _os_log_impl((void *)&_mh_execute_header, v312, (os_log_type_t)v321, "Using decryption key for beacon %{private,mask.hash}s,\nadvertisementAddress: %{private,mask.hash}s.", (uint8_t *)v120, 0x2Au);
                v152 = (uint64_t)v320;
                swift_arrayDestroy(v320, 2, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v152, -1, -1);
                swift_slowDealloc(v120, -1, -1);

                v153 = v301;
                v311 = *(char **)(v324 + 8);
                ((void (*)(SecKeyRef, uint64_t))v311)(v318, v301);
                v154 = v310;
              }
              else
              {
                sub_1000126B0((uint64_t)v319, type metadata accessor for OwnedBeaconRecord);
                sub_100004048(v116, &qword_1010FB290);
                sub_100004048((uint64_t)v311, &qword_1010FB290);

                v153 = v301;
                v311 = *(char **)(v324 + 8);
                ((void (*)(uint64_t, uint64_t))v311)(v107, v301);
                v154 = v310;
                v141 = (void (*)(uint64_t, uint64_t, uint64_t))v111;
              }
              v159 = v300[2];
              v160 = *(NSObject **)(v159 + 16);
              v161 = (uint64_t)v314;
              if (v160)
              {
                v306 = v358;
                v162 = swift_bridgeObjectRetain(v159);
                v292 = v163;
                v164 = (unint64_t *)(v163 + 40);
                v4 = (__SecKey *)_swiftEmptyArrayStorage;
                v162.n128_u64[0] = 141560323;
                v294 = v162;
                v293 = (char *)&type metadata for Any + 8;
                while (1)
                {
                  v138 = *(v164 - 1);
                  v165 = *v164;
                  v319 = v164;
                  v166 = *v298;
                  v167 = v298[1];
                  sub_10001BBBC((uint64_t)v138, v165);
                  v168 = sub_1002F7F34(v166, v167);
                  v310 = v154;
                  if (v154)
                    break;
                  v318 = v168;
                  v312 = v160;
                  v169 = (uint64_t *)(v315 + *(int *)(v313 + 48));
                  v170 = (uint64_t *)(v315 + *(int *)(v313 + 64));
                  ((void (*)(uint64_t))v299)(v315);
                  v171 = *v297;
                  v134 = v297[1];
                  *v169 = *v297;
                  v169[1] = v134;
                  *v170 = v166;
                  v170[1] = v167;
                  sub_10001BBBC(v171, v134);
                  v320 = v138;
                  v321 = v165;
                  sub_10001BBBC((uint64_t)v138, v165);
                  sub_10001BBBC(v171, v134);
                  v172 = v310;
                  v173 = sub_1007E6F8C(v171, v134);
                  if (v172)
                  {
                    sub_10001BC14(v171, v134);
                    v357 = 0;
                    v358[0] = 0xE000000000000000;
                    v133 = &v357;
                    _StringGuts.grow(_:)(35);
                    v287._object = (void *)0x8000000100EC7AC0;
                    v287._countAndFlagsBits = 0xD000000000000021;
                    String.append(_:)(v287);
                    v354 = v172;
                    v288 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
                    for (i = &v354; ; i = (NSObject **)&v351)
                    {
                      _print_unlocked<A, B>(_:_:)(i, &v357, v288, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
                      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v357, v358[0], "searchpartyd/KeyRepresentable.swift", 35, 2, 256, 0);
                      __break(1u);
LABEL_46:
                      v310 = (uint64_t)v138;
                      sub_100004048(v309, &qword_1010FB290);
                      sub_10001BC14((uint64_t)v133, v134);
                      v357 = 0;
                      v358[0] = 0xE000000000000000;
                      v133 = &v357;
                      _StringGuts.grow(_:)(35);
                      v290._object = (void *)0x8000000100EC7AC0;
                      v290._countAndFlagsBits = 0xD000000000000021;
                      String.append(_:)(v290);
                      v351 = (_BYTE *)v310;
LABEL_48:
                      v288 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
                    }
                  }
                  v175 = v173;
                  v176 = v174;
                  sub_10001BC14(v171, v134);
                  sub_1002F7394(v175, v176);
                  v177 = (int *)v336;
                  sub_10001BC14(v171, v134);
                  v178 = (uint64_t)v346;
                  BeaconPayloadv1.init(using:data:advertisement:)((uint64_t)v318, (uint64_t)v320, v321);
                  v179 = v337;
                  v310 = 0;
                  v318 = v4;
                  (*(void (**)(uint64_t, uint64_t))(v296 + 8))(v315, v348);
                  v180 = *(unsigned __int8 *)(v178 + v177[10]);
                  v181 = (uint64_t)v328;
                  (*(void (**)(char *, uint64_t, uint64_t))(v329 + 16))(v328, v178 + v177[5], v179);
                  v182 = *(double *)(v178 + v177[7]);
                  v183 = *(double *)(v178 + v177[8]);
                  v184 = *(double *)(v178 + v177[9]);
                  v185 = (uint64_t)v300;
                  v186 = v330;
                  sub_10000F9B8((uint64_t)v300 + *(int *)(v335 + 24), v330, (uint64_t *)&unk_1010EA690);
                  v187 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
                  v188 = (uint64_t)v331;
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v187 - 8) + 56))(v331, 1, 1, v187);
                  v189 = v347;
                  sub_10096339C(v180, v181, 15, v186, v188, 256, v347, v182, v183, v184);
                  v190 = type metadata accessor for LocationFetcher(0);
                  v295(v339, v338 + *(int *)(v190 + 32), v301);
                  v161 = (uint64_t)v314;
                  v191 = v325;
                  sub_10005972C((uint64_t)v314, v325, type metadata accessor for OwnedBeaconRecord);
                  sub_10005972C(v178, v340, type metadata accessor for BeaconPayloadv1);
                  sub_10005972C(v185, v344, type metadata accessor for FetchResponse.SearchResult);
                  v192 = (uint64_t)v189;
                  v193 = v326;
                  sub_10005972C(v192, v326, type metadata accessor for RawSearchResult);
                  sub_10005972C(v178, v341, type metadata accessor for BeaconPayloadv1);
                  sub_10005972C(v178, v342, type metadata accessor for BeaconPayloadv1);
                  sub_10005972C(v178, v343, type metadata accessor for BeaconPayloadv1);
                  v194 = v334;
                  v195 = sub_10005972C(v178, (uint64_t)v334, type metadata accessor for BeaconPayloadv1);
                  v196 = Logger.logObject.getter(v195);
                  v197 = static os_log_type_t.default.getter(v196);
                  v198 = v197;
                  if (os_log_type_enabled(v196, v197))
                  {
                    v199 = swift_slowAlloc(102, -1);
                    v311 = (char *)swift_slowAlloc(160, -1);
                    v354 = v311;
                    *(_DWORD *)v199 = v294.n128_u32[0];
                    v357 = 1752392040;
                    LODWORD(v309) = v198;
                    v200 = v306;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v306, v199 + 4, v199 + 12);
                    *(_WORD *)(v199 + 12) = 2081;
                    v307 = v196;
                    v201 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
                    v202 = dispatch thunk of CustomStringConvertible.description.getter(v348, v201);
                    v357 = sub_100016940(v202, v203, (uint64_t *)&v354);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v200, v199 + 14, v199 + 22);
                    swift_bridgeObjectRelease();
                    sub_1000126B0(v191, type metadata accessor for OwnedBeaconRecord);
                    *(_WORD *)(v199 + 22) = 2082;
                    v204 = (int *)v336;
                    v205 = v340;
                    v206 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
                    v207 = dispatch thunk of CustomStringConvertible.description.getter(v337, v206);
                    v357 = sub_100016940(v207, v208, (uint64_t *)&v354);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v200, v199 + 24, v199 + 32);
                    swift_bridgeObjectRelease();
                    sub_1000126B0(v205, type metadata accessor for BeaconPayloadv1);
                    *(_WORD *)(v199 + 32) = 2082;
                    v209 = v344;
                    v210 = Optional.debugDescription.getter(v323);
                    v357 = sub_100016940(v210, v211, (uint64_t *)&v354);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v200, v199 + 34, v199 + 42);
                    swift_bridgeObjectRelease();
                    sub_1000126B0(v209, type metadata accessor for FetchResponse.SearchResult);
                    *(_WORD *)(v199 + 42) = 2082;
                    v212 = sub_1002E3DF8(*(_BYTE *)(v193 + *(int *)(v322 + 36)));
                    v357 = sub_100016940(v212, v213, (uint64_t *)&v354);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v200, v199 + 44, v199 + 52);
                    swift_bridgeObjectRelease();
                    sub_1000126B0(v193, type metadata accessor for RawSearchResult);
                    *(_WORD *)(v199 + 52) = 2049;
                    v214 = v341;
                    v357 = *(_QWORD *)(v341 + v204[7]);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v200, v199 + 54, v199 + 62);
                    sub_1000126B0(v214, type metadata accessor for BeaconPayloadv1);
                    *(_WORD *)(v199 + 62) = 2049;
                    v215 = v342;
                    v357 = *(_QWORD *)(v342 + v204[8]);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v200, v199 + 64, v199 + 72);
                    sub_1000126B0(v215, type metadata accessor for BeaconPayloadv1);
                    *(_WORD *)(v199 + 72) = 2050;
                    v216 = v343;
                    v357 = *(_QWORD *)(v343 + v204[9]);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v200, v199 + 74, v199 + 82);
                    sub_1000126B0(v216, type metadata accessor for BeaconPayloadv1);
                    *(_WORD *)(v199 + 82) = 2160;
                    v357 = 1752392040;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v200, v199 + 84, v199 + 92);
                    *(_WORD *)(v199 + 92) = 2081;
                    v217 = v334;
                    v218 = *v334;
                    v219 = v334[1];
                    v220 = sub_10001BBBC(*v334, v219);
                    v221 = static MACAddress.length.getter(v220);
                    sub_1002F7C0C(v221, v218, v219);
                    v222 = v357;
                    v223 = v358[0];
                    v224 = Data.hexString.getter(v357, v358[0]);
                    v226 = v225;
                    sub_10001BC14(v222, v223);
                    v357 = sub_100016940(v224, v226, (uint64_t *)&v354);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v200, v199 + 94, v199 + 102);
                    swift_bridgeObjectRelease();
                    sub_1000126B0((uint64_t)v217, type metadata accessor for BeaconPayloadv1);
                    v227 = v307;
                    _os_log_impl((void *)&_mh_execute_header, v307, (os_log_type_t)v309, "Packet decrypted for beacon %{private,mask.hash}s,\nlocationTimestamp: %{public}s,\nscanDate: %{public}s,\nsource: %{public}s,\nlatitude: %{private}f,\nlongitude: %{private}f,\nhorizontalAccuracy: %{public}f,\nadvertisementAddress: %{private,mask.hash}s.", (uint8_t *)v199, 0x66u);
                    v228 = (void (*)(_QWORD, _QWORD))v311;
                    swift_arrayDestroy(v311, 5, v293);
                    swift_slowDealloc(v228, -1, -1);
                    v229 = v199;
                    v161 = (uint64_t)v314;
                    swift_slowDealloc(v229, -1, -1);

                    v153 = v301;
                    v311 = *(char **)(v324 + 8);
                  }
                  else
                  {
                    sub_1000126B0(v191, type metadata accessor for OwnedBeaconRecord);
                    sub_1000126B0(v340, type metadata accessor for BeaconPayloadv1);
                    sub_1000126B0(v344, type metadata accessor for FetchResponse.SearchResult);
                    sub_1000126B0(v193, type metadata accessor for RawSearchResult);
                    sub_1000126B0(v341, type metadata accessor for BeaconPayloadv1);
                    sub_1000126B0(v342, type metadata accessor for BeaconPayloadv1);
                    sub_1000126B0(v343, type metadata accessor for BeaconPayloadv1);
                    sub_1000126B0((uint64_t)v194, type metadata accessor for BeaconPayloadv1);

                    v153 = v301;
                  }
                  ((void (*)(__SecKey *, uint64_t))v311)(v339, v301);
                  v141 = (void (*)(uint64_t, uint64_t, uint64_t))v299;
                  sub_10005972C((uint64_t)v347, v345, type metadata accessor for RawSearchResult);
                  v4 = v318;
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v318);
                  v231 = v312;
                  v232 = (uint64_t)v319;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    v4 = (__SecKey *)sub_1007C98E8(0, *((_QWORD *)v4 + 2) + 1, 1, (unint64_t)v4);
                  v234 = *((_QWORD *)v4 + 2);
                  v233 = *((_QWORD *)v4 + 3);
                  if (v234 >= v233 >> 1)
                    v4 = (__SecKey *)sub_1007C98E8(v233 > 1, v234 + 1, 1, (unint64_t)v4);
                  v164 = (unint64_t *)(v232 + 24);
                  *((_QWORD *)v4 + 2) = v234 + 1;
                  sub_1000126EC(v345, (uint64_t)v4+ ((*(unsigned __int8 *)(v327 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v327 + 80))+ *(_QWORD *)(v327 + 72) * v234, type metadata accessor for RawSearchResult);
                  sub_10001BC14((uint64_t)v320, v321);
                  sub_1000126B0((uint64_t)v347, type metadata accessor for RawSearchResult);
                  sub_1000126B0((uint64_t)v346, type metadata accessor for BeaconPayloadv1);
                  v160 = (os_log_t)((char *)v231 - 1);
                  v154 = v310;
                  if (!v160)
                  {
                    swift_bridgeObjectRelease();
                    goto LABEL_43;
                  }
                }
                sub_10001BC14((uint64_t)v138, v165);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v347 = 0;
                v235 = (uint64_t)v314;
                v236 = v332;
                v357 = 0;
                v358[0] = 0xE000000000000000;
                _StringGuts.grow(_:)(49);
                swift_bridgeObjectRelease();
                v357 = 0xD000000000000020;
                v358[0] = 0x8000000100ED6190;
                v4 = (__SecKey *)v310;
                swift_getErrorValue(v310, v356, v355);
                v354 = Error.code.getter(v355[1], v355[2]);
                v237._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
                String.append(_:)(v237);
                swift_bridgeObjectRelease();
                v238._countAndFlagsBits = 0x6F44726F72726520;
                v238._object = (void *)0xED00003A6E69616DLL;
                String.append(_:)(v238);
                swift_getErrorValue(v4, v353, v352);
                v239._countAndFlagsBits = Error.domain.getter(v352[1], v352[2]);
                String.append(_:)(v239);
                swift_bridgeObjectRelease();
                sub_100CE51EC(v357, v358[0]);
                swift_bridgeObjectRelease();
                v240 = type metadata accessor for LocationFetcher(0);
                v241 = v305;
                v295((SecKeyRef)v305, v338 + *(int *)(v240 + 32), v153);
                sub_10005972C(v235, v236, type metadata accessor for OwnedBeaconRecord);
                v242 = (uint64_t)v303;
                v243 = (uint64_t *)((char *)v303 + *(int *)(v313 + 48));
                v244 = (uint64_t *)((char *)v303 + *(int *)(v313 + 64));
                v245 = v348;
                v299(v303, v316, v348);
                v246 = *v297;
                v247 = v297[1];
                *v243 = *v297;
                v243[1] = v247;
                v248 = *v298;
                v249 = v298[1];
                *v244 = *v298;
                v244[1] = v249;
                sub_10000F9B8(v242, (uint64_t)v308, &qword_1010FB290);
                v250 = v242;
                v251 = v245;
                v252 = v304;
                sub_100005CF0(v250, v304, &qword_1010FB290);
                swift_errorRetain(v4);
                swift_errorRetain(v4);
                sub_10001BBBC(v246, v247);
                v253 = sub_10001BBBC(v248, v249);
                v138 = Logger.logObject.getter(v253);
                v254 = static os_log_type_t.error.getter(v138);
                if (os_log_type_enabled(v138, (os_log_type_t)v254))
                {
                  LODWORD(v345) = v254;
                  v255 = swift_slowAlloc(52, -1);
                  v346 = swift_slowAlloc(96, -1);
                  v354 = v346;
                  *(_DWORD *)v255 = 141559043;
                  v357 = 1752392040;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v255 + 4, v255 + 12);
                  *(_WORD *)(v255 + 12) = 2081;
                  v256 = v332;
                  v257 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
                  v258 = dispatch thunk of CustomStringConvertible.description.getter(v251, v257);
                  v357 = sub_100016940(v258, v259, (uint64_t *)&v354);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v255 + 14, v255 + 22);
                  swift_bridgeObjectRelease();
                  sub_1000126B0(v256, type metadata accessor for OwnedBeaconRecord);
                  *(_WORD *)(v255 + 22) = 2160;
                  v357 = 1752392040;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v255 + 24, v255 + 32);
                  *(_WORD *)(v255 + 32) = 2081;
                  v260 = *(int *)(v313 + 48);
                  v261 = v302;
                  v262 = (uint64_t *)((char *)v302 + v260);
                  v263 = v251;
                  v264 = *(int *)(v313 + 64);
                  v134 = (uint64_t)v308;
                  v265 = (uint64_t *)&v308[v260];
                  v299(v302, v308, v263);
                  v266 = *v265;
                  v267 = v265[1];
                  *v262 = v266;
                  v262[1] = v267;
                  *(_OWORD *)((char *)&v261->isa + v264) = *(_OWORD *)(v134 + v264);
                  sub_10001BBBC(v266, v267);
                  sub_10001BBBC(v266, v267);
                  v268 = v347;
                  v269 = sub_1007E6F8C(v266, v267);
                  if (v268)
                  {
                    swift_errorRelease(v310);
                    sub_100004048(v304, &qword_1010FB290);
                    sub_10001BC14(v266, v267);
                    v357 = 0;
                    v358[0] = 0xE000000000000000;
                    v133 = &v357;
                    _StringGuts.grow(_:)(35);
                    v291._object = (void *)0x8000000100EC7AC0;
                    v291._countAndFlagsBits = 0xD000000000000021;
                    String.append(_:)(v291);
                    v351 = v268;
                    goto LABEL_48;
                  }
                  v271 = v269;
                  v272 = v270;
                  sub_10001BC14(v266, v267);
                  sub_1002F7394(v271, v272);
                  sub_10001BC14(v266, v267);
                  v273 = v357;
                  v274 = v358[0];
                  v275 = sub_10001BBBC(v357, v358[0]);
                  v276 = static MACAddress.length.getter(v275);
                  sub_1002F7C0C(v276, v273, v274);
                  sub_10001BC14(v273, v274);
                  v277 = v357;
                  v278 = v358[0];
                  v279 = Data.hexString.getter(v357, v358[0]);
                  v281 = v280;
                  sub_10001BC14(v277, v278);
                  (*(void (**)(NSObject *, uint64_t))(v296 + 8))(v302, v263);
                  v357 = sub_100016940(v279, v281, (uint64_t *)&v354);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v255 + 34, v255 + 42);
                  swift_bridgeObjectRelease();
                  sub_100004048(v304, &qword_1010FB290);
                  sub_100004048((uint64_t)v308, &qword_1010FB290);
                  *(_WORD *)(v255 + 42) = 2082;
                  v282 = v310;
                  v357 = v310;
                  swift_errorRetain(v310);
                  v283 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
                  v284 = String.init<A>(describing:)(&v357, v283);
                  v357 = sub_100016940(v284, v285, (uint64_t *)&v354);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v357, v358, v255 + 44, v255 + 52);
                  swift_bridgeObjectRelease();
                  swift_errorRelease(v282);
                  swift_errorRelease(v282);
                  _os_log_impl((void *)&_mh_execute_header, v138, (os_log_type_t)v345, "Error decrypting location for beacon: %{private,mask.hash}s,\nadvertisementAddress: %{private,mask.hash}s,\n%{public}s.", (uint8_t *)v255, 0x34u);
                  v4 = (__SecKey *)v346;
                  swift_arrayDestroy(v346, 3, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v4, -1, -1);
                  swift_slowDealloc(v255, -1, -1);

                  v286 = ((uint64_t (*)(char *, uint64_t))v311)(v305, v301);
                }
                else
                {
                  sub_1000126B0(v332, type metadata accessor for OwnedBeaconRecord);
                  sub_100004048(v252, &qword_1010FB290);
                  sub_100004048((uint64_t)v308, &qword_1010FB290);
                  swift_errorRelease(v4);
                  swift_errorRelease(v4);

                  v286 = ((uint64_t (*)(char *, uint64_t))v311)(v241, v301);
                }
                swift_willThrow(v286);
                sub_10001BC14(v349, (unint64_t)v350);
                sub_1000126B0((uint64_t)v314, type metadata accessor for OwnedBeaconRecord);
                sub_100004048((uint64_t)v316, &qword_1010FB290);
              }
              else
              {
                v4 = (__SecKey *)_swiftEmptyArrayStorage;
LABEL_43:
                sub_10001BC14(v349, (unint64_t)v350);
                v141(v317, v161 + *(int *)(v333 + 20), v348);
                sub_1000126B0(v161, type metadata accessor for OwnedBeaconRecord);
                sub_100004048((uint64_t)v316, &qword_1010FB290);
              }
              return v4;
            }
          }
          else
          {
            sub_100004048((uint64_t)&v357, (uint64_t *)&unk_1010EE310);
            v100 = v321;
            ((void (*)(unint64_t, uint64_t, uint64_t, uint64_t))v320[7].isa)(v321, 1, 1, v333);
          }
          sub_100004048(v100, (uint64_t *)&unk_1010F47C0);
          sub_100004048((uint64_t)v316, &qword_1010FB290);
LABEL_20:
          v75 = v349;
          v4 = v350;
          goto LABEL_21;
        }
        swift_bridgeObjectRelease();
        sub_10001BC14(v80, v79);
      }
      sub_1000126B0((uint64_t)v48, type metadata accessor for FetchRequestBeacon);
      v77 += v78;
      if (!--v76)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
  }
  return v4;
}

uint64_t sub_10040AC58(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t RequestBeacon;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  objc_class *v64;
  uint64_t v65;
  os_log_t v66;
  char *v67;
  uint64_t v68;
  void (*isa)(uint64_t, char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  __int128 *v103;
  __int128 v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  Swift::String v116;
  Swift::String v117;
  uint64_t v118;
  uint64_t v119;
  Swift::String v120;
  os_log_t v121;
  uint64_t v122;
  void (*v123)(char *, uint64_t);
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  Class v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  __int128 *v148;
  __int128 v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  Swift::String v161;
  Swift::String v162;
  uint64_t v163;
  uint64_t v164;
  Swift::String v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  os_log_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  Class v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  __n128 v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  char v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v192;
  uint64_t v193;
  os_log_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  _QWORD *v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  _QWORD *v211;
  uint64_t v212;
  os_log_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  uint64_t v237;

  v199 = a4;
  v216 = a3;
  v215 = a2;
  v214 = type metadata accessor for UUID(0);
  v213 = *(os_log_t *)(v214 - 8);
  v5 = __chkstk_darwin(v214);
  v200 = (char *)&v192 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v202 = (char *)&v192 - v8;
  __chkstk_darwin(v7);
  v203 = (char *)&v192 - v9;
  v220 = type metadata accessor for Logger(0);
  v219 = *(_QWORD *)(v220 - 8);
  v10 = __chkstk_darwin(v220);
  v201 = (char *)&v192 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v217 = (unint64_t)&v192 - v13;
  __chkstk_darwin(v12);
  v210 = (char *)&v192 - v14;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F0EE0);
  __chkstk_darwin(v15);
  v208 = (uint64_t)&v192 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = type metadata accessor for TimeBasedKey(0);
  v207 = *(_QWORD *)(v212 - 8);
  v17 = __chkstk_darwin(v212);
  v205 = (uint64_t *)((char *)&v192 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = __chkstk_darwin(v17);
  v204 = (uint64_t)&v192 - v20;
  v21 = __chkstk_darwin(v19);
  v206 = (uint64_t *)((char *)&v192 - v22);
  v23 = __chkstk_darwin(v21);
  v209 = (char *)&v192 - v24;
  __chkstk_darwin(v23);
  v211 = (uint64_t *)((char *)&v192 - v25);
  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  v27 = *(_QWORD *)(RequestBeacon - 8);
  __chkstk_darwin(RequestBeacon);
  v29 = (char *)&v192 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_10001A9A8(&qword_1010FB280);
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v192 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v35 = (char *)&v192 - v34;
  v36 = (uint64_t)a1;
  v37 = *a1;
  v38 = a1[1];
  sub_10001BBBC(v37, v38);
  v39 = v218;
  sub_1002F702C(v37, v38);
  v40 = v39;
  if (v39)
  {
    v41 = v216;
LABEL_3:
    v42 = v220;
    v43 = type metadata accessor for LocationFetcher(0);
    v44 = v219;
    v45 = v217;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v219 + 16))(v217, v41 + *(int *)(v43 + 32), v42);
    swift_errorRetain(v40);
    v46 = swift_errorRetain(v40);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v234 = v50;
      *(_DWORD *)v49 = 136446210;
      *(_QWORD *)&v231 = v40;
      swift_errorRetain(v40);
      v51 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v52 = String.init<A>(describing:)(&v231, v51);
      *(_QWORD *)&v231 = sub_100016940(v52, v53, (uint64_t *)&v234);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, (char *)&v231 + 8, v49 + 4, v49 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v40);
      swift_errorRelease(v40);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Error getting keys %{public}s.", v49, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);

      swift_errorRelease(v40);
      return (*(uint64_t (**)(unint64_t, uint64_t))(v219 + 8))(v217, v220);
    }
    else
    {
      swift_errorRelease(v40);
      swift_errorRelease(v40);
      swift_errorRelease(v40);

      return (*(uint64_t (**)(unint64_t, uint64_t))(v44 + 8))(v45, v42);
    }
  }
  v196 = v30;
  v197 = v33;
  v195 = v36;
  v218 = (uint64_t)v35;
  v55 = v234;
  v56 = *(_QWORD *)(v215 + 16);
  if (!v56)
    return sub_10001BC14(v234, *((unint64_t *)&v234 + 1));
  v198 = 0;
  v57 = v215 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
  v58 = *(_QWORD *)(v27 + 72);
  swift_bridgeObjectRetain(v215);
  while (1)
  {
    sub_10005972C(v57, (uint64_t)v29, type metadata accessor for FetchRequestBeacon);
    v59 = *(_QWORD *)&v29[*(int *)(RequestBeacon + 28)];
    if (*(_QWORD *)(v59 + 16))
      break;
LABEL_7:
    sub_1000126B0((uint64_t)v29, type metadata accessor for FetchRequestBeacon);
    v57 += v58;
    if (!--v56)
    {
      swift_bridgeObjectRelease();
      return sub_10001BC14(v55, *((unint64_t *)&v55 + 1));
    }
  }
  swift_bridgeObjectRetain(*(_QWORD *)&v29[*(int *)(RequestBeacon + 28)]);
  sub_10001BBBC(v55, *((unint64_t *)&v55 + 1));
  v60 = sub_1005197F0(v55, *((unint64_t *)&v55 + 1));
  if ((v61 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_10001BC14(v55, *((unint64_t *)&v55 + 1));
    goto LABEL_7;
  }
  v194 = (os_log_t)*(int *)(v196 + 48);
  v62 = (char *)*(int *)(v196 + 64);
  v63 = *(_QWORD *)(v59 + 56) + 16 * v60;
  v64 = *(objc_class **)v63;
  v65 = *(unsigned __int8 *)(v63 + 8);
  swift_bridgeObjectRelease();
  sub_10001BC14(v55, *((unint64_t *)&v55 + 1));
  swift_bridgeObjectRelease();
  v66 = v213;
  v67 = v197;
  v68 = v214;
  ((void (*)(char *, char *, uint64_t))v213[2].isa)(v197, v29, v214);
  sub_1000126B0((uint64_t)v29, type metadata accessor for FetchRequestBeacon);
  isa = (void (*)(uint64_t, char *, uint64_t))v66[4].isa;
  v70 = v218;
  isa(v218, v67, v68);
  *(Class *)((char *)&v194->isa + v70) = v64;
  v197 = v62;
  v62[v70] = v65;
  v71 = v65;
  v41 = v216;
  sub_10080B648(v70, (uint64_t)&v234);
  if (*((_QWORD *)&v235 + 1))
  {
    v215 = v55;
    sub_10000F9FC(&v234, (uint64_t)&v228);
    v72 = v198;
    v73 = sub_1007F516C(&v228, (unint64_t)v64, (unint64_t)v64, v71, 0);
    v74 = v72;
    if (v72)
    {
      sub_100004048(v70, &qword_1010FB280);
      sub_10001BC14(v215, *((unint64_t *)&v55 + 1));
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v228);
      v40 = v72;
      goto LABEL_3;
    }
    if (v73[2])
    {
      v75 = v207;
      v76 = v208;
      sub_10005972C((uint64_t)v73 + ((*(unsigned __int8 *)(v207 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v207 + 80)), v208, type metadata accessor for TimeBasedKey);
      v77 = 0;
      v78 = v212;
      v79 = v210;
      v80 = (uint64_t)v209;
    }
    else
    {
      v77 = 1;
      v78 = v212;
      v79 = v210;
      v80 = (uint64_t)v209;
      v76 = v208;
      v75 = v207;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56))(v76, v77, 1, v78);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v76, 1, v78) == 1)
    {
      sub_100004048(v218, &qword_1010FB280);
      sub_10001BC14(v215, *((unint64_t *)&v55 + 1));
      v81 = (uint64_t *)&unk_1010F0EE0;
      v82 = v76;
      goto LABEL_37;
    }
    v217 = *((_QWORD *)&v55 + 1);
    v83 = v211;
    sub_1000126EC(v76, (uint64_t)v211, type metadata accessor for TimeBasedKey);
    v84 = type metadata accessor for LocationFetcher(0);
    v85 = *(char **)(v219 + 16);
    v208 = v41 + *(int *)(v84 + 32);
    v86 = v220;
    v209 = v85;
    ((void (*)(_QWORD))v85)(v55);
    sub_100030784((uint64_t)&v228, (uint64_t)&v231);
    v87 = v80;
    sub_10005972C((uint64_t)v83, v80, type metadata accessor for TimeBasedKey);
    v88 = (uint64_t)v83;
    v89 = v206;
    v90 = sub_10005972C(v88, (uint64_t)v206, type metadata accessor for TimeBasedKey);
    v91 = Logger.logObject.getter(v90);
    v92 = static os_log_type_t.default.getter(v91);
    v93 = v92;
    if (os_log_type_enabled(v91, v92))
    {
      v94 = swift_slowAlloc(52, -1);
      v207 = swift_slowAlloc(96, -1);
      v222 = v207;
      *(_DWORD *)v94 = 141559043;
      v198 = 0;
      *(_QWORD *)&v234 = 1752392040;
      LODWORD(v196) = v93;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, (char *)&v234 + 8, v94 + 4, v94 + 12);
      *(_WORD *)(v94 + 12) = 2081;
      v193 = v94 + 14;
      v96 = *((_QWORD *)&v232 + 1);
      v95 = v233;
      v194 = v91;
      sub_10001AA44(&v231, *((uint64_t *)&v232 + 1));
      v97 = v203;
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v95 + 8) + 8) + 32))(v96);
      v98 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v99 = v214;
      v100 = dispatch thunk of CustomStringConvertible.description.getter(v214, v98);
      v102 = v101;
      ((void (*)(char *, uint64_t))v213[1].isa)(v97, v99);
      *(_QWORD *)&v234 = sub_100016940(v100, v102, &v222);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, (char *)&v234 + 8, v193, v94 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v231);
      *(_WORD *)(v94 + 22) = 2160;
      *(_QWORD *)&v234 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, (char *)&v234 + 8, v94 + 24, v94 + 32);
      *(_WORD *)(v94 + 32) = 2081;
      v103 = (__int128 *)(v87 + *(int *)(v212 + 24));
      v104 = v103[1];
      v234 = *v103;
      v235 = v104;
      v236 = v103[2];
      v105 = sub_1007DFD44();
      v107 = v106;
      v108 = sub_10001BBBC(v105, v106);
      v109 = static MACAddress.length.getter(v108);
      sub_1002F7C0C(v109, v105, v107);
      sub_10001BC14(v105, v107);
      v110 = v224;
      v111 = v225;
      v112 = Data.hexString.getter(v224, v225);
      v114 = v113;
      sub_10001BC14(v110, v111);
      v224 = sub_100016940(v112, v114, &v222);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, &v225, v94 + 34, v94 + 42);
      swift_bridgeObjectRelease();
      sub_1000126B0(v87, type metadata accessor for TimeBasedKey);
      *(_WORD *)(v94 + 42) = 2082;
      v224 = 0;
      v225 = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      v224 = 0xD000000000000015;
      v225 = 0x8000000100ED6150;
      v115 = v206;
      v237 = *v206;
      v116._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      String.append(_:)(v116);
      swift_bridgeObjectRelease();
      v117._object = (void *)0x8000000100ED6170;
      v117._countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v117);
      v118 = type metadata accessor for DateInterval(0);
      v119 = sub_100006204(&qword_1010F2168, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
      v120._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v118, v119);
      String.append(_:)(v120);
      swift_bridgeObjectRelease();
      v224 = sub_100016940(v224, v225, &v222);
      v74 = v198;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, &v225, v94 + 44, v94 + 52);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v115, type metadata accessor for TimeBasedKey);
      v121 = v194;
      _os_log_impl((void *)&_mh_execute_header, v194, (os_log_type_t)v196, "Using decryption key for beacon %{private,mask.hash}s,\nadvertisementAddress: %{private,mask.hash}s,\n%{public}s.", (uint8_t *)v94, 0x34u);
      v122 = v207;
      swift_arrayDestroy(v207, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v122, -1, -1);
      swift_slowDealloc(v94, -1, -1);

      v123 = *(void (**)(char *, uint64_t))(v219 + 8);
      v123(v210, v220);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v231);
      sub_1000126B0(v87, type metadata accessor for TimeBasedKey);
      sub_1000126B0((uint64_t)v89, type metadata accessor for TimeBasedKey);

      v123 = *(void (**)(char *, uint64_t))(v219 + 8);
      v123(v79, v86);
    }
    v124 = v229;
    v125 = v230;
    v126 = v197[v218];
    sub_10001AA44(&v228, v229);
    v127 = (uint64_t)v202;
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v125 + 8) + 8) + 32))(v124);
    v128 = v211;
    sub_10040C2CC(v211, v126, v195, v127);
    if (v74)
    {
      v130 = v213[1].isa;
      v131 = v127;
      v132 = v214;
      ((void (*)(uint64_t, uint64_t))v130)(v131, v214);
      v133 = v201;
      v134 = v220;
      ((void (*)(char *, uint64_t, uint64_t))v209)(v201, v208, v220);
      sub_100030784((uint64_t)&v228, (uint64_t)&v224);
      sub_10005972C((uint64_t)v128, v204, type metadata accessor for TimeBasedKey);
      sub_10005972C((uint64_t)v128, (uint64_t)v205, type metadata accessor for TimeBasedKey);
      swift_errorRetain(v74);
      v135 = swift_errorRetain(v74);
      v136 = Logger.logObject.getter(v135);
      v137 = static os_log_type_t.error.getter(v136);
      v138 = v137;
      if (os_log_type_enabled(v136, v137))
      {
        v139 = swift_slowAlloc(62, -1);
        v216 = swift_slowAlloc(128, -1);
        v237 = v216;
        *(_DWORD *)v139 = 141559299;
        *(_QWORD *)&v231 = 1752392040;
        v213 = v136;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, (char *)&v231 + 8, v139 + 4, v139 + 12);
        *(_WORD *)(v139 + 12) = 2081;
        v198 = v74;
        LODWORD(v210) = v138;
        v141 = v226;
        v140 = v227;
        sub_10001AA44(&v224, v226);
        v142 = v203;
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v140 + 8) + 8) + 32))(v141);
        v143 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v144 = dispatch thunk of CustomStringConvertible.description.getter(v132, v143);
        v146 = v145;
        ((void (*)(char *, uint64_t))v130)(v142, v132);
        *(_QWORD *)&v231 = sub_100016940(v144, v146, &v237);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, (char *)&v231 + 8, v139 + 14, v139 + 22);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v224);
        *(_WORD *)(v139 + 22) = 2160;
        *(_QWORD *)&v231 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, (char *)&v231 + 8, v139 + 24, v139 + 32);
        *(_WORD *)(v139 + 32) = 2081;
        v147 = v204;
        v148 = (__int128 *)(v204 + *(int *)(v212 + 24));
        v149 = v148[1];
        v231 = *v148;
        v232 = v149;
        v233 = v148[2];
        v150 = sub_1007DFD44();
        v152 = v151;
        v153 = sub_10001BBBC(v150, v151);
        v154 = static MACAddress.length.getter(v153);
        sub_1002F7C0C(v154, v150, v152);
        sub_10001BC14(v150, v152);
        v155 = v222;
        v156 = v223;
        v157 = Data.hexString.getter(v222, v223);
        v159 = v158;
        sub_10001BC14(v155, v156);
        v222 = sub_100016940(v157, v159, &v237);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, &v223, v139 + 34, v139 + 42);
        swift_bridgeObjectRelease();
        sub_1000126B0(v147, type metadata accessor for TimeBasedKey);
        *(_WORD *)(v139 + 42) = 2082;
        v222 = 0;
        v223 = 0xE000000000000000;
        _StringGuts.grow(_:)(41);
        swift_bridgeObjectRelease();
        v222 = 0xD000000000000015;
        v223 = 0x8000000100ED6150;
        v160 = v205;
        v221 = *v205;
        v161._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        String.append(_:)(v161);
        swift_bridgeObjectRelease();
        v162._object = (void *)0x8000000100ED6170;
        v162._countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v162);
        v163 = type metadata accessor for DateInterval(0);
        v164 = sub_100006204(&qword_1010F2168, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
        v165._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v163, v164);
        String.append(_:)(v165);
        swift_bridgeObjectRelease();
        v222 = sub_100016940(v222, v223, &v237);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, &v223, v139 + 44, v139 + 52);
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v160, type metadata accessor for TimeBasedKey);
        *(_WORD *)(v139 + 52) = 2082;
        v166 = v198;
        v222 = v198;
        swift_errorRetain(v198);
        v167 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        v168 = String.init<A>(describing:)(&v222, v167);
        v222 = sub_100016940(v168, v169, &v237);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, &v223, v139 + 54, v139 + 62);
        swift_bridgeObjectRelease();
        swift_errorRelease(v166);
        swift_errorRelease(v166);
        v170 = v213;
        _os_log_impl((void *)&_mh_execute_header, v213, (os_log_type_t)v210, "Error decrypting location for beacon: %{private,mask.hash}s,\nadvertisementAddress: %{private,mask.hash}s,\n%{public}s,\n%{public}s.", (uint8_t *)v139, 0x3Eu);
        v171 = v216;
        swift_arrayDestroy(v216, 4, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v171, -1, -1);
        swift_slowDealloc(v139, -1, -1);
        sub_10001BC14(v215, v217);

        swift_errorRelease(v166);
        (*(void (**)(char *, uint64_t))(v219 + 8))(v201, v220);
        v172 = v211;
      }
      else
      {
        sub_10001BC14(v215, v217);

        swift_errorRelease(v74);
        swift_errorRelease(v74);
        sub_1000126B0((uint64_t)v205, type metadata accessor for TimeBasedKey);
        sub_1000126B0(v204, type metadata accessor for TimeBasedKey);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v224);
        swift_errorRelease(v74);
        v123(v133, v134);
        v172 = v128;
      }
      sub_1000126B0((uint64_t)v172, type metadata accessor for TimeBasedKey);
      sub_100004048(v218, &qword_1010FB280);
    }
    else
    {
      v173 = v129;
      v174 = v213[1].isa;
      v175 = v214;
      ((void (*)(uint64_t, uint64_t))v174)(v127, v214);
      v177 = v229;
      v176 = v230;
      sub_10001AA44(&v228, v229);
      v178 = (uint64_t)v200;
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v176 + 8) + 8) + 32))(v177);
      v180 = v199;
      v181 = *v199;
      if (*(_QWORD *)(*v199 + 16))
      {
        v182 = sub_100003FB0(v178);
        v183 = v218;
        v184 = v217;
        v185 = (uint64_t)v203;
        if ((v186 & 1) != 0)
        {
          v187 = *(void **)(*(_QWORD *)(v181 + 56) + 8 * v182);
          v179 = swift_bridgeObjectRetain(v187);
        }
        else
        {
          v187 = &_swiftEmptySetSingleton;
        }
      }
      else
      {
        v187 = &_swiftEmptySetSingleton;
        v183 = v218;
        v184 = v217;
        v185 = (uint64_t)v203;
      }
      ((void (*)(char *, uint64_t, __n128))v174)(v200, v175, v179);
      *(_QWORD *)&v231 = v187;
      sub_100BD2170(v173);
      swift_bridgeObjectRelease();
      v188 = v229;
      v189 = v230;
      sub_10001AA44(&v228, v229);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v189 + 8) + 8) + 32))(v188);
      v190 = v231;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v180);
      v224 = *v180;
      *v180 = 0x8000000000000000;
      sub_10010ABB4(v190, v185, isUniquelyReferenced_nonNull_native);
      *v180 = v224;
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v174)(v185, v175);
      sub_10001BC14(v215, v184);
      sub_1000126B0((uint64_t)v211, type metadata accessor for TimeBasedKey);
      v81 = &qword_1010FB280;
      v82 = v183;
LABEL_37:
      sub_100004048(v82, v81);
    }
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v228);
  }
  else
  {
    sub_100004048(v70, &qword_1010FB280);
    sub_10001BC14(v55, *((unint64_t *)&v55 + 1));
    return sub_100004048((uint64_t)&v234, (uint64_t *)&unk_1010EE310);
  }
}

void sub_10040C2CC(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  SecKeyRef v12;
  SecKeyRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  _QWORD *v28;

  v28 = _swiftEmptyArrayStorage;
  v6 = (char *)a1 + *(int *)(type metadata accessor for TimeBasedKey(0) + 24);
  v7 = *((_QWORD *)v6 + 5);
  if (v7 >> 60 == 15)
  {
    v8 = sub_100425D04();
    v9 = swift_allocError(&type metadata for LocationFetcher.LocationFetcherError, v8, 0, 0);
    *v10 = 0;
    swift_willThrow(v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *((_QWORD *)v6 + 4);
    sub_10001BBBC(v11, *((_QWORD *)v6 + 5));
    v12 = sub_1002F7F34(v11, v7);
    if (v4)
    {
      sub_10001EF3C(v11, v7);
    }
    else
    {
      v13 = v12;
      v14 = *(_QWORD *)(a3 + 16);
      v15 = *(_QWORD *)(v14 + 16);
      if (v15)
      {
        v22 = v11;
        v23 = v7;
        swift_bridgeObjectRetain(v14);
        v17 = (unsigned int *)(v16 + 48);
        do
        {
          v19 = *((_QWORD *)v17 - 2);
          v18 = *((_QWORD *)v17 - 1);
          v20 = *v17 | ((unint64_t)*((unsigned __int8 *)v17 + 4) << 32);
          sub_10001BBBC(v19, v18);
          v21 = objc_autoreleasePoolPush();
          sub_100415A9C(v13, v19, v18, v20, a1, v26, a4, a2, a3, (unint64_t *)&v28);
          v17 += 6;
          objc_autoreleasePoolPop(v21);
          sub_10001BC14(v19, v18);
          --v15;
        }
        while (v15);

        swift_bridgeObjectRelease();
        sub_10001EF3C(v22, v23);
      }
      else
      {

        sub_10001EF3C(v11, v7);
      }
    }
  }
}

uint64_t sub_10040C4A0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  _QWORD *v42;
  _QWORD *v43;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t result;
  _QWORD v59[3];
  char *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(char *, uint64_t);
  void (*v70)(uint64_t, uint64_t, uint64_t);
  _QWORD *v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;

  v71 = a2;
  v5 = type metadata accessor for BeaconEstimatedLocation(0);
  v66 = *(_QWORD *)(v5 - 8);
  v67 = v5;
  __chkstk_darwin(v5);
  v68 = (uint64_t)v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010FB1A0);
  __chkstk_darwin(v7);
  v9 = (char *)v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v73 = (char *)v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)v59 - v14;
  v16 = *(int *)(v7 + 48);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v17(v9, a1, v10);
  v18 = *(_QWORD *)(a1 + v16);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v9, v10);
  v19 = *(int *)(v7 + 48);
  v70 = (void (*)(uint64_t, uint64_t, uint64_t))v17;
  v17(v9, a1, v10);
  *(_QWORD *)&v9[v19] = v18;
  swift_bridgeObjectRetain(v18);
  v20 = v72;
  v22 = sub_1003F1278(v21);
  v61 = v11;
  v23 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  v72 = v10;
  v69 = v23;
  v23(v9, v10);
  v60 = v15;
  v24 = sub_10040C928((uint64_t)v15, v22);
  swift_bridgeObjectRelease();
  v25 = *((_QWORD *)v24 + 2);
  if (!v25)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return v69(v60, v72);
  }
  v59[1] = v24;
  v59[2] = v20;
  v26 = *(unsigned __int8 *)(v66 + 80);
  v27 = (v26 + 32) & ~v26;
  v28 = (uint64_t)&v24[v27];
  v29 = *(_QWORD *)(v66 + 72);
  v66 = v27;
  v62 = v29;
  v64 = v26 | 7;
  v65 = v29 + v27;
  v30 = type metadata accessor for BeaconEstimatedLocation;
  v63 = xmmword_100E22B00;
  v31 = v68;
  v71 = a3;
  while (1)
  {
    sub_10005972C(v28, v31, v30);
    v33 = v31 + *(int *)(v67 + 24);
    v34 = *a3;
    if (*(_QWORD *)(*a3 + 16))
    {
      v35 = sub_100003FB0(v31 + *(int *)(v67 + 24));
      v36 = _swiftEmptyArrayStorage;
      if ((v37 & 1) != 0)
      {
        v36 = *(_QWORD **)(*(_QWORD *)(v34 + 56) + 8 * v35);
        swift_bridgeObjectRetain(v36);
      }
    }
    else
    {
      v36 = _swiftEmptyArrayStorage;
    }
    v38 = (uint64_t)v73;
    v70((uint64_t)v73, v33, v72);
    v39 = sub_10001A9A8(&qword_101108E70);
    v40 = swift_allocObject(v39, v65, v64);
    *(_OWORD *)(v40 + 16) = v63;
    v41 = v30;
    sub_10005972C(v31, v40 + v66, v30);
    v74 = v36;
    sub_100304004(v40);
    v42 = v74;
    v43 = v71;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v71);
    v74 = (_QWORD *)*v43;
    v45 = v74;
    *v43 = 0x8000000000000000;
    v47 = sub_100003FB0(v38);
    v48 = v45[2];
    v49 = (v46 & 1) == 0;
    v50 = v48 + v49;
    if (__OFADD__(v48, v49))
    {
      __break(1u);
LABEL_22:
      __break(1u);
    }
    v51 = v46;
    if (v45[3] < v50)
      break;
    a3 = v71;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v54 = v74;
      if ((v46 & 1) != 0)
        goto LABEL_3;
    }
    else
    {
      sub_100A9C2C4();
      v54 = v74;
      if ((v51 & 1) != 0)
      {
LABEL_3:
        v32 = v54[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v32 + 8 * v47) = v42;
        goto LABEL_4;
      }
    }
LABEL_16:
    v54[(v47 >> 6) + 8] |= 1 << v47;
    v70(v54[6] + *(_QWORD *)(v61 + 72) * v47, (uint64_t)v73, v72);
    *(_QWORD *)(v54[7] + 8 * v47) = v42;
    v55 = v54[2];
    v56 = __OFADD__(v55, 1);
    v57 = v55 + 1;
    if (v56)
      goto LABEL_22;
    v54[2] = v57;
LABEL_4:
    *a3 = v54;
    swift_bridgeObjectRelease();
    v69(v73, v72);
    v31 = v68;
    v30 = v41;
    sub_1000126B0(v68, v41);
    v28 += v62;
    if (!--v25)
      goto LABEL_20;
  }
  sub_100A89E44(v50, isUniquelyReferenced_nonNull_native);
  v52 = sub_100003FB0((uint64_t)v73);
  a3 = v71;
  if ((v51 & 1) == (v53 & 1))
  {
    v47 = v52;
    v54 = v74;
    if ((v51 & 1) != 0)
      goto LABEL_3;
    goto LABEL_16;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v72);
  __break(1u);
  return result;
}

char *sub_10040C928(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  os_log_type_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  char *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  unint64_t v150;
  uint64_t (*v151)(uint64_t);
  uint64_t v152;
  unint64_t v153;
  _BYTE *v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  void (*v158)(_QWORD, _QWORD);
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  double v170;
  double v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(uint64_t, uint64_t, uint64_t);
  unsigned int v177;
  int v178;
  int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  int64_t v185;
  uint64_t v186;
  char *v187;
  _UNKNOWN **v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  NSObject *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  __n128 v197;
  char *v198;
  void (*v199)(char *, uint64_t, uint64_t, uint64_t, __n128);
  char *v200;
  uint64_t v201;
  void (*v202)(uint64_t, char *, uint64_t);
  char *v203;
  uint64_t v204;
  NSObject *v205;
  os_log_type_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  NSObject *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  char *v222;
  uint64_t (*v223)(char *, uint64_t, uint64_t);
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  NSObject *v233;
  os_log_type_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  char *v241;
  char *v242;
  char *v243;
  __int128 v244;
  _BYTE *v245;
  uint64_t v246;
  int v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  int *v251;
  __int128 *v252;
  id v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  id v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  NSObject *v269;
  os_log_type_t v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t v293;
  os_log_t v294;
  _QWORD *v295;
  char *v296;
  uint64_t v297;
  unint64_t v298;
  char isUniquelyReferenced_nonNull_native;
  void (*v300)(char *, char *, uint64_t);
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  NSObject *v314;
  uint64_t v315;
  NSObject *v316;
  uint64_t v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  NSObject *v327;
  os_log_type_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  _UNKNOWN **v338;
  void *v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  _BYTE *v351;
  uint64_t (*v352)(uint64_t);
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  _BYTE *v357;
  char *v358;
  uint64_t v359;
  uint64_t v360;
  _QWORD *v361;
  os_log_t v362;
  uint64_t v363;
  NSObject *v364;
  os_log_type_t v365;
  os_log_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  _BYTE *v372;
  char *result;
  _QWORD v374[2];
  unint64_t v375;
  unsigned int v376;
  int v377;
  uint64_t v378;
  int v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  char *v384;
  char *v385;
  __int128 v386;
  char *v387;
  char *v388;
  uint64_t v389;
  _BYTE *v390;
  os_log_t v391;
  _QWORD *v392;
  __int128 v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  void (*v397)(_QWORD, _QWORD);
  char *v398;
  char *v399;
  void (*v400)(uint64_t, char *, uint64_t);
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  char *v409;
  uint64_t v410;
  uint64_t v411;
  char *v412;
  char *v413;
  char *v414;
  uint64_t v415;
  char *v416;
  char *v417;
  uint64_t (*v418)(uint64_t);
  char *v419;
  char *v420;
  NSObject *v421;
  uint64_t v422;
  uint64_t v423;
  _BYTE *v424;
  uint64_t v425;
  uint64_t v426;
  char *v427;
  uint64_t v428;
  uint64_t v429;
  char *v430;
  char *v431;
  char *v432;
  uint64_t v433;
  uint64_t v434;
  __int128 *v435;
  char *v436;
  uint64_t v437;
  char *v438;
  char *v439;
  uint64_t v440;
  double v441;
  uint64_t v442;
  char v443[8];
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  __int128 v447;
  uint64_t v448;
  _UNKNOWN **v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;

  v423 = a1;
  v3 = sub_10001A9A8(&qword_1010FB168);
  __chkstk_darwin(v3);
  v381 = (uint64_t)v374 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocationFetcher(0);
  v407 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v406 = v6;
  v405 = (uint64_t)v374 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010ED860);
  v8 = __chkstk_darwin(v7);
  v412 = (char *)v374 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v420 = (char *)v374 - v10;
  v11 = type metadata accessor for UUID(0);
  v12 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v439 = (char *)v374 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v399 = (char *)v374 - v16;
  v17 = __chkstk_darwin(v15);
  *(_QWORD *)&v393 = (char *)v374 - v18;
  v19 = __chkstk_darwin(v17);
  v409 = (char *)v374 - v20;
  v21 = __chkstk_darwin(v19);
  v416 = (char *)v374 - v22;
  v23 = __chkstk_darwin(v21);
  v431 = (char *)v374 - v24;
  v25 = __chkstk_darwin(v23);
  v417 = (char *)v374 - v26;
  v27 = __chkstk_darwin(v25);
  v421 = ((char *)v374 - v28);
  v29 = __chkstk_darwin(v27);
  v419 = (char *)v374 - v30;
  v404 = v31;
  __chkstk_darwin(v29);
  v391 = (os_log_t)((char *)v374 - v32);
  v33 = type metadata accessor for Logger(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = __chkstk_darwin(v33);
  v436 = (char *)v374 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v410 = (uint64_t)v374 - v38;
  v39 = __chkstk_darwin(v37);
  v395 = (uint64_t)v374 - v40;
  v41 = __chkstk_darwin(v39);
  v388 = (char *)v374 - v42;
  v43 = __chkstk_darwin(v41);
  v427 = (char *)v374 - v44;
  v45 = __chkstk_darwin(v43);
  v418 = (uint64_t (*)(uint64_t))((char *)v374 - v46);
  __chkstk_darwin(v45);
  v392 = (_QWORD *)((char *)v374 - v47);
  v48 = sub_10001A9A8((uint64_t *)&unk_1010F7810);
  __chkstk_darwin(v48);
  v397 = (void (*)(_QWORD, _QWORD))((char *)v374 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
  v411 = type metadata accessor for BeaconEstimatedLocation(0);
  v429 = *(_QWORD *)(v411 - 8);
  v50 = __chkstk_darwin(v411);
  v403 = (uint64_t)v374 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __chkstk_darwin(v50);
  v408 = (uint64_t)v374 - v53;
  v54 = __chkstk_darwin(v52);
  v415 = (uint64_t)v374 - v55;
  v56 = __chkstk_darwin(v54);
  v414 = (char *)v374 - v57;
  v58 = __chkstk_darwin(v56);
  v426 = (uint64_t)v374 - v59;
  v60 = __chkstk_darwin(v58);
  v425 = (uint64_t)v374 - v61;
  v62 = __chkstk_darwin(v60);
  v402 = (uint64_t)v374 - v63;
  v64 = __chkstk_darwin(v62);
  v435 = (__int128 *)((char *)v374 - v65);
  v66 = __chkstk_darwin(v64);
  v396 = (uint64_t)v374 - v67;
  v68 = __chkstk_darwin(v66);
  v428 = (uint64_t)v374 - v69;
  v70 = __chkstk_darwin(v68);
  v424 = (char *)v374 - v71;
  v394 = v72;
  __chkstk_darwin(v70);
  v398 = (char *)v374 - v73;
  v434 = type metadata accessor for Date(0);
  v74 = *(_QWORD *)(v434 - 8);
  v75 = __chkstk_darwin(v434);
  v438 = (char *)v374 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v75);
  v432 = (char *)v374 - v77;
  v78 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v79 = __chkstk_darwin(v78);
  v81 = (char *)v374 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v79);
  v413 = (char *)v374 - v82;
  v433 = type metadata accessor for RawSearchResult(0);
  v83 = __chkstk_darwin(v433);
  v384 = (char *)v374 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __chkstk_darwin(v83);
  v380 = (uint64_t)v374 - v86;
  v87 = __chkstk_darwin(v85);
  v88 = __chkstk_darwin(v87);
  v90 = (uint64_t)v374 - v89;
  __chkstk_darwin(v88);
  v94 = (char *)v374 - v91;
  v389 = *(_QWORD *)(a2 + 16);
  if (!v389)
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v436, &v430[*(int *)(v5 + 32)], v33);
    v104 = v12[2](v439, v423, v11);
    v105 = Logger.logObject.getter(v104);
    v106 = static os_log_type_t.default.getter(v105);
    if (os_log_type_enabled(v105, v106))
    {
      v107 = swift_slowAlloc(22, -1);
      v401 = v34;
      v108 = v107;
      v109 = swift_slowAlloc(32, -1);
      v422 = v33;
      v110 = v109;
      v450 = v109;
      *(_DWORD *)v108 = 141558275;
      *(_QWORD *)&v447 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v447, (char *)&v447 + 8, v108 + 4, v108 + 12);
      *(_WORD *)(v108 + 12) = 2081;
      v111 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v112 = v439;
      v113 = dispatch thunk of CustomStringConvertible.description.getter(v11, v111);
      *(_QWORD *)&v447 = sub_100016940(v113, v114, &v450);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v447, (char *)&v447 + 8, v108 + 14, v108 + 22);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v12[1])(v112, v11);
      _os_log_impl((void *)&_mh_execute_header, v105, v106, "Did not find a location for beacon %{private,mask.hash}s.", (uint8_t *)v108, 0x16u);
      swift_arrayDestroy(v110, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v110, -1, -1);
      swift_slowDealloc(v108, -1, -1);

      (*(void (**)(char *, uint64_t))(v401 + 8))(v436, v422);
    }
    else
    {
      ((void (*)(char *, uint64_t))v12[1])(v439, v11);

      (*(void (**)(char *, uint64_t))(v34 + 8))(v436, v33);
    }
    return (char *)_swiftEmptyArrayStorage;
  }
  v400 = (void (*)(uint64_t, char *, uint64_t))v5;
  v378 = v92;
  v436 = (char *)v12;
  v437 = v11;
  v401 = v34;
  v383 = v93;
  v95 = (*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
  v382 = a2 + v95;
  sub_10005972C(a2 + v95, (uint64_t)v374 - v91, type metadata accessor for RawSearchResult);
  v96 = v430;
  sub_10080B648(v423, (uint64_t)&v447);
  v390 = v94;
  if (!v448)
  {
    sub_100004048((uint64_t)&v447, (uint64_t *)&unk_1010EE310);
    v115 = v401;
    v116 = v410;
    (*(void (**)(uint64_t, char *, uint64_t))(v401 + 16))(v410, &v96[*((int *)v400 + 8)], v33);
    v117 = v436;
    v118 = v399;
    v119 = v437;
    v120 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v436 + 2))(v399, v423, v437);
    v121 = Logger.logObject.getter(v120);
    v122 = static os_log_type_t.error.getter(v121);
    if (os_log_type_enabled(v121, v122))
    {
      v123 = v118;
      v124 = swift_slowAlloc(22, -1);
      v125 = swift_slowAlloc(32, -1);
      v422 = v33;
      v126 = v125;
      v450 = v125;
      *(_DWORD *)v124 = 141558275;
      *(_QWORD *)&v447 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v447, (char *)&v447 + 8, v124 + 4, v124 + 12);
      *(_WORD *)(v124 + 12) = 2081;
      v127 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v128 = dispatch thunk of CustomStringConvertible.description.getter(v119, v127);
      *(_QWORD *)&v447 = sub_100016940(v128, v129, &v450);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v447, (char *)&v447 + 8, v124 + 14, v124 + 22);
      swift_bridgeObjectRelease();
      (*((void (**)(char *, uint64_t))v117 + 1))(v123, v119);
      _os_log_impl((void *)&_mh_execute_header, v121, v122, "saveLocation could not find beacon record for %{private,mask.hash}s.", (uint8_t *)v124, 0x16u);
      swift_arrayDestroy(v126, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v126, -1, -1);
      swift_slowDealloc(v124, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v401 + 8))(v410, v422);
    }
    else
    {
      (*((void (**)(char *, uint64_t))v117 + 1))(v118, v119);

      (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v116, v33);
    }
    sub_1000126B0((uint64_t)v390, type metadata accessor for RawSearchResult);
    return (char *)_swiftEmptyArrayStorage;
  }
  v97 = a2;
  sub_10000F9FC(&v447, (uint64_t)&v450);
  v98 = *v94;
  v99 = (v98 >> 4) & 3;
  v422 = v33;
  v100 = v433;
  v377 = v99;
  v376 = v98;
  v375 = v95;
  if (!v99)
    goto LABEL_13;
  if ((v99 - 2) >= 2)
  {
    if (v99 == 1)
    {
      v130 = v451;
      v131 = v452;
      sub_10001AA44(&v450, v451);
      v103 = (*(uint64_t (**)(uint64_t, uint64_t))(v131 + 96))(v130, v131);
      goto LABEL_14;
    }
LABEL_13:
    v132 = v451;
    v133 = v452;
    sub_10001AA44(&v450, v451);
    v103 = (*(uint64_t (**)(uint64_t, uint64_t))(v133 + 88))(v132, v133);
    goto LABEL_14;
  }
  v101 = v451;
  v102 = v452;
  sub_10001AA44(&v450, v451);
  v103 = (*(uint64_t (**)(uint64_t, uint64_t))(v102 + 104))(v101, v102);
LABEL_14:
  v379 = v103;
  v439 = *(char **)(v383 + 72);
  v410 = v97;
  swift_bridgeObjectRetain(v97);
  v134 = (char *)_swiftEmptyArrayStorage;
  v135 = v382;
  v136 = v389;
  v137 = v434;
  do
  {
    sub_10005972C(v135, v90, type metadata accessor for RawSearchResult);
    sub_10000F9B8(v90 + *(int *)(v100 + 40), (uint64_t)v81, (uint64_t *)&unk_1010EA690);
    sub_1000126B0(v90, type metadata accessor for RawSearchResult);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v81, 1, v137) == 1)
    {
      sub_100004048((uint64_t)v81, (uint64_t *)&unk_1010EA690);
    }
    else
    {
      v138 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
      v139 = v432;
      v138(v432, v81, v137);
      v138(v438, v139, v137);
      if ((swift_isUniquelyReferenced_nonNull_native(v134) & 1) == 0)
        v134 = (char *)sub_1007C77C0(0, *((_QWORD *)v134 + 2) + 1, 1, (unint64_t)v134);
      v141 = *((_QWORD *)v134 + 2);
      v140 = *((_QWORD *)v134 + 3);
      if (v141 >= v140 >> 1)
        v134 = (char *)sub_1007C77C0(v140 > 1, v141 + 1, 1, (unint64_t)v134);
      *((_QWORD *)v134 + 2) = v141 + 1;
      v137 = v434;
      v138(&v134[((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))+ *(_QWORD *)(v74 + 72) * v141], v438, v434);
      v100 = v433;
    }
    v135 += (uint64_t)v439;
    --v136;
  }
  while (v136);
  v142 = v410;
  swift_bridgeObjectRelease();
  sub_100A79158((uint64_t)v134, v413);
  swift_bridgeObjectRelease();
  v143 = *((_QWORD *)v430 + 6);
  v144 = *((_QWORD *)v430 + 7);
  sub_10001AA44((_QWORD *)v430 + 3, v143);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v144 + 24))(v143, v144) & 1) != 0)
  {
    v145 = sub_10088AA6C(v423);
    v146 = _swiftEmptyArrayStorage;
    *(_QWORD *)&v447 = _swiftEmptyArrayStorage;
    v147 = v145[2];
    v148 = v437;
    v149 = v436;
    if (v147)
    {
      v150 = 0;
      v151 = type metadata accessor for BeaconEstimatedLocation;
      v152 = v411;
      while (v150 < v145[2])
      {
        v153 = (*(unsigned __int8 *)(v429 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v429 + 80);
        v90 = *(_QWORD *)(v429 + 72);
        v154 = v424;
        sub_10005972C((uint64_t)v145 + v153 + v90 * v150, (uint64_t)v424, type metadata accessor for BeaconEstimatedLocation);
        if (v154[*(int *)(v152 + 44)] == 8)
        {
          sub_1000126EC((uint64_t)v154, v428, type metadata accessor for BeaconEstimatedLocation);
          if ((swift_isUniquelyReferenced_nonNull_native(v146) & 1) == 0)
            sub_10009A5D0(0, v146[2] + 1, 1);
          v146 = (_QWORD *)v447;
          v156 = *(_QWORD *)(v447 + 16);
          v155 = *(_QWORD *)(v447 + 24);
          if (v156 >= v155 >> 1)
          {
            sub_10009A5D0(v155 > 1, v156 + 1, 1);
            v146 = (_QWORD *)v447;
          }
          v146[2] = v156 + 1;
          sub_1000126EC(v428, (uint64_t)v146 + v153 + v156 * v90, type metadata accessor for BeaconEstimatedLocation);
          v148 = v437;
        }
        else
        {
          sub_1000126B0((uint64_t)v154, type metadata accessor for BeaconEstimatedLocation);
        }
        ++v150;
        v149 = v436;
        if (v147 == v150)
        {
          v146 = (_QWORD *)v447;
          goto LABEL_43;
        }
      }
      __break(1u);
    }
    else
    {
      v152 = v411;
LABEL_43:
      swift_bridgeObjectRelease();
      v158 = v397;
      sub_100A79444((uint64_t)v146, (uint64_t)v397);
      swift_release();
      v159 = (*(uint64_t (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))(v429 + 48))(v158, 1, v152);
      v90 = v422;
      v151 = v418;
      if (v159 == 1)
      {
        sub_100004048((uint64_t)v158, (uint64_t *)&unk_1010F7810);
        v392 = sub_1007EE500(v410);
        v147 = 0;
LABEL_50:
        LODWORD(v428) = 8;
        goto LABEL_51;
      }
      v160 = (uint64_t)v398;
      v161 = sub_1000126EC((uint64_t)v158, (uint64_t)v398, type metadata accessor for BeaconEstimatedLocation);
      __chkstk_darwin(v161);
      v374[-2] = v160;
      v162 = v410;
      swift_bridgeObjectRetain(v410);
      v163 = v162;
      v147 = 0;
      v164 = sub_10008B9F0((uint64_t (*)(char *))sub_1004253F0, &v374[-4], v163);
      if (!*(_QWORD *)(v164 + 16))
      {
        swift_bridgeObjectRelease();
        v359 = v148;
        v360 = v401;
        v361 = v392;
        (*(void (**)(_QWORD *, char *, uint64_t))(v401 + 16))(v392, &v430[*((int *)v400 + 8)], v90);
        v362 = v391;
        v363 = (*((uint64_t (**)(os_log_t, uint64_t, uint64_t))v149 + 2))(v391, v423, v359);
        v364 = Logger.logObject.getter(v363);
        v365 = static os_log_type_t.default.getter(v364);
        if (os_log_type_enabled(v364, v365))
        {
          v366 = v362;
          v367 = swift_slowAlloc(22, -1);
          v368 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v447 = v368;
          *(_DWORD *)v367 = 141558275;
          v442 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v443, v367 + 4, v367 + 12);
          *(_WORD *)(v367 + 12) = 2081;
          v369 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v370 = dispatch thunk of CustomStringConvertible.description.getter(v359, v369);
          v442 = sub_100016940(v370, v371, (uint64_t *)&v447);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v443, v367 + 14, v367 + 22);
          swift_bridgeObjectRelease();
          (*((void (**)(os_log_t, uint64_t))v149 + 1))(v366, v359);
          _os_log_impl((void *)&_mh_execute_header, v364, v365, "No new location for beacon %{private,mask.hash}s.", (uint8_t *)v367, 0x16u);
          swift_arrayDestroy(v368, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v368, -1, -1);
          swift_slowDealloc(v367, -1, -1);

          (*(void (**)(_QWORD *, uint64_t))(v401 + 8))(v392, v422);
        }
        else
        {
          (*((void (**)(os_log_t, uint64_t))v149 + 1))(v362, v359);

          (*(void (**)(_QWORD *, uint64_t))(v360 + 8))(v361, v90);
        }
        v372 = v390;
        sub_100004048((uint64_t)v413, (uint64_t *)&unk_1010EA690);
        sub_1000126B0((uint64_t)v372, type metadata accessor for RawSearchResult);
        v352 = type metadata accessor for BeaconEstimatedLocation;
        v353 = (uint64_t)v398;
        goto LABEL_134;
      }
      v146 = sub_1007EE500(v164);
      swift_bridgeObjectRelease();
      v150 = v396;
      sub_10005972C(v160, v396, type metadata accessor for BeaconEstimatedLocation);
      if ((swift_isUniquelyReferenced_nonNull_native(v146) & 1) != 0)
      {
LABEL_47:
        v166 = v146[2];
        v165 = v146[3];
        if (v166 >= v165 >> 1)
          v392 = sub_1007C9A20((_QWORD *)(v165 > 1), v166 + 1, 1, v146);
        else
          v392 = v146;
        v448 = v152;
        v449 = &off_1010634C0;
        v167 = sub_100018F08(&v447);
        sub_10005972C(v150, (uint64_t)v167, type metadata accessor for BeaconEstimatedLocation);
        v168 = v392;
        v392[2] = v166 + 1;
        sub_10000F9FC(&v447, (uint64_t)&v168[5 * v166 + 4]);
        sub_1000126B0(v150, type metadata accessor for BeaconEstimatedLocation);
        sub_1000126B0((uint64_t)v398, type metadata accessor for BeaconEstimatedLocation);
        goto LABEL_50;
      }
    }
    v146 = sub_1007C9A20(0, v146[2] + 1, 1, v146);
    goto LABEL_47;
  }
  v392 = sub_1007EE500(v142);
  v147 = 0;
  if (v390[*(int *)(v100 + 36)] == 15)
    v157 = 15;
  else
    v157 = 7;
  LODWORD(v428) = v157;
  v90 = v422;
  v148 = v437;
  v149 = v436;
  v151 = v418;
LABEL_51:
  v169 = *(_QWORD *)v430;
  sub_10081BD08(&v450);
  v171 = v170;
  v172 = sub_10001A9A8(&qword_1011003C0);
  v173 = v149[80];
  v174 = (v173 + 32) & ~v173;
  v438 = (char *)*((_QWORD *)v149 + 9);
  v396 = v173;
  v175 = swift_allocObject(v172, &v438[v174], v173 | 7);
  *(_OWORD *)(v175 + 16) = xmmword_100E22B00;
  v176 = (void (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v149 + 2);
  v176(v175 + v174, v423, v148);
  v446 = v175;
  v432 = (char *)v176;
  if ((v379 & 1) != 0)
  {
    v177 = sub_1000AF25C(*v390 & 0xB);
    v178 = (v177 >> 8) & 1;
    v179 = HIWORD(v177) & 1;
    v180 = HIBYTE(v177) & 1;
    v181 = v451;
    v182 = v452;
    v183 = sub_10001AA44(&v450, v451);
    v184 = sub_10085C654((uint64_t)v183, v178, v179, v180, v169, v181, v182);
    v185 = v184[2];
    if (v185)
    {
      v442 = (uint64_t)_swiftEmptyArrayStorage;
      sub_10009A578(0, v185, 0);
      v186 = (uint64_t)(v184 + 4);
      v187 = (char *)v442;
      do
      {
        sub_100030784(v186, (uint64_t)&v447);
        v189 = v448;
        v188 = v449;
        sub_10001AA44(&v447, v448);
        (*(void (**)(uint64_t))(*((_QWORD *)v188[1] + 1) + 32))(v189);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v447);
        if ((swift_isUniquelyReferenced_nonNull_native(v187) & 1) == 0)
        {
          sub_10009A578(0, *((_QWORD *)v187 + 2) + 1, 1);
          v187 = (char *)v442;
        }
        v191 = *((_QWORD *)v187 + 2);
        v190 = *((_QWORD *)v187 + 3);
        v192 = v421;
        if (v191 >= v190 >> 1)
        {
          sub_10009A578(v190 > 1, v191 + 1, 1);
          v192 = v421;
          v187 = (char *)v442;
        }
        *((_QWORD *)v187 + 2) = v191 + 1;
        (*((void (**)(char *, NSObject *, uint64_t))v436 + 4))(&v187[v174 + v191 * (_QWORD)v438], v192, v148);
        v442 = (uint64_t)v187;
        v186 += 40;
        --v185;
      }
      while (v185);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v187 = (char *)_swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRetain(v187);
    sub_1003028FC(v194);
    v195 = *((_QWORD *)v187 + 2);
    v149 = v436;
    v176 = (void (*)(uint64_t, uint64_t, uint64_t))v432;
    if (v195)
    {
      v196 = &v187[v174];
      v197 = swift_bridgeObjectRetain(v187);
      while (1)
      {
        v198 = v420;
        ((void (*)(char *, char *, uint64_t, __n128))v176)(v420, v196, v148, v197);
        v199 = (void (*)(char *, _QWORD, uint64_t, uint64_t))*((_QWORD *)v149 + 7);
        v199(v198, 0, 1, v148);
        if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v149 + 6))(v198, 1, v148) == 1)
          break;
        v200 = v419;
        (*((void (**)(void))v149 + 4))();
        sub_1004104D8(v200, (uint64_t)v430, v423);
        if (v147)
        {
          (*((void (**)(char *, uint64_t))v149 + 1))(v200, v148);
          swift_bridgeObjectRelease();
          __break(1u);
          goto LABEL_141;
        }
        (*((void (**)(char *, uint64_t))v149 + 1))(v200, v148);
        v196 = &v438[(_QWORD)v196];
        if (!--v195)
          goto LABEL_69;
      }
    }
    else
    {
      v199 = (void (*)(char *, _QWORD, uint64_t, uint64_t))*((_QWORD *)v436 + 7);
      v197 = swift_bridgeObjectRetain(v187);
LABEL_69:
      ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v199)(v420, 1, 1, v148, v197);
    }
    v193 = v423;
    swift_bridgeObjectRelease_n(v187, 2);
    v90 = v422;
    v151 = v418;
  }
  else
  {
    v193 = v423;
  }
  v420 = (char *)v174;
  v201 = v401;
  v202 = *(void (**)(uint64_t, char *, uint64_t))(v401 + 16);
  v399 = &v430[*((int *)v400 + 8)];
  v400 = v202;
  ((void (*)(uint64_t (*)(uint64_t)))v202)(v151);
  v203 = v417;
  v176((uint64_t)v417, v193, v148);
  v204 = sub_100030784((uint64_t)&v450, (uint64_t)&v447);
  v205 = Logger.logObject.getter(v204);
  v206 = static os_log_type_t.default.getter(v205);
  v207 = v206;
  if (os_log_type_enabled(v205, v206))
  {
    v208 = swift_slowAlloc(42, -1);
    v421 = swift_slowAlloc(32, -1);
    v442 = (uint64_t)v421;
    *(_DWORD *)v208 = 141558787;
    *(_QWORD *)&v441 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v441, &v442, v208 + 4, v208 + 12);
    *(_WORD *)(v208 + 12) = 2081;
    v209 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    LODWORD(v419) = v207;
    v210 = dispatch thunk of CustomStringConvertible.description.getter(v148, v209);
    v441 = COERCE_DOUBLE(sub_100016940(v210, v211, &v442));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v441, &v442, v208 + 14, v208 + 22);
    swift_bridgeObjectRelease();
    v424 = (_BYTE *)*((_QWORD *)v149 + 1);
    ((void (*)(char *, uint64_t))v424)(v203, v148);
    *(_WORD *)(v208 + 22) = 2050;
    v212 = v448;
    v213 = (uint64_t)v449;
    sub_10001AA44(&v447, v448);
    v214 = sub_100C62334(v212, v213);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v447);
    v441 = *(double *)&v214;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v441, &v442, v208 + 24, v208 + 32);
    *(_WORD *)(v208 + 32) = 2050;
    v149 = v436;
    v441 = v171;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v441, &v442, v208 + 34, v208 + 42);
    _os_log_impl((void *)&_mh_execute_header, v205, (os_log_type_t)v419, "reductiveFiltering: applyFilterOnSingleTruthLocation, beacon: %{private,mask.hash}s, type: %{public}lu, transmitPower: %{public}f.", (uint8_t *)v208, 0x2Au);
    v215 = v421;
    swift_arrayDestroy(v421, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v215, -1, -1);
    v216 = v201;
    v217 = v422;
    swift_slowDealloc(v208, -1, -1);

    v397 = *(void (**)(_QWORD, _QWORD))(v216 + 8);
    v397(v418, v217);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v447);
    v424 = (_BYTE *)*((_QWORD *)v149 + 1);
    ((void (*)(char *, uint64_t))v424)(v203, v148);

    v397 = *(void (**)(_QWORD, _QWORD))(v201 + 8);
    v397(v151, v90);
    v217 = v90;
  }
  v218 = v451;
  v219 = v452;
  sub_10001AA44(&v450, v451);
  v220 = sub_100C62334(v218, v219);
  v221 = v392;
  v222 = (char *)sub_100C63E40((uint64_t)v392, v220, v171);
  v223 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))v432;
  v398 = v222;
  if (!v222)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v229 = v395;
    v400(v395, v399, v217);
    v230 = v393;
    v231 = v437;
    v232 = v223(v393, v423, v437);
    v233 = Logger.logObject.getter(v232);
    v234 = static os_log_type_t.default.getter(v233);
    if (os_log_type_enabled(v233, v234))
    {
      v235 = swift_slowAlloc(22, -1);
      v236 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v447 = v236;
      *(_DWORD *)v235 = 141558275;
      v442 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v443, v235 + 4, v235 + 12);
      *(_WORD *)(v235 + 12) = 2081;
      v237 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v238 = dispatch thunk of CustomStringConvertible.description.getter(v231, v237);
      v442 = sub_100016940(v238, v239, (uint64_t *)&v447);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v443, v235 + 14, v235 + 22);
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v424)(v230, v231);
      _os_log_impl((void *)&_mh_execute_header, v233, v234, "CLReductiveFilterSuite.triangulate returned no location for beacon %{private,mask.hash}s.", (uint8_t *)v235, 0x16u);
      swift_arrayDestroy(v236, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v236, -1, -1);
      swift_slowDealloc(v235, -1, -1);

      v240 = v395;
    }
    else
    {
      ((void (*)(uint64_t, uint64_t))v424)(v230, v231);

      v240 = v229;
    }
    v397(v240, v217);
    v351 = v390;
    sub_100004048((uint64_t)v413, (uint64_t *)&unk_1010EA690);
    v352 = type metadata accessor for RawSearchResult;
    v353 = (uint64_t)v351;
LABEL_134:
    sub_1000126B0(v353, v352);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v450);
    return (char *)_swiftEmptyArrayStorage;
  }
  *(_QWORD *)&v447 = v221;
  swift_bridgeObjectRetain(v221);
  sub_100417E8C(&v447);
  if (!v147)
  {
    swift_bridgeObjectRelease();
    v224 = v447;
    v225 = *(_QWORD *)(v447 + 16);
    if (v225)
    {
      v226 = v447 + 32;
      swift_retain();
      v227 = v423;
      v228 = v430;
      do
      {
        sub_100410838(v226, (uint64_t)v228, v227);
        v226 += 40;
        --v225;
      }
      while (v225);
      v374[0] = 0;
      swift_release_n(v224, 2);
      v223 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))v432;
    }
    else
    {
      v374[0] = 0;
      swift_release();
    }
    v421 = dispatch_group_create();
    v241 = *(char **)(v446 + 16);
    v242 = v412;
    v374[1] = v446;
    if (v241)
    {
      v395 = ~v396;
      v243 = &v420[v446];
      v387 = v443;
      v394 += v396;
      swift_bridgeObjectRetain(v446);
      v420 = (char *)_swiftEmptyArrayStorage;
      *((_QWORD *)&v244 + 1) = 0xC000000000000000;
      v393 = xmmword_100E22FC0;
      *(_QWORD *)&v244 = 141560323;
      v386 = v244;
      v385 = (char *)&type metadata for Any + 8;
      v245 = v424;
      while (1)
      {
        v246 = v437;
        v223(v242, (uint64_t)v243, v437);
        (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v149 + 7))(v242, 0, 1, v246);
        v247 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v149 + 6))(v242, 1, v246);
        v424 = v245;
        if (v247 == 1)
          break;
        v418 = (uint64_t (*)(uint64_t))v243;
        v419 = v241;
        v248 = v431;
        v249 = v437;
        v417 = (char *)*((_QWORD *)v149 + 4);
        v250 = ((uint64_t (*)(char *, char *, uint64_t))v417)(v431, v242, v437);
        v251 = (int *)v411;
        v252 = v435;
        UUID.init()(v250);
        v223((char *)v252 + v251[6], (uint64_t)v248, v249);
        v253 = v398;
        objc_msgSend(v398, "coordinate");
        v255 = v254;
        objc_msgSend(v253, "coordinate");
        v257 = v256;
        objc_msgSend(v253, "horizontalAccuracy");
        v259 = v258;
        v260 = objc_msgSend(v253, "timestamp");
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v260);

        sub_10000F9B8((uint64_t)v413, (uint64_t)v252 + v251[12], (uint64_t *)&unk_1010EA690);
        *v252 = v393;
        *(_QWORD *)((char *)v252 + v251[7]) = v255;
        *(_QWORD *)((char *)v252 + v251[8]) = v257;
        *(_QWORD *)((char *)v252 + v251[9]) = v259;
        *((_BYTE *)v252 + v251[11]) = v428;
        v261 = v410;
        *(_QWORD *)((char *)v252 + v251[13]) = v410;
        v400((uint64_t)v427, v399, v217);
        v262 = v402;
        sub_10005972C((uint64_t)v252, v402, type metadata accessor for BeaconEstimatedLocation);
        v263 = v416;
        ((void (*)(char *, char *, uint64_t))v432)(v416, v248, v249);
        v264 = v446;
        v265 = (uint64_t)v414;
        sub_10005972C((uint64_t)v252, v425, type metadata accessor for BeaconEstimatedLocation);
        sub_10005972C((uint64_t)v252, v426, type metadata accessor for BeaconEstimatedLocation);
        sub_10005972C((uint64_t)v252, v265, type metadata accessor for BeaconEstimatedLocation);
        v266 = (uint64_t)v252;
        v267 = v415;
        sub_10005972C(v266, v415, type metadata accessor for BeaconEstimatedLocation);
        swift_bridgeObjectRetain_n(v264, 2);
        swift_bridgeObjectRetain(v261);
        v269 = Logger.logObject.getter(v268);
        v270 = static os_log_type_t.default.getter(v269);
        v271 = v270;
        if (os_log_type_enabled(v269, v270))
        {
          v272 = swift_slowAlloc(102, -1);
          LODWORD(v397) = v271;
          v273 = v272;
          v392 = (_QWORD *)swift_slowAlloc(128, -1);
          *(_QWORD *)&v447 = v392;
          *(_DWORD *)v273 = v386;
          v442 = 1752392040;
          v274 = v387;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v387, v273 + 4, v273 + 12);
          *(_WORD *)(v273 + 12) = 2081;
          v391 = v269;
          v275 = v264;
          v276 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v277 = v437;
          v278 = dispatch thunk of CustomStringConvertible.description.getter(v437, v276);
          v442 = sub_100016940(v278, v279, (uint64_t *)&v447);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v274, v273 + 14, v273 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0(v262, type metadata accessor for BeaconEstimatedLocation);
          *(_WORD *)(v273 + 22) = 2160;
          v442 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v274, v273 + 24, v273 + 32);
          *(_WORD *)(v273 + 32) = 2081;
          v280 = v416;
          v281 = v276;
          v282 = (uint64_t)v414;
          v283 = dispatch thunk of CustomStringConvertible.description.getter(v277, v281);
          v442 = sub_100016940(v283, v284, (uint64_t *)&v447);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v274, v273 + 34, v273 + 42);
          swift_bridgeObjectRelease();
          ((void (*)(char *, uint64_t))v424)(v280, v277);
          *(_WORD *)(v273 + 42) = 2048;
          v285 = *(_QWORD *)(v275 + 16);
          swift_bridgeObjectRelease();
          v442 = v285 - 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v274, v273 + 44, v273 + 52);
          swift_bridgeObjectRelease();
          *(_WORD *)(v273 + 52) = 2049;
          v286 = v425;
          v442 = *(_QWORD *)(v425 + v251[7]);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v274, v273 + 54, v273 + 62);
          sub_1000126B0(v286, type metadata accessor for BeaconEstimatedLocation);
          *(_WORD *)(v273 + 62) = 2049;
          v287 = v426;
          v442 = *(_QWORD *)(v426 + v251[8]);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v274, v273 + 64, v273 + 72);
          sub_1000126B0(v287, type metadata accessor for BeaconEstimatedLocation);
          *(_WORD *)(v273 + 72) = 2048;
          v442 = *(_QWORD *)(v282 + v251[9]);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v274, v273 + 74, v273 + 82);
          sub_1000126B0(v282, type metadata accessor for BeaconEstimatedLocation);
          *(_WORD *)(v273 + 82) = 2082;
          v288 = v415;
          v289 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v290 = dispatch thunk of CustomStringConvertible.description.getter(v434, v289);
          v442 = sub_100016940(v290, v291, (uint64_t *)&v447);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v274, v273 + 84, v273 + 92);
          swift_bridgeObjectRelease();
          sub_1000126B0(v288, type metadata accessor for BeaconEstimatedLocation);
          *(_WORD *)(v273 + 92) = 2080;
          v292 = sub_1002E3DF8(v428);
          v442 = sub_100016940(v292, v293, (uint64_t *)&v447);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v274, v273 + 94, v273 + 102);
          swift_bridgeObjectRelease();
          v294 = v391;
          _os_log_impl((void *)&_mh_execute_header, v391, (os_log_type_t)v397, "△ Result LocationID: %{private,mask.hash}s, for Beacon: %{private,mask.hash}s, Peers: %ld, Location: lat: %{private}f, lon: %{private}f, accuracy: %f, timestamp: %{public}s, source: %s.", (uint8_t *)v273, 0x66u);
          v295 = v392;
          swift_arrayDestroy(v392, 4, v385);
          swift_slowDealloc(v295, -1, -1);
          swift_slowDealloc(v273, -1, -1);

          v397 = *(void (**)(_QWORD, _QWORD))(v401 + 8);
          v397(v427, v422);
        }
        else
        {
          swift_bridgeObjectRelease();
          sub_1000126B0(v262, type metadata accessor for BeaconEstimatedLocation);
          ((void (*)(char *, uint64_t))v424)(v263, v437);
          swift_bridgeObjectRelease();
          sub_1000126B0(v425, type metadata accessor for BeaconEstimatedLocation);
          sub_1000126B0(v426, type metadata accessor for BeaconEstimatedLocation);
          sub_1000126B0(v265, type metadata accessor for BeaconEstimatedLocation);
          sub_1000126B0(v267, type metadata accessor for BeaconEstimatedLocation);

          v397(v427, v217);
        }
        v296 = v430;
        v297 = v408;
        sub_10005972C((uint64_t)v435, v408, type metadata accessor for BeaconEstimatedLocation);
        v298 = (unint64_t)v420;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v420);
        v300 = (void (*)(char *, char *, uint64_t))v432;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v298 = sub_1007C95B8(0, *(_QWORD *)(v298 + 16) + 1, 1, v298);
        v302 = *(_QWORD *)(v298 + 16);
        v301 = *(_QWORD *)(v298 + 24);
        if (v302 >= v301 >> 1)
          v298 = sub_1007C95B8(v301 > 1, v302 + 1, 1, v298);
        *(_QWORD *)(v298 + 16) = v302 + 1;
        v303 = *(unsigned __int8 *)(v429 + 80);
        v420 = (char *)v298;
        sub_1000126EC(v297, v298 + ((v303 + 32) & ~v303) + *(_QWORD *)(v429 + 72) * v302, type metadata accessor for BeaconEstimatedLocation);
        dispatch_group_enter(v421);
        v424 = *(_BYTE **)v296;
        v304 = v405;
        sub_10005972C((uint64_t)v296, v405, type metadata accessor for LocationFetcher);
        v305 = v403;
        sub_10005972C((uint64_t)v435, v403, type metadata accessor for BeaconEstimatedLocation);
        v306 = v409;
        v307 = v437;
        v300(v409, v431, v437);
        v308 = *(unsigned __int8 *)(v407 + 80);
        v309 = (v308 + 24) & ~v308;
        v310 = (v406 + v303 + v309) & ~v303;
        v311 = (v394 + v310) & v395;
        v312 = v311 + v404;
        v313 = swift_allocObject(&unk_101075898, v311 + v404 + 1, v396 | v303 | v308 | 7);
        v314 = v421;
        *(_QWORD *)(v313 + 16) = v421;
        sub_1000126EC(v304, v313 + v309, type metadata accessor for LocationFetcher);
        sub_1000126EC(v305, v313 + v310, type metadata accessor for BeaconEstimatedLocation);
        v315 = v313 + v311;
        v223 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))v432;
        ((void (*)(uint64_t, char *, uint64_t))v417)(v315, v306, v307);
        *(_BYTE *)(v313 + v312) = v428;
        v316 = v314;
        v317 = (uint64_t)v435;
        sub_100801BA0((uint64_t)v435, (uint64_t)sub_10042534C, v313);
        swift_release();
        sub_1000126B0(v317, type metadata accessor for BeaconEstimatedLocation);
        v149 = v436;
        v245 = (_BYTE *)*((_QWORD *)v436 + 1);
        ((void (*)(char *, uint64_t))v245)(v431, v307);
        v243 = &v438[(_QWORD)v418];
        v241 = v419 - 1;
        v217 = v422;
        v242 = v412;
        if (v419 == (char *)1)
          goto LABEL_96;
      }
    }
    else
    {
      swift_bridgeObjectRetain(v446);
      v420 = (char *)_swiftEmptyArrayStorage;
      v245 = v424;
LABEL_96:
      v424 = v245;
      (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v149 + 7))(v242, 1, 1, v437);
    }
    swift_bridgeObjectRelease();
    OS_dispatch_group.wait()();
    v318 = v388;
    v319 = v410;
    v320 = v433;
    v321 = (uint64_t)v384;
    if ((v379 & 1) != 0)
    {
      v322 = v380;
      sub_10005972C(v382, v380, type metadata accessor for RawSearchResult);
      swift_bridgeObjectRetain(v319);
      v323 = v389 - 1;
      if (v389 != 1)
      {
        v354 = (uint64_t)&v439[v375 + v319];
        do
        {
          sub_10005972C(v354, v321, type metadata accessor for RawSearchResult);
          if ((static Date.< infix(_:_:)(v322 + *(int *)(v320 + 20), v321 + *(int *)(v320 + 20)) & 1) != 0)
          {
            sub_1000126B0(v322, type metadata accessor for RawSearchResult);
            sub_1000126EC(v321, v322, type metadata accessor for RawSearchResult);
          }
          else
          {
            sub_1000126B0(v321, type metadata accessor for RawSearchResult);
          }
          v354 += (uint64_t)v439;
          --v323;
        }
        while (v323);
      }
      swift_bridgeObjectRelease();
      v324 = v381;
      sub_1000126EC(v322, v381, type metadata accessor for RawSearchResult);
      v325 = v383;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v383 + 56))(v324, 0, 1, v320);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v325 + 48))(v324, 1, v320) == 1)
      {
        sub_100004048(v324, &qword_1010FB168);
      }
      else
      {
        v355 = v324;
        v356 = v378;
        sub_1000126EC(v355, v378, type metadata accessor for RawSearchResult);
        sub_100411CB4(v423, v356);
        sub_1000126B0(v356, type metadata accessor for RawSearchResult);
      }
      v357 = v390;
      v358 = v420;

      sub_100004048((uint64_t)v413, (uint64_t *)&unk_1010EA690);
      sub_1000126B0((uint64_t)v357, type metadata accessor for RawSearchResult);
    }
    else
    {
      swift_bridgeObjectRelease();
      v400((uint64_t)v318, v399, v217);
      sub_100030784((uint64_t)&v450, (uint64_t)&v447);
      v326 = sub_100030784((uint64_t)&v450, (uint64_t)&v442);
      v327 = Logger.logObject.getter(v326);
      v328 = static os_log_type_t.error.getter(v327);
      if (os_log_type_enabled(v327, v328))
      {
        v329 = swift_slowAlloc(45, -1);
        v330 = swift_slowAlloc(96, -1);
        v441 = *(double *)&v330;
        *(_DWORD *)v329 = 16778499;
        LOBYTE(v440) = v376;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, (char *)&v440 + 1, v329 + 4, v329 + 5);
        *(_WORD *)(v329 + 5) = 2082;
        v331 = 0xE500000000000000;
        v332 = 1701602664;
        v333 = 0x6579656B776168;
        v334 = 0x6E6169727564;
        if (v377 == 1)
          v331 = 0xE600000000000000;
        else
          v334 = 0x656C707061;
        if (v377 == 2)
          v331 = 0xE700000000000000;
        else
          v333 = v334;
        if (v377 == 3)
          v331 = 0xE400000000000000;
        else
          v332 = v333;
        if (v377)
          v335 = v332;
        else
          v335 = 0x656C707061;
        if (v377)
          v336 = v331;
        else
          v336 = 0xE500000000000000;
        v440 = sub_100016940(v335, v336, (uint64_t *)&v441);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, &v441, v329 + 7, v329 + 15);
        swift_bridgeObjectRelease();
        *(_WORD *)(v329 + 15) = 2082;
        v337 = v448;
        v338 = v449;
        sub_10001AA44(&v447, v448);
        v339 = (void *)((uint64_t (*)(uint64_t, _UNKNOWN **))v338[22])(v337, v338);
        v340 = SPBeaconType.description.getter((uint64_t)v339);
        v342 = v341;

        v440 = sub_100016940(v340, v342, (uint64_t *)&v441);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, &v441, v329 + 17, v329 + 25);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v447);
        *(_WORD *)(v329 + 25) = 2160;
        v440 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, &v441, v329 + 27, v329 + 35);
        *(_WORD *)(v329 + 35) = 2081;
        v344 = v444;
        v343 = v445;
        sub_10001AA44(&v442, v444);
        v345 = v409;
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v343 + 8) + 8) + 32))(v344);
        v346 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v347 = v437;
        v348 = dispatch thunk of CustomStringConvertible.description.getter(v437, v346);
        v350 = v349;
        ((void (*)(char *, uint64_t))v424)(v345, v347);
        v440 = sub_100016940(v348, v350, (uint64_t *)&v441);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, &v441, v329 + 37, v329 + 45);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v442);
        _os_log_impl((void *)&_mh_execute_header, v327, v328, "Status byte was %hhu, type: %{public}s, but beacon is %{public}s %{private,mask.hash}s.", (uint8_t *)v329, 0x2Du);
        swift_arrayDestroy(v330, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v330, -1, -1);
        swift_slowDealloc(v329, -1, -1);

        (*(void (**)(char *, uint64_t))(v401 + 8))(v388, v422);
      }
      else
      {

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v442);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v447);
        v397(v318, v217);
      }
      sub_100004048((uint64_t)v413, (uint64_t *)&unk_1010EA690);
      sub_1000126B0((uint64_t)v390, type metadata accessor for RawSearchResult);
      v358 = v420;
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v450);
    return v358;
  }
LABEL_141:
  result = (char *)swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10040F81C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  void (*v19)(unint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t result;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(char *, uint64_t);
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(unint64_t, uint64_t, uint64_t);
  _QWORD *v84;
  void (*v85)(uint64_t, char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;

  v91 = a1;
  v87 = sub_10001A9A8(&qword_1010FB1C0);
  v76 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v86 = (uint64_t)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RawSearchResult(0);
  v88 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  *(_QWORD *)&v79 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v75 - v7;
  v9 = sub_10001A9A8(&qword_1010FB1A0);
  __chkstk_darwin(v9);
  v11 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD **)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(int *)(v9 + 48);
  v17 = (void (*)(char *, uint64_t, uint64_t))v13[2];
  v17(v11, a2, v12);
  v18 = *(_QWORD *)(a2 + v16);
  v19 = (void (*)(unint64_t, uint64_t, uint64_t))v13[4];
  v89 = v15;
  v83 = v19;
  v19((unint64_t)v15, (uint64_t)v11, v12);
  v20 = *(int *)(v9 + 48);
  v85 = (void (*)(uint64_t, char *, uint64_t))v17;
  v17(v11, a2, v12);
  *(_QWORD *)&v11[v20] = v18;
  swift_bridgeObjectRetain(v18);
  v21 = v90;
  v23 = sub_10041B3E8(v22);
  v84 = v13;
  v24 = (void (*)(char *, uint64_t))v13[1];
  v90 = v12;
  v24(v11, v12);
  swift_bridgeObjectRetain(v23);
  v26 = sub_1005090F0(v25);
  swift_release();
  v92 = v26;
  sub_1002D6E8C((uint64_t *)&v92, type metadata accessor for RawSearchResult, (uint64_t (*)(uint64_t))sub_10088F240, sub_100419544);
  if (!v21)
  {
    v77 = 0;
    v78 = (uint64_t (*)(char *, uint64_t))v24;
    swift_release();
    v27 = (uint64_t)v92;
    v28 = v92[2];
    v29 = "Code";
    if (v28)
    {
      v30 = v88;
      v31 = *(unsigned __int8 *)(v88 + 80);
      v32 = (v31 + 32) & ~v31;
      v33 = (uint64_t)v92 + v32;
      v34 = sub_1000AF25C(*((_BYTE *)v92 + v32) & 0xB);
      v35 = *(_QWORD *)(v30 + 72);
      v88 = v32;
      v36 = v35;
      v82 = v35 + v32;
      v81 = v31 | 7;
      v75 = v27;
      swift_retain();
      v37 = _swiftEmptyArrayStorage;
      v80 = xmmword_100E22B00;
      do
      {
        sub_10005972C(v33, (uint64_t)v8, type metadata accessor for RawSearchResult);
        v38 = *v8 & 0xB;
        if (v34 == sub_1000AF25C(v38) && (v39 = v37[2]) != 0)
        {
          v40 = v37[v39 + 3];
          sub_10005972C((uint64_t)v8, v79, type metadata accessor for RawSearchResult);
          swift_bridgeObjectRetain(v40);
          if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
            v40 = sub_1007C98E8(0, *(_QWORD *)(v40 + 16) + 1, 1, v40);
          v43 = *(_QWORD *)(v40 + 16);
          v42 = *(_QWORD *)(v40 + 24);
          if (v43 >= v42 >> 1)
            v40 = sub_1007C98E8(v42 > 1, v43 + 1, 1, v40);
          *(_QWORD *)(v40 + 16) = v43 + 1;
          sub_1000126EC(v79, v40 + v88 + v43 * v36, type metadata accessor for RawSearchResult);
          if (!v37[2])
            goto LABEL_38;
          if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) != 0)
          {
            v44 = v37[2];
            if (!v44)
              goto LABEL_39;
          }
          else
          {
            v37 = sub_1008C5E38(v37);
            v44 = v37[2];
            if (!v44)
              goto LABEL_39;
          }
          v37[2] = v44 - 1;
          swift_bridgeObjectRelease();
          v46 = v37[2];
          v45 = v37[3];
          if (v46 >= v45 >> 1)
            v37 = sub_1007C9A48((_QWORD *)(v45 > 1), v46 + 1, 1, v37);
          v37[2] = v46 + 1;
          v37[v46 + 4] = v40;
        }
        else
        {
          v47 = sub_10001A9A8(&qword_1010ED220);
          v48 = swift_allocObject(v47, v82, v81);
          *(_OWORD *)(v48 + 16) = v80;
          sub_10005972C((uint64_t)v8, v48 + v88, type metadata accessor for RawSearchResult);
          if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
            v37 = sub_1007C9A48(0, v37[2] + 1, 1, v37);
          v50 = v37[2];
          v49 = v37[3];
          if (v50 >= v49 >> 1)
            v37 = sub_1007C9A48((_QWORD *)(v49 > 1), v50 + 1, 1, v37);
          v37[2] = v50 + 1;
          v37[v50 + 4] = v48;
          v34 = sub_1000AF25C(v38);
        }
        sub_1000126B0((uint64_t)v8, type metadata accessor for RawSearchResult);
        v33 += v36;
        --v28;
      }
      while (v28);
      swift_release_n(v75, 2);
      v29 = "Code";
      v51 = v37[2];
      if (!v51)
        goto LABEL_35;
    }
    else
    {
      sub_1000AF25C(0);
      swift_release();
      v37 = _swiftEmptyArrayStorage;
      v51 = _swiftEmptyArrayStorage[2];
      if (!v51)
      {
LABEL_35:
        swift_bridgeObjectRelease();
        return v78(v89, v90);
      }
    }
    v52 = v37 + 4;
    v88 = sub_10001A9A8(&qword_1010FB1C8);
    v53 = *(unsigned __int8 *)(v76 + 80);
    v81 = ((v53 + 32) & ~v53) + *(_QWORD *)(v76 + 72);
    v82 = (v53 + 32) & ~v53;
    *(_QWORD *)&v80 = v53 | 7;
    v79 = *((_OWORD *)v29 + 176);
    v54 = v90;
    while (1)
    {
      v55 = *v52;
      v56 = sub_10001A9A8(&qword_1010FB1D0);
      v57 = swift_allocObject(v56, v81, v80);
      *(_OWORD *)(v57 + 16) = v79;
      v58 = v57 + v82;
      v59 = v87;
      v60 = *(int *)(v87 + 48);
      v85(v57 + v82, v89, v54);
      *(_QWORD *)(v58 + v60) = v55;
      v61 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(1);
      v62 = *(int *)(v59 + 48);
      v63 = v58;
      v64 = v86;
      sub_10000F9B8(v63, v86, &qword_1010FB1C0);
      swift_bridgeObjectRetain(v55);
      swift_retain();
      v65 = sub_100003FB0(v64);
      if ((v66 & 1) != 0)
        break;
      v67 = v65;
      v61[(v65 >> 6) + 8] |= 1 << v65;
      v83(v61[6] + v84[9] * v65, v64, v54);
      *(_QWORD *)(v61[7] + 8 * v67) = *(_QWORD *)(v64 + v62);
      v68 = v61[2];
      v69 = __OFADD__(v68, 1);
      v70 = v68 + 1;
      if (v69)
        goto LABEL_37;
      v61[2] = v70;
      swift_release();
      swift_bridgeObjectRelease();
      v71 = (_QWORD *)*v91;
      if ((swift_isUniquelyReferenced_nonNull_native(*v91) & 1) == 0)
        v71 = sub_1007C9A34(0, v71[2] + 1, 1, v71);
      v73 = v71[2];
      v72 = v71[3];
      if (v73 >= v72 >> 1)
        v71 = sub_1007C9A34((_QWORD *)(v72 > 1), v73 + 1, 1, v71);
      v71[2] = v73 + 1;
      v71[v73 + 4] = v61;
      *v91 = v71;
      ++v52;
      if (!--v51)
        goto LABEL_35;
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_10040FF24(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t result;
  _QWORD v45[2];
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;

  v53 = type metadata accessor for UUID(0);
  v55 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v56 = (uint64_t)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for BeaconEstimatedLocation(0);
  v8 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v52 = (uint64_t)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a3);
  v10 = sub_10040C928(a2, a3);
  swift_bridgeObjectRelease();
  v11 = *((_QWORD *)v10 + 2);
  if (!v11)
    return swift_bridgeObjectRelease();
  v45[1] = v10;
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = (uint64_t)&v10[v13];
  v15 = *(_QWORD *)(v8 + 72);
  v50 = v13;
  v46 = v15;
  v48 = v12 | 7;
  v49 = v15 + v13;
  v47 = xmmword_100E22B00;
  v17 = v52;
  v16 = v53;
  v54 = a4;
  while (1)
  {
    sub_10005972C(v14, v17, type metadata accessor for BeaconEstimatedLocation);
    v19 = v17 + *(int *)(v51 + 24);
    v20 = *a4;
    if (*(_QWORD *)(*a4 + 16))
    {
      v21 = sub_100003FB0(v17 + *(int *)(v51 + 24));
      v22 = _swiftEmptyArrayStorage;
      if ((v23 & 1) != 0)
      {
        v22 = *(_QWORD **)(*(_QWORD *)(v20 + 56) + 8 * v21);
        swift_bridgeObjectRetain(v22);
      }
    }
    else
    {
      v22 = _swiftEmptyArrayStorage;
    }
    v24 = v56;
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16);
    v25(v56, v19, v16);
    v26 = sub_10001A9A8(&qword_101108E70);
    v27 = swift_allocObject(v26, v49, v48);
    *(_OWORD *)(v27 + 16) = v47;
    sub_10005972C(v17, v27 + v50, type metadata accessor for BeaconEstimatedLocation);
    v57 = v22;
    sub_100304004(v27);
    v28 = v57;
    v29 = v54;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v54);
    v57 = (_QWORD *)*v29;
    v31 = v57;
    *v29 = 0x8000000000000000;
    v33 = sub_100003FB0(v24);
    v34 = v31[2];
    v35 = (v32 & 1) == 0;
    v36 = v34 + v35;
    if (__OFADD__(v34, v35))
    {
      __break(1u);
LABEL_20:
      __break(1u);
    }
    v37 = v32;
    if (v31[3] < v36)
      break;
    a4 = v54;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_100A9C2C4();
LABEL_15:
    v16 = v53;
    v40 = v57;
    if ((v37 & 1) != 0)
    {
      v18 = v57[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v18 + 8 * v33) = v28;
    }
    else
    {
      v57[(v33 >> 6) + 8] |= 1 << v33;
      v25(v40[6] + *(_QWORD *)(v55 + 72) * v33, v56, v16);
      *(_QWORD *)(v40[7] + 8 * v33) = v28;
      v41 = v40[2];
      v42 = __OFADD__(v41, 1);
      v43 = v41 + 1;
      if (v42)
        goto LABEL_20;
      v40[2] = v43;
    }
    *a4 = v40;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v56, v16);
    v17 = v52;
    sub_1000126B0(v52, type metadata accessor for BeaconEstimatedLocation);
    v14 += v46;
    if (!--v11)
      return swift_bridgeObjectRelease();
  }
  sub_100A89E44(v36, isUniquelyReferenced_nonNull_native);
  v38 = sub_100003FB0(v56);
  a4 = v54;
  if ((v37 & 1) == (v39 & 1))
  {
    v33 = v38;
    goto LABEL_15;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v53);
  __break(1u);
  return result;
}

uint64_t sub_1004102E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v25 - v8;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD **)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v25 - v15;
  v17 = type metadata accessor for BeaconEstimatedLocation(0);
  sub_10000F9B8(a2 + *(int *)(v17 + 48), (uint64_t)v9, (uint64_t *)&unk_1010EA690);
  v18 = (unsigned int (*)(char *, uint64_t, uint64_t))v11[6];
  if (v18(v9, 1, v10) == 1)
  {
    v19 = (uint64_t)v9;
  }
  else
  {
    v20 = (void (*)(char *, char *, uint64_t))v11[4];
    v20(v16, v9, v10);
    v21 = type metadata accessor for RawSearchResult(0);
    sub_10000F9B8(a1 + *(int *)(v21 + 40), (uint64_t)v7, (uint64_t *)&unk_1010EA690);
    if (v18(v7, 1, v10) != 1)
    {
      v20(v14, v7, v10);
      v22 = static Date.> infix(_:_:)(v14, v16);
      v23 = (void (*)(char *, uint64_t))v11[1];
      v23(v14, v10);
      v23(v16, v10);
      return v22 & 1;
    }
    ((void (*)(char *, uint64_t))v11[1])(v16, v10);
    v19 = (uint64_t)v7;
  }
  sub_100004048(v19, (uint64_t *)&unk_1010EA690);
  v22 = 1;
  return v22 & 1;
}

uint64_t sub_1004104D8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  unint64_t v30;
  os_log_t v31;
  uint64_t v32;
  void (*v34)(char *, uint64_t);
  os_log_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v40 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v35 - v10;
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a2 + *(int *)(type metadata accessor for LocationFetcher(0) + 32);
  v42 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v16, v12);
  v39 = v6;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v17(v11, a3, v5);
  v41 = v9;
  v18 = ((uint64_t (*)(char *, char *, uint64_t))v17)(v9, v40, v5);
  v40 = v15;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  v21 = v20;
  if (os_log_type_enabled(v19, v20))
  {
    v22 = swift_slowAlloc(42, -1);
    v38 = v12;
    v23 = v22;
    v37 = swift_slowAlloc(64, -1);
    v45 = v37;
    *(_DWORD *)v23 = 141558787;
    v43 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v23 + 4, v23 + 12);
    *(_WORD *)(v23 + 12) = 2081;
    v36 = v21;
    v24 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v35 = v19;
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v5, v24);
    v43 = sub_100016940(v25, v26, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease();
    v27 = *(void (**)(char *, uint64_t))(v39 + 8);
    v27(v11, v5);
    *(_WORD *)(v23 + 22) = 2160;
    v43 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v23 + 24, v23 + 32);
    *(_WORD *)(v23 + 32) = 2081;
    v28 = v41;
    v29 = dispatch thunk of CustomStringConvertible.description.getter(v5, v24);
    v43 = sub_100016940(v29, v30, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v23 + 34, v23 + 42);
    swift_bridgeObjectRelease();
    v27(v28, v5);
    v31 = v35;
    _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v36, "Beacon %{private,mask.hash}s reported connected to multipart peer: %{private,mask.hash}s.", (uint8_t *)v23, 0x2Au);
    v32 = v37;
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v40, v38);
  }
  else
  {
    v34 = *(void (**)(char *, uint64_t))(v39 + 8);
    v34(v11, v5);
    v34(v41, v5);

    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v40, v12);
  }
}

uint64_t sub_100410838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  os_log_t v39;
  uint64_t v40;
  _BYTE v42[12];
  int v43;
  os_log_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[3];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v49 = type metadata accessor for Date(0);
  v48 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v47 = &v42[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v42[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = &v42[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = a2 + *(int *)(type metadata accessor for LocationFetcher(0) + 32);
  v50 = v12;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, a3, v7);
  sub_100030784(a1, (uint64_t)v61);
  sub_100030784(a1, (uint64_t)v58);
  sub_100030784(a1, (uint64_t)v55);
  v16 = sub_100030784(a1, (uint64_t)v52);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter(v17);
  v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    v20 = swift_slowAlloc(62, -1);
    v46 = v11;
    v21 = v20;
    v45 = swift_slowAlloc(64, -1);
    v64 = v45;
    *(_DWORD *)v21 = 141559299;
    v51 = 1752392040;
    v44 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v21 + 4, v21 + 12);
    *(_WORD *)(v21 + 12) = 2081;
    v22 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v43 = v19;
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v7, v22);
    v51 = sub_100016940(v23, v24, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
    *(_WORD *)(v21 + 22) = 2049;
    v25 = v62;
    v26 = v63;
    sub_10001AA44(v61, v62);
    v51 = (*(double (**)(uint64_t, uint64_t))(v26 + 16))(v25, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v21 + 24, v21 + 32);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v61);
    *(_WORD *)(v21 + 32) = 2049;
    v27 = v59;
    v28 = v60;
    sub_10001AA44(v58, v59);
    v51 = (*(double (**)(uint64_t, uint64_t))(v28 + 24))(v27, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v21 + 34, v21 + 42);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v58);
    *(_WORD *)(v21 + 42) = 2048;
    v29 = v56;
    v30 = v57;
    sub_10001AA44(v55, v56);
    v51 = (*(double (**)(uint64_t, uint64_t))(v30 + 32))(v29, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v21 + 44, v21 + 52);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
    *(_WORD *)(v21 + 52) = 2082;
    v31 = v53;
    v32 = v54;
    sub_10001AA44(v52, v53);
    v33 = v47;
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v32);
    v34 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v35 = v49;
    v36 = dispatch thunk of CustomStringConvertible.description.getter(v49, v34);
    v38 = v37;
    (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v33, v35);
    v51 = sub_100016940(v36, v38, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v21 + 54, v21 + 62);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v52);
    v39 = v44;
    _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v43, "△ Source Beacon: %{private,mask.hash}s, Location: lat: %{private}f, lon: %{private}f, accuracy: %f, timestamp: %{public}s.", (uint8_t *)v21, 0x3Eu);
    v40 = v45;
    swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v50 + 8))(v14, v46);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v61);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v58);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v52);

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v50 + 8))(v14, v11);
  }
}

void sub_100410D58(uint64_t a1, NSObject *a2, uint64_t a3, NSObject *a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  int v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  os_log_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  os_log_t v111;
  uint64_t v112;
  NSObject *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  os_log_t v135;
  uint64_t v136;
  void (*v137)(char *, uint64_t);
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  int v143;
  uint64_t *v144;
  os_log_t v145;
  NSObject *v146;
  os_log_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156[2];

  v143 = a6;
  v147 = a4;
  v148 = a5;
  v152 = a3;
  v153 = a1;
  v146 = a2;
  v149 = type metadata accessor for UUID(0);
  v154 = *(_QWORD *)(v149 - 8);
  v6 = __chkstk_darwin(v149);
  v140 = (char *)&v138 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v141 = (char *)&v138 - v9;
  v10 = __chkstk_darwin(v8);
  v144 = (uint64_t *)((char *)&v138 - v11);
  __chkstk_darwin(v10);
  v151 = (char *)&v138 - v12;
  v142 = type metadata accessor for BeaconEstimatedLocation(0);
  v13 = __chkstk_darwin(v142);
  v139 = (uint64_t)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v138 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v138 - v19;
  __chkstk_darwin(v18);
  v150 = (char *)&v138 - v21;
  v22 = type metadata accessor for Logger(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v138 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v138 - v28;
  v30 = __chkstk_darwin(v27);
  v32 = (char *)&v138 - v31;
  __chkstk_darwin(v30);
  v145 = (os_log_t)((char *)&v138 - v33);
  v34 = sub_10001A9A8(&qword_1010F4A20);
  __chkstk_darwin(v34);
  v36 = (uint64_t *)((char *)&v138 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(v153, (uint64_t)v36, &qword_1010F4A20);
  if (swift_getEnumCaseMultiPayload(v36, v34) == 1)
  {
    v37 = v152;
    v38 = (uint64_t)v20;
    v151 = v17;
    v39 = (uint64_t)v144;
    v138 = v29;
    v156[0] = *v36;
    v40 = v156[0];
    swift_errorRetain(v156[0]);
    v41 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    if ((swift_dynamicCast(&v155, v156, v41, &type metadata for BeaconStore.BeaconStoreError, 6) & 1) != 0)
    {
      v42 = v155;
      v43 = v37 + *(int *)(type metadata accessor for LocationFetcher(0) + 32);
      v44 = v23;
      v45 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
      if (v42 == 8)
      {
        v46 = v138;
        v45(v138, v43, v22);
        v47 = (uint64_t)v151;
        sub_10005972C((uint64_t)v147, (uint64_t)v151, type metadata accessor for BeaconEstimatedLocation);
        v48 = v154;
        v49 = v141;
        v50 = v149;
        v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v154 + 16))(v141, v148, v149);
        v52 = Logger.logObject.getter(v51);
        v53 = static os_log_type_t.default.getter(v52);
        v54 = v53;
        if (os_log_type_enabled(v52, v53))
        {
          v55 = swift_slowAlloc(52, -1);
          v147 = v40;
          v56 = v49;
          v57 = v55;
          v58 = swift_slowAlloc(96, -1);
          v150 = (char *)v58;
          *(_DWORD *)v57 = 141559043;
          v155 = 1752392040;
          v156[0] = v58;
          v152 = v22;
          LODWORD(v148) = v54;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v57 + 4, v57 + 12);
          *(_WORD *)(v57 + 12) = 2081;
          v153 = v44;
          v59 = v47;
          v60 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v61 = dispatch thunk of CustomStringConvertible.description.getter(v50, v60);
          v155 = sub_100016940(v61, v62, v156);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v57 + 14, v57 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0(v59, type metadata accessor for BeaconEstimatedLocation);
          *(_WORD *)(v57 + 22) = 2160;
          v155 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v57 + 24, v57 + 32);
          *(_WORD *)(v57 + 32) = 2081;
          v63 = dispatch thunk of CustomStringConvertible.description.getter(v50, v60);
          v155 = sub_100016940(v63, v64, v156);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v57 + 34, v57 + 42);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v56, v50);
          *(_WORD *)(v57 + 42) = 2080;
          v65 = sub_1002E3DF8(v143);
          v155 = sub_100016940(v65, v66, v156);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v57 + 44, v57 + 52);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v148, "Skipped saving outdated LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s with source: %s.", (uint8_t *)v57, 0x34u);
          v67 = (uint64_t)v150;
          swift_arrayDestroy(v150, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v67, -1, -1);
          swift_slowDealloc(v57, -1, -1);

          swift_errorRelease(v147);
          (*(void (**)(char *, uint64_t))(v153 + 8))(v138, v152);
        }
        else
        {
          swift_errorRelease(v40);
          sub_1000126B0(v47, type metadata accessor for BeaconEstimatedLocation);
          (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);

          (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v22);
        }
        goto LABEL_19;
      }
      v153 = v23;
      v91 = v22;
      v45(v26, v43, v22);
      v114 = v139;
      sub_10005972C((uint64_t)v147, v139, type metadata accessor for BeaconEstimatedLocation);
      v115 = v154;
      v116 = v140;
      v117 = v149;
      (*(void (**)(char *, uint64_t, uint64_t))(v154 + 16))(v140, v148, v149);
      swift_errorRetain(v40);
      v118 = swift_errorRetain(v40);
      v119 = Logger.logObject.getter(v118);
      v120 = static os_log_type_t.error.getter(v119);
      v121 = v120;
      if (os_log_type_enabled(v119, v120))
      {
        v122 = swift_slowAlloc(62, -1);
        v150 = v26;
        v147 = v119;
        v123 = v122;
        v124 = swift_slowAlloc(128, -1);
        v148 = v124;
        *(_DWORD *)v123 = 141559299;
        v155 = 1752392040;
        v156[0] = v124;
        v151 = (char *)v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v123 + 4, v123 + 12);
        *(_WORD *)(v123 + 12) = 2081;
        v152 = v91;
        LODWORD(v145) = v121;
        v125 = v114;
        v126 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v127 = dispatch thunk of CustomStringConvertible.description.getter(v117, v126);
        v155 = sub_100016940(v127, v128, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v123 + 14, v123 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v125, type metadata accessor for BeaconEstimatedLocation);
        *(_WORD *)(v123 + 22) = 2160;
        v155 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v123 + 24, v123 + 32);
        *(_WORD *)(v123 + 32) = 2081;
        v129 = dispatch thunk of CustomStringConvertible.description.getter(v117, v126);
        v155 = sub_100016940(v129, v130, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v123 + 34, v123 + 42);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v115 + 8))(v116, v117);
        *(_WORD *)(v123 + 42) = 2082;
        v155 = (uint64_t)v40;
        swift_errorRetain(v40);
        v131 = String.init<A>(describing:)(&v155, v151);
        v155 = sub_100016940(v131, v132, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v123 + 44, v123 + 52);
        swift_bridgeObjectRelease();
        swift_errorRelease(v40);
        swift_errorRelease(v40);
        *(_WORD *)(v123 + 52) = 2080;
        v133 = sub_1002E3DF8(v143);
        v155 = sub_100016940(v133, v134, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v123 + 54, v123 + 62);
        swift_bridgeObjectRelease();
        v135 = v147;
        _os_log_impl((void *)&_mh_execute_header, v147, (os_log_type_t)v145, "Failed to save LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s: %{public}s with source: %s.", (uint8_t *)v123, 0x3Eu);
        v136 = v148;
        swift_arrayDestroy(v148, 4, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v136, -1, -1);
        swift_slowDealloc(v123, -1, -1);

        goto LABEL_14;
      }
      swift_errorRelease(v40);
      sub_1000126B0(v114, type metadata accessor for BeaconEstimatedLocation);
      (*(void (**)(char *, uint64_t))(v115 + 8))(v116, v117);
      swift_errorRelease(v40);
      swift_errorRelease(v40);

      v137 = *(void (**)(char *, uint64_t))(v153 + 8);
    }
    else
    {
      v151 = (char *)v41;
      v89 = v37 + *(int *)(type metadata accessor for LocationFetcher(0) + 32);
      v26 = v32;
      v90 = v32;
      v91 = v22;
      (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v90, v89, v22);
      sub_10005972C((uint64_t)v147, v38, type metadata accessor for BeaconEstimatedLocation);
      v92 = v154;
      v93 = v39;
      v94 = v149;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v154 + 16))(v39, v148, v149);
      swift_errorRetain(v40);
      v95 = swift_errorRetain(v40);
      v96 = Logger.logObject.getter(v95);
      v97 = static os_log_type_t.error.getter(v96);
      v98 = v97;
      if (os_log_type_enabled(v96, v97))
      {
        v99 = swift_slowAlloc(62, -1);
        LODWORD(v147) = v98;
        v100 = v99;
        v101 = swift_slowAlloc(128, -1);
        v148 = v101;
        *(_DWORD *)v100 = 141559299;
        v155 = 1752392040;
        v156[0] = v101;
        v153 = v23;
        v150 = v26;
        v145 = v96;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v100 + 4, v100 + 12);
        v152 = v91;
        *(_WORD *)(v100 + 12) = 2081;
        v102 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v103 = dispatch thunk of CustomStringConvertible.description.getter(v94, v102);
        v155 = sub_100016940(v103, v104, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v100 + 14, v100 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v38, type metadata accessor for BeaconEstimatedLocation);
        *(_WORD *)(v100 + 22) = 2160;
        v155 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v100 + 24, v100 + 32);
        *(_WORD *)(v100 + 32) = 2081;
        v105 = dispatch thunk of CustomStringConvertible.description.getter(v94, v102);
        v155 = sub_100016940(v105, v106, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v100 + 34, v100 + 42);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v93, v94);
        *(_WORD *)(v100 + 42) = 2082;
        v155 = (uint64_t)v40;
        swift_errorRetain(v40);
        v107 = String.init<A>(describing:)(&v155, v151);
        v155 = sub_100016940(v107, v108, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v100 + 44, v100 + 52);
        swift_bridgeObjectRelease();
        swift_errorRelease(v40);
        swift_errorRelease(v40);
        *(_WORD *)(v100 + 52) = 2080;
        v109 = sub_1002E3DF8(v143);
        v155 = sub_100016940(v109, v110, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v100 + 54, v100 + 62);
        swift_bridgeObjectRelease();
        v111 = v145;
        _os_log_impl((void *)&_mh_execute_header, v145, (os_log_type_t)v147, "Failed to save LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s: %{public}s with source: %s.", (uint8_t *)v100, 0x3Eu);
        v112 = v148;
        swift_arrayDestroy(v148, 4, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v112, -1, -1);
        swift_slowDealloc(v100, -1, -1);

LABEL_14:
        swift_errorRelease(v40);
        (*(void (**)(char *, uint64_t))(v153 + 8))(v150, v152);
LABEL_19:
        v113 = v146;
        goto LABEL_20;
      }
      swift_errorRelease(v40);
      sub_1000126B0(v38, type metadata accessor for BeaconEstimatedLocation);
      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v93, v94);
      swift_errorRelease(v40);
      swift_errorRelease(v40);

      v137 = *(void (**)(char *, uint64_t))(v23 + 8);
    }
    v137(v26, v91);
    goto LABEL_19;
  }
  v144 = v36;
  v68 = type metadata accessor for LocationFetcher(0);
  v69 = v145;
  (*(void (**)(os_log_t, uint64_t, uint64_t))(v23 + 16))(v145, v152 + *(int *)(v68 + 32), v22);
  sub_10005972C((uint64_t)v147, (uint64_t)v150, type metadata accessor for BeaconEstimatedLocation);
  v70 = v154;
  v71 = v149;
  v72 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v154 + 16))(v151, v148, v149);
  v73 = Logger.logObject.getter(v72);
  v74 = static os_log_type_t.default.getter(v73);
  v75 = v74;
  if (os_log_type_enabled(v73, v74))
  {
    v76 = swift_slowAlloc(52, -1);
    v77 = swift_slowAlloc(96, -1);
    v148 = v77;
    *(_DWORD *)v76 = 141559043;
    v155 = 1752392040;
    v156[0] = v77;
    v153 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v76 + 4, v76 + 12);
    *(_WORD *)(v76 + 12) = 2081;
    v152 = v22;
    v78 = v71;
    v79 = (uint64_t)v150;
    LODWORD(v147) = v75;
    v80 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v81 = dispatch thunk of CustomStringConvertible.description.getter(v78, v80);
    v155 = sub_100016940(v81, v82, v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v76 + 14, v76 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v79, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v76 + 22) = 2160;
    v155 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v76 + 24, v76 + 32);
    *(_WORD *)(v76 + 32) = 2081;
    v83 = (uint64_t)v151;
    v84 = dispatch thunk of CustomStringConvertible.description.getter(v78, v80);
    v155 = sub_100016940(v84, v85, v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v76 + 34, v76 + 42);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v83, v78);
    *(_WORD *)(v76 + 42) = 2080;
    v86 = sub_1002E3DF8(v143);
    v155 = sub_100016940(v86, v87, v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v76 + 44, v76 + 52);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v147, "Saved LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s with source: %s.", (uint8_t *)v76, 0x34u);
    v88 = v148;
    swift_arrayDestroy(v148, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v88, -1, -1);
    swift_slowDealloc(v76, -1, -1);

    (*(void (**)(os_log_t, uint64_t))(v153 + 8))(v69, v152);
  }
  else
  {
    sub_1000126B0((uint64_t)v150, type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v151, v71);

    (*(void (**)(os_log_t, uint64_t))(v23 + 8))(v69, v22);
  }
  v113 = v146;
  sub_100004048((uint64_t)v144, &qword_1010F4A20);
LABEL_20:
  dispatch_group_leave(v113);
}

uint64_t sub_100411CB4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  int *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166[2];
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _OWORD v171[3];

  v159 = a2;
  v153 = a1;
  v162 = type metadata accessor for LocationFetcher(0);
  v147 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v148 = v3;
  v154 = (uint64_t)&v129 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = type metadata accessor for UUID(0);
  v156 = *(_QWORD *)(v161 - 8);
  v4 = __chkstk_darwin(v161);
  v155 = (char *)&v129 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = v5;
  __chkstk_darwin(v4);
  v135 = (char *)&v129 - v6;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v129 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v140 = (char *)&v129 - v13;
  __chkstk_darwin(v12);
  v137 = (char *)&v129 - v14;
  v141 = type metadata accessor for BeaconStatus(0);
  __chkstk_darwin(v141);
  v142 = (char *)&v129 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = type metadata accessor for RawSearchResult(0);
  v145 = *(_QWORD *)(v150 - 8);
  v16 = __chkstk_darwin(v150);
  v152 = (uint64_t)&v129 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = v17;
  __chkstk_darwin(v16);
  v139 = (char *)&v129 - v18;
  v19 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v19);
  v138 = (uint64_t)&v129 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = type metadata accessor for Date(0);
  v158 = *(_QWORD *)(v160 - 8);
  v21 = __chkstk_darwin(v160);
  v151 = (char *)&v129 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = v22;
  __chkstk_darwin(v21);
  v164 = (char *)&v129 - v23;
  v24 = sub_10001A9A8(&qword_1011091A0);
  __chkstk_darwin(v24);
  v26 = (char *)&v129 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = __chkstk_darwin(v27);
  v134 = (uint64_t)&v129 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v157 = (uint64_t)&v129 - v32;
  v143 = v33;
  __chkstk_darwin(v31);
  v163 = (uint64_t)&v129 - v34;
  v36 = v2[6];
  v35 = v2[7];
  sub_10001AA44(v2 + 3, v36);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v35 + 24))(v36, v35) & 1) != 0)
  {
    v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 16))(v11, (char *)v2 + *(int *)(v162 + 32), v7);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.info.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Not storing beacon status that's already from disk.", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  else
  {
    v136 = v2;
    v132 = v8;
    v133 = v7;
    v42 = v150;
    v43 = (char *)v159;
    sub_10000F9B8(v159 + *(int *)(v150 + 44), (uint64_t)v26, &qword_1011091A0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
    {
      sub_100004048((uint64_t)v26, &qword_1011091A0);
      v44 = v132;
      v45 = v140;
      v46 = v133;
      v47 = (*(uint64_t (**)(char *, char *, uint64_t))(v132 + 16))(v140, (char *)v136 + *(int *)(v162 + 32), v133);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.info.getter(v48);
      if (os_log_type_enabled(v48, v49))
      {
        v50 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Not storing beacon status that's not reconciled.", v50, 2u);
        swift_slowDealloc(v50, -1, -1);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v45, v46);
    }
    else
    {
      v51 = v27;
      v131 = v28;
      v52 = v163;
      sub_1000126EC((uint64_t)v26, v163, type metadata accessor for BeaconKeyManager.IndexInformation);
      v53 = v138;
      sub_10000F9B8((uint64_t)&v43[*(int *)(v42 + 40)], v138, (uint64_t *)&unk_1010EA690);
      v54 = v139;
      sub_10005972C((uint64_t)v43, (uint64_t)v139, type metadata accessor for RawSearchResult);
      v55 = v158;
      v56 = v160;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v158 + 48))(v53, 1, v160) == 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v164, &v54[*(int *)(v42 + 20)], v56);
        sub_1000126B0((uint64_t)v54, type metadata accessor for RawSearchResult);
        sub_100004048(v53, (uint64_t *)&unk_1010EA690);
      }
      else
      {
        sub_1000126B0((uint64_t)v54, type metadata accessor for RawSearchResult);
        (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v164, v53, v56);
      }
      v57 = v161;
      v58 = v156;
      v59 = v136;
      v138 = *v136;
      v60 = *v43;
      v61 = (_QWORD *)(v52 + *(int *)(v51 + 20));
      v62 = v61[3];
      v63 = v61[4];
      sub_10001AA44(v61, v62);
      LOBYTE(v63) = sub_100ABA6B0(v62, v63);
      v65 = v61[3];
      v64 = v61[4];
      sub_10001AA44(v61, v65);
      dispatch thunk of RawRepresentable.rawValue.getter(v171, v65, *(_QWORD *)(v64 + 56));
      v66 = *(_QWORD *)&v171[0];
      v140 = *(char **)(v58 + 16);
      v67 = v142;
      v150 = v51;
      v68 = v153;
      ((void (*)(char *, uint64_t, uint64_t))v140)(v142, v153, v57);
      v69 = (int *)v141;
      v67[*(int *)(v141 + 20)] = v60;
      v70 = &v67[v69[6]];
      v139 = *(char **)(v158 + 16);
      ((void (*)(char *, char *, uint64_t))v139)(v70, v164, v56);
      v71 = &v67[v69[7]];
      *(_QWORD *)v71 = v63;
      *((_QWORD *)v71 + 1) = v66;
      v67[v69[8]] = 1;
      *(_QWORD *)&v67[v69[9]] = 0;
      v72 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v72);
      *(&v129 - 6) = v138;
      *(&v129 - 5) = (uint64_t)v67;
      *(&v129 - 4) = (uint64_t)v70;
      *(&v129 - 3) = (uint64_t)v67;
      *((_BYTE *)&v129 - 16) = 3;
      *((_BYTE *)&v129 - 15) = v60;
      *((_WORD *)&v129 - 7) = 256;
      v73 = &type metadata for () + 1;
      static Transaction.named<A>(_:with:)("searchpartyd.beaconstore.updateType18Status", 43, 2, sub_10042540C, &v129 - 8);
      v74 = (uint64_t)v67;
      v75 = v140;
      sub_1000126B0(v74, type metadata accessor for BeaconStatus);
      v76 = *v59;
      v77 = *(_QWORD *)(*v59 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
      v78 = type metadata accessor for BeaconKeyManager(0);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v76, v77, &type metadata for () + 1, v78);
      v138 = 0;
      v79 = v68;
      v80 = v157;
      v81 = v68;
      v82 = v161;
      ((void (*)(uint64_t, uint64_t, uint64_t))v75)(v157, v81, v161);
      sub_100030784((uint64_t)v61, v80 + *(int *)(v150 + 20));
      sub_100DD0430(v80, 0, &v167);
      sub_1000126B0(v80, type metadata accessor for BeaconKeyManager.IndexInformation);
      swift_release();
      sub_100005CF0((uint64_t)&v167, (uint64_t)&v168, &qword_1010FA1E0);
      v83 = v164;
      if (*((_QWORD *)&v169 + 1) >> 60 == 15)
      {
        v142 = 0;
        v141 = 0x3000000000000000;
        v84 = v159;
        v85 = v160;
      }
      else
      {
        v129 = v78;
        v130 = &type metadata for () + 1;
        v171[0] = v168;
        v171[1] = v169;
        v171[2] = v170;
        v86 = sub_1007DFD44();
        sub_1002F7C0C(6, v86, v87);
        v142 = (char *)v166[0];
        v141 = v166[1] | 0x2000000000000000;
        v88 = v132;
        v89 = v137;
        v90 = v133;
        (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v137, (char *)v59 + *(int *)(v162 + 32), v133);
        v91 = v135;
        ((void (*)(char *, uint64_t, uint64_t))v75)(v135, v79, v82);
        v92 = v134;
        v93 = sub_10005972C(v163, v134, type metadata accessor for BeaconKeyManager.IndexInformation);
        v94 = Logger.logObject.getter(v93);
        v95 = static os_log_type_t.info.getter(v94);
        if (os_log_type_enabled(v94, v95))
        {
          v97 = v91;
          v98 = swift_slowAlloc(32, -1);
          v99 = swift_slowAlloc(64, -1);
          v166[0] = v99;
          *(_DWORD *)v98 = 141558531;
          v165 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v98 + 4, v98 + 12);
          *(_WORD *)(v98 + 12) = 2081;
          v100 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v101 = dispatch thunk of CustomStringConvertible.description.getter(v82, v100);
          v165 = sub_100016940(v101, v102, v166);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v98 + 14, v98 + 22);
          swift_bridgeObjectRelease();
          v103 = v97;
          v75 = v140;
          (*(void (**)(char *, uint64_t))(v156 + 8))(v103, v82);
          *(_WORD *)(v98 + 22) = 2082;
          v104 = (_QWORD *)(v92 + *(int *)(v150 + 20));
          v106 = v104[3];
          v105 = v104[4];
          sub_10001AA44(v104, v106);
          v107 = v106;
          v82 = v161;
          v108 = dispatch thunk of CustomStringConvertible.description.getter(v107, *(_QWORD *)(v105 + 16));
          v165 = sub_100016940(v108, v109, v166);
          v83 = v164;
          v85 = v160;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v98 + 24, v98 + 32);
          swift_bridgeObjectRelease();
          sub_1000126B0(v92, type metadata accessor for BeaconKeyManager.IndexInformation);
          _os_log_impl((void *)&_mh_execute_header, v94, v95, "Found advertisement key beacon for %{private,mask.hash}s,index %{public}s.", (uint8_t *)v98, 0x20u);
          swift_arrayDestroy(v99, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v99, -1, -1);
          swift_slowDealloc(v98, -1, -1);
          sub_1003D15A0((uint64_t)&v167);

          (*(void (**)(char *, uint64_t))(v132 + 8))(v137, v133);
          v84 = v159;
          v59 = v136;
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v156 + 8))(v91, v82);
          sub_1000126B0(v92, type metadata accessor for BeaconKeyManager.IndexInformation);
          sub_1003D15A0((uint64_t)&v167);

          (*(void (**)(char *, uint64_t))(v88 + 8))(v89, v90);
          v84 = v159;
          v59 = v136;
          v85 = v160;
        }
        v73 = v130;
        v78 = v129;
      }
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, *v59, *(_QWORD *)(*v59 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock), v73, v78);
      v159 = v166[0];
      v162 = type metadata accessor for Transaction(0);
      sub_10005972C((uint64_t)v59, v154, type metadata accessor for LocationFetcher);
      sub_10005972C(v163, v157, type metadata accessor for BeaconKeyManager.IndexInformation);
      ((void (*)(char *, uint64_t, uint64_t))v75)(v155, v153, v82);
      sub_10005972C(v84, v152, type metadata accessor for RawSearchResult);
      ((void (*)(char *, char *, uint64_t))v139)(v151, v83, v85);
      v110 = *(unsigned __int8 *)(v147 + 80);
      v111 = (v110 + 16) & ~v110;
      v112 = (v148 + v111 + 7) & 0xFFFFFFFFFFFFFFF8;
      v113 = *(unsigned __int8 *)(v131 + 80);
      v114 = (v113 + v112 + 16) & ~v113;
      v115 = (v143 + v114 + 7) & 0xFFFFFFFFFFFFFFF8;
      v116 = v156;
      v117 = *(unsigned __int8 *)(v156 + 80);
      v118 = (v117 + v115 + 8) & ~v117;
      v119 = *(unsigned __int8 *)(v145 + 80);
      v120 = (v149 + v119 + v118) & ~v119;
      v121 = v158;
      v122 = *(unsigned __int8 *)(v158 + 80);
      v123 = (v146 + v122 + v120) & ~v122;
      v124 = swift_allocObject(&unk_1010758C0, v123 + v144, v110 | v113 | v117 | v119 | v122 | 7);
      sub_1000126EC(v154, v124 + v111, type metadata accessor for LocationFetcher);
      v125 = (_QWORD *)(v124 + v112);
      v126 = (uint64_t)v142;
      v127 = v141;
      *v125 = v142;
      v125[1] = v127;
      sub_1000126EC(v157, v124 + v114, type metadata accessor for BeaconKeyManager.IndexInformation);
      *(_QWORD *)(v124 + v115) = v159;
      (*(void (**)(uint64_t, char *, uint64_t))(v116 + 32))(v124 + v118, v155, v161);
      sub_1000126EC(v152, v124 + v120, type metadata accessor for RawSearchResult);
      v128 = v160;
      (*(void (**)(uint64_t, char *, uint64_t))(v121 + 32))(v124 + v123, v151, v160);
      sub_100425884(v126, v127);
      swift_retain();
      static Transaction.asyncTask(name:block:)("UpdateObservationFromACSN", 25, 2, &unk_1010FB1B8, v124);
      swift_release();
      swift_release();
      sub_100425898(v126, v127);
      (*(void (**)(char *, uint64_t))(v121 + 8))(v164, v128);
      return sub_1000126B0(v163, type metadata accessor for BeaconKeyManager.IndexInformation);
    }
  }
}

void sub_100412C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t RequestBeacon;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  v6 = __chkstk_darwin(RequestBeacon);
  v37 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v32 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v32 - v11;
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for LocationFetcher(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2 + *(int *)(v17 + 32), v13);
  sub_10005972C(a1, (uint64_t)v12, type metadata accessor for FetchRequestBeacon);
  v18 = sub_10005972C(a1, (uint64_t)v10, type metadata accessor for FetchRequestBeacon);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, (os_log_type_t)v20))
  {
    v34 = v20;
    v35 = v14;
    v36 = v13;
    v21 = swift_slowAlloc(32, -1);
    v33 = swift_slowAlloc(64, -1);
    v40 = v33;
    *(_DWORD *)v21 = 141558531;
    v38 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v21 + 4, v21 + 12);
    *(_WORD *)(v21 + 12) = 2081;
    v32 = v2;
    v22 = type metadata accessor for UUID(0);
    v23 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
    v38 = sub_100016940(v24, v25, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v12, type metadata accessor for FetchRequestBeacon);
    *(_WORD *)(v21 + 22) = 2082;
    v26 = v37;
    sub_10005972C((uint64_t)v10, v37, type metadata accessor for FetchRequestBeacon);
    v27 = objc_autoreleasePoolPush();
    v28 = v32;
    sub_100AC4E7C(v26, (unint64_t *)&v38);
    objc_autoreleasePoolPop(v27);
    if (v28)
    {
      __break(1u);
    }
    else
    {
      v29 = v38;
      v30 = v39;
      sub_1000126B0(v37, type metadata accessor for FetchRequestBeacon);
      v38 = sub_100016940(v29, v30, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v21 + 24, v21 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v10, type metadata accessor for FetchRequestBeacon);
      _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v34, "Fetching beacon %{private,mask.hash}s, %{public}s.", (uint8_t *)v21, 0x20u);
      v31 = v33;
      swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      (*(void (**)(char *, uint64_t))(v35 + 8))(v16, v36);
    }
  }
  else
  {
    sub_1000126B0((uint64_t)v12, type metadata accessor for FetchRequestBeacon);
    sub_1000126B0((uint64_t)v10, type metadata accessor for FetchRequestBeacon);

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
}

uint64_t sub_100413028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v8 + 176) = a7;
  *(_QWORD *)(v8 + 184) = a8;
  *(_BYTE *)(v8 + 116) = a6;
  *(_QWORD *)(v8 + 160) = a4;
  *(_QWORD *)(v8 + 168) = a5;
  v9 = type metadata accessor for Logger(0);
  *(_QWORD *)(v8 + 192) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 200) = v10;
  *(_QWORD *)(v8 + 208) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for JSONDecoder.DateDecodingStrategy(0);
  *(_QWORD *)(v8 + 216) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 224) = v12;
  *(_QWORD *)(v8 + 232) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  *(_QWORD *)(v8 + 240) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v8 + 248) = v14;
  *(_QWORD *)(v8 + 256) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004130E0, 0, 0);
}

uint64_t sub_1004130E0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, __n128);
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v17;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD **)(v0 + 168);
  v3 = v2[6];
  v4 = v2[7];
  sub_10001AA44(v2 + 3, v3);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v4 + 48);
  v6 = swift_bridgeObjectRetain(v1);
  v7 = v5(v3, v4, v6);
  v9 = v8;
  v11 = v10;
  v12 = type metadata accessor for LocationFetcher(0);
  *(_QWORD *)(v0 + 264) = v12;
  v13 = *(_QWORD *)((char *)v2 + *(int *)(v12 + 40));
  v14 = unk_101112BC4;
  v17 = (char *)&dword_101112BC0 + dword_101112BC0;
  swift_retain();
  v15 = (_QWORD *)swift_task_alloc(v14);
  *(_QWORD *)(v0 + 272) = v15;
  *v15 = v0;
  v15[1] = sub_1004131C8;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))v17)(*(_QWORD *)(v0 + 160), v7, v9, v11, *(unsigned __int8 *)(v0 + 116), v13);
}

uint64_t sub_1004131C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)();

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 272);
  v5[35] = a1;
  v5[36] = a2;
  v5[37] = a3;
  v5[38] = v3;
  swift_task_dealloc(v6);
  if (v3)
    v7 = sub_10041333C;
  else
    v7 = sub_100413238;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100413238()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[36];
  v2 = v0[37];
  v3 = v0[35];
  v0[5] = &type metadata for FetchRequest;
  v0[6] = sub_1004262EC();
  v0[2] = v3;
  v0[3] = v1;
  v0[4] = v2;
  swift_bridgeObjectRetain(v3);
  sub_10001BBBC(v1, v2);
  v4 = (_QWORD *)swift_task_alloc(dword_1010F7D04);
  v0[39] = v4;
  *v4 = v0;
  v4[1] = sub_1004132D0;
  return sub_100338A60(v0[32], (uint64_t)(v0 + 2));
}

uint64_t sub_1004132D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 312);
  *(_QWORD *)(*v1 + 320) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100413D14;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 16));
    v4 = sub_100413550;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10041333C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = v0[38];
  v0[46] = v1;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[25] + 16))(v0[26], v0[21] + *(int *)(v0[33] + 32), v0[24]);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    v0[15] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fetch error: %{public}@.", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  v10 = v0[25];
  v9 = v0[26];
  v12 = v0[23];
  v11 = v0[24];

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  v13 = swift_allocObject(&unk_101075C08, 32, 7);
  v0[47] = v13;
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v1;
  swift_retain();
  swift_errorRetain(v1);
  v14 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
  v0[48] = v14;
  *v14 = v0;
  v14[1] = sub_100413ADC;
  return unsafeBlocking<A>(_:)((char *)v0 + 114, sub_1004262BC, v13, &type metadata for Bool);
}

uint64_t sub_100413550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t (*v19)@<X0>(_BYTE *@<X8>);
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _QWORD *v43;

  v2 = *(_QWORD *)(v0 + 224);
  v1 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(unsigned __int8 *)(v0 + 116);
  v5 = type metadata accessor for JSONDecoder(0);
  v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  *(_QWORD *)(v0 + 328) = JSONDecoder.init()(v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for JSONDecoder.DateDecodingStrategy.millisecondsSince1970(_:), v3);
  v7 = dispatch thunk of JSONDecoder.dateDecodingStrategy.setter(v1);
  v8 = *(_QWORD *)(v0 + 320);
  if (v4 == 1)
  {
    v9 = FMNServerInteractionController.FMNResponseFields.data.getter(v7);
    v11 = v10;
    v12 = sub_100426390();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for OwnedDeviceFetchResponse, v9, v11, &type metadata for OwnedDeviceFetchResponse, v12);
    if (!v8)
    {
      v13 = v0 + 115;
      v14 = *(_QWORD *)(v0 + 184);
      sub_10001BC14(v9, v11);
      v15 = *(_QWORD *)(v0 + 136);
      v16 = swift_allocObject(&unk_101075C58, 32, 7);
      *(_QWORD *)(v0 + 336) = v16;
      *(_QWORD *)(v16 + 16) = v14;
      *(_QWORD *)(v16 + 24) = v15;
      v17 = async function pointer to unsafeBlocking<A>(_:)[1];
      swift_retain();
      v18 = (_QWORD *)swift_task_alloc(v17);
      *(_QWORD *)(v0 + 344) = v18;
      *v18 = v0;
      v18[1] = sub_100413990;
      v19 = sub_100426428;
LABEL_10:
      v37 = v13;
      v38 = v16;
      return unsafeBlocking<A>(_:)(v37, v19, v38, &type metadata for Bool);
    }
  }
  else
  {
    v9 = FMNServerInteractionController.FMNResponseFields.data.getter(v7);
    v11 = v20;
    v21 = sub_100426330();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for FetchResponse, v9, v11, &type metadata for FetchResponse, v21);
    if (!v8)
    {
      v13 = v0 + 113;
      v39 = *(_QWORD *)(v0 + 184);
      sub_10001BC14(v9, v11);
      v40 = *(_QWORD *)(v0 + 104);
      v41 = *(_BYTE *)(v0 + 112);
      v16 = swift_allocObject(&unk_101075C30, 33, 7);
      *(_QWORD *)(v0 + 352) = v16;
      *(_QWORD *)(v16 + 16) = v39;
      *(_QWORD *)(v16 + 24) = v40;
      *(_BYTE *)(v16 + 32) = v41;
      v42 = async function pointer to unsafeBlocking<A>(_:)[1];
      swift_retain();
      v43 = (_QWORD *)swift_task_alloc(v42);
      *(_QWORD *)(v0 + 360) = v43;
      *v43 = v0;
      v43[1] = sub_100413A80;
      v19 = sub_100426384;
      goto LABEL_10;
    }
  }
  v23 = *(_QWORD *)(v0 + 288);
  v22 = *(_QWORD *)(v0 + 296);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 248) + 8))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 240));
  swift_bridgeObjectRelease();
  sub_10001BC14(v23, v22);
  sub_10001BC14(v9, v11);
  swift_release();
  *(_QWORD *)(v0 + 368) = v8;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 16))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 168) + *(int *)(*(_QWORD *)(v0 + 264) + 32), *(_QWORD *)(v0 + 192));
  swift_errorRetain(v8);
  v24 = swift_errorRetain(v8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v27 = 138543362;
    swift_errorRetain(v8);
    v29 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 120) = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v27 + 4, v27 + 12);
    *v28 = v29;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Fetch error: %{public}@.", v27, 0xCu);
    v30 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v28, 1, v30);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    swift_errorRelease(v8);
    swift_errorRelease(v8);
  }
  v32 = *(_QWORD *)(v0 + 200);
  v31 = *(_QWORD *)(v0 + 208);
  v34 = *(_QWORD *)(v0 + 184);
  v33 = *(_QWORD *)(v0 + 192);

  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  v35 = swift_allocObject(&unk_101075C08, 32, 7);
  *(_QWORD *)(v0 + 376) = v35;
  *(_QWORD *)(v35 + 16) = v34;
  *(_QWORD *)(v35 + 24) = v8;
  swift_retain();
  swift_errorRetain(v8);
  v36 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
  *(_QWORD *)(v0 + 384) = v36;
  *v36 = v0;
  v36[1] = sub_100413ADC;
  v19 = sub_1004262BC;
  v37 = v0 + 114;
  v38 = v35;
  return unsafeBlocking<A>(_:)(v37, v19, v38, &type metadata for Bool);
}

uint64_t sub_100413990()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 344));
  swift_release();
  return swift_task_switch(sub_1004139EC, 0, 0);
}

uint64_t sub_1004139EC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 240);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001BC14(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100413A80()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 360));
  swift_release();
  return swift_task_switch(sub_1004139EC, 0, 0);
}

uint64_t sub_100413ADC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 384));
  swift_release();
  return swift_task_switch(sub_100413B38, 0, 0);
}

uint64_t sub_100413B38()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;

  if ((*(_BYTE *)(v0 + 116) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 368);
    v2 = *(_QWORD **)(v0 + 168);
    v3 = v2[6];
    v4 = v2[7];
    sub_10001AA44(v2 + 3, v3);
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 48))(v3, v4);
    v8 = sub_100AC41D8(v5, v6, v7);
    v10 = v9;
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    swift_getErrorValue(v1, v0 + 144, v0 + 56);
    *(_QWORD *)(v0 + 128) = Error.code.getter(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 0x6F44726F72726520;
    v12._object = (void *)0xED00003A6E69616DLL;
    String.append(_:)(v12);
    swift_getErrorValue(v1, v0 + 152, v0 + 80);
    v13._countAndFlagsBits = Error.domain.getter(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    sub_100CE5324(v8, v10, 0xD000000000000017, 0x8000000100ED61C0);
    swift_errorRelease(v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 368));
  }
  v14 = *(_QWORD *)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100413D14()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = v0[36];
  v1 = v0[37];
  swift_bridgeObjectRelease();
  sub_10001BC14(v2, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  v3 = v0[40];
  v0[46] = v3;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[25] + 16))(v0[26], v0[21] + *(int *)(v0[33] + 32), v0[24]);
  swift_errorRetain(v3);
  v4 = swift_errorRetain(v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138543362;
    swift_errorRetain(v3);
    v9 = _swift_stdlib_bridgeErrorToNSError(v3);
    v0[15] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v7 + 4, v7 + 12);
    *v8 = v9;
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Fetch error: %{public}@.", v7, 0xCu);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_errorRelease(v3);
    swift_errorRelease(v3);
  }
  v12 = v0[25];
  v11 = v0[26];
  v14 = v0[23];
  v13 = v0[24];

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  v15 = swift_allocObject(&unk_101075C08, 32, 7);
  v0[47] = v15;
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v3;
  swift_retain();
  swift_errorRetain(v3);
  v16 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
  v0[48] = v16;
  *v16 = v0;
  v16[1] = sub_100413ADC;
  return unsafeBlocking<A>(_:)((char *)v0 + 114, sub_1004262BC, v15, &type metadata for Bool);
}

uint64_t sub_100413F4C@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  char v4;
  uint64_t result;
  uint64_t v6;

  v6 = a1;
  swift_bridgeObjectRetain(a1);
  v4 = Future.finish(result:)(&v6);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4 & 1;
  return result;
}

uint64_t sub_100413FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v8[32] = a7;
  v8[33] = a8;
  v8[30] = a5;
  v8[31] = a6;
  v8[28] = a3;
  v8[29] = a4;
  v8[26] = a1;
  v8[27] = a2;
  v9 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for RawSearchResult(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[34] = swift_task_alloc(v9);
  v8[35] = swift_task_alloc(v9);
  v10 = sub_10001A9A8(&qword_1010EF3F8);
  v8[36] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_101100320);
  v8[37] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v8[38] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[39] = v13;
  v8[40] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ObservedAdvertisement(0);
  v8[41] = v14;
  v8[42] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v8[43] = v15;
  v16 = (*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[44] = swift_task_alloc(v16);
  v8[45] = swift_task_alloc(v16);
  v8[46] = swift_task_alloc(v16);
  v17 = type metadata accessor for UUID(0);
  v8[47] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v8[48] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[49] = swift_task_alloc(v19);
  v8[50] = swift_task_alloc(v19);
  v8[51] = swift_task_alloc(v19);
  v8[52] = swift_task_alloc(v19);
  v20 = type metadata accessor for Logger(0);
  v8[53] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v8[54] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[55] = swift_task_alloc(v22);
  v8[56] = swift_task_alloc(v22);
  v8[57] = swift_task_alloc(v22);
  v8[58] = swift_task_alloc(v22);
  return swift_task_switch(sub_100414190, 0, 0);
}

uint64_t sub_100414190()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 472) = v2;
    *v2 = v0;
    v2[1] = sub_10041427C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10041427C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 472);
  *(_QWORD *)(*(_QWORD *)v1 + 480) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004142D8, 0, 0);
}

uint64_t sub_1004142D8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 480))
  {
    v2 = *(_QWORD *)(v0 + 224);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if ((~v2 & 0x3000000000000000) != 0)
    {
      v31 = *(_QWORD *)(v0 + 216);
      v32 = *(_QWORD *)(v0 + 224);
      v33 = v31;
      v58 = v32;
LABEL_15:
      *(_QWORD *)(v0 + 528) = v32;
      *(_QWORD *)(v0 + 520) = v33;
      v59 = *(_QWORD *)(v0 + 384);
      v61 = *(_QWORD *)(v0 + 376);
      v40 = *(_QWORD *)(v0 + 336);
      v39 = *(_QWORD *)(v0 + 344);
      v41 = *(int **)(v0 + 328);
      v71 = *(_QWORD *)(v0 + 320);
      v67 = *(_QWORD *)(v0 + 312);
      v69 = *(_QWORD *)(v0 + 304);
      v42 = *(_QWORD *)(v0 + 288);
      v43 = *(_QWORD *)(v0 + 296);
      v65 = v43;
      v56 = v32;
      v57 = *(_QWORD *)(v0 + 248);
      v44 = *(_QWORD *)(v0 + 232);
      v63 = **(_BYTE **)(v0 + 256);
      (*(void (**)(void))(v67 + 16))();
      v45 = type metadata accessor for ObservedAdvertisement.Location(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v43, 1, 1, v45);
      v46 = (_QWORD *)(v44 + *(int *)(v39 + 20));
      v48 = v46[3];
      v47 = v46[4];
      sub_10001AA44(v46, v48);
      sub_100425884(v31, v58);
      sub_10012C644(v33, v32);
      v49 = sub_100ABA6B0(v48, v47);
      v50 = v46[3];
      v51 = v46[4];
      sub_10001AA44(v46, v50);
      dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)(v0 + 120), v50, *(_QWORD *)(v51 + 56));
      v52 = *(_QWORD *)(v0 + 120);
      v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16);
      *(_QWORD *)(v0 + 536) = v53;
      v53(v42, v57, v61);
      v54 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
      *(_BYTE *)(v42 + *(int *)(v54 + 20)) = v49;
      *(_QWORD *)(v42 + *(int *)(v54 + 24)) = v52;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v42, 0, 1, v54);
      *(_QWORD *)v40 = 0;
      *(_WORD *)(v40 + 8) = 769;
      *(_QWORD *)(v40 + 16) = v33;
      *(_QWORD *)(v40 + 24) = v56;
      *(_BYTE *)(v40 + 32) = v63;
      *(_WORD *)(v40 + 33) = 0;
      *(_BYTE *)(v40 + 35) = 1;
      *(_DWORD *)(v40 + 36) = -1;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 32))(v40 + v41[11], v71, v69);
      *(_BYTE *)(v40 + v41[14]) = 0;
      sub_100005CF0(v65, v40 + v41[12], (uint64_t *)&unk_101100320);
      sub_100005CF0(v42, v40 + v41[13], &qword_1010EF3F8);
      v55 = (_QWORD *)swift_task_alloc(dword_10111BABC);
      *(_QWORD *)(v0 + 544) = v55;
      *v55 = v0;
      v55[1] = sub_100414E10;
      return sub_100C6592C(*(_QWORD *)(v0 + 336));
    }
    v3 = (_QWORD *)(*(_QWORD *)(v0 + 232) + *(int *)(*(_QWORD *)(v0 + 344) + 20));
    v4 = v3[3];
    v5 = v3[4];
    sub_10001AA44(v3, v4);
    v6 = sub_100ABA6B0(v4, v5);
    if (v6)
    {
      if (v6 != 1)
      {
        swift_bridgeObjectRelease();
LABEL_14:
        sub_1003F1128();
        v33 = v73;
        v32 = v74 | 0x2000000000000000;
        v31 = *(_QWORD *)(v0 + 216);
        v58 = *(_QWORD *)(v0 + 224);
        goto LABEL_15;
      }
      v7 = 0xE900000000000079;
      v8 = 0x7261646E6F636553;
    }
    else
    {
      v7 = 0xE700000000000000;
      v8 = 0x7972616D697250;
    }
    v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v7, 0x6F4C657275636553, 0xEF736E6F69746163, 0);
    swift_bridgeObjectRelease();
    if ((v34 & 1) == 0)
    {
      v35 = v3[3];
      v36 = v3[4];
      v37 = sub_10001AA44(v3, v35);
      sub_1004DDCC0();
      v38 = (_QWORD *)swift_task_alloc(dword_1010FCEBC);
      *(_QWORD *)(v0 + 488) = v38;
      *v38 = v0;
      v38[1] = sub_100414830;
      return sub_10047701C(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 248), (uint64_t)v37, v35, v36);
    }
    goto LABEL_14;
  }
  v9 = *(_QWORD *)(v0 + 464);
  v10 = *(_QWORD *)(v0 + 424);
  v11 = *(_QWORD *)(v0 + 432);
  v12 = *(_QWORD *)(v0 + 208);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  v13 = type metadata accessor for LocationFetcher(0);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v12 + *(int *)(v13 + 32), v10);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "No ObservationStoreService available!", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }
  v18 = *(_QWORD *)(v0 + 464);
  v19 = *(_QWORD *)(v0 + 424);
  v20 = *(_QWORD *)(v0 + 432);

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  v21 = *(_QWORD *)(v0 + 456);
  v23 = *(_QWORD *)(v0 + 440);
  v22 = *(_QWORD *)(v0 + 448);
  v25 = *(_QWORD *)(v0 + 408);
  v24 = *(_QWORD *)(v0 + 416);
  v26 = *(_QWORD *)(v0 + 392);
  v27 = *(_QWORD *)(v0 + 400);
  v29 = *(_QWORD *)(v0 + 360);
  v28 = *(_QWORD *)(v0 + 368);
  v60 = *(_QWORD *)(v0 + 352);
  v62 = *(_QWORD *)(v0 + 336);
  v64 = *(_QWORD *)(v0 + 320);
  v66 = *(_QWORD *)(v0 + 296);
  v68 = *(_QWORD *)(v0 + 288);
  v70 = *(_QWORD *)(v0 + 280);
  v72 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v60);
  swift_task_dealloc(v62);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  swift_task_dealloc(v72);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100414830(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  void (*v10)(uint64_t, uint64_t);

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 488);
  v4[62] = a1;
  v4[63] = a2;
  swift_task_dealloc(v5);
  v6 = v4[52];
  v7 = v4[47];
  v8 = v4[48];
  if (v2)
  {
    swift_errorRelease(v2);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    v9 = sub_100415300;
  }
  else
  {
    v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v4[64] = v10;
    v10(v6, v7);
    v9 = sub_1004148E0;
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_1004148E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  _QWORD *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t typea;
  os_log_type_t type;
  os_log_type_t typeb[8];
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  unint64_t v70;
  uint64_t v71[2];

  if (*(_QWORD *)(v0 + 504) >> 60 == 15)
  {
    sub_1003F1128();
    v2 = v71[0];
    v1 = v71[1];
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 208);
    v67 = *(_QWORD *)(v0 + 496);
    v70 = *(_QWORD *)(v0 + 504);
    v4 = *(_QWORD *)(v0 + 456);
    v5 = *(_QWORD *)(v0 + 424);
    v6 = *(_QWORD *)(v0 + 432);
    v7 = *(_QWORD *)(v0 + 408);
    v9 = *(_QWORD *)(v0 + 376);
    v8 = *(_QWORD *)(v0 + 384);
    v10 = *(_QWORD *)(v0 + 248);
    v61 = *(_QWORD *)(v0 + 232);
    typea = *(_QWORD *)(v0 + 368);
    v11 = type metadata accessor for LocationFetcher(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v3 + *(int *)(v11 + 32), v5);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    v1 = v70;
    v12(v7, v10, v9);
    sub_10005972C(v61, typea, type metadata accessor for BeaconKeyManager.IndexInformation);
    v13 = sub_10001BBBC(v67, v70);
    v14 = Logger.logObject.getter(v13);
    type = static os_log_type_t.info.getter(v14);
    v15 = os_log_type_enabled(v14, type);
    v68 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
    v16 = *(_QWORD *)(v0 + 456);
    v17 = *(_QWORD *)(v0 + 424);
    v18 = *(_QWORD *)(v0 + 432);
    v19 = *(_QWORD *)(v0 + 408);
    v20 = *(_QWORD *)(v0 + 368);
    v21 = *(_QWORD *)(v0 + 376);
    if (v15)
    {
      v62 = *(_QWORD *)(v0 + 424);
      v50 = *(_QWORD *)(v0 + 344);
      v55 = *(_QWORD *)(v0 + 496);
      v57 = *(_QWORD *)(v0 + 504);
      v59 = *(_QWORD *)(v0 + 456);
      v22 = swift_slowAlloc(32, -1);
      v53 = swift_slowAlloc(64, -1);
      v71[0] = v53;
      *(_DWORD *)v22 = 141558531;
      *(_QWORD *)(v0 + 184) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v22 + 4, v22 + 12);
      *(_WORD *)(v22 + 12) = 2081;
      v23 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = dispatch thunk of CustomStringConvertible.description.getter(v21, v23);
      *(_QWORD *)(v0 + 192) = sub_100016940(v24, v25, v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease();
      v68(v19, v21);
      *(_WORD *)(v22 + 22) = 2082;
      v26 = (_QWORD *)(v20 + *(int *)(v50 + 20));
      v28 = v26[3];
      v27 = v26[4];
      sub_10001AA44(v26, v28);
      v29 = dispatch thunk of CustomStringConvertible.description.getter(v28, *(_QWORD *)(v27 + 16));
      *(_QWORD *)(v0 + 200) = sub_100016940(v29, v30, v71);
      v1 = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v22 + 24, v22 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v20, type metadata accessor for BeaconKeyManager.IndexInformation);
      _os_log_impl((void *)&_mh_execute_header, v14, type, "Found advertisement key for shared beacon %{private,mask.hash}s,index %{public}s.", (uint8_t *)v22, 0x20u);
      swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v22, -1, -1);

      sub_10001EF3C(v55, v57);
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v59, v62);
    }
    else
    {
      sub_10001EF3C(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 504));
      v68(v19, v21);
      sub_1000126B0(v20, type metadata accessor for BeaconKeyManager.IndexInformation);

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    }
    v2 = *(_QWORD *)(v0 + 496);
  }
  v51 = v1 | 0x2000000000000000;
  *(_QWORD *)(v0 + 528) = v1 | 0x2000000000000000;
  *(_QWORD *)(v0 + 520) = v2;
  v54 = *(_QWORD *)(v0 + 384);
  v56 = *(_QWORD *)(v0 + 376);
  v32 = *(_QWORD *)(v0 + 336);
  v31 = *(_QWORD *)(v0 + 344);
  v33 = *(int **)(v0 + 328);
  v69 = *(_QWORD *)(v0 + 320);
  v63 = *(_QWORD *)(v0 + 312);
  *(_QWORD *)typeb = *(_QWORD *)(v0 + 304);
  v34 = *(_QWORD *)(v0 + 288);
  v35 = *(_QWORD *)(v0 + 296);
  v60 = v35;
  v52 = *(_QWORD *)(v0 + 248);
  v37 = *(_QWORD *)(v0 + 224);
  v36 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 216);
  v58 = **(_BYTE **)(v0 + 256);
  (*(void (**)(void))(v63 + 16))();
  v39 = type metadata accessor for ObservedAdvertisement.Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v35, 1, 1, v39);
  v40 = (_QWORD *)(v36 + *(int *)(v31 + 20));
  v41 = v40[3];
  v42 = v40[4];
  sub_10001AA44(v40, v41);
  sub_100425884(v38, v37);
  sub_10012C644(v2, v51);
  LOBYTE(v41) = sub_100ABA6B0(v41, v42);
  v44 = v40[3];
  v43 = v40[4];
  sub_10001AA44(v40, v44);
  dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)(v0 + 120), v44, *(_QWORD *)(v43 + 56));
  v45 = *(_QWORD *)(v0 + 120);
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16);
  *(_QWORD *)(v0 + 536) = v46;
  v46(v34, v52, v56);
  v47 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  *(_BYTE *)(v34 + *(int *)(v47 + 20)) = v41;
  *(_QWORD *)(v34 + *(int *)(v47 + 24)) = v45;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v34, 0, 1, v47);
  *(_QWORD *)v32 = 0;
  *(_WORD *)(v32 + 8) = 769;
  *(_QWORD *)(v32 + 16) = v2;
  *(_QWORD *)(v32 + 24) = v51;
  *(_BYTE *)(v32 + 32) = v58;
  *(_WORD *)(v32 + 33) = 0;
  *(_BYTE *)(v32 + 35) = 1;
  *(_DWORD *)(v32 + 36) = -1;
  (*(void (**)(uint64_t, uint64_t, os_log_type_t *))(v63 + 32))(v32 + v33[11], v69, *(os_log_type_t **)typeb);
  *(_BYTE *)(v32 + v33[14]) = 0;
  sub_100005CF0(v60, v32 + v33[12], (uint64_t *)&unk_101100320);
  sub_100005CF0(v34, v32 + v33[13], &qword_1010EF3F8);
  v48 = (_QWORD *)swift_task_alloc(dword_10111BABC);
  *(_QWORD *)(v0 + 544) = v48;
  *v48 = v0;
  v48[1] = sub_100414E10;
  return sub_100C6592C(*(_QWORD *)(v0 + 336));
}

uint64_t sub_100414E10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 544);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  *(_QWORD *)(*(_QWORD *)v1 + 552) = v0;
  swift_task_dealloc(v2);
  sub_1000126B0(v3, type metadata accessor for ObservedAdvertisement);
  if (v0)
    v4 = sub_10041553C;
  else
    v4 = sub_100414E88;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100414E88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  os_log_type_t type;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v1 = *(_QWORD *)(v0 + 448);
  v2 = *(_QWORD *)(v0 + 424);
  v3 = *(_QWORD *)(v0 + 432);
  v4 = *(_QWORD *)(v0 + 400);
  v55 = *(_QWORD *)(v0 + 376);
  v58 = *(_QWORD *)(v0 + 360);
  v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 536);
  v5 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 256);
  v8 = *(_QWORD *)(v0 + 232);
  v9 = *(_QWORD *)(v0 + 208);
  v10 = type metadata accessor for LocationFetcher(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v9 + *(int *)(v10 + 32), v2);
  sub_10005972C(v6, v5, type metadata accessor for RawSearchResult);
  v62(v4, v7, v55);
  v11 = sub_10005972C(v8, v58, type metadata accessor for BeaconKeyManager.IndexInformation);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v51 = *(_QWORD *)(v0 + 520);
    v53 = *(_QWORD *)(v0 + 432);
    v56 = *(_QWORD *)(v0 + 528);
    v59 = *(_QWORD *)(v0 + 424);
    v63 = *(_QWORD *)(v0 + 448);
    v14 = *(_QWORD *)(v0 + 400);
    v15 = *(_QWORD *)(v0 + 376);
    v44 = *(_QWORD *)(v0 + 384);
    v46 = *(_QWORD *)(v0 + 344);
    v47 = *(_QWORD *)(v0 + 360);
    v16 = *(char **)(v0 + 280);
    v17 = swift_slowAlloc(35, -1);
    v48 = swift_slowAlloc(64, -1);
    v66 = v48;
    *(_DWORD *)v17 = 16778243;
    type = v13;
    v18 = *v16;
    sub_1000126B0((uint64_t)v16, type metadata accessor for RawSearchResult);
    *(_BYTE *)(v0 + 561) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 561, v0 + 562, v17 + 4, v17 + 5);
    *(_QWORD *)(v0 + 160) = 1752392040;
    *(_WORD *)(v17 + 5) = 2160;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v17 + 7, v17 + 15);
    *(_WORD *)(v17 + 15) = 2081;
    v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v15, v19);
    *(_QWORD *)(v0 + 168) = sub_100016940(v20, v21, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v17 + 17, v17 + 25);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v14, v15);
    *(_WORD *)(v17 + 25) = 2082;
    v22 = (_QWORD *)(v47 + *(int *)(v46 + 20));
    v24 = v22[3];
    v23 = v22[4];
    sub_10001AA44(v22, v24);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v24, *(_QWORD *)(v23 + 16));
    *(_QWORD *)(v0 + 176) = sub_100016940(v25, v26, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v17 + 27, v17 + 35);
    swift_bridgeObjectRelease();
    sub_1000126B0(v47, type metadata accessor for BeaconKeyManager.IndexInformation);
    _os_log_impl((void *)&_mh_execute_header, v12, type, "Saved advertisement status %hhu for beacon %{private,mask.hash}s,index %{public}s.", (uint8_t *)v17, 0x23u);
    swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v17, -1, -1);
    swift_release();

    sub_10012C494(v51, v56);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v63, v59);
  }
  else
  {
    v27 = *(_QWORD *)(v0 + 528);
    v28 = *(_QWORD *)(v0 + 520);
    v29 = *(_QWORD *)(v0 + 432);
    v60 = *(_QWORD *)(v0 + 424);
    v64 = *(_QWORD *)(v0 + 448);
    v30 = *(_QWORD *)(v0 + 400);
    v32 = *(_QWORD *)(v0 + 376);
    v31 = *(_QWORD *)(v0 + 384);
    v33 = *(_QWORD *)(v0 + 360);
    sub_1000126B0(*(_QWORD *)(v0 + 280), type metadata accessor for RawSearchResult);
    sub_10012C494(v28, v27);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    sub_1000126B0(v33, type metadata accessor for BeaconKeyManager.IndexInformation);
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v64, v60);
  }
  v34 = *(_QWORD *)(v0 + 456);
  v36 = *(_QWORD *)(v0 + 440);
  v35 = *(_QWORD *)(v0 + 448);
  v38 = *(_QWORD *)(v0 + 408);
  v37 = *(_QWORD *)(v0 + 416);
  v39 = *(_QWORD *)(v0 + 392);
  v40 = *(_QWORD *)(v0 + 400);
  v42 = *(_QWORD *)(v0 + 360);
  v41 = *(_QWORD *)(v0 + 368);
  v49 = *(_QWORD *)(v0 + 352);
  v50 = *(_QWORD *)(v0 + 336);
  v52 = *(_QWORD *)(v0 + 320);
  v54 = *(_QWORD *)(v0 + 296);
  v57 = *(_QWORD *)(v0 + 288);
  v61 = *(_QWORD *)(v0 + 280);
  v65 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v57);
  swift_task_dealloc(v61);
  swift_task_dealloc(v65);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100415300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_1003F1128();
  *(_QWORD *)(v0 + 528) = v29 | 0x2000000000000000;
  *(_QWORD *)(v0 + 520) = v28;
  v21 = *(_QWORD *)(v0 + 384);
  v22 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 336);
  v1 = *(_QWORD *)(v0 + 344);
  v3 = *(int **)(v0 + 328);
  v27 = *(_QWORD *)(v0 + 320);
  v25 = *(_QWORD *)(v0 + 312);
  v26 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 296);
  v24 = v5;
  v20 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 216);
  v23 = **(_BYTE **)(v0 + 256);
  (*(void (**)(void))(v25 + 16))();
  v9 = type metadata accessor for ObservedAdvertisement.Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v5, 1, 1, v9);
  v10 = (_QWORD *)(v7 + *(int *)(v1 + 20));
  v11 = v10[3];
  v12 = v10[4];
  sub_10001AA44(v10, v11);
  sub_100425884(v8, v6);
  sub_10012C644(v28, v29 | 0x2000000000000000);
  LOBYTE(v11) = sub_100ABA6B0(v11, v12);
  v14 = v10[3];
  v13 = v10[4];
  sub_10001AA44(v10, v14);
  dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)(v0 + 120), v14, *(_QWORD *)(v13 + 56));
  v15 = *(_QWORD *)(v0 + 120);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
  *(_QWORD *)(v0 + 536) = v16;
  v16(v4, v20, v22);
  v17 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  *(_BYTE *)(v4 + *(int *)(v17 + 20)) = v11;
  *(_QWORD *)(v4 + *(int *)(v17 + 24)) = v15;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v4, 0, 1, v17);
  *(_QWORD *)v2 = 0;
  *(_WORD *)(v2 + 8) = 769;
  *(_QWORD *)(v2 + 16) = v28;
  *(_QWORD *)(v2 + 24) = v29 | 0x2000000000000000;
  *(_BYTE *)(v2 + 32) = v23;
  *(_WORD *)(v2 + 33) = 0;
  *(_BYTE *)(v2 + 35) = 1;
  *(_DWORD *)(v2 + 36) = -1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v2 + v3[11], v27, v26);
  *(_BYTE *)(v2 + v3[14]) = 0;
  sub_100005CF0(v24, v2 + v3[12], (uint64_t *)&unk_101100320);
  sub_100005CF0(v4, v2 + v3[13], &qword_1010EF3F8);
  v18 = (_QWORD *)swift_task_alloc(dword_10111BABC);
  *(_QWORD *)(v0 + 544) = v18;
  *v18 = v0;
  v18[1] = sub_100414E10;
  return sub_100C6592C(*(_QWORD *)(v0 + 336));
}

uint64_t sub_10041553C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_log_type_t type;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;

  v1 = *(_QWORD *)(v0 + 552);
  v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 536);
  v3 = *(_QWORD *)(v0 + 432);
  v2 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 424);
  v5 = *(_QWORD *)(v0 + 392);
  v62 = *(_QWORD *)(v0 + 376);
  v66 = *(_QWORD *)(v0 + 352);
  v6 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 256);
  v59 = *(_QWORD *)(v0 + 232);
  v9 = *(_QWORD *)(v0 + 208);
  v10 = type metadata accessor for LocationFetcher(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v9 + *(int *)(v10 + 32), v4);
  sub_10005972C(v7, v6, type metadata accessor for RawSearchResult);
  v70(v5, v8, v62);
  sub_10005972C(v59, v66, type metadata accessor for BeaconKeyManager.IndexInformation);
  swift_errorRetain(v1);
  v11 = swift_errorRetain(v1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  v71 = v12;
  if (os_log_type_enabled(v12, v13))
  {
    v14 = *(_QWORD *)(v0 + 552);
    v55 = *(_QWORD *)(v0 + 520);
    v57 = *(_QWORD *)(v0 + 432);
    v60 = *(_QWORD *)(v0 + 528);
    v63 = *(_QWORD *)(v0 + 424);
    v67 = *(_QWORD *)(v0 + 440);
    v15 = *(_QWORD *)(v0 + 392);
    v16 = *(_QWORD *)(v0 + 376);
    v50 = *(_QWORD *)(v0 + 352);
    v48 = *(_QWORD *)(v0 + 384);
    v49 = *(_QWORD *)(v0 + 344);
    v17 = *(char **)(v0 + 272);
    v18 = swift_slowAlloc(45, -1);
    v52 = (uint64_t *)swift_slowAlloc(8, -1);
    v53 = swift_slowAlloc(64, -1);
    v73 = v53;
    *(_DWORD *)v18 = 16778499;
    type = v13;
    v19 = *v17;
    sub_1000126B0((uint64_t)v17, type metadata accessor for RawSearchResult);
    *(_BYTE *)(v0 + 560) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 560, v0 + 561, v18 + 4, v18 + 5);
    *(_QWORD *)(v0 + 128) = 1752392040;
    *(_WORD *)(v18 + 5) = 2160;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v18 + 7, v18 + 15);
    *(_WORD *)(v18 + 15) = 2081;
    v20 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v16, v20);
    *(_QWORD *)(v0 + 136) = sub_100016940(v21, v22, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v18 + 17, v18 + 25);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v15, v16);
    *(_WORD *)(v18 + 25) = 2082;
    v23 = (_QWORD *)(v50 + *(int *)(v49 + 20));
    v25 = v23[3];
    v24 = v23[4];
    sub_10001AA44(v23, v25);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v25, *(_QWORD *)(v24 + 16));
    *(_QWORD *)(v0 + 144) = sub_100016940(v26, v27, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v18 + 27, v18 + 35);
    swift_bridgeObjectRelease();
    sub_1000126B0(v50, type metadata accessor for BeaconKeyManager.IndexInformation);
    *(_WORD *)(v18 + 35) = 2114;
    swift_errorRetain(v14);
    v28 = _swift_stdlib_bridgeErrorToNSError(v14);
    *(_QWORD *)(v0 + 152) = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v18 + 37, v18 + 45);
    *v52 = v28;
    swift_errorRelease(v14);
    swift_errorRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v71, type, "Error saving advertisement status %hhufor beacon %{private,mask.hash}s,index %{public}serror: %{public}@.", (uint8_t *)v18, 0x2Du);
    v29 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v52, 1, v29);
    swift_slowDealloc(v52, -1, -1);
    swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v18, -1, -1);
    swift_release();

    swift_errorRelease(v14);
    sub_10012C494(v55, v60);
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v67, v63);
  }
  else
  {
    v30 = *(_QWORD *)(v0 + 552);
    v31 = *(_QWORD *)(v0 + 528);
    v32 = *(_QWORD *)(v0 + 520);
    v33 = *(_QWORD *)(v0 + 432);
    v64 = *(_QWORD *)(v0 + 424);
    v68 = *(_QWORD *)(v0 + 440);
    v34 = *(_QWORD *)(v0 + 384);
    v35 = *(_QWORD *)(v0 + 392);
    v36 = *(_QWORD *)(v0 + 376);
    v37 = *(_QWORD *)(v0 + 352);
    sub_1000126B0(*(_QWORD *)(v0 + 272), type metadata accessor for RawSearchResult);
    sub_10012C494(v32, v31);
    swift_release();
    swift_errorRelease(v30);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v36);
    sub_1000126B0(v37, type metadata accessor for BeaconKeyManager.IndexInformation);
    swift_errorRelease(v30);
    swift_errorRelease(v30);

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v68, v64);
  }
  v38 = *(_QWORD *)(v0 + 456);
  v40 = *(_QWORD *)(v0 + 440);
  v39 = *(_QWORD *)(v0 + 448);
  v42 = *(_QWORD *)(v0 + 408);
  v41 = *(_QWORD *)(v0 + 416);
  v43 = *(_QWORD *)(v0 + 392);
  v44 = *(_QWORD *)(v0 + 400);
  v46 = *(_QWORD *)(v0 + 360);
  v45 = *(_QWORD *)(v0 + 368);
  v54 = *(_QWORD *)(v0 + 352);
  v56 = *(_QWORD *)(v0 + 336);
  v58 = *(_QWORD *)(v0 + 320);
  v61 = *(_QWORD *)(v0 + 296);
  v65 = *(_QWORD *)(v0 + 288);
  v69 = *(_QWORD *)(v0 + 280);
  v72 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  swift_task_dealloc(v58);
  swift_task_dealloc(v61);
  swift_task_dealloc(v65);
  swift_task_dealloc(v69);
  swift_task_dealloc(v72);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100415A9C(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, unint64_t *a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  NSObject *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;
  void (*v90)(_QWORD, _QWORD, _QWORD);
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  uint64_t result;
  uint64_t v96;
  uint64_t v97;
  int v98;
  double v99;
  double v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t *v112;
  char *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  NSObject *v121;
  _BOOL4 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  NSObject *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  int *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  char *v164;
  NSObject *v165;
  os_log_type_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  double v172;
  double v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  char *v177;
  _QWORD *v178;
  uint64_t v179;
  char *v180;
  NSObject *v181;
  os_log_type_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  os_log_t v199;
  char *v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  NSObject *v204;
  os_log_type_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  _BYTE *v219;
  unint64_t v220;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  void (*v225)(NSObject *, uint64_t, uint64_t);
  int v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t *v230;
  char *v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  _QWORD *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  NSObject *v239;
  char *v240;
  uint64_t v241;
  int *v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t *v250;
  char *v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _BYTE *v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  os_log_t v264;
  uint64_t v265;
  uint64_t v266;
  __int128 v267;
  ValueMetadata *v268;
  unint64_t v269;
  _QWORD v270[11];

  LODWORD(v264) = a8;
  v258 = a7;
  v255 = a6;
  v243 = a4;
  v245 = type metadata accessor for FetchResponse.SearchResult(0);
  __chkstk_darwin(v245);
  v246 = (uint64_t)&v224 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TimeBasedKey(0);
  v16 = __chkstk_darwin(v15);
  v257 = (char *)&v224 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v231 = (char *)&v224 - v19;
  v20 = __chkstk_darwin(v18);
  v230 = (uint64_t *)((char *)&v224 - v21);
  v22 = __chkstk_darwin(v20);
  v235 = (uint64_t *)((char *)&v224 - v23);
  v24 = __chkstk_darwin(v22);
  v234 = (uint64_t)&v224 - v25;
  __chkstk_darwin(v24);
  v244 = (uint64_t *)((char *)&v224 - v26);
  v260 = type metadata accessor for Logger(0);
  v263 = *(_QWORD *)(v260 - 8);
  v27 = __chkstk_darwin(v260);
  v253 = (unint64_t)&v224 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v229 = (char *)&v224 - v30;
  v31 = __chkstk_darwin(v29);
  v236 = (char *)&v224 - v32;
  __chkstk_darwin(v31);
  v248 = (char *)&v224 - v33;
  v261 = type metadata accessor for UUID(0);
  v259 = *(_QWORD *)(v261 - 8);
  v34 = __chkstk_darwin(v261);
  v256 = (char *)&v224 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v34);
  v228 = (char *)&v224 - v37;
  v38 = __chkstk_darwin(v36);
  v251 = (char *)&v224 - v39;
  __chkstk_darwin(v38);
  v239 = ((char *)&v224 - v40);
  v41 = sub_10001A9A8(&qword_1011091A0);
  __chkstk_darwin(v41);
  v240 = (char *)&v224 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v232);
  v250 = (uint64_t *)((char *)&v224 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  v252 = type metadata accessor for Date(0);
  v247 = *(_QWORD *)(v252 - 8);
  v44 = __chkstk_darwin(v252);
  v233 = (char *)&v224 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v249 = (uint64_t)&v224 - v46;
  v47 = type metadata accessor for RawSearchResult(0);
  v238 = *(_QWORD *)(v47 - 8);
  v48 = __chkstk_darwin(v47);
  v237 = (char *)&v224 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v48);
  v51 = (char *)&v224 - v50;
  v52 = type metadata accessor for BeaconPayloadv1(0);
  v53 = __chkstk_darwin(v52);
  v55 = (char *)&v224 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  v57 = (char *)&v224 - v56;
  v241 = v15;
  v58 = *(int *)(v15 + 24);
  v262 = a5;
  v59 = (_OWORD *)((char *)a5 + v58);
  v60 = v59[1];
  *(_OWORD *)&v270[5] = *v59;
  *(_OWORD *)&v270[7] = v60;
  *(_OWORD *)&v270[9] = v59[2];
  v61 = a1;
  sub_10001BBBC(a2, a3);
  sub_1007DFD44();
  v62 = a2;
  v63 = a2;
  v64 = a3;
  v65 = v254;
  BeaconPayloadv1.init(using:data:advertisement:)((uint64_t)v61, v63, a3);
  v66 = v264;
  if (v65)
  {
    v67 = type metadata accessor for LocationFetcher(0);
    v68 = v263;
    v69 = v253;
    v70 = v260;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v263 + 16))(v253, v255 + *(int *)(v67 + 32), v260);
    v71 = v259;
    v72 = v261;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v259 + 16))(v256, v258, v261);
    v73 = sub_10005972C((uint64_t)v262, (uint64_t)v257, type metadata accessor for TimeBasedKey);
    v74 = Logger.logObject.getter(v73);
    LODWORD(v262) = static os_log_type_t.error.getter(v74);
    if (os_log_type_enabled(v74, (os_log_type_t)v262))
    {
      v255 = 0;
      v254 = v65;
      v75 = swift_slowAlloc(42, -1);
      v76 = v72;
      v77 = v71;
      v78 = swift_slowAlloc(64, -1);
      v270[0] = v78;
      *(_DWORD *)v75 = 141558787;
      *(_QWORD *)&v267 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v267, (char *)&v267 + 8, v75 + 4, v75 + 12);
      *(_WORD *)(v75 + 12) = 2081;
      v79 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v80 = v256;
      v81 = dispatch thunk of CustomStringConvertible.description.getter(v76, v79);
      *(_QWORD *)&v267 = sub_100016940(v81, v82, v270);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v267, (char *)&v267 + 8, v75 + 14, v75 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v77 + 8))(v80, v76);
      *(_WORD *)(v75 + 22) = 2082;
      if ((_BYTE)v264)
      {
        v83 = (uint64_t *)v257;
        if (v264 == 1)
        {
          v136 = 0x61646E6F6365732ELL;
          v135 = 0xEA00000000007972;
        }
        else
        {
          v135 = 0x8000000100EC6940;
          v136 = 0xD000000000000010;
        }
        v134 = v254;
      }
      else
      {
        v136 = 0x7972616D6972702ELL;
        v135 = 0xE800000000000000;
        v134 = v254;
        v83 = (uint64_t *)v257;
      }
      *(_QWORD *)&v267 = sub_100016940(v136, v135, v270);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v267, (char *)&v267 + 8, v75 + 24, v75 + 32);
      swift_bridgeObjectRelease();
      *(_WORD *)(v75 + 32) = 2050;
      v137 = *v83;
      sub_1000126B0((uint64_t)v83, type metadata accessor for TimeBasedKey);
      *(_QWORD *)&v267 = v137;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v267, (char *)&v267 + 8, v75 + 34, v75 + 42);
      _os_log_impl((void *)&_mh_execute_header, v74, (os_log_type_t)v262, "Packet decryption failed for beacon %{private,mask.hash}s, sequence: %{public}s, index: %{public}llu.", (uint8_t *)v75, 0x2Au);
      swift_arrayDestroy(v78, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v78, -1, -1);
      swift_slowDealloc(v75, -1, -1);
      swift_errorRelease(v134);

      return (*(uint64_t (**)(unint64_t, uint64_t))(v263 + 8))(v253, v260);
    }
    else
    {
      sub_1000126B0((uint64_t)v257, type metadata accessor for TimeBasedKey);
      swift_errorRelease(v65);
      (*(void (**)(_BYTE *, uint64_t))(v71 + 8))(v256, v72);

      return (*(uint64_t (**)(unint64_t, uint64_t))(v68 + 8))(v69, v70);
    }
  }
  v84 = v239;
  v227 = v62;
  v253 = v64;
  v242 = (int *)v52;
  v256 = v51;
  sub_1000126EC((uint64_t)v55, (uint64_t)v57, type metadata accessor for BeaconPayloadv1);
  v85 = v66;
  v254 = 0;
  if (v66)
  {
    v86 = v261;
    v87 = v259;
    v88 = v242;
    v89 = v258;
    v90 = (void (*)(_QWORD, _QWORD, _QWORD))v250;
    v91 = v249;
    if (v85 == 1)
    {
      v97 = v245;
      v92 = *(unsigned __int8 *)(a9 + *(int *)(v245 + 28));
      if (v92 == 6)
        v93 = 12;
      else
        v93 = *(unsigned __int8 *)(a9 + *(int *)(v245 + 28));
      if (v92 == 7)
        v94 = 13;
      else
        v94 = v93;
      if (v92 == 14)
        v98 = 12;
      else
        v98 = v94;
    }
    else
    {
      v97 = v245;
      v98 = *(unsigned __int8 *)(a9 + *(int *)(v245 + 28));
    }
    v226 = v98;
    v96 = v247;
  }
  else
  {
    v97 = v245;
    v226 = *(unsigned __int8 *)(a9 + *(int *)(v245 + 28));
    v86 = v261;
    v87 = v259;
    v88 = v242;
    v89 = v258;
    v96 = v247;
    v90 = (void (*)(_QWORD, _QWORD, _QWORD))v250;
    v91 = v249;
  }
  LODWORD(v224) = v57[v88[10]];
  (*(void (**)(uint64_t, char *, uint64_t))(v96 + 16))(v91, &v57[v88[5]], v252);
  v99 = *(double *)&v57[v88[7]];
  v100 = *(double *)&v57[v88[8]];
  v101 = *(double *)&v57[v88[9]];
  v102 = *(int *)(v97 + 24);
  v257 = (char *)a9;
  sub_10000F9B8(a9 + v102, (uint64_t)v90, (uint64_t *)&unk_1010EA690);
  v225 = *(void (**)(NSObject *, uint64_t, uint64_t))(v87 + 16);
  v225(v84, v89, v86);
  v103 = *v262;
  if ((_BYTE)v264)
  {
    v104 = v243;
    v105 = v255;
    v106 = v251;
    if (v264 == 1)
    {
      v268 = &type metadata for SecondaryIndex;
      v107 = sub_100336B24();
    }
    else
    {
      v268 = &type metadata for SecureLocationsIndex;
      v107 = sub_1003D155C();
    }
    v269 = v107;
    *(_QWORD *)&v267 = v103;
  }
  else
  {
    v268 = &type metadata for PrimaryIndex;
    v269 = sub_100336BAC();
    *(_QWORD *)&v267 = v103;
    v104 = v243;
    v105 = v255;
    v106 = v251;
  }
  sub_10000F9FC(&v267, (uint64_t)v270);
  v108 = (uint64_t)v240;
  (*(void (**)(char *, NSObject *, uint64_t))(v87 + 32))(v240, v84, v86);
  v109 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  sub_10000F9FC((__int128 *)v270, v108 + *(int *)(v109 + 20));
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 56))(v108, 0, 1, v109);
  v255 = v104;
  v110 = BYTE4(v104);
  if (v104 == 3)
    v110 = 0;
  sub_10096339C(v224, v249, v226, (uint64_t)v250, v108, v110 | ((v104 == 3) << 8), v256, v99, v100, v101);
  v111 = type metadata accessor for LocationFetcher(0);
  v112 = *(uint64_t **)(v263 + 16);
  v113 = v248;
  v249 = v105 + *(int *)(v111 + 32);
  v114 = v260;
  v250 = v112;
  ((void (*)(char *))v112)(v248);
  v225(v106, v258, v86);
  v115 = v262;
  v116 = (uint64_t)v244;
  sub_10005972C((uint64_t)v262, (uint64_t)v244, type metadata accessor for TimeBasedKey);
  v117 = v246;
  sub_10005972C((uint64_t)v257, v246, type metadata accessor for FetchResponse.SearchResult);
  v118 = v227;
  v119 = v253;
  sub_10001BBBC(v227, v253);
  v120 = sub_10001BBBC(v118, v119);
  v121 = Logger.logObject.getter(v120);
  LODWORD(v240) = static os_log_type_t.default.getter(v121);
  v122 = os_log_type_enabled(v121, (os_log_type_t)v240);
  v257 = v57;
  if (v122)
  {
    v239 = v121;
    v123 = swift_slowAlloc(132, -1);
    v124 = swift_slowAlloc(224, -1);
    v266 = v124;
    *(_DWORD *)v123 = 141561091;
    v270[0] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v270, &v270[1], v123 + 4, v123 + 12);
    *(_WORD *)(v123 + 12) = 2081;
    v125 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v126 = v251;
    v127 = v261;
    v128 = dispatch thunk of CustomStringConvertible.description.getter(v261, v125);
    v270[0] = sub_100016940(v128, v129, &v266);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v270, &v270[1], v123 + 14, v123 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v259 + 8))(v126, v127);
    *(_WORD *)(v123 + 22) = 2082;
    v224 = v124;
    if ((_BYTE)v264)
    {
      if (v264 == 1)
        v130 = 0x61646E6F6365732ELL;
      else
        v130 = 0xD000000000000010;
      if (v264 == 1)
        v131 = 0xEA00000000007972;
      else
        v131 = 0x8000000100EC6940;
    }
    else
    {
      v130 = 0x7972616D6972702ELL;
      v131 = 0xE800000000000000;
    }
    v138 = v246;
    v139 = v244;
    v270[0] = sub_100016940(v130, v131, &v266);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v270, &v270[1], v123 + 24, v123 + 32);
    swift_bridgeObjectRelease();
    *(_WORD *)(v123 + 32) = 2050;
    v140 = *v139;
    sub_1000126B0((uint64_t)v139, type metadata accessor for TimeBasedKey);
    v270[0] = v140;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v270, &v270[1], v123 + 34, v123 + 42);
    *(_WORD *)(v123 + 42) = 2082;
    v141 = (uint64_t *)v257;
    swift_beginAccess(v257, &v267, 0, 0);
    v142 = v242;
    v143 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v144 = dispatch thunk of CustomStringConvertible.description.getter(v252, v143);
    v270[0] = sub_100016940(v144, v145, &v266);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v270, &v270[1], v123 + 44, v123 + 52);
    swift_bridgeObjectRelease();
    *(_WORD *)(v123 + 52) = 2082;
    v146 = Optional.debugDescription.getter(v232);
    v270[0] = sub_100016940(v146, v147, &v266);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v270, &v270[1], v123 + 54, v123 + 62);
    swift_bridgeObjectRelease();
    sub_1000126B0(v138, type metadata accessor for FetchResponse.SearchResult);
    *(_WORD *)(v123 + 62) = 2082;
    v148 = sub_1002E3DF8(v226);
    v270[0] = sub_100016940(v148, v149, &v266);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v270, &v270[1], v123 + 64, v123 + 72);
    swift_bridgeObjectRelease();
    *(_WORD *)(v123 + 72) = 2049;
    v270[0] = *(uint64_t *)((char *)v141 + v142[7]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v270, &v270[1], v123 + 74, v123 + 82);
    *(_WORD *)(v123 + 82) = 2049;
    v270[0] = *(uint64_t *)((char *)v141 + v142[8]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v270, &v270[1], v123 + 84, v123 + 92);
    *(_WORD *)(v123 + 92) = 2050;
    v270[0] = *(uint64_t *)((char *)v141 + v142[9]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v270, &v270[1], v123 + 94, v123 + 102);
    *(_WORD *)(v123 + 102) = 2160;
    v270[0] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v270, &v270[1], v123 + 104, v123 + 112);
    *(_WORD *)(v123 + 112) = 2081;
    v150 = *v141;
    v151 = v141[1];
    sub_10001BBBC(*v141, v151);
    v152 = sub_10001BBBC(v150, v151);
    v153 = static MACAddress.length.getter(v152);
    sub_1002F7C0C(v153, v150, v151);
    sub_10001BC14(v150, v151);
    v154 = v270[0];
    v155 = v270[1];
    v156 = Data.hexString.getter(v270[0], v270[1]);
    v158 = v157;
    sub_10001BC14(v154, v155);
    v270[0] = sub_100016940(v156, v158, &v266);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v270, &v270[1], v123 + 114, v123 + 122);
    swift_bridgeObjectRelease();
    *(_WORD *)(v123 + 122) = 2082;
    if (v255 == 3)
    {
      v159 = 0xE300000000000000;
      v160 = 7104878;
    }
    else
    {
      LOBYTE(v270[0]) = BYTE4(v243);
      v161 = sub_1001B5E80();
      v160 = BinaryInteger.description.getter(&type metadata for UInt8, v161);
      v159 = v162;
    }
    v133 = v260;
    v163 = v263;
    v164 = v248;
    v165 = v239;
    v166 = v240;
    v270[0] = sub_100016940(v160, v159, &v266);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v270, &v270[1], v123 + 124, v123 + 132);
    swift_bridgeObjectRelease();
    v167 = v227;
    v168 = v253;
    sub_10001BC14(v227, v253);
    sub_10001BC14(v167, v168);
    _os_log_impl((void *)&_mh_execute_header, v165, v166, "Packet decrypted for beacon %{private,mask.hash}s,\nsequence: %{public}s,\nindex: %{public}llu,\nlocationTimestamp: %{public}s,\nscanDate: %{public}s,\nsource: %{public}s,\nlatitude: %{private}f,\nlongitude: %{private}f,\nhorizontalAccuracy: %{public}f,\nadvertisementAddress: %{private,mask.hash}s,\nhint: %{public}s.", (uint8_t *)v123, 0x84u);
    v169 = v224;
    swift_arrayDestroy(v224, 7, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v169, -1, -1);
    swift_slowDealloc(v123, -1, -1);

    v132 = *(NSObject **)(v163 + 8);
    ((void (*)(char *, uint64_t))v132)(v164, v133);
    v57 = v257;
    v115 = v262;
  }
  else
  {
    sub_1000126B0(v116, type metadata accessor for TimeBasedKey);
    (*(void (**)(char *, uint64_t))(v259 + 8))(v251, v261);
    sub_1000126B0(v117, type metadata accessor for FetchResponse.SearchResult);
    sub_10001BC14(v118, v119);
    sub_10001BC14(v118, v119);

    v132 = *(NSObject **)(v263 + 8);
    ((void (*)(char *, uint64_t))v132)(v113, v114);
    v133 = v114;
  }
  swift_beginAccess(v57, v270, 0, 0);
  v170 = DateInterval.contains(_:)(&v57[v242[5]]);
  if ((v170 & 1) != 0)
  {
    v171 = v233;
    DateInterval.start.getter(v170);
    v172 = Date.timeIntervalSince(_:)(v171);
    (*(void (**)(char *, uint64_t))(v247 + 8))(v171, v252);
    v173 = fabs(v172);
    if ((~*(_QWORD *)&v173 & 0x7FF0000000000000) != 0)
    {
      v57 = v231;
      if (v173 > -1.0)
      {
        if (v173 < 1.84467441e19)
        {
          if (qword_1010E9D08 == -1)
          {
LABEL_52:
            v174 = v254;
            OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
            v255 = v174;
            v175 = sub_100C1A848(v266);
            swift_bridgeObjectRelease();
            if ((v175 & 0x8000000000000000) != 0)
            {
              result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
              __break(1u);
              return result;
            }
            v176 = v229;
            if (v175 <= (unint64_t)v173)
            {
              ((void (*)(char *, uint64_t, uint64_t))v250)(v229, v249, v133);
              v177 = v228;
              v225(v228, v258, v261);
              v178 = v262;
              sub_10005972C((uint64_t)v262, (uint64_t)v230, type metadata accessor for TimeBasedKey);
              v179 = sub_10005972C((uint64_t)v178, (uint64_t)v57, type metadata accessor for TimeBasedKey);
              v180 = v176;
              v181 = Logger.logObject.getter(v179);
              v182 = static os_log_type_t.error.getter(v181);
              v183 = v182;
              if (os_log_type_enabled(v181, v182))
              {
                v184 = swift_slowAlloc(52, -1);
                v185 = swift_slowAlloc(96, -1);
                v266 = v185;
                *(_DWORD *)v184 = 141559043;
                v265 = 1752392040;
                v264 = v181;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v265, &v266, v184 + 4, v184 + 12);
                *(_WORD *)(v184 + 12) = 2081;
                v186 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
                LODWORD(v262) = v183;
                v187 = v177;
                v188 = v261;
                v189 = dispatch thunk of CustomStringConvertible.description.getter(v261, v186);
                v265 = sub_100016940(v189, v190, &v266);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v265, &v266, v184 + 14, v184 + 22);
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(v259 + 8))(v187, v188);
                *(_WORD *)(v184 + 22) = 2050;
                v191 = *v230;
                sub_1000126B0((uint64_t)v230, type metadata accessor for TimeBasedKey);
                v265 = v191;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v265, &v266, v184 + 24, v184 + 32);
                *(_WORD *)(v184 + 32) = 2082;
                v192 = type metadata accessor for DateInterval(0);
                v193 = sub_100006204(&qword_1010F2168, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
                v194 = dispatch thunk of CustomStringConvertible.description.getter(v192, v193);
                v265 = sub_100016940(v194, v195, &v266);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v265, &v266, v184 + 34, v184 + 42);
                swift_bridgeObjectRelease();
                sub_1000126B0((uint64_t)v57, type metadata accessor for TimeBasedKey);
                *(_WORD *)(v184 + 42) = 2082;
                v196 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
                v197 = dispatch thunk of CustomStringConvertible.description.getter(v252, v196);
                v265 = sub_100016940(v197, v198, &v266);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v265, &v266, v184 + 44, v184 + 52);
                swift_bridgeObjectRelease();
                v199 = v264;
                _os_log_impl((void *)&_mh_execute_header, v264, (os_log_type_t)v262, "Calculated model date for beacon %{private,mask.hash}s,\nindex %{public}llu differs from the date from package.\nCalculated date interval %{public}s,\ntimestamp from package %{public}s.", (uint8_t *)v184, 0x34u);
                swift_arrayDestroy(v185, 3, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v185, -1, -1);
                swift_slowDealloc(v184, -1, -1);

                (*(void (**)(char *, uint64_t))(v263 + 8))(v180, v260);
              }
              else
              {
                sub_1000126B0((uint64_t)v230, type metadata accessor for TimeBasedKey);
                (*(void (**)(char *, uint64_t))(v259 + 8))(v177, v261);
                sub_1000126B0((uint64_t)v57, type metadata accessor for TimeBasedKey);

                ((void (*)(char *, uint64_t))v132)(v180, v133);
              }
            }
            v217 = v238;
            v218 = (uint64_t)v237;
            v219 = v256;
            goto LABEL_62;
          }
LABEL_70:
          swift_once(&qword_1010E9D08, sub_10059A6E0);
          goto LABEL_52;
        }
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_69;
  }
  v264 = v132;
  v200 = v236;
  ((void (*)(char *, uint64_t, uint64_t))v250)(v236, v249, v133);
  v201 = v234;
  sub_10005972C((uint64_t)v115, v234, type metadata accessor for TimeBasedKey);
  v202 = v235;
  v203 = sub_10005972C((uint64_t)v115, (uint64_t)v235, type metadata accessor for TimeBasedKey);
  v204 = Logger.logObject.getter(v203);
  v205 = static os_log_type_t.error.getter(v204);
  if (os_log_type_enabled(v204, v205))
  {
    v206 = swift_slowAlloc(32, -1);
    v207 = swift_slowAlloc(64, -1);
    v266 = v207;
    *(_DWORD *)v206 = 136446722;
    v208 = type metadata accessor for DateInterval(0);
    v209 = sub_100006204(&qword_1010F2168, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
    v210 = dispatch thunk of CustomStringConvertible.description.getter(v208, v209);
    v265 = sub_100016940(v210, v211, &v266);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v265, &v266, v206 + 4, v206 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v201, type metadata accessor for TimeBasedKey);
    *(_WORD *)(v206 + 12) = 2082;
    v212 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v213 = dispatch thunk of CustomStringConvertible.description.getter(v252, v212);
    v265 = sub_100016940(v213, v214, &v266);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v265, &v266, v206 + 14, v206 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v206 + 22) = 2050;
    v215 = *v235;
    sub_1000126B0((uint64_t)v235, type metadata accessor for TimeBasedKey);
    v265 = v215;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v265, &v266, v206 + 24, v206 + 32);
    _os_log_impl((void *)&_mh_execute_header, v204, v205, "Calculated model date doesn't contains the date from package.\nCalculated date interval %{public}s,\ntimestamp from package %{public}s,\nindex: %{public}llu.", (uint8_t *)v206, 0x20u);
    swift_arrayDestroy(v207, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v207, -1, -1);
    swift_slowDealloc(v206, -1, -1);

    v216 = v236;
  }
  else
  {
    sub_1000126B0((uint64_t)v202, type metadata accessor for TimeBasedKey);
    sub_1000126B0(v201, type metadata accessor for TimeBasedKey);

    v216 = v200;
  }
  ((void (*)(char *, uint64_t))v264)(v216, v133);
  v217 = v238;
  v218 = (uint64_t)v237;
  v219 = v256;
LABEL_62:
  sub_10005972C((uint64_t)v219, v218, type metadata accessor for RawSearchResult);
  v220 = *a10;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a10);
  *a10 = v220;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v220 = sub_1007C98E8(0, *(_QWORD *)(v220 + 16) + 1, 1, v220);
    *a10 = v220;
  }
  v223 = *(_QWORD *)(v220 + 16);
  v222 = *(_QWORD *)(v220 + 24);
  if (v223 >= v222 >> 1)
  {
    v220 = sub_1007C98E8(v222 > 1, v223 + 1, 1, v220);
    *a10 = v220;
  }
  *(_QWORD *)(v220 + 16) = v223 + 1;
  sub_1000126EC(v218, v220+ ((*(unsigned __int8 *)(v217 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v217 + 80))+ *(_QWORD *)(v217 + 72) * v223, type metadata accessor for RawSearchResult);
  sub_1000126B0((uint64_t)v219, type metadata accessor for RawSearchResult);
  return sub_1000126B0((uint64_t)v257, type metadata accessor for BeaconPayloadv1);
}

BOOL sub_1004176BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnedBeaconRecord(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2 + *(int *)(v8 + 20), v4);
  v9 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)(a1, v7, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (a2 & 1) == 0;
}

uint64_t sub_10041779C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int EnumCaseMultiPayload;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v65 = a6;
  v63 = a4;
  v64 = a5;
  v62 = a1;
  v67 = type metadata accessor for UUID(0);
  v71 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v72 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v68 = *(_QWORD *)(v8 - 8);
  v69 = v8;
  __chkstk_darwin(v8);
  v70 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_10001A9A8(&qword_1010FB2D8);
  v61 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v60 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v14);
  v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for OwnedBeaconRecord(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v59 - v22;
  v66 = a2;
  sub_10080B950(a2, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_100004048((uint64_t)v16, (uint64_t *)&unk_1010F47C0);
    v24 = v70;
LABEL_8:
    v30 = v67;
    v28 = v71;
    goto LABEL_9;
  }
  sub_1000126EC((uint64_t)v16, (uint64_t)v23, type metadata accessor for OwnedBeaconRecord);
  sub_10005972C((uint64_t)&v23[*(int *)(v17 + 24)], (uint64_t)v13, type metadata accessor for StableIdentifier);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13, v11);
  v24 = v70;
  if (EnumCaseMultiPayload != 3)
  {
    sub_1000126B0((uint64_t)v23, type metadata accessor for OwnedBeaconRecord);
    sub_1000126B0((uint64_t)v13, type metadata accessor for StableIdentifier);
    goto LABEL_8;
  }
  v26 = sub_10001A9A8((uint64_t *)&unk_1010F46F0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27 = v13[*(int *)(v26 + 96)];
  v28 = v71;
  v29 = v13;
  v30 = v67;
  (*(void (**)(char *, uint64_t))(v71 + 8))(v29, v67);
  v31 = *(_QWORD *)(v63 + 16);
  if (!v31)
  {
LABEL_21:
    sub_1000126B0((uint64_t)v23, type metadata accessor for OwnedBeaconRecord);
LABEL_9:
    v33 = v72;
    v34 = v66;
    v35 = type metadata accessor for LocationFetcher(0);
    v37 = v68;
    v36 = v69;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v24, v64 + *(int *)(v35 + 32), v69);
    sub_10005972C(v65, (uint64_t)v21, type metadata accessor for OwnedBeaconRecord);
    v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 16))(v33, v34, v30);
    v39 = Logger.logObject.getter(v38);
    v40 = v28;
    v41 = static os_log_type_t.default.getter(v39);
    if (os_log_type_enabled(v39, v41))
    {
      v42 = swift_slowAlloc(42, -1);
      v67 = swift_slowAlloc(64, -1);
      v75 = v67;
      *(_DWORD *)v42 = 141558787;
      v73 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v42 + 4, v42 + 12);
      *(_WORD *)(v42 + 12) = 2081;
      v43 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v44 = dispatch thunk of CustomStringConvertible.description.getter(v30, v43);
      v73 = sub_100016940(v44, v45, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v42 + 14, v42 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v21, type metadata accessor for OwnedBeaconRecord);
      *(_WORD *)(v42 + 22) = 2160;
      v73 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v42 + 24, v42 + 32);
      *(_WORD *)(v42 + 32) = 2081;
      v46 = v72;
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v30, v43);
      v73 = sub_100016940(v47, v48, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v42 + 34, v42 + 42);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v46, v30);
      _os_log_impl((void *)&_mh_execute_header, v39, v41, "Multipart beacon %{private,mask.hash}s peerIdentifiersWithMultipartPosition did not find partId for %{private,mask.hash}s.", (uint8_t *)v42, 0x2Au);
      v49 = v67;
      swift_arrayDestroy(v67, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v42, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v70, v69);
    }
    else
    {
      sub_1000126B0((uint64_t)v21, type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v72, v30);

      return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v24, v36);
    }
  }
  if (*(unsigned __int8 *)(v63 + 32) != v27)
  {
    v32 = 0;
    v51 = v31 - 1;
    while (v51 != v32)
    {
      v52 = *(unsigned __int8 *)(v63 + 33 + v32++);
      if (v52 == v27)
      {
        if ((unint64_t)(v32 - 1) < 0xFF)
          goto LABEL_16;
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
        __break(1u);
        return result;
      }
    }
    goto LABEL_21;
  }
  LOBYTE(v32) = 0;
LABEL_16:
  v53 = (uint64_t)v60;
  v54 = *(int *)(v59 + 48);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v60, v66, v30);
  *(_BYTE *)(v53 + v54) = v32;
  v55 = v62;
  v56 = *v62;
  if ((swift_isUniquelyReferenced_nonNull_native(*v62) & 1) == 0)
    v56 = sub_1007C9B88(0, *(_QWORD *)(v56 + 16) + 1, 1, v56);
  v58 = *(_QWORD *)(v56 + 16);
  v57 = *(_QWORD *)(v56 + 24);
  if (v58 >= v57 >> 1)
    v56 = sub_1007C9B88(v57 > 1, v58 + 1, 1, v56);
  *(_QWORD *)(v56 + 16) = v58 + 1;
  sub_100005CF0(v53, v56+ ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(_QWORD *)(v61 + 72) * v58, &qword_1010FB2D8);
  *v55 = v56;
  return sub_1000126B0((uint64_t)v23, type metadata accessor for OwnedBeaconRecord);
}

Swift::Int sub_100417E8C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = (_QWORD *)sub_10088F22C(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_100418B70(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_100417EF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 400))(v3, v4);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t type metadata accessor for LocationFetcher(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FB450;
  if (!qword_1010FB450)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationFetcher);
  return result;
}

uint64_t sub_100417F80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char v6;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 400))(v3, v4);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v6 & 1;
  return result;
}

unint64_t sub_100417FD0()
{
  unint64_t result;

  result = qword_1010FB178;
  if (!qword_1010FB178)
  {
    result = swift_getWitnessTable(asc_100E6AA94, &type metadata for ObservationStoreService.ObservationStoreServiceError);
    atomic_store(result, (unint64_t *)&qword_1010FB178);
  }
  return result;
}

uint64_t sub_100418014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for LocationFetcher(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v7 + 24));
  v8 = v7 + *(int *)(v1 + 32);
  v9 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v6));
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, ((v6 + 47) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_100418114@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = type metadata accessor for LocationFetcher(0);
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64)
      + ((*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1003FF9E4((_QWORD *)(v1 + v4), *(_QWORD *)(v1 + ((v4 + 47) & 0xFFFFFFFFFFFFF8)), a1);
}

Swift::Int sub_100418170(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::Int v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  _QWORD *v123;
  Swift::Int v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t RequestBeacon;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  Swift::Int v140;
  uint64_t v141;

  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  v3 = *(_QWORD *)(RequestBeacon - 8);
  v4 = __chkstk_darwin(RequestBeacon);
  v129 = (uint64_t)&v123 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v139 = (uint64_t)&v123 - v7;
  v8 = __chkstk_darwin(v6);
  v136 = (uint64_t)&v123 - v9;
  __chkstk_darwin(v8);
  v135 = (uint64_t)&v123 - v10;
  v11 = a1[1];
  result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0)
      goto LABEL_141;
    if (v11)
      return sub_100419F40(0, v11, 1, a1);
    return result;
  }
  if (v11 >= 0)
    v13 = v11;
  else
    v13 = v11 + 1;
  if (v11 < -1)
    goto LABEL_149;
  v126 = v3;
  v124 = result;
  v132 = v1;
  if (v11 < 2)
  {
    v17 = _swiftEmptyArrayStorage;
    v131 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    if (v11 != 1)
    {
      v20 = _swiftEmptyArrayStorage[2];
      v19 = (char *)_swiftEmptyArrayStorage;
LABEL_106:
      v115 = v19;
      v123 = v17;
      if (v20 >= 2)
      {
        v116 = *a1;
        do
        {
          v117 = v20 - 2;
          if (v20 < 2)
            goto LABEL_136;
          if (!v116)
            goto LABEL_148;
          v118 = *(_QWORD *)&v115[16 * v117 + 32];
          v119 = *(_QWORD *)&v115[16 * v20 + 24];
          v120 = v132;
          sub_10041A5C4(v116 + *(_QWORD *)(v126 + 72) * v118, v116 + *(_QWORD *)(v126 + 72) * *(_QWORD *)&v115[16 * v20 + 16], v116 + *(_QWORD *)(v126 + 72) * v119, v131);
          v132 = v120;
          if (v120)
            break;
          if (v119 < v118)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native(v115) & 1) == 0)
            v115 = sub_10088F088((uint64_t)v115);
          if (v117 >= *((_QWORD *)v115 + 2))
            goto LABEL_138;
          v121 = &v115[16 * v117 + 32];
          *(_QWORD *)v121 = v118;
          *((_QWORD *)v121 + 1) = v119;
          v122 = *((_QWORD *)v115 + 2);
          if (v20 > v122)
            goto LABEL_139;
          memmove(&v115[16 * v20 + 16], &v115[16 * v20 + 32], 16 * (v122 - v20));
          *((_QWORD *)v115 + 2) = v122 - 1;
          v20 = v122 - 1;
        }
        while (v122 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease();
      v123[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v123 = _swiftEmptyArrayStorage;
  }
  else
  {
    v14 = v13 >> 1;
    v15 = static Array._allocateBufferUninitialized(minimumCapacity:)(v13 >> 1, RequestBeacon);
    *(_QWORD *)(v15 + 16) = v14;
    v16 = *(unsigned __int8 *)(v3 + 80);
    v123 = (_QWORD *)v15;
    v131 = v15 + ((v16 + 32) & ~v16);
  }
  v18 = 0;
  v19 = (char *)_swiftEmptyArrayStorage;
  v138 = a1;
  while (1)
  {
    v21 = v18;
    v22 = v18 + 1;
    v130 = v18;
    if (v18 + 1 >= v11)
    {
      v30 = v18 + 1;
      goto LABEL_58;
    }
    v23 = *a1;
    v24 = *(_QWORD *)(v3 + 72);
    v25 = v135;
    sub_10005972C(v23 + v24 * v22, v135, type metadata accessor for FetchRequestBeacon);
    v140 = v11;
    v26 = v136;
    v27 = sub_10005972C(v23 + v24 * v21, v136, type metadata accessor for FetchRequestBeacon);
    v137 = UUID.hashValue.getter(v27);
    v134 = UUID.hashValue.getter(v137);
    v28 = v26;
    v29 = v140;
    sub_1000126B0(v28, type metadata accessor for FetchRequestBeacon);
    sub_1000126B0(v25, type metadata accessor for FetchRequestBeacon);
    v30 = v21 + 2;
    v127 = v23;
    v141 = v24;
    if (v21 + 2 < v29)
    {
      v125 = v19;
      v128 = v24 * v22;
      v31 = v23;
      v32 = v24 * v30;
      while (1)
      {
        v33 = v135;
        v34 = v137 < v134;
        sub_10005972C(v31 + v32, v135, type metadata accessor for FetchRequestBeacon);
        v35 = v136;
        v36 = sub_10005972C(v31 + v128, v136, type metadata accessor for FetchRequestBeacon);
        v37 = UUID.hashValue.getter(v36);
        LODWORD(v37) = v37 >= UUID.hashValue.getter(v37);
        sub_1000126B0(v35, type metadata accessor for FetchRequestBeacon);
        sub_1000126B0(v33, type metadata accessor for FetchRequestBeacon);
        if (v34 == (_DWORD)v37)
          break;
        ++v30;
        v31 += v141;
        v29 = v140;
        if (v140 == v30)
        {
          v30 = v140;
          v19 = v125;
          v3 = v126;
          v21 = v130;
          goto LABEL_24;
        }
      }
      v19 = v125;
      v3 = v126;
      v21 = v130;
      v29 = v140;
LABEL_24:
      v23 = v127;
    }
    if (v137 < v134)
    {
      if (v30 < v21)
        goto LABEL_142;
      if (v21 < v30)
        break;
    }
    a1 = v138;
    if (v30 < v29)
      goto LABEL_41;
LABEL_58:
    if (v30 < v21)
      goto LABEL_135;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
    v137 = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v19 = sub_10088E710(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
    v63 = *((_QWORD *)v19 + 2);
    v62 = *((_QWORD *)v19 + 3);
    v20 = v63 + 1;
    if (v63 >= v62 >> 1)
      v19 = sub_10088E710((char *)(v62 > 1), v63 + 1, 1, v19);
    *((_QWORD *)v19 + 2) = v20;
    v64 = v19 + 32;
    v65 = &v19[16 * v63 + 32];
    v66 = v137;
    *(_QWORD *)v65 = v21;
    *((_QWORD *)v65 + 1) = v66;
    if (v63)
    {
      while (1)
      {
        v67 = v20 - 1;
        if (v20 >= 4)
        {
          v72 = &v64[16 * v20];
          v73 = *((_QWORD *)v72 - 8);
          v74 = *((_QWORD *)v72 - 7);
          v78 = __OFSUB__(v74, v73);
          v75 = v74 - v73;
          if (v78)
            goto LABEL_124;
          v77 = *((_QWORD *)v72 - 6);
          v76 = *((_QWORD *)v72 - 5);
          v78 = __OFSUB__(v76, v77);
          v70 = v76 - v77;
          v71 = v78;
          if (v78)
            goto LABEL_125;
          v79 = v20 - 2;
          v80 = &v64[16 * v20 - 32];
          v82 = *(_QWORD *)v80;
          v81 = *((_QWORD *)v80 + 1);
          v78 = __OFSUB__(v81, v82);
          v83 = v81 - v82;
          if (v78)
            goto LABEL_127;
          v78 = __OFADD__(v70, v83);
          v84 = v70 + v83;
          if (v78)
            goto LABEL_130;
          if (v84 >= v75)
          {
            v102 = &v64[16 * v67];
            v104 = *(_QWORD *)v102;
            v103 = *((_QWORD *)v102 + 1);
            v78 = __OFSUB__(v103, v104);
            v105 = v103 - v104;
            if (v78)
              goto LABEL_134;
            v95 = v70 < v105;
            goto LABEL_95;
          }
        }
        else
        {
          if (v20 != 3)
          {
            v96 = *((_QWORD *)v19 + 4);
            v97 = *((_QWORD *)v19 + 5);
            v78 = __OFSUB__(v97, v96);
            v89 = v97 - v96;
            v90 = v78;
            goto LABEL_89;
          }
          v69 = *((_QWORD *)v19 + 4);
          v68 = *((_QWORD *)v19 + 5);
          v78 = __OFSUB__(v68, v69);
          v70 = v68 - v69;
          v71 = v78;
        }
        if ((v71 & 1) != 0)
          goto LABEL_126;
        v79 = v20 - 2;
        v85 = &v64[16 * v20 - 32];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v88 = __OFSUB__(v86, v87);
        v89 = v86 - v87;
        v90 = v88;
        if (v88)
          goto LABEL_129;
        v91 = &v64[16 * v67];
        v93 = *(_QWORD *)v91;
        v92 = *((_QWORD *)v91 + 1);
        v78 = __OFSUB__(v92, v93);
        v94 = v92 - v93;
        if (v78)
          goto LABEL_132;
        if (__OFADD__(v89, v94))
          goto LABEL_133;
        if (v89 + v94 >= v70)
        {
          v95 = v70 < v94;
LABEL_95:
          if (v95)
            v67 = v79;
          goto LABEL_97;
        }
LABEL_89:
        if ((v90 & 1) != 0)
          goto LABEL_128;
        v98 = &v64[16 * v67];
        v100 = *(_QWORD *)v98;
        v99 = *((_QWORD *)v98 + 1);
        v78 = __OFSUB__(v99, v100);
        v101 = v99 - v100;
        if (v78)
          goto LABEL_131;
        if (v101 < v89)
          goto LABEL_15;
LABEL_97:
        v106 = v67 - 1;
        if (v67 - 1 >= v20)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        v107 = *a1;
        if (!*a1)
          goto LABEL_146;
        v108 = v19;
        v109 = &v64[16 * v106];
        v110 = *(_QWORD *)v109;
        v111 = &v64[16 * v67];
        v112 = *((_QWORD *)v111 + 1);
        v113 = v132;
        sub_10041A5C4(v107 + *(_QWORD *)(v3 + 72) * *(_QWORD *)v109, v107 + *(_QWORD *)(v3 + 72) * *(_QWORD *)v111, v107 + *(_QWORD *)(v3 + 72) * v112, v131);
        v132 = v113;
        if (v113)
          goto LABEL_117;
        if (v112 < v110)
          goto LABEL_121;
        if (v67 > *((_QWORD *)v108 + 2))
          goto LABEL_122;
        *(_QWORD *)v109 = v110;
        *(_QWORD *)&v64[16 * v106 + 8] = v112;
        v114 = *((_QWORD *)v108 + 2);
        if (v67 >= v114)
          goto LABEL_123;
        v19 = v108;
        v20 = v114 - 1;
        memmove(&v64[16 * v67], v111 + 16, 16 * (v114 - 1 - v67));
        *((_QWORD *)v108 + 2) = v114 - 1;
        a1 = v138;
        if (v114 <= 2)
          goto LABEL_15;
      }
    }
    v20 = 1;
LABEL_15:
    v11 = a1[1];
    v18 = v137;
    if (v137 >= v11)
    {
      v17 = v123;
      goto LABEL_106;
    }
  }
  v125 = v19;
  v38 = 0;
  v39 = v141;
  v40 = v141 * (v30 - 1);
  v41 = v30 * v141;
  v42 = v21;
  v43 = v21 * v141;
  a1 = v138;
  do
  {
    if (v42 != v30 + v38 - 1)
    {
      if (!v23)
        goto LABEL_147;
      sub_1000126EC(v23 + v43, v129, type metadata accessor for FetchRequestBeacon);
      if (v43 < v40 || v23 + v43 >= (unint64_t)(v23 + v41))
      {
        swift_arrayInitWithTakeFrontToBack(v23 + v43, v23 + v40, 1, RequestBeacon);
      }
      else if (v43 != v40)
      {
        swift_arrayInitWithTakeBackToFront(v23 + v43, v23 + v40);
      }
      sub_1000126EC(v129, v23 + v40, type metadata accessor for FetchRequestBeacon);
      a1 = v138;
      v23 = v127;
      v39 = v141;
    }
    ++v42;
    --v38;
    v40 -= v39;
    v41 -= v39;
    v43 += v39;
  }
  while (v42 < v30 + v38);
  v19 = v125;
  v3 = v126;
  v21 = v130;
  v29 = v140;
  if (v30 >= v140)
    goto LABEL_58;
LABEL_41:
  if (__OFSUB__(v30, v21))
    goto LABEL_140;
  if (v30 - v21 >= v124)
    goto LABEL_58;
  if (__OFADD__(v21, v124))
    goto LABEL_143;
  if (v21 + v124 >= v29)
    v44 = v29;
  else
    v44 = v21 + v124;
  if (v44 >= v21)
  {
    if (v30 != v44)
    {
      v125 = v19;
      v45 = *(_QWORD *)(v3 + 72);
      v46 = v45 * (v30 - 1);
      v134 = v45;
      v141 = v30 * v45;
      v128 = v44;
      do
      {
        v48 = 0;
        v137 = v30;
        while (1)
        {
          v140 = v21;
          v49 = *a1;
          v50 = v135;
          sub_10005972C(v141 + v48 + *a1, v135, type metadata accessor for FetchRequestBeacon);
          v51 = v46;
          v52 = v46 + v48 + v49;
          v53 = a1;
          v54 = v136;
          v55 = sub_10005972C(v52, v136, type metadata accessor for FetchRequestBeacon);
          v56 = UUID.hashValue.getter(v55);
          v57 = UUID.hashValue.getter(v56);
          sub_1000126B0(v54, type metadata accessor for FetchRequestBeacon);
          sub_1000126B0(v50, type metadata accessor for FetchRequestBeacon);
          if (v56 >= v57)
            break;
          v58 = *v53;
          if (!*v53)
            goto LABEL_145;
          v59 = v58 + v141 + v48;
          v46 = v51;
          v60 = v58 + v51 + v48;
          sub_1000126EC(v59, v139, type metadata accessor for FetchRequestBeacon);
          swift_arrayInitWithTakeFrontToBack(v59, v60, 1, RequestBeacon);
          sub_1000126EC(v139, v60, type metadata accessor for FetchRequestBeacon);
          v48 -= v134;
          v21 = v140 + 1;
          v47 = v137;
          a1 = v138;
          if (v137 == v140 + 1)
            goto LABEL_51;
        }
        v47 = v137;
        a1 = v53;
        v46 = v51;
LABEL_51:
        v30 = v47 + 1;
        v46 += v134;
        v141 += v134;
        v21 = v130;
      }
      while (v30 != v128);
      v30 = v128;
      v19 = v125;
      v3 = v126;
    }
    goto LABEL_58;
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

Swift::Int sub_100418B70(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  Swift::Int v7;
  Swift::Int result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  char *v14;
  unint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  Swift::Int v35;
  Swift::Int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  Swift::Int v46;
  uint64_t v47;
  Swift::Int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  Swift::Int v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  unint64_t v124;
  _QWORD *v125;
  Swift::Int v126;
  uint64_t v127;
  char *v128;
  Swift::Int v129;
  Swift::Int v130;
  char *v131;
  char *v132;
  Swift::Int v133;
  char *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD v138[3];
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v144 = type metadata accessor for Date(0);
  v137 = *(_QWORD *)(v144 - 8);
  v2 = __chkstk_darwin(v144);
  v4 = (char *)&v125 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v125 - v5;
  v7 = a1[1];
  result = _minimumMergeRunLength(_:)(v7);
  if (result >= v7)
  {
    if (v7 < 0)
      goto LABEL_137;
    if (v7)
      return sub_10041A184(0, v7, 1, a1);
    return result;
  }
  if (v7 >= 0)
    v9 = v7;
  else
    v9 = v7 + 1;
  if (v7 < -1)
    goto LABEL_145;
  v126 = result;
  if (v7 < 2)
  {
    v134 = (char *)&_swiftEmptyArrayStorage[4];
    v125 = _swiftEmptyArrayStorage;
    if (v7 != 1)
    {
      v15 = _swiftEmptyArrayStorage[2];
      v14 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
      v116 = v136;
      if (v15 >= 2)
      {
        v117 = *a1;
        do
        {
          v118 = v15 - 2;
          if (v15 < 2)
            goto LABEL_132;
          if (!v117)
            goto LABEL_144;
          v119 = v14;
          v120 = v14 + 32;
          v121 = *(_QWORD *)&v14[16 * v118 + 32];
          v122 = *(_QWORD *)&v14[16 * v15 + 24];
          sub_10041AA88((char *)(v117 + 40 * v121), (char *)(v117 + 40 * *(_QWORD *)&v120[16 * v15 - 16]), v117 + 40 * v122, v134);
          if (v116)
            goto LABEL_100;
          if (v122 < v121)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native(v119) & 1) == 0)
            v119 = sub_10088F088((uint64_t)v119);
          if (v118 >= *((_QWORD *)v119 + 2))
            goto LABEL_134;
          v123 = &v119[16 * v118 + 32];
          *(_QWORD *)v123 = v121;
          *((_QWORD *)v123 + 1) = v122;
          v124 = *((_QWORD *)v119 + 2);
          if (v15 > v124)
            goto LABEL_135;
          v14 = v119;
          memmove(&v119[16 * v15 + 16], &v119[16 * v15 + 32], 16 * (v124 - v15));
          *((_QWORD *)v119 + 2) = v124 - 1;
          v15 = v124 - 1;
        }
        while (v124 > 2);
      }
      swift_bridgeObjectRelease();
      v125[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v10 = v9 >> 1;
    v11 = sub_10001A9A8(&qword_101100360);
    v12 = static Array._allocateBufferUninitialized(minimumCapacity:)(v10, v11);
    *(_QWORD *)(v12 + 16) = v10;
    v125 = (_QWORD *)v12;
    v134 = (char *)(v12 + 32);
  }
  v13 = 0;
  v14 = (char *)_swiftEmptyArrayStorage;
  v135 = a1;
  v131 = v6;
  v132 = v4;
  while (1)
  {
    v16 = v13++;
    v130 = v16;
    if (v13 >= v7)
      break;
    v17 = *a1;
    sub_100030784(*a1 + 40 * v13, (uint64_t)&v141);
    v18 = v17;
    sub_100030784(v17 + 40 * v16, (uint64_t)v138);
    v133 = v7;
    v20 = v142;
    v19 = v143;
    sub_10001AA44(&v141, v142);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v19);
    v21 = v139;
    v22 = v140;
    sub_10001AA44(v138, v139);
    v23 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v24 = v22;
    v7 = v133;
    v23(v21, v24);
    LODWORD(v129) = static Date.< infix(_:_:)(v6, v4);
    v25 = *(char **)(v137 + 8);
    v26 = v144;
    ((void (*)(char *, uint64_t))v25)(v4, v144);
    v128 = v25;
    ((void (*)(char *, uint64_t))v25)(v6, v26);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v138);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v141);
    v127 = v18;
    if (v16 + 2 >= v7)
    {
      v13 = v16 + 2;
    }
    else
    {
      v27 = v18 + 40 * v16 + 40;
      v13 = v16 + 2;
      while (1)
      {
        v28 = v27 + 40;
        sub_100030784(v27 + 40, (uint64_t)&v141);
        sub_100030784(v27, (uint64_t)v138);
        v30 = v142;
        v29 = v143;
        sub_10001AA44(&v141, v142);
        (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v29);
        v31 = v139;
        v32 = v140;
        sub_10001AA44(v138, v139);
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v32);
        LODWORD(v31) = static Date.< infix(_:_:)(v6, v4);
        v33 = v144;
        v34 = v128;
        ((void (*)(char *, uint64_t))v128)(v4, v144);
        ((void (*)(char *, uint64_t))v34)(v6, v33);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v138);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v141);
        if (((v129 ^ v31) & 1) != 0)
          break;
        ++v13;
        v27 = v28;
        v7 = v133;
        if (v133 == v13)
        {
          v13 = v133;
          goto LABEL_23;
        }
      }
      v7 = v133;
    }
LABEL_23:
    a1 = v135;
    if ((v129 & 1) == 0)
      break;
    if (v13 < v16)
      goto LABEL_138;
    if (v16 >= v13)
      break;
    v35 = v16;
    v36 = v13;
    v37 = v14;
    v38 = 40 * v36 - 40;
    v39 = 40 * v35;
    v40 = v36;
    v41 = v35;
    do
    {
      if (v41 != --v36)
      {
        if (!v127)
          goto LABEL_143;
        v42 = v127 + v39;
        v43 = v127 + v38;
        sub_10000F9FC((__int128 *)(v127 + v39), (uint64_t)&v141);
        v44 = *(_QWORD *)(v43 + 32);
        v45 = *(_OWORD *)(v43 + 16);
        *(_OWORD *)v42 = *(_OWORD *)v43;
        *(_OWORD *)(v42 + 16) = v45;
        *(_QWORD *)(v42 + 32) = v44;
        sub_10000F9FC(&v141, v43);
      }
      ++v41;
      v38 -= 40;
      v39 += 40;
    }
    while (v41 < v36);
    v14 = v37;
    a1 = v135;
    v13 = v40;
    v4 = v132;
    v7 = v133;
    v16 = v130;
    if (v13 < v133)
      goto LABEL_33;
LABEL_52:
    if (v13 < v16)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      v14 = sub_10088E710(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
    v61 = *((_QWORD *)v14 + 2);
    v60 = *((_QWORD *)v14 + 3);
    v15 = v61 + 1;
    if (v61 >= v60 >> 1)
      v14 = sub_10088E710((char *)(v60 > 1), v61 + 1, 1, v14);
    *((_QWORD *)v14 + 2) = v15;
    v62 = v14 + 32;
    v63 = &v14[16 * v61 + 32];
    *(_QWORD *)v63 = v16;
    *((_QWORD *)v63 + 1) = v13;
    if (v61)
    {
      a1 = v135;
      while (1)
      {
        v64 = v15 - 1;
        if (v15 >= 4)
        {
          v69 = &v62[16 * v15];
          v70 = *((_QWORD *)v69 - 8);
          v71 = *((_QWORD *)v69 - 7);
          v75 = __OFSUB__(v71, v70);
          v72 = v71 - v70;
          if (v75)
            goto LABEL_120;
          v74 = *((_QWORD *)v69 - 6);
          v73 = *((_QWORD *)v69 - 5);
          v75 = __OFSUB__(v73, v74);
          v67 = v73 - v74;
          v68 = v75;
          if (v75)
            goto LABEL_121;
          v76 = v15 - 2;
          v77 = &v62[16 * v15 - 32];
          v79 = *(_QWORD *)v77;
          v78 = *((_QWORD *)v77 + 1);
          v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75)
            goto LABEL_123;
          v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75)
            goto LABEL_126;
          if (v81 >= v72)
          {
            v99 = &v62[16 * v64];
            v101 = *(_QWORD *)v99;
            v100 = *((_QWORD *)v99 + 1);
            v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75)
              goto LABEL_130;
            v92 = v67 < v102;
            goto LABEL_90;
          }
        }
        else
        {
          if (v15 != 3)
          {
            v93 = *((_QWORD *)v14 + 4);
            v94 = *((_QWORD *)v14 + 5);
            v75 = __OFSUB__(v94, v93);
            v86 = v94 - v93;
            v87 = v75;
            goto LABEL_84;
          }
          v66 = *((_QWORD *)v14 + 4);
          v65 = *((_QWORD *)v14 + 5);
          v75 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          v68 = v75;
        }
        if ((v68 & 1) != 0)
          goto LABEL_122;
        v76 = v15 - 2;
        v82 = &v62[16 * v15 - 32];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v85 = __OFSUB__(v83, v84);
        v86 = v83 - v84;
        v87 = v85;
        if (v85)
          goto LABEL_125;
        v88 = &v62[16 * v64];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v75 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v75)
          goto LABEL_128;
        if (__OFADD__(v86, v91))
          goto LABEL_129;
        if (v86 + v91 >= v67)
        {
          v92 = v67 < v91;
LABEL_90:
          if (v92)
            v64 = v76;
          goto LABEL_92;
        }
LABEL_84:
        if ((v87 & 1) != 0)
          goto LABEL_124;
        v95 = &v62[16 * v64];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v75 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v75)
          goto LABEL_127;
        if (v98 < v86)
          goto LABEL_14;
LABEL_92:
        v103 = v64 - 1;
        if (v64 - 1 >= v15)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        v104 = *a1;
        if (!*a1)
          goto LABEL_142;
        v105 = v13;
        v106 = v14;
        v107 = &v62[16 * v103];
        v108 = *(_QWORD *)v107;
        v109 = v62;
        v110 = v64;
        v111 = &v62[16 * v64];
        v112 = *((_QWORD *)v111 + 1);
        v113 = v136;
        sub_10041AA88((char *)(v104 + 40 * *(_QWORD *)v107), (char *)(v104 + 40 * *(_QWORD *)v111), v104 + 40 * v112, v134);
        v136 = v113;
        if (v113)
        {
LABEL_100:
          v115 = v125;
          swift_bridgeObjectRelease();
          v115[2] = 0;
          return swift_bridgeObjectRelease();
        }
        if (v112 < v108)
          goto LABEL_117;
        if (v110 > *((_QWORD *)v106 + 2))
          goto LABEL_118;
        *(_QWORD *)v107 = v108;
        *(_QWORD *)&v109[16 * v103 + 8] = v112;
        v114 = *((_QWORD *)v106 + 2);
        if (v110 >= v114)
          goto LABEL_119;
        v14 = v106;
        v15 = v114 - 1;
        memmove(v111, v111 + 16, 16 * (v114 - 1 - v110));
        v62 = v109;
        *((_QWORD *)v106 + 2) = v114 - 1;
        v92 = v114 > 2;
        a1 = v135;
        v13 = v105;
        v6 = v131;
        v4 = v132;
        if (!v92)
          goto LABEL_14;
      }
    }
    v15 = 1;
    a1 = v135;
LABEL_14:
    v7 = a1[1];
    if (v13 >= v7)
      goto LABEL_103;
  }
  if (v13 >= v7)
    goto LABEL_52;
LABEL_33:
  if (__OFSUB__(v13, v16))
    goto LABEL_136;
  if (v13 - v16 >= v126)
    goto LABEL_52;
  if (__OFADD__(v16, v126))
    goto LABEL_139;
  if (v16 + v126 >= v7)
    v46 = v7;
  else
    v46 = v16 + v126;
  if (v46 >= v16)
  {
    if (v13 != v46)
    {
      v128 = v14;
      v129 = v46;
      v47 = 40 * v13 - 40;
      do
      {
        v133 = v47;
        while (1)
        {
          v48 = v13;
          v49 = *a1 + v47;
          sub_100030784(v49 + 40, (uint64_t)&v141);
          sub_100030784(v49, (uint64_t)v138);
          v50 = a1;
          v51 = v142;
          v52 = v143;
          sub_10001AA44(&v141, v142);
          (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v52);
          v53 = v139;
          v54 = v140;
          sub_10001AA44(v138, v139);
          (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v54);
          LOBYTE(v53) = static Date.< infix(_:_:)(v6, v4);
          v55 = *(void (**)(char *, uint64_t))(v137 + 8);
          v56 = v144;
          v55(v4, v144);
          v55(v6, v56);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v138);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v141);
          if ((v53 & 1) == 0)
            break;
          v57 = *v50;
          if (!*v50)
            goto LABEL_141;
          a1 = v50;
          v58 = v57 + v47;
          sub_10000F9FC((__int128 *)(v57 + v47 + 40), (uint64_t)&v141);
          v59 = *(_OWORD *)(v58 + 16);
          *(_OWORD *)(v58 + 40) = *(_OWORD *)v58;
          *(_OWORD *)(v58 + 56) = v59;
          *(_QWORD *)(v58 + 72) = *(_QWORD *)(v58 + 32);
          sub_10000F9FC(&v141, v58);
          v47 -= 40;
          ++v16;
          v13 = v48;
          if (v48 == v16)
            goto LABEL_43;
        }
        a1 = v50;
        v13 = v48;
LABEL_43:
        ++v13;
        v47 = v133 + 40;
        v16 = v130;
      }
      while (v13 != v129);
      v13 = v129;
      v14 = v128;
    }
    goto LABEL_52;
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

Swift::Int sub_100419544(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::Int v17;
  unint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  Swift::Int v36;
  uint64_t v37;
  Swift::Int v38;
  Swift::Int v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::Int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  char *v120;
  _QWORD *v121;
  Swift::Int v122;
  Swift::Int v123;
  uint64_t v124;
  Swift::Int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  Swift::Int v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v134 = type metadata accessor for RawSearchResult(0);
  v127 = *(_QWORD *)(v134 - 8);
  v3 = __chkstk_darwin(v134);
  v124 = (uint64_t)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v135 = (uint64_t)&v120 - v6;
  v7 = __chkstk_darwin(v5);
  v132 = (uint64_t)&v120 - v8;
  __chkstk_darwin(v7);
  v131 = (uint64_t)&v120 - v9;
  v10 = a1[1];
  result = _minimumMergeRunLength(_:)(v10);
  if (result >= v10)
  {
    if (v10 < 0)
      goto LABEL_139;
    if (v10)
      return sub_10041A388(0, v10, 1, a1);
    return result;
  }
  if (v10 >= 0)
    v12 = v10;
  else
    v12 = v10 + 1;
  if (v10 < -1)
    goto LABEL_147;
  v133 = a1;
  v122 = result;
  v128 = v1;
  if (v10 < 2)
  {
    v16 = (char *)_swiftEmptyArrayStorage;
    v126 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80));
    v121 = _swiftEmptyArrayStorage;
    if (v10 != 1)
    {
      v18 = _swiftEmptyArrayStorage[2];
LABEL_105:
      v112 = v16;
      if (v18 >= 2)
      {
        v113 = *v133;
        do
        {
          v114 = v18 - 2;
          if (v18 < 2)
            goto LABEL_134;
          if (!v113)
            goto LABEL_146;
          v115 = *(_QWORD *)&v112[16 * v114 + 32];
          v116 = *(_QWORD *)&v112[16 * v18 + 24];
          v117 = v128;
          sub_10041AF38(v113 + *(_QWORD *)(v127 + 72) * v115, v113 + *(_QWORD *)(v127 + 72) * *(_QWORD *)&v112[16 * v18 + 16], v113 + *(_QWORD *)(v127 + 72) * v116, v126);
          v128 = v117;
          if (v117)
            break;
          if (v116 < v115)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native(v112) & 1) == 0)
            v112 = sub_10088F088((uint64_t)v112);
          if (v114 >= *((_QWORD *)v112 + 2))
            goto LABEL_136;
          v118 = &v112[16 * v114 + 32];
          *(_QWORD *)v118 = v115;
          *((_QWORD *)v118 + 1) = v116;
          v119 = *((_QWORD *)v112 + 2);
          if (v18 > v119)
            goto LABEL_137;
          memmove(&v112[16 * v18 + 16], &v112[16 * v18 + 32], 16 * (v119 - v18));
          *((_QWORD *)v112 + 2) = v119 - 1;
          v18 = v119 - 1;
        }
        while (v119 > 2);
      }
LABEL_116:
      swift_bridgeObjectRelease();
      v121[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v13 = v12 >> 1;
    v14 = static Array._allocateBufferUninitialized(minimumCapacity:)(v12 >> 1, v134);
    *(_QWORD *)(v14 + 16) = v13;
    v15 = *(unsigned __int8 *)(v127 + 80);
    v121 = (_QWORD *)v14;
    v126 = v14 + ((v15 + 32) & ~v15);
  }
  v17 = 0;
  v16 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v19 = v17;
    v20 = v17 + 1;
    if (v17 + 1 >= v10)
    {
      ++v17;
      goto LABEL_24;
    }
    v21 = *v133;
    v22 = *(_QWORD *)(v127 + 72);
    v23 = v131;
    sub_10005972C(*v133 + v22 * v20, v131, type metadata accessor for RawSearchResult);
    v24 = v21 + v22 * v17;
    v25 = v132;
    sub_10005972C(v24, v132, type metadata accessor for RawSearchResult);
    LODWORD(v130) = static Date.< infix(_:_:)(v23 + *(int *)(v134 + 20), v25 + *(int *)(v134 + 20));
    sub_1000126B0(v25, type metadata accessor for RawSearchResult);
    sub_1000126B0(v23, type metadata accessor for RawSearchResult);
    v17 = v19 + 2;
    v129 = v21;
    v136 = v22;
    if (v19 + 2 >= v10)
      goto LABEL_21;
    v125 = v19;
    v26 = v16;
    v27 = v22 * v20;
    v28 = v21;
    v29 = v19 + 2;
    v30 = v22 * v29;
    do
    {
      v31 = v10;
      v32 = v131;
      sub_10005972C(v28 + v30, v131, type metadata accessor for RawSearchResult);
      v33 = v132;
      sub_10005972C(v28 + v27, v132, type metadata accessor for RawSearchResult);
      v34 = static Date.< infix(_:_:)(v32 + *(int *)(v134 + 20), v33 + *(int *)(v134 + 20));
      sub_1000126B0(v33, type metadata accessor for RawSearchResult);
      sub_1000126B0(v32, type metadata accessor for RawSearchResult);
      if (((v130 ^ v34) & 1) != 0)
      {
        v16 = v26;
        v17 = v29;
        v19 = v125;
        v10 = v31;
        if ((v130 & 1) != 0)
          goto LABEL_42;
        goto LABEL_24;
      }
      v28 += v136;
      ++v29;
      v10 = v31;
    }
    while (v31 != v29);
    v16 = v26;
    v17 = v31;
    v19 = v125;
LABEL_21:
    if ((v130 & 1) == 0)
      goto LABEL_24;
LABEL_42:
    v51 = v136;
    if (v17 < v19)
      goto LABEL_140;
    if (v19 < v17)
      break;
LABEL_24:
    v35 = v133;
    if (v17 < v10)
      goto LABEL_25;
LABEL_57:
    if (v17 < v19)
      goto LABEL_133;
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      v16 = sub_10088E710(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
    v61 = *((_QWORD *)v16 + 2);
    v60 = *((_QWORD *)v16 + 3);
    v18 = v61 + 1;
    if (v61 >= v60 >> 1)
      v16 = sub_10088E710((char *)(v60 > 1), v61 + 1, 1, v16);
    *((_QWORD *)v16 + 2) = v18;
    v62 = v16 + 32;
    v63 = &v16[16 * v61 + 32];
    *(_QWORD *)v63 = v19;
    *((_QWORD *)v63 + 1) = v17;
    if (v61)
    {
      while (1)
      {
        v64 = v18 - 1;
        if (v18 >= 4)
        {
          v69 = &v62[16 * v18];
          v70 = *((_QWORD *)v69 - 8);
          v71 = *((_QWORD *)v69 - 7);
          v75 = __OFSUB__(v71, v70);
          v72 = v71 - v70;
          if (v75)
            goto LABEL_122;
          v74 = *((_QWORD *)v69 - 6);
          v73 = *((_QWORD *)v69 - 5);
          v75 = __OFSUB__(v73, v74);
          v67 = v73 - v74;
          v68 = v75;
          if (v75)
            goto LABEL_123;
          v76 = v18 - 2;
          v77 = &v62[16 * v18 - 32];
          v79 = *(_QWORD *)v77;
          v78 = *((_QWORD *)v77 + 1);
          v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75)
            goto LABEL_125;
          v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75)
            goto LABEL_128;
          if (v81 >= v72)
          {
            v99 = &v62[16 * v64];
            v101 = *(_QWORD *)v99;
            v100 = *((_QWORD *)v99 + 1);
            v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75)
              goto LABEL_132;
            v92 = v67 < v102;
            goto LABEL_94;
          }
        }
        else
        {
          if (v18 != 3)
          {
            v93 = *((_QWORD *)v16 + 4);
            v94 = *((_QWORD *)v16 + 5);
            v75 = __OFSUB__(v94, v93);
            v86 = v94 - v93;
            v87 = v75;
            goto LABEL_88;
          }
          v66 = *((_QWORD *)v16 + 4);
          v65 = *((_QWORD *)v16 + 5);
          v75 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          v68 = v75;
        }
        if ((v68 & 1) != 0)
          goto LABEL_124;
        v76 = v18 - 2;
        v82 = &v62[16 * v18 - 32];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v85 = __OFSUB__(v83, v84);
        v86 = v83 - v84;
        v87 = v85;
        if (v85)
          goto LABEL_127;
        v88 = &v62[16 * v64];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v75 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v75)
          goto LABEL_130;
        if (__OFADD__(v86, v91))
          goto LABEL_131;
        if (v86 + v91 >= v67)
        {
          v92 = v67 < v91;
LABEL_94:
          if (v92)
            v64 = v76;
          goto LABEL_96;
        }
LABEL_88:
        if ((v87 & 1) != 0)
          goto LABEL_126;
        v95 = &v62[16 * v64];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v75 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v75)
          goto LABEL_129;
        if (v98 < v86)
          goto LABEL_14;
LABEL_96:
        v103 = v17;
        v104 = v64 - 1;
        if (v64 - 1 >= v18)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!*v133)
          goto LABEL_144;
        v105 = v16;
        v106 = &v62[16 * v104];
        v107 = *(_QWORD *)v106;
        v108 = &v62[16 * v64];
        v109 = *((_QWORD *)v108 + 1);
        v110 = v128;
        sub_10041AF38(*v133 + *(_QWORD *)(v127 + 72) * *(_QWORD *)v106, *v133 + *(_QWORD *)(v127 + 72) * *(_QWORD *)v108, *v133 + *(_QWORD *)(v127 + 72) * v109, v126);
        v128 = v110;
        if (v110)
          goto LABEL_116;
        if (v109 < v107)
          goto LABEL_119;
        if (v64 > *((_QWORD *)v105 + 2))
          goto LABEL_120;
        *(_QWORD *)v106 = v107;
        *(_QWORD *)&v62[16 * v104 + 8] = v109;
        v111 = *((_QWORD *)v105 + 2);
        if (v64 >= v111)
          goto LABEL_121;
        v16 = v105;
        v18 = v111 - 1;
        memmove(&v62[16 * v64], v108 + 16, 16 * (v111 - 1 - v64));
        *((_QWORD *)v105 + 2) = v111 - 1;
        v92 = v111 > 2;
        v17 = v103;
        if (!v92)
          goto LABEL_14;
      }
    }
    v18 = 1;
LABEL_14:
    v10 = v133[1];
    if (v17 >= v10)
      goto LABEL_105;
  }
  v130 = v10;
  v120 = v16;
  v52 = 0;
  v53 = v136 * (v17 - 1);
  v54 = v17 * v136;
  v55 = v19;
  v56 = v19 * v136;
  v35 = v133;
  v125 = v19;
  do
  {
    if (v55 != v17 + v52 - 1)
    {
      v57 = v129;
      if (!v129)
        goto LABEL_145;
      v58 = v129 + v56;
      v59 = v129 + v53;
      sub_1000126EC(v129 + v56, v124, type metadata accessor for RawSearchResult);
      if (v56 < v53 || v58 >= v57 + v54)
      {
        swift_arrayInitWithTakeFrontToBack(v57 + v56, v57 + v53, 1, v134);
        v51 = v136;
      }
      else
      {
        v51 = v136;
        if (v56 != v53)
          swift_arrayInitWithTakeBackToFront(v58, v59);
      }
      sub_1000126EC(v124, v59, type metadata accessor for RawSearchResult);
      v35 = v133;
      v19 = v125;
    }
    ++v55;
    --v52;
    v53 -= v51;
    v54 -= v51;
    v56 += v51;
  }
  while (v55 < v17 + v52);
  v16 = v120;
  v10 = v130;
  if (v17 >= v130)
    goto LABEL_57;
LABEL_25:
  if (__OFSUB__(v17, v19))
    goto LABEL_138;
  if (v17 - v19 >= v122)
    goto LABEL_57;
  if (__OFADD__(v19, v122))
    goto LABEL_141;
  if (v19 + v122 >= v10)
    v36 = v10;
  else
    v36 = v19 + v122;
  if (v36 >= v19)
  {
    if (v17 != v36)
    {
      v120 = v16;
      v37 = *(_QWORD *)(v127 + 72);
      v136 = v37 * (v17 - 1);
      v129 = v37;
      v38 = v17 * v37;
      v125 = v19;
      v123 = v36;
      do
      {
        v40 = 0;
        v41 = v19;
        v130 = v17;
        while (1)
        {
          v42 = *v35;
          v43 = v38;
          v44 = v38 + v40 + *v35;
          v45 = v131;
          v46 = v35;
          sub_10005972C(v44, v131, type metadata accessor for RawSearchResult);
          v47 = v132;
          sub_10005972C(v136 + v40 + v42, v132, type metadata accessor for RawSearchResult);
          LOBYTE(v42) = static Date.< infix(_:_:)(v45 + *(int *)(v134 + 20), v47 + *(int *)(v134 + 20));
          sub_1000126B0(v47, type metadata accessor for RawSearchResult);
          sub_1000126B0(v45, type metadata accessor for RawSearchResult);
          if ((v42 & 1) == 0)
            break;
          v48 = *v46;
          if (!*v46)
            goto LABEL_143;
          v38 = v43;
          v49 = v48 + v43 + v40;
          v50 = v48 + v136 + v40;
          sub_1000126EC(v49, v135, type metadata accessor for RawSearchResult);
          swift_arrayInitWithTakeFrontToBack(v49, v50, 1, v134);
          sub_1000126EC(v135, v50, type metadata accessor for RawSearchResult);
          v39 = v130;
          v40 -= v129;
          ++v41;
          v35 = v133;
          if (v130 == v41)
            goto LABEL_35;
        }
        v39 = v130;
        v38 = v43;
        v35 = v46;
LABEL_35:
        v17 = v39 + 1;
        v136 += v129;
        v38 += v129;
        v19 = v125;
      }
      while (v17 != v123);
      v17 = v123;
      v16 = v120;
    }
    goto LABEL_57;
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_100419F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t RequestBeacon;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;

  v37 = a1;
  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  v7 = __chkstk_darwin(RequestBeacon);
  v45 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v40 = (uint64_t)&v35 - v10;
  result = __chkstk_darwin(v9);
  v39 = (uint64_t)&v35 - v13;
  v44 = a3;
  v36 = a2;
  if (a3 != a2)
  {
    v14 = *(_QWORD *)(v12 + 72);
    v15 = v14 * (v44 - 1);
    v41 = v14;
    v16 = v14 * v44;
    v17 = type metadata accessor for FetchRequestBeacon;
    v46 = a4;
LABEL_5:
    v18 = 0;
    v19 = v37;
    v42 = v16;
    v43 = v15;
    while (1)
    {
      v20 = *v46;
      v21 = v16 + v18 + *v46;
      v22 = v39;
      sub_10005972C(v21, v39, v17);
      v23 = v15 + v18 + v20;
      v24 = v40;
      v25 = sub_10005972C(v23, v40, v17);
      v26 = v17;
      v27 = UUID.hashValue.getter(v25);
      v28 = UUID.hashValue.getter(v27);
      v29 = v24;
      v15 = v43;
      sub_1000126B0(v29, v26);
      v30 = v22;
      v16 = v42;
      result = sub_1000126B0(v30, v26);
      v31 = v27 < v28;
      v17 = v26;
      if (!v31)
      {
LABEL_4:
        v15 += v41;
        v16 += v41;
        if (++v44 == v36)
          return result;
        goto LABEL_5;
      }
      v32 = *v46;
      if (!*v46)
        break;
      v33 = v32 + v16 + v18;
      v34 = v32 + v15 + v18;
      sub_1000126EC(v33, v45, v26);
      swift_arrayInitWithTakeFrontToBack(v33, v34, 1, RequestBeacon);
      v17 = v26;
      result = sub_1000126EC(v45, v34, v26);
      v18 -= v41;
      if (v44 == ++v19)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10041A184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v27 = a1;
  v7 = type metadata accessor for Date(0);
  v29 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v13 = (char *)&v25 - v12;
  v36 = a3;
  v26 = a2;
  if (a3 != a2)
  {
    v14 = 40 * v36 - 40;
LABEL_5:
    v15 = v27;
    v28 = v14;
    while (1)
    {
      v16 = *a4 + v14;
      sub_100030784(v16 + 40, (uint64_t)&v33);
      sub_100030784(v16, (uint64_t)v30);
      v17 = v34;
      v18 = v35;
      sub_10001AA44(&v33, v34);
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
      v19 = v31;
      v20 = v32;
      sub_10001AA44(v30, v31);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20);
      LOBYTE(v19) = static Date.< infix(_:_:)(v13, v10);
      v21 = *(void (**)(char *, uint64_t))(v29 + 8);
      v21(v10, v7);
      v21(v13, v7);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
      result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v33);
      if ((v19 & 1) == 0)
      {
LABEL_4:
        v14 = v28 + 40;
        if (++v36 == v26)
          return result;
        goto LABEL_5;
      }
      v22 = *a4;
      if (!*a4)
        break;
      v23 = v22 + v14;
      sub_10000F9FC((__int128 *)(v22 + v14 + 40), (uint64_t)&v33);
      v24 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)(v23 + 40) = *(_OWORD *)v23;
      *(_OWORD *)(v23 + 56) = v24;
      *(_QWORD *)(v23 + 72) = *(_QWORD *)(v23 + 32);
      result = sub_10000F9FC(&v33, v23);
      v14 -= 40;
      if (v36 == ++v15)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10041A388(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v26 = a1;
  v30 = type metadata accessor for RawSearchResult(0);
  v7 = __chkstk_darwin(v30);
  v31 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v27 = (uint64_t)&v24 - v10;
  result = __chkstk_darwin(v9);
  v14 = (char *)&v24 - v13;
  v29 = a3;
  v25 = a2;
  if (a3 != a2)
  {
    v15 = *(_QWORD *)(v12 + 72);
    v33 = v15 * (v29 - 1);
    v28 = v15;
    v32 = v15 * v29;
LABEL_5:
    v16 = 0;
    v17 = v26;
    while (1)
    {
      v18 = *a4;
      sub_10005972C(v32 + v16 + *a4, (uint64_t)v14, type metadata accessor for RawSearchResult);
      v19 = v27;
      sub_10005972C(v33 + v16 + v18, v27, type metadata accessor for RawSearchResult);
      LOBYTE(v18) = static Date.< infix(_:_:)(&v14[*(int *)(v30 + 20)], v19 + *(int *)(v30 + 20));
      sub_1000126B0(v19, type metadata accessor for RawSearchResult);
      result = sub_1000126B0((uint64_t)v14, type metadata accessor for RawSearchResult);
      if ((v18 & 1) == 0)
      {
LABEL_4:
        v33 += v28;
        v32 += v28;
        if (++v29 == v25)
          return result;
        goto LABEL_5;
      }
      v20 = *a4;
      if (!*a4)
        break;
      v21 = a4;
      v22 = v20 + v32 + v16;
      v23 = v20 + v33 + v16;
      sub_1000126EC(v22, v31, type metadata accessor for RawSearchResult);
      swift_arrayInitWithTakeFrontToBack(v22, v23, 1, v30);
      result = sub_1000126EC(v31, v23, type metadata accessor for RawSearchResult);
      v16 -= v28;
      ++v17;
      a4 = v21;
      if (v29 == v17)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10041A5C4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t result;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t RequestBeacon;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;

  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  v8 = __chkstk_darwin(RequestBeacon);
  v49 = (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v44 - v10;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_61;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_62;
  v15 = (uint64_t)(a2 - a1) / v13;
  v52 = a1;
  v51 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v16, RequestBeacon);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v27 = a4 + v18;
      v50 = a4 + v18;
      v52 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v29 = -v13;
        v45 = a4;
        v46 = a1;
        do
        {
          v48 = a3 + v29;
          sub_10005972C(v27 + v29, (uint64_t)v11, type metadata accessor for FetchRequestBeacon);
          v30 = a2 + v29;
          v31 = a3;
          v32 = (uint64_t)v11;
          v33 = v49;
          v34 = sub_10005972C(a2 + v29, v49, type metadata accessor for FetchRequestBeacon);
          v35 = UUID.hashValue.getter(v34);
          v36 = UUID.hashValue.getter(v35);
          v37 = v33;
          v11 = (char *)v32;
          sub_1000126B0(v37, type metadata accessor for FetchRequestBeacon);
          sub_1000126B0(v32, type metadata accessor for FetchRequestBeacon);
          if (v35 >= v36)
          {
            v41 = v50;
            v42 = v50 + v29;
            v50 += v29;
            a3 = v48;
            if (v31 < v41 || v48 >= v41)
            {
              swift_arrayInitWithTakeFrontToBack(v48, v42, 1, RequestBeacon);
              v30 = a2;
              v40 = v45;
              v39 = v46;
            }
            else
            {
              v39 = v46;
              if (v31 != v41)
                swift_arrayInitWithTakeBackToFront(v48, v42);
              v30 = a2;
              v40 = v45;
            }
          }
          else
          {
            a3 = v48;
            if (v31 < a2 || v48 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v48, a2 + v29, 1, RequestBeacon);
              v40 = v45;
              v39 = v46;
            }
            else
            {
              v38 = v31 == a2;
              v40 = v45;
              v39 = v46;
              if (!v38)
                swift_arrayInitWithTakeBackToFront(v48, a2 + v29);
            }
            v52 += v29;
          }
          v27 = v50;
          if (v50 <= v40)
            break;
          a2 = v30;
        }
        while (v30 > v39);
      }
      goto LABEL_59;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v15, RequestBeacon);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v48 = a4 + v17;
    v50 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        sub_10005972C(a2, (uint64_t)v11, type metadata accessor for FetchRequestBeacon);
        v20 = v49;
        v21 = sub_10005972C(a4, v49, type metadata accessor for FetchRequestBeacon);
        v22 = UUID.hashValue.getter(v21);
        v23 = UUID.hashValue.getter(v22);
        sub_1000126B0(v20, type metadata accessor for FetchRequestBeacon);
        sub_1000126B0((uint64_t)v11, type metadata accessor for FetchRequestBeacon);
        v24 = v52;
        if (v22 >= v23)
        {
          v26 = v51 + v13;
          if (v52 < v51 || v52 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack(v52, v51, 1, RequestBeacon);
          }
          else if (v52 != v51)
          {
            swift_arrayInitWithTakeBackToFront(v52, v51);
          }
          v51 = v26;
          v25 = a2;
        }
        else
        {
          v25 = a2 + v13;
          if (v52 < a2 || v52 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack(v52, a2, 1, RequestBeacon);
          }
          else if (v52 == a2)
          {
            v24 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v52, a2);
          }
        }
        v52 = v24 + v13;
        a4 = v51;
        if (v51 >= v48)
          break;
        a2 = v25;
      }
      while (v25 < a3);
    }
LABEL_59:
    sub_10088EA14(&v52, &v51, (uint64_t *)&v50);
    return 1;
  }
LABEL_63:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10041AA88(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  _OWORD *v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t result;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[3];
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;

  v8 = type metadata accessor for Date(0);
  v60 = *(_QWORD *)(v8 - 8);
  v61 = v8;
  v9 = __chkstk_darwin(v8);
  v59 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v56 - v11;
  v13 = a2 - a1;
  v14 = (a2 - a1) / 40;
  v15 = a3 - (_QWORD)a2;
  v16 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  v70 = a1;
  v69 = a4;
  if (v14 >= v16)
  {
    if (v15 < -39)
      goto LABEL_45;
    if (a4 != a2 || &a2[40 * v16] <= a4)
      memmove(a4, a2, 40 * v16);
    v34 = &a4[40 * v16];
    v68 = v34;
    v70 = a2;
    if (v15 < 40 || a1 >= a2)
      goto LABEL_44;
    v35 = a3 - 40;
    v57 = a4;
    v58 = a1;
    while (1)
    {
      v36 = (char *)(v35 + 40);
      sub_100030784((uint64_t)(v34 - 40), (uint64_t)v65);
      v37 = a2 - 40;
      sub_100030784((uint64_t)(a2 - 40), (uint64_t)v62);
      v38 = v66;
      v39 = v67;
      sub_10001AA44(v65, v66);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v39);
      v40 = v63;
      v41 = v64;
      sub_10001AA44(v62, v63);
      v42 = v12;
      v43 = v59;
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v41);
      LOBYTE(v40) = static Date.< infix(_:_:)(v42, v43);
      v44 = v61;
      v45 = *(void (**)(char *, uint64_t))(v60 + 8);
      v46 = v43;
      v12 = v42;
      v45(v46, v61);
      v45(v42, v44);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v62);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v65);
      if ((v40 & 1) != 0)
      {
        if (v36 != a2 || v35 >= (unint64_t)a2)
        {
          v47 = *(_OWORD *)v37;
          v48 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v35 + 32) = *((_QWORD *)a2 - 1);
          *(_OWORD *)v35 = v47;
          *(_OWORD *)(v35 + 16) = v48;
        }
        v70 -= 40;
        v34 = v68;
      }
      else
      {
        v49 = v68;
        v34 = v68 - 40;
        v68 -= 40;
        if (v36 >= v49 && v35 < (unint64_t)v49)
        {
          v50 = (unint64_t)v58;
          if (v36 != v49)
          {
            v51 = *(_OWORD *)v34;
            v52 = *(_OWORD *)(v49 - 24);
            *(_QWORD *)(v35 + 32) = *((_QWORD *)v49 - 1);
            *(_OWORD *)v35 = v51;
            *(_OWORD *)(v35 + 16) = v52;
          }
          v37 = a2;
          goto LABEL_40;
        }
        v53 = *(_OWORD *)v34;
        v54 = *(_OWORD *)(v49 - 24);
        *(_QWORD *)(v35 + 32) = *((_QWORD *)v49 - 1);
        *(_OWORD *)v35 = v53;
        *(_OWORD *)(v35 + 16) = v54;
        v37 = a2;
      }
      v50 = (unint64_t)v58;
LABEL_40:
      if (v34 > v57)
      {
        v35 -= 40;
        a2 = v37;
        if ((unint64_t)v37 > v50)
          continue;
      }
      goto LABEL_44;
    }
  }
  if (v13 >= -39)
  {
    if (a4 != a1 || &a1[40 * v14] <= a4)
      memmove(a4, a1, 40 * v14);
    v17 = (unint64_t)&a4[40 * v14];
    v68 = (char *)v17;
    if (v13 >= 40 && (unint64_t)a2 < a3)
    {
      do
      {
        sub_100030784((uint64_t)a2, (uint64_t)v65);
        sub_100030784((uint64_t)a4, (uint64_t)v62);
        v18 = v66;
        v19 = v67;
        sub_10001AA44(v65, v66);
        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
        v20 = v63;
        v21 = v64;
        sub_10001AA44(v62, v63);
        v22 = v59;
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
        v23 = static Date.< infix(_:_:)(v12, v22);
        v24 = *(void (**)(char *, uint64_t))(v60 + 8);
        v25 = v22;
        v26 = v61;
        v24(v25, v61);
        v24(v12, v26);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v62);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v65);
        v27 = v70;
        if ((v23 & 1) != 0)
        {
          v28 = (unint64_t)(a2 + 40);
          if (v70 >= a2 && (unint64_t)v70 < v28 && v70 == a2)
          {
            v27 = a2;
          }
          else
          {
            v29 = *(_OWORD *)a2;
            v30 = *((_OWORD *)a2 + 1);
            *((_QWORD *)v70 + 4) = *((_QWORD *)a2 + 4);
            *v27 = v29;
            v27[1] = v30;
          }
        }
        else
        {
          v31 = v69 + 40;
          if (v70 != v69 || v70 >= v31)
          {
            v32 = *(_OWORD *)v69;
            v33 = *((_OWORD *)v69 + 1);
            *((_QWORD *)v70 + 4) = *((_QWORD *)v69 + 4);
            *v27 = v32;
            v27[1] = v33;
          }
          v69 = v31;
          v28 = (unint64_t)a2;
        }
        v70 = (char *)v27 + 40;
        a4 = v69;
        if ((unint64_t)v69 >= v17)
          break;
        a2 = (char *)v28;
      }
      while (v28 < a3);
    }
LABEL_44:
    sub_10088E9EC((void **)&v70, (const void **)&v69, &v68);
    return 1;
  }
LABEL_45:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10041AF38(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t result;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v45 = type metadata accessor for RawSearchResult(0);
  v8 = __chkstk_darwin(v45);
  v44 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v41 - v10;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_62;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_63;
  v15 = (uint64_t)(a2 - a1) / v13;
  v48 = a1;
  v47 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v16, v45);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v25 = a4 + v18;
      v46 = a4 + v18;
      v48 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v27 = -v13;
        v42 = a4;
        v43 = a1;
        do
        {
          v28 = a3 + v27;
          sub_10005972C(v25 + v27, (uint64_t)v11, type metadata accessor for RawSearchResult);
          v29 = a2 + v27;
          v30 = a3;
          v31 = (uint64_t)v11;
          v32 = v44;
          sub_10005972C(a2 + v27, v44, type metadata accessor for RawSearchResult);
          v33 = static Date.< infix(_:_:)(v31 + *(int *)(v45 + 20), v32 + *(int *)(v45 + 20));
          v34 = v32;
          v11 = (char *)v31;
          sub_1000126B0(v34, type metadata accessor for RawSearchResult);
          sub_1000126B0(v31, type metadata accessor for RawSearchResult);
          if ((v33 & 1) != 0)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v28, a2 + v27, 1, v45);
              v37 = v42;
              v36 = v43;
            }
            else
            {
              v35 = v30 == a2;
              v37 = v42;
              v36 = v43;
              if (!v35)
                swift_arrayInitWithTakeBackToFront(v28, a2 + v27);
            }
            v48 += v27;
          }
          else
          {
            v38 = v46;
            v39 = v46 + v27;
            v46 += v27;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v39, 1, v45);
              v29 = a2;
              v37 = v42;
              v36 = v43;
            }
            else
            {
              v35 = v30 == v38;
              v37 = v42;
              v36 = v43;
              if (!v35)
                swift_arrayInitWithTakeBackToFront(v28, v39);
              v29 = a2;
            }
          }
          v25 = v46;
          if (v46 <= v37)
            break;
          a2 = v29;
          a3 = v28;
        }
        while (v29 > v36);
      }
      goto LABEL_60;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v15, v45);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v43 = a4 + v17;
    v46 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      v20 = v44;
      do
      {
        sub_10005972C(a2, (uint64_t)v11, type metadata accessor for RawSearchResult);
        sub_10005972C(a4, v20, type metadata accessor for RawSearchResult);
        v21 = static Date.< infix(_:_:)(&v11[*(int *)(v45 + 20)], v20 + *(int *)(v45 + 20));
        sub_1000126B0(v20, type metadata accessor for RawSearchResult);
        sub_1000126B0((uint64_t)v11, type metadata accessor for RawSearchResult);
        v22 = v48;
        if ((v21 & 1) != 0)
        {
          v23 = a2 + v13;
          if (v48 < a2 || v48 >= v23)
          {
            swift_arrayInitWithTakeFrontToBack(v48, a2, 1, v45);
          }
          else if (v48 == a2)
          {
            v22 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v48, a2);
          }
        }
        else
        {
          v24 = v47 + v13;
          if (v48 < v47 || v48 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(v48, v47, 1, v45);
          }
          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront(v48, v47);
          }
          v47 = v24;
          v23 = a2;
        }
        v48 = v22 + v13;
        a4 = v47;
        if (v47 >= v43)
          break;
        a2 = v23;
      }
      while (v23 < a3);
    }
LABEL_60:
    sub_10088EAD8(&v48, &v47, (uint64_t *)&v46);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_10041B3E8(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_10041B544((unint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    v9 = swift_release();
    if (v1)
      swift_willThrow(v9);
  }
  else
  {
    v10 = (void *)swift_slowAlloc(v7, -1);
    bzero(v10, v7);
    v8 = sub_10041B544((unint64_t *)v10, v6, v2);
    swift_release();
    swift_slowDealloc(v10, -1, -1);
  }
  return v8;
}

char *sub_10041B544(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;

  v22 = a2;
  v23 = a1;
  v4 = type metadata accessor for RawSearchResult(0);
  v5 = *(_QWORD *)(v4 - 8);
  result = (char *)__chkstk_darwin(v4);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 0;
  v10 = *(_QWORD *)(a3 + 56);
  v24 = 0;
  v25 = a3 + 56;
  v11 = 1 << *(_BYTE *)(a3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v26 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_5;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v26)
      goto LABEL_24;
    v18 = *(_QWORD *)(v25 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v26)
        goto LABEL_24;
      v18 = *(_QWORD *)(v25 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v26)
          goto LABEL_24;
        v18 = *(_QWORD *)(v25 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_20:
    v13 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_5:
    sub_10005972C(*(_QWORD *)(a3 + 48) + *(_QWORD *)(v5 + 72) * v15, (uint64_t)v8, type metadata accessor for RawSearchResult);
    v16 = v8[*(int *)(v4 + 36)];
    result = (char *)sub_1000126B0((uint64_t)v8, type metadata accessor for RawSearchResult);
    if (v16 != 15)
    {
      *(unint64_t *)((char *)v23 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return sub_100853608(v23, v22, v24, a3);
      }
    }
  }
  v19 = v17 + 3;
  if (v19 >= v26)
    goto LABEL_24;
  v18 = *(_QWORD *)(v25 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v26)
      goto LABEL_24;
    v18 = *(_QWORD *)(v25 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

double sub_10041B770@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10041B798(a1, &qword_1010F7808, &qword_1010FB2C8, a2);
}

double sub_10041B784@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10041B798(a1, &qword_1010FB1A0, &qword_1010FB190, a2);
}

double sub_10041B798@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v7 = *(int *)(sub_10001A9A8(a2) + 48);
  v8 = *(int *)(sub_10001A9A8(a3) + 48);
  v9 = *(_QWORD *)(a1 + v7);
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a4, a1, v10);
  *(_QWORD *)(a4 + v8) = v9;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v9).n128_u64[0];
  return result;
}

uint64_t sub_10041B810(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v10 = type metadata accessor for UUID(0);
  v44 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010FB2D0);
  __chkstk_darwin(v13);
  v15 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = -1 << *(_BYTE *)(a1 + 32);
  v17 = ~v16;
  v18 = *(_QWORD *)(a1 + 64);
  v19 = -v16;
  v46 = a1;
  v47 = a1 + 64;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  else
    v20 = -1;
  v48 = v17;
  v49 = 0;
  v50 = v20 & v18;
  v51 = a2;
  v52 = a3;
  v43[1] = a1;
  swift_bridgeObjectRetain(a1);
  v43[0] = a3;
  swift_retain();
  sub_100B28654((uint64_t)v15);
  v21 = sub_10001A9A8(&qword_1010FB2C8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v15, 1, v21) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_10007CC38(v46);
    return swift_release();
  }
  v45 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
  while (1)
  {
    v27 = *(int *)(v21 + 48);
    v28 = v10;
    v45(v12, v15, v10);
    v29 = *(_QWORD *)&v15[v27];
    v30 = *(_QWORD **)a5;
    v32 = sub_100003FB0((uint64_t)v12);
    v33 = v30[2];
    v34 = (v31 & 1) == 0;
    v35 = v33 + v34;
    if (__OFADD__(v33, v34))
      break;
    v36 = v31;
    if (v30[3] >= v35)
    {
      if ((a4 & 1) != 0)
      {
        v39 = *(_QWORD **)a5;
        if ((v31 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        sub_100A9C2C4();
        v39 = *(_QWORD **)a5;
        if ((v36 & 1) != 0)
          goto LABEL_7;
      }
    }
    else
    {
      sub_100A89E44(v35, a4 & 1);
      v37 = sub_100003FB0((uint64_t)v12);
      if ((v36 & 1) != (v38 & 1))
        goto LABEL_22;
      v32 = v37;
      v39 = *(_QWORD **)a5;
      if ((v36 & 1) != 0)
      {
LABEL_7:
        v23 = v39[7];
        v24 = 8 * v32;
        v53 = *(_QWORD *)(v23 + 8 * v32);
        swift_bridgeObjectRetain(v53);
        sub_100304004(v29);
        v25 = v53;
        v10 = v28;
        (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v28);
        v26 = *(_QWORD *)(*(_QWORD *)a5 + 56);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v26 + v24) = v25;
        goto LABEL_8;
      }
    }
    v39[(v32 >> 6) + 8] |= 1 << v32;
    v10 = v28;
    v45((char *)(v39[6] + *(_QWORD *)(v44 + 72) * v32), v12, v28);
    *(_QWORD *)(v39[7] + 8 * v32) = v29;
    v40 = v39[2];
    v41 = __OFADD__(v40, 1);
    v42 = v40 + 1;
    if (v41)
      goto LABEL_21;
    v39[2] = v42;
LABEL_8:
    sub_100B28654((uint64_t)v15);
    v21 = sub_10001A9A8(&qword_1010FB2C8);
    a4 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v15, 1, v21) == 1)
      goto LABEL_5;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v28);
  __break(1u);
  return result;
}

uint64_t sub_10041BB54(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010FB278);
  __chkstk_darwin(v12);
  v14 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = -1 << *(_BYTE *)(a1 + 32);
  v16 = ~v15;
  v17 = *(_QWORD *)(a1 + 64);
  v18 = -v15;
  v41 = a1;
  v42 = a1 + 64;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  else
    v19 = -1;
  v43 = v16;
  v44 = 0;
  v45 = v19 & v17;
  v46 = a2;
  v47 = a3;
  v39[2] = a1;
  swift_bridgeObjectRetain(a1);
  v39[1] = a3;
  swift_retain();
  sub_100B28998((uint64_t)v14);
  v20 = sub_10001A9A8(&qword_1010FB190);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v14, 1, v20) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_10007CC38(v41);
    return swift_release();
  }
  v22 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
  while (1)
  {
    v24 = *(int *)(v20 + 48);
    v22(v11, v14, v48);
    v25 = *(_QWORD *)&v14[v24];
    v26 = *a5;
    v28 = sub_100003FB0((uint64_t)v11);
    v29 = *(_QWORD *)(v26 + 16);
    v30 = (v27 & 1) == 0;
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
      break;
    v32 = v27;
    if (*(_QWORD *)(v26 + 24) >= v31)
    {
      if ((a4 & 1) != 0)
      {
        if ((v27 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        sub_100A9B308();
        if ((v32 & 1) != 0)
          goto LABEL_7;
      }
    }
    else
    {
      sub_100A879D8(v31, a4 & 1);
      v33 = sub_100003FB0((uint64_t)v11);
      if ((v32 & 1) != (v34 & 1))
        goto LABEL_22;
      v28 = v33;
      if ((v32 & 1) != 0)
      {
LABEL_7:
        (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v48);
        v23 = *(_QWORD *)(*a5 + 56);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v23 + 8 * v28) = v25;
        goto LABEL_8;
      }
    }
    v35 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v28 >> 6) + 64) |= 1 << v28;
    v22((char *)(v35[6] + *(_QWORD *)(v40 + 72) * v28), v11, v48);
    *(_QWORD *)(v35[7] + 8 * v28) = v25;
    v36 = v35[2];
    v37 = __OFADD__(v36, 1);
    v38 = v36 + 1;
    if (v37)
      goto LABEL_21;
    v35[2] = v38;
LABEL_8:
    sub_100B28998((uint64_t)v14);
    v20 = sub_10001A9A8(&qword_1010FB190);
    a4 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v14, 1, v20) == 1)
      goto LABEL_5;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v48);
  __break(1u);
  return result;
}

uint64_t sub_10041BE58(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_10041BFA8((unint64_t *)((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    if (v1)
      swift_willThrow(v8);
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc(v7, -1);
    bzero(v9, v7);
    v2 = sub_10041BFA8((unint64_t *)v9, v6, v2);
    swift_slowDealloc(v9, -1, -1);
  }
  return v2;
}

uint64_t sub_10041BFA8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int64_t v44;

  v31 = a2;
  v32 = a1;
  v41 = sub_10001A9A8(&qword_1010FB1A0);
  v4 = __chkstk_darwin(v41);
  v40 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v38 = (char *)&v31 - v6;
  v36 = type metadata accessor for UUID(0);
  v39 = *(_QWORD **)(v36 - 8);
  result = __chkstk_darwin(v36);
  v37 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 0;
  v42 = (_QWORD *)a3;
  v10 = *(_QWORD *)(a3 + 64);
  v33 = 0;
  v34 = a3 + 64;
  v11 = 1 << *(_BYTE *)(a3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v35 = (unint64_t)(v11 + 63) >> 6;
  v14 = (uint64_t)v38;
  v15 = v39;
  v16 = v36;
  v17 = v37;
  v18 = v40;
  while (1)
  {
    if (v13)
    {
      v43 = (v13 - 1) & v13;
      v44 = v9;
      v19 = __clz(__rbit64(v13)) | (v9 << 6);
      goto LABEL_5;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v26 >= v35)
      return sub_10041CC54(v32, v31, v33, v42);
    v27 = *(_QWORD *)(v34 + 8 * v26);
    v28 = v9 + 1;
    if (!v27)
    {
      v28 = v9 + 2;
      if (v9 + 2 >= v35)
        return sub_10041CC54(v32, v31, v33, v42);
      v27 = *(_QWORD *)(v34 + 8 * v28);
      if (!v27)
      {
        v28 = v9 + 3;
        if (v9 + 3 >= v35)
          return sub_10041CC54(v32, v31, v33, v42);
        v27 = *(_QWORD *)(v34 + 8 * v28);
        if (!v27)
          break;
      }
    }
LABEL_20:
    v43 = (v27 - 1) & v27;
    v44 = v28;
    v19 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_5:
    v20 = v42;
    v21 = (void (*)(char *, unint64_t, uint64_t))v15[2];
    v21(v17, v42[6] + v15[9] * v19, v16);
    v22 = *(_QWORD *)(v20[7] + 8 * v19);
    v21((char *)v14, (unint64_t)v17, v16);
    v23 = *(int *)(v41 + 48);
    *(_QWORD *)(v14 + v23) = v22;
    v21(v18, v14, v16);
    *(_QWORD *)&v18[v23] = v22;
    v24 = *(_QWORD *)(v22 + 16);
    swift_bridgeObjectRetain_n(v22, 2);
    sub_100004048(v14, &qword_1010FB1A0);
    v25 = (void (*)(char *, uint64_t))v15[1];
    v25(v18, v16);
    swift_bridgeObjectRelease();
    result = ((uint64_t (*)(char *, uint64_t))v25)(v17, v16);
    v9 = v44;
    v13 = v43;
    if (v24)
    {
      *(unint64_t *)((char *)v32 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      if (__OFADD__(v33++, 1))
      {
        __break(1u);
        return sub_10041CC54(v32, v31, v33, v42);
      }
    }
  }
  v29 = v9 + 4;
  if (v9 + 4 >= v35)
    return sub_10041CC54(v32, v31, v33, v42);
  v27 = *(_QWORD *)(v34 + 8 * v29);
  if (v27)
  {
    v28 = v9 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v28 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v28 >= v35)
      return sub_10041CC54(v32, v31, v33, v42);
    v27 = *(_QWORD *)(v34 + 8 * v28);
    ++v29;
    if (v27)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10041C2BC(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_10041C578(a1, a2, a3, a4, &qword_1010FB320);
}

Swift::Int sub_10041C2C8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  Swift::Int v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  _QWORD v33[9];

  if (!a3)
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_10001A9A8(&qword_1011119F0);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v8 = result;
  v31 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v31)
        return v8;
      v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        v10 = v14 + 1;
        if (v14 + 1 >= v31)
          return v8;
        v15 = a1[v10];
        if (!v15)
        {
          v10 = v14 + 2;
          if (v14 + 2 >= v31)
            return v8;
          v15 = a1[v10];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v31)
              return v8;
            v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                v10 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_41;
                if (v10 >= v31)
                  return v8;
                v15 = a1[v10];
                ++v16;
                if (v15)
                  goto LABEL_24;
              }
            }
            v10 = v16;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_BYTE *)(*(_QWORD *)(v4 + 56) + v13);
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v18);
    String.hash(into:)(v33, v19, v18);
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v8 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v29 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v24);
    *v29 = v19;
    v29[1] = v18;
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v24) = v20;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10041C56C(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_10041C578(a1, a2, a3, a4, &qword_1010FB398);
}

uint64_t sub_10041C578(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  _QWORD *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;

  v43 = a1;
  v50 = type metadata accessor for UUID(0);
  v47 = *(_QWORD *)(v50 - 8);
  v9 = __chkstk_darwin(v50);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v46 = (char *)&v41 - v12;
  if (!a3)
    return (uint64_t)_swiftEmptyDictionarySingleton;
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_10001A9A8(a5);
  result = static _DictionaryStorage.allocate(capacity:)(a3);
  v14 = result;
  v42 = a2;
  if (a2 < 1)
    v15 = 0;
  else
    v15 = *v43;
  v16 = 0;
  v17 = result + 64;
  v44 = a4;
  v45 = v11;
  v18 = v46;
  v19 = v50;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v48 = v16;
      v21 = v20 | (v16 << 6);
    }
    else
    {
      v22 = v16 + 1;
      if (__OFADD__(v16, 1))
        goto LABEL_40;
      if (v22 >= v42)
        return v14;
      v23 = v43[v22];
      v24 = v16 + 1;
      if (!v23)
      {
        v24 = v16 + 2;
        if (v16 + 2 >= v42)
          return v14;
        v23 = v43[v24];
        if (!v23)
        {
          v24 = v16 + 3;
          if (v16 + 3 >= v42)
            return v14;
          v23 = v43[v24];
          if (!v23)
          {
            v25 = v16 + 4;
            if (v16 + 4 >= v42)
              return v14;
            v23 = v43[v25];
            if (!v23)
            {
              while (1)
              {
                v24 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_41;
                if (v24 >= v42)
                  return v14;
                v23 = v43[v24];
                ++v25;
                if (v23)
                  goto LABEL_24;
              }
            }
            v24 = v16 + 4;
          }
        }
      }
LABEL_24:
      v15 = (v23 - 1) & v23;
      v48 = v24;
      v21 = __clz(__rbit64(v23)) + (v24 << 6);
    }
    v26 = v47;
    v27 = *(_QWORD *)(v47 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v47 + 16))(v18, a4[6] + v27 * v21, v19);
    v49 = *(unsigned __int8 *)(a4[7] + v21);
    v28 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v29 = v45;
    v28(v45, v18, v19);
    v30 = *(_QWORD *)(v14 + 40);
    v31 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v19, v31);
    v32 = -1 << *(_BYTE *)(v14 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v35 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v38 = v34 == v37;
        if (v34 == v37)
          v34 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v39 == -1);
      v35 = __clz(__rbit64(~v39)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v28)(*(_QWORD *)(v14 + 48) + v35 * v27, v29, v50);
    *(_BYTE *)(*(_QWORD *)(v14 + 56) + v35) = v49;
    ++*(_QWORD *)(v14 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v44;
    v16 = v48;
    if (!a3)
      return v14;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

Swift::Int sub_10041C8DC(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int result;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v39;
  unint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[9];

  v40 = a1;
  v7 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v44 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  v43 = (char *)&v39 - v10;
  if (!a3)
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  if (a4[2] == a3)
  {
    swift_retain();
    return (Swift::Int)a4;
  }
  v42 = v9;
  sub_10001A9A8((uint64_t *)&unk_1011118D0);
  result = static _DictionaryStorage.allocate(capacity:)(a3);
  v12 = result;
  v39 = a2;
  if (a2 < 1)
    v13 = 0;
  else
    v13 = *v40;
  v14 = 0;
  v15 = result + 64;
  v16 = v42;
  v17 = (uint64_t)v43;
  v41 = a4;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v45 = v14;
      v19 = v18 | (v14 << 6);
    }
    else
    {
      v20 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_40;
      if (v20 >= v39)
        return v12;
      v21 = v40[v20];
      v22 = v14 + 1;
      if (!v21)
      {
        v22 = v14 + 2;
        if (v14 + 2 >= v39)
          return v12;
        v21 = v40[v22];
        if (!v21)
        {
          v22 = v14 + 3;
          if (v14 + 3 >= v39)
            return v12;
          v21 = v40[v22];
          if (!v21)
          {
            v23 = v14 + 4;
            if (v14 + 4 >= v39)
              return v12;
            v21 = v40[v23];
            if (!v21)
            {
              while (1)
              {
                v22 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v22 >= v39)
                  return v12;
                v21 = v40[v22];
                ++v23;
                if (v21)
                  goto LABEL_24;
              }
            }
            v22 = v14 + 4;
          }
        }
      }
LABEL_24:
      v13 = (v21 - 1) & v21;
      v45 = v22;
      v19 = __clz(__rbit64(v21)) + (v22 << 6);
    }
    v24 = a4[7];
    v25 = (uint64_t *)(a4[6] + 16 * v19);
    v26 = *v25;
    v27 = v25[1];
    v28 = *(_QWORD *)(v44 + 72);
    sub_10005972C(v24 + v28 * v19, v17, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_1000126EC(v17, v16, type metadata accessor for OwnedBeaconGroup.PairingState);
    Hasher.init(_seed:)(v46);
    sub_10001BBBC(v26, v27);
    sub_10001BBBC(v26, v27);
    Data.hash(into:)(v46, v26, v27);
    sub_10001BC14(v26, v27);
    result = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v12 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v15 + 8 * (v30 >> 6))) != 0)
    {
      v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      v16 = v42;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v29) >> 6;
      v16 = v42;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v35 = v31 == v34;
        if (v31 == v34)
          v31 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v15 + 8 * v31);
      }
      while (v36 == -1);
      v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }
    *(_QWORD *)(v15 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    v37 = (uint64_t *)(*(_QWORD *)(v12 + 48) + 16 * v32);
    *v37 = v26;
    v37[1] = v27;
    result = sub_1000126EC(v16, *(_QWORD *)(v12 + 56) + v32 * v28, type metadata accessor for OwnedBeaconGroup.PairingState);
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v41;
    v14 = v45;
    if (!a3)
      return v12;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10041CC54(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;

  v47 = type metadata accessor for UUID(0);
  v43 = *(_QWORD *)(v47 - 8);
  v8 = __chkstk_darwin(v47);
  v46 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v42 = (char *)&v38 - v10;
  if (!a3)
    return (uint64_t)_swiftEmptyDictionarySingleton;
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_10001A9A8(&qword_1010FB240);
  result = static _DictionaryStorage.allocate(capacity:)(a3);
  v12 = result;
  v39 = a1;
  v40 = a2;
  if (a2 < 1)
    v13 = 0;
  else
    v13 = *a1;
  v14 = 0;
  v15 = result + 64;
  v41 = a4;
  v16 = v47;
  while (1)
  {
    if (v13)
    {
      v44 = (v13 - 1) & v13;
      v45 = v14;
      v17 = __clz(__rbit64(v13)) | (v14 << 6);
    }
    else
    {
      v18 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_40;
      if (v18 >= v40)
        return v12;
      v19 = v39[v18];
      v20 = v14 + 1;
      if (!v19)
      {
        v20 = v14 + 2;
        if (v14 + 2 >= v40)
          return v12;
        v19 = v39[v20];
        if (!v19)
        {
          v20 = v14 + 3;
          if (v14 + 3 >= v40)
            return v12;
          v19 = v39[v20];
          if (!v19)
          {
            v21 = v14 + 4;
            if (v14 + 4 >= v40)
              return v12;
            v19 = v39[v21];
            if (!v19)
            {
              while (1)
              {
                v20 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_41;
                if (v20 >= v40)
                  return v12;
                v19 = v39[v20];
                ++v21;
                if (v19)
                  goto LABEL_24;
              }
            }
            v20 = v14 + 4;
          }
        }
      }
LABEL_24:
      v44 = (v19 - 1) & v19;
      v45 = v20;
      v17 = __clz(__rbit64(v19)) + (v20 << 6);
    }
    v22 = v42;
    v23 = v43;
    v24 = *(_QWORD *)(v43 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v42, a4[6] + v24 * v17, v16);
    v25 = *(_QWORD *)(a4[7] + 8 * v17);
    v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v26(v46, v22, v16);
    v27 = *(_QWORD *)(v12 + 40);
    v28 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    swift_bridgeObjectRetain(v25);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v16, v28);
    v29 = -1 << *(_BYTE *)(v12 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v15 + 8 * (v30 >> 6))) != 0)
    {
      v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v35 = v31 == v34;
        if (v31 == v34)
          v31 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v15 + 8 * v31);
      }
      while (v36 == -1);
      v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }
    *(_QWORD *)(v15 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(_QWORD *)(v12 + 48) + v32 * v24, v46, v47);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v32) = v25;
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v41;
    v13 = v44;
    v14 = v45;
    if (!a3)
      return v12;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10041CFA0(uint64_t result, uint64_t a2, char a3, uint64_t a4, int a5, char a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  if ((a6 & 1) != 0 || (a3 & 1) != 0)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  v8 = result;
  if (a4 < result)
    goto LABEL_15;
  v10 = a2;
  if (a5 != (_DWORD)a2)
    goto LABEL_16;
  if (result != a4)
  {
    v13 = 0;
    while (1)
    {
      v11 = v13 + 1;
      if (__OFADD__(v13, 1))
        break;
      v14 = sub_1003B2DB8(v8, v10, 0, a7);
      v16 = v15;
      v18 = v17;
      result = sub_1000FE2A4(v8, v10, 0);
      if ((v18 & 1) != 0)
        goto LABEL_17;
      if ((_DWORD)v16 != a5)
        goto LABEL_14;
      ++v13;
      v8 = v14;
      v10 = v16;
      if (v14 == a4)
        return v11;
    }
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return 0;
}

uint64_t sub_10041D08C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t (*a8)(char *))
{
  uint64_t v11;
  int v14;
  int v15;
  int v16;
  uint64_t result;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v11 = a4;
  v14 = a3 & 1;
  v15 = a6 & 1;
  v16 = v15 | v14;
  result = sub_10041CFA0(a1, a2, v14, a4, a5, v15, a7);
  if (v16)
  {
LABEL_27:
    __break(1u);
    return result;
  }
  if ((_DWORD)a5 != (_DWORD)a2)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v18 = v11 < a1;
  if (v11 >= a1)
    v19 = a1;
  else
    v19 = v11;
  if (v11 >= a1)
    v20 = a2;
  else
    v20 = a5;
  if (v11 >= a1)
  {
    v21 = 1;
  }
  else
  {
    v11 = a1;
    v21 = -1;
  }
  if (v18)
    v22 = a2;
  else
    v22 = a5;
  v25 = v19;
  v26 = v20;
  v27 = 0;
  if (v19 != v11)
  {
    v24 = 0;
    while (1)
    {
      v23 = v24 + v21;
      if (__OFADD__(v24, v21))
        break;
      result = sub_10041D19C((uint64_t)&v25, a7, a8);
      if ((v27 & 1) != 0)
        goto LABEL_26;
      if ((_DWORD)v26 != v22)
        goto LABEL_24;
      v24 += v21;
      if (v25 == v11)
        return v23;
    }
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_1000FE2A4(v11, v20, 0);
  return 0;
}

uint64_t sub_10041D19C(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(char *);

  v22 = a3;
  v5 = type metadata accessor for RawSearchResult(0);
  v21 = *(_QWORD *)(v5 - 8);
  result = __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    goto LABEL_19;
  v9 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a2 + 36) == (_DWORD)v9)
  {
    v10 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 != 1 << *(_BYTE *)(a2 + 32))
    {
      v20 = (uint64_t *)a1;
      while (1)
      {
        v11 = v9;
        v12 = v10;
        v10 = sub_1003B2DB8(v10, v9, 0, a2);
        v9 = v13;
        v15 = v14;
        result = sub_1000FE2A4(v12, v11, 0);
        if ((v15 & 1) != 0)
          goto LABEL_18;
        if (*(_DWORD *)(a2 + 36) != (_DWORD)v9)
        {
          __break(1u);
LABEL_14:
          __break(1u);
LABEL_15:
          __break(1u);
          goto LABEL_16;
        }
        v16 = 1 << *(_BYTE *)(a2 + 32);
        if (v10 == v16)
          goto LABEL_12;
        if (v10 < 0 || v10 >= v16)
          goto LABEL_14;
        if (((*(_QWORD *)(a2 + 56 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
          goto LABEL_15;
        sub_10005972C(*(_QWORD *)(a2 + 48) + *(_QWORD *)(v21 + 72) * v10, (uint64_t)v8, type metadata accessor for RawSearchResult);
        swift_retain();
        v17 = v22(v8);
        swift_release();
        result = sub_1000126B0((uint64_t)v8, type metadata accessor for RawSearchResult);
        if ((v17 & 1) != 0)
        {
LABEL_12:
          v18 = v20;
          *v20 = v10;
          v18[1] = v9;
          *((_BYTE *)v18 + 16) = 0;
          return result;
        }
      }
    }
  }
  else
  {
LABEL_16:
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_10041D354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for AccessoryIdentityPairingLockCheckEndPoint, &qword_1010FB2F8, (uint64_t)aQ_0);
}

uint64_t sub_10041D370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for AccessoryIdentityPairingLockAckEndPoint, &qword_1010FB2F0, (uint64_t)&unk_100E56CA8);
}

uint64_t sub_10041D38C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[5];

  v41 = a2;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v41 - v19;
  v44[3] = a4(0);
  v44[4] = sub_100006204(a5, a4, a6);
  v21 = sub_100018F08(v44);
  sub_1000126EC(a1, (uint64_t)v21, a4);
  v22 = qword_1010F7CC8;
  v23 = type metadata accessor for FMNAuthenticationProvider(0);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v24 = swift_retain();
  *(_QWORD *)(a3 + v22) = FMNAuthenticationProvider.init()(v24);
  v25 = qword_1010F7CD8;
  if (qword_1010E9B70 != -1)
    swift_once(&qword_1010E9B70, sub_100337B4C);
  *(_QWORD *)(a3 + v25) = qword_1011B6D70;
  v26 = swift_unownedRetain();
  UUID.init()(v26);
  v27 = qword_1010F7CE0;
  v28 = objc_msgSend(objc_allocWithZone((Class)NSLock), "init");
  *(_QWORD *)(a3 + v27) = v28;
  *(_BYTE *)(a3 + qword_1010F7CE8) = 0;
  static SystemInfo.lockState.getter(v28);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v29 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v43, v14, v29);
  dispatch thunk of RawRepresentable.rawValue.getter(&v42, v14, v29);
  v31 = v42;
  v30 = v43;
  v32 = *(void (**)(char *, uint64_t))(v15 + 8);
  v32(v18, v14);
  v32(v20, v14);
  if (v30 == v31)
  {
    v33 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v34 = (void *)static OS_os_log.default.getter(v33);
    v35 = static os_log_type_t.default.getter(v34);
    os_log(_:dso:log:type:_:)("ServerInteractionController preventing auto-renew credentials before first unlock.", 82, 2, &_mh_execute_header, v34, v35, _swiftEmptyArrayStorage);

    v36 = *(_QWORD *)(a3 + v22);
    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter(0);
    swift_release(v36);
  }
  sub_100030784((uint64_t)v44, a3 + qword_1010F7CD0);
  swift_release(a3);
  v37 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v13, 1, 1, v37);
  v38 = swift_retain();
  v39 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)(v38, &protocol witness table for FMNAuthenticationProvider, v13, v41);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v44);
  return v39;
}

uint64_t sub_10041D6DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for OwnedDeviceFetchEndpoint, &qword_1010FB230, (uint64_t)&unk_100E3A484);
}

uint64_t sub_10041D6F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for AirPodsLEPairingLockCheckEndPoint, &qword_1010FB3F0, (uint64_t)&unk_100E50220);
}

uint64_t sub_10041D714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for AirPodsLEPairingLockAckEndPoint, &qword_1010FB3E8, (uint64_t)&unk_100E45C10);
}

uint64_t sub_10041D730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for NFCTapEndPoint, &qword_1010FB338, (uint64_t)&unk_100E47A20);
}

uint64_t sub_10041D74C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for NotifyMeEndpoint, &qword_1010FB3E0, (uint64_t)&unk_100E2FE64);
}

uint64_t sub_10041D768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for AccessoryInfoEndPoint, &qword_1010FB300, (uint64_t)&unk_100E6A688);
}

uint64_t sub_10041D784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for UnpairEndPoint, &qword_1010FB310, (uint64_t)&unk_100E5FE0C);
}

uint64_t sub_10041D7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for PairingLockCheckEndPoint, &qword_1010FB390, (uint64_t)&unk_100E2F6DC);
}

uint64_t sub_10041D7BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for AccessoryUnpairEndpoint, &qword_1010FB3D0, (uint64_t)&unk_100E287F8);
}

uint64_t sub_10041D7D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for AirPodsUnpairEndPoint, &qword_1010FB318, (uint64_t)"a_#");
}

uint64_t sub_10041D7F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for AccessoryPairingLockCheckEndPoint, &qword_1010FB3D8, (uint64_t)&unk_100E22494);
}

uint64_t sub_10041D810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for AccessoryPairingLockAckEndpoint, &qword_1010FB3C8, (uint64_t)&unk_100E56D90);
}

uint64_t sub_10041D82C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for PencilUnpairEndPoint, &qword_1010FB2E8, (uint64_t)&unk_100E2D128);
}

uint64_t sub_10041D848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for SubmitEndpoint, &qword_1010FB3C0, (uint64_t)&unk_100E2E22C);
}

uint64_t sub_10041D864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for OwnedDeviceSubmitEndpoint, &qword_1010FB3B8, (uint64_t)&unk_100E2EC40);
}

uint64_t sub_10041D880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for SecureLocationsConfigEndpoint, &qword_1010FB358, (uint64_t)&unk_100E40FB4);
}

uint64_t sub_10041D89C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for SecureLocationsFetchEndpoint, &qword_1010FB360, (uint64_t)&unk_100E3A3D4);
}

uint64_t sub_10041D8B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for SecureLocationsLabelledLocationsEndpoint, &qword_1010FB370, (uint64_t)&unk_100E64494);
}

uint64_t sub_10041D8D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for SecureLocationsSubmitEndpoint, &qword_1010FB378, (uint64_t)&unk_100E2EC98);
}

uint64_t sub_10041D8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for SecureLocationsUnsubscribeEndpoint, &qword_1010FB3B0, (uint64_t)&unk_100E51B3C);
}

uint64_t sub_10041D90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for SecureLocationsPushAckEndpoint, &qword_1010FB368, (uint64_t)&unk_100E54774);
}

uint64_t sub_10041D928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for PairingLockAckEndPoint, &qword_1010FB330, (uint64_t)"\tk#");
}

uint64_t sub_10041D944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for AirPodsPairingLockCheckEndPoint, &qword_1010FB348, (uint64_t)&unk_100E22430);
}

uint64_t sub_10041D960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for AirPodsPairingLockAckEndPoint, &qword_1010FB340, (uint64_t)"ɧ#");
}

uint64_t sub_10041D97C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for RoleCategoriesEndpoint, &qword_1010FB380, (uint64_t)&unk_100E62A08);
}

uint64_t sub_10041D998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for ConfigurationEndpoint, &qword_1010FB388, (uint64_t)&unk_100E63A48);
}

uint64_t sub_10041D9B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for AccountCheckEndpoint, &qword_1010FB308, (uint64_t)&unk_100E71568);
}

uint64_t sub_10041D9D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for SubmitUTInfoEndpoint, &qword_1010FB350, (uint64_t)&unk_100E43C98);
}

uint64_t sub_10041D9EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10041D38C(a1, a2, a3, type metadata accessor for PairingLockUpdateEndPoint, &qword_1010FB328, (uint64_t)&unk_100E56DDC);
}

void sub_10041DA08(uint64_t a1, void (*a2)(char *, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, unint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  char *v54;

  v49 = a3;
  v50 = a4;
  v48 = a2;
  v5 = &qword_1010FB1A0;
  v47 = sub_10001A9A8(&qword_1010FB1A0);
  v6 = __chkstk_darwin(v47);
  v46 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v54 = (char *)&v42 - v9;
  __chkstk_darwin(v8);
  v45 = (char *)&v42 - v10;
  v11 = *(_QWORD *)(a1 + 64);
  v43 = a1 + 64;
  v12 = 1 << *(_BYTE *)(a1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v44 = (unint64_t)(v12 + 63) >> 6;
  v51 = a1;
  swift_bridgeObjectRetain(a1);
  v15 = 0;
  v16 = (uint64_t)v54;
  while (v14)
  {
    v52 = (v14 - 1) & v14;
    v53 = v15;
    v19 = __clz(__rbit64(v14)) | (v15 << 6);
LABEL_24:
    v24 = v51;
    v25 = *(_QWORD *)(v51 + 48);
    v26 = type metadata accessor for UUID(0);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(void (**)(char *, unint64_t, uint64_t))(v27 + 16);
    v29 = v45;
    v28(v45, v25 + *(_QWORD *)(v27 + 72) * v19, v26);
    v30 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v19);
    v31 = v47;
    *(_QWORD *)&v29[*(int *)(v47 + 48)] = v30;
    v32 = (uint64_t)v29;
    v33 = v5;
    sub_100005CF0(v32, v16, v5);
    v34 = *(int *)(v31 + 48);
    v35 = *(_QWORD *)(v16 + v34);
    v36 = v46;
    v28(v46, v16, v26);
    v37 = (uint64_t)v36;
    *(_QWORD *)&v36[v34] = v35;
    v38 = v50;
    v39 = *(_QWORD *)(v50 + 16);
    swift_bridgeObjectRetain(v30);
    if (v39 && (v40 = sub_100003FB0(v37), (v41 & 1) != 0))
      v17 = *(unsigned __int8 *)(*(_QWORD *)(v38 + 56) + v40);
    else
      v17 = 0;
    v5 = v33;
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v37, v26);
    v18 = (uint64_t)v54;
    v48(v54, v35, v17);
    sub_100004048(v18, v5);
    v14 = v52;
    v15 = v53;
  }
  v20 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v20 >= v44)
    goto LABEL_27;
  v21 = *(_QWORD *)(v43 + 8 * v20);
  v22 = v15 + 1;
  if (v21)
    goto LABEL_23;
  v22 = v15 + 2;
  if (v15 + 2 >= v44)
    goto LABEL_27;
  v21 = *(_QWORD *)(v43 + 8 * v22);
  if (v21)
    goto LABEL_23;
  v22 = v15 + 3;
  if (v15 + 3 >= v44)
    goto LABEL_27;
  v21 = *(_QWORD *)(v43 + 8 * v22);
  if (v21)
    goto LABEL_23;
  v22 = v15 + 4;
  if (v15 + 4 >= v44)
    goto LABEL_27;
  v21 = *(_QWORD *)(v43 + 8 * v22);
  if (v21)
  {
LABEL_23:
    v52 = (v21 - 1) & v21;
    v53 = v22;
    v19 = __clz(__rbit64(v21)) + (v22 << 6);
    goto LABEL_24;
  }
  v23 = v15 + 5;
  if (v15 + 5 >= v44)
  {
LABEL_27:
    swift_release();
    return;
  }
  v21 = *(_QWORD *)(v43 + 8 * v23);
  if (v21)
  {
    v22 = v15 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v22 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v22 >= v44)
      goto LABEL_27;
    v21 = *(_QWORD *)(v43 + 8 * v22);
    ++v23;
    if (v21)
      goto LABEL_23;
  }
LABEL_29:
  __break(1u);
}

void sub_10041DD24(uint64_t a1, void (*a2)(char *, uint64_t, __n128))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t RequestBeacon;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, uint64_t, __n128);
  uint64_t v51;

  v3 = v2;
  v50 = a2;
  v5 = sub_10001A9A8(&qword_1010FB248);
  __chkstk_darwin(v5);
  v49 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  v8 = *(_QWORD *)(RequestBeacon - 8);
  v46 = RequestBeacon;
  v47 = v8;
  v9 = __chkstk_darwin(RequestBeacon);
  v42 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v41 = (uint64_t)&v41 - v11;
  v48 = sub_10001A9A8(&qword_1010FB250);
  v12 = __chkstk_darwin(v48);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v41 - v15;
  v17 = *(_QWORD *)(a1 + 64);
  v44 = a1 + 64;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v45 = (unint64_t)(v18 + 63) >> 6;
  v51 = a1;
  swift_bridgeObjectRetain(a1);
  v21 = 0;
  v43 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v20)
    {
      v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v23 = v22 | (v21 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v21++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v21 >= v45)
      goto LABEL_32;
    v25 = *(_QWORD *)(v44 + 8 * v21);
    if (!v25)
      break;
LABEL_18:
    v20 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v21 << 6);
LABEL_19:
    v27 = v51;
    v28 = *(_QWORD *)(v51 + 48);
    v29 = type metadata accessor for UUID(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v16, v28 + *(_QWORD *)(*(_QWORD *)(v29 - 8) + 72) * v23, v29);
    v30 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v23);
    v31 = v48;
    *(_QWORD *)&v16[*(int *)(v48 + 48)] = v30;
    sub_100005CF0((uint64_t)v16, (uint64_t)v14, &qword_1010FB250);
    v32 = *(_QWORD *)&v14[*(int *)(v31 + 48)];
    v33 = swift_bridgeObjectRetain(v30);
    v34 = (uint64_t)v49;
    v50(v14, v32, v33);
    if (v3)
    {
      sub_100004048((uint64_t)v14, &qword_1010FB250);
      swift_bridgeObjectRelease();
LABEL_32:
      swift_release();
      return;
    }
    sub_100004048((uint64_t)v14, &qword_1010FB250);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v34, 1, v46) == 1)
    {
      sub_100004048(v34, &qword_1010FB248);
    }
    else
    {
      v35 = v34;
      v36 = v41;
      sub_1000126EC(v35, v41, type metadata accessor for FetchRequestBeacon);
      sub_1000126EC(v36, v42, type metadata accessor for FetchRequestBeacon);
      if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
        v43 = (_QWORD *)sub_1007C95CC(0, v43[2] + 1, 1, (unint64_t)v43);
      v38 = v43[2];
      v37 = v43[3];
      if (v38 >= v37 >> 1)
        v43 = (_QWORD *)sub_1007C95CC(v37 > 1, v38 + 1, 1, (unint64_t)v43);
      v39 = v42;
      v40 = v43;
      v43[2] = v38 + 1;
      sub_1000126EC(v39, (uint64_t)v40+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(_QWORD *)(v47 + 72) * v38, type metadata accessor for FetchRequestBeacon);
    }
  }
  v26 = v21 + 1;
  if (v21 + 1 >= v45)
    goto LABEL_32;
  v25 = *(_QWORD *)(v44 + 8 * v26);
  if (v25)
    goto LABEL_17;
  v26 = v21 + 2;
  if (v21 + 2 >= v45)
    goto LABEL_32;
  v25 = *(_QWORD *)(v44 + 8 * v26);
  if (v25)
    goto LABEL_17;
  v26 = v21 + 3;
  if (v21 + 3 >= v45)
    goto LABEL_32;
  v25 = *(_QWORD *)(v44 + 8 * v26);
  if (v25)
    goto LABEL_17;
  v26 = v21 + 4;
  if (v21 + 4 >= v45)
    goto LABEL_32;
  v25 = *(_QWORD *)(v44 + 8 * v26);
  if (v25)
  {
LABEL_17:
    v21 = v26;
    goto LABEL_18;
  }
  while (1)
  {
    v21 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v21 >= v45)
      goto LABEL_32;
    v25 = *(_QWORD *)(v44 + 8 * v21);
    ++v26;
    if (v25)
      goto LABEL_18;
  }
LABEL_34:
  __break(1u);
}

_QWORD *sub_10041E164(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD v32[2];
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;

  v34 = sub_10001A9A8(&qword_1010ED280);
  v4 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v33 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v40 = *(_QWORD **)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    return _swiftEmptyArrayStorage;
  v37 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v36 = *(_QWORD *)(v4 + 72);
  v41 = a2 + 56;
  v32[1] = a1;
  swift_bridgeObjectRetain(a1);
  v10 = 0;
  v11 = _swiftEmptyArrayStorage;
  v35 = v9;
  do
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v12 = v37 + v36 * v10;
      v13 = *(_QWORD *)(a2 + 40);
      v14 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v42 = v12;
      v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v14);
      v16 = -1 << *(_BYTE *)(a2 + 32);
      v17 = v15 & ~v16;
      if (((*(_QWORD *)(v41 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
      {
        v38 = v10;
        v39 = v11;
        v18 = ~v16;
        v19 = v40[9];
        v20 = (void (*)(char *, unint64_t, uint64_t))v40[2];
        while (1)
        {
          v21 = a2;
          v20(v8, *(_QWORD *)(a2 + 48) + v19 * v17, v6);
          v22 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v42, v6, v22);
          v24 = (void (*)(char *, uint64_t))v40[1];
          v24(v8, v6);
          if ((v23 & 1) != 0)
            break;
          v17 = (v17 + 1) & v18;
          a2 = v21;
          if (((*(_QWORD *)(v41 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
          {
            v9 = v35;
            v11 = v39;
            goto LABEL_4;
          }
        }
        v25 = v33;
        v26 = *(int *)(v34 + 48);
        v27 = v42;
        v20(v33, v42, v6);
        v28 = *(_BYTE *)(v27 + v26);
        v25[v26] = v28;
        v24(v25, v6);
        v11 = v39;
        if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
          v11 = sub_1007C98C8(0, v11[2] + 1, 1, v11);
        a2 = v21;
        v9 = v35;
        v30 = v11[2];
        v29 = v11[3];
        if (v30 >= v29 >> 1)
          v11 = sub_1007C98C8((_QWORD *)(v29 > 1), v30 + 1, 1, v11);
        v11[2] = v30 + 1;
        *((_BYTE *)v11 + v30 + 32) = v28;
LABEL_4:
        v10 = v38;
      }
    }
    ++v10;
  }
  while (v10 != v9);
  swift_bridgeObjectRelease();
  return v11;
}

_QWORD *sub_10041E460(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = _swiftEmptyArrayStorage;
  v36 = _swiftEmptyArrayStorage;
  v28 = *(_QWORD *)(a1 + 16);
  if (v28)
  {
    v26 = v2;
    v10 = 0;
    v27 = a1 + 32;
    v29 = a2;
    do
    {
      sub_100030784(v27 + 40 * v10, (uint64_t)&v33);
      v11 = *(_QWORD *)(a2 + 16);
      if (v11)
      {
        v12 = *(_QWORD *)(type metadata accessor for LocalFindableAccessoryRecord(0) - 8);
        v13 = a2 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
        v14 = *(_QWORD *)(v12 + 72);
        swift_bridgeObjectRetain(a2);
        do
        {
          v16 = v34;
          v15 = v35;
          sub_10001AA44(&v33, v34);
          (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v15 + 8) + 8) + 32))(v16);
          LOBYTE(v15) = static UUID.== infix(_:_:)(v13, v8);
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          if ((v15 & 1) != 0)
          {
            a2 = v29;
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v33);
            goto LABEL_4;
          }
          v13 += v14;
          --v11;
        }
        while (v11);
        swift_bridgeObjectRelease();
      }
      sub_10000F9FC(&v33, (uint64_t)v30);
      v17 = v36;
      if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
      {
        sub_10009A628(0, v17[2] + 1, 1);
        v17 = v36;
      }
      v19 = v17[2];
      v18 = v17[3];
      if (v19 >= v18 >> 1)
        sub_10009A628(v18 > 1, v19 + 1, 1);
      v20 = v31;
      v21 = v32;
      v22 = sub_10009F5D0((uint64_t)v30, v31);
      __chkstk_darwin(v22);
      v24 = (char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v25 + 16))(v24);
      sub_1004AA86C(v19, (uint64_t)v24, (uint64_t *)&v36, v20, v21);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
      a2 = v29;
LABEL_4:
      ++v10;
    }
    while (v10 != v28);
    return v36;
  }
  return result;
}

uint64_t sub_10041E6CC(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t a5)
{
  char *v5;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v36;
  uint64_t v37;
  _OWORD *v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v106;
  uint64_t result;
  char *v108;
  unint64_t v109;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD v118[3];
  uint64_t v119;
  uint64_t v120;
  _QWORD v121[3];
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;

  v5 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 40;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  v126 = __src;
  v125 = __dst;
  v113 = (char *)a3;
  if (v9 >= v11)
  {
    if (v10 < -39)
      goto LABEL_126;
    if (__dst != a2 || &a2[40 * v11] <= __dst)
      memmove(__dst, a2, 40 * v11);
    v59 = &v5[40 * v11];
    v124 = v59;
    v126 = v6;
    if (v7 >= v6 || v10 < 40)
    {
LABEL_123:
      sub_10088E9EC((void **)&v126, (const void **)&v125, &v124);
      return 1;
    }
    v60 = *(_QWORD *)(a5 + 16);
    v61 = v60 - 1;
    v108 = v7;
    v109 = v60;
    if (v60 <= 1)
      v60 = 1;
    v112 = v60 - 1;
    v115 = a5 + 40;
    v117 = v61;
    while (1)
    {
      sub_100030784((uint64_t)(v59 - 40), (uint64_t)v121);
      v64 = v6 - 40;
      sub_100030784((uint64_t)(v6 - 40), (uint64_t)v118);
      v65 = v122;
      v66 = v123;
      sub_10001AA44(v121, v122);
      v67 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v66 + 176))(v65, v66);
      v68 = v67;
      if (!v109)
      {

        v77 = 0;
        goto LABEL_93;
      }
      v69 = *(_QWORD *)(a5 + 32);
      v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
      v72 = v71;
      v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
      if (v70 == v73 && v72 == v74)
      {

        swift_bridgeObjectRelease_n(v72, 2);
      }
      else
      {
        v76 = _stringCompareWithSmolCheck(_:_:expecting:)(v70, v72, v73, v74, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v76 & 1) == 0)
        {
          v78 = 0;
          while (v117 != v78)
          {
            v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v115 + 8 * v78));
            v95 = v94;
            v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
            if (v93 == v96 && v95 == v97)
            {

              swift_bridgeObjectRelease_n(v95, 2);
              ++v78;
              goto LABEL_83;
            }
            v99 = _stringCompareWithSmolCheck(_:_:expecting:)(v93, v95, v96, v97, 0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            ++v78;
            if ((v99 & 1) != 0)
            {

              goto LABEL_83;
            }
          }
          goto LABEL_120;
        }

      }
      v78 = 0;
LABEL_83:
      v79 = v119;
      v80 = v120;
      sub_10001AA44(v118, v119);
      v68 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v80 + 176))(v79, v80);
      v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
      v83 = v82;
      v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
      if (v81 == v84 && v83 == v85)
      {

        swift_bridgeObjectRelease_n(v83, 2);
LABEL_90:
        v88 = 0;
LABEL_91:
        v77 = v78 < v88;
        goto LABEL_92;
      }
      v87 = _stringCompareWithSmolCheck(_:_:expecting:)(v81, v83, v84, v85, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v87 & 1) != 0)
      {

        goto LABEL_90;
      }
      v88 = 0;
      while (v117 != v88)
      {
        if (v112 == v88)
        {
LABEL_125:
          __break(1u);
          goto LABEL_126;
        }
        v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v115 + 8 * v88));
        v102 = v101;
        v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
        if (v100 == v103 && v102 == v104)
        {

          swift_bridgeObjectRelease_n(v102, 2);
          ++v88;
          goto LABEL_91;
        }
        v106 = _stringCompareWithSmolCheck(_:_:expecting:)(v100, v102, v103, v104, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ++v88;
        if ((v106 & 1) != 0)
        {

          goto LABEL_91;
        }
      }
LABEL_120:

      v77 = 0;
LABEL_92:
      v7 = v108;
LABEL_93:
      v89 = v113 - 40;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v118);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v121);
      if (v77)
      {
        if (v113 != v6 || v89 >= v6)
        {
          v62 = *(_OWORD *)v64;
          v63 = *(_OWORD *)(v6 - 24);
          *((_QWORD *)v113 - 1) = *((_QWORD *)v6 - 1);
          *(_OWORD *)v89 = v62;
          *(_OWORD *)(v113 - 24) = v63;
        }
        v126 -= 40;
        v59 = v124;
        if (v124 <= v5)
          goto LABEL_123;
      }
      else
      {
        v90 = (unint64_t)v124;
        v59 = v124 - 40;
        v124 -= 40;
        if ((unint64_t)v113 < v90 || (unint64_t)v89 >= v90 || v113 != (char *)v90)
        {
          v91 = *(_OWORD *)v59;
          v92 = *(_OWORD *)(v90 - 24);
          *((_QWORD *)v113 - 1) = *(_QWORD *)(v90 - 8);
          *(_OWORD *)v89 = v91;
          *(_OWORD *)(v113 - 24) = v92;
        }
        v64 = v6;
        if (v59 <= v5)
          goto LABEL_123;
      }
      v6 = v64;
      v113 -= 40;
      if (v64 <= v7)
        goto LABEL_123;
    }
  }
  if (v8 >= -39)
  {
    if (__dst != __src || &__src[40 * v9] <= __dst)
      memmove(__dst, __src, 40 * v9);
    v114 = (unint64_t)&v5[40 * v9];
    v124 = (char *)v114;
    if ((unint64_t)v6 < a3 && v8 >= 40)
    {
      v13 = *(_QWORD *)(a5 + 16);
      v14 = v13 - 1;
      v111 = v13;
      if (v13 <= 1)
        v13 = 1;
      v116 = v13 - 1;
      v15 = a5 + 40;
      while (1)
      {
        sub_100030784((uint64_t)v6, (uint64_t)v121);
        sub_100030784((uint64_t)v5, (uint64_t)v118);
        v16 = v122;
        v17 = v123;
        sub_10001AA44(v121, v122);
        v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 176))(v16, v17);
        if (!v111)
          goto LABEL_50;
        v19 = *(_QWORD *)(a5 + 32);
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v22 = v21;
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        if (v20 == v23 && v22 == v24)
        {

          swift_bridgeObjectRelease_n(v22, 2);
        }
        else
        {
          v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, v23, v24, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v26 & 1) == 0)
          {
            v27 = 0;
            while (v14 != v27)
            {
              v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v15 + 8 * v27));
              v44 = v43;
              v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
              if (v42 == v45 && v44 == v46)
              {

                swift_bridgeObjectRelease_n(v44, 2);
                ++v27;
                goto LABEL_20;
              }
              v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v44, v45, v46, 0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              ++v27;
              if ((v48 & 1) != 0)
              {

                goto LABEL_20;
              }
            }
            goto LABEL_50;
          }

        }
        v27 = 0;
LABEL_20:
        v28 = v119;
        v29 = v120;
        sub_10001AA44(v118, v119);
        v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 176))(v28, v29);
        v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v32 = v31;
        v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        if (v30 == v33 && v32 == v34)
        {

          swift_bridgeObjectRelease_n(v32, 2);
        }
        else
        {
          v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, v33, v34, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v36 & 1) == 0)
          {
            v37 = 0;
            while (v14 != v37)
            {
              if (v116 == v37)
              {
                __break(1u);
                goto LABEL_125;
              }
              v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v15 + 8 * v37));
              v51 = v50;
              v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
              if (v49 == v52 && v51 == v53)
              {

                swift_bridgeObjectRelease_n(v51, 2);
                ++v37;
                goto LABEL_28;
              }
              v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v51, v52, v53, 0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              ++v37;
              if ((v55 & 1) != 0)
              {

                goto LABEL_28;
              }
            }
LABEL_50:

            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v118);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v121);
LABEL_51:
            v38 = v126;
            v56 = v125 + 40;
            if (v126 != v125 || v126 >= v56)
            {
              v57 = *(_OWORD *)v125;
              v58 = *((_OWORD *)v125 + 1);
              *((_QWORD *)v126 + 4) = *((_QWORD *)v125 + 4);
              *v38 = v57;
              v38[1] = v58;
            }
            v125 = v56;
            v39 = (unint64_t)v6;
            goto LABEL_55;
          }

        }
        v37 = 0;
LABEL_28:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v118);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v121);
        if (v27 >= v37)
          goto LABEL_51;
        v38 = v126;
        v39 = (unint64_t)(v6 + 40);
        if (v126 >= v6 && (unint64_t)v126 < v39 && v126 == v6)
        {
          v38 = v6;
        }
        else
        {
          v40 = *(_OWORD *)v6;
          v41 = *((_OWORD *)v6 + 1);
          *((_QWORD *)v126 + 4) = *((_QWORD *)v6 + 4);
          *v38 = v40;
          v38[1] = v41;
        }
LABEL_55:
        v126 = (char *)v38 + 40;
        v5 = v125;
        if ((unint64_t)v125 < v114)
        {
          v6 = (char *)v39;
          if (v39 < (unint64_t)v113)
            continue;
        }
        goto LABEL_123;
      }
    }
    goto LABEL_123;
  }
LABEL_126:
  swift_bridgeObjectRelease();
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10041EF64(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v49;
  uint64_t v51;
  uint64_t v52;
  unint64_t v54;
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;

  v52 = result;
  if (a3 != a2)
  {
    v5 = a3;
    v6 = *(_QWORD *)(a5 + 16);
    v7 = v6 - 1;
    v54 = v6;
    if (v6 <= 1)
      v6 = 1;
    v62 = v6 - 1;
    v8 = a5 + 40;
LABEL_8:
    v51 = v5;
    while (1)
    {
      v9 = *a4 + 40 * v5;
      sub_100030784(v9, (uint64_t)&v59);
      sub_100030784(v9 - 40, (uint64_t)v56);
      v10 = v60;
      v11 = v61;
      sub_10001AA44(&v59, v60);
      v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 176))(v10, v11);
      if (!v54)
        goto LABEL_6;
      v13 = *(_QWORD *)(a5 + 32);
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      if (v14 == v17 && v16 == v18)
      {

        swift_bridgeObjectRelease_n(v16, 2);
      }
      else
      {
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0)
        {
          v21 = 0;
          while (v7 != v21)
          {
            v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v8 + 8 * v21));
            v38 = v37;
            v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
            if (v36 == v39 && v38 == v40)
            {

              swift_bridgeObjectRelease_n(v38, 2);
              ++v21;
              goto LABEL_18;
            }
            v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v39, v40, 0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            ++v21;
            if ((v42 & 1) != 0)
            {

              goto LABEL_18;
            }
          }
          goto LABEL_6;
        }

      }
      v21 = 0;
LABEL_18:
      v22 = v57;
      v23 = v58;
      sub_10001AA44(v56, v57);
      v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 176))(v22, v23);
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v26 = v25;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      if (v24 == v27 && v26 == v28)
      {

        swift_bridgeObjectRelease_n(v26, 2);
      }
      else
      {
        v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v26, v27, v28, 0);
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v30 & 1) == 0)
        {
          v31 = 0;
          while (v7 != v31)
          {
            if (v62 == v31)
            {
              __break(1u);
              goto LABEL_50;
            }
            v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v8 + 8 * v31));
            v45 = v44;
            v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
            if (v43 == v46 && v45 == v47)
            {

              swift_bridgeObjectRelease_n(v45, 2);
              ++v31;
              goto LABEL_26;
            }
            v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v45, v46, v47, 0);
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            ++v31;
            if ((v49 & 1) != 0)
            {

              goto LABEL_26;
            }
          }
LABEL_6:

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v56);
          result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v59);
LABEL_7:
          v5 = v51 + 1;
          if (v51 + 1 == a2)
            return result;
          goto LABEL_8;
        }

      }
      v31 = 0;
LABEL_26:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v56);
      result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v59);
      if (v21 >= v31)
        goto LABEL_7;
      v32 = *a4;
      if (!*a4)
      {
LABEL_50:
        __break(1u);
        return result;
      }
      v33 = v32 + 40 * v5;
      v34 = v32 + 40 * (v5 - 1);
      sub_10000F9FC((__int128 *)v33, (uint64_t)&v59);
      v35 = *(_OWORD *)(v34 + 16);
      *(_OWORD *)v33 = *(_OWORD *)v34;
      *(_OWORD *)(v33 + 16) = v35;
      *(_QWORD *)(v33 + 32) = *(_QWORD *)(v34 + 32);
      result = sub_10000F9FC(&v59, v34);
      if (--v5 == v52)
        goto LABEL_7;
    }
  }
  return result;
}

uint64_t sub_10041F310(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char *v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char v38;
  _BOOL4 v39;
  Swift::Int v40;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v82;
  uint64_t v83;
  Swift::Int v84;
  Swift::Int v85;
  unint64_t v86;
  uint64_t v87;
  __int128 v88;
  Swift::Int v89;
  unint64_t v90;
  unint64_t v91;
  Swift::Int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  BOOL v149;
  unint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  BOOL v159;
  uint64_t v160;
  char v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  BOOL v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  unint64_t v194;
  _QWORD *v195;
  Swift::Int v196;
  Swift::Int v197;
  uint64_t v198;
  unint64_t v199;
  Swift::Int v200;
  char *__dst;
  int v202;
  Swift::Int v203;
  Swift::Int v204;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD v216[3];
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;

  v3 = a2;
  v4 = a1[1];
  swift_bridgeObjectRetain_n(a2, 3);
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      if (!v4)
        return swift_bridgeObjectRelease_n(v3, 3);
      swift_bridgeObjectRetain(v3);
      sub_10041EF64(0, v4, 1, a1, v3);
      return swift_bridgeObjectRelease_n(v3, 4);
    }
    goto LABEL_248;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_256;
  v213 = v2;
  v214 = v3;
  v196 = v5;
  if (v4 < 2)
  {
    v11 = (char *)_swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    v195 = _swiftEmptyArrayStorage;
    if (v4 == 1)
      goto LABEL_12;
    v135 = _swiftEmptyArrayStorage[2];
LABEL_212:
    v208 = v11;
    if (v135 < 2)
    {
LABEL_223:
      swift_bridgeObjectRelease();
      v195[2] = 0;
      swift_bridgeObjectRelease_n(v214, 3);
      return swift_bridgeObjectRelease();
    }
    v188 = *a1;
    while (1)
    {
      v189 = v135 - 2;
      if (v135 < 2)
        break;
      if (!v188)
        goto LABEL_255;
      v190 = *(_QWORD *)&v208[16 * v189 + 32];
      v191 = *(_QWORD *)&v208[16 * v135 + 24];
      v192 = (char *)(v188 + 40 * *(_QWORD *)&v208[16 * v135 + 16]);
      v3 = v214;
      swift_bridgeObjectRetain(v214);
      sub_10041E6CC((char *)(v188 + 40 * v190), v192, v188 + 40 * v191, __dst, v214);
      if (v213)
        goto LABEL_224;
      swift_bridgeObjectRelease();
      if (v191 < v190)
        goto LABEL_244;
      if ((swift_isUniquelyReferenced_nonNull_native(v208) & 1) == 0)
        v208 = sub_10088F088((uint64_t)v208);
      v3 = (unint64_t)v208;
      if (v189 >= *((_QWORD *)v208 + 2))
        goto LABEL_245;
      v193 = &v208[16 * v189 + 32];
      *(_QWORD *)v193 = v190;
      *((_QWORD *)v193 + 1) = v191;
      v194 = *((_QWORD *)v208 + 2);
      if (v135 > v194)
        goto LABEL_246;
      memmove(&v208[16 * v135 + 16], &v208[16 * v135 + 32], 16 * (v194 - v135));
      *((_QWORD *)v208 + 2) = v194 - 1;
      v135 = v194 - 1;
      if (v194 <= 2)
        goto LABEL_223;
    }
LABEL_242:
    __break(1u);
LABEL_243:
    __break(1u);
LABEL_244:
    __break(1u);
LABEL_245:
    __break(1u);
LABEL_246:
    __break(1u);
LABEL_247:
    __break(1u);
LABEL_248:
    __break(1u);
LABEL_249:
    __break(1u);
LABEL_250:
    __break(1u);
    goto LABEL_251;
  }
  v7 = v6 >> 1;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
  *(_QWORD *)(v9 + 16) = v7;
  v195 = (_QWORD *)v9;
  __dst = (char *)(v9 + 32);
LABEL_12:
  v12 = 0;
  v222 = v3 + 40;
  v11 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v13 = v12 + 1;
    v211 = v12;
    if (v12 + 1 >= v4)
      goto LABEL_100;
    v14 = *a1;
    sub_100030784(*a1 + 40 * v13, (uint64_t)&v219);
    v198 = v14;
    sub_100030784(v14 + 40 * v12, (uint64_t)v216);
    v15 = v220;
    v16 = v221;
    sub_10001AA44(&v219, v220);
    v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 176))(v15, v16);
    v18 = v17;
    v197 = v4;
    v199 = *(_QWORD *)(v3 + 16);
    v205 = v11;
    if (v199)
    {
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v3 + 32));
      v21 = v20;
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      if (v19 == v22 && v21 == v23)
      {

        swift_bridgeObjectRelease_n(v21, 2);
        v26 = 0;
      }
      else
      {
        v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v22, v23, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v25 & 1) != 0)
        {

          v26 = 0;
        }
        else
        {
          v26 = 0;
          v3 = v199 - 1;
          while (1)
          {
            if (v3 == v26)
            {

              v202 = 0;
              goto LABEL_37;
            }
            v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v222 + 8 * v26));
            v29 = v28;
            v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
            if (v27 == v30 && v29 == v31)
              break;
            v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, v30, v31, 0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            ++v26;
            if ((v33 & 1) != 0)
            {

              goto LABEL_33;
            }
          }

          swift_bridgeObjectRelease_n(v29, 2);
          ++v26;
LABEL_33:
          v3 = v214;
        }
      }
      v34 = v217;
      v35 = v218;
      sub_10001AA44(v216, v217);
      v36 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v35 + 176))(v34, v35);
      v37 = sub_100403E04((uint64_t)v36, v3);
      LOBYTE(v35) = v38;

      v39 = v26 < v37;
      if ((v35 & 1) != 0)
        v39 = 0;
      v202 = v39;
LABEL_37:
      v4 = v197;
    }
    else
    {

      v202 = 0;
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v216);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v219);
    v40 = v12 + 2;
    if (v12 + 2 < v4)
      break;
    v13 = v12 + 2;
    v43 = v198;
LABEL_87:
    if (v202)
      goto LABEL_88;
LABEL_97:
    v3 = v214;
    v11 = v205;
    if (v13 >= v4)
      goto LABEL_159;
LABEL_101:
    if (__OFSUB__(v13, v12))
      goto LABEL_247;
    if (v13 - v12 >= v196)
      goto LABEL_159;
    if (__OFADD__(v12, v196))
      goto LABEL_249;
    if (v12 + v196 >= v4)
      v89 = v4;
    else
      v89 = v12 + v196;
    if (v89 < v12)
      goto LABEL_250;
    if (v13 == v89)
      goto LABEL_159;
    v90 = *(_QWORD *)(v3 + 16);
    v3 = v90 - 1;
    v206 = v11;
    v210 = v90;
    if (v90 <= 1)
      v90 = 1;
    v91 = v90 - 1;
    v200 = v89;
    while (2)
    {
      v203 = v13;
      v92 = v13;
      while (2)
      {
        v93 = *a1 + 40 * v92;
        sub_100030784(v93, (uint64_t)&v219);
        sub_100030784(v93 - 40, (uint64_t)v216);
        v94 = v220;
        v95 = v221;
        sub_10001AA44(&v219, v220);
        v96 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v95 + 176))(v94, v95);
        if (!v210)
        {
LABEL_112:

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v216);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v219);
          break;
        }
        v97 = *(_QWORD *)(v214 + 32);
        v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
        v100 = v99;
        v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
        if (v98 == v101 && v100 == v102)
        {

          swift_bridgeObjectRelease_n(v100, 2);
        }
        else
        {
          v104 = _stringCompareWithSmolCheck(_:_:expecting:)(v98, v100, v101, v102, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v104 & 1) == 0)
          {
            v105 = 0;
            while (1)
            {
              if (v3 == v105)
                goto LABEL_112;
              v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v222 + 8 * v105));
              v122 = v121;
              v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
              if (v120 == v123 && v122 == v124)
                break;
              v126 = _stringCompareWithSmolCheck(_:_:expecting:)(v120, v122, v123, v124, 0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              ++v105;
              if ((v126 & 1) != 0)
              {

                goto LABEL_124;
              }
            }

            swift_bridgeObjectRelease_n(v122, 2);
            ++v105;
            goto LABEL_124;
          }

        }
        v105 = 0;
LABEL_124:
        v106 = v217;
        v107 = v218;
        sub_10001AA44(v216, v217);
        v96 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v107 + 176))(v106, v107);
        v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
        v110 = v109;
        v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
        if (v108 == v111 && v110 == v112)
        {

          swift_bridgeObjectRelease_n(v110, 2);
          goto LABEL_131;
        }
        v114 = _stringCompareWithSmolCheck(_:_:expecting:)(v108, v110, v111, v112, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v114 & 1) != 0)
        {

LABEL_131:
          v115 = 0;
          goto LABEL_132;
        }
        v115 = 0;
        while (1)
        {
          if (v3 == v115)
            goto LABEL_112;
          if (v91 == v115)
          {
            __break(1u);
LABEL_226:
            __break(1u);
LABEL_227:
            __break(1u);
LABEL_228:
            __break(1u);
LABEL_229:
            __break(1u);
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
LABEL_232:
            __break(1u);
LABEL_233:
            __break(1u);
LABEL_234:
            __break(1u);
LABEL_235:
            __break(1u);
LABEL_236:
            __break(1u);
LABEL_237:
            __break(1u);
LABEL_238:
            __break(1u);
LABEL_239:
            __break(1u);
LABEL_240:
            __break(1u);
LABEL_241:
            __break(1u);
            goto LABEL_242;
          }
          v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v222 + 8 * v115));
          v129 = v128;
          v130 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
          if (v127 == v130 && v129 == v131)
            break;
          v133 = _stringCompareWithSmolCheck(_:_:expecting:)(v127, v129, v130, v131, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          ++v115;
          if ((v133 & 1) != 0)
          {

            goto LABEL_132;
          }
        }

        swift_bridgeObjectRelease_n(v129, 2);
        ++v115;
LABEL_132:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v216);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v219);
        if (v105 < v115)
        {
          v116 = *a1;
          if (!*a1)
            goto LABEL_252;
          v117 = v116 + 40 * v92;
          v118 = v116 + 40 * (v92 - 1);
          sub_10000F9FC((__int128 *)v117, (uint64_t)&v219);
          v119 = *(_OWORD *)(v118 + 16);
          *(_OWORD *)v117 = *(_OWORD *)v118;
          *(_OWORD *)(v117 + 16) = v119;
          *(_QWORD *)(v117 + 32) = *(_QWORD *)(v118 + 32);
          sub_10000F9FC(&v219, v118);
          if (--v92 == v211)
            break;
          continue;
        }
        break;
      }
      v13 = v203 + 1;
      if (v203 + 1 != v200)
        continue;
      break;
    }
    v13 = v200;
    v11 = v206;
    v12 = v211;
LABEL_159:
    if (v13 < v12)
      goto LABEL_243;
    v204 = v13;
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_10088E710(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v3 = *((_QWORD *)v11 + 2);
    v134 = *((_QWORD *)v11 + 3);
    v135 = v3 + 1;
    if (v3 >= v134 >> 1)
      v11 = sub_10088E710((char *)(v134 > 1), v3 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v135;
    v136 = v11 + 32;
    v137 = &v11[16 * v3 + 32];
    *(_QWORD *)v137 = v12;
    *((_QWORD *)v137 + 1) = v13;
    if (v3)
    {
      v207 = v11;
      v212 = v11 + 32;
      while (1)
      {
        v138 = v135 - 1;
        if (v135 >= 4)
        {
          v143 = &v136[16 * v135];
          v144 = *((_QWORD *)v143 - 8);
          v145 = *((_QWORD *)v143 - 7);
          v149 = __OFSUB__(v145, v144);
          v146 = v145 - v144;
          if (v149)
            goto LABEL_231;
          v148 = *((_QWORD *)v143 - 6);
          v147 = *((_QWORD *)v143 - 5);
          v149 = __OFSUB__(v147, v148);
          v141 = v147 - v148;
          v142 = v149;
          if (v149)
            goto LABEL_232;
          v150 = v135 - 2;
          v151 = &v136[16 * v135 - 32];
          v153 = *(_QWORD *)v151;
          v152 = *((_QWORD *)v151 + 1);
          v149 = __OFSUB__(v152, v153);
          v154 = v152 - v153;
          if (v149)
            goto LABEL_234;
          v149 = __OFADD__(v141, v154);
          v155 = v141 + v154;
          if (v149)
            goto LABEL_237;
          if (v155 >= v146)
          {
            v173 = &v136[16 * v138];
            v175 = *(_QWORD *)v173;
            v174 = *((_QWORD *)v173 + 1);
            v149 = __OFSUB__(v174, v175);
            v176 = v174 - v175;
            if (v149)
              goto LABEL_241;
            v166 = v141 < v176;
            goto LABEL_197;
          }
        }
        else
        {
          if (v135 != 3)
          {
            v167 = *((_QWORD *)v11 + 4);
            v168 = *((_QWORD *)v11 + 5);
            v149 = __OFSUB__(v168, v167);
            v160 = v168 - v167;
            v161 = v149;
            goto LABEL_191;
          }
          v140 = *((_QWORD *)v11 + 4);
          v139 = *((_QWORD *)v11 + 5);
          v149 = __OFSUB__(v139, v140);
          v141 = v139 - v140;
          v142 = v149;
        }
        if ((v142 & 1) != 0)
          goto LABEL_233;
        v150 = v135 - 2;
        v156 = &v136[16 * v135 - 32];
        v158 = *(_QWORD *)v156;
        v157 = *((_QWORD *)v156 + 1);
        v159 = __OFSUB__(v157, v158);
        v160 = v157 - v158;
        v161 = v159;
        if (v159)
          goto LABEL_236;
        v162 = &v136[16 * v138];
        v164 = *(_QWORD *)v162;
        v163 = *((_QWORD *)v162 + 1);
        v149 = __OFSUB__(v163, v164);
        v165 = v163 - v164;
        if (v149)
          goto LABEL_239;
        if (__OFADD__(v160, v165))
          goto LABEL_240;
        if (v160 + v165 >= v141)
        {
          v166 = v141 < v165;
LABEL_197:
          if (v166)
            v138 = v150;
          goto LABEL_199;
        }
LABEL_191:
        if ((v161 & 1) != 0)
          goto LABEL_235;
        v169 = &v136[16 * v138];
        v171 = *(_QWORD *)v169;
        v170 = *((_QWORD *)v169 + 1);
        v149 = __OFSUB__(v170, v171);
        v172 = v170 - v171;
        if (v149)
          goto LABEL_238;
        if (v172 < v160)
          goto LABEL_208;
LABEL_199:
        v177 = v138 - 1;
        if (v138 - 1 >= v135)
          goto LABEL_226;
        v178 = *a1;
        if (!*a1)
          goto LABEL_253;
        v179 = &v136[16 * v177];
        v180 = v136;
        v181 = *(_QWORD *)v179;
        v3 = v138;
        v182 = &v180[16 * v138];
        v183 = *((_QWORD *)v182 + 1);
        v184 = (char *)(v178 + 40 * *(_QWORD *)v179);
        v185 = (char *)(v178 + 40 * *(_QWORD *)v182);
        v186 = v178 + 40 * v183;
        swift_bridgeObjectRetain(v214);
        sub_10041E6CC(v184, v185, v186, __dst, v214);
        if (v213)
        {
LABEL_224:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v195[2] = 0;
          swift_bridgeObjectRelease_n(v214, 3);
          return swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        if (v183 < v181)
          goto LABEL_227;
        v11 = v207;
        if (v3 > *((_QWORD *)v207 + 2))
          goto LABEL_228;
        *(_QWORD *)v179 = v181;
        v136 = v212;
        *(_QWORD *)&v212[16 * v177 + 8] = v183;
        v187 = *((_QWORD *)v207 + 2);
        if (v3 >= v187)
          goto LABEL_229;
        v213 = 0;
        v135 = v187 - 1;
        memmove(v182, v182 + 16, 16 * (v187 - 1 - v3));
        *((_QWORD *)v207 + 2) = v187 - 1;
        if (v187 <= 2)
          goto LABEL_208;
      }
    }
    v135 = 1;
LABEL_208:
    v3 = v214;
    v4 = a1[1];
    v12 = v204;
    if (v204 >= v4)
      goto LABEL_212;
  }
  v41 = v12 + 1;
  v43 = v198;
  v42 = v199;
  v3 = v199 - 1;
  if (v199 <= 1)
    v42 = 1;
  v209 = v42 - 1;
  while (1)
  {
    sub_100030784(v43 + 40 * v40, (uint64_t)&v219);
    sub_100030784(v43 + 40 * v41, (uint64_t)v216);
    v44 = v220;
    v45 = v221;
    sub_10001AA44(&v219, v220);
    v46 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v45 + 176))(v44, v45);
    v47 = v46;
    if (!v199)
    {

      v56 = 0;
      goto LABEL_62;
    }
    v48 = *(_QWORD *)(v214 + 32);
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v51 = v50;
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    if (v49 == v52 && v51 == v53)
    {

      swift_bridgeObjectRelease_n(v51, 2);
      goto LABEL_51;
    }
    v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v51, v52, v53, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v55 & 1) != 0)
    {

LABEL_51:
      v57 = 0;
      goto LABEL_52;
    }
    v57 = 0;
    while (1)
    {
      if (v3 == v57)
      {

        v56 = 0;
        v12 = v211;
        v4 = v197;
        v43 = v198;
        goto LABEL_62;
      }
      v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v222 + 8 * v57));
      v71 = v70;
      v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
      if (v69 == v72 && v71 == v73)
        break;
      v75 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v71, v72, v73, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ++v57;
      if ((v75 & 1) != 0)
      {

        goto LABEL_52;
      }
    }

    swift_bridgeObjectRelease_n(v71, 2);
    ++v57;
LABEL_52:
    v58 = v217;
    v59 = v218;
    sub_10001AA44(v216, v217);
    v60 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v59 + 176))(v58, v59);
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v63 = v62;
    v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    v66 = v61 == v64 && v63 == v65;
    v43 = v198;
    if (v66)
    {

      swift_bridgeObjectRelease_n(v63, 2);
    }
    else
    {
      v67 = _stringCompareWithSmolCheck(_:_:expecting:)(v61, v63, v64, v65, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v67 & 1) == 0)
      {
        v68 = 0;
        while (1)
        {
          if (v3 == v68)
          {

            v56 = 0;
            goto LABEL_61;
          }
          if (v209 == v68)
            goto LABEL_230;
          v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v222 + 8 * v68));
          v78 = v77;
          v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
          if (v76 == v79 && v78 == v80)
            break;
          v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v76, v78, v79, v80, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          ++v68;
          if ((v82 & 1) != 0)
          {

            goto LABEL_60;
          }
        }

        swift_bridgeObjectRelease_n(v78, 2);
        ++v68;
        goto LABEL_60;
      }

    }
    v68 = 0;
LABEL_60:
    v56 = v57 < v68;
LABEL_61:
    v12 = v211;
    v4 = v197;
LABEL_62:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v216);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v219);
    if (v202 != v56)
      break;
    v13 = v40 + 1;
    v41 = v40;
    v40 = v13;
    if (v13 >= v4)
      goto LABEL_87;
  }
  v13 = v40;
  if (!v202)
    goto LABEL_97;
LABEL_88:
  v11 = v205;
  if (v13 >= v12)
  {
    if (v12 < v13)
    {
      v83 = 40 * v13 - 40;
      v3 = 40 * v12;
      v84 = v12;
      v85 = v13;
      do
      {
        if (v84 != --v85)
        {
          if (!v43)
            goto LABEL_254;
          v86 = v43 + v3;
          sub_10000F9FC((__int128 *)(v43 + v3), (uint64_t)&v219);
          v87 = *(_QWORD *)(v43 + v83 + 32);
          v88 = *(_OWORD *)(v43 + v83 + 16);
          *(_OWORD *)v86 = *(_OWORD *)(v43 + v83);
          *(_OWORD *)(v86 + 16) = v88;
          *(_QWORD *)(v86 + 32) = v87;
          sub_10000F9FC(&v219, v43 + v83);
        }
        ++v84;
        v83 -= 40;
        v3 += 40;
      }
      while (v84 < v85);
      v3 = v214;
      v11 = v205;
      v12 = v211;
      v4 = v197;
      if (v13 >= v197)
        goto LABEL_159;
      goto LABEL_101;
    }
    v3 = v214;
LABEL_100:
    if (v13 >= v4)
      goto LABEL_159;
    goto LABEL_101;
  }
LABEL_251:
  __break(1u);
LABEL_252:
  swift_bridgeObjectRelease_n(v214, 3);
  __break(1u);
LABEL_253:
  swift_bridgeObjectRelease_n(v214, 3);
  __break(1u);
LABEL_254:
  swift_bridgeObjectRelease_n(v214, 3);
  __break(1u);
LABEL_255:
  swift_bridgeObjectRelease_n(v214, 3);
  __break(1u);
LABEL_256:
  swift_bridgeObjectRelease_n(v3, 4);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_1004202C8(_QWORD **a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7[2];

  v4 = *a1;
  swift_bridgeObjectRetain_n(a2, 2);
  if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
    v4 = (_QWORD *)sub_10088F1B4(v4);
  v5 = v4[2];
  v7[0] = (uint64_t)(v4 + 4);
  v7[1] = v5;
  swift_bridgeObjectRetain(a2);
  sub_10041F310(v7, a2);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return swift_bridgeObjectRelease_n(a2, 2);
}

uint64_t sub_100420368(int64_t a1, _QWORD *a2, void (*a3)(_QWORD *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  _BOOL4 v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  void (*v93)(char *, uint64_t, _QWORD *);
  uint64_t v94;
  uint64_t MyAppURLSessionFactory;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t);
  uint64_t v102;
  unint64_t *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  int64_t v127;
  uint64_t result;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  NSObject *v140;
  os_log_type_t v141;
  uint8_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int64_t v164;
  char *v165;
  uint64_t v166;
  double v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char v183;
  uint64_t *v184;
  int64_t v185;
  double v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  int64_t v193;
  uint64_t v194;
  uint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  BOOL v199;
  int64_t v200;
  unint64_t v201;
  int64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void (*v226)(uint64_t, uint64_t, uint64_t);
  uint64_t v227;
  unint64_t v228;
  char v229;
  double v230;
  void (*v231)(char *, uint64_t, uint64_t);
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v239;
  char *v240;
  void (*v241)(uint64_t, uint64_t);
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  unint64_t v252;
  uint64_t v253;
  _BOOL8 v254;
  uint64_t v255;
  char v256;
  unint64_t v257;
  char v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  NSObject *v271;
  os_log_type_t v272;
  uint64_t v273;
  uint64_t v274;
  double v275;
  void (*v276)(uint64_t, uint64_t);
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char v281;
  uint64_t v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  __n128 v289;
  uint64_t v290;
  uint64_t (*v291)(uint64_t);
  _QWORD *v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t (*v307)(uint64_t);
  void *v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  NSObject *v313;
  os_log_type_t v314;
  uint8_t *v315;
  uint64_t *v316;
  void (*v317)(uint64_t, uint64_t);
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  void (*v329)(_QWORD *);
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t Endpoint;
  char *v338;
  char *v339;
  uint64_t v340;
  _QWORD *v341;
  char *v342;
  uint64_t v343;
  _QWORD *v344;
  char *v345;
  _QWORD *v346;
  uint64_t v347;
  char *v348;
  char *v349;
  char *v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  char *v354;
  uint64_t (*v355)(char *, char *, uint64_t);
  void (*v356)(unint64_t *, uint64_t);
  uint64_t v357;
  char *v358;
  void (*v359)(_QWORD *);
  uint64_t v360;
  uint64_t v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  char *v368;
  int64_t v369;
  uint64_t v370;
  char *v371;
  uint64_t *v372;
  uint64_t v373;
  _QWORD *v374;
  uint64_t v375;
  __int128 v376;
  uint64_t v377;
  char *v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t *v381;
  char *v382;
  char *v383;
  uint64_t v384;
  char *v385;
  _QWORD *v386;
  uint64_t *v387;
  uint64_t v388;
  _QWORD *v389;
  char v390[8];
  _QWORD *v391;
  double v392;
  char v393[8];
  uint64_t v394;
  char v395[8];
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;

  v360 = a4;
  v359 = a3;
  v374 = a2;
  v369 = a1;
  v344 = (_QWORD *)type metadata accessor for FMNAccountType(0);
  v343 = *(v344 - 1);
  __chkstk_darwin(v344);
  v339 = (char *)&v332 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Endpoint = type metadata accessor for FetchEndpoint(0);
  v5 = __chkstk_darwin(Endpoint);
  v340 = (uint64_t)&v332 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v341 = (uint64_t *)((char *)&v332 - v7);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v8);
  v358 = (char *)&v332 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v335 = type metadata accessor for OwnedDeviceFetchEndpoint(0);
  v10 = __chkstk_darwin(v335);
  v336 = (uint64_t)&v332 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v338 = (char *)&v332 - v12;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  __chkstk_darwin(v13);
  v15 = (char *)&v332 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LocalFindableAccessoryRecord(0);
  *(_QWORD *)&v376 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v379 = (uint64_t)&v332 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v375 = (uint64_t)&v332 - v19;
  v20 = sub_10001A9A8(&qword_1010FB1F8);
  v21 = __chkstk_darwin(v20);
  v371 = (char *)&v332 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v370 = (uint64_t)&v332 - v23;
  v24 = type metadata accessor for BeaconEstimatedLocation(0);
  v380 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v386 = (uint64_t *)((char *)&v332 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v384 = type metadata accessor for UUID(0);
  v26 = *(_QWORD *)(v384 - 8);
  v27 = __chkstk_darwin(v384);
  v348 = (char *)&v332 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v342 = (char *)&v332 - v30;
  v31 = __chkstk_darwin(v29);
  v368 = (char *)&v332 - v32;
  v33 = __chkstk_darwin(v31);
  v382 = (char *)&v332 - v34;
  v35 = __chkstk_darwin(v33);
  v383 = (char *)&v332 - v36;
  __chkstk_darwin(v35);
  v385 = (char *)&v332 - v37;
  v38 = sub_10001A9A8(&qword_1010FB200);
  v39 = __chkstk_darwin(v38);
  v378 = (char *)&v332 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v377 = (uint64_t)&v332 - v41;
  v42 = type metadata accessor for LocationFetcher(0);
  v353 = *(_QWORD *)(v42 - 8);
  v43 = __chkstk_darwin(v42);
  v334 = (char *)&v332 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __chkstk_darwin(v43);
  v373 = (uint64_t)&v332 - v46;
  v366 = v47;
  __chkstk_darwin(v45);
  v49 = (uint64_t *)((char *)&v332 - v48);
  v50 = type metadata accessor for Logger(0);
  v51 = *(uint64_t **)(v50 - 8);
  v52 = __chkstk_darwin(v50);
  v349 = (char *)&v332 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __chkstk_darwin(v52);
  v351 = (char *)&v332 - v55;
  v56 = __chkstk_darwin(v54);
  v345 = (char *)&v332 - v57;
  __chkstk_darwin(v56);
  v59 = (unint64_t *)((char *)&v332 - v58);
  v357 = type metadata accessor for Date(0);
  v361 = *(_QWORD *)(v357 - 8);
  v60 = __chkstk_darwin(v357);
  v333 = (uint64_t)&v332 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = __chkstk_darwin(v60);
  v350 = (char *)&v332 - v63;
  __chkstk_darwin(v62);
  v65 = (char *)&v332 - v64;
  v66 = swift_allocObject(&unk_101075CD0, 32, 7);
  *(_QWORD *)(v66 + 16) = v359;
  *(_QWORD *)(v66 + 24) = v360;
  swift_retain();
  v362 = v65;
  static Date.trustedNow.getter((uint64_t)v65);
  v67 = swift_allocObject(&unk_1010759D8, 24, 7);
  v365 = v67;
  *(_QWORD *)(v67 + 16) = _swiftEmptyDictionarySingleton;
  v372 = (uint64_t *)(v67 + 16);
  v68 = swift_allocObject(&unk_101075A00, 24, 7);
  v364 = v68;
  *(_QWORD *)(v68 + 16) = _swiftEmptyDictionarySingleton;
  v347 = v68 + 16;
  v69 = *(int *)(v42 + 32);
  v70 = v374;
  v71 = (char *)v374 + v69;
  v387 = v51;
  v72 = (uint64_t (*)(char *, char *, uint64_t))v51[2];
  v354 = v71;
  v367 = v50;
  v355 = v72;
  ((void (*)(unint64_t *))v72)(v59);
  v73 = sub_10005972C((uint64_t)v70, (uint64_t)v49, type metadata accessor for LocationFetcher);
  v381 = v59;
  v74 = Logger.logObject.getter(v73);
  v75 = static os_log_type_t.default.getter(v74);
  v76 = os_log_type_enabled(v74, v75);
  v352 = v66;
  if (v76)
  {
    v77 = (uint8_t *)swift_slowAlloc(12, -1);
    v78 = swift_slowAlloc(32, -1);
    v363 = v78;
    *(_DWORD *)v77 = 136446210;
    v396 = v78;
    v356 = (void (*)(unint64_t *, uint64_t))(v77 + 4);
    v80 = v49[6];
    v79 = v49[7];
    sub_10001AA44(v49 + 3, v80);
    v81 = dispatch thunk of CustomStringConvertible.description.getter(v80, *(_QWORD *)(v79 + 8));
    v394 = sub_100016940(v81, v82, &v396);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v394, v395, v356, v77 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v49, type metadata accessor for LocationFetcher);
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "Begin location fetch with policy: %{public}s.", v77, 0xCu);
    v83 = v363;
    swift_arrayDestroy(v363, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v83, -1, -1);
    v66 = v352;
    swift_slowDealloc(v77, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v49, type metadata accessor for LocationFetcher);
  }

  v356 = (void (*)(unint64_t *, uint64_t))v387[1];
  v356(v381, v367);
  v84 = swift_allocObject(&unk_101075A28, 24, 7);
  *(_QWORD *)(v84 + 16) = _swiftEmptyDictionarySingleton;
  v346 = (_QWORD *)(v84 + 16);
  v85 = v374;
  v86 = v374 + 3;
  v87 = v374[6];
  v88 = v374[7];
  sub_10001AA44(v374 + 3, v87);
  v89 = (*(uint64_t (**)(uint64_t, uint64_t))(v88 + 24))(v87, v88);
  v363 = v84;
  if ((v89 & 1) != 0)
  {
    v358 = 0;
  }
  else
  {
    v90 = v85[6];
    v91 = v85[7];
    sub_10001AA44(v85 + 3, v90);
    v92 = (*(uint64_t (**)(uint64_t, uint64_t))(v91 + 64))(v90, v91);
    v93 = *(void (**)(char *, uint64_t, _QWORD *))(v343 + 104);
    if ((v92 & 1) != 0)
    {
      v94 = (uint64_t)v338;
      v93(v338, enum case for FMNAccountType.ownedDeviceLocations(_:), v344);
      sub_100363008(v94 + *(int *)(v335 + 20));
      MyAppURLSessionFactory = type metadata accessor for FindMyAppURLSessionFactory(0);
      swift_allocObject(MyAppURLSessionFactory, *(unsigned int *)(MyAppURLSessionFactory + 48), *(unsigned __int16 *)(MyAppURLSessionFactory + 52));
      v96 = type metadata accessor for FMNMockingPreferences(0);
      v97 = v358;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56))(v358, 1, 1, v96);
      v98 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v97);
      v99 = type metadata accessor for ServerInteractionController(0);
      v100 = swift_allocObject(v99, *(unsigned int *)(v99 + 48), *(unsigned __int16 *)(v99 + 52));
      v101 = type metadata accessor for OwnedDeviceFetchEndpoint;
      v102 = v336;
      sub_10005972C(v94, v336, type metadata accessor for OwnedDeviceFetchEndpoint);
      v103 = &qword_1010FB230;
      v104 = &unk_100E3A484;
      v105 = v102;
    }
    else
    {
      v106 = enum case for FMNAccountType.searchParty(_:);
      v107 = (uint64_t)v339;
      v108 = v344;
      v93(v339, enum case for FMNAccountType.searchParty(_:), v344);
      v109 = type metadata accessor for AccountURLComponents();
      swift_allocObject(v109, 56, 7);
      v110 = sub_100C511C4(v107);
      v94 = (uint64_t)v341;
      *v341 = v110;
      v93((char *)(v94 + *(int *)(Endpoint + 20)), v106, v108);
      v111 = type metadata accessor for FindMyAppURLSessionFactory(0);
      swift_allocObject(v111, *(unsigned int *)(v111 + 48), *(unsigned __int16 *)(v111 + 52));
      v112 = type metadata accessor for FMNMockingPreferences(0);
      v113 = v358;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 56))(v358, 1, 1, v112);
      v98 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v113);
      v114 = type metadata accessor for ServerInteractionController(0);
      v100 = swift_allocObject(v114, *(unsigned int *)(v114 + 48), *(unsigned __int16 *)(v114 + 52));
      v101 = type metadata accessor for FetchEndpoint;
      v115 = v66;
      v116 = v340;
      sub_10005972C(v94, v340, type metadata accessor for FetchEndpoint);
      v103 = (unint64_t *)&unk_1010FB2E0;
      v104 = &unk_100E59C28;
      v105 = v116;
      v66 = v115;
    }
    v358 = (char *)sub_10041D38C(v105, v98, v100, v101, v103, (uint64_t)v104);
    sub_1000126B0(v94, v101);
  }
  v117 = v374;
  v118 = v374[6];
  v119 = v374[7];
  sub_10001AA44(v86, v118);
  v120 = (*(uint64_t (**)(uint64_t, uint64_t))(v119 + 24))(v118, v119);
  v121 = v361;
  if ((v120 & 1) != 0)
  {
    v122 = swift_allocObject(&unk_101075D48, 32, 7);
    *(_QWORD *)(v122 + 16) = sub_1004267BC;
    *(_QWORD *)(v122 + 24) = v66;
    type metadata accessor for Transaction(0);
    v123 = v373;
    sub_10005972C((uint64_t)v117, v373, type metadata accessor for LocationFetcher);
    v124 = *(unsigned __int8 *)(v353 + 80);
    v125 = (v124 + 40) & ~v124;
    v126 = (_QWORD *)swift_allocObject(&unk_101075D70, v125 + v366, v124 | 7);
    v126[2] = sub_1000A18BC;
    v126[3] = v122;
    v127 = v369;
    v126[4] = v369;
    sub_1000126EC(v123, (uint64_t)v126 + v125, type metadata accessor for LocationFetcher);
    swift_bridgeObjectRetain(v127);
    swift_retain();
    swift_retain();
    static Transaction.asyncTask(name:block:)("beaconsFromDisk.FromDisk", 24, 2, &unk_1010FB3A8, v126);
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v121 + 8))(v362, v357);
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  v344 = v86;
  v129 = swift_allocObject(&unk_101075A50, 24, 7);
  *(_QWORD *)(v129 + 16) = _swiftEmptyDictionarySingleton;
  v387 = (uint64_t *)(v129 + 16);
  v130 = swift_allocObject(&unk_101075A78, 24, 7);
  *(_QWORD *)(v130 + 16) = _swiftEmptyArrayStorage;
  v381 = (unint64_t *)(v130 + 16);
  sub_10005972C((uint64_t)v117, v373, type metadata accessor for LocationFetcher);
  v131 = *(unsigned __int8 *)(v353 + 80);
  v132 = (v131 + 32) & ~v131;
  v353 = v131;
  v340 = v366 + 7;
  v133 = (v366 + 7 + v132) & 0xFFFFFFFFFFFFFFF8;
  v134 = (v133 + 15) & 0xFFFFFFFFFFFFFFF8;
  v135 = (v134 + 15) & 0xFFFFFFFFFFFFFFF8;
  v366 = v131 | 7;
  v136 = swift_allocObject(&unk_101075CF8, v135 + 8, v131 | 7);
  v137 = v364;
  *(_QWORD *)(v136 + 16) = v363;
  *(_QWORD *)(v136 + 24) = v137;
  sub_1000126EC(v373, v136 + v132, type metadata accessor for LocationFetcher);
  *(_QWORD *)(v136 + v133) = v365;
  v343 = v130;
  *(_QWORD *)(v136 + v134) = v130;
  v341 = (_QWORD *)v136;
  *(_QWORD *)(v136 + v135) = v129;
  v138 = v345;
  v139 = v355(v345, v354, v367);
  v140 = Logger.logObject.getter(v139);
  v141 = static os_log_type_t.default.getter(v140);
  if (os_log_type_enabled(v140, v141))
  {
    v142 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v142 = 0;
    _os_log_impl((void *)&_mh_execute_header, v140, v141, "Gathering beacon information for fetch.", v142, 2u);
    swift_slowDealloc(v142, -1, -1);
  }
  swift_retain();
  v339 = (char *)v129;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();

  v356((unint64_t *)v138, v367);
  v143 = v369;
  v144 = *(_QWORD *)(v369 + 16);
  if (v144)
  {
    v145 = v369 + 32;
    swift_bridgeObjectRetain(v369);
    v146 = _swiftEmptyArrayStorage;
    v147 = v376;
    do
    {
      sub_100030784(v145, (uint64_t)&v396);
      sub_100030784((uint64_t)&v396, (uint64_t)&v394);
      v148 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
      v149 = swift_dynamicCast(v15, &v394, v148, v16, 6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v147 + 56))(v15, v149 ^ 1u, 1, v16);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v396);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v15, 1, v16) == 1)
      {
        sub_100004048((uint64_t)v15, (uint64_t *)&unk_1010EDC50);
      }
      else
      {
        v150 = v375;
        sub_1000126EC((uint64_t)v15, v375, type metadata accessor for LocalFindableAccessoryRecord);
        sub_1000126EC(v150, v379, type metadata accessor for LocalFindableAccessoryRecord);
        v151 = (unint64_t)v146;
        if ((swift_isUniquelyReferenced_nonNull_native(v146) & 1) == 0)
          v151 = sub_1007C9484(0, v146[2] + 1, 1, (unint64_t)v146);
        v153 = *(_QWORD *)(v151 + 16);
        v152 = *(_QWORD *)(v151 + 24);
        v146 = (_QWORD *)v151;
        if (v153 >= v152 >> 1)
          v146 = (_QWORD *)sub_1007C9484(v152 > 1, v153 + 1, 1, v151);
        v146[2] = v153 + 1;
        v147 = v376;
        sub_1000126EC(v379, (uint64_t)v146+ ((*(unsigned __int8 *)(v147 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80))+ *(_QWORD *)(v376 + 72) * v153, type metadata accessor for LocalFindableAccessoryRecord);
      }
      v145 += 40;
      --v144;
    }
    while (v144);
    v143 = v369;
    swift_bridgeObjectRelease();
  }
  else
  {
    v146 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(v143);
  swift_bridgeObjectRetain(v146);
  v154 = sub_10041E460(v143, (uint64_t)v146);
  swift_bridgeObjectRelease();
  v379 = (uint64_t)v146;
  v155 = swift_bridgeObjectRelease();
  __chkstk_darwin(v155);
  v156 = v374;
  *(&v332 - 2) = (uint64_t)v374;
  swift_bridgeObjectRetain(v154);
  v157 = sub_10008B604((uint64_t)sub_100427408, &v332 - 4, (uint64_t)v154);
  v389 = _swiftEmptyDictionarySingleton;
  v158 = (_QWORD *)__chkstk_darwin(v157);
  *(&v332 - 8) = (uint64_t)v381;
  *(&v332 - 7) = (uint64_t)v156;
  v159 = v347;
  *(&v332 - 6) = (uint64_t)v372;
  *(&v332 - 5) = v159;
  *(&v332 - 4) = (uint64_t)&v389;
  *(&v332 - 3) = (uint64_t)v358;
  *(&v332 - 2) = (uint64_t)sub_100425B60;
  *(&v332 - 1) = (uint64_t)v341;
  sub_1003F7440(v158, (void (*)(uint64_t, uint64_t))sub_100425B80, (uint64_t)(&v332 - 10));
  swift_bridgeObjectRelease();
  v160 = v346;
  swift_beginAccess(v346, &v394, 0, 0);
  swift_bridgeObjectRetain(*v160);
  v162 = sub_10041BE58(v161);
  v163 = swift_bridgeObjectRelease();
  __chkstk_darwin(v163);
  *(&v332 - 4) = v159;
  *(&v332 - 3) = (uint64_t)v156;
  *(&v332 - 2) = v365;
  sub_1003F0D68((void (*)(char *, __n128))sub_100427440, (uint64_t)(&v332 - 6), v162);
  swift_release();
  v164 = v154[2];
  v165 = v348;
  if (v164)
  {
    v392 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    sub_10009A578(0, v164, 0);
    v166 = (uint64_t)(v154 + 4);
    v167 = v392;
    do
    {
      sub_100030784(v166, (uint64_t)&v396);
      v169 = v397;
      v168 = v398;
      sub_10001AA44(&v396, v397);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v168 + 8) + 8) + 32))(v169);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v396);
      if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&v167) & 1) == 0)
      {
        sub_10009A578(0, *(_QWORD *)(*(_QWORD *)&v167 + 16) + 1, 1);
        v167 = v392;
      }
      v171 = *(_QWORD *)(*(_QWORD *)&v167 + 16);
      v170 = *(_QWORD *)(*(_QWORD *)&v167 + 24);
      if (v171 >= v170 >> 1)
      {
        sub_10009A578(v170 > 1, v171 + 1, 1);
        v167 = v392;
      }
      *(_QWORD *)(*(_QWORD *)&v167 + 16) = v171 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v26 + 32))(*(_QWORD *)&v167+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v171, v165, v384);
      v392 = v167;
      v166 += 40;
      --v164;
    }
    while (v164);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v167 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  }
  v172 = ~v353;
  v173 = sub_10001B664(*(uint64_t *)&v167);
  swift_bridgeObjectRelease();
  v174 = v374;
  v175 = v374[6];
  v176 = v374[7];
  v177 = v344;
  sub_10001AA44(v344, v175);
  (*(void (**)(uint64_t, uint64_t))(v176 + 24))(v175, v176);
  v178 = v174[6];
  v179 = v174[7];
  sub_10001AA44(v177, v178);
  v180 = (*(uint64_t (**)(uint64_t, uint64_t))(v179 + 40))(v178, v179);
  v181 = (uint64_t)v174;
  __chkstk_darwin(v180);
  v182 = v362;
  *(&v332 - 4) = (uint64_t)v174;
  *(&v332 - 3) = (uint64_t)v182;
  *((_BYTE *)&v332 - 16) = v183;
  sub_1003F08EC((void (*)(char *))sub_100427454, (uint64_t)(&v332 - 6), v173);
  swift_bridgeObjectRelease();
  v184 = v372;
  swift_beginAccess(v372, &v396, 0, 0);
  v185 = 0;
  v186 = 0.0;
  v187 = *v184;
  v188 = 1 << *(_BYTE *)(*v184 + 32);
  v189 = -1;
  if (v188 < 64)
    v189 = ~(-1 << v188);
  v191 = *(_QWORD *)(v187 + 64);
  v190 = v187 + 64;
  v192 = v189 & v191;
  v193 = (unint64_t)(v188 + 63) >> 6;
  v194 = v384;
  v195 = v387;
  while (1)
  {
    if (v192)
    {
      v196 = __clz(__rbit64(v192));
      v192 &= v192 - 1;
      v197 = v196 | (v185 << 6);
      goto LABEL_39;
    }
    v200 = v185 + 1;
    if (__OFADD__(v185, 1))
      goto LABEL_145;
    if (v200 >= v193)
      break;
    v201 = *(_QWORD *)(v190 + 8 * v200);
    ++v185;
    if (!v201)
    {
      v185 = v200 + 1;
      if (v200 + 1 >= v193)
        break;
      v201 = *(_QWORD *)(v190 + 8 * v185);
      if (!v201)
      {
        v185 = v200 + 2;
        if (v200 + 2 >= v193)
          break;
        v201 = *(_QWORD *)(v190 + 8 * v185);
        if (!v201)
        {
          v185 = v200 + 3;
          if (v200 + 3 >= v193)
            break;
          v201 = *(_QWORD *)(v190 + 8 * v185);
          if (!v201)
          {
            v185 = v200 + 4;
            if (v200 + 4 >= v193)
              break;
            v201 = *(_QWORD *)(v190 + 8 * v185);
            if (!v201)
            {
              v202 = v200 + 5;
              if (v202 >= v193)
                break;
              v201 = *(_QWORD *)(v190 + 8 * v202);
              if (!v201)
              {
                while (1)
                {
                  v185 = v202 + 1;
                  if (__OFADD__(v202, 1))
                    goto LABEL_149;
                  if (v185 >= v193)
                    goto LABEL_59;
                  v201 = *(_QWORD *)(v190 + 8 * v185);
                  ++v202;
                  if (v201)
                    goto LABEL_58;
                }
              }
              v185 = v202;
            }
          }
        }
      }
    }
LABEL_58:
    v192 = (v201 - 1) & v201;
    v197 = __clz(__rbit64(v201)) + (v185 << 6);
LABEL_39:
    v198 = *(_QWORD *)(*(_QWORD *)(*v184 + 56) + 8 * v197);
    v199 = __OFADD__(*(_QWORD *)&v186, v198);
    *(_QWORD *)&v186 += v198;
    if (v199)
    {
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
    }
  }
LABEL_59:
  v375 = 0;
  v203 = v373;
  sub_10005972C(v181, v373, type metadata accessor for LocationFetcher);
  v204 = (v353 + 16) & v172;
  v205 = (v340 + v204) & 0xFFFFFFFFFFFFFFF8;
  v206 = swift_allocObject(&unk_101075D20, v205 + 8, v366);
  sub_1000126EC(v203, v206 + v204, type metadata accessor for LocationFetcher);
  *(_QWORD *)(v206 + v205) = v379;
  v207 = sub_10001A9A8(&qword_1010FB218);
  unsafeFromAsyncTask<A>(_:)(&v392, &unk_1010FB3A0, v206, v207);
  swift_release();
  v379 = 0;
  v208 = *(_QWORD *)(*(_QWORD *)&v392 + 64);
  v366 = *(_QWORD *)&v392 + 64;
  v373 = *(_QWORD *)&v392;
  v209 = 1 << *(_BYTE *)(*(_QWORD *)&v392 + 32);
  v210 = -1;
  if (v209 < 64)
    v210 = ~(-1 << v209);
  v211 = v210 & v208;
  v369 = (unint64_t)(v209 + 63) >> 6;
  v353 = v369 - 1;
  v376 = xmmword_100E22B00;
  v212 = (uint64_t)v385;
  v213 = (uint64_t)v378;
  if ((v210 & v208) == 0)
    goto LABEL_64;
LABEL_62:
  v214 = __clz(__rbit64(v211));
  v211 &= v211 - 1;
  v215 = v214 | (v379 << 6);
LABEL_63:
  v216 = v373;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v213, *(_QWORD *)(v373 + 48) + *(_QWORD *)(v26 + 72) * v215, v194);
  v217 = *(_QWORD *)(v216 + 56) + *(_QWORD *)(v380 + 72) * v215;
  v218 = sub_10001A9A8(&qword_1010FB220);
  sub_10005972C(v217, v213 + *(int *)(v218 + 48), type metadata accessor for BeaconEstimatedLocation);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v218 - 8) + 56))(v213, 0, 1, v218);
  v212 = (uint64_t)v385;
  while (1)
  {
    v223 = v377;
    sub_100005CF0(v213, v377, &qword_1010FB200);
    v224 = sub_10001A9A8(&qword_1010FB220);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v224 - 8) + 48))(v223, 1, v224) == 1)
      break;
    v225 = v223 + *(int *)(v224 + 48);
    v226 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32);
    v226(v212, v223, v194);
    sub_1000126EC(v225, (uint64_t)v386, type metadata accessor for BeaconEstimatedLocation);
    swift_beginAccess(v195, &v392, 32, 0);
    v227 = *v195;
    if (*(_QWORD *)(*v195 + 16))
    {
      v228 = sub_100003FB0(v212);
      if ((v229 & 1) != 0)
      {
        v230 = *(double *)(*(_QWORD *)(v227 + 56) + 8 * v228);
        swift_endAccess(&v392);
        v231 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
        v232 = (uint64_t)v368;
        v231(v368, v212, v194);
        v233 = sub_10001A9A8(&qword_101108E70);
        v234 = *(unsigned __int8 *)(v380 + 80);
        v235 = (v234 + 32) & ~v234;
        v236 = swift_allocObject(v233, v235 + *(_QWORD *)(v380 + 72), v234 | 7);
        *(_OWORD *)(v236 + 16) = v376;
        sub_10005972C((uint64_t)v386, v236 + v235, type metadata accessor for BeaconEstimatedLocation);
        v392 = v230;
        swift_bridgeObjectRetain(*(_QWORD *)&v230);
        sub_100304004(v236);
        v237 = *(_QWORD *)&v392;
        swift_beginAccess(v387, &v392, 33, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v387);
        v391 = (_QWORD *)*v387;
        *v387 = 0x8000000000000000;
        v239 = v237;
        v240 = v385;
        sub_10010B8A8(v239, v232, isUniquelyReferenced_nonNull_native);
        *v387 = (uint64_t)v391;
        swift_bridgeObjectRelease();
        v241 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
        v241(v232, v194);
        swift_endAccess(&v392);
        goto LABEL_96;
      }
    }
    swift_endAccess(&v392);
    v231 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
    v242 = (uint64_t)v383;
    v231(v383, v212, v194);
    v243 = sub_10001A9A8(&qword_101108E70);
    v244 = *(unsigned __int8 *)(v380 + 80);
    v245 = (v244 + 32) & ~v244;
    v246 = swift_allocObject(v243, v245 + *(_QWORD *)(v380 + 72), v244 | 7);
    *(_OWORD *)(v246 + 16) = v376;
    sub_10005972C((uint64_t)v386, v246 + v245, type metadata accessor for BeaconEstimatedLocation);
    swift_beginAccess(v195, &v392, 33, 0);
    v247 = swift_isUniquelyReferenced_nonNull_native(*v195);
    v248 = v195;
    v249 = v247;
    v391 = (_QWORD *)*v248;
    v250 = (uint64_t)v391;
    *v248 = 0x8000000000000000;
    v252 = sub_100003FB0(v242);
    v253 = *(_QWORD *)(v250 + 16);
    v254 = (v251 & 1) == 0;
    v255 = v253 + v254;
    if (__OFADD__(v253, v254))
      goto LABEL_144;
    v256 = v251;
    if (*(_QWORD *)(v250 + 24) >= v255)
    {
      if ((v249 & 1) != 0)
      {
        v259 = v391;
        if ((v251 & 1) == 0)
          goto LABEL_90;
      }
      else
      {
        sub_100A9C2C4();
        v259 = v391;
        if ((v256 & 1) == 0)
          goto LABEL_90;
      }
    }
    else
    {
      sub_100A89E44(v255, v249);
      v257 = sub_100003FB0((uint64_t)v383);
      if ((v256 & 1) != (v258 & 1))
        goto LABEL_153;
      v252 = v257;
      v259 = v391;
      if ((v256 & 1) == 0)
      {
LABEL_90:
        v259[(v252 >> 6) + 8] |= 1 << v252;
        v231((char *)(v259[6] + *(_QWORD *)(v26 + 72) * v252), (uint64_t)v383, v384);
        *(_QWORD *)(v259[7] + 8 * v252) = v246;
        v260 = v259[2];
        v199 = __OFADD__(v260, 1);
        v261 = v260 + 1;
        if (v199)
          goto LABEL_147;
        v259[2] = v261;
        goto LABEL_95;
      }
    }
    v262 = v259[7];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v262 + 8 * v252) = v246;
LABEL_95:
    *v387 = (uint64_t)v259;
    swift_bridgeObjectRelease();
    v241 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v194 = v384;
    v241((uint64_t)v383, v384);
    swift_endAccess(&v392);
    v240 = v385;
LABEL_96:
    v231(v382, (uint64_t)v240, v194);
    v263 = v381;
    swift_beginAccess(v381, &v392, 33, 0);
    v264 = *v263;
    if ((swift_isUniquelyReferenced_nonNull_native(v264) & 1) == 0)
      v264 = sub_1007C84F8(0, *(_QWORD *)(v264 + 16) + 1, 1, v264);
    v213 = (uint64_t)v378;
    v266 = *(_QWORD *)(v264 + 16);
    v265 = *(_QWORD *)(v264 + 24);
    if (v266 >= v265 >> 1)
      v264 = sub_1007C84F8(v265 > 1, v266 + 1, 1, v264);
    *(_QWORD *)(v264 + 16) = v266 + 1;
    v226(v264+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v266, (uint64_t)v382, v194);
    *v381 = v264;
    swift_endAccess(&v392);
    sub_1000126B0((uint64_t)v386, type metadata accessor for BeaconEstimatedLocation);
    v212 = (uint64_t)v385;
    v241((uint64_t)v385, v194);
    v195 = v387;
    if (v211)
      goto LABEL_62;
LABEL_64:
    v219 = v379 + 1;
    if (__OFADD__(v379, 1))
      goto LABEL_146;
    if (v219 < v369)
    {
      v220 = *(_QWORD *)(v366 + 8 * v219);
      if (v220)
        goto LABEL_67;
      v221 = v379 + 2;
      ++v379;
      if (v219 + 1 < v369)
      {
        v220 = *(_QWORD *)(v366 + 8 * v221);
        if (v220)
          goto LABEL_70;
        v379 = v219 + 1;
        if (v219 + 2 < v369)
        {
          v220 = *(_QWORD *)(v366 + 8 * (v219 + 2));
          if (v220)
          {
            v219 += 2;
            goto LABEL_67;
          }
          v221 = v219 + 3;
          v379 = v219 + 2;
          if (v219 + 3 < v369)
          {
            v220 = *(_QWORD *)(v366 + 8 * v221);
            if (v220)
            {
LABEL_70:
              v219 = v221;
LABEL_67:
              v211 = (v220 - 1) & v220;
              v215 = __clz(__rbit64(v220)) + (v219 << 6);
              v379 = v219;
              goto LABEL_63;
            }
            while (1)
            {
              v219 = v221 + 1;
              if (__OFADD__(v221, 1))
                goto LABEL_150;
              if (v219 >= v369)
                break;
              v220 = *(_QWORD *)(v366 + 8 * v219);
              ++v221;
              if (v220)
                goto LABEL_67;
            }
            v379 = v353;
          }
        }
      }
    }
    v222 = sub_10001A9A8(&qword_1010FB220);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v222 - 8) + 56))(v213, 1, 1, v222);
    v211 = 0;
  }
  swift_release();
  v355(v351, v354, v367);
  v267 = v361;
  v268 = v350;
  v269 = v357;
  v270 = (*(uint64_t (**)(char *, char *, uint64_t))(v361 + 16))(v350, v362, v357);
  v271 = Logger.logObject.getter(v270);
  v272 = static os_log_type_t.default.getter(v271);
  if (os_log_type_enabled(v271, v272))
  {
    v273 = swift_slowAlloc(22, -1);
    *(_DWORD *)v273 = 134218240;
    v386 = (_QWORD *)(v273 + 4);
    v274 = v333;
    static Date.trustedNow.getter(v333);
    v275 = Date.timeIntervalSince(_:)(v274);
    v276 = *(void (**)(uint64_t, uint64_t))(v267 + 8);
    v276(v274, v269);
    v392 = fabs(v275);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v392, v393, v386, v273 + 12);
    v276((uint64_t)v350, v269);
    *(_WORD *)(v273 + 12) = 2048;
    v392 = v186;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v392, v393, v273 + 14, v273 + 22);
    _os_log_impl((void *)&_mh_execute_header, v271, v272, "Overall fetch took %f seconds. %ld round trip(s).", (uint8_t *)v273, 0x16u);
    swift_slowDealloc(v273, -1, -1);
  }
  else
  {
    v276 = *(void (**)(uint64_t, uint64_t))(v267 + 8);
    v276((uint64_t)v268, v269);
  }
  v277 = v374;

  v278 = v367;
  v356((unint64_t *)v351, v367);
  v279 = v277[6];
  v280 = v277[7];
  sub_10001AA44(v344, v279);
  v281 = (*(uint64_t (**)(uint64_t, uint64_t))(v280 + 24))(v279, v280);
  v282 = (uint64_t)v342;
  if ((v281 & 1) != 0)
  {
LABEL_139:
    v311 = v349;
    v312 = v355(v349, v354, v278);
    v313 = Logger.logObject.getter(v312);
    v314 = static os_log_type_t.default.getter(v313);
    if (os_log_type_enabled(v313, v314))
    {
      v315 = (uint8_t *)swift_slowAlloc(12, -1);
      v386 = (_QWORD *)swift_slowAlloc(32, -1);
      v391 = v386;
      *(_DWORD *)v315 = 136315138;
      v385 = (char *)(v315 + 4);
      v316 = v387;
      swift_beginAccess(v387, v390, 0, 0);
      v317 = v276;
      v318 = v339;
      v319 = *((_QWORD *)v339 + 2);
      swift_bridgeObjectRetain(v319);
      v320 = v194;
      v321 = sub_10001A9A8((uint64_t *)&unk_1010F7950);
      v322 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v323 = Dictionary.description.getter(v319, v320, v321, v322);
      v325 = v324;
      swift_retain_n(v318, 2);
      v326 = v318;
      v276 = v317;
      swift_bridgeObjectRelease();
      v388 = sub_100016940(v323, v325, (uint64_t *)&v391);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v388, &v389, v385, v315 + 12);
      swift_release_n(v326, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v313, v314, "TRACE: returning resultMap: %s", v315, 0xCu);
      v327 = (uint64_t)v386;
      swift_arrayDestroy(v386, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v327, -1, -1);
      swift_slowDealloc(v315, -1, -1);

      v356((unint64_t *)v349, v367);
      v328 = v360;
      v329 = v359;
      v330 = v357;
    }
    else
    {

      v356((unint64_t *)v311, v278);
      v328 = v360;
      v329 = v359;
      v330 = v357;
      v326 = v339;
      v316 = v387;
    }
    swift_beginAccess(v316, &v391, 0, 0);
    swift_bridgeObjectRetain(*((_QWORD *)v326 + 2));
    sub_100319EE0(v331, v329, v328);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v276((uint64_t)v362, v330);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v382 = (char *)v276;
  v283 = v387;
  swift_beginAccess(v387, &v392, 0, 0);
  v284 = *v283;
  v285 = *(_QWORD *)(*v283 + 64);
  v383 = (char *)(*v283 + 64);
  v286 = 1 << *(_BYTE *)(v284 + 32);
  v287 = -1;
  if (v286 < 64)
    v287 = ~(-1 << v286);
  v288 = v287 & v285;
  v385 = (char *)((unint64_t)(v286 + 63) >> 6);
  v381 = (unint64_t *)(v385 - 1);
  v386 = (_QWORD *)v284;
  v289 = swift_bridgeObjectRetain(v284);
  v290 = 0;
  v291 = type metadata accessor for LocationFetcher;
  v292 = v334;
  while (2)
  {
    v293 = (uint64_t)v371;
    if (v288)
    {
      v294 = __clz(__rbit64(v288));
      v288 &= v288 - 1;
      v295 = v294 | (v290 << 6);
      goto LABEL_113;
    }
    v300 = v290 + 1;
    if (__OFADD__(v290, 1))
      goto LABEL_148;
    if (v300 >= (uint64_t)v385)
    {
LABEL_122:
      v302 = sub_10001A9A8(&qword_1010F7808);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v302 - 8) + 56))(v293, 1, 1, v302);
      v288 = 0;
      goto LABEL_123;
    }
    v301 = *(_QWORD *)&v383[8 * v300];
    if (!v301)
    {
      v290 += 2;
      if (v300 + 1 >= (uint64_t)v385)
      {
        v290 = v300;
      }
      else
      {
        v301 = *(_QWORD *)&v383[8 * v290];
        if (v301)
        {
          ++v300;
          goto LABEL_117;
        }
        if (v300 + 2 < (uint64_t)v385)
        {
          v301 = *(_QWORD *)&v383[8 * v300 + 16];
          if (v301)
          {
            v300 += 2;
            goto LABEL_117;
          }
          v310 = v300 + 3;
          if (v300 + 3 >= (uint64_t)v385)
          {
            v290 = v300 + 2;
          }
          else
          {
            v301 = *(_QWORD *)&v383[8 * v310];
            if (v301)
            {
              v300 += 3;
              goto LABEL_117;
            }
            while (1)
            {
              v300 = v310 + 1;
              if (__OFADD__(v310, 1))
                goto LABEL_151;
              if (v300 >= (uint64_t)v385)
                break;
              v301 = *(_QWORD *)&v383[8 * v300];
              ++v310;
              if (v301)
                goto LABEL_117;
            }
            v290 = (uint64_t)v381;
          }
        }
      }
      goto LABEL_122;
    }
LABEL_117:
    v288 = (v301 - 1) & v301;
    v295 = __clz(__rbit64(v301)) + (v300 << 6);
    v290 = v300;
LABEL_113:
    v296 = (uint64_t)v386;
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v26 + 16))(v371, v386[6] + *(_QWORD *)(v26 + 72) * v295, v384, v289);
    v297 = *(_QWORD *)(v296 + 56);
    v298 = sub_10001A9A8(&qword_1010F7808);
    v299 = *(_QWORD *)(v297 + 8 * v295);
    *(_QWORD *)(v293 + *(int *)(v298 + 48)) = v299;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v298 - 8) + 56))(v293, 0, 1, v298);
    swift_bridgeObjectRetain(v299);
LABEL_123:
    v303 = v370;
    sub_100005CF0(v293, v370, &qword_1010FB1F8);
    v304 = sub_10001A9A8(&qword_1010F7808);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v304 - 8) + 48))(v303, 1, v304) == 1)
    {
      swift_release();
      v194 = v384;
      v278 = v367;
      v276 = (void (*)(uint64_t, uint64_t))v382;
      goto LABEL_139;
    }
    v305 = *(_QWORD *)(v303 + *(int *)(v304 + 48));
    sub_10005972C((uint64_t)v374, (uint64_t)v292, v291);
    v306 = v384;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v282, v303, v384);
    v307 = v291;
    v308 = objc_autoreleasePoolPush();
    v309 = v375;
    sub_1003F95EC(v292, v305, (uint64_t *)&v389, v282, v372);
    v375 = v309;
    if (!v309)
    {
      objc_autoreleasePoolPop(v308);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v292, v307);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v282, v306);
      v291 = v307;
      continue;
    }
    break;
  }
  swift_release();
  objc_autoreleasePoolPop(v308);
  __break(1u);
LABEL_153:
  swift_release();
  swift_release();
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v384);
  __break(1u);
  return result;
}

uint64_t sub_100422A58(int64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  _BOOL4 v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  void (*v93)(char *, uint64_t, _QWORD *);
  uint64_t v94;
  uint64_t MyAppURLSessionFactory;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t);
  uint64_t v102;
  unint64_t *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  int64_t v127;
  uint64_t result;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  NSObject *v140;
  os_log_type_t v141;
  uint8_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int64_t v164;
  char *v165;
  uint64_t v166;
  double v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char v183;
  uint64_t *v184;
  int64_t v185;
  double v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  int64_t v193;
  uint64_t v194;
  uint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  BOOL v199;
  int64_t v200;
  unint64_t v201;
  int64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void (*v226)(uint64_t, uint64_t, uint64_t);
  uint64_t v227;
  unint64_t v228;
  char v229;
  double v230;
  void (*v231)(char *, uint64_t, uint64_t);
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v239;
  char *v240;
  void (*v241)(uint64_t, uint64_t);
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  unint64_t v252;
  uint64_t v253;
  _BOOL8 v254;
  uint64_t v255;
  char v256;
  unint64_t v257;
  char v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  NSObject *v271;
  os_log_type_t v272;
  uint64_t v273;
  uint64_t v274;
  double v275;
  void (*v276)(uint64_t, uint64_t);
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char v281;
  uint64_t v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  __n128 v289;
  uint64_t v290;
  uint64_t (*v291)(uint64_t);
  _QWORD *v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t (*v307)(uint64_t);
  void *v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  NSObject *v313;
  os_log_type_t v314;
  uint8_t *v315;
  uint64_t *v316;
  void (*v317)(uint64_t, uint64_t);
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t Endpoint;
  char *v338;
  char *v339;
  uint64_t v340;
  _QWORD *v341;
  char *v342;
  uint64_t v343;
  _QWORD *v344;
  char *v345;
  _QWORD *v346;
  uint64_t v347;
  char *v348;
  char *v349;
  char *v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  char *v354;
  uint64_t (*v355)(char *, char *, uint64_t);
  void (*v356)(unint64_t *, uint64_t);
  uint64_t v357;
  char *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  char *v368;
  int64_t v369;
  uint64_t v370;
  char *v371;
  uint64_t *v372;
  uint64_t v373;
  _QWORD *v374;
  uint64_t v375;
  __int128 v376;
  uint64_t v377;
  char *v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t *v381;
  char *v382;
  char *v383;
  uint64_t v384;
  char *v385;
  _QWORD *v386;
  uint64_t *v387;
  uint64_t v388;
  _QWORD *v389;
  char v390[8];
  _QWORD *v391;
  double v392;
  char v393[8];
  uint64_t v394;
  char v395[8];
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;

  v360 = a4;
  v359 = a3;
  v374 = a2;
  v369 = a1;
  v344 = (_QWORD *)type metadata accessor for FMNAccountType(0);
  v343 = *(v344 - 1);
  __chkstk_darwin(v344);
  v339 = (char *)&v332 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Endpoint = type metadata accessor for FetchEndpoint(0);
  v5 = __chkstk_darwin(Endpoint);
  v340 = (uint64_t)&v332 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v341 = (uint64_t *)((char *)&v332 - v7);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v8);
  v358 = (char *)&v332 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v335 = type metadata accessor for OwnedDeviceFetchEndpoint(0);
  v10 = __chkstk_darwin(v335);
  v336 = (uint64_t)&v332 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v338 = (char *)&v332 - v12;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  __chkstk_darwin(v13);
  v15 = (char *)&v332 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LocalFindableAccessoryRecord(0);
  *(_QWORD *)&v376 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v379 = (uint64_t)&v332 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v375 = (uint64_t)&v332 - v19;
  v20 = sub_10001A9A8(&qword_1010FB1F8);
  v21 = __chkstk_darwin(v20);
  v371 = (char *)&v332 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v370 = (uint64_t)&v332 - v23;
  v24 = type metadata accessor for BeaconEstimatedLocation(0);
  v380 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v386 = (uint64_t *)((char *)&v332 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v384 = type metadata accessor for UUID(0);
  v26 = *(_QWORD *)(v384 - 8);
  v27 = __chkstk_darwin(v384);
  v348 = (char *)&v332 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v342 = (char *)&v332 - v30;
  v31 = __chkstk_darwin(v29);
  v368 = (char *)&v332 - v32;
  v33 = __chkstk_darwin(v31);
  v382 = (char *)&v332 - v34;
  v35 = __chkstk_darwin(v33);
  v383 = (char *)&v332 - v36;
  __chkstk_darwin(v35);
  v385 = (char *)&v332 - v37;
  v38 = sub_10001A9A8(&qword_1010FB200);
  v39 = __chkstk_darwin(v38);
  v378 = (char *)&v332 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v377 = (uint64_t)&v332 - v41;
  v42 = type metadata accessor for LocationFetcher(0);
  v353 = *(_QWORD *)(v42 - 8);
  v43 = __chkstk_darwin(v42);
  v334 = (char *)&v332 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __chkstk_darwin(v43);
  v373 = (uint64_t)&v332 - v46;
  v366 = v47;
  __chkstk_darwin(v45);
  v49 = (uint64_t *)((char *)&v332 - v48);
  v50 = type metadata accessor for Logger(0);
  v51 = *(uint64_t **)(v50 - 8);
  v52 = __chkstk_darwin(v50);
  v349 = (char *)&v332 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __chkstk_darwin(v52);
  v351 = (char *)&v332 - v55;
  v56 = __chkstk_darwin(v54);
  v345 = (char *)&v332 - v57;
  __chkstk_darwin(v56);
  v59 = (unint64_t *)((char *)&v332 - v58);
  v357 = type metadata accessor for Date(0);
  v361 = *(_QWORD *)(v357 - 8);
  v60 = __chkstk_darwin(v357);
  v333 = (uint64_t)&v332 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = __chkstk_darwin(v60);
  v350 = (char *)&v332 - v63;
  __chkstk_darwin(v62);
  v65 = (char *)&v332 - v64;
  v66 = swift_allocObject(&unk_1010759B0, 32, 7);
  *(_QWORD *)(v66 + 16) = v359;
  *(_QWORD *)(v66 + 24) = v360;
  swift_retain();
  v362 = v65;
  static Date.trustedNow.getter((uint64_t)v65);
  v67 = swift_allocObject(&unk_1010759D8, 24, 7);
  v365 = v67;
  *(_QWORD *)(v67 + 16) = _swiftEmptyDictionarySingleton;
  v372 = (uint64_t *)(v67 + 16);
  v68 = swift_allocObject(&unk_101075A00, 24, 7);
  v364 = v68;
  *(_QWORD *)(v68 + 16) = _swiftEmptyDictionarySingleton;
  v347 = v68 + 16;
  v69 = *(int *)(v42 + 32);
  v70 = v374;
  v71 = (char *)v374 + v69;
  v387 = v51;
  v72 = (uint64_t (*)(char *, char *, uint64_t))v51[2];
  v354 = v71;
  v367 = v50;
  v355 = v72;
  ((void (*)(unint64_t *))v72)(v59);
  v73 = sub_10005972C((uint64_t)v70, (uint64_t)v49, type metadata accessor for LocationFetcher);
  v381 = v59;
  v74 = Logger.logObject.getter(v73);
  v75 = static os_log_type_t.default.getter(v74);
  v76 = os_log_type_enabled(v74, v75);
  v352 = v66;
  if (v76)
  {
    v77 = (uint8_t *)swift_slowAlloc(12, -1);
    v78 = swift_slowAlloc(32, -1);
    v363 = v78;
    *(_DWORD *)v77 = 136446210;
    v396 = v78;
    v356 = (void (*)(unint64_t *, uint64_t))(v77 + 4);
    v80 = v49[6];
    v79 = v49[7];
    sub_10001AA44(v49 + 3, v80);
    v81 = dispatch thunk of CustomStringConvertible.description.getter(v80, *(_QWORD *)(v79 + 8));
    v394 = sub_100016940(v81, v82, &v396);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v394, v395, v356, v77 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v49, type metadata accessor for LocationFetcher);
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "Begin location fetch with policy: %{public}s.", v77, 0xCu);
    v83 = v363;
    swift_arrayDestroy(v363, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v83, -1, -1);
    v66 = v352;
    swift_slowDealloc(v77, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v49, type metadata accessor for LocationFetcher);
  }

  v356 = (void (*)(unint64_t *, uint64_t))v387[1];
  v356(v381, v367);
  v84 = swift_allocObject(&unk_101075A28, 24, 7);
  *(_QWORD *)(v84 + 16) = _swiftEmptyDictionarySingleton;
  v346 = (_QWORD *)(v84 + 16);
  v85 = v374;
  v86 = v374 + 3;
  v87 = v374[6];
  v88 = v374[7];
  sub_10001AA44(v374 + 3, v87);
  v89 = (*(uint64_t (**)(uint64_t, uint64_t))(v88 + 24))(v87, v88);
  v363 = v84;
  if ((v89 & 1) != 0)
  {
    v358 = 0;
  }
  else
  {
    v90 = v85[6];
    v91 = v85[7];
    sub_10001AA44(v85 + 3, v90);
    v92 = (*(uint64_t (**)(uint64_t, uint64_t))(v91 + 64))(v90, v91);
    v93 = *(void (**)(char *, uint64_t, _QWORD *))(v343 + 104);
    if ((v92 & 1) != 0)
    {
      v94 = (uint64_t)v338;
      v93(v338, enum case for FMNAccountType.ownedDeviceLocations(_:), v344);
      sub_100363008(v94 + *(int *)(v335 + 20));
      MyAppURLSessionFactory = type metadata accessor for FindMyAppURLSessionFactory(0);
      swift_allocObject(MyAppURLSessionFactory, *(unsigned int *)(MyAppURLSessionFactory + 48), *(unsigned __int16 *)(MyAppURLSessionFactory + 52));
      v96 = type metadata accessor for FMNMockingPreferences(0);
      v97 = v358;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56))(v358, 1, 1, v96);
      v98 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v97);
      v99 = type metadata accessor for ServerInteractionController(0);
      v100 = swift_allocObject(v99, *(unsigned int *)(v99 + 48), *(unsigned __int16 *)(v99 + 52));
      v101 = type metadata accessor for OwnedDeviceFetchEndpoint;
      v102 = v336;
      sub_10005972C(v94, v336, type metadata accessor for OwnedDeviceFetchEndpoint);
      v103 = &qword_1010FB230;
      v104 = &unk_100E3A484;
      v105 = v102;
    }
    else
    {
      v106 = enum case for FMNAccountType.searchParty(_:);
      v107 = (uint64_t)v339;
      v108 = v344;
      v93(v339, enum case for FMNAccountType.searchParty(_:), v344);
      v109 = type metadata accessor for AccountURLComponents();
      swift_allocObject(v109, 56, 7);
      v110 = sub_100C511C4(v107);
      v94 = (uint64_t)v341;
      *v341 = v110;
      v93((char *)(v94 + *(int *)(Endpoint + 20)), v106, v108);
      v111 = type metadata accessor for FindMyAppURLSessionFactory(0);
      swift_allocObject(v111, *(unsigned int *)(v111 + 48), *(unsigned __int16 *)(v111 + 52));
      v112 = type metadata accessor for FMNMockingPreferences(0);
      v113 = v358;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 56))(v358, 1, 1, v112);
      v98 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v113);
      v114 = type metadata accessor for ServerInteractionController(0);
      v100 = swift_allocObject(v114, *(unsigned int *)(v114 + 48), *(unsigned __int16 *)(v114 + 52));
      v101 = type metadata accessor for FetchEndpoint;
      v115 = v66;
      v116 = v340;
      sub_10005972C(v94, v340, type metadata accessor for FetchEndpoint);
      v103 = (unint64_t *)&unk_1010FB2E0;
      v104 = &unk_100E59C28;
      v105 = v116;
      v66 = v115;
    }
    v358 = (char *)sub_10041D38C(v105, v98, v100, v101, v103, (uint64_t)v104);
    sub_1000126B0(v94, v101);
  }
  v117 = v374;
  v118 = v374[6];
  v119 = v374[7];
  sub_10001AA44(v86, v118);
  v120 = (*(uint64_t (**)(uint64_t, uint64_t))(v119 + 24))(v118, v119);
  v121 = v361;
  if ((v120 & 1) != 0)
  {
    v122 = swift_allocObject(&unk_101075AF0, 32, 7);
    *(_QWORD *)(v122 + 16) = sub_100425B30;
    *(_QWORD *)(v122 + 24) = v66;
    type metadata accessor for Transaction(0);
    v123 = v373;
    sub_10005972C((uint64_t)v117, v373, type metadata accessor for LocationFetcher);
    v124 = *(unsigned __int8 *)(v353 + 80);
    v125 = (v124 + 40) & ~v124;
    v126 = (_QWORD *)swift_allocObject(&unk_101075B18, v125 + v366, v124 | 7);
    v126[2] = sub_10001D858;
    v126[3] = v122;
    v127 = v369;
    v126[4] = v369;
    sub_1000126EC(v123, (uint64_t)v126 + v125, type metadata accessor for LocationFetcher);
    swift_bridgeObjectRetain(v127);
    swift_retain();
    swift_retain();
    static Transaction.asyncTask(name:block:)("beaconsFromDisk.FromDisk", 24, 2, &unk_1010FB228, v126);
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v121 + 8))(v362, v357);
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  v344 = v86;
  v129 = swift_allocObject(&unk_101075A50, 24, 7);
  *(_QWORD *)(v129 + 16) = _swiftEmptyDictionarySingleton;
  v387 = (uint64_t *)(v129 + 16);
  v130 = swift_allocObject(&unk_101075A78, 24, 7);
  *(_QWORD *)(v130 + 16) = _swiftEmptyArrayStorage;
  v381 = (unint64_t *)(v130 + 16);
  sub_10005972C((uint64_t)v117, v373, type metadata accessor for LocationFetcher);
  v131 = *(unsigned __int8 *)(v353 + 80);
  v132 = (v131 + 32) & ~v131;
  v353 = v131;
  v340 = v366 + 7;
  v133 = (v366 + 7 + v132) & 0xFFFFFFFFFFFFFFF8;
  v134 = (v133 + 15) & 0xFFFFFFFFFFFFFFF8;
  v135 = (v134 + 15) & 0xFFFFFFFFFFFFFFF8;
  v366 = v131 | 7;
  v136 = swift_allocObject(&unk_101075AA0, v135 + 8, v131 | 7);
  v137 = v364;
  *(_QWORD *)(v136 + 16) = v363;
  *(_QWORD *)(v136 + 24) = v137;
  sub_1000126EC(v373, v136 + v132, type metadata accessor for LocationFetcher);
  *(_QWORD *)(v136 + v133) = v365;
  v343 = v130;
  *(_QWORD *)(v136 + v134) = v130;
  v341 = (_QWORD *)v136;
  *(_QWORD *)(v136 + v135) = v129;
  v138 = v345;
  v139 = v355(v345, v354, v367);
  v140 = Logger.logObject.getter(v139);
  v141 = static os_log_type_t.default.getter(v140);
  if (os_log_type_enabled(v140, v141))
  {
    v142 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v142 = 0;
    _os_log_impl((void *)&_mh_execute_header, v140, v141, "Gathering beacon information for fetch.", v142, 2u);
    swift_slowDealloc(v142, -1, -1);
  }
  swift_retain();
  v339 = (char *)v129;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();

  v356((unint64_t *)v138, v367);
  v143 = v369;
  v144 = *(_QWORD *)(v369 + 16);
  if (v144)
  {
    v145 = v369 + 32;
    swift_bridgeObjectRetain(v369);
    v146 = _swiftEmptyArrayStorage;
    v147 = v376;
    do
    {
      sub_100030784(v145, (uint64_t)&v396);
      sub_100030784((uint64_t)&v396, (uint64_t)&v394);
      v148 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
      v149 = swift_dynamicCast(v15, &v394, v148, v16, 6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v147 + 56))(v15, v149 ^ 1u, 1, v16);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v396);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v15, 1, v16) == 1)
      {
        sub_100004048((uint64_t)v15, (uint64_t *)&unk_1010EDC50);
      }
      else
      {
        v150 = v375;
        sub_1000126EC((uint64_t)v15, v375, type metadata accessor for LocalFindableAccessoryRecord);
        sub_1000126EC(v150, v379, type metadata accessor for LocalFindableAccessoryRecord);
        v151 = (unint64_t)v146;
        if ((swift_isUniquelyReferenced_nonNull_native(v146) & 1) == 0)
          v151 = sub_1007C9484(0, v146[2] + 1, 1, (unint64_t)v146);
        v153 = *(_QWORD *)(v151 + 16);
        v152 = *(_QWORD *)(v151 + 24);
        v146 = (_QWORD *)v151;
        if (v153 >= v152 >> 1)
          v146 = (_QWORD *)sub_1007C9484(v152 > 1, v153 + 1, 1, v151);
        v146[2] = v153 + 1;
        v147 = v376;
        sub_1000126EC(v379, (uint64_t)v146+ ((*(unsigned __int8 *)(v147 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80))+ *(_QWORD *)(v376 + 72) * v153, type metadata accessor for LocalFindableAccessoryRecord);
      }
      v145 += 40;
      --v144;
    }
    while (v144);
    v143 = v369;
    swift_bridgeObjectRelease();
  }
  else
  {
    v146 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(v143);
  swift_bridgeObjectRetain(v146);
  v154 = sub_10041E460(v143, (uint64_t)v146);
  swift_bridgeObjectRelease();
  v379 = (uint64_t)v146;
  v155 = swift_bridgeObjectRelease();
  __chkstk_darwin(v155);
  v156 = v374;
  *(&v332 - 2) = (uint64_t)v374;
  swift_bridgeObjectRetain(v154);
  v157 = sub_10008B604((uint64_t)sub_100425B64, &v332 - 4, (uint64_t)v154);
  v389 = _swiftEmptyDictionarySingleton;
  v158 = (_QWORD *)__chkstk_darwin(v157);
  *(&v332 - 8) = (uint64_t)v381;
  *(&v332 - 7) = (uint64_t)v156;
  v159 = v347;
  *(&v332 - 6) = (uint64_t)v372;
  *(&v332 - 5) = v159;
  *(&v332 - 4) = (uint64_t)&v389;
  *(&v332 - 3) = (uint64_t)v358;
  *(&v332 - 2) = (uint64_t)sub_100425B60;
  *(&v332 - 1) = (uint64_t)v341;
  sub_1003F7440(v158, (void (*)(uint64_t, uint64_t))sub_100425B80, (uint64_t)(&v332 - 10));
  swift_bridgeObjectRelease();
  v160 = v346;
  swift_beginAccess(v346, &v394, 0, 0);
  swift_bridgeObjectRetain(*v160);
  v162 = sub_10041BE58(v161);
  v163 = swift_bridgeObjectRelease();
  __chkstk_darwin(v163);
  *(&v332 - 4) = v159;
  *(&v332 - 3) = (uint64_t)v156;
  *(&v332 - 2) = v365;
  sub_1003F0D68((void (*)(char *, __n128))sub_100425B84, (uint64_t)(&v332 - 6), v162);
  swift_release();
  v164 = v154[2];
  v165 = v348;
  if (v164)
  {
    v392 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    sub_10009A578(0, v164, 0);
    v166 = (uint64_t)(v154 + 4);
    v167 = v392;
    do
    {
      sub_100030784(v166, (uint64_t)&v396);
      v169 = v397;
      v168 = v398;
      sub_10001AA44(&v396, v397);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v168 + 8) + 8) + 32))(v169);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v396);
      if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&v167) & 1) == 0)
      {
        sub_10009A578(0, *(_QWORD *)(*(_QWORD *)&v167 + 16) + 1, 1);
        v167 = v392;
      }
      v171 = *(_QWORD *)(*(_QWORD *)&v167 + 16);
      v170 = *(_QWORD *)(*(_QWORD *)&v167 + 24);
      if (v171 >= v170 >> 1)
      {
        sub_10009A578(v170 > 1, v171 + 1, 1);
        v167 = v392;
      }
      *(_QWORD *)(*(_QWORD *)&v167 + 16) = v171 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v26 + 32))(*(_QWORD *)&v167+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v171, v165, v384);
      v392 = v167;
      v166 += 40;
      --v164;
    }
    while (v164);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v167 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  }
  v172 = ~v353;
  v173 = sub_10001B664(*(uint64_t *)&v167);
  swift_bridgeObjectRelease();
  v174 = v374;
  v175 = v374[6];
  v176 = v374[7];
  v177 = v344;
  sub_10001AA44(v344, v175);
  (*(void (**)(uint64_t, uint64_t))(v176 + 24))(v175, v176);
  v178 = v174[6];
  v179 = v174[7];
  sub_10001AA44(v177, v178);
  v180 = (*(uint64_t (**)(uint64_t, uint64_t))(v179 + 40))(v178, v179);
  v181 = (uint64_t)v174;
  __chkstk_darwin(v180);
  v182 = v362;
  *(&v332 - 4) = (uint64_t)v174;
  *(&v332 - 3) = (uint64_t)v182;
  *((_BYTE *)&v332 - 16) = v183;
  sub_1003F08EC((void (*)(char *))sub_100425BA0, (uint64_t)(&v332 - 6), v173);
  swift_bridgeObjectRelease();
  v184 = v372;
  swift_beginAccess(v372, &v396, 0, 0);
  v185 = 0;
  v186 = 0.0;
  v187 = *v184;
  v188 = 1 << *(_BYTE *)(*v184 + 32);
  v189 = -1;
  if (v188 < 64)
    v189 = ~(-1 << v188);
  v191 = *(_QWORD *)(v187 + 64);
  v190 = v187 + 64;
  v192 = v189 & v191;
  v193 = (unint64_t)(v188 + 63) >> 6;
  v194 = v384;
  v195 = v387;
  while (1)
  {
    if (v192)
    {
      v196 = __clz(__rbit64(v192));
      v192 &= v192 - 1;
      v197 = v196 | (v185 << 6);
      goto LABEL_39;
    }
    v200 = v185 + 1;
    if (__OFADD__(v185, 1))
      goto LABEL_145;
    if (v200 >= v193)
      break;
    v201 = *(_QWORD *)(v190 + 8 * v200);
    ++v185;
    if (!v201)
    {
      v185 = v200 + 1;
      if (v200 + 1 >= v193)
        break;
      v201 = *(_QWORD *)(v190 + 8 * v185);
      if (!v201)
      {
        v185 = v200 + 2;
        if (v200 + 2 >= v193)
          break;
        v201 = *(_QWORD *)(v190 + 8 * v185);
        if (!v201)
        {
          v185 = v200 + 3;
          if (v200 + 3 >= v193)
            break;
          v201 = *(_QWORD *)(v190 + 8 * v185);
          if (!v201)
          {
            v185 = v200 + 4;
            if (v200 + 4 >= v193)
              break;
            v201 = *(_QWORD *)(v190 + 8 * v185);
            if (!v201)
            {
              v202 = v200 + 5;
              if (v202 >= v193)
                break;
              v201 = *(_QWORD *)(v190 + 8 * v202);
              if (!v201)
              {
                while (1)
                {
                  v185 = v202 + 1;
                  if (__OFADD__(v202, 1))
                    goto LABEL_149;
                  if (v185 >= v193)
                    goto LABEL_59;
                  v201 = *(_QWORD *)(v190 + 8 * v185);
                  ++v202;
                  if (v201)
                    goto LABEL_58;
                }
              }
              v185 = v202;
            }
          }
        }
      }
    }
LABEL_58:
    v192 = (v201 - 1) & v201;
    v197 = __clz(__rbit64(v201)) + (v185 << 6);
LABEL_39:
    v198 = *(_QWORD *)(*(_QWORD *)(*v184 + 56) + 8 * v197);
    v199 = __OFADD__(*(_QWORD *)&v186, v198);
    *(_QWORD *)&v186 += v198;
    if (v199)
    {
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
    }
  }
LABEL_59:
  v375 = 0;
  v203 = v373;
  sub_10005972C(v181, v373, type metadata accessor for LocationFetcher);
  v204 = (v353 + 16) & v172;
  v205 = (v340 + v204) & 0xFFFFFFFFFFFFFFF8;
  v206 = swift_allocObject(&unk_101075AC8, v205 + 8, v366);
  sub_1000126EC(v203, v206 + v204, type metadata accessor for LocationFetcher);
  *(_QWORD *)(v206 + v205) = v379;
  v207 = sub_10001A9A8(&qword_1010FB218);
  unsafeFromAsyncTask<A>(_:)(&v392, &unk_1010FB210, v206, v207);
  swift_release();
  v379 = 0;
  v208 = *(_QWORD *)(*(_QWORD *)&v392 + 64);
  v366 = *(_QWORD *)&v392 + 64;
  v373 = *(_QWORD *)&v392;
  v209 = 1 << *(_BYTE *)(*(_QWORD *)&v392 + 32);
  v210 = -1;
  if (v209 < 64)
    v210 = ~(-1 << v209);
  v211 = v210 & v208;
  v369 = (unint64_t)(v209 + 63) >> 6;
  v353 = v369 - 1;
  v376 = xmmword_100E22B00;
  v212 = (uint64_t)v385;
  v213 = (uint64_t)v378;
  if ((v210 & v208) == 0)
    goto LABEL_64;
LABEL_62:
  v214 = __clz(__rbit64(v211));
  v211 &= v211 - 1;
  v215 = v214 | (v379 << 6);
LABEL_63:
  v216 = v373;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v213, *(_QWORD *)(v373 + 48) + *(_QWORD *)(v26 + 72) * v215, v194);
  v217 = *(_QWORD *)(v216 + 56) + *(_QWORD *)(v380 + 72) * v215;
  v218 = sub_10001A9A8(&qword_1010FB220);
  sub_10005972C(v217, v213 + *(int *)(v218 + 48), type metadata accessor for BeaconEstimatedLocation);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v218 - 8) + 56))(v213, 0, 1, v218);
  v212 = (uint64_t)v385;
  while (1)
  {
    v223 = v377;
    sub_100005CF0(v213, v377, &qword_1010FB200);
    v224 = sub_10001A9A8(&qword_1010FB220);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v224 - 8) + 48))(v223, 1, v224) == 1)
      break;
    v225 = v223 + *(int *)(v224 + 48);
    v226 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32);
    v226(v212, v223, v194);
    sub_1000126EC(v225, (uint64_t)v386, type metadata accessor for BeaconEstimatedLocation);
    swift_beginAccess(v195, &v392, 32, 0);
    v227 = *v195;
    if (*(_QWORD *)(*v195 + 16))
    {
      v228 = sub_100003FB0(v212);
      if ((v229 & 1) != 0)
      {
        v230 = *(double *)(*(_QWORD *)(v227 + 56) + 8 * v228);
        swift_endAccess(&v392);
        v231 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
        v232 = (uint64_t)v368;
        v231(v368, v212, v194);
        v233 = sub_10001A9A8(&qword_101108E70);
        v234 = *(unsigned __int8 *)(v380 + 80);
        v235 = (v234 + 32) & ~v234;
        v236 = swift_allocObject(v233, v235 + *(_QWORD *)(v380 + 72), v234 | 7);
        *(_OWORD *)(v236 + 16) = v376;
        sub_10005972C((uint64_t)v386, v236 + v235, type metadata accessor for BeaconEstimatedLocation);
        v392 = v230;
        swift_bridgeObjectRetain(*(_QWORD *)&v230);
        sub_100304004(v236);
        v237 = *(_QWORD *)&v392;
        swift_beginAccess(v387, &v392, 33, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v387);
        v391 = (_QWORD *)*v387;
        *v387 = 0x8000000000000000;
        v239 = v237;
        v240 = v385;
        sub_10010B8A8(v239, v232, isUniquelyReferenced_nonNull_native);
        *v387 = (uint64_t)v391;
        swift_bridgeObjectRelease();
        v241 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
        v241(v232, v194);
        swift_endAccess(&v392);
        goto LABEL_96;
      }
    }
    swift_endAccess(&v392);
    v231 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
    v242 = (uint64_t)v383;
    v231(v383, v212, v194);
    v243 = sub_10001A9A8(&qword_101108E70);
    v244 = *(unsigned __int8 *)(v380 + 80);
    v245 = (v244 + 32) & ~v244;
    v246 = swift_allocObject(v243, v245 + *(_QWORD *)(v380 + 72), v244 | 7);
    *(_OWORD *)(v246 + 16) = v376;
    sub_10005972C((uint64_t)v386, v246 + v245, type metadata accessor for BeaconEstimatedLocation);
    swift_beginAccess(v195, &v392, 33, 0);
    v247 = swift_isUniquelyReferenced_nonNull_native(*v195);
    v248 = v195;
    v249 = v247;
    v391 = (_QWORD *)*v248;
    v250 = (uint64_t)v391;
    *v248 = 0x8000000000000000;
    v252 = sub_100003FB0(v242);
    v253 = *(_QWORD *)(v250 + 16);
    v254 = (v251 & 1) == 0;
    v255 = v253 + v254;
    if (__OFADD__(v253, v254))
      goto LABEL_144;
    v256 = v251;
    if (*(_QWORD *)(v250 + 24) >= v255)
    {
      if ((v249 & 1) != 0)
      {
        v259 = v391;
        if ((v251 & 1) == 0)
          goto LABEL_90;
      }
      else
      {
        sub_100A9C2C4();
        v259 = v391;
        if ((v256 & 1) == 0)
          goto LABEL_90;
      }
    }
    else
    {
      sub_100A89E44(v255, v249);
      v257 = sub_100003FB0((uint64_t)v383);
      if ((v256 & 1) != (v258 & 1))
        goto LABEL_153;
      v252 = v257;
      v259 = v391;
      if ((v256 & 1) == 0)
      {
LABEL_90:
        v259[(v252 >> 6) + 8] |= 1 << v252;
        v231((char *)(v259[6] + *(_QWORD *)(v26 + 72) * v252), (uint64_t)v383, v384);
        *(_QWORD *)(v259[7] + 8 * v252) = v246;
        v260 = v259[2];
        v199 = __OFADD__(v260, 1);
        v261 = v260 + 1;
        if (v199)
          goto LABEL_147;
        v259[2] = v261;
        goto LABEL_95;
      }
    }
    v262 = v259[7];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v262 + 8 * v252) = v246;
LABEL_95:
    *v387 = (uint64_t)v259;
    swift_bridgeObjectRelease();
    v241 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v194 = v384;
    v241((uint64_t)v383, v384);
    swift_endAccess(&v392);
    v240 = v385;
LABEL_96:
    v231(v382, (uint64_t)v240, v194);
    v263 = v381;
    swift_beginAccess(v381, &v392, 33, 0);
    v264 = *v263;
    if ((swift_isUniquelyReferenced_nonNull_native(v264) & 1) == 0)
      v264 = sub_1007C84F8(0, *(_QWORD *)(v264 + 16) + 1, 1, v264);
    v213 = (uint64_t)v378;
    v266 = *(_QWORD *)(v264 + 16);
    v265 = *(_QWORD *)(v264 + 24);
    if (v266 >= v265 >> 1)
      v264 = sub_1007C84F8(v265 > 1, v266 + 1, 1, v264);
    *(_QWORD *)(v264 + 16) = v266 + 1;
    v226(v264+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v266, (uint64_t)v382, v194);
    *v381 = v264;
    swift_endAccess(&v392);
    sub_1000126B0((uint64_t)v386, type metadata accessor for BeaconEstimatedLocation);
    v212 = (uint64_t)v385;
    v241((uint64_t)v385, v194);
    v195 = v387;
    if (v211)
      goto LABEL_62;
LABEL_64:
    v219 = v379 + 1;
    if (__OFADD__(v379, 1))
      goto LABEL_146;
    if (v219 < v369)
    {
      v220 = *(_QWORD *)(v366 + 8 * v219);
      if (v220)
        goto LABEL_67;
      v221 = v379 + 2;
      ++v379;
      if (v219 + 1 < v369)
      {
        v220 = *(_QWORD *)(v366 + 8 * v221);
        if (v220)
          goto LABEL_70;
        v379 = v219 + 1;
        if (v219 + 2 < v369)
        {
          v220 = *(_QWORD *)(v366 + 8 * (v219 + 2));
          if (v220)
          {
            v219 += 2;
            goto LABEL_67;
          }
          v221 = v219 + 3;
          v379 = v219 + 2;
          if (v219 + 3 < v369)
          {
            v220 = *(_QWORD *)(v366 + 8 * v221);
            if (v220)
            {
LABEL_70:
              v219 = v221;
LABEL_67:
              v211 = (v220 - 1) & v220;
              v215 = __clz(__rbit64(v220)) + (v219 << 6);
              v379 = v219;
              goto LABEL_63;
            }
            while (1)
            {
              v219 = v221 + 1;
              if (__OFADD__(v221, 1))
                goto LABEL_150;
              if (v219 >= v369)
                break;
              v220 = *(_QWORD *)(v366 + 8 * v219);
              ++v221;
              if (v220)
                goto LABEL_67;
            }
            v379 = v353;
          }
        }
      }
    }
    v222 = sub_10001A9A8(&qword_1010FB220);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v222 - 8) + 56))(v213, 1, 1, v222);
    v211 = 0;
  }
  swift_release();
  v355(v351, v354, v367);
  v267 = v361;
  v268 = v350;
  v269 = v357;
  v270 = (*(uint64_t (**)(char *, char *, uint64_t))(v361 + 16))(v350, v362, v357);
  v271 = Logger.logObject.getter(v270);
  v272 = static os_log_type_t.default.getter(v271);
  if (os_log_type_enabled(v271, v272))
  {
    v273 = swift_slowAlloc(22, -1);
    *(_DWORD *)v273 = 134218240;
    v386 = (_QWORD *)(v273 + 4);
    v274 = v333;
    static Date.trustedNow.getter(v333);
    v275 = Date.timeIntervalSince(_:)(v274);
    v276 = *(void (**)(uint64_t, uint64_t))(v267 + 8);
    v276(v274, v269);
    v392 = fabs(v275);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v392, v393, v386, v273 + 12);
    v276((uint64_t)v350, v269);
    *(_WORD *)(v273 + 12) = 2048;
    v392 = v186;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v392, v393, v273 + 14, v273 + 22);
    _os_log_impl((void *)&_mh_execute_header, v271, v272, "Overall fetch took %f seconds. %ld round trip(s).", (uint8_t *)v273, 0x16u);
    swift_slowDealloc(v273, -1, -1);
  }
  else
  {
    v276 = *(void (**)(uint64_t, uint64_t))(v267 + 8);
    v276((uint64_t)v268, v269);
  }
  v277 = v374;

  v278 = v367;
  v356((unint64_t *)v351, v367);
  v279 = v277[6];
  v280 = v277[7];
  sub_10001AA44(v344, v279);
  v281 = (*(uint64_t (**)(uint64_t, uint64_t))(v280 + 24))(v279, v280);
  v282 = (uint64_t)v342;
  if ((v281 & 1) != 0)
  {
LABEL_139:
    v311 = v349;
    v312 = v355(v349, v354, v278);
    v313 = Logger.logObject.getter(v312);
    v314 = static os_log_type_t.default.getter(v313);
    if (os_log_type_enabled(v313, v314))
    {
      v315 = (uint8_t *)swift_slowAlloc(12, -1);
      v386 = (_QWORD *)swift_slowAlloc(32, -1);
      v391 = v386;
      *(_DWORD *)v315 = 136315138;
      v385 = (char *)(v315 + 4);
      v316 = v387;
      swift_beginAccess(v387, v390, 0, 0);
      v317 = v276;
      v318 = v339;
      v319 = *((_QWORD *)v339 + 2);
      swift_bridgeObjectRetain(v319);
      v320 = v194;
      v321 = sub_10001A9A8((uint64_t *)&unk_1010F7950);
      v322 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v323 = Dictionary.description.getter(v319, v320, v321, v322);
      v325 = v324;
      swift_retain_n(v318, 2);
      v326 = v318;
      v276 = v317;
      swift_bridgeObjectRelease();
      v388 = sub_100016940(v323, v325, (uint64_t *)&v391);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v388, &v389, v385, v315 + 12);
      swift_release_n(v326, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v313, v314, "TRACE: returning resultMap: %s", v315, 0xCu);
      v327 = (uint64_t)v386;
      swift_arrayDestroy(v386, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v327, -1, -1);
      swift_slowDealloc(v315, -1, -1);

      v356((unint64_t *)v349, v367);
      v328 = v360;
      v329 = v359;
      v330 = v357;
    }
    else
    {

      v356((unint64_t *)v311, v278);
      v328 = v360;
      v329 = v359;
      v330 = v357;
      v326 = v339;
      v316 = v387;
    }
    swift_beginAccess(v316, &v391, 0, 0);
    swift_bridgeObjectRetain(*((_QWORD *)v326 + 2));
    sub_100656EB8(v331, v329, v328);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v276((uint64_t)v362, v330);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v382 = (char *)v276;
  v283 = v387;
  swift_beginAccess(v387, &v392, 0, 0);
  v284 = *v283;
  v285 = *(_QWORD *)(*v283 + 64);
  v383 = (char *)(*v283 + 64);
  v286 = 1 << *(_BYTE *)(v284 + 32);
  v287 = -1;
  if (v286 < 64)
    v287 = ~(-1 << v286);
  v288 = v287 & v285;
  v385 = (char *)((unint64_t)(v286 + 63) >> 6);
  v381 = (unint64_t *)(v385 - 1);
  v386 = (_QWORD *)v284;
  v289 = swift_bridgeObjectRetain(v284);
  v290 = 0;
  v291 = type metadata accessor for LocationFetcher;
  v292 = v334;
  while (2)
  {
    v293 = (uint64_t)v371;
    if (v288)
    {
      v294 = __clz(__rbit64(v288));
      v288 &= v288 - 1;
      v295 = v294 | (v290 << 6);
      goto LABEL_113;
    }
    v300 = v290 + 1;
    if (__OFADD__(v290, 1))
      goto LABEL_148;
    if (v300 >= (uint64_t)v385)
    {
LABEL_122:
      v302 = sub_10001A9A8(&qword_1010F7808);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v302 - 8) + 56))(v293, 1, 1, v302);
      v288 = 0;
      goto LABEL_123;
    }
    v301 = *(_QWORD *)&v383[8 * v300];
    if (!v301)
    {
      v290 += 2;
      if (v300 + 1 >= (uint64_t)v385)
      {
        v290 = v300;
      }
      else
      {
        v301 = *(_QWORD *)&v383[8 * v290];
        if (v301)
        {
          ++v300;
          goto LABEL_117;
        }
        if (v300 + 2 < (uint64_t)v385)
        {
          v301 = *(_QWORD *)&v383[8 * v300 + 16];
          if (v301)
          {
            v300 += 2;
            goto LABEL_117;
          }
          v310 = v300 + 3;
          if (v300 + 3 >= (uint64_t)v385)
          {
            v290 = v300 + 2;
          }
          else
          {
            v301 = *(_QWORD *)&v383[8 * v310];
            if (v301)
            {
              v300 += 3;
              goto LABEL_117;
            }
            while (1)
            {
              v300 = v310 + 1;
              if (__OFADD__(v310, 1))
                goto LABEL_151;
              if (v300 >= (uint64_t)v385)
                break;
              v301 = *(_QWORD *)&v383[8 * v300];
              ++v310;
              if (v301)
                goto LABEL_117;
            }
            v290 = (uint64_t)v381;
          }
        }
      }
      goto LABEL_122;
    }
LABEL_117:
    v288 = (v301 - 1) & v301;
    v295 = __clz(__rbit64(v301)) + (v300 << 6);
    v290 = v300;
LABEL_113:
    v296 = (uint64_t)v386;
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v26 + 16))(v371, v386[6] + *(_QWORD *)(v26 + 72) * v295, v384, v289);
    v297 = *(_QWORD *)(v296 + 56);
    v298 = sub_10001A9A8(&qword_1010F7808);
    v299 = *(_QWORD *)(v297 + 8 * v295);
    *(_QWORD *)(v293 + *(int *)(v298 + 48)) = v299;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v298 - 8) + 56))(v293, 0, 1, v298);
    swift_bridgeObjectRetain(v299);
LABEL_123:
    v303 = v370;
    sub_100005CF0(v293, v370, &qword_1010FB1F8);
    v304 = sub_10001A9A8(&qword_1010F7808);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v304 - 8) + 48))(v303, 1, v304) == 1)
    {
      swift_release();
      v194 = v384;
      v278 = v367;
      v276 = (void (*)(uint64_t, uint64_t))v382;
      goto LABEL_139;
    }
    v305 = *(_QWORD *)(v303 + *(int *)(v304 + 48));
    sub_10005972C((uint64_t)v374, (uint64_t)v292, v291);
    v306 = v384;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v282, v303, v384);
    v307 = v291;
    v308 = objc_autoreleasePoolPush();
    v309 = v375;
    sub_1003F95EC(v292, v305, (uint64_t *)&v389, v282, v372);
    v375 = v309;
    if (!v309)
    {
      objc_autoreleasePoolPop(v308);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v292, v307);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v282, v306);
      v291 = v307;
      continue;
    }
    break;
  }
  swift_release();
  objc_autoreleasePoolPop(v308);
  __break(1u);
LABEL_153:
  swift_release();
  swift_release();
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v384);
  __break(1u);
  return result;
}

uint64_t sub_100425148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = type metadata accessor for LocationFetcher(0);
  v2 = *(_QWORD *)(v1 - 8);
  v26 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v26 + 24) & ~v26;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  v6 = *((_QWORD *)v5 - 1);
  v25 = *(unsigned __int8 *)(v6 + 80);
  v7 = (v3 + v4 + v25) & ~v25;
  v23 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v22 = *(_QWORD *)(v9 + 64);

  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v3 + 24));
  v11 = v0 + v3 + *(int *)(v1 + 32);
  v12 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v24 = v7;
  v13 = v0 + v7;
  sub_10001BC14(*(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8));
  v14 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v14(v0 + v7 + v5[5], v8);
  v14(v0 + v7 + v5[6], v8);
  v15 = v0 + v7 + v5[10];
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v18(v15, v16);
  v19 = v13 + v5[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v19, 1, v16))
    v18(v19, v16);
  v20 = (v24 + v23 + v10) & ~v10;
  swift_bridgeObjectRelease();
  v14(v0 + v20, v8);
  return swift_deallocObject(v0, v22 + v20 + 1, v26 | v25 | v10 | 7);
}

void sub_10042534C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = *(_QWORD *)(type metadata accessor for LocationFetcher(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for BeaconEstimatedLocation(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  sub_100410D58(a1, *(NSObject **)(v1 + 16), v1 + v4, (v1 + v7), v1 + v10, *(unsigned __int8 *)(v1 + v10 + *(_QWORD *)(v9 + 64)));
}

uint64_t sub_1004253F0(uint64_t a1)
{
  uint64_t v1;

  return sub_1004102E4(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_10042540C(uint64_t a1)
{
  uint64_t v1;

  return sub_100820F54(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(unsigned __int8 *)(v1 + 49), *(unsigned __int8 *)(v1 + 50) | (*(unsigned __int8 *)(v1 + 51) << 8));
}

uint64_t sub_100425444()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = type metadata accessor for LocationFetcher(0);
  v2 = *(_QWORD *)(v1 - 8);
  v37 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v37 + 16) & ~v37;
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = v4;
  v30 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v5 = *(_QWORD *)(v30 - 8);
  v36 = *(unsigned __int8 *)(v5 + 80);
  v34 = v5;
  v27 = (v4 + v36 + 16) & ~v36;
  v6 = (*(_QWORD *)(v5 + 64) + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v35 = *(unsigned __int8 *)(v8 + 80);
  v9 = (v35 + v6 + 8) & ~v35;
  v10 = *(_QWORD *)(v8 + 64);
  v11 = (int *)type metadata accessor for RawSearchResult(0);
  v12 = *((_QWORD *)v11 - 1);
  v33 = *(unsigned __int8 *)(v12 + 80);
  v13 = (v9 + v10 + v33) & ~v33;
  v31 = *(_QWORD *)(v12 + 64);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v29 = *(unsigned __int8 *)(v15 + 80);
  v28 = *(_QWORD *)(v15 + 64);
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v3 + 24));
  v16 = v0 + v3 + *(int *)(v1 + 32);
  v17 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v18 = *(_QWORD *)(v0 + v26 + 8);
  if ((~v18 & 0x3000000000000000) != 0)
    sub_10012C494(*(_QWORD *)(v0 + v26), v18);
  v19 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v19(v0 + v27, v7);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v27 + *(int *)(v30 + 20)));
  swift_release();
  v19(v0 + v9, v7);
  v32 = v13;
  v20 = v0 + v13;
  v21 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v21(v20 + v11[5], v14);
  v22 = v20 + v11[10];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v22, 1, v14))
    v21(v22, v14);
  v23 = v20 + v11[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v23, 1, v30))
  {
    v19(v23, v7);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v23 + *(int *)(v30 + 20)));
  }
  v24 = (v32 + v31 + v29) & ~v29;
  v19(v20 + v11[12], v7);
  v21(v0 + v24, v14);
  return swift_deallocObject(v0, v24 + v28, v37 | v36 | v35 | v33 | v29 | 7);
}

uint64_t sub_100425738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v2 = *(_QWORD *)(type metadata accessor for LocationFetcher(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) - 8);
  v6 = (v4 + *(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + v7 + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(_QWORD *)(type metadata accessor for RawSearchResult(0) - 8);
  v12 = (v9 + v10 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 64);
  v14 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  v15 = (v12 + v13 + v14) & ~v14;
  v16 = v0 + v3;
  v17 = v0 + v4;
  v18 = *(_QWORD *)(v0 + v4);
  v19 = *(_QWORD *)(v17 + 8);
  v20 = *(_QWORD *)(v0 + v7);
  v21 = v0 + v6;
  v22 = v0 + v9;
  v23 = v0 + v12;
  v24 = v0 + v15;
  v25 = (_QWORD *)swift_task_alloc(dword_1010FB1B4);
  *(_QWORD *)(v1 + 16) = v25;
  *v25 = v1;
  v25[1] = sub_100004A74;
  return sub_100413FA8(v16, v18, v19, v21, v20, v22, v23, v24);
}

uint64_t sub_100425884(uint64_t a1, uint64_t a2)
{
  if ((~a2 & 0x3000000000000000) != 0)
    return sub_10012C644(a1, a2);
  return a1;
}

uint64_t sub_100425898(uint64_t a1, uint64_t a2)
{
  if ((~a2 & 0x3000000000000000) != 0)
    return sub_10012C494(a1, a2);
  return a1;
}

uint64_t sub_1004258B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LocationFetcher(0) - 8) + 80);
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = (uint64_t)v0 + ((v2 + 40) & ~v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1010FB1DC);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100004A74;
  return sub_1003F9E30(v3, v4, v5, v6);
}

uint64_t sub_100425938@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = type metadata accessor for LocationFetcher(0);
  result = sub_1003F5130(*(_QWORD *)(v1
                                   + ((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64)
                                     + ((*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80))
                                     + 7) & 0xFFFFFFFFFFFFF8)));
  *a1 = result;
  return result;
}

uint64_t sub_100425990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = type metadata accessor for LocationFetcher(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v4 + 24));
  v12 = v0 + v4 + *(int *)(v1 + 32);
  v13 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

void sub_100425AAC(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for LocationFetcher(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  sub_1003FCCD8(v1 + v4, v1 + ((v4 + v5 + v6) & ~v6), a1);
}

uint64_t sub_100425B14(uint64_t a1)
{
  uint64_t v1;

  return sub_10081216C(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_100425B30(uint64_t a1)
{
  uint64_t v1;

  return sub_100656EB8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100425B38()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

BOOL sub_100425B64(uint64_t a1)
{
  uint64_t v1;

  return sub_1003F59F8(a1, *(char **)(v1 + 16));
}

uint64_t sub_100425B84(NSObject *a1)
{
  uint64_t v1;

  return sub_1003F7998(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100425BA0(uint64_t a1)
{
  uint64_t v1;

  return sub_1003F8440(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

uint64_t sub_100425BC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(type metadata accessor for LocationFetcher(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v8 = (_QWORD *)swift_task_alloc(dword_1010FB20C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004A74;
  return sub_1003F85D0(a1, v6, v7);
}

uint64_t sub_100425C54()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LocationFetcher(0) - 8) + 80);
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = (uint64_t)v0 + ((v2 + 40) & ~v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1010FB164);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100004A74;
  return sub_1003FD088(v3, v4, v5, v6);
}

void sub_100425CD4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100400C90(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_100425CEC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1004072D0(a1, *(_QWORD **)(v2 + 24), a2);
}

unint64_t sub_100425D04()
{
  unint64_t result;

  result = qword_1010FB258;
  if (!qword_1010FB258)
  {
    result = swift_getWitnessTable(byte_100E3D288, &type metadata for LocationFetcher.LocationFetcherError);
    atomic_store(result, &qword_1010FB258);
  }
  return result;
}

uint64_t sub_100425D4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = (_QWORD *)swift_task_alloc(dword_1010FB264);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100004A74;
  v6[15] = a1;
  v6[16] = v5;
  return swift_task_switch(sub_100403B90, 0, 0);
}

uint64_t sub_100425DC8(uint64_t a1)
{
  uint64_t v1;

  return sub_1003F6988(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t **)(v1 + 32), *(uint64_t **)(v1 + 40)) & 1;
}

uint64_t sub_100425DE8()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100425E0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for LocationFetcher(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v7 + 24));
  v8 = v7 + *(int *)(v1 + 32);
  v9 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_100425F0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for LocationFetcher(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10040000C(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(NSObject **)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100425F68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for LocationFetcher(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v4 + 24));
  v7 = v0 + v4 + *(int *)(v1 + 32);
  v8 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_100426070(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for LocationFetcher(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100400248(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + v5), *(NSObject **)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1004260D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for LocationFetcher(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = ((((v4 + *(_QWORD *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v4 + 24));
  v7 = v0 + v4 + *(int *)(v1 + 32);
  v8 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1004261E0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for LocationFetcher(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[4];
  v10 = *((_BYTE *)v1 + v6);
  v11 = (uint64_t)v1 + v5;
  v12 = *(_QWORD *)((char *)v1 + (v6 & 0xFFFFFFFFFFFFFFF8) + 8);
  v13 = *(_QWORD *)((char *)v1 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8));
  v14 = (_QWORD *)swift_task_alloc(dword_1010FB2A4);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_100004A74;
  return sub_100413028(a1, v7, v8, v9, v11, v10, v12, v13);
}

uint64_t sub_1004262AC()
{
  return sub_1004263E4((void (*)(_QWORD))&_swift_errorRelease, 32);
}

uint64_t sub_1004262BC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = Future.finish(error:)(*(_QWORD *)(v1 + 24));
  *a1 = result & 1;
  return result;
}

unint64_t sub_1004262EC()
{
  unint64_t result;

  result = qword_1010FB2B0;
  if (!qword_1010FB2B0)
  {
    result = swift_getWitnessTable(byte_100E5C2F4, &type metadata for FetchRequest);
    atomic_store(result, (unint64_t *)&qword_1010FB2B0);
  }
  return result;
}

unint64_t sub_100426330()
{
  unint64_t result;

  result = qword_1010FB2B8;
  if (!qword_1010FB2B8)
  {
    result = swift_getWitnessTable(byte_100E538A8, &type metadata for FetchResponse);
    atomic_store(result, (unint64_t *)&qword_1010FB2B8);
  }
  return result;
}

uint64_t sub_100426374()
{
  return sub_1004263E4((void (*)(_QWORD))&_swift_bridgeObjectRelease, 33);
}

uint64_t sub_100426384@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_100413F4C(*(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_100426390()
{
  unint64_t result;

  result = qword_1010FB2C0;
  if (!qword_1010FB2C0)
  {
    result = swift_getWitnessTable("!j$", &type metadata for OwnedDeviceFetchResponse);
    atomic_store(result, (unint64_t *)&qword_1010FB2C0);
  }
  return result;
}

uint64_t sub_1004263D4()
{
  return sub_1004263E4((void (*)(_QWORD))&_swift_bridgeObjectRelease, 32);
}

uint64_t sub_1004263E4(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  swift_release(*(_QWORD *)(v2 + 16));
  a1(*(_QWORD *)(v2 + 24));
  return swift_deallocObject(v2, a2, 7);
}

uint64_t sub_100426428@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_100413F4C(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100426430(uint64_t a1)
{
  uint64_t v1;

  return sub_10084F4E8(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_10042644C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 21, 7);
}

BOOL sub_10042645C(_BYTE *a1)
{
  _BYTE *v1;
  int v2;
  int v3;
  int v4;

  if (v1[20])
    v2 = 0x1000000;
  else
    v2 = 0;
  if (v1[19])
    v3 = 0x10000;
  else
    v3 = 0;
  if (v1[18])
    v4 = 256;
  else
    v4 = 0;
  return sub_100407FD4(a1, v1[16], v4 | v1[17] | v3 | v2);
}

uint64_t sub_1004264A8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

BOOL sub_100426740(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  return sub_1004176BC(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_10042677C(unint64_t *a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_10041779C(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_100426798()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004267BC(uint64_t a1)
{
  uint64_t v1;

  return sub_100319EE0(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1004267C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for LocationFetcher(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (((((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v4 + 24));
  v7 = v0 + v4 + *(int *)(v1 + 32);
  v8 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1004268F0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = *(_QWORD *)(type metadata accessor for LocationFetcher(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1003F1DDC(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), v3 + v8, *(_QWORD *)(v3 + v9), *(_QWORD *)(v3 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v3 + ((((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100426984(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1003F60CC(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(uint64_t **)(v2 + 48), *(_QWORD *)(v2 + 56), *(void (**)(char *, uint64_t, uint64_t))(v2 + 64), *(_QWORD *)(v2 + 72));
}

uint64_t sub_1004269B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for LocationFetcher(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v7 = v0 + v4;
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v7 + 24));
  v8 = v7 + *(int *)(v1 + 32);
  v9 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100426AAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for LocationFetcher(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v4 + 24));
  v7 = v0 + v4 + *(int *)(v1 + 32);
  v8 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t storeEnumTagSinglePayload for LocationFetcher.LocationFetcherError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100426BDC + 4 * byte_100E3D1A2[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100426C10 + 4 * byte_100E3D19D[v4]))();
}

uint64_t sub_100426C10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100426C18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100426C20);
  return result;
}

uint64_t sub_100426C2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100426C34);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100426C38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100426C40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationFetcher.LocationFetcherError()
{
  return &type metadata for LocationFetcher.LocationFetcherError;
}

uint64_t sub_100426C5C(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t *, uint64_t);
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    v9 = (void *)a2[2];
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    v10 = a1 + 24;
    v11 = a2 + 3;
    v12 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 48) = v12;
    v13 = v12;
    v14 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v12 - 8);
    swift_retain(v4);
    swift_retain(v8);
    v15 = v9;
    v14(v10, v11, v13);
    v16 = a3[8];
    v17 = v7 + v16;
    v18 = (uint64_t)a2 + v16;
    v19 = type metadata accessor for Logger(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[9];
    v21 = a3[10];
    v22 = *(uint64_t *)((char *)a2 + v20);
    *(_QWORD *)(v7 + v20) = v22;
    v23 = *(uint64_t *)((char *)a2 + v21);
    *(_QWORD *)(v7 + v21) = v23;
    v24 = a3[11];
    v25 = a3[12];
    v26 = *(uint64_t *)((char *)a2 + v24);
    *(_QWORD *)(v7 + v24) = v26;
    v4 = *(uint64_t *)((char *)a2 + v25);
    *(_QWORD *)(v7 + v25) = v4;
    swift_bridgeObjectRetain(v22);
    swift_retain(v23);
    swift_retain(v26);
  }
  swift_retain(v4);
  return v7;
}

uint64_t sub_100426D84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100426E1C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  __int128 v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t *, uint64_t);
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = (void *)a2[2];
  *(_QWORD *)(a1 + 16) = v8;
  v9 = a2 + 3;
  v10 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 48) = v10;
  v11 = v10;
  v12 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v10 - 8);
  swift_retain(v6);
  swift_retain(v7);
  v13 = v8;
  v12(a1 + 24, v9, v11);
  v14 = a3[8];
  v15 = a1 + v14;
  v16 = (uint64_t)a2 + v14;
  v17 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  v18 = a3[9];
  v19 = a3[10];
  v20 = *(uint64_t *)((char *)a2 + v18);
  *(_QWORD *)(a1 + v18) = v20;
  v21 = *(uint64_t *)((char *)a2 + v19);
  *(_QWORD *)(a1 + v19) = v21;
  v22 = a3[11];
  v23 = a3[12];
  v24 = *(uint64_t *)((char *)a2 + v22);
  *(_QWORD *)(a1 + v22) = v24;
  v25 = *(uint64_t *)((char *)a2 + v23);
  *(_QWORD *)(a1 + v23) = v25;
  swift_bridgeObjectRetain(v20);
  swift_retain(v21);
  swift_retain(v24);
  swift_retain(v25);
  return a1;
}

_QWORD *sub_100426F20(_QWORD *a1, _QWORD *a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  v6 = (void *)a2[2];
  v7 = (void *)a1[2];
  a1[2] = v6;
  v8 = v6;

  sub_1001BA974(a1 + 3, a2 + 3);
  v9 = a3[8];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Logger(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = a3[9];
  v14 = *(_QWORD *)((char *)a2 + v13);
  *(_QWORD *)((char *)a1 + v13) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  swift_retain();
  swift_release();
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  swift_retain();
  swift_release();
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100427044(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v6 = a3[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  v11 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  return a1;
}

uint64_t sub_1004270F8(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  v6 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_release();
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_release();
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_release();
  return a1;
}

uint64_t sub_1004271FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100427208);
}

uint64_t sub_100427208(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Logger(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 32)], a2, v8);
  }
}

uint64_t sub_100427284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100427290);
}

char *sub_100427290(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Logger(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 32)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100427304(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = "(";
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 9, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_1004273AC()
{
  unint64_t result;

  result = qword_1010FB4A8;
  if (!qword_1010FB4A8)
  {
    result = swift_getWitnessTable(asc_100E3D260, &type metadata for LocationFetcher.LocationFetcherError);
    atomic_store(result, (unint64_t *)&qword_1010FB4A8);
  }
  return result;
}

uint64_t sub_1004273F0(uint64_t a1)
{
  return sub_100425B14(a1) & 1;
}

BOOL sub_100427408(uint64_t a1)
{
  return sub_100425B64(a1);
}

uint64_t sub_100427440(NSObject *a1)
{
  return sub_100425B84(a1);
}

uint64_t sub_100427454(uint64_t a1)
{
  return sub_100425BA0(a1);
}

_QWORD *sub_100427468(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;

  v3 = sub_10001A9A8(&qword_1010FB7F0);
  v22 = *(_QWORD *)(v3 - 8);
  v23 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v21[1] = v1;
    v26 = _swiftEmptyArrayStorage;
    sub_10009B134(0, v6, 0);
    v7 = v26;
    v8 = (uint64_t *)(a1 + 40);
    do
    {
      v24 = *((unsigned __int8 *)v8 - 8);
      v9 = *v8;
      v10 = sub_10001A9A8(&qword_1010FB8F0);
      swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
      swift_retain_n(v9, 2);
      v25 = Future.init(_:)(sub_100433C08, v9, v11);
      v12 = sub_1000193A4(&qword_1010FB8F8, &qword_1010FB8F0, (const char *)&protocol conformance descriptor for Future<A, B>);
      v13 = Publisher.eraseToAnyPublisher()(v10, v12);
      swift_release();
      v25 = v13;
      v14 = swift_allocObject(&unk_101075F48, 32, 7);
      *(_BYTE *)(v14 + 16) = v24;
      *(_QWORD *)(v14 + 24) = v9;
      swift_retain();
      v15 = sub_10001A9A8((uint64_t *)&unk_1010FB900);
      v16 = sub_10001A9A8(&qword_101109170);
      v17 = sub_1000193A4(&qword_1010FB910, (uint64_t *)&unk_1010FB900, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
      Publisher.map<A>(_:)(sub_100433C34, v14, v15, v16, v17);
      swift_release();
      swift_release();
      swift_release();
      v26 = v7;
      v19 = v7[2];
      v18 = v7[3];
      if (v19 >= v18 >> 1)
      {
        sub_10009B134(v18 > 1, v19 + 1, 1);
        v7 = v26;
      }
      v7[2] = v19 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(_QWORD *)(v22 + 72) * v19, v5, v23);
      v8 += 2;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_1004276D0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010FAAF0);
  v3 = swift_allocObject(v2, 20, 7);
  *(_DWORD *)(v3 + 16) = 0;
  v0[6] = v3;
  v0[7] = _swiftEmptyDictionarySingleton;
  v0[8] = &_swiftEmptySetSingleton;
  v4 = type metadata accessor for DeviceIdentityUtility(0);
  v0[10] = 0;
  v0[11] = 0;
  v0[9] = 0;
  v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  swift_retain();
  swift_defaultActor_initialize(v5);
  v6 = v5 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v5 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 3;
  v1[12] = v5;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010FB790);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v1[13] = PassthroughSubject.init()();
  *((_BYTE *)v1 + 112) = 0;
  v9 = (char *)v1 + qword_1010FB4B0;
  v10 = type metadata accessor for MACAddress(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B7B28);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "AccessoryDiscoverySession.init()", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = sub_10001A9A8((uint64_t *)&unk_1011106F0);
  unsafeFromAsyncTask<A>(_:)(&v25, &unk_101121848, 0, v16);
  v17 = v25;
  if (v25)
  {
    v1[5] = v25;
    v18 = v17;
    v19 = swift_release();
    v20 = sub_100B1AC90(v19);

    return v20;
  }
  else
  {
    v22 = sub_100059390();
    v23 = swift_allocError(&type metadata for CentralManager.Error, v22, 0, 0);
    *(_QWORD *)v24 = 15;
    *(_OWORD *)(v24 + 8) = 0u;
    *(_OWORD *)(v24 + 24) = 0u;
    *(_BYTE *)(v24 + 40) = 11;
    swift_willThrow(v23);
    swift_errorRelease(v23);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000032, 0x8000000100ED6370, "searchpartyd/AccessoryDiscoverySession.swift", 44, 2, 39, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1004279B4()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return sub_100004048(v0 + qword_1010FB4B0, (uint64_t *)&unk_1010F9890);
}

id *sub_100427A24()
{
  id *v0;
  id *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  v1 = v0;
  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7B28);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "AccessoryDiscoverySession.deinit", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100004048((uint64_t)v1 + qword_1010FB4B0, (uint64_t *)&unk_1010F9890);
  return v1;
}

uint64_t sub_100427B70()
{
  uint64_t v0;

  sub_100427A24();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for AccessoryDiscoverySession(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FB4E0;
  if (!qword_1010FB4E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryDiscoverySession);
  return result;
}

void sub_100427BD0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[11];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[4] = "\b";
  v4[5] = "\b";
  v4[6] = "\b";
  v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[9] = &unk_100E3D390;
  sub_100375A00(319);
  if (v3 <= 0x3F)
  {
    v4[10] = *(_QWORD *)(v2 - 8) + 64;
    swift_initClassMetadata2(a1, 256, 11, v4, a1 + 216);
  }
}

uint64_t sub_100427C84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t result;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _OWORD v12[2];
  uint64_t v13;
  char v14;

  v1 = v0;
  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7B28);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Stop scanning", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  sub_100E07630();
  v7 = *(_QWORD *)(v1 + 48);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100434298, v1, v7, &type metadata for () + 1, &type metadata for () + 1);
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  v14 = -1;
  swift_retain();
  PassthroughSubject.send(completion:)(v12);
  swift_release();
  sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010FBAF0);
  result = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1004342D0, v1, v7, &type metadata for () + 1, &type metadata for Bool);
  if (LOBYTE(v12[0]) == 1)
  {
    v9 = Logger.logObject.getter(result);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Found pending scanning request. Starting discovery session...", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    return sub_1004282DC();
  }
  return result;
}

uint64_t sub_100427E88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v2 = v1;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010FB790);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = PassthroughSubject.init()();
  *(_QWORD *)(v1 + 104) = v5;
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(v1 + 48);
  v16 = v1;
  v17 = a1;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100434274, &v15, v6, &type metadata for () + 1, &type metadata for Bool);
  if (v19 == 1)
  {
    sub_1004282DC();
  }
  else
  {
    if (qword_1010EA120 != -1)
      swift_once(&qword_1010EA120, sub_100A34180);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B7B28);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Existing discovery session in progress!", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10043428C, v2, v6, &type metadata for () + 1, &type metadata for () + 1);
  }
  v18 = v5;
  v12 = sub_1000193A4(&qword_1010FBAE8, (uint64_t *)&unk_1010FB790, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v13 = Publisher.eraseToAnyPublisher()(v4, v12);
  swift_release();
  return v13;
}

uint64_t sub_100428064@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _BYTE v17[24];

  v6 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v7 = __chkstk_darwin(v6);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v7);
  v11 = &v17[-v10 - 8];
  v12 = type metadata accessor for MACAddress(0);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v11, a2, v12);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  sub_1004340EC((uint64_t)v11, (uint64_t)v9);
  v14 = a1 + qword_1010FB4B0;
  swift_beginAccess(a1 + qword_1010FB4B0, v17, 33, 0);
  sub_1000354E8((uint64_t)v9, v14);
  result = swift_endAccess(v17);
  *a3 = *(_QWORD *)(a1 + 80) == 0;
  return result;
}

_QWORD *sub_100428190(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _BYTE v13[24];

  if (*result == 4)
  {
    v2 = a2 + 16;
    swift_beginAccess(a2 + 16, v13, 0, 0);
    result = (_QWORD *)swift_weakLoadStrong(v2);
    if (result)
    {
      v3 = result;
      type metadata accessor for SPAccessoryDiscoverySessionError(0);
      v5 = v4;
      v11 = 1;
      v6 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v7 = sub_100006204(&qword_1010EB1C8, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E20B38);
      _BridgedStoredNSError.init(_:userInfo:)(&v12, &v11, v6, v5, v7);
      v8 = v12;
      v9 = sub_10001A9A8((uint64_t *)&unk_1010FB770);
      v10 = OS_dispatch_queue.sync<A>(execute:)(sub_100433278, v3, v9);
      __chkstk_darwin(v10);
      os_activity(name:block:)("SPAccessoryDiscoverySessionError", 32, 2, sub_1004332C4);

      swift_release();
      return (_QWORD *)swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1004282DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  int v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95[3];

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010FB918);
  v79 = *(_QWORD *)(v2 - 8);
  v80 = v2;
  __chkstk_darwin(v2);
  v78 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010FB920);
  v82 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v81 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010FBAA8);
  v85 = *(_QWORD *)(v6 - 8);
  v86 = v6;
  __chkstk_darwin(v6);
  v83 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010FBAB0);
  v90 = *(_QWORD *)(v8 - 8);
  v91 = v8;
  __chkstk_darwin(v8);
  v88 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010FBAB8);
  v92 = *(_QWORD *)(v10 - 8);
  v93 = v10;
  __chkstk_darwin(v10);
  v89 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v76 = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(v76 + 64);
  v14 = __chkstk_darwin(v12);
  v77 = (uint64_t)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v72 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v72 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v72 - v21;
  v87 = *(_QWORD *)(v0 + 48);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100434020, v0, v87, &type metadata for () + 1, v23);
  v84 = 0;
  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v24 = type metadata accessor for Logger(0);
  sub_10001A9E8(v24, (uint64_t)qword_1011B7B28);
  v25 = sub_10000F9B8((uint64_t)v22, (uint64_t)v20, (uint64_t *)&unk_1010F9890);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter(v26);
  if (os_log_type_enabled(v26, (os_log_type_t)v27))
  {
    v73 = v27;
    v74 = v4;
    v75 = v22;
    v28 = swift_slowAlloc(32, -1);
    v72 = swift_slowAlloc(64, -1);
    v95[0] = v72;
    *(_DWORD *)v28 = 136315651;
    v29 = Array.description.getter(&off_101048F50, &type metadata for BAServiceIdentifier);
    v94 = sub_100016940(v29, v30, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2160;
    v94 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v28 + 14, v28 + 22);
    *(_WORD *)(v28 + 22) = 2081;
    sub_10000F9B8((uint64_t)v20, (uint64_t)v17, (uint64_t *)&unk_1010F9890);
    v31 = type metadata accessor for MACAddress(0);
    v32 = *(_QWORD *)(v31 - 8);
    v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v17, 1, v31);
    if ((_DWORD)v33 == 1)
    {
      sub_100004048((uint64_t)v17, (uint64_t *)&unk_1010F9890);
      v34 = 0;
      v35 = 0xE000000000000000;
    }
    else
    {
      v34 = MACAddress.description.getter(v33);
      v35 = v36;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v31);
    }
    v4 = v74;
    v94 = sub_100016940(v34, v35, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v28 + 24, v28 + 32);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v20, (uint64_t *)&unk_1010F9890);
    _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v73, "Call centralManager.startScanning for %s macAddress: %{private,mask.hash}s", (uint8_t *)v28, 0x20u);
    v37 = v72;
    swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v28, -1, -1);

    v22 = v75;
  }
  else
  {
    sub_100004048((uint64_t)v20, (uint64_t *)&unk_1010F9890);

  }
  v38 = sub_1007ED84C((uint64_t)&off_101048F50);
  v39 = sub_100E06F88((uint64_t)v38);
  v75 = (char *)v39;
  swift_bridgeObjectRelease();
  v95[0] = v39;
  v40 = sub_10001A9A8(&qword_1010FB938);
  v41 = type metadata accessor for Peripheral(0);
  v74 = v41;
  v42 = sub_1000193A4(&qword_1010FB940, &qword_1010FB938, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v43 = v78;
  Publisher.compactMap<A>(_:)(sub_100428C78, 0, v40, v41, v42);
  v44 = sub_1000193A4(&qword_1010FB948, &qword_1010FB918, (const char *)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v45 = v80;
  v46 = v81;
  Publisher.filter(_:)(sub_100428CAC, 0, v80, v44);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v43, v45);
  v47 = v77;
  sub_10000F9B8((uint64_t)v22, v77, (uint64_t *)&unk_1010F9890);
  v48 = *(unsigned __int8 *)(v76 + 80);
  v49 = (v48 + 16) & ~v48;
  v50 = (v13 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
  v51 = swift_allocObject(&unk_101076100, v50 + 8, v48 | 7);
  sub_1004340EC(v47, v51 + v49);
  *(_QWORD *)(v51 + v50) = v1;
  v52 = sub_1000193A4(&qword_1010FB950, &qword_1010FB920, (const char *)&protocol conformance descriptor for Publishers.Filter<A>);
  swift_retain();
  v53 = v83;
  Publisher.first(where:)(sub_100434134, v51, v4, v52);
  swift_release();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v46, v4);
  v54 = swift_retain();
  v55 = static Subscribers.Demand.unlimited.getter(v54);
  v56 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
  v57 = sub_1000193A4(&qword_1010FBAC0, &qword_1010FBAA8, (const char *)&protocol conformance descriptor for Publishers.FirstWhere<A>);
  v58 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v59 = v88;
  v60 = v86;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v55, sub_100433C98, v1, v86, v56, v57, v58);
  swift_release();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v53, v60);
  v61 = swift_allocObject(&unk_101076128, 24, 7);
  *(_QWORD *)(v61 + 16) = &off_101048F50;
  v62 = static Subscribers.Demand.unlimited.getter(v61);
  v63 = sub_1000193A4(&qword_1010FBAC8, &qword_1010FBAB0, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v64 = (uint64_t)v22;
  v65 = v89;
  v66 = v91;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v62, sub_100434188, v61, v91, v74, v56, v63, v58);
  swift_release();
  (*(void (**)(char *, uint64_t))(v90 + 8))(v59, v66);
  v67 = sub_1000193A4((unint64_t *)&unk_1010FBAD0, &qword_1010FBAB8, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v68 = v93;
  v69 = Publisher.eraseToAnyPublisher()(v93, v67);
  v70 = (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v65, v68);
  __chkstk_darwin(v70);
  *(&v72 - 2) = v1;
  *(&v72 - 1) = v69;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1004341A0, &v72 - 4, v87, &type metadata for () + 1, &type metadata for () + 1);
  swift_release();
  sub_100004048(v64, (uint64_t *)&unk_1010F9890);
  return swift_release();
}

uint64_t sub_100428B7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];
  _BYTE v11[24];

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v4);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1 + qword_1010FB4B0;
  swift_beginAccess(a1 + qword_1010FB4B0, v11, 0, 0);
  sub_10000F9B8(v7, a2, (uint64_t *)&unk_1010F9890);
  *(_BYTE *)(a1 + 112) = 0;
  v8 = type metadata accessor for MACAddress(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 1, v8);
  swift_beginAccess(v7, v10, 33, 0);
  sub_1000354E8((uint64_t)v6, v7);
  return swift_endAccess(v10);
}

void **sub_100428C78@<X0>(void **result@<X0>, _QWORD *a2@<X8>)
{
  void *v3;

  v3 = *result;
  if (((unint64_t)*result & 0x8000000000000000) != 0)
    v3 = 0;
  else
    result = v3;
  *a2 = v3;
  return result;
}

uint64_t sub_100428CAC(_QWORD *a1)
{
  return sub_100429FEC(a1, (uint64_t)sub_1004342E0);
}

uint64_t sub_100428CB8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  id v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;

  v46 = a3;
  v5 = type metadata accessor for UUID(0);
  v44 = *(_QWORD *)(v5 - 8);
  v45 = v5;
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v43 - v9;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MACAddress(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v43 - v19;
  v21 = *a1;
  sub_10000F9B8(a2, (uint64_t)v13, (uint64_t *)&unk_1010F9890);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_100004048((uint64_t)v13, (uint64_t *)&unk_1010F9890);
    v22 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v13, v14);
    v47 = v20;
    if (qword_1010EA120 != -1)
      swift_once(&qword_1010EA120, sub_100A34180);
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_1011B7B28);
    sub_1007885B0(0xD000000000000016, 0x8000000100ED6490);
    __chkstk_darwin(v24);
    *(&v43 - 2) = (uint64_t)v47;
    *(&v43 - 1) = v25;
    sub_10001A9A8(&qword_101110700);
    Lock.callAsFunction<A>(_:)(sub_1000FA494);
    v26 = v50;
    if (v50)
    {
      sub_1007885B0(0xD000000000000015, 0x8000000100ED64B0);
      v27 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v21
                                                                  + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier"));
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v27);

      v28 = objc_msgSend(*(id *)&v26[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v28);

      v22 = static UUID.== infix(_:_:)(v10, v8);
      v29 = v45;
      v30 = *(void (**)(char *, uint64_t))(v44 + 8);
      v30(v8, v45);
      v30(v10, v29);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v47, v14);
    }
    else
    {
      v31 = v47;
      v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 16))(v18, v47, v14);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.error.getter(v33);
      if (os_log_type_enabled(v33, v34))
      {
        v35 = swift_slowAlloc(22, -1);
        v50 = (char *)swift_slowAlloc(32, -1);
        v36 = (uint64_t)v50;
        *(_DWORD *)v35 = 141558275;
        v48 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v35 + 4, v35 + 12);
        *(_WORD *)(v35 + 12) = 2081;
        v37 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
        v38 = dispatch thunk of CustomStringConvertible.description.getter(v14, v37);
        v48 = sub_100016940(v38, v39, (uint64_t *)&v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v35 + 14, v35 + 22);
        swift_bridgeObjectRelease();
        v40 = *(void (**)(char *, uint64_t))(v15 + 8);
        v40(v18, v14);
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Missing peripheral for %{private,mask.hash}s", (uint8_t *)v35, 0x16u);
        swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v35, -1, -1);

        v41 = v47;
      }
      else
      {

        v40 = *(void (**)(char *, uint64_t))(v15 + 8);
        v40(v18, v14);
        v41 = v31;
      }
      v40(v41, v14);
      v22 = 0;
    }
  }
  return v22 & 1;
}

uint64_t sub_10042917C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v4 = sub_10001A9A8(&qword_1010FB968);
  v5 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  v48 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010FB970);
  v9 = *(_QWORD *)(v8 - 8);
  v50 = v8;
  v51 = v9;
  __chkstk_darwin(v8);
  v45 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010FB978);
  v12 = *(_QWORD *)(v11 - 8);
  v52 = v11;
  v53 = v12;
  __chkstk_darwin(v11);
  v46 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010FB980);
  v15 = *(_QWORD *)(v14 - 8);
  v54 = v14;
  v55 = v15;
  __chkstk_darwin(v14);
  v49 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_1004339F4(a2);
  v17 = swift_retain();
  v44 = static Subscribers.Demand.unlimited.getter(v17);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
  v19 = sub_10000F4A0(0, &qword_1010FB988, SPDiscoveredAccessory_ptr);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010FB990);
  v21 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v22 = sub_1000193A4(&qword_1010EEE38, (uint64_t *)&unk_1010FB990, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v44, sub_1004341B8, a1, v18, v19, v20, v21, v22);
  swift_release();
  swift_release();
  v23 = swift_retain();
  v24 = static Subscribers.Demand.unlimited.getter(v23);
  v25 = sub_1000193A4(&qword_1010FB9A0, &qword_1010FB968, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v26 = v45;
  v27 = v24;
  v28 = v47;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v27, sub_1004341E4, a1, v47, v19, v20, v25, v22);
  swift_release();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v7, v28);
  v29 = sub_10001A9A8(&qword_1010FB800);
  v30 = sub_1000193A4(&qword_1010FB9A8, &qword_1010FB970, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v31 = v46;
  v32 = v50;
  Publisher.map<A>(_:)(sub_1000E068C, 0, v50, v29, v30);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v26, v32);
  v33 = sub_10001A9A8(&qword_1010FB9B0);
  v34 = sub_1000193A4(&qword_1010FB9B8, &qword_1010FB978, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v35 = sub_1000193A4(&qword_1010FB9C0, &qword_1010FB9B0, (const char *)&protocol conformance descriptor for Just<A>);
  v36 = v49;
  v37 = v52;
  Publisher.catch<A>(_:)(sub_1004295A8, 0, v52, v33, v34, v35);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v37);
  v38 = swift_allocObject(&unk_101075ED0, 24, 7);
  swift_weakInit(v38 + 16, a1);
  v39 = sub_1000193A4((unint64_t *)&unk_1010FB9C8, &qword_1010FB980, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  v40 = v54;
  v41 = Publisher<>.sink(receiveValue:)(sub_10043421C, v38, v54, v39);
  swift_release();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v36, v40);
  *(_QWORD *)(a1 + 80) = v41;
  return swift_release();
}

uint64_t sub_1004295A8(_QWORD *a1)
{
  return sub_10021D8E0(a1, &qword_1010FB800);
}

void sub_1004295B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  NSObject **v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[6];
  NSObject *v24;
  uint64_t v25;
  _QWORD v26[5];
  char v27;

  sub_10000F9B8(a1, (uint64_t)v26, &qword_1010FB800);
  if ((v27 & 1) != 0)
  {
    sub_100059244((uint64_t)v26, (uint64_t)&v24);
    if (qword_1010EA120 != -1)
      swift_once(&qword_1010EA120, sub_100A34180);
    v3 = type metadata accessor for Logger(0);
    sub_10001A9E8(v3, (uint64_t)qword_1011B7B28);
    v4 = sub_100059280(&v24, (uint64_t)v23);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v22 = v8;
      *(_DWORD *)v7 = 136446210;
      sub_100E01294();
      v21 = sub_100016940(v9, v10, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v7 + 4, v7 + 12);
      swift_bridgeObjectRelease();
      sub_1000593D4(v23);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Peripheral discovery error %{public}s", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);

    }
    else
    {

      sub_1000593D4(v23);
    }
    sub_1000593D4(&v24);
  }
  else
  {
    v11 = a2 + 16;
    v12 = (void *)v26[0];
    if (qword_1010EA120 != -1)
      swift_once(&qword_1010EA120, sub_100A34180);
    v13 = type metadata accessor for Logger(0);
    sub_10001A9E8(v13, (uint64_t)qword_1011B7B28);
    v14 = v12;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v17 = 138543362;
      v24 = v14;
      v19 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v17 + 4, v17 + 12);
      *v18 = v14;

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Discovered %{public}@", v17, 0xCu);
      v20 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v18, 1, v20);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {

      v15 = v14;
    }

    swift_beginAccess(v11, &v24, 0, 0);
    if (swift_weakLoadStrong(v11))
    {
      swift_retain();
      swift_release();
      v23[0] = v14;
      PassthroughSubject.send(_:)(v23);

      swift_release();
    }
    else
    {

    }
  }
}

uint64_t sub_10042992C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69[3];

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010FB918);
  v61 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010FB920);
  v62 = *(_QWORD *)(v5 - 8);
  v63 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010FB928);
  v66 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v64 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010FB930);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v65 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v1 + 48);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100433C74, v1, v13, &type metadata for () + 1, &type metadata for Bool);
  if (LOBYTE(v69[0]) == 1)
  {
    v67 = v2;
    v60 = v13;
    if (qword_1010EA120 != -1)
      swift_once(&qword_1010EA120, sub_100A34180);
    v56 = v8;
    v57 = v11;
    v58 = v10;
    v59 = 0;
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B7B28);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v69[0] = v19;
      *(_DWORD *)v18 = 136315138;
      v20 = Array.description.getter(&off_10104A6B8, &type metadata for BAServiceIdentifier);
      v68 = sub_100016940(v20, v21, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Call centralManager.startScanning for %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }

    v22 = sub_1007ED84C((uint64_t)&off_10104A6B8);
    v23 = sub_100E06F88((uint64_t)v22);
    v55 = v23;
    swift_bridgeObjectRelease();
    v69[0] = v23;
    v24 = sub_10001A9A8(&qword_1010FB938);
    v54 = v24;
    v25 = type metadata accessor for Peripheral(0);
    v52 = v25;
    v53 = sub_1000193A4(&qword_1010FB940, &qword_1010FB938, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.compactMap<A>(_:)(sub_1004342F4, 0, v24, v25, v53);
    v26 = sub_1000193A4(&qword_1010FB948, &qword_1010FB918, (const char *)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
    v27 = v67;
    Publisher.filter(_:)(sub_100429FE0, 0, v67, v26);
    v61 = *(_QWORD *)(v61 + 8);
    ((void (*)(char *, uint64_t))v61)(v4, v27);
    v28 = swift_retain();
    v29 = static Subscribers.Demand.unlimited.getter(v28);
    v30 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
    v31 = sub_1000193A4(&qword_1010FB950, &qword_1010FB920, (const char *)&protocol conformance descriptor for Publishers.Filter<A>);
    v32 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v33 = v63;
    v34 = v64;
    Publisher<>.flatMap<A>(maxPublishers:_:)(v29, sub_100433C98, v1, v63, v30, v31, v32);
    swift_release();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v7, v33);
    v35 = swift_allocObject(&unk_101075F70, 24, 7);
    *(_QWORD *)(v35 + 16) = &off_10104A6B8;
    v36 = static Subscribers.Demand.unlimited.getter(v35);
    v37 = sub_1000193A4(&qword_1010FB958, &qword_1010FB928, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v38 = v65;
    v39 = v56;
    v63 = v1;
    v40 = v4;
    v41 = v52;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v36, sub_1004342DC, v35, v56, v52, v30, v37, v32);
    swift_release();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v34, v39);
    v42 = sub_1000193A4(&qword_1010FB960, &qword_1010FB930, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v43 = v58;
    v44 = Publisher.eraseToAnyPublisher()(v58, v42);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v38, v43);
    v69[0] = v55;
    v45 = Publisher.compactMap<A>(_:)(sub_10042A0B4, 0, v54, v41, v53);
    __chkstk_darwin(v45);
    *(&v52 - 4) = v63;
    *(&v52 - 3) = v44;
    *(&v52 - 2) = (uint64_t)v40;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100433CD4, &v52 - 6, v60, &type metadata for () + 1, &type metadata for () + 1);
    swift_release();
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v61)(v40, v67);
  }
  else
  {
    if (qword_1010EA120 != -1)
      swift_once(&qword_1010EA120, sub_100A34180);
    v47 = type metadata accessor for Logger(0);
    v48 = sub_10001A9E8(v47, (uint64_t)qword_1011B7B28);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.error.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Scanning in progress. Will try again once existing session stops scanning.", v51, 2u);
      swift_slowDealloc(v51, -1, -1);
    }

    return OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100434310, v1, v13, &type metadata for () + 1, &type metadata for () + 1);
  }
}

uint64_t sub_100429FE0(_QWORD *a1)
{
  return sub_100429FEC(a1, (uint64_t)sub_100434008);
}

uint64_t sub_100429FEC(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];
  char v7;

  v3 = *(_QWORD *)(*a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lock);
  v6[2] = *a1;
  v4 = sub_10001A9A8(&qword_1010FBAA0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(a2, v6, v3, &type metadata for () + 1, v4);
  return v7 & 1;
}

uint64_t sub_10042A06C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v3 = sub_1007ED84C(a1);
  v4 = sub_10078921C((uint64_t)v3);
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t *sub_10042A0B4@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *result;
  if (*result < 0)
  {
    v4 = v3 & 0x7FFFFFFFFFFFFFFFLL;
    result = (uint64_t *)(id)(v3 & 0x7FFFFFFFFFFFFFFFLL);
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return result;
}

uint64_t sub_10042A0EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v59 = a3;
  v5 = sub_10001A9A8(&qword_1010FB968);
  v6 = *(_QWORD *)(v5 - 8);
  v50 = v5;
  v51 = v6;
  __chkstk_darwin(v5);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010FB970);
  v10 = *(_QWORD *)(v9 - 8);
  v53 = v9;
  v54 = v10;
  __chkstk_darwin(v9);
  v48 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010FB978);
  v13 = *(_QWORD *)(v12 - 8);
  v55 = v12;
  v56 = v13;
  __chkstk_darwin(v12);
  v49 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010FB980);
  v16 = *(_QWORD *)(v15 - 8);
  v57 = v15;
  v58 = v16;
  __chkstk_darwin(v15);
  v52 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_1004339F4(a2);
  v18 = swift_retain();
  v47 = static Subscribers.Demand.unlimited.getter(v18);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
  v20 = sub_10000F4A0(0, &qword_1010FB988, SPDiscoveredAccessory_ptr);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010FB990);
  v22 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v23 = sub_1000193A4(&qword_1010EEE38, (uint64_t *)&unk_1010FB990, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v47, sub_100433CF0, a1, v19, v20, v21, v22, v23);
  swift_release();
  swift_release();
  v24 = swift_retain();
  v25 = static Subscribers.Demand.unlimited.getter(v24);
  v26 = sub_1000193A4(&qword_1010FB9A0, &qword_1010FB968, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v27 = v48;
  v28 = v50;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v25, sub_100433D1C, a1, v50, v20, v21, v26, v23);
  swift_release();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v8, v28);
  v29 = sub_10001A9A8(&qword_1010FB800);
  v30 = sub_1000193A4(&qword_1010FB9A8, &qword_1010FB970, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v31 = v49;
  v32 = v53;
  Publisher.map<A>(_:)(sub_100245644, 0, v53, v29, v30);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v27, v32);
  v33 = sub_10001A9A8(&qword_1010FB9B0);
  v34 = sub_1000193A4(&qword_1010FB9B8, &qword_1010FB978, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v35 = sub_1000193A4(&qword_1010FB9C0, &qword_1010FB9B0, (const char *)&protocol conformance descriptor for Just<A>);
  v36 = v52;
  v37 = v55;
  Publisher.catch<A>(_:)(sub_1004295A8, 0, v55, v33, v34, v35);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v31, v37);
  v38 = swift_allocObject(&unk_101075ED0, 24, 7);
  swift_weakInit(v38 + 16, a1);
  v39 = sub_1000193A4((unint64_t *)&unk_1010FB9C8, &qword_1010FB980, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  v40 = v57;
  v41 = Publisher<>.sink(receiveValue:)(sub_100433D54, v38, v57, v39);
  swift_release();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v36, v40);
  *(_QWORD *)(a1 + 80) = v41;
  swift_release();
  v42 = swift_allocObject(&unk_101075ED0, 24, 7);
  swift_weakInit(v42 + 16, a1);
  v43 = sub_10001A9A8(&qword_1010FB918);
  v44 = sub_1000193A4(&qword_1010FB948, &qword_1010FB918, (const char *)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v45 = Publisher<>.sink(receiveValue:)(sub_100433D5C, v42, v43, v44);
  swift_release();
  *(_QWORD *)(a1 + 88) = v45;
  return swift_release();
}

uint64_t sub_10042A59C@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v27 = a6;
  v29 = a7;
  v12 = sub_10001A9A8(&qword_1010FB9D8);
  v28 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v16 = swift_allocObject(a3, 32, 7);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = a2;
  v17 = sub_10001A9A8(&qword_1010FB9E0);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v18 = v15;
  swift_retain();
  v30 = Future.init(_:)(a4, v16, v19);
  v20 = swift_allocObject(a5, 24, 7);
  *(_QWORD *)(v20 + 16) = v18;
  v21 = sub_10000F4A0(0, &qword_1010FB988, SPDiscoveredAccessory_ptr);
  v22 = sub_1000193A4(&qword_1010FB9E8, &qword_1010FB9E0, (const char *)&protocol conformance descriptor for Future<A, B>);
  v23 = v18;
  Publisher.map<A>(_:)(v27, v20, v17, v21, v22);
  swift_release();
  swift_release();
  v24 = sub_1000193A4((unint64_t *)&unk_1010FB9F0, &qword_1010FB9D8, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v25 = Publisher.eraseToAnyPublisher()(v12, v24);
  result = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v14, v12);
  *v29 = v25;
  return result;
}

void sub_10042A768(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  NSObject **v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t Strong;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_t v45[2];
  uint64_t v46;
  _QWORD v47[6];
  NSObject *v48;
  uint64_t v49;
  id v50[5];
  char v51;

  v4 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v4);
  v6 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F9B8(a1, (uint64_t)v50, &qword_1010FB800);
  if ((v51 & 1) == 0)
  {
    v18 = (os_log_t)v50[0];
    v19 = objc_msgSend(v50[0], "discoveredMetadata");
    v20 = objc_msgSend(v19, "productData");

    v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    sub_1001EE65C(v21, v23);
    if (v25 >> 60 != 15)
    {
      v26 = v24;
      v27 = v25;
      sub_1001EDA78(v24, v25);
      v29 = v28;
      v30 = sub_1001EDBAC(v26, v27);
      v32 = v31;
      static Endianness.current.getter(v30);
      sub_10007D5A4();
      FixedWidthInteger.init(data:ofEndianness:)(&v48, v30, v32, v6);
      if (BYTE4(v48))
        v33 = 0;
      else
        v33 = (int)v48;
      if (sub_100A2D38C(v29, v33))
      {
        if (qword_1010EA120 != -1)
          swift_once(&qword_1010EA120, sub_100A34180);
        v34 = type metadata accessor for Logger(0);
        sub_10001A9E8(v34, (uint64_t)qword_1011B7B28);
        v35 = v18;
        v18 = (os_log_t)Logger.logObject.getter(v35);
        v36 = static os_log_type_t.default.getter(v18);
        if (os_log_type_enabled(v18, v36))
        {
          v45[0] = v18;
          v37 = (uint8_t *)swift_slowAlloc(12, -1);
          v38 = (NSObject **)swift_slowAlloc(8, -1);
          *(_DWORD *)v37 = 138412290;
          v48 = v35;
          v39 = v35;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v37 + 4, v37 + 12);
          *v38 = v35;

          v18 = v45[0];
          _os_log_impl((void *)&_mh_execute_header, v45[0], v36, "Ignoring Apple audio accessory %@.", v37, 0xCu);
          v40 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
          swift_arrayDestroy(v38, 1, v40);
          swift_slowDealloc(v38, -1, -1);
          swift_slowDealloc(v37, -1, -1);
          sub_10001EF3C(v26, v27);

        }
        else
        {

          sub_10001EF3C(v26, v27);
        }
LABEL_21:

        return;
      }
      sub_10001EF3C(v26, v27);
    }
    swift_beginAccess(a2 + 16, &v48, 0, 0);
    Strong = swift_weakLoadStrong(a2 + 16);
    if (Strong)
    {
      v45[-2] = (os_log_t)__chkstk_darwin(Strong);
      v45[-1] = v18;
      v42 = sub_10001A9A8((uint64_t *)&unk_1010FB770);
      v43 = OS_dispatch_queue.sync<A>(execute:)(sub_100433D64, &v45[-4], v42);
      v44 = v47[0];
      __chkstk_darwin(v43);
      v45[-2] = v44;
      v45[-1] = v18;
      os_activity(name:block:)("DiscoveredAccessory", 19, 2, sub_100433D7C);
      swift_release();

      swift_bridgeObjectRelease();
      return;
    }
    goto LABEL_21;
  }
  sub_100059244((uint64_t)v50, (uint64_t)&v48);
  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B7B28);
  v8 = sub_100059280(&v48, (uint64_t)v47);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    v13 = sub_100059390();
    v14 = swift_allocError(&type metadata for CentralManager.Error, v13, 0, 0);
    sub_100059280(v47, v15);
    v16 = _swift_stdlib_bridgeErrorToNSError(v14);
    v46 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v11 + 4, v11 + 12);
    *v12 = v16;
    sub_1000593D4(v47);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Peripheral discovery error: %@", v11, 0xCu);
    v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v12, 1, v17);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    sub_1000593D4(v47);
  }
  sub_1000593D4(&v48);
}

uint64_t sub_10042ACBC(void **a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t result;
  id v13;
  uint64_t v14;

  v2 = *a1;
  v3 = a2 + 16;
  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B7B28);
  v5 = v2;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v13 = v5;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v8 + 4, v8 + 12);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "AccessoryDiscoverySession Lost %@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  swift_beginAccess(v3, &v13, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    sub_10043306C((uint64_t)v5);
    return swift_release();
  }
  return result;
}

uint64_t sub_10042AE84@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  char v31[16];
  _QWORD *v32;
  char v33[24];
  _QWORD v34[5];

  v30 = a3;
  v5 = sub_10001A9A8(&qword_1010EEEB0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010FBA80);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (char *)*a1;
  v34[3] = &type metadata for BAServiceIdentifier;
  v34[4] = &off_101077A98;
  LOBYTE(v34[0]) = 0;
  v14 = (uint64_t *)&v13[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess(&v13[OBJC_IVAR____TtC12searchpartyd10Peripheral_services], v33, 0, 0);
  v15 = *v14;
  v32 = v34;
  swift_bridgeObjectRetain(v15);
  sub_100A7771C((uint64_t (*)(uint64_t *))sub_1000FC260, (uint64_t)v31, v15);
  v17 = v16;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
  if (v17)
  {
    v18 = sub_1007EE690(a2);
    v19 = swift_allocObject(&unk_1010760D8, 32, 7);
    *(_QWORD *)(v19 + 16) = v17;
    *(_QWORD *)(v19 + 24) = v18;
    v20 = sub_10001A9A8((uint64_t *)&unk_1010FBA90);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    swift_retain();
    v21 = swift_bridgeObjectRetain(v18);
    v34[0] = Future.init(_:)(sub_100245664, v19, v21);
    v22 = sub_1000193A4((unint64_t *)&qword_101121800, (uint64_t *)&unk_1010FBA90, (const char *)&protocol conformance descriptor for Future<A, B>);
    v23 = Publisher.eraseToAnyPublisher()(v20, v22);
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
  }
  else
  {
    v34[0] = v13;
    v25 = type metadata accessor for Peripheral(0);
    v26 = v13;
    Just.init(_:)(v34, v25);
    v27 = sub_100059390();
    Just.setFailureType<A>(to:)(&type metadata for CentralManager.Error, v5, &type metadata for CentralManager.Error, v27);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v28 = sub_1000193A4(&qword_1010EEEB8, (uint64_t *)&unk_1010FBA80, (const char *)&protocol conformance descriptor for Result<A, B>.Publisher);
    v23 = Publisher.eraseToAnyPublisher()(v9, v28);
    result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  *v30 = v23;
  return result;
}

uint64_t sub_10042B128@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  char v31[16];
  _QWORD *v32;
  char v33[24];
  _QWORD v34[5];

  v30 = a3;
  v5 = sub_10001A9A8(&qword_1010EEEB0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010FBA80);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (char *)*a1;
  v34[3] = &type metadata for BAServiceIdentifier;
  v34[4] = &off_101077A98;
  LOBYTE(v34[0]) = 1;
  v14 = (uint64_t *)&v13[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess(&v13[OBJC_IVAR____TtC12searchpartyd10Peripheral_services], v33, 0, 0);
  v15 = *v14;
  v32 = v34;
  swift_bridgeObjectRetain(v15);
  sub_100A7771C((uint64_t (*)(uint64_t *))sub_1000FC260, (uint64_t)v31, v15);
  v17 = v16;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
  if (v17)
  {
    v18 = sub_1007ED9A8(a2);
    v19 = swift_allocObject(&unk_1010760B0, 32, 7);
    *(_QWORD *)(v19 + 16) = v17;
    *(_QWORD *)(v19 + 24) = v18;
    v20 = sub_10001A9A8((uint64_t *)&unk_1010FBA90);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    swift_retain();
    v21 = swift_bridgeObjectRetain(v18);
    v34[0] = Future.init(_:)(sub_1000FA48C, v19, v21);
    v22 = sub_1000193A4((unint64_t *)&qword_101121800, (uint64_t *)&unk_1010FBA90, (const char *)&protocol conformance descriptor for Future<A, B>);
    v23 = Publisher.eraseToAnyPublisher()(v20, v22);
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
  }
  else
  {
    v34[0] = v13;
    v25 = type metadata accessor for Peripheral(0);
    v26 = v13;
    Just.init(_:)(v34, v25);
    v27 = sub_100059390();
    Just.setFailureType<A>(to:)(&type metadata for CentralManager.Error, v5, &type metadata for CentralManager.Error, v27);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v28 = sub_1000193A4(&qword_1010EEEB8, (uint64_t *)&unk_1010FBA80, (const char *)&protocol conformance descriptor for Result<A, B>.Publisher);
    v23 = Publisher.eraseToAnyPublisher()(v9, v28);
    result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  *v30 = v23;
  return result;
}

uint64_t sub_10042B3D0(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;

  v3 = v2;
  v41 = a2;
  v5 = type metadata accessor for MACAddress(0);
  v39 = *(_QWORD *)(v5 - 8);
  v40 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_1011B7B28);
  v13 = a1;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(22, -1);
    v38 = v3;
    v17 = v16;
    v37 = swift_slowAlloc(64, -1);
    v43 = v37;
    *(_DWORD *)v17 = 136315394;
    v36 = v17 + 4;
    v18 = objc_msgSend(*(id *)&v13[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

    v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v8, v19);
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v42 = sub_100016940(v20, v22, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v36, v17 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    v23 = sub_100786FB4(v7);
    v24 = MACAddress.hexString.getter(v23);
    v26 = v25;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v40);
    v42 = sub_100016940(v24, v26, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v17 + 14, v17 + 22);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "createAccessory from peripheral: %s [%s]", (uint8_t *)v17, 0x16u);
    v27 = v37;
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    v28 = v17;
    v3 = v38;
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

  }
  v29 = swift_allocObject(&unk_101075EA8, 33, 7);
  *(_QWORD *)(v29 + 16) = v13;
  *(_QWORD *)(v29 + 24) = v3;
  *(_BYTE *)(v29 + 32) = v41 & 1;
  v30 = sub_10001A9A8(&qword_1010FB7B0);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  v31 = v13;
  swift_retain();
  v43 = Future.init(_:)(sub_10043396C, v29, v32);
  v33 = sub_1000193A4((unint64_t *)&unk_1010FB7B8, &qword_1010FB7B0, (const char *)&protocol conformance descriptor for Future<A, B>);
  v34 = Publisher.eraseToAnyPublisher()(v30, v33);
  swift_release();
  return v34;
}

uint64_t sub_10042B790(void (*a1)(_QWORD **), uint64_t a2, char *a3, uint64_t a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  id v23;
  Class isa;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  Class v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t result;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v61;
  char *v62;
  _QWORD *v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  char *v84;
  unint64_t v85;
  void (*v86)(_QWORD);
  uint64_t v87;
  __n128 v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  id v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  void (*v126)(_QWORD);
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  void *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(char *, char *, uint64_t);
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char v154[16];
  uint64_t *v155;
  char v156[8];
  uint64_t v157;
  char v158[8];
  _QWORD *v159;
  ValueMetadata *v160;
  _UNKNOWN **v161;
  __int16 v162;
  char v163[8];

  v139 = a5;
  v141 = a4;
  v143 = a2;
  v150 = sub_10001A9A8(&qword_1010FB7C8);
  v149 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v148 = (char *)&v124 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_10001A9A8(&qword_1010FB7D0);
  v128 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v127 = (char *)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_10001A9A8(&qword_1010FB7D8);
  v131 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v130 = (char *)&v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_10001A9A8(&qword_1010FB7E0);
  v134 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v133 = (char *)&v124 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_10001A9A8(&qword_1010FB7E8);
  v137 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v136 = (char *)&v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_10001A9A8(&qword_1010FB7F0);
  v153 = *(_QWORD *)(v152 - 8);
  __chkstk_darwin(v152);
  v151 = (char *)&v124 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_10001A9A8(&qword_1010FB7F8);
  v145 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v142 = (char *)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MACAddress(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v124 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v124 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = objc_msgSend(objc_allocWithZone((Class)SPDiscoveredAccessory), "init");
  v23 = objc_msgSend(*(id *)&a3[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);

  isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  objc_msgSend(v22, "setIdentifier:", isa);

  v25 = v22;
  v26 = sub_100786FB4(v17);
  v27 = MACAddress.data.getter(v26);
  v29 = v28;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v30 = Data._bridgeToObjectiveC()().super.isa;
  sub_10001BC14(v27, v29);
  objc_msgSend(v22, "setMacAddress:", v30);

  v160 = &type metadata for BAServiceIdentifier;
  v161 = &off_101077A98;
  LOBYTE(v159) = 0;
  v140 = a3;
  v31 = (uint64_t *)&a3[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess(&a3[OBJC_IVAR____TtC12searchpartyd10Peripheral_services], v163, 0, 0);
  v32 = *v31;
  v155 = (uint64_t *)&v159;
  swift_bridgeObjectRetain(v32);
  sub_100A7771C((uint64_t (*)(uint64_t *))sub_1000FA448, (uint64_t)v154, v32);
  v34 = v33;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v159);
  if (!v34)
  {
    v160 = &type metadata for BAServiceIdentifier;
    v161 = &off_101077A98;
    LOBYTE(v159) = 0;
    v162 = 257;
    a1(&v159);

    return sub_100004048((uint64_t)&v159, &qword_1010FB800);
  }
  v125 = v25;
  v126 = (void (*)(_QWORD))a1;
  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v35 = type metadata accessor for Logger(0);
  sub_10001A9E8(v35, (uint64_t)qword_1011B7B28);
  v36 = swift_retain_n(v34, 2);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  v39 = os_log_type_enabled(v37, v38);
  v144 = v34;
  if (v39)
  {
    v40 = (uint8_t *)swift_slowAlloc(12, -1);
    v41 = swift_slowAlloc(32, -1);
    v159 = (_QWORD *)v41;
    *(_DWORD *)v40 = 136315138;
    swift_retain();
    v42 = sub_100C8F17C();
    v44 = v43;
    swift_release();
    v157 = sub_100016940(v42, v44, (uint64_t *)&v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158, v40 + 4, v40 + 12);
    swift_release_n(v144, 2);
    v34 = v144;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "AccessoryInformationService: %s", v40, 0xCu);
    swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {

    swift_release_n(v34, 2);
  }
  v46 = swift_retain_n(v34, 2);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.default.getter(v47);
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(12, -1);
    v50 = swift_slowAlloc(32, -1);
    v159 = (_QWORD *)v50;
    *(_DWORD *)v49 = 136315138;
    swift_beginAccess(v34 + 40, v156, 0, 0);
    v51 = *(_QWORD *)(v34 + 40);
    v52 = type metadata accessor for Characteristic();
    v53 = sub_100006204(&qword_1011074B0, (uint64_t (*)(uint64_t))type metadata accessor for Characteristic, (uint64_t)&unk_100E50578);
    swift_bridgeObjectRetain(v51);
    v55 = Set.description.getter(v54, v52, v53);
    v57 = v56;
    swift_bridgeObjectRelease();
    v157 = sub_100016940(v55, v57, (uint64_t *)&v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158, v49 + 4, v49 + 12);
    swift_release_n(v144, 2);
    v34 = v144;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "  characteristics: %s", v49, 0xCu);
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v49, -1, -1);

  }
  else
  {

    swift_release_n(v34, 2);
  }
  v58 = 9;
  v59 = (uint64_t *)(v34 + 40);
  swift_retain();
  swift_beginAccess(v34 + 40, &v157, 0, 0);
  v61 = _swiftEmptyArrayStorage;
  v62 = &byte_10104A700;
  do
  {
    v65 = *v62++;
    v64 = v65;
    v160 = &type metadata for BACharacteristicIdentifier.AccessoryInformation;
    v161 = &off_101077A88;
    LOBYTE(v159) = v65;
    v66 = *v59;
    __chkstk_darwin(isUniquelyReferenced_nonNull_native);
    *(&v124 - 2) = (uint64_t)&v159;
    swift_bridgeObjectRetain(v66);
    sub_100A77748((uint64_t (*)(uint64_t *))sub_1000FA464, (uint64_t)(&v124 - 4), v66);
    v68 = v67;
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v159);
    if (v68)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v61);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_1007C9B9C(0, v61[2] + 1, 1, v61);
        v61 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v70 = v61[2];
      v69 = v61[3];
      if (v70 >= v69 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_1007C9B9C((_QWORD *)(v69 > 1), v70 + 1, 1, v61);
        v61 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v61[2] = v70 + 1;
      v63 = &v61[2 * v70];
      *((_BYTE *)v63 + 32) = v64;
      v63[5] = v68;
    }
    --v58;
  }
  while (v58);
  swift_release();
  v71 = (char *)sub_100427468((uint64_t)v61);
  result = swift_bridgeObjectRelease();
  v72 = *((_QWORD *)v71 + 2);
  v73 = v72 != 0;
  v74 = v152;
  v75 = v151;
  if (v72)
  {
    v76 = v153;
    v77 = (*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
    v147 = *(void (**)(char *, char *, uint64_t))(v153 + 16);
    v147(v151, &v71[v77], v152);
    v78 = sub_10001A9A8(&qword_1010FB808);
    v79 = v142;
    v80 = v78;
    Publishers.Map.map<A>(_:)(sub_10042C6C0, 0, v74);
    v81 = v75;
    v82 = *(void (**)(char *, uint64_t))(v76 + 8);
    v82(v81, v74);
    v83 = sub_10001A9A8(&qword_1010FB810);
    v84 = (char *)swift_allocObject(v83, *(unsigned int *)(v83 + 48), *(unsigned __int16 *)(v83 + 52));
    result = (*(uint64_t (**)(char *, char *, uint64_t))(v145 + 32))(&v84[*(_QWORD *)(class metadata base offset for PublisherBox + *(_QWORD *)v84 + 16)], v79, v146);
    v85 = v72 - v73;
    if (v72 == v73)
    {
      swift_bridgeObjectRelease();
      v86 = v126;
LABEL_26:
      v159 = v84;
      v97 = sub_10001A9A8(&qword_1010FB818);
      v98 = sub_10000F4A0(0, &qword_1010FB838, SPDiscoveredAccessoryMetadata_ptr);
      v99 = sub_1000193A4(&qword_1010FB820, &qword_1010FB818, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
      v100 = v127;
      Publisher.tryMap<A>(_:)(sub_10042C818, 0, v97, v98, v99);
      v101 = sub_1000193A4(&qword_1010FB840, &qword_1010FB7D0, (const char *)&protocol conformance descriptor for Publishers.TryMap<A, B>);
      v102 = sub_100059390();
      v103 = v130;
      v104 = v129;
      Publisher.mapError<A>(_:)(sub_10042E460, 0, v129, &type metadata for CentralManager.Error, v101, v102);
      (*(void (**)(char *, uint64_t))(v128 + 8))(v100, v104);
      v105 = sub_10001A9A8(&qword_1010FB848);
      v106 = sub_1000193A4(&qword_1010FB850, &qword_1010FB7D8, (const char *)&protocol conformance descriptor for Publishers.MapError<A, B>);
      v107 = v133;
      v108 = v132;
      Publisher.map<A>(_:)(sub_100245644, 0, v132, v105, v106);
      (*(void (**)(char *, uint64_t))(v131 + 8))(v103, v108);
      v109 = sub_10001A9A8(&qword_1010FB858);
      v110 = sub_1000193A4(&qword_1010FB860, &qword_1010FB7E0, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
      v111 = sub_1000193A4(&qword_1010FB868, &qword_1010FB858, (const char *)&protocol conformance descriptor for Just<A>);
      v112 = v136;
      v113 = v135;
      Publisher.catch<A>(_:)(sub_10042E510, 0, v135, v109, v110, v111);
      (*(void (**)(char *, uint64_t))(v134 + 8))(v107, v113);
      v114 = swift_allocObject(&unk_101075ED0, 24, 7);
      v115 = v141;
      swift_weakInit(v114 + 16, v141);
      v116 = swift_allocObject(&unk_101075EF8, 64, 7);
      v117 = v125;
      *(_QWORD *)(v116 + 16) = v114;
      *(_QWORD *)(v116 + 24) = v117;
      v118 = v143;
      *(_QWORD *)(v116 + 32) = v86;
      *(_QWORD *)(v116 + 40) = v118;
      *(_BYTE *)(v116 + 48) = v139 & 1;
      v119 = v140;
      *(_QWORD *)(v116 + 56) = v140;
      v120 = sub_1000193A4((unint64_t *)&unk_1010FB870, &qword_1010FB7E8, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
      v121 = v117;
      swift_retain();
      v122 = v119;
      v123 = v138;
      Publisher<>.sink(receiveValue:)(sub_1004339D8, v116, v138, v120);
      swift_release();
      (*(void (**)(char *, uint64_t))(v137 + 8))(v112, v123);
      swift_beginAccess(v115 + 64, &v159, 33, 0);
      AnyCancellable.store(in:)(v115 + 64);
      swift_endAccess(&v159);

      swift_release();
      swift_release();
      return swift_release();
    }
    if (v72 > v73)
    {
      v87 = *(_QWORD *)(v153 + 72);
      v88 = swift_bridgeObjectRetain(v71);
      v146 = v87;
      v142 = v71;
      v89 = &v71[v77 + v87 * v73];
      v145 = v80;
      v90 = v151;
      v91 = v152;
      v92 = v148;
      do
      {
        ((void (*)(char *, char *, uint64_t, __n128))v147)(v90, v89, v91, v88);
        v159 = v84;
        v153 = sub_10001A9A8(&qword_1010FB818);
        v93 = sub_1000193A4(&qword_1010FB820, &qword_1010FB818, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
        v94 = sub_1000193A4(&qword_1010FB828, &qword_1010FB7F0, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
        Publisher.zip<A, B>(_:_:)(v90, sub_10042C73C, 0, v153, v91, v145, v93, v94);
        swift_release();
        v95 = sub_1000193A4(&qword_1010FB830, &qword_1010FB7C8, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
        v96 = v150;
        v84 = (char *)Publisher.eraseToAnyPublisher()(v150, v95);
        (*(void (**)(char *, uint64_t))(v149 + 8))(v92, v96);
        v82(v90, v91);
        v89 += v146;
        --v85;
      }
      while (v85);
      swift_bridgeObjectRelease_n(v142, 2);
      v86 = v126;
      goto LABEL_26;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10042C6C0@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *((_QWORD *)a1 + 1);
  v5 = *((_QWORD *)a1 + 2);
  v6 = *((_QWORD *)a1 + 3);
  v7 = sub_10001A9A8(&qword_1010FB8E8);
  v8 = swift_allocObject(v7, 64, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
  *(_BYTE *)(v8 + 32) = v3;
  *(_QWORD *)(v8 + 40) = v4;
  *(_QWORD *)(v8 + 48) = v5;
  *(_QWORD *)(v8 + 56) = v6;
  *a2 = v8;
  swift_retain();
  return sub_10001BBBC(v5, v6);
}

uint64_t sub_10042C73C@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t result;
  _BYTE v12[64];

  v4 = *a1;
  v5 = *a2;
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  v9 = sub_10001A9A8(&qword_1010FB8E8);
  inited = swift_initStackObject(v9, v12);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_BYTE *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = v6;
  *(_QWORD *)(inited + 48) = v7;
  *(_QWORD *)(inited + 56) = v8;
  swift_retain();
  sub_10001BBBC(v7, v8);
  swift_bridgeObjectRetain(v4);
  result = sub_1003041A0(inited);
  *a3 = v4;
  return result;
}

id sub_10042C818@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id result;
  id v10;
  __n128 v11;
  _QWORD v12[2];
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  char *v17;

  v5 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v5);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  result = objc_msgSend(objc_allocWithZone((Class)SPDiscoveredAccessoryMetadata), "init");
  v10 = result;
  if (*(_QWORD *)(v8 + 16))
  {
    v12[0] = a2;
    v15 = v2;
    v11 = swift_bridgeObjectRetain(v8);
    v14 = v8;
    v11.n128_u64[0] = 136446210;
    v13 = v11;
    v12[1] = (char *)&type metadata for Any + 8;
    v16 = v10;
    v17 = v7;
    __asm { BR              X9 }
  }
  *a2 = result;
  return result;
}

uint64_t sub_10042E460@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD v6[2];
  uint64_t v7;
  char v8;
  uint64_t v9;
  _BYTE v10[48];

  v3 = *a1;
  v9 = v3;
  swift_errorRetain(v3);
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  if ((swift_dynamicCast(v6, &v9, v4, &type metadata for CentralManager.Error, 6) & 1) != 0)
  {
    sub_100059244((uint64_t)v6, (uint64_t)v10);
    return sub_100059244((uint64_t)v10, a2);
  }
  else
  {
    v7 = 0;
    memset(v6, 0, sizeof(v6));
    v8 = -1;
    sub_100004048((uint64_t)v6, &qword_1010FB8C8);
    *(_QWORD *)a2 = v3;
    *(_BYTE *)(a2 + 40) = 0;
    return swift_errorRetain(v3);
  }
}

uint64_t sub_10042E510(_QWORD *a1)
{
  return sub_10021D8E0(a1, &qword_1010FB848);
}

uint64_t sub_10042E51C(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t *), uint64_t a5, int a6, void *a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint8_t *v26;
  id v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  id v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  NSObject *v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  id v60;
  id v61;
  NSObject *v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  id v66;
  unsigned int v67;
  NSObject *v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  id v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  NSObject *v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  id v83;
  id v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  id v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  unsigned int v93;
  BOOL v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  void *v98;
  id v99;
  unsigned int v100;
  NSString v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  uint64_t v108;
  _DWORD *v109;
  NSObject *v110;
  id v111;
  char *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  uint64_t v125;
  uint8_t *v126;
  uint64_t v127;
  id v128;
  int v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(uint64_t *);
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  _BYTE v145[40];
  _QWORD v146[5];
  char v147;
  char v148[8];

  v137 = a7;
  v139 = a5;
  v140 = a4;
  v136 = sub_10001A9A8(&qword_1010FB880);
  v11 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v13 = (char *)&v125 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010FB888);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v148, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v19 = result;
    sub_10000F9B8(a1, (uint64_t)v146, &qword_1010FB848);
    v135 = v11;
    if ((v147 & 1) != 0)
    {
      sub_100059244((uint64_t)v146, (uint64_t)&v144);
      sub_100059280(&v144, (uint64_t)&v141);
      v143 = 1;
      v140(&v141);
      sub_100004048((uint64_t)&v141, &qword_1010FB800);
      sub_1000593D4(&v144);
      if ((a6 & 1) == 0)
        return swift_release();
    }
    else
    {
      v131 = v17;
      v132 = v15;
      v133 = v14;
      v134 = v19;
      v128 = (id)v146[0];
      objc_msgSend(a3, "setDiscoveredMetadata:");
      if (qword_1010EA120 != -1)
        swift_once(&qword_1010EA120, sub_100A34180);
      v20 = type metadata accessor for Logger(0);
      v21 = sub_10001A9E8(v20, (uint64_t)qword_1011B7B28);
      v22 = a3;
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.default.getter(v23);
      v25 = os_log_type_enabled(v23, v24);
      v138 = v21;
      v130 = v13;
      v129 = a6;
      if (v25)
      {
        v26 = (uint8_t *)swift_slowAlloc(12, -1);
        v127 = swift_slowAlloc(32, -1);
        v141 = v127;
        *(_DWORD *)v26 = 136446210;
        v126 = v26 + 4;
        v27 = objc_msgSend(v22, "discoveredMetadata");
        v28 = objc_msgSend(v27, "productData");

        v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v28);
        v31 = v30;

        v32 = Data.hexString.getter(v29, v31);
        v34 = v33;
        sub_10001BC14(v29, v31);
        v144 = sub_100016940(v32, v34, &v141);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v145, v126, v26 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "productData: %{public}s", v26, 0xCu);
        v35 = v127;
        swift_arrayDestroy(v127, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v35, -1, -1);
        swift_slowDealloc(v26, -1, -1);

      }
      else
      {

      }
      v36 = v22;
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.default.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc(12, -1);
        v40 = swift_slowAlloc(32, -1);
        v141 = v40;
        *(_DWORD *)v39 = 136446210;
        v41 = objc_msgSend(v36, "discoveredMetadata");
        v42 = objc_msgSend(v41, "manufacturerName");

        v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
        v45 = v44;

        v144 = sub_100016940(v43, v45, &v141);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v145, v39 + 4, v39 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "manufacturerName: %{public}s", v39, 0xCu);
        swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v39, -1, -1);

      }
      else
      {

      }
      v46 = v36;
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.default.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc(12, -1);
        v50 = swift_slowAlloc(32, -1);
        v141 = v50;
        *(_DWORD *)v49 = 136446210;
        v51 = objc_msgSend(v46, "discoveredMetadata");
        v52 = objc_msgSend(v51, "modelName");

        v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
        v55 = v54;

        v144 = sub_100016940(v53, v55, &v141);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v145, v49 + 4, v49 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "modelName: %{public}s", v49, 0xCu);
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v49, -1, -1);

      }
      else
      {

      }
      v56 = v46;
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.default.getter(v57);
      if (os_log_type_enabled(v57, v58))
      {
        v59 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v59 = 134349056;
        v60 = -[NSObject discoveredMetadata](v56, "discoveredMetadata");
        v61 = objc_msgSend(v60, "accessoryCategory");

        v141 = (uint64_t)v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v59 + 4, v59 + 12);

        _os_log_impl((void *)&_mh_execute_header, v57, v58, "accessoryCategory: %{public}llu", v59, 0xCu);
        swift_slowDealloc(v59, -1, -1);
      }
      else
      {

        v57 = v56;
      }

      v62 = v56;
      v63 = Logger.logObject.getter(v62);
      v64 = static os_log_type_t.default.getter(v63);
      if (os_log_type_enabled(v63, v64))
      {
        v65 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v65 = 67240192;
        v66 = -[NSObject discoveredMetadata](v62, "discoveredMetadata");
        v67 = objc_msgSend(v66, "accessoryCapabilities");

        LODWORD(v141) = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, (char *)&v141 + 4, v65 + 4, v65 + 8);

        _os_log_impl((void *)&_mh_execute_header, v63, v64, "accessoryCapabilities: %{public}u", v65, 8u);
        swift_slowDealloc(v65, -1, -1);
      }
      else
      {

        v63 = v62;
      }

      v68 = v62;
      v69 = Logger.logObject.getter(v68);
      v70 = static os_log_type_t.default.getter(v69);
      if (os_log_type_enabled(v69, v70))
      {
        v71 = (uint8_t *)swift_slowAlloc(12, -1);
        v72 = swift_slowAlloc(32, -1);
        v141 = v72;
        *(_DWORD *)v71 = 136446210;
        v73 = -[NSObject discoveredMetadata](v68, "discoveredMetadata");
        v74 = objc_msgSend(v73, "firmwareVersion");

        v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
        v77 = v76;

        v144 = sub_100016940(v75, v77, &v141);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v145, v71 + 4, v71 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "firmwareVersion: %{public}s", v71, 0xCu);
        swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v72, -1, -1);
        swift_slowDealloc(v71, -1, -1);

      }
      else
      {

      }
      v78 = v68;
      v79 = Logger.logObject.getter(v78);
      v80 = static os_log_type_t.default.getter(v79);
      if (os_log_type_enabled(v79, v80))
      {
        v81 = (uint8_t *)swift_slowAlloc(12, -1);
        v82 = swift_slowAlloc(32, -1);
        v141 = v82;
        *(_DWORD *)v81 = 136446210;
        v83 = -[NSObject discoveredMetadata](v78, "discoveredMetadata");
        v84 = objc_msgSend(v83, "protocolVersion");

        v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
        v87 = v86;

        v144 = sub_100016940(v85, v87, &v141);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v145, v81 + 4, v81 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "protocolVersion: %{public}s", v81, 0xCu);
        swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v82, -1, -1);
        swift_slowDealloc(v81, -1, -1);

      }
      else
      {

      }
      v13 = v130;
      v88 = v128;
      v89 = Logger.logObject.getter(v88);
      v90 = static os_log_type_t.default.getter(v89);
      if (os_log_type_enabled(v89, v90))
      {
        v91 = (uint8_t *)swift_slowAlloc(12, -1);
        v92 = swift_slowAlloc(32, -1);
        v141 = v92;
        *(_DWORD *)v91 = 136446210;
        v93 = objc_msgSend(v88, "batteryType");
        if (v93)
        {
          if (v93 == 2)
          {
            v96 = 0xEB00000000656C62;
            v95 = 0x6167726168636572;
          }
          else
          {
            v94 = v93 == 1;
            if (v93 == 1)
              v95 = 0x61686365526E6F6ELL;
            else
              v95 = 0x6E776F6E6B6E75;
            if (v94)
              v96 = 0xEE00656C62616772;
            else
              v96 = 0xE700000000000000;
          }
        }
        else
        {
          v96 = 0xE700000000000000;
          v95 = 0x64657265776F70;
        }
        v144 = sub_100016940(v95, v96, &v141);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v145, v91 + 4, v91 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v89, v90, "batteryType: %{public}s", v91, 0xCu);
        swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v92, -1, -1);
        swift_slowDealloc(v91, -1, -1);

      }
      else
      {

      }
      v97 = v129;
      if (qword_1010EA198 != -1)
        swift_once(&qword_1010EA198, sub_100ACDE4C);
      v98 = (void *)qword_1011B7C08;
      v99 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
      v100 = objc_msgSend(v99, "isInternalBuild");

      if (v100)
      {
        v101 = String._bridgeToObjectiveC()();
        v102 = objc_msgSend(v98, "BOOLForKey:", v101);

      }
      else
      {
        v102 = 0;
      }
      v103 = objc_msgSend(v88, "batteryState");
      if (v103 < 4 && (v103 & 0xF) == 3)
        v105 = 1;
      else
        v105 = v102;
      v106 = Logger.logObject.getter(-[NSObject setIsBatteryTooLow:](v78, "setIsBatteryTooLow:", v105));
      v107 = static os_log_type_t.default.getter(v106);
      if (os_log_type_enabled(v106, v107))
      {
        if (v103 >= 4)
          v108 = 4;
        else
          v108 = v103;
        v109 = (_DWORD *)swift_slowAlloc(12, -1);
        v141 = swift_slowAlloc(32, -1);
        *v109 = 136446210;
        __asm { BR              X9 }
      }

      v141 = (uint64_t)v78;
      v143 = 0;
      v110 = v78;
      v140(&v141);

      sub_100004048((uint64_t)&v141, &qword_1010FB800);
      v19 = v134;
      v14 = v133;
      v15 = v132;
      v17 = v131;
      if ((v97 & 1) == 0)
        return swift_release();
    }
    v111 = *(id *)(v19 + 40);
    v112 = v13;
    v113 = v137;
    v114 = sub_100E08534(v137);

    v146[0] = v114;
    v115 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
    v116 = sub_10001A9A8(&qword_1011074A0);
    v117 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.map<A>(_:)(sub_100245644, 0, v115, v116, v117);
    swift_release();
    v118 = sub_10001A9A8(&qword_1010EEE90);
    v119 = sub_1000193A4((unint64_t *)&unk_1010FB8B0, &qword_1010FB880, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v120 = sub_1000193A4(&qword_1010EEEA0, &qword_1010EEE90, (const char *)&protocol conformance descriptor for Just<A>);
    v121 = v136;
    Publisher.catch<A>(_:)(sub_1002197E4, 0, v136, v118, v119, v120);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v112, v121);
    v122 = swift_allocObject(&unk_101075F20, 24, 7);
    *(_QWORD *)(v122 + 16) = v113;
    v123 = sub_1000193A4(&qword_1010FB8C0, &qword_1010FB888, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
    v124 = v113;
    Publisher<>.sink(receiveValue:)(sub_1004339EC, v122, v14, v123);
    swift_release();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    swift_beginAccess(v19 + 64, v146, 33, 0);
    AnyCancellable.store(in:)(v19 + 64);
    swift_endAccess(v146);
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_10042F6C0(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[40];
  _QWORD v25[6];
  id v26;
  uint64_t v27;
  id v28[5];
  char v29;

  sub_10000F9B8(a1, (uint64_t)v28, &qword_1011074A0);
  if ((v29 & 1) != 0)
  {
    sub_100059244((uint64_t)v28, (uint64_t)&v26);
    if (qword_1010EA120 != -1)
      swift_once(&qword_1010EA120, sub_100A34180);
    v3 = type metadata accessor for Logger(0);
    sub_10001A9E8(v3, (uint64_t)qword_1011B7B28);
    sub_100059280(&v26, (uint64_t)v25);
    v4 = a2;
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = swift_slowAlloc(22, -1);
      v8 = (_QWORD *)swift_slowAlloc(16, -1);
      *(_DWORD *)v7 = 138412546;
      v23 = (uint64_t)v4;
      v9 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v7 + 4, v7 + 12);
      *v8 = v4;

      *(_WORD *)(v7 + 12) = 2112;
      sub_100059280(v25, (uint64_t)&v23);
      v10 = sub_100059390();
      v11 = swift_allocError(&type metadata for CentralManager.Error, v10, 0, 0);
      sub_100059244((uint64_t)&v23, v12);
      v13 = _convertErrorToNSError(_:)(v11);
      swift_errorRelease(v11);
      v23 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v7 + 14, v7 + 22);
      v8[1] = v13;
      sub_1000593D4(v25);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to disconnect from %@: %@", (uint8_t *)v7, 0x16u);
      v14 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v8, 2, v14);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);

    }
    else
    {

      sub_1000593D4(v25);
    }
    sub_1000593D4(&v26);
  }
  else
  {

    if (qword_1010EA120 != -1)
      swift_once(&qword_1010EA120, sub_100A34180);
    v15 = type metadata accessor for Logger(0);
    sub_10001A9E8(v15, (uint64_t)qword_1011B7B28);
    v16 = a2;
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v19 = 138412290;
      v26 = v16;
      v21 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v19 + 4, v19 + 12);
      *v20 = v16;

      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Successfully disconnected after readMetadata on %@", v19, 0xCu);
      v22 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v20, 1, v22);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_10042FA60(void (*a1)(_QWORD), uint8_t *a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint8_t *v25;
  uint64_t v26;
  id v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  int v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(_QWORD);
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(_QWORD);
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int16 v95;

  v82 = a4;
  v7 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v7);
  v9 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AccessoryMetadata(0);
  v11 = *(_QWORD *)(v10 - 8);
  v88 = v10;
  v89 = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = __chkstk_darwin(v13);
  v81 = (uint64_t)&v75 - v15;
  __chkstk_darwin(v14);
  v86 = (uint64_t)&v75 - v16;
  v17 = type metadata accessor for UUID(0);
  v84 = *(_QWORD *)(v17 - 8);
  v85 = v17;
  __chkstk_darwin(v17);
  v83 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10001A9E8(v19, (uint64_t)qword_1011B7B28);
  v21 = a3;
  v87 = v20;
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  v24 = os_log_type_enabled(v22, v23);
  v80 = (uint64_t)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v24)
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v78 = a1;
    v76 = v26;
    v92 = v26;
    v79 = a2;
    *(_DWORD *)v25 = 136315138;
    v75 = v25 + 4;
    v27 = objc_msgSend(v21, "identifier");
    v28 = v83;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v27);

    v29 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v30 = v85;
    v31 = dispatch thunk of CustomStringConvertible.description.getter(v85, v29);
    v77 = v12;
    v32 = v9;
    v34 = v33;
    (*(void (**)(char *, uint64_t))(v84 + 8))(v28, v30);
    v90 = sub_100016940(v31, v34, &v92);
    a2 = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v75, v25 + 12);

    v9 = v32;
    v12 = v77;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "retrieveProductInfo for accessory: %s", v25, 0xCu);
    v35 = v76;
    swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
    a1 = v78;
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

  }
  v36 = v21;
  sub_1001335CC(v36, (uint64_t)v9);
  v37 = v89;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v9, 1, v88) == 1)
  {
    v38 = sub_100004048((uint64_t)v9, &qword_101115E60);
LABEL_12:
    v70 = Logger.logObject.getter(v38);
    v71 = static os_log_type_t.error.getter(v70);
    if (os_log_type_enabled(v70, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v72 = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "retrieveProductInfo: invalid parameters", v72, 2u);
      swift_slowDealloc(v72, -1, -1);
    }

    v92 = 5;
    v93 = 0u;
    v94 = 0u;
    v95 = 267;
    a1(&v92);
    return sub_100004048((uint64_t)&v92, &qword_1010FBA00);
  }
  v39 = v86;
  sub_1000126EC((uint64_t)v9, v86, type metadata accessor for AccessoryMetadata);
  v40 = v81;
  sub_10005972C(v39, v81, type metadata accessor for AccessoryMetadata);
  v41 = *(unsigned __int8 *)(v37 + 80);
  v42 = (v41 + 16) & ~v41;
  v43 = (v12 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  v44 = swift_allocObject(&unk_101075FE8, v43 + 8, v41 | 7);
  sub_1000126EC(v40, v44 + v42, type metadata accessor for AccessoryMetadata);
  *(_QWORD *)(v44 + v43) = v82;
  swift_retain();
  v45 = sub_10001A9A8(&qword_1010F3808);
  unsafeFromAsyncTask<A>(_:)(&v92, &unk_1010FBA10, v44, v45);
  swift_release();
  v46 = v92;
  if (!v92)
  {
    v38 = sub_1000126B0(v39, type metadata accessor for AccessoryMetadata);
    goto LABEL_12;
  }
  v48 = *((_QWORD *)&v93 + 1);
  v47 = v93;
  v49 = v80;
  sub_10005972C(v39, v80, type metadata accessor for AccessoryMetadata);
  v50 = v36;
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.default.getter(v51);
  v53 = v52;
  if (os_log_type_enabled(v51, v52))
  {
    v54 = swift_slowAlloc(22, -1);
    v88 = swift_slowAlloc(64, -1);
    v92 = v88;
    *(_DWORD *)v54 = 136315394;
    v79 = a2;
    v82 = v54 + 4;
    v55 = objc_msgSend(v50, "identifier");
    LODWORD(v87) = v53;
    v56 = v55;
    v57 = v47;
    v58 = v83;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v55);

    v59 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v89 = v48;
    v60 = v85;
    v61 = dispatch thunk of CustomStringConvertible.description.getter(v85, v59);
    v62 = a1;
    v64 = v63;
    v65 = v58;
    v47 = v57;
    (*(void (**)(char *, uint64_t))(v84 + 8))(v65, v60);
    v90 = sub_100016940(v61, v64, &v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v82, v54 + 12);

    a1 = v62;
    swift_bridgeObjectRelease();
    *(_WORD *)(v54 + 12) = 2082;
    v66 = v80;
    v67 = sub_100132D48();
    v90 = sub_100016940(v67, v68, &v92);
    v48 = v89;
    a2 = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v54 + 14, v54 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v66, type metadata accessor for AccessoryMetadata);
    _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v87, "%s product info: %{public}s", (uint8_t *)v54, 0x16u);
    v69 = v88;
    swift_arrayDestroy(v88, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1, -1);
    swift_slowDealloc(v54, -1, -1);
  }
  else
  {

    sub_1000126B0(v49, type metadata accessor for AccessoryMetadata);
  }

  v74 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v74);
  *(&v75 - 6) = (uint8_t *)v46;
  *(&v75 - 5) = (uint8_t *)v47;
  *(&v75 - 4) = (uint8_t *)v48;
  *(&v75 - 3) = (uint8_t *)a1;
  *(&v75 - 2) = a2;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.AccessoryDiscoverySession.retrieveProductInfo", 75, 2, sub_100433F74, &v75 - 8, &type metadata for () + 1);
  sub_1000126B0(v86, type metadata accessor for AccessoryMetadata);
  return sub_100153D94(v46, v47, v48);
}

uint64_t sub_100430210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_10043022C, 0, 0);
}

uint64_t sub_10043022C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, char, char, uint64_t);

  v1 = v0[3];
  v2 = v0[4];
  v3 = sub_10001A9A8(&qword_1010FBA60);
  v4 = *(_QWORD *)(type metadata accessor for AccessoryMetadata(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject(v3, v7 + v5, v6 | 7);
  *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
  sub_10005972C(v1, v8 + v7, type metadata accessor for AccessoryMetadata);
  v9 = *(_QWORD *)(v2 + 96);
  v10 = unk_10111391C;
  v13 = (uint64_t (*)(uint64_t, char, char, uint64_t))((char *)&dword_101113918 + dword_101113918);
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  v0[5] = v11;
  *v11 = v0;
  v11[1] = sub_10043031C;
  return v13(v8, 0, 3, v9);
}

uint64_t sub_10043031C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 40);
  v4[6] = a1;
  v4[7] = a2;
  v4[8] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_10043037C, 0, 0);
}

uint64_t sub_10043037C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 16);
  *(_OWORD *)v2 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v2 + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100430398(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;

  v32 = a6;
  v33 = a5;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AccessoryInfoEndPoint(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v32 - v17;
  v19 = enum case for FMNAccountType.accessory(_:);
  v20 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v18, v19, v20);
  v21 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v22 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v12, 1, 1, v22);
  v23 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v12);
  v24 = type metadata accessor for ServerInteractionController(0);
  v25 = swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  sub_10005972C((uint64_t)v18, (uint64_t)v16, type metadata accessor for AccessoryInfoEndPoint);
  v26 = (_QWORD *)sub_10041D768((uint64_t)v16, v23, v25);
  sub_1000126B0((uint64_t)v18, type metadata accessor for AccessoryInfoEndPoint);
  swift_bridgeObjectRetain(a2);
  sub_10001BBBC(a3, a4);
  sub_10034BB10(a2, a3, a4, 0, v26);
  swift_bridgeObjectRelease();
  sub_10001BC14(a3, a4);
  v27 = (_QWORD *)swift_allocObject(&unk_101076010, 40, 7);
  v28 = v32;
  v29 = v33;
  v27[2] = a1;
  v27[3] = v29;
  v27[4] = v28;
  swift_retain();
  swift_retain();
  Future.addFailure(block:)(sub_100433F98, v27);
  swift_release();
  swift_release();
  v30 = (_QWORD *)swift_allocObject(&unk_101076038, 40, 7);
  v30[2] = a1;
  v30[3] = v29;
  v30[4] = v28;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_100433FA8, v30);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100430644(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  unsigned int v26;
  NSString v27;
  unsigned int v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[2];
  __int16 v41;

  v7 = type metadata accessor for AccessoryInfoResponseContent(0);
  __chkstk_darwin(v7);
  v38 = (uint64_t)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v9);
  v11 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AccessoryProductInfo(0);
  v36 = *(_QWORD *)(v12 - 8);
  v37 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B7B28);
  v17 = swift_errorRetain(a1);
  v35[2] = v16;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.error.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v35[0] = a3;
    v35[1] = a4;
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v20 = 138543362;
    v22 = _convertErrorToNSError(_:)(a1);
    v39 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v20 + 4, v20 + 12);
    *v21 = v22;
    a3 = (void (*)(uint64_t *))v35[0];
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Error in product info request. Error - %{public}@", v20, 0xCu);
    v23 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v21, 1, v23);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
  }

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v24 = (void *)qword_1011B7C08;
  v25 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v26 = objc_msgSend(v25, "isInternalBuild");

  if (!v26)
    goto LABEL_14;
  v27 = String._bridgeToObjectiveC()();
  v28 = objc_msgSend(v24, "BOOLForKey:", v27);

  if (!v28)
    goto LABEL_14;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "AccessoryHardcodedPairingEnabled: bypassing product info check failure", v32, 2u);
    swift_slowDealloc(v32, -1, -1);
  }

  v33 = v38;
  sub_1004F705C(v38);
  sub_100D1536C(v33, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v11, 1, v37) == 1)
  {
    sub_100004048((uint64_t)v11, (uint64_t *)&unk_10111C0A0);
LABEL_14:
    v39 = 5;
    memset(v40, 0, sizeof(v40));
    v41 = 267;
    a3(&v39);
    return sub_100004048((uint64_t)&v39, &qword_1010FBA00);
  }
  sub_1000126EC((uint64_t)v11, (uint64_t)v14, type metadata accessor for AccessoryProductInfo);
  v39 = (uint64_t)sub_100D16350();
  HIBYTE(v41) = 0;
  a3(&v39);
  sub_100004048((uint64_t)&v39, &qword_1010FBA00);
  return sub_1000126B0((uint64_t)v14, type metadata accessor for AccessoryProductInfo);
}

uint64_t sub_100430A8C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  id v53;
  unsigned int v54;
  NSString v55;
  unsigned int v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  Swift::String v87;
  NSObject *v88;
  NSObject *v89;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[2];
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t *);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int16 v107;

  v101 = a3;
  v95 = type metadata accessor for AccessoryInfoResponseContent(0);
  __chkstk_darwin(v95);
  v98 = (uint64_t)v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  v8 = __chkstk_darwin(v7);
  v94 = (char *)v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)v93 - v10;
  v12 = type metadata accessor for AccessoryProductInfo(0);
  v96 = *(_QWORD *)(v12 - 8);
  v97 = v12;
  v13 = __chkstk_darwin(v12);
  v15 = (char *)v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v99 = (uint64_t)v93 - v16;
  v17 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v102 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)v93 - v21;
  v23 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v23);
  v25 = (char *)v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  v27 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v26);
  v100 = a4;
  if (v27 == 200)
  {
    v99 = a1;
    v28 = FMNServerInteractionController.FMNResponseFields.data.getter(200);
    v30 = v29;
    static String.Encoding.utf8.getter(v28);
    v31 = String.init(data:encoding:)(v28, v30, v25);
    v33 = v32;
    sub_10001BC14(v28, v30);
    v93[1] = v15;
    if (v33)
    {
      if (qword_1010EA120 != -1)
        swift_once(&qword_1010EA120, sub_100A34180);
      v34 = type metadata accessor for Logger(0);
      sub_10001A9E8(v34, (uint64_t)qword_1011B7B28);
      swift_bridgeObjectRetain(v33);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.default.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(12, -1);
        v39 = swift_slowAlloc(32, -1);
        v104 = v39;
        *(_DWORD *)v38 = 136315138;
        swift_bridgeObjectRetain(v33);
        v103 = sub_100016940(v31, v33, &v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v38 + 4, v38 + 12);
        swift_bridgeObjectRelease_n(v33, 3);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "response data: %s", v38, 0xCu);
        swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v38, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v33, 2);
      }
    }
    if (qword_1010EA120 != -1)
      swift_once(&qword_1010EA120, sub_100A34180);
    v62 = type metadata accessor for Logger(0);
    v63 = sub_10001A9E8(v62, (uint64_t)qword_1011B7B28);
    v64 = v102;
    v65 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v102 + 16))(v22, v99, v17);
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.default.getter(v66);
    if (os_log_type_enabled(v66, v67))
    {
      v68 = (uint8_t *)swift_slowAlloc(12, -1);
      v69 = swift_slowAlloc(32, -1);
      v104 = v69;
      v93[0] = v63;
      *(_DWORD *)v68 = 136446210;
      v70 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v71 = dispatch thunk of CustomStringConvertible.description.getter(v17, v70);
      v103 = sub_100016940(v71, v72, &v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v68 + 4, v68 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v22, v17);
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "   %{public}s", v68, 0xCu);
      swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v68, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v64 + 8))(v22, v17);
    }

    v73 = type metadata accessor for JSONDecoder(0);
    v74 = swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
    v75 = JSONDecoder.init()(v74);
    v76 = FMNServerInteractionController.FMNResponseFields.data.getter(v75);
    v78 = v77;
    v79 = sub_100243334();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for AccessoryInfoResponse, v76, v78, &type metadata for AccessoryInfoResponse, v79);
    sub_10001BC14(v76, v78);
    v80 = v104;
    swift_bridgeObjectRetain_n(v104, 2);
    v82 = Logger.logObject.getter(v81);
    v83 = static os_log_type_t.default.getter(v82);
    if (os_log_type_enabled(v82, v83))
    {
      v84 = (uint8_t *)swift_slowAlloc(12, -1);
      v85 = swift_slowAlloc(32, -1);
      *(_DWORD *)v84 = 136446210;
      v103 = v85;
      v104 = 0;
      *(_QWORD *)&v105 = 0xE000000000000000;
      swift_bridgeObjectRetain(v80);
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      v104 = 0xD000000000000020;
      *(_QWORD *)&v105 = 0x8000000100ECBDF0;
      swift_bridgeObjectRetain(v80);
      v87._countAndFlagsBits = Array.description.getter(v86, v95);
      String.append(_:)(v87);
      swift_bridgeObjectRelease_n(v80, 2);
      swift_bridgeObjectRelease();
      v104 = sub_100016940(v104, v105, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v84 + 4, v84 + 12);
      swift_bridgeObjectRelease_n(v80, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "decodedResponse %{public}s", v84, 0xCu);
      swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1, -1);
      swift_slowDealloc(v84, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v80, 2);
    }
    v88 = sub_1004318B8(v80);
    swift_bridgeObjectRelease();
    if (v88)
    {
      v104 = (uint64_t)v88;
      HIBYTE(v107) = 0;
      v89 = v88;
      v101(&v104);

    }
    else
    {
      v104 = 5;
      v105 = 0u;
      v106 = 0u;
      v107 = 267;
      v101(&v104);
    }
    swift_release();
    return sub_100004048((uint64_t)&v104, &qword_1010FBA00);
  }
  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v40 = type metadata accessor for Logger(0);
  v41 = sub_10001A9E8(v40, (uint64_t)qword_1011B7B28);
  v42 = v102;
  v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v102 + 16))(v20, a1, v17);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.error.getter(v44);
  if (os_log_type_enabled(v44, v45))
  {
    v46 = swift_slowAlloc(12, -1);
    v94 = (char *)v41;
    v95 = (uint64_t)v11;
    v47 = (uint8_t *)v46;
    v48 = swift_slowAlloc(32, -1);
    v104 = v48;
    *(_DWORD *)v47 = 136446210;
    v49 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    v50 = dispatch thunk of CustomStringConvertible.description.getter(v17, v49);
    v103 = sub_100016940(v50, v51, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v47 + 4, v47 + 12);
    swift_bridgeObjectRelease();
    v11 = (char *)v95;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v20, v17);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Product info check failed %{public}s", v47, 0xCu);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v47, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v20, v17);
  }

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v52 = (void *)qword_1011B7C08;
  v53 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v54 = objc_msgSend(v53, "isInternalBuild");

  if (!v54
    || (v55 = String._bridgeToObjectiveC()(),
        v56 = objc_msgSend(v52, "BOOLForKey:", v55),
        v55,
        !v56))
  {
LABEL_20:
    v104 = 5;
    v105 = 0u;
    v106 = 0u;
    v107 = 267;
    v101(&v104);
    return sub_100004048((uint64_t)&v104, &qword_1010FBA00);
  }
  v58 = Logger.logObject.getter(v57);
  v59 = static os_log_type_t.default.getter(v58);
  if (os_log_type_enabled(v58, v59))
  {
    v60 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v60 = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "AccessoryHardcodedPairingEnabled: bypassing product info check failure", v60, 2u);
    swift_slowDealloc(v60, -1, -1);
  }

  v61 = v98;
  sub_1004F705C(v98);
  sub_100D1536C(v61, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v11, 1, v97) == 1)
  {
    sub_100004048((uint64_t)v11, (uint64_t *)&unk_10111C0A0);
    goto LABEL_20;
  }
  v91 = (uint64_t)v11;
  v92 = v99;
  sub_1000126EC(v91, v99, type metadata accessor for AccessoryProductInfo);
  v104 = (uint64_t)sub_100D16350();
  HIBYTE(v107) = 0;
  v101(&v104);
  sub_100004048((uint64_t)&v104, &qword_1010FBA00);
  return sub_1000126B0(v92, type metadata accessor for AccessoryProductInfo);
}

NSObject *sub_1004318B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int *v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  int *v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  id v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  NSObject *v49;
  void *v50;
  id v51;
  unsigned int v52;
  NSString v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  NSString v62;
  NSString v63;
  NSString v64;
  NSString v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int (*v68)(id, uint64_t, uint64_t);
  NSURL *v69;
  void *v70;
  void *v71;
  NSURL *v72;
  void *v73;
  void *v74;
  NSObject *v75;
  NSString v76;
  double *v77;
  double v78;
  NSURL *v79;
  void *v80;
  void *v81;
  int *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  double *v95;
  double v96;
  double v97;
  double v98;
  NSString v99;
  Class isa;
  NSURL *v101;
  void *v102;
  void *v103;
  NSURL *v104;
  void *v105;
  void *v106;
  NSURL *v107;
  void *v108;
  void *v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  id v115;
  NSString v116;
  Class v117;
  NSURL *v118;
  void *v119;
  void *v120;
  NSURL *v121;
  void *v122;
  void *v123;
  NSURL *v124;
  void *v125;
  void *v126;
  id v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  NSString v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  id v142;
  NSString v143;
  NSString v144;
  Class v145;
  NSObject *v146;
  os_log_type_t v147;
  _BOOL4 v148;
  uint64_t v149;
  uint8_t *v150;
  uint8_t *v151;
  char *v152;
  id v153;
  NSString v154;
  NSString v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  id v166;
  NSString v167;
  NSString v168;
  id v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  NSObject *v182;
  os_log_type_t v183;
  _BOOL4 v184;
  uint8_t *v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  Class v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  Class v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  Class v205;
  uint64_t v206;
  uint8_t *v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  int *v211;
  char *v212;
  NSObject *v213;
  uint64_t v214;
  char *v215;
  uint8_t *v216;
  char *v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225[7];

  v2 = type metadata accessor for LocalizationUtility.Table(0);
  v216 = *(uint8_t **)(v2 - 8);
  __chkstk_darwin(v2);
  v215 = (char *)&v206 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010FBA40);
  v5 = __chkstk_darwin(v4);
  v217 = (char *)&v206 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v219 = (char *)&v206 - v7;
  v8 = sub_10001A9A8(&qword_1010FBA48);
  __chkstk_darwin(v8);
  v10 = (char *)&v206 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v221 = type metadata accessor for AccessoryInfoResponseContent.Assets(0);
  v11 = *(_QWORD *)(v221 - 8);
  __chkstk_darwin(v221);
  v218 = (uint64_t)&v206 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010FBA50);
  __chkstk_darwin(v13);
  v15 = (char *)&v206 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v220 = (uint64_t)&v206 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for AccessoryInfoResponseContent(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v206 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v25 = ((char *)&v206 - v24);
  v26 = __chkstk_darwin(v23);
  v29 = (char *)&v206 - v28;
  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v214 = v2;
  v30 = (int *)v26;
  sub_10005972C(a1 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80)), (uint64_t)&v206 - v28, type metadata accessor for AccessoryInfoResponseContent);
  sub_10000F9B8((uint64_t)&v29[v30[6]], (uint64_t)v15, &qword_1010FBA50);
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v32 = (int *)v16;
  if (v31(v15, 1, v16) == 1)
  {
    sub_1000126B0((uint64_t)v29, type metadata accessor for AccessoryInfoResponseContent);
    v33 = &qword_1010FBA50;
    v34 = (uint64_t)v15;
LABEL_6:
    sub_100004048(v34, v33);
    return 0;
  }
  v35 = (_QWORD *)v220;
  sub_1000126EC((uint64_t)v15, v220, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  v211 = v30;
  sub_10000F9B8((uint64_t)&v29[v30[7]], (uint64_t)v10, &qword_1010FBA48);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v221) == 1)
  {
    sub_1000126B0((uint64_t)v35, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    sub_1000126B0((uint64_t)v29, type metadata accessor for AccessoryInfoResponseContent);
    v33 = &qword_1010FBA48;
    v34 = (uint64_t)v10;
    goto LABEL_6;
  }
  v37 = v218;
  sub_1000126EC((uint64_t)v10, v218, type metadata accessor for AccessoryInfoResponseContent.Assets);
  if (*((_QWORD *)v29 + 9) == 2)
  {
    sub_1000126B0(v37, type metadata accessor for AccessoryInfoResponseContent.Assets);
    sub_1000126B0((uint64_t)v35, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    sub_1000126B0((uint64_t)v29, type metadata accessor for AccessoryInfoResponseContent);
    return 0;
  }
  v209 = *((_QWORD *)v29 + 9);
  v210 = *((_DWORD *)v29 + 20);
  if (qword_1010EA120 != -1)
    goto LABEL_88;
  while (1)
  {
    v38 = type metadata accessor for Logger(0);
    v39 = sub_10001A9E8(v38, (uint64_t)qword_1011B7B28);
    v40 = sub_10005972C((uint64_t)v29, (uint64_t)v25, type metadata accessor for AccessoryInfoResponseContent);
    v208 = v39;
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter(v41);
    v43 = os_log_type_enabled(v41, v42);
    v212 = v29;
    v44 = v219;
    if (v43)
    {
      v213 = v41;
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = swift_slowAlloc(32, -1);
      v225[0] = v46;
      *(_DWORD *)v45 = 136315138;
      v207 = v45 + 4;
      v47 = sub_1004FD880();
      v223 = (char *)sub_100016940(v47, v48, v225);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, &v224, v207, v45 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v25, type metadata accessor for AccessoryInfoResponseContent);
      v49 = v213;
      _os_log_impl((void *)&_mh_execute_header, v213, v42, "Product info content: %s", v45, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      v44 = v219;
      swift_slowDealloc(v45, -1, -1);

    }
    else
    {
      sub_1000126B0((uint64_t)v25, type metadata accessor for AccessoryInfoResponseContent);

    }
    if (qword_1010EA198 != -1)
      swift_once(&qword_1010EA198, sub_100ACDE4C);
    v50 = (void *)qword_1011B7C08;
    v51 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
    v52 = objc_msgSend(v51, "isInternalBuild");

    if (v52)
    {
      v53 = String._bridgeToObjectiveC()();
      v54 = objc_msgSend(v50, "BOOLForKey:", v53);

    }
    else
    {
      v54 = 0;
    }
    v55 = (uint64_t)v212;
    v56 = (uint64_t)v217;
    v57 = objc_msgSend(objc_allocWithZone((Class)SPDiscoveredAccessoryProductInformation), "init");
    v58 = v57;
    if (*(_BYTE *)(v55 + 8))
      v59 = 0;
    else
      v59 = *(_QWORD *)v55;
    -[NSObject setBeaconGroupVersion:](v57, "setBeaconGroupVersion:", v59);
    sub_10005972C(v55, (uint64_t)v22, type metadata accessor for AccessoryInfoResponseContent);
    if (v54)
    {
      sub_1000126B0((uint64_t)v22, type metadata accessor for AccessoryInfoResponseContent);
      v60 = 1;
    }
    else
    {
      v61 = v22[32];
      sub_1000126B0((uint64_t)v22, type metadata accessor for AccessoryInfoResponseContent);
      v60 = v61 & 1;
    }
    -[NSObject setEligibleForPairing:](v58, "setEligibleForPairing:", v60);
    -[NSObject setHidden:](v58, "setHidden:", *(_BYTE *)(v55 + 36) & 1);
    -[NSObject setIsHELEAccessory:](v58, "setIsHELEAccessory:", *(_BYTE *)(v55 + 33) & 1);
    -[NSObject setSupportBeaconGroupInfo:](v58, "setSupportBeaconGroupInfo:", *(_BYTE *)(v55 + 35) & 1);
    -[NSObject setIsManagedAccessory:](v58, "setIsManagedAccessory:", *(_BYTE *)(v55 + 34) & 1);
    swift_bridgeObjectRetain(*(_QWORD *)(v55 + 24));
    v62 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    -[NSObject setFindmyProductId:](v58, "setFindmyProductId:", v62);

    swift_bridgeObjectRetain(v35[3]);
    v63 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    -[NSObject setManufacturerName:](v58, "setManufacturerName:", v63);

    swift_bridgeObjectRetain(v35[5]);
    v64 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    -[NSObject setModelName:](v58, "setModelName:", v64);

    if (v35[1])
    {
      swift_bridgeObjectRetain(v35[1]);
      v65 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      v65 = 0;
    }
    v213 = v58;
    -[NSObject setAppBundleIdentifier:](v58, "setAppBundleIdentifier:", v65);

    sub_10000F9B8((uint64_t)v35 + v32[10], (uint64_t)v44, &qword_1010FBA40);
    v66 = type metadata accessor for URL(0);
    v67 = *(_QWORD *)(v66 - 8);
    v68 = *(unsigned int (**)(id, uint64_t, uint64_t))(v67 + 48);
    v70 = 0;
    if (v68(v44, 1, v66) != 1)
    {
      URL._bridgeToObjectiveC()(v69);
      v70 = v71;
      (*(void (**)(id, uint64_t))(v67 + 8))(v44, v66);
    }
    -[NSObject setLowBatteryInfoURL:](v213, "setLowBatteryInfoURL:", v70);

    sub_10000F9B8((uint64_t)v35 + v32[11], v56, &qword_1010FBA40);
    if (v68((id)v56, 1, v66) == 1)
    {
      v73 = 0;
    }
    else
    {
      URL._bridgeToObjectiveC()(v72);
      v73 = v74;
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v56, v66);
    }
    v75 = v213;
    -[NSObject setDisableURL:](v213, "setDisableURL:", v73);

    swift_bridgeObjectRetain(*(_QWORD *)&v212[v211[8] + 8]);
    v76 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    -[NSObject setVersion:](v75, "setVersion:", v76);

    v77 = (double *)((char *)v35 + v32[12]);
    v78 = *v77;
    if (*((_BYTE *)v77 + 8))
      v78 = 0.0;
    -[NSObject setTxPower:](v75, "setTxPower:", v78);
    -[NSObject setCapabilities:](v75, "setCapabilities:", sub_1004F7A0C(v209 & 0xFFFFFFFF01010101, v210));
    URL._bridgeToObjectiveC()(v79);
    v81 = v80;
    -[NSObject setDefaultHeroIcon:](v75, "setDefaultHeroIcon:", v80);

    v82 = (int *)v221;
    URL._bridgeToObjectiveC()((NSURL *)*(int *)(v221 + 20));
    v84 = v83;
    -[NSObject setDefaultListIcon:](v75, "setDefaultListIcon:", v83);

    URL._bridgeToObjectiveC()((NSURL *)v82[6]);
    v86 = v85;
    -[NSObject setDefaultHeroIcon2x:](v75, "setDefaultHeroIcon2x:", v85);

    URL._bridgeToObjectiveC()((NSURL *)v82[7]);
    v88 = v87;
    -[NSObject setDefaultListIcon2x:](v75, "setDefaultListIcon2x:", v87);

    URL._bridgeToObjectiveC()((NSURL *)v82[8]);
    v90 = v89;
    -[NSObject setDefaultHeroIcon3x:](v75, "setDefaultHeroIcon3x:", v89);

    URL._bridgeToObjectiveC()((NSURL *)v82[9]);
    v92 = v91;
    -[NSObject setDefaultListIcon3x:](v75, "setDefaultListIcon3x:", v91);

    v93 = *(_QWORD *)((char *)v35 + v32[13] + 8);
    v94 = *(_QWORD *)((char *)v35 + v32[14]);
    v95 = (double *)((char *)v35 + v32[17]);
    v96 = -1.0;
    v97 = -1.0;
    v98 = -1.0;
    if (((_BYTE)v95[2] & 1) == 0)
    {
      v98 = *v95;
      v97 = v95[1];
    }
    v219 = (char *)objc_allocWithZone((Class)SPUnknownProductMetadata);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v94);
    v99 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    URL._bridgeToObjectiveC()(v101);
    v103 = v102;
    URL._bridgeToObjectiveC()(v104);
    v106 = v105;
    URL._bridgeToObjectiveC()(v107);
    v109 = v108;
    v110 = objc_msgSend(v219, "initWithTitle:description:percentageX:percentageY:image:image2x:image3x:", v99, isa, v103, v106, v108, v98, v97);

    -[NSObject setLearnModeMetadata:](v213, "setLearnModeMetadata:", v110);
    v111 = *(_QWORD *)(v220 + v32[15] + 8);
    v112 = *(_QWORD *)(v220 + v32[16]);
    v113 = v220 + v32[18];
    v114 = -1.0;
    if ((*(_BYTE *)(v113 + 16) & 1) == 0)
    {
      v114 = *(double *)v113;
      v96 = *(double *)(v113 + 8);
    }
    v115 = objc_allocWithZone((Class)SPUnknownProductMetadata);
    swift_bridgeObjectRetain(v111);
    swift_bridgeObjectRetain(v112);
    v116 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v117 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    URL._bridgeToObjectiveC()(v118);
    v120 = v119;
    URL._bridgeToObjectiveC()(v121);
    v123 = v122;
    URL._bridgeToObjectiveC()(v124);
    v126 = v125;
    v127 = objc_msgSend(v115, "initWithTitle:description:percentageX:percentageY:image:image2x:image3x:", v116, v117, v120, v123, v125, v114, v96);

    v25 = v213;
    -[NSObject setDisableMetadata:](v213, "setDisableMetadata:", v127);

    v29 = v212;
    v129 = *(char **)&v212[v211[11]];
    v130 = v214;
    if (v129)
    {
      v131 = *((_QWORD *)v129 + 2);
      if (v131)
      {
        v225[0] = (uint64_t)_swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v129);
        specialized ContiguousArray.reserveCapacity(_:)(v131);
        v132 = 0;
        v217 = v129;
        do
        {
          v137 = v129[v132 + 32];
          v138 = *(_QWORD *)&v129[v132 + 48];
          v139 = *(_QWORD *)&v129[v132 + 64];
          v140 = *(_QWORD *)&v129[v132 + 80];
          v219 = *(char **)&v129[v132 + 72];
          LODWORD(v221) = v129[v132 + 88];
          v141 = objc_allocWithZone((Class)SPAccessoryLayoutTemplate);
          swift_bridgeObjectRetain(v140);
          swift_bridgeObjectRetain(v138);
          v142 = objc_msgSend(v141, "init", swift_bridgeObjectRetain(v139).n128_f64[0]);
          objc_msgSend(v142, "setPartIdentifier:", v137);
          v143 = String._bridgeToObjectiveC()();
          objc_msgSend(v142, "setPartType:", v143);

          v144 = String._bridgeToObjectiveC()();
          objc_msgSend(v142, "setPartName:", v144);

          if (v140)
          {
            swift_bridgeObjectRetain(v140);
            v133 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            v133 = 0;
          }
          objc_msgSend(v142, "setPartSymbol:", v133);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          objc_msgSend(v142, "setIsPrimary:", v221 & 1);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v134);
          v135 = *(_QWORD *)(v225[0] + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v135);
          v136 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v135, v142);
          specialized ContiguousArray._endMutation()(v136);
          v132 += 64;
          --v131;
          v129 = v217;
        }
        while (v131);
        swift_bridgeObjectRelease();
        v29 = v212;
        v25 = v213;
        v130 = v214;
      }
      sub_10000F4A0(0, (unint64_t *)&qword_1010FBA58, SPAccessoryLayoutTemplate_ptr);
      v145 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      -[NSObject setLayoutTemplate:](v25, "setLayoutTemplate:", v145);

    }
    if ((*(_BYTE *)(v220 + 72) & 1) != 0)
    {
      v146 = Logger.logObject.getter(v128);
      v147 = static os_log_type_t.default.getter(v146);
      v148 = os_log_type_enabled(v146, v147);
      v149 = v218;
      if (v148)
      {
        v150 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v150 = 0;
        _os_log_impl((void *)&_mh_execute_header, v146, v147, "No defaultRole provided. Fallback to custom role.", v150, 2u);
        swift_slowDealloc(v150, -1, -1);
      }

      v152 = v215;
      v151 = v216;
      (*((void (**)(char *, _QWORD, uint64_t))v216 + 13))(v215, enum case for LocalizationUtility.Table.default(_:), v130);
      static LocalizationUtility.localizedString(key:table:)(0xD000000000000010, 0x8000000100ED6470, v152);
      (*((void (**)(char *, uint64_t))v151 + 1))(v152, v130);
      v153 = objc_allocWithZone((Class)SPBeaconRole);
      v154 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v155 = String._bridgeToObjectiveC()();
      v156 = objc_msgSend(v153, "initWithRoleId:role:roleEmoji:", 999, v154, v155);

      -[NSObject setDefaultRole:](v25, "setDefaultRole:", v156);
      sub_1000126B0(v149, type metadata accessor for AccessoryInfoResponseContent.Assets);
      v157 = v220;
      goto LABEL_76;
    }
    v22 = *(char **)(v220 + 64);
    v158 = v218;
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v159 = sub_100C1AF0C(v225[0]);
    swift_bridgeObjectRelease();
    v160 = *(_QWORD *)(v159 + 16);
    if (!v160)
      break;
    v161 = 0;
    v32 = (int *)(v159 + 32);
    v35 = (_QWORD *)v220;
    while (v161 < *(_QWORD *)(v159 + 16))
    {
      v170 = *(_QWORD *)&v32[8 * v161 + 6];
      v171 = *(_QWORD *)(v170 + 16);
      if (v171)
      {
        if (*(char **)(v170 + 32) == v22)
        {
          v162 = (uint64_t *)(v170 + 64);
          v163 = (uint64_t *)(v170 + 48);
LABEL_58:
          v164 = *v163;
          v165 = *v162;
          swift_bridgeObjectRetain(*v163);
          swift_bridgeObjectRetain(v165);
          v166 = objc_allocWithZone((Class)SPBeaconRole);
          swift_bridgeObjectRetain(v164);
          swift_bridgeObjectRetain(v165);
          v167 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          v168 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          v169 = objc_msgSend(v166, "initWithRoleId:role:roleEmoji:", v22, v167, v168);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          v25 = v213;
          -[NSObject setDefaultRole:](v213, "setDefaultRole:", v169);

          v29 = v212;
          v35 = (_QWORD *)v220;
        }
        else if (v171 != 1)
        {
          v162 = (uint64_t *)(v170 + 104);
          v172 = 1;
          while (1)
          {
            v173 = v172 + 1;
            if (__OFADD__(v172, 1))
              break;
            if ((char *)*(v162 - 4) == v22)
            {
              v163 = v162 - 2;
              goto LABEL_58;
            }
            v162 += 5;
            ++v172;
            if (v173 == v171)
              goto LABEL_59;
          }
          __break(1u);
          break;
        }
      }
LABEL_59:
      if (++v161 == v160)
      {
        swift_bridgeObjectRelease();
        v158 = v218;
        goto LABEL_72;
      }
    }
    __break(1u);
LABEL_88:
    swift_once(&qword_1010EA120, sub_100A34180);
  }
  swift_bridgeObjectRelease();
  v35 = (_QWORD *)v220;
LABEL_72:
  v174 = (uint64_t *)&v29[v211[9]];
  v175 = v174[1];
  if (!v175)
  {
    sub_1000126B0(v158, type metadata accessor for AccessoryInfoResponseContent.Assets);
    v157 = (uint64_t)v35;
LABEL_76:
    sub_1000126B0(v157, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    v190 = (uint64_t)v29;
    goto LABEL_85;
  }
  v177 = v174[4];
  v178 = v174[5];
  v179 = (char *)v174[2];
  v180 = v174[3];
  v225[0] = *v174;
  v176 = v225[0];
  v225[1] = v175;
  v225[2] = (uint64_t)v179;
  v225[3] = v180;
  v225[4] = v177;
  v225[5] = v178;
  swift_bridgeObjectRetain_n(v175, 2);
  swift_bridgeObjectRetain_n(v180, 2);
  swift_bridgeObjectRetain_n(v178, 2);
  v219 = v179;
  v181 = sub_100433FB4(v176, v175, (uint64_t)v179, v180, v177, v178);
  v182 = Logger.logObject.getter(v181);
  v183 = static os_log_type_t.info.getter(v182);
  v184 = os_log_type_enabled(v182, v183);
  v221 = v177;
  if (v184)
  {
    v185 = (uint8_t *)swift_slowAlloc(12, -1);
    v217 = (char *)swift_slowAlloc(32, -1);
    v223 = v217;
    *(_DWORD *)v185 = 136315138;
    v216 = v185 + 4;
    swift_bridgeObjectRetain(v175);
    swift_bridgeObjectRetain(v180);
    swift_bridgeObjectRetain(v178);
    v186 = sub_1004FC0BC();
    v188 = v187;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v222 = sub_100016940(v186, v188, (uint64_t *)&v223);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, &v223, v216, v185 + 12);
    swift_bridgeObjectRelease_n(v178, 2);
    swift_bridgeObjectRelease_n(v180, 2);
    swift_bridgeObjectRelease_n(v175, 2);
    v25 = v213;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v182, v183, "Received public keys from server: %s", v185, 0xCu);
    v189 = v217;
    swift_arrayDestroy(v217, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v189, -1, -1);
    swift_slowDealloc(v185, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v178, 2);
    swift_bridgeObjectRelease_n(v180, 2);
    swift_bridgeObjectRelease_n(v175, 2);
  }
  v191 = Data.init(base64Encoded:options:)(v176, v175, 0);
  v193 = 0;
  if (v192 >> 60 != 15)
  {
    v194 = v191;
    v195 = v192;
    v193 = Data._bridgeToObjectiveC()().super.isa;
    sub_10001EF3C(v194, v195);
  }
  -[NSObject setEncryptionKeyE1:](v25, "setEncryptionKeyE1:", v193);

  v196 = Data.init(base64Encoded:options:)(v219, v180, 0);
  v198 = 0;
  v199 = v218;
  if (v197 >> 60 != 15)
  {
    v200 = v196;
    v201 = v197;
    v198 = Data._bridgeToObjectiveC()().super.isa;
    sub_10001EF3C(v200, v201);
  }
  -[NSObject setEncryptionKeyE2:](v25, "setEncryptionKeyE2:", v198);

  v202 = Data.init(base64Encoded:options:)(v221, v178, 0);
  v204 = v203;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v205 = 0;
  if (v204 >> 60 != 15)
  {
    v205 = Data._bridgeToObjectiveC()().super.isa;
    sub_10001EF3C(v202, v204);
  }
  -[NSObject setVerificationKeyS2:](v25, "setVerificationKeyS2:", v205);

  sub_1000126B0(v199, type metadata accessor for AccessoryInfoResponseContent.Assets);
  sub_1000126B0(v220, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  v190 = (uint64_t)v212;
LABEL_85:
  sub_1000126B0(v190, type metadata accessor for AccessoryInfoResponseContent);
  return v25;
}

double sub_100432F30@<D0>(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  id v10;
  id v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  double result;
  uint64_t v15;
  _BYTE v16[24];

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = objc_msgSend(a2, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v10);

  swift_beginAccess(a1 + 56, v16, 33, 0);
  v11 = a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a1 + 56));
  v15 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0x8000000000000000;
  sub_10010CF80((uint64_t)v11, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a1 + 56) = v15;
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  swift_endAccess(v16);
  swift_beginAccess(a1 + 32, v16, 0, 0);
  v13 = *(_QWORD *)(a1 + 32);
  *a3 = v13;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v13).n128_u64[0];
  return result;
}

void sub_10043306C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  _BYTE v5[16];
  id *v6;
  uint64_t v7;
  id v8;

  v8 = 0;
  v6 = &v8;
  v7 = a1;
  v1 = sub_10001A9A8((uint64_t *)&unk_1010FB770);
  v2 = OS_dispatch_queue.sync<A>(execute:)(sub_1004335FC, v5, v1);
  if (v8)
  {
    __chkstk_darwin(v2);
    v4 = v3;
    os_activity(name:block:)("LostAccessory", 13, 2, sub_100433618);
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
  }

}

double sub_100433154@<D0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  double result;
  _BYTE v18[24];

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a3
                                                              + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier"));
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

  swift_beginAccess(a2 + 56, v18, 33, 0);
  v13 = sub_100103CF8((uint64_t)v11);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  swift_endAccess(v18);
  v14 = *a1;
  *a1 = (void *)v13;

  swift_beginAccess(a2 + 32, v18, 0, 0);
  v15 = *(_QWORD *)(a2 + 32);
  *a4 = v15;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v15).n128_u64[0];
  return result;
}

uint64_t sub_100433278@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 32, v5, 0, 0);
  v3 = *(_QWORD *)(v1 + 32);
  *a1 = v3;
  return swift_bridgeObjectRetain(v3);
}

void sub_1004332C4()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(id *)(v0 + 24);
  sub_100433310(v1, (uint64_t)v2);

}

void sub_100433310(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];
  void *v32;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = sub_10001A9A8(&qword_1010EF800);
    v7 = sub_1000193A4((unint64_t *)&qword_1010FB780, &qword_1010EF800, (const char *)&protocol conformance descriptor for XPCSession<A>);
    v8 = Set.Iterator.init(_cocoa:)(v31, v5, v6, v7);
    v3 = v31[0];
    v29 = v31[1];
    v9 = v31[2];
    v10 = v31[3];
    v11 = v31[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v29 = a1 + 56;
    v9 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v10 = 0;
  }
  v15 = (unint64_t)(v9 + 64) >> 6;
  while (v3 < 0)
  {
    v19 = __CocoaSet.Iterator.next()(v8);
    if (!v19)
      goto LABEL_38;
    v20 = v19;
    v30 = v19;
    swift_unknownObjectRetain(v19);
    v21 = sub_10001A9A8(&qword_1010EF800);
    swift_dynamicCast(&v32, &v30, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
    v22 = v32;
    swift_unknownObjectRelease(v20);
    v18 = v10;
    v16 = v11;
    if (!v22)
      goto LABEL_38;
LABEL_36:
    XPCSession.proxy.getter(&v32);
    v27 = v32;
    if (v32)
    {
      v28 = (void *)_convertErrorToNSError(_:)(a2);
      objc_msgSend(v27, "accessoryDiscoveryError:", v28);
      swift_release();

      v8 = (_QWORD *)swift_unknownObjectRelease(v27);
    }
    else
    {
      v8 = (_QWORD *)swift_release();
    }
    v10 = v18;
    v11 = v16;
  }
  if (v11)
  {
    v16 = (v11 - 1) & v11;
    v17 = __clz(__rbit64(v11)) | (v10 << 6);
    v18 = v10;
LABEL_35:
    v26 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v17);
    swift_retain();
    if (!v26)
      goto LABEL_38;
    goto LABEL_36;
  }
  v23 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v23 >= v15)
      goto LABEL_38;
    v24 = *(_QWORD *)(v29 + 8 * v23);
    v18 = v10 + 1;
    if (!v24)
    {
      v18 = v10 + 2;
      if (v10 + 2 >= v15)
        goto LABEL_38;
      v24 = *(_QWORD *)(v29 + 8 * v18);
      if (!v24)
      {
        v18 = v10 + 3;
        if (v10 + 3 >= v15)
          goto LABEL_38;
        v24 = *(_QWORD *)(v29 + 8 * v18);
        if (!v24)
        {
          v18 = v10 + 4;
          if (v10 + 4 >= v15)
            goto LABEL_38;
          v24 = *(_QWORD *)(v29 + 8 * v18);
          if (!v24)
          {
            v18 = v10 + 5;
            if (v10 + 5 >= v15)
              goto LABEL_38;
            v24 = *(_QWORD *)(v29 + 8 * v18);
            if (!v24)
            {
              v25 = v10 + 6;
              while (v15 != v25)
              {
                v24 = *(_QWORD *)(v29 + 8 * v25++);
                if (v24)
                {
                  v18 = v25 - 1;
                  goto LABEL_34;
                }
              }
LABEL_38:
              sub_10007CC38(v3);
              return;
            }
          }
        }
      }
    }
LABEL_34:
    v16 = (v24 - 1) & v24;
    v17 = __clz(__rbit64(v24)) + (v18 << 6);
    goto LABEL_35;
  }
  __break(1u);
}

double sub_1004335FC@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100433154(*(void ***)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

void sub_100433618()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(id *)(v0 + 24);
  sub_10043366C(v1, (uint64_t)v2, (SEL *)&selRef_lostAccessory_);

}

void sub_10043366C(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  id v34;

  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = sub_10001A9A8(&qword_1010EF800);
    v9 = sub_1000193A4((unint64_t *)&qword_1010FB780, &qword_1010EF800, (const char *)&protocol conformance descriptor for XPCSession<A>);
    v10 = Set.Iterator.init(_cocoa:)(v33, v7, v8, v9);
    v5 = v33[0];
    v31 = v33[1];
    v11 = v33[2];
    v12 = v33[3];
    v13 = v33[4];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(a1 + 32);
    v31 = a1 + 56;
    v15 = ~v14;
    v16 = -v14;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v13 = v17 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v11 = v15;
    v12 = 0;
  }
  v30 = (unint64_t)(v11 + 64) >> 6;
  while (v5 < 0)
  {
    v21 = __CocoaSet.Iterator.next()(v10);
    if (!v21)
      goto LABEL_38;
    v22 = v21;
    v32 = v21;
    swift_unknownObjectRetain(v21);
    v23 = sub_10001A9A8(&qword_1010EF800);
    swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
    v24 = v34;
    swift_unknownObjectRelease(v22);
    v20 = v12;
    v18 = v13;
    if (!v24)
      goto LABEL_38;
LABEL_36:
    XPCSession.proxy.getter(&v34);
    v29 = v34;
    if (v34)
    {
      objc_msgSend(v34, *a3, a2);
      swift_release();
      v10 = (_QWORD *)swift_unknownObjectRelease(v29);
    }
    else
    {
      v10 = (_QWORD *)swift_release();
    }
    v12 = v20;
    v13 = v18;
  }
  if (v13)
  {
    v18 = (v13 - 1) & v13;
    v19 = __clz(__rbit64(v13)) | (v12 << 6);
    v20 = v12;
LABEL_35:
    v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
    swift_retain();
    if (!v28)
      goto LABEL_38;
    goto LABEL_36;
  }
  v25 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v25 >= v30)
      goto LABEL_38;
    v26 = *(_QWORD *)(v31 + 8 * v25);
    v20 = v12 + 1;
    if (!v26)
    {
      v20 = v12 + 2;
      if (v12 + 2 >= v30)
        goto LABEL_38;
      v26 = *(_QWORD *)(v31 + 8 * v20);
      if (!v26)
      {
        v20 = v12 + 3;
        if (v12 + 3 >= v30)
          goto LABEL_38;
        v26 = *(_QWORD *)(v31 + 8 * v20);
        if (!v26)
        {
          v20 = v12 + 4;
          if (v12 + 4 >= v30)
            goto LABEL_38;
          v26 = *(_QWORD *)(v31 + 8 * v20);
          if (!v26)
          {
            v20 = v12 + 5;
            if (v12 + 5 >= v30)
              goto LABEL_38;
            v26 = *(_QWORD *)(v31 + 8 * v20);
            if (!v26)
            {
              v27 = v12 + 6;
              while (v30 != v27)
              {
                v26 = *(_QWORD *)(v31 + 8 * v27++);
                if (v26)
                {
                  v20 = v27 - 1;
                  goto LABEL_34;
                }
              }
LABEL_38:
              sub_10007CC38(v5);
              return;
            }
          }
        }
      }
    }
LABEL_34:
    v18 = (v26 - 1) & v26;
    v19 = __clz(__rbit64(v26)) + (v20 << 6);
    goto LABEL_35;
  }
  __break(1u);
}

uint64_t sub_100433964()
{
  return sub_100007774(33);
}

uint64_t sub_10043396C(void (*a1)(_QWORD **), uint64_t a2)
{
  uint64_t v2;

  return sub_10042B790(a1, a2, *(char **)(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned __int8 *)(v2 + 32));
}

uint64_t sub_100433978()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10043399C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1004339D8(uint64_t a1)
{
  uint64_t v1;

  return sub_10042E51C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void (**)(uint64_t *))(v1 + 32), *(_QWORD *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(void **)(v1 + 56));
}

void sub_1004339EC(uint64_t a1)
{
  uint64_t v1;

  sub_10042F6C0(a1, *(void **)(v1 + 16));
}

uint64_t sub_1004339F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v2 = sub_10001A9A8(&qword_1010FBA68);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1;
  v6 = swift_allocObject(&unk_101076060, 24, 7);
  *(_QWORD *)(v6 + 16) = &off_10104A660;
  v7 = swift_retain();
  v8 = static Subscribers.Demand.unlimited.getter(v7);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
  v10 = type metadata accessor for Peripheral(0);
  v11 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v8, sub_100433FF0, v6, v9, v10, v9, v11, v11);
  swift_release();
  swift_release();
  v12 = sub_1000193A4((unint64_t *)&unk_1010FBA70, &qword_1010FBA68, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v13 = Publisher.eraseToAnyPublisher()(v2, v12);
  v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v5, v2);
  v21 = v13;
  v15 = swift_allocObject(&unk_101076088, 24, 7);
  *(_QWORD *)(v15 + 16) = &off_10104A690;
  v16 = swift_retain();
  v17 = static Subscribers.Demand.unlimited.getter(v16);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v17, sub_100433FF8, v15, v9, v10, v9, v11, v11);
  swift_release();
  swift_release();
  v18 = Publisher.eraseToAnyPublisher()(v2, v12);
  swift_release();
  v14(v5, v2);
  return v18;
}

uint64_t sub_100433C08(void (*a1)(_BYTE *), uint64_t a2)
{
  uint64_t v2;

  return sub_1007C5A84(a1, a2, v2);
}

uint64_t sub_100433C10()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100433C34@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *(_BYTE *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v5 = *a1;
  v6 = a1[1];
  *(_BYTE *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  swift_retain();
  return sub_10001BBBC(v5, v6);
}

void sub_100433C74(BOOL *a1@<X8>)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 80))
    *a1 = 0;
  else
    *a1 = *(_QWORD *)(v1 + 88) == 0;
}

uint64_t sub_100433C98@<X0>(char **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000E0114(a1, a2);
}

uint64_t sub_100433CB0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100433CD4()
{
  uint64_t *v0;

  return sub_10042A0EC(v0[2], v0[3], v0[4]);
}

uint64_t sub_100433CF0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_10042B3D0(*a1, 1);
  *a2 = result;
  return result;
}

uint64_t sub_100433D1C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_10042A59C(a1, v2, (uint64_t)&unk_101075F98, (uint64_t)sub_100433DD8, (uint64_t)&unk_101075FC0, (uint64_t)sub_100433E04, a2);
}

void sub_100433D54(uint64_t a1)
{
  uint64_t v1;

  sub_10042A768(a1, v1);
}

uint64_t sub_100433D5C(void **a1)
{
  uint64_t v1;

  return sub_10042ACBC(a1, v1);
}

double sub_100433D64@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100432F30(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), a1);
}

void sub_100433D7C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(id *)(v0 + 24);
  sub_10043366C(v1, (uint64_t)v2, (SEL *)&selRef_discoveredAccessory_);

}

uint64_t sub_100433DD0()
{
  return sub_100007774(32);
}

uint64_t sub_100433DD8(void (*a1)(_QWORD), uint8_t *a2)
{
  uint64_t v2;

  return sub_10042FA60(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100433DE0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100433E08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for AccessoryMetadata(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  sub_10001BC14(*(_QWORD *)(v7 + *(int *)(v1 + 20)), *(_QWORD *)(v7 + *(int *)(v1 + 20) + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100433ED8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(type metadata accessor for AccessoryMetadata(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v8 = (_QWORD *)swift_task_alloc(dword_1010FBA0C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004C28;
  v8[3] = v6;
  v8[4] = v7;
  v8[2] = a1;
  return swift_task_switch(sub_10043022C, 0, 0);
}

uint64_t sub_100433F74(uint64_t a1)
{
  uint64_t v1;

  return sub_100430398(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_100433F98(uint64_t a1)
{
  uint64_t v1;

  return sub_100430644(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100433FA8(uint64_t a1)
{
  uint64_t v1;

  return sub_100430A8C(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100433FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a6);
  }
  return result;
}

uint64_t sub_100433FF0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_10042AE84(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_100433FF8@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_10042B128(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_100434008@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_100788E88(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100434020@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100428B7C(v1, a1);
}

uint64_t sub_100434038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010F9890) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = type metadata accessor for MACAddress(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  swift_release();
  return swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1004340EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100434134(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010F9890) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_100428CB8(a1, v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100434188@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10042A06C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1004341A0()
{
  uint64_t v0;

  return sub_10042917C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1004341B8@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_10042B3D0(*a1, 0);
  *a2 = result;
  return result;
}

uint64_t sub_1004341E4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_10042A59C(a1, v2, (uint64_t)&unk_101076150, (uint64_t)sub_10043430C, (uint64_t)&unk_101076178, (uint64_t)sub_100433E04, a2);
}

void sub_10043421C(uint64_t a1)
{
  uint64_t v1;

  sub_1004295B4(a1, v1);
}

uint64_t sub_100434224()
{
  return sub_100007774(32);
}

id sub_10043422C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v5;

  v5 = *(id *)(v2 + 16);
  objc_msgSend(v5, "setProductInformation:", *a1);
  *a2 = v5;
  return v5;
}

uint64_t sub_100434274@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_100428064(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_10043428C()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 112) = 1;
}

uint64_t sub_100434298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 80) = 0;
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 88) = 0;
  return swift_release(v2);
}

void sub_1004342D0(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 112);
}

uint64_t sub_1004342E0@<X0>(_BYTE *a1@<X8>)
{
  return sub_100434008(a1);
}

void sub_100434310()
{
  sub_10043428C();
}

uint64_t sub_100434324(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  char v18;
  char v19;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010FBBC8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100435950();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeyDropDeleteRequest.DeleteRequestContent.CodingKeys, &type metadata for KeyDropDeleteRequest.DeleteRequestContent.CodingKeys, v11, v9, v10);
  v19 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v19, v5, v12, v13);
  if (!v2)
  {
    v18 = *(_BYTE *)(v3 + *(int *)(type metadata accessor for KeyDropDeleteRequest.DeleteRequestContent(0) + 20));
    v17 = 1;
    v14 = sub_100435994();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, &type metadata for OwnSubmitPayloadTypes.ShareType, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10043448C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v25 = a2;
  v29 = type metadata accessor for UUID(0);
  v26 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v27 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = sub_10001A9A8(&qword_1010FBBE0);
  v5 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for KeyDropDeleteRequest.DeleteRequestContent(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v12);
  v13 = sub_100435950();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KeyDropDeleteRequest.DeleteRequestContent.CodingKeys, &type metadata for KeyDropDeleteRequest.DeleteRequestContent.CodingKeys, v13, v12, v11);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v23 = a1;
  v24 = v5;
  v14 = (uint64_t)v10;
  v15 = v26;
  BYTE1(v31) = 0;
  v16 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v18 = v27;
  v17 = v28;
  v19 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v27, v29, (char *)&v31 + 1, v28, v29, v16);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v15 + 32))(v14, v18, v19);
  v30 = 1;
  v20 = sub_1004359D8();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for OwnSubmitPayloadTypes.ShareType, &v30, v17, &type metadata for OwnSubmitPayloadTypes.ShareType, v20);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v17);
  *(_BYTE *)(v14 + *(int *)(v8 + 20)) = v31;
  sub_100435A1C(v14, v25);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v23);
  return sub_100435518(v14);
}

uint64_t sub_100434714()
{
  _BYTE *v0;

  if (*v0)
    return 1701869940;
  else
    return 0x64496572616873;
}

uint64_t sub_100434748@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100435D78(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10043476C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100435950();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100434794(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100435950();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004347BC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10043448C(a1, a2);
}

uint64_t sub_1004347D0(_QWORD *a1)
{
  return sub_100434324(a1);
}

uint64_t sub_1004347E4()
{
  return 0x746C75736572;
}

uint64_t sub_1004347F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x746C75736572 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease(0xE600000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746C75736572, 0xE600000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100434884(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10043590C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004348AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10043590C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004348D4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;

  v5 = sub_10001A9A8(&qword_1010FBBB8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10043590C();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KeyDropDeleteResponse.CodingKeys, &type metadata for KeyDropDeleteResponse.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  *a2 = v13 & 1;
  return result;
}

uint64_t sub_1004349E8(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_10001A9A8(&qword_1010FBBF0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  v10 = sub_10043590C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeyDropDeleteResponse.CodingKeys, &type metadata for KeyDropDeleteResponse.CodingKeys, v10, v8, v9);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v11, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100434AD0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_BYTE *)(v3 + 176) = a2;
  *(_QWORD *)(v3 + 80) = a1;
  *(_QWORD *)(v3 + 88) = v2;
  v4 = type metadata accessor for String.Encoding(0);
  *(_QWORD *)(v3 + 96) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 104) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 112) = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 120) = swift_task_alloc(v7);
  *(_QWORD *)(v3 + 128) = swift_task_alloc(v7);
  return swift_task_switch(sub_100434B64, v2, 0);
}

uint64_t sub_100434B64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  _QWORD *v39;
  uint64_t v41;
  uint64_t *v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t (*v45)(uint64_t, char);
  uint64_t v46[2];

  if (qword_1010EA5F0 != -1)
    swift_once(&qword_1010EA5F0, sub_100D79F3C);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B84B0);
  v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v6 = v43(v2, v1, v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 128);
  v11 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 112);
  if (v9)
  {
    v13 = swift_slowAlloc(22, -1);
    v41 = swift_slowAlloc(32, -1);
    v46[0] = v41;
    *(_DWORD *)v13 = 141558275;
    *(_QWORD *)(v0 + 64) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
    *(_QWORD *)(v0 + 72) = sub_100016940(v15, v16, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Deleting share for id: %{private,mask.hash}s.", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }

  v17 = *(_QWORD *)(v0 + 120);
  v18 = *(unsigned __int8 *)(v0 + 176);
  v43(v17, *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 104));
  v19 = sub_100435278(v17, v18);
  *(_QWORD *)(v0 + 136) = v19;
  *(_QWORD *)(v0 + 144) = v20;
  *(_QWORD *)(v0 + 152) = v21;
  v22 = v19;
  v23 = v20;
  v24 = v21;
  swift_bridgeObjectRetain(v19);
  sub_10001BBBC(v23, v24);
  swift_bridgeObjectRetain(v22);
  v25 = sub_10001BBBC(v23, v24);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.debug.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v42 = (uint64_t *)(v0 + 56);
    v28 = *(_QWORD *)(v0 + 96);
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v46[0] = v30;
    *(_DWORD *)v29 = 136315138;
    swift_bridgeObjectRetain(v22);
    sub_10001BBBC(v23, v24);
    v31 = sub_10001BBBC(v23, v24);
    static String.Encoding.utf8.getter(v31);
    v32 = String.init(data:encoding:)(v23, v24, v28);
    v44 = v30;
    if (v33)
    {
      v34 = v32;
      v35 = v33;
      sub_10001BC14(v23, v24);
      swift_bridgeObjectRelease();
      sub_10001BC14(v23, v24);
    }
    else
    {
      v36 = Logger.logObject.getter(v32);
      v37 = static os_log_type_t.error.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Empty description for request body.", v38, 2u);
        swift_slowDealloc(v38, -1, -1);
      }

      sub_10001BC14(v23, v24);
      swift_bridgeObjectRelease();
      sub_10001BC14(v23, v24);
      v35 = 0xE300000000000000;
      v34 = 7104878;
    }
    *v42 = sub_100016940(v34, v35, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v42, v0 + 64, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(v23, v24);
    swift_bridgeObjectRelease();
    sub_10001BC14(v23, v24);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "KeyDropDeleteRequest: %s", v29, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10001BC14(v23, v24);
    swift_bridgeObjectRelease();
    sub_10001BC14(v23, v24);
  }

  *(_QWORD *)(v0 + 40) = &type metadata for KeyDropDeleteRequest;
  *(_QWORD *)(v0 + 48) = sub_100435498();
  *(_QWORD *)(v0 + 16) = v22;
  *(_QWORD *)(v0 + 24) = v23;
  *(_QWORD *)(v0 + 32) = v24;
  swift_bridgeObjectRetain(v22);
  sub_10001BBBC(v23, v24);
  v45 = (uint64_t (*)(uint64_t, char))((char *)&dword_1011156B8 + dword_1011156B8);
  v39 = (_QWORD *)swift_task_alloc(unk_1011156BC);
  *(_QWORD *)(v0 + 160) = v39;
  *v39 = v0;
  v39[1] = sub_100435100;
  return v45(v0 + 16, 3);
}

uint64_t sub_100435100(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 160);
  *(_QWORD *)(*v2 + 168) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 88);
    v7 = sub_100435200;
  }
  else
  {
    v8 = *(_QWORD *)(v4 + 88);
    *(_BYTE *)(v4 + 177) = a1 & 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v4 + 16));
    v7 = sub_100435188;
    v6 = v8;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_100435188()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRelease();
  sub_10001BC14(v1, v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 177));
}

uint64_t sub_100435200()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRelease();
  sub_10001BC14(v2, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100435278(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE v23[12];
  int v24;
  uint64_t v25;

  v24 = a2;
  v3 = type metadata accessor for KeyDropDeleteRequest.DeleteRequestContent(0);
  __chkstk_darwin(v3);
  v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_100B26BBC(v8);
  v12 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = swift_bridgeObjectRetain(v11);
  JSONEncoder.init()(v13);
  *v10 = sub_1002994E8;
  v10[1] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v6);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v10);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16))(v5, a1, v14);
  v5[*(int *)(v3 + 20)] = v24;
  v16 = sub_100006204(&qword_1010FBB10, type metadata accessor for KeyDropDeleteRequest.DeleteRequestContent, (uint64_t)&unk_100E3D5D8);
  v17 = v25;
  v18 = dispatch thunk of JSONEncoder.encode<A>(_:)(v5, v3, v16);
  if (v17)
  {
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
    sub_100435518((uint64_t)v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = v18;
    v21 = v19;
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
    sub_100435518((uint64_t)v5);
    swift_bridgeObjectRetain(v11);
    sub_10001BBBC(v20, v21);
    swift_bridgeObjectRelease_n(v11, 2);
    sub_10001BC14(v20, v21);
  }
  return v11;
}

unint64_t sub_100435498()
{
  unint64_t result;

  result = qword_1010FBB08;
  if (!qword_1010FBB08)
  {
    result = swift_getWitnessTable(asc_100E3D628, &type metadata for KeyDropDeleteRequest);
    atomic_store(result, (unint64_t *)&qword_1010FBB08);
  }
  return result;
}

uint64_t type metadata accessor for KeyDropDeleteRequest.DeleteRequestContent(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FBB70;
  if (!qword_1010FBB70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KeyDropDeleteRequest.DeleteRequestContent);
  return result;
}

uint64_t sub_100435518(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for KeyDropDeleteRequest.DeleteRequestContent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for KeyDropDeleteError()
{
  return &type metadata for KeyDropDeleteError;
}

uint64_t sub_100435568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100435574);
}

uint64_t sub_100435574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 4)
    return v9 - 3;
  else
    return 0;
}

uint64_t sub_1004355EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004355F8);
}

uint64_t sub_1004355F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 3;
  return result;
}

uint64_t sub_100435670(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E3D438;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for KeyDropDeleteResponse(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyDropDeleteResponse(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1004357CC + 4 * byte_100E3D3B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100435800 + 4 * byte_100E3D3B0[v4]))();
}

uint64_t sub_100435800(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100435808(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100435810);
  return result;
}

uint64_t sub_10043581C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100435824);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100435828(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100435830(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyDropDeleteResponse()
{
  return &type metadata for KeyDropDeleteResponse;
}

ValueMetadata *type metadata accessor for KeyDropDeleteRequest()
{
  return &type metadata for KeyDropDeleteRequest;
}

unint64_t sub_100435860()
{
  unint64_t result;

  result = qword_1010FBBA8;
  if (!qword_1010FBBA8)
  {
    result = swift_getWitnessTable(byte_100E3D5B0, &type metadata for KeyDropDeleteError);
    atomic_store(result, (unint64_t *)&qword_1010FBBA8);
  }
  return result;
}

unint64_t sub_1004358A4(uint64_t a1)
{
  unint64_t result;

  result = sub_1004358C8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1004358C8()
{
  unint64_t result;

  result = qword_1010FBBB0;
  if (!qword_1010FBBB0)
  {
    result = swift_getWitnessTable(byte_100E3D488, &type metadata for KeyDropDeleteRequest);
    atomic_store(result, (unint64_t *)&qword_1010FBBB0);
  }
  return result;
}

unint64_t sub_10043590C()
{
  unint64_t result;

  result = qword_1010FBBC0;
  if (!qword_1010FBBC0)
  {
    result = swift_getWitnessTable(aA_24, &type metadata for KeyDropDeleteResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FBBC0);
  }
  return result;
}

unint64_t sub_100435950()
{
  unint64_t result;

  result = qword_1010FBBD0;
  if (!qword_1010FBBD0)
  {
    result = swift_getWitnessTable(byte_100E3D7C0, &type metadata for KeyDropDeleteRequest.DeleteRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FBBD0);
  }
  return result;
}

unint64_t sub_100435994()
{
  unint64_t result;

  result = qword_1010FBBD8;
  if (!qword_1010FBBD8)
  {
    result = swift_getWitnessTable(aY_37, &type metadata for OwnSubmitPayloadTypes.ShareType);
    atomic_store(result, (unint64_t *)&qword_1010FBBD8);
  }
  return result;
}

unint64_t sub_1004359D8()
{
  unint64_t result;

  result = qword_1010FBBE8;
  if (!qword_1010FBBE8)
  {
    result = swift_getWitnessTable(aI_15, &type metadata for OwnSubmitPayloadTypes.ShareType);
    atomic_store(result, (unint64_t *)&qword_1010FBBE8);
  }
  return result;
}

uint64_t sub_100435A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KeyDropDeleteRequest.DeleteRequestContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for KeyDropDeleteRequest.DeleteRequestContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100435AAC + 4 * byte_100E3D3BF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100435AE0 + 4 * byte_100E3D3BA[v4]))();
}

uint64_t sub_100435AE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100435AE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100435AF0);
  return result;
}

uint64_t sub_100435AFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100435B04);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100435B08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100435B10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyDropDeleteRequest.DeleteRequestContent.CodingKeys()
{
  return &type metadata for KeyDropDeleteRequest.DeleteRequestContent.CodingKeys;
}

uint64_t _s12searchpartyd18KeyDropDeleteErrorOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100435B6C + 4 * byte_100E3D3C4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100435B8C + 4 * byte_100E3D3C9[v4]))();
}

_BYTE *sub_100435B6C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100435B8C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100435B94(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100435B9C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100435BA4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100435BAC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for KeyDropDeleteResponse.CodingKeys()
{
  return &type metadata for KeyDropDeleteResponse.CodingKeys;
}

unint64_t sub_100435BCC()
{
  unint64_t result;

  result = qword_1010FBBF8;
  if (!qword_1010FBBF8)
  {
    result = swift_getWitnessTable(aY_38, &type metadata for KeyDropDeleteResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FBBF8);
  }
  return result;
}

unint64_t sub_100435C14()
{
  unint64_t result;

  result = qword_1010FBC00;
  if (!qword_1010FBC00)
  {
    result = swift_getWitnessTable(byte_100E3D798, &type metadata for KeyDropDeleteRequest.DeleteRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FBC00);
  }
  return result;
}

unint64_t sub_100435C5C()
{
  unint64_t result;

  result = qword_1010FBC08;
  if (!qword_1010FBC08)
  {
    result = swift_getWitnessTable(aI_16, &type metadata for KeyDropDeleteRequest.DeleteRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FBC08);
  }
  return result;
}

unint64_t sub_100435CA4()
{
  unint64_t result;

  result = qword_1010FBC10;
  if (!qword_1010FBC10)
  {
    result = swift_getWitnessTable(a1_11, &type metadata for KeyDropDeleteRequest.DeleteRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FBC10);
  }
  return result;
}

unint64_t sub_100435CEC()
{
  unint64_t result;

  result = qword_1010FBC18;
  if (!qword_1010FBC18)
  {
    result = swift_getWitnessTable(byte_100E3D650, &type metadata for KeyDropDeleteResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FBC18);
  }
  return result;
}

unint64_t sub_100435D34()
{
  unint64_t result;

  result = qword_1010FBC20;
  if (!qword_1010FBC20)
  {
    result = swift_getWitnessTable(byte_100E3D678, &type metadata for KeyDropDeleteResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FBC20);
  }
  return result;
}

uint64_t sub_100435D78(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x64496572616873 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64496572616873, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BOOL sub_100435E58(char *a1, char *a2)
{
  return qword_100E3DAF8[*a1] == qword_100E3DAF8[*a2];
}

Swift::Int sub_100435E7C()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_100E3DAF8[v1]);
  return Hasher._finalize()();
}

void sub_100435EC8()
{
  char *v0;

  Hasher._combine(_:)(qword_100E3DAF8[*v0]);
}

Swift::Int sub_100435EFC()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_100E3DAF8[v1]);
  return Hasher._finalize()();
}

uint64_t *sub_100435F44@<X0>(uint64_t *result@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;

  v2 = *result;
  if (*result)
    v3 = 3;
  else
    v3 = 0;
  if (v2 == 200)
    v4 = 1;
  else
    v4 = v3;
  if (v2 == 409)
    v5 = 2;
  else
    v5 = v4;
  *a2 = v5;
  return result;
}

void sub_100435F74(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_100E3DAF8[*v1];
}

uint64_t destroy for PairingLockCheckResponse(uint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = a1[2];
  if (v2 >> 60 != 15)
    sub_10001BC14(a1[1], v2);
  v3 = a1[4];
  if (v3 >> 60 != 15)
    sub_10001BC14(a1[3], v3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PairingLockCheckResponse(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (uint64_t *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
  }
  else
  {
    v6 = *v4;
    sub_10001BBBC(*v4, *(_QWORD *)(a2 + 16));
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v5;
  }
  v7 = (uint64_t *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v7;
  }
  else
  {
    v9 = *v7;
    sub_10001BBBC(*v7, *(_QWORD *)(a2 + 32));
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v8;
  }
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  v12 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v12;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t assignWithCopy for PairingLockCheckResponse(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (uint64_t *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16) >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      v7 = *v5;
      sub_10001BBBC(*v5, *(_QWORD *)(a2 + 16));
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_1000DC964(a1 + 8);
LABEL_6:
    *v4 = *(_OWORD *)v5;
    goto LABEL_8;
  }
  v8 = *v5;
  sub_10001BBBC(*v5, *(_QWORD *)(a2 + 16));
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v6;
  sub_10001BC14(v9, v10);
LABEL_8:
  v11 = (uint64_t *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) >> 60 != 15)
  {
    if (v12 >> 60 != 15)
    {
      v14 = *v11;
      sub_10001BBBC(*v11, *(_QWORD *)(a2 + 32));
      v15 = *(_QWORD *)(a1 + 24);
      v16 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 24) = v14;
      *(_QWORD *)(a1 + 32) = v12;
      sub_10001BC14(v15, v16);
      goto LABEL_15;
    }
    sub_1000DC964(a1 + 24);
    goto LABEL_13;
  }
  if (v12 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v11;
    goto LABEL_15;
  }
  v13 = *v11;
  sub_10001BBBC(*v11, *(_QWORD *)(a2 + 32));
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 32) = v12;
LABEL_15:
  v17 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v18 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PairingLockCheckResponse(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 >> 60 == 15)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 16);
  if (v7 >> 60 == 15)
  {
    sub_1000DC964(a1 + 8);
LABEL_4:
    *v4 = *v5;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)v5;
  *(_QWORD *)(a1 + 16) = v7;
  sub_10001BC14(v8, v6);
LABEL_6:
  v9 = (_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  if (v10 >> 60 != 15)
  {
    v11 = *(_QWORD *)(a2 + 32);
    if (v11 >> 60 != 15)
    {
      v12 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = *v9;
      *(_QWORD *)(a1 + 32) = v11;
      sub_10001BC14(v12, v10);
      goto LABEL_11;
    }
    sub_1000DC964(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v9;
LABEL_11:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v13;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PairingLockCheckResponse(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PairingLockCheckResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingLockCheckResponse()
{
  return &type metadata for PairingLockCheckResponse;
}

uint64_t sub_1004363A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100436F14();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

void sub_100436400(char *a1)
{
  sub_1005128DC(*a1);
}

void sub_10043640C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_100436454()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6953726576726573, 0xEA00000000006E67);
  swift_bridgeObjectRelease(0xEA00000000006E67);
  return Hasher._finalize()();
}

void sub_1004364EC()
{
  __asm { BR              X10 }
}

uint64_t sub_100436524(uint64_t a1)
{
  String.hash(into:)(a1, 0x6953726576726573, 0xEA00000000006E67);
  return swift_bridgeObjectRelease(0xEA00000000006E67);
}

void sub_1004365A8()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_1004365EC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6953726576726573, 0xEA00000000006E67);
  swift_bridgeObjectRelease(0xEA00000000006E67);
  return Hasher._finalize()();
}

unint64_t sub_100436684@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1004368AC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1004366B0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1004366DC + 4 * byte_100E3D86F[*v0]))();
}

void sub_1004366DC(_QWORD *a1@<X8>)
{
  *a1 = 0x6953726576726573;
  a1[1] = 0xEA00000000006E67;
}

void sub_100436700(_QWORD *a1@<X8>)
{
  *a1 = 0x6F43737574617473;
  a1[1] = 0xEA00000000006564;
}

void sub_100436720(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x7374726563;
  a1[1] = v1;
}

void sub_100436734(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "maskedAppleId");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_10043675C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100436788 + 4 * byte_100E3D874[*v0]))(0x5364656573, 0xE500000000000000);
}

uint64_t sub_100436788()
{
  return 0x6953726576726573;
}

uint64_t sub_1004367A8()
{
  return 0x6F43737574617473;
}

uint64_t sub_1004367C4()
{
  return 0x7374726563;
}

uint64_t sub_1004367D4()
{
  return 0x704164656B73616DLL;
}

unint64_t sub_1004367F8@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1004368AC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10043681C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100436BB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100436844(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100436BB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10043686C@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_1004368F4(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

unint64_t sub_1004368AC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104A710, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t sub_1004368F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;

  v5 = sub_10001A9A8(&qword_1010FBC28);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100436BB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PairingLockCheckResponse.CodingKeys, &type metadata for PairingLockCheckResponse.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  LOBYTE(v28) = 2;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v5);
  v14 = v12 == 200;
  if (v12 == 409)
    v14 = 2;
  v30 = v14;
  v31 = 0;
  v15 = sub_100036994();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v28, &type metadata for Data, &v31, v5, &type metadata for Data, v15);
  v27 = v28;
  v26 = v29;
  v31 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v28, &type metadata for Data, &v31, v5, &type metadata for Data, v15);
  v25 = v28;
  v24 = v29;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
  v31 = 3;
  v17 = sub_100436BF8();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v28, v16, &v31, v5, v16, v17);
  v18 = v28;
  LOBYTE(v28) = 4;
  v19 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v5);
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  *(_BYTE *)a2 = v30;
  v22 = v26;
  *(_QWORD *)(a2 + 8) = v27;
  *(_QWORD *)(a2 + 16) = v22;
  v23 = v24;
  *(_QWORD *)(a2 + 24) = v25;
  *(_QWORD *)(a2 + 32) = v23;
  *(_QWORD *)(a2 + 40) = v18;
  *(_QWORD *)(a2 + 48) = v19;
  *(_QWORD *)(a2 + 56) = v21;
  return result;
}

unint64_t sub_100436BB4()
{
  unint64_t result;

  result = qword_1010FBC30;
  if (!qword_1010FBC30)
  {
    result = swift_getWitnessTable(asc_100E3DAA4, &type metadata for PairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FBC30);
  }
  return result;
}

unint64_t sub_100436BF8()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1010F4C30;
  if (!qword_1010F4C30)
  {
    v1 = sub_10001F784((uint64_t *)&unk_1010FF7C0);
    v2 = sub_100036994();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010F4C30);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PairingLockCheckResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100436CA8 + 4 * byte_100E3D87E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100436CDC + 4 * byte_100E3D879[v4]))();
}

uint64_t sub_100436CDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100436CE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100436CECLL);
  return result;
}

uint64_t sub_100436CF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100436D00);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100436D04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100436D0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PairingLockCheckResponse.CodingKeys()
{
  return &type metadata for PairingLockCheckResponse.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for PairingLockCheckResponse.StatusCode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100436D74 + 4 * byte_100E3D888[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100436DA8 + 4 * byte_100E3D883[v4]))();
}

uint64_t sub_100436DA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100436DB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100436DB8);
  return result;
}

uint64_t sub_100436DC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100436DCCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100436DD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100436DD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PairingLockCheckResponse.StatusCode()
{
  return &type metadata for PairingLockCheckResponse.StatusCode;
}

unint64_t sub_100436DF8()
{
  unint64_t result;

  result = qword_1010FBC38;
  if (!qword_1010FBC38)
  {
    result = swift_getWitnessTable(asc_100E3D98C, &type metadata for PairingLockCheckResponse.StatusCode);
    atomic_store(result, (unint64_t *)&qword_1010FBC38);
  }
  return result;
}

unint64_t sub_100436E40()
{
  unint64_t result;

  result = qword_1010FBC40;
  if (!qword_1010FBC40)
  {
    result = swift_getWitnessTable(a5_1, &type metadata for PairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FBC40);
  }
  return result;
}

unint64_t sub_100436E88()
{
  unint64_t result;

  result = qword_1010FBC48;
  if (!qword_1010FBC48)
  {
    result = swift_getWitnessTable(asc_100E3D9B4, &type metadata for PairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FBC48);
  }
  return result;
}

unint64_t sub_100436ED0()
{
  unint64_t result;

  result = qword_1010FBC50;
  if (!qword_1010FBC50)
  {
    result = swift_getWitnessTable(byte_100E3D9DC, &type metadata for PairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FBC50);
  }
  return result;
}

unint64_t sub_100436F14()
{
  unint64_t result;

  result = qword_1010FBC58;
  if (!qword_1010FBC58)
  {
    result = swift_getWitnessTable(aU_11, &type metadata for PairingLockCheckResponse.StatusCode);
    atomic_store(result, (unint64_t *)&qword_1010FBC58);
  }
  return result;
}

ValueMetadata *type metadata accessor for MessagingAccount()
{
  return &type metadata for MessagingAccount;
}

uint64_t sub_100436F68(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
}

unint64_t sub_100436F9C()
{
  unint64_t result;

  result = qword_1010FBC60;
  if (!qword_1010FBC60)
  {
    result = swift_getWitnessTable(aU_12, &type metadata for MessagingAccount);
    atomic_store(result, (unint64_t *)&qword_1010FBC60);
  }
  return result;
}

uint64_t sub_100436FE0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertHandle;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertHandle);
  if (v2)
    objc_msgSend(v2, "unregisterObserver:", *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertHandleDelegateTrampoline));
  sub_1000126B0(v0 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertType, type metadata accessor for FMRemoteUILauncher.AlertType);

  v3 = v0 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_logger;
  v4 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100437088()
{
  return type metadata accessor for FMRemoteUILauncher(0);
}

uint64_t type metadata accessor for FMRemoteUILauncher(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010FBCC8, (uint64_t)&nominal type descriptor for FMRemoteUILauncher);
}

uint64_t sub_1004370A4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  result = type metadata accessor for LostModeAlertInfo(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = &unk_100E3DBD0;
    v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = type metadata accessor for Logger(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      result = swift_updateClassMetadata2(a1, 256, 5, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

void sub_100437150()
{
  uint64_t v0;
  uint64_t v1;
  Class isa;
  id v3;
  NSString v4;
  NSString v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;

  v1 = type metadata accessor for Logger(0);
  __chkstk_darwin(v1);
  sub_1004374FC();
  v14 = objc_msgSend(objc_allocWithZone((Class)SBSRemoteAlertConfigurationContext), "init");
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v14, "setUserInfo:", isa);

  v3 = objc_allocWithZone((Class)SBSRemoteAlertDefinition);
  v4 = String._bridgeToObjectiveC()();
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v3, "initWithServiceName:viewControllerClassName:", v4, v5);

  v7 = objc_msgSend((id)objc_opt_self(SBSRemoteAlertHandle), "newHandleWithDefinition:configurationContext:", v6, v14);
  v8 = OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertHandle;
  v9 = *(void **)(v0 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertHandle);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertHandle) = v7;

  v10 = *(void **)(v0 + v8);
  if (v10)
    objc_msgSend(v10, "registerObserver:", *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertHandleDelegateTrampoline));
  v11 = objc_msgSend(objc_allocWithZone((Class)SBSRemoteAlertActivationContext), "init");
  v12 = *(void **)(v0 + v8);
  if (v12)
  {
    v13 = v12;
    v11 = v11;
    objc_msgSend(v13, "activateWithContext:", v11);

  }
  else
  {

  }
}

unint64_t sub_1004374FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  _OWORD v28[2];
  __int128 v29;
  __int128 v30;
  _BYTE v31[40];

  v1 = type metadata accessor for LostModeAlertInfo(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FMRemoteUILauncher.AlertType(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1006BAA50((uint64_t)_swiftEmptyArrayStorage);
  sub_100438DC0(v0 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertType, (uint64_t)v6);
  sub_100438E04((uint64_t)v6, (uint64_t)v3);
  v8 = SPRemoteUIAlertTypeKey;
  *(_QWORD *)&v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPRemoteUIAlertTypeKey);
  *((_QWORD *)&v29 + 1) = v9;
  AnyHashable.init<A>(_:)(&v29, &type metadata for String, &protocol witness table for String);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPRemoteUIAlertTypeValueLostMode);
  *((_QWORD *)&v30 + 1) = &type metadata for String;
  *(_QWORD *)&v29 = v10;
  *((_QWORD *)&v29 + 1) = v11;
  sub_10010F90C(&v29, v28);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
  v27 = v7;
  sub_100109BF0(v28, (uint64_t)v31, isUniquelyReferenced_nonNull_native);
  v13 = v27;
  swift_bridgeObjectRelease();
  sub_1002EAB4C((uint64_t)v31);
  *(_QWORD *)&v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPRemoteUILostModeInfoKey);
  *((_QWORD *)&v29 + 1) = v14;
  AnyHashable.init<A>(_:)(&v29, &type metadata for String, &protocol witness table for String);
  v15 = sub_100650C08();
  *((_QWORD *)&v30 + 1) = sub_10001A9A8((uint64_t *)&unk_1010FBF20);
  *(_QWORD *)&v29 = v15;
  sub_10010F90C(&v29, v28);
  v16 = swift_isUniquelyReferenced_nonNull_native(v13);
  v27 = v13;
  sub_100109BF0(v28, (uint64_t)v31, v16);
  v17 = v27;
  swift_bridgeObjectRelease();
  sub_1002EAB4C((uint64_t)v31);
  sub_1000126B0((uint64_t)v3, type metadata accessor for LostModeAlertInfo);
  *(_QWORD *)&v28[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  *((_QWORD *)&v28[0] + 1) = v18;
  AnyHashable.init<A>(_:)(v28, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v17 + 16) && (v19 = sub_100518E58((uint64_t)v31), (v20 & 1) != 0))
  {
    sub_100016A30(*(_QWORD *)(v17 + 56) + 32 * v19, (uint64_t)&v29);
  }
  else
  {
    v29 = 0u;
    v30 = 0u;
  }
  sub_1002EAB4C((uint64_t)v31);
  if (!*((_QWORD *)&v30 + 1))
  {
    sub_10014785C((uint64_t)&v29);
LABEL_12:
    v23 = sub_100438E48();
    v24 = swift_allocError(&type metadata for FMRemoteUILauncher.RemoteUILauncherError, v23, 0, 0);
    swift_willThrow(v24);
    swift_bridgeObjectRelease();
    return v17;
  }
  if ((swift_dynamicCast(v28, &v29, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    goto LABEL_12;
  v21 = v28[0];
  swift_bridgeObjectRelease();
  v22 = HIBYTE(*((_QWORD *)&v21 + 1)) & 0xFLL;
  if ((*((_QWORD *)&v21 + 1) & 0x2000000000000000) == 0)
    v22 = v21 & 0xFFFFFFFFFFFFLL;
  if (!v22)
    goto LABEL_12;
  return v17;
}

uint64_t sub_1004377EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1010FBC70);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1010FBC70);
  if (qword_1010E9BF8 != -1)
    swift_once(&qword_1010E9BF8, sub_100438C04);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B6EE0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10043787C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch(sub_100437894, 0, 0);
}

uint64_t sub_100437894()
{
  uint64_t v0;
  uint64_t Strong;

  Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24)+ OBJC_IVAR____TtC12searchpartydP33_B6591815384A8DEB8885452F1FDF33D538RemoteHandleObserverDelegateTrampoline_delegate);
  *(_QWORD *)(v0 + 32) = Strong;
  if (Strong)
    return swift_task_switch(sub_100437904, Strong, 0);
  **(_BYTE **)(v0 + 16) = 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100437904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;

  if (qword_1010E9E00 != -1)
    swift_once(&qword_1010E9E00, sub_1006580C0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_101102948);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Remote UI did activate, setting isCurrentlyPresentingAlert to true", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 32);

  *(_BYTE *)(v6 + 144) = 1;
  swift_unknownObjectRelease(v6);
  return swift_task_switch(sub_100438F70, 0, 0);
}

uint64_t sub_100437A6C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  uint64_t v27;
  _QWORD *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;

  v8 = v4;
  v10 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9BF0 != -1)
    swift_once(&qword_1010E9BF0, sub_1004377EC);
  v13 = type metadata accessor for Logger(0);
  sub_10001A9E8(v13, (uint64_t)qword_1010FBC70);
  v14 = a1;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v31 = a4;
    v17 = swift_slowAlloc(12, -1);
    v30 = a3;
    v18 = (uint8_t *)v17;
    v28 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v18 = 138412290;
    v32 = v14;
    v29 = a2;
    v19 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v18 + 4, v18 + 12);
    v20 = v28;
    *v28 = v14;

    a4 = v31;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v29, v18, 0xCu);
    v21 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v20, 1, v21);
    swift_slowDealloc(v20, -1, -1);
    v22 = v18;
    a3 = v30;
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

  }
  v23 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v12, 1, 1, v23);
  v24 = (_QWORD *)swift_allocObject(a3, 40, 7);
  v24[2] = 0;
  v24[3] = 0;
  v24[4] = v8;
  v25 = v8;
  sub_100691C0C((uint64_t)v12, a4, (uint64_t)v24);
  return swift_release();
}

uint64_t sub_100437CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch(sub_100437CD4, 0, 0);
}

uint64_t sub_100437CD4()
{
  uint64_t v0;
  uint64_t Strong;

  Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24)+ OBJC_IVAR____TtC12searchpartydP33_B6591815384A8DEB8885452F1FDF33D538RemoteHandleObserverDelegateTrampoline_delegate);
  *(_QWORD *)(v0 + 32) = Strong;
  if (Strong)
    return swift_task_switch(sub_100437D44, Strong, 0);
  **(_BYTE **)(v0 + 16) = 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100437D44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;

  if (qword_1010E9E00 != -1)
    swift_once(&qword_1010E9E00, sub_1006580C0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_101102948);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Remote UI did activate, setting isCurrentlyPresentingAlert to false", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 32);

  *(_BYTE *)(v6 + 144) = 0;
  swift_unknownObjectRelease(v6);
  return swift_task_switch(sub_100438F70, 0, 0);
}

uint64_t sub_100437EA8(void *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9BF0 != -1)
    swift_once(&qword_1010E9BF0, sub_1004377EC);
  v9 = type metadata accessor for Logger(0);
  sub_10001A9E8(v9, (uint64_t)qword_1010FBC70);
  v10 = a1;
  swift_errorRetain(a2);
  v11 = v10;
  v12 = swift_errorRetain(a2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.error.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v24 = v8;
    v25 = v3;
    v15 = swift_slowAlloc(22, -1);
    v16 = (_QWORD *)swift_slowAlloc(16, -1);
    *(_DWORD *)v15 = 138412546;
    v26 = (uint64_t)v11;
    v17 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v15 + 4, v15 + 12);
    *v16 = v11;

    *(_WORD *)(v15 + 12) = 2112;
    if (a2)
    {
      swift_errorRetain(a2);
      v18 = _swift_stdlib_bridgeErrorToNSError(a2);
      v26 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v15 + 14, v15 + 22);
    }
    else
    {
      v26 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v15 + 14, v15 + 22);
      v18 = 0;
    }
    v3 = v25;
    v16[1] = v18;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Did invalidate handle %@ with error %@", (uint8_t *)v15, 0x16u);
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v16, 2, v19);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    v8 = v24;
  }
  else
  {

    swift_errorRelease(a2);
    swift_errorRelease(a2);

  }
  v20 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v8, 1, 1, v20);
  v21 = (_QWORD *)swift_allocObject(&unk_101076900, 40, 7);
  v21[2] = 0;
  v21[3] = 0;
  v21[4] = v3;
  v22 = v3;
  sub_100691C0C((uint64_t)v8, (uint64_t)&unk_1010FBEF0, (uint64_t)v21);
  return swift_release();
}

uint64_t sub_1004381A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch(sub_1004381BC, 0, 0);
}

uint64_t sub_1004381BC()
{
  uint64_t v0;
  uint64_t Strong;

  Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24)+ OBJC_IVAR____TtC12searchpartydP33_B6591815384A8DEB8885452F1FDF33D538RemoteHandleObserverDelegateTrampoline_delegate);
  *(_QWORD *)(v0 + 32) = Strong;
  if (Strong)
    return swift_task_switch(sub_10043822C, Strong, 0);
  **(_BYTE **)(v0 + 16) = 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10043822C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;

  if (qword_1010E9E00 != -1)
    swift_once(&qword_1010E9E00, sub_1006580C0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_101102948);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Remote UI did activate, setting isCurrentlyPresentingAlert to false", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 32);

  *(_BYTE *)(v6 + 144) = 0;
  swift_unknownObjectRelease(v6);
  return swift_task_switch(sub_100438324, 0, 0);
}

uint64_t sub_100438324()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 32) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for RemoteHandleObserverDelegateTrampoline()
{
  return objc_opt_self(_TtC12searchpartydP33_B6591815384A8DEB8885452F1FDF33D538RemoteHandleObserverDelegateTrampoline);
}

uint64_t *sub_1004383FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = type metadata accessor for URL(0);
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      v8 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    v10 = (int *)type metadata accessor for LostModeAlertInfo(0);
    v11 = v10[5];
    v12 = (uint64_t *)((char *)a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v15 = *v13;
    v14 = v13[1];
    *v12 = v15;
    v12[1] = v14;
    v16 = v10[6];
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    *((_BYTE *)a1 + v10[7]) = *((_BYTE *)a2 + v10[7]);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v19);
  }
  return a1;
}

uint64_t sub_100438518(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  type metadata accessor for LostModeAlertInfo(0);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *sub_10043859C(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  v7 = (int *)type metadata accessor for LostModeAlertInfo(0);
  v8 = v7[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v12 = *(_QWORD *)v10;
  v11 = *((_QWORD *)v10 + 1);
  *(_QWORD *)v9 = v12;
  *((_QWORD *)v9 + 1) = v11;
  v13 = v7[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  a1[v7[7]] = a2[v7[7]];
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v16);
  return a1;
}

char *sub_10043868C(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(char *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 24))(a1, a2, v4);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v9 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
LABEL_7:
  v10 = (int *)type metadata accessor for LostModeAlertInfo(0);
  v11 = v10[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v14 = *((_QWORD *)v13 + 1);
  *((_QWORD *)v12 + 1) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease();
  v15 = v10[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v18 = *((_QWORD *)v17 + 1);
  *((_QWORD *)v16 + 1) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  a1[v10[7]] = a2[v10[7]];
  return a1;
}

char *sub_1004387EC(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  v7 = (int *)type metadata accessor for LostModeAlertInfo(0);
  *(_OWORD *)&a1[v7[5]] = *(_OWORD *)&a2[v7[5]];
  *(_OWORD *)&a1[v7[6]] = *(_OWORD *)&a2[v7[6]];
  a1[v7[7]] = a2[v7[7]];
  return a1;
}

char *sub_1004388BC(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(char *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 40))(a1, a2, v4);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v9 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
LABEL_7:
  v10 = (int *)type metadata accessor for LostModeAlertInfo(0);
  v11 = v10[5];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v15 = *(_QWORD *)v13;
  v14 = *((_QWORD *)v13 + 1);
  *(_QWORD *)v12 = v15;
  *((_QWORD *)v12 + 1) = v14;
  swift_bridgeObjectRelease();
  v16 = v10[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v20 = *(_QWORD *)v18;
  v19 = *((_QWORD *)v18 + 1);
  *(_QWORD *)v17 = v20;
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  a1[v10[7]] = a2[v10[7]];
  return a1;
}

uint64_t sub_1004389FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LostModeAlertInfo(0);
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, v4, sub_100438A38);
}

uint64_t sub_100438A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_10001A9A8(&qword_1010FBA40);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100438AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for LostModeAlertInfo(0);
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, v6, sub_100438B14);
}

uint64_t sub_100438B14(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_10001A9A8(&qword_1010FBA40);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t type metadata accessor for FMRemoteUILauncher.AlertType(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010FBED0, (uint64_t)&nominal type descriptor for FMRemoteUILauncher.AlertType);
}

uint64_t sub_100438BA8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for LostModeAlertInfo(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8);
    swift_initEnumMetadataSingleCase(a1, 256, v4 + 64);
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t sub_100438C04()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6EE0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6EE0);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000010, 0x8000000100ED65C0);
}

uint64_t sub_100438C8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_1010FBEEC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004C28;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_1004381BC, 0, 0);
}

uint64_t sub_100438CF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_1010FBF04);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_100437CD4, 0, 0);
}

uint64_t sub_100438D5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_1010FBF14);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_100437894, 0, 0);
}

uint64_t sub_100438DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMRemoteUILauncher.AlertType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100438E04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LostModeAlertInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100438E48()
{
  unint64_t result;

  result = qword_1010FBF30;
  if (!qword_1010FBF30)
  {
    result = swift_getWitnessTable(aY_39, &type metadata for FMRemoteUILauncher.RemoteUILauncherError);
    atomic_store(result, (unint64_t *)&qword_1010FBF30);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMRemoteUILauncher.RemoteUILauncherError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100438ECC + 4 * byte_100E3DB90[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100438EEC + 4 * byte_100E3DB95[v4]))();
}

_BYTE *sub_100438ECC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100438EEC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100438EF4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100438EFC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100438F04(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100438F0C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FMRemoteUILauncher.RemoteUILauncherError()
{
  return &type metadata for FMRemoteUILauncher.RemoteUILauncherError;
}

unint64_t sub_100438F2C()
{
  unint64_t result;

  result = qword_1010FBF38;
  if (!qword_1010FBF38)
  {
    result = swift_getWitnessTable(aQ_17, &type metadata for FMRemoteUILauncher.RemoteUILauncherError);
    atomic_store(result, (unint64_t *)&qword_1010FBF38);
  }
  return result;
}

void sub_100438F74(char a1)
{
  __asm { BR              X10 }
}

ValueMetadata *sub_100438F9C()
{
  sub_1001E9D38();
  return &type metadata for AccessoryCommandResponsePayload;
}

uint64_t sub_10043904C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100439088 + 4 * byte_100E3DD3C[a1]))(0x7972616D6972702ELL, 0xEB0000000079654BLL);
}

unint64_t sub_100439088()
{
  return 0xD000000000000011;
}

void sub_100439190()
{
  __int128 *v0;
  _QWORD v1[4];

  sub_100439EF4(v0, (uint64_t)v1);
  __asm { BR              X12 }
}

uint64_t sub_1004391DC()
{
  return 3;
}

void sub_100439254()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD v2[4];

  sub_100439EF4(v0, (uint64_t)&v1);
  sub_100439EF4(v0, (uint64_t)v2);
  __asm { BR              X11 }
}

uint64_t sub_1004392CC()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v0[3] = &type metadata for VerifyFindMyNetworkIdPayload;
  v0[4] = sub_10043A1B4();
  *v0 = v3;
  v0[1] = v5;
  return sub_10001BBBC(v2, v1);
}

void sub_10043937C(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v13 = a1 & 0xCFFFFFFFFFFFFFFFLL;
  v9[3] = &type metadata for AccessoryCommandResponsePayload;
  v9[4] = sub_1001E9D38();
  v14 = (_QWORD *)swift_allocObject(&unk_101076B10, 48, 7);
  *v9 = v14;
  v14[2] = v12;
  v14[3] = a8;
  v14[4] = a9;
  v14[5] = v13;
  sub_10001BBBC(v11, v10);
  JUMPOUT(0x100439358);
}

void sub_1004393D8()
{
  uint64_t v0;
  char v1;

  *(_QWORD *)(v0 + 24) = &type metadata for VerifyFindMyNetworkIdResponsePayload;
  *(_QWORD *)(v0 + 32) = sub_10043A170();
  *(_BYTE *)v0 = v1 & 1;
  JUMPOUT(0x10043935CLL);
}

void sub_1004393F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  __int16 v17;

  *(_QWORD *)(v15 + 24) = &type metadata for VerifyFindMyNetworkIdResponseV2Payload;
  *(_QWORD *)(v15 + 32) = sub_10043A12C();
  *(_WORD *)v15 = v17;
  *(_QWORD *)(v15 + 8) = a15;
  swift_bridgeObjectRetain(v16);
  JUMPOUT(0x10043935CLL);
}

void sub_10043942C(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  if (a1 | v10 | a9 | a8)
  {
    if (v10 != 1 || a9 | a1 | a8)
    {
      *(_QWORD *)(v9 + 24) = &type metadata for AccessoryGenericPayload;
      *(_QWORD *)(v9 + 32) = sub_10005A334();
    }
    else
    {
      *(_QWORD *)(v9 + 24) = &type metadata for GetiCloudIdentifierPayload;
      *(_QWORD *)(v9 + 32) = sub_10043A2F0();
    }
  }
  else
  {
    *(_QWORD *)(v9 + 24) = &type metadata for GetPrimaryKeyPayload;
    *(_QWORD *)(v9 + 32) = sub_10043A334();
  }
  JUMPOUT(0x10043935CLL);
}

uint64_t sub_10043949C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v3 = type metadata accessor for Endianness(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  dispatch thunk of BinaryEncoding.container()(v17, v7, v8);
  sub_100439190();
  v10 = v9;
  LOWORD(v15) = v9 | 0x400;
  static Endianness.current.getter(v9);
  v11 = sub_100112060();
  FixedWidthInteger.convert(to:)(&v16, v6, &type metadata for UInt16, v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  LOWORD(v15) = v16;
  v12 = v18;
  v13 = v19;
  sub_10009F5D0((uint64_t)v17, v18);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v15, &type metadata for UInt16, v11, v12, v13);
  if (!v1)
    __asm { BR              X10 }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
}

uint64_t sub_100439AA4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5[2];

  result = sub_10043A87C(a1, (uint64_t)v5);
  if (!v2)
    return sub_100439EF4(v5, a2);
  return result;
}

uint64_t sub_100439AE8(_QWORD *a1)
{
  __int128 *v1;
  _BYTE v4[40];

  sub_100439EF4(v1, (uint64_t)v4);
  return sub_10043949C(a1);
}

uint64_t sub_100439B34(unsigned __int16 a1)
{
  int v1;
  uint64_t result;

  v1 = a1;
  result = 1;
  switch(v1)
  {
    case 1024:
      result = 0;
      break;
    case 1025:
      return result;
    case 1026:
      result = 2;
      break;
    case 1027:
      result = 3;
      break;
    case 1028:
      result = 4;
      break;
    case 1029:
      result = 5;
      break;
    case 1030:
      result = 6;
      break;
    case 1031:
      result = 7;
      break;
    case 1032:
      result = 8;
      break;
    case 1033:
      result = 9;
      break;
    case 1034:
      result = 10;
      break;
    default:
      if (v1 == 770)
        result = 11;
      else
        result = 12;
      break;
  }
  return result;
}

double sub_100439BC4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  double result;
  unint64_t v7;

  switch((a4 >> 60) & 3 | (4 * a5))
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 4uLL:
    case 6uLL:
      sub_10001BBBC(a1, a2);
      break;
    case 3uLL:
      v7 = a4 & 0xCFFFFFFFFFFFFFFFLL;
      sub_10001BBBC(a1, a2);
      sub_10001BBBC(a3, v7);
      break;
    case 7uLL:
      *(_QWORD *)&result = swift_bridgeObjectRetain(a2).n128_u64[0];
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for AccessoryOwnerCommand(uint64_t a1)
{
  return sub_100439C44(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t sub_100439C44(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v6;

  switch((a4 >> 60) & 3 | (4 * a5))
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 4uLL:
    case 6uLL:
      result = sub_10001BC14(result, a2);
      break;
    case 3uLL:
      v6 = a4 & 0xCFFFFFFFFFFFFFFFLL;
      sub_10001BC14(result, a2);
      result = sub_10001BC14(a3, v6);
      break;
    case 7uLL:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for AccessoryOwnerCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_100439BC4(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for AccessoryOwnerCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_100439BC4(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_100439C44(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for AccessoryOwnerCommand(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_100439C44(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryOwnerCommand(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3F8 && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 1016);
  v3 = ((*(_QWORD *)(a1 + 24) >> 60) & 3 | (4 * *(unsigned __int8 *)(a1 + 32))) ^ 0x3FF;
  if (v3 >= 0x3F7)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AccessoryOwnerCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3F7)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 1016;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x3F8)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x3F8)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = (-a2 & 3) << 60;
      *(_BYTE *)(result + 32) = -a2 >> 2;
    }
  }
  return result;
}

uint64_t sub_100439E74(uint64_t a1)
{
  if (((4 * *(unsigned __int8 *)(a1 + 32)) & 0xF8) != 0)
    return (*(_DWORD *)a1 + 8);
  else
    return (*(_QWORD *)(a1 + 24) >> 60) & 3 | (4 * *(_BYTE *)(a1 + 32));
}

uint64_t sub_100439E9C(uint64_t result)
{
  *(_QWORD *)(result + 24) &= 0xCFFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_100439EAC(uint64_t result, unsigned int a2)
{
  if (a2 < 8)
  {
    *(_QWORD *)(result + 24) = *(_QWORD *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 3) << 60);
    *(_BYTE *)(result + 32) = a2 >> 2;
  }
  else
  {
    *(_QWORD *)result = a2 - 8;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryOwnerCommand()
{
  return &type metadata for AccessoryOwnerCommand;
}

uint64_t sub_100439EF4(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t sub_100439F0C()
{
  unint64_t result;

  result = qword_1010FBF40;
  if (!qword_1010FBF40)
  {
    result = swift_getWitnessTable(byte_100E3DE84, &type metadata for AccessoryOwnerCommand.AccessoryOwnerCommandError);
    atomic_store(result, (unint64_t *)&qword_1010FBF40);
  }
  return result;
}

unint64_t sub_100439F50()
{
  unint64_t result;

  result = qword_1010FBF48;
  if (!qword_1010FBF48)
  {
    result = swift_getWitnessTable(aM_18, &type metadata for VerifyFindMyNetworkIdResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FBF48);
  }
  return result;
}

unint64_t sub_100439F94()
{
  unint64_t result;

  result = qword_1010FBF50;
  if (!qword_1010FBF50)
  {
    result = swift_getWitnessTable(byte_100E45B34, &type metadata for VerifyFindMyNetworkIdPayload);
    atomic_store(result, (unint64_t *)&qword_1010FBF50);
  }
  return result;
}

unint64_t sub_100439FD8()
{
  unint64_t result;

  result = qword_1010FBF58;
  if (!qword_1010FBF58)
  {
    result = swift_getWitnessTable(byte_100E6DB1C, &type metadata for EncryptedSerialNumberResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FBF58);
  }
  return result;
}

unint64_t sub_10043A01C()
{
  unint64_t result;

  result = qword_1010FBF60;
  if (!qword_1010FBF60)
  {
    result = swift_getWitnessTable("ݒ$", &type metadata for iCloudIdentifierResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FBF60);
  }
  return result;
}

unint64_t sub_10043A060()
{
  unint64_t result;

  result = qword_1010FBF68;
  if (!qword_1010FBF68)
  {
    result = swift_getWitnessTable(byte_100E64230, &type metadata for PrimaryKeyResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FBF68);
  }
  return result;
}

unint64_t sub_10043A0A4()
{
  unint64_t result;

  result = qword_1010FBF70;
  if (!qword_1010FBF70)
  {
    result = swift_getWitnessTable(asc_100E4019C, &type metadata for GetiCloudIdentifierPayload);
    atomic_store(result, (unint64_t *)&qword_1010FBF70);
  }
  return result;
}

unint64_t sub_10043A0E8()
{
  unint64_t result;

  result = qword_1010FBF78;
  if (!qword_1010FBF78)
  {
    result = swift_getWitnessTable(a1_12, &type metadata for GetPrimaryKeyPayload);
    atomic_store(result, (unint64_t *)&qword_1010FBF78);
  }
  return result;
}

unint64_t sub_10043A12C()
{
  unint64_t result;

  result = qword_1010FBF80;
  if (!qword_1010FBF80)
  {
    result = swift_getWitnessTable(") #", &type metadata for VerifyFindMyNetworkIdResponseV2Payload);
    atomic_store(result, (unint64_t *)&qword_1010FBF80);
  }
  return result;
}

unint64_t sub_10043A170()
{
  unint64_t result;

  result = qword_1010FBF88;
  if (!qword_1010FBF88)
  {
    result = swift_getWitnessTable(aA_25, &type metadata for VerifyFindMyNetworkIdResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FBF88);
  }
  return result;
}

unint64_t sub_10043A1B4()
{
  unint64_t result;

  result = qword_1010FBF90;
  if (!qword_1010FBF90)
  {
    result = swift_getWitnessTable(byte_100E45B18, &type metadata for VerifyFindMyNetworkIdPayload);
    atomic_store(result, (unint64_t *)&qword_1010FBF90);
  }
  return result;
}

uint64_t sub_10043A1F8()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

unint64_t sub_10043A224()
{
  unint64_t result;

  result = qword_1010FBF98;
  if (!qword_1010FBF98)
  {
    result = swift_getWitnessTable(byte_100E6DB00, &type metadata for EncryptedSerialNumberResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FBF98);
  }
  return result;
}

unint64_t sub_10043A268()
{
  unint64_t result;

  result = qword_1010FBFA0;
  if (!qword_1010FBFA0)
  {
    result = swift_getWitnessTable(byte_100E58988, &type metadata for iCloudIdentifierResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FBFA0);
  }
  return result;
}

unint64_t sub_10043A2AC()
{
  unint64_t result;

  result = qword_1010FBFA8;
  if (!qword_1010FBFA8)
  {
    result = swift_getWitnessTable(byte_100E64214, &type metadata for PrimaryKeyResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010FBFA8);
  }
  return result;
}

unint64_t sub_10043A2F0()
{
  unint64_t result;

  result = qword_1010FBFB0;
  if (!qword_1010FBFB0)
  {
    result = swift_getWitnessTable(asc_100E401C4, &type metadata for GetiCloudIdentifierPayload);
    atomic_store(result, (unint64_t *)&qword_1010FBFB0);
  }
  return result;
}

unint64_t sub_10043A334()
{
  unint64_t result;

  result = qword_1010FBFB8;
  if (!qword_1010FBFB8)
  {
    result = swift_getWitnessTable(byte_100E61FF0, &type metadata for GetPrimaryKeyPayload);
    atomic_store(result, (unint64_t *)&qword_1010FBFB8);
  }
  return result;
}

void sub_10043A378(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t DynamicType;
  _QWORD v8[3];
  uint64_t v9;

  sub_100030784(a2, (uint64_t)v8);
  sub_100438F74(a1);
  v4 = v3;
  v5 = v9;
  v6 = sub_10001AA44(v8, v9);
  DynamicType = swift_getDynamicType(v6, v5, 1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
  if (v4 == DynamicType)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x10043A84CLL);
}

uint64_t sub_10043A87C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD v26[5];
  _QWORD v27[5];
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  __int128 v31[3];
  __int16 v32;

  v25 = a2;
  v4 = type metadata accessor for Endianness(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  dispatch thunk of BinaryDecoding.container()(v28, v8, v9);
  v10 = v29;
  v11 = v30;
  sub_10009F5D0((uint64_t)v28, v29);
  v12 = sub_100112060();
  v13 = dispatch thunk of BinaryDecodingContaining.decode<A>(_:)(v26, &type metadata for UInt16, &type metadata for UInt16, v12, v10, v11);
  if (!v2)
  {
    v14 = v25;
    v32 = v26[0];
    static Endianness.current.getter(v13);
    FixedWidthInteger.convert(to:)(v27, v7, &type metadata for UInt16, v12);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v15 = sub_100439B34(v27[0]);
    if (v15 != 12)
    {
      v19 = v15;
      sub_100438F74(v15);
      v21 = v20;
      v23 = v22;
      sub_100030784((uint64_t)a1, (uint64_t)v26);
      v27[3] = v21;
      v27[4] = v23;
      sub_100018F08(v27);
      dispatch thunk of BinaryDecodable.init(from:)(v26, v21, *(_QWORD *)(v23 + 8));
      sub_100030784((uint64_t)v27, (uint64_t)v26);
      sub_10043A378(v19, (uint64_t)v26);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return sub_100439EF4(v31, v14);
    }
    v16 = sub_100439F0C();
    v17 = swift_allocError(&type metadata for AccessoryOwnerCommand.AccessoryOwnerCommandError, v16, 0, 0);
    *v18 = 1;
    swift_willThrow(v17);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t storeEnumTagSinglePayload for AccessoryOwnerCommand.AccessoryOwnerCommandError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10043AAF4 + 4 * byte_100E3DD85[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10043AB28 + 4 * byte_100E3DD80[v4]))();
}

uint64_t sub_10043AB28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10043AB30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10043AB38);
  return result;
}

uint64_t sub_10043AB44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10043AB4CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10043AB50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10043AB58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryOwnerCommand.AccessoryOwnerCommandError()
{
  return &type metadata for AccessoryOwnerCommand.AccessoryOwnerCommandError;
}

unint64_t sub_10043AB78()
{
  unint64_t result;

  result = qword_1010FBFC0;
  if (!qword_1010FBFC0)
  {
    result = swift_getWitnessTable(byte_100E3DE5C, &type metadata for AccessoryOwnerCommand.AccessoryOwnerCommandError);
    atomic_store(result, (unint64_t *)&qword_1010FBFC0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AirTagSoundStartPayload()
{
  return &type metadata for AirTagSoundStartPayload;
}

uint64_t sub_10043ABCC(_QWORD *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v5 = sub_10001A9A8(&qword_1010FBFE8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10043B568();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AirTagSoundSequence.CodingKeys, &type metadata for AirTagSoundSequence.CodingKeys, v11, v9, v10);
  v18 = a2;
  v17 = 0;
  v12 = sub_10043B5F0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, &type metadata for AirTagSoundAsset, v12);
  if (!v2)
  {
    v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a2 >> 8, &v16, v5);
    v15 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(HIWORD(a2), &v15, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10043AD1C@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10043B284(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10043AD44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10043B8EC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10043ADA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10043B8EC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10043ADEC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1886351212;
  if (*v0 != 1)
    v1 = 0x6E6F697461727564;
  if (*v0)
    return v1;
  else
    return 0x7465737361;
}

uint64_t sub_10043AE3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10043B298(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10043AE60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10043B568();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10043AE88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10043B568();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10043AEB0@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10043B3D4(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10043AEE8(_QWORD *a1)
{
  unsigned int *v1;

  return sub_10043ABCC(a1, *v1);
}

uint64_t sub_10043AF00(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _WORD *v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = a1[3];
  v5 = a1[4];
  sub_10001AA44(a1, v4);
  dispatch thunk of BinaryEncoding.container()(v33, v4, v5);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = sub_100059570();
    swift_bridgeObjectRetain(a2);
    v8 = (_WORD *)(a2 + 34);
    do
    {
      v28 = v8;
      v29 = v6;
      v9 = *((_BYTE *)v8 - 1);
      v30 = *v8;
      LOBYTE(v31) = *((_BYTE *)v8 - 2);
      v10 = FixedWidthInteger.data.getter(&type metadata for UInt8, v7);
      v12 = v11;
      v31 = v10;
      v32 = v11;
      v13 = v34;
      v36 = v35;
      sub_10009F5D0((uint64_t)v33, v34);
      v14 = sub_1000DCC90();
      dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v31, &type metadata for Data, v14, v13, v36);
      sub_10001BC14(v10, v12);
      if (v2)
        break;
      LOBYTE(v31) = v9;
      v15 = v7;
      v16 = FixedWidthInteger.data.getter(&type metadata for UInt8, v7);
      v18 = v17;
      v31 = v16;
      v32 = v17;
      v19 = v34;
      v20 = v35;
      sub_10009F5D0((uint64_t)v33, v34);
      dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v31, &type metadata for Data, v14, v19, v20);
      sub_10001BC14(v16, v18);
      LOWORD(v31) = v30;
      v21 = sub_100112060();
      v22 = FixedWidthInteger.data.getter(&type metadata for UInt16, v21);
      v24 = v23;
      v31 = v22;
      v32 = v23;
      v25 = v34;
      v26 = v35;
      sub_10009F5D0((uint64_t)v33, v34);
      dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v31, &type metadata for Data, v14, v25, v26);
      sub_10001BC14(v22, v24);
      v8 = v28 + 2;
      --v6;
      v7 = v15;
    }
    while (v29 != 1);
    swift_bridgeObjectRelease();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
}

uint64_t sub_10043B128@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  *a2 = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_10043B15C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10043AF00(a1, *v1);
}

unint64_t sub_10043B174(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10043B1A0();
  result = sub_1002A77E0();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10043B1A0()
{
  unint64_t result;

  result = qword_1010FBFC8;
  if (!qword_1010FBFC8)
  {
    result = swift_getWitnessTable(byte_100E3DF98, &type metadata for AirTagSoundStartPayload);
    atomic_store(result, (unint64_t *)&qword_1010FBFC8);
  }
  return result;
}

_DWORD *initializeBufferWithCopyOfBuffer for VersionNumber(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AirTagSoundSequence(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && a1[4])
    return (*(_DWORD *)a1 + 250);
  v3 = *a1;
  v4 = v3 >= 7;
  v5 = v3 - 7;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AirTagSoundSequence(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_DWORD *)result = a2 - 250;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 4) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 6;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirTagSoundSequence()
{
  return &type metadata for AirTagSoundSequence;
}

uint64_t sub_10043B284(uint64_t result)
{
  if (result >= 7u)
    return 7;
  else
    return result;
}

uint64_t sub_10043B298(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x7465737361 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7465737361, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1886351212 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1886351212, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461727564, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10043B3D4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;

  v3 = sub_10001A9A8(&qword_1010FBFD0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_10043B568();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AirTagSoundSequence.CodingKeys, &type metadata for AirTagSoundSequence.CodingKeys, v9, v7, v8);
  if (v1)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v18 = 0;
  v10 = sub_10043B5AC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, &type metadata for AirTagSoundAsset, &v18, v3, &type metadata for AirTagSoundAsset, v10);
  v11 = v19;
  v17 = 1;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
  v16 = 2;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return (v12 << 8) | (v13 << 16) | v11;
}

unint64_t sub_10043B568()
{
  unint64_t result;

  result = qword_1010FBFD8;
  if (!qword_1010FBFD8)
  {
    result = swift_getWitnessTable("͌#", &type metadata for AirTagSoundSequence.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FBFD8);
  }
  return result;
}

unint64_t sub_10043B5AC()
{
  unint64_t result;

  result = qword_1010FBFE0;
  if (!qword_1010FBFE0)
  {
    result = swift_getWitnessTable(aM_19, &type metadata for AirTagSoundAsset);
    atomic_store(result, (unint64_t *)&qword_1010FBFE0);
  }
  return result;
}

unint64_t sub_10043B5F0()
{
  unint64_t result;

  result = qword_1010FBFF0;
  if (!qword_1010FBFF0)
  {
    result = swift_getWitnessTable(byte_100E3E1EC, &type metadata for AirTagSoundAsset);
    atomic_store(result, (unint64_t *)&qword_1010FBFF0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AirTagSoundSequence.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10043B680 + 4 * byte_100E3DF65[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10043B6B4 + 4 * asc_100E3DF60[v4]))();
}

uint64_t sub_10043B6B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10043B6BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10043B6C4);
  return result;
}

uint64_t sub_10043B6D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10043B6D8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10043B6DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10043B6E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirTagSoundSequence.CodingKeys()
{
  return &type metadata for AirTagSoundSequence.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AirTagSoundAsset(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10043B74C + 4 * byte_100E3DF6F[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10043B780 + 4 * byte_100E3DF6A[v4]))();
}

uint64_t sub_10043B780(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10043B788(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10043B790);
  return result;
}

uint64_t sub_10043B79C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10043B7A4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10043B7A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10043B7B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirTagSoundAsset()
{
  return &type metadata for AirTagSoundAsset;
}

unint64_t sub_10043B7D0()
{
  unint64_t result;

  result = qword_1010FBFF8;
  if (!qword_1010FBFF8)
  {
    result = swift_getWitnessTable("͍#", &type metadata for AirTagSoundAsset);
    atomic_store(result, (unint64_t *)&qword_1010FBFF8);
  }
  return result;
}

unint64_t sub_10043B818()
{
  unint64_t result;

  result = qword_1010FC000;
  if (!qword_1010FC000)
  {
    result = swift_getWitnessTable(byte_100E3E1C4, &type metadata for AirTagSoundSequence.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC000);
  }
  return result;
}

unint64_t sub_10043B860()
{
  unint64_t result;

  result = qword_1010FC008;
  if (!qword_1010FC008)
  {
    result = swift_getWitnessTable(byte_100E3E134, &type metadata for AirTagSoundSequence.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC008);
  }
  return result;
}

unint64_t sub_10043B8A8()
{
  unint64_t result;

  result = qword_1010FC010;
  if (!qword_1010FC010)
  {
    result = swift_getWitnessTable(byte_100E3E15C, &type metadata for AirTagSoundSequence.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC010);
  }
  return result;
}

unint64_t sub_10043B8EC()
{
  unint64_t result;

  result = qword_1010FC018;
  if (!qword_1010FC018)
  {
    result = swift_getWitnessTable(byte_100E3E094, &type metadata for AirTagSoundAsset);
    atomic_store(result, (unint64_t *)&qword_1010FC018);
  }
  return result;
}

uint64_t sub_10043B930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10044AAD4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10043B98C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10044AAD4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10043B9D8(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, double a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v21;
  int v22;
  char v23;
  _QWORD v24[2];

  v22 = a4;
  v10 = sub_10001A9A8(&qword_1010FC2C8);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  sub_10001AA44(a1, v14);
  v16 = sub_10044A4F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationsEncodedInfo.CodingKeys, &type metadata for SecureLocationsEncodedInfo.CodingKeys, v16, v14, v15);
  v24[0] = a2;
  v24[1] = a3;
  v23 = 0;
  v17 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v24, &v23, v10, &type metadata for Data, v17);
  if (!v5)
  {
    v18 = v22;
    LOBYTE(v24[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v10, a5);
    LOBYTE(v24[0]) = v18;
    v23 = 2;
    v19 = sub_10044A57C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v24, &v23, v10, &type metadata for SecureLocationsPayloadFormat, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_10043BB5C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 7630182;
  if (*v0 == 1)
    v1 = 0x6E6F697461636F6CLL;
  if (*v0)
    return v1;
  else
    return 0x6E6F697461636F6CLL;
}

uint64_t sub_10043BBA4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1004480F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10043BBC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10044A4F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10043BBF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10044A4F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10043BC18(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  double v7;

  v7 = sub_10044823C(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(double *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = v6;
  }
}

uint64_t sub_10043BC48(_QWORD *a1)
{
  uint64_t v1;

  return sub_10043B9D8(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 24), *(double *)(v1 + 16));
}

uint64_t sub_10043BC68(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  __int128 v22;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010FC198);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100448718();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationsEncodedPayload.CodingKeys, &type metadata for SecureLocationsEncodedPayload.CodingKeys, v11, v9, v10);
  v22 = *v3;
  v21 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = *((_QWORD *)v3 + 2);
    v14 = *((unsigned __int8 *)v3 + 24);
    LOBYTE(v22) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, &v22, v5);
    v15 = *((_QWORD *)v3 + 4);
    v16 = *((_QWORD *)v3 + 5);
    LOBYTE(v22) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v22, v5);
    *(_QWORD *)&v22 = *((_QWORD *)v3 + 6);
    v21 = 3;
    v17 = sub_10001A9A8(&qword_1010FC180);
    v18 = sub_100365CCC(&qword_1010FC1A0, &qword_1010FC180, (uint64_t (*)(void))sub_1004487A0, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10043BE2C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10043BE50 + 4 * byte_100E3E290[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_10043BE50()
{
  return 0x6570795479656BLL;
}

uint64_t sub_10043BE68()
{
  return 1701080941;
}

uint64_t sub_10043BE78()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_10043BE98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100448718();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10043BEC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100448718();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10043BEE8@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_100448440(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_10043BF34(_QWORD *a1)
{
  return sub_10043BC68(a1);
}

uint64_t sub_10043BF48(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v18 = a4;
  v8 = sub_10001A9A8(&qword_1010FC300);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_10044A604();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationsEncodedPushPayload.CodingKeys, &type metadata for SecureLocationsEncodedPushPayload.CodingKeys, v14, v12, v13);
  v21 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2, a3, &v21, v8);
  if (!v4)
  {
    v19 = v18;
    v20 = 1;
    v15 = sub_10001A9A8(&qword_1010F3E38);
    v16 = sub_100365CCC((unint64_t *)&qword_1010F3E40, &qword_1010F3E38, (uint64_t (*)(void))sub_100251620, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v8, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10043C0B4()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6F697461636F6CLL;
  else
    return 0x54646E6553706174;
}

uint64_t sub_10043C100@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1004488BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10043C124(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10044A604();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10043C14C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10044A604();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10043C174@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1004489DC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_10043C1A0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10043BF48(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_10043C1BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B6F00);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6F00);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000013, 0x8000000100ED68A0, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_10043C28C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010FC2F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10044A5C0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationsCachedPayload.CodingKeys, &type metadata for SecureLocationsCachedPayload.CodingKeys, v11, v9, v10);
  v20 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    v14 = v3 + *(int *)(type metadata accessor for SecureLocationsCachedPayload(0) + 20);
    v19 = 1;
    v15 = type metadata accessor for SecureLocation(0);
    v16 = sub_100006204(&qword_1010FC1D8, type metadata accessor for SecureLocation, (uint64_t)&unk_100E5A730);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10043C410@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  char v34;

  v26 = a2;
  v27 = type metadata accessor for SecureLocation(0);
  __chkstk_darwin(v27);
  v29 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for UUID(0);
  v28 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v32 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = sub_10001A9A8(&qword_1010FC2D8);
  v6 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SecureLocationsCachedPayload(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v13);
  v14 = sub_10044A5C0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SecureLocationsCachedPayload.CodingKeys, &type metadata for SecureLocationsCachedPayload.CodingKeys, v14, v13, v12);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v24 = v6;
  v25 = a1;
  v15 = (uint64_t)v11;
  v16 = v28;
  v17 = v29;
  v34 = 0;
  v18 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v19 = v31;
  v20 = v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32, v31, &v34, v30, v31, v18);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v16 + 32))(v15, v32, v19);
  v33 = 1;
  v21 = sub_100006204(&qword_1010FC1D0, type metadata accessor for SecureLocation, (uint64_t)&unk_100E5A758);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v27, &v33, v20, v27, v21);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v20);
  sub_1000126EC((uint64_t)v17, v15 + *(int *)(v9 + 20), type metadata accessor for SecureLocation);
  sub_10005972C(v15, v26, type metadata accessor for SecureLocationsCachedPayload);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
  return sub_1000126B0(v15, type metadata accessor for SecureLocationsCachedPayload);
}

uint64_t sub_10043C700()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F4C657275636573;
  else
    return 0x696669746E656469;
}

uint64_t sub_10043C74C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100448B88(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10043C770(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10044A5C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10043C798(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10044A5C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_10043C7C0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  sub_100AA813C((uint64_t)v3);
  return Hasher._finalize()();
}

void sub_10043C848(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for UUID(0);
  v3 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  sub_100AA813C(a1);
}

Swift::Int sub_10043C8B8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  sub_100AA813C((uint64_t)v3);
  return Hasher._finalize()();
}

uint64_t sub_10043C93C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10043C410(a1, a2);
}

uint64_t sub_10043C950(_QWORD *a1)
{
  return sub_10043C28C(a1);
}

uint64_t sub_10043C964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static UUID.== infix(_:_:)(a1, a2) & 1) != 0)
    return sub_100AA8E5C((double *)(a1 + *(int *)(a3 + 20)), a2 + *(int *)(a3 + 20));
  else
    return 0;
}

_QWORD *sub_10043C9B8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  _QWORD *v25;

  v3 = v2;
  v24 = a2;
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001F6FC();
  v15 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v11);
  static DispatchQoS.unspecified.getter(v15);
  v25 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v17, v18, v5, v16);
  v3[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003ALL, 0x8000000100ED6960, v10, v7, v14, 0);
  v19 = sub_10001A9A8(&qword_1010FC1F0);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = PassthroughSubject.init()();
  v3[5] = v20;
  v25 = (_QWORD *)v20;
  v21 = sub_1000193A4(&qword_1010FC1F8, &qword_1010FC1F0, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v3[6] = Publisher.eraseToAnyPublisher()(v19, v21);
  v22 = v24;
  v3[3] = a1;
  v3[4] = v22;
  return v3;
}

void sub_10043CBEC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  _BOOL4 v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  _BOOL4 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  uint8_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  id v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;

  v147 = a4;
  v155 = a3;
  v158 = a5;
  v151 = type metadata accessor for HashAlgorithm(0);
  v150 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v149 = (char *)&v142 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_101111AE0);
  __chkstk_darwin(v8);
  v146 = (uint64_t)&v142 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SecureLocation(0);
  v11 = __chkstk_darwin(v10);
  v144 = (char *)&v142 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v143 = (uint64_t)&v142 - v14;
  __chkstk_darwin(v13);
  v145 = (uint64_t)&v142 - v15;
  v16 = sub_10001A9A8(&qword_101111B20);
  __chkstk_darwin(v16);
  v18 = (char *)&v142 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  v19 = *(_QWORD *)(v153 - 8);
  v20 = __chkstk_darwin(v153);
  v148 = (char *)&v142 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v152 = (uint64_t)&v142 - v22;
  v23 = type metadata accessor for String.Encoding(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v142 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v27);
  v29 = (char *)&v142 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for UUID(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v156 = (char *)&v142 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v32);
  v157 = a1;
  v159 = a2;
  v34 = String.data(using:allowLossyConversion:)(v26, 0, a1, a2);
  v36 = v35;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  if (v36 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v29, 1, 1, v30);
LABEL_4:
    sub_100004048((uint64_t)v29, &qword_1010ED860);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v38 = type metadata accessor for Logger(0);
    sub_10001A9E8(v38, (uint64_t)qword_1011B7A18);
    v39 = v159;
    swift_bridgeObjectRetain_n(v159, 2);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v167 = v44;
      *(_DWORD *)v43 = 136315138;
      swift_bridgeObjectRetain(v39);
      *(_QWORD *)&v164 = sub_100016940(v157, v39, (uint64_t *)&v167);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, (char *)&v164 + 8, v43 + 4, v43 + 12);
      swift_bridgeObjectRelease_n(v39, 3);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Unable to create stableUUID from findMyId %s", v43, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v39, 2);
    }
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
LABEL_10:
    v49 = v158;
    goto LABEL_11;
  }
  *(_QWORD *)&v167 = v34;
  *((_QWORD *)&v167 + 1) = v36;
  v37 = sub_100035530();
  DataProtocol.stableUUID.getter(&type metadata for Data, v37);
  sub_10001EF3C(v34, v36);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v29, 0, 1, v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
    goto LABEL_4;
  v50 = (uint64_t)v156;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v156, v29, v30);
  if (objc_msgSend(v155, "subscriptionMode") == (id)4)
  {
    sub_1008B540C(&v162);
    sub_100005CF0((uint64_t)&v162, (uint64_t)&v164, &qword_1010FA1E0);
    if (*((_QWORD *)&v165 + 1) >> 60 == 15)
    {
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v50, v30);
      v46 = v159;
      swift_bridgeObjectRetain(v159);
      v48 = 4;
      v47 = _swiftEmptyArrayStorage;
      v49 = v158;
      v45 = v157;
      goto LABEL_11;
    }
    v167 = v164;
    v168 = v165;
    v169 = v166;
    v61 = sub_10001A9A8(&qword_1010F4A30);
    v47 = (_QWORD *)swift_allocObject(v61, 48, 7);
    *((_OWORD *)v47 + 1) = xmmword_100E22B00;
    v170 = v168;
    v62 = v168;
    sub_100059DE8((uint64_t)&v170);
    v63 = sub_1007E6F8C(v62, *((uint64_t *)&v62 + 1));
    v46 = v159;
    v45 = v157;
    v64 = v63;
    v66 = v65;
    v154 = v30;
    v142 = v31;
    sub_1000ADA04((uint64_t)&v170);
    sub_1002F7394(v64, v66);
    v67 = v160;
    v68 = v161;
    v69 = v150;
    v70 = v149;
    v71 = v151;
    (*(void (**)(char *, _QWORD, uint64_t))(v150 + 104))(v149, enum case for HashAlgorithm.sha256(_:), v151);
    v72 = Data.hash(algorithm:)(v70, v67, v68);
    v74 = v73;
    (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v71);
    sub_10001BC14(v67, v68);
    v47[4] = v72;
    v47[5] = v74;
    sub_1003D15A0((uint64_t)&v162);
    (*(void (**)(char *, uint64_t))(v142 + 8))(v156, v154);
    swift_bridgeObjectRetain(v46);
    v48 = 4;
    goto LABEL_10;
  }
  sub_10081CC88(v50, (uint64_t)v18);
  v51 = (int *)v153;
  v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v153);
  v53 = &qword_1010EA000;
  if (v52 == 1)
  {
    sub_100004048((uint64_t)v18, &qword_101111B20);
    v54 = (uint64_t)v148;
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v148, v50, v30);
    v55 = v54 + v51[11];
    v56 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v55, 1, 1, v56);
    v57 = (_QWORD *)(v54 + v51[5]);
    v45 = v157;
    v46 = v159;
    *v57 = v157;
    v57[1] = v46;
    *(_OWORD *)(v54 + v51[6]) = xmmword_100E22B20;
    *(_OWORD *)(v54 + v51[7]) = xmmword_100E22B20;
    v58 = (_QWORD *)(v54 + v51[8]);
    *v58 = 0;
    v58[1] = 0;
    v58[2] = 0;
    v59 = (_QWORD *)(v54 + v51[9]);
    *v59 = 0;
    v59[1] = 0;
    *(_QWORD *)(v54 + v51[10]) = 0;
    v60 = swift_allocObject(&unk_101077208, 32, 7);
    *(_QWORD *)(v60 + 16) = v45;
    *(_QWORD *)(v60 + 24) = v46;
    swift_bridgeObjectRetain_n(v46, 2);
    sub_100CAA3EC(v54, (uint64_t)sub_100449854, v60);
    swift_release();
    v49 = v158;
    if (qword_1010EA428 == -1)
    {
LABEL_17:
      swift_retain();
      sub_100C49AB4(v45, v46, 0);
      swift_release();
      sub_1000126B0(v54, type metadata accessor for SecureLocationsCachedSharedKey);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v50, v30);
      swift_bridgeObjectRetain(v46);
      v48 = 0;
      v47 = _swiftEmptyArrayStorage;
      goto LABEL_11;
    }
LABEL_34:
    swift_once(&qword_1010EA428, sub_100C48554);
    goto LABEL_17;
  }
  v54 = v152;
  sub_1000126EC((uint64_t)v18, v152, type metadata accessor for SecureLocationsCachedSharedKey);
  v75 = (uint64_t *)(v54 + v51[7]);
  v76 = v75[1];
  if (v76 >> 60 == 15)
  {
    v46 = v159;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v77 = type metadata accessor for Logger(0);
    sub_10001A9E8(v77, (uint64_t)qword_1011B7A18);
    swift_bridgeObjectRetain_n(v46, 2);
    v79 = Logger.logObject.getter(v78);
    v80 = static os_log_type_t.default.getter(v79);
    v81 = os_log_type_enabled(v79, v80);
    v45 = v157;
    if (v81)
    {
      v82 = (uint8_t *)swift_slowAlloc(12, -1);
      v83 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v167 = v83;
      *(_DWORD *)v82 = 136315138;
      swift_bridgeObjectRetain(v46);
      *(_QWORD *)&v164 = sub_100016940(v45, v46, (uint64_t *)&v167);
      v50 = (uint64_t)v156;
      v54 = v152;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, (char *)&v164 + 8, v82 + 4, v82 + 12);
      swift_bridgeObjectRelease_n(v46, 3);
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "Found shared key record but no locationId for %s. Looks like we didn't receive keys", v82, 0xCu);
      swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v83, -1, -1);
      swift_slowDealloc(v82, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v46, 2);
    }
    v49 = v158;
    if (qword_1010EA428 == -1)
      goto LABEL_17;
    goto LABEL_34;
  }
  v84 = *v75;
  LOBYTE(v170) = 0;
  v151 = v84;
  v153 = v76;
  sub_10001BBBC(v84, v76);
  v46 = v159;
  v142 = v31;
  if ((v147 & 1) == 0)
  {
    v85 = v50;
    v86 = v146;
    sub_10081CC74(v85, v146);
    v87 = type metadata accessor for SecureLocationsCachedPayload(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 48))(v86, 1, v87) == 1)
    {
      sub_100004048(v86, &qword_101111AE0);
      LOBYTE(v170) = 1;
      if (qword_1010EA428 != -1)
        swift_once(&qword_1010EA428, sub_100C48554);
      swift_retain();
      v88 = v157;
      sub_100C49D84(v157, v46, 0);
      swift_release();
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v89 = type metadata accessor for Logger(0);
      sub_10001A9E8(v89, (uint64_t)qword_1011B7A18);
      swift_bridgeObjectRetain_n(v46, 2);
      v91 = Logger.logObject.getter(v90);
      v92 = static os_log_type_t.default.getter(v91);
      if (os_log_type_enabled(v91, v92))
      {
        v154 = v30;
        v93 = (uint8_t *)swift_slowAlloc(12, -1);
        v94 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v167 = v94;
        *(_DWORD *)v93 = 136315138;
        swift_bridgeObjectRetain(v46);
        *(_QWORD *)&v164 = sub_100016940(v88, v46, (uint64_t *)&v167);
        v30 = v154;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, (char *)&v164 + 8, v93 + 4, v93 + 12);
        swift_bridgeObjectRelease_n(v46, 3);
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "subscribeAndFetch data %s no cached location", v93, 0xCu);
        swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v94, -1, -1);
        swift_slowDealloc(v93, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v46, 2);
      }
      v53 = &qword_1010EA000;
    }
    else
    {
      v95 = v143;
      sub_10005972C(v86 + *(int *)(v87 + 20), v143, type metadata accessor for SecureLocation);
      sub_1000126B0(v86, type metadata accessor for SecureLocationsCachedPayload);
      v96 = v145;
      sub_1000126EC(v95, v145, type metadata accessor for SecureLocation);
      if (qword_1010EA0A8 != -1)
        swift_once(&qword_1010EA0A8, sub_10098F82C);
      v154 = v30;
      swift_retain();
      v97 = sub_100996350(v96);
      swift_release();
      v98 = (v97 & 1) != 0 && objc_msgSend(v155, "subscriptionMode") == 0;
      v99 = v157;
      v100 = (uint64_t)v144;
      LODWORD(v150) = v98;
      LOBYTE(v170) = v98;
      if (qword_1010EA428 != -1)
        swift_once(&qword_1010EA428, sub_100C48554);
      swift_retain();
      v46 = v159;
      sub_100C49D84(v99, v159, 2);
      swift_release();
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v101 = type metadata accessor for Logger(0);
      sub_10001A9E8(v101, (uint64_t)qword_1011B7A18);
      sub_10005972C(v96, v100, type metadata accessor for SecureLocation);
      swift_bridgeObjectRetain_n(v46, 2);
      v103 = Logger.logObject.getter(v102);
      v104 = static os_log_type_t.default.getter(v103);
      if (os_log_type_enabled(v103, v104))
      {
        v105 = swift_slowAlloc(28, -1);
        v106 = swift_slowAlloc(64, -1);
        *(_QWORD *)&v167 = v106;
        *(_DWORD *)v105 = 136315650;
        swift_bridgeObjectRetain(v46);
        *(_QWORD *)&v164 = sub_100016940(v99, v46, (uint64_t *)&v167);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, (char *)&v164 + 8, v105 + 4, v105 + 12);
        swift_bridgeObjectRelease_n(v46, 3);
        *(_WORD *)(v105 + 12) = 2080;
        v107 = sub_100AA64E4();
        *(_QWORD *)&v164 = sub_100016940(v107, v108, (uint64_t *)&v167);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, (char *)&v164 + 8, v105 + 14, v105 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v100, type metadata accessor for SecureLocation);
        *(_WORD *)(v105 + 22) = 1024;
        LODWORD(v164) = v150;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, (char *)&v164 + 4, v105 + 24, v105 + 28);
        _os_log_impl((void *)&_mh_execute_header, v103, v104, "subscribeAndFetch data %s got cached location %s isAging %{BOOL}d", (uint8_t *)v105, 0x1Cu);
        swift_arrayDestroy(v106, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v106, -1, -1);
        v109 = v105;
        v53 = &qword_1010EA000;
        swift_slowDealloc(v109, -1, -1);

        v110 = v145;
      }
      else
      {

        sub_1000126B0(v100, type metadata accessor for SecureLocation);
        swift_bridgeObjectRelease_n(v46, 2);
        v110 = v96;
      }
      sub_1000126B0(v110, type metadata accessor for SecureLocation);
      v30 = v154;
    }
  }
  if (v53[133] != -1)
    swift_once(&qword_1010EA428, sub_100C48554);
  swift_retain();
  v45 = v157;
  sub_100C49AB4(v157, v46, 1);
  swift_release();
  *(_QWORD *)&v111 = swift_beginAccess(&v170, &v167, 0, 0).n128_u64[0];
  if ((v170 & 1) == 0 && (v147 & 1) == 0)
    goto LABEL_58;
  v112 = objc_msgSend(v155, "clientApp", v111, v142);
  v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
  v115 = v114;

  if (v113 == 0xD000000000000017 && v115 == 0x8000000100ED6940)
    goto LABEL_56;
  v116 = _stringCompareWithSmolCheck(_:_:expecting:)(v113, v115, 0xD000000000000017, 0x8000000100ED6940, 0);
  swift_bridgeObjectRelease();
  if ((v116 & 1) == 0)
  {
    v127 = objc_msgSend(v155, "clientApp");
    v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(v127);
    v130 = v129;

    if (v128 == 0xD000000000000015 && v130 == 0x8000000100ED6920)
    {
LABEL_56:
      swift_bridgeObjectRelease();
      goto LABEL_58;
    }
    v131 = _stringCompareWithSmolCheck(_:_:expecting:)(v128, v130, 0xD000000000000015, 0x8000000100ED6920, 0);
    swift_bridgeObjectRelease();
    if ((v131 & 1) == 0)
    {
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v132 = type metadata accessor for Logger(0);
      sub_10001A9E8(v132, (uint64_t)qword_1011B7A18);
      swift_bridgeObjectRetain_n(v46, 2);
      v134 = Logger.logObject.getter(v133);
      v135 = static os_log_type_t.default.getter(v134);
      if (os_log_type_enabled(v134, v135))
      {
        v136 = (uint8_t *)swift_slowAlloc(12, -1);
        v137 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v164 = v137;
        *(_DWORD *)v136 = 136315138;
        swift_bridgeObjectRetain(v46);
        v162 = sub_100016940(v45, v46, (uint64_t *)&v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v136 + 4, v136 + 12);
        swift_bridgeObjectRelease_n(v46, 3);
        _os_log_impl((void *)&_mh_execute_header, v134, v135, "We may have stale locationId. Requesting new keys for %s", v136, 0xCu);
        swift_arrayDestroy(v137, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v137, -1, -1);
        swift_slowDealloc(v136, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v46, 2);
      }
      v49 = v158;
      v138 = v142;
      v139 = v151;
      v140 = sub_10001A9A8(&qword_1010F4A30);
      v47 = (_QWORD *)swift_allocObject(v140, 48, 7);
      *((_OWORD *)v47 + 1) = xmmword_100E22B00;
      v141 = v153;
      v47[4] = v139;
      v47[5] = v141;
      sub_1000126B0(v54, type metadata accessor for SecureLocationsCachedSharedKey);
      (*(void (**)(char *, uint64_t))(v138 + 8))(v156, v30);
      swift_bridgeObjectRetain(v46);
      v48 = 1;
      goto LABEL_11;
    }
  }
LABEL_58:
  v117 = objc_msgSend(v155, "clientApp", v111, v142);
  v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
  v120 = v119;

  if (v118 == 0xD000000000000015 && v120 == 0x8000000100ED6920)
  {
    swift_bridgeObjectRelease();
    v49 = v158;
    v121 = v151;
  }
  else
  {
    v122 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100ED6920, v118, v120, 0);
    swift_bridgeObjectRelease();
    v49 = v158;
    v121 = v151;
    if ((v122 & 1) == 0)
    {
      v125 = sub_10001A9A8(&qword_1010F4A30);
      v47 = (_QWORD *)swift_allocObject(v125, 48, 7);
      *((_OWORD *)v47 + 1) = xmmword_100E22B00;
      v126 = v153;
      v47[4] = v121;
      v47[5] = v126;
      sub_1000126B0(v54, type metadata accessor for SecureLocationsCachedSharedKey);
      (*(void (**)(char *, uint64_t))(v142 + 8))(v156, v30);
      swift_bridgeObjectRetain(v46);
      v48 = 2;
      goto LABEL_11;
    }
  }
  v123 = sub_10001A9A8(&qword_1010F4A30);
  v47 = (_QWORD *)swift_allocObject(v123, 48, 7);
  *((_OWORD *)v47 + 1) = xmmword_100E22B00;
  v124 = v153;
  v47[4] = v121;
  v47[5] = v124;
  sub_1000126B0(v54, type metadata accessor for SecureLocationsCachedSharedKey);
  (*(void (**)(char *, uint64_t))(v142 + 8))(v156, v30);
  swift_bridgeObjectRetain(v46);
  v48 = 3;
LABEL_11:
  *(_QWORD *)v49 = v45;
  *(_QWORD *)(v49 + 8) = v46;
  *(_QWORD *)(v49 + 16) = v47;
  *(_QWORD *)(v49 + 24) = 0;
  *(_BYTE *)(v49 + 32) = v48;
}

void sub_10043E228(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010FC1E8);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v11, &qword_1010FC1E8);
  if (swift_getEnumCaseMultiPayload(v11, v9) == 1)
  {
    v12 = *v11;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v13 = type metadata accessor for Logger(0);
    sub_10001A9E8(v13, (uint64_t)qword_1011B7A18);
    swift_errorRetain(v12);
    v14 = swift_errorRetain(v12);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v28 = v12;
      v29 = v18;
      *(_DWORD *)v17 = 136315138;
      swift_errorRetain(v12);
      v19 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v20 = String.init<A>(describing:)(&v28, v19);
      v28 = sub_100016940(v20, v21, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v12);
      swift_errorRelease(v12);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to save new sharedKeyRecord %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      swift_errorRelease(v12);
    }
    else
    {
      swift_errorRelease(v12);
      swift_errorRelease(v12);
      swift_errorRelease(v12);

    }
  }
  else
  {
    sub_1000126EC((uint64_t)v11, (uint64_t)v8, type metadata accessor for SecureLocationsCachedSharedKey);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v22 = type metadata accessor for Logger(0);
    sub_10001A9E8(v22, (uint64_t)qword_1011B7A18);
    swift_bridgeObjectRetain_n(a3, 2);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v29 = v27;
      *(_DWORD *)v26 = 136315138;
      swift_bridgeObjectRetain(a3);
      v28 = sub_100016940(a2, a3, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Created new sharedKeyRecord awaiting keys for %s", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a3, 2);
    }

    sub_1000126B0((uint64_t)v8, type metadata accessor for SecureLocationsCachedSharedKey);
  }
}

uint64_t sub_10043E624@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45[2];
  uint64_t v46;
  uint64_t v47;

  v44 = a3;
  v5 = sub_10001A9A8(&qword_101111B20);
  __chkstk_darwin(v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  v40 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v39 = (uint64_t)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.Encoding(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v13);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v18);
  v42 = a1;
  v43 = a2;
  v21 = String.data(using:allowLossyConversion:)(v12, 0, a1, a2);
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v23 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
LABEL_4:
    v25 = &qword_1010ED860;
    v26 = (uint64_t)v15;
    goto LABEL_5;
  }
  v45[0] = v21;
  v45[1] = v23;
  v24 = sub_100035530();
  DataProtocol.stableUUID.getter(&type metadata for Data, v24);
  sub_10001EF3C(v21, v23);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
    goto LABEL_4;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v20, v15, v16);
  sub_10081CC88((uint64_t)v20, (uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  v37 = v41;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v7, 1, v41) != 1)
  {
    v38 = v39;
    sub_1000126EC((uint64_t)v7, v39, type metadata accessor for SecureLocationsCachedSharedKey);
    sub_10000F9B8(v38 + *(int *)(v37 + 44), v44, (uint64_t *)&unk_1010EA690);
    return sub_1000126B0(v38, type metadata accessor for SecureLocationsCachedSharedKey);
  }
  v25 = &qword_101111B20;
  v26 = (uint64_t)v7;
LABEL_5:
  sub_100004048(v26, v25);
  v28 = v43;
  v27 = v44;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v29 = type metadata accessor for Logger(0);
  sub_10001A9E8(v29, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain_n(v28, 2);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.error.getter(v31);
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = swift_slowAlloc(32, -1);
    v45[0] = v34;
    *(_DWORD *)v33 = 136315138;
    swift_bridgeObjectRetain(v28);
    v46 = sub_100016940(v42, v28, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v33 + 4, v33 + 12);
    swift_bridgeObjectRelease_n(v28, 3);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Unable to get SecureLocationsCachedSharedKey for findMyId %s", v33, 0xCu);
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v28, 2);
  }
  v35 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v27, 1, 1, v35);
}

void sub_10043EA98(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  char *v70;
  char *v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98[2];
  uint64_t v99;
  uint64_t v100;

  v80 = a3;
  v5 = type metadata accessor for DispatchTime(0);
  v89 = *(_QWORD *)(v5 - 8);
  v90 = v5;
  v6 = __chkstk_darwin(v5);
  v94 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v95 = (char *)&v79 - v8;
  v81 = sub_10001A9A8(&qword_1010FC1E8);
  __chkstk_darwin(v81);
  v82 = (uint64_t)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v87 = *(_QWORD *)(v10 - 8);
  v88 = v10;
  v11 = __chkstk_darwin(v10);
  v86 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v85 = (char *)&v79 - v13;
  v14 = sub_10001A9A8(&qword_101111B20);
  __chkstk_darwin(v14);
  v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  v91 = *(_QWORD *)(v17 - 8);
  v92 = v17;
  v18 = __chkstk_darwin(v17);
  v83 = (uint64_t)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v84 = (uint64_t)&v79 - v20;
  v21 = type metadata accessor for String.Encoding(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v25);
  v27 = (char *)&v79 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for UUID(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = __chkstk_darwin(v28);
  v96 = (char *)&v79 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v30);
  v97 = a1;
  v32 = a1;
  v33 = a2;
  v34 = String.data(using:allowLossyConversion:)(v24, 0, v32, a2);
  v36 = v35;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  if (v36 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, 1, 1, v28);
LABEL_4:
    sub_100004048((uint64_t)v27, &qword_1010ED860);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v38 = type metadata accessor for Logger(0);
    sub_10001A9E8(v38, (uint64_t)qword_1011B7A18);
    swift_bridgeObjectRetain_n(v33, 2);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      v98[0] = v43;
      *(_DWORD *)v42 = 136315138;
      swift_bridgeObjectRetain(v33);
      v99 = sub_100016940(v97, v33, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease_n(v33, 3);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Unable to create stableUUID from findMyId %s", v42, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v33, 2);
    }
    return;
  }
  v98[0] = v34;
  v98[1] = v36;
  v37 = sub_100035530();
  DataProtocol.stableUUID.getter(&type metadata for Data, v37);
  sub_10001EF3C(v34, v36);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v27, 0, 1, v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) == 1)
    goto LABEL_4;
  v44 = v28;
  v45 = (uint64_t)v96;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v96, v27, v28);
  v46 = dispatch_group_create();
  dispatch_group_enter(v46);
  v47 = *(_QWORD *)(v93 + 24);
  sub_10081CC88(v45, (uint64_t)v16);
  v48 = v92;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v16, 1, v92) == 1)
  {
    v49 = sub_100004048((uint64_t)v16, &qword_101111B20);
    v50 = v89;
    v51 = v90;
  }
  else
  {
    v93 = v29;
    v91 = v28;
    v52 = v84;
    sub_1000126EC((uint64_t)v16, v84, type metadata accessor for SecureLocationsCachedSharedKey);
    v79 = v47;
    v54 = v87;
    v53 = v88;
    v55 = v48;
    v56 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
    v57 = v85;
    v58 = v80;
    v56(v85, v80, v88);
    v56(v86, v58, v53);
    v59 = v83;
    sub_10005972C(v52, v83, type metadata accessor for SecureLocationsCachedSharedKey);
    v60 = v59 + *(int *)(v55 + 44);
    v61 = v46;
    swift_bridgeObjectRetain(v33);
    sub_100004048(v60, (uint64_t *)&unk_1010EA690);
    v56((char *)v60, (uint64_t)v57, v53);
    v62 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v54 + 56))(v60, 0, 1, v53);
    __chkstk_darwin(v62);
    *(&v79 - 2) = v63;
    *(&v79 - 1) = v59;
    OS_dispatch_queue.sync<A>(execute:)(sub_100449818, &v79 - 4, &type metadata for () + 1);
    sub_1007EEF64(8);
    v64 = v82;
    sub_10005972C(v59, v82, type metadata accessor for SecureLocationsCachedSharedKey);
    swift_storeEnumTagMultiPayload(v64, v81, 0);
    v65 = v33;
    v66 = (uint64_t)v86;
    sub_10043F418(v64, v61, v97, v65, (uint64_t)v86);
    v67 = v61;
    v51 = v90;
    v44 = v91;
    sub_100004048(v64, &qword_1010FC1E8);
    sub_1000126B0(v59, type metadata accessor for SecureLocationsCachedSharedKey);
    swift_bridgeObjectRelease();

    v68 = v88;
    v69 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
    v69(v66, v88);
    v69((uint64_t)v85, v68);
    v49 = sub_1000126B0(v84, type metadata accessor for SecureLocationsCachedSharedKey);
    v50 = v89;
    v29 = v93;
  }
  v70 = v94;
  static DispatchTime.now()(v49);
  v71 = v95;
  + infix(_:_:)(v70, 5.0);
  v72 = *(void (**)(char *, uint64_t))(v50 + 8);
  v72(v70, v51);
  v73 = OS_dispatch_group.wait(timeout:)(v71) & 1;
  v72(v71, v51);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v73, 1) & 1) != 0)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v74 = type metadata accessor for Logger(0);
    v75 = sub_10001A9E8(v74, (uint64_t)qword_1011B7A18);
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.default.getter(v76);
    if (os_log_type_enabled(v76, v77))
    {
      v78 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v78 = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Timed out trying to update last proactive subscribe time", v78, 2u);
      swift_slowDealloc(v78, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v29 + 8))(v96, v44);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v96, v44);

  }
}

void sub_10043F418(uint64_t a1, NSObject *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  dispatch_group_t v39;
  uint64_t v40;
  uint64_t v41;

  v38 = a3;
  v39 = a2;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010FC1E8);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v17, &qword_1010FC1E8);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = *v17;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v19 = type metadata accessor for Logger(0);
    sub_10001A9E8(v19, (uint64_t)qword_1011B7A18);
    swift_bridgeObjectRetain_n(a4, 2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v41 = v24;
      *(_DWORD *)v23 = 136315138;
      swift_bridgeObjectRetain(a4);
      v40 = sub_100016940(v38, a4, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error updating lastProactiveSubmissionTime for %s", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a4, 2);
    }
    swift_errorRelease(v18);

  }
  else
  {
    sub_1000126EC((uint64_t)v17, (uint64_t)v14, type metadata accessor for SecureLocationsCachedSharedKey);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v25 = type metadata accessor for Logger(0);
    sub_10001A9E8(v25, (uint64_t)qword_1011B7A18);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a5, v8);
    swift_bridgeObjectRetain_n(a4, 2);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(22, -1);
      v37 = v14;
      v30 = v29;
      v31 = swift_slowAlloc(64, -1);
      v41 = v31;
      *(_DWORD *)v30 = 136315394;
      swift_bridgeObjectRetain(a4);
      v40 = sub_100016940(v38, a4, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v30 + 4, v30 + 12);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v30 + 12) = 2080;
      v32 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v8, v32);
      v40 = sub_100016940(v33, v34, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v30 + 14, v30 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Updated lastProactiveSubscriptionTime for %s to %s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      v35 = (uint64_t)v37;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      swift_bridgeObjectRelease_n(a4, 2);
      v35 = (uint64_t)v14;
    }
    sub_1000126B0(v35, type metadata accessor for SecureLocationsCachedSharedKey);
  }
  dispatch_group_leave(v39);
}

uint64_t sub_10043F8D0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83[6];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;

  v74 = type metadata accessor for HashAlgorithm(0);
  v73 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v72 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_101111B20);
  __chkstk_darwin(v5);
  v78 = (uint64_t)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  v76 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v75 = (uint64_t)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.Encoding(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v12);
  v14 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v80 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v17);
  v19 = a1;
  v20 = a2;
  v21 = String.data(using:allowLossyConversion:)(v11, 0, a1, a2);
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v23 >> 60 != 15)
  {
    *(_QWORD *)&v87 = v21;
    *((_QWORD *)&v87 + 1) = v23;
    v25 = sub_100035530();
    DataProtocol.stableUUID.getter(&type metadata for Data, v25);
    sub_10001EF3C(v21, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
    v24 = v19;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
      goto LABEL_4;
    v33 = v15;
    v71 = v16;
    v34 = (uint64_t)v80;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v80, v14, v33);
    v35 = *(_QWORD *)(v79 + 32);
    v36 = sub_10001A9A8(&qword_1010F6350);
    OS_dispatch_queue.sync<A>(execute:)(sub_100449590, v35, v36);
    v37 = v20;
    if (*((_QWORD *)&v87 + 1))
    {
      if (v87 == __PAIR128__(v20, v24))
      {
        swift_bridgeObjectRelease();
LABEL_14:
        sub_1008B540C(v83);
        sub_100005CF0((uint64_t)v83, (uint64_t)&v84, &qword_1010FA1E0);
        if (*((_QWORD *)&v85 + 1) >> 60 == 15)
        {
          (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v34, v33);
          swift_bridgeObjectRetain(v20);
          return v24;
        }
        v87 = v84;
        v88 = v85;
        v89 = v86;
        v50 = sub_10001A9A8(&qword_1010F4A30);
        v51 = swift_allocObject(v50, 48, 7);
        *(_OWORD *)(v51 + 16) = xmmword_100E22B00;
        v90 = v88;
        v52 = v88;
        sub_100059DE8((uint64_t)&v90);
        v53 = sub_1007E6F8C(v52, *((uint64_t *)&v52 + 1));
        v55 = v54;
        v79 = v33;
        sub_1000ADA04((uint64_t)&v90);
        sub_1002F7394(v53, v55);
        v56 = v81;
        v57 = v82;
        v58 = v73;
        v59 = v72;
        v60 = v74;
        (*(void (**)(char *, _QWORD, uint64_t))(v73 + 104))(v72, enum case for HashAlgorithm.sha256(_:), v74);
        v61 = Data.hash(algorithm:)(v59, v56, v57);
        v63 = v62;
        (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v60);
        sub_10001BC14(v56, v57);
        *(_QWORD *)(v51 + 32) = v61;
        *(_QWORD *)(v51 + 40) = v63;
        sub_1003D15A0((uint64_t)v83);
        (*(void (**)(char *, uint64_t))(v71 + 8))(v80, v79);
LABEL_33:
        swift_bridgeObjectRetain(v37);
        return v24;
      }
      v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v20, v87, *((_QWORD *)&v87 + 1), 0);
      swift_bridgeObjectRelease();
      if ((v38 & 1) != 0)
        goto LABEL_14;
    }
    v39 = v78;
    sub_10081CC88(v34, v78);
    v40 = v77;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v39, 1, v77) == 1)
    {
      sub_100004048(v39, &qword_101111B20);
    }
    else
    {
      v41 = v75;
      sub_1000126EC(v39, v75, type metadata accessor for SecureLocationsCachedSharedKey);
      v42 = v41 + *(int *)(v40 + 28);
      v43 = *(_QWORD *)(v42 + 8);
      if (v43 >> 60 != 15)
      {
        v65 = *(_QWORD *)v42;
        sub_10001BBBC(*(_QWORD *)v42, *(_QWORD *)(v42 + 8));
        sub_10001BBBC(v65, v43);
        v66 = sub_1007C77D4(0, 1, 1, _swiftEmptyArrayStorage);
        v68 = v66[2];
        v67 = v66[3];
        if (v68 >= v67 >> 1)
          v66 = sub_1007C77D4((_QWORD *)(v67 > 1), v68 + 1, 1, v66);
        v64 = v71;
        v66[2] = v68 + 1;
        v69 = &v66[2 * v68];
        v69[4] = v65;
        v69[5] = v43;
        sub_10001EF3C(v65, v43);
        sub_1000126B0(v41, type metadata accessor for SecureLocationsCachedSharedKey);
        v34 = (uint64_t)v80;
        goto LABEL_32;
      }
      sub_1000126B0(v41, type metadata accessor for SecureLocationsCachedSharedKey);
    }
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v44 = type metadata accessor for Logger(0);
    sub_10001A9E8(v44, (uint64_t)qword_1011B7A18);
    swift_bridgeObjectRetain_n(v20, 2);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.default.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = swift_slowAlloc(22, -1);
      v49 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v87 = v49;
      *(_DWORD *)v48 = 141558275;
      *(_QWORD *)&v84 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, (char *)&v84 + 8, v48 + 4, v48 + 12);
      *(_WORD *)(v48 + 12) = 2081;
      swift_bridgeObjectRetain(v37);
      *(_QWORD *)&v84 = sub_100016940(v24, v37, (uint64_t *)&v87);
      v34 = (uint64_t)v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, (char *)&v84 + 8, v48 + 14, v48 + 22);
      swift_bridgeObjectRelease_n(v37, 3);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Unsubscribe: Cannot find shared key record or locationId. Looks like we didn't receive keys for %{private,mask.hash}s", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v37, 2);
    }
    v64 = v71;
    if (qword_1010EA428 != -1)
      swift_once(&qword_1010EA428, sub_100C48554);
    swift_retain();
    sub_100C49AB4(v24, v37, 0);
    swift_release();
LABEL_32:
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v34, v33);
    goto LABEL_33;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
  v24 = v19;
LABEL_4:
  sub_100004048((uint64_t)v14, &qword_1010ED860);
  v26 = v20;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v27 = type metadata accessor for Logger(0);
  sub_10001A9E8(v27, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain_n(v20, 2);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.error.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v87 = v32;
    *(_DWORD *)v31 = 136315138;
    swift_bridgeObjectRetain(v26);
    *(_QWORD *)&v84 = sub_100016940(v24, v26, (uint64_t *)&v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, (char *)&v84 + 8, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease_n(v26, 3);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Unable to create stableUUID from findMyId %s", v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v26, 2);
  }
  return 0;
}

uint64_t sub_10044036C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[6];

  v5 = v4;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = *(_QWORD *)(v5 + 16);
  v17 = swift_allocObject(&unk_101077168, 56, 7);
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 24) = v5;
  *(_BYTE *)(v17 + 32) = a2;
  *(_QWORD *)(v17 + 40) = a3;
  *(_QWORD *)(v17 + 48) = a4;
  aBlock[4] = sub_1004496C8;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101077180;
  v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  swift_retain();
  v19 = swift_retain();
  static DispatchQoS.unspecified.getter(v19);
  v26 = _swiftEmptyArrayStorage;
  v20 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v22 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v21, v22, v10, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v12, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return swift_release();
}

uint64_t sub_100440584(uint64_t a1, uint64_t a2, int a3, void (*a4)(__n128), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  _QWORD *v51;
  NSObject *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  void (*v93)(char *, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  os_log_type_t v98;
  _BOOL4 v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  _BOOL4 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  os_log_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v132;
  unint64_t v133;
  uint64_t result;
  uint64_t v136;
  uint64_t v137;
  NSObject *v138;
  os_log_type_t v139;
  uint8_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  NSObject *v150;
  os_log_type_t v151;
  uint64_t v152;
  void (*v153)(__n128);
  __n128 v154;
  _QWORD v155[2];
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  __n128 v160;
  char *v161;
  int v162;
  unint64_t *v163;
  char *v164;
  uint64_t v165;
  void (*v166)(__n128);
  uint64_t v167;
  uint64_t v168;
  os_log_t v169;
  uint64_t v170;
  unint64_t *v171;
  uint8_t *v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  __n128 v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  unint64_t v211;

  v165 = a5;
  v166 = a4;
  v197 = a2;
  v190 = type metadata accessor for DispatchTime(0);
  v189 = *(_QWORD *)(v190 - 8);
  v7 = __chkstk_darwin(v190);
  v188 = (char *)v155 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v187 = (char *)v155 - v9;
  v198 = type metadata accessor for SecureLocationsCachedPayload(0);
  v196 = *(_QWORD *)(v198 - 8);
  v10 = __chkstk_darwin(v198);
  v186 = (char *)v155 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v155 - v13;
  v15 = __chkstk_darwin(v12);
  v158 = (uint64_t)v155 - v16;
  v17 = __chkstk_darwin(v15);
  v173 = (uint64_t)v155 - v18;
  __chkstk_darwin(v17);
  v204 = (uint64_t)v155 - v19;
  v20 = type metadata accessor for UUID(0);
  v202 = *(_QWORD *)(v20 - 8);
  v203 = v20;
  __chkstk_darwin(v20);
  v201 = (char *)v155 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8(&qword_101111AE0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)v155 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v23);
  v177 = (uint64_t)v155 - v27;
  v28 = __chkstk_darwin(v26);
  v30 = (char *)v155 - v29;
  __chkstk_darwin(v28);
  v207 = (uint64_t)v155 - v31;
  v179 = type metadata accessor for SecureLocation(0);
  v32 = *(_QWORD *)(v179 - 8);
  v33 = *(_QWORD *)(v32 + 64);
  v34 = __chkstk_darwin(v179);
  v35 = (char *)v155 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v34);
  v167 = (uint64_t)v155 - v37;
  v38 = __chkstk_darwin(v36);
  v192 = (uint64_t)v155 - v39;
  v40 = __chkstk_darwin(v38);
  v176 = (uint64_t)v155 - v41;
  __chkstk_darwin(v40);
  v200 = (char *)v155 - v42;
  v43 = swift_allocObject(&unk_1010770A0, 24, 7);
  v193 = v43;
  *(_QWORD *)(v43 + 16) = _swiftEmptyArrayStorage;
  v171 = (unint64_t *)(v43 + 16);
  v44 = swift_allocObject(&unk_1010771B8, 24, 7);
  v45 = v44;
  *(_QWORD *)(v44 + 16) = 0;
  v157 = v44 + 16;
  v46 = *(_QWORD *)(a1 + 16);
  if (v46)
  {
    v164 = v25;
    v191 = v44;
    v47 = *(unsigned __int8 *)(v32 + 80);
    v156 = (v47 + 32) & ~v47;
    v48 = a1 + v156;
    v206 = *(_QWORD *)(v32 + 72);
    v163 = &v211;
    v175 = a3;
    v162 = a3 & 1;
    v161 = (char *)&v210 + 4;
    v155[0] = &v209;
    v183 = v47 | 7;
    v184 = (v47 + 24) & ~v47;
    v182 = (v33 + v184 + 7) & 0xFFFFFFFFFFFFFFF8;
    v181 = (v182 + 15) & 0xFFFFFFFFFFFFFFF8;
    v180 = v181 + 8;
    v155[1] = a1;
    v49 = swift_bridgeObjectRetain(a1);
    v170 = 0;
    v49.n128_u64[0] = 136315650;
    v160 = v49;
    v159 = (char *)&type metadata for Any + 8;
    v49.n128_u64[0] = 136315138;
    v178 = v49;
    v185 = v14;
    v50 = v204;
    v51 = v200;
    v194 = v30;
    v195 = (char *)v155 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
    while (1)
    {
      sub_10005972C(v48, (uint64_t)v51, type metadata accessor for SecureLocation);
      if (qword_1010EA0A8 != -1)
        swift_once(&qword_1010EA0A8, sub_10098F82C);
      swift_retain();
      v53 = sub_100995F58((uint64_t)v51);
      swift_release();
      if ((v53 & 1) != 0)
      {
        v205 = v46;
        v54 = String.utf8Data.getter(*v51, v51[1]);
        v55 = (uint64_t)v51;
        v57 = v56;
        v210 = v54;
        v211 = v56;
        v58 = sub_100035530();
        v59 = (uint64_t)v201;
        DataProtocol.stableUUID.getter(&type metadata for Data, v58);
        sub_10001BC14(v54, v57);
        v60 = v207;
        sub_10081CC74(v59, v207);
        v61 = (uint64_t)v194;
        (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v59, v203);
        sub_10000F9B8(v60, v61, &qword_101111AE0);
        v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v196 + 48);
        v63 = v198;
        if (v62(v61, 1, v198) == 1)
        {
          v199 = v48;
          sub_100004048(v61, &qword_101111AE0);
          v51 = (_QWORD *)v55;
LABEL_17:
          v77 = v192;
          sub_10005972C((uint64_t)v51, v192, type metadata accessor for SecureLocation);
          v78 = v186;
          v79 = &v186[*(int *)(v63 + 20)];
          sub_10005972C(v77, (uint64_t)v79, type metadata accessor for SecureLocation);
          v80 = String.utf8Data.getter(*(_QWORD *)v79, *((_QWORD *)v79 + 1));
          v81 = (uint64_t)v51;
          v83 = v82;
          v210 = v80;
          v211 = v82;
          v84 = v201;
          DataProtocol.stableUUID.getter(&type metadata for Data, v58);
          sub_10001BC14(v80, v83);
          sub_1000126B0(v77, type metadata accessor for SecureLocation);
          (*(void (**)(char *, char *, uint64_t))(v202 + 32))(v78, v84, v203);
          v85 = (uint64_t)v78;
          v86 = (uint64_t)v185;
          sub_1000126EC(v85, (uint64_t)v185, type metadata accessor for SecureLocationsCachedPayload);
          v87 = dispatch_group_create();
          dispatch_group_enter(v87);
          sub_10005972C(v81, v77, type metadata accessor for SecureLocation);
          v88 = swift_allocObject(&unk_1010771E0, v180, v183);
          *(_QWORD *)(v88 + 16) = v87;
          sub_1000126EC(v77, v88 + v184, type metadata accessor for SecureLocation);
          *(_QWORD *)(v88 + v182) = v193;
          *(_QWORD *)(v88 + v181) = v191;
          swift_retain();
          v89 = v87;
          swift_retain();
          sub_100CAA410(v86, (uint64_t)sub_1004497B8, v88);
          v90 = swift_release();
          v91 = v188;
          static DispatchTime.now()(v90);
          v92 = v187;
          + infix(_:_:)(v91, 10.0);
          v93 = *(void (**)(char *, uint64_t))(v189 + 8);
          v94 = v190;
          v93(v91, v190);
          v95 = OS_dispatch_group.wait(timeout:)(v92) & 1;
          v93(v92, v94);
          if ((static DispatchTimeoutResult.== infix(_:_:)(v95, 1) & 1) != 0)
          {
            v46 = v205;
            v48 = v199;
            if (qword_1010EA098 != -1)
              swift_once(&qword_1010EA098, sub_10098F7D8);
            v96 = type metadata accessor for Logger(0);
            v97 = sub_10001A9E8(v96, (uint64_t)qword_1011B7A18);
            v52 = Logger.logObject.getter(v97);
            v98 = static os_log_type_t.default.getter(v52);
            v99 = os_log_type_enabled(v52, v98);
            v51 = v200;
            if (v99)
            {
              v100 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v100 = 0;
              _os_log_impl((void *)&_mh_execute_header, v52, v98, "saveLocation: timed out waiting to save securelocation record", v100, 2u);
              swift_slowDealloc(v100, -1, -1);
            }

            v35 = v195;
          }
          else
          {
            v52 = v89;
            v35 = v195;
            v48 = v199;
            v51 = v200;
            v46 = v205;
          }

          sub_1000126B0(v86, type metadata accessor for SecureLocationsCachedPayload);
          sub_100004048(v207, &qword_101111AE0);
          sub_1000126B0((uint64_t)v51, type metadata accessor for SecureLocation);
          v50 = v204;
          goto LABEL_5;
        }
        v75 = v204;
        sub_1000126EC(v61, v204, type metadata accessor for SecureLocationsCachedPayload);
        v76 = *(int *)(v179 + 52);
        v199 = v75 + *(int *)(v63 + 20);
        v51 = (_QWORD *)v55;
        if ((static Date.< infix(_:_:)(v199 + v76, v55 + v76) & 1) != 0)
        {
          v199 = v48;
          sub_1000126B0(v75, type metadata accessor for SecureLocationsCachedPayload);
          goto LABEL_17;
        }
        if (qword_1010EA098 != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v102 = type metadata accessor for Logger(0);
        v103 = sub_10001A9E8(v102, (uint64_t)qword_1011B7A18);
        v104 = v177;
        sub_10000F9B8(v207, v177, &qword_101111AE0);
        v105 = v176;
        v106 = sub_10005972C(v55, v176, type metadata accessor for SecureLocation);
        v172 = (uint8_t *)v103;
        v107 = Logger.logObject.getter(v106);
        LODWORD(v174) = static os_log_type_t.default.getter(v107);
        v108 = os_log_type_enabled(v107, (os_log_type_t)v174);
        v35 = v195;
        v46 = v205;
        if (v108)
        {
          v169 = v107;
          v109 = swift_slowAlloc(28, -1);
          v168 = swift_slowAlloc(64, -1);
          v208 = v168;
          *(_DWORD *)v109 = v160.n128_u32[0];
          v110 = v104;
          v111 = (uint64_t)v164;
          sub_10000F9B8(v110, (uint64_t)v164, &qword_101111AE0);
          v112 = v198;
          if (v62(v111, 1, v198) == 1)
          {
            sub_100004048(v111, &qword_101111AE0);
            v113 = 0;
            v114 = 0;
          }
          else
          {
            v115 = v111 + *(int *)(v112 + 20);
            v116 = v192;
            sub_10005972C(v115, v192, type metadata accessor for SecureLocation);
            sub_1000126B0(v111, type metadata accessor for SecureLocationsCachedPayload);
            v113 = sub_100AA64E4();
            v114 = v117;
            sub_1000126B0(v116, type metadata accessor for SecureLocation);
          }
          v210 = v113;
          v211 = v114;
          v118 = sub_10001A9A8(&qword_1010F6350);
          v119 = String.init<A>(describing:)(&v210, v118);
          v210 = sub_100016940(v119, v120, &v208);
          v121 = v163;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, v163, v109 + 4, v109 + 12);
          swift_bridgeObjectRelease();
          sub_100004048(v177, &qword_101111AE0);
          *(_WORD *)(v109 + 12) = 2080;
          v122 = v176;
          v123 = sub_100AA64E4();
          v210 = sub_100016940(v123, v124, &v208);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, v121, v109 + 14, v109 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0(v122, type metadata accessor for SecureLocation);
          *(_WORD *)(v109 + 22) = 1024;
          LODWORD(v210) = v162;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, v161, v109 + 24, v109 + 28);
          v125 = v169;
          _os_log_impl((void *)&_mh_execute_header, v169, (os_log_type_t)v174, "saveLocation: Not updating since existing location %s is same or newer than updated location %s returnOnlyPersisted %{BOOL}d", (uint8_t *)v109, 0x1Cu);
          v126 = v168;
          swift_arrayDestroy(v168, 2, v159);
          swift_slowDealloc(v126, -1, -1);
          swift_slowDealloc(v109, -1, -1);

          v51 = v200;
        }
        else
        {
          sub_100004048(v104, &qword_101111AE0);
          sub_1000126B0(v105, type metadata accessor for SecureLocation);

        }
        v127 = v173;
        sub_10005972C(v204, v173, type metadata accessor for SecureLocationsCachedPayload);
        if ((v175 & 1) != 0)
        {
          sub_1000126B0(v127, type metadata accessor for SecureLocationsCachedPayload);
LABEL_44:
          v50 = v204;
          v146 = v204;
LABEL_45:
          sub_1000126B0(v146, type metadata accessor for SecureLocationsCachedPayload);
          sub_100004048(v207, &qword_101111AE0);
          v101 = (uint64_t)v51;
          goto LABEL_25;
        }
        v128 = v127 + *(int *)(v198 + 20);
        swift_retain();
        LOBYTE(v128) = sub_100995F58(v128);
        swift_release();
        sub_1000126B0(v127, type metadata accessor for SecureLocationsCachedPayload);
        if ((v128 & 1) == 0)
          goto LABEL_44;
        sub_10005972C(v199, v167, type metadata accessor for SecureLocation);
        v129 = v171;
        swift_beginAccess(v171, &v210, 33, 0);
        v130 = *v129;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v129);
        *v129 = v130;
        v50 = v204;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v130 = sub_1007C9DB4(0, *(_QWORD *)(v130 + 16) + 1, 1, v130);
          *v171 = v130;
        }
        v133 = *(_QWORD *)(v130 + 16);
        v132 = *(_QWORD *)(v130 + 24);
        if (v133 >= v132 >> 1)
        {
          v130 = sub_1007C9DB4(v132 > 1, v133 + 1, 1, v130);
          *v171 = v130;
        }
        *(_QWORD *)(v130 + 16) = v133 + 1;
        sub_1000126EC(v167, v130 + v156 + v133 * v206, type metadata accessor for SecureLocation);
        result = swift_endAccess(&v210);
        if (__OFADD__(v170++, 1))
        {
          __break(1u);
          return result;
        }
        v136 = v158;
        v137 = sub_10005972C(v50, v158, type metadata accessor for SecureLocationsCachedPayload);
        v138 = Logger.logObject.getter(v137);
        v139 = static os_log_type_t.debug.getter(v138);
        if (!os_log_type_enabled(v138, v139))
        {

          sub_1000126B0(v136, type metadata accessor for SecureLocationsCachedPayload);
          v146 = v50;
          goto LABEL_45;
        }
        v140 = (uint8_t *)swift_slowAlloc(12, -1);
        v174 = swift_slowAlloc(32, -1);
        v210 = v174;
        *(_DWORD *)v140 = v178.n128_u32[0];
        v172 = v140 + 4;
        v141 = v136 + *(int *)(v198 + 20);
        v142 = v192;
        v199 = v48;
        sub_10005972C(v141, v192, type metadata accessor for SecureLocation);
        v143 = String.init<A>(describing:)(v142, v179);
        v208 = sub_100016940(v143, v144, &v210);
        v51 = v200;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v208, v155[0], v172, v140 + 12);
        swift_bridgeObjectRelease();
        v48 = v199;
        sub_1000126B0(v136, type metadata accessor for SecureLocationsCachedPayload);
        _os_log_impl((void *)&_mh_execute_header, v138, v139, "saveLocation: returnLatest cache has newer %s", v140, 0xCu);
        v145 = v174;
        swift_arrayDestroy(v174, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v145, -1, -1);
        swift_slowDealloc(v140, -1, -1);

        v50 = v204;
        sub_1000126B0(v204, type metadata accessor for SecureLocationsCachedPayload);
        sub_100004048(v207, &qword_101111AE0);
      }
      else
      {
        if (qword_1010EA098 != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v64 = type metadata accessor for Logger(0);
        sub_10001A9E8(v64, (uint64_t)qword_1011B7A18);
        v65 = sub_10005972C((uint64_t)v51, (uint64_t)v35, type metadata accessor for SecureLocation);
        v66 = Logger.logObject.getter(v65);
        v67 = static os_log_type_t.default.getter(v66);
        if (os_log_type_enabled(v66, v67))
        {
          v68 = v50;
          v69 = swift_slowAlloc(12, -1);
          v70 = swift_slowAlloc(32, -1);
          v210 = v70;
          *(_DWORD *)v69 = v178.n128_u32[0];
          v71 = sub_100AA64E4();
          *(_QWORD *)(v69 + 4) = sub_100016940(v71, v72, &v210);
          swift_bridgeObjectRelease();
          sub_1000126B0((uint64_t)v35, type metadata accessor for SecureLocation);
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "saveLocation: not saving since location older than threshold %s", (uint8_t *)v69, 0xCu);
          swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
          v73 = v70;
          v51 = v200;
          swift_slowDealloc(v73, -1, -1);
          v74 = v69;
          v50 = v68;
          swift_slowDealloc(v74, -1, -1);

        }
        else
        {

          sub_1000126B0((uint64_t)v35, type metadata accessor for SecureLocation);
        }
      }
      v101 = (uint64_t)v51;
LABEL_25:
      sub_1000126B0(v101, type metadata accessor for SecureLocation);
LABEL_5:
      v48 += v206;
      if (!--v46)
      {
        swift_bridgeObjectRelease();
        LOBYTE(a3) = v175;
        v45 = v191;
        v147 = v170;
        goto LABEL_49;
      }
    }
  }
  v147 = 0;
LABEL_49:
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v148 = type metadata accessor for Logger(0);
  sub_10001A9E8(v148, (uint64_t)qword_1011B7A18);
  v149 = swift_retain();
  v150 = Logger.logObject.getter(v149);
  v151 = static os_log_type_t.default.getter(v150);
  if (os_log_type_enabled(v150, v151))
  {
    v152 = swift_slowAlloc(28, -1);
    *(_DWORD *)v152 = 67109632;
    LODWORD(v210) = a3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, (char *)&v210 + 4, v152 + 4, v152 + 8);
    *(_WORD *)(v152 + 8) = 2048;
    swift_beginAccess(v157, &v208, 0, 0);
    v210 = *(_QWORD *)(v45 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, &v211, v152 + 10, v152 + 18);
    swift_release();
    *(_WORD *)(v152 + 18) = 2048;
    v210 = v147;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, &v211, v152 + 20, v152 + 28);
    _os_log_impl((void *)&_mh_execute_header, v150, v151, "saveLocation: returnOnlyPersisted %{BOOL}d updated count %ld returnedFromCache %ld", (uint8_t *)v152, 0x1Cu);
    swift_slowDealloc(v152, -1, -1);

  }
  else
  {

    swift_release();
  }
  v153 = v166;
  swift_beginAccess(v171, &v210, 0, 0);
  v154 = swift_bridgeObjectRetain(*(_QWORD *)(v193 + 16));
  v153(v154);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_10044186C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  dispatch_group_t v55;
  uint64_t v56[3];
  uint64_t v57;
  uint64_t v58;

  v52 = a5;
  v55 = a2;
  v8 = type metadata accessor for SecureLocation(0);
  v54 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __chkstk_darwin(v9);
  v53 = (uint64_t)&v50 - v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v50 - v14;
  v16 = type metadata accessor for SecureLocationsCachedPayload(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8(&qword_1010FC1E0);
  __chkstk_darwin(v19);
  v21 = (uint64_t *)((char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v21, &qword_1010FC1E0);
  if (swift_getEnumCaseMultiPayload(v21, v19) == 1)
  {
    v22 = *v21;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_1011B7A18);
    sub_10005972C(a3, (uint64_t)v11, type metadata accessor for SecureLocation);
    swift_errorRetain(v22);
    v24 = swift_errorRetain(v22);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(22, -1);
      v28 = swift_slowAlloc(64, -1);
      v56[0] = v28;
      *(_DWORD *)v27 = 136315394;
      v29 = *v11;
      v30 = v11[1];
      swift_bridgeObjectRetain(v30);
      v57 = sub_100016940(v29, v30, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v11, type metadata accessor for SecureLocation);
      *(_WORD *)(v27 + 12) = 2080;
      v57 = v22;
      swift_errorRetain(v22);
      v31 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v32 = String.init<A>(describing:)(&v57, v31);
      v57 = sub_100016940(v32, v33, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v27 + 14, v27 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(v22);
      swift_errorRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "saveLocation: Failed to update locations record for findMyId %s error %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      swift_errorRelease(v22);
    }
    else
    {
      swift_errorRelease(v22);
      sub_1000126B0((uint64_t)v11, type metadata accessor for SecureLocation);
      swift_errorRelease(v22);
      swift_errorRelease(v22);

    }
    goto LABEL_18;
  }
  sub_1000126EC((uint64_t)v21, (uint64_t)v18, type metadata accessor for SecureLocationsCachedPayload);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v34 = (unint64_t *)(a4 + 16);
  v35 = type metadata accessor for Logger(0);
  sub_10001A9E8(v35, (uint64_t)qword_1011B7A18);
  v36 = sub_10005972C(a3, (uint64_t)v15, type metadata accessor for SecureLocation);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(12, -1);
    v40 = swift_slowAlloc(32, -1);
    v56[0] = v40;
    *(_DWORD *)v39 = 136315138;
    v51 = v18;
    v41 = sub_100AA64E4();
    v57 = sub_100016940(v41, v42, v56);
    v18 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v39 + 4, v39 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v15, type metadata accessor for SecureLocation);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "saveLocation: Updated location to %s", v39, 0xCu);
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v39, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v15, type metadata accessor for SecureLocation);
  }

  v43 = (uint64_t)&v18[*(int *)(v16 + 20)];
  v44 = v53;
  sub_10005972C(v43, v53, type metadata accessor for SecureLocation);
  swift_beginAccess(v34, v56, 33, 0);
  v45 = *v34;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v34);
  *v34 = v45;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v45 = sub_1007C9DB4(0, *(_QWORD *)(v45 + 16) + 1, 1, v45);
    *v34 = v45;
  }
  v47 = (_QWORD *)(v52 + 16);
  v49 = *(_QWORD *)(v45 + 16);
  v48 = *(_QWORD *)(v45 + 24);
  if (v49 >= v48 >> 1)
  {
    v45 = sub_1007C9DB4(v48 > 1, v49 + 1, 1, v45);
    *v34 = v45;
  }
  *(_QWORD *)(v45 + 16) = v49 + 1;
  sub_1000126EC(v44, v45+ ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))+ *(_QWORD *)(v54 + 72) * v49, type metadata accessor for SecureLocation);
  swift_endAccess(v56);
  sub_1000126B0((uint64_t)v18, type metadata accessor for SecureLocationsCachedPayload);
  swift_beginAccess(v47, v56, 1, 0);
  if (!__OFADD__(*v47, 1))
  {
    ++*v47;
LABEL_18:
    dispatch_group_leave(v55);
    return;
  }
  __break(1u);
}

uint64_t sub_100441EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[6];

  v5 = v4;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = *(_QWORD *)(v5 + 16);
  v17 = (_QWORD *)swift_allocObject(&unk_101077118, 56, 7);
  v17[2] = a1;
  v17[3] = a2;
  v17[4] = v5;
  v17[5] = a3;
  v17[6] = a4;
  aBlock[4] = sub_100449684;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101077130;
  v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a2);
  swift_retain();
  v19 = swift_retain();
  static DispatchQoS.unspecified.getter(v19);
  v26 = _swiftEmptyArrayStorage;
  v20 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v22 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v21, v22, v10, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v12, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return swift_release();
}

uint64_t sub_1004420C0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *);
  uint64_t v31;
  unint64_t v32;

  v29 = a5;
  v30 = a4;
  v27 = a3;
  v7 = sub_10001A9A8(&qword_101119450);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_101111AE0);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SecureLocationsCachedPayload(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = String.utf8Data.getter(a1, a2);
  v22 = v21;
  v31 = v20;
  v32 = v21;
  v23 = sub_100035530();
  DataProtocol.stableUUID.getter(&type metadata for Data, v23);
  sub_10001BC14(v20, v22);
  sub_10081CC74((uint64_t)v19, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_100004048((uint64_t)v12, &qword_101111AE0);
    v24 = type metadata accessor for SecureLocation(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v9, 1, 1, v24);
    v30(v9);
    sub_100004048((uint64_t)v9, &qword_101119450);
  }
  else
  {
    sub_1000126EC((uint64_t)v12, (uint64_t)v16, type metadata accessor for SecureLocationsCachedPayload);
    sub_10005972C((uint64_t)&v16[*(int *)(v13 + 20)], (uint64_t)v9, type metadata accessor for SecureLocation);
    v25 = type metadata accessor for SecureLocation(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v9, 0, 1, v25);
    v30(v9);
    sub_100004048((uint64_t)v9, &qword_101119450);
    sub_1000126B0((uint64_t)v16, type metadata accessor for SecureLocationsCachedPayload);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v28);
}

uint64_t sub_100442340(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[2];

  v41 = a5;
  v42 = a4;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v43 - 8);
  v12 = __chkstk_darwin(v43);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v38 - v15;
  v38 = a1;
  v17 = String.utf8Data.getter(a1, a2);
  v19 = v18;
  v46[0] = v17;
  v46[1] = v18;
  v20 = sub_100035530();
  DataProtocol.stableUUID.getter(&type metadata for Data, v20);
  sub_10001BC14(v17, v19);
  v21 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 160);
  if (qword_1010E9C00 != -1)
    swift_once(&qword_1010E9C00, sub_10043C1BC);
  v22 = sub_10001A9E8(v8, (uint64_t)qword_1011B6F00);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v22, v8);
  __chkstk_darwin(v23);
  *(&v38 - 4) = v21;
  *(&v38 - 3) = (uint64_t)v16;
  *(&v38 - 2) = (uint64_t)v11;
  OS_dispatch_queue.sync<A>(execute:)(sub_100143FA8, &v38 - 6, &type metadata for Bool);
  v39 = LOBYTE(v46[0]);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v24 = type metadata accessor for Logger(0);
  sub_10001A9E8(v24, (uint64_t)qword_1011B7A18);
  v25 = v40;
  v26 = v43;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v14, v16, v43);
  swift_bridgeObjectRetain_n(a2, 2);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = swift_slowAlloc(28, -1);
    v31 = swift_slowAlloc(64, -1);
    v46[0] = v31;
    *(_DWORD *)v30 = 136315650;
    swift_bridgeObjectRetain(a2);
    v44 = sub_100016940(v38, a2, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v30 + 12) = 2080;
    v32 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v33 = dispatch thunk of CustomStringConvertible.description.getter(v43, v32);
    v44 = sub_100016940(v33, v34, v46);
    v26 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v30 + 14, v30 + 22);
    swift_bridgeObjectRelease();
    v35 = *(void (**)(char *, uint64_t))(v25 + 8);
    v35(v14, v26);
    *(_WORD *)(v30 + 22) = 1024;
    v36 = v39;
    LODWORD(v44) = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, (char *)&v44 + 4, v30 + 24, v30 + 28);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Removed cached location payload (if present) for %s %s Result %{BOOL}d", (uint8_t *)v30, 0x1Cu);
    swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
    v35 = *(void (**)(char *, uint64_t))(v25 + 8);
    v35(v14, v26);

    v36 = v39;
  }
  v42(v36);
  return ((uint64_t (*)(char *, uint64_t))v35)(v16, v26);
}

uint64_t sub_10044275C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD *v17;
  void *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  NSObject *v32;
  uint64_t v33;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchTime(0);
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)v35 - v7;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v12 - 8);
  v37 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_allocObject(&unk_1010770A0, 24, 7);
  *(_QWORD *)(v15 + 16) = _swiftEmptyArrayStorage;
  v42 = v15 + 16;
  v16 = dispatch_group_create();
  dispatch_group_enter(v16);
  v35[1] = *(_QWORD *)(v1 + 16);
  v17 = (_QWORD *)swift_allocObject(&unk_1010770C8, 48, 7);
  v17[2] = a1;
  v17[3] = v1;
  v17[4] = v15;
  v17[5] = v16;
  aBlock[4] = sub_100449644;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010770E0;
  v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  swift_retain();
  v39 = v15;
  swift_retain();
  v19 = v16;
  static DispatchQoS.unspecified.getter(v19);
  v43 = _swiftEmptyArrayStorage;
  v20 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v22 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v37);
  v23 = swift_release();
  static DispatchTime.now()(v23);
  + infix(_:_:)(v6, 10.0);
  v24 = v41;
  v25 = *(void (**)(char *, uint64_t))(v40 + 8);
  v25(v6, v41);
  v26 = OS_dispatch_group.wait(timeout:)(v8) & 1;
  v25(v8, v24);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v26, 1) & 1) != 0)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B7A18);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "getCachedLocations - timed out reading locations", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
      v32 = v19;
      v19 = v29;
    }
    else
    {
      v32 = v29;
    }

  }
  swift_beginAccess(v42, aBlock, 0, 0);
  v33 = *(_QWORD *)(v39 + 16);
  swift_bridgeObjectRetain(v33);
  swift_release();
  return v33;
}

void sub_100442B40(uint64_t a1, char *a2, uint64_t a3, NSObject *a4)
{
  unint64_t *v7;

  v7 = (unint64_t *)(a3 + 16);
  swift_retain();
  sub_100447F40(a1, a2, v7);
  swift_release();
  dispatch_group_leave(a4);
}

uint64_t sub_100442BA0(uint64_t *a1, char *a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[3];
  uint64_t v56;
  uint64_t v57;

  v49 = a3;
  v52 = a2;
  v4 = type metadata accessor for SecureLocation(0);
  v50 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v51 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v48 = (uint64_t)&v47 - v7;
  v8 = sub_10001A9A8(&qword_101111AE0);
  __chkstk_darwin(v8);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SecureLocationsCachedPayload(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v53 = *(_QWORD *)(v15 - 8);
  v54 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[1];
  v47 = *a1;
  v19 = String.utf8Data.getter(v47, v18);
  v21 = v20;
  v55[0] = v19;
  v55[1] = v20;
  v22 = sub_100035530();
  DataProtocol.stableUUID.getter(&type metadata for Data, v22);
  sub_10001BC14(v19, v21);
  v52 = v17;
  sub_10081CC74((uint64_t)v17, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_100004048((uint64_t)v10, &qword_101111AE0);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_1011B7A18);
    swift_bridgeObjectRetain_n(v18, 2);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v55[0] = v28;
      *(_DWORD *)v27 = 136315138;
      swift_bridgeObjectRetain(v18);
      v56 = sub_100016940(v47, v18, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease_n(v18, 3);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "getCachedLocations - no location found for %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v18, 2);
    }

  }
  else
  {
    sub_1000126EC((uint64_t)v10, (uint64_t)v14, type metadata accessor for SecureLocationsCachedPayload);
    v29 = (uint64_t)&v14[*(int *)(v11 + 20)];
    v30 = v48;
    sub_10005972C(v29, v48, type metadata accessor for SecureLocation);
    v31 = v49;
    swift_beginAccess(v49, v55, 33, 0);
    v32 = *v31;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
    *v31 = v32;
    v34 = (uint64_t)v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v32 = sub_1007C9DB4(0, *(_QWORD *)(v32 + 16) + 1, 1, v32);
      *v31 = v32;
    }
    v35 = (uint64_t)v51;
    v37 = *(_QWORD *)(v32 + 16);
    v36 = *(_QWORD *)(v32 + 24);
    if (v37 >= v36 >> 1)
    {
      v32 = sub_1007C9DB4(v36 > 1, v37 + 1, 1, v32);
      *v31 = v32;
    }
    *(_QWORD *)(v32 + 16) = v37 + 1;
    sub_1000126EC(v30, v32+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(_QWORD *)(v50 + 72) * v37, type metadata accessor for SecureLocation);
    swift_endAccess(v55);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v38 = type metadata accessor for Logger(0);
    sub_10001A9E8(v38, (uint64_t)qword_1011B7A18);
    v39 = sub_10005972C(v29, v35, type metadata accessor for SecureLocation);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      v55[0] = v43;
      *(_DWORD *)v42 = 136315138;
      v44 = sub_100AA64E4();
      v56 = sub_100016940(v44, v45, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v35, type metadata accessor for SecureLocation);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "getCachedLocations - %s", v42, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);

    }
    else
    {

      sub_1000126B0(v35, type metadata accessor for SecureLocation);
    }
    sub_1000126B0(v34, type metadata accessor for SecureLocationsCachedPayload);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v52, v54);
}

_QWORD *sub_100443164()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v17 = type metadata accessor for SecureLocationsCachedPayload(0);
  v0 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for SecureLocation(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10088A6C8();
  v8 = v7[2];
  if (v8)
  {
    v18 = _swiftEmptyArrayStorage;
    sub_10009B160(0, v8, 0);
    v9 = *(unsigned __int8 *)(v0 + 80);
    v15 = v7;
    v10 = (uint64_t)v7 + ((v9 + 32) & ~v9);
    v16 = *(_QWORD *)(v0 + 72);
    v11 = v18;
    do
    {
      sub_10005972C(v10, (uint64_t)v2, type metadata accessor for SecureLocationsCachedPayload);
      sub_10005972C((uint64_t)&v2[*(int *)(v17 + 20)], (uint64_t)v6, type metadata accessor for SecureLocation);
      sub_1000126B0((uint64_t)v2, type metadata accessor for SecureLocationsCachedPayload);
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      {
        sub_10009B160(0, v11[2] + 1, 1);
        v11 = v18;
      }
      v13 = v11[2];
      v12 = v11[3];
      if (v13 >= v12 >> 1)
      {
        sub_10009B160(v12 > 1, v13 + 1, 1);
        v11 = v18;
      }
      v11[2] = v13 + 1;
      sub_1000126EC((uint64_t)v6, (uint64_t)v11+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v13, type metadata accessor for SecureLocation);
      v10 += v16;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return v11;
}

uint64_t sub_100443360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;

  v4 = v3;
  v8 = type metadata accessor for SecureLocation(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B7A18);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "createEncodedLocationInfo", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  sub_10005972C(a1, (uint64_t)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SecureLocation);
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = (v17 + 40) & ~v17;
  v19 = (_QWORD *)swift_allocObject(&unk_101077078, v18 + v10, v17 | 7);
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = v4;
  sub_1000126EC((uint64_t)v11, (uint64_t)v19 + v18, type metadata accessor for SecureLocation);
  swift_retain();
  swift_retain();
  sub_1008B0DEC((uint64_t)sub_10044953C, (uint64_t)v19);
  return swift_release();
}

uint64_t sub_10044350C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD *), uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD *);
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint8_t *v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  __int128 v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  BOOL v65;
  char *v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  double v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, __n128);
  char *v94;
  uint64_t v95;
  __int128 v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _QWORD v108[6];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;

  v98 = a6;
  v102 = a5;
  v105 = a4;
  sub_100005CF0(a1, (uint64_t)v108, &qword_1010FA1E0);
  v9 = v108[0];
  v10 = v108[1];
  v11 = v108[2];
  v12 = v108[3];
  v13 = v108[4];
  v14 = v108[5];
  *(_QWORD *)&v96 = type metadata accessor for HashAlgorithm(0);
  v95 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v94 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for SecureLocation(0);
  __chkstk_darwin(v99);
  v97 = (unint64_t *)((char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v101 = type metadata accessor for Date(0);
  v100 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v104 = (char *)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = a1;
  sub_100005CF0(a1, (uint64_t)&v109, &qword_1010FA1E0);
  if (*((_QWORD *)&v110 + 1) >> 60 == 15)
  {
    v18 = a3;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v19 = type metadata accessor for Logger(0);
    sub_10001A9E8(v19, (uint64_t)qword_1011B7A18);
    swift_errorRetain(a2);
    v20 = swift_errorRetain(a2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v112 = v24;
      *(_DWORD *)v23 = 136315138;
      *(_QWORD *)&v115 = a2;
      swift_errorRetain(a2);
      v25 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
      v26 = String.init<A>(describing:)(&v115, v25);
      *(_QWORD *)&v115 = sub_100016940(v26, v27, (uint64_t *)&v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, (char *)&v115 + 8, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "No keys available for sharing location to followers. Error %s", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    return v18(_swiftEmptyArrayStorage);
  }
  else
  {
    v93 = (void (*)(uint64_t, __n128))a3;
    v112 = v109;
    v113 = v110;
    v114 = v111;
    v28 = *(_QWORD *)(v102 + 32);
    sub_10001BD08(v9, v10);
    sub_10001BBBC(v11, v12);
    sub_10001BD08(v13, v14);
    v29 = sub_10001A9A8(&qword_1010F6350);
    OS_dispatch_queue.sync<A>(execute:)(sub_100449590, v28, v29);
    v30 = *((_QWORD *)&v115 + 1);
    if (*((_QWORD *)&v115 + 1))
    {
      v31 = v115;
      v32 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
      v34 = JSONEncoder.init()(v33);
      sub_100B35904();
      v35 = v104;
      Date.init(timeIntervalSinceReferenceDate:)(v36);
      v37 = v97;
      sub_10005972C(v98, (uint64_t)v97, type metadata accessor for SecureLocation);
      v38 = v99;
      v39 = (char *)v37 + *(int *)(v99 + 52);
      if ((static Date.> infix(_:_:)(v39, v35) & 1) != 0)
      {
        v40 = Date.timeIntervalSince(_:)(v35);
        if (qword_1010EA098 != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v41 = type metadata accessor for Logger(0);
        v42 = sub_10001A9E8(v41, (uint64_t)qword_1011B7A18);
        v43 = Logger.logObject.getter(v42);
        v44 = static os_log_type_t.default.getter(v43);
        if (os_log_type_enabled(v43, v44))
        {
          v45 = v34;
          v46 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v46 = 134349056;
          v35 = v104;
          *(double *)&v115 = v40;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, (char *)&v115 + 8, v46 + 4, v46 + 12);
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "SecureLocation: timestamp payload adjusted by %{public}f", v46, 0xCu);
          v47 = v46;
          v34 = v45;
          v38 = v99;
          swift_slowDealloc(v47, -1, -1);
        }

        (*(void (**)(char *, char *, uint64_t))(v100 + 24))(v39, v35, v101);
      }
      swift_bridgeObjectRelease();
      *v37 = v31;
      v37[1] = v30;
      v48 = sub_100006204(&qword_1010FC1D8, type metadata accessor for SecureLocation, (uint64_t)&unk_100E5A730);
      v55 = dispatch thunk of JSONEncoder.encode<A>(_:)(v37, v38, v48);
      v115 = v113;
      v56 = v113;
      v58 = v57;
      sub_100059DE8((uint64_t)&v115);
      v59 = objc_autoreleasePoolPush();
      sub_1007E5D00(&v106);
      v90 = v58;
      v91 = *((_QWORD *)&v56 + 1);
      v99 = v56;
      v92 = v55;
      objc_autoreleasePoolPop(v59);
      sub_1000ADA04((uint64_t)&v115);
      v60 = v106;
      v102 = v107;
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v61 = type metadata accessor for Logger(0);
      v62 = sub_10001A9E8(v61, (uint64_t)qword_1011B7A18);
      v63 = Logger.logObject.getter(v62);
      v64 = static os_log_type_t.default.getter(v63);
      v65 = os_log_type_enabled(v63, v64);
      v66 = v104;
      if (v65)
      {
        v67 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v67 = 0;
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "Successfully Encrypted locationData", v67, 2u);
        swift_slowDealloc(v67, -1, -1);
      }

      v98 = v60;
      v68 = sub_10001BBBC(v60, v102);
      v69 = Date.epoch.getter(v68);
      sub_100059DE8((uint64_t)&v115);
      v70 = sub_1007E6F8C(v99, v91);
      v72 = v71;
      v73 = v90;
      v99 = v34;
      sub_1000ADA04((uint64_t)&v115);
      sub_1002F7394(v70, v72);
      v74 = (double)v69;
      v75 = v106;
      v76 = v107;
      v77 = v95;
      v78 = v94;
      v79 = v96;
      (*(void (**)(char *, _QWORD, _QWORD))(v95 + 104))(v94, enum case for HashAlgorithm.sha256(_:), v96);
      v80 = Data.hash(algorithm:)(v78, v75, v76);
      v82 = v81;
      (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
      sub_10001BC14(v75, v76);
      v83 = sub_10001A9A8(&qword_1010ED4E0);
      v84 = swift_allocObject(v83, 64, 7);
      v96 = xmmword_100E22B00;
      *(_OWORD *)(v84 + 16) = xmmword_100E22B00;
      v85 = v98;
      v86 = v102;
      *(_QWORD *)(v84 + 32) = v98;
      *(_QWORD *)(v84 + 40) = v86;
      *(double *)(v84 + 48) = v74;
      *(_BYTE *)(v84 + 56) = 0;
      v87 = sub_10001A9A8(&qword_1010FA518);
      v88 = swift_allocObject(v87, 88, 7);
      *(_OWORD *)(v88 + 16) = v96;
      *(_QWORD *)(v88 + 32) = v80;
      *(_QWORD *)(v88 + 40) = v82;
      *(_QWORD *)(v88 + 48) = 0;
      *(_BYTE *)(v88 + 56) = 1;
      *(_QWORD *)(v88 + 64) = 0;
      *(_QWORD *)(v88 + 72) = 0;
      *(_QWORD *)(v88 + 80) = v84;
      sub_10001BBBC(v85, v86);
      sub_10001BBBC(v80, v82);
      v89 = swift_bridgeObjectRetain(v84);
      v93(v88, v89);
      swift_bridgeObjectRelease();
      sub_10001BC14(v92, v73);
      swift_release();
      sub_1003D15A0(v103);
      sub_10001BC14(v80, v82);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001BC14(v85, v86);
      sub_10001BC14(v85, v86);
      (*(void (**)(char *, uint64_t))(v100 + 8))(v66, v101);
      return sub_1000126B0((uint64_t)v37, type metadata accessor for SecureLocation);
    }
    else
    {
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v50 = type metadata accessor for Logger(0);
      v51 = sub_10001A9E8(v50, (uint64_t)qword_1011B7A18);
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.default.getter(v52);
      if (os_log_type_enabled(v52, v53))
      {
        v54 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v54 = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Unable to get my personID. Can't encode location", v54, 2u);
        swift_slowDealloc(v54, -1, -1);
      }

      ((void (*)(_QWORD *))v93)(_swiftEmptyArrayStorage);
      return sub_1003D15A0(v103);
    }
  }
}

_QWORD *sub_100444148(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  double *v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  Swift::String v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  unint64_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint8_t *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  _QWORD *v84;
  Swift::String v85;
  uint64_t My;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  BOOL v104;
  uint64_t v105;
  uint8_t *v106;
  uint8_t *v107;
  NSObject *v108;
  os_log_type_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  os_log_type_t v122;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *result;
  uint8_t *v136;
  _QWORD *v137;
  unint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  unint64_t v158;
  char *v159;
  __n128 v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;

  v3 = sub_10001A9A8(&qword_101119450);
  __chkstk_darwin(v3);
  v148 = (uint64_t)&v136 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = type metadata accessor for SecureLocation(0);
  v152 = *(_QWORD *)(v154 - 8);
  v5 = __chkstk_darwin(v154);
  v151 = (uint64_t)&v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v136 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v136 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v136 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v136 - v17;
  __chkstk_darwin(v16);
  v149 = (uint64_t)&v136 - v19;
  v20 = type metadata accessor for Date(0);
  v21 = __chkstk_darwin(v20);
  v147 = (char *)&v136 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(a1 + 16);
  if (!v24)
    return _swiftEmptyArrayStorage;
  v142 = v22;
  v143 = v21;
  v144 = v18;
  v153 = v15;
  v145 = v12;
  v140 = v9;
  v155 = v1;
  v164 = *(_QWORD *)(v1 + 32);
  v165 = OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_decryptionKeyAccessQueue;
  v150 = enum case for Feature.FindMy.fmNiftyCurve(_:);
  v139 = &v175;
  v26 = swift_bridgeObjectRetain(a1);
  v27 = 0;
  v146 = a1;
  v168 = (_QWORD *)(a1 + 80);
  v156 = _swiftEmptyArrayStorage;
  v26.n128_u64[0] = 136315138;
  v160 = v26;
  v159 = (char *)&type metadata for Any + 8;
  while (1)
  {
    v36 = *(v168 - 6);
    v35 = *(v168 - 5);
    v38 = *(v168 - 1);
    v37 = (_QWORD *)*v168;
    __chkstk_darwin(v25);
    *(&v136 - 4) = v39;
    *(&v136 - 3) = (uint8_t *)v36;
    *(&v136 - 2) = (uint8_t *)v35;
    sub_10001BBBC(v36, v35);
    swift_bridgeObjectRetain(v38);
    v169 = v37;
    swift_bridgeObjectRetain(v37);
    v40 = sub_10001A9A8(&qword_1010FC1C8);
    OS_dispatch_queue.sync<A>(execute:)(sub_100449458, &v136 - 6, v40);
    v167 = v171;
    if (v171 >> 60 == 15)
    {
      v166 = v27;
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v41 = type metadata accessor for Logger(0);
      sub_10001A9E8(v41, (uint64_t)qword_1011B7A18);
      sub_10001BBBC(v36, v35);
      swift_bridgeObjectRetain(v38);
      v42 = v169;
      swift_bridgeObjectRetain(v169);
      sub_10001BBBC(v36, v35);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v42);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.default.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        v28 = swift_slowAlloc(12, -1);
        v29 = (_QWORD *)swift_slowAlloc(32, -1);
        v170 = v29;
        *(_DWORD *)v28 = v160.n128_u32[0];
        sub_10001BBBC(v36, v35);
        v30 = Data.description.getter(v36, v35);
        v162 = v38;
        v31 = v30;
        v32 = v24;
        v34 = v33;
        sub_10001BC14(v36, v35);
        *(_QWORD *)(v28 + 4) = sub_100016940(v31, v34, (uint64_t *)&v170);
        v24 = v32;
        swift_bridgeObjectRelease();
        sub_10001BC14(v36, v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10001BC14(v36, v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "No decryption key found for locationId %s. Not proceeding with decoding", (uint8_t *)v28, 0xCu);
        swift_arrayDestroy(v29, 1, v159);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v28, -1, -1);

        sub_10001BC14(v36, v35);
      }
      else
      {
        sub_10001BC14(v36, v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10001BC14(v36, v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10001BC14(v36, v35);

      }
      swift_bridgeObjectRelease();
      v25 = swift_bridgeObjectRelease();
      v27 = v166;
      goto LABEL_5;
    }
    v46 = (uint64_t)v170;
    if (v169[2])
      break;
    v161 = v170;
    v166 = v24;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v51 = type metadata accessor for Logger(0);
    sub_10001A9E8(v51, (uint64_t)qword_1011B7A18);
    sub_10001BBBC(v36, v35);
    swift_bridgeObjectRetain(v38);
    v52 = v169;
    swift_bridgeObjectRetain(v169);
    sub_10001BBBC(v36, v35);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v52);
    v54 = Logger.logObject.getter(v53);
    v55 = v38;
    v56 = static os_log_type_t.default.getter(v54);
    if (os_log_type_enabled(v54, v56))
    {
      v57 = swift_slowAlloc(12, -1);
      v58 = v36;
      v59 = (_QWORD *)swift_slowAlloc(32, -1);
      v170 = v59;
      *(_DWORD *)v57 = v160.n128_u32[0];
      v60 = Data.base64EncodedString(options:)(0);
      *(_QWORD *)(v57 + 4) = sub_100016940(v60._countAndFlagsBits, (unint64_t)v60._object, (uint64_t *)&v170);
      swift_bridgeObjectRelease();
      sub_10001BC14(v58, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001BC14(v58, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v54, v56, "Empty location data for locationId %s", (uint8_t *)v57, 0xCu);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      v61 = v59;
      v36 = v58;
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v57, -1, -1);

    }
    else
    {
      sub_10001BC14(v36, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001BC14(v36, v35);

      swift_bridgeObjectRelease();
      v62 = swift_bridgeObjectRelease();
    }
    v76 = v55;
    __chkstk_darwin(v62);
    *(&v136 - 4) = v77;
    *(&v136 - 3) = (uint8_t *)v36;
    *(&v136 - 2) = (uint8_t *)v35;
    v78 = sub_10001A9A8(&qword_1010F6350);
    OS_dispatch_queue.sync<A>(execute:)(sub_10044AB44, &v136 - 6, v78);
    v24 = v166;
    if (v171)
    {
      PassthroughSubject.send(_:)(&v170);
      sub_10001EF3C((uint64_t)v161, v167);
      sub_10001BC14(v36, v35);
      swift_bridgeObjectRelease();
LABEL_35:
      swift_bridgeObjectRelease();
      v25 = swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    sub_10001BBBC(v36, v35);
    swift_bridgeObjectRetain(v76);
    v79 = v169;
    swift_bridgeObjectRetain(v169);
    sub_10001BBBC(v36, v35);
    swift_bridgeObjectRetain(v76);
    swift_bridgeObjectRetain(v79);
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.default.getter(v81);
    if (!os_log_type_enabled(v81, v82))
    {
      sub_10001EF3C((uint64_t)v161, v167);
      sub_10001BC14(v36, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001BC14(v36, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001BC14(v36, v35);

      goto LABEL_35;
    }
    v83 = swift_slowAlloc(12, -1);
    v84 = (_QWORD *)swift_slowAlloc(32, -1);
    v170 = v84;
    *(_DWORD *)v83 = v160.n128_u32[0];
    v85 = Data.base64EncodedString(options:)(0);
    *(_QWORD *)(v83 + 4) = sub_100016940(v85._countAndFlagsBits, (unint64_t)v85._object, (uint64_t *)&v170);
    swift_bridgeObjectRelease();
    sub_10001BC14(v36, v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(v36, v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v81, v82, "No findMyId found for locationId %s", (uint8_t *)v83, 0xCu);
    swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1, -1);
    swift_slowDealloc(v83, -1, -1);
    sub_10001EF3C((uint64_t)v161, v167);

    v24 = v166;
    sub_10001BC14(v36, v35);
    swift_bridgeObjectRelease();
    v25 = swift_bridgeObjectRelease();
LABEL_5:
    v168 += 7;
    if (!--v24)
    {
      swift_bridgeObjectRelease();
      return v156;
    }
  }
  v170 = v169;
  swift_bridgeObjectRetain_n(v169, 2);
  sub_100447550((uint64_t *)&v170);
  if (v27)
    goto LABEL_65;
  swift_bridgeObjectRelease();
  v47 = (double *)v170;
  if (v170[2])
  {
    v163 = v36;
    v48 = v170[4];
    v49 = v170[5];
    sub_10001BBBC(v48, v49);
    sub_10001BD08(v46, v167);
    v50 = objc_autoreleasePoolPush();
    sub_1007E6220((uint64_t *)&v170);
    v158 = v49;
    objc_autoreleasePoolPop(v50);
    sub_10001EF3C(v46, v167);
    v63 = v171;
    v157 = v170;
    if (((_BYTE)v47[7] & 1) == 0)
    {
      swift_release();
      v162 = v48;
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v161 = (_QWORD *)v46;
      v64 = type metadata accessor for Logger(0);
      v65 = sub_10001A9E8(v64, (uint64_t)qword_1011B7A18);
      v66 = Logger.logObject.getter(v65);
      v67 = static os_log_type_t.default.getter(v66);
      v68 = v63;
      if (os_log_type_enabled(v66, v67))
      {
        v69 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v69 = 0;
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "Got decrypted JSON data now trying to decode JSON", v69, 2u);
        swift_slowDealloc(v69, -1, -1);
      }

      v70 = type metadata accessor for JSONDecoder(0);
      v71 = swift_allocObject(v70, *(unsigned int *)(v70 + 48), *(unsigned __int16 *)(v70 + 52));
      v72 = JSONDecoder.init()(v71);
      v73 = sub_100006204(&qword_1010FC1D0, type metadata accessor for SecureLocation, (uint64_t)&unk_100E5A758);
      v74 = (uint64_t)v153;
      v75 = (uint64_t)v157;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(v154, v157, v68, v154, v73);
      v141 = v72;
      v166 = v24;
      v111 = (uint64_t)v145;
      v112 = sub_10005972C(v74, (uint64_t)v145, type metadata accessor for SecureLocation);
      v113 = Logger.logObject.getter(v112);
      v114 = static os_log_type_t.debug.getter(v113);
      if (os_log_type_enabled(v113, v114))
      {
        v115 = (uint8_t *)swift_slowAlloc(12, -1);
        v137 = (_QWORD *)swift_slowAlloc(32, -1);
        v170 = v137;
        v138 = v35;
        *(_DWORD *)v115 = v160.n128_u32[0];
        v136 = v115 + 4;
        v116 = (uint64_t)v140;
        sub_10005972C(v111, (uint64_t)v140, type metadata accessor for SecureLocation);
        v117 = String.init<A>(describing:)(v116, v154);
        v174 = sub_100016940(v117, v118, (uint64_t *)&v170);
        v35 = v138;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v174, v139, v136, v115 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v111, type metadata accessor for SecureLocation);
        _os_log_impl((void *)&_mh_execute_header, v113, v114, "Got decoded location %s", v115, 0xCu);
        v119 = v137;
        swift_arrayDestroy(v137, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v119, -1, -1);
        swift_slowDealloc(v115, -1, -1);
      }
      else
      {
        sub_1000126B0(v111, type metadata accessor for SecureLocation);
      }

      sub_10005972C((uint64_t)v153, v151, type metadata accessor for SecureLocation);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v156);
      v24 = v166;
      v124 = v158;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        v125 = (unint64_t)v156;
      else
        v125 = sub_1007C9DB4(0, v156[2] + 1, 1, (unint64_t)v156);
      v127 = *(_QWORD *)(v125 + 16);
      v126 = *(_QWORD *)(v125 + 24);
      if (v127 >= v126 >> 1)
        v125 = sub_1007C9DB4(v126 > 1, v127 + 1, 1, v125);
      *(_QWORD *)(v125 + 16) = v127 + 1;
      v128 = (*(unsigned __int8 *)(v152 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v152 + 80);
      v156 = (_QWORD *)v125;
      sub_1000126EC(v151, v125 + v128 + *(_QWORD *)(v152 + 72) * v127, type metadata accessor for SecureLocation);
      sub_10001BC14(v75, v68);
      sub_10001BC14(v162, v124);
      sub_10001EF3C((uint64_t)v161, v167);
      swift_release();
      sub_10001BC14(v163, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v25 = sub_1000126B0((uint64_t)v153, type metadata accessor for SecureLocation);
      goto LABEL_5;
    }
    My = type metadata accessor for Feature.FindMy(0);
    v172 = My;
    v173 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v87 = sub_100018F08(&v170);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v87, v150, My);
    LOBYTE(My) = isFeatureEnabled(_:)(&v170);
    v88 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v170);
    v89 = v48;
    if ((My & 1) != 0)
    {
      v161 = (_QWORD *)v46;
      v162 = v38;
      __chkstk_darwin(v88);
      v90 = v163;
      *(&v136 - 4) = v91;
      *(&v136 - 3) = (uint8_t *)v90;
      *(&v136 - 2) = (uint8_t *)v35;
      v92 = sub_10001A9A8(&qword_1010F6350);
      OS_dispatch_queue.sync<A>(execute:)(sub_100449474, &v136 - 6, v92);
      v93 = v171;
      v94 = v63;
      if (v171)
      {
        v95 = (uint64_t)v170;
        v96 = v47[6];
        swift_release();
        v97 = (uint64_t)v147;
        Date.init(timeIntervalSince1970:)(v96 / 1000.0);
        v98 = v148;
        v99 = (uint64_t)v157;
        sub_100AA68D0((uint64_t)v157, v94, v95, v93, v97, v148);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v152 + 48))(v98, 1, v154) == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v97, v143);
          sub_10001BC14(v99, v94);
          sub_10001BC14(v89, v158);
          sub_10001EF3C((uint64_t)v161, v167);
          sub_10001BC14(v163, v35);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v25 = sub_100004048(v98, &qword_101119450);
        }
        else
        {
          v129 = v98;
          v130 = v149;
          sub_1000126EC(v129, v149, type metadata accessor for SecureLocation);
          sub_10005972C(v130, (uint64_t)v144, type metadata accessor for SecureLocation);
          if ((swift_isUniquelyReferenced_nonNull_native(v156) & 1) != 0)
            v131 = (unint64_t)v156;
          else
            v131 = sub_1007C9DB4(0, v156[2] + 1, 1, (unint64_t)v156);
          v133 = *(_QWORD *)(v131 + 16);
          v132 = *(_QWORD *)(v131 + 24);
          if (v133 >= v132 >> 1)
            v131 = sub_1007C9DB4(v132 > 1, v133 + 1, 1, v131);
          *(_QWORD *)(v131 + 16) = v133 + 1;
          v134 = (*(unsigned __int8 *)(v152 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v152 + 80);
          v156 = (_QWORD *)v131;
          sub_1000126EC((uint64_t)v144, v131 + v134 + *(_QWORD *)(v152 + 72) * v133, type metadata accessor for SecureLocation);
          sub_10001BC14(v99, v94);
          sub_10001BC14(v89, v158);
          sub_10001EF3C((uint64_t)v161, v167);
          sub_10001BC14(v163, v35);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000126B0(v149, type metadata accessor for SecureLocation);
          v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v142 + 8))(v97, v143);
        }
        goto LABEL_5;
      }
      swift_release();
      v46 = (uint64_t)v161;
      v105 = (uint64_t)v157;
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v120 = type metadata accessor for Logger(0);
      v121 = sub_10001A9E8(v120, (uint64_t)qword_1011B7A18);
      v102 = Logger.logObject.getter(v121);
      v122 = static os_log_type_t.error.getter(v102);
      if (!os_log_type_enabled(v102, v122))
      {
        sub_10001BC14(v105, v94);
        sub_10001BC14(v89, v158);
        sub_10001EF3C(v46, v167);
        sub_10001BC14(v163, v35);

        goto LABEL_35;
      }
      v107 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v107 = 0;
      v108 = v102;
      v109 = v122;
      v110 = "Unable to get findMyId for lloc. Cannot process location";
    }
    else
    {
      swift_release();
      v94 = v63;
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v100 = type metadata accessor for Logger(0);
      v101 = sub_10001A9E8(v100, (uint64_t)qword_1011B7A18);
      v102 = Logger.logObject.getter(v101);
      v103 = static os_log_type_t.default.getter(v102);
      v104 = os_log_type_enabled(v102, v103);
      v105 = (uint64_t)v157;
      if (!v104)
      {
        sub_10001BC14((uint64_t)v157, v94);
        sub_10001BC14(v89, v158);
        sub_10001EF3C(v46, v167);
        sub_10001BC14(v163, v35);

        goto LABEL_35;
      }
      v106 = (uint8_t *)swift_slowAlloc(2, -1);
      v162 = v38;
      v107 = v106;
      *(_WORD *)v106 = 0;
      v108 = v102;
      v109 = v103;
      v110 = "lloc feature is disabled";
    }
    _os_log_impl((void *)&_mh_execute_header, v108, v109, v110, v107, 2u);
    swift_slowDealloc(v107, -1, -1);
    sub_10001BC14(v105, v94);
    sub_10001BC14(v89, v158);
    sub_10001EF3C(v46, v167);

    sub_10001BC14(v163, v35);
    goto LABEL_35;
  }
  __break(1u);
LABEL_65:
  result = (_QWORD *)swift_release();
  __break(1u);
  return result;
}

void sub_1004456EC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t, uint64_t))
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v39;
  unint64_t v40;
  _QWORD v41[6];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[2];

  sub_100005CF0(a1, (uint64_t)v41, &qword_1010FA1E0);
  v6 = v41[0];
  v5 = v41[1];
  v7 = v41[2];
  v8 = v41[3];
  v9 = v41[4];
  v10 = v41[5];
  sub_100005CF0(a1, (uint64_t)&v42, &qword_1010FA1E0);
  if (*((_QWORD *)&v43 + 1) >> 60 == 15)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v11 = type metadata accessor for Logger(0);
    sub_10001A9E8(v11, (uint64_t)qword_1011B7A18);
    swift_errorRetain(a2);
    v12 = swift_errorRetain(a2);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v45 = v16;
      *(_DWORD *)v15 = 136315138;
      *(_QWORD *)&v48[0] = a2;
      swift_errorRetain(a2);
      v17 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
      v18 = String.init<A>(describing:)(v48, v17);
      *(_QWORD *)&v48[0] = sub_100016940(v18, v19, (uint64_t *)&v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v48, (char *)v48 + 8, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "No keys available for sharing location to followers. Error %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    a3(0, 0xF000000000000000, a2);
  }
  else
  {
    v45 = v42;
    v46 = v43;
    v47 = v44;
    sub_10001BD08(v6, v5);
    sub_10001BBBC(v7, v8);
    sub_10001BD08(v9, v10);
    v20 = sub_100AA6C9C();
    v22 = v21;
    if (v21 >> 60 == 15)
    {
      type metadata accessor for SecureLocationsError(0);
      v24 = v23;
      v39 = 10;
      v25 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v26 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
      _BridgedStoredNSError.init(_:userInfo:)(v48, &v39, v25, v24, v26);
      v27 = *(void **)&v48[0];
      a3(v20, v22, *(_QWORD *)&v48[0]);
      sub_1003D15A0(a1);

    }
    else
    {
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v28 = type metadata accessor for Logger(0);
      sub_10001A9E8(v28, (uint64_t)qword_1011B7A18);
      v29 = sub_10001BBBC(v20, v22);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.default.getter(v30);
      if (os_log_type_enabled(v30, v31))
      {
        *(_DWORD *)swift_slowAlloc(12, -1) = 134217984;
        __asm { BR              X10 }
      }
      sub_10001EF3C(v20, v22);

      v48[0] = v46;
      sub_100059DE8((uint64_t)v48);
      v32 = objc_autoreleasePoolPush();
      sub_1007E5D00(&v39);
      objc_autoreleasePoolPop(v32);
      sub_1000ADA04((uint64_t)v48);
      v33 = v39;
      v34 = v40;
      v35 = sub_10001BBBC(v39, v40);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.default.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        *(_DWORD *)swift_slowAlloc(12, -1) = 134217984;
        __asm { BR              X10 }
      }
      sub_10001BC14(v33, v34);

      sub_10001BBBC(v33, v34);
      a3(v33, v34, 0);
      sub_1003D15A0(a1);
      sub_10001BC14(v33, v34);
      sub_10001BC14(v33, v34);
      sub_10001EF3C(v20, v22);
    }
  }
}

void sub_100445E04(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *log;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_log_t oslog;
  NSObject *osloga;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44[2];

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v41 = *(_QWORD *)(a1 + 48);
  v42 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 64);
  v40 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 80);
  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
  {
    oslog = *(os_log_t *)(a1 + 64);
    v39 = *(_QWORD *)(a1 + 8);
    swift_errorRetain(v3);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v10 = type metadata accessor for Logger(0);
    sub_10001A9E8(v10, (uint64_t)qword_1011B7A18);
    swift_errorRetain(v3);
    v11 = swift_errorRetain(v3);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    log = v12;
    v35 = v9;
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v43 = v3;
      v44[0] = v31;
      *(_DWORD *)v14 = 136315138;
      swift_errorRetain(v3);
      v15 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v16 = String.init<A>(describing:)(&v43, v15);
      v43 = sub_100016940(v16, v17, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease();
      sub_1004492E8(v3, v39, v4, v42, v5, v6, v41, v40, v7, v8, v9, 1);
      v29 = v9;
      v18 = v3;
      v19 = v6;
      sub_1004492E8(v3, v39, v4, v42, v5, v6, v41, v40, (uint64_t)oslog, v8, v29, 1);
      v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, log, v13, "LabelledLocations - Failed to save location label error %s", v14, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {
      sub_1004492E8(v3, v39, v4, v42, v5, v6, v41, v40, v7, v8, v9, 1);
      v30 = v9;
      v18 = v3;
      v28 = v3;
      v20 = v5;
      v19 = v6;
      sub_1004492E8(v28, v39, v4, v42, v5, v6, v41, v40, (uint64_t)oslog, v8, v30, 1);

    }
    swift_errorRetain(v18);
    a2(v18);
    sub_1004492E8(v18, v39, v4, v42, v20, v19, v41, v40, (uint64_t)oslog, v8, v35, 1);
    sub_1004492E8(v18, v39, v4, v42, v20, v6, v41, v40, (uint64_t)oslog, v8, v35, 1);
  }
  else
  {
    v21 = qword_1010EA098;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v9);
    v22 = v21 == -1;
    v23 = v2;
    if (!v22)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v24 = type metadata accessor for Logger(0);
    sub_10001A9E8(v24, (uint64_t)qword_1011B7A18);
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v9);
    osloga = Logger.logObject.getter(v25);
    v26 = static os_log_type_t.default.getter(osloga);
    if (os_log_type_enabled(osloga, v26))
    {
      v36 = v8;
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = swift_slowAlloc(32, -1);
      v44[0] = v34;
      *(_DWORD *)v27 = 136315138;
      swift_bridgeObjectRetain(v42);
      v43 = sub_100016940(v4, v42, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease();
      sub_1004492E8(v3, v23, v4, v42, v5, v6, v41, v40, v7, v36, v9, 0);
      sub_1004492E8(v3, v23, v4, v42, v5, v6, v41, v40, v7, v36, v9, 0);
      _os_log_impl((void *)&_mh_execute_header, osloga, v26, "LabelledLocations - Successfully saved location label record %s", v27, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {
      sub_1004492E8(v3, v23, v4, v42, v5, v6, v41, v40, v7, v8, v9, 0);
      sub_1004492E8(v3, v23, v4, v42, v5, v6, v41, v40, v7, v8, v9, 0);

    }
  }
}

uint64_t sub_100446454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  NSObject *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  os_log_t v50;
  uint8_t *v51;
  uint64_t v52;
  _QWORD *v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  os_log_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[2];
  uint64_t v74;
  unint64_t v75;

  v1 = type metadata accessor for URL(0);
  v63 = *(_QWORD *)(v1 - 8);
  v64 = v1;
  __chkstk_darwin(v1);
  v62 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for UUID(0);
  v61 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v4 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = *(_QWORD *)(v0 + 24);
  v5 = sub_10088A6A4();
  v7 = v5[2];
  if (v7)
  {
    v72 = 0;
    v54 = v5;
    v8 = v5 + 7;
    *(_QWORD *)&v6 = 136315394;
    v56 = v6;
    v55 = (char *)&type metadata for Any + 8;
    do
    {
      v71 = v7;
      v10 = *(v8 - 3);
      v9 = *(v8 - 2);
      v11 = *v8;
      v66 = *(v8 - 1);
      v12 = v8[2];
      v13 = v8[7];
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v9);
      v14 = v11;
      swift_bridgeObjectRetain(v11);
      v70 = v12;
      swift_bridgeObjectRetain(v12);
      v67 = v10;
      v69 = v9;
      v15 = String.utf8Data.getter(v10, v9);
      v17 = v16;
      v74 = v15;
      v75 = v16;
      v65 = sub_100035530();
      DataProtocol.stableUUID.getter(&type metadata for Data, v65);
      sub_10001BC14(v15, v17);
      v18 = *(_QWORD **)(v60 + 160);
      v19 = v4;
      if (qword_1010EA3B8 != -1)
        swift_once(&qword_1010EA3B8, sub_100BE94A8);
      v20 = v64;
      v21 = sub_10001A9E8(v64, (uint64_t)qword_1011B7EB0);
      v23 = v62;
      v22 = v63;
      v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v21, v20);
      __chkstk_darwin(v24);
      *(&v54 - 4) = v18;
      *(&v54 - 3) = v19;
      *(&v54 - 2) = v23;
      v25 = v72;
      OS_dispatch_queue.sync<A>(execute:)(sub_10044AB30, &v54 - 6, &type metadata for Bool);
      v72 = v25;
      v26 = v74;
      (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v20);
      v27 = *(void (**)(char *, uint64_t))(v61 + 8);
      v27(v19, v68);
      v4 = v19;
      if ((v26 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v28 = v14;
        v29 = v13;
        if (qword_1010EA098 != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v30 = type metadata accessor for Logger(0);
        sub_10001A9E8(v30, (uint64_t)qword_1011B7A18);
        v31 = v69;
        swift_bridgeObjectRetain(v69);
        swift_bridgeObjectRetain(v14);
        v32 = v70;
        swift_bridgeObjectRetain(v70);
        swift_bridgeObjectRetain(v29);
        v34 = Logger.logObject.getter(v33);
        v35 = static os_log_type_t.default.getter(v34);
        v36 = v35;
        if (os_log_type_enabled(v34, v35))
        {
          v37 = swift_slowAlloc(22, -1);
          v59 = v36;
          v38 = v37;
          v57 = v37;
          v58 = swift_slowAlloc(64, -1);
          v73[0] = v58;
          *(_DWORD *)v38 = v56;
          swift_bridgeObjectRetain(v28);
          *(_QWORD *)(v38 + 4) = sub_100016940(v66, v28, v73);
          swift_bridgeObjectRelease();
          *(_WORD *)(v38 + 12) = 2080;
          v39 = String.utf8Data.getter(v67, v31);
          v41 = v40;
          v74 = v39;
          v75 = v40;
          v67 = v34;
          DataProtocol.stableUUID.getter(&type metadata for Data, v65);
          sub_10001BC14(v39, v41);
          v42 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v43 = v68;
          v44 = v29;
          v45 = dispatch thunk of CustomStringConvertible.description.getter(v68, v42);
          v47 = v46;
          v27(v4, v43);
          v48 = sub_100016940(v45, v47, v73);
          v49 = (uint8_t *)v57;
          *(_QWORD *)(v57 + 14) = v48;
          swift_bridgeObjectRelease_n(v44, 2);
          swift_bridgeObjectRelease_n(v32, 2);
          swift_bridgeObjectRelease_n(v28, 2);
          swift_bridgeObjectRelease_n(v31, 2);
          swift_bridgeObjectRelease();
          v50 = v67;
          v51 = v49;
          _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v59, "Failed to remove cached location label %s %s", v49, 0x16u);
          v52 = v58;
          swift_arrayDestroy(v58, 2, v55);
          swift_slowDealloc(v52, -1, -1);
          swift_slowDealloc(v51, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v29, 2);
          swift_bridgeObjectRelease_n(v32, 2);
          swift_bridgeObjectRelease_n(v28, 2);
          swift_bridgeObjectRelease_n(v31, 2);
        }
      }
      v8 += 11;
      v7 = v71 - 1;
    }
    while (v71 != 1);
  }
  return swift_bridgeObjectRelease();
}

void sub_100446994(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  ValueMetadata *v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[208];
  ValueMetadata *v56;
  char v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  char v68;
  char v69;
  char v70;
  char v71;
  uint64_t v72;
  __int128 v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v1 + 24);
  if (qword_1010E9C48 != -1)
    swift_once(&qword_1010E9C48, sub_1004EFA2C);
  v12 = sub_10001A9E8(v7, (uint64_t)qword_1011B6FA8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
  v53 = v7;
  v54 = v8;
  v13 = *(_QWORD *)(v11 + 160);
  v52 = v10;
  if (qword_1010E9C40 != -1)
    swift_once(&qword_1010E9C40, sub_1004EF95C);
  v14 = sub_10001A9E8(v3, (uint64_t)qword_1011B6F90);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v14, v3);
  v15._object = (void *)0x8000000100ED68C0;
  v15._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v15);
  v56 = &type metadata for SecureLocationsConfig;
  v16 = sub_10001A9A8(&qword_1010FC1B8);
  v17 = String.init<A>(describing:)(&v56, v16);
  v51 = v3;
  v18 = v17;
  v20 = v19;
  v21 = objc_autoreleasePoolPush();
  v50 = v4;
  __chkstk_darwin(v21);
  *(&v49 - 6) = v13;
  v22 = v52;
  *(&v49 - 5) = (uint64_t)v52;
  *(&v49 - 4) = (uint64_t)v6;
  *(&v49 - 3) = v18;
  *(&v49 - 2) = v20;
  v23 = sub_10001A9A8(&qword_1010FC1C0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100449348, &v49 - 8, v23);
  objc_autoreleasePoolPop(v21);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v6, v51);
  sub_100005CF0((uint64_t)&v56, (uint64_t)v55, &qword_1010FC1C0);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v22, v53);
  sub_100005CF0((uint64_t)v55, (uint64_t)&v56, &qword_1010FC1C0);
  if (sub_10044935C((uint64_t)&v56) == 1)
  {
    if (qword_1010E9C50 != -1)
      swift_once(&qword_1010E9C50, sub_1004F0934);
    v24 = 808334129;
    swift_bridgeObjectRetain(qword_1011B6FC0);
    v26 = 0;
    v27 = 0;
    v28 = xmmword_100E3EAA0;
    v29 = xmmword_100E3EAB0;
    v30 = xmmword_100E3EAC0;
    v31 = 808334897;
    v32 = 0xE300000000000000;
    v33 = xmmword_100E3EAD0;
    v34 = 0xE400000000000000;
    v35 = 1;
    v36 = 3157561;
    v37 = 0x409C200000000000;
    v38 = 0x405E000000000000;
    v39 = 5;
    v40 = 1;
    v41 = 5;
    v42 = 1;
    v43 = 1;
    v44 = 1;
    v45 = 1;
    v46 = 5;
    v47 = 1;
    v48 = 0xE400000000000000;
  }
  else
  {
    v42 = v68;
    v43 = v69;
    v44 = v70;
    v45 = v71;
    v46 = v72;
    v28 = v73;
    v47 = v74;
    v31 = v75;
    v34 = v76;
    v24 = v77;
    v48 = v78;
    v36 = v79;
    v32 = v80;
    v29 = v67;
    v41 = v66;
    v37 = v65;
    v40 = v64;
    v38 = v63;
    v25 = v62;
    v27 = v61;
    v30 = v60;
    v39 = v59;
    v33 = v58;
    v35 = v57;
    v26 = v56;
  }
  *(_QWORD *)a1 = v26;
  *(_BYTE *)(a1 + 8) = v35;
  *(_OWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 32) = v39;
  *(_OWORD *)(a1 + 40) = v30;
  *(_BYTE *)(a1 + 56) = v27;
  *(_QWORD *)(a1 + 64) = v25;
  *(_QWORD *)(a1 + 72) = v38;
  *(_BYTE *)(a1 + 80) = v40;
  *(_QWORD *)(a1 + 88) = v37;
  *(_QWORD *)(a1 + 96) = v41;
  *(_OWORD *)(a1 + 104) = v29;
  *(_BYTE *)(a1 + 120) = v42;
  *(_BYTE *)(a1 + 121) = v43;
  *(_BYTE *)(a1 + 122) = v44;
  *(_BYTE *)(a1 + 123) = v45;
  *(_QWORD *)(a1 + 128) = v46;
  *(_OWORD *)(a1 + 136) = v28;
  *(_BYTE *)(a1 + 152) = v47;
  *(_QWORD *)(a1 + 160) = v31;
  *(_QWORD *)(a1 + 168) = v34;
  *(_QWORD *)(a1 + 176) = v24;
  *(_QWORD *)(a1 + 184) = v48;
  *(_QWORD *)(a1 + 192) = v36;
  *(_QWORD *)(a1 + 200) = v32;
}

void sub_100446D84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19[27];
  _BYTE v20[216];
  _BYTE v21[216];
  _BYTE v22[216];
  _BYTE v23[216];

  sub_100005CF0(a1, (uint64_t)v22, &qword_1010FC1B0);
  sub_100005CF0((uint64_t)v22, (uint64_t)v23, &qword_1010FC1B0);
  if (sub_1004487E4((uint64_t)v23) == 1)
  {
    v1 = *(_QWORD *)SharingCircleWildAdvertisementKey.init(key:)(v23);
    sub_100005CF0((uint64_t)v22, (uint64_t)v20, &qword_1010FC1B0);
    v2 = *(_QWORD *)SharingCircleWildAdvertisementKey.init(key:)(v20);
    swift_errorRetain(v2);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v3 = type metadata accessor for Logger(0);
    sub_10001A9E8(v3, (uint64_t)qword_1011B7A18);
    sub_100005CF0((uint64_t)v22, (uint64_t)v21, &qword_1010FC1B0);
    v4 = (_QWORD *)SharingCircleWildAdvertisementKey.init(key:)(v21);
    swift_errorRetain(*v4);
    v5 = swift_errorRetain(v2);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v18 = v1;
      v19[0] = v9;
      *(_DWORD *)v8 = 136315138;
      swift_errorRetain(v2);
      v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v11 = String.init<A>(describing:)(&v18, v10);
      v18 = sub_100016940(v11, v12, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease();
      sub_1004487EC((uint64_t)v22);
      sub_1004487EC((uint64_t)v22);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error saving config %s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      sub_1004487EC((uint64_t)v22);
      return;
    }
    sub_1004487EC((uint64_t)v22);
    sub_1004487EC((uint64_t)v22);
    sub_100005CF0((uint64_t)v22, (uint64_t)v19, &qword_1010FC1B0);
    v17 = (_QWORD *)SharingCircleWildAdvertisementKey.init(key:)(v19);
    swift_errorRelease(*v17);
  }
  else
  {
    SharingCircleWildAdvertisementKey.init(key:)(v23);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B7A18);
    v6 = Logger.logObject.getter(v14);
    v15 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v15, "Successfully saved config", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
  }

}

BOOL sub_1004470AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char *v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29[26];
  _QWORD v30[27];

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v0 + 24);
  if (qword_1010E9C48 != -1)
    swift_once(&qword_1010E9C48, sub_1004EFA2C);
  v10 = sub_10001A9E8(v5, (uint64_t)qword_1011B6FA8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v10, v5);
  v27 = v8;
  v28 = v5;
  v11 = *(_QWORD *)(v9 + 160);
  v26 = v6;
  if (qword_1010E9C40 != -1)
    swift_once(&qword_1010E9C40, sub_1004EF95C);
  v12 = sub_10001A9E8(v1, (uint64_t)qword_1011B6F90);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v12, v1);
  v13._object = (void *)0x8000000100ED68C0;
  v13._countAndFlagsBits = 0xD000000000000014;
  prohibitAsyncContext(functionName:)(v13);
  v30[0] = &type metadata for SecureLocationsConfig;
  v14 = sub_10001A9A8(&qword_1010FC1B8);
  v15 = String.init<A>(describing:)(v30, v14);
  v25 = v1;
  v16 = v15;
  v17 = v4;
  v19 = v18;
  v20 = objc_autoreleasePoolPush();
  __chkstk_darwin(v20);
  *(&v25 - 6) = v11;
  v21 = v27;
  *(&v25 - 5) = (uint64_t)v27;
  *(&v25 - 4) = (uint64_t)v17;
  *(&v25 - 3) = v16;
  *(&v25 - 2) = v19;
  v22 = sub_10001A9A8(&qword_1010FC1C0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100449348, &v25 - 8, v22);
  objc_autoreleasePoolPop(v20);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v17, v25);
  sub_100005CF0((uint64_t)v30, (uint64_t)v29, &qword_1010FC1C0);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v21, v28);
  sub_100005CF0((uint64_t)v29, (uint64_t)v30, &qword_1010FC1C0);
  v23 = sub_10044935C((uint64_t)v30);
  if (v23 != 1)
    sub_100449374(v29);
  return v23 != 1;
}

uint64_t sub_100447344()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for SecureLocationsPayloadManager()
{
  return objc_opt_self(_TtC12searchpartyd29SecureLocationsPayloadManager);
}

uint64_t destroy for SecureLocationsEncodedPayload(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SecureLocationsEncodedPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for SecureLocationsEncodedPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SecureLocationsEncodedPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SecureLocationsEncodedPayload()
{
  return &type metadata for SecureLocationsEncodedPayload;
}

Swift::Int sub_100447550(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_10088F254(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1004475B8(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1004475B8(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  double v15;
  uint64_t v16;
  double v17;
  double *v18;
  uint64_t v19;
  Swift::Int v20;
  Swift::Int v21;
  __int128 v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  Swift::Int v29;
  double *v30;
  double *v31;
  Swift::Int v32;
  double v33;
  char v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  char v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t i;
  uint64_t v92;
  uint64_t v93;
  double v94;
  char v95;
  __int128 v96;
  __int128 v97;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  Swift::Int v111;
  Swift::Int v112;
  uint64_t v113;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_141;
    if ((unint64_t)v3 >= 2)
    {
      v88 = *a1;
      v89 = *a1 + 32;
      v90 = -1;
      for (i = 1; i != v3; ++i)
      {
        v92 = v89;
        v93 = v90;
        do
        {
          v94 = *(double *)(v92 + 16);
          if (*(double *)(v92 - 16) >= v94)
            break;
          if (!v88)
            goto LABEL_145;
          v95 = *(_BYTE *)(v92 + 24);
          v96 = *(_OWORD *)v92;
          v97 = *(_OWORD *)(v92 - 16);
          *(_OWORD *)v92 = *(_OWORD *)(v92 - 32);
          *(_OWORD *)(v92 + 16) = v97;
          *(double *)(v92 - 16) = v94;
          *(_BYTE *)(v92 - 8) = v95;
          *(_OWORD *)(v92 - 32) = v96;
          v92 -= 32;
        }
        while (!__CFADD__(v93++, 1));
        --v90;
        v89 += 32;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_150;
  v6 = result;
  v107 = a1;
  if (v3 < 2)
  {
    v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
      v12 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      v99 = v12;
      v110 = v9;
      if (v13 >= 2)
      {
        v100 = *v107;
        do
        {
          v101 = v13 - 2;
          if (v13 < 2)
            goto LABEL_136;
          if (!v100)
            goto LABEL_149;
          v102 = v99;
          v103 = *(_QWORD *)&v99[16 * v101 + 32];
          v104 = *(_QWORD *)&v99[16 * v13 + 24];
          sub_100447CB8((char *)(v100 + 32 * v103), (char *)(v100 + 32 * *(_QWORD *)&v99[16 * v13 + 16]), v100 + 32 * v104, __dst);
          if (v1)
            break;
          if (v104 < v103)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native(v102) & 1) == 0)
            v102 = sub_10088F088((uint64_t)v102);
          if (v101 >= *((_QWORD *)v102 + 2))
            goto LABEL_138;
          v105 = &v102[16 * v101 + 32];
          *(_QWORD *)v105 = v103;
          *((_QWORD *)v105 + 1) = v104;
          v106 = *((_QWORD *)v102 + 2);
          if (v13 > v106)
            goto LABEL_139;
          memmove(&v102[16 * v13 + 16], &v102[16 * v13 + 32], 16 * (v106 - v13));
          v99 = v102;
          *((_QWORD *)v102 + 2) = v106 - 1;
          v13 = v106 - 1;
        }
        while (v106 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      v110[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v110 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for SecureLocationsEncodedInfo);
    *(_QWORD *)(v8 + 16) = v7;
    v110 = (_QWORD *)v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v108 = *a1 + 80;
  v109 = *a1 + 16;
  v12 = (char *)_swiftEmptyArrayStorage;
  v111 = v6;
  v112 = v3;
  v113 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(double *)(v109 + 32 * v10);
      v16 = 32 * v14;
      v17 = *(double *)(v109 + 32 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v18 = (double *)(v108 + 32 * v14);
        while (v17 < v15 != *(v18 - 4) >= *v18)
        {
          ++v10;
          v18 += 4;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v17 < v15)
      {
        if (v10 < v14)
          goto LABEL_142;
        if (v14 < v10)
        {
          v19 = 32 * v10 - 32;
          v20 = v10;
          v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11)
                goto LABEL_148;
              v24 = (_OWORD *)(v11 + v16);
              v25 = (_OWORD *)(v11 + v19);
              v26 = *(_OWORD *)(v11 + v16);
              v27 = *(_QWORD *)(v11 + v16 + 16);
              v28 = *(_BYTE *)(v11 + v16 + 24);
              if (v16 != v19 || v24 >= v25 + 2)
              {
                v22 = v25[1];
                *v24 = *v25;
                v24[1] = v22;
              }
              v23 = v11 + v19;
              *(_OWORD *)v23 = v26;
              *(_QWORD *)(v23 + 16) = v27;
              *(_BYTE *)(v23 + 24) = v28;
            }
            ++v21;
            v19 -= 32;
            v16 += 32;
          }
          while (v21 < v20);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_50;
    if (__OFSUB__(v10, v14))
      goto LABEL_140;
    if (v10 - v14 >= v6)
      goto LABEL_50;
    v29 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_143;
    if (v29 >= v3)
      v29 = v3;
    if (v29 < v14)
      break;
    if (v10 != v29)
    {
      v30 = (double *)(v11 + 32 * v10);
      do
      {
        v31 = v30;
        v32 = v14;
        do
        {
          v33 = v31[2];
          if (*(v31 - 2) >= v33)
            break;
          if (!v11)
            goto LABEL_146;
          v34 = *((_BYTE *)v31 + 24);
          v35 = *(_OWORD *)v31;
          v36 = *((_OWORD *)v31 - 1);
          *(_OWORD *)v31 = *((_OWORD *)v31 - 2);
          *((_OWORD *)v31 + 1) = v36;
          *(v31 - 2) = v33;
          *((_BYTE *)v31 - 8) = v34;
          *((_OWORD *)v31 - 2) = v35;
          v31 -= 4;
          ++v32;
        }
        while (v10 != v32);
        ++v10;
        v30 += 4;
      }
      while (v10 != v29);
      v10 = v29;
    }
LABEL_50:
    if (v10 < v14)
      goto LABEL_135;
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_10088E710(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v38 = *((_QWORD *)v12 + 2);
    v37 = *((_QWORD *)v12 + 3);
    v13 = v38 + 1;
    v11 = v113;
    if (v38 >= v37 >> 1)
    {
      v87 = sub_10088E710((char *)(v37 > 1), v38 + 1, 1, v12);
      v11 = v113;
      v12 = v87;
    }
    *((_QWORD *)v12 + 2) = v13;
    v39 = v12 + 32;
    v40 = &v12[16 * v38 + 32];
    *(_QWORD *)v40 = v14;
    *((_QWORD *)v40 + 1) = v10;
    if (v38)
    {
      while (1)
      {
        v41 = v13 - 1;
        if (v13 >= 4)
        {
          v46 = &v39[16 * v13];
          v47 = *((_QWORD *)v46 - 8);
          v48 = *((_QWORD *)v46 - 7);
          v52 = __OFSUB__(v48, v47);
          v49 = v48 - v47;
          if (v52)
            goto LABEL_124;
          v51 = *((_QWORD *)v46 - 6);
          v50 = *((_QWORD *)v46 - 5);
          v52 = __OFSUB__(v50, v51);
          v44 = v50 - v51;
          v45 = v52;
          if (v52)
            goto LABEL_125;
          v53 = v13 - 2;
          v54 = &v39[16 * v13 - 32];
          v56 = *(_QWORD *)v54;
          v55 = *((_QWORD *)v54 + 1);
          v52 = __OFSUB__(v55, v56);
          v57 = v55 - v56;
          if (v52)
            goto LABEL_127;
          v52 = __OFADD__(v44, v57);
          v58 = v44 + v57;
          if (v52)
            goto LABEL_130;
          if (v58 >= v49)
          {
            v76 = &v39[16 * v41];
            v78 = *(_QWORD *)v76;
            v77 = *((_QWORD *)v76 + 1);
            v52 = __OFSUB__(v77, v78);
            v79 = v77 - v78;
            if (v52)
              goto LABEL_134;
            v69 = v44 < v79;
            goto LABEL_87;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v70 = *((_QWORD *)v12 + 4);
            v71 = *((_QWORD *)v12 + 5);
            v52 = __OFSUB__(v71, v70);
            v63 = v71 - v70;
            v64 = v52;
            goto LABEL_81;
          }
          v43 = *((_QWORD *)v12 + 4);
          v42 = *((_QWORD *)v12 + 5);
          v52 = __OFSUB__(v42, v43);
          v44 = v42 - v43;
          v45 = v52;
        }
        if ((v45 & 1) != 0)
          goto LABEL_126;
        v53 = v13 - 2;
        v59 = &v39[16 * v13 - 32];
        v61 = *(_QWORD *)v59;
        v60 = *((_QWORD *)v59 + 1);
        v62 = __OFSUB__(v60, v61);
        v63 = v60 - v61;
        v64 = v62;
        if (v62)
          goto LABEL_129;
        v65 = &v39[16 * v41];
        v67 = *(_QWORD *)v65;
        v66 = *((_QWORD *)v65 + 1);
        v52 = __OFSUB__(v66, v67);
        v68 = v66 - v67;
        if (v52)
          goto LABEL_132;
        if (__OFADD__(v63, v68))
          goto LABEL_133;
        if (v63 + v68 >= v44)
        {
          v69 = v44 < v68;
LABEL_87:
          if (v69)
            v41 = v53;
          goto LABEL_89;
        }
LABEL_81:
        if ((v64 & 1) != 0)
          goto LABEL_128;
        v72 = &v39[16 * v41];
        v74 = *(_QWORD *)v72;
        v73 = *((_QWORD *)v72 + 1);
        v52 = __OFSUB__(v73, v74);
        v75 = v73 - v74;
        if (v52)
          goto LABEL_131;
        if (v75 < v63)
          goto LABEL_15;
LABEL_89:
        v80 = v41 - 1;
        if (v41 - 1 >= v13)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v11)
          goto LABEL_147;
        v81 = v12;
        v82 = &v39[16 * v80];
        v83 = *(_QWORD *)v82;
        v84 = &v39[16 * v41];
        v85 = *((_QWORD *)v84 + 1);
        sub_100447CB8((char *)(v11 + 32 * *(_QWORD *)v82), (char *)(v11 + 32 * *(_QWORD *)v84), v11 + 32 * v85, __dst);
        if (v1)
          goto LABEL_97;
        if (v85 < v83)
          goto LABEL_121;
        if (v41 > *((_QWORD *)v81 + 2))
          goto LABEL_122;
        *(_QWORD *)v82 = v83;
        *(_QWORD *)&v39[16 * v80 + 8] = v85;
        v86 = *((_QWORD *)v81 + 2);
        if (v41 >= v86)
          goto LABEL_123;
        v12 = v81;
        v13 = v86 - 1;
        memmove(&v39[16 * v41], v84 + 16, 16 * (v86 - 1 - v41));
        *((_QWORD *)v81 + 2) = v86 - 1;
        v11 = v113;
        if (v86 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v111;
    v3 = v112;
    if (v10 >= v112)
    {
      v9 = v110;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_100447CB8(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  uint64_t result;
  char v28;
  char *v29;
  char *v30;
  char *v31;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 31;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 5;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 31;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 5;
  v30 = __dst;
  v31 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -31)
    {
      v20 = 32 * v13;
      if (__dst != a2 || &a2[v20] <= __dst)
        memmove(__dst, a2, 32 * v13);
      v21 = &v4[v20];
      v29 = &v4[v20];
      v31 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 32) <= 0xFFFFFFFFFFFFFFC0)
      {
        v22 = (char *)(a3 - 32);
        do
        {
          v23 = v22 + 32;
          if (*((double *)v6 - 2) >= *((double *)v21 - 2))
          {
            v29 = v21 - 32;
            if (v23 < v21 || v22 >= v21 || v23 != v21)
            {
              v26 = *((_OWORD *)v21 - 1);
              *(_OWORD *)v22 = *((_OWORD *)v21 - 2);
              *((_OWORD *)v22 + 1) = v26;
            }
            v24 = v6;
            v21 -= 32;
            if (v6 <= v7)
              break;
          }
          else
          {
            v24 = v6 - 32;
            if (v23 != v6 || v22 >= v6)
            {
              v25 = *((_OWORD *)v6 - 1);
              *(_OWORD *)v22 = *(_OWORD *)v24;
              *((_OWORD *)v22 + 1) = v25;
            }
            v31 = v6 - 32;
            if (v24 <= v7)
              break;
          }
          v22 -= 32;
          v6 = v24;
        }
        while (v21 > v4);
      }
LABEL_44:
      sub_10088E91C(&v31, &v30, &v29);
      return 1;
    }
  }
  else if (v8 >= -31)
  {
    v14 = 32 * v10;
    if (__dst != __src || &__src[v14] <= __dst)
      memmove(__dst, __src, v14);
    v15 = &v4[v14];
    v29 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 32) <= 0xFFFFFFFFFFFFFFC0)
    {
      v16 = v4;
      while (1)
      {
        if (*((double *)v16 + 2) >= *((double *)v6 + 2))
        {
          v4 = v16 + 32;
          v18 = v16;
          v17 = v6;
          if (v7 == v16)
          {
            v16 += 32;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v16 += 32;
          }
        }
        else
        {
          v17 = v6 + 32;
          v18 = v6;
          if (v7 == v6 && v7 < v17)
            goto LABEL_22;
        }
        v19 = *((_OWORD *)v18 + 1);
        *(_OWORD *)v7 = *(_OWORD *)v18;
        *((_OWORD *)v7 + 1) = v19;
LABEL_22:
        v7 += 32;
        if (v16 < v15)
        {
          v6 = v17;
          if ((unint64_t)v17 < a3)
            continue;
        }
        v30 = v4;
        v31 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  v28 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v28, 1046, 0);
  __break(1u);
  return result;
}

void sub_100447F40(uint64_t a1, char *a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21[2];

  v7 = a1 + 56;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v12 = 0;
  if (!v10)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v19 = v18[1];
    v21[0] = *v18;
    v21[1] = v19;
    swift_bridgeObjectRetain(v19);
    sub_100442BA0(v21, a2, a3);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    if (v10)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v11)
      goto LABEL_26;
    v16 = *(_QWORD *)(v7 + 8 * v12);
    if (!v16)
    {
      v17 = v12 + 1;
      if (v12 + 1 >= v11)
        goto LABEL_26;
      v16 = *(_QWORD *)(v7 + 8 * v17);
      if (v16)
        goto LABEL_14;
      v17 = v12 + 2;
      if (v12 + 2 >= v11)
        goto LABEL_26;
      v16 = *(_QWORD *)(v7 + 8 * v17);
      if (v16)
        goto LABEL_14;
      v17 = v12 + 3;
      if (v12 + 3 >= v11)
        goto LABEL_26;
      v16 = *(_QWORD *)(v7 + 8 * v17);
      if (v16)
      {
LABEL_14:
        v12 = v17;
        goto LABEL_15;
      }
      v20 = v12 + 4;
      if (v12 + 4 >= v11)
      {
LABEL_26:
        swift_release();
        return;
      }
      v16 = *(_QWORD *)(v7 + 8 * v20);
      v12 += 4;
      if (!v16)
        break;
    }
LABEL_15:
    v10 = (v16 - 1) & v16;
  }
  while (1)
  {
    v12 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v12 >= v11)
      goto LABEL_26;
    v16 = *(_QWORD *)(v7 + 8 * v12);
    ++v20;
    if (v16)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_1004480F4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEA00000000007354)
  {
    v7 = 0xEA00000000007354;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEA00000000007354, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 7630182 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(7630182, 0xE300000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

double sub_10044823C(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v4 = sub_10001A9A8(&qword_1010FC2B0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  v10 = sub_10044A4F4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SecureLocationsEncodedInfo.CodingKeys, &type metadata for SecureLocationsEncodedInfo.CodingKeys, v10, v8, v9);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v18 = 0;
    v11 = sub_100036994();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for Data, &v18, v4, &type metadata for Data, v11);
    v13 = v16;
    v14 = v17;
    LOBYTE(v16) = 1;
    sub_10001BBBC(v13, v17);
    v2 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v4);
    v18 = 2;
    v15 = sub_10044A538();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for SecureLocationsPayloadFormat, &v18, v4, &type metadata for SecureLocationsPayloadFormat, v15);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    sub_10001BC14(v13, v14);
  }
  return v2;
}

uint64_t sub_100448440@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  char v33;

  v5 = sub_10001A9A8(&qword_1010FC170);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100448718();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SecureLocationsEncodedPayload.CodingKeys, &type metadata for SecureLocationsEncodedPayload.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v33 = 0;
    v12 = sub_100036994();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, &type metadata for Data, &v33, v5, &type metadata for Data, v12);
    v13 = v30;
    v14 = v31;
    LOBYTE(v30) = 1;
    sub_10001BBBC(v13, v31);
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
    v32 = v16;
    v28 = v15;
    v29 = a2;
    LOBYTE(v30) = 2;
    v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
    v19 = v18;
    v27 = v17;
    v20 = sub_10001A9A8(&qword_1010FC180);
    v33 = 3;
    v21 = sub_100365CCC(&qword_1010FC188, &qword_1010FC180, (uint64_t (*)(void))sub_10044875C, (const char *)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v19);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, v20, &v33, v5, v20, v21);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v22 = v30;
    sub_10001BBBC(v13, v14);
    swift_bridgeObjectRetain(v22);
    sub_10001BC14(v13, v14);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    sub_10001BC14(v13, v14);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v24 = v28;
    v25 = v29;
    *v29 = v13;
    v25[1] = v14;
    v25[2] = v24;
    *((_BYTE *)v25 + 24) = v32 & 1;
    v25[4] = v27;
    v25[5] = v19;
    v25[6] = v22;
  }
  return result;
}

unint64_t sub_100448718()
{
  unint64_t result;

  result = qword_1010FC178;
  if (!qword_1010FC178)
  {
    result = swift_getWitnessTable(byte_100E3E618, &type metadata for SecureLocationsEncodedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC178);
  }
  return result;
}

unint64_t sub_10044875C()
{
  unint64_t result;

  result = qword_1010FC190;
  if (!qword_1010FC190)
  {
    result = swift_getWitnessTable(aI_17, &type metadata for SecureLocationsEncodedInfo);
    atomic_store(result, (unint64_t *)&qword_1010FC190);
  }
  return result;
}

unint64_t sub_1004487A0()
{
  unint64_t result;

  result = qword_1010FC1A8;
  if (!qword_1010FC1A8)
  {
    result = swift_getWitnessTable(aA_26, &type metadata for SecureLocationsEncodedInfo);
    atomic_store(result, (unint64_t *)&qword_1010FC1A8);
  }
  return result;
}

uint64_t sub_1004487E4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 208);
}

uint64_t sub_1004487EC(uint64_t a1)
{
  sub_10044885C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_BYTE *)(a1 + 208));
  return a1;
}

uint64_t sub_10044885C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if ((a27 & 1) != 0)
    return swift_errorRelease(a1);
  swift_bridgeObjectRelease(a9);
  swift_bridgeObjectRelease(a22);
  swift_bridgeObjectRelease(a24);
  return swift_bridgeObjectRelease(a26);
}

uint64_t sub_1004488BC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x54646E6553706174 && a2 == 0xE900000000000053)
  {
    v5 = 0xE900000000000053;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x54646E6553706174, 0xE900000000000053, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEF64616F6C796150)
  {
    swift_bridgeObjectRelease(0xEF64616F6C796150);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEF64616F6C796150, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1004489DC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v3 = sub_10001A9A8(&qword_1010FC2E8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_10044A604();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SecureLocationsEncodedPushPayload.CodingKeys, &type metadata for SecureLocationsEncodedPushPayload.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = 0;
    v8 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v16, v3);
    v11 = sub_10001A9A8(&qword_1010F3E38);
    v15 = 1;
    v12 = sub_100365CCC((unint64_t *)&qword_1010F9658, &qword_1010F3E38, (uint64_t (*)(void))sub_100365BE4, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, v11, &v15, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return v8;
}

uint64_t sub_100448B88(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F4C657275636573 && a2 == 0xEE006E6F69746163)
  {
    swift_bridgeObjectRelease(0xEE006E6F69746163);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F4C657275636573, 0xEE006E6F69746163, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100448CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  const void *v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  _QWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  void **aBlock;
  _QWORD v71[6];

  v67 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v58 = *(_QWORD *)(v7 - 8);
  v59 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_101076FD8, 32, 7);
  *(_QWORD *)(v14 + 16) = a3;
  *(_QWORD *)(v14 + 24) = a4;
  v15 = qword_1010EA098;
  swift_retain();
  swift_bridgeObjectRetain(a4);
  if (v15 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v60 = v13;
  v61 = v11;
  v68 = v14;
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain(a1);
  v54 = v17;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  v21 = v10;
  if (os_log_type_enabled(v19, v20))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v22 = 134217984;
    aBlock = *(void ***)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v71, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "LabelledLocations: saveLocationLabels %ld", v22, 0xCu);
    swift_slowDealloc(v22, -1, -1);

    v24 = *(_QWORD *)(a1 + 16);
    if (!v24)
      goto LABEL_10;
  }
  else
  {

    v23 = swift_bridgeObjectRelease();
    v24 = *(_QWORD *)(a1 + 16);
    if (!v24)
      goto LABEL_10;
  }
  v52 = a3;
  v53 = a4;
  v57 = *(_QWORD *)(v67 + 24);
  swift_bridgeObjectRetain(a1);
  v51[1] = a1;
  v25 = (uint64_t *)(a1 + 56);
  v55 = v9;
  v56 = v21;
  do
  {
    v67 = v24;
    v27 = *(v25 - 3);
    v26 = *(v25 - 2);
    v28 = *v25;
    v63 = (void *)*(v25 - 1);
    v30 = v25[1];
    v29 = v25[2];
    v62 = *(_OWORD *)(v25 + 3);
    v31 = v25[5];
    v33 = v25[6];
    v32 = v25[7];
    v34 = swift_allocObject(&unk_101077000, 32, 7);
    v35 = v68;
    *(_QWORD *)(v34 + 16) = sub_100449224;
    *(_QWORD *)(v34 + 24) = v35;
    v36 = v57;
    v66 = *(_QWORD *)(v57 + 64);
    v37 = swift_allocObject(&unk_101077028, 128, 7);
    *(_QWORD *)(v37 + 16) = v27;
    *(_QWORD *)(v37 + 24) = v26;
    v64 = v32;
    v65 = v26;
    v38 = v67;
    *(_QWORD *)(v37 + 32) = v63;
    *(_QWORD *)(v37 + 40) = v28;
    *(_QWORD *)(v37 + 48) = v30;
    *(_QWORD *)(v37 + 56) = v29;
    *(_OWORD *)(v37 + 64) = v62;
    *(_QWORD *)(v37 + 80) = v31;
    *(_QWORD *)(v37 + 88) = v33;
    *(_QWORD *)(v37 + 96) = v32;
    *(_QWORD *)(v37 + 104) = v36;
    *(_QWORD *)(v37 + 112) = sub_100449250;
    *(_QWORD *)(v37 + 120) = v34;
    v71[3] = sub_1004492A4;
    v71[4] = v37;
    aBlock = _NSConcreteStackBlock;
    v71[0] = 1107296256;
    v71[1] = sub_100016FB8;
    v71[2] = &unk_101077040;
    v63 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain_n(v32, 2);
    swift_bridgeObjectRetain_n(v26, 2);
    swift_bridgeObjectRetain_n(v28, 2);
    swift_bridgeObjectRetain_n(v29, 2);
    swift_retain();
    swift_retain();
    v39 = swift_retain();
    v40 = v60;
    static DispatchQoS.unspecified.getter(v39);
    v69 = _swiftEmptyArrayStorage;
    v41 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v42 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v43 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v44 = v55;
    v45 = v59;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v69, v42, v43, v59, v41);
    v46 = v63;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v40, v44, v63);
    _Block_release(v46);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v44, v45);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v40, v56);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v25 += 11;
    v24 = v38 - 1;
  }
  while (v24);
  v23 = swift_bridgeObjectRelease();
  a4 = v53;
  a3 = v52;
LABEL_10:
  v47 = Logger.logObject.getter(v23);
  v48 = static os_log_type_t.default.getter(v47);
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "LabelledLocations - SaveLocationLabels - calling completion", v49, 2u);
    swift_slowDealloc(v49, -1, -1);
  }

  sub_10054715C(a3, a4);
  return swift_release();
}

uint64_t sub_1004491F8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100449224(uint64_t a1)
{
  uint64_t v1;

  sub_10053F5F8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10044922C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100449250(uint64_t a1)
{
  uint64_t v1;

  sub_100445E04(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100449258()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[12]);
  swift_release(v0[13]);
  swift_release(v0[15]);
  return swift_deallocObject(v0, 128, 7);
}

_QWORD *sub_1004492A4()
{
  uint64_t v0;
  void (*v1)(__int128 *);
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  _OWORD v6[5];
  uint64_t v7;

  v1 = *(void (**)(__int128 *))(v0 + 112);
  v2 = *(_OWORD *)(v0 + 64);
  v6[2] = *(_OWORD *)(v0 + 48);
  v6[3] = v2;
  v6[4] = *(_OWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 96);
  v4 = *(_OWORD *)(v0 + 32);
  v6[0] = *(_OWORD *)(v0 + 16);
  v6[1] = v4;
  return sub_100CAA958((uint64_t *)v6, v3, v1);
}

uint64_t sub_1004492E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if ((a12 & 1) != 0)
    return swift_errorRelease(a1);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a6);
  return swift_bridgeObjectRelease(a11);
}

uint64_t sub_100449348@<X0>(uint64_t a1@<X8>)
{
  return sub_100449438(a1);
}

uint64_t sub_10044935C(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t *sub_100449374(uint64_t *a1)
{
  sub_1004493DC(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25]);
  return a1;
}

uint64_t sub_1004493DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t result;

  result = a9;
  if (a9)
  {
    swift_bridgeObjectRelease(a9);
    swift_bridgeObjectRelease(a22);
    swift_bridgeObjectRelease(a24);
    return swift_bridgeObjectRelease(a26);
  }
  return result;
}

uint64_t sub_100449438@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100A7B384(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), a1);
}

uint64_t sub_100449458@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1008BC95C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_100449474@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1008BD5FC(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_100449490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SecureLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v7 = v0 + v4 + *(int *)(v1 + 52);
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10044953C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SecureLocation(0) - 8) + 80);
  return sub_10044350C(a1, a2, *(uint64_t (**)(_QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), v2 + ((v5 + 40) & ~v5));
}

void sub_100449590(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1008BB7F0(v1, a1);
}

uint64_t type metadata accessor for SecureLocationsCachedPayload(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FC258;
  if (!qword_1010FC258)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecureLocationsCachedPayload);
  return result;
}

uint64_t sub_1004495E4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100449608()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

void sub_100449644()
{
  uint64_t v0;

  sub_100442B40(*(_QWORD *)(v0 + 16), *(char **)(v0 + 24), *(_QWORD *)(v0 + 32), *(NSObject **)(v0 + 40));
}

uint64_t sub_100449650()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100449684()
{
  uint64_t v0;

  return sub_1004420C0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(char *))(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_100449694()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1004496C8()
{
  uint64_t v0;

  return sub_100440584(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(void (**)(__n128))(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1004496D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004496E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SecureLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  swift_bridgeObjectRelease();
  v7 = v0 + v4 + *(int *)(v1 + 52);
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1004497B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for SecureLocation(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10044186C(a1, *(NSObject **)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFF8)));
}

void sub_100449818()
{
  uint64_t v0;

  sub_1007B04AC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100449830()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100449854(uint64_t a1)
{
  uint64_t v1;

  sub_10043E228(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

_QWORD *sub_100449860(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for SecureLocationsEncodedPushPayload(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for SecureLocationsEncodedPushPayload(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagingDestination(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MessagingDestination(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsEncodedPushPayload()
{
  return &type metadata for SecureLocationsEncodedPushPayload;
}

uint64_t *sub_1004499DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(uint64_t *)((char *)a2 + v8);
    v12 = *((_QWORD *)v10 + 1);
    *(_QWORD *)v9 = v11;
    *((_QWORD *)v9 + 1) = v12;
    v13 = *((_OWORD *)v10 + 2);
    *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
    *((_OWORD *)v9 + 2) = v13;
    *((_OWORD *)v9 + 3) = *((_OWORD *)v10 + 3);
    v14 = *((_QWORD *)v10 + 9);
    *((_QWORD *)v9 + 8) = *((_QWORD *)v10 + 8);
    *((_QWORD *)v9 + 9) = v14;
    v9[80] = v10[80];
    v15 = (int *)type metadata accessor for SecureLocation(0);
    v16 = v15[13];
    v17 = &v9[v16];
    v18 = &v10[v16];
    v19 = type metadata accessor for Date(0);
    v20 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v19 - 8) + 16);
    v21 = swift_bridgeObjectRetain(v12);
    v20(v17, v18, v19, v21);
    *(_QWORD *)&v9[v15[14]] = *(_QWORD *)&v10[v15[14]];
    *(_QWORD *)&v9[v15[15]] = *(_QWORD *)&v10[v15[15]];
    v22 = v15[16];
    v23 = &v9[v22];
    v24 = &v10[v22];
    v25 = *((_QWORD *)v24 + 1);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *((_QWORD *)v23 + 1) = v25;
    swift_bridgeObjectRetain(v25);
  }
  return a1;
}

uint64_t sub_100449B18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  v6 = v5 + *(int *)(type metadata accessor for SecureLocation(0) + 52);
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100449BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  *(_QWORD *)v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(v8 + 8) = v10;
  v11 = *(_OWORD *)(a2 + v7 + 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + v7 + 16);
  *(_OWORD *)(v8 + 32) = v11;
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + v7 + 48);
  v12 = *(_QWORD *)(a2 + v7 + 72);
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(a2 + v7 + 64);
  *(_QWORD *)(v8 + 72) = v12;
  *(_BYTE *)(v8 + 80) = *(_BYTE *)(a2 + v7 + 80);
  v13 = (int *)type metadata accessor for SecureLocation(0);
  v14 = v13[13];
  v15 = v8 + v14;
  v16 = v9 + v14;
  v17 = type metadata accessor for Date(0);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v17 - 8) + 16);
  v19 = swift_bridgeObjectRetain(v10);
  v18(v15, v16, v17, v19);
  *(_QWORD *)(v8 + v13[14]) = *(_QWORD *)(v9 + v13[14]);
  *(_QWORD *)(v8 + v13[15]) = *(_QWORD *)(v9 + v13[15]);
  v20 = v13[16];
  v21 = (_QWORD *)(v8 + v20);
  v22 = (_QWORD *)(v9 + v20);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  swift_bridgeObjectRetain(v23);
  return a1;
}

uint64_t sub_100449CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  *(_QWORD *)(v8 + 8) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v8 + 24) = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v8 + 56) = *(_QWORD *)(v9 + 56);
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
  v11 = *(_QWORD *)(v9 + 72);
  *(_BYTE *)(v8 + 80) = *(_BYTE *)(v9 + 80);
  *(_QWORD *)(v8 + 72) = v11;
  v12 = (int *)type metadata accessor for SecureLocation(0);
  v13 = v12[13];
  v14 = v8 + v13;
  v15 = v9 + v13;
  v16 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  *(_QWORD *)(v8 + v12[14]) = *(_QWORD *)(v9 + v12[14]);
  *(_QWORD *)(v8 + v12[15]) = *(_QWORD *)(v9 + v12[15]);
  v17 = v12[16];
  v18 = (_QWORD *)(v8 + v17);
  v19 = (_QWORD *)(v9 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100449E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_OWORD *)(a2 + v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(v8 + 16) = v10;
  v11 = *(_OWORD *)(a2 + v7 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + v7 + 32);
  *(_OWORD *)(v8 + 48) = v11;
  v12 = *(_QWORD *)(a2 + v7 + 72);
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(a2 + v7 + 64);
  *(_QWORD *)(v8 + 72) = v12;
  *(_BYTE *)(v8 + 80) = *(_BYTE *)(a2 + v7 + 80);
  v13 = (int *)type metadata accessor for SecureLocation(0);
  v14 = v13[13];
  v15 = v8 + v14;
  v16 = v9 + v14;
  v17 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
  *(_QWORD *)(v8 + v13[14]) = *(_QWORD *)(v9 + v13[14]);
  *(_QWORD *)(v8 + v13[15]) = *(_QWORD *)(v9 + v13[15]);
  *(_OWORD *)(v8 + v13[16]) = *(_OWORD *)(v9 + v13[16]);
  return a1;
}

uint64_t sub_100449EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  *(_QWORD *)v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(v8 + 8) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v9 + 16);
  *(_OWORD *)(v8 + 32) = v11;
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(v9 + 48);
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(v9 + 72);
  *(_BYTE *)(v8 + 80) = *(_BYTE *)(v9 + 80);
  v12 = (int *)type metadata accessor for SecureLocation(0);
  v13 = v12[13];
  v14 = v8 + v13;
  v15 = v9 + v13;
  v16 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  *(_QWORD *)(v8 + v12[14]) = *(_QWORD *)(v9 + v12[14]);
  *(_QWORD *)(v8 + v12[15]) = *(_QWORD *)(v9 + v12[15]);
  v17 = v12[16];
  v18 = (_QWORD *)(v8 + v17);
  v19 = (uint64_t *)(v9 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100449FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100449FF4);
}

uint64_t sub_100449FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for SecureLocation(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10044A068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10044A074);
}

uint64_t sub_10044A074(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for SecureLocation(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_10044A0F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for SecureLocation(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsEncodedPayload.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10044A1C0 + 4 * byte_100E3E299[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10044A1F4 + 4 * byte_100E3E294[v4]))();
}

uint64_t sub_10044A1F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10044A1FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10044A204);
  return result;
}

uint64_t sub_10044A210(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10044A218);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10044A21C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10044A224(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsEncodedPayload.CodingKeys()
{
  return &type metadata for SecureLocationsEncodedPayload.CodingKeys;
}

uint64_t initializeWithCopy for SecureLocationsEncodedInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for SecureLocationsEncodedInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10001BC14(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for SecureLocationsEncodedInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsEncodedInfo(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 254);
  if (*(unsigned __int8 *)(a1 + 24) <= 2u)
    v3 = 2;
  else
    v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 24) < 2u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for SecureLocationsEncodedInfo()
{
  return &type metadata for SecureLocationsEncodedInfo;
}

unint64_t sub_10044A398()
{
  unint64_t result;

  result = qword_1010FC290;
  if (!qword_1010FC290)
  {
    result = swift_getWitnessTable(byte_100E3E47C, &type metadata for SecureLocationsEncodedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC290);
  }
  return result;
}

uint64_t sub_10044A3DC()
{
  return sub_100006204(&qword_1010FC298, type metadata accessor for SecureLocationsCachedPayload, (uint64_t)&unk_100E3E4A4);
}

uint64_t sub_10044A408(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204(&qword_101111AF0, type metadata accessor for SecureLocationsCachedPayload, (uint64_t)&unk_100E3E5A0);
  result = sub_100006204(&qword_101108420, type metadata accessor for SecureLocationsCachedPayload, (uint64_t)&unk_100E3E550);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10044A468()
{
  unint64_t result;

  result = qword_1010FC2A0;
  if (!qword_1010FC2A0)
  {
    result = swift_getWitnessTable(asc_100E3E3EC, &type metadata for SecureLocationsEncodedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC2A0);
  }
  return result;
}

unint64_t sub_10044A4B0()
{
  unint64_t result;

  result = qword_1010FC2A8;
  if (!qword_1010FC2A8)
  {
    result = swift_getWitnessTable(aE_17, &type metadata for SecureLocationsEncodedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC2A8);
  }
  return result;
}

unint64_t sub_10044A4F4()
{
  unint64_t result;

  result = qword_1010FC2B8;
  if (!qword_1010FC2B8)
  {
    result = swift_getWitnessTable(aA_27, &type metadata for SecureLocationsEncodedInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC2B8);
  }
  return result;
}

unint64_t sub_10044A538()
{
  unint64_t result;

  result = qword_1010FC2C0;
  if (!qword_1010FC2C0)
  {
    result = swift_getWitnessTable(byte_100E3EA20, &type metadata for SecureLocationsPayloadFormat);
    atomic_store(result, (unint64_t *)&qword_1010FC2C0);
  }
  return result;
}

unint64_t sub_10044A57C()
{
  unint64_t result;

  result = qword_1010FC2D0;
  if (!qword_1010FC2D0)
  {
    result = swift_getWitnessTable(a1_13, &type metadata for SecureLocationsPayloadFormat);
    atomic_store(result, (unint64_t *)&qword_1010FC2D0);
  }
  return result;
}

unint64_t sub_10044A5C0()
{
  unint64_t result;

  result = qword_1010FC2E0;
  if (!qword_1010FC2E0)
  {
    result = swift_getWitnessTable(byte_100E3E9A8, &type metadata for SecureLocationsCachedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC2E0);
  }
  return result;
}

unint64_t sub_10044A604()
{
  unint64_t result;

  result = qword_1010FC2F0;
  if (!qword_1010FC2F0)
  {
    result = swift_getWitnessTable(aQ_18, &type metadata for SecureLocationsEncodedPushPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC2F0);
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsEncodedPushPayload.CodingKeys()
{
  return &type metadata for SecureLocationsEncodedPushPayload.CodingKeys;
}

ValueMetadata *type metadata accessor for SecureLocationsCachedPayload.CodingKeys()
{
  return &type metadata for SecureLocationsCachedPayload.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsEncodedInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10044A6B8 + 4 * byte_100E3E2A3[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10044A6EC + 4 * byte_100E3E29E[v4]))();
}

uint64_t sub_10044A6EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10044A6F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10044A6FCLL);
  return result;
}

uint64_t sub_10044A708(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10044A710);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10044A714(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10044A71C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsEncodedInfo.CodingKeys()
{
  return &type metadata for SecureLocationsEncodedInfo.CodingKeys;
}

uint64_t _s12searchpartyd28SecureLocationsPayloadFormatOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10044A784 + 4 * byte_100E3E2AD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10044A7B8 + 4 * byte_100E3E2A8[v4]))();
}

uint64_t sub_10044A7B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10044A7C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10044A7C8);
  return result;
}

uint64_t sub_10044A7D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10044A7DCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10044A7E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10044A7E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsPayloadFormat()
{
  return &type metadata for SecureLocationsPayloadFormat;
}

unint64_t sub_10044A808()
{
  unint64_t result;

  result = qword_1010FC308;
  if (!qword_1010FC308)
  {
    result = swift_getWitnessTable(byte_100E3E708, &type metadata for SecureLocationsPayloadFormat);
    atomic_store(result, (unint64_t *)&qword_1010FC308);
  }
  return result;
}

unint64_t sub_10044A850()
{
  unint64_t result;

  result = qword_1010FC310;
  if (!qword_1010FC310)
  {
    result = swift_getWitnessTable("ю#", &type metadata for SecureLocationsEncodedInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC310);
  }
  return result;
}

unint64_t sub_10044A898()
{
  unint64_t result;

  result = qword_1010FC318;
  if (!qword_1010FC318)
  {
    result = swift_getWitnessTable(byte_100E3E878, &type metadata for SecureLocationsCachedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC318);
  }
  return result;
}

unint64_t sub_10044A8E0()
{
  unint64_t result;

  result = qword_1010FC320;
  if (!qword_1010FC320)
  {
    result = swift_getWitnessTable(aA_28, &type metadata for SecureLocationsEncodedPushPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC320);
  }
  return result;
}

unint64_t sub_10044A928()
{
  unint64_t result;

  result = qword_1010FC328;
  if (!qword_1010FC328)
  {
    result = swift_getWitnessTable(byte_100E3E8A0, &type metadata for SecureLocationsEncodedPushPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC328);
  }
  return result;
}

unint64_t sub_10044A970()
{
  unint64_t result;

  result = qword_1010FC330;
  if (!qword_1010FC330)
  {
    result = swift_getWitnessTable(byte_100E3E8C8, &type metadata for SecureLocationsEncodedPushPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC330);
  }
  return result;
}

unint64_t sub_10044A9B8()
{
  unint64_t result;

  result = qword_1010FC338;
  if (!qword_1010FC338)
  {
    result = swift_getWitnessTable(aA_29, &type metadata for SecureLocationsCachedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC338);
  }
  return result;
}

unint64_t sub_10044AA00()
{
  unint64_t result;

  result = qword_1010FC340;
  if (!qword_1010FC340)
  {
    result = swift_getWitnessTable(aI_18, &type metadata for SecureLocationsCachedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC340);
  }
  return result;
}

unint64_t sub_10044AA48()
{
  unint64_t result;

  result = qword_1010FC348;
  if (!qword_1010FC348)
  {
    result = swift_getWitnessTable(byte_100E3E730, &type metadata for SecureLocationsEncodedInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC348);
  }
  return result;
}

unint64_t sub_10044AA90()
{
  unint64_t result;

  result = qword_1010FC350;
  if (!qword_1010FC350)
  {
    result = swift_getWitnessTable(byte_100E3E758, &type metadata for SecureLocationsEncodedInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC350);
  }
  return result;
}

unint64_t sub_10044AAD4()
{
  unint64_t result;

  result = qword_1010FC358;
  if (!qword_1010FC358)
  {
    result = swift_getWitnessTable(aQ_19, &type metadata for SecureLocationsPayloadFormat);
    atomic_store(result, (unint64_t *)&qword_1010FC358);
  }
  return result;
}

uint64_t sub_10044AB30@<X0>(char *a1@<X8>)
{
  return sub_100143FA8(a1);
}

uint64_t sub_10044AB44@<X0>(_QWORD *a1@<X8>)
{
  return sub_100449474(a1);
}

uint64_t sub_10044AB58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6F18);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B6F18);
  if (qword_1010E9C10 != -1)
    swift_once(&qword_1010E9C10, sub_10044B994);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B6F30);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10044ABE8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[4] = v0;
  v2 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v1[5] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[6] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[7] = swift_task_alloc(v4);
  v1[8] = swift_task_alloc(v4);
  return swift_task_switch(sub_10044AC58, v0, 0);
}

uint64_t sub_10044AC58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;

  v3 = *(_QWORD *)(v1 + 56);
  v2 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  static SystemInfo.lockState.getter(a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v3, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v4);
  v6 = sub_100006C64((unint64_t *)&unk_1010F4700, 255, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)(v1 + 16), v4, v6);
  dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)(v1 + 24), v4, v6);
  v8 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v9(v3, v4);
  v9(v2, v4);
  if (v8 == v7)
  {
    sub_10044AE08();
  }
  else
  {
    if (qword_1010E9C08 != -1)
      swift_once(&qword_1010E9C08, sub_10044AB58);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B6F18);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Device is already unlocked -- not registering", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

  }
  v15 = *(_QWORD *)(v1 + 56);
  swift_task_dealloc(*(_QWORD *)(v1 + 64));
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_10044AE08()
{
  int *v0;
  int *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD v11[6];

  v1 = v0;
  v2 = *(_QWORD *)v0;
  sub_10001F6FC();
  v3 = static OS_dispatch_queue.main.getter();
  v4 = swift_allocObject(&unk_101077780, 32, 7);
  *(_QWORD *)(v4 + 16) = v0;
  *(_QWORD *)(v4 + 24) = v2;
  v11[4] = sub_10044BA38;
  v11[5] = v4;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_10067CEE4;
  v11[3] = &unk_101077798;
  v5 = _Block_copy(v11);
  swift_retain();
  swift_release();
  v1 += 34;
  swift_beginAccess(v1, v11, 33, 0);
  notify_register_dispatch("com.apple.mobile.keybagd.lock_status", v1, v3, v5);
  swift_endAccess(v11);
  _Block_release(v5);

  if (qword_1010E9C08 != -1)
    swift_once(&qword_1010E9C08, sub_10044AB58);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B6F18);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Registered handler for kMobileKeyBagLockStatusNotificationID", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

}

uint64_t sub_10044AFAC(int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;

  if (qword_1010E9C08 != -1)
    swift_once(&qword_1010E9C08, sub_10044AB58);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6F18);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Received kMobileKeyBagLockStatusNotificationID notification", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  type metadata accessor for Transaction(0);
  v9 = swift_allocObject(&unk_1010777D0, 28, 7);
  *(_QWORD *)(v9 + 16) = a2;
  *(_DWORD *)(v9 + 24) = a1;
  swift_retain();
  static Transaction.asyncTask(name:block:)("FirstUnlock", 11, 2, &unk_1010FC490, v9);
  return swift_release();
}

uint64_t sub_10044B0E0(uint64_t a1, int a2)
{
  uint64_t v2;

  *(_DWORD *)(v2 + 24) = a2;
  *(_QWORD *)(v2 + 16) = a1;
  return swift_task_switch(sub_10044B100, a1, 0);
}

uint64_t sub_10044B100()
{
  uint64_t v0;

  sub_10044B134(*(_DWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10044B134(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  _BYTE v38[24];
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[24];

  v2 = v1;
  v4 = sub_10001A9A8(&qword_101108DF0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v38[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v38[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = __chkstk_darwin(v10);
  v15 = &v38[-v14 - 8];
  static SystemInfo.lockState.getter(v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  v16 = sub_100006C64((unint64_t *)&qword_1010F46E0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v17 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v12, v8, v16);
  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v12, v8);
  v18(v15, v8);
  if ((v17 & 1) != 0)
  {
    if (qword_1010E9C08 != -1)
      swift_once(&qword_1010E9C08, sub_10044AB58);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_10001A9E8(v19, (uint64_t)qword_1011B6F18);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "still locked -- keep listening", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

  }
  else
  {
    notify_cancel(a1);
    swift_beginAccess(v2 + 136, v41, 1, 0);
    *(_DWORD *)(v2 + 136) = 0;
    if (qword_1010E9C08 != -1)
      swift_once(&qword_1010E9C08, sub_10044AB58);
    v24 = type metadata accessor for Logger(0);
    sub_10001A9E8(v24, (uint64_t)qword_1011B6F18);
    v25 = swift_retain();
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v28 = 134217984;
      swift_beginAccess(v2 + 128, v38, 0, 0);
      v39 = *(_QWORD *)(*(_QWORD *)(v2 + 128) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v28 + 4, v28 + 12);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Notifying %ld clients of first unlock", v28, 0xCu);
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {

      swift_release();
    }
    v29 = (_QWORD *)(v2 + 128);
    swift_beginAccess(v2 + 128, &v39, 1, 0);
    v30 = *(_QWORD *)(v2 + 128);
    v31 = *(_QWORD *)(v30 + 16);
    if (v31)
    {
      v32 = v30 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      v33 = *(_QWORD *)(v5 + 72);
      v34 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
      v35 = swift_bridgeObjectRetain(v30);
      do
      {
        v36 = v34(v7, v32, v4, v35);
        CheckedContinuation.resume(returning:)(v36, v4);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        v32 += v33;
        --v31;
      }
      while (v31);
      swift_bridgeObjectRelease();
    }
    *v29 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10044B510()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[4] = v0;
  v2 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v1[5] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[6] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[7] = swift_task_alloc(v4);
  v1[8] = swift_task_alloc(v4);
  return swift_task_switch(sub_10044B580, v0, 0);
}

uint64_t sub_10044B580(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v3 = *(_QWORD *)(v1 + 56);
  v2 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  static SystemInfo.lockState.getter(a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v3, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v4);
  v6 = sub_100006C64((unint64_t *)&unk_1010F4700, 255, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)(v1 + 16), v4, v6);
  dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)(v1 + 24), v4, v6);
  v8 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v9(v3, v4);
  v9(v2, v4);
  if (v8 == v7)
  {
    v11 = *(_QWORD *)(v1 + 32);
    v12 = sub_100006C64(&qword_1010FC480, v10, (uint64_t (*)(uint64_t))type metadata accessor for FirstUnlockService, (uint64_t)&unk_100E3EB40);
    v13 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v1 + 72) = v13;
    *v13 = v1;
    v13[1] = sub_10044B714;
    return withCheckedContinuation<A>(isolation:function:_:)(v13, v11, v12, 0xD000000000000014, 0x8000000100ED69F0, sub_10044B98C, *(_QWORD *)(v1 + 32), (char *)&type metadata for () + 8);
  }
  else
  {
    v15 = *(_QWORD *)(v1 + 56);
    swift_task_dealloc(*(_QWORD *)(v1 + 64));
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10044B714()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  return swift_task_switch(sub_10044B76C, v1, 0);
}

uint64_t sub_10044B76C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10044B7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t *v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  _BYTE v15[24];

  v4 = sub_10001A9A8(&qword_101108DF0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = (unint64_t *)(a2 + 128);
  swift_beginAccess(a2 + 128, v15, 33, 0);
  v9 = *(_QWORD *)(a2 + 128);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
  *(_QWORD *)(a2 + 128) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v9 = sub_1007C98B4(0, *(_QWORD *)(v9 + 16) + 1, 1, v9);
    *v8 = v9;
  }
  v12 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    v9 = sub_1007C98B4(v11 > 1, v12 + 1, 1, v9);
    *v8 = v9;
  }
  *(_QWORD *)(v9 + 16) = v12 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))(v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v12, v7, v4);
  return swift_endAccess(v15);
}

uint64_t type metadata accessor for FirstUnlockService()
{
  return objc_opt_self(_TtC12searchpartyd18FirstUnlockService);
}

uint64_t sub_10044B90C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1010FC38C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  return sub_10044ABE8();
}

uint64_t sub_10044B950(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_1010FC480, a2, (uint64_t (*)(uint64_t))type metadata accessor for FirstUnlockService, (uint64_t)&unk_100E3EB40);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10044B98C(uint64_t a1)
{
  uint64_t v1;

  return sub_10044B7A4(a1, v1);
}

uint64_t sub_10044B994()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6F30);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6F30);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000012, 0x8000000100E3EAE0);
}

uint64_t sub_10044BA14()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10044BA38(int a1)
{
  uint64_t v1;

  return sub_10044AFAC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10044BA40()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 28, 7);
}

uint64_t sub_10044BA64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_DWORD *)(v0 + 24);
  v4 = swift_task_alloc(dword_1010FC48C);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_100004C28;
  *(_DWORD *)(v4 + 24) = v3;
  *(_QWORD *)(v4 + 16) = v2;
  return swift_task_switch(sub_10044B100, v2, 0);
}

uint64_t storeEnumTagSinglePayload for BACharacteristicIdentifier.UnauthorizedAirTag(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10044BB18 + 4 * byte_100E3EB75[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10044BB4C + 4 * byte_100E3EB70[v4]))();
}

uint64_t sub_10044BB4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10044BB54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10044BB5CLL);
  return result;
}

uint64_t sub_10044BB68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10044BB70);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10044BB74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10044BB7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BACharacteristicIdentifier.UnauthorizedAirTag()
{
  return &type metadata for BACharacteristicIdentifier.UnauthorizedAirTag;
}

uint64_t storeEnumTagSinglePayload for BACharacteristicIdentifier.FindMy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10044BBE4 + 4 * byte_100E3EB7F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10044BC18 + 4 * byte_100E3EB7A[v4]))();
}

uint64_t sub_10044BC18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10044BC20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10044BC28);
  return result;
}

uint64_t sub_10044BC34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10044BC3CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10044BC40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10044BC48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BACharacteristicIdentifier.FindMy()
{
  return &type metadata for BACharacteristicIdentifier.FindMy;
}

ValueMetadata *type metadata accessor for BACharacteristicIdentifier()
{
  return &type metadata for BACharacteristicIdentifier;
}

uint64_t storeEnumTagSinglePayload for BACharacteristicIdentifier.AccessoryInformation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_10044BCC0 + 4 * byte_100E3EB89[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10044BCF4 + 4 * byte_100E3EB84[v4]))();
}

uint64_t sub_10044BCF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10044BCFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10044BD04);
  return result;
}

uint64_t sub_10044BD10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10044BD18);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_10044BD1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10044BD24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BACharacteristicIdentifier.AccessoryInformation()
{
  return &type metadata for BACharacteristicIdentifier.AccessoryInformation;
}

uint64_t storeEnumTagSinglePayload for BAServiceIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10044BD8C + 4 * byte_100E3EB93[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10044BDC0 + 4 * byte_100E3EB8E[v4]))();
}

uint64_t sub_10044BDC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10044BDC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10044BDD0);
  return result;
}

uint64_t sub_10044BDDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10044BDE4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10044BDE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10044BDF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BAServiceIdentifier()
{
  return &type metadata for BAServiceIdentifier;
}

uint64_t sub_10044BE0C()
{
  return sub_10044BEAC(&qword_1010FC498, &qword_1010FC4A0);
}

void sub_10044BE30(_QWORD *a1@<X8>)
{
  *a1 = &off_10104A7A8;
}

unint64_t sub_10044BE44()
{
  unint64_t result;

  result = qword_1010FC4A8;
  if (!qword_1010FC4A8)
  {
    result = swift_getWitnessTable(aE_18, &type metadata for BAServiceIdentifier);
    atomic_store(result, (unint64_t *)&qword_1010FC4A8);
  }
  return result;
}

uint64_t sub_10044BE88()
{
  return sub_10044BEAC(&qword_1010FC4B0, &qword_1010FC4B8);
}

uint64_t sub_10044BEAC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10001F784(a2);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

void sub_10044BEEC(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = sub_10001A9A8(&qword_1010ED860);
  v3 = __chkstk_darwin(v2);
  v4 = __chkstk_darwin(v3);
  v5 = __chkstk_darwin(v4);
  v6 = __chkstk_darwin(v5);
  v7 = __chkstk_darwin(v6);
  v8 = __chkstk_darwin(v7);
  v9 = __chkstk_darwin(v8);
  v10 = __chkstk_darwin(v9);
  __chkstk_darwin(v10);
  __asm { BR              X10 }
}

uint64_t sub_10044C048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  ((void (*)(unint64_t, unint64_t))UUID.init(uuidString:))(0xD000000000000024, 0x8000000100ECBE80);
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v0, 1, v2) == 1)
  {
    __break(1u);
    JUMPOUT(0x10044C3B0);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v1 - 88), v0, v2);
}

void sub_10044C3F4()
{
  char *v0;

  sub_10044BEEC(*v0);
}

void sub_10044C3FC(_QWORD *a1@<X8>)
{
  *a1 = &off_10104A6E0;
}

unint64_t sub_10044C410()
{
  unint64_t result;

  result = qword_1010FC4C0;
  if (!qword_1010FC4C0)
  {
    result = swift_getWitnessTable("ō#", &type metadata for BACharacteristicIdentifier.AccessoryInformation);
    atomic_store(result, (unint64_t *)&qword_1010FC4C0);
  }
  return result;
}

unint64_t sub_10044C458()
{
  unint64_t result;

  result = qword_1010FC4C8;
  if (!qword_1010FC4C8)
  {
    result = swift_getWitnessTable(asc_100E3ED94, &type metadata for BACharacteristicIdentifier.FindMy);
    atomic_store(result, (unint64_t *)&qword_1010FC4C8);
  }
  return result;
}

void sub_10044C49C(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_10001A9A8(&qword_1010ED860);
  v3 = __chkstk_darwin(v2);
  v4 = __chkstk_darwin(v3);
  v5 = __chkstk_darwin(v4);
  v6 = __chkstk_darwin(v5);
  __chkstk_darwin(v6);
  __asm { BR              X10 }
}

uint64_t sub_10044C580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  ((void (*)(unint64_t, unint64_t))UUID.init(uuidString:))(0xD000000000000024, 0x8000000100EC6420);
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    __break(1u);
    JUMPOUT(0x10044C780);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v1, v2);
}

unint64_t sub_10044C79C()
{
  unint64_t result;

  result = qword_1010FC4D0;
  if (!qword_1010FC4D0)
  {
    result = swift_getWitnessTable(byte_100E3EDFC, &type metadata for BACharacteristicIdentifier.UnauthorizedAirTag);
    atomic_store(result, (unint64_t *)&qword_1010FC4D0);
  }
  return result;
}

void sub_10044C7E0()
{
  char *v0;

  sub_10044C49C(*v0);
}

uint64_t sub_10044C7E8@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_10001A9A8(&qword_1010ED860);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v15 - v8;
  if ((a1 & 1) == 0)
  {
    UUID.init(uuidString:)(0xD000000000000024, 0x8000000100ED6B50);
    v10 = type metadata accessor for UUID(0);
    v11 = *(_QWORD *)(v10 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
    if ((_DWORD)result != 1)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2, v9, v10);
    __break(1u);
    goto LABEL_8;
  }
  UUID.init(uuidString:)(0xD000000000000024, 0x8000000100ED6B20);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v13);
  if ((_DWORD)result == 1)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a2, v7, v13);
}

uint64_t sub_10044C934@<X0>(uint64_t a1@<X8>)
{
  char *v1;

  return sub_10044C7E8(*v1, a1);
}

_OWORD *sub_10044C93C(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (_OWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 8);
    if (v7 >> 60 == 15)
    {
      *a1 = *(_OWORD *)a2;
    }
    else
    {
      v9 = *(_QWORD *)a2;
      sub_10001BBBC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      *(_QWORD *)v4 = v9;
      *((_QWORD *)v4 + 1) = v7;
    }
    v10 = (uint64_t *)(a2 + 16);
    v11 = *(_QWORD *)(a2 + 24);
    if (v11 >> 60 == 15)
    {
      v4[1] = *(_OWORD *)v10;
    }
    else
    {
      v12 = *v10;
      sub_10001BBBC(*v10, *(_QWORD *)(a2 + 24));
      *((_QWORD *)v4 + 2) = v12;
      *((_QWORD *)v4 + 3) = v11;
    }
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v4 + v13;
    v15 = (const void *)(a2 + v13);
    v16 = type metadata accessor for UUID(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t sub_10044CA8C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = a1[1];
  if (v4 >> 60 != 15)
    sub_10001BC14(*a1, v4);
  v5 = a1[3];
  if (v5 >> 60 != 15)
    sub_10001BC14(a1[2], v5);
  v6 = (char *)a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

uint64_t sub_10044CB30(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v7 = *a2;
    sub_10001BBBC(*a2, a2[1]);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v6;
  }
  v8 = a2 + 2;
  v9 = a2[3];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    sub_10001BBBC(*v8, a2[3]);
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v9;
  }
  v11 = *(int *)(a3 + 24);
  v12 = (void *)(a1 + v11);
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t *sub_10044CC54(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;

  v6 = *(_QWORD *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      v7 = *(_QWORD *)a2;
      sub_10001BBBC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)a2;
  sub_10001BBBC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v9 = *a1;
  v10 = a1[1];
  *a1 = v8;
  a1[1] = v6;
  sub_10001BC14(v9, v10);
LABEL_8:
  v11 = (uint64_t *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  if ((unint64_t)a1[3] >> 60 == 15)
  {
    if (v12 >> 60 != 15)
    {
      v13 = *v11;
      sub_10001BBBC(*v11, *(_QWORD *)(a2 + 24));
      a1[2] = v13;
      a1[3] = v12;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v12 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)(a1 + 2));
LABEL_13:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v11;
    goto LABEL_15;
  }
  v14 = *v11;
  sub_10001BBBC(*v11, *(_QWORD *)(a2 + 24));
  v15 = a1[2];
  v16 = a1[3];
  a1[2] = v14;
  a1[3] = v12;
  sub_10001BC14(v15, v16);
LABEL_15:
  v17 = *(int *)(a3 + 24);
  v18 = (char *)a1 + v17;
  v19 = (char *)(a2 + v17);
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v18, v19, v20);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_20;
  }
  if (v24)
  {
LABEL_20:
    v25 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

_OWORD *sub_10044CE4C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_10044CF08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6 >> 60 == 15)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_1000DC964(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  sub_10001BC14(v8, v6);
LABEL_6:
  v9 = (_OWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  if (v10 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 16) = *v9;
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(a2 + 24);
  if (v11 >> 60 == 15)
  {
    sub_1000DC964(a1 + 16);
    goto LABEL_9;
  }
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)v9;
  *(_QWORD *)(a1 + 24) = v11;
  sub_10001BC14(v12, v10);
LABEL_11:
  v13 = *(int *)(a3 + 24);
  v14 = (void *)(a1 + v13);
  v15 = (void *)(a2 + v13);
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v14, v15, v16);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_16;
  }
  if (v20)
  {
LABEL_16:
    v21 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v14, v15, v16);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_10044D0A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10044D0AC);
}

uint64_t sub_10044D0AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 11)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    v5 = ((4 * (_DWORD)v4) & 0xC) == 0;
    v6 = ((4 * v4) & 0xC | (v4 >> 2)) ^ 0xF;
    if (v5)
      return 0;
    else
      return v6;
  }
  else
  {
    v10 = sub_10001A9A8(&qword_1010ED860);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v10);
  }
}

uint64_t sub_10044D130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10044D13C);
}

char *sub_10044D13C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 11)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  }
  else
  {
    v7 = sub_10001A9A8(&qword_1010ED860);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AirPodsSWPairingLockAckResponse(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FC530;
  if (!qword_1010FC530)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirPodsSWPairingLockAckResponse);
  return result;
}

void sub_10044D1F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_100E3EEA0;
  v4[1] = &unk_100E3EEA0;
  sub_100252558(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_10044D26C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  char v29;

  v25 = a2;
  v4 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10001A9A8(&qword_1010FC570);
  v7 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AirPodsSWPairingLockAckResponse(0);
  __chkstk_darwin(v10);
  v12 = (_OWORD *)((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = a1[3];
  v14 = a1[4];
  v27 = a1;
  sub_10001AA44(a1, v13);
  v15 = sub_10044D614();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AirPodsSWPairingLockAckResponse.CodingKeys, &type metadata for AirPodsSWPairingLockAckResponse.CodingKeys, v15, v13, v14);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  v23 = v6;
  v24 = v7;
  v29 = 0;
  v16 = sub_100036994();
  v17 = v26;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v29, v26, &type metadata for Data, v16);
  *v12 = v28;
  v29 = 1;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v29, v17, &type metadata for Data, v16);
  v12[1] = v28;
  v18 = type metadata accessor for UUID(0);
  LOBYTE(v28) = 2;
  v19 = sub_100252A08();
  v20 = (uint64_t)v23;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v18, &v28, v17, v18, v19);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v17);
  sub_1001C0884(v20, (uint64_t)v12 + *(int *)(v10 + 24));
  sub_10044D658((uint64_t)v12, v25);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  return sub_10044D69C((uint64_t)v12);
}

uint64_t sub_10044D520()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6169726553746C61;
  if (*v0 != 1)
    v1 = 0x6449616E6D66;
  if (*v0)
    return v1;
  else
    return 0x754E6C6169726573;
}

uint64_t sub_10044D58C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10044D87C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10044D5B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10044D614();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10044D5D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10044D614();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10044D600@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10044D26C(a1, a2);
}

unint64_t sub_10044D614()
{
  unint64_t result;

  result = qword_1010FC578;
  if (!qword_1010FC578)
  {
    result = swift_getWitnessTable(aE_19, &type metadata for AirPodsSWPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC578);
  }
  return result;
}

uint64_t sub_10044D658(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AirPodsSWPairingLockAckResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10044D69C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AirPodsSWPairingLockAckResponse(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for AirPodsSWPairingLockAckResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10044D724 + 4 * byte_100E3EE75[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10044D758 + 4 * byte_100E3EE70[v4]))();
}

uint64_t sub_10044D758(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10044D760(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10044D768);
  return result;
}

uint64_t sub_10044D774(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10044D77CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10044D780(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10044D788(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingLockAckResponse.CodingKeys()
{
  return &type metadata for AirPodsSWPairingLockAckResponse.CodingKeys;
}

unint64_t sub_10044D7A8()
{
  unint64_t result;

  result = qword_1010FC580;
  if (!qword_1010FC580)
  {
    result = swift_getWitnessTable(asc_100E3EF7C, &type metadata for AirPodsSWPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC580);
  }
  return result;
}

unint64_t sub_10044D7F0()
{
  unint64_t result;

  result = qword_1010FC588;
  if (!qword_1010FC588)
  {
    result = swift_getWitnessTable("Ō#", &type metadata for AirPodsSWPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC588);
  }
  return result;
}

unint64_t sub_10044D838()
{
  unint64_t result;

  result = qword_1010FC590;
  if (!qword_1010FC590)
  {
    result = swift_getWitnessTable(byte_100E3EF14, &type metadata for AirPodsSWPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FC590);
  }
  return result;
}

uint64_t sub_10044D87C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v5 = 0xEC0000007265626DLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6169726553746C61 && a2 == 0xEF7265626D754E6CLL)
  {
    v7 = 0xEF7265626D754E6CLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6169726553746C61, 0xEF7265626D754E6CLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6449616E6D66 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6449616E6D66, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10044DA04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];

  v2 = type metadata accessor for SharingCircleSecret(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OwnerSharingCircle(0);
  v11 = v0 + *(int *)(v10 + 20);
  v27 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v11, v6);
  v12 = *(_QWORD *)(v0 + *(int *)(v10 + 32));
  v29[2] = v9;
  swift_bridgeObjectRetain(v12);
  v13 = sub_100CA4E34((void (*)(char *, uint64_t *))sub_10044DD08, v29, v12);
  if (v1)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v6);
  }
  else
  {
    v14 = v13;
    v26 = v5;
    swift_bridgeObjectRelease();
    if (qword_1010E9A08 != -1)
      swift_once(&qword_1010E9A08, sub_1001EB1EC);
    v15 = (void (*)(char *, uint64_t))sub_10001A9E8(v6, (uint64_t)qword_1011B6A78);
    sub_1009ABB50(v15, (void (*)(_QWORD, _QWORD))v9, (uint64_t)v26);
    v16 = sub_10001A9A8(&qword_1010ED350);
    v17 = *(_QWORD *)(v3 + 72);
    v18 = *(unsigned __int8 *)(v3 + 80);
    v19 = (v18 + 32) & ~v18;
    v20 = swift_allocObject(v16, v19 + 4 * v17, v18 | 7);
    *(_OWORD *)(v20 + 16) = xmmword_100E26E00;
    v21 = v20 + v19;
    sub_1009ABE88((uint64_t)v9, v21);
    sub_1009ABEA0((uint64_t)v9, v21 + v17);
    sub_1009AC10C((uint64_t)v9, v21 + 2 * v17);
    v23 = v21 + 3 * v17;
    v24 = (uint64_t)v26;
    sub_10044DD74((uint64_t)v26, v23);
    v28 = v14;
    sub_1003028BC(v20);
    v0 = v28;
    sub_10044DD38(v24);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v6);
  }
  return v0;
}

uint64_t sub_10044DD08@<X0>(void (*a1)(char *, uint64_t)@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = sub_1009ABB50(a1, *(void (**)(_QWORD, _QWORD))(v3 + 16), a3);
  if (v4)
    *a2 = v4;
  return result;
}

uint64_t sub_10044DD38(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SharingCircleSecret(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10044DD74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SharingCircleSecret(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10044DDB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  uint64_t v28;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for AnyCancellable(0);
    v5 = sub_100006204((unint64_t *)&unk_101110200, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    v6 = Set.Iterator.init(_cocoa:)(v27, v3, v4, v5);
    v1 = v27[0];
    v25 = v27[1];
    v7 = v27[2];
    v8 = v27[3];
    v9 = v27[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v25 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v13 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v9)
    {
      v14 = (v9 - 1) & v9;
      v15 = __clz(__rbit64(v9)) | (v8 << 6);
      v16 = v8;
      goto LABEL_32;
    }
    v21 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (v21 >= v13)
      goto LABEL_35;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    v16 = v8 + 1;
    if (!v22)
    {
      v16 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_35;
      v22 = *(_QWORD *)(v25 + 8 * v16);
      if (!v22)
      {
        v16 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_35;
        v22 = *(_QWORD *)(v25 + 8 * v16);
        if (!v22)
        {
          v16 = v8 + 4;
          if (v8 + 4 >= v13)
            goto LABEL_35;
          v22 = *(_QWORD *)(v25 + 8 * v16);
          if (!v22)
          {
            v16 = v8 + 5;
            if (v8 + 5 >= v13)
              goto LABEL_35;
            v22 = *(_QWORD *)(v25 + 8 * v16);
            if (!v22)
            {
              v23 = v8 + 6;
              while (v13 != v23)
              {
                v22 = *(_QWORD *)(v25 + 8 * v23++);
                if (v22)
                {
                  v16 = v23 - 1;
                  goto LABEL_31;
                }
              }
LABEL_35:
              sub_10007CC38(v1);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v14 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
    v24 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    swift_retain();
    if (!v24)
      goto LABEL_35;
    while (1)
    {
      AnyCancellable.cancel()();
      v6 = (_QWORD *)swift_release();
      v8 = v16;
      v9 = v14;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v17 = __CocoaSet.Iterator.next()(v6);
      if (v17)
      {
        v18 = v17;
        v26 = v17;
        v19 = type metadata accessor for AnyCancellable(0);
        swift_unknownObjectRetain(v18);
        swift_dynamicCast(&v28, &v26, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
        v20 = v28;
        swift_unknownObjectRelease(v18);
        v16 = v8;
        v14 = v9;
        if (v20)
          continue;
      }
      goto LABEL_35;
    }
  }
  __break(1u);
}

uint64_t sub_10044E058()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6F48);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6F48);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x6D6F4372656E776FLL, 0xEC000000646E616DLL);
}

uint64_t sub_10044E0D4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[3] = v0;
  v2 = sub_10001A9A8((uint64_t *)&unk_101116060);
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for CentralManager.Options(0);
  v1[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[6] = v4;
  v1[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10044E158, v0, 0);
}

uint64_t sub_10044E158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 112);
  v2 = *(_QWORD *)(v0 + 56);
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 32);
    swift_retain();
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 40);
    v6 = *(_QWORD *)(v0 + 48);
    v7 = *(_QWORD *)(v0 + 32);
    v8 = sub_10001A9A8((uint64_t *)&unk_101117280);
    v9 = swift_allocObject(v8, ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ 3 * *(_QWORD *)(v6 + 72), *(unsigned __int8 *)(v6 + 80) | 7);
    *(_OWORD *)(v9 + 16) = xmmword_100E221E0;
    v10 = static CentralManager.Options.enableFindMy.getter(v9);
    v11 = static CentralManager.Options.receiveSystemEvents.getter(v10);
    static CentralManager.Options.receiveIncomingObjectDiscoveryData.getter(v11);
    *(_QWORD *)(v0 + 16) = v9;
    v12 = sub_100006204((unint64_t *)&unk_101116070, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager.Options, (uint64_t)&protocol conformance descriptor for CentralManager.Options);
    v13 = sub_10001A9A8((uint64_t *)&unk_101117290);
    v14 = sub_1000193A4((unint64_t *)&unk_101116080, (uint64_t *)&unk_101117290, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 16, v13, v14, v5, v12);
    type metadata accessor for CentralManager(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v2, v5);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v5);
    v15 = (_QWORD *)swift_task_alloc(async function pointer to CentralManager.__allocating_init(options:)[1]);
    *(_QWORD *)(v0 + 64) = v15;
    *v15 = v0;
    v15[1] = sub_10044E324;
    return CentralManager.__allocating_init(options:)(*(_QWORD *)(v0 + 32));
  }
}

uint64_t sub_10044E324(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_QWORD *)(*(_QWORD *)v1 + 72) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10044E384, v3, 0);
}

uint64_t sub_10044E384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 24);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
  v3 = *(_QWORD *)(v2 + 112);
  *(_QWORD *)(v2 + 112) = v1;
  swift_retain(v1);
  swift_release(v3);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t type metadata accessor for OwnerCommandManagerAccessController()
{
  return objc_opt_self(_TtC12searchpartydP33_1176F63AB7943FF661C3FB24903269B835OwnerCommandManagerAccessController);
}

uint64_t sub_10044E424()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  sub_1000234D8(v0, qword_1010FC598);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1010FC598);
  return static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v1, 60.0);
}

uint64_t sub_10044E474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1010FC5B0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1010FC5B0);
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B6F48);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

void sub_10044E504()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v1 = type metadata accessor for UUID(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for OwnerCommandManager.Error(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(v0, (uint64_t)v4, v5);
  v6 = (char *)sub_10044E5DC + 4 * byte_100E3F010[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_10044E5DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
  *(_QWORD *)(v4 - 64) = 0;
  *(_QWORD *)(v4 - 56) = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 - 64) = 0xD00000000000001CLL;
  *(_QWORD *)(v4 - 56) = 0x8000000100ED6D80;
  v5 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v5);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v4 - 64);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  return v7;
}

uint64_t sub_10044E990(uint64_t a1, void *a2, void *a3, objc_class *a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  id v33;
  char v34;
  uint8_t *v35;
  uint8_t *v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  id v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  Class isa;
  char *v83;
  char *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  __n128 v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  NSObject *v105;
  os_log_type_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  __n128 v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char v126;
  uint64_t v127;
  Class v128;
  char *v129;
  uint64_t v130;
  NSObject *v131;
  int v132;
  uint64_t v133;
  objc_class *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  id v146;
  id v147;
  _QWORD *v148;
  __n128 v149;
  uint64_t v150;
  unint64_t v151;
  char v152;
  uint8_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint8_t *v156;
  uint64_t v157;
  NSObject *v158;
  int v159;
  uint64_t v160;
  objc_class *v161;
  uint64_t v162;
  uint64_t v163;
  Class v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  char *v171;
  id v172;
  id v173;
  char *v174;
  NSObject *v175;
  os_log_type_t v176;
  int v177;
  uint8_t *v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  void (*v185)(uint64_t, uint64_t);
  _QWORD *v186;
  uint8_t *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  id v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  char *v204;
  char *v205;
  void (*v206)(char *, uint64_t);
  uint64_t v207;
  uint64_t v209;
  NSObject *v210;
  os_log_type_t v211;
  uint8_t *v212;
  id v213;
  uint64_t v214;
  void (*v215)(uint64_t, uint64_t);
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  char v219;
  id v220;
  uint64_t v221;
  uint64_t v222;
  id v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t *v230;
  char *v231;
  char *v232;
  uint64_t v233;
  id v234;
  char *v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  char *v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  Class v248;
  uint8_t *v249;
  uint8_t *v250;
  char *v251;
  _QWORD *v252;
  id v253;
  os_log_t v254;
  id v255;
  uint64_t v256;
  char v257[24];
  char v258[8];
  char v259[8];
  char v260[8];
  _QWORD *v261;
  uint64_t aBlock;
  __int128 v263;
  __int128 v264;
  uint64_t v265;
  uint64_t v266;
  char v267[8];
  uint64_t v268;
  char v269[8];

  v248 = a4;
  v253 = a3;
  v255 = a2;
  v238 = type metadata accessor for DispatchTime(0);
  v236 = *(_QWORD *)(v238 - 8);
  v6 = __chkstk_darwin(v238);
  v235 = (char *)&v228 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v237 = (char *)&v228 - v8;
  v246 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v246);
  v247 = (char *)&v228 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v256 = type metadata accessor for UUID(0);
  v254 = *(os_log_t *)(v256 - 8);
  v10 = __chkstk_darwin(v256);
  v251 = (char *)&v228 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v244 = (char *)&v228 - v13;
  v14 = __chkstk_darwin(v12);
  v231 = (char *)&v228 - v15;
  v16 = __chkstk_darwin(v14);
  v232 = (char *)&v228 - v17;
  v18 = __chkstk_darwin(v16);
  v240 = (uint64_t *)((char *)&v228 - v19);
  v20 = __chkstk_darwin(v18);
  v233 = (uint64_t)&v228 - v21;
  v22 = __chkstk_darwin(v20);
  v239 = (char *)&v228 - v23;
  __chkstk_darwin(v22);
  v25 = (char *)&v228 - v24;
  v245 = type metadata accessor for AccessoryCommand(0);
  __chkstk_darwin(v245);
  v27 = (char *)&v228 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for DispatchPredicate(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (uint64_t *)((char *)&v228 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = (void *)v4[9];
  *v31 = v32;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v29 + 104))(v31, enum case for DispatchPredicate.onQueue(_:), v28);
  v33 = v32;
  v34 = _dispatchPreconditionTest(_:)(v31);
  (*(void (**)(_QWORD *, uint64_t))(v29 + 8))(v31, v28);
  if ((v34 & 1) != 0)
  {
    if (qword_1010E9C28 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010E9C28, sub_10044E474);
LABEL_3:
  v241 = type metadata accessor for Logger(0);
  v35 = (uint8_t *)sub_10001A9E8(v241, (uint64_t)qword_1010FC5B0);
  v243 = a1;
  sub_10005972C(a1, (uint64_t)v27, type metadata accessor for AccessoryCommand);
  v36 = (uint8_t *)v253;
  v250 = v35;
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  v39 = os_log_type_enabled(v37, v38);
  v252 = v4;
  v253 = v25;
  v234 = v33;
  if (v39)
  {
    v40 = swift_slowAlloc(22, -1);
    v242 = swift_slowAlloc(64, -1);
    aBlock = v242;
    *(_DWORD *)v40 = 136446466;
    v230 = (uint64_t *)(v40 + 4);
    v41 = objc_msgSend(*(id *)&v36[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);

    v42 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v43 = v25;
    v44 = v256;
    v45 = dispatch thunk of CustomStringConvertible.description.getter(v256, v42);
    v47 = v46;
    ((void (*)(char *, uint64_t))v254[1].isa)(v43, v44);
    v268 = sub_100016940(v45, v47, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, v269, v230, v40 + 12);
    swift_bridgeObjectRelease();

    *(_WORD *)(v40 + 12) = 2082;
    v48 = dispatch thunk of CustomStringConvertible.description.getter(v44, v42);
    v268 = sub_100016940(v48, v49, &aBlock);
    v50 = v252;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, v269, v40 + 14, v40 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v27, type metadata accessor for AccessoryCommand);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Cleaning up for peripheral %{public}s CommandId %{public}s", (uint8_t *)v40, 0x16u);
    v51 = v242;
    swift_arrayDestroy(v242, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {

    sub_1000126B0((uint64_t)v27, type metadata accessor for AccessoryCommand);
    v50 = v4;
  }
  v50[12] = 0;
  v52 = swift_release();
  if (v248)
  {
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1000F9D48, v248, *((_QWORD *)v248 + 2), &type metadata for () + 1, &type metadata for () + 1);
    aBlock = 12;
    v263 = 0u;
    v264 = 0u;
    LOBYTE(v265) = 11;
    sub_1007C63BC(&aBlock);
    v52 = (uint64_t)sub_1000593D4(&aBlock);
  }
  v53 = v256;
  __chkstk_darwin(v52);
  *(&v228 - 2) = v54;
  *(&v228 - 1) = (uint64_t)v36;
  Lock.callAsFunction<A>(_:)(sub_100471B10);
  v242 = 0;
  v55 = v251;
  v56 = (uint64_t)v255;
  v249 = v36;
  if (!v255)
    goto LABEL_47;
  v57 = *(char **)&v36[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
  swift_retain();
  v58 = v57;
  v59 = objc_msgSend(v57, "identifier");
  v60 = (uint64_t)v239;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v59);

  v230 = v50 + 13;
  v61 = swift_beginAccess(v50 + 13, v260, 0, 0);
  v62 = v50[13];
  if (!*(_QWORD *)(v62 + 16))
    goto LABEL_20;
  swift_bridgeObjectRetain(v50[13]);
  v63 = sub_100003FB0(v60);
  if ((v64 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_20:
    isa = v254[1].isa;
    ((void (*)(uint64_t, uint64_t, __n128))isa)(v60, v53, v61);
    v83 = (char *)v240;
    v84 = v58;
    goto LABEL_35;
  }
  v65 = *(_QWORD *)(*(_QWORD *)(v62 + 56) + 8 * v63);
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRelease();
  v248 = v254[1].isa;
  ((void (*)(uint64_t, uint64_t))v248)(v60, v53);
  v268 = v65;
  sub_100C83280(v56);
  swift_release();
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  sub_10001A9E8(v241, (uint64_t)qword_1011B6F48);
  v66 = v268;
  v67 = v36;
  swift_bridgeObjectRetain_n(v66, 2);
  v68 = v67;
  v69 = Logger.logObject.getter(v68);
  v70 = static os_log_type_t.debug.getter(v69);
  if (os_log_type_enabled(v69, v70))
  {
    v71 = swift_slowAlloc(22, -1);
    v72 = swift_slowAlloc(32, -1);
    aBlock = v72;
    *(_DWORD *)v71 = 136315394;
    v229 = v71 + 4;
    v239 = v58;
    v73 = objc_msgSend(v58, "identifier");
    v74 = v53;
    v75 = v253;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v73);

    v76 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v77 = dispatch thunk of CustomStringConvertible.description.getter(v74, v76);
    v79 = v78;
    ((void (*)(id, uint64_t))v248)(v75, v74);
    v266 = sub_100016940(v77, v79, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v266, v267, v229, v71 + 12);
    swift_bridgeObjectRelease();

    *(_WORD *)(v71 + 12) = 2048;
    if ((v66 & 0xC000000000000001) != 0)
    {
      if (v66 < 0)
        v80 = v66;
      else
        v80 = v66 & 0xFFFFFFFFFFFFFF8;
      v81 = __CocoaSet.count.getter(v80);
    }
    else
    {
      v81 = *(_QWORD *)(v66 + 16);
    }
    v56 = (uint64_t)v255;
    swift_bridgeObjectRelease();
    v266 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v266, v267, v71 + 14, v71 + 22);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v69, v70, "Peripheral %s. commandSubscriptions count %ld", (uint8_t *)v71, 0x16u);
    swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1, -1);
    swift_slowDealloc(v71, -1, -1);

    v50 = v252;
    v53 = v256;
    v36 = v249;
    v84 = v239;
  }
  else
  {
    swift_bridgeObjectRelease_n(v66, 2);

    v56 = (uint64_t)v255;
    v84 = v58;
  }
  v85 = objc_msgSend(v84, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v85);

  swift_beginAccess(&v268, v257, 0, 0);
  v86 = v268;
  isa = v248;
  if ((v268 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(v268 + 16))
      goto LABEL_29;
LABEL_32:
    swift_bridgeObjectRelease();
    swift_beginAccess(v230, &aBlock, 33, 0);
    goto LABEL_33;
  }
  if (v268 < 0)
    v87 = v268;
  else
    v87 = v268 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v268);
  v88 = __CocoaSet.count.getter(v87);
  swift_bridgeObjectRelease();
  if (!v88)
    goto LABEL_32;
LABEL_29:
  v89 = v230;
  swift_beginAccess(v230, &aBlock, 33, 0);
  if (!v86)
  {
LABEL_33:
    v93 = v233;
    sub_100103D10(v233);
    v36 = v249;
    ((void (*)(uint64_t, uint64_t))isa)(v93, v53);
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v89);
  v266 = *v89;
  *v89 = 0x8000000000000000;
  v91 = v86;
  v92 = v233;
  sub_10010CFB8(v91, v233, isUniquelyReferenced_nonNull_native);
  *v89 = v266;
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t))isa)(v92, v53);
LABEL_34:
  swift_endAccess(&aBlock);
  v83 = (char *)v240;
LABEL_35:
  v94 = objc_msgSend(v84, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v94);

  v95 = swift_beginAccess(v50 + 11, v259, 0, 0);
  v96 = (uint64_t)v83;
  v97 = v50[11];
  if (!*(_QWORD *)(v97 + 16))
  {
LABEL_46:
    ((void (*)(uint64_t, uint64_t, __n128))isa)(v96, v53, v95);
    swift_release();
    v55 = v251;
    goto LABEL_47;
  }
  swift_bridgeObjectRetain(v50[11]);
  v98 = sub_100003FB0(v96);
  if ((v99 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  v240 = v50 + 11;
  v239 = v84;
  v100 = *(_QWORD *)(*(_QWORD *)(v97 + 56) + 8 * v98);
  swift_bridgeObjectRetain(v100);
  swift_bridgeObjectRelease();
  v101 = v53;
  v248 = isa;
  ((void (*)(uint64_t, uint64_t))isa)(v96, v53);
  v268 = v100;
  sub_100C83280(v56);
  swift_release();
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  sub_10001A9E8(v241, (uint64_t)qword_1011B6F48);
  v102 = v268;
  v103 = v36;
  swift_bridgeObjectRetain_n(v102, 2);
  v104 = v103;
  v105 = Logger.logObject.getter(v104);
  v106 = static os_log_type_t.debug.getter(v105);
  if (os_log_type_enabled(v105, v106))
  {
    v107 = swift_slowAlloc(22, -1);
    v108 = swift_slowAlloc(32, -1);
    aBlock = v108;
    *(_DWORD *)v107 = 136315394;
    v233 = v107 + 4;
    v109 = objc_msgSend(v239, "identifier");
    v110 = v253;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v109);

    v111 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v112 = v101;
    v113 = dispatch thunk of CustomStringConvertible.description.getter(v101, v111);
    v115 = v114;
    ((void (*)(id, uint64_t))v248)(v110, v112);
    v266 = sub_100016940(v113, v115, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v266, v267, v233, v107 + 12);
    swift_bridgeObjectRelease();

    *(_WORD *)(v107 + 12) = 2048;
    if ((v102 & 0xC000000000000001) != 0)
    {
      if (v102 < 0)
        v116 = v102;
      else
        v116 = v102 & 0xFFFFFFFFFFFFFF8;
      v117 = __CocoaSet.count.getter(v116);
    }
    else
    {
      v117 = *(_QWORD *)(v102 + 16);
    }
    v50 = v252;
    v36 = v249;
    v137 = (uint64_t)v232;
    swift_bridgeObjectRelease();
    v266 = v117;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v266, v267, v107 + 14, v107 + 22);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v105, v106, "Peripheral %s. notifySubscriptions count %ld", (uint8_t *)v107, 0x16u);
    swift_arrayDestroy(v108, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v108, -1, -1);
    swift_slowDealloc(v107, -1, -1);

    v53 = v256;
  }
  else
  {
    swift_bridgeObjectRelease_n(v102, 2);

    v50 = v252;
    v36 = v249;
    v53 = v101;
    v137 = (uint64_t)v232;
  }
  v213 = objc_msgSend(v239, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v213);

  swift_beginAccess(&v268, v258, 0, 0);
  v214 = v268;
  v215 = (void (*)(uint64_t, uint64_t))v248;
  if ((v268 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(v268 + 16))
      goto LABEL_93;
LABEL_96:
    swift_beginAccess(v240, &aBlock, 33, 0);
    goto LABEL_97;
  }
  if (v268 < 0)
    v216 = v268;
  else
    v216 = v268 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v268);
  v217 = __CocoaSet.count.getter(v216);
  swift_bridgeObjectRelease();
  if (!v217)
    goto LABEL_96;
LABEL_93:
  swift_bridgeObjectRetain(v214);
  v218 = v240;
  swift_beginAccess(v240, &aBlock, 33, 0);
  if (v214)
  {
    v219 = swift_isUniquelyReferenced_nonNull_native(*v218);
    v266 = *v218;
    *v218 = 0x8000000000000000;
    sub_10010CFB8(v214, v137, v219);
    *v218 = v266;
    swift_bridgeObjectRelease();
    v215(v137, v53);
    goto LABEL_98;
  }
LABEL_97:
  sub_100103D10(v137);
  v215(v137, v53);
  swift_bridgeObjectRelease();
LABEL_98:
  v55 = v251;
  swift_endAccess(&aBlock);
  v220 = v239;
  if ((v268 & 0xC000000000000001) != 0)
  {
    if (v268 < 0)
      v221 = v268;
    else
      v221 = v268 & 0xFFFFFFFFFFFFFF8;
    v222 = __CocoaSet.count.getter(v221);
  }
  else
  {
    v222 = *(_QWORD *)(v268 + 16);
  }
  swift_release();
  swift_bridgeObjectRelease();
  if (v222)
  {
    v223 = objc_msgSend(v220, "identifier");
    v224 = (uint64_t)v231;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v223);

    v225 = *v230;
    if (*(_QWORD *)(*v230 + 16))
    {
      swift_bridgeObjectRetain(*v230);
      v226 = sub_100003FB0(v224);
      if ((v227 & 1) != 0)
      {
        swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v225 + 56) + 8 * v226));
        swift_bridgeObjectRelease();
        v215(v224, v53);
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    v215(v224, v53);
    swift_bridgeObjectRelease();
  }
LABEL_47:
  v118 = (uint64_t)v55;
  v255 = *(id *)&v36[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
  v119 = objc_msgSend(v255, "identifier");
  v120 = (uint64_t)v244;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v119);

  v248 = (Class)(v50 + 13);
  v121 = swift_beginAccess(v50 + 13, &v268, 0, 0);
  v122 = v50;
  v123 = v50[13];
  v124 = (uint64_t)v253;
  if (!*(_QWORD *)(v123 + 16))
  {
LABEL_56:
    v128 = v254[1].isa;
    ((void (*)(uint64_t, uint64_t, __n128))v128)(v120, v53, v121);
    goto LABEL_62;
  }
  swift_bridgeObjectRetain(v123);
  v125 = sub_100003FB0(v120);
  if ((v126 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_56;
  }
  v127 = *(_QWORD *)(*(_QWORD *)(v123 + 56) + 8 * v125);
  swift_bridgeObjectRetain(v127);
  swift_bridgeObjectRelease();
  v128 = v254[1].isa;
  ((void (*)(uint64_t, uint64_t))v128)(v120, v53);
  v129 = v36;
  swift_bridgeObjectRetain(v127);
  v131 = Logger.logObject.getter(v130);
  v132 = static os_log_type_t.debug.getter(v131);
  if (os_log_type_enabled(v131, (os_log_type_t)v132))
  {
    v133 = swift_slowAlloc(22, -1);
    v244 = (char *)swift_slowAlloc(32, -1);
    aBlock = (uint64_t)v244;
    *(_DWORD *)v133 = 134218242;
    LODWORD(v254) = v132;
    v134 = v128;
    if ((v127 & 0xC000000000000001) != 0)
    {
      if (v127 < 0)
        v135 = v127;
      else
        v135 = v127 & 0xFFFFFFFFFFFFFF8;
      v136 = __CocoaSet.count.getter(v135);
    }
    else
    {
      v136 = *(_QWORD *)(v127 + 16);
    }
    v266 = v136;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v266, v267, v133 + 4, v133 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v133 + 12) = 2080;
    v138 = objc_msgSend(v255, "identifier");
    v139 = (uint64_t)v253;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v138);

    v140 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v141 = dispatch thunk of CustomStringConvertible.description.getter(v256, v140);
    v143 = v142;
    ((void (*)(uint64_t, uint64_t))v134)(v139, v256);
    v266 = sub_100016940(v141, v143, &aBlock);
    v124 = v139;
    v128 = v134;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v266, v267, v133 + 14, v133 + 22);
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v131, (os_log_type_t)v254, "Cancelling command subscriptions[%ld] for peripheral %s", (uint8_t *)v133, 0x16u);
    v144 = v244;
    swift_arrayDestroy(v244, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v144, -1, -1);
    swift_slowDealloc(v133, -1, -1);

    v118 = (uint64_t)v251;
  }
  else
  {
    swift_bridgeObjectRelease();

  }
  v145 = v242;
  sub_10044DDB8(v127);
  v242 = v145;
  swift_bridgeObjectRelease();
  v122 = v252;
  v36 = v249;
  v53 = v256;
LABEL_62:
  v146 = v255;
  v147 = objc_msgSend(v255, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v147);

  v148 = v122 + 11;
  v149 = swift_beginAccess(v122 + 11, &v266, 0, 0);
  v150 = v122[11];
  if (*(_QWORD *)(v150 + 16))
  {
    swift_bridgeObjectRetain(v122[11]);
    v151 = sub_100003FB0(v118);
    if ((v152 & 1) != 0)
    {
      v153 = v36;
      v154 = v53;
      v155 = *(_QWORD *)(*(_QWORD *)(v150 + 56) + 8 * v151);
      swift_bridgeObjectRetain(v155);
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v128)(v118, v154);
      v156 = v153;
      swift_bridgeObjectRetain(v155);
      v158 = Logger.logObject.getter(v157);
      v159 = static os_log_type_t.debug.getter(v158);
      if (os_log_type_enabled(v158, (os_log_type_t)v159))
      {
        v160 = swift_slowAlloc(22, -1);
        v244 = (char *)swift_slowAlloc(32, -1);
        aBlock = (uint64_t)v244;
        *(_DWORD *)v160 = 134218242;
        v254 = v158;
        LODWORD(v251) = v159;
        v161 = v128;
        if ((v155 & 0xC000000000000001) != 0)
        {
          if (v155 < 0)
            v162 = v155;
          else
            v162 = v155 & 0xFFFFFFFFFFFFFF8;
          v163 = __CocoaSet.count.getter(v162);
        }
        else
        {
          v163 = *(_QWORD *)(v155 + 16);
        }
        v261 = (_QWORD *)v163;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &aBlock, v160 + 4, v160 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v160 + 12) = 2080;
        v165 = objc_msgSend(v255, "identifier");
        v166 = (uint64_t)v253;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v165);

        v167 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v168 = dispatch thunk of CustomStringConvertible.description.getter(v256, v167);
        v170 = v169;
        ((void (*)(uint64_t, uint64_t))v161)(v166, v256);
        v261 = (_QWORD *)sub_100016940(v168, v170, &aBlock);
        v124 = v166;
        v128 = v161;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &aBlock, v160 + 14, v160 + 22);
        swift_bridgeObjectRelease();

        v158 = v254;
        _os_log_impl((void *)&_mh_execute_header, v254, (os_log_type_t)v251, "Cancelling notify subscriptions[%ld] for peripheral %s", (uint8_t *)v160, 0x16u);
        v171 = v244;
        swift_arrayDestroy(v244, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v171, -1, -1);
        swift_slowDealloc(v160, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease();

      }
      v164 = v248;
      sub_10044DDB8(v155);
      swift_bridgeObjectRelease();
      v122 = v252;
      v36 = v249;
      v53 = v256;
      v146 = v255;
      goto LABEL_76;
    }
    swift_bridgeObjectRelease();
  }
  ((void (*)(uint64_t, uint64_t, __n128))v128)(v118, v53, v149);
  v164 = v248;
LABEL_76:
  v172 = objc_msgSend(v146, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v172);

  swift_beginAccess(v164, &aBlock, 33, 0);
  sub_100103D10(v124);
  ((void (*)(uint64_t, uint64_t))v128)(v124, v53);
  swift_endAccess(&aBlock);
  swift_bridgeObjectRelease();
  v173 = objc_msgSend(v146, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v173);

  swift_beginAccess(v148, &aBlock, 33, 0);
  sub_100103D10(v124);
  ((void (*)(uint64_t, uint64_t))v128)(v124, v53);
  swift_endAccess(&aBlock);
  swift_bridgeObjectRelease();
  v174 = v36;
  v175 = Logger.logObject.getter(v174);
  v176 = static os_log_type_t.default.getter(v175);
  v177 = v176;
  if (os_log_type_enabled(v175, v176))
  {
    LODWORD(v254) = v177;
    v178 = (uint8_t *)swift_slowAlloc(12, -1);
    v251 = (char *)swift_slowAlloc(32, -1);
    aBlock = (uint64_t)v251;
    v250 = v178;
    *(_DWORD *)v178 = 136446210;
    v249 = v178 + 4;
    v179 = objc_msgSend(v146, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v179);

    v180 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v181 = dispatch thunk of CustomStringConvertible.description.getter(v53, v180);
    v183 = v182;
    v184 = v53;
    v185 = (void (*)(uint64_t, uint64_t))v128;
    ((void (*)(uint64_t, uint64_t))v128)(v124, v184);
    v261 = (_QWORD *)sub_100016940(v181, v183, &aBlock);
    v186 = v252;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v261, &aBlock, v249, v178 + 12);
    swift_bridgeObjectRelease();

    v187 = v250;
    _os_log_impl((void *)&_mh_execute_header, v175, (os_log_type_t)v254, "No more notify subscriptions for peripheral %{public}s. Scheduling disconnection...", v250, 0xCu);
    v188 = v251;
    swift_arrayDestroy(v251, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v188, -1, -1);
    swift_slowDealloc(v187, -1, -1);

    v189 = v243;
  }
  else
  {
    v185 = (void (*)(uint64_t, uint64_t))v128;

    v189 = v243;
    v186 = v122;
  }
  v190 = swift_allocObject(&unk_101077E88, 24, 7);
  swift_weakInit(v190 + 16, v186);
  v191 = swift_allocObject(&unk_1010786D0, 32, 7);
  *(_QWORD *)(v191 + 16) = v190;
  *(_QWORD *)(v191 + 24) = v174;
  *((_QWORD *)&v264 + 1) = sub_100471B2C;
  v265 = v191;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  *(_QWORD *)&v263 = 1107296256;
  *((_QWORD *)&v263 + 1) = sub_100016FB8;
  *(_QWORD *)&v264 = &unk_1010786E8;
  v192 = _Block_copy(&aBlock);
  v261 = _swiftEmptyArrayStorage;
  v193 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v194 = v174;
  swift_retain();
  v195 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v196 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v197 = v247;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v261, v195, v196, v246, v193);
  v198 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v198, *(unsigned int *)(v198 + 48), *(unsigned __int16 *)(v198 + 52));
  v199 = DispatchWorkItem.init(flags:block:)(v197, v192);
  swift_release();
  swift_release();
  if (*(_BYTE *)(v189 + *(int *)(v245 + 24) + 8))
  {
    v200 = objc_msgSend(v255, "identifier");
    v201 = (uint64_t)v253;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v200);

    swift_beginAccess(v186 + 14, &aBlock, 33, 0);
    swift_retain();
    v202 = swift_isUniquelyReferenced_nonNull_native(v186[14]);
    v261 = (_QWORD *)v186[14];
    v186[14] = 0x8000000000000000;
    sub_10010CF9C(v199, v201, v202);
    v186[14] = v261;
    swift_bridgeObjectRelease();
    v185(v201, v256);
    v203 = swift_endAccess(&aBlock);
    v204 = v235;
    static DispatchTime.now()(v203);
    v205 = v237;
    + infix(_:_:)(v204, 20.0);
    v206 = *(void (**)(char *, uint64_t))(v236 + 8);
    v207 = v238;
    v206(v204, v238);
    OS_dispatch_queue.asyncAfter(deadline:execute:)(v205, v199);
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v206)(v205, v207);
  }
  else
  {
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v209 = sub_10001A9E8(v241, (uint64_t)qword_1011B6F48);
    v210 = Logger.logObject.getter(v209);
    v211 = static os_log_type_t.default.getter(v210);
    if (os_log_type_enabled(v210, v211))
    {
      v212 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v212 = 0;
      _os_log_impl((void *)&_mh_execute_header, v210, v211, "command requiresImmediateDisconnection: Disconnecting now.", v212, 2u);
      swift_slowDealloc(v212, -1, -1);
    }

    dispatch thunk of DispatchWorkItem.perform()();
    return swift_release();
  }
}

uint64_t sub_100450708(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint8_t *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33[24];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v33, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v9 = result;
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v10 = type metadata accessor for Logger(0);
    sub_10001A9E8(v10, (uint64_t)qword_1011B6F48);
    v11 = a2;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v32 = v30;
      v29 = v14;
      *(_DWORD *)v14 = 136446210;
      v15 = v14 + 12;
      v28 = v14 + 4;
      v16 = objc_msgSend(*(id *)&v11[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v16);

      v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v18 = dispatch thunk of CustomStringConvertible.description.getter(v4, v17);
      v20 = v19;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v31 = sub_100016940(v18, v20, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v28, v15);
      swift_bridgeObjectRelease();

      v21 = v29;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Disconnecting from %{public}s", v29, 0xCu);
      v22 = v30;
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {

    }
    swift_retain();
    v23 = sub_100E08534(v11);
    swift_release();
    v32 = v23;
    v24 = swift_allocObject(&unk_101078720, 32, 7);
    *(_QWORD *)(v24 + 16) = v11;
    *(_QWORD *)(v24 + 24) = v9;
    v25 = v11;
    swift_retain();
    v26 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
    v27 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.oneshot(_:)(sub_100471B60, v24, v26, v27);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100450A3C(uint64_t a1, void *a2, void **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  void ***v23;
  void **v24;
  void **v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint8_t *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  unint64_t v39;
  unint64_t v40;
  uint8_t *v41;
  uint8_t *v42;
  void **v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v55;
  uint8_t *v56;
  uint8_t *v57;
  void **v58;
  void *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void **aBlock;
  _QWORD v67[4];
  uint64_t v68;
  _BYTE v69[48];
  _QWORD *v70;
  uint64_t v71;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v64 = *(_QWORD *)(v6 - 8);
  v65 = v6;
  __chkstk_darwin(v6);
  v63 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for DispatchQoS(0);
  v61 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v60 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F9B8(a1, (uint64_t)&aBlock, &qword_1011074A0);
  if ((v68 & 0x100) != 0)
  {
    sub_100059244((uint64_t)&aBlock, (uint64_t)&v70);
    v13 = sub_100059390();
    swift_willThrowTypedImpl(&v70, &type metadata for CentralManager.Error, v13);
    sub_100059244((uint64_t)&v70, (uint64_t)v69);
    v14 = swift_allocError(&type metadata for CentralManager.Error, v13, 0, 0);
    sub_100059244((uint64_t)v69, v15);
    swift_errorRetain(v14);
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v16 = type metadata accessor for Logger(0);
    sub_10001A9E8(v16, (uint64_t)qword_1011B6F48);
    v17 = a2;
    v18 = swift_errorRetain(v14);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(22, -1);
      v59 = a2;
      v22 = v21;
      v23 = (void ***)swift_slowAlloc(16, -1);
      *(_DWORD *)v22 = 138543618;
      v24 = (void **)_convertErrorToNSError(_:)(v14);
      v58 = a3;
      v25 = v24;
      aBlock = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v67, v22 + 4, v22 + 12);
      *v23 = v25;
      swift_errorRelease(v14);
      *(_WORD *)(v22 + 12) = 2114;
      aBlock = v17;
      v26 = v17;
      a3 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v67, v22 + 14, v22 + 22);
      v23[1] = v17;

      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Disconnection failure: %{public}@ %{public}@!", (uint8_t *)v22, 0x16u);
      v27 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v23, 2, v27);
      swift_slowDealloc(v23, -1, -1);
      v28 = v22;
      a2 = v59;
      swift_slowDealloc(v28, -1, -1);

      swift_errorRelease(v14);
    }
    else
    {
      swift_errorRelease(v14);
      swift_errorRelease(v14);

    }
    swift_errorRelease(v14);
  }
  else
  {

    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v29 = type metadata accessor for Logger(0);
    sub_10001A9E8(v29, (uint64_t)qword_1011B6F48);
    v30 = a2;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v58 = (void **)swift_slowAlloc(32, -1);
      aBlock = v58;
      v59 = a2;
      v57 = v33;
      *(_DWORD *)v33 = 136446210;
      v34 = v33 + 12;
      v56 = v33 + 4;
      v35 = objc_msgSend(*(id *)&v30[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v35);

      v36 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v37 = dispatch thunk of CustomStringConvertible.description.getter(v9, v36);
      v38 = a3;
      v40 = v39;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v70 = (_QWORD *)sub_100016940(v37, v40, (uint64_t *)&aBlock);
      v41 = v34;
      a2 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v56, v41);
      a3 = v38;
      swift_bridgeObjectRelease();

      v42 = v57;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Disconnected from %{public}s", v57, 0xCu);
      v43 = v58;
      swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {

    }
  }
  v44 = swift_allocObject(&unk_101078748, 32, 7);
  *(_QWORD *)(v44 + 16) = a3;
  *(_QWORD *)(v44 + 24) = a2;
  v67[3] = sub_100471B6C;
  v68 = v44;
  aBlock = _NSConcreteStackBlock;
  v67[0] = 1107296256;
  v67[1] = sub_100016FB8;
  v67[2] = &unk_101078760;
  v45 = _Block_copy(&aBlock);
  v46 = a2;
  v47 = swift_retain();
  v48 = v60;
  static DispatchQoS.unspecified.getter(v47);
  v70 = _swiftEmptyArrayStorage;
  v49 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v50 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v51 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v52 = v63;
  v53 = v65;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v70, v50, v51, v65, v49);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v48, v52, v45);
  _Block_release(v45);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v52, v53);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v48, v62);
  return swift_release();
}

uint64_t sub_1004510F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  id v8;
  _BYTE v11[24];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a2
                                                             + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier"));
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v8);

  swift_beginAccess(a1 + 112, v11, 33, 0);
  sub_100103D04((uint64_t)v7);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  swift_endAccess(v11);
  return swift_release();
}

uint64_t sub_1004511E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5[12] = a4;
  v5[13] = v4;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v5[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MACAddress(0);
  v5[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[16] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[17] = swift_task_alloc(v9);
  v5[18] = swift_task_alloc(v9);
  v5[19] = swift_task_alloc(v9);
  v5[20] = swift_task_alloc(v9);
  return swift_task_switch(sub_100451294, 0, 0);
}

uint64_t sub_100451294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  _QWORD *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  _BOOL4 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t);
  void (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97[2];

  v92 = v0 + 48;
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v1 = v0 + 24;
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 80);
  v8 = type metadata accessor for Logger(0);
  sub_10001A9E8(v8, (uint64_t)qword_1011B6F48);
  v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v95(v2, v7, v3);
  sub_10001BBBC(v6, v5);
  v9 = sub_10001BBBC(v6, v5);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 160);
  v14 = *(_QWORD *)(v0 + 120);
  v15 = *(_QWORD *)(v0 + 128);
  v17 = *(_QWORD *)(v0 + 88);
  v16 = *(_QWORD *)(v0 + 96);
  if (v12)
  {
    v18 = swift_slowAlloc(32, -1);
    v93 = swift_slowAlloc(64, -1);
    v97[0] = v93;
    *(_DWORD *)v18 = 136446723;
    v19 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v14, v19);
    *(_QWORD *)(v0 + 48) = sub_100016940(v20, v21, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v92, v0 + 56, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease();
    v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v22(v13, v14);
    *(_WORD *)(v18 + 12) = 2160;
    *(_QWORD *)(v0 + 56) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v18 + 14, v18 + 22);
    *(_WORD *)(v18 + 22) = 2081;
    v23 = Data.hexString.getter(v17, v16);
    *(_QWORD *)(v0 + 64) = sub_100016940(v23, v24, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v18 + 24, v18 + 32);
    swift_bridgeObjectRelease();
    sub_10001BC14(v17, v16);
    sub_10001BC14(v17, v16);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Connect using %{public}s and LTK %{private,mask.hash}s", (uint8_t *)v18, 0x20u);
    swift_arrayDestroy(v93, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v93, -1, -1);
    v25 = v18;
    v1 = v0 + 24;
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {
    v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v22(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 120));
    sub_10001BC14(v17, v16);
    sub_10001BC14(v17, v16);

  }
  v94 = v22;
  *(_QWORD *)(v0 + 168) = v22;
  v27 = *(_QWORD *)(v0 + 120);
  v28 = *(_QWORD *)(v0 + 128);
  v29 = *(_QWORD *)(v0 + 112);
  v30 = MACAddress.data.getter(v26);
  v32 = v31;
  v33 = MACAddress.type.getter(v30);
  MACAddress.init(addressToSanitize:type:)(v30, v32, v33 & 1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v29, 1, v27) == 1)
  {
    v34 = *(_QWORD *)(v0 + 136);
    v35 = *(_QWORD *)(v0 + 120);
    v36 = *(_QWORD *)(v0 + 80);
    sub_100004048(*(_QWORD *)(v0 + 112), (uint64_t *)&unk_1010F9890);
    v37 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v95)(v34, v36, v35);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter(v38);
    v40 = os_log_type_enabled(v38, v39);
    v41 = *(_QWORD *)(v0 + 136);
    v42 = *(_QWORD *)(v0 + 120);
    if (v40)
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      *(_DWORD *)v43 = 136446210;
      v97[0] = v44;
      v45 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v42, v45);
      *(_QWORD *)(v0 + 16) = sub_100016940(v46, v47, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v1, v43 + 4, v43 + 12);
      swift_bridgeObjectRelease();
      v94(v41, v42);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Invalid MAC address %{public}s", v43, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {
      v94(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    }

    v60 = *(_QWORD *)(v0 + 72);
    v61 = type metadata accessor for OwnerCommandManager.Error(0);
    v62 = v60;
    v63 = v61;
    v64 = 12;
LABEL_20:
    swift_storeEnumTagMultiPayload(v62, v63, v64);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v60, 0, 1, v61);
    v88 = *(_QWORD *)(v0 + 152);
    v90 = *(_QWORD *)(v0 + 136);
    v89 = *(_QWORD *)(v0 + 144);
    v91 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v48 = *(_QWORD *)(v0 + 152);
  v49 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 32))(v48, *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  v50 = *(_QWORD *)(*(_QWORD *)(v49 + 56) + 24);
  v51 = swift_task_alloc(32);
  *(_QWORD *)(v51 + 16) = v48;
  *(_QWORD *)(v51 + 24) = v50;
  sub_10001A9A8(&qword_101110700);
  Lock.callAsFunction<A>(_:)(sub_100245650);
  swift_task_dealloc(v51);
  v52 = *(void **)(v0 + 24);
  *(_QWORD *)(v0 + 176) = v52;
  if (!v52)
  {
    v65 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v95)(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 120));
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.error.getter(v66);
    v68 = os_log_type_enabled(v66, v67);
    v69 = *(_QWORD *)(v0 + 144);
    v70 = *(_QWORD *)(v0 + 152);
    v71 = *(_QWORD *)(v0 + 120);
    if (v68)
    {
      v96 = *(_QWORD *)(v0 + 152);
      v72 = (uint8_t *)swift_slowAlloc(12, -1);
      v73 = swift_slowAlloc(32, -1);
      v97[0] = v73;
      *(_DWORD *)v72 = 136446210;
      v74 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v75 = dispatch thunk of CustomStringConvertible.description.getter(v71, v74);
      *(_QWORD *)(v0 + 32) = sub_100016940(v75, v76, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v72 + 4, v72 + 12);
      swift_bridgeObjectRelease();
      v77 = v69;
      v78 = v94;
      v94(v77, v71);
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "No peripheral for MAC address %{public}s", v72, 0xCu);
      swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1, -1);
      swift_slowDealloc(v72, -1, -1);

      v79 = v96;
    }
    else
    {

      v87 = v69;
      v78 = v94;
      v94(v87, v71);
      v79 = v70;
    }
    v78(v79, v71);
    v60 = *(_QWORD *)(v0 + 72);
    v61 = type metadata accessor for OwnerCommandManager.Error(0);
    v62 = v60;
    v63 = v61;
    v64 = 16;
    goto LABEL_20;
  }
  v53 = v52;
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.default.getter(v54);
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc(12, -1);
    v57 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v56 = 138543362;
    *(_QWORD *)(v0 + 40) = v53;
    v58 = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v92, v56 + 4, v56 + 12);
    *v57 = v52;

    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Peripheral to connect: %{public}@", v56, 0xCu);
    v59 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v57, 1, v59);
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v56, -1, -1);
  }
  else
  {

  }
  v81 = *(_QWORD *)(v0 + 96);
  v80 = *(_QWORD *)(v0 + 104);
  v82 = *(_QWORD *)(v0 + 88);
  v83 = (_QWORD *)swift_task_alloc(48);
  *(_QWORD *)(v0 + 184) = v83;
  v83[2] = v80;
  v83[3] = v53;
  v83[4] = v82;
  v83[5] = v81;
  v84 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 192) = v84;
  v85 = sub_10001A9A8(&qword_1010FCA38);
  *v84 = v0;
  v84[1] = sub_100451B74;
  return withCheckedContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 72), 0, 0, 0xD00000000000001BLL, 0x8000000100ED6FC0, sub_1004719F4, v83, v85);
}

uint64_t sub_100451B74()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 192));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100451BD0, 0, 0);
}

uint64_t sub_100451BD0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 120);

  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100451C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v11[8];

  type metadata accessor for Transaction(0);
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = a4;
  v11[5] = a5;
  v11[6] = a1;
  return static Transaction.named<A>(_:with:)("OwnerCommandManager.connectUsingMACAndLTK", 41, 2, sub_100471A00, v11);
}

uint64_t sub_100451CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v29 = a6;
  v30 = a1;
  v28 = sub_10001A9A8(&qword_1010FCCC0);
  v9 = *(_QWORD *)(v28 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v28);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010FCA58);
  v13 = *(_QWORD *)(v12 - 8);
  v31 = v12;
  v32 = v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004596B0(a3, a4, a5);
  v33 = v16;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
  v18 = type metadata accessor for OwnerCommandManager.Error(0);
  v19 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v20 = sub_100006204(&qword_1010FCA40, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_100E3F1F0);
  Publisher.mapError<A>(_:)(sub_100451F0C, 0, v17, v18, v19, v20);
  swift_release();
  v21 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v29, v28);
  v22 = *(unsigned __int8 *)(v9 + 80);
  v23 = (v22 + 24) & ~v22;
  v24 = swift_allocObject(&unk_1010786A8, v23 + v10, v22 | 7);
  *(_QWORD *)(v24 + 16) = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24 + v23, v11, v21);
  v25 = sub_1000193A4(&qword_1010FCA60, &qword_1010FCA58, (const char *)&protocol conformance descriptor for Publishers.MapError<A, B>);
  swift_retain();
  v26 = v31;
  Publisher.oneshot(_:)(sub_100471A9C, v24, v31, v25);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v15, v26);
}

uint64_t sub_100451F10(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100451F94, 0, 0);
}

uint64_t sub_100451F94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  if (!*(_QWORD *)(*(_QWORD *)(v0 + 40) + 184))
    goto LABEL_4;
  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 32);
  swift_retain();
  sub_10080B950(v2, v1);
  swift_release();
  v3 = type metadata accessor for OwnedBeaconRecord(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v1, 1, v3) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 72), (uint64_t *)&unk_1010F47C0);
LABEL_4:
    v4 = 0;
    goto LABEL_12;
  }
  sub_1009A2CF8();
  v6 = v5;
  v7 = SPBeaconTypeHele;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v10 = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  if (v8 == v11 && v10 == v12)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v11, v12, 0);
  v14 = *(_QWORD *)(v0 + 72);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000126B0(v14, type metadata accessor for OwnedBeaconRecord);
LABEL_12:
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v15 = *(_QWORD *)(v0 + 32);
  v16 = *(_QWORD *)(v0 + 56);
  v17 = *(_QWORD *)(v0 + 64);
  v18 = *(_QWORD *)(v0 + 48);
  v19 = type metadata accessor for Logger(0);
  sub_10001A9E8(v19, (uint64_t)qword_1011B6F48);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v17, v15, v18);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  v23 = os_log_type_enabled(v21, v22);
  v25 = *(_QWORD *)(v0 + 56);
  v24 = *(_QWORD *)(v0 + 64);
  v26 = *(_QWORD *)(v0 + 48);
  if (v23)
  {
    v27 = swift_slowAlloc(28, -1);
    v34 = swift_slowAlloc(32, -1);
    v35 = v34;
    *(_DWORD *)v27 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v27 + 4, v27 + 12);
    *(_WORD *)(v27 + 12) = 2081;
    v28 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v29 = dispatch thunk of CustomStringConvertible.description.getter(v26, v28);
    *(_QWORD *)(v0 + 24) = sub_100016940(v29, v30, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v27 + 14, v27 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    *(_WORD *)(v27 + 22) = 1024;
    *(_DWORD *)(v0 + 96) = v4 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 100, v27 + 24, v27 + 28);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Read TX Power for %{private,mask.hash}s. isHELE: %{BOOL}d", (uint8_t *)v27, 0x1Cu);
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v27, -1, -1);

    if ((v4 & 1) == 0)
    {
LABEL_16:
      v31 = (_QWORD *)swift_task_alloc(dword_1010FCCDC);
      *(_QWORD *)(v0 + 88) = v31;
      *v31 = v0;
      v31[1] = sub_1004523C0;
      return sub_10046DFA8(*(_QWORD *)(v0 + 32));
    }
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v25 + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));

    if ((v4 & 1) == 0)
      goto LABEL_16;
  }
  v33 = (_QWORD *)swift_task_alloc(dword_1010FC6D4);
  *(_QWORD *)(v0 + 80) = v33;
  *v33 = v0;
  v33[1] = sub_100452358;
  return sub_100452428(*(_QWORD *)(v0 + 32));
}

uint64_t sub_100452358(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*v2 + 80);
  v5 = *v2;
  swift_task_dealloc(v4);
  v6 = *(_QWORD *)(v5 + 64);
  swift_task_dealloc(*(_QWORD *)(v5 + 72));
  v7 = swift_task_dealloc(v6);
  if (!v1)
    v7 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v7);
}

uint64_t sub_1004523C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*v2 + 88);
  v5 = *v2;
  swift_task_dealloc(v4);
  v6 = *(_QWORD *)(v5 + 64);
  swift_task_dealloc(*(_QWORD *)(v5 + 72));
  v7 = swift_task_dealloc(v6);
  if (!v1)
    v7 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v7);
}

uint64_t sub_100452428(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v5);
  v2[10] = swift_task_alloc(v5);
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[11] = swift_task_alloc(v6);
  v2[12] = swift_task_alloc(v6);
  v7 = type metadata accessor for AccessoryCommand(0);
  v2[13] = v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[14] = swift_task_alloc(v8);
  v2[15] = swift_task_alloc(v8);
  return swift_task_switch(sub_100452500, 0, 0);
}

uint64_t sub_100452500()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t *v19;
  _QWORD *v20;
  int8x16_t v22;

  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[10];
  v4 = v0[7];
  v5 = v0[8];
  v6 = v0[5];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v2, 1, 1, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v6, v4);
  sub_10000F9B8(v2, v1, &qword_1010ED860);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v1, 1, v4);
  v9 = v0[11];
  v8 = v0[12];
  v11 = v0[8];
  v10 = v0[9];
  if ((_DWORD)v7 == 1)
  {
    UUID.init()(v7);
    sub_100004048(v8, &qword_1010ED860);
    sub_100004048(v9, &qword_1010ED860);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
  }
  else
  {
    v13 = v0[7];
    sub_100004048(v0[12], &qword_1010ED860);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
    v12(v10, v9, v13);
  }
  v14 = v0[15];
  v15 = (int *)v0[13];
  v16 = v0[10];
  v17 = v0[7];
  v22 = *(int8x16_t *)(v0 + 5);
  v12(v14, v0[9], v17);
  v12(v14 + v15[5], v16, v17);
  v18 = v14 + v15[6];
  *(_QWORD *)v18 = 3;
  *(_BYTE *)(v18 + 8) = 3;
  *(_BYTE *)(v14 + v15[7]) = 1;
  *(_BYTE *)(v14 + v15[8]) = 1;
  v19 = (int8x16_t *)swift_task_alloc(48);
  v0[16] = v19;
  v19[1] = vextq_s8(v22, v22, 8uLL);
  v19[2].i64[0] = v14;
  v20 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[17] = v20;
  *v20 = v0;
  v20[1] = sub_1004526EC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000014, 0x8000000100ED6FA0, sub_100471868, v19, &type metadata for Int);
}

uint64_t sub_1004526EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100452988;
  else
    v4 = sub_100452758;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100452758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 16);
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v3 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B6F48);
  v5 = sub_10005972C(v2, v3, type metadata accessor for AccessoryCommand);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 112);
  if (v8)
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(32, -1);
    v21 = v11;
    *(_DWORD *)v10 = 134218242;
    *(_QWORD *)(v0 + 24) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2080;
    sub_100C58714();
    *(_QWORD *)(v0 + 32) = sub_100016940(v12, v13, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v9, type metadata accessor for AccessoryCommand);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Read TX Power HELE: %ld. Command %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 112), type metadata accessor for AccessoryCommand);
  }

  v15 = *(_QWORD *)(v0 + 112);
  v14 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 88);
  v16 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD *)(v0 + 72);
  v18 = *(_QWORD *)(v0 + 80);
  sub_1000126B0(v14, type metadata accessor for AccessoryCommand);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100452988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 80);
  sub_1000126B0(v2, type metadata accessor for AccessoryCommand);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100452A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  _BYTE v28[24];

  v27 = a4;
  v7 = type metadata accessor for AccessoryCommand(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v10);
  v12 = &v28[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = sub_10001A9A8(&qword_1010EF1E8);
  __chkstk_darwin(v13);
  v15 = &v28[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v16 = type metadata accessor for UUID(0);
  __chkstk_darwin(v16);
  v18 = &v28[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t))(v19 + 16))(v18, a3);
  v20 = sub_10001A9A8(&qword_1010EF1F0);
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v21 + 16))(v15, a1, v20);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v15, 0, 1, v20);
  swift_beginAccess(a2 + 120, v28, 33, 0);
  sub_1000FF8CC((uint64_t)v15, (uint64_t)v18);
  swift_endAccess(v28);
  v22 = type metadata accessor for TaskPriority(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v12, 1, 1, v22);
  sub_10005972C(v27, (uint64_t)&v28[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], type metadata accessor for AccessoryCommand);
  v23 = *(unsigned __int8 *)(v8 + 80);
  v24 = (v23 + 40) & ~v23;
  v25 = (_QWORD *)swift_allocObject(&unk_101078680, v24 + v9, v23 | 7);
  v25[2] = 0;
  v25[3] = 0;
  v25[4] = a2;
  sub_1000126EC((uint64_t)&v28[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], (uint64_t)v25 + v24, type metadata accessor for AccessoryCommand);
  swift_retain();
  sub_100626BC4((uint64_t)v12, (uint64_t)&unk_1010FCCD0, (uint64_t)v25);
  return swift_release();
}

uint64_t sub_100452C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1010FC6E4);
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_100004C28;
  return sub_100453C98(a5);
}

uint64_t sub_100452CA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v3[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MACAddress(0);
  v3[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[11] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[12] = swift_task_alloc(v7);
  v3[13] = swift_task_alloc(v7);
  v3[14] = swift_task_alloc(v7);
  return swift_task_switch(sub_100452D48, 0, 0);
}

uint64_t sub_100452D48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71[2];

  v2 = *(_QWORD *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 88);
  v4 = *(_QWORD *)(v1 + 72);
  v5 = MACAddress.data.getter(a1);
  v7 = v6;
  v8 = MACAddress.type.getter(v5);
  MACAddress.init(addressToSanitize:type:)(v5, v7, v8 & 1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    sub_100004048(*(_QWORD *)(v1 + 72), (uint64_t *)&unk_1010F9890);
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v10 = *(_QWORD *)(v1 + 88);
    v9 = *(_QWORD *)(v1 + 96);
    v11 = *(_QWORD *)(v1 + 80);
    v12 = *(_QWORD *)(v1 + 56);
    v13 = type metadata accessor for Logger(0);
    sub_10001A9E8(v13, (uint64_t)qword_1011B6F48);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v12, v11);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    v17 = os_log_type_enabled(v15, v16);
    v19 = *(_QWORD *)(v1 + 88);
    v18 = *(_QWORD *)(v1 + 96);
    v20 = *(_QWORD *)(v1 + 80);
    if (v17)
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v71[0] = v22;
      *(_DWORD *)v21 = 136446210;
      v23 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v24 = dispatch thunk of CustomStringConvertible.description.getter(v20, v23);
      *(_QWORD *)(v1 + 16) = sub_100016940(v24, v25, v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Invalid MAC address %{public}s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v19 + 8))(*(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 80));
    }

    v38 = *(_QWORD *)(v1 + 48);
    v39 = type metadata accessor for OwnerCommandManager.Error(0);
    v40 = v38;
    v41 = v39;
    v42 = 12;
LABEL_21:
    swift_storeEnumTagMultiPayload(v40, v41, v42);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 0, 1, v39);
    v67 = *(_QWORD *)(v1 + 104);
    v68 = *(_QWORD *)(v1 + 96);
    v69 = *(_QWORD *)(v1 + 72);
    swift_task_dealloc(*(_QWORD *)(v1 + 112));
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v26 = *(_QWORD *)(v1 + 112);
  v27 = *(_QWORD *)(v1 + 64);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 88) + 32))(v26, *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
  v28 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 24);
  v29 = swift_task_alloc(32);
  *(_QWORD *)(v29 + 16) = v26;
  *(_QWORD *)(v29 + 24) = v28;
  sub_10001A9A8(&qword_101110700);
  Lock.callAsFunction<A>(_:)(sub_1000FA494);
  swift_task_dealloc(v29);
  v30 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 120) = v30;
  if (!v30)
  {
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v43 = *(_QWORD *)(v1 + 104);
    v44 = *(_QWORD *)(v1 + 80);
    v45 = *(_QWORD *)(v1 + 88);
    v46 = *(_QWORD *)(v1 + 56);
    v47 = type metadata accessor for Logger(0);
    sub_10001A9E8(v47, (uint64_t)qword_1011B6F48);
    v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v43, v46, v44);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.error.getter(v49);
    v51 = os_log_type_enabled(v49, v50);
    v52 = *(_QWORD *)(v1 + 104);
    v53 = *(_QWORD *)(v1 + 112);
    v55 = *(_QWORD *)(v1 + 80);
    v54 = *(_QWORD *)(v1 + 88);
    if (v51)
    {
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      v57 = swift_slowAlloc(32, -1);
      v71[0] = v57;
      *(_DWORD *)v56 = 136446210;
      v58 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v59 = dispatch thunk of CustomStringConvertible.description.getter(v55, v58);
      *(_QWORD *)(v1 + 32) = sub_100016940(v59, v60, v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 32, v1 + 40, v56 + 4, v56 + 12);
      swift_bridgeObjectRelease();
      v61 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
      v61(v52, v55);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "No peripheral for MAC address %{public}s", v56, 0xCu);
      swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);

    }
    else
    {

      v61 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
      v61(v52, v55);
    }
    v61(v53, v55);
    v38 = *(_QWORD *)(v1 + 48);
    v39 = type metadata accessor for OwnerCommandManager.Error(0);
    v40 = v38;
    v41 = v39;
    v42 = 16;
    goto LABEL_21;
  }
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v31 = type metadata accessor for Logger(0);
  sub_10001A9E8(v31, (uint64_t)qword_1011B6F48);
  v32 = v30;
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v70 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v35 = 138543362;
    *(_QWORD *)(v1 + 40) = v32;
    v36 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v1 + 48, v35 + 4, v35 + 12);
    *v70 = v30;

    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Peripheral to disconnect: %{public}@", v35, 0xCu);
    v37 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v70, 1, v37);
    swift_slowDealloc(v70, -1, -1);
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {

  }
  v62 = *(_QWORD *)(v1 + 64);
  v63 = swift_task_alloc(32);
  *(_QWORD *)(v1 + 128) = v63;
  *(_QWORD *)(v63 + 16) = v62;
  *(_QWORD *)(v63 + 24) = v32;
  v64 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v1 + 136) = v64;
  v65 = sub_10001A9A8(&qword_1010FCA38);
  *v64 = v1;
  v64[1] = sub_100453454;
  return withCheckedContinuation<A>(isolation:function:_:)(*(_QWORD *)(v1 + 48), 0, 0, 0xD000000000000011, 0x8000000100ED6F60, sub_10047182C, v63, v65);
}

uint64_t sub_100453454()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1004534B0, 0, 0);
}

uint64_t sub_1004534B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100453528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v7[6];

  type metadata accessor for Transaction(0);
  v7[2] = a2;
  v7[3] = a3;
  v7[4] = a1;
  return static Transaction.named<A>(_:with:)("OwnerCommandManager.disconnect", 30, 2, sub_100471834, v7);
}

uint64_t sub_1004535A4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v24 = a4;
  v25 = a1;
  v23 = sub_10001A9A8(&qword_1010FCCC0);
  v5 = *(_QWORD *)(v23 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v23);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010FCA58);
  v9 = *(_QWORD *)(v8 - 8);
  v26 = v8;
  v27 = v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100E08534(a3);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
  v13 = type metadata accessor for OwnerCommandManager.Error(0);
  v14 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v15 = sub_100006204(&qword_1010FCA40, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_100E3F1F0);
  Publisher.mapError<A>(_:)(sub_100451F0C, 0, v12, v13, v14, v15);
  swift_release();
  v16 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v24, v23);
  v17 = *(unsigned __int8 *)(v5 + 80);
  v18 = (v17 + 24) & ~v17;
  v19 = swift_allocObject(&unk_101078658, v18 + v6, v17 | 7);
  *(_QWORD *)(v19 + 16) = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v19 + v18, v7, v16);
  v20 = sub_1000193A4(&qword_1010FCA60, &qword_1010FCA58, (const char *)&protocol conformance descriptor for Publishers.MapError<A, B>);
  swift_retain();
  v21 = v26;
  Publisher.oneshot(_:)(sub_100471854, v19, v26, v20);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v11, v21);
}

void sub_1004537C8(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, const char *a5)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  NSObject *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;

  v41 = a4;
  v42 = (char *)a5;
  v7 = (const char *)type metadata accessor for OwnerCommandManager.Error(0);
  v8 = *((_QWORD *)v7 - 1);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v40 - v12;
  v14 = sub_10001A9A8(&qword_1010FCA38);
  __chkstk_darwin(v14);
  v43 = (uint64_t)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1010FCA68);
  __chkstk_darwin(v16);
  v18 = (void **)((char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10000F9B8(a1, (uint64_t)v18, &qword_1010FCA68);
  if (swift_getEnumCaseMultiPayload(v18, v16) == 1)
  {
    v41 = v7;
    sub_1000126EC((uint64_t)v18, (uint64_t)v13, type metadata accessor for OwnerCommandManager.Error);
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v19 = type metadata accessor for Logger(0);
    sub_10001A9E8(v19, (uint64_t)qword_1011B6F48);
    v20 = sub_10005972C((uint64_t)v13, (uint64_t)v11, type metadata accessor for OwnerCommandManager.Error);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v45 = v24;
      v40 = a3;
      *(_DWORD *)v23 = 136446210;
      sub_10044E504();
      v44 = sub_100016940(v25, v26, (uint64_t *)&v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v11, type metadata accessor for OwnerCommandManager.Error);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, v42, v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v11, type metadata accessor for OwnerCommandManager.Error);
    }

    v36 = v43;
    sub_10005972C((uint64_t)v13, v43, type metadata accessor for OwnerCommandManager.Error);
    (*(void (**)(uint64_t, _QWORD, uint64_t, const char *))(v8 + 56))(v36, 0, 1, v41);
    v37 = sub_10001A9A8(&qword_1010FCCC0);
    CheckedContinuation.resume(returning:)(v36, v37);
    sub_1000126B0((uint64_t)v13, type metadata accessor for OwnerCommandManager.Error);
  }
  else
  {
    v27 = *v18;
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v28 = type metadata accessor for Logger(0);
    sub_10001A9E8(v28, (uint64_t)qword_1011B6F48);
    v29 = v27;
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v40 = a3;
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = (char *)swift_slowAlloc(8, -1);
      *(_DWORD *)v32 = 138543362;
      v45 = v29;
      v33 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v32 + 4, v32 + 12);
      v34 = v42;
      *(_QWORD *)v42 = v29;

      _os_log_impl((void *)&_mh_execute_header, v30, v31, v41, v32, 0xCu);
      v35 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v34, 1, v35);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }
    else
    {

      v30 = v29;
    }

    v38 = v43;
    (*(void (**)(uint64_t, uint64_t, uint64_t, const char *))(v8 + 56))(v43, 1, 1, v7);
    v39 = sub_10001A9A8(&qword_1010FCCC0);
    CheckedContinuation.resume(returning:)(v38, v39);

  }
}

uint64_t sub_100453C98(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2[58] = a1;
  v2[59] = v1;
  v3 = type metadata accessor for BinaryDecoder(0);
  v2[60] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[61] = v4;
  v2[62] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BinaryEncoder(0);
  v2[63] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[64] = v6;
  v2[65] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_101115F50);
  v2[66] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[67] = v8;
  v2[68] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EC448);
  v2[69] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[70] = v10;
  v2[71] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010EC450);
  v2[72] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Peripheral.ConnectionOptions(0);
  v2[73] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[74] = v13;
  v2[75] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010EC458);
  v2[76] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010EC460);
  v2[77] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CentralManager.State(0);
  v2[78] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v2[79] = v17;
  v2[80] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AccessoryCommand(0);
  v2[81] = v18;
  v2[82] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UUID(0);
  v2[83] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v2[84] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[85] = swift_task_alloc(v21);
  v2[86] = swift_task_alloc(v21);
  v2[87] = swift_task_alloc(v21);
  v2[88] = swift_task_alloc(v21);
  v2[89] = swift_task_alloc(v21);
  v2[90] = swift_task_alloc(v21);
  v2[91] = swift_task_alloc(v21);
  return swift_task_switch(sub_100453ECC, 0, 0);
}

uint64_t sub_100453ECC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = v0[91];
  v2 = v0[90];
  v3 = v0[83];
  v4 = v0[58];
  v5 = v4 + *(int *)(v0[81] + 20);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[84] + 16);
  v0[92] = v6;
  v6(v1, v5, v3);
  v6(v2, v4, v3);
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v7 = v0[91];
  v8 = v0[89];
  v9 = v0[83];
  v10 = v0[82];
  v11 = v0[58];
  v12 = type metadata accessor for Logger(0);
  v0[93] = sub_10001A9E8(v12, (uint64_t)qword_1011B6F48);
  sub_10005972C(v11, v10, type metadata accessor for AccessoryCommand);
  v13 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v8, v7, v9);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  v16 = os_log_type_enabled(v14, v15);
  v17 = v0[89];
  v18 = v0[84];
  v19 = v0[83];
  v20 = v0[82];
  if (v16)
  {
    v30 = v0[84];
    v21 = swift_slowAlloc(32, -1);
    v31 = swift_slowAlloc(64, -1);
    v32 = v31;
    *(_DWORD *)v21 = 136446723;
    sub_100C58714();
    v0[55] = sub_100016940(v22, v23, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 55, v0 + 56, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v20, type metadata accessor for AccessoryCommand);
    *(_WORD *)(v21 + 12) = 2160;
    v0[56] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 57, v21 + 14, v21 + 22);
    *(_WORD *)(v21 + 22) = 2081;
    v24 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v19, v24);
    v0[57] = sub_100016940(v25, v26, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 57, v0 + 58, v21 + 24, v21 + 32);
    swift_bridgeObjectRelease();
    v27 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v27(v17, v19);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "[FindMyBluetooth] Execute command %{public}s for beacon %{private,mask.hash}s", (uint8_t *)v21, 0x20u);
    swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    sub_1000126B0(v0[82], type metadata accessor for AccessoryCommand);
    v27 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v27(v17, v19);
  }

  v0[94] = v27;
  v28 = (_QWORD *)swift_task_alloc(dword_1010FC5F4);
  v0[95] = v28;
  *v28 = v0;
  v28[1] = sub_1004541E8;
  return sub_10044E0D4();
}

uint64_t sub_1004541E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 760);
  *(_QWORD *)(v3 + 768) = a1;
  *(_QWORD *)(v3 + 776) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10045437C;
  else
    v5 = sub_100454258;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100454258()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[79] + 104))(v0[80], enum case for CentralManager.State.poweredOn(_:), v0[78]);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(state:)[1]);
  v0[98] = v1;
  v2 = type metadata accessor for CentralManager(0);
  v3 = sub_100006204(&qword_1010EC468, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  *v1 = v0;
  v1[1] = sub_100454304;
  return CentralManagerProtocol.await(state:)(v0[80], v2, v3);
}

uint64_t sub_100454304()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 784);
  *(_QWORD *)(*(_QWORD *)v1 + 792) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[79] + 8))(v2[80], v2[78]);
  if (v0)
    v4 = sub_100456660;
  else
    v4 = sub_1004544CC;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10045437C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  v2 = *(_QWORD *)(v0 + 728);
  v3 = *(_QWORD *)(v0 + 664);
  v1(*(_QWORD *)(v0 + 720), v3);
  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 720);
  v5 = *(_QWORD *)(v0 + 712);
  v6 = *(_QWORD *)(v0 + 704);
  v7 = *(_QWORD *)(v0 + 696);
  v8 = *(_QWORD *)(v0 + 688);
  v9 = *(_QWORD *)(v0 + 680);
  v10 = *(_QWORD *)(v0 + 656);
  v11 = *(_QWORD *)(v0 + 640);
  v12 = *(_QWORD *)(v0 + 616);
  v14 = *(_QWORD *)(v0 + 608);
  v15 = *(_QWORD *)(v0 + 600);
  v16 = *(_QWORD *)(v0 + 576);
  v17 = *(_QWORD *)(v0 + 568);
  v18 = *(_QWORD *)(v0 + 544);
  v19 = *(_QWORD *)(v0 + 520);
  v20 = *(_QWORD *)(v0 + 496);
  swift_task_dealloc(*(_QWORD *)(v0 + 728));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004544CC()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[92];
  v2 = v0[91];
  v3 = v0[84];
  v4 = v0[83];
  v5 = sub_10001A9A8(&qword_1011003C0);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject(v5, v7 + *(_QWORD *)(v3 + 72), v6 | 7);
  v0[100] = v8;
  *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
  v1(v8 + v7, v2, v4);
  v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(beaconIdentifiers:)
                                        + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(beaconIdentifiers:));
  v9 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(beaconIdentifiers:)
                                  + 1));
  v0[101] = v9;
  *v9 = v0;
  v9[1] = sub_100454598;
  return v11(v8);
}

uint64_t sub_100454598(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 808);
  *(_QWORD *)(v3 + 816) = a1;
  *(_QWORD *)(v3 + 824) = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  if (v1)
    v5 = sub_1004567BC;
  else
    v5 = sub_100454610;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100454610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 816);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v5 = *(_QWORD *)(v0 + 816);
    else
      v5 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 816));
    v6 = _CocoaArrayWrapper.endIndex.getter(v5);
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      if ((v1 & 0xC000000000000001) != 0)
      {
        v2 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 816));
      }
      else
      {
        if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          JUMPOUT(0x100454B34);
        }
        v2 = *(_QWORD *)(*(_QWORD *)(v0 + 816) + 32);
        swift_retain();
      }
      *(_QWORD *)(v0 + 832) = v2;
      v3 = *(_QWORD *)(v0 + 648);
      v4 = *(_QWORD *)(v0 + 464);
      swift_bridgeObjectRelease();
      __asm { BR              X11 }
    }
  }
  else if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v7 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 736);
  v9 = *(_QWORD *)(v0 + 728);
  v10 = *(_QWORD *)(v0 + 720);
  v11 = *(_QWORD *)(v0 + 664);
  swift_bridgeObjectRelease();
  v12 = type metadata accessor for OwnerCommandManager.Error(0);
  v13 = sub_100006204(&qword_1010FCA40, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_100E3F1F0);
  swift_allocError(v12, v13, 0, 0);
  v15 = v14;
  v8(v14, v9, v11);
  v16 = swift_storeEnumTagMultiPayload(v15, v12, 0);
  swift_willThrow(v16);
  swift_release();
  v7(v10, v11);
  v7(v9, v11);
  v17 = *(_QWORD *)(v0 + 720);
  v18 = *(_QWORD *)(v0 + 712);
  v19 = *(_QWORD *)(v0 + 704);
  v20 = *(_QWORD *)(v0 + 696);
  v21 = *(_QWORD *)(v0 + 688);
  v22 = *(_QWORD *)(v0 + 680);
  v23 = *(_QWORD *)(v0 + 656);
  v24 = *(_QWORD *)(v0 + 640);
  v25 = *(_QWORD *)(v0 + 616);
  v27 = *(_QWORD *)(v0 + 608);
  v28 = *(_QWORD *)(v0 + 600);
  v29 = *(_QWORD *)(v0 + 576);
  v30 = *(_QWORD *)(v0 + 568);
  v31 = *(_QWORD *)(v0 + 544);
  v32 = *(_QWORD *)(v0 + 520);
  v33 = *(_QWORD *)(v0 + 496);
  swift_task_dealloc(*(_QWORD *)(v0 + 728));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100454B44()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 840);
  *(_QWORD *)(*v1 + 848) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 616);
  sub_100004048(*(_QWORD *)(v2 + 608), &qword_1010EC458);
  sub_100004048(v4, &qword_1010EC460);
  if (v0)
    v5 = sub_100456918;
  else
    v5 = sub_100454BD4;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100454BD4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(_QWORD);
  uint64_t v44;

  v1 = swift_retain_n(*(_QWORD *)(v0 + 832), 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 832);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v44 = v6;
    *(_DWORD *)v5 = 136315138;
    *(_QWORD *)(v0 + 424) = v4;
    v7 = type metadata accessor for Peripheral(0);
    v8 = sub_100006204(&qword_1010EC508, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
    *(_QWORD *)(v0 + 432) = sub_100016940(v9, v10, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 432, v0 + 440, v5 + 4, v5 + 12);
    swift_release_n(v4, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Connected to peripheral: %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {
    v11 = *(_QWORD *)(v0 + 832);

    swift_release_n(v11, 2);
  }
  sub_100C58310();
  *(_QWORD *)(v0 + 856) = v12;
  *(_QWORD *)(v0 + 864) = v13;
  *(_QWORD *)(v0 + 872) = v14;
  *(_QWORD *)(v0 + 880) = v15;
  if ((~(v15 & v13) & 0x3000000000000000) != 0)
  {
    v34 = type metadata accessor for Service(0);
    Identifier.init(stringLiteral:)("FD44", 4, 2, v34);
    v43 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of Peripheral.subscript.getter
                                         + async function pointer to dispatch thunk of Peripheral.subscript.getter);
    v35 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.subscript.getter
                                     + 1));
    *(_QWORD *)(v0 + 888) = v35;
    *v35 = v0;
    v35[1] = sub_100454FBC;
    return v43(*(_QWORD *)(v0 + 568));
  }
  else
  {
    v16 = Logger.logObject.getter(v12);
    v17 = static os_log_type_t.default.getter(v16);
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
    v20 = *(_QWORD *)(v0 + 728);
    v21 = *(_QWORD *)(v0 + 720);
    v22 = *(_QWORD *)(v0 + 664);
    if (v18)
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "No command to execute. Calling completion.", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }
    swift_release();

    swift_release();
    v19(v21, v22);
    v19(v20, v22);
    v24 = *(_QWORD *)(v0 + 720);
    v25 = *(_QWORD *)(v0 + 712);
    v26 = *(_QWORD *)(v0 + 704);
    v27 = *(_QWORD *)(v0 + 696);
    v28 = *(_QWORD *)(v0 + 688);
    v29 = *(_QWORD *)(v0 + 680);
    v30 = *(_QWORD *)(v0 + 656);
    v31 = *(_QWORD *)(v0 + 640);
    v32 = *(_QWORD *)(v0 + 616);
    v36 = *(_QWORD *)(v0 + 608);
    v37 = *(_QWORD *)(v0 + 600);
    v38 = *(_QWORD *)(v0 + 576);
    v39 = *(_QWORD *)(v0 + 568);
    v40 = *(_QWORD *)(v0 + 544);
    v41 = *(_QWORD *)(v0 + 520);
    v42 = *(_QWORD *)(v0 + 496);
    swift_task_dealloc(*(_QWORD *)(v0 + 728));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100454FBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 888);
  v3[112] = a1;
  v3[113] = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v3[70] + 8))(v3[71], v3[69]);
  if (v1)
    v5 = sub_100456A80;
  else
    v5 = sub_100455040;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100455040()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  v1 = type metadata accessor for Characteristic(0);
  Identifier.init(stringLiteral:)("4F860002-943B-49EF-BED4-2F730304427A", 36, 2, v1);
  v4 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of Service.subscript.getter
                                      + async function pointer to dispatch thunk of Service.subscript.getter);
  v2 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Service.subscript.getter
                                  + 1));
  *(_QWORD *)(v0 + 912) = v2;
  *v2 = v0;
  v2[1] = sub_1004550CC;
  return v4(*(_QWORD *)(v0 + 544));
}

uint64_t sub_1004550CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 912);
  v3[115] = a1;
  v3[116] = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v3[67] + 8))(v3[68], v3[66]);
  swift_release();
  if (v1)
    v5 = sub_100456C00;
  else
    v5 = sub_100455164;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100455164(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t (*v42)(void);

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Discovered FindMy services and Config characteristic.", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(_QWORD *)(v1 + 928);
  v6 = *(_QWORD *)(v1 + 880);
  v7 = *(_QWORD *)(v1 + 872);
  v41 = *(_OWORD *)(v1 + 856);

  BinaryEncoder.init()(v8);
  *(_OWORD *)(v1 + 288) = v41;
  *(_QWORD *)(v1 + 304) = v7;
  *(_QWORD *)(v1 + 312) = v6;
  v9 = sub_10046DAB8();
  *(_QWORD *)(v1 + 936) = v9;
  *(_QWORD *)(v1 + 944) = BinaryEncoder.encode<A>(_:)(v1 + 288, &type metadata for AccessoryConfigCommand, v9);
  *(_QWORD *)(v1 + 952) = v10;
  if (v5)
  {
    v37 = *(_QWORD *)(v1 + 872);
    v39 = *(_QWORD *)(v1 + 880);
    v33 = *(_QWORD *)(v1 + 856);
    v35 = *(_QWORD *)(v1 + 864);
    v11 = *(void (**)(uint64_t, uint64_t))(v1 + 752);
    v12 = *(_QWORD *)(v1 + 728);
    v13 = *(_QWORD *)(v1 + 720);
    v14 = *(_QWORD *)(v1 + 664);
    v15 = *(_QWORD *)(v1 + 520);
    v16 = *(_QWORD *)(v1 + 504);
    v17 = *(_QWORD *)(v1 + 512);
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    v11(v13, v14);
    v11(v12, v14);
    sub_1004703BC(v33, v35, v37, v39);
    v18 = *(_QWORD *)(v1 + 720);
    v19 = *(_QWORD *)(v1 + 712);
    v20 = *(_QWORD *)(v1 + 704);
    v21 = *(_QWORD *)(v1 + 696);
    v22 = *(_QWORD *)(v1 + 688);
    v23 = *(_QWORD *)(v1 + 680);
    v24 = *(_QWORD *)(v1 + 656);
    v25 = *(_QWORD *)(v1 + 640);
    v26 = *(_QWORD *)(v1 + 616);
    v30 = *(_QWORD *)(v1 + 608);
    v31 = *(_QWORD *)(v1 + 600);
    v32 = *(_QWORD *)(v1 + 576);
    v34 = *(_QWORD *)(v1 + 568);
    v36 = *(_QWORD *)(v1 + 544);
    v38 = *(_QWORD *)(v1 + 520);
    v40 = *(_QWORD *)(v1 + 496);
    swift_task_dealloc(*(_QWORD *)(v1 + 728));
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v36);
    swift_task_dealloc(v38);
    swift_task_dealloc(v40);
    v27 = *(uint64_t (**)(void))(v1 + 8);
  }
  else
  {
    v42 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Characteristic.mtu.getter
                            + async function pointer to dispatch thunk of Characteristic.mtu.getter);
    v28 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Characteristic.mtu.getter
                                     + 1));
    *(_QWORD *)(v1 + 960) = v28;
    *v28 = v1;
    v28[1] = sub_10045541C;
    v27 = v42;
  }
  return v27();
}

uint64_t sub_10045541C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 960);
  *(_QWORD *)(*v2 + 968) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100456D80;
  }
  else
  {
    *(_QWORD *)(v4 + 976) = a1;
    v6 = sub_100455490;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100455490()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = fragment(data:mtu:)(v0[118], v0[119], v0[122]);
  v0[123] = v1;
  v2 = v0[115];
  v3 = swift_allocObject(&unk_101078630, 32, 7);
  v0[124] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain();
  swift_bridgeObjectRetain(v1);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v0[125] = v5;
  *v5 = v0;
  v5[1] = sub_100455568;
  return withTimeout<A>(_:block:)(v0 + 40, 0x40AAD21B3B700000, 3, &unk_1010FCCB8, v3, &type metadata for Data);
}

uint64_t sub_100455568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1000);
  *(_QWORD *)(*(_QWORD *)v1 + 1008) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    v3 = sub_100456F4C;
  }
  else
  {
    swift_release();
    v3 = sub_1004555F0;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1004555F0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  _BOOL4 v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(void);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  _BOOL4 v113;
  uint64_t v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  os_log_type_t v129[8];
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  os_log_t log;
  os_log_t loga;
  os_log_type_t type[8];
  os_log_type_t typea[8];
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  os_log_t v142;
  NSObject *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t (*v167)(void);
  uint64_t v168[3];

  v2 = *(_QWORD *)(v0 + 320);
  v1 = *(_QWORD *)(v0 + 328);
  v3 = swift_retain_n(*(_QWORD *)(v0 + 832), 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v1;
    v7 = *(_QWORD *)(v0 + 832);
    v8 = swift_slowAlloc(12, -1);
    v162 = v2;
    v168[0] = swift_slowAlloc(32, -1);
    v9 = v168[0];
    *(_DWORD *)v8 = 136315138;
    *(_QWORD *)(v0 + 416) = v7;
    v10 = type metadata accessor for Peripheral(0);
    v11 = sub_100006204(&qword_1010EC508, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
    *(_QWORD *)(v8 + 4) = sub_100016940(v12, v13, v168);
    v1 = v6;
    swift_release_n(v7, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Command successfully sent to: %s", (uint8_t *)v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    v14 = v9;
    v2 = v162;
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {
    v16 = *(_QWORD *)(v0 + 832);

    v15 = swift_release_n(v16, 2);
  }
  v17 = *(_QWORD *)(v0 + 1008);
  BinaryDecoder.init()(v15);
  v18 = sub_10046DA74();
  BinaryDecoder.decode<A>(_:from:)(&type metadata for AccessoryConfigCommand, v2, v1, &type metadata for AccessoryConfigCommand, v18);
  if (v17)
  {
    v19 = *(_QWORD *)(v0 + 952);
    v20 = *(_QWORD *)(v0 + 944);
    v21 = v2;
    v22 = *(_QWORD *)(v0 + 880);
    v23 = *(_QWORD *)(v0 + 872);
    v24 = *(_QWORD *)(v0 + 864);
    v25 = *(_QWORD *)(v0 + 856);
    v26 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
    v158 = *(_QWORD *)(v0 + 720);
    v163 = *(_QWORD *)(v0 + 728);
    v27 = *(_QWORD *)(v0 + 664);
    v155 = *(_QWORD *)(v0 + 520);
    v147 = *(_QWORD *)(v0 + 512);
    v150 = *(_QWORD *)(v0 + 504);
    log = *(os_log_t *)(v0 + 488);
    *(_QWORD *)type = *(_QWORD *)(v0 + 480);
    v139 = *(_QWORD *)(v0 + 496);
    sub_10001BC14(v21, v1);
    sub_10001BC14(v20, v19);
    sub_1004703BC(v25, v24, v23, v22);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    ((void (*)(uint64_t, os_log_type_t *))log[1].isa)(v139, *(os_log_type_t **)type);
    (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v155, v150);
    v26(v158, v27);
    v26(v163, v27);
LABEL_14:
    v89 = *(_QWORD *)(v0 + 720);
    v90 = *(_QWORD *)(v0 + 712);
    v91 = *(_QWORD *)(v0 + 704);
    v92 = *(_QWORD *)(v0 + 696);
    v93 = *(_QWORD *)(v0 + 688);
    v94 = *(_QWORD *)(v0 + 680);
    v95 = *(_QWORD *)(v0 + 656);
    v96 = *(_QWORD *)(v0 + 640);
    v97 = *(_QWORD *)(v0 + 616);
    v146 = *(_QWORD *)(v0 + 608);
    v149 = *(_QWORD *)(v0 + 600);
    v152 = *(_QWORD *)(v0 + 576);
    v154 = *(_QWORD *)(v0 + 568);
    v157 = *(_QWORD *)(v0 + 544);
    v161 = *(_QWORD *)(v0 + 520);
    v166 = *(_QWORD *)(v0 + 496);
    swift_task_dealloc(*(_QWORD *)(v0 + 728));
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v146);
    swift_task_dealloc(v149);
    swift_task_dealloc(v152);
    swift_task_dealloc(v154);
    swift_task_dealloc(v157);
    swift_task_dealloc(v161);
    swift_task_dealloc(v166);
    v98 = *(uint64_t (**)(void))(v0 + 8);
    return v98();
  }
  v156 = v1;
  v28 = *(_QWORD *)(v0 + 936);
  v144 = (_QWORD *)(v0 + 376);
  v159 = *(_QWORD *)(v0 + 464);
  v29 = *(_QWORD *)(v0 + 256);
  v30 = *(_QWORD *)(v0 + 264);
  v31 = *(_QWORD *)(v0 + 272);
  v32 = *(_QWORD *)(v0 + 280);
  *(_QWORD *)(v0 + 40) = &type metadata for AccessoryConfigCommand;
  *(_QWORD *)(v0 + 48) = v18;
  *(_QWORD *)(v0 + 56) = v28;
  v33 = (_QWORD *)swift_allocObject(&unk_101077F00, 48, 7);
  *(_QWORD *)(v0 + 16) = v33;
  v33[2] = v29;
  v33[3] = v30;
  v33[4] = v31;
  v33[5] = v32;
  v145 = v29;
  v148 = v30;
  v151 = v31;
  v153 = v32;
  sub_1001E9684(v29, v30, v31, v32, sub_10001BBBC);
  sub_10046628C((void (*)(_QWORD, _QWORD))(v0 + 16), v159, v0 + 64);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  sub_10000F9B8(v0 + 64, v0 + 112, &qword_1010FCAD8);
  if ((*(_BYTE *)(v0 + 153) & 1) != 0)
  {
    v164 = v2;
    v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 736);
    v35 = *(_QWORD *)(v0 + 728);
    v36 = *(_QWORD *)(v0 + 720);
    v37 = *(_QWORD *)(v0 + 688);
    v38 = *(_QWORD *)(v0 + 680);
    v39 = *(_QWORD *)(v0 + 664);
    swift_bridgeObjectRelease();
    sub_100059244(v0 + 112, v0 + 208);
    sub_100059280((_QWORD *)(v0 + 208), v0 + 160);
    v34(v37, v35, v39);
    v40 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v34)(v38, v36, v39);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter(v41);
    v43 = os_log_type_enabled(v41, v42);
    v44 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
    v45 = *(_QWORD *)(v0 + 688);
    v46 = *(_QWORD *)(v0 + 680);
    v47 = *(_QWORD *)(v0 + 664);
    v142 = (os_log_t)(v0 + 208);
    if (v43)
    {
      v130 = *(_QWORD *)(v0 + 680);
      v48 = swift_slowAlloc(42, -1);
      v140 = swift_slowAlloc(96, -1);
      v168[0] = v140;
      *(_DWORD *)v48 = 136446979;
      sub_100E01294();
      *(_QWORD *)(v0 + 344) = sub_100016940(v49, v50, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease();
      sub_1000593D4((_QWORD *)(v0 + 160));
      *(_WORD *)(v48 + 12) = 2160;
      *(_QWORD *)(v0 + 352) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v48 + 14, v48 + 22);
      *(_WORD *)(v48 + 22) = 2081;
      v51 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v52 = dispatch thunk of CustomStringConvertible.description.getter(v47, v51);
      *(_QWORD *)(v0 + 360) = sub_100016940(v52, v53, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v0 + 368, v48 + 24, v48 + 32);
      swift_bridgeObjectRelease();
      v44(v45, v47);
      *(_WORD *)(v48 + 32) = 2082;
      v54 = dispatch thunk of CustomStringConvertible.description.getter(v47, v51);
      *(_QWORD *)(v0 + 368) = sub_100016940(v54, v55, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 368, v144, v48 + 34, v48 + 42);
      swift_bridgeObjectRelease();
      v44(v130, v47);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Command failed with %{public}s.\nBeacon %{private,mask.hash}s Command %{public}s", (uint8_t *)v48, 0x2Au);
      swift_arrayDestroy(v140, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v140, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {
      sub_1000593D4((_QWORD *)(v0 + 160));
      v44(v45, v47);
      v44(v46, v47);
    }

    v77 = *(_QWORD *)(v0 + 944);
    v123 = *(_QWORD *)(v0 + 952);
    v124 = *(_QWORD *)(v0 + 872);
    v122 = *(_QWORD *)(v0 + 864);
    v78 = *(_QWORD *)(v0 + 856);
    v125 = *(_QWORD *)(v0 + 880);
    v79 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
    *(_QWORD *)typea = *(_QWORD *)(v0 + 720);
    v141 = *(_QWORD *)(v0 + 728);
    v80 = *(_QWORD *)(v0 + 664);
    v134 = *(_QWORD *)(v0 + 504);
    loga = *(os_log_t *)(v0 + 520);
    *(_QWORD *)v129 = *(_QWORD *)(v0 + 496);
    v132 = *(_QWORD *)(v0 + 512);
    v126 = *(_QWORD *)(v0 + 488);
    v128 = *(_QWORD *)(v0 + 480);
    v81 = type metadata accessor for OwnerCommandManager.Error(0);
    v82 = sub_100006204(&qword_1010FCA40, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_100E3F1F0);
    swift_allocError(v81, v82, 0, 0);
    v84 = v83;
    v85 = sub_100059390();
    v86 = swift_allocError(&type metadata for CentralManager.Error, v85, 0, 0);
    sub_100059280(v142, v87);
    *v84 = v86;
    v88 = swift_storeEnumTagMultiPayload(v84, v81, 1);
    swift_willThrow(v88);
    sub_10001BC14(v164, v156);
    sub_1001E9684(v145, v148, v151, v153, sub_10001BC14);
    sub_10001BC14(v77, v123);
    sub_1004703BC(v78, v122, v124, v125);
    swift_release();
    swift_release();
    swift_release();
    sub_1000593D4(v142);
    sub_100004048(v0 + 64, &qword_1010FCAD8);
    (*(void (**)(os_log_type_t *, uint64_t))(v126 + 8))(*(os_log_type_t **)v129, v128);
    (*(void (**)(os_log_t, uint64_t))(v132 + 8))(loga, v134);
    v79(*(_QWORD *)typea, v80);
    v79(v141, v80);
    goto LABEL_14;
  }
  v56 = *(unsigned __int8 *)(v0 + 144);
  sub_1004703BC(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  if (v56 == 1)
  {
    v160 = v0 + 64;
    v165 = v2;
    v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 736);
    v58 = *(_QWORD *)(v0 + 720);
    v59 = *(_QWORD *)(v0 + 696);
    v60 = *(_QWORD *)(v0 + 664);
    v57(*(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 728), v60);
    v61 = v57(v59, v58, v60);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.default.getter(v62);
    v143 = v62;
    v64 = os_log_type_enabled(v62, v63);
    v65 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
    v66 = *(_QWORD *)(v0 + 704);
    v67 = *(_QWORD *)(v0 + 664);
    v69 = *(_QWORD *)(v0 + 488);
    v68 = *(_QWORD *)(v0 + 496);
    v70 = *(_QWORD *)(v0 + 480);
    if (v64)
    {
      v127 = *(_QWORD *)(v0 + 696);
      v71 = swift_slowAlloc(32, -1);
      v131 = swift_slowAlloc(64, -1);
      v168[0] = v131;
      *(_DWORD *)v71 = 141558531;
      *(_QWORD *)(v0 + 392) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400, v71 + 4, v71 + 12);
      *(_WORD *)(v71 + 12) = 2081;
      v133 = v70;
      v72 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v73 = dispatch thunk of CustomStringConvertible.description.getter(v67, v72);
      *(_QWORD *)(v0 + 400) = sub_100016940(v73, v74, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v0 + 408, v71 + 14, v71 + 22);
      swift_bridgeObjectRelease();
      v65(v66, v67);
      *(_WORD *)(v71 + 22) = 2082;
      v75 = dispatch thunk of CustomStringConvertible.description.getter(v67, v72);
      *(_QWORD *)(v0 + 408) = sub_100016940(v75, v76, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v71 + 24, v71 + 32);
      swift_bridgeObjectRelease();
      v65(v127, v67);
      _os_log_impl((void *)&_mh_execute_header, v143, v63, "Command completed successfully! Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v71, 0x20u);
      swift_arrayDestroy(v131, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v131, -1, -1);
      swift_slowDealloc(v71, -1, -1);
      sub_10001BC14(v165, v156);
      sub_1001E9684(v145, v148, v151, v32, sub_10001BC14);

      sub_100004048(v160, &qword_1010FCAD8);
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v133);
    }
    else
    {
      v108 = *(_QWORD *)(v0 + 696);
      sub_10001BC14(v165, v156);
      sub_1001E9684(v145, v148, v151, v153, sub_10001BC14);

      v65(v108, v67);
      v65(v66, v67);
      sub_100004048(v160, &qword_1010FCAD8);
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v70);
    }
    v109 = *(_QWORD *)(v0 + 832);
    swift_bridgeObjectRelease();
    v110 = swift_retain_n(v109, 2);
    v111 = Logger.logObject.getter(v110);
    v112 = static os_log_type_t.default.getter(v111);
    v113 = os_log_type_enabled(v111, v112);
    v114 = *(_QWORD *)(v0 + 832);
    if (v113)
    {
      v115 = (uint8_t *)swift_slowAlloc(12, -1);
      v116 = swift_slowAlloc(32, -1);
      *(_DWORD *)v115 = 136315138;
      v168[0] = v116;
      *v144 = v114;
      v117 = type metadata accessor for Peripheral(0);
      v118 = sub_100006204(&qword_1010EC508, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
      v119 = dispatch thunk of CustomStringConvertible.description.getter(v117, v118);
      *(_QWORD *)(v0 + 384) = sub_100016940(v119, v120, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 384, v0 + 392, v115 + 4, v115 + 12);
      swift_release_n(v114, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v111, v112, "Canceling connection to %s", v115, 0xCu);
      swift_arrayDestroy(v116, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v116, -1, -1);
      swift_slowDealloc(v115, -1, -1);

    }
    else
    {

      swift_release_n(v114, 2);
    }
    v167 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                             + async function pointer to dispatch thunk of Peripheral.cancelConnection());
    v121 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                      + 1));
    *(_QWORD *)(v0 + 1016) = v121;
    *v121 = v0;
    v121[1] = sub_100456438;
    v98 = v167;
    return v98();
  }
  v101 = *(_QWORD *)(v0 + 488);
  v100 = *(_QWORD *)(v0 + 496);
  v102 = *(_QWORD *)(v0 + 480);
  sub_10001BC14(v2, v156);
  sub_1001E9684(v145, v148, v151, v32, sub_10001BC14);
  sub_100004048(v0 + 64, &qword_1010FCAD8);
  (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v100, v102);
  v103 = *(_QWORD *)(v0 + 984);
  v104 = *(_QWORD *)(v0 + 920);
  v105 = swift_allocObject(&unk_101078630, 32, 7);
  *(_QWORD *)(v0 + 992) = v105;
  *(_QWORD *)(v105 + 16) = v104;
  *(_QWORD *)(v105 + 24) = v103;
  v106 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain();
  swift_bridgeObjectRetain(v103);
  v107 = (_QWORD *)swift_task_alloc(v106);
  *(_QWORD *)(v0 + 1000) = v107;
  *v107 = v0;
  v107[1] = sub_100455568;
  return withTimeout<A>(_:block:)(v0 + 320, 0x40AAD21B3B700000, 3, &unk_1010FCCB8, v105, &type metadata for Data);
}

uint64_t sub_100456438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1016);
  *(_QWORD *)(*(_QWORD *)v1 + 1024) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100457118;
  else
    v3 = sub_10045649C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10045649C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 880);
  v2 = *(_QWORD *)(v0 + 872);
  v3 = *(_QWORD *)(v0 + 864);
  v4 = *(_QWORD *)(v0 + 856);
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  v25 = *(_QWORD *)(v0 + 720);
  v27 = *(_QWORD *)(v0 + 728);
  v6 = *(_QWORD *)(v0 + 664);
  v21 = *(_QWORD *)(v0 + 520);
  v7 = *(_QWORD *)(v0 + 504);
  v8 = *(_QWORD *)(v0 + 512);
  sub_10001BC14(*(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 952));
  sub_1004703BC(v4, v3, v2, v1);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v21, v7);
  v5(v25, v6);
  v5(v27, v6);
  v9 = *(_QWORD *)(v0 + 720);
  v10 = *(_QWORD *)(v0 + 712);
  v11 = *(_QWORD *)(v0 + 704);
  v12 = *(_QWORD *)(v0 + 696);
  v13 = *(_QWORD *)(v0 + 688);
  v14 = *(_QWORD *)(v0 + 680);
  v15 = *(_QWORD *)(v0 + 656);
  v16 = *(_QWORD *)(v0 + 640);
  v17 = *(_QWORD *)(v0 + 616);
  v19 = *(_QWORD *)(v0 + 608);
  v20 = *(_QWORD *)(v0 + 600);
  v22 = *(_QWORD *)(v0 + 576);
  v23 = *(_QWORD *)(v0 + 568);
  v24 = *(_QWORD *)(v0 + 544);
  v26 = *(_QWORD *)(v0 + 520);
  v28 = *(_QWORD *)(v0 + 496);
  swift_task_dealloc(*(_QWORD *)(v0 + 728));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100456660()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  v2 = *(_QWORD *)(v0 + 728);
  v3 = *(_QWORD *)(v0 + 720);
  v4 = *(_QWORD *)(v0 + 664);
  swift_release(*(_QWORD *)(v0 + 768));
  v1(v3, v4);
  v1(v2, v4);
  v5 = *(_QWORD *)(v0 + 720);
  v6 = *(_QWORD *)(v0 + 712);
  v7 = *(_QWORD *)(v0 + 704);
  v8 = *(_QWORD *)(v0 + 696);
  v9 = *(_QWORD *)(v0 + 688);
  v10 = *(_QWORD *)(v0 + 680);
  v11 = *(_QWORD *)(v0 + 656);
  v12 = *(_QWORD *)(v0 + 640);
  v13 = *(_QWORD *)(v0 + 616);
  v15 = *(_QWORD *)(v0 + 608);
  v16 = *(_QWORD *)(v0 + 600);
  v17 = *(_QWORD *)(v0 + 576);
  v18 = *(_QWORD *)(v0 + 568);
  v19 = *(_QWORD *)(v0 + 544);
  v20 = *(_QWORD *)(v0 + 520);
  v21 = *(_QWORD *)(v0 + 496);
  swift_task_dealloc(*(_QWORD *)(v0 + 728));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004567BC()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  v2 = *(_QWORD *)(v0 + 728);
  v3 = *(_QWORD *)(v0 + 720);
  v4 = *(_QWORD *)(v0 + 664);
  swift_release(*(_QWORD *)(v0 + 768));
  v1(v3, v4);
  v1(v2, v4);
  v5 = *(_QWORD *)(v0 + 720);
  v6 = *(_QWORD *)(v0 + 712);
  v7 = *(_QWORD *)(v0 + 704);
  v8 = *(_QWORD *)(v0 + 696);
  v9 = *(_QWORD *)(v0 + 688);
  v10 = *(_QWORD *)(v0 + 680);
  v11 = *(_QWORD *)(v0 + 656);
  v12 = *(_QWORD *)(v0 + 640);
  v13 = *(_QWORD *)(v0 + 616);
  v15 = *(_QWORD *)(v0 + 608);
  v16 = *(_QWORD *)(v0 + 600);
  v17 = *(_QWORD *)(v0 + 576);
  v18 = *(_QWORD *)(v0 + 568);
  v19 = *(_QWORD *)(v0 + 544);
  v20 = *(_QWORD *)(v0 + 520);
  v21 = *(_QWORD *)(v0 + 496);
  swift_task_dealloc(*(_QWORD *)(v0 + 728));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100456918()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 832);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  v3 = *(_QWORD *)(v0 + 728);
  v4 = *(_QWORD *)(v0 + 720);
  v5 = *(_QWORD *)(v0 + 664);
  swift_release(*(_QWORD *)(v0 + 768));
  swift_release(v1);
  v2(v4, v5);
  v2(v3, v5);
  v6 = *(_QWORD *)(v0 + 720);
  v7 = *(_QWORD *)(v0 + 712);
  v8 = *(_QWORD *)(v0 + 704);
  v9 = *(_QWORD *)(v0 + 696);
  v10 = *(_QWORD *)(v0 + 688);
  v11 = *(_QWORD *)(v0 + 680);
  v12 = *(_QWORD *)(v0 + 656);
  v13 = *(_QWORD *)(v0 + 640);
  v14 = *(_QWORD *)(v0 + 616);
  v16 = *(_QWORD *)(v0 + 608);
  v17 = *(_QWORD *)(v0 + 600);
  v18 = *(_QWORD *)(v0 + 576);
  v19 = *(_QWORD *)(v0 + 568);
  v20 = *(_QWORD *)(v0 + 544);
  v21 = *(_QWORD *)(v0 + 520);
  v22 = *(_QWORD *)(v0 + 496);
  swift_task_dealloc(*(_QWORD *)(v0 + 728));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100456A80()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  v2 = *(_QWORD *)(v0 + 728);
  v3 = *(_QWORD *)(v0 + 720);
  v4 = *(_QWORD *)(v0 + 664);
  sub_1004703BC(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 864), *(_QWORD *)(v0 + 872), *(_QWORD *)(v0 + 880));
  swift_release();
  swift_release();
  v1(v3, v4);
  v1(v2, v4);
  v5 = *(_QWORD *)(v0 + 720);
  v6 = *(_QWORD *)(v0 + 712);
  v7 = *(_QWORD *)(v0 + 704);
  v8 = *(_QWORD *)(v0 + 696);
  v9 = *(_QWORD *)(v0 + 688);
  v10 = *(_QWORD *)(v0 + 680);
  v11 = *(_QWORD *)(v0 + 656);
  v12 = *(_QWORD *)(v0 + 640);
  v13 = *(_QWORD *)(v0 + 616);
  v15 = *(_QWORD *)(v0 + 608);
  v16 = *(_QWORD *)(v0 + 600);
  v17 = *(_QWORD *)(v0 + 576);
  v18 = *(_QWORD *)(v0 + 568);
  v19 = *(_QWORD *)(v0 + 544);
  v20 = *(_QWORD *)(v0 + 520);
  v21 = *(_QWORD *)(v0 + 496);
  swift_task_dealloc(*(_QWORD *)(v0 + 728));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100456C00()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  v2 = *(_QWORD *)(v0 + 728);
  v3 = *(_QWORD *)(v0 + 720);
  v4 = *(_QWORD *)(v0 + 664);
  sub_1004703BC(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 864), *(_QWORD *)(v0 + 872), *(_QWORD *)(v0 + 880));
  swift_release();
  swift_release();
  v1(v3, v4);
  v1(v2, v4);
  v5 = *(_QWORD *)(v0 + 720);
  v6 = *(_QWORD *)(v0 + 712);
  v7 = *(_QWORD *)(v0 + 704);
  v8 = *(_QWORD *)(v0 + 696);
  v9 = *(_QWORD *)(v0 + 688);
  v10 = *(_QWORD *)(v0 + 680);
  v11 = *(_QWORD *)(v0 + 656);
  v12 = *(_QWORD *)(v0 + 640);
  v13 = *(_QWORD *)(v0 + 616);
  v15 = *(_QWORD *)(v0 + 608);
  v16 = *(_QWORD *)(v0 + 600);
  v17 = *(_QWORD *)(v0 + 576);
  v18 = *(_QWORD *)(v0 + 568);
  v19 = *(_QWORD *)(v0 + 544);
  v20 = *(_QWORD *)(v0 + 520);
  v21 = *(_QWORD *)(v0 + 496);
  swift_task_dealloc(*(_QWORD *)(v0 + 728));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100456D80()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 880);
  v2 = *(_QWORD *)(v0 + 872);
  v3 = *(_QWORD *)(v0 + 864);
  v4 = *(_QWORD *)(v0 + 856);
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  v26 = *(_QWORD *)(v0 + 720);
  v28 = *(_QWORD *)(v0 + 728);
  v6 = *(_QWORD *)(v0 + 664);
  v22 = *(_QWORD *)(v0 + 520);
  v7 = *(_QWORD *)(v0 + 504);
  v8 = *(_QWORD *)(v0 + 512);
  sub_10001BC14(*(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 952));
  sub_1004703BC(v4, v3, v2, v1);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v22, v7);
  v5(v26, v6);
  v5(v28, v6);
  v9 = *(_QWORD *)(v0 + 720);
  v10 = *(_QWORD *)(v0 + 712);
  v11 = *(_QWORD *)(v0 + 704);
  v12 = *(_QWORD *)(v0 + 696);
  v13 = *(_QWORD *)(v0 + 688);
  v14 = *(_QWORD *)(v0 + 680);
  v15 = *(_QWORD *)(v0 + 656);
  v16 = *(_QWORD *)(v0 + 640);
  v17 = *(_QWORD *)(v0 + 616);
  v19 = *(_QWORD *)(v0 + 608);
  v20 = *(_QWORD *)(v0 + 600);
  v21 = *(_QWORD *)(v0 + 576);
  v23 = *(_QWORD *)(v0 + 568);
  v24 = *(_QWORD *)(v0 + 544);
  v25 = *(_QWORD *)(v0 + 520);
  v27 = *(_QWORD *)(v0 + 496);
  swift_task_dealloc(*(_QWORD *)(v0 + 728));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100456F4C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 880);
  v2 = *(_QWORD *)(v0 + 872);
  v3 = *(_QWORD *)(v0 + 864);
  v4 = *(_QWORD *)(v0 + 856);
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  v26 = *(_QWORD *)(v0 + 720);
  v28 = *(_QWORD *)(v0 + 728);
  v6 = *(_QWORD *)(v0 + 664);
  v22 = *(_QWORD *)(v0 + 520);
  v7 = *(_QWORD *)(v0 + 504);
  v8 = *(_QWORD *)(v0 + 512);
  sub_10001BC14(*(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 952));
  sub_1004703BC(v4, v3, v2, v1);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v22, v7);
  v5(v26, v6);
  v5(v28, v6);
  v9 = *(_QWORD *)(v0 + 720);
  v10 = *(_QWORD *)(v0 + 712);
  v11 = *(_QWORD *)(v0 + 704);
  v12 = *(_QWORD *)(v0 + 696);
  v13 = *(_QWORD *)(v0 + 688);
  v14 = *(_QWORD *)(v0 + 680);
  v15 = *(_QWORD *)(v0 + 656);
  v16 = *(_QWORD *)(v0 + 640);
  v17 = *(_QWORD *)(v0 + 616);
  v19 = *(_QWORD *)(v0 + 608);
  v20 = *(_QWORD *)(v0 + 600);
  v21 = *(_QWORD *)(v0 + 576);
  v23 = *(_QWORD *)(v0 + 568);
  v24 = *(_QWORD *)(v0 + 544);
  v25 = *(_QWORD *)(v0 + 520);
  v27 = *(_QWORD *)(v0 + 496);
  swift_task_dealloc(*(_QWORD *)(v0 + 728));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100457118()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 880);
  v2 = *(_QWORD *)(v0 + 872);
  v3 = *(_QWORD *)(v0 + 864);
  v4 = *(_QWORD *)(v0 + 856);
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  v26 = *(_QWORD *)(v0 + 720);
  v28 = *(_QWORD *)(v0 + 728);
  v6 = *(_QWORD *)(v0 + 664);
  v22 = *(_QWORD *)(v0 + 520);
  v7 = *(_QWORD *)(v0 + 504);
  v8 = *(_QWORD *)(v0 + 512);
  sub_10001BC14(*(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 952));
  sub_1004703BC(v4, v3, v2, v1);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v22, v7);
  v5(v26, v6);
  v5(v28, v6);
  v9 = *(_QWORD *)(v0 + 720);
  v10 = *(_QWORD *)(v0 + 712);
  v11 = *(_QWORD *)(v0 + 704);
  v12 = *(_QWORD *)(v0 + 696);
  v13 = *(_QWORD *)(v0 + 688);
  v14 = *(_QWORD *)(v0 + 680);
  v15 = *(_QWORD *)(v0 + 656);
  v16 = *(_QWORD *)(v0 + 640);
  v17 = *(_QWORD *)(v0 + 616);
  v19 = *(_QWORD *)(v0 + 608);
  v20 = *(_QWORD *)(v0 + 600);
  v21 = *(_QWORD *)(v0 + 576);
  v23 = *(_QWORD *)(v0 + 568);
  v24 = *(_QWORD *)(v0 + 544);
  v25 = *(_QWORD *)(v0 + 520);
  v27 = *(_QWORD *)(v0 + 496);
  swift_task_dealloc(*(_QWORD *)(v0 + 728));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004572E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t);

  v3[2] = a1;
  v5 = sub_10001A9A8(&qword_1010EC638);
  v3[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[4] = v6;
  v7 = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[5] = v7;
  v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of Characteristic.write(data:)
                                                 + async function pointer to dispatch thunk of Characteristic.write(data:));
  v8 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Characteristic.write(data:)
                                  + 1));
  v3[6] = v8;
  *v8 = v3;
  v8[1] = sub_100042D34;
  return v10(v7, a3);
}

uint64_t sub_100457390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v4[16] = a3;
  v4[17] = a4;
  v4[14] = a1;
  v4[15] = a2;
  v5 = sub_10001A9A8(&qword_1010FCA38);
  v4[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v4[19] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[20] = v7;
  v4[21] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v4[22] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[23] = v9;
  v4[24] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AccessoryCommand(0);
  v4[25] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[26] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v4[27] = v12;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[28] = swift_task_alloc(v13);
  v4[29] = swift_task_alloc(v13);
  v14 = type metadata accessor for UUID(0);
  v4[30] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v4[31] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[32] = swift_task_alloc(v16);
  v4[33] = swift_task_alloc(v16);
  v4[34] = swift_task_alloc(v16);
  return swift_task_switch(sub_1004574C0, 0, 0);
}

uint64_t sub_1004574C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[34];
  v2 = v0[30];
  v3 = v0[31];
  v4 = v0[14] + *(int *)(v0[25] + 20);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[35] = v5;
  v5(v1, v4, v2);
  v6 = sub_10001A9A8(&qword_1011003C0);
  v7 = *(unsigned __int8 *)(v3 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(v6, v8 + *(_QWORD *)(v3 + 72), v7 | 7);
  v0[36] = v9;
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  v5(v9 + v8, v1, v2);
  v10 = (_QWORD *)swift_task_alloc(dword_10112173C);
  v0[37] = v10;
  *v10 = v0;
  v10[1] = sub_100457598;
  return sub_100E045A0(v9);
}

uint64_t sub_100457598(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1004575FC, 0, 0);
}

uint64_t sub_1004575FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  os_log_type_t type[8];
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t);
  void *aBlock;
  id v85;
  uint64_t v86;
  uint64_t v87;

  v1 = *(_QWORD *)(v0 + 304);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v40 = *(_QWORD *)(v0 + 304);
    else
      v40 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 304));
    v41 = _CocoaArrayWrapper.endIndex.getter(v40);
    swift_bridgeObjectRelease();
    if (v41)
    {
LABEL_3:
      if ((v1 & 0xC000000000000001) != 0)
      {
        v85 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 304));
      }
      else
      {
        if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_24;
        }
        v85 = *(id *)(*(_QWORD *)(v0 + 304) + 32);
      }
      aBlock = (void *)(v0 + 16);
      v86 = v0 + 64;
      swift_bridgeObjectRelease();
      if (qword_1010E9C18 == -1)
      {
LABEL_7:
        v2 = *(_QWORD *)(v0 + 272);
        v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 280);
        v4 = *(_QWORD *)(v0 + 256);
        v6 = *(_QWORD *)(v0 + 232);
        v5 = *(_QWORD *)(v0 + 240);
        v7 = *(_QWORD *)(v0 + 112);
        v8 = type metadata accessor for Logger(0);
        sub_10001A9E8(v8, (uint64_t)qword_1011B6F48);
        sub_10005972C(v7, v6, type metadata accessor for AccessoryCommand);
        v9 = v3(v4, v2, v5);
        v10 = Logger.logObject.getter(v9);
        v11 = static os_log_type_t.default.getter(v10);
        v12 = os_log_type_enabled(v10, v11);
        v14 = *(_QWORD *)(v0 + 248);
        v13 = *(_QWORD *)(v0 + 256);
        v16 = *(_QWORD *)(v0 + 232);
        v15 = *(_QWORD *)(v0 + 240);
        if (v12)
        {
          v82 = *(_QWORD *)(v0 + 248);
          v17 = swift_slowAlloc(32, -1);
          v79 = swift_slowAlloc(64, -1);
          v87 = v79;
          *(_DWORD *)v17 = 136446723;
          sub_100C58714();
          *(_QWORD *)(v0 + 72) = sub_100016940(v18, v19, &v87);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v17 + 4, v17 + 12);
          swift_bridgeObjectRelease();
          sub_1000126B0(v16, type metadata accessor for AccessoryCommand);
          *(_WORD *)(v17 + 12) = 2160;
          *(_QWORD *)(v0 + 80) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v17 + 14, v17 + 22);
          *(_WORD *)(v17 + 22) = 2081;
          v20 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v21 = dispatch thunk of CustomStringConvertible.description.getter(v15, v20);
          *(_QWORD *)(v0 + 88) = sub_100016940(v21, v22, &v87);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v17 + 24, v17 + 32);
          swift_bridgeObjectRelease();
          v83 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
          v83(v13, v15);
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Executing %{public}s for beacon %{private,mask.hash}s", (uint8_t *)v17, 0x20u);
          swift_arrayDestroy(v79, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v79, -1, -1);
          swift_slowDealloc(v17, -1, -1);
        }
        else
        {
          sub_1000126B0(*(_QWORD *)(v0 + 232), type metadata accessor for AccessoryCommand);
          v83 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
          v83(v13, v15);
        }

        v80 = *(_QWORD *)(v0 + 240);
        *(_QWORD *)type = *(_QWORD *)(v0 + 272);
        v24 = *(_QWORD *)(v0 + 216);
        v23 = *(_QWORD *)(v0 + 224);
        v25 = *(_QWORD *)(v0 + 208);
        v77 = *(_QWORD *)(v0 + 184);
        v78 = *(_QWORD *)(v0 + 176);
        v73 = *(_QWORD *)(v0 + 192);
        v74 = *(_QWORD *)(v0 + 168);
        v75 = *(_QWORD *)(v0 + 152);
        v27 = *(_QWORD *)(v0 + 128);
        v26 = *(_QWORD *)(v0 + 136);
        v28 = *(_QWORD *)(v0 + 120);
        v76 = *(_QWORD *)(v0 + 160);
        sub_10005972C(*(_QWORD *)(v0 + 112), v23, type metadata accessor for AccessoryCommand);
        v29 = *(unsigned __int8 *)(v25 + 80);
        v30 = (v29 + 32) & ~v29;
        v31 = (v24 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
        v32 = swift_allocObject(&unk_101077D20, v31 + 16, v29 | 7);
        *(_QWORD *)(v32 + 16) = v28;
        *(_QWORD *)(v32 + 24) = v85;
        sub_1000126EC(v23, v32 + v30, type metadata accessor for AccessoryCommand);
        v33 = (_QWORD *)(v32 + v31);
        *v33 = v27;
        v33[1] = v26;
        *(_QWORD *)(v0 + 48) = sub_10046D5EC;
        *(_QWORD *)(v0 + 56) = v32;
        *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
        *(_QWORD *)(v0 + 24) = 1107296256;
        *(_QWORD *)(v0 + 32) = sub_100016FB8;
        *(_QWORD *)(v0 + 40) = &unk_101077D38;
        v34 = _Block_copy(aBlock);
        swift_retain();
        v35 = v85;
        v36 = swift_retain();
        static DispatchQoS.unspecified.getter(v36);
        *(_QWORD *)(v0 + 64) = _swiftEmptyArrayStorage;
        v37 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v38 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v39 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        dispatch thunk of SetAlgebra.init<A>(_:)(v86, v38, v39, v75, v37);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v73, v74, v34);
        _Block_release(v34);

        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v74, v75);
        (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v73, v78);
        v83(*(_QWORD *)type, v80);
        swift_release();
        goto LABEL_21;
      }
LABEL_24:
      swift_once(&qword_1010E9C18, sub_10044E058);
      goto LABEL_7;
    }
  }
  else if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v42 = *(_QWORD *)(v0 + 272);
  v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 280);
  v44 = *(_QWORD *)(v0 + 264);
  v45 = *(_QWORD *)(v0 + 240);
  v46 = type metadata accessor for Logger(0);
  sub_10001A9E8(v46, (uint64_t)qword_1011B6F48);
  v47 = v43(v44, v42, v45);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.error.getter(v48);
  v50 = os_log_type_enabled(v48, v49);
  v51 = *(_QWORD *)(v0 + 264);
  v52 = *(_QWORD *)(v0 + 240);
  v53 = *(_QWORD *)(v0 + 248);
  if (v50)
  {
    v54 = swift_slowAlloc(22, -1);
    v55 = swift_slowAlloc(32, -1);
    v87 = v55;
    *(_DWORD *)v54 = 141558275;
    *(_QWORD *)(v0 + 96) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v54 + 4, v54 + 12);
    *(_WORD *)(v54 + 12) = 2081;
    v56 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v57 = dispatch thunk of CustomStringConvertible.description.getter(v52, v56);
    *(_QWORD *)(v0 + 104) = sub_100016940(v57, v58, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v54 + 14, v54 + 22);
    swift_bridgeObjectRelease();
    v59 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    v59(v51, v52);
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "No peripheral for beacon %{private,mask.hash}s", (uint8_t *)v54, 0x16u);
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v54, -1, -1);
  }
  else
  {
    v59 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
    v59(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 240));
  }

  v60 = *(_QWORD *)(v0 + 272);
  v61 = *(_QWORD *)(v0 + 240);
  v62 = *(_QWORD *)(v0 + 144);
  v63 = *(void (**)(uint64_t))(v0 + 128);
  v64 = type metadata accessor for OwnerCommandManager.Error(0);
  swift_storeEnumTagMultiPayload(v62, v64, 16);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v62, 0, 1, v64);
  v63(v62);
  sub_100004048(v62, &qword_1010FCA38);
  v59(v60, v61);
LABEL_21:
  v65 = *(_QWORD *)(v0 + 264);
  v66 = *(_QWORD *)(v0 + 256);
  v68 = *(_QWORD *)(v0 + 224);
  v67 = *(_QWORD *)(v0 + 232);
  v69 = *(_QWORD *)(v0 + 192);
  v70 = *(_QWORD *)(v0 + 168);
  v71 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100457DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v5[14] = a4;
  v5[15] = a5;
  v5[12] = a2;
  v5[13] = a3;
  v5[11] = a1;
  v6 = sub_10001A9A8(&qword_1010FCA38);
  v5[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v5[17] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[18] = v8;
  v5[19] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v5[20] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[21] = v10;
  v5[22] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v5[23] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[24] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v5[25] = v13;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[26] = swift_task_alloc(v14);
  v5[27] = swift_task_alloc(v14);
  v5[28] = swift_task_alloc(v14);
  return swift_task_switch(sub_100457EC0, 0, 0);
}

uint64_t sub_100457EC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = sub_10001A9A8(&qword_1011003C0);
  v5 = *(_QWORD *)(v2 + 72);
  LODWORD(v6) = *(_DWORD *)(v2 + 80);
  *(_DWORD *)(v0 + 264) = v6;
  v6 = v6;
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject(v4, v7 + v5, v6 | 7);
  *(_QWORD *)(v0 + 232) = v8;
  *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  *(_QWORD *)(v0 + 240) = v9;
  v9(v8 + v7, v3, v1);
  v10 = (_QWORD *)swift_task_alloc(dword_10112173C);
  *(_QWORD *)(v0 + 248) = v10;
  *v10 = v0;
  v10[1] = sub_100457F84;
  return sub_100E045A0(v8);
}

uint64_t sub_100457F84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  *(_QWORD *)(*(_QWORD *)v1 + 256) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100457FEC, 0, 0);
}

uint64_t sub_100457FEC()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v1 = *(_QWORD *)(v0 + 256);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v23 = *(_QWORD *)(v0 + 256);
    else
      v23 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 256));
    v24 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease();
    if (v24)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    if ((v1 & 0xC000000000000001) != 0)
    {
      v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 256));
      goto LABEL_6;
    }
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v56 = *(id *)(*(_QWORD *)(v0 + 256) + 32);
LABEL_6:
      v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 240);
      v3 = *(unsigned __int8 *)(v0 + 264);
      v4 = *(_QWORD *)(v0 + 208);
      v5 = *(_QWORD *)(v0 + 216);
      v6 = *(_QWORD *)(v0 + 200);
      v52 = *(_QWORD *)(v0 + 192);
      v7 = *(_QWORD *)(v0 + 184);
      v55 = *(_QWORD *)(v0 + 176);
      v60 = *(_QWORD *)(v0 + 168);
      v61 = *(_QWORD *)(v0 + 160);
      v57 = *(_QWORD *)(v0 + 152);
      v59 = *(_QWORD *)(v0 + 144);
      v58 = *(_QWORD *)(v0 + 136);
      v51 = *(_QWORD *)(v0 + 120);
      v8 = *(_QWORD *)(v0 + 96);
      v53 = *(_QWORD *)(v0 + 104);
      v54 = *(_QWORD *)(v0 + 112);
      v9 = *(_QWORD *)(v0 + 88);
      swift_bridgeObjectRelease();
      v10 = (v3 + 32) & ~v3;
      v2(v5, v8, v7);
      v2(v4, v51, v7);
      v11 = (v6 + v3 + v10) & ~v3;
      v12 = (v6 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
      v13 = swift_allocObject(&unk_101077DC0, v12 + 16, v3 | 7);
      *(_QWORD *)(v13 + 16) = v9;
      *(_QWORD *)(v13 + 24) = v56;
      v14 = v13 + v10;
      v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32);
      v15(v14, v5, v7);
      v15(v13 + v11, v4, v7);
      v16 = (_QWORD *)(v13 + v12);
      *v16 = v53;
      v16[1] = v54;
      *(_QWORD *)(v0 + 48) = sub_10046D7D4;
      *(_QWORD *)(v0 + 56) = v13;
      *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
      *(_QWORD *)(v0 + 24) = 1107296256;
      *(_QWORD *)(v0 + 32) = sub_100016FB8;
      *(_QWORD *)(v0 + 40) = &unk_101077DD8;
      v17 = _Block_copy((const void *)(v0 + 16));
      swift_retain();
      v18 = v56;
      v19 = swift_retain();
      static DispatchQoS.unspecified.getter(v19);
      *(_QWORD *)(v0 + 64) = _swiftEmptyArrayStorage;
      v20 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v21 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v22 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 64, v21, v22, v58, v20);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v55, v57, v17);
      _Block_release(v17);

      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v55, v61);
      swift_release();
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  if (qword_1010E9C18 != -1)
LABEL_19:
    swift_once(&qword_1010E9C18, sub_10044E058);
  v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 240);
  v26 = *(_QWORD *)(v0 + 224);
  v27 = *(_QWORD *)(v0 + 184);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = type metadata accessor for Logger(0);
  sub_10001A9E8(v29, (uint64_t)qword_1011B6F48);
  v30 = v25(v26, v28, v27);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.error.getter(v31);
  v33 = os_log_type_enabled(v31, v32);
  v34 = *(_QWORD *)(v0 + 224);
  v35 = *(_QWORD *)(v0 + 184);
  v36 = *(_QWORD *)(v0 + 192);
  if (v33)
  {
    v37 = swift_slowAlloc(22, -1);
    v38 = swift_slowAlloc(32, -1);
    v62 = v38;
    *(_DWORD *)v37 = 141558275;
    *(_QWORD *)(v0 + 72) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v37 + 4, v37 + 12);
    *(_WORD *)(v37 + 12) = 2081;
    v39 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v40 = dispatch thunk of CustomStringConvertible.description.getter(v35, v39);
    *(_QWORD *)(v0 + 80) = sub_100016940(v40, v41, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v37 + 14, v37 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "No peripheral for beacon %{private,mask.hash}s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v36 + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 184));
  }

  v42 = *(_QWORD *)(v0 + 128);
  v43 = *(void (**)(uint64_t))(v0 + 104);
  v44 = type metadata accessor for OwnerCommandManager.Error(0);
  swift_storeEnumTagMultiPayload(v42, v44, 16);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v42, 0, 1, v44);
  v43(v42);
  sub_100004048(v42, &qword_1010FCA38);
LABEL_16:
  v45 = *(_QWORD *)(v0 + 216);
  v46 = *(_QWORD *)(v0 + 208);
  v47 = *(_QWORD *)(v0 + 176);
  v48 = *(_QWORD *)(v0 + 152);
  v49 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100458574(uint64_t a1, char *a2, void (*a3)(_QWORD, _QWORD), void (*a4)(_QWORD, _QWORD), uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  id v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  os_log_type_t v36;
  int v37;
  uint64_t v38;
  uint8_t *v39;
  uint8_t *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD, _QWORD);
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint8_t *v48;
  os_log_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  void (*v55)(char *, uint64_t, __n128);
  char *v56;
  id v57;
  uint64_t v58;
  void (*v59)(char *, void (*)(_QWORD, _QWORD), uint64_t);
  char *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, char *, uint64_t);
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint8_t *v93;
  uint8_t *v94;
  int v95;
  uint64_t v96;
  os_log_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t);
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(_QWORD, _QWORD);
  char *v110;
  void *v111;
  char *v112;
  uint64_t v113[3];
  uint64_t v114;
  _BYTE v115[32];

  v107 = a6;
  v105 = a5;
  v100 = sub_10001A9A8(&qword_1010FCA58);
  v108 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v106 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(char **)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v104 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v112 = (char *)&v93 - v16;
  v17 = __chkstk_darwin(v15);
  v103 = (char *)&v93 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v93 - v20;
  v101 = v22;
  __chkstk_darwin(v19);
  v24 = (char *)&v93 - v23;
  v111 = a2;
  v25 = *(void **)&a2[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
  v26 = objc_msgSend(v25, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

  v27 = a1 + 112;
  v28 = swift_beginAccess(a1 + 112, v115, 0, 0);
  v99 = a1;
  v29 = *(_QWORD *)(a1 + 112);
  v30 = *(_QWORD *)(v29 + 16);
  v109 = a4;
  v110 = v21;
  if (!v30)
    goto LABEL_8;
  swift_bridgeObjectRetain(v29);
  v31 = sub_100003FB0((uint64_t)v24);
  if ((v32 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    v55 = (void (*)(char *, uint64_t, __n128))*((_QWORD *)v12 + 1);
    v55(v24, v11, v28);
    v56 = v103;
    goto LABEL_11;
  }
  v98 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v31);
  swift_retain();
  swift_bridgeObjectRelease();
  v102 = (void (*)(char *, uint64_t))*((_QWORD *)v12 + 1);
  v102(v24, v11);
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v33 = type metadata accessor for Logger(0);
  sub_10001A9E8(v33, (uint64_t)qword_1011B6F48);
  v34 = v111;
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter(v35);
  v37 = v36;
  if (os_log_type_enabled(v35, v36))
  {
    v97 = v35;
    v38 = swift_slowAlloc(12, -1);
    v95 = v37;
    v39 = (uint8_t *)v38;
    v96 = swift_slowAlloc(32, -1);
    v113[0] = v96;
    v93 = v39;
    *(_DWORD *)v39 = 136446210;
    v40 = v39 + 12;
    v94 = v39 + 4;
    v41 = objc_msgSend(v25, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);

    v42 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v43 = dispatch thunk of CustomStringConvertible.description.getter(v11, v42);
    v44 = a3;
    v45 = v12;
    v47 = v46;
    v102(v110, v11);
    v114 = sub_100016940(v43, v47, v113);
    v48 = v40;
    a4 = v109;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115, v94, v48);

    v12 = v45;
    a3 = v44;
    v21 = v110;
    swift_bridgeObjectRelease();
    v49 = v97;
    v50 = v93;
    _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v95, "Canceling disconnection block for %{public}s", v93, 0xCu);
    v51 = v96;
    swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
    v52 = v51;
    v53 = v102;
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v50, -1, -1);

  }
  else
  {

    v53 = v102;
  }
  dispatch thunk of DispatchWorkItem.cancel()(v54);
  v57 = objc_msgSend(v25, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v57);

  swift_beginAccess(v27, v113, 33, 0);
  sub_100103D04((uint64_t)v21);
  v53(v21, v11);
  swift_endAccess(v113);
  swift_release();
  swift_release();
  v56 = v103;
  v55 = (void (*)(char *, uint64_t, __n128))v53;
LABEL_11:
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v58 = type metadata accessor for Logger(0);
  sub_10001A9E8(v58, (uint64_t)qword_1011B6F48);
  v102 = (void (*)(char *, uint64_t))a3;
  v103 = v12;
  v59 = (void (*)(char *, void (*)(_QWORD, _QWORD), uint64_t))*((_QWORD *)v12 + 2);
  v59(v56, a3, v11);
  v60 = v112;
  v61 = ((uint64_t (*)(char *, void (*)(_QWORD, _QWORD), uint64_t))v59)(v112, a4, v11);
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.default.getter(v62);
  v64 = v63;
  if (os_log_type_enabled(v62, v63))
  {
    v65 = swift_slowAlloc(32, -1);
    v98 = swift_slowAlloc(64, -1);
    v113[0] = v98;
    *(_DWORD *)v65 = 141558531;
    v114 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115, v65 + 4, v65 + 12);
    *(_WORD *)(v65 + 12) = 2081;
    v66 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    LODWORD(v97) = v64;
    v67 = dispatch thunk of CustomStringConvertible.description.getter(v11, v66);
    v114 = sub_100016940(v67, v68, v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115, v65 + 14, v65 + 22);
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v55)(v56, v11);
    *(_WORD *)(v65 + 22) = 2082;
    v69 = v112;
    v70 = dispatch thunk of CustomStringConvertible.description.getter(v11, v66);
    v114 = sub_100016940(v70, v71, v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115, v65 + 24, v65 + 32);
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v55)(v69, v11);
    _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v97, "Disconnecting from beacon %{private,mask.hash}s. CommandId: %{public}s", (uint8_t *)v65, 0x20u);
    v72 = v98;
    swift_arrayDestroy(v98, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1, -1);
    swift_slowDealloc(v65, -1, -1);
  }
  else
  {
    ((void (*)(char *, uint64_t))v55)(v56, v11);
    ((void (*)(char *, uint64_t))v55)(v60, v11);
  }

  v73 = v100;
  v113[0] = sub_100E08534(v111);
  v74 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
  v75 = type metadata accessor for OwnerCommandManager.Error(0);
  v76 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v77 = sub_100006204(&qword_1010FCA40, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_100E3F1F0);
  v78 = v106;
  Publisher.mapError<A>(_:)(sub_100451F0C, 0, v74, v75, v76, v77);
  swift_release();
  v79 = v110;
  v59(v110, (void (*)(_QWORD, _QWORD))v102, v11);
  v80 = v104;
  v59(v104, v109, v11);
  v81 = v103;
  v82 = v103[80];
  v83 = (v82 + 16) & ~v82;
  v84 = (v101 + v82 + v83) & ~v82;
  v85 = (v101 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
  v86 = swift_allocObject(&unk_101077E10, v85 + 16, v82 | 7);
  v87 = v86 + v83;
  v88 = (void (*)(uint64_t, char *, uint64_t))*((_QWORD *)v81 + 4);
  v88(v87, v79, v11);
  v88(v86 + v84, v80, v11);
  v89 = (_QWORD *)(v86 + v85);
  v90 = v107;
  *v89 = v105;
  v89[1] = v90;
  v91 = sub_1000193A4(&qword_1010FCA60, &qword_1010FCA58, (const char *)&protocol conformance descriptor for Publishers.MapError<A, B>);
  swift_retain();
  Publisher.oneshot(_:)(sub_10046D8D0, v86, v73, v91);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v108 + 8))(v78, v73);
}

uint64_t sub_100458E34@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_100059390();
  v5 = swift_allocError(&type metadata for CentralManager.Error, v4, 0, 0);
  sub_100059280(a1, v6);
  *a2 = v5;
  v7 = type metadata accessor for OwnerCommandManager.Error(0);
  return swift_storeEnumTagMultiPayload(a2, v7, 1);
}

uint64_t sub_100458E9C(uint64_t a1, uint64_t a2, char *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  _QWORD *v29;
  os_log_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  unint64_t v42;
  os_log_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void (*v59)(char *, uint64_t);
  id v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  os_log_t v64;
  uint64_t v65;
  char *v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  os_log_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t);
  uint64_t v82;
  uint64_t v83;

  v80 = a5;
  v81 = a4;
  v75 = a2;
  v76 = a3;
  v79 = type metadata accessor for OwnerCommandManager.Error(0);
  v77 = *(_QWORD *)(v79 - 8);
  v6 = __chkstk_darwin(v79);
  v73 = (uint64_t *)((char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v9 = (char *)&v72 - v8;
  v10 = sub_10001A9A8(&qword_1010FCA38);
  __chkstk_darwin(v10);
  v78 = (uint64_t)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v74 = (os_log_t)((char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v72 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v72 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v72 - v22;
  v24 = sub_10001A9A8(&qword_1010FCA68);
  __chkstk_darwin(v24);
  v26 = (void **)((char *)&v72 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v26, &qword_1010FCA68);
  if (swift_getEnumCaseMultiPayload(v26, v24) == 1)
  {
    sub_1000126EC((uint64_t)v26, (uint64_t)v9, type metadata accessor for OwnerCommandManager.Error);
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v27 = type metadata accessor for Logger(0);
    sub_10001A9E8(v27, (uint64_t)qword_1011B6F48);
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v28(v18, v75, v12);
    v29 = v73;
    sub_10005972C((uint64_t)v9, (uint64_t)v73, type metadata accessor for OwnerCommandManager.Error);
    v30 = v74;
    v31 = ((uint64_t (*)(os_log_t, char *, uint64_t))v28)(v74, v76, v12);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter(v32);
    v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      v35 = swift_slowAlloc(42, -1);
      v36 = swift_slowAlloc(96, -1);
      v75 = v36;
      *(_DWORD *)v35 = 141558787;
      v82 = 1752392040;
      v83 = v36;
      v76 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v35 + 4, v35 + 12);
      *(_WORD *)(v35 + 12) = 2081;
      v37 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      LODWORD(v72) = v34;
      v38 = dispatch thunk of CustomStringConvertible.description.getter(v12, v37);
      v82 = sub_100016940(v38, v39, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v35 + 14, v35 + 22);
      swift_bridgeObjectRelease();
      v40 = *(void (**)(char *, uint64_t))(v13 + 8);
      v40(v18, v12);
      *(_WORD *)(v35 + 22) = 2082;
      sub_10044E504();
      v82 = sub_100016940(v41, v42, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v35 + 24, v35 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v29, type metadata accessor for OwnerCommandManager.Error);
      *(_WORD *)(v35 + 32) = 2082;
      v43 = v74;
      v44 = dispatch thunk of CustomStringConvertible.description.getter(v12, v37);
      v82 = sub_100016940(v44, v45, &v83);
      v9 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v35 + 34, v35 + 42);
      swift_bridgeObjectRelease();
      v40((char *)v43, v12);
      _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v72, "Disconnection from beacon: %{private,mask.hash}s failed due to %{public}s. CommandId: %{public}s.", (uint8_t *)v35, 0x2Au);
      v46 = v75;
      swift_arrayDestroy(v75, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      v67 = *(void (**)(char *, uint64_t))(v13 + 8);
      v67(v18, v12);
      sub_1000126B0((uint64_t)v29, type metadata accessor for OwnerCommandManager.Error);
      v67((char *)v30, v12);
    }

    v68 = v78;
    sub_10005972C((uint64_t)v9, v78, type metadata accessor for OwnerCommandManager.Error);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v77 + 56))(v68, 0, 1, v79);
    v81(v68);
    sub_100004048(v68, &qword_1010FCA38);
    return sub_1000126B0((uint64_t)v9, type metadata accessor for OwnerCommandManager.Error);
  }
  else
  {
    v47 = *v26;
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v48 = type metadata accessor for Logger(0);
    sub_10001A9E8(v48, (uint64_t)qword_1011B6F48);
    v49 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v49(v23, v75, v12);
    v49(v21, (uint64_t)v76, v12);
    v50 = v47;
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.default.getter(v51);
    v53 = v52;
    if (os_log_type_enabled(v51, v52))
    {
      v54 = swift_slowAlloc(42, -1);
      LODWORD(v75) = v53;
      v55 = v54;
      v73 = (_QWORD *)swift_slowAlloc(8, -1);
      v56 = swift_slowAlloc(64, -1);
      v76 = (char *)v56;
      *(_DWORD *)v55 = 141558787;
      v82 = 1752392040;
      v83 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v55 + 4, v55 + 12);
      *(_WORD *)(v55 + 12) = 2081;
      v72 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v74 = v51;
      v57 = dispatch thunk of CustomStringConvertible.description.getter(v12, v72);
      v82 = sub_100016940(v57, v58, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v55 + 14, v55 + 22);
      swift_bridgeObjectRelease();
      v59 = *(void (**)(char *, uint64_t))(v13 + 8);
      v59(v23, v12);
      *(_WORD *)(v55 + 22) = 2114;
      v82 = (uint64_t)v50;
      v60 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v55 + 24, v55 + 32);
      v61 = v73;
      *v73 = v50;

      *(_WORD *)(v55 + 32) = 2082;
      v62 = dispatch thunk of CustomStringConvertible.description.getter(v12, v72);
      v82 = sub_100016940(v62, v63, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v55 + 34, v55 + 42);
      swift_bridgeObjectRelease();
      v59(v21, v12);
      v64 = v74;
      _os_log_impl((void *)&_mh_execute_header, v74, (os_log_type_t)v75, "Disconnected from beacon: %{private,mask.hash}s. Peripheral: %{public}@. CommandId: %{public}s.", (uint8_t *)v55, 0x2Au);
      v65 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v61, 1, v65);
      swift_slowDealloc(v61, -1, -1);
      v66 = v76;
      swift_arrayDestroy(v76, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v55, -1, -1);

    }
    else
    {
      v70 = *(void (**)(char *, uint64_t))(v13 + 8);
      v70(v23, v12);

      v70(v21, v12);
    }
    v71 = v78;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56))(v78, 1, 1, v79);
    v81(v71);

    return sub_100004048(v71, &qword_1010FCA38);
  }
}

void sub_1004596B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  _OWORD v8[2];
  __int128 v9;
  void *v10;
  _QWORD *v11;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionHideFromBTSettings);
  v6 = v5;
  v10 = &type metadata for Bool;
  LOBYTE(v9) = 1;
  sub_10010F90C(&v9, v8);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  v11 = (_QWORD *)0x8000000000000000;
  sub_10010A7E4(v8, v4, v6, isUniquelyReferenced_nonNull_native);
  v11 = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __asm { BR              X10 }
}

uint64_t sub_100459788()
{
  char *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  _OWORD v35[2];
  __int128 v36;
  _QWORD *v37;
  _QWORD v38[13];

  if (BYTE6(v1) == 16)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionUseTempLTK);
    v6 = v5;
    v37 = &type metadata for Data;
    *(_QWORD *)&v36 = v2;
    *((_QWORD *)&v36 + 1) = v1;
    sub_10010F90C(&v36, v35);
    sub_10001BBBC(v2, v1);
  }
  else
  {
    v7 = Data.subdata(in:)(0, 16, v2, v1);
    v9 = v8;
    if (*(_QWORD *)(v3 + 3096) != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v10 = type metadata accessor for Logger(0);
    sub_10001A9E8(v10, (uint64_t)qword_1011B6F48);
    sub_10001BBBC(v7, v9);
    sub_10001BBBC(v7, v9);
    sub_10001BBBC(v7, v9);
    v11 = sub_10001BBBC(v7, v9);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.info.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(22, -1);
      *(_QWORD *)&v36 = swift_slowAlloc(32, -1);
      *(_DWORD *)v14 = 136315394;
      v15 = Data.hexString.getter(v7, v9);
      *(_QWORD *)&v35[0] = sub_100016940(v15, v16, (uint64_t *)&v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v35, (char *)v35 + 8, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v7, v9);
      sub_10001BC14(v7, v9);
      *(_WORD *)(v14 + 12) = 2048;
      __asm { BR              X9 }
    }
    sub_10001BC14(v7, v9);
    sub_10001BC14(v7, v9);
    sub_10001BC14(v7, v9);
    sub_10001BC14(v7, v9);

    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionUseTempLTK);
    v6 = v17;
    v37 = &type metadata for Data;
    *(_QWORD *)&v36 = v7;
    *((_QWORD *)&v36 + 1) = v9;
    sub_10010F90C(&v36, v35);
  }
  v18 = v38[0];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v38[0]);
  v34 = v18;
  v38[0] = 0x8000000000000000;
  sub_10010A7E4(v35, v4, v6, isUniquelyReferenced_nonNull_native);
  v38[0] = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v3 + 3096) != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_10001A9E8(v20, (uint64_t)qword_1011B6F48);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v36 = v25;
    *(_DWORD *)v24 = 136315138;
    swift_beginAccess(v38, v35, 0, 0);
    swift_bridgeObjectRetain(v38[0]);
    v27 = Dictionary.description.getter(v26, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v28 = v0;
    v30 = v29;
    swift_bridgeObjectRelease();
    v34 = sub_100016940(v27, v30, (uint64_t *)&v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v24 + 4, v24 + 12);
    v0 = v28;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Connecting with options %s", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }

  swift_beginAccess(v38, &v36, 0, 0);
  v31 = v38[0];
  swift_bridgeObjectRetain(v38[0]);
  v32 = sub_100E0799C(v0, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t sub_100459D28(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t result;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  char **v40;
  NSObject *v41;
  uint8_t *v42;
  uint8_t *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint8_t *v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t (*v68)(uint64_t, uint64_t);
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint8_t *v79;
  uint8_t *v80;
  uint64_t v81;
  char *v82;
  int v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98[3];
  uint64_t v99;
  uint64_t v100;
  char v101[32];

  v88 = a4;
  v87 = a3;
  v92 = a2;
  v94 = a1;
  v86 = *v4;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v89 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v78 - v10;
  v12 = __chkstk_darwin(v9);
  v90 = (char *)&v78 - v13;
  v14 = __chkstk_darwin(v12);
  v91 = (char *)&v78 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v78 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v78 - v19;
  v21 = type metadata accessor for DispatchPredicate(0);
  v22 = *(char **)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (uint64_t *)((char *)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v98[0] = 0x7365547265646E75;
  v98[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v95, v98, sub_10001F628, 0, &type metadata for Bool);
  result = swift_bridgeObjectRelease();
  if ((v95 & 1) == 0)
  {
    v26 = v93;
    v27 = *(void **)(v93 + 72);
    *v24 = v27;
    (*((void (**)(_QWORD *, _QWORD, uint64_t))v22 + 13))(v24, enum case for DispatchPredicate.onQueue(_:), v21);
    v28 = v27;
    LOBYTE(v27) = _dispatchPreconditionTest(_:)(v24);
    (*((void (**)(_QWORD *, uint64_t))v22 + 1))(v24, v21);
    if ((v27 & 1) == 0)
    {
      __break(1u);
LABEL_29:
      swift_once(&qword_1010E9C18, sub_10044E058);
LABEL_16:
      v56 = type metadata accessor for Logger(0);
      sub_10001A9E8(v56, (uint64_t)qword_1011B6F48);
      sub_1007885B0(0xD000000000000021, 0x8000000100ED6ED0);
      ((void (*)(char *, uint64_t, uint64_t))v6)(v11, v21, v5);
      v57 = ((uint64_t (*)(char *, _QWORD *, uint64_t))v6)(v22, v24, v5);
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.default.getter(v58);
      if (os_log_type_enabled(v58, v59))
      {
        v60 = swift_slowAlloc(32, -1);
        v85 = (id)swift_slowAlloc(64, -1);
        v98[0] = (uint64_t)v85;
        *(_DWORD *)v60 = 141558531;
        *(_QWORD *)&v95 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, (char *)&v95 + 8, v60 + 4, v60 + 12);
        *(_WORD *)(v60 + 12) = 2081;
        v61 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v62 = dispatch thunk of CustomStringConvertible.description.getter(v5, v61);
        *(_QWORD *)&v95 = sub_100016940(v62, v63, v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, (char *)&v95 + 8, v60 + 14, v60 + 22);
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v26)(v11, v5);
        *(_WORD *)(v60 + 22) = 2082;
        v64 = v89;
        v65 = dispatch thunk of CustomStringConvertible.description.getter(v5, v61);
        *(_QWORD *)&v95 = sub_100016940(v65, v66, v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, (char *)&v95 + 8, v60 + 24, v60 + 32);
        swift_bridgeObjectRelease();
        v67 = v64;
        v68 = (uint64_t (*)(uint64_t, uint64_t))v26;
        ((void (*)(char *, uint64_t))v26)(v67, v5);
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v60, 0x20u);
        v69 = v85;
        swift_arrayDestroy(v85, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v69, -1, -1);
        v70 = v60;
        v24 = v90;
        v21 = (uint64_t)v91;
        swift_slowDealloc(v70, -1, -1);
      }
      else
      {
        ((void (*)(char *, uint64_t))v26)(v11, v5);
        v68 = (uint64_t (*)(uint64_t, uint64_t))v26;
        ((void (*)(char *, uint64_t))v26)(v22, v5);
      }

      v71 = v87;
      v72 = v93;
      if (*(_QWORD *)(v93 + 184))
      {
        swift_retain();
        sub_10080B648(v21, (uint64_t)&v95);
        swift_release();
        if (*((_QWORD *)&v96 + 1))
        {
          sub_10000F9FC(&v95, (uint64_t)v98);
          v73 = v99;
          v74 = v100;
          sub_10001AA44(v98, v99);
          if (((*(uint64_t (**)(uint64_t, uint64_t))(v74 + 96))(v73, v74) & 1) != 0)
          {
            sub_10045C660(v94, v92, v71, v88);
            v68((uint64_t)v24, v5);
            v68(v21, v5);
            return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v98);
          }
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v98);
          goto LABEL_26;
        }
      }
      else
      {
        v97 = 0;
        v95 = 0u;
        v96 = 0u;
      }
      sub_100004048((uint64_t)&v95, (uint64_t *)&unk_1010EE310);
LABEL_26:
      v75 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v75);
      v76 = v94;
      *(&v78 - 10) = v72;
      *(&v78 - 9) = (uint64_t)v76;
      *(&v78 - 8) = (uint64_t)v92;
      *(&v78 - 7) = (uint64_t)&off_10104A7D0;
      v77 = v88;
      *(&v78 - 6) = v71;
      *(&v78 - 5) = v77;
      *(&v78 - 4) = v21;
      *(&v78 - 3) = (uint64_t)v24;
      *(&v78 - 2) = v86;
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.OwnerCommandManager.connect", 57, 2, sub_1004715D8, &v78 - 12);
      v68((uint64_t)v24, v5);
      return v68(v21, v5);
    }
    v29 = *(void **)&v94[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
    v30 = objc_msgSend(v29, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v30);

    v31 = v26 + 112;
    v32 = swift_beginAccess(v26 + 112, v101, 0, 0);
    v33 = *(_QWORD *)(v26 + 112);
    if (*(_QWORD *)(v33 + 16))
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v26 + 112));
      v34 = sub_100003FB0((uint64_t)v20);
      if ((v35 & 1) != 0)
      {
        v85 = v29;
        v84 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v34);
        swift_retain();
        swift_bridgeObjectRelease();
        v26 = *(_QWORD *)(v6 + 8);
        ((void (*)(char *, uint64_t))v26)(v20, v5);
        if (qword_1010E9C18 != -1)
          swift_once(&qword_1010E9C18, sub_10044E058);
        v36 = type metadata accessor for Logger(0);
        sub_10001A9E8(v36, (uint64_t)qword_1011B6F48);
        v37 = v94;
        v38 = Logger.logObject.getter(v37);
        v39 = static os_log_type_t.default.getter(v38);
        v83 = v39;
        v40 = &selRef_connectedServicesChanged_;
        if (os_log_type_enabled(v38, v39))
        {
          v41 = v38;
          v42 = (uint8_t *)swift_slowAlloc(12, -1);
          v81 = swift_slowAlloc(32, -1);
          v98[0] = v81;
          v82 = v11;
          v80 = v42;
          *(_DWORD *)v42 = 136446210;
          v43 = v42 + 12;
          v79 = v42 + 4;
          v44 = objc_msgSend(v85, "identifier");
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v44);

          v45 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v46 = dispatch thunk of CustomStringConvertible.description.getter(v5, v45);
          v48 = v47;
          ((void (*)(char *, uint64_t))v26)(v18, v5);
          *(_QWORD *)&v95 = sub_100016940(v46, v48, v98);
          v49 = v43;
          v11 = v82;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, (char *)&v95 + 8, v79, v49);
          v40 = &selRef_connectedServicesChanged_;
          swift_bridgeObjectRelease();

          v38 = v41;
          v50 = v80;
          _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v83, "Canceling disconnection block for %{public}s", v80, 0xCu);
          v51 = v81;
          swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v51, -1, -1);
          swift_slowDealloc(v50, -1, -1);
        }
        else
        {

        }
        dispatch thunk of DispatchWorkItem.cancel()(v52);
        v53 = objc_msgSend(v85, v40[108]);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v53);

        swift_beginAccess(v31, v98, 33, 0);
        sub_100103D04((uint64_t)v18);
        ((void (*)(char *, uint64_t))v26)(v18, v5);
        swift_endAccess(v98);
        swift_release();
        swift_release();
LABEL_15:
        v54 = type metadata accessor for AccessoryCommand(0);
        v21 = (uint64_t)v91;
        v55 = v92;
        v6 = *(_QWORD *)(v6 + 16);
        ((void (*)(char *, char *, uint64_t))v6)(v91, &v92[*(int *)(v54 + 20)], v5);
        v24 = v90;
        ((void (*)(char *, char *, uint64_t))v6)(v90, v55, v5);
        v22 = v89;
        if (qword_1010E9C18 == -1)
          goto LABEL_16;
        goto LABEL_29;
      }
      swift_bridgeObjectRelease();
    }
    v26 = *(_QWORD *)(v6 + 8);
    ((void (*)(char *, uint64_t, __n128))v26)(v20, v5, v32);
    goto LABEL_15;
  }
  return result;
}

void sub_10045A6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD v29[7];
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  _BYTE v69[8];

  v59 = a8;
  v65 = a7;
  v62 = a6;
  v42 = a5;
  v64 = a1;
  v58 = a9;
  v63 = type metadata accessor for UUID(0);
  v61 = *(_QWORD *)(v63 - 8);
  v10 = __chkstk_darwin(v63);
  v68 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = v11;
  __chkstk_darwin(v10);
  v67 = (char *)v29 - v12;
  v13 = type metadata accessor for AccessoryCommand(0);
  v54 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v55 = v14;
  v56 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v15);
  v30 = sub_10001A9A8(&qword_1010F3980);
  v29[5] = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v33 = sub_10001A9A8(&qword_1010F3988);
  v32 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v29[6] = (char *)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_10001A9A8(&qword_1010F3990);
  v34 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v31 = (char *)v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_10001A9A8(&qword_1010F3998);
  v38 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v36 = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_10001A9A8(&qword_1010F39A0);
  v40 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v37 = (char *)v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_10001A9A8(&qword_1010F5D78);
  v44 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v43 = (char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_10001A9A8(&qword_1010FCC78);
  v47 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v46 = (char *)v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_10001A9A8(&qword_1010FCC80);
  v50 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v49 = (char *)v29 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_10001A9A8(&qword_1010FCC88);
  v52 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v66 = (char *)v29 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  inited = swift_initStackObject(v24, v69);
  *(_OWORD *)(inited + 16) = xmmword_100E22B10;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionHideFromBTSettings);
  *(_QWORD *)(inited + 40) = v26;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionConnectionUseCase);
  *(_QWORD *)(inited + 88) = v27;
  v28 = (char *)sub_10045AB80 + 4 * byte_100E3F028[*(unsigned __int8 *)(a4 + *(int *)(v13 + 24) + 8)];
  v57 = a4;
  __asm { BR              X11 }
}

uint64_t sub_10045AB80()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(_QWORD, _QWORD, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, _QWORD, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  if (*(_BYTE *)(v5 + *(int *)(v0 + 28)))
    v8 = 16;
  else
    v8 = 15;
  *(_QWORD *)(v1 + 120) = &type metadata for UInt32;
  *(_DWORD *)(v1 + 96) = v8 + 65540;
  v9 = sub_1006B8B10(v1);
  v10 = sub_100E0799C(v2, v9);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 - 240) = v10;
  v11 = *(void **)(v3 + 72);
  *(_QWORD *)(v7 - 72) = v11;
  v12 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  *(_QWORD *)(v7 - 288) = v3;
  *(_QWORD *)(v7 - 304) = v12;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  *(_QWORD *)(v7 - 248) = v13;
  v13(v4, 1, 1, v12);
  *(_QWORD *)(v7 - 640) = v11;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
  v15 = sub_10001F6FC();
  v16 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v17 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  *(_QWORD *)(v7 - 256) = v17;
  *(_QWORD *)(v7 - 632) = v14;
  *(_QWORD *)(v7 - 296) = v15;
  *(_QWORD *)(v7 - 624) = v16;
  Publisher.receive<A>(on:options:)(v7 - 72, v4, v14, v15, v16, v17);
  sub_100004048(v4, &qword_1010EECC8);

  v18 = swift_release();
  v19 = static Subscribers.Demand.unlimited.getter(v18);
  v20 = type metadata accessor for Peripheral(0);
  *(_QWORD *)(v7 - 648) = v20;
  v21 = sub_1000193A4(&qword_1010F39D0, &qword_1010F3980, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v22 = *(_QWORD *)(v7 - 608);
  v23 = *(_QWORD *)(v7 - 600);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v19, sub_10045B484, 0, v23, v20, v14, v21, v16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 616) + 8))(v6, v23);
  v24 = *(void **)(v7 - 640);
  *(_QWORD *)(v7 - 240) = v24;
  v25 = *(_QWORD *)(v7 - 304);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 - 248))(v4, 1, 1, v25);
  v26 = sub_1000193A4(&qword_1010F39D8, &qword_1010F3988, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v27 = v24;
  v28 = *(_QWORD *)(v7 - 592);
  v29 = *(_QWORD *)(v7 - 576);
  Publisher.receive<A>(on:options:)(v7 - 240, v4, v29, v15, v26, *(_QWORD *)(v7 - 256));
  sub_100004048(v4, &qword_1010EECC8);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 584) + 8))(v22, v29);
  v30 = swift_allocObject(&unk_1010785B8, 24, 7);
  v31 = *(_QWORD *)(v7 - 504);
  *(_QWORD *)(v30 + 16) = v31;
  swift_bridgeObjectRetain(v31);
  v33 = static Subscribers.Demand.unlimited.getter(v32);
  v34 = sub_1000193A4(&qword_1010F39E0, &qword_1010F3990, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v35 = *(_QWORD *)(v7 - 552);
  v36 = *(_QWORD *)(v7 - 560);
  v37 = *(_QWORD *)(v7 - 648);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v33, sub_100471630, v30, v36, v37, *(_QWORD *)(v7 - 632), v34, *(_QWORD *)(v7 - 624));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 568) + 8))(v28, v36);
  *(_QWORD *)(v7 - 240) = v27;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 - 248))(v4, 1, 1, v25);
  v38 = sub_1000193A4(&qword_1010F39E8, &qword_1010F3998, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v39 = v27;
  v40 = *(_QWORD *)(v7 - 544);
  v41 = *(_QWORD *)(v7 - 528);
  Publisher.receive<A>(on:options:)(v7 - 240, v4, v41, *(_QWORD *)(v7 - 296), v38, *(_QWORD *)(v7 - 256));
  sub_100004048(v4, &qword_1010EECC8);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 536) + 8))(v35, v41);
  v42 = sub_1000193A4(&qword_1010F39F0, &qword_1010F39A0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v43 = *(_QWORD *)(v7 - 496);
  v44 = *(_QWORD *)(v7 - 512);
  Publisher.compactMap<A>(_:)(sub_1000E0680, 0, v44, v37, v42);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 520) + 8))(v40, v44);
  if (qword_1010E9C20 != -1)
    swift_once(&qword_1010E9C20, sub_10044E424);
  v45 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v46 = sub_10001A9E8(v45, (uint64_t)qword_1010FC598);
  *(_QWORD *)(v7 - 240) = v39;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v7 - 248))(v4, 1, 1, *(_QWORD *)(v7 - 304));
  v47 = sub_1000193A4(&qword_1010FCC90, &qword_1010F5D78, (const char *)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v48 = v39;
  v49 = *(_QWORD *)(v7 - 472);
  v50 = *(_QWORD *)(v7 - 480);
  Publisher.timeout<A>(_:scheduler:options:customError:)(v46, v7 - 240, v4, sub_1000FC3D0, 0, v50, *(_QWORD *)(v7 - 296), v47, *(_QWORD *)(v7 - 256));
  sub_100004048(v4, &qword_1010EECC8);

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 488) + 8))(v43, v50);
  v51 = sub_10001A9A8(&qword_1011074A0);
  v52 = sub_1000193A4(&qword_1010FCC98, &qword_1010FCC78, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  v53 = *(_QWORD *)(v7 - 448);
  v54 = *(_QWORD *)(v7 - 456);
  Publisher.map<A>(_:)(sub_100245644, 0, v54, v51, v52);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 464) + 8))(v49, v54);
  v55 = sub_10001A9A8(&qword_1010EEE90);
  v56 = sub_1000193A4(&qword_1010FCCA0, &qword_1010FCC80, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v57 = sub_1000193A4(&qword_1010EEEA0, &qword_1010EEE90, (const char *)&protocol conformance descriptor for Just<A>);
  v58 = *(_QWORD *)(v7 - 432);
  Publisher.catch<A>(_:)(sub_1002197E4, 0, v58, v55, v56, v57);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 440) + 8))(v53, v58);
  v59 = swift_allocObject(&unk_101077E88, 24, 7);
  swift_weakInit(v59 + 16, *(_QWORD *)(v7 - 288));
  v60 = *(_QWORD *)(v7 - 392);
  sub_10005972C(*(_QWORD *)(v7 - 384), v60, type metadata accessor for AccessoryCommand);
  v61 = *(_QWORD *)(v7 - 352);
  v62 = *(void (**)(_QWORD, _QWORD, uint64_t))(v61 + 16);
  v63 = *(_QWORD *)(v7 - 336);
  v62(*(_QWORD *)(v7 - 272), *(_QWORD *)(v7 - 368), v63);
  v62(*(_QWORD *)(v7 - 264), *(_QWORD *)(v7 - 376), v63);
  v64 = *(unsigned __int8 *)(*(_QWORD *)(v7 - 408) + 80);
  v65 = (v64 + 48) & ~v64;
  v66 = *(unsigned __int8 *)(v61 + 80);
  v67 = (*(_QWORD *)(v7 - 400) + v66 + v65) & ~v66;
  v68 = *(_QWORD *)(v7 - 360);
  v69 = (v68 + v66 + v67) & ~v66;
  v70 = (char *)swift_allocObject(&unk_1010785E0, v69 + v68, v64 | v66 | 7);
  v71 = *(_QWORD *)(v7 - 328);
  *((_QWORD *)v70 + 2) = v59;
  *((_QWORD *)v70 + 3) = v71;
  v72 = *(_QWORD *)(v7 - 320);
  *((_QWORD *)v70 + 4) = *(_QWORD *)(v7 - 344);
  *((_QWORD *)v70 + 5) = v72;
  sub_1000126EC(v60, (uint64_t)&v70[v65], type metadata accessor for AccessoryCommand);
  v73 = *(void (**)(char *, _QWORD, uint64_t))(v61 + 32);
  v73(&v70[v67], *(_QWORD *)(v7 - 272), v63);
  v73(&v70[v69], *(_QWORD *)(v7 - 264), v63);
  v74 = sub_1000193A4(&qword_1010FCCA8, &qword_1010FCC88, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  swift_retain();
  v75 = *(_QWORD *)(v7 - 416);
  v76 = *(_QWORD *)(v7 - 280);
  Publisher<>.sink(receiveValue:)(sub_10047172C, v70, v75, v74);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 424) + 8))(v76, v75);
  v77 = *(_QWORD *)(v7 - 288) + 80;
  swift_beginAccess(v77, v7 - 240, 33, 0);
  AnyCancellable.store(in:)(v77);
  swift_endAccess(v7 - 240);
  return swift_release();
}

uint64_t sub_10045B484@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _BYTE v8[72];

  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6F48);
  sub_1007885B0(0xD000000000000018, 0x8000000100ED6F40);
  v3 = sub_10001A9A8(&qword_1010ED4E8);
  inited = swift_initStackObject(v3, v8);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 56) = &type metadata for BAServiceIdentifier;
  *(_QWORD *)(inited + 64) = &off_101077A98;
  *(_BYTE *)(inited + 32) = 1;
  v5 = sub_10078921C(inited);
  swift_setDeallocating(inited);
  v6 = sub_10001A9A8(&qword_1010ED4F0);
  result = swift_arrayDestroy(inited + 32, 1, v6);
  *a1 = v5;
  return result;
}

uint64_t sub_10045B584@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  NSObject *v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char v40[24];
  _QWORD v41[5];

  v39 = a3;
  v5 = sub_10001A9A8(&qword_1010EEEB0);
  v37 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010FBA80);
  v38 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (char *)*a1;
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B6F48);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Discovered FindMy services.", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v41[3] = &type metadata for BAServiceIdentifier;
  v41[4] = &off_101077A98;
  LOBYTE(v41[0]) = 1;
  v17 = (uint64_t *)&v11[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess(&v11[OBJC_IVAR____TtC12searchpartyd10Peripheral_services], v40, 0, 0);
  v18 = *v17;
  __chkstk_darwin(v19);
  *(&v37 - 2) = (uint64_t)v41;
  swift_bridgeObjectRetain(v18);
  sub_100A7771C((uint64_t (*)(uint64_t *))sub_1000FC260, (uint64_t)(&v37 - 4), v18);
  v21 = v20;
  swift_bridgeObjectRelease();
  v22 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
  if (v21)
  {
    v23 = sub_1007ED9A8(a2);
    v24 = swift_allocObject(&unk_101078608, 32, 7);
    *(_QWORD *)(v24 + 16) = v21;
    *(_QWORD *)(v24 + 24) = v23;
    v25 = sub_10001A9A8((uint64_t *)&unk_1010FBA90);
    swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    swift_retain();
    v26 = swift_bridgeObjectRetain(v23);
    v41[0] = Future.init(_:)(sub_1000FA48C, v24, v26);
    v27 = sub_1000193A4((unint64_t *)&qword_101121800, (uint64_t *)&unk_1010FBA90, (const char *)&protocol conformance descriptor for Future<A, B>);
    v28 = Publisher.eraseToAnyPublisher()(v25, v27);
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
  }
  else
  {
    v30 = Logger.logObject.getter(v22);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, (os_log_type_t)v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v31, "No FindMy service", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    v41[0] = v11;
    v33 = type metadata accessor for Peripheral(0);
    v34 = v11;
    Just.init(_:)(v41, v33);
    v35 = sub_100059390();
    Just.setFailureType<A>(to:)(&type metadata for CentralManager.Error, v5, &type metadata for CentralManager.Error, v35);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v5);
    v36 = sub_1000193A4(&qword_1010EEEB8, (uint64_t *)&unk_1010FBA80, (const char *)&protocol conformance descriptor for Result<A, B>.Publisher);
    v28 = Publisher.eraseToAnyPublisher()(v8, v36);
    result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v10, v8);
  }
  *v39 = v28;
  return result;
}

void sub_10045B97C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t Strong;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_BYTE *, uint64_t, uint64_t);
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void (*v43)(_BYTE *, uint64_t);
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  objc_class *v54;
  objc_class *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  void *v68;
  uint64_t v69;
  void (*v70)(_BYTE *, uint64_t);
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  void *v100;
  _BYTE v101[12];
  int v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *);
  uint64_t v110[4];
  uint64_t v111;
  _QWORD v112[6];
  uint64_t v113[3];
  ValueMetadata *v114;
  _UNKNOWN **v115;
  _QWORD v116[5];
  char v117;
  char v118[12];

  v106 = a7;
  v105 = a6;
  v108 = a5;
  v109 = a4;
  v11 = sub_10001A9A8(&qword_1010FCA38);
  __chkstk_darwin(v11);
  v13 = &v101[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for UUID(0);
  v107 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = &v101[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = __chkstk_darwin(v15);
  v20 = &v101[-v19];
  __chkstk_darwin(v18);
  v22 = &v101[-v21];
  v23 = type metadata accessor for AccessoryCommand(0);
  __chkstk_darwin(v23);
  v25 = &v101[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v118, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (!Strong)
    return;
  v27 = Strong;
  Transaction.capture()();
  sub_10000F9B8(a1, (uint64_t)v116, &qword_1011074A0);
  if ((v117 & 1) != 0)
  {
    sub_100059244((uint64_t)v116, (uint64_t)v113);
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v28 = type metadata accessor for Logger(0);
    sub_10001A9E8(v28, (uint64_t)qword_1011B6F48);
    sub_100059280(v113, (uint64_t)v112);
    v29 = v107;
    v30 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v107 + 16);
    v30(v20, v106, v14);
    v31 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v30)(v17, a8, v14);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter(v32);
    v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      v35 = swift_slowAlloc(42, -1);
      v104 = v27;
      v36 = v35;
      v106 = swift_slowAlloc(96, -1);
      v110[0] = v106;
      *(_DWORD *)v36 = 136446979;
      v37 = sub_100059390();
      LODWORD(v105) = v34;
      v38 = Error.localizedDescription.getter(&type metadata for CentralManager.Error, v37);
      v111 = sub_100016940(v38, v39, v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease();
      sub_1000593D4(v112);
      *(_WORD *)(v36 + 12) = 2160;
      v111 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v36 + 14, v36 + 22);
      *(_WORD *)(v36 + 22) = 2081;
      v40 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v14, v40);
      v111 = sub_100016940(v41, v42, v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v36 + 24, v36 + 32);
      swift_bridgeObjectRelease();
      v43 = *(void (**)(_BYTE *, uint64_t))(v107 + 8);
      v43(v20, v14);
      *(_WORD *)(v36 + 32) = 2082;
      v44 = dispatch thunk of CustomStringConvertible.description.getter(v14, v40);
      v111 = sub_100016940(v44, v45, v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v36 + 34, v36 + 42);
      swift_bridgeObjectRelease();
      v43(v17, v14);
      _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v105, "ownerCommand error: %{public}s. Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v36, 0x2Au);
      v46 = v106;
      swift_arrayDestroy(v106, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      sub_1000593D4(v112);
      v70 = *(void (**)(_BYTE *, uint64_t))(v29 + 8);
      v70(v20, v14);
      v70(v17, v14);
    }

    v71 = sub_100059390();
    v72 = swift_allocError(&type metadata for CentralManager.Error, v71, 0, 0);
    sub_100059280(v113, v73);
    *(_QWORD *)v13 = v72;
    v74 = type metadata accessor for OwnerCommandManager.Error(0);
    swift_storeEnumTagMultiPayload(v13, v74, 1);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v13, 0, 1, v74);
    v109(v13);
    swift_release();
    sub_100004048((uint64_t)v13, &qword_1010FCA38);
    sub_1000593D4(v113);
    return;
  }
  v104 = v27;
  v114 = &type metadata for BAServiceIdentifier;
  v115 = &off_101077A98;
  LOBYTE(v113[0]) = 1;
  v103 = (void *)v116[0];
  v47 = (uint64_t *)(v116[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
  swift_beginAccess(v116[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_services, v112, 0, 0);
  v48 = *v47;
  __chkstk_darwin(v49);
  *(_QWORD *)&v101[-16] = v113;
  swift_bridgeObjectRetain(v48);
  sub_100A7771C((uint64_t (*)(uint64_t *))sub_1000FA448, (uint64_t)&v101[-32], v48);
  v51 = v50;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v113);
  if (!v51)
  {
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v75 = type metadata accessor for Logger(0);
    v76 = sub_10001A9E8(v75, (uint64_t)qword_1011B6F48);
    v77 = Logger.logObject.getter(v76);
    v78 = static os_log_type_t.error.getter(v77);
    if (os_log_type_enabled(v77, v78))
    {
      v79 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v79 = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "No FindMy service!", v79, 2u);
      swift_slowDealloc(v79, -1, -1);
    }

    v80 = type metadata accessor for OwnerCommandManager.Error(0);
    swift_storeEnumTagMultiPayload(v13, v80, 7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v13, 0, 1, v80);
    v109(v13);
    goto LABEL_27;
  }
  v114 = &type metadata for BACharacteristicIdentifier.FindMy;
  v115 = &off_101077A78;
  LOBYTE(v113[0]) = 1;
  swift_beginAccess(v51 + 40, v110, 0, 0);
  v52 = *(_QWORD *)(v51 + 40);
  __chkstk_darwin(v53);
  *(_QWORD *)&v101[-16] = v113;
  swift_bridgeObjectRetain(v52);
  sub_100A77748((uint64_t (*)(uint64_t *))sub_1000FA464, (uint64_t)&v101[-32], v52);
  v55 = v54;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v113);
  if (!v55)
  {
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v81 = type metadata accessor for Logger(0);
    v82 = sub_10001A9E8(v81, (uint64_t)qword_1011B6F48);
    v83 = Logger.logObject.getter(v82);
    v84 = static os_log_type_t.error.getter(v83);
    if (os_log_type_enabled(v83, v84))
    {
      v85 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v85 = 0;
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "Missing Config Characteristic!", v85, 2u);
      swift_slowDealloc(v85, -1, -1);
    }

    v86 = type metadata accessor for OwnerCommandManager.Error(0);
    swift_storeEnumTagMultiPayload(v13, v86, 17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 56))(v13, 0, 1, v86);
    v109(v13);
    swift_release();
LABEL_27:
    swift_release();

LABEL_28:
    sub_100004048((uint64_t)v13, &qword_1010FCA38);
    return;
  }
  v56 = v105;
  sub_100C58310();
  v58 = v57;
  v60 = v59;
  sub_1004703BC(v61, v57, v62, v59);
  if ((~(v60 & v58) & 0x3000000000000000) == 0)
  {
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v63 = type metadata accessor for Logger(0);
    v64 = sub_10001A9E8(v63, (uint64_t)qword_1011B6F48);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.default.getter(v65);
    if (os_log_type_enabled(v65, v66))
    {
      v67 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "No config command to execute. Calling completion.", v67, 2u);
      swift_slowDealloc(v67, -1, -1);
    }

    swift_retain();
    v68 = v103;
    sub_10044E990(v56, 0, v103, v55);
    swift_release();
    v69 = type metadata accessor for OwnerCommandManager.Error(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v13, 1, 1, v69);
    v109(v13);
    swift_release();
    swift_release();

    swift_release();
    goto LABEL_28;
  }
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v87 = type metadata accessor for Logger(0);
  sub_10001A9E8(v87, (uint64_t)qword_1011B6F48);
  sub_10005972C(v56, (uint64_t)v25, type metadata accessor for AccessoryCommand);
  v88 = v107;
  v89 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v107 + 16))(v22, v106, v14);
  v90 = Logger.logObject.getter(v89);
  v91 = static os_log_type_t.info.getter(v90);
  v92 = v91;
  if (os_log_type_enabled(v90, v91))
  {
    v93 = swift_slowAlloc(32, -1);
    v106 = swift_slowAlloc(64, -1);
    v113[0] = v106;
    *(_DWORD *)v93 = 136446723;
    v102 = v92;
    sub_100C58714();
    v111 = sub_100016940(v94, v95, v113);
    v56 = v105;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v93 + 4, v93 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v25, type metadata accessor for AccessoryCommand);
    *(_WORD *)(v93 + 12) = 2160;
    v111 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v93 + 14, v93 + 22);
    *(_WORD *)(v93 + 22) = 2081;
    v96 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v97 = dispatch thunk of CustomStringConvertible.description.getter(v14, v96);
    v111 = sub_100016940(v97, v98, v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v93 + 24, v93 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v107 + 8))(v22, v14);
    _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v102, "Execute command %{public}s for beacon %{private,mask.hash}s", (uint8_t *)v93, 0x20u);
    v99 = v106;
    swift_arrayDestroy(v106, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v99, -1, -1);
    swift_slowDealloc(v93, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v25, type metadata accessor for AccessoryCommand);
    (*(void (**)(_BYTE *, uint64_t))(v88 + 8))(v22, v14);
  }

  v100 = v103;
  sub_100462E38(v56, (uint64_t)v103, (uint64_t)v55);
  sub_100460048(v56, (uint64_t)v100, (uint64_t)v55, v109, v108);
  swift_release();
  swift_release();
  swift_release();

}

uint64_t sub_10045C660(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67[2];

  v62 = a3;
  v60 = a1;
  v63 = *v4;
  v64 = a4;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v65 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v59 = (char *)&v53 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v53 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v53 - v15;
  v17 = (void (*)(char *, char *, uint64_t))type metadata accessor for DispatchPredicate(0);
  v18 = *((_QWORD *)v17 - 1);
  __chkstk_darwin(v17);
  v20 = (uint64_t *)((char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v61 = v4;
  v21 = (void *)v4[9];
  *v20 = v21;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  v22 = v21;
  v23 = _dispatchPreconditionTest(_:)(v20);
  (*(void (**)(_QWORD *, void (*)(char *, char *, uint64_t)))(v18 + 8))(v20, v17);
  if ((v23 & 1) != 0)
  {
    v24 = type metadata accessor for AccessoryCommand(0);
    v17 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v17(v16, &a2[*(int *)(v24 + 20)], v6);
    v17(v14, a2, v6);
    v23 = (uint64_t)v14;
    v18 = v7;
    if (qword_1010E9C18 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010E9C18, sub_10044E058);
LABEL_3:
  v25 = type metadata accessor for Logger(0);
  sub_10001A9E8(v25, (uint64_t)qword_1011B6F48);
  v26 = v59;
  v58 = v16;
  v17(v59, v16, v6);
  v27 = v65;
  v17(v65, (char *)v23, v6);
  v28 = v60;
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter(v29);
  v31 = v30;
  if (os_log_type_enabled(v29, v30))
  {
    v32 = swift_slowAlloc(42, -1);
    v60 = a2;
    v57 = v23;
    v33 = v32;
    v34 = swift_slowAlloc(8, -1);
    v53 = v18;
    v54 = v34;
    v35 = (_QWORD *)v34;
    v56 = swift_slowAlloc(64, -1);
    v66 = (uint64_t)v28;
    v67[0] = v56;
    *(_DWORD *)v33 = 138413059;
    v55 = v31;
    v36 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v33 + 4, v33 + 12);
    *v35 = v28;

    *(_WORD *)(v33 + 12) = 2160;
    v66 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v33 + 14, v33 + 22);
    *(_WORD *)(v33 + 22) = 2081;
    v37 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v6, v37);
    v66 = sub_100016940(v38, v39, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v33 + 24, v33 + 32);
    swift_bridgeObjectRelease();
    v40 = *(void (**)(char *, uint64_t))(v53 + 8);
    v40(v26, v6);
    *(_WORD *)(v33 + 32) = 2082;
    v41 = v65;
    v42 = dispatch thunk of CustomStringConvertible.description.getter(v6, v37);
    v66 = sub_100016940(v42, v43, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v33 + 34, v33 + 42);
    swift_bridgeObjectRelease();
    v40(v41, v6);
    _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v55, "Attempt to connect to AirTag using peripheral: %@. Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v33, 0x2Au);
    v44 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    v45 = v54;
    swift_arrayDestroy(v54, 1, v44);
    swift_slowDealloc(v45, -1, -1);
    v46 = v56;
    swift_arrayDestroy(v56, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    v47 = v33;
    v23 = v57;
    a2 = v60;
    swift_slowDealloc(v47, -1, -1);
  }
  else
  {

    v40 = *(void (**)(char *, uint64_t))(v18 + 8);
    v40(v26, v6);
    v40(v27, v6);
  }

  v48 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v48);
  *(&v53 - 8) = (uint64_t)v61;
  *(&v53 - 7) = (uint64_t)v28;
  v49 = v62;
  *(&v53 - 6) = (uint64_t)a2;
  *(&v53 - 5) = v49;
  v50 = v58;
  *(&v53 - 4) = v64;
  *(&v53 - 3) = (uint64_t)v50;
  v51 = v63;
  *(&v53 - 2) = v23;
  *(&v53 - 1) = v51;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.OwnerCommandManager.connectAirTag", 63, 2, sub_100471390, &v53 - 10);
  v40((char *)v23, v6);
  return ((uint64_t (*)(char *, uint64_t))v40)(v50, v6);
}

uint64_t sub_10045CB88(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t inited;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  id v52;
  char *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  void (*v90)(uint64_t, char *, uint64_t);
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v97;
  uint64_t v98;
  id v99;
  void (*v100)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  id v135;
  char v136[8];
  id v137;

  v122 = a8;
  v121 = a7;
  v127 = a6;
  v125 = a5;
  v120 = a4;
  v129 = a1;
  v126 = type metadata accessor for UUID(0);
  v124 = *(_QWORD *)(v126 - 8);
  v10 = __chkstk_darwin(v126);
  v134 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = v11;
  __chkstk_darwin(v10);
  v133 = (char *)&v98 - v12;
  v13 = type metadata accessor for AccessoryCommand(0);
  v118 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v119 = v14;
  v132 = (uint64_t)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v15);
  v17 = (char *)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_10001A9A8(&qword_1010F3980);
  v105 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v19 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_10001A9A8(&qword_1010FCC08);
  v107 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v102 = (char *)&v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_10001A9A8(&qword_1010FCC10);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v103 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_10001A9A8(&qword_1010FCC18);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v110 = (char *)&v98 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_10001A9A8(&qword_1010FCC20);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v113 = (char *)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_10001A9A8(&qword_1010FCC28);
  v116 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v131 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a2;
  v26 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  inited = swift_initStackObject(v26, v136);
  *(_OWORD *)(inited + 16) = xmmword_100E22B10;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionHideFromBTSettings);
  *(_QWORD *)(inited + 40) = v28;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionConnectionUseCase);
  *(_QWORD *)(inited + 88) = v29;
  *(_QWORD *)(inited + 120) = &type metadata for UInt32;
  *(_DWORD *)(inited + 96) = 0x10000;
  v30 = sub_1006B8B10(inited);
  v128 = a3;
  v31 = (void *)sub_100E0799C(a3, v30);
  swift_bridgeObjectRelease();
  v137 = v31;
  v32 = *(void **)(a2 + 72);
  v33 = v25;
  v135 = *(id *)(v25 + 72);
  v34 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v100 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
  v35 = (uint64_t)v17;
  v100(v17, 1, 1, v34);
  v99 = v32;
  v36 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
  v37 = sub_10001F6FC();
  v130 = v37;
  v38 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v98 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v135, v35, v36, v37, v38, v98);
  sub_100004048(v35, &qword_1010EECC8);

  swift_release();
  v39 = swift_retain();
  v40 = static Subscribers.Demand.unlimited.getter(v39);
  v41 = sub_10001A9A8(&qword_1010FCC30);
  v42 = sub_1000193A4(&qword_1010F39D0, &qword_1010F3980, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v43 = sub_1000193A4(&qword_1010FCC38, &qword_1010FCC30, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v44 = v102;
  v45 = v40;
  v46 = v104;
  Publisher.flatMap<A>(maxPublishers:_:)(v45, sub_1004713C0, v33, v104, v41, v42, v43);
  v101 = v33;
  swift_release();
  (*(void (**)(char *, uint64_t))(v105 + 8))(v19, v46);
  v47 = v99;
  v137 = v99;
  v48 = v34;
  v49 = v34;
  v50 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v100;
  v100((char *)v35, 1, 1, v49);
  v51 = sub_1000193A4(&qword_1010FCC40, &qword_1010FCC08, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v52 = v47;
  v53 = v103;
  v54 = v52;
  v55 = v35;
  v56 = v98;
  v57 = v106;
  v58 = v44;
  v59 = v55;
  Publisher.receive<A>(on:options:)(&v137, v55, v106, v130, v51, v98);
  sub_100004048(v59, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v107 + 8))(v58, v57);
  if (qword_1010E9C20 != -1)
    swift_once(&qword_1010E9C20, sub_10044E424);
  v60 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v61 = sub_10001A9E8(v60, (uint64_t)qword_1010FC598);
  v137 = v54;
  v50(v59, 1, 1, v48);
  v62 = sub_1000193A4(&qword_1010FCC48, &qword_1010FCC10, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v63 = v54;
  v97 = v56;
  v64 = v110;
  v65 = v61;
  v66 = v109;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v65, &v137, v59, sub_1000FC3D0, 0, v109, v130, v62, v97);
  sub_100004048(v59, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v108 + 8))(v53, v66);
  v67 = sub_10001A9A8(&qword_1011074A0);
  v68 = sub_1000193A4(&qword_1010FCC50, &qword_1010FCC18, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  v69 = v113;
  v70 = v112;
  Publisher.map<A>(_:)(sub_1000E068C, 0, v112, v67, v68);
  (*(void (**)(char *, uint64_t))(v111 + 8))(v64, v70);
  v71 = sub_10001A9A8(&qword_1010EEE90);
  v72 = sub_1000193A4(&qword_1010FCC58, &qword_1010FCC20, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v73 = sub_1000193A4(&qword_1010EEEA0, &qword_1010EEE90, (const char *)&protocol conformance descriptor for Just<A>);
  v74 = v115;
  Publisher.catch<A>(_:)(sub_1002197E4, 0, v115, v71, v72, v73);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v69, v74);
  v75 = swift_allocObject(&unk_101077E88, 24, 7);
  swift_weakInit(v75 + 16, v101);
  sub_10005972C(v120, v132, type metadata accessor for AccessoryCommand);
  v76 = v124;
  v77 = *(void (**)(char *, uint64_t, uint64_t))(v124 + 16);
  v78 = v126;
  v77(v133, v121, v126);
  v77(v134, v122, v78);
  v79 = *(unsigned __int8 *)(v118 + 80);
  v80 = (v79 + 32) & ~v79;
  v81 = (v119 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
  v82 = *(unsigned __int8 *)(v76 + 80);
  v83 = (v82 + v81 + 16) & ~v82;
  v84 = (v123 + v82 + v83) & ~v82;
  v85 = (v123 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
  v86 = swift_allocObject(&unk_101078540, v85 + 8, v79 | v82 | 7);
  *(_QWORD *)(v86 + 16) = v75;
  v87 = v129;
  *(_QWORD *)(v86 + 24) = v129;
  sub_1000126EC(v132, v86 + v80, type metadata accessor for AccessoryCommand);
  v88 = (_QWORD *)(v86 + v81);
  v89 = v127;
  *v88 = v125;
  v88[1] = v89;
  v90 = *(void (**)(uint64_t, char *, uint64_t))(v76 + 32);
  v90(v86 + v83, v133, v78);
  v90(v86 + v84, v134, v78);
  v91 = v128;
  *(_QWORD *)(v86 + v85) = v128;
  v92 = sub_1000193A4(&qword_1010FCC60, &qword_1010FCC28, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  swift_retain();
  v93 = v91;
  v94 = v117;
  v95 = v131;
  Publisher<>.sink(receiveValue:)(sub_1004714EC, v86, v117, v92);
  swift_release();
  (*(void (**)(char *, uint64_t))(v116 + 8))(v95, v94);
  AnyCancellable.store(in:)(v87);
  return swift_release();
}

uint64_t sub_10045D600@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v5 = *a1;
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B6F48);
  sub_1007885B0(0xD00000000000001FLL, 0x8000000100ED6EB0);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = swift_allocObject(&unk_101078590, 32, 7);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v5;
  v9 = sub_10001A9A8(&qword_1010FCC68);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  swift_retain();
  v10 = v5;
  Future.init(_:)(sub_1004715D0, v8, v11);
  v12 = sub_1000193A4(&qword_1010FCC70, &qword_1010FCC68, (const char *)&protocol conformance descriptor for Future<A, B>);
  v13 = Publisher.eraseToAnyPublisher()(v9, v12);
  result = swift_release();
  *a3 = v13;
  return result;
}

void sub_10045D744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSObject **a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Strong;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_BYTE *, uint64_t, uint64_t);
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(_BYTE *, uint64_t);
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  NSObject *v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint8_t *v50;
  NSObject **v51;
  NSObject *v52;
  NSObject **v53;
  uint64_t v54;
  void (*v55)(_BYTE *, uint64_t);
  void *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE v80[12];
  int v81;
  uint64_t v82;
  NSObject **v83;
  void *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[6];
  NSObject *v91;
  uint64_t v92;
  _QWORD v93[5];
  char v94;
  char v95[32];

  v87 = a6;
  v85 = a4;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = &v80[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  v20 = &v80[-v19];
  v21 = sub_10001A9A8(&qword_1010FCA38);
  __chkstk_darwin(v21);
  v86 = (uint64_t *)&v80[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v95, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v24 = Strong;
    Transaction.capture()();
    sub_10000F9B8(a1, (uint64_t)v93, &qword_1011074A0);
    if ((v94 & 1) != 0)
    {
      v85 = v24;
      sub_100059244((uint64_t)v93, (uint64_t)&v91);
      if (qword_1010E9C18 != -1)
        swift_once(&qword_1010E9C18, sub_10044E058);
      v84 = a9;
      v25 = type metadata accessor for Logger(0);
      sub_10001A9E8(v25, (uint64_t)qword_1011B6F48);
      sub_100059280(&v91, (uint64_t)v90);
      v26 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16);
      v26(v20, a7, v14);
      v27 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v26)(v18, a8, v14);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.error.getter(v28);
      v30 = v29;
      if (os_log_type_enabled(v28, v29))
      {
        v31 = swift_slowAlloc(42, -1);
        v81 = v30;
        v32 = v31;
        v82 = swift_slowAlloc(96, -1);
        v89 = v82;
        *(_DWORD *)v32 = 136446979;
        v33 = sub_100059390();
        v34 = Error.localizedDescription.getter(&type metadata for CentralManager.Error, v33);
        v88 = sub_100016940(v34, v35, &v89);
        v83 = a5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v32 + 4, v32 + 12);
        swift_bridgeObjectRelease();
        sub_1000593D4(v90);
        *(_WORD *)(v32 + 12) = 2160;
        v88 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v32 + 14, v32 + 22);
        *(_WORD *)(v32 + 22) = 2081;
        v36 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v37 = dispatch thunk of CustomStringConvertible.description.getter(v14, v36);
        v88 = sub_100016940(v37, v38, &v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v32 + 24, v32 + 32);
        swift_bridgeObjectRelease();
        v39 = *(void (**)(_BYTE *, uint64_t))(v15 + 8);
        v39(v20, v14);
        *(_WORD *)(v32 + 32) = 2082;
        v40 = dispatch thunk of CustomStringConvertible.description.getter(v14, v36);
        v88 = sub_100016940(v40, v41, &v89);
        a5 = v83;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v32 + 34, v32 + 42);
        swift_bridgeObjectRelease();
        v39(v18, v14);
        _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v81, "connectAirTag error: %{public}s. Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v32, 0x2Au);
        v42 = v82;
        swift_arrayDestroy(v82, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1, -1);
        swift_slowDealloc(v32, -1, -1);
      }
      else
      {
        sub_1000593D4(v90);
        v55 = *(void (**)(_BYTE *, uint64_t))(v15 + 8);
        v55(v20, v14);
        v55(v18, v14);
      }

      swift_retain();
      v56 = v84;
      v57 = sub_100E08534(v84);
      swift_release();
      v90[0] = v57;
      v58 = swift_allocObject(&unk_101078568, 24, 7);
      *(_QWORD *)(v58 + 16) = v56;
      v59 = v56;
      v60 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
      v61 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
      Publisher.oneshot(_:)(sub_1004715C4, v58, v60, v61);
      swift_release();
      swift_release();
      v62 = sub_100059390();
      v63 = swift_allocError(&type metadata for CentralManager.Error, v62, 0, 0);
      sub_100059280(&v91, v64);
      v65 = (uint64_t)v86;
      *v86 = v63;
      v66 = type metadata accessor for OwnerCommandManager.Error(0);
      swift_storeEnumTagMultiPayload(v65, v66, 1);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v65, 0, 1, v66);
      ((void (*)(uint64_t))a5)(v65);
      swift_release();
      sub_100004048(v65, &qword_1010FCA38);
      sub_1000593D4(&v91);
    }
    else
    {
      v43 = (void *)v93[0];
      if (qword_1010E9C18 != -1)
        swift_once(&qword_1010E9C18, sub_10044E058);
      v44 = type metadata accessor for Logger(0);
      v45 = (void *)sub_10001A9E8(v44, (uint64_t)qword_1011B6F48);
      v46 = v43;
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.default.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        v49 = swift_slowAlloc(12, -1);
        v84 = v45;
        v50 = (uint8_t *)v49;
        v83 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v50 = 138412290;
        v91 = v46;
        v51 = a5;
        v52 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v50 + 4, v50 + 12);
        v53 = v83;
        *v83 = v46;

        a5 = v51;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "AirTag %@ is connected and ready to send data.", v50, 0xCu);
        v54 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v53, 1, v54);
        swift_slowDealloc(v53, -1, -1);
        swift_slowDealloc(v50, -1, -1);
      }
      else
      {

        v47 = v46;
      }
      v67 = v85;

      sub_100C58310();
      v69 = v68;
      v71 = v70;
      v74 = sub_1004703BC(v72, v68, v73, v70);
      if ((~(v71 & v69) & 0x3000000000000000) != 0)
      {
        sub_100461350(v67, (uint64_t)v46);
        sub_10045E204(v67, (uint64_t)v46, (uint64_t)a5, v87);
        swift_release();

      }
      else
      {
        v75 = Logger.logObject.getter(v74);
        v76 = static os_log_type_t.default.getter(v75);
        if (os_log_type_enabled(v75, v76))
        {
          v77 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v77 = 0;
          _os_log_impl((void *)&_mh_execute_header, v75, v76, "No AirTag command to execute. Calling completion.", v77, 2u);
          swift_slowDealloc(v77, -1, -1);
        }

        sub_10044E990(v67, 0, v46, 0);
        v78 = type metadata accessor for OwnerCommandManager.Error(0);
        v79 = (uint64_t)v86;
        (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v86, 1, 1, v78);
        ((void (*)(uint64_t))a5)(v79);
        swift_release();

        sub_100004048(v79, &qword_1010FCA38);
      }
    }
  }
}

void sub_10045DF8C(uint64_t a1, void *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  _BYTE v16[48];
  _BYTE v17[48];
  id v18;
  _BYTE v19[40];

  sub_10000F9B8(a1, (uint64_t)&v18, &qword_1011074A0);
  if ((v19[33] & 1) != 0)
  {
    sub_100059244((uint64_t)&v18, (uint64_t)v17);
    v3 = sub_100059390();
    swift_willThrowTypedImpl(v17, &type metadata for CentralManager.Error, v3);
    sub_100059244((uint64_t)v17, (uint64_t)v16);
    v4 = swift_allocError(&type metadata for CentralManager.Error, v3, 0, 0);
    sub_100059244((uint64_t)v16, v5);
    swift_errorRetain(v4);
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B6F48);
    v7 = a2;
    v8 = swift_errorRetain(v4);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc(22, -1);
      v12 = (_QWORD *)swift_slowAlloc(16, -1);
      *(_DWORD *)v11 = 138543618;
      v13 = (void *)_convertErrorToNSError(_:)(v4);
      v18 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v11 + 4, v11 + 12);
      *v12 = v13;
      swift_errorRelease(v4);
      *(_WORD *)(v11 + 12) = 2114;
      v18 = v7;
      v14 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v11 + 14, v11 + 22);
      v12[1] = v7;

      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Disconnection failure: %{public}@ %{public}@!", (uint8_t *)v11, 0x16u);
      v15 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v12, 2, v15);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_errorRelease(v4);
    }
    else
    {
      swift_errorRelease(v4);
      swift_errorRelease(v4);

    }
    swift_errorRelease(v4);
  }
  else
  {

  }
}

void sub_10045E204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  id v30;
  _QWORD v31[10];
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;

  v53 = a3;
  v54 = a4;
  v56 = a2;
  v6 = sub_10001A9A8(&qword_1010FCA38);
  __chkstk_darwin(v6);
  v52 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v47 - 8);
  v8 = __chkstk_darwin(v47);
  v46 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v44 = (char *)v31 - v10;
  v11 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v11);
  v31[9] = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_10001A9A8(&qword_1010F3980);
  v31[8] = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v31[7] = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_10001A9A8(&qword_1010FCBD8);
  v34 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v33 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_10001A9A8(&qword_1010FCBE0);
  v39 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v36 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_10001A9A8(&qword_1010FCBE8);
  v42 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v41 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AccessoryCommand(0);
  v38 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v19 = __chkstk_darwin(v18);
  v20 = __chkstk_darwin(v19);
  v37 = (char *)v31 - v21;
  __chkstk_darwin(v20);
  v48 = (char *)v31 - v22;
  v23 = type metadata accessor for BinaryEncoder(0);
  v50 = *(_QWORD *)(v23 - 8);
  v51 = v23;
  __chkstk_darwin(v23);
  v55 = (char *)v31 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DispatchPredicate(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (_QWORD *)((char *)v31 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = v4;
  v29 = *(void **)(v4 + 72);
  *v28 = v29;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v26 + 104))(v28, enum case for DispatchPredicate.onQueue(_:), v25);
  v30 = v29;
  LOBYTE(v29) = _dispatchPreconditionTest(_:)(v28);
  (*(void (**)(_QWORD *, uint64_t))(v26 + 8))(v28, v25);
  if ((v29 & 1) != 0)
  {
    v31[6] = v30;
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x10045F4E8);
}

_QWORD *sub_10045F570(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, void (*a6)(uint64_t *), uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *result;
  void *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  NSObject *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  NSObject *v61;
  NSObject *v62;
  NSObject **v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  void *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject **v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t *);
  void **aBlock;
  _QWORD v103[5];
  uint64_t v104;
  uint64_t v105;
  _QWORD v106[6];
  _QWORD v107[2];
  char v108;
  char v109[8];

  v100 = a7;
  v101 = a6;
  v99 = a5;
  v92 = a4;
  v91 = a3;
  v9 = sub_10001A9A8(&qword_1010FCA38);
  __chkstk_darwin(v9);
  v11 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for DispatchWorkItemFlags(0);
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v96 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for DispatchQoS(0);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v93 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for AccessoryCommand(0);
  v90 = *(_QWORD *)(v87 - 8);
  v14 = *(_QWORD *)(v90 + 64);
  v15 = __chkstk_darwin(v87);
  v16 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v86 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v86 - v20;
  v22 = type metadata accessor for DispatchQoS.QoSClass(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v86 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v109, 0, 0);
  result = (_QWORD *)swift_weakLoadStrong(a2);
  if (result)
  {
    v89 = (uint64_t *)v11;
    v88 = result;
    v27 = (void *)result[8];
    if (v27)
    {
      v28 = (void *)result[8];
    }
    else
    {
      sub_10001F6FC();
      (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v25, enum case for DispatchQoS.QoSClass.default(_:), v22);
      v29 = static OS_dispatch_queue.global(qos:)(v25);
      v30 = v25;
      v28 = (void *)v29;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v30, v22);
    }
    sub_10000F9B8(a1, (uint64_t)v107, &qword_1011074A0);
    if ((v108 & 1) != 0)
    {
      sub_100059244((uint64_t)v107, (uint64_t)&aBlock);
      v31 = qword_1010E9C18;
      v32 = v27;
      if (v31 != -1)
        swift_once(&qword_1010E9C18, sub_10044E058);
      v33 = type metadata accessor for Logger(0);
      sub_10001A9E8(v33, (uint64_t)qword_1011B6F48);
      sub_100059280(&aBlock, (uint64_t)v106);
      v34 = v99;
      sub_10005972C(v99, (uint64_t)v19, type metadata accessor for AccessoryCommand);
      v35 = sub_10005972C(v34, (uint64_t)v16, type metadata accessor for AccessoryCommand);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.error.getter(v36);
      v38 = v37;
      if (os_log_type_enabled(v36, v37))
      {
        v39 = swift_slowAlloc(42, -1);
        v99 = swift_slowAlloc(96, -1);
        v105 = v99;
        *(_DWORD *)v39 = 136446979;
        v40 = sub_100059390();
        v41 = Error.localizedDescription.getter(&type metadata for CentralManager.Error, v40);
        v104 = sub_100016940(v41, v42, &v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v39 + 4, v39 + 12);
        swift_bridgeObjectRelease();
        sub_1000593D4(v106);
        *(_WORD *)(v39 + 12) = 2160;
        v104 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v39 + 14, v39 + 22);
        *(_WORD *)(v39 + 22) = 2081;
        v43 = type metadata accessor for UUID(0);
        LODWORD(v98) = v38;
        v44 = v43;
        v45 = v28;
        v46 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v47 = dispatch thunk of CustomStringConvertible.description.getter(v44, v46);
        v104 = sub_100016940(v47, v48, &v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v39 + 24, v39 + 32);
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v19, type metadata accessor for AccessoryCommand);
        *(_WORD *)(v39 + 32) = 2082;
        v49 = v46;
        v28 = v45;
        v50 = dispatch thunk of CustomStringConvertible.description.getter(v44, v49);
        v104 = sub_100016940(v50, v51, &v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v39 + 34, v39 + 42);
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v16, type metadata accessor for AccessoryCommand);
        _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v98, "_executeAirTag error: %{public}s. Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v39, 0x2Au);
        v52 = v99;
        swift_arrayDestroy(v99, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1, -1);
        swift_slowDealloc(v39, -1, -1);
      }
      else
      {
        sub_1000593D4(v106);
        sub_1000126B0((uint64_t)v19, type metadata accessor for AccessoryCommand);
        sub_1000126B0((uint64_t)v16, type metadata accessor for AccessoryCommand);
      }

      v65 = v89;
      v66 = sub_100059390();
      v67 = swift_allocError(&type metadata for CentralManager.Error, v66, 0, 0);
      sub_100059280(&aBlock, v68);
      *v65 = v67;
      v69 = type metadata accessor for OwnerCommandManager.Error(0);
      swift_storeEnumTagMultiPayload(v65, v69, 1);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v65, 0, 1, v69);
      v101(v65);

      swift_release();
      sub_100004048((uint64_t)v65, &qword_1010FCA38);
      return sub_1000593D4(&aBlock);
    }
    else
    {
      v53 = (void *)v107[0];
      v54 = qword_1010E9C18;
      v55 = v27;
      if (v54 != -1)
        swift_once(&qword_1010E9C18, sub_10044E058);
      v56 = type metadata accessor for Logger(0);
      sub_10001A9E8(v56, (uint64_t)qword_1011B6F48);
      v57 = v53;
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.default.getter(v58);
      if (os_log_type_enabled(v58, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc(12, -1);
        v86 = (NSObject **)swift_slowAlloc(8, -1);
        v87 = (uint64_t)v28;
        *(_DWORD *)v60 = 138412290;
        aBlock = (void **)&v57->isa;
        v61 = v57;
        v62 = v57;
        v28 = (void *)v87;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v103, v60 + 4, v60 + 12);
        v63 = v86;
        *v86 = v61;

        v57 = v61;
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Command successfully sent to AirTag %@", v60, 0xCu);
        v64 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v63, 1, v64);
        swift_slowDealloc(v63, -1, -1);
        swift_slowDealloc(v60, -1, -1);
      }
      else
      {

        v58 = v57;
      }
      v70 = (uint64_t)v89;

      sub_10005972C(v99, (uint64_t)v21, type metadata accessor for AccessoryCommand);
      v71 = *(unsigned __int8 *)(v90 + 80);
      v72 = (v71 + 40) & ~v71;
      v73 = swift_allocObject(&unk_1010784F0, v72 + v14, v71 | 7);
      v74 = v91;
      *(_QWORD *)(v73 + 16) = v91;
      v75 = v92;
      *(_BYTE *)(v73 + 24) = v92;
      *(_QWORD *)(v73 + 32) = v88;
      sub_1000126EC((uint64_t)v21, v73 + v72, type metadata accessor for AccessoryCommand);
      v103[3] = sub_100471358;
      v103[4] = v73;
      aBlock = _NSConcreteStackBlock;
      v103[0] = 1107296256;
      v103[1] = sub_100016FB8;
      v103[2] = &unk_101078508;
      v76 = _Block_copy(&aBlock);
      sub_1002A70A8(v74, v75);
      v77 = swift_retain();
      v78 = v93;
      static DispatchQoS.unspecified.getter(v77);
      v106[0] = _swiftEmptyArrayStorage;
      v79 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v80 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v81 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v82 = v96;
      v83 = v80;
      v84 = v98;
      dispatch thunk of SetAlgebra.init<A>(_:)(v106, v83, v81, v98, v79);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v78, v82, v76);
      _Block_release(v76);
      (*(void (**)(char *, uint64_t))(v97 + 8))(v82, v84);
      (*(void (**)(char *, uint64_t))(v94 + 8))(v78, v95);
      swift_release();
      v85 = type metadata accessor for OwnerCommandManager.Error(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v70, 1, 1, v85);
      v101((uint64_t *)v70);

      swift_release();
      return (_QWORD *)sub_100004048(v70, &qword_1010FCA38);
    }
  }
  return result;
}

uint64_t sub_10045FF5C(uint64_t result, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;

  if (a2)
  {
    if (a2 == 1)
    {
      result = swift_unknownObjectWeakLoadStrong(a3 + 40);
      if (!result)
        return result;
      v5 = result;
      v6 = a4 + *(int *)(type metadata accessor for AccessoryCommand(0) + 20);
      swift_retain();
      v7 = "SPPlaySound didStartPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s";
      v8 = sub_1005F40A4;
LABEL_10:
      sub_10046FF0C(v6, a4, 0, v5, v7, (uint64_t (*)(_QWORD, _QWORD))v8);
      swift_release();
      return swift_unknownObjectRelease(v5);
    }
    v9 = result;
    result = swift_unknownObjectWeakLoadStrong(a3 + 40);
    v5 = result;
    if (!v9)
    {
      if (!result)
        return result;
      v6 = a4 + *(int *)(type metadata accessor for AccessoryCommand(0) + 20);
      swift_retain();
      v7 = "SPPlaySound didStopPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s";
      v8 = sub_1005F5ED4;
      goto LABEL_10;
    }
    if (result)
      return swift_unknownObjectRelease(v5);
  }
  return result;
}

uint64_t sub_100460048(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v6 = v5;
  v47 = a4;
  v48 = a5;
  v9 = *v6;
  v45 = a2;
  v46 = v9;
  v10 = sub_10001A9A8(&qword_1010FCA38);
  __chkstk_darwin(v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AccessoryCommand(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (uint64_t *)((char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = (void *)v6[9];
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  sub_100C58310();
  if ((~(v25 & v23) & 0x3000000000000000) == 0)
  {
    if (qword_1010E9C18 == -1)
    {
LABEL_4:
      v26 = type metadata accessor for Logger(0);
      sub_10001A9E8(v26, (uint64_t)qword_1011B6F48);
      v27 = sub_10005972C(a1, (uint64_t)v15, type metadata accessor for AccessoryCommand);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.error.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(12, -1);
        v31 = swift_slowAlloc(32, -1);
        v50 = v31;
        *(_DWORD *)v30 = 136446210;
        sub_100C58714();
        v49 = sub_100016940(v32, v33, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v30 + 4, v30 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v15, type metadata accessor for AccessoryCommand);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "_execute invalid command %{public}s", v30, 0xCu);
        swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v30, -1, -1);
      }
      else
      {
        sub_1000126B0((uint64_t)v15, type metadata accessor for AccessoryCommand);
      }

      v43 = type metadata accessor for OwnerCommandManager.Error(0);
      swift_storeEnumTagMultiPayload(v12, v43, 9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v12, 0, 1, v43);
      v47(v12);
      return sub_100004048((uint64_t)v12, &qword_1010FCA38);
    }
LABEL_12:
    swift_once(&qword_1010E9C18, sub_10044E058);
    goto LABEL_4;
  }
  v34 = v22;
  v35 = v23;
  v36 = v24;
  v37 = v25;
  v38 = (_BYTE *)(a1 + *(int *)(v13 + 24));
  if (!v38[8])
    *((_BYTE *)v6 + 176) = *v38 & 1;
  v39 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v39);
  *(&v44 - 12) = (uint64_t)v6;
  *(&v44 - 11) = v34;
  *(&v44 - 10) = v35;
  *(&v44 - 9) = v36;
  *(&v44 - 8) = v37;
  *(&v44 - 7) = a3;
  v40 = v45;
  *(&v44 - 6) = a1;
  *(&v44 - 5) = v40;
  v41 = v48;
  *(&v44 - 4) = (uint64_t)v47;
  *(&v44 - 3) = v41;
  *(&v44 - 2) = v46;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.DebugCommandManager.executeCommand", 64, 2, sub_100470FC0, &v44 - 14);
  return sub_1004703BC(v34, v35, v36, v37);
}

uint64_t sub_100460438(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  id v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  __n128 v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  void (*v96)(uint64_t, uint64_t, __n128);
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t inited;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135[2];
  char v136[8];
  id v137;
  id v138[4];
  char v139;
  char v140;
  uint64_t v141;

  v125 = a8;
  v127 = a1;
  v129 = a11;
  v126 = a10;
  v128 = a9;
  v108 = type metadata accessor for UUID(0);
  v106 = *(_QWORD *)(v108 - 8);
  v17 = __chkstk_darwin(v108);
  v107 = (char *)&v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v109 = (char *)&v106 - v19;
  v20 = type metadata accessor for AccessoryCommand(0);
  v122 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v123 = v21;
  v124 = (uint64_t)&v106 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v22);
  v24 = (char *)&v106 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_10001A9A8(&qword_1010FCB98);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v132 = (char *)&v106 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_10001A9A8(&qword_1010FCBA0);
  v113 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v112 = (char *)&v106 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_10001A9A8(&qword_1010FCBA8);
  v116 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v115 = (char *)&v106 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_10001A9A8(&qword_1010FCBB0);
  v120 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121);
  v133 = (char *)&v106 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = swift_allocObject(&unk_1010783B0, 24, 7);
  v119 = v29;
  *(_QWORD *)(v29 + 16) = 0;
  v118 = v29 + 16;
  v138[0] = a3;
  v138[1] = a4;
  v138[2] = a5;
  v138[3] = a6;
  v139 = 0;
  v140 = 0;
  sub_1001E9684((uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (unint64_t)a6, sub_10001BBBC);
  v130 = a7;
  v30 = (void *)sub_100469E20((uint64_t)v138, a7);
  sub_100004048((uint64_t)v138, &qword_1010FCAD8);
  v138[0] = v30;
  v131 = a2;
  v137 = *(id *)(a2 + 72);
  v31 = v137;
  v32 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56);
  v33(v24, 1, 1, v32);
  v34 = v31;
  v35 = sub_10001A9A8(&qword_1010FCAD0);
  v36 = sub_10001F6FC();
  v37 = sub_1000193A4(&qword_1010FCB18, &qword_1010FCAD0, (const char *)&protocol conformance descriptor for Future<A, B>);
  v38 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v137, v24, v35, v36, v37, v38);
  sub_100004048((uint64_t)v24, &qword_1010EECC8);

  swift_release();
  if (qword_1010E9C20 != -1)
    swift_once(&qword_1010E9C20, sub_10044E424);
  v39 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v40 = sub_10001A9E8(v39, (uint64_t)qword_1010FC598);
  v138[0] = v34;
  v33(v24, 1, 1, v32);
  v41 = sub_1000193A4(&qword_1010FCBB8, &qword_1010FCB98, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v42 = v34;
  v43 = v112;
  v44 = v40;
  v45 = v111;
  v46 = v132;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v44, v138, v24, sub_1000FC3D0, 0, v111, v36, v41, v38);
  sub_100004048((uint64_t)v24, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v110 + 8))(v46, v45);
  v47 = sub_10001A9A8(&qword_1010FCAA8);
  v48 = sub_1000193A4(&qword_1010FCBC0, &qword_1010FCBA0, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  v49 = v115;
  v50 = v114;
  Publisher.map<A>(_:)(sub_100472050, 0, v114, v47, v48);
  (*(void (**)(char *, uint64_t))(v113 + 8))(v43, v50);
  v51 = sub_10001A9A8(&qword_1010FCB30);
  v52 = sub_1000193A4(&qword_1010FCBC8, &qword_1010FCBA8, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v53 = sub_1000193A4(&qword_1010FCB40, &qword_1010FCB30, (const char *)&protocol conformance descriptor for Just<A>);
  v54 = v117;
  Publisher.catch<A>(_:)(sub_100460F54, 0, v117, v51, v52, v53);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v49, v54);
  v55 = swift_allocObject(&unk_101077E88, 24, 7);
  swift_weakInit(v55 + 16, v131);
  v56 = v124;
  sub_10005972C(v125, v124, type metadata accessor for AccessoryCommand);
  v57 = *(unsigned __int8 *)(v122 + 80);
  v58 = (v57 + 32) & ~v57;
  v59 = (v123 + v58 + 7) & 0xFFFFFFFFFFFFFFF8;
  v60 = (v59 + 15) & 0xFFFFFFFFFFFFFFF8;
  v61 = (v60 + 15) & 0xFFFFFFFFFFFFFFF8;
  v62 = (v61 + 15) & 0xFFFFFFFFFFFFFFF8;
  v63 = swift_allocObject(&unk_1010784A0, v62 + 16, v57 | 7);
  *(_QWORD *)(v63 + 16) = v55;
  *(_QWORD *)(v63 + 24) = v127;
  sub_1000126EC(v56, v63 + v58, type metadata accessor for AccessoryCommand);
  v64 = v119;
  *(_QWORD *)(v63 + v59) = v119;
  v65 = v128;
  *(_QWORD *)(v63 + v60) = v128;
  *(_QWORD *)(v63 + v61) = v130;
  v66 = (_QWORD *)(v63 + v62);
  v67 = v129;
  *v66 = v126;
  v66[1] = v67;
  v68 = sub_1000193A4(&qword_1010FCBD0, &qword_1010FCBB0, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  swift_retain();
  v69 = v65;
  swift_retain();
  swift_retain();
  v70 = v121;
  v71 = v133;
  v72 = Publisher<>.sink(receiveValue:)(sub_100471100, v63, v121, v68);
  swift_release();
  (*(void (**)(char *, uint64_t))(v120 + 8))(v71, v70);
  swift_beginAccess(v118, v138, 1, 0);
  *(_QWORD *)(v64 + 16) = v72;
  swift_release();
  v73 = *(_QWORD *)(v64 + 16);
  if (v73)
  {
    v74 = *(void **)&v69[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
    swift_retain();
    v75 = objc_msgSend(v74, "identifier");
    v76 = (uint64_t)v109;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v75);

    v77 = v131;
    v78 = (uint64_t *)(v131 + 104);
    v79 = swift_beginAccess(v131 + 104, &v137, 0, 0);
    v80 = *(_QWORD *)(v77 + 104);
    if (*(_QWORD *)(v80 + 16))
    {
      swift_bridgeObjectRetain(v80);
      v81 = sub_100003FB0(v76);
      if ((v82 & 1) != 0)
      {
        v83 = *(_QWORD *)(*(_QWORD *)(v80 + 56) + 8 * v81);
        swift_bridgeObjectRetain(v83);
        swift_bridgeObjectRelease();
        v84 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
        v85 = v76;
        v86 = v108;
        v84(v85, v108);
        v141 = v83;
        swift_retain();
        sub_100A10D30(v135, v73);
        swift_release();
        v87 = objc_msgSend(v74, "identifier");
        v88 = (uint64_t)v107;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v87);

        v89 = v141;
        swift_beginAccess(v78, v135, 33, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v78);
        v134 = *v78;
        *v78 = 0x8000000000000000;
        sub_10010CFB8(v89, v88, isUniquelyReferenced_nonNull_native);
        *v78 = v134;
        swift_bridgeObjectRelease();
        v84(v88, v86);
LABEL_14:
        swift_endAccess(v135);
        swift_release();
        return swift_release();
      }
      swift_bridgeObjectRelease();
    }
    v96 = *(void (**)(uint64_t, uint64_t, __n128))(v106 + 8);
    v97 = v108;
    v96(v76, v108, v79);
    v98 = objc_msgSend(v74, "identifier");
    v99 = (uint64_t)v107;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v98);

    v100 = sub_10001A9A8(&qword_10111BE20);
    inited = swift_initStackObject(v100, v136);
    *(_OWORD *)(inited + 16) = xmmword_100E22D10;
    *(_QWORD *)(inited + 32) = v73;
    v135[0] = inited;
    specialized Array._endMutation()(inited);
    v102 = v135[0];
    swift_retain();
    v103 = sub_100CA89B4(v102);
    swift_bridgeObjectRelease();
    swift_beginAccess(v78, v135, 33, 0);
    v104 = swift_isUniquelyReferenced_nonNull_native(*v78);
    v141 = *v78;
    *v78 = 0x8000000000000000;
    sub_10010CFB8(v103, v99, v104);
    *v78 = v141;
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v96)(v99, v97);
    goto LABEL_14;
  }
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v91 = type metadata accessor for Logger(0);
  v92 = sub_10001A9E8(v91, (uint64_t)qword_1011B6F48);
  v93 = Logger.logObject.getter(v92);
  v94 = static os_log_type_t.error.getter(v93);
  if (os_log_type_enabled(v93, v94))
  {
    v95 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v95 = 0;
    _os_log_impl((void *)&_mh_execute_header, v93, v94, "No command cancellation", v95, 2u);
    swift_slowDealloc(v95, -1, -1);
  }

  return swift_release();
}

uint64_t sub_100460F54(_QWORD *a1)
{
  return sub_10021D8E0(a1, &qword_1010FCAA8);
}

_QWORD *sub_100460F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, objc_class *a7, void (*a8)(_QWORD), uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *result;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8_t *v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  objc_class *v41;
  uint64_t v42;
  void (*v43)(_QWORD);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[48];
  char v49[32];

  v44 = a1;
  v15 = sub_10001A9A8(&qword_1010FCA38);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v49, 0, 0);
  result = (_QWORD *)swift_weakLoadStrong(a2);
  if (result)
  {
    v19 = result;
    Transaction.capture()();
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v20 = type metadata accessor for Logger(0);
    sub_10001A9E8(v20, (uint64_t)qword_1011B6F48);
    v21 = sub_10000F9B8(v44, (uint64_t)v48, &qword_1010FCAA8);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v43 = a8;
      v24 = swift_slowAlloc(12, -1);
      v41 = a7;
      v25 = (uint8_t *)v24;
      v26 = swift_slowAlloc(32, -1);
      v42 = a9;
      v27 = v26;
      v47 = v26;
      v40 = v19;
      *(_DWORD *)v25 = 136446210;
      v39 = a5;
      sub_10000F9B8((uint64_t)v48, (uint64_t)&v45, &qword_1010FCAA8);
      v28 = sub_10001A9A8(&qword_1010FCAA8);
      v29 = String.init<A>(describing:)(&v45, v28);
      v45 = sub_100016940(v29, v30, &v47);
      a5 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v25 + 4, v25 + 12);
      a8 = v43;
      swift_bridgeObjectRelease();
      sub_100004048((uint64_t)v48, &qword_1010FCAA8);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "commandSubscription result: %{public}s", v25, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      v31 = v25;
      a7 = v41;
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      sub_100004048((uint64_t)v48, &qword_1010FCAA8);
    }

    sub_10000F9B8(v44, (uint64_t)v48, &qword_1010FCAA8);
    if ((v48[41] & 1) != 0)
    {
      sub_100059244((uint64_t)v48, (uint64_t)&v45);
      swift_beginAccess(a5 + 16, v48, 0, 0);
      v32 = *(void **)(a5 + 16);
      swift_retain();
      sub_10044E990(a4, v32, a6, a7);
      swift_release();
      v33 = sub_100059390();
      v34 = swift_allocError(&type metadata for CentralManager.Error, v33, 0, 0);
      sub_100059280(&v45, v35);
      *v17 = v34;
      v36 = type metadata accessor for OwnerCommandManager.Error(0);
      swift_storeEnumTagMultiPayload(v17, v36, 1);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v17, 0, 1, v36);
      a8(v17);
      swift_release();
      sub_100004048((uint64_t)v17, &qword_1010FCA38);
      return sub_1000593D4(&v45);
    }
    else
    {
      sub_100004048((uint64_t)v48, &qword_1010FCAA8);
      v37 = type metadata accessor for OwnerCommandManager.Error(0);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v17, 1, 1, v37);
      a8(v17);
      swift_release();
      return (_QWORD *)sub_100004048((uint64_t)v17, &qword_1010FCA38);
    }
  }
  return result;
}

uint64_t sub_100461350(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[2];

  v53 = a1;
  v3 = *v2;
  v50 = a2;
  v51 = v3;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v52 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v45 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v45 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v45 - v14;
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(char **)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (void *)v2[9];
  *(_QWORD *)v19 = v20;
  (*((void (**)(char *, _QWORD, uint64_t))v17 + 13))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  (*((void (**)(char *, uint64_t))v17 + 1))(v19, v16);
  if ((v20 & 1) != 0)
  {
    v49 = v2;
    v22 = type metadata accessor for AccessoryCommand(0);
    v23 = v53;
    v24 = v53 + *(int *)(v22 + 20);
    v47 = v5;
    v19 = *(char **)(v5 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v19)(v15, v24, v4);
    ((void (*)(char *, uint64_t, uint64_t))v19)(v13, v23, v4);
    v17 = v13;
    if (qword_1010E9C18 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010E9C18, sub_10044E058);
LABEL_3:
  v25 = type metadata accessor for Logger(0);
  sub_10001A9E8(v25, (uint64_t)qword_1011B6F48);
  v48 = v15;
  ((void (*)(char *, char *, uint64_t))v19)(v10, v15, v4);
  v26 = v52;
  v27 = ((uint64_t (*)(char *, char *, uint64_t))v19)(v52, v17, v4);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = swift_slowAlloc(32, -1);
    v31 = swift_slowAlloc(64, -1);
    v45 = v31;
    *(_DWORD *)v30 = 141558531;
    v54 = 1752392040;
    v55[0] = v31;
    v46 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v30 + 4, v30 + 12);
    *(_WORD *)(v30 + 12) = 2081;
    v32 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v33 = dispatch thunk of CustomStringConvertible.description.getter(v4, v32);
    v54 = sub_100016940(v33, v34, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v30 + 14, v30 + 22);
    swift_bridgeObjectRelease();
    v35 = *(void (**)(char *, uint64_t))(v47 + 8);
    v35(v10, v4);
    *(_WORD *)(v30 + 22) = 2082;
    v36 = v52;
    v37 = dispatch thunk of CustomStringConvertible.description.getter(v4, v32);
    v54 = sub_100016940(v37, v38, v55);
    v17 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v30 + 24, v30 + 32);
    swift_bridgeObjectRelease();
    v35(v36, v4);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "receiveData: beacon %{private,mask.hash}s Command %{public}s", (uint8_t *)v30, 0x20u);
    v39 = v45;
    swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    v35 = *(void (**)(char *, uint64_t))(v47 + 8);
    v35(v10, v4);
    v35(v26, v4);
  }

  v40 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v40);
  v41 = v48;
  v42 = v50;
  *(&v45 - 6) = (uint64_t)v49;
  *(&v45 - 5) = v42;
  *(&v45 - 4) = v53;
  *(&v45 - 3) = (uint64_t)v41;
  v43 = v51;
  *(&v45 - 2) = (uint64_t)v17;
  *(&v45 - 1) = v43;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.OwnerCommandManager.receiveData", 61, 2, sub_100470C80, &v45 - 8);
  v35(v17, v4);
  return ((uint64_t (*)(char *, uint64_t))v35)(v41, v4);
}

uint64_t sub_1004617C0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  id v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  __n128 v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t);
  id v105;
  uint64_t v106;
  uint64_t v107;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint8_t *v113;
  void (*v114)(uint64_t, uint64_t, __n128);
  id v115;
  uint64_t v116;
  uint64_t inited;
  uint64_t v118;
  uint64_t v119;
  char v120;
  char *v122;
  uint64_t v123;
  id v124;
  uint64_t v125;
  char *v126;
  void (*v127)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  char v162[8];
  id v163;
  id v164;
  uint64_t v165;

  v147 = a6;
  v146 = a5;
  v136 = a4;
  v149 = a1;
  v155 = type metadata accessor for UUID(0);
  v154 = *(_QWORD *)(v155 - 8);
  v9 = __chkstk_darwin(v155);
  v122 = (char *)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v153 = (char *)&v122 - v12;
  v148 = v13;
  __chkstk_darwin(v11);
  v157 = (char *)&v122 - v14;
  v15 = type metadata accessor for AccessoryCommand(0);
  v134 = *(_QWORD *)(v15 - 8);
  v152 = *(_QWORD *)(v134 + 64);
  __chkstk_darwin(v15);
  v156 = (uint64_t)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v17);
  v19 = (char *)&v122 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_10001A9A8(&qword_1010EED38);
  v131 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v21 = (char *)&v122 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = sub_10001A9A8(&qword_1010EED40);
  v135 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v126 = (char *)&v122 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_10001A9A8(&qword_1010FCB50);
  v137 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v132 = (char *)&v122 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_10001A9A8(&qword_1010FCB58);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v139 = (char *)&v122 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = sub_10001A9A8(&qword_1010FCB60);
  v144 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v151 = (char *)&v122 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = swift_allocObject(&unk_1010783B0, 24, 7);
  v143 = v26;
  *(_QWORD *)(v26 + 16) = 0;
  v142 = v26 + 16;
  v158 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 24);
  v159 = a3;
  v150 = a3;
  v27 = sub_10001A9A8((uint64_t *)&unk_1010FB900);
  Lock.callAsFunction<A>(_:)(sub_100470CA0);
  v123 = v6;
  v163 = *(id *)(a2 + 72);
  v28 = v163;
  v29 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v128 = v29;
  v127 = v30;
  ((void (*)(char *, uint64_t, uint64_t))v30)(v19, 1, 1);
  v31 = sub_10001F6FC();
  v32 = sub_1000193A4(&qword_1010FB910, (uint64_t *)&unk_1010FB900, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v33 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v124 = v28;
  v129 = v31;
  v125 = v33;
  Publisher.receive<A>(on:options:)(&v163, v19, v27, v31, v32, v33);
  sub_100004048((uint64_t)v19, &qword_1010EECC8);

  swift_release();
  v34 = swift_retain();
  v35 = static Subscribers.Demand.unlimited.getter(v34);
  v36 = sub_10001A9A8(&qword_1010EC530);
  v37 = sub_10001A9A8(&qword_1010EEC28);
  v38 = sub_1000193A4(&qword_1010EED78, &qword_1010EED38, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v39 = sub_1000193A4(&qword_1010EED80, &qword_1010EEC28, (const char *)&protocol conformance descriptor for Future<A, B>);
  v40 = v126;
  v41 = v130;
  v42 = v37;
  v43 = v136;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v35, sub_100470CB8, a2, v130, v36, v42, v38, v39);
  swift_release();
  (*(void (**)(char *, uint64_t))(v131 + 8))(v21, v41);
  v44 = v156;
  sub_10005972C(v43, v156, type metadata accessor for AccessoryCommand);
  v45 = *(unsigned __int8 *)(v134 + 80);
  v134 = ~v45;
  v46 = (v45 + 24) & ~v45;
  v47 = swift_allocObject(&unk_101078450, v46 + v152, v45 | 7);
  *(_QWORD *)(v47 + 16) = a2;
  sub_1000126EC(v44, v47 + v46, type metadata accessor for AccessoryCommand);
  swift_retain();
  v48 = sub_10001A9A8(&qword_1010FCB68);
  v49 = sub_1000193A4(&qword_1010EED88, &qword_1010EED40, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v50 = v132;
  v51 = v133;
  Publisher.map<A>(_:)(sub_100470D94, v47, v133, v48, v49);
  swift_release();
  (*(void (**)(char *, uint64_t))(v135 + 8))(v40, v51);
  if (qword_1010E9C20 != -1)
    swift_once(&qword_1010E9C20, sub_10044E424);
  v52 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v53 = sub_10001A9E8(v52, (uint64_t)qword_1010FC598);
  v54 = v124;
  v164 = v124;
  v127(v19, 1, 1, v128);
  v55 = sub_1000193A4(&qword_1010FCB70, &qword_1010FCB50, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v56 = v54;
  v57 = v139;
  v58 = v138;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v53, &v164, v19, sub_1000E2DBC, 0, v138, v129, v55, v125);
  sub_100004048((uint64_t)v19, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v137 + 8))(v50, v58);
  v59 = sub_10001A9A8(&qword_1010FCB78);
  v60 = sub_1000193A4(&qword_1010FCB80, &qword_1010FCB58, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  v61 = sub_1000193A4(&qword_1010FCB88, &qword_1010FCB78, (const char *)&protocol conformance descriptor for Just<A>);
  v62 = v141;
  Publisher.catch<A>(_:)(sub_1004624F4, 0, v141, v59, v60, v61);
  (*(void (**)(char *, uint64_t))(v140 + 8))(v57, v62);
  v63 = swift_allocObject(&unk_101077E88, 24, 7);
  swift_weakInit(v63 + 16, a2);
  v64 = v154;
  v65 = *(void (**)(char *, uint64_t, uint64_t))(v154 + 16);
  v66 = v155;
  v65(v157, v146, v155);
  v65(v153, v147, v66);
  sub_10005972C(v43, v156, type metadata accessor for AccessoryCommand);
  v67 = *(unsigned __int8 *)(v64 + 80);
  v68 = (v67 + 32) & ~v67;
  v147 = a2;
  v69 = (v148 + v67 + v68) & ~v67;
  v70 = (v148 + v45 + v69) & v134;
  v71 = v45 | v67 | 7;
  v72 = (v152 + v70 + 7) & 0xFFFFFFFFFFFFFFF8;
  v73 = (v72 + 15) & 0xFFFFFFFFFFFFFFF8;
  v74 = swift_allocObject(&unk_101078478, v73 + 8, v71);
  v75 = v149;
  *(_QWORD *)(v74 + 16) = v63;
  *(_QWORD *)(v74 + 24) = v75;
  v76 = v74 + v68;
  v77 = *(void (**)(uint64_t, char *, uint64_t))(v64 + 32);
  v78 = v155;
  v77(v76, v157, v155);
  v79 = v74 + v69;
  v80 = v78;
  v77(v79, v153, v78);
  sub_1000126EC(v156, v74 + v70, type metadata accessor for AccessoryCommand);
  v81 = v143;
  *(_QWORD *)(v74 + v72) = v143;
  v82 = v150;
  *(_QWORD *)(v74 + v73) = v150;
  v83 = sub_1000193A4(&qword_1010FCB90, &qword_1010FCB60, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  swift_retain();
  v84 = v82;
  v85 = v145;
  v86 = v151;
  v87 = Publisher<>.sink(receiveValue:)(sub_100470F08, v74, v145, v83);
  swift_release();
  (*(void (**)(char *, uint64_t))(v144 + 8))(v86, v85);
  swift_beginAccess(v142, &v164, 1, 0);
  *(_QWORD *)(v81 + 16) = v87;
  swift_release();
  v88 = *(_QWORD *)(v81 + 16);
  v89 = (uint64_t)v157;
  v90 = v154;
  if (v88)
  {
    v91 = v80;
    v92 = *(void **)&v84[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
    swift_retain();
    v93 = objc_msgSend(v92, "identifier");
    v94 = (uint64_t)v122;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v93);

    v95 = v147;
    v96 = (uint64_t *)(v147 + 88);
    v97 = swift_beginAccess(v147 + 88, &v163, 0, 0);
    v98 = *(_QWORD *)(v95 + 88);
    if (*(_QWORD *)(v98 + 16))
    {
      swift_bridgeObjectRetain(v98);
      v99 = sub_100003FB0(v94);
      if ((v100 & 1) != 0)
      {
        v101 = v94;
        v102 = v90;
        v103 = *(_QWORD *)(*(_QWORD *)(v98 + 56) + 8 * v99);
        swift_bridgeObjectRetain(v103);
        swift_bridgeObjectRelease();
        v104 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
        v104(v101, v91);
        v165 = v103;
        swift_retain();
        sub_100A10D30(&v161, v88);
        swift_release();
        v105 = objc_msgSend(v92, "identifier");
        v106 = (uint64_t)v157;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v105);

        v107 = v165;
        swift_beginAccess(v96, &v161, 33, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v96);
        v160 = *v96;
        *v96 = 0x8000000000000000;
        sub_10010CFB8(v107, v106, isUniquelyReferenced_nonNull_native);
        *v96 = v160;
        swift_bridgeObjectRelease();
        v104(v106, v91);
LABEL_14:
        swift_endAccess(&v161);
        swift_release();
        return swift_release();
      }
      swift_bridgeObjectRelease();
    }
    v114 = *(void (**)(uint64_t, uint64_t, __n128))(v90 + 8);
    v114(v94, v91, v97);
    v115 = objc_msgSend(v92, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v115);

    v116 = sub_10001A9A8(&qword_10111BE20);
    inited = swift_initStackObject(v116, v162);
    *(_OWORD *)(inited + 16) = xmmword_100E22D10;
    *(_QWORD *)(inited + 32) = v88;
    v161 = inited;
    specialized Array._endMutation()(inited);
    v118 = v161;
    swift_retain();
    v119 = sub_100CA89B4(v118);
    swift_bridgeObjectRelease();
    swift_beginAccess(v96, &v161, 33, 0);
    v120 = swift_isUniquelyReferenced_nonNull_native(*v96);
    v165 = *v96;
    *v96 = 0x8000000000000000;
    sub_10010CFB8(v119, v89, v120);
    *v96 = v165;
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v114)(v89, v91);
    goto LABEL_14;
  }
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v109 = type metadata accessor for Logger(0);
  v110 = sub_10001A9E8(v109, (uint64_t)qword_1011B6F48);
  v111 = Logger.logObject.getter(v110);
  v112 = static os_log_type_t.error.getter(v111);
  if (os_log_type_enabled(v111, v112))
  {
    v113 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v113 = 0;
    _os_log_impl((void *)&_mh_execute_header, v111, v112, "No notify cancellation", v113, 2u);
    swift_slowDealloc(v113, -1, -1);
  }

  return swift_release();
}

uint64_t sub_1004624F4(_QWORD *a1)
{
  return sub_10021D8E0(a1, &qword_1010FCB68);
}

_QWORD *sub_100462500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSObject *a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  _QWORD *result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint8_t *v39;
  os_log_t v40;
  void **v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void (*v55)(char *, uint64_t);
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  void (*v61)(char *, uint64_t, uint64_t);
  char *v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  unint64_t v75;
  os_log_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  void *v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  void *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  os_log_t v89;
  _QWORD *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  void **v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE v101[40];
  uint64_t v102;
  char v103;
  unsigned __int8 v104;
  char v105;
  char v106[8];

  v92 = a8;
  v93 = a7;
  v94 = a4;
  v95 = (void **)a1;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v84 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v84 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v84 - v22;
  a2 += 16;
  swift_beginAccess(a2, v106, 0, 0);
  result = (_QWORD *)swift_weakLoadStrong(a2);
  if (result)
  {
    v89 = a5;
    v90 = result;
    Transaction.capture()();
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_10001A9E8(v25, (uint64_t)qword_1011B6F48);
    v27 = sub_10000F9B8((uint64_t)v95, (uint64_t)&v102, &qword_1010FCB68);
    v88 = v26;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter(v28);
    v30 = os_log_type_enabled(v28, v29);
    v91 = a6;
    v86 = v23;
    if (v30)
    {
      v87 = v15;
      v31 = swift_slowAlloc(12, -1);
      v85 = v21;
      v32 = (uint8_t *)v31;
      v33 = swift_slowAlloc(32, -1);
      v84 = v18;
      v34 = v33;
      v100 = v33;
      *(_DWORD *)v32 = 136446210;
      sub_10000F9B8((uint64_t)&v102, (uint64_t)&v96, &qword_1010FCB68);
      v35 = sub_10001A9A8(&qword_1010FCB68);
      v36 = String.init<A>(describing:)(&v96, v35);
      v96 = sub_100016940(v36, v37, &v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v32 + 4, v32 + 12);
      v15 = v87;
      swift_bridgeObjectRelease();
      sub_100004048((uint64_t)&v102, &qword_1010FCB68);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "receiveData result: %{public}s", v32, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      v38 = v34;
      v18 = v84;
      swift_slowDealloc(v38, -1, -1);
      v39 = v32;
      v21 = v85;
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {
      sub_100004048((uint64_t)&v102, &qword_1010FCB68);
    }

    v40 = v89;
    v41 = (void **)(v93 + 16);
    sub_10000F9B8((uint64_t)v95, (uint64_t)&v102, &qword_1010FCB68);
    if ((v105 & 1) != 0)
    {
      sub_100059244((uint64_t)&v102, (uint64_t)&v96);
      sub_100059280(&v96, (uint64_t)&v100);
      v42 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
      v42(v18, v94, v11);
      v43 = ((uint64_t (*)(char *, os_log_t, uint64_t))v42)(v15, v40, v11);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.error.getter(v44);
      v46 = v45;
      if (os_log_type_enabled(v44, v45))
      {
        v47 = swift_slowAlloc(42, -1);
        v48 = swift_slowAlloc(96, -1);
        v95 = v41;
        v49 = v48;
        v99 = v48;
        *(_DWORD *)v47 = 136446979;
        v87 = v15;
        LODWORD(v94) = v46;
        sub_100E01294();
        v98 = sub_100016940(v50, v51, &v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v47 + 4, v47 + 12);
        swift_bridgeObjectRelease();
        sub_1000593D4(&v100);
        *(_WORD *)(v47 + 12) = 2160;
        v98 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v47 + 14, v47 + 22);
        *(_WORD *)(v47 + 22) = 2081;
        v52 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v53 = dispatch thunk of CustomStringConvertible.description.getter(v11, v52);
        v98 = sub_100016940(v53, v54, &v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v47 + 24, v47 + 32);
        swift_bridgeObjectRelease();
        v55 = *(void (**)(char *, uint64_t))(v12 + 8);
        v55(v18, v11);
        *(_WORD *)(v47 + 32) = 2082;
        v56 = v87;
        v57 = dispatch thunk of CustomStringConvertible.description.getter(v11, v52);
        v98 = sub_100016940(v57, v58, &v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v47 + 34, v47 + 42);
        swift_bridgeObjectRelease();
        v55(v56, v11);
        _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v94, "receiveData error %{public}s.\nBeacon %{private,mask.hash}s Command %{public}s", (uint8_t *)v47, 0x2Au);
        swift_arrayDestroy(v49, 3, (char *)&type metadata for Any + 8);
        v59 = v49;
        v41 = v95;
        swift_slowDealloc(v59, -1, -1);
        swift_slowDealloc(v47, -1, -1);
      }
      else
      {
        sub_1000593D4(&v100);
        v78 = *(void (**)(char *, uint64_t))(v12 + 8);
        v78(v18, v11);
        v78(v15, v11);
      }

      v79 = v91;
      swift_beginAccess(v41, &v100, 0, 0);
      v80 = *v41;
      swift_retain();
      sub_10044E990(v79, v80, v92, 0);
      swift_release();
      swift_release();
      return sub_1000593D4(&v96);
    }
    else
    {
      v60 = v104;
      sub_100470FAC(v102, v103);
      v61 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
      v62 = v86;
      v61(v86, v94, v11);
      v63 = ((uint64_t (*)(char *, os_log_t, uint64_t))v61)(v21, v40, v11);
      v64 = Logger.logObject.getter(v63);
      v65 = static os_log_type_t.default.getter(v64);
      v66 = v65;
      if (os_log_type_enabled(v64, v65))
      {
        v67 = swift_slowAlloc(38, -1);
        v94 = swift_slowAlloc(64, -1);
        v96 = v94;
        *(_DWORD *)v67 = 67109891;
        LODWORD(v100) = v60;
        LODWORD(v93) = v66;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, (char *)&v100 + 4, v67 + 4, v67 + 8);
        *(_WORD *)(v67 + 8) = 2160;
        v100 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v67 + 10, v67 + 18);
        *(_WORD *)(v67 + 18) = 2081;
        LODWORD(v95) = v60;
        v68 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v89 = v64;
        v69 = v21;
        v70 = v68;
        v71 = dispatch thunk of CustomStringConvertible.description.getter(v11, v68);
        v100 = sub_100016940(v71, v72, &v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v67 + 20, v67 + 28);
        swift_bridgeObjectRelease();
        v73 = *(void (**)(char *, uint64_t))(v12 + 8);
        v73(v62, v11);
        *(_WORD *)(v67 + 28) = 2082;
        v74 = dispatch thunk of CustomStringConvertible.description.getter(v11, v70);
        v100 = sub_100016940(v74, v75, &v96);
        v60 = (int)v95;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v67 + 30, v67 + 38);
        swift_bridgeObjectRelease();
        v73(v69, v11);
        v76 = v89;
        _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v93, "receiveData success complete? %{BOOL}d. Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v67, 0x26u);
        v77 = v94;
        swift_arrayDestroy(v94, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v77, -1, -1);
        swift_slowDealloc(v67, -1, -1);

      }
      else
      {
        v81 = *(void (**)(char *, uint64_t))(v12 + 8);
        v81(v62, v11);
        v81(v21, v11);

      }
      v82 = v91;
      if (v60)
      {
        swift_beginAccess(v41, &v96, 0, 0);
        v83 = *v41;
        swift_retain();
        sub_10044E990(v82, v83, v92, 0);
        swift_release();
        swift_release();
        swift_beginAccess(v41, &v100, 1, 0);
        *v41 = 0;
      }
      return (_QWORD *)swift_release();
    }
  }
  return result;
}

uint64_t sub_100462E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t result;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a2;
  v5 = *v3;
  v25 = a3;
  v26 = v5;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v25 - v11;
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = (void *)v3[9];
  *v16 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
  if ((v17 & 1) != 0)
  {
    v20 = type metadata accessor for AccessoryCommand(0);
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v21(v12, a1 + *(int *)(v20 + 20), v6);
    v21(v10, a1, v6);
    v22 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v22);
    *(&v25 - 8) = v25;
    *(&v25 - 7) = (uint64_t)v3;
    *(&v25 - 6) = a1;
    *(&v25 - 5) = (uint64_t)v12;
    v23 = v27;
    *(&v25 - 4) = (uint64_t)v10;
    *(&v25 - 3) = v23;
    *(&v25 - 2) = v26;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.OwnerCommandManager.didNotify", 59, 2, sub_1004709BC, &v25 - 10);
    v24 = *(void (**)(char *, uint64_t))(v7 + 8);
    v24(v10, v6);
    return ((uint64_t (*)(char *, uint64_t))v24)(v12, v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100463028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  void (*v109)(uint64_t, char *, uint64_t);
  uint64_t v110;
  void *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  __n128 v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  uint64_t v128;
  void (*v129)(uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v136;
  uint64_t v137;
  NSObject *v138;
  os_log_type_t v139;
  uint8_t *v140;
  void (*v141)(uint64_t, uint64_t, __n128);
  uint64_t v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t inited;
  uint64_t v147;
  uint64_t v148;
  char v149;
  id v150;
  uint64_t v151;
  void (*v152)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  unint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char v198[8];
  id v199;
  char v200[8];
  id v201;
  uint64_t v202;

  v182 = a7;
  v180 = a6;
  v179 = a5;
  v190 = a4;
  v184 = a3;
  v193 = a1;
  v183 = type metadata accessor for UUID(0);
  v185 = *(_QWORD *)(v183 - 8);
  v8 = __chkstk_darwin(v183);
  v161 = (char *)&v150 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v191 = (char *)&v150 - v11;
  v181 = v12;
  __chkstk_darwin(v10);
  v194 = (char *)&v150 - v13;
  v14 = type metadata accessor for AccessoryCommand(0);
  v166 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v189 = v15;
  v187 = (uint64_t)&v150 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v16);
  v188 = (char *)&v150 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_10001A9A8(&qword_1010EED38);
  v164 = *(_QWORD *)(v165 - 8);
  __chkstk_darwin(v165);
  v163 = (char *)&v150 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_10001A9A8(&qword_1010EED40);
  v168 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v167 = (char *)&v150 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_10001A9A8(&qword_1010FCAE8);
  v171 = *(_QWORD *)(v172 - 8);
  __chkstk_darwin(v172);
  v170 = (char *)&v150 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = sub_10001A9A8(&qword_1010FCAF0);
  v173 = *(_QWORD *)(v174 - 8);
  __chkstk_darwin(v174);
  v186 = (char *)&v150 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_10001A9A8(&qword_1010FCAF8);
  v176 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v175 = (char *)&v150 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_10001A9A8(&qword_1010FCB00);
  v23 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v25 = (char *)&v150 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10001A9A8(&qword_1010FCB08);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v150 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = swift_allocObject(&unk_1010783B0, 24, 7);
  *(_QWORD *)(v30 + 16) = 0;
  v31 = *(_QWORD *)(a2 + 16);
  v32 = sub_10001A9A8((uint64_t *)&unk_1010FB900);
  v192 = a2;
  v162 = v32;
  v33 = v195;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1000F9DF4, a2, v31, &type metadata for () + 1, v32);
  if (!v33)
  {
    v154 = v25;
    v155 = v23;
    v156 = v30 + 16;
    v195 = v29;
    v157 = v27;
    v158 = v26;
    v160 = v30;
    v159 = 0;
    v43 = v184;
    v199 = *(id *)(v184 + 72);
    v44 = v199;
    v45 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56);
    v47 = (uint64_t)v188;
    v153 = v45;
    v152 = v46;
    ((void (*)(char *, uint64_t, uint64_t))v46)(v188, 1, 1);
    v48 = sub_10001F6FC();
    v49 = sub_1000193A4(&qword_1010FB910, (uint64_t *)&unk_1010FB900, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v50 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    v150 = v44;
    v51 = v163;
    v52 = v162;
    v162 = v48;
    v151 = v50;
    Publisher.receive<A>(on:options:)(&v199, v47, v52, v48, v49, v50);
    sub_100004048(v47, &qword_1010EECC8);

    swift_release();
    v53 = swift_retain();
    v54 = static Subscribers.Demand.unlimited.getter(v53);
    v55 = sub_10001A9A8(&qword_1010EC530);
    v56 = sub_10001A9A8(&qword_1010EEC28);
    v57 = sub_1000193A4(&qword_1010EED78, &qword_1010EED38, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v58 = sub_1000193A4(&qword_1010EED80, &qword_1010EEC28, (const char *)&protocol conformance descriptor for Future<A, B>);
    v59 = v167;
    v60 = v165;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v54, sub_100470A04, v43, v165, v55, v56, v57, v58);
    swift_release();
    (*(void (**)(char *, uint64_t))(v164 + 8))(v51, v60);
    v61 = v187;
    sub_10005972C(v190, v187, type metadata accessor for AccessoryCommand);
    v62 = *(unsigned __int8 *)(v166 + 80);
    v165 = ~v62;
    v63 = (v62 + 24) & ~v62;
    v166 = v62;
    v64 = swift_allocObject(&unk_1010783D8, v63 + v189, v62 | 7);
    *(_QWORD *)(v64 + 16) = v43;
    sub_1000126EC(v61, v64 + v63, type metadata accessor for AccessoryCommand);
    swift_retain();
    v65 = sub_10001A9A8(&qword_1010FCAD8);
    v66 = sub_1000193A4(&qword_1010EED88, &qword_1010EED40, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v67 = v170;
    v68 = v169;
    Publisher.map<A>(_:)(sub_100470A10, v64, v169, v65, v66);
    swift_release();
    (*(void (**)(char *, uint64_t))(v168 + 8))(v59, v68);
    v69 = swift_allocObject(&unk_101078400, 32, 7);
    v70 = v192;
    *(_QWORD *)(v69 + 16) = v43;
    *(_QWORD *)(v69 + 24) = v70;
    swift_retain();
    v71 = swift_retain();
    v72 = static Subscribers.Demand.unlimited.getter(v71);
    v73 = sub_10001A9A8(&qword_1010FCAD0);
    v74 = sub_1000193A4(&qword_1010FCB10, &qword_1010FCAE8, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v75 = sub_1000193A4(&qword_1010FCB18, &qword_1010FCAD0, (const char *)&protocol conformance descriptor for Future<A, B>);
    v76 = v172;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v72, sub_100470A6C, v69, v172, &type metadata for Bool, v73, v74, v75);
    swift_release();
    (*(void (**)(char *, uint64_t))(v171 + 8))(v67, v76);
    if (qword_1010E9C20 != -1)
      swift_once(&qword_1010E9C20, sub_10044E424);
    v77 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
    v78 = sub_10001A9E8(v77, (uint64_t)qword_1010FC598);
    v79 = v150;
    v201 = v150;
    v80 = (uint64_t)v188;
    v152(v188, 1, 1, v153);
    v81 = sub_1000193A4(&qword_1010FCB20, &qword_1010FCAF0, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v82 = v79;
    v83 = v175;
    v84 = v78;
    v85 = v174;
    v86 = v81;
    v87 = v186;
    Publisher.timeout<A>(_:scheduler:options:customError:)(v84, &v201, v80, sub_1000FC3D0, 0, v174, v162, v86, v151);
    sub_100004048(v80, &qword_1010EECC8);

    (*(void (**)(char *, uint64_t))(v173 + 8))(v87, v85);
    v88 = sub_10001A9A8(&qword_1010FCAA8);
    v89 = sub_1000193A4(&qword_1010FCB28, &qword_1010FCAF8, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
    v90 = v154;
    v91 = v177;
    Publisher.map<A>(_:)(sub_10046424C, 0, v177, v88, v89);
    (*(void (**)(char *, uint64_t))(v176 + 8))(v83, v91);
    v92 = sub_10001A9A8(&qword_1010FCB30);
    v93 = sub_1000193A4(&qword_1010FCB38, &qword_1010FCB00, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v94 = sub_1000193A4(&qword_1010FCB40, &qword_1010FCB30, (const char *)&protocol conformance descriptor for Just<A>);
    v95 = v178;
    Publisher.catch<A>(_:)(sub_100460F54, 0, v178, v92, v93, v94);
    (*(void (**)(char *, uint64_t))(v155 + 8))(v90, v95);
    v188 = (char *)swift_allocObject(&unk_101077E88, 24, 7);
    swift_weakInit(v188 + 16, v43);
    v96 = v185;
    v97 = *(void (**)(char *, uint64_t, uint64_t))(v185 + 16);
    v98 = v183;
    v97(v194, v179, v183);
    v97(v191, v180, v98);
    sub_10005972C(v190, v61, type metadata accessor for AccessoryCommand);
    v99 = *(unsigned __int8 *)(v96 + 80);
    v100 = (v99 + 32) & ~v99;
    v101 = (v181 + v99 + v100) & ~v99;
    v102 = (v181 + v166 + v101) & v165;
    v103 = (v189 + v102 + 7) & 0xFFFFFFFFFFFFFFF8;
    v104 = (v103 + 15) & 0xFFFFFFFFFFFFFFF8;
    v105 = (v104 + 15) & 0xFFFFFFFFFFFFFFF8;
    v106 = swift_allocObject(&unk_101078428, v105 + 8, v166 | v99 | 7);
    v108 = v193;
    v107 = v194;
    *(_QWORD *)(v106 + 16) = v188;
    *(_QWORD *)(v106 + 24) = v108;
    v109 = *(void (**)(uint64_t, char *, uint64_t))(v96 + 32);
    v109(v106 + v100, v107, v98);
    v109(v106 + v101, v191, v98);
    sub_1000126EC(v187, v106 + v102, type metadata accessor for AccessoryCommand);
    v110 = v160;
    *(_QWORD *)(v106 + v103) = v160;
    v111 = v182;
    *(_QWORD *)(v106 + v104) = v182;
    *(_QWORD *)(v106 + v105) = v192;
    v112 = sub_1000193A4(&qword_1010FCB48, &qword_1010FCB08, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
    swift_retain();
    swift_retain();
    swift_retain();
    v113 = v111;
    v114 = v158;
    v115 = v195;
    v116 = Publisher<>.sink(receiveValue:)(sub_100470BC0, v106, v158, v112);
    swift_release();
    (*(void (**)(char *, uint64_t))(v157 + 8))(v115, v114);
    swift_beginAccess(v156, &v201, 1, 0);
    *(_QWORD *)(v110 + 16) = v116;
    swift_release();
    v117 = *(_QWORD *)(v110 + 16);
    if (!v117)
    {
      if (qword_1010E9C18 != -1)
        swift_once(&qword_1010E9C18, sub_10044E058);
      v136 = type metadata accessor for Logger(0);
      v137 = sub_10001A9E8(v136, (uint64_t)qword_1011B6F48);
      v138 = Logger.logObject.getter(v137);
      v139 = static os_log_type_t.error.getter(v138);
      if (os_log_type_enabled(v138, v139))
      {
        v140 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v140 = 0;
        _os_log_impl((void *)&_mh_execute_header, v138, v139, "No notify cancellation", v140, 2u);
        swift_slowDealloc(v140, -1, -1);
      }

      goto LABEL_20;
    }
    v118 = *(void **)&v113[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
    swift_retain();
    v119 = objc_msgSend(v118, "identifier");
    v120 = (uint64_t)v161;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v119);

    v121 = v184;
    v122 = (uint64_t *)(v184 + 88);
    v123 = swift_beginAccess(v184 + 88, &v199, 0, 0);
    v124 = *(_QWORD *)(v121 + 88);
    v125 = v185;
    if (*(_QWORD *)(v124 + 16))
    {
      swift_bridgeObjectRetain(v124);
      v126 = sub_100003FB0(v120);
      if ((v127 & 1) != 0)
      {
        v128 = *(_QWORD *)(*(_QWORD *)(v124 + 56) + 8 * v126);
        swift_bridgeObjectRetain(v128);
        swift_bridgeObjectRelease();
        v129 = *(void (**)(uint64_t, uint64_t))(v125 + 8);
        v130 = v120;
        v131 = v183;
        v129(v130, v183);
        v202 = v128;
        swift_retain();
        sub_100A10D30(&v197, v117);
        swift_release();
        v132 = objc_msgSend(v118, "identifier");
        v133 = (uint64_t)v194;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v132);

        v134 = v202;
        swift_beginAccess(v122, &v197, 33, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v122);
        v196 = *v122;
        *v122 = 0x8000000000000000;
        sub_10010CFB8(v134, v133, isUniquelyReferenced_nonNull_native);
        *v122 = v196;
        swift_bridgeObjectRelease();
        v129(v133, v131);
        swift_endAccess(&v197);
        swift_release();
LABEL_20:
        swift_release();
        return;
      }
      swift_bridgeObjectRelease();
    }
    v141 = *(void (**)(uint64_t, uint64_t, __n128))(v125 + 8);
    v142 = v183;
    v141(v120, v183, v123);
    v143 = objc_msgSend(v118, "identifier");
    v144 = (uint64_t)v194;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v143);

    v145 = sub_10001A9A8(&qword_10111BE20);
    inited = swift_initStackObject(v145, v198);
    *(_OWORD *)(inited + 16) = xmmword_100E22D10;
    *(_QWORD *)(inited + 32) = v117;
    v197 = inited;
    specialized Array._endMutation()(inited);
    v147 = v197;
    swift_retain();
    v148 = sub_100CA89B4(v147);
    swift_bridgeObjectRelease();
    swift_beginAccess(v122, &v197, 33, 0);
    v149 = swift_isUniquelyReferenced_nonNull_native(*v122);
    v202 = *v122;
    *v122 = 0x8000000000000000;
    sub_10010CFB8(v148, v144, v149);
    *v122 = v202;
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v141)(v144, v142);
    swift_endAccess(&v197);
    swift_release();
    goto LABEL_20;
  }
  swift_release();
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v34 = type metadata accessor for Logger(0);
  sub_10001A9E8(v34, (uint64_t)qword_1011B6F48);
  swift_errorRetain(v33);
  v35 = swift_errorRetain(v33);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.error.getter(v36);
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(12, -1);
    v39 = (void *)swift_slowAlloc(32, -1);
    v201 = v39;
    *(_DWORD *)v38 = 136446210;
    v199 = v33;
    swift_errorRetain(v33);
    v40 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v41 = String.init<A>(describing:)(&v199, v40);
    v199 = (id)sub_100016940(v41, v42, (uint64_t *)&v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200, v38 + 4, v38 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v33);
    swift_errorRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Notify error: %{public}s", v38, 0xCu);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);

    swift_errorRelease(v33);
  }
  else
  {
    swift_errorRelease(v33);
    swift_errorRelease(v33);
    swift_errorRelease(v33);

  }
}

uint64_t sub_100464174@<X0>(void (*a1)(_QWORD, _QWORD)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  uint64_t result;
  uint64_t v15;

  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)(a2 + 72);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
    return sub_10046628C(a1, a3, a4);
  __break(1u);
  return result;
}

_BYTE *sub_10046424C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  a2[41] = 0;
  return result;
}

_QWORD *sub_10046425C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void **a7, void *a8, objc_class *a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD *result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  void (*v59)(char *, uint64_t, uint64_t);
  char *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  void **v75;
  void *v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  void **v79;
  void *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  objc_class *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  void *v91;
  void **v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE v100[40];
  _BYTE v101[48];
  char v102[8];

  v91 = a8;
  v92 = a7;
  v93 = a4;
  v94 = a1;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v81 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v81 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v81 - v23;
  a2 += 16;
  swift_beginAccess(a2, v102, 0, 0);
  result = (_QWORD *)swift_weakLoadStrong(a2);
  if (result)
  {
    v88 = a5;
    v89 = result;
    Transaction.capture()();
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v86 = a9;
    v26 = type metadata accessor for Logger(0);
    v27 = sub_10001A9E8(v26, (uint64_t)qword_1011B6F48);
    v28 = sub_10000F9B8(v94, (uint64_t)v101, &qword_1010FCAA8);
    v87 = v27;
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.info.getter(v29);
    v31 = os_log_type_enabled(v29, v30);
    v90 = a6;
    v84 = v24;
    if (v31)
    {
      v85 = v16;
      v32 = swift_slowAlloc(12, -1);
      v83 = v12;
      v33 = (uint8_t *)v32;
      v34 = swift_slowAlloc(32, -1);
      v82 = v22;
      v35 = v34;
      v99 = v34;
      *(_DWORD *)v33 = 136446210;
      sub_10000F9B8((uint64_t)v101, (uint64_t)&v95, &qword_1010FCAA8);
      v36 = sub_10001A9A8(&qword_1010FCAA8);
      v37 = String.init<A>(describing:)(&v95, v36);
      v95 = sub_100016940(v37, v38, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v33 + 4, v33 + 12);
      swift_bridgeObjectRelease();
      v16 = v85;
      sub_100004048((uint64_t)v101, &qword_1010FCAA8);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "handleNotify result: %{public}s", v33, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      v39 = v35;
      v22 = v82;
      swift_slowDealloc(v39, -1, -1);
      v40 = v33;
      v12 = v83;
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      sub_100004048((uint64_t)v101, &qword_1010FCAA8);
    }

    v41 = v88;
    v92 += 2;
    sub_10000F9B8(v94, (uint64_t)v101, &qword_1010FCAA8);
    if ((v101[41] & 1) != 0)
    {
      sub_100059244((uint64_t)v101, (uint64_t)&v95);
      sub_100059280(&v95, (uint64_t)&v99);
      v42 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
      v42(v19, v93, v12);
      v43 = ((uint64_t (*)(char *, uint64_t, uint64_t))v42)(v16, v41, v12);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.error.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        v46 = swift_slowAlloc(42, -1);
        v47 = swift_slowAlloc(96, -1);
        v85 = v16;
        v94 = v47;
        v98 = v47;
        *(_DWORD *)v46 = 136446979;
        sub_100E01294();
        v97 = sub_100016940(v48, v49, &v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v46 + 4, v46 + 12);
        swift_bridgeObjectRelease();
        sub_1000593D4(&v99);
        *(_WORD *)(v46 + 12) = 2160;
        v97 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v46 + 14, v46 + 22);
        *(_WORD *)(v46 + 22) = 2081;
        v50 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v51 = dispatch thunk of CustomStringConvertible.description.getter(v12, v50);
        v97 = sub_100016940(v51, v52, &v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v46 + 24, v46 + 32);
        swift_bridgeObjectRelease();
        v53 = *(void (**)(char *, uint64_t))(v13 + 8);
        v53(v19, v12);
        *(_WORD *)(v46 + 32) = 2082;
        v54 = v85;
        v55 = dispatch thunk of CustomStringConvertible.description.getter(v12, v50);
        v97 = sub_100016940(v55, v56, &v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v46 + 34, v46 + 42);
        swift_bridgeObjectRelease();
        v53(v54, v12);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "handleNotify error %{public}s.\nBeacon %{private,mask.hash}s Command %{public}s", (uint8_t *)v46, 0x2Au);
        v57 = v94;
        swift_arrayDestroy(v94, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v57, -1, -1);
        swift_slowDealloc(v46, -1, -1);
      }
      else
      {
        sub_1000593D4(&v99);
        v73 = *(void (**)(char *, uint64_t))(v13 + 8);
        v73(v19, v12);
        v73(v16, v12);
      }

      v74 = v90;
      v75 = v92;
      swift_beginAccess(v92, &v99, 0, 0);
      v76 = *v75;
      swift_retain();
      sub_10044E990(v74, v76, v91, v86);
      swift_release();
      swift_release();
      return sub_1000593D4(&v95);
    }
    else
    {
      v58 = v101[0];
      v59 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
      v60 = v84;
      v59(v84, v93, v12);
      v61 = ((uint64_t (*)(char *, uint64_t, uint64_t))v59)(v22, v41, v12);
      v62 = Logger.logObject.getter(v61);
      v63 = static os_log_type_t.default.getter(v62);
      v64 = v63;
      if (os_log_type_enabled(v62, v63))
      {
        v65 = swift_slowAlloc(38, -1);
        v93 = swift_slowAlloc(64, -1);
        v95 = v93;
        *(_DWORD *)v65 = 67109891;
        LODWORD(v99) = v58;
        LODWORD(v88) = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, (char *)&v99 + 4, v65 + 4, v65 + 8);
        *(_WORD *)(v65 + 8) = 2160;
        v99 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v65 + 10, v65 + 18);
        *(_WORD *)(v65 + 18) = 2081;
        LODWORD(v94) = v58;
        v66 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v67 = dispatch thunk of CustomStringConvertible.description.getter(v12, v66);
        v99 = sub_100016940(v67, v68, &v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v65 + 20, v65 + 28);
        swift_bridgeObjectRelease();
        v69 = *(void (**)(char *, uint64_t))(v13 + 8);
        v69(v60, v12);
        *(_WORD *)(v65 + 28) = 2082;
        v70 = dispatch thunk of CustomStringConvertible.description.getter(v12, v66);
        v99 = sub_100016940(v70, v71, &v95);
        v58 = v94;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v65 + 30, v65 + 38);
        swift_bridgeObjectRelease();
        v69(v22, v12);
        _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v88, "handleNotify success complete? %{BOOL}d. Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v65, 0x26u);
        v72 = v93;
        swift_arrayDestroy(v93, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v72, -1, -1);
        swift_slowDealloc(v65, -1, -1);
      }
      else
      {
        v77 = *(void (**)(char *, uint64_t))(v13 + 8);
        v77(v60, v12);
        v77(v22, v12);
      }

      v78 = v90;
      if (v58)
      {
        v79 = v92;
        swift_beginAccess(v92, &v95, 0, 0);
        v80 = *v79;
        swift_retain();
        sub_10044E990(v78, v80, v91, v86);
        swift_release();
        swift_release();
        swift_beginAccess(v79, &v99, 1, 0);
        *v79 = 0;
      }
      return (_QWORD *)swift_release();
    }
  }
  return result;
}

uint64_t sub_100464B90@<X0>(void (*a1)(char *, char *, uint64_t)@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  id v37;
  void *v38;
  char *v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void *v45;
  void (*v46)(char *, char *, void *);
  char *v47;
  uint64_t v48;
  NSObject *v49;
  int v50;
  _BOOL4 v51;
  int v52;
  void *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void (*v71)(uint64_t, void *);
  void *v72;
  uint64_t result;
  void (*v74)(char *, void *);
  void *v75;
  void (*v76)(uint64_t, void *);
  void *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void (*v83)(char *, void *);
  char *v84;
  uint64_t v85;
  unint64_t v86;
  os_log_t v87;
  void **v88;
  void *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  void *v94;
  uint64_t v95;
  void *v96;
  void (*v97)(char *, char *, void *);
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, char *, void *);
  void *v106;
  id v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  void (*v118)(uint64_t, void *);
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  char *v125;
  void *v126;
  void (*v127)(char *, char *, void *);
  char *v128;
  char *v129;
  NSObject *v130;
  os_log_type_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  void (*v139)(char *, void *);
  uint64_t v140;
  unint64_t v141;
  void (*v142)(char *, char *, uint64_t);
  void *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  id v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  void *v161;
  char v162;
  char *v163;
  char *v164;
  void *v165;
  uint64_t v166;
  void (*v167)(char *, char *, void *);
  char *v168;
  char *v169;
  NSObject *v170;
  os_log_type_t v171;
  uint64_t v172;
  _DWORD *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  id v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  __int16 v190;
  void *v191;
  void (*v192)(char *, void *);
  void *v193;
  void (*v194)(char *, void *);
  void **v195;
  int v196;
  os_log_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  char *v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  char *v224;
  void (*v225)(char *, char *, uint64_t);
  char *v226;
  uint64_t v227;
  void *v228;
  uint64_t v229;
  char v230[8];
  uint64_t v231;
  void **aBlock;
  uint64_t v233;
  uint64_t (*v234)(uint64_t);
  void *v235;
  uint64_t (*v236)();
  uint64_t v237;

  v225 = a1;
  v226 = a2;
  v222 = a3;
  v227 = type metadata accessor for AccessoryCommand(0);
  v204 = *(_QWORD *)(v227 - 8);
  __chkstk_darwin(v227);
  v205 = v4;
  v206 = (uint64_t)&v195 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v215 = type metadata accessor for DispatchWorkItemFlags(0);
  v213 = *(_QWORD *)(v215 - 8);
  __chkstk_darwin(v215);
  v211 = (char *)&v195 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = type metadata accessor for DispatchQoS(0);
  v214 = *(_QWORD *)(v216 - 8);
  __chkstk_darwin(v216);
  v212 = (char *)&v195 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = type metadata accessor for DispatchQoS.QoSClass(0);
  v208 = *(_QWORD *)(v209 - 8);
  __chkstk_darwin(v209);
  v207 = (char *)&v195 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v219 = (uint64_t)&v195 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v203 = (char *)&v195 - v13;
  v14 = __chkstk_darwin(v12);
  v210 = (char *)&v195 - v15;
  v16 = __chkstk_darwin(v14);
  v200 = (char *)&v195 - v17;
  v18 = __chkstk_darwin(v16);
  v199 = (char *)&v195 - v19;
  v20 = __chkstk_darwin(v18);
  v202 = (char *)&v195 - v21;
  v22 = __chkstk_darwin(v20);
  v201 = (char *)&v195 - v23;
  v24 = __chkstk_darwin(v22);
  v220 = (char *)&v195 - v25;
  v26 = __chkstk_darwin(v24);
  v218 = (char *)&v195 - v27;
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v195 - v29;
  __chkstk_darwin(v28);
  v32 = (char *)&v195 - v31;
  v33 = type metadata accessor for DispatchPredicate(0);
  v34 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v36 = (void ***)((char *)&v195 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v221 = v3;
  v38 = *(void **)(v3 + 72);
  *v36 = v38;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v34 + 104))(v36, enum case for DispatchPredicate.onQueue(_:), v33);
  v37 = v38;
  LODWORD(v38) = _dispatchPreconditionTest(_:)(v36);
  (*(void (**)(_QWORD *, uint64_t))(v34 + 8))(v36, v33);
  if ((v38 & 1) == 0)
  {
    __break(1u);
LABEL_44:
    swift_once(&qword_1010E9C18, sub_10044E058);
LABEL_4:
    v42 = type metadata accessor for Logger(0);
    v43 = sub_10001A9E8(v42, (uint64_t)qword_1011B6F48);
    v44 = v218;
    v45 = v228;
    v46 = (void (*)(char *, char *, void *))v225;
    v225(v218, (char *)v227, (uint64_t)v228);
    v47 = v220;
    v46(v220, v30, v45);
    sub_1002A70A8(v8, v34);
    v48 = sub_1002A70A8(v8, v34);
    v198 = v43;
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.default.getter(v49);
    v51 = os_log_type_enabled(v49, (os_log_type_t)v50);
    v219 = v8;
    v52 = v34;
    v217 = (int)v38;
    if (v51)
    {
      v53 = v228;
      v54 = swift_slowAlloc(42, -1);
      v195 = (void **)swift_slowAlloc(96, -1);
      aBlock = v195;
      *(_DWORD *)v54 = 136315907;
      v55 = v44;
      v197 = v49;
      v196 = v50;
      if (v52)
      {
        v56 = v223;
        if (v52 == 1)
        {
          v57 = 0x7453646E756F732ELL;
          v58 = 0xEB00000000747261;
        }
        else
        {
          if (v219)
            v57 = 0x726961706E752ELL;
          else
            v57 = 0x7453646E756F732ELL;
          if (v219)
            v58 = 0xE700000000000000;
          else
            v58 = 0xEA0000000000706FLL;
        }
      }
      else
      {
        v57 = 0x646E616D6D6F632ELL;
        v58 = 0xEB000000006B6341;
        v56 = v223;
      }
      v229 = sub_100016940(v57, v58, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v54 + 4, v54 + 12);
      swift_bridgeObjectRelease();
      v79 = v219;
      sub_1002A70CC(v219, v52);
      sub_1002A70CC(v79, v52);
      *(_WORD *)(v54 + 12) = 2160;
      v229 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v54 + 14, v54 + 22);
      *(_WORD *)(v54 + 22) = 2081;
      v80 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v81 = dispatch thunk of CustomStringConvertible.description.getter(v53, v80);
      v229 = sub_100016940(v81, v82, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v54 + 24, v54 + 32);
      swift_bridgeObjectRelease();
      v83 = *(void (**)(char *, void *))(v56 + 8);
      v83(v55, v53);
      *(_WORD *)(v54 + 32) = 2082;
      v84 = v220;
      v85 = dispatch thunk of CustomStringConvertible.description.getter(v53, v80);
      v229 = sub_100016940(v85, v86, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v54 + 34, v54 + 42);
      swift_bridgeObjectRelease();
      v220 = (char *)v83;
      v83(v84, v53);
      v87 = v197;
      _os_log_impl((void *)&_mh_execute_header, v197, (os_log_type_t)v196, "AirTag command: %s. Beacon %{private,mask.hash}s Command %{public}s", (uint8_t *)v54, 0x2Au);
      v88 = v195;
      swift_arrayDestroy(v195, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1, -1);
      swift_slowDealloc(v54, -1, -1);

    }
    else
    {
      sub_1002A70CC(v8, v34);
      sub_1002A70CC(v8, v34);
      v74 = *(void (**)(char *, void *))(v223 + 8);
      v75 = v228;
      v74(v44, v228);
      v220 = (char *)v74;
      v74(v47, v75);

    }
    v89 = *(void **)(v221 + 64);
    v90 = v224;
    v91 = (uint64_t)v226;
    if (v89)
    {
      v92 = *(char **)(v221 + 64);
      if (v52)
        goto LABEL_25;
    }
    else
    {
      sub_10001F6FC();
      v120 = v208;
      v121 = v207;
      v122 = v209;
      (*(void (**)(char *, _QWORD, uint64_t))(v208 + 104))(v207, enum case for DispatchQoS.QoSClass.default(_:), v209);
      v123 = static OS_dispatch_queue.global(qos:)(v121);
      v91 = (uint64_t)v226;
      v90 = v224;
      v92 = (char *)v123;
      (*(void (**)(char *, uint64_t))(v120 + 8))(v121, v122);
      if (v52)
      {
LABEL_25:
        if (v52 == 1)
        {
          v93 = v210;
          v94 = v89;
          v95 = v227;
          v96 = v228;
          v97 = (void (*)(char *, char *, void *))v225;
          v225(v210, (char *)v227, (uint64_t)v228);
          v98 = v203;
          v97(v203, v90, v96);
          v99 = v223;
          v100 = *(unsigned __int8 *)(v223 + 80);
          v226 = v92;
          v101 = (v100 + 24) & ~v100;
          v102 = (v10 + v100 + v101) & ~v100;
          v103 = swift_allocObject(&unk_101078360, v102 + v10, v100 | 7);
          *(_QWORD *)(v103 + 16) = v221;
          v104 = v103 + v101;
          v105 = *(void (**)(uint64_t, char *, void *))(v99 + 32);
          v105(v104, v93, v96);
          v105(v103 + v102, v98, v96);
          v236 = sub_100470460;
          v237 = v103;
          aBlock = _NSConcreteStackBlock;
          v233 = 1107296256;
          v234 = sub_100016FB8;
          v235 = &unk_101078378;
          v106 = _Block_copy(&aBlock);
          v107 = v94;
          v108 = swift_retain();
          v109 = v212;
          static DispatchQoS.unspecified.getter(v108);
          v229 = (uint64_t)_swiftEmptyArrayStorage;
          v110 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v111 = v95;
          v112 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
          v113 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
          v114 = v211;
          v115 = v112;
          v116 = v215;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v229, v115, v113, v215, v110);
          v117 = v226;
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v109, v114, v106);

          _Block_release(v106);
          sub_1002A70CC(v219, 1);
          (*(void (**)(char *, uint64_t))(v213 + 8))(v114, v116);
          (*(void (**)(char *, uint64_t))(v214 + 8))(v109, v216);
          v118 = (void (*)(uint64_t, void *))v220;
          ((void (*)(char *, void *))v220)(v224, v96);
          v119 = v111;
        }
        else
        {
          v143 = v92;
          v144 = v89;
          v145 = v206;
          sub_10005972C(v91, v206, type metadata accessor for AccessoryCommand);
          if (v219)
          {
            v146 = *(unsigned __int8 *)(v204 + 80);
            v147 = v90;
            v148 = (v146 + 24) & ~v146;
            v149 = swift_allocObject(&unk_1010782C0, v148 + v205, v146 | 7);
            *(_QWORD *)(v149 + 16) = v221;
            sub_1000126EC(v145, v149 + v148, type metadata accessor for AccessoryCommand);
            v236 = sub_1004705C0;
            v237 = v149;
            aBlock = _NSConcreteStackBlock;
            v233 = 1107296256;
            v234 = sub_100016FB8;
            v235 = &unk_1010782D8;
            v150 = _Block_copy(&aBlock);
            v151 = v89;
            v152 = swift_retain();
            v153 = v212;
            static DispatchQoS.unspecified.getter(v152);
            v229 = (uint64_t)_swiftEmptyArrayStorage;
            v154 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            v155 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
            v156 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
            v157 = v211;
            v158 = v155;
            v159 = v215;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v229, v158, v156, v215, v154);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0, v153, v157, v150);

            _Block_release(v150);
            (*(void (**)(char *, uint64_t))(v213 + 8))(v157, v159);
            (*(void (**)(char *, uint64_t))(v214 + 8))(v153, v216);
            v160 = v228;
            v118 = (void (*)(uint64_t, void *))v220;
            ((void (*)(char *, void *))v220)(v147, v228);
            v119 = v227;
            v161 = v160;
LABEL_37:
            v118(v119, v161);
            result = swift_release();
            v78 = v222;
            *v222 = 0;
            v190 = 511;
LABEL_41:
            *((_WORD *)v78 + 4) = v190;
            LOBYTE(v38) = v217;
            goto LABEL_42;
          }
          v174 = v210;
          v96 = v228;
          v225(v210, v90, (uint64_t)v228);
          v175 = *(unsigned __int8 *)(v204 + 80);
          v176 = (v175 + 24) & ~v175;
          v177 = v223;
          v178 = *(unsigned __int8 *)(v223 + 80);
          v179 = (v205 + v178 + v176) & ~v178;
          v180 = swift_allocObject(&unk_101078310, v179 + v10, v175 | v178 | 7);
          *(_QWORD *)(v180 + 16) = v221;
          sub_1000126EC(v145, v180 + v176, type metadata accessor for AccessoryCommand);
          (*(void (**)(uint64_t, char *, void *))(v177 + 32))(v180 + v179, v174, v96);
          v236 = sub_1004705E0;
          v237 = v180;
          aBlock = _NSConcreteStackBlock;
          v233 = 1107296256;
          v234 = sub_100016FB8;
          v235 = &unk_101078328;
          v181 = _Block_copy(&aBlock);
          v182 = v144;
          v183 = swift_retain();
          v184 = v212;
          static DispatchQoS.unspecified.getter(v183);
          v229 = (uint64_t)_swiftEmptyArrayStorage;
          v185 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v186 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
          v187 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
          v188 = v211;
          v189 = v215;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v229, v186, v187, v215, v185);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v184, v188, v181);

          _Block_release(v181);
          (*(void (**)(char *, uint64_t))(v213 + 8))(v188, v189);
          (*(void (**)(char *, uint64_t))(v214 + 8))(v184, v216);
          v118 = (void (*)(uint64_t, void *))v220;
          ((void (*)(char *, void *))v220)(v224, v96);
          v119 = v227;
        }
        v161 = v96;
        goto LABEL_37;
      }
    }
    v124 = sub_1002A7014(v219);
    if (v124 == 4)
    {
      v226 = v92;
      v125 = v199;
      v126 = v228;
      v127 = (void (*)(char *, char *, void *))v225;
      v225(v199, (char *)v227, (uint64_t)v228);
      v128 = v200;
      v127(v200, v90, v126);
      v129 = v90;
      v130 = Logger.logObject.getter(v89);
      v131 = static os_log_type_t.error.getter(v130);
      if (os_log_type_enabled(v130, v131))
      {
        v132 = swift_slowAlloc(35, -1);
        v225 = (void (*)(char *, char *, uint64_t))swift_slowAlloc(64, -1);
        aBlock = (void **)v225;
        *(_DWORD *)v132 = 16909315;
        LOBYTE(v229) = v219;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, (char *)&v229 + 1, v132 + 4, v132 + 5);
        *(_WORD *)(v132 + 5) = 2160;
        v229 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v132 + 7, v132 + 15);
        *(_WORD *)(v132 + 15) = 2081;
        v133 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v134 = v228;
        v135 = v133;
        v136 = dispatch thunk of CustomStringConvertible.description.getter(v228, v133);
        v229 = sub_100016940(v136, v137, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v132 + 17, v132 + 25);
        swift_bridgeObjectRelease();
        v138 = v125;
        v139 = (void (*)(char *, void *))v220;
        ((void (*)(char *, void *))v220)(v138, v134);
        *(_WORD *)(v132 + 25) = 2082;
        v140 = dispatch thunk of CustomStringConvertible.description.getter(v134, v135);
        v229 = sub_100016940(v140, v141, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v132 + 27, v132 + 35);
        swift_bridgeObjectRelease();
        v139(v128, v134);
        _os_log_impl((void *)&_mh_execute_header, v130, v131, "Invalid opcode: %{public}hhu. Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v132, 0x23u);
        v142 = v225;
        swift_arrayDestroy(v225, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v142, -1, -1);
        swift_slowDealloc(v132, -1, -1);

        v139(v224, v134);
        result = ((uint64_t (*)(uint64_t, void *))v139)(v227, v134);
      }
      else
      {

        v191 = v228;
        v192 = (void (*)(char *, void *))v220;
        ((void (*)(char *, void *))v220)(v128, v228);
        v192(v125, v191);
        v192(v129, v191);
        result = ((uint64_t (*)(uint64_t, void *))v192)(v227, v191);
      }
    }
    else
    {
      v162 = v124;
      v163 = v92;
      v164 = v201;
      v166 = v227;
      v165 = v228;
      v167 = (void (*)(char *, char *, void *))v225;
      v225(v201, (char *)v227, (uint64_t)v228);
      v168 = v202;
      v167(v202, v90, v165);
      v169 = v90;
      v170 = Logger.logObject.getter(v89);
      v171 = static os_log_type_t.default.getter(v170);
      v172 = v166;
      if (os_log_type_enabled(v170, v171))
      {
        v226 = v163;
        v173 = (_DWORD *)swift_slowAlloc(42, -1);
        v225 = (void (*)(char *, char *, uint64_t))swift_slowAlloc(96, -1);
        aBlock = (void **)v225;
        *v173 = 136315907;
        __asm { BR              X10 }
      }

      v193 = v228;
      v194 = (void (*)(char *, void *))v220;
      ((void (*)(char *, void *))v220)(v168, v228);
      v194(v164, v193);
      v194(v169, v193);
      result = ((uint64_t (*)(uint64_t, void *))v194)(v172, v193);
    }
    v78 = v222;
    *v222 = 0;
    v190 = 255;
    goto LABEL_41;
  }
  v39 = v226;
  v40 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v40(v32, &v226[*(int *)(v227 + 20)], v8);
  v40(v30, v39, v8);
  sub_100057DB8((uint64_t)v225, (uint64_t)&aBlock);
  v41 = sub_10001A9A8(&qword_1010EC530);
  LODWORD(v38) = swift_dynamicCast(&v229, &aBlock, v41, &type metadata for AirTagCommand, 6);
  v227 = (uint64_t)v32;
  v228 = (void *)v8;
  v223 = v9;
  v224 = v30;
  if ((_DWORD)v38)
  {
    v225 = v40;
    v8 = v229;
    LODWORD(v34) = v230[0];
    if (qword_1010E9C18 == -1)
      goto LABEL_4;
    goto LABEL_44;
  }
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v59 = type metadata accessor for Logger(0);
  sub_10001A9E8(v59, (uint64_t)qword_1011B6F48);
  sub_100057DB8((uint64_t)v225, (uint64_t)&aBlock);
  v60 = v219;
  v61 = ((uint64_t (*)(uint64_t, uint64_t, void *))v40)(v219, v227, v228);
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.error.getter(v62);
  if (os_log_type_enabled(v62, v63))
  {
    v64 = swift_slowAlloc(32, -1);
    v65 = swift_slowAlloc(64, -1);
    v231 = v65;
    *(_DWORD *)v64 = 136315651;
    sub_100057DB8((uint64_t)&aBlock, (uint64_t)&v229);
    v66 = String.init<A>(describing:)(&v229, v41);
    v217 = 0;
    v38 = v228;
    v229 = sub_100016940(v66, v67, &v231);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v64 + 4, v64 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    *(_WORD *)(v64 + 12) = 2160;
    v229 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v64 + 14, v64 + 22);
    *(_WORD *)(v64 + 22) = 2081;
    v68 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v69 = dispatch thunk of CustomStringConvertible.description.getter(v38, v68);
    v229 = sub_100016940(v69, v70, &v231);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v64 + 24, v64 + 32);
    swift_bridgeObjectRelease();
    v71 = *(void (**)(uint64_t, void *))(v223 + 8);
    v71(v60, v38);
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Invalid AirTag command from payload %s for %{private,mask.hash}s", (uint8_t *)v64, 0x20u);
    swift_arrayDestroy(v65, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v64, -1, -1);

    v71((uint64_t)v224, v38);
    v72 = v38;
    LOBYTE(v38) = v217;
    result = ((uint64_t (*)(uint64_t, void *))v71)(v227, v72);
  }
  else
  {

    v76 = *(void (**)(uint64_t, void *))(v223 + 8);
    v77 = v228;
    v76(v60, v228);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    v76((uint64_t)v224, v77);
    result = ((uint64_t (*)(uint64_t, void *))v76)(v227, v77);
  }
  v78 = v222;
  *v222 = 13;
  *(_OWORD *)(v78 + 1) = 0u;
  *(_OWORD *)(v78 + 3) = 0u;
  *((_BYTE *)v78 + 40) = 11;
LABEL_42:
  *((_BYTE *)v78 + 41) = v38 ^ 1;
  return result;
}

uint64_t sub_10046628C@<X0>(void (*a1)(_QWORD, _QWORD)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void (*v63)(void);
  uint64_t v64;
  uint64_t v65;
  void (*v66)(_QWORD, _QWORD);
  NSObject *v67;
  unint64_t v68;
  Class v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  _BOOL4 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void (*isa)(char *, uint64_t);
  uint64_t result;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  char v89;
  void (*v90)(_QWORD, _QWORD);
  NSObject *v91;
  NSObject *v92;
  int v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  objc_class *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  _BOOL4 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  os_log_t v117;
  void (*v118)(char *, uint64_t);
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  NSObject *v123;
  os_log_t v124;
  uint64_t v125;
  os_log_t v126;
  uint64_t v127;
  objc_class *v128;
  char *v129;
  uint64_t v130;
  os_log_t v131;
  NSObject *v132;
  uint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  NSObject *v142;
  void (*v143)(NSObject *, uint64_t);
  uint64_t v144;
  unint64_t v145;
  os_log_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  NSObject *v150;
  objc_class *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  NSObject *v162;
  os_log_type_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void (*v170)(char *, uint64_t);
  uint64_t v171;
  unint64_t v172;
  os_log_t v173;
  uint64_t v174;
  NSObject *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  objc_class *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  NSObject *v186;
  os_log_type_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  void (*v192)(char *, uint64_t);
  uint64_t v193;
  unint64_t v194;
  void (*v195)(_QWORD, _QWORD);
  void (*v196)(os_log_t, uint64_t);
  unsigned int v197;
  uint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  NSObject *v206;
  os_log_type_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  char *v212;
  void (*v213)(char *, uint64_t);
  uint64_t v214;
  unint64_t v215;
  os_log_t v216;
  uint64_t v217;
  NSObject *v218;
  uint64_t v219;
  unint64_t v220;
  os_log_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  __n128 v225;
  Class v226;
  uint64_t v227;
  unint64_t v228;
  char v229;
  char *v230;
  void (*v231)(char *, uint64_t);
  uint64_t v232;
  int v233;
  char *v234;
  void (*v235)(void);
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void (*v243)(uint64_t, char *, uint64_t);
  void *v244;
  uint64_t v245;
  NSObject *v246;
  uint64_t v247;
  unint64_t v248;
  void (*v249)(char *, uint64_t);
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  NSObject *v256;
  os_log_type_t v257;
  int v258;
  _BOOL4 v259;
  unsigned int v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  unint64_t v264;
  unsigned __int8 v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  os_log_t v270;
  char *v271;
  NSObject *v272;
  char *v273;
  uint64_t v274;
  unint64_t v275;
  os_log_t v276;
  uint64_t v277;
  uint64_t v278;
  NSObject *v279;
  os_log_type_t v280;
  uint8_t *v281;
  os_log_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t (*v285)(char *, uint64_t);
  char *v286;
  void (*v287)(void);
  char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  void (*v294)(uint64_t, char *, uint64_t);
  void *v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  Class v304;
  void (*v305)(char *, uint64_t);
  uint64_t v306;
  NSObject *v307;
  uint64_t v308;
  unint64_t v309;
  void (*v310)(char *, uint64_t);
  char *v311;
  uint64_t v312;
  unsigned __int8 v313;
  char *v314;
  char *v315;
  char *v316;
  uint64_t v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t isa_low;
  os_log_t v323;
  uint64_t v324;
  uint64_t v325;
  void *v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  uint64_t v333;
  Class v334;
  uint64_t v335;
  NSObject *v336;
  uint64_t v337;
  unint64_t v338;
  void (*v339)(char *, uint64_t);
  char *v340;
  uint64_t v341;
  __int128 v342;
  uint64_t v343;
  char *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  os_log_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  void *v354;
  char *v355;
  uint64_t v356;
  void (*v357)(void);
  char *v358;
  uint64_t v359;
  NSObject *v360;
  os_log_type_t v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  char *v371;
  void (*v372)(char *, uint64_t);
  uint64_t v373;
  unint64_t v374;
  os_log_t v375;
  uint64_t v376;
  NSObject *v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  uint64_t v386;
  void *v387;
  char *v388;
  char *v389;
  char *v390;
  uint64_t v391;
  uint64_t v392;
  NSObject *v393;
  os_log_type_t v394;
  _BOOL4 v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  os_log_t v400;
  uint64_t v401;
  NSObject *v402;
  uint64_t v403;
  unint64_t v404;
  char *v405;
  uint64_t v406;
  char *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  os_log_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  void *v417;
  char *v418;
  uint64_t v419;
  uint64_t v420;
  os_log_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  void *v426;
  uint64_t v427;
  char *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  char *v432;
  uint64_t v433;
  Class v434;
  uint64_t v435;
  NSObject *v436;
  uint64_t v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v440;
  char *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  char *v445;
  uint64_t v446;
  Class v447;
  uint64_t v448;
  NSObject *v449;
  uint64_t v450;
  unint64_t v451;
  void (*v452)(char *, uint64_t);
  uint64_t v453;
  NSObject *v454;
  uint64_t v455;
  unint64_t v456;
  void (*v457)(char *, uint64_t);
  uint64_t v458;
  uint64_t v459;
  char *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  char *v464;
  uint64_t v465;
  Class v466;
  uint64_t v467;
  NSObject *v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  NSObject *v472;
  os_log_type_t v473;
  _BOOL4 v474;
  uint64_t v475;
  uint8_t *v476;
  uint64_t v477;
  NSObject *v478;
  uint64_t v479;
  unint64_t v480;
  uint64_t v481;
  uint64_t v482;
  char *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  char *v487;
  uint64_t v488;
  Class v489;
  uint64_t v490;
  NSObject *v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  NSObject *v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  void (*v499)(void);
  Class v500;
  char *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  char *v505;
  char *v506;
  char *v507;
  char *v508;
  char *v509;
  uint64_t v510;
  uint64_t v511;
  char *v512;
  char *v513;
  uint64_t v514;
  char *v515;
  uint64_t v516;
  char *v517;
  uint64_t v518;
  char *v519;
  char *v520;
  char *v521;
  uint64_t v522;
  uint64_t v523;
  char *v524;
  uint64_t v525;
  char *v526;
  char *v527;
  char *v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  os_log_t v532;
  os_log_t v533;
  char *v534;
  char *v535;
  NSObject *v536;
  os_log_t v537;
  uint64_t v538;
  os_log_t v539;
  uint64_t v540;
  void (*v541)(_QWORD, _QWORD);
  char *v542;
  char *v543;
  uint64_t v544;
  _QWORD v545[2];
  void (*v546)(_QWORD, _QWORD);
  uint64_t v547;
  os_log_t aBlock;
  uint64_t v549;
  uint64_t (*v550)(uint64_t);
  void *v551;
  uint64_t (*v552)();
  uint64_t v553;

  v538 = a3;
  v541 = a1;
  v530 = sub_10001A9A8(&qword_1010EF1F0);
  v529 = *(_QWORD *)(v530 - 8);
  __chkstk_darwin(v530);
  v512 = (char *)&v498 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010EF1E8);
  __chkstk_darwin(v5);
  v528 = (char *)&v498 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v516 = type metadata accessor for DispatchWorkItemFlags(0);
  v514 = *(_QWORD *)(v516 - 8);
  __chkstk_darwin(v516);
  v515 = (char *)&v498 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v518 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v518 - 8);
  __chkstk_darwin(v518);
  v517 = (char *)&v498 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AccessoryCommand(0);
  v502 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v510 = (uint64_t)&v498 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v522 = (uint64_t)&v498 - v14;
  v503 = v15;
  __chkstk_darwin(v13);
  v504 = (uint64_t)&v498 - v16;
  v17 = type metadata accessor for DispatchQoS.QoSClass(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v498 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for UUID(0);
  v22 = *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64);
  v23 = __chkstk_darwin(v21);
  v24 = (char *)&v498 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v532 = (os_log_t)((char *)&v498 - v26);
  v27 = __chkstk_darwin(v25);
  v536 = ((char *)&v498 - v28);
  v29 = __chkstk_darwin(v27);
  v527 = (char *)&v498 - v30;
  v31 = __chkstk_darwin(v29);
  v526 = (char *)&v498 - v32;
  v33 = __chkstk_darwin(v31);
  v507 = (char *)&v498 - v34;
  v35 = __chkstk_darwin(v33);
  v524 = (char *)&v498 - v36;
  v37 = __chkstk_darwin(v35);
  v535 = (char *)&v498 - v38;
  v39 = __chkstk_darwin(v37);
  v520 = (char *)&v498 - v40;
  v41 = __chkstk_darwin(v39);
  v534 = (char *)&v498 - v42;
  v43 = __chkstk_darwin(v41);
  v521 = (char *)&v498 - v44;
  v45 = __chkstk_darwin(v43);
  v506 = (char *)&v498 - v46;
  v47 = __chkstk_darwin(v45);
  v501 = (char *)&v498 - v48;
  v49 = __chkstk_darwin(v47);
  v509 = (char *)&v498 - v50;
  v51 = __chkstk_darwin(v49);
  v508 = (char *)&v498 - v52;
  v53 = __chkstk_darwin(v51);
  v513 = (char *)&v498 - v54;
  v55 = __chkstk_darwin(v53);
  v519 = (char *)&v498 - v56;
  v57 = __chkstk_darwin(v55);
  v505 = (char *)&v498 - v58;
  v59 = __chkstk_darwin(v57);
  v61 = (char *)&v498 - v60;
  __chkstk_darwin(v59);
  v523 = v10;
  v539 = (os_log_t)v62;
  v63 = *(void (**)(void))(v62 + 16);
  v543 = (char *)&v498 - v64;
  v63();
  v542 = v61;
  v525 = a2;
  v65 = a2;
  v66 = v541;
  v540 = v21;
  ((void (*)(char *, uint64_t, uint64_t))v63)(v61, v65, v21);
  sub_100057DB8((uint64_t)v66, (uint64_t)&aBlock);
  v533 = (os_log_t)sub_10001A9A8(&qword_1010EC530);
  if (!swift_dynamicCast(&v544, &aBlock, v533, &type metadata for AccessoryConfigCommand, 6))
  {
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v70 = type metadata accessor for Logger(0);
    sub_10001A9E8(v70, (uint64_t)qword_1011B6F48);
    sub_100057DB8((uint64_t)v66, (uint64_t)&aBlock);
    v71 = v543;
    v72 = v540;
    v73 = ((uint64_t (*)(char *, char *, uint64_t))v63)(v24, v543, v540);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.error.getter(v74);
    v76 = os_log_type_enabled(v74, v75);
    v77 = v538;
    if (v76)
    {
      v78 = swift_slowAlloc(32, -1);
      v79 = swift_slowAlloc(64, -1);
      v547 = v79;
      *(_DWORD *)v78 = 136315651;
      sub_100057DB8((uint64_t)&aBlock, (uint64_t)&v544);
      v80 = String.init<A>(describing:)(&v544, v533);
      v544 = sub_100016940(v80, v81, &v547);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v78 + 4, v78 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      *(_WORD *)(v78 + 12) = 2160;
      v544 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v78 + 14, v78 + 22);
      *(_WORD *)(v78 + 22) = 2081;
      v82 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v83 = dispatch thunk of CustomStringConvertible.description.getter(v72, v82);
      v544 = sub_100016940(v83, v84, &v547);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v78 + 24, v78 + 32);
      swift_bridgeObjectRelease();
      isa = (void (*)(char *, uint64_t))v539[1].isa;
      isa(v24, v72);
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Invalid command from payload %s for %{private,mask.hash}s", (uint8_t *)v78, 0x20u);
      swift_arrayDestroy(v79, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v79, -1, -1);
      swift_slowDealloc(v78, -1, -1);

      isa(v542, v72);
      result = ((uint64_t (*)(char *, uint64_t))isa)(v543, v72);
    }
    else
    {

      v87 = (void (*)(char *, uint64_t))v539[1].isa;
      v87(v24, v72);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      v87(v542, v72);
      result = ((uint64_t (*)(char *, uint64_t))v87)(v71, v72);
    }
    v88 = 13;
    goto LABEL_10;
  }
  v67 = v545[0];
  v531 = v544;
  v68 = (unint64_t)v546;
  v511 = v545[1];
  v69 = v537[8].isa;
  if (v69)
  {
    v500 = v537[8].isa;
  }
  else
  {
    v90 = v546;
    v499 = v63;
    v91 = v545[0];
    sub_10001F6FC();
    (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for DispatchQoS.QoSClass.default(_:), v17);
    v500 = (Class)static OS_dispatch_queue.global(qos:)(v20);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    v67 = v91;
    v63 = v499;
    v68 = (unint64_t)v90;
    v66 = v541;
  }
  v92 = v536;
  v93 = (v68 >> 59) & 6 | (((unint64_t)v67 & 0x2000000000000000) != 0);
  v94 = v535;
  v95 = v534;
  if (v93 == 1)
  {
    v530 = v8;
    v147 = (unint64_t)v67 & 0xDFFFFFFFFFFFFFFFLL;
    v148 = v68 & 0xCFFFFFFFFFFFFFFFLL;
    v149 = v68;
    v150 = v67;
    v151 = v69;
    v152 = v531;
    v536 = v150;
    v153 = (uint64_t)v150;
    v154 = v511;
    v541 = (void (*)(_QWORD, _QWORD))v149;
    sub_1001E9684(v531, v153, v511, v149, sub_10001BBBC);
    sub_10001BBBC(v152, v147);
    sub_10001BBBC(v154, v148);
    v155 = sub_1002A61B4(v152, v147, v154, v148);
    if ((v155 & 0xFF0000) != 0x60000)
    {
      v197 = v155;
      v198 = sub_1001E9630(v155);
      v199 = v542;
      v200 = v543;
      if (v198 != 19)
      {
        v250 = v198;
        if (qword_1010E9C18 != -1)
          swift_once(&qword_1010E9C18, sub_10044E058);
        v251 = type metadata accessor for Logger(0);
        v252 = sub_10001A9E8(v251, (uint64_t)qword_1011B6F48);
        v253 = v505;
        v254 = v540;
        ((void (*)(char *, char *, uint64_t))v63)(v505, v200, v540);
        v255 = ((uint64_t (*)(char *, char *, uint64_t))v63)(v519, v199, v254);
        v535 = (char *)v252;
        v256 = Logger.logObject.getter(v255);
        v257 = static os_log_type_t.default.getter(v256);
        v258 = v257;
        v259 = os_log_type_enabled(v256, v257);
        v260 = HIWORD(v197);
        v499 = v63;
        if (v259)
        {
          v261 = swift_slowAlloc(52, -1);
          v533 = (os_log_t)swift_slowAlloc(128, -1);
          aBlock = v533;
          *(_DWORD *)v261 = 136316163;
          v532 = v256;
          v262 = (char *)v250;
          v263 = sub_1001E8954(v250);
          LODWORD(v529) = v258;
          v544 = sub_100016940(v263, v264, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v261 + 4, v261 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v261 + 12) = 2082;
          if ((_BYTE)v260)
            v265 = v260;
          else
            v265 = 6;
          v266 = sub_1002A5C3C(v265);
          v544 = sub_100016940(v266, v267, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v261 + 14, v261 + 22);
          swift_bridgeObjectRelease();
          *(_WORD *)(v261 + 22) = 2160;
          v544 = 1752392040;
          v528 = (char *)v545;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v261 + 24, v261 + 32);
          *(_WORD *)(v261 + 32) = 2081;
          v250 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v268 = dispatch thunk of CustomStringConvertible.description.getter(v254, v250);
          v544 = sub_100016940(v268, v269, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v261 + 34, v261 + 42);
          swift_bridgeObjectRelease();
          v270 = v539;
          v271 = v253;
          v272 = v539[1].isa;
          ((void (*)(char *, uint64_t))v272)(v271, v254);
          *(_WORD *)(v261 + 42) = 2082;
          v534 = v262;
          v273 = v519;
          v274 = dispatch thunk of CustomStringConvertible.description.getter(v254, v250);
          v544 = sub_100016940(v274, v275, (uint64_t *)&aBlock);
          LOBYTE(v250) = (_BYTE)v534;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v528, v261 + 44, v261 + 52);
          swift_bridgeObjectRelease();
          ((void (*)(char *, uint64_t))v272)(v273, v254);
          v256 = v532;
          _os_log_impl((void *)&_mh_execute_header, v532, (os_log_type_t)v529, "Opcode: %s. Status %{public}s. Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v261, 0x34u);
          v276 = v533;
          swift_arrayDestroy(v533, 4, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v276, -1, -1);
          swift_slowDealloc(v261, -1, -1);
        }
        else
        {
          v270 = v539;
          v311 = v253;
          v272 = v539[1].isa;
          ((void (*)(char *, uint64_t))v272)(v311, v254);
          ((void (*)(char *, uint64_t))v272)(v519, v254);
        }

        if ((_BYTE)v260)
          v313 = v260;
        else
          v313 = 6;
        v314 = v509;
        v315 = v508;
        switch((char)v250)
        {
          case 0:
          case 18:
            v539 = v272;
            v316 = v542;
            v317 = v504;
            sub_10005972C(v525, v504, type metadata accessor for AccessoryCommand);
            if (v313 == 6)
            {
              v318 = v513;
              v319 = v540;
              ((void (*)(char *, char *, uint64_t))v499)(v513, v316, v540);
              v320 = *(unsigned __int8 *)(v502 + 80);
              v321 = (v320 + 24) & ~v320;
              isa_low = LOBYTE(v270[10].isa);
              v323 = v270;
              v324 = (v503 + isa_low + v321) & ~isa_low;
              v325 = swift_allocObject(&unk_101078270, v324 + v22, v320 | isa_low | 7);
              *(_QWORD *)(v325 + 16) = v537;
              sub_1000126EC(v317, v325 + v321, type metadata accessor for AccessoryCommand);
              ((void (*)(uint64_t, char *, uint64_t))v323[4].isa)(v325 + v324, v318, v319);
              v552 = sub_100470814;
              v553 = v325;
              aBlock = (os_log_t)_NSConcreteStackBlock;
              v549 = 1107296256;
              v550 = sub_100016FB8;
              v551 = &unk_101078288;
              v326 = _Block_copy(&aBlock);
              v327 = swift_retain();
              v328 = v517;
              static DispatchQoS.unspecified.getter(v327);
              v544 = (uint64_t)_swiftEmptyArrayStorage;
              v329 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              v330 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
              v331 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
              v332 = v515;
              v333 = v516;
              dispatch thunk of SetAlgebra.init<A>(_:)(&v544, v330, v331, v516, v329);
              v334 = v500;
              OS_dispatch_queue.async(group:qos:flags:execute:)(0, v328, v332, v326);
              _Block_release(v326);

              v335 = v531;
              v336 = v536;
              v337 = v511;
              v338 = (unint64_t)v541;
              sub_1001E9684(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_10001BC14);
              sub_1001E9684(v335, (uint64_t)v336, v337, v338, sub_10001BC14);
              (*(void (**)(char *, uint64_t))(v514 + 8))(v332, v333);
              (*(void (**)(char *, uint64_t))(v530 + 8))(v328, v518);
              v339 = (void (*)(char *, uint64_t))v539;
              ((void (*)(char *, uint64_t))v539)(v316, v319);
              v340 = v543;
              v341 = v319;
            }
            else
            {
              v418 = v513;
              v419 = v540;
              ((void (*)(char *, char *, uint64_t))v499)(v513, v316, v540);
              v420 = *(unsigned __int8 *)(v502 + 80);
              v421 = v270;
              v422 = (v420 + 24) & ~v420;
              v423 = LOBYTE(v421[10].isa);
              v424 = (v503 + v423 + v422) & ~v423;
              v425 = swift_allocObject(&unk_101078220, v424 + v22 + 1, v420 | v423 | 7);
              *(_QWORD *)(v425 + 16) = v537;
              sub_1000126EC(v317, v425 + v422, type metadata accessor for AccessoryCommand);
              ((void (*)(uint64_t, char *, uint64_t))v421[4].isa)(v425 + v424, v418, v419);
              *(_BYTE *)(v425 + v424 + v22) = v313;
              v552 = sub_1004707FC;
              v553 = v425;
              aBlock = (os_log_t)_NSConcreteStackBlock;
              v549 = 1107296256;
              v550 = sub_100016FB8;
              v551 = &unk_101078238;
              v426 = _Block_copy(&aBlock);
              v427 = swift_retain();
              v428 = v517;
              static DispatchQoS.unspecified.getter(v427);
              v544 = (uint64_t)_swiftEmptyArrayStorage;
              v429 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              v430 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
              v431 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
              v432 = v515;
              v433 = v516;
              dispatch thunk of SetAlgebra.init<A>(_:)(&v544, v430, v431, v516, v429);
              v434 = v500;
              OS_dispatch_queue.async(group:qos:flags:execute:)(0, v428, v432, v426);

              _Block_release(v426);
              v435 = v531;
              v436 = v536;
              v437 = v511;
              v438 = (unint64_t)v541;
              sub_1001E9684(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_10001BC14);
              sub_1001E9684(v435, (uint64_t)v436, v437, v438, sub_10001BC14);
              (*(void (**)(char *, uint64_t))(v514 + 8))(v432, v433);
              (*(void (**)(char *, uint64_t))(v530 + 8))(v428, v518);
              v339 = (void (*)(char *, uint64_t))v539;
              ((void (*)(char *, uint64_t))v539)(v542, v419);
              v340 = v543;
              v341 = v419;
            }
            goto LABEL_109;
          case 1:
            v539 = v272;
            v343 = v504;
            sub_10005972C(v525, v504, type metadata accessor for AccessoryCommand);
            v344 = v513;
            v345 = v540;
            ((void (*)(char *, char *, uint64_t))v499)(v513, v542, v540);
            v346 = *(unsigned __int8 *)(v502 + 80);
            v347 = (v346 + 24) & ~v346;
            v348 = LOBYTE(v270[10].isa);
            v349 = v270;
            v350 = (v503 + v348 + v347) & ~v348;
            v351 = v350 + v22;
            v352 = v346 | v348 | 7;
            if (v313 == 6)
            {
              v353 = swift_allocObject(&unk_101078130, v350 + v22, v352);
              *(_QWORD *)(v353 + 16) = v537;
              sub_1000126EC(v343, v353 + v347, type metadata accessor for AccessoryCommand);
              ((void (*)(uint64_t, char *, uint64_t))v349[4].isa)(v353 + v350, v344, v345);
              v552 = sub_1004705E0;
              v553 = v353;
              aBlock = (os_log_t)_NSConcreteStackBlock;
              v549 = 1107296256;
              v550 = sub_100016FB8;
              v551 = &unk_101078148;
            }
            else
            {
              v439 = swift_allocObject(&unk_1010780E0, v351 + 1, v352);
              *(_QWORD *)(v439 + 16) = v537;
              sub_1000126EC(v343, v439 + v347, type metadata accessor for AccessoryCommand);
              ((void (*)(uint64_t, char *, uint64_t))v349[4].isa)(v439 + v350, v344, v345);
              *(_BYTE *)(v439 + v351) = v313;
              v552 = sub_1004705C8;
              v553 = v439;
              aBlock = (os_log_t)_NSConcreteStackBlock;
              v549 = 1107296256;
              v550 = sub_100016FB8;
              v551 = &unk_1010780F8;
            }
            v354 = _Block_copy(&aBlock);
            v440 = swift_retain();
            v441 = v517;
            static DispatchQoS.unspecified.getter(v440);
            v544 = (uint64_t)_swiftEmptyArrayStorage;
            v442 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            v443 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
            v444 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
            v445 = v515;
            v446 = v516;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v544, v443, v444, v516, v442);
            v447 = v500;
            OS_dispatch_queue.async(group:qos:flags:execute:)(0, v441, v445, v354);

            _Block_release(v354);
            v448 = v531;
            v449 = v536;
            v450 = v511;
            v451 = (unint64_t)v541;
            sub_1001E9684(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_10001BC14);
            sub_1001E9684(v448, (uint64_t)v449, v450, v451, sub_10001BC14);
            (*(void (**)(char *, uint64_t))(v514 + 8))(v445, v446);
            (*(void (**)(char *, uint64_t))(v530 + 8))(v441, v518);
            v452 = (void (*)(char *, uint64_t))v539;
            ((void (*)(char *, uint64_t))v539)(v542, v345);
            v452(v543, v345);
            goto LABEL_103;
          case 4:
            v380 = v504;
            sub_10005972C(v525, v504, type metadata accessor for AccessoryCommand);
            v381 = *(unsigned __int8 *)(v502 + 80);
            v382 = (v381 + 24) & ~v381;
            v383 = v382 + v503;
            v384 = v381 | 7;
            v385 = v542;
            if (v313 == 6)
            {
              v386 = swift_allocObject(&unk_101078090, v382 + v503, v384);
              *(_QWORD *)(v386 + 16) = v537;
              sub_1000126EC(v380, v386 + v382, type metadata accessor for AccessoryCommand);
              v552 = sub_1004705C0;
              v553 = v386;
              aBlock = (os_log_t)_NSConcreteStackBlock;
              v549 = 1107296256;
              v550 = sub_100016FB8;
              v551 = &unk_1010780A8;
            }
            else
            {
              v458 = swift_allocObject(&unk_101078040, v383 + 1, v384);
              *(_QWORD *)(v458 + 16) = v537;
              sub_1000126EC(v380, v458 + v382, type metadata accessor for AccessoryCommand);
              *(_BYTE *)(v458 + v383) = v313;
              v552 = sub_100470580;
              v553 = v458;
              aBlock = (os_log_t)_NSConcreteStackBlock;
              v549 = 1107296256;
              v550 = sub_100016FB8;
              v551 = &unk_101078058;
            }
            v387 = _Block_copy(&aBlock);
            v459 = swift_retain();
            v460 = v517;
            static DispatchQoS.unspecified.getter(v459);
            v544 = (uint64_t)_swiftEmptyArrayStorage;
            v461 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            v462 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
            v463 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
            v464 = v515;
            v465 = v516;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v544, v462, v463, v516, v461);
            v466 = v500;
            OS_dispatch_queue.async(group:qos:flags:execute:)(0, v460, v464, v387);

            _Block_release(v387);
            v467 = v531;
            v468 = v536;
            v469 = v511;
            v470 = (unint64_t)v541;
            sub_1001E9684(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_10001BC14);
            sub_1001E9684(v467, (uint64_t)v468, v469, v470, sub_10001BC14);
            (*(void (**)(char *, uint64_t))(v514 + 8))(v464, v465);
            (*(void (**)(char *, uint64_t))(v530 + 8))(v460, v518);
            v471 = v540;
            ((void (*)(char *, uint64_t))v272)(v385, v540);
            ((void (*)(char *, uint64_t))v272)(v543, v471);
LABEL_103:
            result = swift_release();
            v89 = 0;
            v342 = xmmword_100E22B30;
            v77 = v538;
            goto LABEL_84;
          case 7:
            v388 = v542;
            v389 = v543;
            if (LOBYTE(v537[22].isa) == 1)
            {
              LOBYTE(v537[22].isa) = 0;
              v390 = v315;
              v391 = v540;
              v392 = ((uint64_t (*)(char *, char *, uint64_t))v499)(v315, v389, v540);
              v393 = Logger.logObject.getter(v392);
              v394 = static os_log_type_t.default.getter(v393);
              v395 = os_log_type_enabled(v393, v394);
              v77 = v538;
              if (v395)
              {
                v396 = swift_slowAlloc(22, -1);
                v539 = (os_log_t)swift_slowAlloc(32, -1);
                aBlock = v539;
                *(_DWORD *)v396 = 141558275;
                v544 = 1752392040;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v396 + 4, v396 + 12);
                *(_WORD *)(v396 + 12) = 2081;
                v397 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
                v398 = dispatch thunk of CustomStringConvertible.description.getter(v391, v397);
                v544 = sub_100016940(v398, v399, (uint64_t *)&aBlock);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v396 + 14, v396 + 22);
                swift_bridgeObjectRelease();
                ((void (*)(char *, uint64_t))v272)(v390, v391);
                _os_log_impl((void *)&_mh_execute_header, v393, v394, "Sending unpair command for beacon %{private,mask.hash}s.", (uint8_t *)v396, 0x16u);
                v400 = v539;
                swift_arrayDestroy(v539, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v400, -1, -1);
                swift_slowDealloc(v396, -1, -1);

                v401 = v531;
                v402 = v536;
                v403 = v511;
                v404 = (unint64_t)v541;
                sub_1001E9684(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_10001BC14);
                sub_1001E9684(v401, (uint64_t)v402, v403, v404, sub_10001BC14);
                ((void (*)(char *, uint64_t))v272)(v542, v391);
                v405 = v543;
              }
              else
              {

                v494 = v531;
                v495 = v536;
                v496 = v511;
                v497 = (unint64_t)v541;
                sub_1001E9684(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_10001BC14);
                sub_1001E9684(v494, (uint64_t)v495, v496, v497, sub_10001BC14);
                ((void (*)(char *, uint64_t))v272)(v390, v391);
                ((void (*)(char *, uint64_t))v272)(v388, v391);
                v405 = v389;
              }
              result = ((uint64_t (*)(char *, uint64_t))v272)(v405, v391);
              v89 = 0;
              *(_OWORD *)v77 = xmmword_100E3F000;
              *(_OWORD *)(v77 + 16) = xmmword_100E22B30;
              *(_BYTE *)(v77 + 32) = 0;
              goto LABEL_85;
            }
            v472 = Logger.logObject.getter(v312);
            v473 = static os_log_type_t.default.getter(v472);
            v474 = os_log_type_enabled(v472, v473);
            v77 = v538;
            v475 = v540;
            if (v474)
            {
              v476 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v476 = 0;
              _os_log_impl((void *)&_mh_execute_header, v472, v473, "Ignoring .setMaxConnections response.", v476, 2u);
              swift_slowDealloc(v476, -1, -1);
            }

            v477 = v531;
            v478 = v536;
            v479 = v511;
            v480 = (unint64_t)v541;
            sub_1001E9684(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_10001BC14);
            sub_1001E9684(v477, (uint64_t)v478, v479, v480, sub_10001BC14);
            ((void (*)(char *, uint64_t))v272)(v388, v475);
            result = ((uint64_t (*)(char *, uint64_t))v272)(v389, v475);
            break;
          case 12:
            v539 = v272;
            v406 = v504;
            sub_10005972C(v525, v504, type metadata accessor for AccessoryCommand);
            v407 = v513;
            v408 = v540;
            ((void (*)(char *, char *, uint64_t))v499)(v513, v542, v540);
            v409 = *(unsigned __int8 *)(v502 + 80);
            v410 = (v409 + 24) & ~v409;
            v411 = LOBYTE(v270[10].isa);
            v412 = v270;
            v413 = (v503 + v411 + v410) & ~v411;
            v414 = v413 + v22;
            v415 = v409 | v411 | 7;
            if (v313 == 6)
            {
              v416 = swift_allocObject(&unk_1010781D0, v413 + v22, v415);
              *(_QWORD *)(v416 + 16) = v537;
              sub_1000126EC(v406, v416 + v410, type metadata accessor for AccessoryCommand);
              ((void (*)(uint64_t, char *, uint64_t))v412[4].isa)(v416 + v413, v407, v408);
              v552 = sub_10047069C;
              v553 = v416;
              aBlock = (os_log_t)_NSConcreteStackBlock;
              v549 = 1107296256;
              v550 = sub_100016FB8;
              v551 = &unk_1010781E8;
            }
            else
            {
              v481 = swift_allocObject(&unk_101078180, v414 + 1, v415);
              *(_QWORD *)(v481 + 16) = v537;
              sub_1000126EC(v406, v481 + v410, type metadata accessor for AccessoryCommand);
              ((void (*)(uint64_t, char *, uint64_t))v412[4].isa)(v481 + v413, v407, v408);
              *(_BYTE *)(v481 + v414) = v313;
              v552 = sub_1004705F8;
              v553 = v481;
              aBlock = (os_log_t)_NSConcreteStackBlock;
              v549 = 1107296256;
              v550 = sub_100016FB8;
              v551 = &unk_101078198;
            }
            v417 = _Block_copy(&aBlock);
            v482 = swift_retain();
            v483 = v517;
            static DispatchQoS.unspecified.getter(v482);
            v544 = (uint64_t)_swiftEmptyArrayStorage;
            v484 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            v485 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
            v486 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
            v487 = v515;
            v488 = v516;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v544, v485, v486, v516, v484);
            v489 = v500;
            OS_dispatch_queue.async(group:qos:flags:execute:)(0, v483, v487, v417);

            _Block_release(v417);
            v490 = v531;
            v491 = v536;
            v492 = v511;
            v493 = (unint64_t)v541;
            sub_1001E9684(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_10001BC14);
            sub_1001E9684(v490, (uint64_t)v491, v492, v493, sub_10001BC14);
            (*(void (**)(char *, uint64_t))(v514 + 8))(v487, v488);
            (*(void (**)(char *, uint64_t))(v530 + 8))(v483, v518);
            v339 = (void (*)(char *, uint64_t))v539;
            ((void (*)(char *, uint64_t))v539)(v542, v408);
            v340 = v543;
            v341 = v408;
LABEL_109:
            v339(v340, v341);
            result = swift_release();
            goto LABEL_37;
          default:
            v539 = v272;
            v355 = v543;
            v356 = v540;
            v357 = v499;
            ((void (*)(char *, char *, uint64_t))v499)(v509, v543, v540);
            v358 = v501;
            v359 = ((uint64_t (*)(char *, char *, uint64_t))v357)(v501, v542, v356);
            v360 = Logger.logObject.getter(v359);
            v361 = static os_log_type_t.error.getter(v360);
            if (os_log_type_enabled(v360, v361))
            {
              v362 = swift_slowAlloc(52, -1);
              v537 = (os_log_t)swift_slowAlloc(128, -1);
              aBlock = v537;
              *(_DWORD *)v362 = 136316163;
              v363 = sub_1001E8954(v250);
              v364 = v314;
              v544 = sub_100016940(v363, v365, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v362 + 4, v362 + 12);
              swift_bridgeObjectRelease();
              *(_WORD *)(v362 + 12) = 2080;
              v366 = sub_1002A5C3C(v313);
              v544 = sub_100016940(v366, v367, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v362 + 14, v362 + 22);
              swift_bridgeObjectRelease();
              *(_WORD *)(v362 + 22) = 2160;
              v544 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v362 + 24, v362 + 32);
              *(_WORD *)(v362 + 32) = 2081;
              v368 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
              v369 = dispatch thunk of CustomStringConvertible.description.getter(v356, v368);
              v544 = sub_100016940(v369, v370, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v362 + 34, v362 + 42);
              swift_bridgeObjectRelease();
              v371 = v364;
              v372 = (void (*)(char *, uint64_t))v539;
              ((void (*)(char *, uint64_t))v539)(v371, v356);
              *(_WORD *)(v362 + 42) = 2082;
              v373 = dispatch thunk of CustomStringConvertible.description.getter(v356, v368);
              v544 = sub_100016940(v373, v374, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v362 + 44, v362 + 52);
              swift_bridgeObjectRelease();
              v372(v358, v356);
              _os_log_impl((void *)&_mh_execute_header, v360, v361, "Unsupported %s. Status %s. Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v362, 0x34u);
              v375 = v537;
              swift_arrayDestroy(v537, 4, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v375, -1, -1);
              swift_slowDealloc(v362, -1, -1);

              v376 = v531;
              v377 = v536;
              v378 = v511;
              v379 = (unint64_t)v541;
              sub_1001E9684(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_10001BC14);
              sub_1001E9684(v376, (uint64_t)v377, v378, v379, sub_10001BC14);
              v372(v542, v356);
              result = ((uint64_t (*)(char *, uint64_t))v372)(v543, v356);
            }
            else
            {

              v453 = v531;
              v454 = v536;
              v455 = v511;
              v456 = (unint64_t)v541;
              sub_1001E9684(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_10001BC14);
              sub_1001E9684(v453, (uint64_t)v454, v455, v456, sub_10001BC14);
              v457 = (void (*)(char *, uint64_t))v539;
              ((void (*)(char *, uint64_t))v539)(v358, v356);
              v457(v314, v356);
              v457(v542, v356);
              result = ((uint64_t (*)(char *, uint64_t))v457)(v355, v356);
            }
            goto LABEL_37;
        }
        goto LABEL_38;
      }
      v201 = v543;
      if (qword_1010E9C18 != -1)
        swift_once(&qword_1010E9C18, sub_10044E058);
      v202 = type metadata accessor for Logger(0);
      sub_10001A9E8(v202, (uint64_t)qword_1011B6F48);
      v203 = v506;
      v204 = v540;
      ((void (*)(char *, char *, uint64_t))v63)(v506, v201, v540);
      v205 = ((uint64_t (*)(char *, char *, uint64_t))v63)(v521, v199, v204);
      v206 = Logger.logObject.getter(v205);
      v207 = static os_log_type_t.error.getter(v206);
      if (os_log_type_enabled(v206, v207))
      {
        v208 = swift_slowAlloc(36, -1);
        v537 = (os_log_t)swift_slowAlloc(64, -1);
        aBlock = v537;
        *(_DWORD *)v208 = 33686531;
        LOWORD(v544) = v197;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, (char *)&v544 + 2, v208 + 4, v208 + 6);
        *(_WORD *)(v208 + 6) = 2160;
        v544 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v208 + 8, v208 + 16);
        *(_WORD *)(v208 + 16) = 2081;
        v209 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v210 = dispatch thunk of CustomStringConvertible.description.getter(v204, v209);
        v544 = sub_100016940(v210, v211, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v208 + 18, v208 + 26);
        swift_bridgeObjectRelease();
        v212 = v521;
        v213 = (void (*)(char *, uint64_t))v539[1].isa;
        v213(v203, v204);
        *(_WORD *)(v208 + 26) = 2082;
        v214 = dispatch thunk of CustomStringConvertible.description.getter(v204, v209);
        v544 = sub_100016940(v214, v215, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v208 + 28, v208 + 36);
        swift_bridgeObjectRelease();
        v213(v212, v204);
        _os_log_impl((void *)&_mh_execute_header, v206, v207, "Invalid opcode: %{public}hu. Beacon %{private,mask.hash}s Command %{public}s.", (uint8_t *)v208, 0x24u);
        v216 = v537;
        swift_arrayDestroy(v537, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v216, -1, -1);
        swift_slowDealloc(v208, -1, -1);

        v217 = v531;
        v218 = v536;
        v219 = v511;
        v220 = (unint64_t)v541;
        sub_1001E9684(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_10001BC14);
        sub_1001E9684(v217, (uint64_t)v218, v219, v220, sub_10001BC14);
        v213(v542, v204);
        result = ((uint64_t (*)(char *, uint64_t))v213)(v543, v204);
      }
      else
      {

        v306 = v531;
        v307 = v536;
        v308 = v511;
        v309 = (unint64_t)v541;
        sub_1001E9684(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_10001BC14);
        sub_1001E9684(v306, (uint64_t)v307, v308, v309, sub_10001BC14);
        v310 = (void (*)(char *, uint64_t))v539[1].isa;
        v310(v521, v204);
        v310(v203, v204);
        v310(v199, v204);
        result = ((uint64_t (*)(char *, uint64_t))v310)(v201, v204);
      }
LABEL_37:
      v77 = v538;
LABEL_38:
      v89 = 0;
      *(_OWORD *)v77 = xmmword_100E22B30;
      *(_OWORD *)(v77 + 16) = xmmword_100E22B30;
      *(_BYTE *)(v77 + 32) = 0;
      goto LABEL_85;
    }
    v157 = v542;
    v156 = v543;
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v158 = type metadata accessor for Logger(0);
    sub_10001A9E8(v158, (uint64_t)qword_1011B6F48);
    v159 = v540;
    ((void (*)(char *, char *, uint64_t))v63)(v95, v156, v540);
    v160 = v520;
    v161 = ((uint64_t (*)(char *, char *, uint64_t))v63)(v520, v157, v159);
    v162 = Logger.logObject.getter(v161);
    v163 = static os_log_type_t.error.getter(v162);
    v164 = v95;
    if (os_log_type_enabled(v162, v163))
    {
      v165 = swift_slowAlloc(32, -1);
      v537 = (os_log_t)swift_slowAlloc(64, -1);
      aBlock = v537;
      *(_DWORD *)v165 = 141558531;
      v544 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v165 + 4, v165 + 12);
      *(_WORD *)(v165 + 12) = 2081;
      v166 = v160;
      v167 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v168 = dispatch thunk of CustomStringConvertible.description.getter(v159, v167);
      v544 = sub_100016940(v168, v169, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v165 + 14, v165 + 22);
      swift_bridgeObjectRelease();
      v170 = (void (*)(char *, uint64_t))v539[1].isa;
      v170(v95, v159);
      *(_WORD *)(v165 + 22) = 2082;
      v171 = dispatch thunk of CustomStringConvertible.description.getter(v159, v167);
      v544 = sub_100016940(v171, v172, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v165 + 24, v165 + 32);
      swift_bridgeObjectRelease();
      v170(v166, v159);
      _os_log_impl((void *)&_mh_execute_header, v162, v163, "Invalid commandResponse for %{private,mask.hash}s Command %{public}s.", (uint8_t *)v165, 0x20u);
      v173 = v537;
      swift_arrayDestroy(v537, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v173, -1, -1);
      swift_slowDealloc(v165, -1, -1);

      v174 = v531;
      v175 = v536;
      v176 = v511;
      v177 = (unint64_t)v541;
      sub_1001E9684(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_10001BC14);
      sub_1001E9684(v174, (uint64_t)v175, v176, v177, sub_10001BC14);
      v170(v542, v159);
      result = ((uint64_t (*)(char *, uint64_t))v170)(v543, v159);
    }
    else
    {

      v245 = v531;
      v246 = v536;
      v247 = v511;
      v248 = (unint64_t)v541;
      sub_1001E9684(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_10001BC14);
      sub_1001E9684(v245, (uint64_t)v246, v247, v248, sub_10001BC14);
      v249 = (void (*)(char *, uint64_t))v539[1].isa;
      v249(v160, v159);
      v249(v164, v159);
      v249(v157, v159);
      result = ((uint64_t (*)(char *, uint64_t))v249)(v156, v159);
    }
    v77 = v538;
    v88 = 9;
LABEL_10:
    *(_QWORD *)v77 = v88;
    *(_OWORD *)(v77 + 8) = 0u;
    *(_OWORD *)(v77 + 24) = 0u;
    *(_BYTE *)(v77 + 40) = 11;
    v89 = 1;
    goto LABEL_85;
  }
  if (v93 != 3)
  {
    v530 = v8;
    v96 = v540;
    if (v93 == 7 && v531 == 3 && v67 == 0x2000000000000000 && !v511 && v68 == 0x3000000000000000)
    {
      v97 = qword_1010E9C18;
      v98 = v69;
      v99 = v543;
      if (v97 != -1)
        swift_once(&qword_1010E9C18, sub_10044E058);
      v100 = type metadata accessor for Logger(0);
      v101 = sub_10001A9E8(v100, (uint64_t)qword_1011B6F48);
      v102 = v525;
      v103 = v522;
      sub_10005972C(v525, v522, type metadata accessor for AccessoryCommand);
      ((void (*)(char *, char *, uint64_t))v63)(v94, v99, v96);
      v104 = v524;
      v105 = ((uint64_t (*)(char *, char *, uint64_t))v63)(v524, v542, v96);
      v534 = (char *)v101;
      v106 = Logger.logObject.getter(v105);
      v107 = static os_log_type_t.default.getter(v106);
      v536 = v106;
      LODWORD(v533) = v107;
      v108 = os_log_type_enabled(v106, v107);
      v499 = v63;
      if (v108)
      {
        v109 = swift_slowAlloc(42, -1);
        v532 = (os_log_t)swift_slowAlloc(96, -1);
        aBlock = v532;
        *(_DWORD *)v109 = 136446979;
        v110 = v103;
        v111 = v523;
        sub_100C58980(*(_QWORD *)(v110 + *(int *)(v523 + 24)), *(_BYTE *)(v110 + *(int *)(v523 + 24) + 8));
        v544 = sub_100016940(v112, v113, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v109 + 4, v109 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v110, type metadata accessor for AccessoryCommand);
        *(_WORD *)(v109 + 12) = 2160;
        v544 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v109 + 14, v109 + 22);
        *(_WORD *)(v109 + 22) = 2081;
        v114 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v115 = dispatch thunk of CustomStringConvertible.description.getter(v540, v114);
        v544 = sub_100016940(v115, v116, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v109 + 24, v109 + 32);
        swift_bridgeObjectRelease();
        v117 = v539;
        v118 = (void (*)(char *, uint64_t))v539[1].isa;
        v118(v94, v540);
        *(_WORD *)(v109 + 32) = 2082;
        v119 = v524;
        v120 = v114;
        v96 = v540;
        v121 = dispatch thunk of CustomStringConvertible.description.getter(v540, v120);
        v544 = sub_100016940(v121, v122, (uint64_t *)&aBlock);
        v99 = v543;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v109 + 34, v109 + 42);
        swift_bridgeObjectRelease();
        v541 = (void (*)(_QWORD, _QWORD))v118;
        v118(v119, v96);
        v123 = v536;
        _os_log_impl((void *)&_mh_execute_header, v536, (os_log_type_t)v533, "%{public}s completed for %{private,mask.hash}s Command %{public}s!", (uint8_t *)v109, 0x2Au);
        v124 = v532;
        swift_arrayDestroy(v532, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v124, -1, -1);
        v125 = v109;
        v126 = v117;
        v102 = v525;
        swift_slowDealloc(v125, -1, -1);

      }
      else
      {
        sub_1000126B0(v103, type metadata accessor for AccessoryCommand);
        v126 = v539;
        v231 = (void (*)(char *, uint64_t))v539[1].isa;
        v231(v94, v96);
        v541 = (void (*)(_QWORD, _QWORD))v231;
        v231(v104, v96);

        v111 = v523;
      }
      v232 = v102 + *(int *)(v111 + 24);
      v233 = *(unsigned __int8 *)(v232 + 8);
      if (v233 == 1)
      {
        v286 = v513;
        v287 = v499;
        ((void (*)(char *, char *, uint64_t))v499)(v513, v99, v96);
        v288 = v507;
        v237 = v542;
        ((void (*)(char *, char *, uint64_t))v287)(v507, v542, v96);
        v289 = LOBYTE(v126[10].isa);
        v290 = (v289 + 24) & ~v289;
        v291 = (v22 + v289 + v290) & ~v289;
        v292 = swift_allocObject(&unk_101077FF0, v291 + v22, v289 | 7);
        *(_QWORD *)(v292 + 16) = v537;
        v293 = v292 + v290;
        v294 = (void (*)(uint64_t, char *, uint64_t))v126[4].isa;
        v294(v293, v286, v96);
        v294(v292 + v291, v288, v96);
        v552 = sub_100470460;
        v553 = v292;
        aBlock = (os_log_t)_NSConcreteStackBlock;
        v549 = 1107296256;
        v244 = &unk_101078008;
      }
      else
      {
        if (v233 != 3 || *(_QWORD *)v232 != 1)
        {
          v277 = v510;
          v278 = sub_10005972C(v102, v510, type metadata accessor for AccessoryCommand);
          v279 = Logger.logObject.getter(v278);
          v280 = static os_log_type_t.error.getter(v279);
          if (os_log_type_enabled(v279, v280))
          {
            v281 = (uint8_t *)swift_slowAlloc(12, -1);
            v282 = (os_log_t)swift_slowAlloc(32, -1);
            *(_DWORD *)v281 = 136446210;
            aBlock = v282;
            sub_100C58980(*(_QWORD *)(v277 + *(int *)(v111 + 24)), *(_BYTE *)(v277 + *(int *)(v111 + 24) + 8));
            v544 = sub_100016940(v283, v284, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v281 + 4, v281 + 12);
            swift_bridgeObjectRelease();
            sub_1000126B0(v277, type metadata accessor for AccessoryCommand);
            _os_log_impl((void *)&_mh_execute_header, v279, v280, "Invalid command %{public}s for .soundComplete!", v281, 0xCu);
            swift_arrayDestroy(v282, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v282, -1, -1);
            swift_slowDealloc(v281, -1, -1);

          }
          else
          {

            sub_1000126B0(v277, type metadata accessor for AccessoryCommand);
          }
          v285 = (uint64_t (*)(char *, uint64_t))v541;
          v541(v542, v96);
          result = v285(v99, v96);
          goto LABEL_82;
        }
        v234 = v513;
        v235 = v499;
        ((void (*)(char *, char *, uint64_t))v499)(v513, v99, v96);
        v236 = v507;
        v237 = v542;
        ((void (*)(char *, char *, uint64_t))v235)(v507, v542, v96);
        v238 = LOBYTE(v126[10].isa);
        v239 = (v238 + 24) & ~v238;
        v240 = (v22 + v238 + v239) & ~v238;
        v241 = swift_allocObject(&unk_101077FA0, v240 + v22, v238 | 7);
        *(_QWORD *)(v241 + 16) = v537;
        v242 = v241 + v239;
        v243 = (void (*)(uint64_t, char *, uint64_t))v126[4].isa;
        v243(v242, v234, v96);
        v243(v241 + v240, v236, v96);
        v552 = sub_100470448;
        v553 = v241;
        aBlock = (os_log_t)_NSConcreteStackBlock;
        v549 = 1107296256;
        v244 = &unk_101077FB8;
      }
      v550 = sub_100016FB8;
      v551 = v244;
      v295 = _Block_copy(&aBlock);
      v296 = swift_retain();
      v297 = v517;
      static DispatchQoS.unspecified.getter(v296);
      v544 = (uint64_t)_swiftEmptyArrayStorage;
      v298 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v299 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v300 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v301 = v515;
      v302 = v299;
      v303 = v516;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v544, v302, v300, v516, v298);
      v304 = v500;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v297, v301, v295);

      _Block_release(v295);
      (*(void (**)(char *, uint64_t))(v514 + 8))(v301, v303);
      (*(void (**)(char *, uint64_t))(v530 + 8))(v297, v518);
      v305 = (void (*)(char *, uint64_t))v541;
      v541(v237, v96);
      v305(v543, v96);
      result = swift_release();
LABEL_82:
      v77 = v538;
      goto LABEL_83;
    }
    v536 = v67;
    v541 = (void (*)(_QWORD, _QWORD))v68;
    v127 = qword_1010E9C18;
    v128 = v69;
    v129 = v543;
    if (v127 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v130 = type metadata accessor for Logger(0);
    sub_10001A9E8(v130, (uint64_t)qword_1011B6F48);
    sub_100057DB8((uint64_t)v66, (uint64_t)&aBlock);
    ((void (*)(NSObject *, char *, uint64_t))v63)(v92, v129, v96);
    v131 = v532;
    v132 = v542;
    v133 = ((uint64_t (*)(os_log_t, char *, uint64_t))v63)(v532, v542, v96);
    v134 = Logger.logObject.getter(v133);
    v135 = static os_log_type_t.error.getter(v134);
    if (os_log_type_enabled(v134, v135))
    {
      v136 = swift_slowAlloc(42, -1);
      v537 = (os_log_t)swift_slowAlloc(96, -1);
      v547 = (uint64_t)v537;
      *(_DWORD *)v136 = 136446979;
      sub_100057DB8((uint64_t)&aBlock, (uint64_t)&v544);
      v137 = String.init<A>(describing:)(&v544, v533);
      v544 = sub_100016940(v137, v138, &v547);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v136 + 4, v136 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      *(_WORD *)(v136 + 12) = 2160;
      v544 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v136 + 14, v136 + 22);
      *(_WORD *)(v136 + 22) = 2081;
      v139 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v140 = dispatch thunk of CustomStringConvertible.description.getter(v96, v139);
      v544 = sub_100016940(v140, v141, &v547);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v136 + 24, v136 + 32);
      swift_bridgeObjectRelease();
      v142 = v92;
      v143 = (void (*)(NSObject *, uint64_t))v539[1].isa;
      v143(v142, v96);
      *(_WORD *)(v136 + 32) = 2082;
      v144 = dispatch thunk of CustomStringConvertible.description.getter(v96, v139);
      v544 = sub_100016940(v144, v145, &v547);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v136 + 34, v136 + 42);
      swift_bridgeObjectRelease();
      v143(v131, v96);
      _os_log_impl((void *)&_mh_execute_header, v134, v135, "Invalid command %{public}s beacon %{private,mask.hash}s Command %{public}s", (uint8_t *)v136, 0x2Au);
      v146 = v537;
      swift_arrayDestroy(v537, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v146, -1, -1);
      swift_slowDealloc(v136, -1, -1);

      sub_1001E9684(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_10001BC14);
      v143(v542, v96);
      result = ((uint64_t (*)(char *, uint64_t))v143)(v543, v96);
    }
    else
    {

      sub_1001E9684(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_10001BC14);
      v196 = (void (*)(os_log_t, uint64_t))v539[1].isa;
      v196(v131, v96);
      v196(v92, v96);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      v196(v132, v96);
      result = ((uint64_t (*)(char *, uint64_t))v196)(v129, v96);
    }
    goto LABEL_37;
  }
  v178 = qword_1010E9C18;
  v179 = v69;
  v180 = v540;
  if (v178 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v181 = type metadata accessor for Logger(0);
  sub_10001A9E8(v181, (uint64_t)qword_1011B6F48);
  v182 = v526;
  ((void (*)(char *, char *, uint64_t))v63)(v526, v543, v180);
  v183 = v527;
  v184 = v542;
  v185 = ((uint64_t (*)(char *, char *, uint64_t))v63)(v527, v542, v180);
  v186 = Logger.logObject.getter(v185);
  v187 = static os_log_type_t.default.getter(v186);
  if (os_log_type_enabled(v186, v187))
  {
    v188 = swift_slowAlloc(35, -1);
    v541 = (void (*)(_QWORD, _QWORD))swift_slowAlloc(64, -1);
    aBlock = (os_log_t)v541;
    *(_DWORD *)v188 = 16778243;
    LOBYTE(v544) = v531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, (char *)&v544 + 1, v188 + 4, v188 + 5);
    *(_WORD *)(v188 + 5) = 2160;
    v544 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v188 + 7, v188 + 15);
    *(_WORD *)(v188 + 15) = 2081;
    v189 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v190 = dispatch thunk of CustomStringConvertible.description.getter(v180, v189);
    v544 = sub_100016940(v190, v191, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v188 + 17, v188 + 25);
    swift_bridgeObjectRelease();
    v192 = (void (*)(char *, uint64_t))v539[1].isa;
    v192(v182, v180);
    *(_WORD *)(v188 + 25) = 2082;
    v193 = dispatch thunk of CustomStringConvertible.description.getter(v180, v189);
    v544 = sub_100016940(v193, v194, (uint64_t *)&aBlock);
    v184 = v542;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v188 + 27, v188 + 35);
    swift_bridgeObjectRelease();
    v192(v183, v180);
    _os_log_impl((void *)&_mh_execute_header, v186, v187, "Received TX Power: %hhd for %{private,mask.hash}s Command %{public}s!", (uint8_t *)v188, 0x23u);
    v195 = v541;
    swift_arrayDestroy(v541, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v195, -1, -1);
    swift_slowDealloc(v188, -1, -1);
  }
  else
  {
    v192 = (void (*)(char *, uint64_t))v539[1].isa;
    v192(v182, v180);
    v192(v183, v180);
  }

  v221 = v537;
  v77 = v538;
  v222 = v530;
  v223 = v529;
  v224 = (uint64_t)v528;
  v225 = swift_beginAccess(&v537[15], &aBlock, 0, 0);
  v226 = v221[15].isa;
  v227 = (uint64_t)v543;
  if (*((_QWORD *)v226 + 2))
  {
    swift_bridgeObjectRetain(v226);
    v228 = sub_100003FB0(v227);
    if ((v229 & 1) != 0)
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v223 + 16))(v224, *((_QWORD *)v226 + 7) + *(_QWORD *)(v223 + 72) * v228, v222);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v223 + 56))(v224, 0, 1, v222);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v223 + 56))(v224, 1, 1, v222);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v223 + 56))(v224, 1, 1, v222, v225);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v223 + 48))(v224, 1, v222))
  {

    v192(v184, v180);
    v192((char *)v227, v180);
    result = sub_100004048(v224, &qword_1010EF1E8);
  }
  else
  {
    v230 = v512;
    (*(void (**)(char *, uint64_t, uint64_t))(v223 + 16))(v512, v224, v222);
    sub_100004048(v224, &qword_1010EF1E8);
    v544 = (char)v531;
    CheckedContinuation.resume(returning:)(&v544, v222);

    (*(void (**)(char *, uint64_t))(v223 + 8))(v230, v222);
    v192(v184, v180);
    result = ((uint64_t (*)(uint64_t, uint64_t))v192)(v227, v180);
  }
LABEL_83:
  v89 = 0;
  v342 = xmmword_100E22B30;
LABEL_84:
  *(_OWORD *)v77 = v342;
  *(_OWORD *)(v77 + 16) = v342;
  *(_BYTE *)(v77 + 32) = 1;
LABEL_85:
  *(_BYTE *)(v77 + 41) = v89;
  return result;
}

uint64_t sub_100469AC8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;

  result = swift_unknownObjectWeakLoadStrong(a1 + 40);
  if (result)
  {
    v5 = result;
    v6 = type metadata accessor for OwnerCommandManager.Error(0);
    v7 = sub_100006204(&qword_1010FCA40, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_100E3F1F0);
    v8 = swift_allocError(v6, v7, 0, 0);
    *v9 = a3;
    swift_storeEnumTagMultiPayload(v9, v6, 2);
    swift_retain();
    swift_errorRelease(v8);
    swift_unknownObjectRelease(v5);
    return swift_release();
  }
  return result;
}

uint64_t sub_100469B8C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t (*a5)(_QWORD, _QWORD))
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  result = swift_unknownObjectWeakLoadStrong(a1 + 40);
  if (result)
  {
    v10 = result;
    v11 = a2 + *(int *)(type metadata accessor for AccessoryCommand(0) + 20);
    swift_retain();
    sub_10046FF0C(v11, a3, 0, v10, a4, a5);
    swift_release();
    return swift_unknownObjectRelease(v10);
  }
  return result;
}

uint64_t sub_100469C2C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, const char *a5, uint64_t (*a6)(_QWORD, _QWORD))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t (*v23)(_QWORD, _QWORD);
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;

  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = swift_unknownObjectWeakLoadStrong(a1 + 40);
  if (result)
  {
    v17 = result;
    v18 = type metadata accessor for AccessoryCommand(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2 + *(int *)(v18 + 20), v12);
    v19 = type metadata accessor for OwnerCommandManager.Error(0);
    v20 = sub_100006204(&qword_1010FCA40, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_100E3F1F0);
    v21 = swift_allocError(v19, v20, 0, 0);
    v22 = a4;
    v23 = a6;
    v24 = v21;
    *v25 = v22;
    swift_storeEnumTagMultiPayload(v25, v19, 2);
    swift_retain();
    sub_10046FF0C((uint64_t)v15, a3, v24, v17, a5, v23);
    swift_errorRelease(v24);
    swift_unknownObjectRelease(v17);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return swift_release();
  }
  return result;
}

uint64_t sub_100469D90(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t (*a5)(_QWORD, _QWORD))
{
  uint64_t result;
  uint64_t v10;

  result = swift_unknownObjectWeakLoadStrong(a1 + 40);
  if (result)
  {
    v10 = result;
    swift_retain();
    sub_10046FF0C(a2, a3, 0, v10, a4, a5);
    swift_release();
    return swift_unknownObjectRelease(v10);
  }
  return result;
}

uint64_t sub_100469E20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v33;
  uint8_t *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[6];
  uint64_t v39;
  _QWORD v40[5];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 v45;
  char v46;

  v4 = v2;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)(v4 + 72);
  *(_QWORD *)v10 = v11;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v12 = v11;
  v13 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once(&qword_1010E9C18, sub_10044E058);
    goto LABEL_5;
  }
  sub_10000F9B8(a1, (uint64_t)&v41, &qword_1010FCAD8);
  if ((v46 & 1) != 0)
  {
    sub_100059244((uint64_t)&v41, (uint64_t)&v39);
    sub_100059280(&v39, (uint64_t)v38);
    v14 = swift_allocObject(&unk_101077F50, 57, 7);
    sub_100059244((uint64_t)v38, v14 + 16);
    v15 = sub_10001A9A8(&qword_1010FCAD0);
    swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
    v17 = Future.init(_:)(sub_100470388, v14, v16);
    sub_1000593D4(&v39);
    return v17;
  }
  a1 = v41;
  v10 = v42;
  v13 = v43;
  v8 = v44;
  v3 = v45;
  sub_100470390(v41, v42, v43, v44);
  if (qword_1010E9C18 != -1)
    goto LABEL_14;
LABEL_5:
  v18 = type metadata accessor for Logger(0);
  sub_10001A9E8(v18, (uint64_t)qword_1011B6F48);
  sub_100470390(a1, v10, v13, v8);
  v19 = sub_100470390(a1, v10, v13, v8);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v37 = v4;
    v22 = swift_slowAlloc(12, -1);
    v36 = a2;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(32, -1);
    v35 = v3;
    *(_DWORD *)v23 = 136315138;
    v38[0] = v24;
    v34 = v23 + 4;
    v39 = a1;
    v40[0] = v10;
    v40[1] = v13;
    v40[2] = v8;
    sub_100470390(a1, v10, v13, v8);
    v25 = sub_10001A9A8(&qword_1010FCAE0);
    v26 = String.init<A>(describing:)(&v39, v25);
    v39 = sub_100016940(v26, v27, v38);
    LOBYTE(v3) = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v34, v23 + 12);
    swift_bridgeObjectRelease();
    sub_1004703BC(a1, v10, v13, v8);
    sub_1004703BC(a1, v10, v13, v8);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Sending: %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    v28 = v23;
    a2 = v36;
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    sub_1004703BC(a1, v10, v13, v8);
    sub_1004703BC(a1, v10, v13, v8);
  }

  if ((~(v10 & v8) & 0x3000000000000000) != 0)
  {
    sub_100470390(a1, v10, v13, v8);
    v17 = sub_10046A2FC(a1, v10, v13, v8, a2);
    sub_1004703BC(a1, v10, v13, v8);
    sub_1004703BC(a1, v10, v13, v8);
  }
  else
  {
    v29 = swift_allocObject(&unk_101077F78, 17, 7);
    *(_BYTE *)(v29 + 16) = v3;
    v30 = sub_10001A9A8(&qword_1010FCAD0);
    swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
    v17 = Future.init(_:)(sub_1004703F8, v29, v31);
  }
  sub_1004703BC(a1, v10, v13, v8);
  return v17;
}

uint64_t sub_10046A27C(void (*a1)(_QWORD *), uint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  __int16 v10;

  v5 = sub_100059390();
  v6 = swift_allocError(&type metadata for CentralManager.Error, v5, 0, 0);
  sub_100059280(a3, v7);
  v9[0] = v6;
  v10 = 256;
  a1(v9);
  return sub_100004048((uint64_t)v9, &qword_1010FCAA8);
}

uint64_t sub_10046A2FC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t result;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;

  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(void **)(v5 + 72);
  *v14 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) != 0)
  {
    v18 = swift_allocObject(&unk_101077E88, 24, 7);
    swift_weakInit(v18 + 16, v5);
    v19 = (_QWORD *)swift_allocObject(&unk_101077F28, 64, 7);
    v19[2] = v18;
    v19[3] = a1;
    v19[4] = a2;
    v19[5] = a3;
    v19[6] = a4;
    v19[7] = a5;
    v20 = sub_10001A9A8(&qword_1010FCAD0);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    sub_1001E9684(a1, a2, a3, a4, sub_10001BBBC);
    swift_retain();
    return Future.init(_:)(sub_10046DBF4, v19, v21);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10046A46C(void (*a1)(_QWORD), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t Strong;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void (*v31)(_QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int16 v38;
  _BYTE v39[24];

  v32 = a8;
  v15 = type metadata accessor for BinaryEncoder(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v39, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    v20 = Strong;
    v33 = v16;
    v34 = v15;
    v21 = *(_QWORD *)(Strong + 128);
    v22 = *(_QWORD *)(Strong + 136);
    v31 = a1;
    *(_QWORD *)(Strong + 128) = a1;
    *(_QWORD *)(Strong + 136) = a2;
    swift_retain();
    v23 = sub_10001D8A8(v21, v22);
    BinaryEncoder.init()(v23);
    *(_QWORD *)&v35 = a4;
    *((_QWORD *)&v35 + 1) = a5;
    *(_QWORD *)&v36 = a6;
    *((_QWORD *)&v36 + 1) = a7;
    v24 = sub_10046DAB8();
    v25 = BinaryEncoder.encode<A>(_:)(&v35, &type metadata for AccessoryConfigCommand, v24);
    v27 = v26;
    v28 = Data.chunked(into:)(255, v25, v26);
    v29 = sub_1000F7B84(v28);
    swift_bridgeObjectRelease();
    swift_beginAccess(v20 + 144, &v35, 33, 0);
    sub_10030294C((uint64_t)v29);
    swift_endAccess(&v35);
    sub_10046B97C(v32);
    sub_10001BC14(v25, v27);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v18, v34);
  }
  else
  {
    v37 = 0;
    v35 = 0u;
    v36 = 0u;
    v38 = 267;
    a1(&v35);
    return sub_100004048((uint64_t)&v35, &qword_1010FCAA8);
  }
}

uint64_t sub_10046A828(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  _QWORD v24[4];

  v4 = v3;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (_QWORD *)((char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)(v4 + 72);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
  {
    if (qword_1010E9C18 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010E9C18, sub_10044E058);
LABEL_3:
  v14 = type metadata accessor for Logger(0);
  sub_10001A9E8(v14, (uint64_t)qword_1011B6F48);
  sub_10001BBBC(a1, a2);
  v15 = sub_10001BBBC(a1, a2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (_DWORD *)swift_slowAlloc(22, -1);
    v24[3] = swift_slowAlloc(32, -1);
    *v18 = 134218242;
    __asm { BR              X10 }
  }
  sub_10001BC14(a1, a2);
  sub_10001BC14(a1, a2);

  v19 = swift_allocObject(&unk_101077E88, 24, 7);
  swift_weakInit(v19 + 16, v4);
  v20 = swift_allocObject(&unk_101077ED8, 48, 7);
  *(_QWORD *)(v20 + 16) = v19;
  *(_BYTE *)(v20 + 24) = a3 & 1;
  *(_QWORD *)(v20 + 32) = a1;
  *(_QWORD *)(v20 + 40) = a2;
  v21 = sub_10001A9A8(&qword_1010EEC28);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  sub_10001BBBC(a1, a2);
  return Future.init(_:)(sub_10046DA64, v20, v22);
}

void sub_10046AB88(void (*a1)(__int128 *), uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t Strong;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  __int16 v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  int v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  void (*v120)(__int128 *);
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130[31];
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _OWORD v136[3];
  __int128 v137;
  __int128 v138;
  unint64_t v139;
  unint64_t v140;
  char v141;
  char v142[8];

  v129 = a6;
  v11 = type metadata accessor for BinaryDecodingError(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010EEC30);
  __chkstk_darwin(v15);
  v124 = (char *)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for Bit(0);
  v125 = *(_QWORD *)(v126 - 8);
  v17 = __chkstk_darwin(v126);
  v121 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v122 = (char *)&v114 - v19;
  v20 = type metadata accessor for BinaryDecoder(0);
  v127 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v22 = (char *)&v114 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v142, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  v128 = Strong;
  if (!Strong)
  {
    v139 = 0;
    v137 = 0u;
    v138 = 0u;
    LOBYTE(v140) = 11;
    v141 = 1;
    a1(&v137);
    sub_100004048((uint64_t)&v137, &qword_1010EEC38);
    return;
  }
  v123 = a2;
  v120 = a1;
  BinaryDecoder.init()(Strong);
  if ((a4 & 1) != 0)
  {
    v24 = v20;
    *((_QWORD *)&v138 + 1) = &type metadata for AirTagCommand;
    v25 = sub_10046DB2C();
    v139 = v25;
    v140 = sub_10046DB70();
    BinaryDecoder.decode<A>(_:from:)(&type metadata for AirTagCommand, a5, v129, &type metadata for AirTagCommand, v25);
    v63 = v22;
    sub_100057E20(&v137, v136);
LABEL_17:
    v64 = *(_QWORD *)(v128 + 152);
    v65 = *(_QWORD *)(v128 + 160);
    *(_OWORD *)(v128 + 152) = xmmword_100E22B20;
    sub_10001EF3C(v64, v65);
    sub_100057DB8((uint64_t)v136, (uint64_t)&v137);
    v141 = 0;
    v120(&v137);
    swift_release();
    sub_100004048((uint64_t)&v137, &qword_1010EEC38);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v136);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v63, v24);
    return;
  }
  v119 = v14;
  v117 = v12;
  v118 = v11;
  v26 = *(_QWORD *)(v128 + 152);
  v27 = *(_QWORD *)(v128 + 160);
  if (v27 >> 60 == 15)
    v28 = 0;
  else
    v28 = *(_QWORD *)(v128 + 152);
  v29 = 0xC000000000000000;
  if (v27 >> 60 != 15)
    v29 = *(_QWORD *)(v128 + 160);
  v134 = v28;
  v135 = v29;
  sub_10001BD08(v26, v27);
  v30 = v129;
  sub_10001BBBC(a5, v129);
  sub_100AEF294(1, a5, v30);
  v31 = v137;
  Data.append(_:)(v137, *((_QWORD *)&v137 + 1));
  sub_10001BC14(v31, *((unint64_t *)&v31 + 1));
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v32 = type metadata accessor for Logger(0);
  v33 = sub_10001A9E8(v32, (uint64_t)qword_1011B6F48);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.info.getter(v34);
  v36 = os_log_type_enabled(v34, v35);
  v115 = v20;
  v116 = v22;
  if (v36)
  {
    v37 = swift_slowAlloc(12, -1);
    v114 = a5;
    v38 = (uint8_t *)v37;
    v39 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v137 = v39;
    *(_DWORD *)v38 = 136315138;
    swift_beginAccess(&v134, v130, 0, 0);
    v40 = v134;
    v41 = v135;
    sub_10001BBBC(v134, v135);
    v42 = Data.description.getter(v40, v41);
    v44 = v43;
    sub_10001BC14(v40, v41);
    v132 = sub_100016940(v42, v44, (uint64_t *)&v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v38 + 4, v38 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "localReadBuffer %s", v38, 0xCu);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    v45 = v38;
    a5 = v114;
    swift_slowDealloc(v45, -1, -1);
  }

  v46 = v118;
  v47 = v117;
  v48 = v119;
  v49 = v126;
  swift_beginAccess(&v134, &v132, 0, 0);
  v50 = v134;
  v51 = v135;
  v52 = v128;
  v53 = *(_QWORD *)(v128 + 152);
  v54 = *(_QWORD *)(v128 + 160);
  *(_QWORD *)(v128 + 152) = v134;
  *(_QWORD *)(v52 + 160) = v51;
  sub_10001BBBC(v50, v51);
  sub_10001EF3C(v53, v54);
  v55 = v129;
  sub_10001BBBC(a5, v129);
  sub_1000FC3EC(a5, v55);
  v57 = v56;
  sub_10001BC14(a5, v55);
  v58 = v125;
  v59 = (uint64_t)v124;
  if ((v57 & 0x100) != 0)
    goto LABEL_21;
  LOBYTE(v137) = v57;
  v60 = sub_100059570();
  v61 = FixedWidthInteger.bits()(&type metadata for UInt8, v60);
  if (*(_QWORD *)(v61 + 16))
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v58 + 16))(v59, v61 + ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80)), v49);
    v62 = 0;
  }
  else
  {
    v62 = 1;
  }
  v66 = v122;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v59, v62, 1, v49);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v59, 1, v49) == 1)
  {
    sub_100004048(v59, &qword_1010EEC30);
LABEL_21:
    v67 = type metadata accessor for OwnerCommandManager.Error(0);
    v68 = sub_100006204(&qword_1010FCA40, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_100E3F1F0);
    v69 = swift_allocError(v67, v68, 0, 0);
    v71 = swift_storeEnumTagMultiPayload(v70, v67, 3);
    swift_willThrow(v71);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v116, v115);
    sub_10001BC14(v134, v135);
    goto LABEL_25;
  }
  v114 = a5;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v66, v59, v49);
  v72 = v66;
  v73 = v121;
  (*(void (**)(char *, _QWORD, uint64_t))(v58 + 104))(v121, enum case for Bit.one(_:), v49);
  v74 = sub_100006204((unint64_t *)&qword_1010EDCA0, (uint64_t (*)(uint64_t))&type metadata accessor for Bit, (uint64_t)&protocol conformance descriptor for Bit);
  dispatch thunk of RawRepresentable.rawValue.getter(&v137, v49, v74);
  dispatch thunk of RawRepresentable.rawValue.getter(&v131, v49, v74);
  v75 = v137;
  LODWORD(v74) = v131;
  v76 = *(void (**)(char *, uint64_t))(v58 + 8);
  v76(v73, v49);
  if (v75 == (_DWORD)v74)
  {
    v77 = v134;
    v78 = v135;
    *((_QWORD *)&v138 + 1) = &type metadata for AccessoryConfigCommand;
    v79 = sub_10046DA74();
    v139 = v79;
    v140 = sub_10046DAB8();
    *(_QWORD *)&v137 = swift_allocObject(&unk_101077F00, 48, 7);
    sub_10001BBBC(v77, v78);
    v80 = v79;
    v81 = v116;
    BinaryDecoder.decode<A>(_:from:)(&type metadata for AccessoryConfigCommand, v77, v78, &type metadata for AccessoryConfigCommand, v80);
    v63 = v81;
    v76(v122, v49);
    sub_10001BC14(v77, v78);
    sub_100057E20(&v137, v136);
    sub_10001BC14(v134, v135);
    v24 = v115;
    goto LABEL_17;
  }
  v82 = sub_100006204((unint64_t *)&qword_1010EC010, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecodingError, (uint64_t)&protocol conformance descriptor for BinaryDecodingError);
  v69 = swift_allocError(v46, v82, 0, 0);
  v84 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v47 + 104))(v83, enum case for BinaryDecodingError.insufficientData(_:), v46);
  swift_willThrow(v84);
  v76(v72, v49);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v116, v115);
  sub_10001BC14(v134, v135);
  a5 = v114;
  v48 = v119;
LABEL_25:
  *(_QWORD *)&v137 = v69;
  swift_errorRetain(v69);
  v85 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  if (swift_dynamicCast(v48, &v137, v85, v46, 0))
  {
    if ((*(unsigned int (**)(char *, uint64_t))(v47 + 88))(v48, v46) == enum case for BinaryDecodingError.insufficientData(_:))
    {
      swift_errorRelease(v69);
      if (qword_1010E9C18 != -1)
        swift_once(&qword_1010E9C18, sub_10044E058);
      v86 = type metadata accessor for Logger(0);
      v87 = sub_10001A9E8(v86, (uint64_t)qword_1011B6F48);
      v88 = Logger.logObject.getter(v87);
      v89 = static os_log_type_t.info.getter(v88);
      if (os_log_type_enabled(v88, v89))
      {
        v90 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v90 = 0;
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "insufficientData. Keep reading...", v90, 2u);
        swift_slowDealloc(v90, -1, -1);

        swift_release();
      }
      else
      {
        swift_release();

      }
      v113 = v137;
      goto LABEL_42;
    }
    (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v46);
  }
  swift_errorRelease(v137);
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v91 = type metadata accessor for Logger(0);
  v92 = sub_10001A9E8(v91, (uint64_t)qword_1011B6F48);
  v93 = v129;
  sub_10001BBBC(a5, v129);
  v94 = sub_10001BBBC(a5, v93);
  v127 = v92;
  v95 = Logger.logObject.getter(v94);
  v96 = static os_log_type_t.error.getter(v95);
  if (os_log_type_enabled(v95, v96))
  {
    v97 = (uint8_t *)swift_slowAlloc(12, -1);
    v98 = swift_slowAlloc(32, -1);
    v99 = v129;
    v100 = v98;
    *(_QWORD *)&v137 = v98;
    *(_DWORD *)v97 = 136446210;
    v126 = (uint64_t)(v97 + 4);
    v101 = Data.hexString.getter(a5, v99);
    *(_QWORD *)&v136[0] = sub_100016940(v101, v102, (uint64_t *)&v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v136, (char *)v136 + 8, v126, v97 + 12);
    swift_bridgeObjectRelease();
    sub_10001BC14(a5, v99);
    sub_10001BC14(a5, v99);
    _os_log_impl((void *)&_mh_execute_header, v95, v96, "Failed to decode data %{public}s", v97, 0xCu);
    swift_arrayDestroy(v100, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v100, -1, -1);
    swift_slowDealloc(v97, -1, -1);
  }
  else
  {
    v103 = v129;
    sub_10001BC14(a5, v129);
    sub_10001BC14(a5, v103);
  }

  v104 = *(_QWORD *)(v128 + 152);
  v105 = *(_QWORD *)(v128 + 160);
  *(_OWORD *)(v128 + 152) = xmmword_100E22B20;
  sub_10001EF3C(v104, v105);
  swift_errorRetain(v69);
  v106 = swift_errorRetain(v69);
  v107 = Logger.logObject.getter(v106);
  v108 = static os_log_type_t.default.getter(v107);
  if (!os_log_type_enabled(v107, v108))
  {
    swift_release();
    swift_errorRelease(v69);
    swift_errorRelease(v69);
    swift_errorRelease(v69);

    return;
  }
  v109 = (uint8_t *)swift_slowAlloc(12, -1);
  v110 = swift_slowAlloc(32, -1);
  *(_QWORD *)&v137 = v110;
  *(_DWORD *)v109 = 136446210;
  *(_QWORD *)&v136[0] = v69;
  swift_errorRetain(v69);
  v111 = String.init<A>(describing:)(v136, v85);
  *(_QWORD *)&v136[0] = sub_100016940(v111, v112, (uint64_t *)&v137);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v136, (char *)v136 + 8, v109 + 4, v109 + 12);
  swift_bridgeObjectRelease();
  swift_errorRelease(v69);
  swift_errorRelease(v69);
  _os_log_impl((void *)&_mh_execute_header, v107, v108, "Ignoring unhandled commands for now. Error: %{public}s", v109, 0xCu);
  swift_arrayDestroy(v110, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v110, -1, -1);
  swift_slowDealloc(v109, -1, -1);

  swift_release();
  v113 = v69;
LABEL_42:
  swift_errorRelease(v113);
}

void sub_10046B97C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _DWORD *v26;
  void (*v27)(_QWORD *);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD v51[2];
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[5];
  char v64;
  id v65;
  char v66[32];

  v2 = v1;
  v4 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v4);
  v56 = (char *)v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EECD0);
  v58 = *(_QWORD *)(v6 - 8);
  v59 = v6;
  __chkstk_darwin(v6);
  v57 = (char *)v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010FCA78);
  v61 = *(_QWORD *)(v8 - 8);
  v62 = v8;
  __chkstk_darwin(v8);
  v60 = (char *)v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010FCA80);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (_QWORD *)((char *)v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = (void *)v2[9];
  *v17 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  v19 = v18;
  v20 = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  swift_beginAccess(v2 + 18, v66, 0, 0);
  v21 = (_QWORD *)v2[18];
  if (v21[2])
  {
    v54 = v11;
    v55 = v10;
    v20 = v21[4];
    v10 = v21[5];
    sub_10001BBBC(v20, v10);
    if (qword_1010E9C18 == -1)
    {
LABEL_4:
      v53 = v13;
      v22 = type metadata accessor for Logger(0);
      sub_10001A9E8(v22, (uint64_t)qword_1011B6F48);
      sub_10001BBBC(v20, v10);
      v23 = sub_10001BBBC(v20, v10);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.info.getter(v24);
      if (os_log_type_enabled(v24, v25))
      {
        v26 = (_DWORD *)swift_slowAlloc(22, -1);
        v63[0] = swift_slowAlloc(32, -1);
        *v26 = 134218242;
        v51[1] = v19;
        v52 = a1;
        __asm { BR              X11 }
      }
      sub_10001BC14(v20, v10);
      sub_10001BC14(v20, v10);

      v52 = sub_1007C5C3C(v20, v10);
      v63[0] = v52;
      v65 = v19;
      v29 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
      v30 = (uint64_t)v56;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v56, 1, 1, v29);
      v31 = v19;
      v32 = sub_10001A9A8(&qword_1010EEBE8);
      v33 = sub_10001F6FC();
      v34 = sub_1000193A4(&qword_1010EEBF0, &qword_1010EEBE8, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
      v35 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
      v36 = v57;
      Publisher.receive<A>(on:options:)(&v65, v30, v32, v33, v34, v35);
      sub_100004048(v30, &qword_1010EECC8);

      v37 = sub_10001A9A8(&qword_1010EEBF8);
      v38 = sub_1000193A4(&qword_1010EECF8, &qword_1010EECD0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      v39 = v59;
      v40 = v60;
      Publisher.map<A>(_:)(sub_10046C0AC, 0, v59, v37, v38);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v36, v39);
      v41 = sub_10001A9A8(&qword_1010FCA88);
      v42 = sub_1000193A4(&qword_1010FCA90, &qword_1010FCA78, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
      v43 = sub_1000193A4(&qword_1010FCA98, &qword_1010FCA88, (const char *)&protocol conformance descriptor for Just<A>);
      v44 = v53;
      v45 = v62;
      Publisher.catch<A>(_:)(sub_10046C0B4, 0, v62, v41, v42, v43);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v40, v45);
      v46 = swift_allocObject(&unk_101077E88, 24, 7);
      swift_weakInit(v46 + 16, v2);
      v47 = swift_allocObject(&unk_101077EB0, 32, 7);
      *(_QWORD *)(v47 + 16) = v46;
      *(_QWORD *)(v47 + 24) = a1;
      v48 = sub_1000193A4(&qword_1010FCAA0, &qword_1010FCA80, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
      swift_retain();
      v49 = v55;
      Publisher<>.sink(receiveValue:)(sub_10046DA30, v47, v55, v48);
      swift_release();
      (*(void (**)(char *, unint64_t))(v54 + 8))(v44, v49);
      v50 = v2 + 10;
      swift_beginAccess(v50, v63, 33, 0);
      AnyCancellable.store(in:)(v50);
      swift_endAccess(v63);
      swift_release();
      swift_release();
      sub_10001BC14(v20, v10);
      return;
    }
LABEL_11:
    swift_once(&qword_1010E9C18, sub_10044E058);
    goto LABEL_4;
  }
  v27 = (void (*)(_QWORD *))v2[16];
  if (v27)
  {
    v28 = v2[17];
    LOBYTE(v63[0]) = 1;
    v64 = 0;
    swift_retain();
    v27(v63);
    sub_10001D8A8((uint64_t)v27, v28);
    sub_100004048((uint64_t)v63, &qword_1010FCAA8);
  }
}

void sub_10046C0AC(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 41) = 0;
}

uint64_t sub_10046C0B4(_QWORD *a1)
{
  return sub_10021D8E0(a1, &qword_1010EEBF8);
}

void sub_10046C0C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD *v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD *);
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  __int16 v34;
  _QWORD v35[6];
  _BYTE v36[48];
  _BYTE v37[24];

  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v37, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v7 = (_QWORD *)Strong;
    sub_10000F9B8(a1, (uint64_t)v36, &qword_1010EEBF8);
    if ((v36[41] & 1) != 0)
    {
      sub_100059244((uint64_t)v36, (uint64_t)v35);
      if (qword_1010E9C18 != -1)
        swift_once(&qword_1010E9C18, sub_10044E058);
      v8 = type metadata accessor for Logger(0);
      sub_10001A9E8(v8, (uint64_t)qword_1011B6F48);
      v9 = sub_100059280(v35, (uint64_t)v33);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.error.getter(v10);
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(12, -1);
        v13 = swift_slowAlloc(32, -1);
        v32 = v13;
        *(_DWORD *)v12 = 136446210;
        sub_100E01294();
        v31 = sub_100016940(v14, v15, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v12 + 4, v12 + 12);
        swift_bridgeObjectRelease();
        sub_1000593D4(v33);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "writeFuture error: %{public}s", v12, 0xCu);
        swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v13, -1, -1);
        swift_slowDealloc(v12, -1, -1);
      }
      else
      {
        sub_1000593D4(v33);
      }

      v26 = (void (*)(_QWORD *))v7[16];
      if (v26)
      {
        v27 = v7[17];
        v28 = sub_100059390();
        v29 = swift_allocError(&type metadata for CentralManager.Error, v28, 0, 0);
        sub_100059280(v35, v30);
        v33[0] = v29;
        v34 = 256;
        swift_retain();
        v26(v33);
        sub_10001D8A8((uint64_t)v26, v27);
        swift_release();
        sub_100004048((uint64_t)v33, &qword_1010FCAA8);
        sub_1000593D4(v35);
        return;
      }
      sub_1000593D4(v35);
    }
    else
    {
      if (qword_1010E9C18 != -1)
        swift_once(&qword_1010E9C18, sub_10044E058);
      v16 = type metadata accessor for Logger(0);
      v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B6F48);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.info.getter(v18);
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "writeFuture success", v20, 2u);
        swift_slowDealloc(v20, -1, -1);
      }

      v21 = v7 + 18;
      v22 = swift_beginAccess(v7 + 18, v33, 0, 0);
      if (*(_QWORD *)(v7[18] + 16))
      {
        swift_beginAccess(v7 + 18, v35, 33, 0);
        v23 = *v21;
        if (!*(_QWORD *)(*v21 + 16))
        {
          __break(1u);
          return;
        }
        v25 = *(_QWORD *)(v23 + 32);
        v24 = *(_QWORD *)(v23 + 40);
        sub_10001BBBC(v25, v24);
        sub_100779578(0, 1);
        swift_endAccess(v35);
        sub_10001BC14(v25, v24);
      }
      sub_10046B97C(a3, v22);
    }
    swift_release();
  }
}

uint64_t sub_10046C470()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  sub_1002EB2D8(v0 + 40);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001D8A8(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease();
  sub_10001EF3C(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_10046C50C()
{
  uint64_t v0;

  sub_10046C470();
  return swift_deallocClassInstance(v0, 192, 7);
}

uint64_t type metadata accessor for OwnerCommandManager()
{
  return objc_opt_self(_TtC12searchpartyd19OwnerCommandManager);
}

uint64_t sub_10046C54C(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = sub_10001A9A8(&qword_1010FCA38);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F9B8(a1, (uint64_t)v6, &qword_1010FCA38);
  v7 = type metadata accessor for OwnerCommandManager.Error(0);
  v8 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) != 1)
  {
    v9 = sub_100006204(&qword_1010FCA40, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_100E3F1F0);
    v8 = swift_allocError(v7, v9, 0, 0);
    sub_1000126EC((uint64_t)v6, v10, type metadata accessor for OwnerCommandManager.Error);
  }
  a2(v8);
  return swift_errorRelease(v8);
}

uint64_t sub_10046C654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v56;
  id v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v5 = v4;
  v66 = a4;
  v60 = a3;
  v61 = a2;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v58 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v63 = (char *)&v56 - v11;
  v12 = sub_10001A9A8(&qword_1010ED860);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v56 - v16;
  v18 = (int *)type metadata accessor for AccessoryCommand(0);
  v64 = *((_QWORD *)v18 - 1);
  v19 = __chkstk_darwin(v18);
  v65 = (uint64_t)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = v20;
  __chkstk_darwin(v19);
  v22 = (char *)&v56 - v21;
  v23 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v23);
  v25 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(v4 + 184);
  v67 = v5;
  v62 = a1;
  if (!v26)
    goto LABEL_4;
  swift_retain();
  sub_10080B950(a1, (uint64_t)v25);
  swift_release();
  v27 = type metadata accessor for OwnedBeaconRecord(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v25, 1, v27) == 1)
  {
    sub_100004048((uint64_t)v25, (uint64_t *)&unk_1010F47C0);
LABEL_4:
    v28 = 0;
    goto LABEL_12;
  }
  sub_1009A2CF8();
  v29 = SPBeaconTypeHele;
  v57 = v30;
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  if (v31 == v34 && v33 == v35)
    v37 = 1;
  else
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v34, v35, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000126B0((uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
  v28 = v37;
LABEL_12:
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v38(v17, v61, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
  v39 = v63;
  v38(v63, v62, v7);
  sub_10000F9B8((uint64_t)v17, (uint64_t)v15, &qword_1010ED860);
  v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v15, 1, v7);
  if ((_DWORD)v40 == 1)
  {
    v41 = v58;
    UUID.init()(v40);
    sub_100004048((uint64_t)v17, &qword_1010ED860);
    sub_100004048((uint64_t)v15, &qword_1010ED860);
    v42 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  }
  else
  {
    sub_100004048((uint64_t)v17, &qword_1010ED860);
    v42 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v41 = v58;
    v42(v58, v15, v7);
  }
  v44 = v59;
  v43 = v60;
  v42(v22, v41, v7);
  v42(&v22[v18[5]], v39, v7);
  v45 = &v22[v18[6]];
  *(_QWORD *)v45 = 0;
  v45[8] = 3;
  v22[v18[7]] = v28 & 1;
  v22[v18[8]] = 1;
  v46 = swift_allocObject(&unk_101077E38, 32, 7);
  v47 = v66;
  *(_QWORD *)(v46 + 16) = v43;
  *(_QWORD *)(v46 + 24) = v47;
  type metadata accessor for Transaction(0);
  v48 = v65;
  sub_10005972C((uint64_t)v22, v65, type metadata accessor for AccessoryCommand);
  v49 = *(unsigned __int8 *)(v64 + 80);
  v50 = (v49 + 16) & ~v49;
  v51 = (v44 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
  v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF8;
  v53 = swift_allocObject(&unk_101077E60, v52 + 16, v49 | 7);
  sub_1000126EC(v48, v53 + v50, type metadata accessor for AccessoryCommand);
  *(_QWORD *)(v53 + v51) = v67;
  v54 = (_QWORD *)(v53 + v52);
  *v54 = sub_100472054;
  v54[1] = v46;
  swift_retain();
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("OwnerCommandManager.execute", 27, 2, &unk_1010FCA70, v53);
  swift_release();
  swift_release();
  return sub_1000126B0((uint64_t)v22, type metadata accessor for AccessoryCommand);
}

uint64_t sub_10046CB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v56;
  id v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;

  v6 = v5;
  v67 = a5;
  v61 = a3;
  v62 = a4;
  v64 = a2;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v58 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v69 = (char *)&v56 - v12;
  v13 = sub_10001A9A8(&qword_1010ED860);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v56 - v17;
  v19 = (int *)type metadata accessor for AccessoryCommand(0);
  v59 = *((_QWORD *)v19 - 1);
  v20 = __chkstk_darwin(v19);
  v66 = (uint64_t)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = v21;
  __chkstk_darwin(v20);
  v23 = (char *)&v56 - v22;
  v24 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v24);
  v26 = (char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(v5 + 184);
  v68 = v6;
  v65 = a1;
  if (!v27)
    goto LABEL_4;
  swift_retain();
  sub_10080B950(a1, (uint64_t)v26);
  swift_release();
  v28 = type metadata accessor for OwnedBeaconRecord(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v26, 1, v28) == 1)
  {
    sub_100004048((uint64_t)v26, (uint64_t *)&unk_1010F47C0);
LABEL_4:
    v63 = 0;
    goto LABEL_12;
  }
  sub_1009A2CF8();
  v29 = SPBeaconTypeHele;
  v57 = v30;
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  if (v31 == v34 && v33 == v35)
    v63 = 1;
  else
    v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v34, v35, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000126B0((uint64_t)v26, type metadata accessor for OwnedBeaconRecord);
LABEL_12:
  v37 = v67;
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v38(v18, v64, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v18, 0, 1, v8);
  v38(v69, v65, v8);
  sub_10000F9B8((uint64_t)v18, (uint64_t)v16, &qword_1010ED860);
  v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v16, 1, v8);
  if ((_DWORD)v39 == 1)
  {
    v40 = v58;
    UUID.init()(v39);
    sub_100004048((uint64_t)v18, &qword_1010ED860);
    sub_100004048((uint64_t)v16, &qword_1010ED860);
    v41 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  }
  else
  {
    sub_100004048((uint64_t)v18, &qword_1010ED860);
    v41 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v40 = v58;
    v41(v58, v16, v8);
  }
  v43 = v61;
  v42 = v62;
  v45 = v59;
  v44 = v60;
  v41(v23, v40, v8);
  v41(&v23[v19[5]], v69, v8);
  v46 = &v23[v19[6]];
  *(_QWORD *)v46 = v43;
  v46[8] = 1;
  v23[v19[7]] = v63 & 1;
  v23[v19[8]] = 1;
  v47 = swift_allocObject(&unk_101077D70, 32, 7);
  *(_QWORD *)(v47 + 16) = v42;
  *(_QWORD *)(v47 + 24) = v37;
  type metadata accessor for Transaction(0);
  v48 = v66;
  sub_10005972C((uint64_t)v23, v66, type metadata accessor for AccessoryCommand);
  v49 = *(unsigned __int8 *)(v45 + 80);
  v50 = (v49 + 16) & ~v49;
  v51 = (v44 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
  v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF8;
  v53 = swift_allocObject(&unk_101077D98, v52 + 16, v49 | 7);
  sub_1000126EC(v48, v53 + v50, type metadata accessor for AccessoryCommand);
  *(_QWORD *)(v53 + v51) = v68;
  v54 = (_QWORD *)(v53 + v52);
  *v54 = sub_100472054;
  v54[1] = v47;
  swift_retain();
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("OwnerCommandManager.execute", 27, 2, &unk_1010FCA48, v53);
  swift_release();
  swift_release();
  return sub_1000126B0((uint64_t)v23, type metadata accessor for AccessoryCommand);
}

uint64_t sub_10046CFB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t (**v54)(uint64_t);
  uint64_t v56;
  id v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v5 = v4;
  v66 = a4;
  v60 = a3;
  v61 = a2;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v58 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v63 = (char *)&v56 - v11;
  v12 = sub_10001A9A8(&qword_1010ED860);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v56 - v16;
  v18 = (int *)type metadata accessor for AccessoryCommand(0);
  v64 = *((_QWORD *)v18 - 1);
  v19 = __chkstk_darwin(v18);
  v65 = (uint64_t)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = v20;
  __chkstk_darwin(v19);
  v22 = (char *)&v56 - v21;
  v23 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v23);
  v25 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(v4 + 184);
  v67 = v5;
  v62 = a1;
  if (!v26)
    goto LABEL_4;
  swift_retain();
  sub_10080B950(a1, (uint64_t)v25);
  swift_release();
  v27 = type metadata accessor for OwnedBeaconRecord(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v25, 1, v27) == 1)
  {
    sub_100004048((uint64_t)v25, (uint64_t *)&unk_1010F47C0);
LABEL_4:
    v28 = 0;
    goto LABEL_12;
  }
  sub_1009A2CF8();
  v29 = SPBeaconTypeHele;
  v57 = v30;
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  if (v31 == v34 && v33 == v35)
    v37 = 1;
  else
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v34, v35, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000126B0((uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
  v28 = v37;
LABEL_12:
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v38(v17, v61, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
  v39 = v63;
  v38(v63, v62, v7);
  sub_10000F9B8((uint64_t)v17, (uint64_t)v15, &qword_1010ED860);
  v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v15, 1, v7);
  if ((_DWORD)v40 == 1)
  {
    v41 = v58;
    UUID.init()(v40);
    sub_100004048((uint64_t)v17, &qword_1010ED860);
    sub_100004048((uint64_t)v15, &qword_1010ED860);
    v42 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  }
  else
  {
    sub_100004048((uint64_t)v17, &qword_1010ED860);
    v42 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v41 = v58;
    v42(v58, v15, v7);
  }
  v44 = v59;
  v43 = v60;
  v42(v22, v41, v7);
  v42(&v22[v18[5]], v39, v7);
  v45 = &v22[v18[6]];
  *(_QWORD *)v45 = 1;
  v45[8] = 3;
  v22[v18[7]] = v28 & 1;
  v22[v18[8]] = 1;
  v46 = swift_allocObject(&unk_101077CD0, 32, 7);
  v47 = v66;
  *(_QWORD *)(v46 + 16) = v43;
  *(_QWORD *)(v46 + 24) = v47;
  type metadata accessor for Transaction(0);
  v48 = v65;
  sub_10005972C((uint64_t)v22, v65, type metadata accessor for AccessoryCommand);
  v49 = *(unsigned __int8 *)(v64 + 80);
  v50 = (v49 + 16) & ~v49;
  v51 = (v44 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
  v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF8;
  v53 = swift_allocObject(&unk_101077CF8, v52 + 16, v49 | 7);
  sub_1000126EC(v48, v53 + v50, type metadata accessor for AccessoryCommand);
  *(_QWORD *)(v53 + v51) = v67;
  v54 = (uint64_t (**)(uint64_t))(v53 + v52);
  *v54 = sub_10046D484;
  v54[1] = (uint64_t (*)(uint64_t))v46;
  swift_retain();
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("OwnerCommandManager.execute", 27, 2, &unk_1010FCA30, v53);
  swift_release();
  swift_release();
  return sub_1000126B0((uint64_t)v22, type metadata accessor for AccessoryCommand);
}

uint64_t sub_10046D460()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10046D484(uint64_t a1)
{
  uint64_t v1;

  return sub_10046C54C(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_10046D490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(type metadata accessor for AccessoryCommand(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v0 + v4);
  v6 = v0 + v3;
  v7 = (uint64_t *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8));
  v8 = *v7;
  v9 = v7[1];
  v10 = (_QWORD *)swift_task_alloc(dword_1010FCA2C);
  *(_QWORD *)(v1 + 16) = v10;
  *v10 = v1;
  v10[1] = sub_100004A74;
  return sub_100457390(v6, v5, v8, v9);
}

uint64_t sub_10046D52C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for AccessoryCommand(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();

  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + *(int *)(v1 + 20), v8);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10046D5EC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for AccessoryCommand(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100459D28(*(char **)(v0 + 24), (char *)(v0 + v2), *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v3 + 8));
}

uint64_t type metadata accessor for OwnerCommandManager.Error(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FCD60;
  if (!qword_1010FCD60)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OwnerCommandManager.Error);
  return result;
}

uint64_t sub_10046D684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(type metadata accessor for AccessoryCommand(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v0 + v4);
  v6 = v0 + v3;
  v7 = (uint64_t *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8));
  v8 = *v7;
  v9 = v7[1];
  v10 = (_QWORD *)swift_task_alloc(dword_1010FCA2C);
  *(_QWORD *)(v1 + 16) = v10;
  *v10 = v1;
  v10[1] = sub_100004C28;
  return sub_100457390(v6, v5, v8, v9);
}

uint64_t sub_10046D720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));

  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v6);
}

uint64_t sub_10046D7D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  return sub_100458574(*(_QWORD *)(v0 + 16), *(char **)(v0 + 24), (void (*)(_QWORD, _QWORD))(v0 + v3), (void (*)(_QWORD, _QWORD))(v0 + ((v4 + v2 + v3) & ~v2)), *(_QWORD *)(v0 + ((v4 + ((v4 + v2 + v3) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v4 + ((v4 + v2 + v3) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10046D82C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v6);
}

uint64_t sub_10046D8D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  return sub_100458E9C(a1, v1 + v5, (char *)(v1 + ((v6 + v4 + v5) & ~v4)), *(void (**)(uint64_t))(v1 + ((v6 + ((v6 + v4 + v5) & ~v4) + 7) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v6 + ((v6 + v4 + v5) & ~v4) + 7) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10046D938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for AccessoryCommand(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + *(int *)(v1 + 20), v8);
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10046DA00()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10046DA24()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_release);
}

void sub_10046DA30(uint64_t a1)
{
  uint64_t v1;

  sub_10046C0C0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10046DA38()
{
  uint64_t v0;

  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_10046DA64(void (*a1)(__int128 *), uint64_t a2)
{
  uint64_t v2;

  sub_10046AB88(a1, a2, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

unint64_t sub_10046DA74()
{
  unint64_t result;

  result = qword_1010FCAB0;
  if (!qword_1010FCAB0)
  {
    result = swift_getWitnessTable("a\x1B#", &type metadata for AccessoryConfigCommand);
    atomic_store(result, (unint64_t *)&qword_1010FCAB0);
  }
  return result;
}

unint64_t sub_10046DAB8()
{
  unint64_t result;

  result = qword_1010FCAB8;
  if (!qword_1010FCAB8)
  {
    result = swift_getWitnessTable("I\x1B#", &type metadata for AccessoryConfigCommand);
    atomic_store(result, (unint64_t *)&qword_1010FCAB8);
  }
  return result;
}

uint64_t sub_10046DAFC()
{
  uint64_t v0;

  sub_1001E9684(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), sub_10001BC14);
  return swift_deallocObject(v0, 48, 7);
}

unint64_t sub_10046DB2C()
{
  unint64_t result;

  result = qword_1010FCAC0;
  if (!qword_1010FCAC0)
  {
    result = swift_getWitnessTable("uV#", &type metadata for AirTagCommand);
    atomic_store(result, (unint64_t *)&qword_1010FCAC0);
  }
  return result;
}

unint64_t sub_10046DB70()
{
  unint64_t result;

  result = qword_1010FCAC8;
  if (!qword_1010FCAC8)
  {
    result = swift_getWitnessTable(byte_100E3085C, &type metadata for AirTagCommand);
    atomic_store(result, (unint64_t *)&qword_1010FCAC8);
  }
  return result;
}

uint64_t sub_10046DBB4()
{
  uint64_t v0;

  swift_release();
  sub_1001E9684(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), sub_10001BC14);
  swift_release();
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10046DBF4(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t *v2;

  return sub_10046A46C(a1, a2, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_10046DC04(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD v33[2];
  uint64_t v34;

  v4 = v3;
  v31 = a2;
  v32 = a3;
  v30 = a1;
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v4 + 16) = 0xD000000000000013;
  *(_QWORD *)(v4 + 24) = 0x8000000100E3F110;
  v15 = type metadata accessor for OwnerCommandManagerAccessController();
  v16 = swift_allocObject(v15, 120, 15);
  swift_defaultActor_initialize(v16);
  *(_QWORD *)(v16 + 112) = 0;
  *(_QWORD *)(v4 + 32) = v16;
  *(_QWORD *)(v4 + 48) = 0;
  swift_unknownObjectWeakInit(v4 + 40, 0);
  sub_10001F6FC();
  v17 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v11);
  static DispatchQoS.unspecified.getter(v17);
  v33[0] = _swiftEmptyArrayStorage;
  v18 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v20 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v33, v19, v20, v5, v18);
  *(_QWORD *)(v4 + 72) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000039, 0x8000000100ED7010, v10, v7, v14, 0);
  *(_QWORD *)(v4 + 80) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v4 + 88) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 104) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v4 + 112) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v4 + 120) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 144) = _swiftEmptyArrayStorage;
  *(_OWORD *)(v4 + 152) = xmmword_100E22B20;
  *(_QWORD *)(v4 + 168) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 184) = 0;
  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B6F48);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.debug.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "init", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }

  *(_QWORD *)(v4 + 184) = v30;
  swift_retain();
  swift_release();
  v26 = v32;
  *(_QWORD *)(v4 + 56) = v31;
  *(_QWORD *)(v4 + 64) = v26;
  v27 = qword_1010EA1D0;
  swift_retain();
  v28 = v26;
  if (v27 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v33[0] = 0x7365547265646E75;
  v33[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v34, v33, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10046DFA8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1[11] = a1;
  v2 = type metadata accessor for Endianness(0);
  v1[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8((uint64_t *)&unk_101115F50);
  v1[13] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[14] = v4;
  v1[15] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010EC638);
  v1[16] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[17] = v6;
  v1[18] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EC448);
  v1[19] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[20] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[21] = swift_task_alloc(v9);
  v1[22] = swift_task_alloc(v9);
  v10 = sub_10001A9A8(&qword_1010EC458);
  v1[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010EC460);
  v1[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CentralManager.State(0);
  v1[25] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v1[26] = v13;
  v1[27] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8((uint64_t *)&unk_101116060);
  v1[28] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10046E128, 0, 0);
}

uint64_t sub_10046E128()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[28];
  v0[29] = type metadata accessor for CentralManager(0);
  v2 = sub_10001A9A8((uint64_t *)&unk_101117280);
  v3 = type metadata accessor for CentralManager.Options(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = swift_allocObject(v2, ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ 2 * *(_QWORD *)(v4 + 72), *(unsigned __int8 *)(v4 + 80) | 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E22B10;
  v6 = static CentralManager.Options.allowDuplicates.getter(v5);
  static CentralManager.Options.enableFindMy.getter(v6);
  v0[4] = v5;
  v7 = sub_100006204((unint64_t *)&unk_101116070, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager.Options, (uint64_t)&protocol conformance descriptor for CentralManager.Options);
  v8 = sub_10001A9A8((uint64_t *)&unk_101117290);
  v9 = sub_1000193A4((unint64_t *)&unk_101116080, (uint64_t *)&unk_101117290, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 4, v8, v9, v3, v7);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v1, 0, 1, v3);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to CentralManager.__allocating_init(options:)[1]);
  v0[30] = v10;
  *v10 = v0;
  v10[1] = sub_10046E298;
  return CentralManager.__allocating_init(options:)(v0[28]);
}

uint64_t sub_10046E298(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10046E2F4, 0, 0);
}

uint64_t sub_10046E2F4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[26] + 104))(v0[27], enum case for CentralManager.State.poweredOn(_:), v0[25]);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(state:)[1]);
  v0[32] = v1;
  v2 = sub_100006204(&qword_1010EC468, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  *v1 = v0;
  v1[1] = sub_10046E388;
  return CentralManagerProtocol.await(state:)(v0[27], v0[29], v2);
}

uint64_t sub_10046E388()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[26] + 8))(v2[27], v2[25]);
  if (v0)
    v4 = sub_10046F890;
  else
    v4 = sub_10046E3FC;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10046E3FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v1 = v0[11];
  v2 = sub_10001A9A8(&qword_1011003C0);
  v3 = type metadata accessor for UUID(0);
  v0[34] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v2, v6 + *(_QWORD *)(v4 + 72), v5 | 7);
  v0[35] = v7;
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[36] = v8;
  v8(v7 + v6, v1, v3);
  v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(beaconIdentifiers:)
                                        + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(beaconIdentifiers:));
  v9 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(beaconIdentifiers:)
                                  + 1));
  v0[37] = v9;
  *v9 = v0;
  v9[1] = sub_10046E4E0;
  return v11(v7);
}

uint64_t sub_10046E4E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 296);
  *(_QWORD *)(v3 + 304) = a1;
  *(_QWORD *)(v3 + 312) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_10046F940;
  }
  else
  {
    swift_bridgeObjectRelease();
    v5 = sub_10046E554;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10046E554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;

  v1 = *(_QWORD *)(v0 + 304);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v11 = *(_QWORD *)(v0 + 304);
    else
      v11 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 304));
    v12 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    if ((v1 & 0xC000000000000001) != 0)
    {
      v2 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 304));
      goto LABEL_6;
    }
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v2 = *(_QWORD *)(*(_QWORD *)(v0 + 304) + 32);
      swift_retain();
LABEL_6:
      *(_QWORD *)(v0 + 320) = v2;
      v4 = *(_QWORD *)(v0 + 184);
      v3 = *(_QWORD *)(v0 + 192);
      swift_bridgeObjectRelease();
      v5 = enum case for ConnectUseCase.findMyAction(_:);
      v6 = type metadata accessor for ConnectUseCase(0);
      v7 = *(_QWORD *)(v6 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104))(v3, v5, v6);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v3, 0, 1, v6);
      v8 = type metadata accessor for Peripheral.Options(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 1, 1, v8);
      v34 = (char *)&async function pointer to dispatch thunk of Peripheral.connect(useCase:options:)
          + async function pointer to dispatch thunk of Peripheral.connect(useCase:options:);
      v9 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.connect(useCase:options:)
                                      + 1));
      *(_QWORD *)(v0 + 328) = v9;
      *v9 = v0;
      v9[1] = sub_10046E88C;
      return ((uint64_t (*)(_QWORD, _QWORD))v34)(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 184));
    }
    __break(1u);
    goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  if (qword_1010E9C18 != -1)
LABEL_17:
    swift_once(&qword_1010E9C18, sub_10044E058);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B6F48);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Missing peripheral to read TX power!", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 288);
  v19 = *(_QWORD *)(v0 + 272);
  v20 = *(_QWORD *)(v0 + 88);

  v21 = type metadata accessor for OwnerCommandManager.Error(0);
  v22 = sub_100006204(&qword_1010FCA40, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_100E3F1F0);
  swift_allocError(v21, v22, 0, 0);
  v24 = v23;
  v18(v23, v20, v19);
  v25 = swift_storeEnumTagMultiPayload(v24, v21, 0);
  swift_willThrow(v25);
  swift_release();
  v26 = *(_QWORD *)(v0 + 216);
  v28 = *(_QWORD *)(v0 + 184);
  v27 = *(_QWORD *)(v0 + 192);
  v30 = *(_QWORD *)(v0 + 168);
  v29 = *(_QWORD *)(v0 + 176);
  v31 = *(_QWORD *)(v0 + 144);
  v32 = *(_QWORD *)(v0 + 120);
  v33 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10046E88C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 328);
  *(_QWORD *)(*v1 + 336) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 192);
  sub_100004048(*(_QWORD *)(v2 + 184), &qword_1010EC458);
  sub_100004048(v4, &qword_1010EC460);
  if (v0)
    v5 = sub_10046F9FC;
  else
    v5 = sub_10046E918;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10046E918()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v17)(_QWORD);
  uint64_t v18;

  if (qword_1010E9C18 != -1)
    swift_once(&qword_1010E9C18, sub_10044E058);
  v1 = v0[40];
  v2 = type metadata accessor for Logger(0);
  v0[43] = sub_10001A9E8(v2, (uint64_t)qword_1011B6F48);
  v3 = swift_retain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[40];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v18 = v9;
    *(_DWORD *)v8 = 136315138;
    v0[10] = v7;
    v10 = type metadata accessor for Peripheral(0);
    v11 = sub_100006204(&qword_1010EC508, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
    v0[8] = sub_100016940(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v8 + 4, v8 + 12);
    swift_release_n(v7, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Connected to peripheral: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_release_n(v7, 2);
  }
  v14 = type metadata accessor for Service(0);
  Identifier.init(stringLiteral:)("1804", 4, 2, v14);
  v17 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of Peripheral.subscript.getter
                                       + async function pointer to dispatch thunk of Peripheral.subscript.getter);
  v15 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.subscript.getter
                                   + 1));
  v0[44] = v15;
  *v15 = v0;
  v15[1] = sub_10046EB6C;
  return v17(v0[22]);
}

uint64_t sub_10046EB6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 352);
  *(_QWORD *)(v3 + 360) = a1;
  *(_QWORD *)(v3 + 368) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10046FAB8;
  else
    v5 = sub_10046EBD8;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10046EBD8()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[20] + 16))(v0[21], v0[22], v0[19]);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = v0[21];
    v18 = v0[20];
    v5 = v0[19];
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v20 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = sub_1000193A4(&qword_1010FCCE8, &qword_1010EC448, (const char *)&protocol conformance descriptor for Identifier<A>);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    v0[9] = sub_100016940(v9, v10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    v11 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v11(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Discovered TX Power service: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v11 = *(void (**)(uint64_t, uint64_t))(v0[20] + 8);
    v11(v0[21], v0[19]);
  }

  v0[47] = v11;
  v12 = v0[14];
  v13 = sub_10001A9A8(&qword_1010ED2C0);
  v14 = swift_allocObject(v13, ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72), *(unsigned __int8 *)(v12 + 80) | 7);
  v0[48] = v14;
  *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
  v15 = type metadata accessor for Characteristic(0);
  v0[49] = v15;
  Identifier.init(stringLiteral:)("2A07", 4, 2, v15);
  v19 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of Service.discover(characteristicIdentifiers:)
                                        + async function pointer to dispatch thunk of Service.discover(characteristicIdentifiers:));
  v16 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Service.discover(characteristicIdentifiers:)
                                   + 1));
  v0[50] = v16;
  *v16 = v0;
  v16[1] = sub_10046EE24;
  return v19(v14);
}

uint64_t sub_10046EE24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 400);
  *(_QWORD *)(*(_QWORD *)v1 + 408) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  if (v0)
  {
    v3 = sub_10046FB8C;
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = sub_10046EEA4;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10046EEA4(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(_QWORD);

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Discovered TX Power characteristic", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = v1[49];

  Identifier.init(stringLiteral:)("2A07", 4, 2, v5);
  v8 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of Service.subscript.getter
                                      + async function pointer to dispatch thunk of Service.subscript.getter);
  v6 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Service.subscript.getter
                                  + 1));
  v1[52] = v6;
  *v6 = v1;
  v6[1] = sub_10046EFA4;
  return v8(v1[15]);
}

uint64_t sub_10046EFA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t (*v8)(_QWORD);

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 416);
  v5 = *(_QWORD **)v2;
  v5[53] = a1;
  v5[54] = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v5[14] + 8))(v5[15], v5[13]);
  if (v1)
    return swift_task_switch(sub_10046FC6C, 0, 0);
  v8 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of Characteristic.read()
                                      + async function pointer to dispatch thunk of Characteristic.read());
  v7 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Characteristic.read()
                                  + 1));
  v5[55] = v7;
  *v7 = v5;
  v7[1] = sub_10046F06C;
  return v8(v5[18]);
}

uint64_t sub_10046F06C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 440);
  v3 = *(_QWORD **)v1;
  v3[56] = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    return swift_task_switch(sub_10046FD4C, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[57] = v5;
  v6 = sub_1000193A4((unint64_t *)&unk_101116020, &qword_1010EC638, (const char *)&protocol conformance descriptor for AsyncThrowingStream<A, B>);
  *v5 = v3;
  v5[1] = sub_10046F148;
  return AsyncSequence.first()(v3 + 2, v3[16], v6);
}

uint64_t sub_10046F148()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 456);
  *(_QWORD *)(*(_QWORD *)v1 + 464) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[17] + 8))(v2[18], v2[16]);
  if (v0)
    v4 = sub_10046FE2C;
  else
    v4 = sub_10046F1BC;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10046F1BC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67[2];

  v2 = *(_QWORD *)(v1 + 24);
  if (v2 >> 60 == 15)
  {
    v3 = Logger.logObject.getter(a1);
    v4 = static os_log_type_t.error.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to read TX Power characteristic", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }
    v6 = *(void (**)(uint64_t, uint64_t))(v1 + 376);
    v7 = *(_QWORD *)(v1 + 176);
    v8 = *(_QWORD *)(v1 + 152);

    v9 = type metadata accessor for OwnerCommandManager.Error(0);
    v10 = sub_100006204(&qword_1010FCA40, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_100E3F1F0);
    swift_allocError(v9, v10, 0, 0);
    v12 = swift_storeEnumTagMultiPayload(v11, v9, 11);
    swift_willThrow(v12);
    swift_release();
    swift_release();
    swift_release();
    v6(v7, v8);
LABEL_16:
    v47 = *(_QWORD *)(v1 + 216);
    v49 = *(_QWORD *)(v1 + 184);
    v48 = *(_QWORD *)(v1 + 192);
    v51 = *(_QWORD *)(v1 + 168);
    v50 = *(_QWORD *)(v1 + 176);
    v52 = *(_QWORD *)(v1 + 144);
    v53 = *(_QWORD *)(v1 + 120);
    v54 = *(_QWORD *)(v1 + 96);
    swift_task_dealloc(*(_QWORD *)(v1 + 224));
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v13 = (uint64_t *)(v1 + 48);
  v64 = v1 + 56;
  v14 = (_QWORD *)(v1 + 472);
  v15 = *(_QWORD *)(v1 + 16);
  sub_10001BBBC(v15, v2);
  v16 = sub_10001BBBC(v15, v2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v59 = swift_slowAlloc(32, -1);
    v67[0] = v59;
    *(_DWORD *)v19 = 136315138;
    v20 = Data.hexString.getter(v15, v2);
    *(_QWORD *)(v1 + 40) = sub_100016940(v20, v21, v67);
    v13 = (uint64_t *)(v1 + 48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v1 + 48, v19 + 4, v19 + 12);
    v14 = (_QWORD *)(v1 + 472);
    swift_bridgeObjectRelease();
    sub_10001EF3C(v15, v2);
    sub_10001EF3C(v15, v2);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Read raw TX Power %s", v19, 0xCu);
    swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    sub_10001EF3C(v15, v2);
    sub_10001EF3C(v15, v2);
  }

  v22 = *(_QWORD *)(v1 + 96);
  v23 = sub_10001BBBC(v15, v2);
  static Endianness.current.getter(v23);
  sub_1004719B0();
  v24 = FixedWidthInteger.init(data:ofEndianness:)(v14, v15, v2, v22);
  v66 = v15;
  if ((*(_BYTE *)(v1 + 473) & 1) != 0)
  {
    sub_10001BBBC(v15, v2);
    v25 = sub_10001BBBC(v15, v2);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v62 = swift_slowAlloc(32, -1);
      v67[0] = v62;
      *(_DWORD *)v28 = 136315138;
      v29 = Data.hexString.getter(v15, v2);
      *v13 = sub_100016940(v29, v30, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v13, v64, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease();
      sub_10001EF3C(v15, v2);
      sub_10001EF3C(v15, v2);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Invalid TX Power: %s!", v28, 0xCu);
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      sub_10001EF3C(v15, v2);
      sub_10001EF3C(v15, v2);
    }

    v40 = *(void (**)(uint64_t, uint64_t))(v1 + 376);
    v41 = *(_QWORD *)(v1 + 176);
    v42 = *(_QWORD *)(v1 + 152);
    v43 = type metadata accessor for OwnerCommandManager.Error(0);
    v44 = sub_100006204(&qword_1010FCA40, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_100E3F1F0);
    swift_allocError(v43, v44, 0, 0);
    v46 = swift_storeEnumTagMultiPayload(v45, v43, 11);
    swift_willThrow(v46);
    swift_release();
    swift_release();
    sub_10001EF3C(v15, v2);
    swift_release();
    v40(v41, v42);
    goto LABEL_16;
  }
  v31 = *(char *)v14;
  v32 = Logger.logObject.getter(v24);
  v33 = static os_log_type_t.default.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v34 = 134217984;
    *(_QWORD *)(v1 + 56) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v64, v1 + 64, v34 + 4, v34 + 12);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Read TX Power %ld", v34, 0xCu);
    swift_slowDealloc(v34, -1, -1);
  }
  v35 = *(void (**)(uint64_t, uint64_t))(v1 + 376);
  v36 = *(_QWORD *)(v1 + 224);
  v55 = *(_QWORD *)(v1 + 216);
  v56 = *(_QWORD *)(v1 + 192);
  v37 = *(_QWORD *)(v1 + 176);
  v57 = *(_QWORD *)(v1 + 184);
  v58 = *(_QWORD *)(v1 + 168);
  v65 = v31;
  v38 = *(_QWORD *)(v1 + 152);
  v60 = *(_QWORD *)(v1 + 144);
  v61 = *(_QWORD *)(v1 + 120);
  v63 = *(_QWORD *)(v1 + 96);

  swift_release();
  swift_release();
  sub_10001EF3C(v66, v2);
  swift_release();
  v35(v37, v38);
  swift_task_dealloc(v36);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v37);
  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v63);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v65);
}

uint64_t sub_10046F890()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release(*(_QWORD *)(v0 + 248));
  v1 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10046F940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 248);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10046F9FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 248);
  swift_release(*(_QWORD *)(v0 + 320));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10046FAB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 248));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v5 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 192);
  v9 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 176);
  v10 = *(_QWORD *)(v0 + 144);
  v11 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10046FB8C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 360));
  swift_release(v3);
  swift_release(v2);
  v1(v4, v5);
  v6 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 192);
  v10 = *(_QWORD *)(v0 + 168);
  v9 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10046FC6C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 360));
  swift_release(v3);
  swift_release(v2);
  v1(v4, v5);
  v6 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 192);
  v10 = *(_QWORD *)(v0 + 168);
  v9 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10046FD4C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 360));
  swift_release(v3);
  swift_release(v2);
  v1(v4, v5);
  v6 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 192);
  v10 = *(_QWORD *)(v0 + 168);
  v9 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10046FE2C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 360));
  swift_release(v3);
  swift_release(v2);
  v1(v4, v5);
  v6 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 192);
  v10 = *(_QWORD *)(v0 + 168);
  v9 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10046FF0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t (*a6)(_QWORD, _QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t My;
  _QWORD *v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t (*v44)(_QWORD, _QWORD);
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[5];

  v45 = a5;
  v46 = a4;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v40 - v15;
  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v17 = type metadata accessor for Logger(0);
  sub_10001A9E8(v17, (uint64_t)qword_1011B71E0);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v47 = a1;
  v18(v16, a1, v10);
  v18(v14, a2, v10);
  swift_errorRetain(a3);
  v19 = swift_errorRetain(a3);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  v22 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    v23 = swift_slowAlloc(42, -1);
    v44 = a6;
    v24 = v23;
    v25 = swift_slowAlloc(96, -1);
    v43 = v25;
    *(_DWORD *)v24 = 141558787;
    v48 = 1752392040;
    v49[0] = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v24 + 4, v24 + 12);
    *(_WORD *)(v24 + 12) = 2081;
    v42 = v22;
    v41 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v10, v41);
    v48 = sub_100016940(v26, v27, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease();
    v28 = *(void (**)(char *, uint64_t))(v11 + 8);
    v28(v16, v10);
    *(_WORD *)(v24 + 22) = 2082;
    v48 = a3;
    swift_errorRetain(a3);
    v29 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
    v30 = String.init<A>(describing:)(&v48, v29);
    v48 = sub_100016940(v30, v31, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v24 + 24, v24 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    *(_WORD *)(v24 + 32) = 2082;
    v32 = dispatch thunk of CustomStringConvertible.description.getter(v10, v41);
    v48 = sub_100016940(v32, v33, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v24 + 34, v24 + 42);
    swift_bridgeObjectRelease();
    v28(v14, v10);
    _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v42, v45, (uint8_t *)v24, 0x2Au);
    v34 = v43;
    swift_arrayDestroy(v43, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    v35 = v24;
    a6 = v44;
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {
    v36 = *(void (**)(char *, uint64_t))(v11 + 8);
    v36(v16, v10);
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    v36(v14, v10);
  }

  My = type metadata accessor for Feature.FindMy(0);
  v49[3] = My;
  v49[4] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v38 = sub_100018F08(v49);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v38, enum case for Feature.FindMy.spPlaySoundAll(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v49);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v49);
  result = v47;
  if ((My & 1) != 0)
    return a6(v47, a3);
  return result;
}

uint64_t sub_1004702F4()
{
  uint64_t v0;
  id *v1;
  id v2;

  v1 = (id *)(v0 + 16);
  switch(*(_BYTE *)(v0 + 56))
  {
    case 0:
    case 7:
    case 0xA:
      v2 = *v1;
      goto LABEL_9;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
      return swift_deallocObject(v0, 57, 7);
    case 2:

      goto LABEL_8;
    case 3:

      return swift_deallocObject(v0, 57, 7);
    case 4:
    case 5:
    case 6:
      swift_release();
      return swift_deallocObject(v0, 57, 7);
    case 8:
      swift_release();
LABEL_8:
      v2 = *(id *)(v0 + 24);
LABEL_9:
      swift_errorRelease(v2);
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      return swift_deallocObject(v0, 57, 7);
  }
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_100470388(void (*a1)(_QWORD *), uint64_t a2)
{
  uint64_t v2;

  return sub_10046A27C(a1, a2, (_QWORD *)(v2 + 16));
}

uint64_t sub_100470390(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((~(a2 & a4) & 0x3000000000000000) != 0)
    return sub_1001E9684(result, a2, a3, a4, sub_10001BBBC);
  return result;
}

uint64_t sub_1004703BC(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((~(a2 & a4) & 0x3000000000000000) != 0)
    return sub_1001E9684(result, a2, a3, a4, sub_10001BC14);
  return result;
}

uint64_t sub_1004703E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1004703F8(void (*a1)(_BYTE *))
{
  uint64_t v1;
  _BYTE v3[48];

  v3[0] = *(_BYTE *)(v1 + 16);
  v3[41] = 0;
  a1(v3);
  return sub_100004048((uint64_t)v3, &qword_1010FCAA8);
}

uint64_t sub_100470448()
{
  return sub_100470474("SPPlaySound didStopPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s", (uint64_t (*)(_QWORD, _QWORD))sub_1005F5ED4);
}

uint64_t sub_100470460()
{
  return sub_100470474("SPPlaySound didCompletePlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s", (uint64_t (*)(_QWORD, _QWORD))sub_1005F6F4C);
}

uint64_t sub_100470474(const char *a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  return sub_100469D90(*(_QWORD *)(v2 + 16), v2 + ((v6 + 24) & ~v6), v2 + ((*(_QWORD *)(v5 + 64) + v6 + ((v6 + 24) & ~v6)) & ~v6), a1, a2);
}

uint64_t sub_1004704DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for AccessoryCommand(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 1;
  swift_release();
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + *(int *)(v1 + 20), v8);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100470580()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for AccessoryCommand(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_100469AC8(*(_QWORD *)(v0 + 16), v0 + v2, *(_BYTE *)(v0 + v2 + *(_QWORD *)(v1 + 64)));
}

uint64_t sub_1004705C8()
{
  return sub_10047060C("SPPlaySound didStopPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s", (uint64_t (*)(_QWORD, _QWORD))sub_1005F5ED4);
}

uint64_t sub_1004705E0()
{
  return sub_1004706B0("SPPlaySound didStopPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s", (uint64_t (*)(_QWORD, _QWORD))sub_1005F5ED4);
}

uint64_t sub_1004705F8()
{
  return sub_10047060C("SPPlaySound didCompletePlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s", (uint64_t (*)(_QWORD, _QWORD))sub_1005F6F4C);
}

uint64_t sub_10047060C(const char *a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(type metadata accessor for AccessoryCommand(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  return sub_100469C2C(*(_QWORD *)(v2 + 16), v2 + v6, v2 + v9, *(_BYTE *)(v2 + v9 + *(_QWORD *)(v8 + 64)), a1, a2);
}

uint64_t sub_10047069C()
{
  return sub_1004706B0("SPPlaySound didCompletePlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s", (uint64_t (*)(_QWORD, _QWORD))sub_1005F6F4C);
}

uint64_t sub_1004706B0(const char *a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for AccessoryCommand(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100469B8C(*(_QWORD *)(v2 + 16), v2 + v6, v2 + ((v6 + v7 + v8) & ~v8), a1, a2);
}

uint64_t sub_100470734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  v1 = type metadata accessor for AccessoryCommand(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = *(_QWORD *)(v7 + 64) + v9 + 1;
  swift_release();
  v12 = v0 + v4;
  v13 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v13(v12, v6);
  v13(v12 + *(int *)(v1 + 20), v6);
  v13(v0 + v9, v6);
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_1004707FC()
{
  return sub_10047060C("SPPlaySound didStartPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s", (uint64_t (*)(_QWORD, _QWORD))sub_1005F40A4);
}

uint64_t sub_100470814()
{
  return sub_1004706B0("SPPlaySound didStartPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s", (uint64_t (*)(_QWORD, _QWORD))sub_1005F40A4);
}

uint64_t sub_10047082C()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for AccessoryCommand(0);
  result = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 16) + 40);
  if (result)
    return swift_unknownObjectRelease(result);
  return result;
}

uint64_t sub_100470860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  v1 = type metadata accessor for AccessoryCommand(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_release();
  v12 = v0 + v4;
  v13 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v13(v12, v6);
  v13(v12 + *(int *)(v1 + 20), v6);
  v13(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100470928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = v7 + v5;
  swift_release(*(_QWORD *)(v0 + 16));
  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  return swift_deallocObject(v0, v8, v6);
}

void sub_1004709BC(uint64_t a1)
{
  uint64_t v1;

  sub_100463028(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(void **)(v1 + 56));
}

uint64_t sub_1004709E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100470A04@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100470CC0(a1, 0, a2);
}

uint64_t sub_100470A10@<X0>(void (*a1)(_QWORD, _QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessoryCommand(0) - 8) + 80);
  return sub_100464174(a1, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5), a2);
}

uint64_t sub_100470A60()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100470A6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100469E20(a1, *(_QWORD *)(v2 + 24));
  *a2 = result;
  return result;
}

uint64_t sub_100470A98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v16;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (v5 + v3 + v4) & ~v3;
  v7 = type metadata accessor for AccessoryCommand(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v5 + v9 + v6) & ~v9;
  v11 = v3 | v9 | 7;
  v12 = (((*(_QWORD *)(v8 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = v11;
  swift_release();
  swift_release();
  v13 = v0 + v4;
  v14 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v14(v13, v1);
  v14(v0 + v6, v1);
  v14(v0 + v10, v1);
  v14(v0 + v10 + *(int *)(v7 + 20), v1);
  swift_release();

  swift_release();
  return swift_deallocObject(v0, ((v12 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v16);
}

_QWORD *sub_100470BC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = (v6 + v4 + v5) & ~v4;
  v8 = *(_QWORD *)(type metadata accessor for AccessoryCommand(0) - 8);
  v9 = (v6 + *(unsigned __int8 *)(v8 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = (*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10046425C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v5, v1 + v7, v1 + v9, *(void ***)(v1 + v10), *(void **)(v1 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8)), *(objc_class **)(v1 + ((((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100470C80(uint64_t a1)
{
  uint64_t v1;

  return sub_1004617C0(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_100470CA0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100E08F2C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100470CB8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100470CC0(a1, 1, a2);
}

uint64_t sub_100470CC0@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = sub_10046A828(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a2);
  *a3 = result;
  return result;
}

uint64_t sub_100470CF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for AccessoryCommand(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + *(int *)(v1 + 20), v8);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100470D94@<X0>(void (*a1)(char *, char *, uint64_t)@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessoryCommand(0) - 8) + 80);
  return sub_100464B90(a1, (char *)(v2 + ((v5 + 24) & ~v5)), a2);
}

uint64_t sub_100470DEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v15;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (v5 + v3 + v4) & ~v3;
  v7 = type metadata accessor for AccessoryCommand(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v5 + v9 + v6) & ~v9;
  v15 = v3 | v9 | 7;
  v11 = (((*(_QWORD *)(v8 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  v12 = v0 + v4;
  v13 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v13(v12, v1);
  v13(v0 + v6, v1);
  v13(v0 + v10, v1);
  v13(v0 + v10 + *(int *)(v7 + 20), v1);
  swift_release();

  return swift_deallocObject(v0, v11 + 8, v15);
}

_QWORD *sub_100470F08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = (v6 + v4 + v5) & ~v4;
  v8 = *(_QWORD *)(type metadata accessor for AccessoryCommand(0) - 8);
  v9 = (v6 + *(unsigned __int8 *)(v8 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = (*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100462500(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v5, (v1 + v7), v1 + v9, *(_QWORD *)(v1 + v10), *(void **)(v1 + ((v10 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100470FAC(uint64_t result, char a2)
{
  if (a2 != -1)
    return sub_1002A70CC(result, a2);
  return result;
}

uint64_t sub_100470FC0(uint64_t a1)
{
  uint64_t v1;

  return sub_100460438(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40), *(void **)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(void **)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88));
}

uint64_t sub_100470FFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v10;

  v1 = type metadata accessor for AccessoryCommand(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v10 = v3 | 7;
  v5 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + *(int *)(v1 + 20), v7);
  swift_release();

  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v10);
}

_QWORD *sub_100471100(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for AccessoryCommand(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_100460F60(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, *(_QWORD *)(v1 + v5), *(void **)(v1 + v6), *(objc_class **)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(_QWORD))(v1 + ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10047118C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for AccessoryCommand(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 33) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  sub_1002A70CC(*(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + *(int *)(v1 + 20), v8);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

_QWORD *sub_100471250(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for AccessoryCommand(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_10045F570(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), v1 + v4, *(void (**)(uint64_t *))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_1004712AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for AccessoryCommand(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  sub_1002A70CC(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_release();
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + *(int *)(v1 + 20), v8);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100471358()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessoryCommand(0) - 8) + 80);
  return sub_10045FF5C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), v0 + ((v1 + 40) & ~v1));
}

uint64_t sub_100471390(uint64_t a1)
{
  uint64_t v1;

  return sub_10045CB88(a1, *(_QWORD *)(v1 + 16), *(char **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_1004713C0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_10045D600(a1, v2, a2);
}

uint64_t sub_1004713C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v16;

  v1 = type metadata accessor for AccessoryCommand(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 16) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v16 = v3 | v8 | 7;
  v11 = (v10 + v8 + v9) & ~v8;
  v12 = (v10 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  v13 = v0 + v4;
  v14 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v14(v13, v6);
  v14(v13 + *(int *)(v1 + 20), v6);
  swift_release();
  v14(v0 + v9, v6);
  v14(v0 + v11, v6);

  return swift_deallocObject(v0, v12 + 8, v16);
}

void sub_1004714EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(type metadata accessor for AccessoryCommand(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v5 + v7 + 16) & ~v7;
  sub_10045D744(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, *(NSObject ***)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), v1 + v8, v1 + ((*(_QWORD *)(v6 + 64) + v7 + v8) & ~v7), *(void **)(v1 + ((*(_QWORD *)(v6 + 64) + ((*(_QWORD *)(v6 + 64) + v7 + v8) & ~v7) + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1004715A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1004715C4(uint64_t a1)
{
  uint64_t v1;

  sub_10045DF8C(a1, *(void **)(v1 + 16));
}

uint64_t sub_1004715D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100D07F9C(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24));
}

void sub_1004715D8(uint64_t a1)
{
  uint64_t *v1;

  sub_10045A6BC(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t sub_10047160C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100471630@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_10045B584(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_100471638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);

  v1 = type metadata accessor for AccessoryCommand(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  v12 = (v10 + v8 + v9) & ~v8;
  v13 = v12 + v10;
  swift_release();
  swift_release();
  swift_release();
  v14 = v0 + v4;
  v15 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v15(v14, v6);
  v15(v14 + *(int *)(v1 + 20), v6);
  v15(v0 + v9, v6);
  v15(v0 + v12, v6);
  return swift_deallocObject(v0, v13, v11);
}

void sub_10047172C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(type metadata accessor for AccessoryCommand(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  sub_10045B97C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(char *))(v1 + 32), *(_QWORD *)(v1 + 40), v1 + v4, v1 + ((v4 + v5 + v7) & ~v7), v1 + ((*(_QWORD *)(v6 + 64) + v7 + ((v4 + v5 + v7) & ~v7)) & ~v7));
}

uint64_t sub_1004717B0()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1004717BC()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1004717C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1010FCCB4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100004A74;
  return sub_1004572E4(a1, v5, v4);
}

uint64_t sub_10047182C(uint64_t a1)
{
  uint64_t v1;

  return sub_100453528(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100471834(uint64_t a1)
{
  uint64_t v1;

  return sub_1004535A4(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_100471854(uint64_t a1)
{
  sub_100471AB0(a1, "Disconnected Peripheral: %{public}@", "Disconnection failed due to %{public}s");
}

uint64_t sub_100471868(uint64_t a1)
{
  uint64_t *v1;

  return sub_100452A10(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100471874()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for AccessoryCommand(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + *(int *)(v1 + 20), v8);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10047191C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessoryCommand(0) - 8) + 80);
  v3 = v0 + ((v2 + 40) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_1010FCCCC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004C28;
  v5 = (_QWORD *)swift_task_alloc(dword_1010FC6E4);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_100004C28;
  return sub_100453C98(v3);
}

unint64_t sub_1004719B0()
{
  unint64_t result;

  result = qword_1010FCCE0;
  if (!qword_1010FCCE0)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Int8, &type metadata for Int8);
    atomic_store(result, (unint64_t *)&qword_1010FCCE0);
  }
  return result;
}

uint64_t sub_1004719F4(uint64_t a1)
{
  uint64_t *v1;

  return sub_100451C50(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100471A00(uint64_t a1)
{
  uint64_t *v1;

  return sub_100451CE0(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100471A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_1010FCCC0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100471A9C(uint64_t a1)
{
  sub_100471AB0(a1, "Connected Peripheral: %{public}@", "Connection failed due to %{public}s");
}

void sub_100471AB0(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FCCC0) - 8) + 80);
  sub_1004537C8(a1, *(_QWORD *)(v3 + 16), v3 + ((v7 + 24) & ~v7), a2, a3);
}

uint64_t sub_100471B10()
{
  uint64_t v0;

  return sub_100E091DC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100471B2C()
{
  uint64_t v0;

  return sub_100450708(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100471B34()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100471B60(uint64_t a1)
{
  uint64_t v1;

  return sub_100450A3C(a1, *(void **)(v1 + 16), *(void ***)(v1 + 24));
}

uint64_t sub_100471B6C()
{
  uint64_t v0;

  return sub_1004510F8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t *sub_100471B74(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v10);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v11 = *a2;
      swift_errorRetain(v11);
      *a1 = v11;
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_100471C50(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
    return swift_errorRelease(*a1);
  if (!(_DWORD)result)
  {
    v4 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

_QWORD *sub_100471CB0(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v8 = *a2;
    swift_errorRetain(v8);
    *a1 = v8;
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

uint64_t *sub_100471D64(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for OwnerCommandManager.Error);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v8 = *a2;
      swift_errorRetain(v8);
      *a1 = v8;
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

void *sub_100471E30(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

void *sub_100471EB8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for OwnerCommandManager.Error);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_100471F58(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    v4[2] = &unk_100E3F1B0;
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v4);
    return 0;
  }
  return result;
}

uint64_t *sub_100472058(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = a3[6];
    v13 = (uint64_t *)((char *)a1 + v11);
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = (uint64_t *)((char *)a1 + v12);
    v17 = (uint64_t *)((char *)a2 + v12);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v18);
  }
  return a1;
}

uint64_t sub_100472170(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

char *sub_1004721EC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  v13 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v13;
  v14 = &a1[v10];
  v15 = &a2[v10];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  a1[a3[7]] = a2[a3[7]];
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v16);
  return a1;
}

char *sub_1004722D8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease();
  v16 = a3[6];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = *((_QWORD *)v18 + 1);
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease();
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

char *sub_100472438(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

char *sub_100472508(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  v17 = a3[6];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v21 = *(_QWORD *)v19;
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = v21;
  *((_QWORD *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

uint64_t sub_100472648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100472654);
}

uint64_t sub_100472654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_10001A9A8(&qword_1010FBA40);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1004726E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004726F0);
}

uint64_t sub_1004726F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_10001A9A8(&qword_1010FBA40);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t type metadata accessor for LostModeAlertInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FCDF0;
  if (!qword_1010FCDF0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LostModeAlertInfo);
  return result;
}

void sub_1004727AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  sub_100472828(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_100E3F288;
    v4[2] = &unk_100E3F288;
    v4[3] = &unk_100E3F2A0;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

void sub_100472828(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1010FCE00)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1010FCE00);
  }
}

uint64_t storeEnumTagSinglePayload for LostModeAlertInfo.DeviceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1004728C8 + 4 * byte_100E3F265[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1004728FC + 4 * byte_100E3F260[v4]))();
}

uint64_t sub_1004728FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100472904(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10047290CLL);
  return result;
}

uint64_t sub_100472918(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100472920);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100472924(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10047292C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LostModeAlertInfo.DeviceType()
{
  return &type metadata for LostModeAlertInfo.DeviceType;
}

uint64_t sub_100472948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100472A38();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1004729A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100472A38();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_1004729F4()
{
  unint64_t result;

  result = qword_1010FCE38;
  if (!qword_1010FCE38)
  {
    result = swift_getWitnessTable(aU_13, &type metadata for LostModeAlertInfo.DeviceType);
    atomic_store(result, (unint64_t *)&qword_1010FCE38);
  }
  return result;
}

unint64_t sub_100472A38()
{
  unint64_t result;

  result = qword_1010FCE40;
  if (!qword_1010FCE40)
  {
    result = swift_getWitnessTable(byte_100E3F314, &type metadata for LostModeAlertInfo.DeviceType);
    atomic_store(result, (unint64_t *)&qword_1010FCE40);
  }
  return result;
}

uint64_t sub_100472A7C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v7 + 56) = a6;
  *(_QWORD *)(v7 + 64) = v6;
  *(_QWORD *)(v7 + 40) = a4;
  *(_QWORD *)(v7 + 48) = a5;
  *(_BYTE *)(v7 + 96) = a3;
  *(_QWORD *)(v7 + 24) = a1;
  *(_QWORD *)(v7 + 32) = a2;
  v8 = type metadata accessor for UUID(0);
  *(_QWORD *)(v7 + 72) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 80) = v9;
  *(_QWORD *)(v7 + 88) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100472AE8, v6, 0);
}

uint64_t sub_100472AE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t (*v25)(void);
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 112);
  if (!v1)
  {
    v17 = sub_10012C434();
    v18 = swift_allocError(&type metadata for DatabaseError, v17, 0, 0);
    *(_DWORD *)v19 = 2;
    *(_BYTE *)(v19 + 4) = 1;
    swift_willThrow(v18);
LABEL_6:
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
  v2 = *(_QWORD *)(v1 + 16);
  swift_retain();
  v3 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10047A418, v1, v2, &type metadata for () + 1, v3);
  v4 = *(_QWORD *)(v0 + 16);
  if (!v4)
  {
    v20 = sub_10012C434();
    v21 = swift_allocError(&type metadata for DatabaseError, v20, 0, 0);
    *(_DWORD *)v22 = 2;
    *(_BYTE *)(v22 + 4) = 1;
    swift_willThrow(v21);
    swift_release();
    goto LABEL_6;
  }
  v5 = *(_QWORD *)(v0 + 88);
  v27 = *(_QWORD *)(v0 + 80);
  v28 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 40);
  v9 = *(_BYTE *)(v0 + 96);
  v10 = *(_QWORD *)(v4 + 24);
  swift_retain();
  v26 = *(_OWORD *)(v0 + 24);
  swift_release();
  v11 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_nearOwnerKeys;
  v12 = swift_task_alloc(96);
  *(_QWORD *)(v12 + 16) = v8;
  *(_QWORD *)(v12 + 24) = v7;
  *(_QWORD *)(v12 + 32) = v6;
  *(_QWORD *)(v12 + 40) = v8;
  *(_QWORD *)(v12 + 48) = v11;
  *(_OWORD *)(v12 + 56) = v26;
  *(_BYTE *)(v12 + 72) = v9;
  *(_QWORD *)(v12 + 80) = v10;
  v13 = UUID.init()(v12);
  v14 = UUID.uuidString.getter(v13);
  v16 = v15;
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v5, v28);
  Connection.savepoint(_:block:)(v14, v16, sub_10047ACB0, v12);
  v24 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc(v12);
  swift_task_dealloc(v24);
  v25 = *(uint64_t (**)(void))(v0 + 8);
  return v25();
}

uint64_t sub_100472D2C(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  unsigned int v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD v64[3];
  uint64_t v65;

  v10 = v9;
  v60 = a8;
  v58 = a6;
  v59 = a7;
  v57 = a5;
  v62 = a4;
  v46 = a2;
  v56 = a9;
  v13 = type metadata accessor for OnConflict(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Insert(0);
  v51 = *(_QWORD *)(v17 - 8);
  v52 = v17;
  result = __chkstk_darwin(v17);
  v49 = a3 + 32;
  v61 = *(_QWORD *)(a3 + 16);
  v48 = enum case for OnConflict.replace(_:);
  v47 = xmmword_100E27910;
  v54 = v14;
  v55 = v13;
  v53 = v16;
  v50 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  while (1)
  {
    v20 = a1 - v62;
    if (a1 < v62)
      break;
    if (v20 < 0)
      goto LABEL_23;
    if (v20 >= v61)
      goto LABEL_24;
    v65 = v10;
    v21 = (uint64_t *)(v49 + 16 * v20);
    v22 = *v21;
    v23 = v21[1];
    (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, v48, v13);
    v24 = sub_10001A9A8(&qword_1010EF388);
    v25 = type metadata accessor for Setter(0);
    v26 = swift_allocObject(v24, ((*(unsigned __int8 *)(*(_QWORD *)(v25 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v25 - 8) + 80))+ 5 * *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v25 - 8) + 80) | 7);
    *(_OWORD *)(v26 + 16) = v47;
    v63 = v22;
    sub_10001BBBC(v22, v23);
    if (qword_1010E9A30 != -1)
      swift_once(&qword_1010E9A30, sub_1001F524C);
    v27 = sub_10001A9A8(&qword_1010EF3B8);
    v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B6AA8);
    v29 = type metadata accessor for UUID(0);
    <- infix<A>(_:_:)(v28, v58, v29, &protocol witness table for UUID);
    if (qword_1010E9A38 != -1)
      swift_once(&qword_1010E9A38, sub_1001F52E8);
    v30 = sub_10001A9E8(v27, (uint64_t)qword_1011B6AC0);
    <- infix<A>(_:_:)(v30, v59, v29, &protocol witness table for UUID);
    if (qword_1010E9A48 != -1)
      swift_once(&qword_1010E9A48, sub_1001F5408);
    v31 = sub_10001A9A8(&qword_1010EF3E8);
    v32 = sub_10001A9E8(v31, (uint64_t)qword_1011B6AF0);
    LOBYTE(v64[0]) = v60;
    v33 = sub_10012C49C();
    <- infix<A>(_:_:)(v32, v64, &type metadata for UInt8, v33);
    v16 = v53;
    if (qword_1010E9A40 != -1)
      swift_once(&qword_1010E9A40, sub_1001F537C);
    v34 = sub_10001A9A8(&qword_1010EF430);
    v35 = sub_10001A9E8(v34, (uint64_t)qword_1011B6AD8);
    v64[0] = a1;
    v36 = sub_10012C5BC();
    <- infix<A>(_:_:)(v35, v64, &type metadata for UInt64, v36);
    v37 = v63;
    if (qword_1010E9A50 != -1)
      swift_once(&qword_1010E9A50, sub_1001F5498);
    v38 = sub_10001A9A8(&qword_1010EF408);
    v39 = sub_10001A9E8(v38, (uint64_t)qword_1011B6B08);
    v64[0] = v37;
    v64[1] = v23;
    <- infix<A>(_:_:)(v39, v64, &type metadata for Data, &protocol witness table for Data);
    v40 = type metadata accessor for Table(0);
    v41 = v50;
    QueryType.insert(or:_:)(v16, v26, v40, &protocol witness table for Table);
    v42 = v41;
    swift_bridgeObjectRelease();
    v14 = v54;
    v13 = v55;
    (*(void (**)(char *, uint64_t))(v54 + 8))(v16, v55);
    v43 = v65;
    Connection.run(_:)(v41);
    v10 = v43;
    if (v43)
    {
      (*(void (**)(char *, uint64_t))(v51 + 8))(v42, v52);
      return sub_10001BC14(v37, v23);
    }
    (*(void (**)(char *, uint64_t))(v51 + 8))(v42, v52);
    result = sub_10001BC14(v37, v23);
    if (v46 == a1)
      return result;
    if (__CFADD__(a1++, 1))
      goto LABEL_25;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1004731C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  v7 = type metadata accessor for UUID(0);
  v6[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[10] = v8;
  v6[11] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100473230, v5, 0);
}

uint64_t sub_100473230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t (*v26)(void);
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 112);
  if (!v1)
  {
    v18 = sub_10012C434();
    v19 = swift_allocError(&type metadata for DatabaseError, v18, 0, 0);
    *(_DWORD *)v20 = 2;
    *(_BYTE *)(v20 + 4) = 1;
    swift_willThrow(v19);
LABEL_6:
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  v2 = *(_QWORD *)(v1 + 16);
  swift_retain();
  v3 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10047A418, v1, v2, (char *)&type metadata for () + 8, v3);
  v4 = *(_QWORD *)(v0 + 16);
  if (!v4)
  {
    v21 = sub_10012C434();
    v22 = swift_allocError(&type metadata for DatabaseError, v21, 0, 0);
    *(_DWORD *)v23 = 2;
    *(_BYTE *)(v23 + 4) = 1;
    swift_willThrow(v22);
    swift_release();
    goto LABEL_6;
  }
  v5 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 80);
  v29 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD **)(v0 + 40);
  v9 = *(_QWORD *)(v4 + 24);
  swift_retain();
  v27 = *(_OWORD *)(v0 + 24);
  swift_release();
  v10 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_keys;
  v11 = v8[3];
  v12 = v8[4];
  sub_10001AA44(v8, v11);
  LOBYTE(v12) = sub_100ABA6B0(v11, v12);
  v13 = swift_task_alloc(80);
  *(_QWORD *)(v13 + 16) = v10;
  *(_OWORD *)(v13 + 24) = v27;
  *(_BYTE *)(v13 + 40) = v12;
  *(_QWORD *)(v13 + 48) = v8;
  *(_QWORD *)(v13 + 56) = v7;
  *(_QWORD *)(v13 + 64) = v6;
  *(_QWORD *)(v13 + 72) = v9;
  v14 = UUID.init()(v13);
  v15 = UUID.uuidString.getter(v14);
  v17 = v16;
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v5, v29);
  Connection.savepoint(_:block:)(v15, v17, sub_10047AC88, v13);
  v25 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc(v13);
  swift_task_dealloc(v25);
  v26 = *(uint64_t (**)(void))(v0 + 8);
  return v26();
}

uint64_t sub_100473488(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, _QWORD, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  uint64_t v48;

  v46 = a8;
  v38 = a6;
  v39 = a7;
  v37 = a4;
  v36 = a3;
  v41 = a1;
  v10 = type metadata accessor for OnConflict(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for Insert(0);
  v43 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v40 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v11;
  v15 = *(void (**)(char *, _QWORD, uint64_t))(v11 + 104);
  v44 = v10;
  v15(v13, enum case for OnConflict.replace(_:), v10);
  v16 = sub_10001A9A8(&qword_1010EF388);
  v17 = type metadata accessor for Setter(0);
  v18 = swift_allocObject(v16, ((*(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80))+ 5 * *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80) | 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E27910;
  if (qword_1010E9A30 != -1)
    swift_once(&qword_1010E9A30, sub_1001F524C);
  v19 = sub_10001A9A8(&qword_1010EF3B8);
  v20 = sub_10001A9E8(v19, (uint64_t)qword_1011B6AA8);
  v21 = type metadata accessor for UUID(0);
  <- infix<A>(_:_:)(v20, a2, v21, &protocol witness table for UUID);
  if (qword_1010E9A38 != -1)
    swift_once(&qword_1010E9A38, sub_1001F52E8);
  v22 = sub_10001A9E8(v19, (uint64_t)qword_1011B6AC0);
  <- infix<A>(_:_:)(v22, v36, v21, &protocol witness table for UUID);
  if (qword_1010E9A48 != -1)
    swift_once(&qword_1010E9A48, sub_1001F5408);
  v23 = sub_10001A9A8(&qword_1010EF3E8);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B6AF0);
  LOBYTE(v47[0]) = v37;
  v25 = sub_10012C49C();
  <- infix<A>(_:_:)(v24, v47, &type metadata for UInt8, v25);
  if (qword_1010E9A40 != -1)
    swift_once(&qword_1010E9A40, sub_1001F537C);
  v26 = sub_10001A9A8(&qword_1010EF430);
  v27 = sub_10001A9E8(v26, (uint64_t)qword_1011B6AD8);
  v28 = a5[3];
  v29 = a5[4];
  sub_10001AA44(a5, v28);
  dispatch thunk of RawRepresentable.rawValue.getter(v47, v28, *(_QWORD *)(v29 + 56));
  v48 = v47[0];
  v30 = sub_10012C5BC();
  <- infix<A>(_:_:)(v27, &v48, &type metadata for UInt64, v30);
  if (qword_1010E9A58 != -1)
    swift_once(&qword_1010E9A58, sub_1001F552C);
  v31 = sub_10001A9A8(&qword_1010EF408);
  v32 = sub_10001A9E8(v31, (uint64_t)qword_1011B6B20);
  v47[0] = v38;
  v47[1] = v39;
  <- infix<A>(_:_:)(v32, v47, &type metadata for Data, &protocol witness table for Data);
  v33 = type metadata accessor for Table(0);
  v34 = v40;
  QueryType.insert(or:_:)(v13, v18, v33, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v44);
  Connection.run(_:)(v34);
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v34, v45);
}

uint64_t sub_100473878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  v7 = type metadata accessor for UUID(0);
  v6[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[10] = v8;
  v6[11] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004738E0, v5, 0);
}

uint64_t sub_1004738E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t (*v24)(void);
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 112);
  if (!v1)
  {
    v16 = sub_10012C434();
    v17 = swift_allocError(&type metadata for DatabaseError, v16, 0, 0);
    *(_DWORD *)v18 = 2;
    *(_BYTE *)(v18 + 4) = 1;
    swift_willThrow(v17);
LABEL_6:
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
  v2 = *(_QWORD *)(v1 + 16);
  swift_retain();
  v3 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10047A418, v1, v2, &type metadata for () + 1, v3);
  v4 = *(_QWORD *)(v0 + 16);
  if (!v4)
  {
    v19 = sub_10012C434();
    v20 = swift_allocError(&type metadata for DatabaseError, v19, 0, 0);
    *(_DWORD *)v21 = 2;
    *(_BYTE *)(v21 + 4) = 1;
    swift_willThrow(v20);
    swift_release();
    goto LABEL_6;
  }
  v5 = *(_QWORD *)(v0 + 88);
  v26 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 40);
  v9 = *(_QWORD *)(v4 + 24);
  swift_retain();
  v25 = *(_OWORD *)(v0 + 24);
  swift_release();
  v10 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_connectionKeys;
  v11 = swift_task_alloc(80);
  *(_QWORD *)(v11 + 16) = v8;
  *(_QWORD *)(v11 + 24) = v7;
  *(_QWORD *)(v11 + 32) = v6;
  *(_QWORD *)(v11 + 40) = v8;
  *(_QWORD *)(v11 + 48) = v10;
  *(_OWORD *)(v11 + 56) = v25;
  *(_QWORD *)(v11 + 72) = v9;
  v12 = UUID.init()(v11);
  v13 = UUID.uuidString.getter(v12);
  v15 = v14;
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v5, v27);
  Connection.savepoint(_:block:)(v13, v15, sub_10047AC64, v11);
  v23 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc(v11);
  swift_task_dealloc(v23);
  v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_100473B14(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  unsigned int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD v59[3];
  uint64_t v60;

  v9 = v8;
  v54 = a7;
  v55 = a8;
  v52 = a5;
  v53 = a6;
  v57 = a4;
  v42 = a2;
  v12 = type metadata accessor for OnConflict(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Insert(0);
  v47 = *(_QWORD *)(v16 - 8);
  v48 = v16;
  result = __chkstk_darwin(v16);
  v45 = a3 + 32;
  v56 = *(_QWORD *)(a3 + 16);
  v44 = enum case for OnConflict.replace(_:);
  v43 = xmmword_100E26E00;
  v50 = v13;
  v51 = v12;
  v49 = v15;
  v46 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  while (1)
  {
    v19 = a1 - v57;
    if (a1 < v57)
      break;
    if (v19 < 0)
      goto LABEL_21;
    if (v19 >= v56)
      goto LABEL_22;
    v60 = v9;
    v20 = (uint64_t *)(v45 + 16 * v19);
    v22 = *v20;
    v21 = v20[1];
    (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, v44, v12);
    v23 = sub_10001A9A8(&qword_1010EF388);
    v24 = type metadata accessor for Setter(0);
    v25 = swift_allocObject(v23, ((*(unsigned __int8 *)(*(_QWORD *)(v24 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v24 - 8) + 80))+ 4 * *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v24 - 8) + 80) | 7);
    *(_OWORD *)(v25 + 16) = v43;
    v58 = v21;
    sub_10001BBBC(v22, v21);
    if (qword_1010E9A30 != -1)
      swift_once(&qword_1010E9A30, sub_1001F524C);
    v26 = sub_10001A9A8(&qword_1010EF3B8);
    v27 = sub_10001A9E8(v26, (uint64_t)qword_1011B6AA8);
    v28 = type metadata accessor for UUID(0);
    <- infix<A>(_:_:)(v27, v53, v28, &protocol witness table for UUID);
    if (qword_1010E9A38 != -1)
      swift_once(&qword_1010E9A38, sub_1001F52E8);
    v29 = sub_10001A9E8(v26, (uint64_t)qword_1011B6AC0);
    <- infix<A>(_:_:)(v29, v54, v28, &protocol witness table for UUID);
    if (qword_1010E9A40 != -1)
      swift_once(&qword_1010E9A40, sub_1001F537C);
    v30 = sub_10001A9A8(&qword_1010EF430);
    v31 = sub_10001A9E8(v30, (uint64_t)qword_1011B6AD8);
    v59[0] = a1;
    v32 = sub_10012C5BC();
    <- infix<A>(_:_:)(v31, v59, &type metadata for UInt64, v32);
    v15 = v49;
    v33 = v58;
    if (qword_1010E9A60 != -1)
      swift_once(&qword_1010E9A60, sub_1001F55C8);
    v34 = sub_10001A9A8(&qword_1010EF408);
    v35 = sub_10001A9E8(v34, (uint64_t)qword_1011B6B38);
    v59[0] = v22;
    v59[1] = v33;
    <- infix<A>(_:_:)(v35, v59, &type metadata for Data, &protocol witness table for Data);
    v36 = type metadata accessor for Table(0);
    v37 = v46;
    QueryType.insert(or:_:)(v15, v25, v36, &protocol witness table for Table);
    v38 = v37;
    swift_bridgeObjectRelease();
    v13 = v50;
    v12 = v51;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v15, v51);
    v39 = v60;
    Connection.run(_:)(v37);
    v9 = v39;
    if (v39)
    {
      (*(void (**)(char *, uint64_t))(v47 + 8))(v38, v48);
      return sub_10001BC14(v22, v33);
    }
    (*(void (**)(char *, uint64_t))(v47 + 8))(v38, v48);
    result = sub_10001BC14(v22, v33);
    if (v42 == a1)
      return result;
    if (__CFADD__(a1++, 1))
      goto LABEL_23;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_100473F20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EF358);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v8);
  v3[12] = swift_task_alloc(v8);
  v3[13] = swift_task_alloc(v8);
  v9 = type metadata accessor for Table(0);
  v3[14] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[15] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[16] = swift_task_alloc(v11);
  v3[17] = swift_task_alloc(v11);
  v3[18] = swift_task_alloc(v11);
  return swift_task_switch(sub_100474010, v2, 0);
}

uint64_t sub_100474010()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t (*v42)(void);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v1 = *(_QWORD *)(v0[5] + 112);
  if (!v1)
  {
    v27 = sub_10012C434();
    v28 = swift_allocError(&type metadata for DatabaseError, v27, 0, 0);
    *(_DWORD *)v29 = 2;
    *(_BYTE *)(v29 + 4) = 1;
    swift_willThrow(v28);
LABEL_10:
    v33 = v0[17];
    v34 = v0[16];
    v36 = v0[12];
    v35 = v0[13];
    v37 = v0[11];
    v38 = v0[8];
    swift_task_dealloc(v0[18]);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    v42 = (uint64_t (*)(void))v0[1];
    return v42();
  }
  v2 = *(_QWORD *)(v1 + 16);
  swift_retain();
  v3 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10047A418, v1, v2, &type metadata for () + 1, v3);
  v4 = v0[2];
  if (!v4)
  {
    v30 = sub_10012C434();
    v31 = swift_allocError(&type metadata for DatabaseError, v30, 0, 0);
    *(_DWORD *)v32 = 2;
    *(_BYTE *)(v32 + 4) = 1;
    swift_willThrow(v31);
    swift_release();
    goto LABEL_10;
  }
  v5 = *(_QWORD *)(v4 + 24);
  swift_retain();
  swift_release();
  if (qword_1010E9A30 != -1)
    swift_once(&qword_1010E9A30, sub_1001F524C);
  v48 = v5;
  v6 = v0[6];
  v7 = v0[3];
  v8 = sub_10001A9A8(&qword_1010EF3B8);
  v57 = sub_10001A9E8(v8, (uint64_t)qword_1011B6AA8);
  == infix<A>(_:_:)(v57, v7, v6, &protocol witness table for UUID, &protocol witness table for String);
  if (qword_1010E9A38 != -1)
    swift_once(&qword_1010E9A38, sub_1001F52E8);
  v44 = v0[18];
  v45 = v0[16];
  v10 = v0[13];
  v9 = v0[14];
  v49 = v9;
  v50 = v0[17];
  v11 = v0[11];
  v12 = v0[12];
  v13 = v0[9];
  v43 = v0[10];
  v14 = v0[6];
  v46 = v0[8];
  v47 = v0[7];
  v15 = v0[4];
  v53 = v15;
  v55 = v0[3];
  v51 = sub_10001A9E8(v8, (uint64_t)qword_1011B6AC0);
  == infix<A>(_:_:)(v51, v15, v14, &protocol witness table for UUID, &protocol witness table for String);
  && infix(_:_:)(v12, v11);
  v16 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
  v16(v11, v13);
  v16(v12, v13);
  QueryType.filter(_:)(v10, v9, &protocol witness table for Table);
  v16(v10, v13);
  == infix<A>(_:_:)(v57, v55, v14, &protocol witness table for UUID, &protocol witness table for String);
  == infix<A>(_:_:)(v51, v53, v14, &protocol witness table for UUID, &protocol witness table for String);
  && infix(_:_:)(v12, v11);
  v16(v11, v13);
  v16(v12, v13);
  QueryType.filter(_:)(v10, v9, &protocol witness table for Table);
  v16(v10, v13);
  v17 = v14;
  == infix<A>(_:_:)(v57, v55, v14, &protocol witness table for UUID, &protocol witness table for String);
  == infix<A>(_:_:)(v51, v53, v14, &protocol witness table for UUID, &protocol witness table for String);
  && infix(_:_:)(v12, v11);
  v16(v11, v13);
  v16(v12, v13);
  QueryType.filter(_:)(v10, v49, &protocol witness table for Table);
  v16(v10, v13);
  v18 = (_QWORD *)swift_task_alloc(48);
  v18[2] = v48;
  v18[3] = v44;
  v18[4] = v50;
  v18[5] = v45;
  v19 = UUID.init()(v18);
  v20 = UUID.uuidString.getter(v19);
  v22 = v21;
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v17);
  Connection.savepoint(_:block:)(v20, v22, sub_10047AC48, v18);
  v23 = v0[17];
  v58 = v0[18];
  v25 = v0[15];
  v24 = v0[16];
  v26 = v0[14];
  v40 = v0[13];
  v52 = v0[12];
  v54 = v0[11];
  v56 = v0[8];
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc(v18);
  v41 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  v41(v24, v26);
  v41(v23, v26);
  v41(v58, v26);
  swift_task_dealloc(v58);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v40);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  v42 = (uint64_t (*)(void))v0[1];
  return v42();
}

uint64_t sub_1004745CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v17)(char *, uint64_t);
  _QWORD v18[4];

  v18[1] = a4;
  v18[3] = a3;
  v5 = type metadata accessor for Delete(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = ((uint64_t (*)(void))__chkstk_darwin)();
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)v18 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)v18 - v13;
  v15 = type metadata accessor for Table(0);
  QueryType.delete()(v15, &protocol witness table for Table);
  Connection.run(_:)(v14);
  if (v4)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v14, v5);
  QueryType.delete()(v15, &protocol witness table for Table);
  Connection.run(_:)(v12);
  v17(v12, v5);
  QueryType.delete()(v15, &protocol witness table for Table);
  Connection.run(_:)(v9);
  return ((uint64_t (*)(char *, uint64_t))v17)(v9, v5);
}

uint64_t sub_100474760(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_10001A9A8(&qword_101109410);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[6] = swift_task_alloc(v5);
  v2[7] = swift_task_alloc(v5);
  v2[8] = swift_task_alloc(v5);
  v6 = type metadata accessor for UUID(0);
  v2[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[10] = v7;
  v2[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED860);
  v2[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)swift_task_alloc(dword_1010FCE9C);
  v2[13] = v9;
  *v9 = v2;
  v9[1] = sub_10047483C;
  return sub_1004754FC();
}

uint64_t sub_10047483C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(*v2 + 104);
  v4 = *v2;
  *(_QWORD *)(v4 + 112) = a1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_1004748F8, *(_QWORD *)(v4 + 24), 0);
  v5 = *(_QWORD *)(v4 + 88);
  v7 = *(_QWORD *)(v4 + 56);
  v6 = *(_QWORD *)(v4 + 64);
  v8 = *(_QWORD *)(v4 + 48);
  swift_task_dealloc(*(_QWORD *)(v4 + 96));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1004748F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, unint64_t, uint64_t);
  _QWORD *v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(v0 + 248) = v3;
  v4 = -1;
  v5 = -1 << v3;
  v6 = *(_QWORD *)(v1 + 56);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  *(_QWORD *)(v0 + 120) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v0 + 128) = _swiftEmptyArrayStorage;
  v7 = v4 & v6;
  if (v7)
  {
    v8 = 0;
    v9 = __clz(__rbit64(v7));
    v10 = (v7 - 1) & v7;
    goto LABEL_5;
  }
  v17 = 63 - v5;
  if (v17 <= 0x7F)
    goto LABEL_26;
  v18 = *(_QWORD *)(v1 + 64);
  if (!v18)
  {
    if (v17 >= 0xC0)
    {
      v18 = *(_QWORD *)(v1 + 72);
      if (v18)
      {
        v8 = 2;
        goto LABEL_10;
      }
      if (v17 >= 0x100)
      {
        v18 = *(_QWORD *)(v1 + 80);
        if (v18)
        {
          v8 = 3;
          goto LABEL_10;
        }
        if (v17 >= 0x140)
        {
          v18 = *(_QWORD *)(v1 + 88);
          if (v18)
          {
            v8 = 4;
            goto LABEL_10;
          }
          v19 = 0;
          v20 = v17 >> 6;
          if (v20 <= 5)
            v20 = 5;
          v21 = v20 - 5;
          while (v21 != v19)
          {
            v18 = *(_QWORD *)(v1 + 96 + 8 * v19++);
            if (v18)
            {
              v8 = v19 + 4;
              goto LABEL_10;
            }
          }
        }
      }
    }
LABEL_26:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v2 + 56))(*(_QWORD *)(v0 + 96), 1, 1, *(_QWORD *)(v0 + 72));
    goto LABEL_27;
  }
  v8 = 1;
LABEL_10:
  v10 = (v18 - 1) & v18;
  v9 = __clz(__rbit64(v18)) + (v8 << 6);
LABEL_5:
  *(_QWORD *)(v0 + 136) = v8;
  *(_QWORD *)(v0 + 144) = v10;
  v11 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v1 + 48) + *(_QWORD *)(v2 + 72) * v9;
  v14 = *(void (**)(uint64_t, unint64_t, uint64_t))(v2 + 16);
  *(_QWORD *)(v0 + 152) = v14;
  v14(v11, v13, v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v11, 0, 1, v12);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v11, 1, v12) != 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 32))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72));
    v15 = (_QWORD *)swift_task_alloc(dword_1010FCEA4);
    *(_QWORD *)(v0 + 160) = v15;
    *v15 = v0;
    v15[1] = sub_100474B4C;
    return sub_100476038(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 88), 0);
  }
LABEL_27:
  swift_release();
  v22 = *(_QWORD *)(v0 + 88);
  v24 = *(_QWORD *)(v0 + 56);
  v23 = *(_QWORD *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(_QWORD *, _QWORD *))(v0 + 8))(_swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
}

uint64_t sub_100474B4C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v6 = *(_QWORD *)(*v4 + 160);
  v7 = *v4;
  *(_QWORD *)(v7 + 168) = a1;
  *(_QWORD *)(v7 + 176) = a2;
  swift_task_dealloc(v6);
  if (v3)
  {
    swift_errorRelease(v3);
    *(_QWORD *)(v7 + 184) = *(_QWORD *)(v7 + 120);
    v8 = (_QWORD *)swift_task_alloc(dword_1010FCEA4);
    *(_QWORD *)(v7 + 192) = v8;
    *v8 = v7;
    v8[1] = sub_100474D38;
    return sub_100476038(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 88), 1);
  }
  else
  {
    v10 = *(_QWORD *)(v7 + 24);
    *(_BYTE *)(v7 + 249) = a3;
    return swift_task_switch(sub_100474C10, v10, 0);
  }
}

uint64_t sub_100474C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  if ((*(_BYTE *)(v0 + 249) & 1) != 0)
  {
    v6 = *(_QWORD *)(v0 + 120);
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 168);
    v1 = *(_QWORD *)(v0 + 176);
    v3 = *(_QWORD *)(v0 + 120);
    v4 = (_QWORD *)(*(_QWORD *)(v0 + 64) + *(int *)(*(_QWORD *)(v0 + 32) + 48));
    (*(void (**)(void))(v0 + 152))();
    *v4 = v2;
    v4[1] = v1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
    v6 = *(_QWORD *)(v0 + 120);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v6 = sub_1007C850C(0, *(_QWORD *)(v6 + 16) + 1, 1, *(_QWORD *)(v0 + 120));
    v8 = *(_QWORD *)(v6 + 16);
    v7 = *(_QWORD *)(v6 + 24);
    if (v8 >= v7 >> 1)
      v6 = sub_1007C850C(v7 > 1, v8 + 1, 1, v6);
    v9 = *(_QWORD *)(v0 + 64);
    v10 = *(_QWORD *)(v0 + 40);
    *(_QWORD *)(v6 + 16) = v8 + 1;
    sub_100005CF0(v9, v6+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v8, &qword_101109410);
  }
  *(_QWORD *)(v0 + 184) = v6;
  v11 = (_QWORD *)swift_task_alloc(dword_1010FCEA4);
  *(_QWORD *)(v0 + 192) = v11;
  *v11 = v0;
  v11[1] = sub_100474D38;
  return sub_100476038(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 88), 1);
}

uint64_t sub_100474D38(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v6 = *(_QWORD *)(*v4 + 192);
  v7 = *v4;
  *(_QWORD *)(v7 + 200) = a1;
  *(_QWORD *)(v7 + 208) = a2;
  swift_task_dealloc(v6);
  if (v3)
  {
    swift_errorRelease(v3);
    *(_QWORD *)(v7 + 216) = *(_QWORD *)(v7 + 184);
    v8 = (_QWORD *)swift_task_alloc(dword_1010FCED4);
    *(_QWORD *)(v7 + 224) = v8;
    *v8 = v7;
    v8[1] = sub_100474F20;
    return sub_100478384(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 88));
  }
  else
  {
    v10 = *(_QWORD *)(v7 + 24);
    *(_BYTE *)(v7 + 250) = a3;
    return swift_task_switch(sub_100474DF8, v10, 0);
  }
}

uint64_t sub_100474DF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  if ((*(_BYTE *)(v0 + 250) & 1) != 0)
  {
    v6 = *(_QWORD *)(v0 + 184);
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 200);
    v1 = *(_QWORD *)(v0 + 208);
    v3 = *(_QWORD *)(v0 + 184);
    v4 = (_QWORD *)(*(_QWORD *)(v0 + 56) + *(int *)(*(_QWORD *)(v0 + 32) + 48));
    (*(void (**)(void))(v0 + 152))();
    *v4 = v2;
    v4[1] = v1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
    v6 = *(_QWORD *)(v0 + 184);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v6 = sub_1007C850C(0, *(_QWORD *)(v6 + 16) + 1, 1, *(_QWORD *)(v0 + 184));
    v8 = *(_QWORD *)(v6 + 16);
    v7 = *(_QWORD *)(v6 + 24);
    if (v8 >= v7 >> 1)
      v6 = sub_1007C850C(v7 > 1, v8 + 1, 1, v6);
    v9 = *(_QWORD *)(v0 + 56);
    v10 = *(_QWORD *)(v0 + 40);
    *(_QWORD *)(v6 + 16) = v8 + 1;
    sub_100005CF0(v9, v6+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v8, &qword_101109410);
  }
  *(_QWORD *)(v0 + 216) = v6;
  v11 = (_QWORD *)swift_task_alloc(dword_1010FCED4);
  *(_QWORD *)(v0 + 224) = v11;
  *v11 = v0;
  v11[1] = sub_100474F20;
  return sub_100478384(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 88));
}

uint64_t sub_100474F20(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 224);
  *(_QWORD *)(v6 + 232) = a1;
  *(_QWORD *)(v6 + 240) = a2;
  swift_task_dealloc(v7);
  v8 = *(_QWORD *)(v6 + 24);
  if (v3)
  {
    swift_errorRelease(v3);
    v9 = sub_1004752B4;
  }
  else
  {
    *(_BYTE *)(v6 + 251) = a3;
    v9 = sub_100474FA8;
  }
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_100474FA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, unint64_t, uint64_t);
  _QWORD *v23;
  int64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if ((*(_BYTE *)(v0 + 251) & 1) != 0)
  {
    v6 = *(_QWORD *)(v0 + 128);
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 232);
    v1 = *(_QWORD *)(v0 + 240);
    v3 = *(_QWORD *)(v0 + 128);
    v4 = (_QWORD *)(*(_QWORD *)(v0 + 48) + *(int *)(*(_QWORD *)(v0 + 32) + 48));
    (*(void (**)(void))(v0 + 152))();
    *v4 = v2;
    v4[1] = v1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
    v6 = *(_QWORD *)(v0 + 128);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v6 = sub_1007C850C(0, *(_QWORD *)(v6 + 16) + 1, 1, *(_QWORD *)(v0 + 128));
    v8 = *(_QWORD *)(v6 + 16);
    v7 = *(_QWORD *)(v6 + 24);
    if (v8 >= v7 >> 1)
      v6 = sub_1007C850C(v7 > 1, v8 + 1, 1, v6);
    v10 = *(_QWORD *)(v0 + 40);
    v9 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v6 + 16) = v8 + 1;
    sub_100005CF0(v9, v6+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v8, &qword_101109410);
  }
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  v12 = *(_QWORD *)(v0 + 216);
  v13 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 120) = v12;
  *(_QWORD *)(v0 + 128) = v6;
  if (v14)
  {
    v15 = (v14 - 1) & v14;
    v16 = __clz(__rbit64(v14)) | (v13 << 6);
    v17 = *(_QWORD *)(v0 + 112);
    goto LABEL_10;
  }
  v24 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
  }
  else
  {
    v25 = (unint64_t)((1 << *(_BYTE *)(v0 + 248)) + 63) >> 6;
    v17 = *(_QWORD *)(v0 + 112);
    if (v24 >= v25)
      goto LABEL_26;
    v26 = v17 + 56;
    v27 = *(_QWORD *)(v17 + 56 + 8 * v24);
    ++v13;
    if (v27)
    {
LABEL_15:
      v15 = (v27 - 1) & v27;
      v16 = __clz(__rbit64(v27)) + (v13 << 6);
LABEL_10:
      *(_QWORD *)(v0 + 136) = v13;
      *(_QWORD *)(v0 + 144) = v15;
      v18 = *(_QWORD *)(v0 + 96);
      v19 = *(_QWORD *)(v0 + 72);
      v20 = *(_QWORD *)(v0 + 80);
      v21 = *(_QWORD *)(v17 + 48) + *(_QWORD *)(v20 + 72) * v16;
      v22 = *(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 16);
      *(_QWORD *)(v0 + 152) = v22;
      v22(v18, v21, v19);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v19);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) != 1)
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 32))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72));
        v23 = (_QWORD *)swift_task_alloc(dword_1010FCEA4);
        *(_QWORD *)(v0 + 160) = v23;
        *v23 = v0;
        v23[1] = sub_100474B4C;
        return sub_100476038(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 88), 0);
      }
      goto LABEL_27;
    }
    v13 = v24 + 1;
    if (v24 + 1 >= v25)
      goto LABEL_26;
    v27 = *(_QWORD *)(v26 + 8 * v13);
    if (v27)
      goto LABEL_15;
    v13 = v24 + 2;
    if (v24 + 2 >= v25)
      goto LABEL_26;
    v27 = *(_QWORD *)(v26 + 8 * v13);
    if (v27)
      goto LABEL_15;
    v28 = v24 + 3;
    if (v28 >= v25)
    {
LABEL_26:
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 56))(*(_QWORD *)(v0 + 96), 1, 1, *(_QWORD *)(v0 + 72));
LABEL_27:
      swift_release();
      v29 = *(_QWORD *)(v0 + 88);
      v31 = *(_QWORD *)(v0 + 56);
      v30 = *(_QWORD *)(v0 + 64);
      v32 = *(_QWORD *)(v0 + 48);
      swift_task_dealloc(*(_QWORD *)(v0 + 96));
      swift_task_dealloc(v29);
      swift_task_dealloc(v30);
      swift_task_dealloc(v31);
      swift_task_dealloc(v32);
      return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v12, v6);
    }
    v27 = *(_QWORD *)(v26 + 8 * v28);
    if (v27)
    {
      v13 = v28;
      goto LABEL_15;
    }
    while (1)
    {
      v13 = v28 + 1;
      if (__OFADD__(v28, 1))
        break;
      if (v13 >= v25)
        goto LABEL_26;
      v27 = *(_QWORD *)(v26 + 8 * v13);
      ++v28;
      if (v27)
        goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1004752B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, unint64_t, uint64_t);
  _QWORD *v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 128);
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 120) = v3;
  *(_QWORD *)(v0 + 128) = v1;
  if (v5)
  {
    v6 = (v5 - 1) & v5;
    v7 = __clz(__rbit64(v5)) | (v4 << 6);
    v8 = *(_QWORD *)(v0 + 112);
    goto LABEL_3;
  }
  v15 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v16 = (unint64_t)((1 << *(_BYTE *)(v0 + 248)) + 63) >> 6;
    v8 = *(_QWORD *)(v0 + 112);
    if (v15 >= v16)
      goto LABEL_19;
    v17 = v8 + 56;
    v18 = *(_QWORD *)(v8 + 56 + 8 * v15);
    ++v4;
    if (v18)
    {
LABEL_8:
      v6 = (v18 - 1) & v18;
      v7 = __clz(__rbit64(v18)) + (v4 << 6);
LABEL_3:
      *(_QWORD *)(v0 + 136) = v4;
      *(_QWORD *)(v0 + 144) = v6;
      v9 = *(_QWORD *)(v0 + 96);
      v10 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 80);
      v12 = *(_QWORD *)(v8 + 48) + *(_QWORD *)(v11 + 72) * v7;
      v13 = *(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16);
      *(_QWORD *)(v0 + 152) = v13;
      v13(v9, v12, v10);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 32))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72));
        v14 = (_QWORD *)swift_task_alloc(dword_1010FCEA4);
        *(_QWORD *)(v0 + 160) = v14;
        *v14 = v0;
        v14[1] = sub_100474B4C;
        return sub_100476038(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 88), 0);
      }
      goto LABEL_20;
    }
    v4 = v15 + 1;
    if (v15 + 1 >= v16)
      goto LABEL_19;
    v18 = *(_QWORD *)(v17 + 8 * v4);
    if (v18)
      goto LABEL_8;
    v4 = v15 + 2;
    if (v15 + 2 >= v16)
      goto LABEL_19;
    v18 = *(_QWORD *)(v17 + 8 * v4);
    if (v18)
      goto LABEL_8;
    v19 = v15 + 3;
    if (v19 >= v16)
    {
LABEL_19:
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 56))(*(_QWORD *)(v0 + 96), 1, 1, *(_QWORD *)(v0 + 72));
LABEL_20:
      swift_release();
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 56);
      v21 = *(_QWORD *)(v0 + 64);
      v23 = *(_QWORD *)(v0 + 48);
      swift_task_dealloc(*(_QWORD *)(v0 + 96));
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v1);
    }
    v18 = *(_QWORD *)(v17 + 8 * v19);
    if (v18)
    {
      v4 = v19;
      goto LABEL_8;
    }
    while (1)
    {
      v4 = v19 + 1;
      if (__OFADD__(v19, 1))
        break;
      if (v4 >= v16)
        goto LABEL_19;
      v18 = *(_QWORD *)(v17 + 8 * v4);
      ++v19;
      if (v18)
        goto LABEL_8;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1004754FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[14] = v0;
  v2 = type metadata accessor for UUID(0);
  v1[15] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[16] = v3;
  v1[17] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Table(0);
  v1[18] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[19] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[20] = swift_task_alloc(v6);
  v1[21] = swift_task_alloc(v6);
  v1[22] = swift_task_alloc(v6);
  return swift_task_switch(sub_1004755A0, v0, 0);
}

uint64_t sub_1004755A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(uint64_t, uint64_t);
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  void (*v17)(uint64_t, uint64_t);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v38)(_QWORD *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 112) + 112);
  if (!v1)
  {
    v24 = sub_10012C434();
    v25 = swift_allocError(&type metadata for DatabaseError, v24, 0, 0);
    *(_DWORD *)v26 = 2;
    *(_BYTE *)(v26 + 4) = 1;
    swift_willThrow(v25);
LABEL_8:
    v30 = *(_QWORD *)(v0 + 168);
    v31 = *(_QWORD *)(v0 + 160);
    v32 = *(_QWORD *)(v0 + 136);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(_QWORD *)(v1 + 16);
  swift_retain();
  v3 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10047A418, v1, v2, (char *)&type metadata for () + 8, v3);
  v4 = *(_QWORD *)(v0 + 96);
  if (!v4)
  {
    v27 = sub_10012C434();
    v28 = swift_allocError(&type metadata for DatabaseError, v27, 0, 0);
    *(_DWORD *)v29 = 2;
    *(_BYTE *)(v29 + 4) = 1;
    swift_willThrow(v28);
    swift_release();
    goto LABEL_8;
  }
  v43 = (_QWORD *)(v0 + 56);
  v47 = *(_QWORD *)(v4 + 16);
  swift_retain();
  swift_release();
  if (qword_1010E9A38 != -1)
    swift_once(&qword_1010E9A38, sub_1001F52E8);
  v5 = *(_QWORD *)(v0 + 168);
  v48 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 144);
  v41 = *(_QWORD *)(v0 + 152);
  v42 = *(_QWORD *)(v0 + 160);
  v44 = *(_QWORD *)(v0 + 136);
  v45 = *(_QWORD *)(v0 + 128);
  v46 = *(_QWORD *)(v0 + 120);
  v7 = sub_10001A9A8(&qword_1010EF3B8);
  v39 = sub_10001A9E8(v7, (uint64_t)qword_1011B6AC0);
  *(_QWORD *)(v0 + 40) = v7;
  v8 = sub_1000193A4(&qword_1010EF3C0, &qword_1010EF3B8, (const char *)&protocol conformance descriptor for Expression<A>);
  *(_QWORD *)(v0 + 48) = v8;
  v9 = v8;
  v10 = sub_100018F08((_QWORD *)(v0 + 16));
  v38 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  v38(v10, v39, v7);
  SchemaType.select(_:_:)(v0 + 16, _swiftEmptyArrayStorage, v6, &protocol witness table for Table);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v40 = sub_10001A9A8(&qword_1010EF3C8);
  v11 = swift_allocObject(v40, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v11 + 56) = v7;
  *(_QWORD *)(v11 + 64) = v9;
  v12 = sub_100018F08((_QWORD *)(v11 + 32));
  v38(v12, v39, v7);
  QueryType.group(_:)(v11, v6, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v13 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
  v13(v5, v6);
  *(_QWORD *)(v0 + 80) = v7;
  *(_QWORD *)(v0 + 88) = v9;
  v14 = sub_100018F08(v43);
  v38(v14, v39, v7);
  SchemaType.select(_:_:)(v43, _swiftEmptyArrayStorage, v6, &protocol witness table for Table);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v43);
  v15 = swift_allocObject(v40, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v15 + 56) = v7;
  *(_QWORD *)(v15 + 64) = v9;
  v16 = sub_100018F08((_QWORD *)(v15 + 32));
  v38(v16, v39, v7);
  v17 = v13;
  QueryType.group(_:)(v15, v6, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v13(v5, v6);
  *(_QWORD *)(v0 + 104) = &_swiftEmptySetSingleton;
  v18 = (_QWORD *)swift_task_alloc(48);
  v18[2] = v47;
  v18[3] = v48;
  v18[4] = v0 + 104;
  v18[5] = v42;
  v19 = UUID.init()(v18);
  v20 = UUID.uuidString.getter(v19);
  v22 = v21;
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
  Connection.savepoint(_:block:)(v20, v22, sub_10047AC2C, v18);
  v23 = *(_QWORD *)(v0 + 176);
  v34 = *(_QWORD *)(v0 + 160);
  v33 = *(_QWORD *)(v0 + 168);
  v35 = *(_QWORD *)(v0 + 144);
  v49 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc(v18);
  v17(v34, v35);
  v17(v23, v35);
  v36 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(v23);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v36);
}

uint64_t sub_100475ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  void (*v26)(_QWORD *, uint64_t, uint64_t);
  uint64_t (*v27)(_QWORD, _QWORD, _QWORD);
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  void (*v60)(_QWORD *, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  void (*v69)(char *, char *, uint64_t);
  void (**v70)(char *, uint64_t);
  uint64_t v71;
  uint64_t (*v72)(_QWORD, _QWORD, _QWORD);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  _QWORD v76[3];
  uint64_t v77;
  void *v78;
  uint64_t v79;

  v65 = a4;
  v79 = a3;
  v64 = type metadata accessor for UUID(0);
  v75 = *(_QWORD *)(v64 - 8);
  v6 = __chkstk_darwin(v64);
  v68 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v74 = (char *)&v60 - v9;
  v10 = __chkstk_darwin(v8);
  v73 = (uint64_t)&v60 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v60 - v12;
  v14 = type metadata accessor for Row(0);
  v66 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v63 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v60 - v17;
  v19 = sub_10001A9A8(&qword_1010EF3A8);
  v20 = __chkstk_darwin(v19);
  v67 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v60 - v22;
  v24 = type metadata accessor for Table(0);
  v77 = v24;
  v78 = &protocol witness table for Table;
  v25 = sub_100018F08(v76);
  v26 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
  v26(v25, a2, v24);
  v27 = v72;
  Connection.prepare(_:)(v76);
  result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v76);
  if (!v27)
  {
    v60 = v26;
    v61 = v24;
    v62 = a1;
    dispatch thunk of _AnySequenceBox._makeIterator()(result);
    swift_release();
    v29 = swift_retain();
    dispatch thunk of _AnyIteratorBoxBase.next()(v29);
    swift_release();
    v30 = v66;
    v72 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v66 + 48);
    v31 = v72(v23, 1, v14);
    v71 = v14;
    if (v31 != 1)
    {
      v69 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
      v70 = (void (**)(char *, uint64_t))(v30 + 8);
      v51 = v64;
      v52 = v75;
      do
      {
        v69(v18, v23, v14);
        if (qword_1010E9A38 != -1)
          swift_once(&qword_1010E9A38, sub_1001F52E8);
        v53 = sub_10001A9A8(&qword_1010EF3B8);
        v54 = sub_10001A9E8(v53, (uint64_t)qword_1011B6AC0);
        Row.get<A>(_:)(v54, v51, &protocol witness table for UUID);
        v55 = v74;
        (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v74, v13, v51);
        v56 = v73;
        sub_100A09F38(v73, v55);
        v57 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
        v58 = v56;
        v14 = v71;
        v57(v58, v51);
        v57((uint64_t)v13, v51);
        (*v70)(v18, v14);
        v59 = swift_retain();
        dispatch thunk of _AnyIteratorBoxBase.next()(v59);
        swift_release();
      }
      while (v72(v23, 1, v14) != 1);
    }
    swift_release();
    v32 = v61;
    v77 = v61;
    v78 = &protocol witness table for Table;
    v33 = sub_100018F08(v76);
    v60(v33, v65, v32);
    Connection.prepare(_:)(v76);
    v34 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v76);
    v35 = v66;
    dispatch thunk of _AnySequenceBox._makeIterator()(v34);
    swift_release();
    v36 = swift_retain();
    v37 = v67;
    dispatch thunk of _AnyIteratorBoxBase.next()(v36);
    swift_release();
    if (v72(v37, 1, v14) != 1)
    {
      v38 = v35;
      v39 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
      v70 = (void (**)(char *, uint64_t))(v38 + 8);
      v41 = v63;
      v40 = v64;
      do
      {
        v39(v41, v37, v14);
        if (qword_1010E9A38 != -1)
          swift_once(&qword_1010E9A38, sub_1001F52E8);
        v42 = sub_10001A9A8(&qword_1010EF3B8);
        v43 = sub_10001A9E8(v42, (uint64_t)qword_1011B6AC0);
        Row.get<A>(_:)(v43, v40, &protocol witness table for UUID);
        v44 = v74;
        v45 = v75;
        (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v74, v68, v40);
        v46 = v73;
        sub_100A09F38(v73, v44);
        v47 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
        v48 = v68;
        v49 = v46;
        v14 = v71;
        v47(v49, v40);
        v47((uint64_t)v48, v40);
        (*v70)(v41, v14);
        v50 = swift_retain();
        v37 = v67;
        dispatch thunk of _AnyIteratorBoxBase.next()(v50);
        swift_release();
      }
      while (v72(v37, 1, v14) != 1);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100476038(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *(_QWORD *)(v4 + 56) = a2;
  *(_QWORD *)(v4 + 64) = v3;
  *(_BYTE *)(v4 + 34) = a3;
  *(_QWORD *)(v4 + 48) = a1;
  v5 = type metadata accessor for UUID(0);
  *(_QWORD *)(v4 + 72) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 80) = v6;
  *(_QWORD *)(v4 + 88) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EF358);
  *(_QWORD *)(v4 + 96) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 104) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 112) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 120) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 128) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 136) = swift_task_alloc(v9);
  v10 = type metadata accessor for Table(0);
  *(_QWORD *)(v4 + 144) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v4 + 152) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 160) = swift_task_alloc(v12);
  *(_QWORD *)(v4 + 168) = swift_task_alloc(v12);
  return swift_task_switch(sub_10047612C, v3, 0);
}

uint64_t sub_10047612C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 112);
  if (!v1)
  {
    v38 = sub_10012C434();
    v39 = swift_allocError(&type metadata for DatabaseError, v38, 0, 0);
    *(_DWORD *)v40 = 2;
    *(_BYTE *)(v40 + 4) = 1;
    swift_willThrow(v39);
LABEL_12:
    v44 = *(_QWORD *)(v0 + 160);
    v46 = *(_QWORD *)(v0 + 128);
    v45 = *(_QWORD *)(v0 + 136);
    v48 = *(_QWORD *)(v0 + 112);
    v47 = *(_QWORD *)(v0 + 120);
    v49 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(_QWORD *)(v1 + 16);
  swift_retain();
  v3 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10047A418, v1, v2, (char *)&type metadata for () + 8, v3);
  v4 = *(_QWORD *)(v0 + 40);
  if (!v4)
  {
    v41 = sub_10012C434();
    v42 = swift_allocError(&type metadata for DatabaseError, v41, 0, 0);
    *(_DWORD *)v43 = 2;
    *(_BYTE *)(v43 + 4) = 1;
    swift_willThrow(v42);
    swift_release();
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 152);
  v64 = *(_QWORD *)(v4 + 16);
  swift_retain();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_nearOwnerKeys, v7);
  if (qword_1010E9A30 != -1)
    swift_once(&qword_1010E9A30, sub_1001F524C);
  v61 = (_QWORD *)(v0 + 16);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 48);
  v10 = sub_10001A9A8(&qword_1010EF3B8);
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B6AA8);
  == infix<A>(_:_:)(v11, v9, v8, &protocol witness table for UUID, &protocol witness table for String);
  if (qword_1010E9A38 != -1)
    swift_once(&qword_1010E9A38, sub_1001F52E8);
  v12 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 104);
  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 96);
  v16 = *(_QWORD *)(v0 + 72);
  v17 = *(_QWORD *)(v0 + 56);
  v18 = sub_10001A9E8(v10, (uint64_t)qword_1011B6AC0);
  == infix<A>(_:_:)(v18, v17, v16, &protocol witness table for UUID, &protocol witness table for String);
  && infix(_:_:)(v12, v14);
  v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v19(v14, v15);
  v19(v12, v15);
  if (qword_1010E9A48 != -1)
    swift_once(&qword_1010E9A48, sub_1001F5408);
  v20 = *(_QWORD *)(v0 + 160);
  v21 = *(_QWORD *)(v0 + 136);
  v57 = *(_QWORD *)(v0 + 144);
  v23 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 128);
  v24 = *(_QWORD *)(v0 + 88);
  v25 = *(_QWORD *)(v0 + 96);
  v58 = *(_QWORD *)(v0 + 80);
  v59 = *(_QWORD *)(v0 + 72);
  v26 = *(_BYTE *)(v0 + 34);
  v27 = sub_10001A9A8(&qword_1010EF3E8);
  v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B6AF0);
  *(_BYTE *)(v0 + 33) = v26;
  v29 = sub_10012C49C();
  == infix<A>(_:_:)(v28, v0 + 33, &type metadata for UInt8, v29, &protocol witness table for Int64);
  && infix(_:_:)(v22, v23);
  v19(v23, v25);
  v19(v22, v25);
  QueryType.filter(_:)(v21, v57, &protocol witness table for Table);
  v19(v21, v25);
  *v61 = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = 1;
  v30 = (_QWORD *)swift_task_alloc(48);
  v30[2] = v64;
  v30[3] = v20;
  v30[4] = v61;
  v31 = UUID.init()(v30);
  v32 = UUID.uuidString.getter(v31);
  v34 = v33;
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v24, v59);
  Connection.savepoint(_:block:)(v32, v34, sub_10047ACE8, v30);
  v35 = *(_QWORD *)(v0 + 160);
  v36 = *(_QWORD *)(v0 + 168);
  v37 = *(_QWORD *)(v0 + 144);
  v51 = *(_QWORD *)(v0 + 128);
  v50 = *(_QWORD *)(v0 + 136);
  v60 = *(_QWORD *)(v0 + 120);
  v62 = *(_QWORD *)(v0 + 112);
  v63 = *(_QWORD *)(v0 + 88);
  v52 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 152) + 8);
  v52(v36, v37);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc(v30);
  v52(v35, v37);
  v53 = *(_QWORD *)(v0 + 16);
  v54 = *(_QWORD *)(v0 + 24);
  v55 = *(unsigned __int8 *)(v0 + 32);
  swift_task_dealloc(v36);
  swift_task_dealloc(v35);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v60);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v53, v54, v55);
}

uint64_t sub_100476650(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v5 + 144) = a4;
  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  return swift_task_switch(sub_100476670, v4, 0);
}

void sub_100476670()
{
  _QWORD *v0;
  unint64_t v1;
  _QWORD *v2;
  char *v3;

  v1 = v0[4];
  v0[6] = v1 + 96;
  if (v1 >= 0xFFFFFFFFFFFFFFA0)
  {
    __break(1u);
    __break(1u);
  }
  else
  {
    v0[7] = _swiftEmptyDictionarySingleton;
    v0[8] = v1;
    v0[9] = 96;
    v3 = (char *)&dword_101115CD0 + dword_101115CD0;
    v2 = (_QWORD *)swift_task_alloc(unk_101115CD4);
    v0[10] = v2;
    *v2 = v0;
    v2[1] = sub_10047670C;
    ((void (*)(_QWORD, _QWORD, unint64_t))v3)(v0[2], v0[3], v1);
  }
}

uint64_t sub_10047670C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 80);
  v4[11] = a1;
  v4[12] = a2;
  v4[13] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v6 = v4[5];
    swift_bridgeObjectRelease();
    v7 = sub_100476AFC;
    v8 = v6;
  }
  else
  {
    v8 = v4[5];
    v7 = sub_10047678C;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_10047678C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  int v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;

  v1 = *(_QWORD *)(v0 + 96);
  if (v1 >> 60 != 15)
  {
    v2 = *(_QWORD *)(v0 + 88);
    v3 = *(unsigned __int8 *)(v0 + 144);
    sub_10001BBBC(v2, *(_QWORD *)(v0 + 96));
    v4 = Data.subscript.getter(5);
    sub_10001EF3C(v2, v1);
    if (v3 == v4)
    {
      v5 = (_QWORD *)swift_task_alloc(dword_1010FCECC);
      *(_QWORD *)(v0 + 112) = v5;
      *v5 = v0;
      v5[1] = sub_100476908;
      return sub_100477D48(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 64));
    }
    sub_10001EF3C(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  }
  result = *(_QWORD *)(v0 + 56);
  if (!*(_QWORD *)(v0 + 72))
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(result);
  v7 = *(_QWORD *)(v0 + 64);
  v8 = v7 + 1;
  if (v7 == -1)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  *(_QWORD *)(v0 + 56) = result;
  *(_QWORD *)(v0 + 64) = v8;
  v9 = *(_QWORD *)(v0 + 48);
  v10 = v9 - v8;
  if (v9 < v8)
  {
    if ((uint64_t)(v8 - v9) >= 0)
    {
      v10 = v9 - v8;
LABEL_12:
      *(_QWORD *)(v0 + 72) = v10;
      v12 = (char *)&dword_101115CD0 + dword_101115CD0;
      v11 = (_QWORD *)swift_task_alloc(unk_101115CD4);
      *(_QWORD *)(v0 + 80) = v11;
      *v11 = v0;
      v11[1] = sub_10047670C;
      return ((uint64_t (*)(_QWORD, _QWORD, unint64_t))v12)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v8);
    }
    goto LABEL_14;
  }
  if ((uint64_t)(v9 - v8) >= 0)
    goto LABEL_12;
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_100476908(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 112);
  v4[15] = a1;
  v4[16] = a2;
  v4[17] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v6 = v4[5];
    swift_bridgeObjectRelease();
    v7 = sub_100476B08;
    v8 = v6;
  }
  else
  {
    v8 = v4[5];
    v7 = sub_100476988;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_100476988()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::UInt64 v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 128);
  if (v1 >> 60 == 15)
  {
    result = sub_10001EF3C(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
    v3 = *(_QWORD *)(v0 + 56);
    if (*(_QWORD *)(v0 + 72))
      goto LABEL_3;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  }
  v8 = *(_QWORD *)(v0 + 120);
  v10 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 56);
  v11 = *(_QWORD *)(v0 + 64);
  sub_10001BBBC(v8, *(_QWORD *)(v0 + 128));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
  sub_10010CFD4(v8, v1, v11, isUniquelyReferenced_nonNull_native);
  v3 = v12;
  swift_bridgeObjectRelease();
  sub_10001EF3C(v8, v1);
  result = sub_10001EF3C(v10, v9);
  if (!*(_QWORD *)(v0 + 72))
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
LABEL_3:
  v4 = *(_QWORD *)(v0 + 64);
  v5 = v4 + 1;
  if (v4 == -1)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  *(_QWORD *)(v0 + 56) = v3;
  *(_QWORD *)(v0 + 64) = v5;
  v6 = *(_QWORD *)(v0 + 48);
  v7 = v6 - v5;
  if (v6 < v5)
  {
    if ((uint64_t)(v5 - v6) >= 0)
    {
      v7 = v6 - v5;
LABEL_10:
      *(_QWORD *)(v0 + 72) = v7;
      v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_101115CD0 + dword_101115CD0);
      v14 = (_QWORD *)swift_task_alloc(unk_101115CD4);
      *(_QWORD *)(v0 + 80) = v14;
      *v14 = v0;
      v14[1] = sub_10047670C;
      return v15(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v5);
    }
    goto LABEL_12;
  }
  if ((uint64_t)(v6 - v5) >= 0)
    goto LABEL_10;
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_100476AFC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100476B08()
{
  uint64_t v0;

  sub_10001EF3C(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100476B3C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v5 + 144) = a4;
  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  return swift_task_switch(sub_100476B5C, v4, 0);
}

void sub_100476B5C()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;

  v1 = v0[4];
  if (!v1)
    goto LABEL_8;
  if (!is_mul_ok(v1, 0x60uLL))
    goto LABEL_12;
  v2 = 96 * v1;
  v1 = 96 * v1 - 1;
  v3 = v2 - 96;
  if (v3 <= 1)
    v4 = 1;
  else
    v4 = v3;
  if (v1 < v4)
  {
    __break(1u);
LABEL_8:
    v4 = 0;
  }
  v0[8] = v4;
  v0[6] = v1;
  v0[7] = _swiftEmptyDictionarySingleton;
  v5 = v1 - v4;
  if (v5 >= 0)
  {
    v0[9] = v5;
    v7 = (char *)&dword_101115CD0 + dword_101115CD0;
    v6 = (_QWORD *)swift_task_alloc(unk_101115CD4);
    v0[10] = v6;
    *v6 = v0;
    v6[1] = sub_100476C2C;
    ((void (*)(_QWORD, _QWORD, unint64_t))v7)(v0[2], v0[3], v4);
    return;
  }
  __break(1u);
LABEL_12:
  __break(1u);
}

uint64_t sub_100476C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 80);
  v4[11] = a1;
  v4[12] = a2;
  v4[13] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v6 = v4[5];
    swift_bridgeObjectRelease();
    v7 = sub_100476AFC;
    v8 = v6;
  }
  else
  {
    v8 = v4[5];
    v7 = sub_100476CAC;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_100476CAC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  int v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;

  v1 = *(_QWORD *)(v0 + 96);
  if (v1 >> 60 != 15)
  {
    v2 = *(_QWORD *)(v0 + 88);
    v3 = *(unsigned __int8 *)(v0 + 144);
    sub_10001BBBC(v2, *(_QWORD *)(v0 + 96));
    v4 = Data.subscript.getter(5);
    sub_10001EF3C(v2, v1);
    if (v3 == v4)
    {
      v5 = (_QWORD *)swift_task_alloc(dword_1010FCECC);
      *(_QWORD *)(v0 + 112) = v5;
      *v5 = v0;
      v5[1] = sub_100476E28;
      return sub_100477D48(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 64));
    }
    sub_10001EF3C(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  }
  result = *(_QWORD *)(v0 + 56);
  if (!*(_QWORD *)(v0 + 72))
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(result);
  v7 = *(_QWORD *)(v0 + 64);
  v8 = v7 + 1;
  if (v7 == -1)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  *(_QWORD *)(v0 + 56) = result;
  *(_QWORD *)(v0 + 64) = v8;
  v9 = *(_QWORD *)(v0 + 48);
  v10 = v9 - v8;
  if (v9 < v8)
  {
    if ((uint64_t)(v8 - v9) >= 0)
    {
      v10 = v9 - v8;
LABEL_12:
      *(_QWORD *)(v0 + 72) = v10;
      v12 = (char *)&dword_101115CD0 + dword_101115CD0;
      v11 = (_QWORD *)swift_task_alloc(unk_101115CD4);
      *(_QWORD *)(v0 + 80) = v11;
      *v11 = v0;
      v11[1] = sub_100476C2C;
      return ((uint64_t (*)(_QWORD, _QWORD, unint64_t))v12)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v8);
    }
    goto LABEL_14;
  }
  if ((uint64_t)(v9 - v8) >= 0)
    goto LABEL_12;
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_100476E28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 112);
  v4[15] = a1;
  v4[16] = a2;
  v4[17] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v6 = v4[5];
    swift_bridgeObjectRelease();
    v7 = sub_100476B08;
    v8 = v6;
  }
  else
  {
    v8 = v4[5];
    v7 = sub_100476EA8;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_100476EA8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::UInt64 v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 128);
  if (v1 >> 60 == 15)
  {
    result = sub_10001EF3C(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
    v3 = *(_QWORD *)(v0 + 56);
    if (*(_QWORD *)(v0 + 72))
      goto LABEL_3;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  }
  v8 = *(_QWORD *)(v0 + 120);
  v10 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 56);
  v11 = *(_QWORD *)(v0 + 64);
  sub_10001BBBC(v8, *(_QWORD *)(v0 + 128));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
  sub_10010CFD4(v8, v1, v11, isUniquelyReferenced_nonNull_native);
  v3 = v12;
  swift_bridgeObjectRelease();
  sub_10001EF3C(v8, v1);
  result = sub_10001EF3C(v10, v9);
  if (!*(_QWORD *)(v0 + 72))
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
LABEL_3:
  v4 = *(_QWORD *)(v0 + 64);
  v5 = v4 + 1;
  if (v4 == -1)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  *(_QWORD *)(v0 + 56) = v3;
  *(_QWORD *)(v0 + 64) = v5;
  v6 = *(_QWORD *)(v0 + 48);
  v7 = v6 - v5;
  if (v6 < v5)
  {
    if ((uint64_t)(v5 - v6) >= 0)
    {
      v7 = v6 - v5;
LABEL_10:
      *(_QWORD *)(v0 + 72) = v7;
      v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_101115CD0 + dword_101115CD0);
      v14 = (_QWORD *)swift_task_alloc(unk_101115CD4);
      *(_QWORD *)(v0 + 80) = v14;
      *v14 = v0;
      v14[1] = sub_100476C2C;
      return v15(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v5);
    }
    goto LABEL_12;
  }
  if ((uint64_t)(v6 - v5) >= 0)
    goto LABEL_10;
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_10047701C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[15] = a5;
  v6[16] = v5;
  v6[13] = a3;
  v6[14] = a4;
  v6[11] = a1;
  v6[12] = a2;
  v7 = sub_10001A9A8(&qword_1010EF358);
  v6[17] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[18] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[19] = swift_task_alloc(v9);
  v6[20] = swift_task_alloc(v9);
  v6[21] = swift_task_alloc(v9);
  v6[22] = swift_task_alloc(v9);
  v6[23] = swift_task_alloc(v9);
  v10 = type metadata accessor for Table(0);
  v6[24] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[25] = v11;
  v6[26] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004770E4, v5, 0);
}

uint64_t sub_1004770E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 128) + 112))
  {
    v2 = *(_QWORD *)(v0 + 112);
    v1 = *(_QWORD *)(v0 + 120);
    swift_retain();
    v52 = sub_100ABA6B0(v2, v1);
    if (qword_1010E9A30 != -1)
      swift_once(&qword_1010E9A30, sub_1001F524C);
    v3 = *(_QWORD *)(v0 + 88);
    v4 = sub_10001A9A8(&qword_1010EF3B8);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6AA8);
    v6 = type metadata accessor for UUID(0);
    == infix<A>(_:_:)(v5, v3, v6, &protocol witness table for UUID, &protocol witness table for String);
    if (qword_1010E9A38 != -1)
      swift_once(&qword_1010E9A38, sub_1001F52E8);
    v55 = (_QWORD *)(v0 + 16);
    v7 = *(_QWORD *)(v0 + 160);
    v8 = *(_QWORD *)(v0 + 144);
    v9 = *(_QWORD *)(v0 + 152);
    v10 = *(_QWORD *)(v0 + 136);
    v11 = *(_QWORD *)(v0 + 96);
    v12 = sub_10001A9E8(v4, (uint64_t)qword_1011B6AC0);
    == infix<A>(_:_:)(v12, v11, v6, &protocol witness table for UUID, &protocol witness table for String);
    && infix(_:_:)(v7, v9);
    v13 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v13(v9, v10);
    v13(v7, v10);
    if (qword_1010E9A48 != -1)
      swift_once(&qword_1010E9A48, sub_1001F5408);
    v14 = *(_QWORD *)(v0 + 168);
    v15 = *(_QWORD *)(v0 + 160);
    v16 = *(_QWORD *)(v0 + 136);
    v17 = sub_10001A9A8(&qword_1010EF3E8);
    v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B6AF0);
    *(_BYTE *)(v0 + 216) = v52;
    v19 = sub_10012C49C();
    == infix<A>(_:_:)(v18, v0 + 216, &type metadata for UInt8, v19, &protocol witness table for Int64);
    && infix(_:_:)(v14, v15);
    v13(v15, v16);
    v13(v14, v16);
    if (qword_1010E9A40 != -1)
      swift_once(&qword_1010E9A40, sub_1001F537C);
    v50 = *(_QWORD *)(v0 + 208);
    v51 = *(_QWORD *)(v0 + 200);
    v20 = *(_QWORD *)(v0 + 184);
    v49 = *(_QWORD *)(v0 + 192);
    v21 = *(_QWORD *)(v0 + 168);
    v22 = *(_QWORD *)(v0 + 176);
    v23 = *(_QWORD *)(v0 + 136);
    v24 = *(_QWORD *)(v0 + 112);
    v25 = *(_QWORD *)(v0 + 120);
    v26 = sub_10001A9A8(&qword_1010EF430);
    v27 = sub_10001A9E8(v26, (uint64_t)qword_1011B6AD8);
    dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)(v0 + 72), v24, *(_QWORD *)(v25 + 56));
    *(_QWORD *)(v0 + 80) = *(_QWORD *)(v0 + 72);
    v28 = sub_10012C5BC();
    == infix<A>(_:_:)(v27, v0 + 80, &type metadata for UInt64, v28, &protocol witness table for Int64);
    && infix(_:_:)(v22, v21);
    v13(v21, v23);
    v13(v22, v23);
    QueryType.filter(_:)(v20, v49, &protocol witness table for Table);
    v13(v20, v23);
    *(_QWORD *)(v0 + 40) = v49;
    *(_QWORD *)(v0 + 48) = &protocol witness table for Table;
    v29 = sub_100018F08(v55);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v51 + 16))(v29, v50, v49);
    sub_10047820C((uint64_t)v55, (uint64_t)sub_10047A418, &qword_1010FD030, (uint64_t)sub_10047A430);
    v31 = *(_QWORD *)(v0 + 200);
    v30 = *(_QWORD *)(v0 + 208);
    v32 = *(_QWORD *)(v0 + 192);
    v42 = *(_QWORD *)(v0 + 176);
    v41 = *(_QWORD *)(v0 + 184);
    v43 = *(_QWORD *)(v0 + 168);
    v53 = *(_QWORD *)(v0 + 160);
    v54 = *(_QWORD *)(v0 + 152);
    v44 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
    dispatch thunk of _AnySequenceBox._makeIterator()(v44);
    v45 = swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()(v45);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    v47 = *(_QWORD *)(v0 + 56);
    v46 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(v30);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v47, v46);
  }
  else
  {
    v33 = sub_10012C434();
    v34 = swift_allocError(&type metadata for DatabaseError, v33, 0, 0);
    *(_DWORD *)v35 = 2;
    *(_BYTE *)(v35 + 4) = 1;
    swift_willThrow(v34);
    v37 = *(_QWORD *)(v0 + 176);
    v36 = *(_QWORD *)(v0 + 184);
    v39 = *(_QWORD *)(v0 + 160);
    v38 = *(_QWORD *)(v0 + 168);
    v40 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

_QWORD *sub_1004775F8(uint64_t a1)
{
  return sub_10047820C(a1, (uint64_t)sub_10047A418, &qword_1010FD030, (uint64_t)sub_10047A430);
}

uint64_t sub_100477624(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(v4 + 80) = a2;
  *(_QWORD *)(v4 + 88) = v3;
  *(_BYTE *)(v4 + 185) = a3;
  *(_QWORD *)(v4 + 72) = a1;
  v5 = sub_10001A9A8(&qword_1010EF358);
  *(_QWORD *)(v4 + 96) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 104) = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 112) = swift_task_alloc(v7);
  *(_QWORD *)(v4 + 120) = swift_task_alloc(v7);
  *(_QWORD *)(v4 + 128) = swift_task_alloc(v7);
  *(_QWORD *)(v4 + 136) = swift_task_alloc(v7);
  v8 = type metadata accessor for Table(0);
  *(_QWORD *)(v4 + 144) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 152) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 160) = swift_task_alloc(v10);
  *(_QWORD *)(v4 + 168) = swift_task_alloc(v10);
  *(_QWORD *)(v4 + 176) = swift_task_alloc(v10);
  return swift_task_switch(sub_1004776FC, v3, 0);
}

uint64_t sub_1004776FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 112);
  if (!v1)
  {
    v35 = sub_10012C434();
    v36 = swift_allocError(&type metadata for DatabaseError, v35, 0, 0);
    *(_DWORD *)v37 = 2;
    *(_BYTE *)(v37 + 4) = 1;
    swift_willThrow(v36);
LABEL_14:
    v41 = *(_QWORD *)(v0 + 168);
    v42 = *(_QWORD *)(v0 + 160);
    v44 = *(_QWORD *)(v0 + 128);
    v43 = *(_QWORD *)(v0 + 136);
    v46 = *(_QWORD *)(v0 + 112);
    v45 = *(_QWORD *)(v0 + 120);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(_QWORD *)(v1 + 16);
  swift_retain();
  v3 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10047A418, v1, v2, (char *)&type metadata for () + 8, v3);
  if (!*(_QWORD *)(v0 + 56))
  {
    v38 = sub_10012C434();
    v39 = swift_allocError(&type metadata for DatabaseError, v38, 0, 0);
    *(_DWORD *)v40 = 2;
    *(_BYTE *)(v40 + 4) = 1;
    swift_willThrow(v39);
    swift_release();
    goto LABEL_14;
  }
  swift_retain();
  swift_release();
  if (qword_1010E9A30 != -1)
    swift_once(&qword_1010E9A30, sub_1001F524C);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = sub_10001A9A8(&qword_1010EF3B8);
  v6 = sub_10001A9E8(v5, (uint64_t)qword_1011B6AA8);
  v7 = type metadata accessor for UUID(0);
  == infix<A>(_:_:)(v6, v4, v7, &protocol witness table for UUID, &protocol witness table for String);
  if (qword_1010E9A38 != -1)
    swift_once(&qword_1010E9A38, sub_1001F52E8);
  v57 = (_QWORD *)(v0 + 16);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 112);
  v11 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 80);
  v13 = sub_10001A9E8(v5, (uint64_t)qword_1011B6AC0);
  == infix<A>(_:_:)(v13, v12, v7, &protocol witness table for UUID, &protocol witness table for String);
  && infix(_:_:)(v8, v10);
  v14 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v14(v10, v11);
  v14(v8, v11);
  if (qword_1010E9A48 != -1)
    swift_once(&qword_1010E9A48, sub_1001F5408);
  v16 = *(_QWORD *)(v0 + 136);
  v15 = *(_QWORD *)(v0 + 144);
  v18 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 128);
  v19 = *(_QWORD *)(v0 + 96);
  v20 = *(_BYTE *)(v0 + 185);
  v21 = sub_10001A9A8(&qword_1010EF3E8);
  v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B6AF0);
  *(_BYTE *)(v0 + 184) = v20;
  v23 = sub_10012C49C();
  == infix<A>(_:_:)(v22, v0 + 184, &type metadata for UInt8, v23, &protocol witness table for Int64);
  && infix(_:_:)(v17, v18);
  v14(v18, v19);
  v14(v17, v19);
  QueryType.filter(_:)(v16, v15, &protocol witness table for Table);
  v14(v16, v19);
  v24 = sub_10001A9A8(&qword_1010EF3C8);
  v25 = swift_allocObject(v24, 72, 7);
  *(_OWORD *)(v25 + 16) = xmmword_100E22B00;
  if (qword_1010E9A40 != -1)
    swift_once(&qword_1010E9A40, sub_1001F537C);
  v26 = *(_QWORD *)(v0 + 168);
  v27 = *(_QWORD *)(v0 + 176);
  v28 = *(_QWORD *)(v0 + 152);
  v29 = *(_QWORD *)(v0 + 160);
  v30 = *(_QWORD *)(v0 + 144);
  v31 = sub_10001A9A8(&qword_1010EF430);
  sub_10001A9E8(v31, (uint64_t)qword_1011B6AD8);
  v32 = sub_1000193A4(&qword_1010F2E18, &qword_1010EF430, (const char *)&protocol conformance descriptor for Expression<A>);
  ExpressionType.desc.getter(v31, v32);
  QueryType.order(_:)(v25, v30, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v33 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  v33(v29, v30);
  QueryType.limit(_:)(1, 0, v30, &protocol witness table for Table);
  v33(v26, v30);
  *(_QWORD *)(v0 + 40) = v30;
  *(_QWORD *)(v0 + 48) = &protocol witness table for Table;
  v34 = sub_100018F08(v57);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v28 + 16))(v34, v27, v30);
  Connection.prepare(_:)(v57);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v57);
  v48 = (_QWORD *)dispatch thunk of _AnySequenceBox._map<A>(_:)(sub_10047A648, 0, &type metadata for Advertisement);
  swift_release();
  if (v48[2])
  {
    v56 = v48[5];
    v58 = v48[4];
    sub_10001BBBC(v58, v56);
  }
  else
  {
    v56 = 0xF000000000000000;
    v58 = 0;
  }
  v50 = *(_QWORD *)(v0 + 168);
  v49 = *(_QWORD *)(v0 + 176);
  v51 = *(_QWORD *)(v0 + 160);
  v53 = *(_QWORD *)(v0 + 136);
  v52 = *(_QWORD *)(v0 + 144);
  v54 = *(_QWORD *)(v0 + 120);
  v55 = *(_QWORD *)(v0 + 128);
  v59 = *(_QWORD *)(v0 + 112);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v33(v49, v52);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  swift_task_dealloc(v54);
  swift_task_dealloc(v59);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v58, v56);
}

uint64_t sub_100477D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  v5 = sub_10001A9A8(&qword_1010EF358);
  v4[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[15] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[16] = swift_task_alloc(v7);
  v4[17] = swift_task_alloc(v7);
  v4[18] = swift_task_alloc(v7);
  v4[19] = swift_task_alloc(v7);
  v8 = type metadata accessor for Table(0);
  v4[20] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[21] = v9;
  v4[22] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100477E00, v3, 0);
}

uint64_t sub_100477E00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 104) + 112))
  {
    v1 = qword_1010E9A30;
    swift_retain();
    if (v1 != -1)
      swift_once(&qword_1010E9A30, sub_1001F524C);
    v2 = *(_QWORD *)(v0 + 80);
    v3 = sub_10001A9A8(&qword_1010EF3B8);
    v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B6AA8);
    v5 = type metadata accessor for UUID(0);
    == infix<A>(_:_:)(v4, v2, v5, &protocol witness table for UUID, &protocol witness table for String);
    if (qword_1010E9A38 != -1)
      swift_once(&qword_1010E9A38, sub_1001F52E8);
    v44 = (_QWORD *)(v0 + 16);
    v6 = *(_QWORD *)(v0 + 136);
    v7 = *(_QWORD *)(v0 + 120);
    v8 = *(_QWORD *)(v0 + 128);
    v9 = *(_QWORD *)(v0 + 112);
    v10 = *(_QWORD *)(v0 + 88);
    v11 = sub_10001A9E8(v3, (uint64_t)qword_1011B6AC0);
    == infix<A>(_:_:)(v11, v10, v5, &protocol witness table for UUID, &protocol witness table for String);
    && infix(_:_:)(v6, v8);
    v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v12(v8, v9);
    v12(v6, v9);
    if (qword_1010E9A40 != -1)
      swift_once(&qword_1010E9A40, sub_1001F537C);
    v13 = *(_QWORD *)(v0 + 176);
    v15 = *(_QWORD *)(v0 + 152);
    v14 = *(_QWORD *)(v0 + 160);
    v17 = *(_QWORD *)(v0 + 136);
    v16 = *(_QWORD *)(v0 + 144);
    v18 = *(_QWORD *)(v0 + 112);
    v42 = *(_QWORD *)(v0 + 168);
    v19 = *(_QWORD *)(v0 + 96);
    v20 = sub_10001A9A8(&qword_1010EF430);
    v21 = sub_10001A9E8(v20, (uint64_t)qword_1011B6AD8);
    *(_QWORD *)(v0 + 72) = v19;
    v22 = sub_10012C5BC();
    == infix<A>(_:_:)(v21, v0 + 72, &type metadata for UInt64, v22, &protocol witness table for Int64);
    && infix(_:_:)(v16, v17);
    v12(v17, v18);
    v12(v16, v18);
    QueryType.filter(_:)(v15, v14, &protocol witness table for Table);
    v12(v15, v18);
    *(_QWORD *)(v0 + 40) = v14;
    *(_QWORD *)(v0 + 48) = &protocol witness table for Table;
    v23 = sub_100018F08(v44);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v42 + 16))(v23, v13, v14);
    sub_10047820C((uint64_t)v44, (uint64_t)sub_10047A418, &qword_1010FD048, (uint64_t)sub_10047A44C);
    v24 = *(_QWORD *)(v0 + 168);
    v25 = *(_QWORD *)(v0 + 176);
    v26 = *(_QWORD *)(v0 + 160);
    v35 = *(_QWORD *)(v0 + 144);
    v34 = *(_QWORD *)(v0 + 152);
    v36 = *(_QWORD *)(v0 + 136);
    v43 = *(_QWORD *)(v0 + 128);
    v37 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v44);
    dispatch thunk of _AnySequenceBox._makeIterator()(v37);
    v38 = swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()(v38);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v26);
    v40 = *(_QWORD *)(v0 + 56);
    v39 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(v25);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v43);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v40, v39);
  }
  else
  {
    v27 = sub_10012C434();
    v28 = swift_allocError(&type metadata for DatabaseError, v27, 0, 0);
    *(_DWORD *)v29 = 2;
    *(_BYTE *)(v29 + 4) = 1;
    swift_willThrow(v28);
    v31 = *(_QWORD *)(v0 + 144);
    v30 = *(_QWORD *)(v0 + 152);
    v33 = *(_QWORD *)(v0 + 128);
    v32 = *(_QWORD *)(v0 + 136);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

_QWORD *sub_10047820C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)(v4 + 112);
  if (v6)
  {
    v11 = *(_QWORD *)(v6 + 16);
    swift_retain();
    v12 = sub_10001A9A8(&qword_1010EF360);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(a2, v6, v11, &type metadata for () + 1, v12);
    if (v22)
    {
      swift_retain();
      swift_release();
      v13 = Connection.prepare(_:)(a1);
      swift_release();
      result = (_QWORD *)swift_release();
      if (!v5)
      {
        v15 = sub_10001A9A8(a3);
        result = (_QWORD *)swift_allocObject(v15, 40, 7);
        result[2] = v13;
        result[3] = a4;
        result[4] = 0;
      }
    }
    else
    {
      v19 = sub_10012C434();
      v20 = swift_allocError(&type metadata for DatabaseError, v19, 0, 0);
      *(_DWORD *)v21 = 2;
      *(_BYTE *)(v21 + 4) = 1;
      swift_willThrow(v20);
      return (_QWORD *)swift_release();
    }
  }
  else
  {
    v16 = sub_10012C434();
    v17 = swift_allocError(&type metadata for DatabaseError, v16, 0, 0);
    *(_DWORD *)v18 = 2;
    *(_BYTE *)(v18 + 4) = 1;
    return (_QWORD *)swift_willThrow(v17);
  }
  return result;
}

uint64_t sub_100478384(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EF358);
  v3[12] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[13] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[14] = swift_task_alloc(v8);
  v3[15] = swift_task_alloc(v8);
  v3[16] = swift_task_alloc(v8);
  v9 = type metadata accessor for Table(0);
  v3[17] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[18] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[19] = swift_task_alloc(v11);
  v3[20] = swift_task_alloc(v11);
  return swift_task_switch(sub_100478468, v2, 0);
}

uint64_t sub_100478468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 112);
  if (!v1)
  {
    v29 = sub_10012C434();
    v30 = swift_allocError(&type metadata for DatabaseError, v29, 0, 0);
    *(_DWORD *)v31 = 2;
    *(_BYTE *)(v31 + 4) = 1;
    swift_willThrow(v30);
LABEL_10:
    v35 = *(_QWORD *)(v0 + 152);
    v37 = *(_QWORD *)(v0 + 120);
    v36 = *(_QWORD *)(v0 + 128);
    v38 = *(_QWORD *)(v0 + 112);
    v39 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(_QWORD *)(v1 + 16);
  swift_retain();
  v3 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10047A418, v1, v2, (char *)&type metadata for () + 8, v3);
  v4 = *(_QWORD *)(v0 + 40);
  if (!v4)
  {
    v32 = sub_10012C434();
    v33 = swift_allocError(&type metadata for DatabaseError, v32, 0, 0);
    *(_DWORD *)v34 = 2;
    *(_BYTE *)(v34 + 4) = 1;
    swift_willThrow(v33);
    swift_release();
    goto LABEL_10;
  }
  v52 = (_QWORD *)(v0 + 16);
  v5 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 144);
  v55 = *(_QWORD *)(v4 + 16);
  swift_retain();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_connectionKeys, v7);
  if (qword_1010E9A30 != -1)
    swift_once(&qword_1010E9A30, sub_1001F524C);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 48);
  v10 = sub_10001A9A8(&qword_1010EF3B8);
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B6AA8);
  == infix<A>(_:_:)(v11, v9, v8, &protocol witness table for UUID, &protocol witness table for String);
  if (qword_1010E9A38 != -1)
    swift_once(&qword_1010E9A38, sub_1001F52E8);
  v12 = *(_QWORD *)(v0 + 128);
  v48 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 112);
  v14 = *(_QWORD *)(v0 + 120);
  v15 = *(_QWORD *)(v0 + 96);
  v46 = *(_QWORD *)(v0 + 104);
  v47 = *(_QWORD *)(v0 + 152);
  v16 = *(_QWORD *)(v0 + 88);
  v17 = *(_QWORD *)(v0 + 72);
  v49 = v17;
  v50 = *(_QWORD *)(v0 + 80);
  v18 = *(_QWORD *)(v0 + 56);
  v19 = sub_10001A9E8(v10, (uint64_t)qword_1011B6AC0);
  == infix<A>(_:_:)(v19, v18, v17, &protocol witness table for UUID, &protocol witness table for String);
  && infix(_:_:)(v14, v13);
  v20 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
  v20(v13, v15);
  v20(v14, v15);
  QueryType.filter(_:)(v12, v48, &protocol witness table for Table);
  v20(v12, v15);
  *v52 = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = 1;
  v21 = (_QWORD *)swift_task_alloc(48);
  v21[2] = v55;
  v21[3] = v47;
  v21[4] = v52;
  v22 = UUID.init()(v21);
  v23 = UUID.uuidString.getter(v22);
  v25 = v24;
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v16, v49);
  Connection.savepoint(_:block:)(v23, v25, sub_10047AC10, v21);
  v26 = *(_QWORD *)(v0 + 152);
  v27 = *(_QWORD *)(v0 + 160);
  v28 = *(_QWORD *)(v0 + 136);
  v40 = *(_QWORD *)(v0 + 128);
  v51 = *(_QWORD *)(v0 + 120);
  v53 = *(_QWORD *)(v0 + 112);
  v54 = *(_QWORD *)(v0 + 88);
  v41 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 144) + 8);
  v41(v27, v28);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc(v21);
  v41(v26, v28);
  v42 = *(_QWORD *)(v0 + 16);
  v43 = *(_QWORD *)(v0 + 24);
  v44 = *(unsigned __int8 *)(v0 + 32);
  swift_task_dealloc(v27);
  swift_task_dealloc(v26);
  swift_task_dealloc(v40);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v42, v43, v44);
}

uint64_t sub_1004788D4(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t);
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;

  v34 = a2;
  v27 = a3;
  v32 = a1;
  v37 = sub_10001A9A8(&qword_1010FD038);
  v3 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010FD040);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v31 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - v10;
  if (qword_1010E9A40 != -1)
    swift_once(&qword_1010E9A40, sub_1001F537C);
  v12 = sub_10001A9A8(&qword_1010EF430);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B6AD8);
  v14 = sub_1000193A4(&qword_1010F2E18, &qword_1010EF430, (const char *)&protocol conformance descriptor for Expression<A>);
  v15 = sub_10012C5BC();
  v29 = v14;
  v30 = v13;
  ExpressionType<>.min.getter(v12, v14, v15, &protocol witness table for Int64);
  v28 = type metadata accessor for Table(0);
  SchemaType.select<A>(_:)(v5);
  v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v16(v5, v37);
  v17 = v33;
  Connection.scalar<A>(_:)(&v35, v11, &type metadata for UInt64, v15);
  v18 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  result = v18(v11, v6);
  if (!v17)
  {
    v26 = v35;
    LODWORD(v33) = v36;
    v20 = v12;
    v21 = v6;
    ExpressionType<>.max.getter(v20, v29, v15, &protocol witness table for Int64);
    v22 = v31;
    SchemaType.select<A>(_:)(v5);
    v16(v5, v37);
    Connection.scalar<A>(_:)(&v35, v22, &type metadata for UInt64, v15);
    result = v18(v22, v21);
    if (((v33 | v36) & 1) == 0)
    {
      v23 = v35;
      if (v35 < v26)
      {
        __break(1u);
      }
      else
      {
        v24 = v27;
        *v27 = v26;
        v24[1] = v23;
        *((_BYTE *)v24 + 16) = 0;
      }
    }
  }
  return result;
}

uint64_t sub_100478B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v5 = sub_10001A9A8(&qword_1010EF358);
  v4[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[14] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[15] = swift_task_alloc(v7);
  v4[16] = swift_task_alloc(v7);
  v4[17] = swift_task_alloc(v7);
  v8 = type metadata accessor for Table(0);
  v4[18] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[19] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[20] = swift_task_alloc(v10);
  v4[21] = swift_task_alloc(v10);
  v4[22] = swift_task_alloc(v10);
  return swift_task_switch(sub_100478C5C, v3, 0);
}

uint64_t sub_100478C5C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t, uint64_t);
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void);
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;

  v1 = *(_QWORD *)(v0[12] + 112);
  if (!v1)
  {
    v23 = sub_10012C434();
    v24 = swift_allocError(&type metadata for DatabaseError, v23, 0, 0);
    *(_DWORD *)v25 = 2;
    *(_BYTE *)(v25 + 4) = 1;
    swift_willThrow(v24);
LABEL_10:
    v30 = v0[21];
    v31 = v0[20];
    v33 = v0[16];
    v32 = v0[17];
    v34 = v0[15];
    swift_task_dealloc(v0[22]);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    v35 = (uint64_t (*)(void))v0[1];
    return v35();
  }
  v2 = *(_QWORD *)(v1 + 16);
  swift_retain();
  v3 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10047A418, v1, v2, (char *)&type metadata for () + 8, v3);
  v4 = v0[7];
  if (!v4)
  {
    v26 = sub_10012C434();
    v27 = swift_allocError(&type metadata for DatabaseError, v26, 0, 0);
    *(_DWORD *)v28 = 2;
    *(_BYTE *)(v28 + 4) = 1;
    swift_willThrow(v27);
    swift_release(v1);
    goto LABEL_10;
  }
  v5 = v0[22];
  v7 = v0[18];
  v6 = v0[19];
  v62 = v0 + 2;
  v64 = *(_QWORD *)(v4 + 16);
  swift_retain();
  swift_release(v4);
  v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v59(v5, v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_beaconAttributes, v7);
  if (qword_1010E9A30 != -1)
    swift_once(&qword_1010E9A30, sub_1001F524C);
  v51 = v1;
  v8 = v0[11];
  v53 = sub_10001A9A8(&qword_1010EF3B8);
  v9 = sub_10001A9E8(v53, (uint64_t)qword_1011B6AA8);
  v10 = type metadata accessor for UUID(0);
  == infix<A>(_:_:)(v9, v8, v10, &protocol witness table for UUID, &protocol witness table for String);
  if (qword_1010E9A38 != -1)
    swift_once(&qword_1010E9A38, sub_1001F52E8);
  v11 = v0[20];
  v12 = v0[18];
  v55 = v0[21];
  v57 = v0[19];
  v13 = v0[16];
  v14 = v0[17];
  v15 = v0[14];
  v16 = v0[15];
  v17 = v0[13];
  v18 = v0[10];
  v19 = sub_10001A9E8(v53, (uint64_t)qword_1011B6AC0);
  == infix<A>(_:_:)(v19, v18, v10, &protocol witness table for UUID, &protocol witness table for String);
  && infix(_:_:)(v13, v16);
  v20 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v20(v16, v17);
  v20(v13, v17);
  QueryType.filter(_:)(v14, v12, &protocol witness table for Table);
  v20(v14, v17);
  QueryType.limit(_:)(1, 0, v12, &protocol witness table for Table);
  v21 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
  v21(v11, v12);
  v0[5] = v12;
  v0[6] = &protocol witness table for Table;
  v22 = sub_100018F08(v62);
  v59((uint64_t)v22, v55, v12);
  v29 = Connection.prepare(_:)(v62);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v62);
  v37 = (_QWORD *)dispatch thunk of _AnySequenceBox._map<A>(_:)(sub_10047A564, 0, &type metadata for KeyDropBeaconAttributes);
  swift_release(v29);
  if (v37[2])
  {
    v38 = v37[5];
    v63 = v37[4];
    v39 = v37[8];
    v58 = v37[7];
    v60 = v37[6];
    v40 = v37[10];
    v54 = v37[9];
    v49 = v37[12];
    v50 = v37[11];
    swift_bridgeObjectRetain(v49);
    v61 = v38;
    swift_bridgeObjectRetain(v38);
    v56 = v39;
    swift_bridgeObjectRetain(v39);
    v52 = v40;
    swift_bridgeObjectRetain(v40);
    swift_release(v64);
    swift_release(v51);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release(v64);
    swift_release(v51);
    swift_bridgeObjectRelease();
    v61 = 0;
    v63 = 0;
    v58 = 0;
    v60 = 0;
    v54 = 0;
    v56 = 0;
    v52 = 0;
    v49 = 0;
    v50 = 0;
  }
  v42 = v0[21];
  v41 = v0[22];
  v43 = v0[20];
  v44 = v0[17];
  v45 = v0[18];
  v47 = v0[15];
  v46 = v0[16];
  v48 = (_QWORD *)v0[9];
  v21(v42, v45);
  v21(v41, v45);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  *v48 = v63;
  v48[1] = v61;
  v48[2] = v60;
  v48[3] = v58;
  v48[4] = v56;
  v48[5] = v54;
  v48[6] = v52;
  v48[7] = v50;
  v48[8] = v49;
  v35 = (uint64_t (*)(void))v0[1];
  return v35();
}

uint64_t sub_1004791E4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[9] = a1;
  v2[10] = v1;
  v3 = sub_10001A9A8(&qword_1010EF358);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v2[13] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Table(0);
  v2[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[15] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[16] = swift_task_alloc(v7);
  v2[17] = swift_task_alloc(v7);
  return swift_task_switch(sub_100479280, v1, 0);
}

uint64_t sub_100479280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  _QWORD *v36;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 112);
  if (!v1)
  {
    v16 = sub_10012C434();
    v17 = swift_allocError(&type metadata for DatabaseError, v16, 0, 0);
    *(_DWORD *)v18 = 2;
    *(_BYTE *)(v18 + 4) = 1;
    swift_willThrow(v17);
LABEL_8:
    v28 = *(_QWORD *)(v0 + 128);
    v29 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(_QWORD *)(v1 + 16);
  swift_retain();
  v3 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10047A418, v1, v2, (char *)&type metadata for () + 8, v3);
  if (!*(_QWORD *)(v0 + 56))
  {
    v19 = sub_10012C434();
    v20 = swift_allocError(&type metadata for DatabaseError, v19, 0, 0);
    *(_DWORD *)v21 = 2;
    *(_BYTE *)(v21 + 4) = 1;
    swift_willThrow(v20);
    swift_release();
    goto LABEL_8;
  }
  v36 = (_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 120);
  swift_retain();
  swift_release();
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v35(v4, v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_beaconAttributes, v6);
  if (qword_1010E9A30 != -1)
    swift_once(&qword_1010E9A30, sub_1001F524C);
  v7 = *(_QWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 96);
  v34 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = sub_10001A9A8(&qword_1010EF3B8);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B6AA8);
  v14 = type metadata accessor for UUID(0);
  == infix<A>(_:_:)(v13, v11, v14, &protocol witness table for UUID, &protocol witness table for String);
  QueryType.filter(_:)(v9, v8, &protocol witness table for Table);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v34);
  *(_QWORD *)(v0 + 40) = v8;
  *(_QWORD *)(v0 + 48) = &protocol witness table for Table;
  v15 = sub_100018F08(v36);
  v35((uint64_t)v15, v7, v8);
  Connection.prepare(_:)(v36);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v36);
  v22 = sub_10001A9A8(&qword_1010ECA58);
  v23 = dispatch thunk of _AnySequenceBox._map<A>(_:)(sub_10047A744, 0, v22);
  v25 = *(_QWORD *)(v0 + 128);
  v24 = *(_QWORD *)(v0 + 136);
  v26 = *(_QWORD *)(v0 + 112);
  v27 = *(_QWORD *)(v0 + 120);
  v30 = v23;
  v31 = *(_QWORD *)(v0 + 104);
  swift_release();
  swift_release();
  swift_release();
  v32 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v32(v25, v26);
  v32(v24, v26);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v30);
}

uint64_t sub_100479660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004796C4, v3, 0);
}

uint64_t sub_1004796C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t (*v24)(void);
  int8x16_t v25;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 112);
  if (!v1)
  {
    v16 = sub_10012C434();
    v17 = swift_allocError(&type metadata for DatabaseError, v16, 0, 0);
    *(_DWORD *)v18 = 2;
    *(_BYTE *)(v18 + 4) = 1;
    swift_willThrow(v17);
LABEL_6:
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
  v2 = *(_QWORD *)(v1 + 16);
  swift_retain();
  v3 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10047A418, v1, v2, (char *)&type metadata for () + 8, v3);
  v4 = *(_QWORD *)(v0 + 16);
  if (!v4)
  {
    v19 = sub_10012C434();
    v20 = swift_allocError(&type metadata for DatabaseError, v19, 0, 0);
    *(_DWORD *)v21 = 2;
    *(_BYTE *)(v21 + 4) = 1;
    swift_willThrow(v20);
    swift_release();
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 24);
  v9 = *(_QWORD *)(v4 + 24);
  swift_retain();
  v25 = *(int8x16_t *)(v0 + 32);
  swift_release();
  v10 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_beaconAttributes;
  v11 = swift_task_alloc(64);
  *(_QWORD *)(v11 + 16) = v10;
  *(int8x16_t *)(v11 + 24) = vextq_s8(v25, v25, 8uLL);
  *(_QWORD *)(v11 + 40) = v8;
  *(_QWORD *)(v11 + 48) = v9;
  v12 = UUID.init()(v11);
  v13 = UUID.uuidString.getter(v12);
  v15 = v14;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  Connection.savepoint(_:block:)(v13, v15, sub_10047A9AC, v11);
  v23 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc(v11);
  swift_task_dealloc(v23);
  v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_1004798EC(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, _QWORD, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  _BYTE v42[16];
  _BYTE v43[16];

  v40 = a5;
  v35 = a1;
  v8 = type metadata accessor for OnConflict(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for Insert(0);
  v37 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v34 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = v9;
  v13 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
  v33 = v11;
  v38 = v8;
  v13(v11, enum case for OnConflict.replace(_:), v8);
  v14 = sub_10001A9A8(&qword_1010EF388);
  v15 = *(_QWORD *)(type metadata accessor for Setter(0) - 8);
  v16 = swift_allocObject(v14, ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))- *(_QWORD *)(v15 + 72)+ 8 * *(_QWORD *)(v15 + 72), *(unsigned __int8 *)(v15 + 80) | 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22340;
  if (qword_1010E9A30 != -1)
    swift_once(&qword_1010E9A30, sub_1001F524C);
  v17 = sub_10001A9A8(&qword_1010EF3B8);
  v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B6AA8);
  v19 = type metadata accessor for UUID(0);
  <- infix<A>(_:_:)(v18, a2, v19, &protocol witness table for UUID);
  if (qword_1010E9A38 != -1)
    swift_once(&qword_1010E9A38, sub_1001F52E8);
  v20 = sub_10001A9E8(v17, (uint64_t)qword_1011B6AC0);
  <- infix<A>(_:_:)(v20, a3, v19, &protocol witness table for UUID);
  if (qword_1010E9A68 != -1)
    swift_once(&qword_1010E9A68, sub_1001F5664);
  v21 = sub_10001A9A8(&qword_1010F2E50);
  v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B6B50);
  v41 = *a4;
  <- infix<A>(_:_:)(v22, &v41, &type metadata for String, &protocol witness table for String);
  if (qword_1010E9A70 != -1)
    swift_once(&qword_1010E9A70, sub_1001F56EC);
  v23 = sub_10001A9A8(&qword_1010EF4E0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B6B68);
  *(_QWORD *)&v41 = *((_QWORD *)a4 + 2);
  <- infix<A>(_:_:)(v24, &v41, &type metadata for Int, &protocol witness table for Int);
  if (qword_1010E9A78 != -1)
    swift_once(&qword_1010E9A78, sub_1001F5788);
  v25 = sub_10001A9A8(&qword_1010F2E40);
  v26 = sub_10001A9E8(v25, (uint64_t)qword_1011B6B80);
  sub_100005CF0((uint64_t)a4 + 24, (uint64_t)v43, &qword_1010F6350);
  sub_100005CF0((uint64_t)v43, (uint64_t)&v41, &qword_1010F6350);
  <- infix<A>(_:_:)(v26, &v41, &type metadata for String, &protocol witness table for String);
  if (qword_1010E9A80 != -1)
    swift_once(&qword_1010E9A80, sub_1001F5814);
  v27 = sub_10001A9E8(v21, (uint64_t)qword_1011B6B98);
  v41 = *(__int128 *)((char *)a4 + 40);
  <- infix<A>(_:_:)(v27, &v41, &type metadata for String, &protocol witness table for String);
  if (qword_1010E9A88 != -1)
    swift_once(&qword_1010E9A88, sub_1001F58B0);
  v28 = sub_10001A9E8(v25, (uint64_t)qword_1011B6BB0);
  sub_100005CF0((uint64_t)a4 + 56, (uint64_t)v42, &qword_1010F6350);
  sub_100005CF0((uint64_t)v42, (uint64_t)&v41, &qword_1010F6350);
  <- infix<A>(_:_:)(v28, &v41, &type metadata for String, &protocol witness table for String);
  v29 = type metadata accessor for Table(0);
  v30 = v33;
  v31 = v34;
  QueryType.insert(or:_:)(v33, v16, v29, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v30, v38);
  Connection.run(_:)(v31);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v31, v39);
}

uint64_t sub_100479DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100479E30, v2, 0);
}

uint64_t sub_100479E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t (*v23)(void);
  int8x16_t v24;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 112);
  if (!v1)
  {
    v15 = sub_10012C434();
    v16 = swift_allocError(&type metadata for DatabaseError, v15, 0, 0);
    *(_DWORD *)v17 = 2;
    *(_BYTE *)(v17 + 4) = 1;
    swift_willThrow(v16);
LABEL_6:
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
  v2 = *(_QWORD *)(v1 + 16);
  swift_retain();
  v3 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10047A418, v1, v2, &type metadata for () + 1, v3);
  v4 = *(_QWORD *)(v0 + 16);
  if (!v4)
  {
    v18 = sub_10012C434();
    v19 = swift_allocError(&type metadata for DatabaseError, v18, 0, 0);
    *(_DWORD *)v20 = 2;
    *(_BYTE *)(v20 + 4) = 1;
    swift_willThrow(v19);
    swift_release();
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v4 + 24);
  swift_retain();
  v24 = *(int8x16_t *)(v0 + 24);
  swift_release();
  v9 = v1 + OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_beaconAttributes;
  v10 = swift_task_alloc(48);
  *(_QWORD *)(v10 + 16) = v9;
  *(int8x16_t *)(v10 + 24) = vextq_s8(v24, v24, 8uLL);
  *(_QWORD *)(v10 + 40) = v8;
  v11 = UUID.init()(v10);
  v12 = UUID.uuidString.getter(v11);
  v14 = v13;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  Connection.savepoint(_:block:)(v12, v14, sub_10047A978, v10);
  v22 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc(v10);
  swift_task_dealloc(v22);
  v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t sub_10047A054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = a4;
  v33 = a3;
  v31 = a2;
  v35 = a1;
  v4 = type metadata accessor for UUID(0);
  v36 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EF358);
  v32 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v30 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v30 - v14;
  v16 = type metadata accessor for Table(0);
  v34 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9A30 != -1)
    swift_once(&qword_1010E9A30, sub_1001F524C);
  v19 = sub_10001A9A8(&qword_1010EF3B8);
  v20 = sub_10001A9E8(v19, (uint64_t)qword_1011B6AA8);
  == infix<A>(_:_:)(v20, v31, v4, &protocol witness table for UUID, &protocol witness table for String);
  if (qword_1010E9A38 != -1)
    swift_once(&qword_1010E9A38, sub_1001F52E8);
  v21 = sub_10001A9E8(v19, (uint64_t)qword_1011B6AC0);
  == infix<A>(_:_:)(v21, v33, v4, &protocol witness table for UUID, &protocol witness table for String);
  && infix(_:_:)(v13, v10);
  v22 = *(void (**)(char *, uint64_t))(v32 + 8);
  v22(v10, v7);
  v22(v13, v7);
  QueryType.filter(_:)(v15, v16, &protocol witness table for Table);
  v23 = ((uint64_t (*)(char *, uint64_t))v22)(v15, v7);
  v24 = __chkstk_darwin(v23);
  *(&v30 - 2) = v37;
  *(&v30 - 1) = (uint64_t)v18;
  v25 = UUID.init()(v24);
  v26 = UUID.uuidString.getter(v25);
  v28 = v27;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v4);
  Connection.savepoint(_:block:)(v26, v28, sub_10047A994, &v30 - 4);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v18, v16);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10047A348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for Delete(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Table(0);
  QueryType.delete()(v4, &protocol witness table for Table);
  Connection.run(_:)(v3);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t type metadata accessor for ItemSharingKeyStore()
{
  return objc_opt_self(_TtC12searchpartyd19ItemSharingKeyStore);
}

uint64_t sub_10047A418@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1001F5230(v1, a1);
}

double sub_10047A430@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_10047A468(a1, &qword_1010E9A50, (uint64_t)qword_1011B6B08, (uint64_t)sub_1001F5498, a2);
}

double sub_10047A44C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_10047A468(a1, &qword_1010E9A60, (uint64_t)qword_1011B6B38, (uint64_t)sub_1001F55C8, a2);
}

double sub_10047A468@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  __int128 v17;

  v10 = type metadata accessor for Row(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  if (*a2 != -1)
    swift_once(a2, a4);
  v14 = sub_10001A9A8(&qword_1010EF408);
  v15 = sub_10001A9E8(v14, a3);
  Row.subscript.getter(&v17, v15, &type metadata for Data, &protocol witness table for Data);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  result = *(double *)&v17;
  *a5 = v17;
  return result;
}

void sub_10047A564(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[4];
  uint64_t v15;

  v5 = type metadata accessor for Row(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v7, a1);
  sub_10047A9CC((uint64_t)v7, (uint64_t)v14);
  if (v2)
  {
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    swift_allocError(v9, &protocol self-conformance witness table for Error, 0, 0);
    *v10 = v2;
  }
  else
  {
    v11 = v14[3];
    *(_OWORD *)(a2 + 32) = v14[2];
    *(_OWORD *)(a2 + 48) = v11;
    *(_QWORD *)(a2 + 64) = v15;
    v12 = v14[1];
    *(_OWORD *)a2 = v14[0];
    *(_OWORD *)(a2 + 16) = v12;
  }
}

double sub_10047A648@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  __int128 v11;

  v4 = type metadata accessor for Row(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  if (qword_1010E9A58 != -1)
    swift_once(&qword_1010E9A58, sub_1001F552C);
  v8 = sub_10001A9A8(&qword_1010EF408);
  v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B6B20);
  Row.subscript.getter(&v11, v9, &type metadata for Data, &protocol witness table for Data);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  result = *(double *)&v11;
  *a2 = v11;
  return result;
}

_QWORD *sub_10047A744@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[4];
  uint64_t v20;

  v5 = type metadata accessor for Row(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v7, a1);
  sub_10047A9CC((uint64_t)v7, (uint64_t)v19);
  if (v2)
  {
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    result = (_QWORD *)swift_allocError(v9, &protocol self-conformance witness table for Error, 0, 0);
    *v11 = v2;
  }
  else
  {
    v12 = (char *)a2 + *(int *)(sub_10001A9A8(&qword_1010ECA58) + 48);
    if (qword_1010E9A38 != -1)
      swift_once(&qword_1010E9A38, sub_1001F52E8);
    v13 = sub_10001A9A8(&qword_1010EF3B8);
    v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B6AC0);
    v15 = type metadata accessor for UUID(0);
    result = Row.subscript.getter(a2, v14, v15, &protocol witness table for UUID);
    v16 = v19[3];
    *((_OWORD *)v12 + 2) = v19[2];
    *((_OWORD *)v12 + 3) = v16;
    *((_QWORD *)v12 + 8) = v20;
    v17 = v19[1];
    *(_OWORD *)v12 = v19[0];
    *((_OWORD *)v12 + 1) = v17;
  }
  return result;
}

uint64_t sub_10047A8A8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = v0;
  swift_defaultActor_initialize(v0);
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v5 = 0x7365547265646E75;
  v6 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v7, &v5, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease(v6);
  v2 = v7;
  v3 = type metadata accessor for ItemSharingKeyDatabase(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(_QWORD *)(v1 + 112) = sub_1001F5948(v2);
  return v1;
}

uint64_t sub_10047A978()
{
  uint64_t *v0;

  return sub_10047A054(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10047A994()
{
  return sub_10047A348();
}

uint64_t sub_10047A9AC()
{
  uint64_t v0;

  return sub_1004798EC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(__int128 **)(v0 + 40), *(_QWORD *)(v0 + 48));
}

__n128 sub_10047A9CC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __n128 result;
  unint64_t v18;
  __n128 v19;

  if (qword_1010E9A68 != -1)
    swift_once(&qword_1010E9A68, sub_1001F5664);
  v4 = sub_10001A9A8(&qword_1010F2E50);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6B50);
  Row.subscript.getter(&v19, v5, &type metadata for String, &protocol witness table for String);
  v6 = v19.n128_u64[1];
  v18 = v19.n128_u64[0];
  if (qword_1010E9A70 != -1)
    swift_once(&qword_1010E9A70, sub_1001F56EC);
  v7 = sub_10001A9A8(&qword_1010EF4E0);
  v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B6B68);
  Row.subscript.getter(&v19, v8, &type metadata for Int, &protocol witness table for Int);
  v9 = v19.n128_u64[0];
  if (qword_1010E9A78 != -1)
    swift_once(&qword_1010E9A78, sub_1001F5788);
  v10 = sub_10001A9A8(&qword_1010F2E40);
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B6B80);
  Row.subscript.getter(&v19, v11, &type metadata for String, &protocol witness table for String);
  v12 = v19;
  if (qword_1010E9A80 != -1)
    swift_once(&qword_1010E9A80, sub_1001F5814);
  v13 = sub_10001A9E8(v4, (uint64_t)qword_1011B6B98);
  Row.subscript.getter(&v19, v13, &type metadata for String, &protocol witness table for String);
  v14 = v19;
  if (qword_1010E9A88 != -1)
    swift_once(&qword_1010E9A88, sub_1001F58B0);
  v15 = sub_10001A9E8(v10, (uint64_t)qword_1011B6BB0);
  Row.subscript.getter(&v19, v15, &type metadata for String, &protocol witness table for String);
  v16 = type metadata accessor for Row(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a1, v16);
  result = v19;
  *(_QWORD *)a2 = v18;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v9;
  *(__n128 *)(a2 + 24) = v12;
  *(__n128 *)(a2 + 40) = v14;
  *(__n128 *)(a2 + 56) = result;
  return result;
}

uint64_t sub_10047AC10()
{
  uint64_t v0;

  return sub_1004788D4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unint64_t **)(v0 + 32));
}

uint64_t sub_10047AC2C()
{
  uint64_t *v0;

  return sub_100475ABC(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10047AC48()
{
  uint64_t *v0;

  return sub_1004745CC(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10047AC64()
{
  uint64_t v0;

  return sub_100473B14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_10047AC88()
{
  uint64_t v0;

  return sub_100473488(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(_QWORD **)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_10047ACB0()
{
  uint64_t v0;

  return sub_100472D2C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(unsigned __int8 *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

uint64_t sub_10047ACE8()
{
  return sub_10047AC10();
}

uint64_t sub_10047ACFC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  _OWORD v37[3];
  _OWORD v38[2];
  __int128 v39;
  _OWORD v40[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001A9A8(&qword_101111D80);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v27 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(v4 + 63) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_26;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v28)
      goto LABEL_35;
    v15 = *(_QWORD *)(v27 + 8 * v14);
    ++v9;
    if (!v15)
    {
      v9 = v14 + 1;
      if (v14 + 1 >= v28)
        goto LABEL_35;
      v15 = *(_QWORD *)(v27 + 8 * v9);
      if (!v15)
      {
        v9 = v14 + 2;
        if (v14 + 2 >= v28)
          goto LABEL_35;
        v15 = *(_QWORD *)(v27 + 8 * v9);
        if (!v15)
          break;
      }
    }
LABEL_25:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v9 << 6);
LABEL_26:
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v19 = *v17;
    v18 = v17[1];
    sub_100016A30(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v40);
    *(_QWORD *)&v39 = v19;
    *((_QWORD *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(_QWORD *)&v37[0] = v19;
    *((_QWORD *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain(v18);
    swift_dynamicCast(&v29, v37, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_10010F90C(v38, v32);
    v33 = v29;
    v34 = v30;
    v35 = v31;
    sub_10010F90C(v32, v36);
    v29 = v33;
    v30 = v34;
    v31 = v35;
    sub_10010F90C(v36, v37);
    sub_10010F90C(v37, &v33);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v20 = -1 << *((_BYTE *)v3 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)&v7[8 * (v21 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)&v7[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)&v7[8 * v22];
      }
      while (v26 == -1);
      v10 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v29;
    *(_OWORD *)(v11 + 16) = v30;
    *(_QWORD *)(v11 + 32) = v31;
    result = (uint64_t)sub_10010F90C(&v33, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v16 = v14 + 3;
  if (v16 >= v28)
  {
LABEL_35:
    swift_release(a1);
    swift_release(v3);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v27 + 8 * v16);
  if (v15)
  {
    v9 = v16;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v9 >= v28)
      goto LABEL_35;
    v15 = *(_QWORD *)(v27 + 8 * v9);
    ++v16;
    if (v15)
      goto LABEL_25;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10047B07C(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  _OWORD v38[4];
  _OWORD v39[2];
  _OWORD v40[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001A9A8(&qword_1010FD050);
    v3 = (_BYTE *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v35 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v34 = (unint64_t)(63 - v4) >> 6;
  v7 = v3 + 64;
  swift_bridgeObjectRetain(a1);
  result = swift_retain();
  v36 = 0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v36 << 6);
      goto LABEL_28;
    }
    v12 = v36 + 1;
    if (__OFADD__(v36, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v12 >= v34)
      goto LABEL_37;
    v13 = *(_QWORD *)(v35 + 8 * v12);
    v14 = v36 + 1;
    if (!v13)
    {
      v14 = v36 + 2;
      if (v36 + 2 >= v34)
        goto LABEL_37;
      v13 = *(_QWORD *)(v35 + 8 * v14);
      if (!v13)
      {
        v14 = v36 + 3;
        if (v36 + 3 >= v34)
          goto LABEL_37;
        v13 = *(_QWORD *)(v35 + 8 * v14);
        if (!v13)
        {
          v14 = v36 + 4;
          if (v36 + 4 >= v34)
            goto LABEL_37;
          v13 = *(_QWORD *)(v35 + 8 * v14);
          if (!v13)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v36 = v14;
LABEL_28:
    v17 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v11);
    *(_QWORD *)&v40[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v11);
    v16 = *(void **)&v40[0];
    *(_QWORD *)&v39[0] = v17;
    type metadata accessor for FileProtectionType(0);
    v19 = v18;
    v20 = v16;
    v21 = v17;
    swift_dynamicCast((char *)v40 + 8, v39, v19, (char *)&type metadata for Any + 8, 7);
    v22 = *(_QWORD *)&v40[0];
    sub_10010F90C((_OWORD *)((char *)v40 + 8), v38);
    sub_10010F90C(v38, v40);
    sub_10010F90C(v40, v39);
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;
    Hasher.init(_seed:)(&v37);
    String.hash(into:)(&v37, v23, v25);
    v26 = Hasher._finalize()();
    result = swift_bridgeObjectRelease(v25);
    v27 = -1 << v3[32];
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)&v7[8 * (v28 >> 6)]) != 0)
    {
      v9 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)&v7[8 * (v28 >> 6)])) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)&v7[8 * v29];
      }
      while (v33 == -1);
      v9 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)&v7[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    *(_QWORD *)(*((_QWORD *)v3 + 6) + 8 * v9) = v22;
    result = (uint64_t)sub_10010F90C(v39, (_OWORD *)(*((_QWORD *)v3 + 7) + 32 * v9));
    ++*((_QWORD *)v3 + 2);
  }
  v15 = v36 + 5;
  if (v36 + 5 >= v34)
  {
LABEL_37:
    swift_release(v3);
    sub_10007CC38(a1);
    return (uint64_t)v3;
  }
  v13 = *(_QWORD *)(v35 + 8 * v15);
  if (v13)
  {
    v14 = v36 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v34)
      goto LABEL_37;
    v13 = *(_QWORD *)(v35 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_10047B41C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  int64_t i;
  char *v10;
  void *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001A9A8(&qword_1010F9F80);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v41 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v40 = (unint64_t)(63 - v4) >> 6;
  v7 = &v47;
  v8 = &v49;
  swift_bridgeObjectRetain(v1);
  i = 0;
  v10 = (char *)&type metadata for Any + 8;
  v11 = &type metadata for String;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v40)
    goto LABEL_32;
  v21 = *(_QWORD *)(v41 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v40)
      goto LABEL_32;
    v21 = *(_QWORD *)(v41 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v40)
        goto LABEL_32;
      v21 = *(_QWORD *)(v41 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v40)
          goto LABEL_32;
        v21 = *(_QWORD *)(v41 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v40)
          {
            v21 = *(_QWORD *)(v41 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v40)
                break;
              v21 = *(_QWORD *)(v41 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_10007CC38(v1);
          return;
        }
      }
    }
  }
LABEL_26:
  v43 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = __clz(__rbit64(v6)) | (i << 6))
  {
    v24 = 16 * v19;
    v25 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v27 = *v25;
    v26 = v25[1];
    v28 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v24);
    v29 = *v28;
    v30 = v28[1];
    v45 = v27;
    v46 = v26;
    v44[0] = v29;
    v44[1] = v30;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v30);
    swift_dynamicCast(v7, v44, v11, v10, 7);
    v31 = v45;
    v32 = v46;
    sub_10010F90C(v7, v8);
    sub_10010F90C(v8, v50);
    sub_10010F90C(v50, &v48);
    v33 = sub_100518DA0(v31, v32);
    v34 = v33;
    if ((v35 & 1) != 0)
    {
      v42 = i;
      v12 = v8;
      v13 = v7;
      v14 = v1;
      v15 = v11;
      v16 = v10;
      v17 = (uint64_t *)(v3[6] + 16 * v33);
      swift_bridgeObjectRelease();
      *v17 = v31;
      v17[1] = v32;
      v10 = v16;
      v11 = v15;
      v1 = v14;
      v7 = v13;
      v8 = v12;
      i = v42;
      v18 = (_QWORD *)(v3[7] + 32 * v34);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
      sub_10010F90C(&v48, v18);
      v6 = v43;
      if (!v43)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v33;
    v36 = (uint64_t *)(v3[6] + 16 * v33);
    *v36 = v31;
    v36[1] = v32;
    sub_10010F90C(&v48, (_OWORD *)(v3[7] + 32 * v33));
    v37 = v3[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_34;
    v3[2] = v39;
    v6 = v43;
    if (!v43)
      goto LABEL_11;
LABEL_10:
    v43 = (v6 - 1) & v6;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_10047B784(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _OWORD v39[2];
  _OWORD v40[3];
  _OWORD v41[2];
  __int128 v42;
  _OWORD v43[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001A9A8(&qword_101111D80);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v30 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v29 = (unint64_t)(63 - v4) >> 6;
  v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  result = swift_retain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v29)
      goto LABEL_37;
    v15 = *(_QWORD *)(v30 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v29)
        goto LABEL_37;
      v15 = *(_QWORD *)(v30 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v29)
          goto LABEL_37;
        v15 = *(_QWORD *)(v30 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v29)
            goto LABEL_37;
          v15 = *(_QWORD *)(v30 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    sub_100016A30(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v43);
    *(_QWORD *)&v42 = v20;
    *((_QWORD *)&v42 + 1) = v19;
    v40[2] = v42;
    v41[0] = v43[0];
    v41[1] = v43[1];
    v31[0] = v20;
    v31[1] = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v32, v31, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_10010F90C(v41, v40);
    v21 = sub_10001A9A8(&qword_101103A80);
    swift_dynamicCast(v35, v40, v21, (char *)&type metadata for Any + 8, 7);
    v36 = v32;
    v37 = v33;
    v38 = v34;
    sub_10010F90C(v35, v39);
    v32 = v36;
    v33 = v37;
    v34 = v38;
    sub_10010F90C(v39, v40);
    sub_10010F90C(v40, &v36);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v22 = -1 << *((_BYTE *)v3 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~v7[v23 >> 6]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v23) & ~v7[v23 >> 6])) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = v7[v24];
      }
      while (v28 == -1);
      v10 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)((char *)v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v32;
    *(_OWORD *)(v11 + 16) = v33;
    *(_QWORD *)(v11 + 32) = v34;
    result = (uint64_t)sub_10010F90C(&v36, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v29)
  {
LABEL_37:
    swift_release();
    sub_10007CC38(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v30 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v29)
      goto LABEL_37;
    v15 = *(_QWORD *)(v30 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_10047BB78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  int64_t i;
  void *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int64_t v14;
  void *v15;
  uint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _OWORD v49[2];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001A9A8((uint64_t *)&unk_1010F6370);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v41 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v40 = (unint64_t)(63 - v4) >> 6;
  v7 = &v46;
  v8 = &v48;
  swift_bridgeObjectRetain(v1);
  i = 0;
  v10 = &type metadata for String;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v19 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v19 >= v40)
    goto LABEL_32;
  v20 = *(_QWORD *)(v41 + 8 * v19);
  v21 = i + 1;
  if (!v20)
  {
    v21 = i + 2;
    if (i + 2 >= v40)
      goto LABEL_32;
    v20 = *(_QWORD *)(v41 + 8 * v21);
    if (!v20)
    {
      v21 = i + 3;
      if (i + 3 >= v40)
        goto LABEL_32;
      v20 = *(_QWORD *)(v41 + 8 * v21);
      if (!v20)
      {
        v21 = i + 4;
        if (i + 4 >= v40)
          goto LABEL_32;
        v20 = *(_QWORD *)(v41 + 8 * v21);
        if (!v20)
        {
          v22 = i + 5;
          if (i + 5 < v40)
          {
            v20 = *(_QWORD *)(v41 + 8 * v22);
            if (v20)
            {
              v21 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v21 = v22 + 1;
              if (__OFADD__(v22, 1))
                goto LABEL_36;
              if (v21 >= v40)
                break;
              v20 = *(_QWORD *)(v41 + 8 * v21);
              ++v22;
              if (v20)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_10007CC38(v1);
          return;
        }
      }
    }
  }
LABEL_26:
  v42 = (v20 - 1) & v20;
  v18 = __clz(__rbit64(v20)) + (v21 << 6);
  for (i = v21; ; v18 = __clz(__rbit64(v6)) | (i << 6))
  {
    v23 = 16 * v18;
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v18);
    v26 = *v24;
    v25 = v24[1];
    v27 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v23);
    v28 = *v27;
    v29 = v27[1];
    v44 = v26;
    v45 = v25;
    v43[0] = v28;
    v43[1] = v29;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v29);
    v30 = sub_10001A9A8(&qword_101103A80);
    swift_dynamicCast(v7, v43, v10, v30, 7);
    v31 = v44;
    v32 = v45;
    sub_10010F90C(v7, v8);
    sub_10010F90C(v8, v49);
    sub_10010F90C(v49, &v47);
    v33 = sub_100518DA0(v31, v32);
    v34 = v33;
    if ((v35 & 1) != 0)
    {
      v11 = v8;
      v12 = v7;
      v13 = v1;
      v14 = i;
      v15 = v10;
      v16 = (uint64_t *)(v3[6] + 16 * v33);
      swift_bridgeObjectRelease();
      *v16 = v31;
      v16[1] = v32;
      v10 = v15;
      i = v14;
      v1 = v13;
      v7 = v12;
      v8 = v11;
      v17 = (_QWORD *)(v3[7] + 32 * v34);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
      sub_10010F90C(&v47, v17);
      v6 = v42;
      if (!v42)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v33;
    v36 = (uint64_t *)(v3[6] + 16 * v33);
    *v36 = v31;
    v36[1] = v32;
    sub_10010F90C(&v47, (_OWORD *)(v3[7] + 32 * v33));
    v37 = v3[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_34;
    v3[2] = v39;
    v6 = v42;
    if (!v42)
      goto LABEL_11;
LABEL_10:
    v42 = (v6 - 1) & v6;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_10047BEE4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[3];
  _OWORD v39[2];
  __int128 v40;
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001A9A8(&qword_1010FD058);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  result = swift_retain();
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    sub_100016A30(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(_QWORD *)&v40 = v20;
    *((_QWORD *)&v40 + 1) = v19;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(_QWORD *)&v38[0] = v20;
    *((_QWORD *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_10010F90C(v39, v33);
    v34 = v30;
    v35 = v31;
    v36 = v32;
    sub_10010F90C(v33, v37);
    v30 = v34;
    v31 = v35;
    v32 = v36;
    sub_10010F90C(v37, v38);
    sub_10010F90C(v38, &v34);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~v7[v22 >> 6]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~v7[v22 >> 6])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = v7[v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)((char *)v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(_QWORD *)(v11 + 32) = v32;
    result = (uint64_t)sub_10010F90C(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release();
    sub_10007CC38(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_10047C2A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  _OWORD v46[3];
  _OWORD v47[2];
  __int128 v48;
  _OWORD v49[2];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001A9A8(&qword_1010F9F80);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v37 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v36 = (unint64_t)(63 - v4) >> 6;
  v7 = v49;
  v8 = v47;
  v9 = &v43;
  v10 = &v45;
  swift_bridgeObjectRetain(v1);
  v38 = 0;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v19 = v38 + 1;
  if (__OFADD__(v38, 1))
    goto LABEL_35;
  if (v19 >= v36)
    goto LABEL_32;
  v20 = *(_QWORD *)(v37 + 8 * v19);
  v21 = v38 + 1;
  if (!v20)
  {
    v21 = v38 + 2;
    if (v38 + 2 >= v36)
      goto LABEL_32;
    v20 = *(_QWORD *)(v37 + 8 * v21);
    if (!v20)
    {
      v21 = v38 + 3;
      if (v38 + 3 >= v36)
        goto LABEL_32;
      v20 = *(_QWORD *)(v37 + 8 * v21);
      if (!v20)
      {
        v21 = v38 + 4;
        if (v38 + 4 >= v36)
          goto LABEL_32;
        v20 = *(_QWORD *)(v37 + 8 * v21);
        if (!v20)
        {
          v22 = v38 + 5;
          if (v38 + 5 < v36)
          {
            v20 = *(_QWORD *)(v37 + 8 * v22);
            if (v20)
            {
              v21 = v38 + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v21 = v22 + 1;
              if (__OFADD__(v22, 1))
                goto LABEL_36;
              if (v21 >= v36)
                break;
              v20 = *(_QWORD *)(v37 + 8 * v21);
              ++v22;
              if (v20)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_10007CC38(v1);
          return;
        }
      }
    }
  }
LABEL_26:
  v38 = v21;
  v39 = (v20 - 1) & v20;
  for (i = __clz(__rbit64(v20)) + (v21 << 6); ; i = __clz(__rbit64(v6)) | (v38 << 6))
  {
    v23 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * i);
    v25 = *v23;
    v24 = v23[1];
    sub_100016A30(*(_QWORD *)(v1 + 56) + 32 * i, (uint64_t)v7);
    *(_QWORD *)&v48 = v25;
    *((_QWORD *)&v48 + 1) = v24;
    v46[2] = v48;
    v47[0] = v49[0];
    v47[1] = v49[1];
    v41 = v25;
    v42 = v24;
    sub_10010F90C(v8, v40);
    swift_bridgeObjectRetain(v24);
    v26 = sub_10001A9A8(&qword_101103A80);
    swift_dynamicCast(v9, v40, v26, (char *)&type metadata for Any + 8, 7);
    v28 = v41;
    v27 = v42;
    sub_10010F90C(v9, v10);
    sub_10010F90C(v10, v46);
    sub_10010F90C(v46, &v44);
    v29 = sub_100518DA0(v28, v27);
    v30 = v29;
    if ((v31 & 1) != 0)
    {
      v11 = v10;
      v12 = v9;
      v13 = v1;
      v14 = v8;
      v15 = v7;
      v16 = (uint64_t *)(v3[6] + 16 * v29);
      swift_bridgeObjectRelease();
      *v16 = v28;
      v16[1] = v27;
      v7 = v15;
      v8 = v14;
      v1 = v13;
      v9 = v12;
      v10 = v11;
      v17 = (_QWORD *)(v3[7] + 32 * v30);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
      sub_10010F90C(&v44, v17);
      v6 = v39;
      if (!v39)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v29;
    v32 = (uint64_t *)(v3[6] + 16 * v29);
    *v32 = v28;
    v32[1] = v27;
    sub_10010F90C(&v44, (_OWORD *)(v3[7] + 32 * v29));
    v33 = v3[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
      goto LABEL_34;
    v3[2] = v35;
    v6 = v39;
    if (!v39)
      goto LABEL_11;
LABEL_10:
    v39 = (v6 - 1) & v6;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

void sub_10047C650(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t i;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10001A9A8((uint64_t *)&unk_1011117F0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain(a1);
  i = 0;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v12 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v12 >= v28)
    goto LABEL_32;
  v13 = *(_QWORD *)(v29 + 8 * v12);
  v14 = i + 1;
  if (!v13)
  {
    v14 = i + 2;
    if (i + 2 >= v28)
      goto LABEL_32;
    v13 = *(_QWORD *)(v29 + 8 * v14);
    if (!v13)
    {
      v14 = i + 3;
      if (i + 3 >= v28)
        goto LABEL_32;
      v13 = *(_QWORD *)(v29 + 8 * v14);
      if (!v13)
      {
        v14 = i + 4;
        if (i + 4 >= v28)
          goto LABEL_32;
        v13 = *(_QWORD *)(v29 + 8 * v14);
        if (!v13)
        {
          v15 = i + 5;
          if (i + 5 < v28)
          {
            v13 = *(_QWORD *)(v29 + 8 * v15);
            if (v13)
            {
              v14 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v14 = v15 + 1;
              if (__OFADD__(v15, 1))
                goto LABEL_36;
              if (v14 >= v28)
                break;
              v13 = *(_QWORD *)(v29 + 8 * v14);
              ++v15;
              if (v13)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_10007CC38(a1);
          return;
        }
      }
    }
  }
LABEL_26:
  v6 = (v13 - 1) & v13;
  v11 = __clz(__rbit64(v13)) + (v14 << 6);
  for (i = v14; ; v11 = v10 | (i << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v18 = *v16;
    v17 = v16[1];
    v19 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v17);
    v20 = v19;
    v21 = sub_100518DA0(v18, v17);
    v22 = v21;
    if ((v23 & 1) != 0)
    {
      v8 = (uint64_t *)(v3[6] + 16 * v21);
      swift_bridgeObjectRelease();
      *v8 = v18;
      v8[1] = v17;
      v9 = v3[7];

      *(_QWORD *)(v9 + 8 * v22) = v20;
      if (!v6)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v21;
    v24 = (uint64_t *)(v3[6] + 16 * v21);
    *v24 = v18;
    v24[1] = v17;
    *(_QWORD *)(v3[7] + 8 * v21) = v20;
    v25 = v3[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_34;
    v3[2] = v27;
    if (!v6)
      goto LABEL_11;
LABEL_10:
    v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_10047C8F0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  Class isa;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v17[2];
  uint64_t v18;
  _QWORD v19[4];

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v18 = v19[0];
  v0 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v1 = JSONEncoder.init()();
  v2 = sub_1000A15C0();
  v3 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v18, &type metadata for Configuration, v2);
  v5 = v4;
  v6 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v17[0] = 0;
  v8 = objc_msgSend(v6, "JSONObjectWithData:options:error:", isa, 4, v17);

  v9 = v17[0];
  if (!v8)
  {
    v13 = v9;
    v14 = _convertNSErrorToError(_:)(v9);

    swift_willThrow(v15);
    swift_errorRelease(v14);
    goto LABEL_7;
  }
  _bridgeAnyObjectToAny(_:)(v19, v8);
  swift_unknownObjectRelease(v8);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010FBF20);
  if ((swift_dynamicCast(v17, v19, (char *)&type metadata for Any + 8, v10, 6) & 1) == 0)
  {
LABEL_7:
    swift_release(v1);
    sub_10001BC14(v3, v5);
    swift_bridgeObjectRelease(v18);
    return 0;
  }
  v11 = v17[0];
  v12 = sub_10047ACFC((uint64_t)v17[0]);
  swift_release(v1);
  sub_10001BC14(v3, v5);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v18);
  return v12;
}

uint64_t getEnumTagSinglePayload for VersionNumber(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for VersionNumber(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 4) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryProtocolVersionResponsePayload()
{
  return &type metadata for AccessoryProtocolVersionResponsePayload;
}

uint64_t sub_10047CB74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10047CCDC(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result);
    *(_BYTE *)(a2 + 3) = BYTE3(result);
  }
  return result;
}

uint64_t sub_10047CBAC(_QWORD *a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v12[2];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v13, v3, v4);
  v5 = sub_10072CEBC(v2);
  v7 = v6;
  v12[0] = v5;
  v12[1] = v6;
  v8 = v14;
  v9 = v15;
  sub_10009F5D0((uint64_t)v13, v14);
  v10 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(v12, &type metadata for Data, v10, v8, v9);
  sub_10001BC14(v5, v7);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v13);
}

unint64_t sub_10047CC6C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10047CC98();
  result = sub_1003ECCE4();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10047CC98()
{
  unint64_t result;

  result = qword_1010FD060;
  if (!qword_1010FD060)
  {
    result = swift_getWitnessTable(byte_100E3F438, &type metadata for AccessoryProtocolVersionResponsePayload);
    atomic_store(result, &qword_1010FD060);
  }
  return result;
}

uint64_t sub_10047CCDC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v16, v3, v4);
  v5 = v17;
  v6 = v18;
  sub_10009F5D0((uint64_t)v16, v17);
  v7 = dispatch thunk of BinaryDecodingContaining.decode(length:)(4, v5, v6);
  if (v1)
    goto LABEL_5;
  v9 = v7;
  v10 = v8;
  sub_10001BBBC(v7, v8);
  sub_10072D548(v9, v10);
  if ((v11 & 0x100000000) != 0)
  {
    v6 = type metadata accessor for BinaryEncodingError(0);
    v12 = sub_1001120A4();
    swift_allocError(v6, v12, 0, 0);
    v14 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v13, enum case for BinaryEncodingError.encodingError(_:), v6);
    swift_willThrow(v14);
    sub_10001BC14(v9, v10);
LABEL_5:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    return v6;
  }
  v6 = v11;
  sub_10001BC14(v9, v10);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v6;
}

_QWORD *sub_10047CE18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  unint64_t v16;

  v3 = type metadata accessor for SafeLocation(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = _swiftEmptyArrayStorage;
  v16 = (unint64_t)_swiftEmptyArrayStorage;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v15[1] = v1;
    v9 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    sub_10000F4A0(0, &qword_1011058A0, SPSafeLocation_ptr);
    v10 = *(_QWORD *)(v4 + 72);
    v15[0] = a1;
    swift_bridgeObjectRetain(a1);
    do
    {
      sub_10005972C(v9, (uint64_t)v6, type metadata accessor for SafeLocation);
      v11 = sub_10075AC58((uint64_t)v6);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v13 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v12 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v13 >= v12 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
      specialized Array._endMutation()(v14);
      v9 += v10;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    return (_QWORD *)v16;
  }
  return result;
}

_QWORD *sub_10047CF78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v38 = sub_10001A9A8(&qword_1011118F0);
  v3 = *(_QWORD *)(v38 - 8);
  v4 = __chkstk_darwin(v38);
  v35 = (uint64_t)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v34 = (char *)v30 - v6;
  v7 = sub_10001A9A8(&qword_1011118E0);
  __chkstk_darwin(v7);
  v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = _s18ConnectionKeyGroupVMa(0);
  v39 = *(_QWORD *)(v37 - 8);
  v10 = __chkstk_darwin(v37);
  v36 = (uint64_t)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v31 = (uint64_t)v30 - v12;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    return _swiftEmptyArrayStorage;
  v30[0] = a1;
  v30[1] = v1;
  v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v15 = *(_QWORD *)(v3 + 72);
  v32 = v9;
  v33 = v15;
  swift_bridgeObjectRetain(a1);
  v16 = _swiftEmptyArrayStorage;
  v17 = (uint64_t)v34;
  do
  {
    v18 = v38;
    v19 = *(int *)(v38 + 48);
    v20 = v17 + v19;
    v21 = v14 + v19;
    sub_10000F9B8(v14, v17, (uint64_t *)&unk_1010F0EE0);
    sub_10000F9B8(v21, v20, &qword_1011118E0);
    v22 = *(int *)(v18 + 48);
    v23 = v35;
    v24 = v35 + v22;
    sub_100005CF0(v17, v35, (uint64_t *)&unk_1010F0EE0);
    sub_100005CF0(v20, v24, &qword_1011118E0);
    v25 = (uint64_t)v32;
    sub_10000F9B8(v24, (uint64_t)v32, &qword_1011118E0);
    sub_100004048(v23, &qword_1011118F0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v25, 1, v37) == 1)
    {
      sub_100004048(v25, &qword_1011118E0);
    }
    else
    {
      v26 = v31;
      sub_1000126EC(v25, v31, _s18ConnectionKeyGroupVMa);
      sub_1000126EC(v26, v36, _s18ConnectionKeyGroupVMa);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
        v16 = (_QWORD *)sub_1007C8E64(0, v16[2] + 1, 1, (unint64_t)v16);
      v28 = v16[2];
      v27 = v16[3];
      if (v28 >= v27 >> 1)
        v16 = (_QWORD *)sub_1007C8E64(v27 > 1, v28 + 1, 1, (unint64_t)v16);
      v16[2] = v28 + 1;
      sub_1000126EC(v36, (uint64_t)v16+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(_QWORD *)(v39 + 72) * v28, _s18ConnectionKeyGroupVMa);
    }
    v14 += v33;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v16;
}

_QWORD *sub_10047D29C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD v29[3];
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v37 = sub_10001A9A8(&qword_1011118F0);
  v3 = *(_QWORD *)(v37 - 8);
  v4 = __chkstk_darwin(v37);
  v33 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v34 = (char *)v29 - v6;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010F0EE0);
  __chkstk_darwin(v7);
  v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for TimeBasedKey(0);
  v38 = *(_QWORD *)(v36 - 8);
  v10 = __chkstk_darwin(v36);
  v35 = (uint64_t)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v30 = (uint64_t)v29 - v12;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    return _swiftEmptyArrayStorage;
  v29[1] = a1;
  v29[2] = v1;
  v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v15 = *(_QWORD *)(v3 + 72);
  v31 = v9;
  v32 = v15;
  swift_bridgeObjectRetain(a1);
  v16 = _swiftEmptyArrayStorage;
  v17 = (uint64_t)v33;
  v18 = (uint64_t)v34;
  do
  {
    v39 = v16;
    v19 = v37;
    v20 = *(int *)(v37 + 48);
    v21 = v18 + v20;
    v22 = v14 + v20;
    sub_10000F9B8(v14, v18, (uint64_t *)&unk_1010F0EE0);
    sub_10000F9B8(v22, v21, &qword_1011118E0);
    v23 = v17 + *(int *)(v19 + 48);
    sub_100005CF0(v18, v17, (uint64_t *)&unk_1010F0EE0);
    sub_100005CF0(v21, v23, &qword_1011118E0);
    v24 = (uint64_t)v31;
    sub_10000F9B8(v17, (uint64_t)v31, (uint64_t *)&unk_1010F0EE0);
    sub_100004048(v17, &qword_1011118F0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v24, 1, v36) == 1)
    {
      sub_100004048(v24, (uint64_t *)&unk_1010F0EE0);
      v16 = v39;
    }
    else
    {
      v25 = v30;
      sub_1000126EC(v24, v30, type metadata accessor for TimeBasedKey);
      sub_1000126EC(v25, v35, type metadata accessor for TimeBasedKey);
      v16 = v39;
      if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
        v16 = (_QWORD *)sub_1007C80D0(0, v16[2] + 1, 1, (unint64_t)v16);
      v27 = v16[2];
      v26 = v16[3];
      if (v27 >= v26 >> 1)
        v16 = (_QWORD *)sub_1007C80D0(v26 > 1, v27 + 1, 1, (unint64_t)v16);
      v16[2] = v27 + 1;
      sub_1000126EC(v35, (uint64_t)v16+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(_QWORD *)(v38 + 72) * v27, type metadata accessor for TimeBasedKey);
    }
    v14 += v32;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v16;
}

_QWORD *sub_10047D5CC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  Class v15;
  Class v16;
  NSString v17;
  Class v18;
  Class v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Class isa;
  unint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v4 = type metadata accessor for StandaloneBeacon(0);
    v5 = *(_QWORD *)(v4 - 8);
    v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v23 = *(_QWORD *)(v5 + 72);
    v24 = v4;
    do
    {
      v32 = v2;
      v7 = MACAddress.dataRepresentation.getter(v4);
      v30 = v8;
      v31 = v7;
      v29 = MACAddress.dataRepresentation.getter(v7);
      v9 = *(_QWORD *)(v6 + *(int *)(v24 + 28) + 8);
      v26 = v10;
      v11 = (uint64_t *)(v6 + *(int *)(v24 + 36));
      v13 = *v11;
      v12 = v11[1];
      v27 = objc_allocWithZone((Class)SPStandaloneBeacon);
      swift_bridgeObjectRetain(v9);
      v14 = v12;
      sub_10001BBBC(v13, v12);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v15 = Data._bridgeToObjectiveC()().super.isa;
      v16 = Data._bridgeToObjectiveC()().super.isa;
      v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v18 = Date._bridgeToObjectiveC()().super.isa;
      v19 = Data._bridgeToObjectiveC()().super.isa;
      v28 = objc_msgSend(v27, "initWithIdentifier:macAddress:classicMacAddress:serialNumber:pairingDate:productData:", isa, v15, v16, v17, v18, v19);

      sub_10001BC14(v13, v14);
      sub_10001BC14(v29, v26);
      v20 = sub_10001BC14(v31, v30);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      v21 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
      v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v28);
      v4 = specialized ContiguousArray._endMutation()(v22);
      v6 += v23;
      v2 = v32 - 1;
    }
    while (v32 != 1);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

id sub_10047D7E8(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  id v57;
  Class isa;
  Class v59;
  char *v60;
  Class v61;
  Class v62;
  Class v63;
  Class v64;
  void *v65;
  void *v66;
  void *v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  void (*v70)(void);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  int *v75;
  void (*v76)(char *, unint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  id result;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  Class v85;
  id v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  Class v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  void (*v112)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  void (*v117)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int EnumCaseMultiPayload;
  uint64_t v125;
  NSString v126;
  uint64_t (*v127)(uint64_t);
  uint64_t v128;
  NSString v129;
  void (*v130)(uint64_t *);
  uint64_t *v131;
  unint64_t v132[4];
  int v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  _QWORD *v144;
  uint64_t v145;
  void (*v146)(_QWORD);
  char *v147;
  _QWORD *v148;
  uint64_t v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  id v159;
  uint64_t v160;
  id v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;

  v145 = a3;
  v146 = a2;
  v135 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v135);
  v136 = (uint64_t)&v133 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v6);
  v139 = (char *)&v133 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for OwnedBeaconRecord(0);
  v138 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140);
  v137 = (uint64_t)&v133 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v9);
  v143 = (char *)&v133 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SafeLocation(0);
  v152 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v164 = (uint64_t)&v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v151 = (uint64_t)&v133 - v14;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v15);
  v167 = (uint64_t)&v133 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for Date(0);
  v169 = *(_QWORD *)(v156 - 8);
  v17 = __chkstk_darwin(v156);
  v155 = (char *)&v133 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v166 = (char *)&v133 - v19;
  v157 = type metadata accessor for UUID(0);
  v158 = *(_QWORD *)(v157 - 8);
  v20 = __chkstk_darwin(v157);
  v165 = (char *)&v133 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v162 = (char *)&v133 - v23;
  v24 = __chkstk_darwin(v22);
  v154 = (char *)&v133 - v25;
  __chkstk_darwin(v24);
  v168 = (char *)&v133 - v26;
  v153 = type metadata accessor for ShareRecord(0);
  v27 = *(_QWORD **)(v153 - 8);
  __chkstk_darwin(v153);
  v29 = (unint64_t)&v133 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_10001A9A8(&qword_1010ED860);
  v31 = __chkstk_darwin(v30);
  v147 = (char *)&v133 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = static os_log_type_t.info.getter(v31);
  if (qword_1010EA248 != -1)
    goto LABEL_40;
  while (1)
  {
    v34 = qword_1011B7D28;
    v142 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v35 = swift_allocObject(v142, 112, 7);
    *(_OWORD *)(v35 + 16) = xmmword_100E22B10;
    v173 = *v3;
    v36 = sub_10001A9A8(&qword_1010F49B8);
    v37 = String.init<A>(describing:)(&v173, v36);
    v148 = v3;
    v38 = v37;
    v40 = v39;
    *(_QWORD *)(v35 + 56) = &type metadata for String;
    v41 = sub_10001AA00();
    *(_QWORD *)(v35 + 32) = v38;
    *(_QWORD *)(v35 + 40) = v40;
    *(_QWORD *)(v35 + 96) = &type metadata for String;
    *(_QWORD *)(v35 + 104) = v41;
    *(_QWORD *)(v35 + 64) = v41;
    *(_QWORD *)(v35 + 72) = 0xD000000000000017;
    *(_QWORD *)(v35 + 80) = 0x8000000100ED85D0;
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "%@: %@", 6, 2, v35);
    swift_bridgeObjectRelease();
    v42 = v148[35];
    sub_10080B648(a1, (uint64_t)&v171);
    if (!v172)
    {
      sub_100004048((uint64_t)&v171, (uint64_t *)&unk_1010EE310);
      return (id)((uint64_t (*)(_QWORD))v146)(0);
    }
    v43 = a1;
    sub_10000F9FC(&v171, (uint64_t)&v173);
    v141 = v42;
    v44 = sub_10088A6EC();
    v45 = v44[2];
    v144 = (_QWORD *)a1;
    if (v45)
    {
      *(_QWORD *)&v171 = _swiftEmptyArrayStorage;
      v163 = v45;
      specialized ContiguousArray.reserveCapacity(_:)(v45);
      v46 = (*((unsigned __int8 *)v27 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v27 + 80);
      v134 = v44;
      v47 = (char *)v44 + v46;
      v150 = (id)objc_opt_self(SPBeacon);
      v48 = (uint64_t)v47;
      v149 = v27[9];
      v49 = v157;
      a1 = v158;
      v50 = v156;
      v52 = v168;
      v51 = v169;
      v53 = v155;
      v54 = v162;
      v55 = v154;
      v170 = v29;
      do
      {
        v162 = (char *)v48;
        sub_10005972C(v48, v29, type metadata accessor for ShareRecord);
        v75 = (int *)v153;
        v76 = *(void (**)(char *, unint64_t, uint64_t))(a1 + 16);
        v76(v52, v170 + *(int *)(v153 + 20), v49);
        v76(v55, v170 + v75[6], v49);
        UUID.init(uuid:)(0, 0, 0, 0, 0, 0, 0, 0, 0);
        UUID.init(uuid:)(0, 0, 0, 0, 0, 0, 0, 0, 0);
        v161 = objc_msgSend(v150, "SPOwner");
        v160 = sub_100ACD7B4(*(_BYTE *)(v170 + v75[9]), *(_QWORD *)(v170 + v75[9] + 8), *(void **)(v170 + v75[9] + 16));
        (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v166, v170 + v75[7], v50);
        v77 = v167;
        sub_10000F9B8(v170 + v75[8], v167, (uint64_t *)&unk_1010EA690);
        v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v77, 1, v50);
        if ((_DWORD)v78 == 1)
        {
          static Date.distantFuture.getter(v78);
          sub_100004048(v167, (uint64_t *)&unk_1010EA690);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v53, v167, v50);
        }
        v56 = v53;
        v57 = objc_allocWithZone((Class)SPBeaconShare);
        isa = UUID._bridgeToObjectiveC()().super.isa;
        v59 = UUID._bridgeToObjectiveC()().super.isa;
        v60 = v54;
        v61 = UUID._bridgeToObjectiveC()().super.isa;
        v62 = UUID._bridgeToObjectiveC()().super.isa;
        v63 = Date._bridgeToObjectiveC()().super.isa;
        v64 = Date._bridgeToObjectiveC()().super.isa;
        v65 = v57;
        v66 = v161;
        v67 = (void *)v160;
        v159 = objc_msgSend(v65, "initWithIdentifier:beaconIdentifier:sharingCircleIdentifier:peerTrustIdentifier:owner:sharee:state:creationDate:expirationDate:", isa, v59, v61, v62, v161, v160, 5, v63, v64);

        v68 = *(void (**)(char *, uint64_t))(v169 + 8);
        v69 = v156;
        v68(v56, v156);
        v68(v166, v69);
        a1 = v158;
        v70 = *(void (**)(void))(v158 + 8);
        v49 = v157;
        ((void (*)(char *, uint64_t))v70)(v165, v157);
        v54 = v60;
        ((void (*)(char *, uint64_t))v70)(v60, v49);
        v55 = v154;
        v70();
        v52 = v168;
        ((void (*)(char *, uint64_t))v70)(v168, v49);
        v29 = v170;
        v71 = sub_1000126B0(v170, type metadata accessor for ShareRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v71);
        v72 = *(_QWORD *)(v171 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v72);
        v73 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v72, v159);
        specialized ContiguousArray._endMutation()(v73);
        v48 = (uint64_t)&v162[v149];
        v74 = v163-- == 1;
        v50 = v69;
        v51 = v169;
        v53 = v155;
      }
      while (!v74);
      v79 = (_QWORD *)v171;
      swift_bridgeObjectRelease();
      v43 = (uint64_t)v144;
    }
    else
    {
      swift_bridgeObjectRelease();
      v79 = _swiftEmptyArrayStorage;
      v49 = v157;
      a1 = v158;
    }
    sub_100CA8258((uint64_t)v79);
    swift_bridgeObjectRelease();
    v81 = v174;
    v82 = v175;
    v83 = sub_10001AA44(&v173, v174);
    v84 = sub_100854C8C((uint64_t)v83, v141, v81, v82);
    sub_10000F4A0(0, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
    sub_1000170AC((unint64_t *)&unk_1010EE150, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
    v85 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v84, "setShares:", v85);

    if (qword_1010E9CF0 != -1)
      swift_once(&qword_1010E9CF0, sub_10058CADC);
    v86 = sub_100D1D510(v43);
    objc_msgSend(v84, "setSeparationState:", v86);

    v87 = v147;
    (*(void (**)(char *, uint64_t, uint64_t))(a1 + 16))(v147, v43, v49);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(a1 + 56))(v87, 0, 1, v49);
    v27 = sub_10001E350();
    v88 = v27[2];
    if (!v88)
      break;
    v33 = 0;
    v3 = _swiftEmptyArrayStorage;
    while (v33 < v27[2])
    {
      v89 = (*(unsigned __int8 *)(v152 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v152 + 80);
      a1 = *(_QWORD *)(v152 + 72);
      v90 = v151;
      sub_10005972C((uint64_t)v27 + v89 + a1 * v33, v151, type metadata accessor for SafeLocation);
      sub_1000126EC(v90, v164, type metadata accessor for SafeLocation);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
      *(_QWORD *)&v171 = v3;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10009AC18(0, v3[2] + 1, 1);
        v3 = (_QWORD *)v171;
      }
      v29 = v3[2];
      v92 = v3[3];
      if (v29 >= v92 >> 1)
      {
        sub_10009AC18(v92 > 1, v29 + 1, 1);
        v3 = (_QWORD *)v171;
      }
      ++v33;
      v3[2] = v29 + 1;
      sub_1000126EC(v164, (uint64_t)v3 + v89 + v29 * a1, type metadata accessor for SafeLocation);
      if (v88 == v33)
        goto LABEL_24;
    }
    __break(1u);
LABEL_40:
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  }
  v3 = _swiftEmptyArrayStorage;
LABEL_24:
  v93 = swift_bridgeObjectRelease();
  __chkstk_darwin(v93);
  v94 = (uint64_t)v147;
  v132[2] = (unint64_t)v147;
  v95 = sub_10001CEFC((uint64_t (*)(char *))sub_1004D63DC, v132, (uint64_t)v3);
  v96 = sub_10047CE18(v95);
  swift_bridgeObjectRelease();
  sub_100004048(v94, &qword_1010ED860);
  sub_10001D404((uint64_t)v96);
  swift_bridgeObjectRelease();
  sub_10000F4A0(0, &qword_1011058A0, SPSafeLocation_ptr);
  sub_1000170AC((unint64_t *)&qword_101107020, &qword_1011058A0, SPSafeLocation_ptr);
  v97 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v84, "setSafeLocations:", v97);

  v98 = v174;
  v99 = v175;
  v100 = sub_10001AA44(&v173, v174);
  v101 = (uint64_t)v148;
  objc_msgSend(v84, "setCanBeLeashedByHost:", (unint64_t)sub_10077744C((uint64_t)v100, (uint64_t)v148, v98, v99) & 1);
  result = objc_msgSend(v84, "setBeaconSeparationState:", sub_10075A5C4((uint64_t)v144));
  v102 = *(_QWORD *)(v101 + 40);
  if (v102)
  {
    v103 = *(unsigned __int8 *)(v102 + 368);
    v104 = swift_retain();
    v105 = static os_log_type_t.info.getter(v104);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    v106 = qword_1011B7D30;
    v107 = swift_allocObject(v142, 72, 7);
    *(_OWORD *)(v107 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v107 + 56) = &type metadata for Bool;
    *(_QWORD *)(v107 + 64) = &protocol witness table for Bool;
    *(_BYTE *)(v107 + 32) = v103;
    os_log(_:dso:log:_:_:)(v105, &_mh_execute_header, v106, "thisDeviceConnectionAllowed: %i", v133);
    swift_release();
    swift_bridgeObjectRelease();
    objc_msgSend(v84, "setConnectionAllowed:", v103);
    sub_100030784((uint64_t)&v173, (uint64_t)&v171);
    v108 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v109 = type metadata accessor for SharedBeaconRecord(0);
    v110 = (uint64_t)v143;
    v111 = swift_dynamicCast(v143, &v171, v108, v109, 6);
    v112 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 56);
    if (v111)
    {
      v112(v110, 0, 1, v109);
      sub_100004048(v110, (uint64_t *)&unk_1010EE180);
      objc_msgSend(v84, "setConnectableDeviceCount:", 0);
LABEL_38:
      v130 = (void (*)(uint64_t *))v146;
      v131 = v84;
      v130(v84);

      return (id)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v173);
    }
    v112(v110, 1, 1, v109);
    sub_100004048(v110, (uint64_t *)&unk_1010EE180);
    sub_100030784((uint64_t)&v173, (uint64_t)&v171);
    v113 = (uint64_t)v139;
    v114 = v108;
    v115 = v140;
    v116 = swift_dynamicCast(v139, &v171, v114, v140, 6);
    v117 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v138 + 56);
    if ((v116 & 1) == 0)
    {
      v117(v113, 1, 1, v115);
      sub_100004048(v113, (uint64_t *)&unk_1010F47C0);
      goto LABEL_38;
    }
    v117(v113, 0, 1, v115);
    v118 = v137;
    sub_1000126EC(v113, v137, type metadata accessor for OwnedBeaconRecord);
    v119 = v144;
    v120 = v115;
    v121 = sub_100711020((uint64_t)v144);
    CurrentValueSubject.value.getter(&v171);
    v122 = v171;
    result = (id)sub_100481A4C(v119, v171);
    if (!__OFADD__(v122, v121))
    {
      objc_msgSend(v84, "setConnectableDeviceCount:", v122 + v121);
      v123 = v136;
      sub_10005972C(v118 + *(int *)(v120 + 24), v136, type metadata accessor for StableIdentifier);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v123, v135);
      v125 = v158;
      if (EnumCaseMultiPayload == 2)
      {
        sub_10001A9A8(&qword_101106F40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v129 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        objc_msgSend(v84, "setSerialNumber:", v129);

        sub_1000126B0(v118, type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v123, v157);
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v126 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          objc_msgSend(v84, "setSerialNumber:", v126);

          v127 = type metadata accessor for OwnedBeaconRecord;
          v128 = v118;
        }
        else
        {
          objc_msgSend(v84, "setSerialNumber:", 0);
          sub_1000126B0(v118, type metadata accessor for OwnedBeaconRecord);
          v127 = type metadata accessor for StableIdentifier;
          v128 = v123;
        }
        sub_1000126B0(v128, v127);
      }
      goto LABEL_38;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10047E8E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD aBlock[6];

  v31 = a1;
  v32 = a3;
  v30 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v7 - 8);
  v34 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static os_log_type_t.info.getter(v8);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v12 = qword_1011B7D28;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v14 = swift_allocObject(v13, 112, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B10;
  aBlock[0] = *v3;
  v15 = sub_10001A9A8(&qword_1010F49B8);
  v16 = String.init<A>(describing:)(aBlock, v15);
  v18 = v17;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  v19 = sub_10001AA00();
  *(_QWORD *)(v14 + 32) = v16;
  *(_QWORD *)(v14 + 40) = v18;
  *(_QWORD *)(v14 + 96) = &type metadata for String;
  *(_QWORD *)(v14 + 104) = v19;
  *(_QWORD *)(v14 + 64) = v19;
  *(_QWORD *)(v14 + 72) = 0xD000000000000022;
  *(_QWORD *)(v14 + 80) = 0x8000000100ED74C0;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "%@: %@", 6, 2, v14);
  swift_bridgeObjectRelease();
  v20 = (_QWORD *)swift_allocObject(&unk_1010790A0, 48, 7);
  v21 = v30;
  v20[2] = v3;
  v20[3] = v21;
  v22 = v31;
  v20[4] = v32;
  v20[5] = v22;
  aBlock[4] = sub_1004D02C0;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010790B8;
  v23 = _Block_copy(aBlock);
  swift_retain();
  v24 = swift_retain();
  static DispatchQoS.unspecified.getter(v24);
  v36 = _swiftEmptyArrayStorage;
  v25 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v27 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v26, v27, v4, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v34);
  return swift_release();
}

_QWORD *sub_10047EBD8(uint64_t a1, uint64_t a2, char a3, int a4)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v39 = a4;
  v7 = sub_10081CEB8();
  v8 = sub_10001BAFC((uint64_t)v7);
  swift_bridgeObjectRelease();
  v9 = sub_10001AFC0();
  v10 = sub_10001BAD8((uint64_t)v9);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v46 = v8;
  sub_10001BB84((uint64_t)v10);
  v11 = v8;
  v12 = _swiftEmptyArrayStorage;
  v42[0] = _swiftEmptyArrayStorage;
  v13 = v8[2];
  if (v13)
  {
    v14 = (uint64_t)(v8 + 4);
    swift_bridgeObjectRetain(v11);
    do
    {
      sub_100030784(v14, (uint64_t)&v46);
      v16 = v47;
      v15 = v48;
      sub_10001AA44(&v46, v47);
      v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v16, v15);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v46);
      sub_100303864(v17);
      v14 += 40;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease_n(v11, 2);
    v18 = (_QWORD *)v42[0];
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = _swiftEmptyArrayStorage;
  }
  v19 = sub_10001B664((uint64_t)v18);
  swift_bridgeObjectRelease();
  v45 = _swiftEmptyArrayStorage;
  v20 = a1;
  v21 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(v20);
  v40 = v22;
  if (v21)
  {
    v23 = v22 + 32;
    v24 = a3 & 1;
    v41 = a3 & 1;
    do
    {
      sub_100030784(v23, (uint64_t)&v46);
      if ((sub_100489460(&v46, v24, a2, v19) & 1) != 0)
      {
        sub_10000F9FC(&v46, (uint64_t)v42);
        v25 = v45;
        if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
        {
          sub_10009A628(0, v25[2] + 1, 1);
          v25 = v45;
        }
        v26 = v19;
        v28 = v25[2];
        v27 = v25[3];
        if (v28 >= v27 >> 1)
          sub_10009A628(v27 > 1, v28 + 1, 1);
        v29 = v43;
        v30 = v44;
        v31 = sub_10009F5D0((uint64_t)v42, v43);
        __chkstk_darwin(v31);
        v33 = (char *)&v38 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v34 + 16))(v33);
        sub_1004AA86C(v28, (uint64_t)v33, (uint64_t *)&v45, v29, v30);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
        v19 = v26;
        v24 = v41;
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v46);
      }
      v23 += 40;
      --v21;
    }
    while (v21);
    v12 = v45;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v39 & 1) == 0)
  {
    v35 = v38;
    swift_retain();
    v36 = sub_1004BC508((uint64_t)v12, v35);
    swift_release();
    swift_release();
    return v36;
  }
  return v12;
}

uint64_t sub_10047EEE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _QWORD v15[5];

  v2 = type metadata accessor for SharedBeaconGroup(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v15[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OwnedBeaconGroup(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v15[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v15[-1] - v9;
  sub_100030784(a1, (uint64_t)v15);
  v11 = sub_10001A9A8(&qword_101108FB0);
  if (swift_dynamicCast(v10, v15, v11, v5, 0))
  {
    sub_1000126EC((uint64_t)v10, (uint64_t)v8, type metadata accessor for OwnedBeaconGroup);
    v12 = (_QWORD *)sub_100495840((uint64_t)v8);
    sub_1000126B0((uint64_t)v8, type metadata accessor for OwnedBeaconGroup);
LABEL_5:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
    return (uint64_t)v12;
  }
  if (swift_dynamicCast(v4, v15, v11, v2, 0))
  {
    sub_1000126B0((uint64_t)v4, type metadata accessor for SharedBeaconGroup);
    v12 = _swiftEmptyDictionarySingleton;
    goto LABEL_5;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001BLL, 0x8000000100ED87B0, "searchpartyd/BeaconManagerService_BeaconManagerProtocol.swift", 61, 2, 1717, 0);
  __break(1u);
  return result;
}

uint64_t sub_10047F0AC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6F60);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6F60);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000012, 0x8000000100ED75B0);
}

uint64_t sub_10047F12C(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[2];
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v37 = a4;
  v36 = a3;
  v34 = a1;
  v5 = type metadata accessor for OwnedBeaconGroup(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v35 = (uint64_t)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)v33 - v9;
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v11 = type metadata accessor for Logger(0);
  sub_10001A9E8(v11, (uint64_t)qword_1011B7DF8);
  v39 = a2;
  v12 = sub_10005972C(a2, (uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = v6;
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v41 = v17;
    *(_DWORD *)v16 = 136315138;
    v18 = sub_10036F350();
    v40 = sub_100016940(v18, v19, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "updateFindMyNetwork for %s", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    v20 = v16;
    v6 = v15;
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
  }

  v21 = v38;
  v22 = v39;
  v33[1] = *(_QWORD *)(v38 + 280);
  v23 = v35;
  sub_10005972C(v39, v35, type metadata accessor for OwnedBeaconGroup);
  v24 = *(unsigned __int8 *)(v6 + 80);
  v25 = (v24 + 17) & ~v24;
  v26 = v24 | 7;
  v27 = swift_allocObject(&unk_101079D70, v25 + v7, v24 | 7);
  v28 = v34 & 1;
  *(_BYTE *)(v27 + 16) = v34 & 1;
  sub_1000126EC(v23, v27 + v25, type metadata accessor for OwnedBeaconGroup);
  sub_10005972C(v22, v23, type metadata accessor for OwnedBeaconGroup);
  v29 = (v24 + 48) & ~v24;
  v30 = swift_allocObject(&unk_101079D98, v29 + v7, v26);
  *(_BYTE *)(v30 + 16) = v28;
  v31 = v37;
  *(_QWORD *)(v30 + 24) = v36;
  *(_QWORD *)(v30 + 32) = v31;
  *(_QWORD *)(v30 + 40) = v21;
  sub_1000126EC(v23, v30 + v29, type metadata accessor for OwnedBeaconGroup);
  swift_retain();
  swift_retain();
  sub_1007A0418(v22, 0, (void (*)(uint64_t))sub_1004D6264, v27, (void (*)(uint64_t))sub_1004D6380, (void (*)(uint64_t))v30);
  swift_release();
  return swift_release();
}

uint64_t sub_10047F450(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for OwnedBeaconGroup(0);
  result = __chkstk_darwin(v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(a1 + *(int *)(result + 32)) = a2;
  if ((a2 & 1) == 0)
  {
    sub_10005972C(a3, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
    sub_100371EBC();
    v10 = *(_QWORD *)&v9[*(int *)(v6 + 40)];
    swift_bridgeObjectRetain(v10);
    sub_1000126B0((uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
    v11 = *(int *)(v6 + 40);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + v11) = v10;
  }
  return result;
}

uint64_t sub_10047F518(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  void **v33;
  void **v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint8_t *v46;
  void **v47;
  void **v48;
  uint64_t v49;
  unint64_t v50;
  void **v51;
  char *v52;
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  void **aBlock;
  uint64_t v103;
  uint64_t (*v104)(uint64_t);
  void *v105;
  uint64_t (*v106)();
  _QWORD *v107;

  v90 = a5;
  v91 = a6;
  v100 = a4;
  LODWORD(v92) = a2;
  v99 = type metadata accessor for DispatchWorkItemFlags(0);
  v97 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v96 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for DispatchQoS(0);
  v95 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v94 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v93 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MACAddress(0);
  v88 = *(_QWORD *)(v13 - 8);
  v89 = v13;
  __chkstk_darwin(v13);
  v87 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for OwnedBeaconGroup(0);
  v15 = __chkstk_darwin(v86);
  v17 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v85 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v85 - v21;
  v23 = sub_10001A9A8(&qword_1010EEC50);
  __chkstk_darwin(v23);
  v25 = (char **)((char *)&v85 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v25, &qword_1010EEC50);
  if (swift_getEnumCaseMultiPayload(v25, v23) == 1)
  {
    v26 = v11;
    v92 = a3;
    v27 = (_QWORD *)*v25;
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v28 = type metadata accessor for Logger(0);
    sub_10001A9E8(v28, (uint64_t)qword_1011B7DF8);
    sub_10005972C(v91, (uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
    swift_errorRetain(v27);
    v29 = swift_errorRetain(v27);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc(22, -1);
      v33 = (void **)swift_slowAlloc(64, -1);
      v91 = v10;
      v34 = v33;
      aBlock = v33;
      *(_DWORD *)v32 = 136315394;
      v35 = sub_10036F350();
      v101 = (_QWORD *)sub_100016940(v35, v36, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &aBlock, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v32 + 12) = 2082;
      v101 = v27;
      swift_errorRetain(v27);
      v37 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v38 = String.init<A>(describing:)(&v101, v37);
      v101 = (_QWORD *)sub_100016940(v38, v39, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &aBlock, v32 + 14, v32 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(v27);
      swift_errorRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Failed to set FMN status for %s. Error %{public}s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
      v40 = v34;
      v10 = v91;
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
      swift_errorRelease(v27);
      swift_errorRelease(v27);
    }

    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v52 = v93;
    (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v93, enum case for DispatchQoS.QoSClass.default(_:), v10);
    v53 = (void *)static OS_dispatch_queue.global(qos:)(v52);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v52, v10);
    v54 = (_QWORD *)swift_allocObject(&unk_101079DC0, 40, 7);
    v55 = v100;
    v54[2] = v92;
    v54[3] = v55;
    v54[4] = v27;
    v106 = sub_100016FE4;
    v107 = v54;
    aBlock = _NSConcreteStackBlock;
    v103 = 1107296256;
    v104 = sub_100016FB8;
    v105 = &unk_101079DD8;
    v56 = _Block_copy(&aBlock);
    swift_retain();
    v57 = swift_errorRetain(v27);
    v58 = v94;
    static DispatchQoS.unspecified.getter(v57);
    v101 = _swiftEmptyArrayStorage;
    v59 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v60 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v61 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v62 = v96;
    v63 = v60;
    v64 = v99;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v101, v63, v61, v99, v59);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v58, v62, v56);
    _Block_release(v56);

    swift_errorRelease(v27);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v62, v64);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v58, v98);
  }
  else
  {
    sub_1000126EC((uint64_t)v25, (uint64_t)v22, type metadata accessor for OwnedBeaconGroup);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v41 = type metadata accessor for Logger(0);
    sub_10001A9E8(v41, (uint64_t)qword_1011B7DF8);
    v42 = sub_10005972C((uint64_t)v22, (uint64_t)v20, type metadata accessor for OwnedBeaconGroup);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.default.getter(v43);
    v45 = a3;
    if (os_log_type_enabled(v43, v44))
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = (void **)swift_slowAlloc(32, -1);
      v85 = v22;
      v48 = v47;
      aBlock = v47;
      *(_DWORD *)v46 = 136315138;
      v91 = v11;
      v49 = sub_10036F350();
      v101 = (_QWORD *)sub_100016940(v49, v50, (uint64_t *)&aBlock);
      v11 = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &aBlock, v46 + 4, v46 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v20, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Successfully set FMN status for %s", v46, 0xCu);
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      v51 = v48;
      v22 = v85;
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v46, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v20, type metadata accessor for OwnedBeaconGroup);
    }

    if ((v92 & 1) != 0)
    {
      v65 = v89;
      v66 = *(_QWORD *)(v90 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_bluetoothCommunicatorCoordinator);
      v68 = (uint64_t)v87;
      v67 = v88;
      (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v87, &v22[*(int *)(v86 + 28)], v89);
      v69 = swift_allocObject(&unk_101079E60, 32, 7);
      *(_QWORD *)(v69 + 16) = v45;
      *(_QWORD *)(v69 + 24) = v100;
      v70 = *(char **)(v66 + 24);
      swift_retain();
      swift_retain();
      sub_100E10414(v68, v70, (void (*)(_QWORD))sub_1004D63D4, v69);
      swift_release_n(v69, 2);
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v68, v65);
      return sub_1000126B0((uint64_t)v22, type metadata accessor for OwnedBeaconGroup);
    }
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v72 = v93;
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v93, enum case for DispatchQoS.QoSClass.default(_:), v10);
    v73 = (void *)static OS_dispatch_queue.global(qos:)(v72);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
    v74 = swift_allocObject(&unk_101079E10, 32, 7);
    v75 = v100;
    *(_QWORD *)(v74 + 16) = v45;
    *(_QWORD *)(v74 + 24) = v75;
    v106 = sub_1002E3C58;
    v107 = (_QWORD *)v74;
    aBlock = _NSConcreteStackBlock;
    v103 = 1107296256;
    v104 = sub_100016FB8;
    v105 = &unk_101079E28;
    v76 = _Block_copy(&aBlock);
    v77 = swift_retain();
    v78 = v94;
    static DispatchQoS.unspecified.getter(v77);
    v101 = _swiftEmptyArrayStorage;
    v79 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v80 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v81 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v82 = v96;
    v83 = v80;
    v84 = v99;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v101, v83, v81, v99, v79);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v78, v82, v76);
    _Block_release(v76);

    (*(void (**)(char *, uint64_t))(v97 + 8))(v82, v84);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v78, v98);
    sub_1000126B0((uint64_t)v22, type metadata accessor for OwnedBeaconGroup);
  }
  return swift_release();
}

uint64_t sub_10047FF10(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t aBlock[6];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v43 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v42 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v8 - 8);
  v41 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v15 = type metadata accessor for Logger(0);
    sub_10001A9E8(v15, (uint64_t)qword_1011B7DF8);
    swift_errorRetain(a1);
    v16 = swift_errorRetain(a1);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v37 = a2;
      v19 = swift_slowAlloc(12, -1);
      v38 = a3;
      v20 = (uint8_t *)v19;
      v36 = swift_slowAlloc(32, -1);
      v44 = a1;
      aBlock[0] = v36;
      v39 = v6;
      *(_DWORD *)v20 = 136446210;
      v35 = v20 + 4;
      swift_errorRetain(a1);
      v21 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v22 = String.init<A>(describing:)(&v44, v21);
      v44 = (_QWORD *)sub_100016940(v22, v23, aBlock);
      v6 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, aBlock, v35, v20 + 12);
      a2 = v37;
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "fakeClassicPairing failed due to %{public}s", v20, 0xCu);
      v24 = v36;
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      v25 = v20;
      a3 = v38;
      swift_slowDealloc(v25, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
  v26 = (void *)static OS_dispatch_queue.global(qos:)(v14);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v27 = swift_allocObject(&unk_101079E88, 32, 7);
  *(_QWORD *)(v27 + 16) = a2;
  *(_QWORD *)(v27 + 24) = a3;
  aBlock[4] = (uint64_t)sub_1002A3AD4;
  aBlock[5] = v27;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100016FB8;
  aBlock[3] = (uint64_t)&unk_101079EA0;
  v28 = _Block_copy(aBlock);
  v29 = swift_retain();
  static DispatchQoS.unspecified.getter(v29);
  v44 = _swiftEmptyArrayStorage;
  v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v33 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v44, v31, v32, v6, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v33, v28);
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v43 + 8))(v33, v6);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v41);
  return swift_release();
}

uint64_t sub_100480358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  unint64_t v7;

  v6[19] = a5;
  v6[20] = a6;
  v6[17] = a3;
  v6[18] = a4;
  v6[15] = a1;
  v6[16] = a2;
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FCA38) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[21] = swift_task_alloc(v7);
  v6[22] = swift_task_alloc(v7);
  return swift_task_switch(sub_1004803CC, 0, 0);
}

uint64_t sub_1004803CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBCB8 + dword_1010EBCB8);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBCBC);
    *(_QWORD *)(v0 + 184) = v3;
    *v3 = v0;
    v3[1] = sub_1004804CC;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004804CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100480528, 0, 0);
}

uint64_t sub_100480528()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void (*v9)(void);
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 192))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_1010FC6C4);
    *(_QWORD *)(v0 + 200) = v2;
    *v2 = v0;
    v2[1] = sub_1004806A4;
    return sub_1004511E0(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6F48);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing OwnerCommandManager service to connect!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(void (**)(void))(v0 + 128);

    v10 = sub_10028FA08();
    v11 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v10, 0, 0);
    *v12 = 11;
    v9();
    swift_errorRelease(v11);
    v13 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1004806A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10048081C;
  else
    v3 = sub_100480708;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100480708()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 168);
  sub_10000F9B8(*(_QWORD *)(v0 + 176), v1, &qword_1010FCA38);
  v2 = type metadata accessor for OwnerCommandManager.Error(0);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  v4 = *(_QWORD *)(v0 + 168);
  if (v3 == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 168), &qword_1010FCA38);
    v5 = 0;
  }
  else
  {
    v6 = sub_100006204(&qword_1010FCA40, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_100E3F1F0);
    v5 = swift_allocError(v2, v6, 0, 0);
    sub_1000126EC(v4, v7, type metadata accessor for OwnerCommandManager.Error);
  }
  v8 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t))(v0 + 128))(v5);
  swift_errorRelease(v5);
  swift_release();
  sub_100004048(v8, &qword_1010FCA38);
  v9 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10048081C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(void (**)(uint64_t))(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 192));
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  v3 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10048088C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;

  v4[17] = a3;
  v4[18] = a4;
  v4[15] = a1;
  v4[16] = a2;
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FCA38) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[19] = swift_task_alloc(v5);
  v4[20] = swift_task_alloc(v5);
  return swift_task_switch(sub_1004808FC, 0, 0);
}

uint64_t sub_1004808FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBCB8 + dword_1010EBCB8);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBCBC);
    *(_QWORD *)(v0 + 168) = v3;
    *v3 = v0;
    v3[1] = sub_1004809FC;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004809FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100480A58, 0, 0);
}

uint64_t sub_100480A58()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void (*v9)(void);
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 176))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_1010FC6DC);
    *(_QWORD *)(v0 + 184) = v2;
    *v2 = v0;
    v2[1] = sub_100480BD0;
    return sub_100452CA4(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6F48);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing OwnerCommandManager service to disconnect!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(void (**)(void))(v0 + 128);

    v10 = sub_10028FA08();
    v11 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v10, 0, 0);
    *v12 = 11;
    v9();
    swift_errorRelease(v11);
    v13 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100480BD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100480D48;
  else
    v3 = sub_100480C34;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100480C34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 152);
  sub_10000F9B8(*(_QWORD *)(v0 + 160), v1, &qword_1010FCA38);
  v2 = type metadata accessor for OwnerCommandManager.Error(0);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  v4 = *(_QWORD *)(v0 + 152);
  if (v3 == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 152), &qword_1010FCA38);
    v5 = 0;
  }
  else
  {
    v6 = sub_100006204(&qword_1010FCA40, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_100E3F1F0);
    v5 = swift_allocError(v2, v6, 0, 0);
    sub_1000126EC(v4, v7, type metadata accessor for OwnerCommandManager.Error);
  }
  v8 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t))(v0 + 128))(v5);
  swift_errorRelease(v5);
  swift_release();
  sub_100004048(v8, &qword_1010FCA38);
  v9 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100480D48()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(void (**)(uint64_t))(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 176));
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  v3 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100480DB8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int EnumCaseMultiPayload;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char isUniquelyReferenced_nonNull_native;
  uint64_t My;
  _QWORD *v48;
  char v49;
  int v50;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD v69[6];
  uint64_t v70;

  v7 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v7);
  v68 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v64);
  v65 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for OwnedBeaconRecord(0);
  v10 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v66 = (uint64_t)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v12);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OwnedBeaconGroup(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100030784(a1, (uint64_t)v69);
  v19 = sub_10001A9A8(&qword_101108FB0);
  v20 = swift_dynamicCast(v14, v69, v19, v15, 6);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if ((v20 & 1) != 0)
  {
    v21(v14, 0, 1, v15);
    sub_1000126EC((uint64_t)v14, (uint64_t)v18, type metadata accessor for OwnedBeaconGroup);
    sub_10036AC6C();
    v23 = v22;
    v24 = *(_QWORD *)(a2 + 280);
    swift_retain();
    sub_10028B45C(v23);
    v26 = v25;
    swift_release(v24);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v26 + 16))
    {
      v55 = v18;
      v56 = v15;
      v57 = a3;
      v58 = v3;
      v62 = v26 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      v27 = v26;
      v28 = (uint64_t)v65;
      v29 = *(_QWORD *)(v10 + 72);
      v60 = v65 + 8;
      v61 = v29;
      v54 = v27;
      swift_bridgeObjectRetain(v27);
      v30 = v66;
      sub_10005972C(v62, v66, type metadata accessor for OwnedBeaconRecord);
      v31 = v63;
      sub_10005972C(v30 + *(int *)(v63 + 24), v28, type metadata accessor for StableIdentifier);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v28, v64);
      if (EnumCaseMultiPayload == 3)
      {
        sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        if (EnumCaseMultiPayload != 2)
        {
          sub_1000126B0(v28, type metadata accessor for StableIdentifier);
          goto LABEL_25;
        }
        sub_10001A9A8(&qword_101106F40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v33 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v28, v33);
      sub_1001EE37C(*(_QWORD *)(v30 + *(int *)(v31 + 64)), *(_QWORD *)(v30 + *(int *)(v31 + 68)));
      if (v34 >> 60 != 15)
      {
        v35 = v34;
        v67 = 1;
        v36 = Set.init(minimumCapacity:)(2);
        v37 = 0;
        v38 = v36 + 56;
        while (1)
        {
          v39 = (uint64_t)*(&off_101048648 + v37 + 4);
          v40 = v37 + 1;
          v41 = static Hasher._hash(seed:_:)(*(_QWORD *)(v36 + 40), v39);
          v42 = -1 << *(_BYTE *)(v36 + 32);
          v43 = v41 & ~v42;
          if (((*(_QWORD *)(v38 + ((v43 >> 3) & 0xFFFFFFFFFFFFF8)) >> v43) & 1) == 0)
            goto LABEL_16;
          v44 = *(_QWORD *)(v36 + 48);
          if (*(_QWORD *)(v44 + 8 * v43) == v39)
          {
LABEL_9:
            v37 = 1;
            if (v40 == 2)
              goto LABEL_18;
          }
          else
          {
            v45 = ~v42;
            while (1)
            {
              v43 = (v43 + 1) & v45;
              if (((*(_QWORD *)(v38 + ((v43 >> 3) & 0xFFFFFFFFFFFFF8)) >> v43) & 1) == 0)
                break;
              if (*(_QWORD *)(v44 + 8 * v43) == v39)
                goto LABEL_9;
            }
LABEL_16:
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v36);
            v70 = v36;
            sub_100A1CF0C(v39, v43, isUniquelyReferenced_nonNull_native);
            v36 = v70;
            swift_bridgeObjectRelease();
            v37 = 1;
            if (v40 == 2)
            {
LABEL_18:
              v69[0] = v36;
              sub_100A0A1F4(&v70, 8216);
              __asm { BR              X9 }
            }
            v38 = v36 + 56;
          }
        }
      }
LABEL_25:
      sub_1000126B0(v30, type metadata accessor for OwnedBeaconRecord);
      swift_bridgeObjectRelease_n(v54, 2);
      v52 = v55[*(int *)(v56 + 32)];
      sub_1000126B0((uint64_t)v55, type metadata accessor for OwnedBeaconGroup);
      LOBYTE(a3) = v57;
      if ((v52 & 1) == 0)
        return a3 & 1;
      goto LABEL_22;
    }
    swift_bridgeObjectRelease();
    My = type metadata accessor for Feature.FindMy(0);
    v69[3] = My;
    v69[4] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v48 = sub_100018F08(v69);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v48, enum case for Feature.FindMy.alphaWasp(_:), My);
    v49 = isFeatureEnabled(_:)(v69);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v69);
    v50 = v18[*(int *)(v15 + 32)];
    sub_1000126B0((uint64_t)v18, type metadata accessor for OwnedBeaconGroup);
    if (v50 == 1 && (v49 & 1) != 0)
LABEL_22:
      LOBYTE(a3) = 1;
  }
  else
  {
    LOBYTE(a3) = 1;
    v21(v14, 1, 1, v15);
    sub_100004048((uint64_t)v14, (uint64_t *)&unk_1010FF7F0);
  }
  return a3 & 1;
}

uint64_t sub_1004815B8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD aBlock[6];

  v27 = a1;
  v28 = a2;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v6 - 8);
  v30 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static os_log_type_t.info.getter(v7);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v11 = qword_1011B7D28;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v13 = swift_allocObject(v12, 112, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E22B10;
  aBlock[0] = *v2;
  v14 = sub_10001A9A8(&qword_1010F49B8);
  v15 = String.init<A>(describing:)(aBlock, v14);
  v17 = v16;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  v18 = sub_10001AA00();
  *(_QWORD *)(v13 + 32) = v15;
  *(_QWORD *)(v13 + 40) = v17;
  *(_QWORD *)(v13 + 96) = &type metadata for String;
  *(_QWORD *)(v13 + 104) = v18;
  *(_QWORD *)(v13 + 64) = v18;
  *(_QWORD *)(v13 + 72) = 0xD00000000000001DLL;
  *(_QWORD *)(v13 + 80) = 0x8000000100ED7590;
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "%@: %@", 6, 2, v13);
  swift_bridgeObjectRelease();
  v19 = (_QWORD *)swift_allocObject(&unk_1010791E0, 40, 7);
  v20 = v28;
  v19[2] = v27;
  v19[3] = v20;
  v19[4] = v2;
  aBlock[4] = sub_1004D0384;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010791F8;
  v21 = _Block_copy(aBlock);
  swift_retain();
  v22 = swift_retain();
  static DispatchQoS.unspecified.getter(v22);
  v32 = _swiftEmptyArrayStorage;
  v23 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v25 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v24, v25, v3, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v30);
  return swift_release();
}

uint64_t sub_1004818A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v7 = qword_1011B7D50;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  v10 = UUID.uuidString.getter(v9);
  v12 = v11;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 40) = v12;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "#Durian: Command fetchFirmwareVersion identifier: %@", 52, 2, v9);
  swift_bridgeObjectRelease();
  sub_100668290(a1);
  v13 = swift_allocObject(&unk_101078C18, 32, 7);
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  swift_retain();
  Future.addSuccess(block:)(sub_1004CFF4C, v13);
  swift_release();
  swift_release();
  v14 = swift_allocObject(&unk_101078C40, 32, 7);
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)(sub_1004CFF74, v14);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100481A4C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t i;
  uint64_t v43;
  Swift::UInt v44;
  Swift::Int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  BOOL v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(char *, uint64_t, uint64_t);
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t *v88;
  uint64_t v89;
  double v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  void *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  _QWORD v120[3];
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;

  v110 = a2;
  v3 = type metadata accessor for BeaconObservation(0);
  v116 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v98 = (uint64_t)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v107 = (uint64_t)&v96 - v7;
  v8 = __chkstk_darwin(v6);
  v101 = (char *)&v96 - v9;
  v10 = __chkstk_darwin(v8);
  v115 = (uint64_t)&v96 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v96 - v12;
  v14 = sub_10001A9A8(&qword_1010EF660);
  v15 = __chkstk_darwin(v14);
  v103 = (uint64_t)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v100 = (uint64_t)&v96 - v18;
  v19 = __chkstk_darwin(v17);
  v109 = (char *)&v96 - v20;
  v21 = __chkstk_darwin(v19);
  v99 = (uint64_t)&v96 - v22;
  v23 = __chkstk_darwin(v21);
  v104 = (uint64_t)&v96 - v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v96 - v25;
  if (qword_1010E9CF0 != -1)
LABEL_48:
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v27 = qword_1011B7160;
  v108 = objc_autoreleasePoolPush();
  v28 = sub_10001A9A8(&qword_1010F7770);
  OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v27, v28);
  v105 = 0;
  v29 = v120[0];
  v30 = *(_QWORD *)(v120[0] + 16);
  v106 = a1;
  if (v30 && (v31 = sub_100003FB0((uint64_t)a1), (v32 & 1) != 0))
  {
    v33 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v31);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRelease();
    v34 = sub_100508D98(v33);
    swift_bridgeObjectRelease();
    sub_10088FD00((uint64_t)v34);
    v36 = v35;
    swift_release();
    v37 = _swiftEmptyArrayStorage;
    *(_QWORD *)&v123 = _swiftEmptyArrayStorage;
    v114 = *(_QWORD *)(v36 + 16);
    if (v114)
    {
      v97 = v26;
      v38 = 0;
      v26 = (char *)&off_101048338;
      a1 = qword_100E3F5A0;
      v113 = v3;
      v112 = v13;
      v111 = v36;
      while (1)
      {
        if (v38 >= *(_QWORD *)(v36 + 16))
        {
          __break(1u);
          goto LABEL_48;
        }
        v39 = *(_QWORD *)(v116 + 72);
        v118 = (*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80);
        v119 = v38 + 1;
        v117 = v39;
        sub_10005972C(v36 + v118 + v39 * v38, (uint64_t)v13, type metadata accessor for BeaconObservation);
        sub_100374684();
        v40 = Set.init(minimumCapacity:)(2);
        v41 = 0;
        for (i = v40 + 56; ; i = v40 + 56)
        {
          while (1)
          {
            v43 = *((char *)&off_101048338 + v41++ + 32);
            Hasher.init(_seed:)(v120);
            v44 = qword_100E3F5A0[v43];
            Hasher._combine(_:)(v44);
            v45 = Hasher._finalize()();
            v46 = -1 << *(_BYTE *)(v40 + 32);
            v47 = v45 & ~v46;
            if (((*(_QWORD *)(i + ((v47 >> 3) & 0xFFFFFFFFFFFFF8)) >> v47) & 1) == 0)
              goto LABEL_17;
            v48 = *(_QWORD *)(v40 + 48);
            if (qword_100E3F5A0[*(char *)(v48 + v47)] != v44)
              break;
LABEL_10:
            if (v41 == 2)
              goto LABEL_19;
          }
          v49 = ~v46;
          while (1)
          {
            v47 = (v47 + 1) & v49;
            if (((*(_QWORD *)(i + ((v47 >> 3) & 0xFFFFFFFFFFFFF8)) >> v47) & 1) == 0)
              break;
            if (qword_100E3F5A0[*(char *)(v48 + v47)] == v44)
              goto LABEL_10;
          }
LABEL_17:
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v40);
          v120[0] = v40;
          sub_100A1F790(v43, v47, isUniquelyReferenced_nonNull_native);
          v40 = v120[0];
          swift_bridgeObjectRelease();
          if (v41 == 2)
            break;
        }
LABEL_19:
        v3 = v113;
        v13 = v112;
        v51 = sub_100A07E5C(v112[*(int *)(v113 + 24)], v40);
        swift_bridgeObjectRelease();
        if (v51)
        {
          sub_1000126EC((uint64_t)v13, v115, type metadata accessor for BeaconObservation);
          v52 = v123;
          if ((swift_isUniquelyReferenced_nonNull_native(v123) & 1) == 0)
          {
            sub_10009AAC8(0, *(_QWORD *)(v52 + 16) + 1, 1);
            v52 = v123;
          }
          v54 = *(_QWORD *)(v52 + 16);
          v53 = *(_QWORD *)(v52 + 24);
          if (v54 >= v53 >> 1)
          {
            sub_10009AAC8(v53 > 1, v54 + 1, 1);
            v52 = v123;
          }
          *(_QWORD *)(v52 + 16) = v54 + 1;
          sub_1000126EC(v115, v52 + v118 + v54 * v117, type metadata accessor for BeaconObservation);
        }
        else
        {
          sub_1000126B0((uint64_t)v13, type metadata accessor for BeaconObservation);
        }
        v36 = v111;
        v38 = v119;
        if (v119 == v114)
        {
          v37 = (_QWORD *)v123;
          v26 = v97;
          break;
        }
      }
    }
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v37 = _swiftEmptyArrayStorage;
  }
  v55 = (uint64_t)v109;
  objc_autoreleasePoolPop(v108);
  sub_100A797E8((uint64_t)v37, (uint64_t)v26);
  swift_bridgeObjectRelease();
  v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v116 + 48);
  v57 = v56(v26, 1, v3);
  if (v110 <= 1)
  {
    sub_10000F9B8((uint64_t)v26, v55, &qword_1010EF660);
    if (v57 == 1)
    {
      sub_100004048(v55, &qword_1010EF660);
    }
    else
    {
      v59 = v100;
      sub_100005CF0(v55, v100, &qword_1010EF660);
      if (v56((char *)v59, 1, v3) == 1)
        goto LABEL_37;
      v71 = v59;
      v72 = *(unsigned __int8 *)(v59 + *(int *)(v3 + 24));
      sub_1000126B0(v71, type metadata accessor for BeaconObservation);
      if (v72 != 30)
        return sub_100004048((uint64_t)v26, &qword_1010EF660);
    }
    v73 = (uint64_t)v26;
    v74 = type metadata accessor for UUID(0);
    v75 = v107;
    v76 = (uint64_t)v106;
    v77 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v107, v106, v74);
    Date.init()(v77);
    *(_BYTE *)(v75 + *(int *)(v3 + 24)) = 31;
    v78 = qword_1011B7160;
    v79 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
    v80 = *(unsigned __int8 *)(v116 + 80);
    v81 = (v80 + 32) & ~v80;
    v82 = swift_allocObject(v79, v81 + *(_QWORD *)(v116 + 72), v80 | 7);
    *(_OWORD *)(v82 + 16) = xmmword_100E22B00;
    sub_10005972C(v75, v82 + v81, type metadata accessor for BeaconObservation);
    v83 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v83);
    *(&v96 - 4) = v78;
    *(&v96 - 3) = v82;
    *(&v96 - 2) = 0;
    *(&v96 - 1) = 0;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001514CC, &v96 - 6, (char *)&type metadata for () + 8);
    swift_bridgeObjectRelease();
    v84 = *(_QWORD *)(v102 + 280);
    sub_10080B648(v76, (uint64_t)&v123);
    if (v124)
    {
      sub_10000F9FC(&v123, (uint64_t)v120);
      v85 = v121;
      v86 = v122;
      v87 = sub_10001AA44(v120, v121);
      v88 = sub_100854C8C((uint64_t)v87, v84, v85, v86);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v120);
    }
    else
    {
      sub_100004048((uint64_t)&v123, (uint64_t *)&unk_1010EE310);
      v88 = 0;
    }
    v89 = v103;
    sub_10000F9B8(v73, v103, &qword_1010EF660);
    if (v56((char *)v89, 1, v3) == 1)
    {
      sub_100004048(v89, &qword_1010EF660);
      v90 = 0.0;
    }
    else
    {
      v91 = v98;
      v92 = sub_1000126EC(v89, v98, type metadata accessor for BeaconObservation);
      v90 = fabs(Date.timeIntervalSinceNow.getter(v92));
      sub_1000126B0(v91, type metadata accessor for BeaconObservation);
    }
    v93 = swift_allocObject(&unk_101078DD0, 32, 7);
    *(double *)(v93 + 16) = v90;
    *(_QWORD *)(v93 + 24) = v88;
    v94 = v88;
    static Transaction.asyncTask(name:block:)("MultiConnectionAnalytics", 24, 2, &unk_1010FD088, v93);

    swift_release();
    sub_1000126B0(v107, type metadata accessor for BeaconObservation);
    v26 = (char *)v73;
    return sub_100004048((uint64_t)v26, &qword_1010EF660);
  }
  v58 = v104;
  sub_10000F9B8((uint64_t)v26, v104, &qword_1010EF660);
  if (v57 == 1)
  {
    sub_100004048(v58, &qword_1010EF660);
LABEL_35:
    v62 = type metadata accessor for UUID(0);
    v63 = (uint64_t)v101;
    v64 = (*(uint64_t (**)(char *, void *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v101, v106, v62);
    Date.init()(v64);
    *(_BYTE *)(v63 + *(int *)(v3 + 24)) = 30;
    v65 = qword_1011B7160;
    v66 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
    v67 = *(unsigned __int8 *)(v116 + 80);
    v68 = (v67 + 32) & ~v67;
    v69 = swift_allocObject(v66, v68 + *(_QWORD *)(v116 + 72), v67 | 7);
    *(_OWORD *)(v69 + 16) = xmmword_100E22B00;
    sub_10005972C(v63, v69 + v68, type metadata accessor for BeaconObservation);
    v70 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v70);
    *(&v96 - 4) = v65;
    *(&v96 - 3) = v69;
    *(&v96 - 2) = 0;
    *(&v96 - 1) = 0;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, &v96 - 6, (char *)&type metadata for () + 8);
    swift_bridgeObjectRelease();
    sub_1000126B0(v63, type metadata accessor for BeaconObservation);
    return sub_100004048((uint64_t)v26, &qword_1010EF660);
  }
  v59 = v99;
  sub_100005CF0(v58, v99, &qword_1010EF660);
  if (v56((char *)v59, 1, v3) == 1)
  {
LABEL_37:
    sub_100004048(v59, &qword_1010EF660);
    return sub_100004048((uint64_t)v26, &qword_1010EF660);
  }
  v60 = v59;
  v61 = *(unsigned __int8 *)(v59 + *(int *)(v3 + 24));
  sub_1000126B0(v60, type metadata accessor for BeaconObservation);
  if (v61 == 31)
    goto LABEL_35;
  return sub_100004048((uint64_t)v26, &qword_1010EF660);
}

uint64_t sub_100482528(uint64_t a1, double a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(double *)(v2 + 16) = a2;
  return swift_task_switch(sub_100482544, 0, 0);
}

uint64_t sub_100482544()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);
  id v8;

  v1 = *(void **)(v0 + 24);
  v2 = type metadata accessor for AnalyticsEvent(0);
  v3 = (char *)swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(_QWORD *)(v0 + 32) = v3;
  swift_defaultActor_initialize(v3);
  v4 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v3 + 14) = v4;
  UUID.init()(v4);
  v5 = &v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v7(&v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v6);
  *((_QWORD *)v3 + 15) = 0xD00000000000003DLL;
  *((_QWORD *)v3 + 16) = 0x8000000100ED72F0;
  v8 = v1;
  return swift_task_switch(sub_100482648, v3, 0);
}

uint64_t sub_100482648()
{
  uint64_t v0;

  sub_100CE5478(*(_QWORD *)(v0 + 32), *(void **)(v0 + 24), *(double *)(v0 + 16));

  return swift_task_switch(sub_1004826B4, 0, 0);
}

uint64_t sub_1004826B4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[5] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[6] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_100482720;
  return sub_100CD63AC(v0[4]);
}

uint64_t sub_100482720()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_release();
  return swift_task_switch(sub_10048277C, 0, 0);
}

uint64_t sub_10048277C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1004827AC(void *a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t inited;
  unint64_t v10;
  id v11;
  id result;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  id v19;
  char v20;
  unint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  id v31;
  id v32;
  _BOOL8 v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  id v38;
  void *v39;
  id v40;
  NSString v41;
  char v42;
  id v43;
  unsigned int v44;
  id v45;
  uint64_t v46;
  NSString v47;
  char v48;
  id v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  char v54[96];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EEBD0);
  inited = swift_initStackObject(v8, v54);
  *(_OWORD *)(inited + 16) = xmmword_100E22B10;
  *(_QWORD *)(inited + 32) = 0xD000000000000016;
  *(_QWORD *)(inited + 40) = 0x8000000100ED7330;
  *(_QWORD *)(inited + 48) = 0;
  *(_BYTE *)(inited + 56) = 1;
  *(_QWORD *)(inited + 64) = 0x6E6F697461727564;
  *(_QWORD *)(inited + 72) = 0xE800000000000000;
  *(_QWORD *)(inited + 80) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", a2);
  *(_BYTE *)(inited + 88) = 0;
  v10 = sub_1006B9444(inited);
  if (!a1)
    return (id)v10;
  v11 = a1;
  result = objc_msgSend(v11, "systemVersion");
  if (result)
  {
    v13 = (uint64_t)result;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
    v53 = v10;
    sub_10010AC08(v13, 0, 0xD000000000000013, 0x8000000100ED0EC0, isUniquelyReferenced_nonNull_native);
    v15 = v53;
    swift_bridgeObjectRelease();
    result = objc_msgSend(v11, "systemVersion");
    if (result)
    {
      v16 = (uint64_t)result;
      v17 = swift_isUniquelyReferenced_nonNull_native(v15);
      v53 = v15;
      sub_10010AC08(v16, 0, 0xD00000000000001BLL, 0x8000000100ED0EE0, v17);
      v18 = v53;
      swift_bridgeObjectRelease();
      v19 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", objc_msgSend(v11, "batteryLevel"));
      v20 = swift_isUniquelyReferenced_nonNull_native(v18);
      v53 = v18;
      sub_10010AC08((uint64_t)v19, 0, 0x4C79726574746162, 0xEC0000006C657665, v20);
      v21 = v53;
      swift_bridgeObjectRelease();
      v22 = SPBeaconTaskNameBeginLeashing;
      v23 = objc_msgSend(v11, "taskInformation");
      type metadata accessor for SPBeaconTaskName(0);
      v25 = v24;
      v26 = sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
      v27 = sub_100006204(&qword_1010EB5D0, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_100E21E64);
      v28 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v23, v25, v26, v27);

      if (*(_QWORD *)(v28 + 16) && (v29 = sub_100519464(v22), (v30 & 1) != 0))
      {
        v31 = *(id *)(*(_QWORD *)(v28 + 56) + 8 * v29);

        swift_bridgeObjectRelease();
        v32 = objc_msgSend(v31, "state");

        v33 = v32 == 0;
      }
      else
      {

        swift_bridgeObjectRelease();
        v33 = 0;
      }
      v34 = swift_isUniquelyReferenced_nonNull_native(v21);
      v53 = v21;
      sub_10010AC08(v33, 1, 0x6563697665447369, 0xEF6465687361654CLL, v34);
      v35 = v53;
      swift_bridgeObjectRelease();
      v36 = objc_msgSend(v11, "connected");
      v37 = swift_isUniquelyReferenced_nonNull_native(v35);
      v53 = v35;
      sub_10010AC08(v36, 1, 0xD000000000000011, 0x8000000100ECAF20, v37);
      v10 = v53;
      swift_bridgeObjectRelease();
      v38 = objc_msgSend(v11, "role");
      if (v38)
      {
        v39 = v38;
        v40 = objc_msgSend(v38, "role");

        static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
        v41 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v42 = swift_isUniquelyReferenced_nonNull_native(v10);
        v53 = v10;
        sub_10010AC08((uint64_t)v41, 0, 1701605234, 0xE400000000000000, v42);
        v10 = v53;
        swift_bridgeObjectRelease();
      }
      v43 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
      v44 = objc_msgSend(v43, "isInternalBuild");

      if (!v44)
        goto LABEL_13;
      v45 = objc_msgSend(v11, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v45);

      UUID.uuidString.getter(v46);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v47 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v48 = swift_isUniquelyReferenced_nonNull_native(v10);
      v53 = v10;
      sub_10010AC08((uint64_t)v47, 0, 0x6544646572696170, 0xEE00444965636976, v48);
      v10 = v53;
      swift_bridgeObjectRelease();
      v49 = objc_msgSend(v11, "serialNumber");
      if (v49)
      {
        v50 = (uint64_t)v49;
        v51 = swift_isUniquelyReferenced_nonNull_native(v10);
        v53 = v10;
        sub_10010AC08(v50, 0, 0xD000000000000018, 0x8000000100ECAF40, v51);
        v10 = v53;

        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_13:

      }
      return (id)v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_100482DA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int16 v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  NSUUID v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  id v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  char v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  id v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  NSDate v77;
  void *v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v83;
  char *v84;
  __int128 v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110[2];

  v2 = v1;
  v4 = type metadata accessor for WildModeAssociationRecord(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010ED860);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v83 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v83 - v14;
  v16 = type metadata accessor for Date(0);
  v101 = *(_QWORD *)(v16 - 8);
  v102 = v16;
  v17 = __chkstk_darwin(v16);
  v92 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v83 - v19;
  v21 = sub_100D81FEC(a1);
  v22 = sub_100C6C1A0(v21);
  v96 = *((_QWORD *)v22 + 2);
  if (!v96)
  {
    swift_bridgeObjectRelease();
    return &_swiftEmptyDictionarySingleton;
  }
  v24 = 0;
  v98 = 0;
  v25 = &_swiftEmptyDictionarySingleton;
  v89 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager;
  v86 = &v109;
  v93 = SPBeaconTaskNamePlaySound;
  *(_QWORD *)&v23 = 136315394;
  v85 = v23;
  v84 = (char *)&type metadata for Any + 8;
  v95 = v6;
  v90 = v13;
  v106 = v20;
  v87 = a1;
  v91 = v10;
  v100 = v15;
  v94 = v22;
  do
  {
    v105 = v24;
    v33 = *(id *)&v22[8 * v24 + 32];
    static Date.trustedNow.getter((uint64_t)v20);
    v34 = type metadata accessor for UUID(0);
    v103 = *(_QWORD *)(v34 - 8);
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v103 + 56);
    v107 = v34;
    v99 = v35;
    ((void (*)(char *, uint64_t, uint64_t))v35)(v15, 1, 1);
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
    v38 = v37;
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v41 = v36 == v39 && v38 == v40;
    v104 = (uint64_t)v25;
    if (v41)
    {
      v43 = swift_bridgeObjectRelease_n(v38, 2);
    }
    else
    {
      v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v39, v40, 0);
      swift_bridgeObjectRelease();
      v43 = swift_bridgeObjectRelease();
      if ((v42 & 1) == 0)
      {
        v44 = 0;
        v45 = 2;
        goto LABEL_21;
      }
    }
    v97 = v33;
    __chkstk_darwin(v43);
    *(&v83 - 2) = v46;
    *(&v83 - 1) = a1;
    v47 = sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
    v48 = v98;
    OS_dispatch_queue.sync<A>(execute:)(sub_1004D6594, &v83 - 4, v47);
    v98 = v48;
    v49 = (void *)v110[0];
    if (qword_1010E9D28 != -1)
      swift_once(&qword_1010E9D28, sub_1005D439C);
    v50 = type metadata accessor for Logger(0);
    sub_10001A9E8(v50, (uint64_t)qword_1011B71E0);
    sub_10005972C(a1, (uint64_t)v6, type metadata accessor for WildModeAssociationRecord);
    v51 = v49;
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.info.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint64_t)v6;
      v55 = swift_slowAlloc(22, -1);
      v88 = swift_slowAlloc(64, -1);
      v110[0] = v88;
      *(_DWORD *)v55 = v85;
      v56 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v57 = dispatch thunk of CustomStringConvertible.description.getter(v107, v56);
      v108 = sub_100016940(v57, v58, v110);
      v59 = v86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v86, v55 + 4, v55 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v54, type metadata accessor for WildModeAssociationRecord);
      *(_WORD *)(v55 + 12) = 2080;
      v60 = objc_msgSend(v51, "debugDescription");
      v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
      v62 = v2;
      v64 = v63;

      a1 = v87;
      v108 = sub_100016940(v61, v64, v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v59, v55 + 14, v55 + 22);

      v2 = v62;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "UT Play taskInfo for %s: %s", (uint8_t *)v55, 0x16u);
      v65 = v88;
      swift_arrayDestroy(v88, 2, v84);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v55, -1, -1);

    }
    else
    {
      sub_1000126B0((uint64_t)v6, type metadata accessor for WildModeAssociationRecord);

    }
    v66 = (uint64_t)v90;
    v10 = v91;
    v45 = (uint64_t)objc_msgSend(v51, "state");
    v67 = objc_msgSend(v51, "lastUpdated");
    v68 = v92;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v67);

    v70 = v101;
    v69 = v102;
    v71 = v106;
    (*(void (**)(char *, uint64_t))(v101 + 8))(v106, v102);
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v71, v68, v69);
    v44 = objc_msgSend(v51, "error");
    v72 = objc_msgSend(v51, "commandIdentifier");
    if (v72)
    {
      v73 = v72;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v72);

      v74 = 0;
      v51 = v73;
    }
    else
    {
      v74 = 1;
    }
    v33 = v97;

    v75 = (uint64_t)v100;
    sub_100004048((uint64_t)v100, &qword_1010ED860);
    v99(v66, v74, 1, v107);
    sub_100005CF0(v66, v75, &qword_1010ED860);
LABEL_21:
    v76 = v33;
    swift_errorRetain(v44);
    v77.super.isa = Date._bridgeToObjectiveC()().super.isa;
    if (v44)
    {
      v78 = (void *)_convertErrorToNSError(_:)(v44);
      swift_errorRelease(v44);
    }
    else
    {
      v78 = 0;
    }
    v79 = v107;
    v80 = objc_msgSend(objc_allocWithZone((Class)SPBeaconTaskInformation), "initWithName:lastUpdated:error:state:", v76, v77.super.isa, v78, v45);

    v15 = v100;
    sub_10000F9B8((uint64_t)v100, (uint64_t)v10, &qword_1010ED860);
    v81 = v103;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(v10, 1, v79) == 1)
    {
      v27.super.isa = 0;
    }
    else
    {
      v26 = v81;
      v27.super.isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v79);
    }
    v28 = v105 + 1;
    objc_msgSend(v80, "setCommandIdentifier:", v27.super.isa);

    v29 = v76;
    v30 = v80;
    v31 = v104;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v104);
    v110[0] = v31;
    sub_10010BBE4((uint64_t)v30, v29, isUniquelyReferenced_nonNull_native);
    v24 = v28;
    v25 = (void *)v110[0];

    swift_bridgeObjectRelease();
    swift_errorRelease(v44);
    sub_100004048((uint64_t)v15, &qword_1010ED860);
    v20 = v106;
    (*(void (**)(char *, uint64_t))(v101 + 8))(v106, v102);
    v6 = v95;
    v22 = v94;
  }
  while (v96 != v28);
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t sub_1004835AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  if (qword_1010E9CE0 != -1)
    swift_once(&qword_1010E9CE0, sub_100563220);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B7148);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v15 = v11;
    *(_DWORD *)v10 = 136446210;
    v14 = sub_100016940(0xD000000000000035, 0x8000000100ED86B0, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v10 + 4, v10 + 12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  type metadata accessor for Transaction(0);
  v12 = (_QWORD *)swift_allocObject(&unk_101079B68, 40, 7);
  v12[2] = v3;
  v12[3] = a1;
  v12[4] = a2;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconManagerService.stopFetchingUnauthorizedEncryptedPayload", 61, 2, &unk_1010FD1E0, v12);
  return swift_release();
}

uint64_t sub_100483794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[18] = a2;
  v3[19] = a3;
  v3[17] = a1;
  return swift_task_switch(sub_1004837B0, 0, 0);
}

uint64_t sub_1004837B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC88 + dword_1010EBC88);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBC8C);
    *(_QWORD *)(v0 + 160) = v3;
    *v3 = v0;
    v3[1] = sub_1004838B0;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004838B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10048390C, 0, 0);
}

uint64_t sub_10048390C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 168))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_10111F19C);
    *(_QWORD *)(v0 + 176) = v2;
    *v2 = v0;
    v2[1] = sub_100483AE0;
    return sub_100D563B8();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6F48);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v10 = v9;
      *(_DWORD *)v8 = 136446210;
      *(_QWORD *)(v0 + 120) = sub_100016940(0xD000000000000035, 0x8000000100ED86B0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v8 + 4, v8 + 12);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s Missing OwnerCommandService!", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }

    (*(void (**)(_QWORD))(v0 + 144))(0);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100483AE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100483B84;
  else
    v3 = sub_100483B44;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100483B44()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 168);
  (*(void (**)(_QWORD))(v0 + 144))(0);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100483B84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD);

  if (qword_1010E9CE0 != -1)
    swift_once(&qword_1010E9CE0, sub_100563220);
  v1 = *(_QWORD *)(v0 + 184);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7148);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 184);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 128) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error stop fetching encrypted serial number %{public}@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 184));
    swift_errorRelease(v7);
  }
  v12 = *(_QWORD *)(v0 + 184);
  v13 = *(void (**)(_QWORD))(v0 + 144);

  v13(0);
  swift_release();
  swift_errorRelease(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100483D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = v3;
  v37 = a2;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v36 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v30 - v11;
  if (qword_1010E9CE0 != -1)
    swift_once(&qword_1010E9CE0, sub_100563220);
  v13 = type metadata accessor for Logger(0);
  sub_10001A9E8(v13, (uint64_t)qword_1011B7148);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v14 = v35(v12, a1, v7);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v32 = a1;
    v18 = v17;
    v31 = swift_slowAlloc(64, -1);
    v39 = v31;
    *(_DWORD *)v18 = 136446466;
    v38 = sub_100016940(0xD000000000000030, 0x8000000100ED8730, &v39);
    v33 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v18 + 4, v18 + 12);
    *(_WORD *)(v18 + 12) = 2082;
    v34 = a3;
    v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v7, v19);
    v38 = sub_100016940(v20, v21, &v39);
    v4 = v33;
    a3 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s identifier: %{public}s", (uint8_t *)v18, 0x16u);
    v22 = v31;
    swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    v23 = v18;
    a1 = v32;
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  }

  type metadata accessor for Transaction(0);
  v24 = v36;
  v35(v36, a1, v7);
  v25 = *(unsigned __int8 *)(v8 + 80);
  v26 = (v25 + 40) & ~v25;
  v27 = (char *)swift_allocObject(&unk_101079B90, v26 + v9, v25 | 7);
  v28 = v37;
  *((_QWORD *)v27 + 2) = v4;
  *((_QWORD *)v27 + 3) = v28;
  *((_QWORD *)v27 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v27[v26], v24, v7);
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconManagerService.fetchUnauthorizedEncryptedPayload", 54, 2, &unk_1010FD1F0, v27);
  return swift_release();
}

uint64_t sub_100484090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v4[42] = a3;
  v4[43] = a4;
  v4[40] = a1;
  v4[41] = a2;
  v5 = sub_10001A9A8(&qword_101102FB0);
  v4[44] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for WildModeAssociationRecord(0);
  v4[45] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[46] = v7;
  v4[47] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010FBA40);
  v4[48] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v4[49] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[50] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[51] = swift_task_alloc(v11);
  v4[52] = swift_task_alloc(v11);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v4[53] = v12;
  v4[54] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v4[55] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[56] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[57] = swift_task_alloc(v15);
  v4[58] = swift_task_alloc(v15);
  v16 = type metadata accessor for UUID(0);
  v4[59] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v4[60] = v17;
  v18 = *(_QWORD *)(v17 + 64);
  v4[61] = v18;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[62] = swift_task_alloc(v19);
  v4[63] = swift_task_alloc(v19);
  v4[64] = swift_task_alloc(v19);
  v4[65] = swift_task_alloc(v19);
  v4[66] = swift_task_alloc(v19);
  v4[67] = swift_task_alloc(v19);
  v4[68] = swift_task_alloc(v19);
  return swift_task_switch(sub_10048424C, 0, 0);
}

uint64_t sub_10048424C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC88 + dword_1010EBC88);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBC8C);
    *(_QWORD *)(v0 + 552) = v3;
    *v3 = v0;
    v3[1] = sub_10048434C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10048434C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 552);
  *(_QWORD *)(*(_QWORD *)v1 + 560) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004843A8, 0, 0);
}

uint64_t sub_1004843A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (__cdecl *v26)();
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 560);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 160))
    {
      sub_10000F9FC((__int128 *)(v0 + 136), v0 + 96);
      sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
      v26 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC30 + dword_1010EBC30);
      v3 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
      *(_QWORD *)(v0 + 568) = v3;
      *v3 = v0;
      v3[1] = sub_100484638;
      return v26();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1010E9C18 != -1)
      swift_once(&qword_1010E9C18, sub_10044E058);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6F48);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing OwnerCommandService to fetchUnauthorizedEncryptedPayload!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 392);
    v10 = *(_QWORD *)(v0 + 400);
    v11 = *(_QWORD *)(v0 + 384);
    v12 = *(void (**)(uint64_t))(v0 + 328);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v11, 1, 1, v9);
    v12(v11);
    sub_100004048(v11, &qword_1010FBA40);
    v13 = *(_QWORD *)(v0 + 536);
    v14 = *(_QWORD *)(v0 + 528);
    v15 = *(_QWORD *)(v0 + 520);
    v17 = *(_QWORD *)(v0 + 504);
    v16 = *(_QWORD *)(v0 + 512);
    v18 = *(_QWORD *)(v0 + 496);
    v20 = *(_QWORD *)(v0 + 456);
    v19 = *(_QWORD *)(v0 + 464);
    v21 = *(_QWORD *)(v0 + 432);
    v22 = *(_QWORD *)(v0 + 416);
    v23 = *(_QWORD *)(v0 + 408);
    v24 = *(_QWORD *)(v0 + 384);
    v25 = *(_QWORD *)(v0 + 376);
    v27 = *(_QWORD *)(v0 + 352);
    swift_task_dealloc(*(_QWORD *)(v0 + 544));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_100484638(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 568);
  *(_QWORD *)(*(_QWORD *)v1 + 576) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100484694, 0, 0);
}

uint64_t sub_100484694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  void (*v69)(uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  os_log_type_t type[8];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v1 = *(_QWORD *)(v0 + 576);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
  if (v1)
  {
    if (qword_1010E9CE0 != -1)
      swift_once(&qword_1010E9CE0, sub_100563220);
    v2 = *(_QWORD *)(v0 + 544);
    v3 = *(_QWORD *)(v0 + 472);
    v4 = *(_QWORD *)(v0 + 480);
    v5 = *(_QWORD *)(v0 + 344);
    v6 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 584) = sub_10001A9E8(v6, (uint64_t)qword_1011B7148);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    *(_QWORD *)(v0 + 592) = v7;
    v8 = v7(v2, v5, v3);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(_QWORD *)(v0 + 544);
    v13 = *(_QWORD *)(v0 + 472);
    if (v11)
    {
      v83 = *(_QWORD *)(v0 + 480);
      v14 = swift_slowAlloc(32, -1);
      v85 = swift_slowAlloc(64, -1);
      v87 = v85;
      *(_DWORD *)v14 = 136446723;
      *(_QWORD *)(v0 + 296) = sub_100016940(0xD000000000000030, 0x8000000100ED8730, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v14 + 4, v14 + 12);
      *(_WORD *)(v14 + 12) = 2160;
      *(_QWORD *)(v0 + 304) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v14 + 14, v14 + 22);
      *(_WORD *)(v14 + 22) = 2081;
      v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
      *(_QWORD *)(v0 + 312) = sub_100016940(v16, v17, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v14 + 24, v14 + 32);
      swift_bridgeObjectRelease();
      v18 = *(void (**)(uint64_t, uint64_t))(v83 + 8);
      v18(v12, v13);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s Checking LocalFindableRecord: %{private,mask.hash}s", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy(v85, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 480) + 8);
      v18(*(_QWORD *)(v0 + 544), *(_QWORD *)(v0 + 472));
    }

    *(_QWORD *)(v0 + 600) = v18;
    v39 = *(_QWORD *)(v0 + 536);
    v41 = *(_QWORD *)(v0 + 480);
    v40 = *(_QWORD *)(v0 + 488);
    v42 = *(_QWORD *)(v0 + 472);
    v7(v39, *(_QWORD *)(v0 + 344), v42);
    v43 = *(unsigned __int8 *)(v41 + 80);
    v44 = (v43 + 24) & ~v43;
    v45 = swift_allocObject(&unk_101079BB8, v44 + v40, v43 | 7);
    *(_QWORD *)(v0 + 608) = v45;
    *(_QWORD *)(v45 + 16) = v1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v45 + v44, v39, v42);
    v46 = async function pointer to withTimeout<A>(_:block:)[1];
    swift_retain();
    v47 = (_QWORD *)swift_task_alloc(v46);
    *(_QWORD *)(v0 + 616) = v47;
    *v47 = v0;
    v47[1] = sub_100484F08;
    return withTimeout<A>(_:block:)(*(_QWORD *)(v0 + 432), 5000000000000000000, 0, &unk_1010FD200, v45, *(_QWORD *)(v0 + 424));
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 360);
    v20 = *(_QWORD *)(v0 + 368);
    v21 = *(_QWORD *)(v0 + 352);
    sub_10081C0CC(*(_QWORD *)(v0 + 344), v21);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v19) == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 352), &qword_101102FB0);
      if (qword_1010E9CE0 != -1)
        swift_once(&qword_1010E9CE0, sub_100563220);
      v22 = *(_QWORD *)(v0 + 528);
      v23 = *(_QWORD *)(v0 + 472);
      v24 = *(_QWORD *)(v0 + 480);
      v25 = *(_QWORD *)(v0 + 344);
      v26 = type metadata accessor for Logger(0);
      sub_10001A9E8(v26, (uint64_t)qword_1011B7148);
      v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v22, v25, v23);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.error.getter(v28);
      v30 = os_log_type_enabled(v28, v29);
      v31 = *(_QWORD *)(v0 + 528);
      v32 = *(_QWORD *)(v0 + 472);
      v33 = *(_QWORD *)(v0 + 480);
      if (v30)
      {
        v34 = swift_slowAlloc(22, -1);
        v35 = swift_slowAlloc(32, -1);
        v87 = v35;
        *(_DWORD *)v34 = 141558275;
        *(_QWORD *)(v0 + 200) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v34 + 4, v34 + 12);
        *(_WORD *)(v34 + 12) = 2081;
        v36 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v37 = dispatch thunk of CustomStringConvertible.description.getter(v32, v36);
        *(_QWORD *)(v0 + 208) = sub_100016940(v37, v38, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v34 + 14, v34 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "No wildModeAssociationRecord for %{private,mask.hash}s", (uint8_t *)v34, 0x16u);
        swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v35, -1, -1);
        swift_slowDealloc(v34, -1, -1);
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v33 + 8))(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 472));
      }

      v68 = *(_QWORD *)(v0 + 384);
      v69 = *(void (**)(uint64_t))(v0 + 328);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 400) + 56))(v68, 1, 1, *(_QWORD *)(v0 + 392));
      v69(v68);
      swift_release();
      sub_100004048(v68, &qword_1010FBA40);
      v70 = *(_QWORD *)(v0 + 536);
      v71 = *(_QWORD *)(v0 + 528);
      v72 = *(_QWORD *)(v0 + 520);
      v74 = *(_QWORD *)(v0 + 504);
      v73 = *(_QWORD *)(v0 + 512);
      v75 = *(_QWORD *)(v0 + 496);
      v77 = *(_QWORD *)(v0 + 456);
      v76 = *(_QWORD *)(v0 + 464);
      v78 = *(_QWORD *)(v0 + 432);
      v80 = *(_QWORD *)(v0 + 416);
      v81 = *(_QWORD *)(v0 + 408);
      *(_QWORD *)type = *(_QWORD *)(v0 + 384);
      v84 = *(_QWORD *)(v0 + 376);
      v86 = *(_QWORD *)(v0 + 352);
      swift_task_dealloc(*(_QWORD *)(v0 + 544));
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v72);
      swift_task_dealloc(v73);
      swift_task_dealloc(v74);
      swift_task_dealloc(v75);
      swift_task_dealloc(v76);
      swift_task_dealloc(v77);
      swift_task_dealloc(v78);
      swift_task_dealloc(v80);
      swift_task_dealloc(v81);
      swift_task_dealloc(*(_QWORD *)type);
      swift_task_dealloc(v84);
      swift_task_dealloc(v86);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      sub_1000126EC(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 376), type metadata accessor for WildModeAssociationRecord);
      if (qword_1010E9CE0 != -1)
        swift_once(&qword_1010E9CE0, sub_100563220);
      v49 = *(_QWORD *)(v0 + 520);
      v50 = *(_QWORD *)(v0 + 472);
      v51 = *(_QWORD *)(v0 + 480);
      v52 = *(_QWORD *)(v0 + 344);
      v53 = type metadata accessor for Logger(0);
      *(_QWORD *)(v0 + 648) = sub_10001A9E8(v53, (uint64_t)qword_1011B7148);
      v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 16);
      *(_QWORD *)(v0 + 656) = v54;
      v55 = v54(v49, v52, v50);
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.default.getter(v56);
      v58 = os_log_type_enabled(v56, v57);
      v59 = *(_QWORD *)(v0 + 520);
      v60 = *(_QWORD *)(v0 + 472);
      v61 = *(_QWORD *)(v0 + 480);
      if (v58)
      {
        v62 = (uint8_t *)swift_slowAlloc(12, -1);
        v63 = swift_slowAlloc(32, -1);
        v87 = v63;
        *(_DWORD *)v62 = 136446210;
        v64 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v65 = dispatch thunk of CustomStringConvertible.description.getter(v60, v64);
        *(_QWORD *)(v0 + 232) = sub_100016940(v65, v66, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v62 + 4, v62 + 12);
        swift_bridgeObjectRelease();
        v67 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
        v67(v59, v60);
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Fetching encrypted serial number for %{public}s", v62, 0xCu);
        swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v63, -1, -1);
        swift_slowDealloc(v62, -1, -1);
      }
      else
      {
        v67 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
        v67(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 472));
      }

      *(_QWORD *)(v0 + 664) = v67;
      v79 = (_QWORD *)swift_task_alloc(dword_10111F194);
      *(_QWORD *)(v0 + 672) = v79;
      *v79 = v0;
      v79[1] = sub_1004858DC;
      return sub_100D54920(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 376));
    }
  }
}

uint64_t sub_100484F08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 616);
  *(_QWORD *)(*(_QWORD *)v1 + 624) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v3 = sub_100485ABC;
  }
  else
  {
    swift_release();
    v3 = sub_100484F74;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100484F74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  _QWORD *v52;
  uint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v1 = *(_QWORD *)(v0 + 432);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 448) + 48))(v1, 1, *(_QWORD *)(v0 + 440)) == 1)
  {
    swift_release();
    sub_100004048(v1, (uint64_t *)&unk_1010EDC50);
    v2 = *(_QWORD *)(v0 + 360);
    v3 = *(_QWORD *)(v0 + 368);
    v4 = *(_QWORD *)(v0 + 352);
    sub_10081C0CC(*(_QWORD *)(v0 + 344), v4);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 352), &qword_101102FB0);
      if (qword_1010E9CE0 != -1)
        swift_once(&qword_1010E9CE0, sub_100563220);
      v5 = *(_QWORD *)(v0 + 528);
      v6 = *(_QWORD *)(v0 + 472);
      v7 = *(_QWORD *)(v0 + 480);
      v8 = *(_QWORD *)(v0 + 344);
      v9 = type metadata accessor for Logger(0);
      sub_10001A9E8(v9, (uint64_t)qword_1011B7148);
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v8, v6);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.error.getter(v11);
      v13 = os_log_type_enabled(v11, v12);
      v14 = *(_QWORD *)(v0 + 528);
      v15 = *(_QWORD *)(v0 + 472);
      v16 = *(_QWORD *)(v0 + 480);
      if (v13)
      {
        v17 = swift_slowAlloc(22, -1);
        v18 = swift_slowAlloc(32, -1);
        v71 = v18;
        *(_DWORD *)v17 = 141558275;
        *(_QWORD *)(v0 + 200) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v17 + 4, v17 + 12);
        *(_WORD *)(v17 + 12) = 2081;
        v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of CustomStringConvertible.description.getter(v15, v19);
        *(_QWORD *)(v0 + 208) = sub_100016940(v20, v21, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v17 + 14, v17 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "No wildModeAssociationRecord for %{private,mask.hash}s", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v18, -1, -1);
        swift_slowDealloc(v17, -1, -1);
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v16 + 8))(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 472));
      }

      v54 = *(_QWORD *)(v0 + 384);
      v55 = *(void (**)(uint64_t))(v0 + 328);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 400) + 56))(v54, 1, 1, *(_QWORD *)(v0 + 392));
      v55(v54);
      swift_release();
      sub_100004048(v54, &qword_1010FBA40);
      v56 = *(_QWORD *)(v0 + 536);
      v57 = *(_QWORD *)(v0 + 528);
      v58 = *(_QWORD *)(v0 + 520);
      v60 = *(_QWORD *)(v0 + 504);
      v59 = *(_QWORD *)(v0 + 512);
      v61 = *(_QWORD *)(v0 + 496);
      v63 = *(_QWORD *)(v0 + 456);
      v62 = *(_QWORD *)(v0 + 464);
      v64 = *(_QWORD *)(v0 + 432);
      v66 = *(_QWORD *)(v0 + 416);
      v67 = *(_QWORD *)(v0 + 408);
      v68 = *(_QWORD *)(v0 + 384);
      v69 = *(_QWORD *)(v0 + 376);
      v70 = *(_QWORD *)(v0 + 352);
      swift_task_dealloc(*(_QWORD *)(v0 + 544));
      swift_task_dealloc(v56);
      swift_task_dealloc(v57);
      swift_task_dealloc(v58);
      swift_task_dealloc(v59);
      swift_task_dealloc(v60);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      swift_task_dealloc(v64);
      swift_task_dealloc(v66);
      swift_task_dealloc(v67);
      swift_task_dealloc(v68);
      swift_task_dealloc(v69);
      swift_task_dealloc(v70);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      sub_1000126EC(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 376), type metadata accessor for WildModeAssociationRecord);
      if (qword_1010E9CE0 != -1)
        swift_once(&qword_1010E9CE0, sub_100563220);
      v33 = *(_QWORD *)(v0 + 520);
      v34 = *(_QWORD *)(v0 + 472);
      v35 = *(_QWORD *)(v0 + 480);
      v36 = *(_QWORD *)(v0 + 344);
      v37 = type metadata accessor for Logger(0);
      *(_QWORD *)(v0 + 648) = sub_10001A9E8(v37, (uint64_t)qword_1011B7148);
      v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 16);
      *(_QWORD *)(v0 + 656) = v38;
      v39 = v38(v33, v36, v34);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.default.getter(v40);
      v42 = os_log_type_enabled(v40, v41);
      v43 = *(_QWORD *)(v0 + 520);
      v44 = *(_QWORD *)(v0 + 472);
      v45 = *(_QWORD *)(v0 + 480);
      if (v42)
      {
        v46 = (uint8_t *)swift_slowAlloc(12, -1);
        v47 = swift_slowAlloc(32, -1);
        v71 = v47;
        *(_DWORD *)v46 = 136446210;
        v48 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v49 = dispatch thunk of CustomStringConvertible.description.getter(v44, v48);
        *(_QWORD *)(v0 + 232) = sub_100016940(v49, v50, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v46 + 4, v46 + 12);
        swift_bridgeObjectRelease();
        v51 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
        v51(v43, v44);
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Fetching encrypted serial number for %{public}s", v46, 0xCu);
        swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v46, -1, -1);
      }
      else
      {
        v51 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
        v51(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 472));
      }

      *(_QWORD *)(v0 + 664) = v51;
      v65 = (_QWORD *)swift_task_alloc(dword_10111F194);
      *(_QWORD *)(v0 + 672) = v65;
      *v65 = v0;
      v65[1] = sub_1004858DC;
      return sub_100D54920(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 376));
    }
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 456);
    v22 = *(_QWORD *)(v0 + 464);
    sub_1000126EC(v1, v22, type metadata accessor for LocalFindableAccessoryRecord);
    v24 = sub_10005972C(v22, v23, type metadata accessor for LocalFindableAccessoryRecord);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    v27 = os_log_type_enabled(v25, v26);
    v28 = *(_QWORD *)(v0 + 456);
    if (v27)
    {
      v29 = swift_slowAlloc(22, -1);
      v30 = swift_slowAlloc(64, -1);
      v71 = v30;
      *(_DWORD *)v29 = 136446466;
      *(_QWORD *)(v0 + 280) = sub_100016940(0xD000000000000030, 0x8000000100ED8730, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v29 + 4, v29 + 12);
      *(_WORD *)(v29 + 12) = 2080;
      v31 = sub_1000A8F4C();
      *(_QWORD *)(v0 + 288) = sub_100016940(v31, v32, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v29 + 14, v29 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v28, type metadata accessor for LocalFindableAccessoryRecord);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Found LocalFindableRecord: %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 456), type metadata accessor for LocalFindableAccessoryRecord);
    }

    v52 = (_QWORD *)swift_task_alloc(dword_10111F51C);
    *(_QWORD *)(v0 + 632) = v52;
    *v52 = v0;
    v52[1] = sub_1004856EC;
    return sub_100D4D610(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 464));
  }
}

uint64_t sub_1004856EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 632);
  *(_QWORD *)(*(_QWORD *)v1 + 640) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100486240;
  else
    v3 = sub_100485750;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100485750()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 464);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 384);
  v6 = *(void (**)(uint64_t))(v0 + 328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v2, v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v5, 0, 1, v3);
  v6(v5);
  swift_release();
  swift_release();
  sub_100004048(v5, &qword_1010FBA40);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_1000126B0(v1, type metadata accessor for LocalFindableAccessoryRecord);
  v7 = *(_QWORD *)(v0 + 536);
  v8 = *(_QWORD *)(v0 + 528);
  v9 = *(_QWORD *)(v0 + 520);
  v11 = *(_QWORD *)(v0 + 504);
  v10 = *(_QWORD *)(v0 + 512);
  v12 = *(_QWORD *)(v0 + 496);
  v14 = *(_QWORD *)(v0 + 456);
  v13 = *(_QWORD *)(v0 + 464);
  v15 = *(_QWORD *)(v0 + 432);
  v17 = *(_QWORD *)(v0 + 416);
  v18 = *(_QWORD *)(v0 + 408);
  v19 = *(_QWORD *)(v0 + 384);
  v20 = *(_QWORD *)(v0 + 376);
  v21 = *(_QWORD *)(v0 + 352);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004858DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 672);
  *(_QWORD *)(*(_QWORD *)v1 + 680) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1004865C0;
  else
    v3 = sub_100485940;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100485940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(v0 + 400);
  v1 = *(_QWORD *)(v0 + 408);
  v4 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 376);
  v6 = *(void (**)(uint64_t))(v0 + 328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v1, v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v4, 0, 1, v3);
  v6(v4);
  swift_release();
  sub_100004048(v4, &qword_1010FBA40);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_1000126B0(v5, type metadata accessor for WildModeAssociationRecord);
  v7 = *(_QWORD *)(v0 + 536);
  v8 = *(_QWORD *)(v0 + 528);
  v9 = *(_QWORD *)(v0 + 520);
  v11 = *(_QWORD *)(v0 + 504);
  v10 = *(_QWORD *)(v0 + 512);
  v12 = *(_QWORD *)(v0 + 496);
  v14 = *(_QWORD *)(v0 + 456);
  v13 = *(_QWORD *)(v0 + 464);
  v15 = *(_QWORD *)(v0 + 432);
  v17 = *(_QWORD *)(v0 + 416);
  v18 = *(_QWORD *)(v0 + 408);
  v19 = *(_QWORD *)(v0 + 384);
  v20 = *(_QWORD *)(v0 + 376);
  v21 = *(_QWORD *)(v0 + 352);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100485ABC()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  void (*v58)(uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 592);
  v2 = *(_QWORD *)(v0 + 512);
  v3 = *(_QWORD *)(v0 + 472);
  v4 = *(_QWORD *)(v0 + 344);
  swift_release();
  v5 = v1(v2, v4, v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v73 = *(void (**)(uint64_t, uint64_t))(v0 + 600);
    v75 = *(_QWORD *)(v0 + 624);
    v8 = *(_QWORD *)(v0 + 512);
    v9 = *(_QWORD *)(v0 + 472);
    v10 = swift_slowAlloc(32, -1);
    v71 = swift_slowAlloc(64, -1);
    v78 = v71;
    *(_DWORD *)v10 = 136446723;
    *(_QWORD *)(v0 + 240) = sub_100016940(0xD000000000000030, 0x8000000100ED8730, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2160;
    *(_QWORD *)(v0 + 248) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v10 + 14, v10 + 22);
    *(_WORD *)(v10 + 22) = 2081;
    v11 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v9, v11);
    *(_QWORD *)(v0 + 256) = sub_100016940(v12, v13, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease();
    v73(v8, v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s No LocalFindableRecord: %{private,mask.hash}s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1, -1);
    swift_slowDealloc(v10, -1, -1);
    swift_errorRelease(v75);
    swift_release();
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 624);
    v15 = *(void (**)(uint64_t, uint64_t))(v0 + 600);
    v16 = *(_QWORD *)(v0 + 512);
    v17 = *(_QWORD *)(v0 + 472);
    swift_release();
    swift_errorRelease(v14);
    v15(v16, v17);
  }

  v18 = *(_QWORD *)(v0 + 360);
  v19 = *(_QWORD *)(v0 + 368);
  v20 = *(_QWORD *)(v0 + 352);
  sub_10081C0CC(*(_QWORD *)(v0 + 344), v20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v20, 1, v18) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 352), &qword_101102FB0);
    if (qword_1010E9CE0 != -1)
      swift_once(&qword_1010E9CE0, sub_100563220);
    v21 = *(_QWORD *)(v0 + 528);
    v22 = *(_QWORD *)(v0 + 472);
    v23 = *(_QWORD *)(v0 + 480);
    v24 = *(_QWORD *)(v0 + 344);
    v25 = type metadata accessor for Logger(0);
    sub_10001A9E8(v25, (uint64_t)qword_1011B7148);
    v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v21, v24, v22);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    v29 = os_log_type_enabled(v27, v28);
    v30 = *(_QWORD *)(v0 + 528);
    v31 = *(_QWORD *)(v0 + 472);
    v32 = *(_QWORD *)(v0 + 480);
    if (v29)
    {
      v33 = swift_slowAlloc(22, -1);
      v34 = swift_slowAlloc(32, -1);
      v78 = v34;
      *(_DWORD *)v33 = 141558275;
      *(_QWORD *)(v0 + 200) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v33 + 4, v33 + 12);
      *(_WORD *)(v33 + 12) = 2081;
      v35 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v36 = dispatch thunk of CustomStringConvertible.description.getter(v31, v35);
      *(_QWORD *)(v0 + 208) = sub_100016940(v36, v37, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v33 + 14, v33 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "No wildModeAssociationRecord for %{private,mask.hash}s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v32 + 8))(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 472));
    }

    v57 = *(_QWORD *)(v0 + 384);
    v58 = *(void (**)(uint64_t))(v0 + 328);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 400) + 56))(v57, 1, 1, *(_QWORD *)(v0 + 392));
    v58(v57);
    swift_release();
    sub_100004048(v57, &qword_1010FBA40);
    v59 = *(_QWORD *)(v0 + 536);
    v60 = *(_QWORD *)(v0 + 528);
    v61 = *(_QWORD *)(v0 + 520);
    v63 = *(_QWORD *)(v0 + 504);
    v62 = *(_QWORD *)(v0 + 512);
    v64 = *(_QWORD *)(v0 + 496);
    v66 = *(_QWORD *)(v0 + 456);
    v65 = *(_QWORD *)(v0 + 464);
    v67 = *(_QWORD *)(v0 + 432);
    v70 = *(_QWORD *)(v0 + 416);
    v72 = *(_QWORD *)(v0 + 408);
    v74 = *(_QWORD *)(v0 + 384);
    v76 = *(_QWORD *)(v0 + 376);
    v77 = *(_QWORD *)(v0 + 352);
    swift_task_dealloc(*(_QWORD *)(v0 + 544));
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v70);
    swift_task_dealloc(v72);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_1000126EC(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 376), type metadata accessor for WildModeAssociationRecord);
    if (qword_1010E9CE0 != -1)
      swift_once(&qword_1010E9CE0, sub_100563220);
    v38 = *(_QWORD *)(v0 + 520);
    v39 = *(_QWORD *)(v0 + 472);
    v40 = *(_QWORD *)(v0 + 480);
    v41 = *(_QWORD *)(v0 + 344);
    v42 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 648) = sub_10001A9E8(v42, (uint64_t)qword_1011B7148);
    v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 16);
    *(_QWORD *)(v0 + 656) = v43;
    v44 = v43(v38, v41, v39);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.default.getter(v45);
    v47 = os_log_type_enabled(v45, v46);
    v48 = *(_QWORD *)(v0 + 520);
    v49 = *(_QWORD *)(v0 + 472);
    v50 = *(_QWORD *)(v0 + 480);
    if (v47)
    {
      v51 = (uint8_t *)swift_slowAlloc(12, -1);
      v52 = swift_slowAlloc(32, -1);
      v78 = v52;
      *(_DWORD *)v51 = 136446210;
      v53 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v54 = dispatch thunk of CustomStringConvertible.description.getter(v49, v53);
      *(_QWORD *)(v0 + 232) = sub_100016940(v54, v55, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v51 + 4, v51 + 12);
      swift_bridgeObjectRelease();
      v56 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
      v56(v48, v49);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Fetching encrypted serial number for %{public}s", v51, 0xCu);
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v51, -1, -1);
    }
    else
    {
      v56 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
      v56(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 472));
    }

    *(_QWORD *)(v0 + 664) = v56;
    v69 = (_QWORD *)swift_task_alloc(dword_10111F194);
    *(_QWORD *)(v0 + 672) = v69;
    *v69 = v0;
    v69[1] = sub_1004858DC;
    return sub_100D54920(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 376));
  }
}

uint64_t sub_100486240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 640);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 592))(*(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 472));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 640);
    v31 = *(void (**)(uint64_t, uint64_t))(v0 + 600);
    v6 = *(_QWORD *)(v0 + 504);
    v7 = *(_QWORD *)(v0 + 472);
    v8 = swift_slowAlloc(22, -1);
    v33 = (uint64_t *)swift_slowAlloc(8, -1);
    v35 = swift_slowAlloc(32, -1);
    v37 = v35;
    *(_DWORD *)v8 = 136446466;
    v9 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v10 = dispatch thunk of CustomStringConvertible.description.getter(v7, v9);
    *(_QWORD *)(v0 + 264) = sub_100016940(v10, v11, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    v31(v6, v7);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v5);
    v12 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 272) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v8 + 14, v8 + 22);
    *v33 = v12;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error fetching encrypted serial number for %{public}s. Error %{public}@", (uint8_t *)v8, 0x16u);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v33, 1, v13);
    swift_slowDealloc(v33, -1, -1);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 640);
    (*(void (**)(_QWORD, _QWORD))(v0 + 600))(*(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 472));
    swift_errorRelease(v14);
    swift_errorRelease(v14);
  }

  v15 = *(_QWORD *)(v0 + 640);
  v16 = *(_QWORD *)(v0 + 464);
  v17 = *(_QWORD *)(v0 + 384);
  v18 = *(void (**)(uint64_t))(v0 + 328);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 400) + 56))(v17, 1, 1, *(_QWORD *)(v0 + 392));
  v18(v17);
  swift_release();
  swift_errorRelease(v15);
  swift_release();
  sub_100004048(v17, &qword_1010FBA40);
  sub_1000126B0(v16, type metadata accessor for LocalFindableAccessoryRecord);
  v19 = *(_QWORD *)(v0 + 536);
  v20 = *(_QWORD *)(v0 + 528);
  v21 = *(_QWORD *)(v0 + 520);
  v23 = *(_QWORD *)(v0 + 504);
  v22 = *(_QWORD *)(v0 + 512);
  v24 = *(_QWORD *)(v0 + 496);
  v26 = *(_QWORD *)(v0 + 456);
  v25 = *(_QWORD *)(v0 + 464);
  v27 = *(_QWORD *)(v0 + 432);
  v29 = *(_QWORD *)(v0 + 416);
  v30 = *(_QWORD *)(v0 + 408);
  v32 = *(_QWORD *)(v0 + 384);
  v34 = *(_QWORD *)(v0 + 376);
  v36 = *(_QWORD *)(v0 + 352);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004865C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 680);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 656))(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 472));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 680);
    v31 = *(void (**)(uint64_t, uint64_t))(v0 + 664);
    v6 = *(_QWORD *)(v0 + 496);
    v7 = *(_QWORD *)(v0 + 472);
    v8 = swift_slowAlloc(22, -1);
    v33 = (uint64_t *)swift_slowAlloc(8, -1);
    v35 = swift_slowAlloc(32, -1);
    v37 = v35;
    *(_DWORD *)v8 = 136446466;
    v9 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v10 = dispatch thunk of CustomStringConvertible.description.getter(v7, v9);
    *(_QWORD *)(v0 + 216) = sub_100016940(v10, v11, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    v31(v6, v7);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v5);
    v12 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 224) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v8 + 14, v8 + 22);
    *v33 = v12;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error fetching encrypted serial number for %{public}s. Error %{public}@", (uint8_t *)v8, 0x16u);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v33, 1, v13);
    swift_slowDealloc(v33, -1, -1);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 680);
    (*(void (**)(_QWORD, _QWORD))(v0 + 664))(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 472));
    swift_errorRelease(v14);
    swift_errorRelease(v14);
  }

  v15 = *(_QWORD *)(v0 + 680);
  v17 = *(_QWORD *)(v0 + 376);
  v16 = *(_QWORD *)(v0 + 384);
  v18 = *(void (**)(uint64_t))(v0 + 328);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 400) + 56))(v16, 1, 1, *(_QWORD *)(v0 + 392));
  v18(v16);
  swift_release();
  swift_errorRelease(v15);
  sub_100004048(v16, &qword_1010FBA40);
  sub_1000126B0(v17, type metadata accessor for WildModeAssociationRecord);
  v19 = *(_QWORD *)(v0 + 536);
  v20 = *(_QWORD *)(v0 + 528);
  v21 = *(_QWORD *)(v0 + 520);
  v23 = *(_QWORD *)(v0 + 504);
  v22 = *(_QWORD *)(v0 + 512);
  v24 = *(_QWORD *)(v0 + 496);
  v26 = *(_QWORD *)(v0 + 456);
  v25 = *(_QWORD *)(v0 + 464);
  v27 = *(_QWORD *)(v0 + 432);
  v29 = *(_QWORD *)(v0 + 416);
  v30 = *(_QWORD *)(v0 + 408);
  v32 = *(_QWORD *)(v0 + 384);
  v34 = *(_QWORD *)(v0 + 376);
  v36 = *(_QWORD *)(v0 + 352);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10048692C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_100486944, a2, 0);
}

uint64_t sub_100486944()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_10110CD9C);
  v0[5] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_10048699C;
  return sub_1008FBBC8(v0[2], v0[4]);
}

uint64_t sub_10048699C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1004869E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(_QWORD, _QWORD);
  uint64_t v97;
  uint64_t (*v98)(uint64_t);
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  Class isa;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD v115[7];
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(_QWORD, _QWORD);
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;

  v126 = a3;
  v122 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v5 = __chkstk_darwin(v122);
  v116 = (uint64_t)v115 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v121 = (char *)v115 - v7;
  v8 = type metadata accessor for SafeLocation(0);
  v164 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v141 = (char *)v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v128 = (char *)v115 - v12;
  v13 = __chkstk_darwin(v11);
  v163 = (char *)v115 - v14;
  v15 = __chkstk_darwin(v13);
  v140 = (char *)v115 - v16;
  v17 = __chkstk_darwin(v15);
  v142 = (char *)v115 - v18;
  __chkstk_darwin(v17);
  v129 = (char *)v115 - v19;
  v20 = sub_10001A9A8(&qword_1010ED860);
  v21 = __chkstk_darwin(v20);
  v115[4] = (char *)v115 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v117 = (char *)v115 - v24;
  __chkstk_darwin(v23);
  v115[5] = (char *)v115 - v25;
  v26 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v27 = __chkstk_darwin(v26);
  v133 = (char *)v115 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v131 = (char *)v115 - v30;
  __chkstk_darwin(v29);
  v132 = (char *)v115 - v31;
  v165 = type metadata accessor for Date(0);
  v161 = *(_QWORD *)(v165 - 8);
  v32 = __chkstk_darwin(v165);
  v149 = (char *)v115 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v148 = (char *)v115 - v35;
  v36 = __chkstk_darwin(v34);
  v156 = (char *)v115 - v37;
  v38 = __chkstk_darwin(v36);
  v146 = (char *)v115 - v39;
  v40 = __chkstk_darwin(v38);
  v147 = (char *)v115 - v41;
  __chkstk_darwin(v40);
  v145 = (char *)v115 - v42;
  v159 = type metadata accessor for ShareRecord(0);
  v115[2] = *(_QWORD *)(v159 - 8);
  v43 = __chkstk_darwin(v159);
  v138 = (char *)v115 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __chkstk_darwin(v43);
  v136 = (char *)v115 - v46;
  __chkstk_darwin(v45);
  v137 = (char *)v115 - v47;
  v119 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v119);
  v120 = (uint64_t)v115 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for OwnedBeaconRecord(0);
  v49 = __chkstk_darwin(v123);
  v115[0] = (char *)v115 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __chkstk_darwin(v49);
  v115[1] = (char *)v115 - v52;
  v53 = __chkstk_darwin(v51);
  v127 = (uint64_t)v115 - v54;
  __chkstk_darwin(v53);
  v124 = (char *)v115 - v55;
  v130 = type metadata accessor for SharedBeaconRecord(0);
  v56 = __chkstk_darwin(v130);
  v125 = (uint64_t)v115 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v56);
  v59 = (char *)v115 - v58;
  v60 = type metadata accessor for UUID(0);
  v61 = *(_QWORD *)(v60 - 8);
  v62 = __chkstk_darwin(v60);
  v144 = (char *)v115 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = __chkstk_darwin(v62);
  v135 = (char *)v115 - v65;
  v66 = __chkstk_darwin(v64);
  v134 = (char *)v115 - v67;
  v68 = __chkstk_darwin(v66);
  v158 = (char *)v115 - v69;
  v70 = __chkstk_darwin(v68);
  v143 = (char *)v115 - v71;
  v72 = __chkstk_darwin(v70);
  v155 = (char *)v115 - v73;
  v74 = __chkstk_darwin(v72);
  v154 = (char *)v115 - v75;
  v76 = __chkstk_darwin(v74);
  v153 = (char *)v115 - v77;
  v78 = __chkstk_darwin(v76);
  v115[6] = (char *)v115 - v79;
  v80 = __chkstk_darwin(v78);
  v115[3] = (char *)v115 - v81;
  v82 = __chkstk_darwin(v80);
  v157 = (char *)v115 - v83;
  v84 = __chkstk_darwin(v82);
  v152 = (char *)v115 - v85;
  v86 = __chkstk_darwin(v84);
  v151 = (char *)v115 - v87;
  v88 = __chkstk_darwin(v86);
  v150 = (char *)v115 - v89;
  __chkstk_darwin(v88);
  v91 = (char *)v115 - v90;
  v139 = (char *)a1;
  v92 = *(_QWORD *)(a1 + 280);
  v94 = a2[3];
  v93 = a2[4];
  sub_10001AA44(a2, v94);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v93 + 8) + 8) + 32))(v94);
  v95 = sub_100711020((uint64_t)v91);
  v160 = v61;
  v96 = *(void (**)(_QWORD, _QWORD))(v61 + 8);
  v118 = v91;
  v166 = v60;
  v162 = v96;
  v96(v91, v60);
  sub_100030784((uint64_t)a2, (uint64_t)&v168);
  v97 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  if (swift_dynamicCast(v59, &v168, v97, v130, 0))
  {
    v98 = type metadata accessor for SharedBeaconRecord;
    v99 = v125;
    sub_1000126EC((uint64_t)v59, v125, type metadata accessor for SharedBeaconRecord);
    v100 = sub_100285C94(v99, v92);
    objc_msgSend(v100, "setConnectionAllowed:", 0);
    objc_msgSend(v100, "setConnectableDeviceCount:", 0);
    sub_1004AE7CC(v99, 0, v139);
  }
  else
  {
    v130 = v92;
    v101 = (uint64_t)v124;
    v102 = v123;
    if (swift_dynamicCast(v124, &v168, v97, v123, 0))
    {
      v125 = v95;
      v103 = v127;
      sub_1000126EC(v101, v127, type metadata accessor for OwnedBeaconRecord);
      v104 = v103 + *(int *)(v102 + 24);
      v105 = v120;
      sub_10005972C(v104, v120, type metadata accessor for StableIdentifier);
      v106 = (char *)&loc_100487320 + dword_10048944C[swift_getEnumCaseMultiPayload(v105, v119)];
      __asm { BR              X10 }
    }
    v107 = (uint64_t)v121;
    if (!swift_dynamicCast(v121, &v168, v97, v122, 0))
    {
      type metadata accessor for SPOwnerSessionError(0);
      v110 = v109;
      v167 = 18;
      v111 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v112 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
      v113 = _BridgedStoredNSError.init(_:userInfo:)(&v169, &v167, v111, v110, v112);
      swift_willThrow(v113);
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v168);
    }
    v98 = type metadata accessor for LocalFindableAccessoryRecord;
    v99 = v116;
    sub_1000126EC(v107, v116, type metadata accessor for LocalFindableAccessoryRecord);
    v100 = sub_100288384(v99, v130);
    sub_1004B20B4(v99, 0, (uint64_t)v139);
  }
  type metadata accessor for SPBeaconTaskName(0);
  sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
  sub_100006204(&qword_1010EB5D0, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_100E21E64);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v100, "setTaskInformation:", isa);

  sub_1000126B0(v99, v98);
  *v126 = v100;
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v168);
}

uint64_t sub_100489460(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t My;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[3];
  uint64_t v55;
  uint64_t v56;

  v52 = a4;
  v53 = a3;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v10);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OwnedBeaconRecord(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v20 = a1[3];
    v21 = a1[4];
    sub_10001AA44(a1, v20);
    v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 176))(v20, v21);
    v23 = sub_100A08084((uint64_t)v22, v53);

    return v23 & 1;
  }
  v49 = v19;
  v50 = v12;
  v48 = v9;
  v51 = v7;
  sub_100030784((uint64_t)a1, (uint64_t)v54);
  v25 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v26 = swift_dynamicCast(v15, v54, v25, v16, 6);
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  v28 = a1;
  if ((v26 & 1) == 0)
  {
    v27(v15, 1, 1, v16);
    sub_100004048((uint64_t)v15, (uint64_t *)&unk_1010F47C0);
    goto LABEL_7;
  }
  v27(v15, 0, 1, v16);
  v29 = (uint64_t)v49;
  sub_1000126EC((uint64_t)v15, (uint64_t)v49, type metadata accessor for OwnedBeaconRecord);
  v30 = sub_1009A1DCC();
  if (v31 >> 60 == 15)
  {
    sub_1000126B0(v29, type metadata accessor for OwnedBeaconRecord);
    goto LABEL_7;
  }
  v43 = v30;
  v44 = v31;
  if (!sub_100A08A3C(v30, v31))
  {
    sub_1000126B0((uint64_t)v49, type metadata accessor for OwnedBeaconRecord);
    sub_10001EF3C(v43, v44);
LABEL_7:
    v32 = a1[3];
    v33 = a1[4];
    sub_10001AA44(a1, v32);
    v34 = (uint64_t)v50;
    (*(void (**)(uint64_t, uint64_t))(v33 + 192))(v32, v33);
    v35 = v51;
    LODWORD(v32) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v34, 1, v6);
    sub_100004048(v34, &qword_1010ED860);
    if ((_DWORD)v32 == 1)
    {
      sub_100030784((uint64_t)v28, (uint64_t)v54);
    }
    else
    {
      v36 = v28[3];
      v37 = v28[4];
      sub_10001AA44(v28, v36);
      v38 = (uint64_t)v48;
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v37 + 8) + 8) + 32))(v36);
      LOBYTE(v36) = sub_100A07660(v38, v52);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v38, v6);
      sub_100030784((uint64_t)v28, (uint64_t)v54);
      if ((v36 & 1) == 0)
      {
        v42 = 0;
        goto LABEL_15;
      }
    }
    v39 = v55;
    v40 = v56;
    sub_10001AA44(v54, v55);
    v41 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v40 + 176))(v39, v40);
    v42 = sub_100A08084((uint64_t)v41, v53);

LABEL_15:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
    return v42 & 1;
  }
  My = type metadata accessor for Feature.FindMy(0);
  v55 = My;
  v56 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v46 = sub_100018F08(v54);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v46, enum case for Feature.FindMy.alphaWasp(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v54);
  sub_10001EF3C(v43, v44);
  sub_1000126B0((uint64_t)v49, type metadata accessor for OwnedBeaconRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
  if ((My & 1) != 0)
    goto LABEL_7;
  v42 = 0;
  return v42 & 1;
}

void sub_100489880(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v52 = a2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_10110EEB0);
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BeaconProductInfoRecord(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v51 = (uint64_t)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_1006548BC(a1) & 1) != 0)
  {
    v53 = v3;
    v54 = a3;
    v52 = *(_QWORD *)(v52 + 280);
    v17 = a1[3];
    v16 = a1[4];
    sub_10001AA44(a1, v17);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 8) + 32))(v17);
    sub_10081BB64((uint64_t)v9, (uint64_t)v12);
    v18 = *(void (**)(char *, uint64_t))(v7 + 8);
    v18(v9, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
    {
      sub_100004048((uint64_t)v12, &qword_10110EEB0);
      v19 = (uint64_t)a1;
      v20 = v54;
LABEL_16:
      sub_100030784(v19, v20);
      return;
    }
    v34 = v51;
    sub_1000126EC((uint64_t)v12, v51, type metadata accessor for BeaconProductInfoRecord);
    v35 = v54;
    if (*(_BYTE *)(v34 + *(int *)(v13 + 28)) != 1)
    {
      sub_1000126B0(v34, type metadata accessor for BeaconProductInfoRecord);
      v19 = (uint64_t)a1;
      v20 = v35;
      goto LABEL_16;
    }
    if (qword_1010E9F20 != -1)
      swift_once(&qword_1010E9F20, sub_100791C44);
    v36 = type metadata accessor for Logger(0);
    sub_10001A9E8(v36, (uint64_t)qword_1011B7648);
    v37 = sub_100030784((uint64_t)a1, (uint64_t)v56);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.default.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = swift_slowAlloc(22, -1);
      v52 = swift_slowAlloc(32, -1);
      v59 = v52;
      *(_DWORD *)v40 = 141558275;
      v55 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v40 + 4, v40 + 12);
      *(_WORD *)(v40 + 12) = 2081;
      v50 = v40 + 14;
      v42 = v57;
      v41 = v58;
      sub_10001AA44(v56, v57);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v41 + 8) + 8) + 32))(v42);
      v43 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v44 = dispatch thunk of CustomStringConvertible.description.getter(v6, v43);
      v46 = v45;
      v18(v9, v6);
      v55 = sub_100016940(v44, v46, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v50, v40 + 22);
      v35 = v54;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v56);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Hiding beacon %{private,mask.hash}s because productInfo has hidden flag set.", (uint8_t *)v40, 0x16u);
      v47 = v52;
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v40, -1, -1);

      v48 = v51;
    }
    else
    {

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v56);
      v48 = v34;
    }
    sub_1000126B0(v48, type metadata accessor for BeaconProductInfoRecord);
    *(_QWORD *)(v35 + 32) = 0;
    *(_OWORD *)v35 = 0u;
    *(_OWORD *)(v35 + 16) = 0u;
  }
  else
  {
    v21 = a3;
    v52 = v7;
    if (qword_1010E9F20 != -1)
      swift_once(&qword_1010E9F20, sub_100791C44);
    v22 = type metadata accessor for Logger(0);
    sub_10001A9E8(v22, (uint64_t)qword_1011B7648);
    v23 = sub_100030784((uint64_t)a1, (uint64_t)v56);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(22, -1);
      v51 = swift_slowAlloc(32, -1);
      v59 = v51;
      *(_DWORD *)v26 = 141558275;
      v55 = 1752392040;
      v53 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v26 + 4, v26 + 12);
      *(_WORD *)(v26 + 12) = 2081;
      v50 = v26 + 14;
      v54 = a3;
      v28 = v57;
      v27 = v58;
      sub_10001AA44(v56, v57);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v27 + 8) + 8) + 32))(v28);
      v29 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v30 = dispatch thunk of CustomStringConvertible.description.getter(v6, v29);
      v32 = v31;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v9, v6);
      v55 = sub_100016940(v30, v32, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v50, v26 + 22);
      v21 = v54;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v56);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Filtering %{private,mask.hash}s because it has automatic share type (e.g. it's Family member's item) or Items Sharing feature disabled.", (uint8_t *)v26, 0x16u);
      v33 = v51;
      swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v56);
    }

    *(_QWORD *)(v21 + 32) = 0;
    *(_OWORD *)v21 = 0u;
    *(_OWORD *)(v21 + 16) = 0u;
  }
}

uint64_t sub_100489EAC(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62[80];
  _QWORD *v63;
  _QWORD aBlock[7];

  v57 = a2;
  v58 = a3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v59 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v61 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = mach_continuous_time();
  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B7648);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = a4;
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "BeaconManagerService: allBeacons(ofTypes:includeDupes:includeHidden:completion:(", v19, 2u);
    v20 = v19;
    a4 = v18;
    swift_slowDealloc(v20, -1, -1);
  }

  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRetain(a1);
  }
  else
  {
    v21 = sub_10001A9A8(&qword_1011002F0);
    inited = swift_initStackObject(v21, v62);
    v52 = a4;
    v23 = inited;
    *(_OWORD *)(inited + 16) = xmmword_100E26E10;
    v24 = (void *)SPBeaconTypeSelfBeaconing;
    *(_QWORD *)(inited + 32) = SPBeaconTypeSelfBeaconing;
    v25 = inited + 32;
    v26 = (void *)SPBeaconTypeDurian;
    v27 = (void *)SPBeaconTypeAccessory;
    *(_QWORD *)(inited + 40) = SPBeaconTypeDurian;
    *(_QWORD *)(inited + 48) = v27;
    v55 = v11;
    v28 = (void *)SPBeaconTypeVirtualMeDevice;
    v54 = v13;
    v29 = (void *)SPBeaconTypeHele;
    *(_QWORD *)(inited + 56) = SPBeaconTypeVirtualMeDevice;
    *(_QWORD *)(inited + 64) = v29;
    v53 = a5;
    v30 = (void *)SPBeaconTypeLocalFindable;
    *(_QWORD *)(inited + 72) = SPBeaconTypeLocalFindable;
    v31 = v24;
    v32 = v26;
    v33 = v27;
    v34 = v28;
    v11 = v55;
    v35 = v29;
    v13 = v54;
    v36 = v30;
    a5 = v53;
    a1 = sub_100CA84A8(v23);
    v37 = v23;
    a4 = v52;
    swift_setDeallocating(v37);
    type metadata accessor for SPBeaconType(0);
    swift_arrayDestroy(v25, 6, v38);
  }
  v39 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (v39)
  {
    v40 = v39;
    v41 = objc_msgSend(v39, "processIdentifier");

  }
  else
  {
    v41 = 0;
  }
  v42 = v60;
  v43 = swift_allocObject(&unk_101078C90, 72, 7);
  *(_QWORD *)(v43 + 16) = v42;
  *(_QWORD *)(v43 + 24) = a1;
  *(_BYTE *)(v43 + 32) = v57 & 1;
  *(_BYTE *)(v43 + 33) = v58 & 1;
  *(_QWORD *)(v43 + 40) = v56;
  *(_DWORD *)(v43 + 48) = v41;
  *(_QWORD *)(v43 + 56) = a4;
  *(_QWORD *)(v43 + 64) = a5;
  aBlock[4] = sub_1004CFFD8;
  aBlock[5] = v43;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101078CA8;
  v44 = _Block_copy(aBlock);
  swift_retain();
  v45 = swift_retain();
  static DispatchQoS.unspecified.getter(v45);
  v63 = _swiftEmptyArrayStorage;
  v46 = v13;
  v47 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v48 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v49 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v63, v48, v49, v8, v47);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v10, v44);
  _Block_release(v44);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v46, v11);
  return swift_release();
}

uint64_t sub_10048A308(uint64_t a1, uint64_t a2, char a3, int a4, Swift::UInt64 a5, int a6, void (*a7)(uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v27;
  uint64_t v28;
  _QWORD *v29;

  v13 = mach_continuous_time();
  v14 = sub_100017368();
  v15 = sub_10047EBD8(v14, a2, a3, a4);
  swift_bridgeObjectRelease();
  v29 = _swiftEmptyArrayStorage;
  swift_retain();
  v16 = sub_1004BCB44((uint64_t)v15, a1);
  swift_bridgeObjectRelease();
  swift_release();
  sub_100304320((uint64_t)v16);
  v17 = mach_continuous_time();
  if (v17 >= a5)
  {
    a5 = convertToNanoseconds(_:)(v17 - a5);
    if (v17 >= v13)
    {
      v13 = convertToNanoseconds(_:)(v17 - v13);
      if (qword_1010E9F20 == -1)
        goto LABEL_5;
      goto LABEL_9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_9:
  swift_once(&qword_1010E9F20, sub_100791C44);
LABEL_5:
  v18 = type metadata accessor for Logger(0);
  sub_10001A9E8(v18, (uint64_t)qword_1011B7648);
  variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
  variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
  variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
  v19 = variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (double)a5 / 1000000.0;
    v23 = swift_slowAlloc(40, -1);
    *(_DWORD *)v23 = 67110144;
    LODWORD(v27) = a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, (char *)&v27 + 4, v23 + 4, v23 + 8);
    *(_WORD *)(v23 + 8) = 1040;
    LODWORD(v27) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, (char *)&v27 + 4, v23 + 10, v23 + 14);
    *(_WORD *)(v23 + 14) = 2048;
    v27 = (double)v13 / 1000000.0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v23 + 16, v23 + 24);
    *(_WORD *)(v23 + 24) = 1040;
    LODWORD(v27) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, (char *)&v27 + 4, v23 + 26, v23 + 30);
    *(_WORD *)(v23 + 30) = 2048;
    v27 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v23 + 32, v23 + 40);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "allBeacons [pid: %d] duration: %.*fms  -- queued: %.*fms", (uint8_t *)v23, 0x28u);
    swift_slowDealloc(v23, -1, -1);
  }

  v24 = sub_100CA864C((uint64_t)v29);
  swift_bridgeObjectRelease();
  a7(v24);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10048A5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[17] = a6;
  v7[18] = a7;
  v7[15] = a4;
  v7[16] = a5;
  v8 = type metadata accessor for UUID(0);
  v7[19] = v8;
  v7[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10048A630, 0, 0);
}

uint64_t sub_10048A630()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBA0 + dword_1010EBBA0);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBA4);
    *(_QWORD *)(v0 + 168) = v2;
    *v2 = v0;
    v2[1] = sub_10048A71C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10048A71C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10048A778, 0, 0);
}

uint64_t sub_10048A778()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD, uint64_t);
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  void *v14;
  uint64_t v15;
  id v16;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 176))
  {
    v2 = *(void **)(v0 + 144);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = v2;
    *(_QWORD *)(v0 + 184) = objc_msgSend(v3, "fetchProperties");
    v4 = objc_msgSend(v3, "bundleIdentifier");
    if (v4)
    {
      v5 = v4;
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      v8 = v7;

    }
    else
    {
      v6 = 0;
      v8 = 0;
    }
    *(_QWORD *)(v0 + 192) = v6;
    *(_QWORD *)(v0 + 200) = v8;
    v14 = *(void **)(v0 + 144);
    v15 = *(_QWORD *)(v0 + 152);
    *(_BYTE *)(v0 + 223) = objc_msgSend(v14, "sendInitialBeacons");
    v16 = objc_msgSend(v14, "filterBeaconUUIDs");
    *(_QWORD *)(v0 + 208) = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v15);

    return swift_task_switch(sub_10048A8CC, *(_QWORD *)(v0 + 176), 0);
  }
  else
  {
    v9 = *(void (**)(_QWORD, uint64_t))(v0 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v10 = sub_10028FA08();
    v11 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v10, 0, 0);
    *v12 = 11;
    v9(0, v11);
    swift_errorRelease(v11);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10048A8CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v0 + 200);
  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(_BYTE *)(v0 + 223);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 160);
  v8 = *(void **)(v0 + 136);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v9 = swift_allocObject(&unk_101079960, 72, 7);
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v8;
  *(_QWORD *)(v9 + 32) = v4;
  *(_QWORD *)(v9 + 40) = v5;
  *(_QWORD *)(v9 + 48) = v2;
  *(_BYTE *)(v9 + 56) = v3;
  *(_DWORD *)(v9 + 57) = *(_DWORD *)(v0 + 216);
  *(_DWORD *)(v9 + 60) = *(_DWORD *)(v0 + 219);
  *(_QWORD *)(v9 + 64) = v1;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v1);
  swift_retain();
  UUID.init()(v8);
  v10 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v7, &unk_1010FD138, v9, &unk_101105808, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v10);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10048A9F4, 0, 0);
}

uint64_t sub_10048A9F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, _QWORD))(v0 + 120))(1, 0);
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10048AA40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[6];

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject(&unk_101079168, 24, 7);
  *(_QWORD *)(v12 + 16) = &_swiftEmptySetSingleton;
  v20[1] = *(_QWORD *)(v2 + 128);
  v13 = (_QWORD *)swift_allocObject(&unk_101079190, 48, 7);
  v13[2] = v2;
  v13[3] = v12;
  v13[4] = a1;
  v13[5] = a2;
  aBlock[4] = sub_1004D036C;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010791A8;
  v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  v22 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_release();
  return swift_release();
}

uint64_t sub_10048AC80(uint64_t a1, uint64_t a2, void (*a3)(__n128), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t *v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  __n128 v26;
  _QWORD v28[2];
  void (*v29)(__n128);
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  id v33;
  _BYTE v34[40];

  v8 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v8);
  v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SharedBeaconRecord(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(_QWORD *)(a1 + 280);
  v32 = (_QWORD *)(a2 + 16);
  v15 = sub_100017368();
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    v28[1] = a4;
    v29 = a3;
    v28[0] = v15;
    v17 = v15 + 32;
    v18 = (uint64_t *)&unk_1010F7720;
    v30 = v14;
    do
    {
      sub_100030784(v17, (uint64_t)v34);
      v19 = sub_10001A9A8(v18);
      v20 = swift_dynamicCast(v10, v34, v19, v11, 6);
      v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
      if ((v20 & 1) != 0)
      {
        v21(v10, 0, 1, v11);
        sub_1000126EC((uint64_t)v10, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
        if ((v14[*(int *)(v11 + 52)] & 1) == 0)
        {
          v22 = v18;
          v23 = sub_100285C94((uint64_t)v14, v31);
          swift_beginAccess(v32, v34, 33, 0);
          v24 = v23;
          v18 = v22;
          sub_100A106E8((Swift::Int *)&v33, v24);
          v14 = v30;
          swift_endAccess(v34);

        }
        sub_1000126B0((uint64_t)v14, type metadata accessor for SharedBeaconRecord);
      }
      else
      {
        v21(v10, 1, 1, v11);
        sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010EE180);
      }
      v17 += 40;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    a3 = v29;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v25 = v32;
  swift_beginAccess(v32, v34, 0, 0);
  v26 = swift_bridgeObjectRetain(*v25);
  a3(v26);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10048AECC(uint64_t a1, uint64_t (*a2)(_QWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t (*v44)(_QWORD *);
  _QWORD *v45;
  _QWORD aBlock[6];

  v44 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v43 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v42 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v9 - 8);
  v41 = v9;
  __chkstk_darwin(v9);
  v39 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v38 - v19;
  if (*(_QWORD *)(a1 + 32))
  {
    v38 = v7;
    swift_retain();
    v21 = sub_100B88588(a4);
    type metadata accessor for Transaction(0);
    v22 = swift_allocObject(&unk_1010790F0, 24, 7);
    *(_QWORD *)(v22 + 16) = v21;
    swift_bridgeObjectRetain(v21);
    static Transaction.asyncTask(name:block:)("AdvertisementChangedAnalytics", 29, 2, &unk_1010FD0A0, v22);
    swift_release();
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    static Date.trustedNow.getter((uint64_t)v20);
    v23 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v20, 0, 1, v23);
    sub_100013B60();
    sub_10000F9B8((uint64_t)v20, (uint64_t)v18, (uint64_t *)&unk_1010EA690);
    sub_100B05F0C((uint64_t)v18);
    swift_release();
    sub_100004048((uint64_t)v20, (uint64_t *)&unk_1010EA690);
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    v24 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v25 = (_QWORD *)swift_allocObject(&unk_101079118, 40, 7);
    v25[2] = v44;
    v25[3] = a3;
    v25[4] = v21;
    aBlock[4] = sub_1000170EC;
    aBlock[5] = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101079130;
    v26 = _Block_copy(aBlock);
    v27 = swift_retain();
    v28 = v39;
    static DispatchQoS.unspecified.getter(v27);
    v45 = _swiftEmptyArrayStorage;
    v29 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v30 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v31 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v32 = v42;
    v33 = v38;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v30, v31, v38, v29);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v28, v32, v26);
    _Block_release(v26);
    swift_release();

    (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v33);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v41);
    return swift_release();
  }
  else
  {
    v35 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v36 = (void *)static OS_os_log.default.getter(v35);
    v37 = static os_log_type_t.default.getter(v36);
    os_log(_:dso:log:type:_:)("No localBeaconingManager", 24, 2, &_mh_execute_header, v36, v37, _swiftEmptyArrayStorage);

    return v44(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_10048B34C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10048B364, 0, 0);
}

uint64_t sub_10048B364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 16);
  v2 = type metadata accessor for AnalyticsEvent(0);
  v3 = (char *)swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(_QWORD *)(v0 + 24) = v3;
  swift_defaultActor_initialize(v3);
  v4 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v3 + 14) = v4;
  UUID.init()(v4);
  v5 = &v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v7(&v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v6);
  *((_QWORD *)v3 + 15) = 0xD000000000000032;
  *((_QWORD *)v3 + 16) = 0x8000000100ED7530;
  swift_bridgeObjectRetain(v1);
  return swift_task_switch(sub_10048B46C, v3, 0);
}

uint64_t sub_10048B46C()
{
  uint64_t v0;

  sub_100CE728C(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10048B4D4, 0, 0);
}

uint64_t sub_10048B4D4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[4] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[5] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_10048B540;
  return sub_100CD63AC(v0[3]);
}

uint64_t sub_10048B540()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  swift_release();
  return swift_task_switch(sub_10048B59C, 0, 0);
}

uint64_t sub_10048B59C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10048B5CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  NSString v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t inited;
  unint64_t v24;
  _BYTE v25[72];
  uint64_t v26;
  unint64_t v27;

  v2 = type metadata accessor for HashAlgorithm(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000F4A0(0, &qword_101106C10, NSString_ptr);
  v6 = (void *)NSString.init(stringLiteral:)("", 0, 2);
  if (!((unint64_t)a1 >> 62))
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v7)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  if (a1 < 0)
    v21 = a1;
  else
    v21 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v21))
    goto LABEL_11;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    goto LABEL_6;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v8 = *(id *)(a1 + 32);
LABEL_6:
    v9 = v8;
    swift_bridgeObjectRelease();
    v10 = objc_msgSend(v9, "key");

    v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    sub_10001BBBC(v11, v13);
    sub_1002F7394(v11, v13);
    v15 = v26;
    v14 = v27;
    v24 = v27;
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v2);
    v16 = Data.hash(algorithm:)(v5, v15, v14);
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v26 = v16;
    v27 = v18;
    v19 = sub_100153D50();
    RawRepresentable<>.hexString.getter(&type metadata for HashedAdvertisement, v19);
    sub_10001BC14(v16, v18);
    v20 = String._bridgeToObjectiveC()();

    sub_10001BC14(v11, v13);
    swift_bridgeObjectRelease();
    sub_10001BC14(v15, v24);
    v6 = v20;
LABEL_12:
    v22 = sub_10001A9A8(&qword_1010EEBD0);
    inited = swift_initStackObject(v22, v25);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_QWORD *)(inited + 32) = 0xD000000000000010;
    *(_QWORD *)(inited + 40) = 0x8000000100ED7570;
    *(_QWORD *)(inited + 48) = v6;
    *(_BYTE *)(inited + 56) = 0;
    sub_1006B9444(inited);
    return;
  }
  __break(1u);
}

uint64_t sub_10048B870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7 = (_QWORD *)swift_allocObject(&unk_1010798E8, 40, 7);
  v7[2] = a1;
  v7[3] = a3;
  v7[4] = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  v8 = sub_10001A9A8(&qword_1010F2080);
  v9 = sub_1000193A4(&qword_1010F2088, &qword_1010F2080, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.oneshot(_:)(sub_1004D4804, v7, v8, v9);
  swift_release();
  return swift_release();
}

uint64_t sub_10048B95C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[6];
  _BYTE v10[9];

  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_theftDeterrenceStateManager);
  type metadata accessor for Transaction(0);
  v9[2] = v7;
  v9[3] = a2;
  v9[4] = a3;
  result = static Transaction.named<A>(_:with:)("setSuppressLPEMBeaconing", 24, 2, sub_1004D47A4, v9, &type metadata for () + 1);
  if (*(_QWORD *)(v7 + 128))
  {
    v10[0] = a1 & 1;
    swift_retain();
    CurrentValueSubject.send(_:)(v10);
    return swift_release();
  }
  return result;
}

_QWORD *sub_10048BA14(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  id v52;
  Class v53;
  Class v54;
  id v55;
  id v56;
  id v57;
  Class v58;
  Class v59;
  Class v60;
  id v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  _QWORD *v69;
  char v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  id v84;
  Class isa;
  Class v86;
  id v87;
  id v88;
  id v89;
  Class v90;
  Class v91;
  Class v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  char isUniquelyReferenced_nonNull_native;
  uint64_t (*v100)(uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void (*v110)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v111;
  _QWORD *v112;
  _QWORD v114[2];
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  void (*v130)(char *, uint64_t, uint64_t, uint64_t, __n128);
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  _QWORD *v140;
  void (*v141)(char *, uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;

  v129 = a2;
  v145 = _s18ConnectionKeyGroupVMa(0);
  v124 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v144 = (char *)v114 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010F1958);
  __chkstk_darwin(v4);
  v114[1] = (char *)v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DateInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v146 = (char *)v114 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for TimeBasedKey(0);
  v125 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143);
  v10 = (char *)v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_101111B40);
  __chkstk_darwin(v11);
  v13 = (char *)v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LostModeInfoRecord(0);
  v120 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v119 = (uint64_t)v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v16);
  v136 = (char *)v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for WildModeAssociationRecord(0);
  v123 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v122 = (uint64_t)v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UUID(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v138 = (char *)v114 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v24 = (char *)v114 - v23;
  v25 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v25);
  v27 = (char *)v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = *(_QWORD *)(a1 + 16);
  v116 = a1;
  if (v132)
  {
    v134 = a1 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    v133 = *(_QWORD *)(v20 + 72);
    v141 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
    swift_bridgeObjectRetain(a1);
    v28 = 0;
    v151 = 0;
    v140 = _swiftEmptyDictionarySingleton;
    v121 = xmmword_100E22D10;
    v115 = xmmword_100E22B10;
    v126 = xmmword_100E22B00;
    v147 = v6;
    v149 = v7;
    v150 = v10;
    v118 = v13;
    v117 = v14;
    v139 = v19;
    v29 = (uint64_t)v136;
    v137 = v20;
    v128 = v27;
    v131 = v24;
    do
    {
      v142 = v28;
      v141(v27, v134 + v133 * v28, v19);
      v130 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v20 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v130)(v27, 0, 1, v19);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v27, 1, v19) == 1)
      {
        v112 = v140;
        goto LABEL_22;
      }
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v24, v27, v19);
      v30 = *(_QWORD *)(v135 + 280);
      sub_10080B648((uint64_t)v24, (uint64_t)&v153);
      if (v154)
      {
        sub_10000F9FC(&v153, (uint64_t)&v152);
        sub_10000F9FC(&v152, (uint64_t)&v153);
        v31 = v154;
        v32 = v155;
        v33 = sub_10001AA44(&v153, v154);
        sub_1008595F4((uint64_t)v33, v129, 0, 0, 0, v30, v31, v32);
        __asm { BR              X9 }
      }
      sub_100004048((uint64_t)&v153, (uint64_t *)&unk_1010EE310);
      sub_10081C0CC((uint64_t)v24, v29);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v123 + 48))(v29, 1, v127) == 1)
      {
        sub_100004048(v29, &qword_101102FB0);
        v35 = sub_100889F84((uint64_t)v24);
        if (v35[2])
        {
          v36 = v120;
          v37 = (uint64_t)v118;
          sub_10005972C((uint64_t)v35+ ((*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80)), (uint64_t)v118, type metadata accessor for LostModeInfoRecord);
          v38 = v36;
          v39 = 0;
        }
        else
        {
          v39 = 1;
          v38 = v120;
          v37 = (uint64_t)v118;
        }
        v74 = v117;
        v75 = v38;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v37, v39, 1, v117);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v37, 1, v74) == 1)
        {
          v76 = v137;
          (*(void (**)(char *, uint64_t))(v137 + 8))(v24, v19);
          v77 = v37;
          v20 = v76;
          sub_100004048(v77, &qword_101111B40);
        }
        else
        {
          v78 = v119;
          sub_1000126EC(v37, v119, type metadata accessor for LostModeInfoRecord);
          v79 = (uint64_t *)(v78 + *(int *)(v74 + 44));
          v80 = v24;
          v81 = *v79;
          v82 = v79[1];
          v83 = v19;
          v84 = objc_allocWithZone((Class)SPBeaconingKey);
          sub_10001BBBC(v81, v82);
          isa = DateInterval._bridgeToObjectiveC()().super.isa;
          v86 = Data._bridgeToObjectiveC()().super.isa;
          v87 = objc_msgSend(v84, "initWithDateInterval:key:", isa, v86);

          sub_10001BC14(v81, v82);
          v88 = objc_allocWithZone((Class)SPCommandKeys);
          v89 = v87;
          v90 = Data._bridgeToObjectiveC()().super.isa;
          v91 = Data._bridgeToObjectiveC()().super.isa;
          v92 = Data._bridgeToObjectiveC()().super.isa;
          v93 = objc_msgSend(v88, "initWithBeaconingKey:commandKey:connectionToken:nearbyToken:", v89, v90, v91, v92);

          v94 = (uint64_t)v138;
          v24 = v80;
          v141(v138, (uint64_t)v80, v83);
          v95 = sub_10001A9A8(&qword_10111BE20);
          v96 = swift_allocObject(v95, 40, 7);
          *(_OWORD *)(v96 + 16) = v121;
          *(_QWORD *)(v96 + 32) = v93;
          *(_QWORD *)&v153 = v96;
          specialized Array._endMutation()(v96);
          v97 = v153;
          v148 = v93;
          v98 = v140;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v140);
          *(_QWORD *)&v153 = v98;
          sub_10010D0F0(v97, v94, isUniquelyReferenced_nonNull_native);
          v140 = (_QWORD *)v153;
          swift_bridgeObjectRelease();
          v100 = *(uint64_t (**)(uint64_t, uint64_t))(v137 + 8);
          v101 = v100(v94, v83);
          v102 = static os_log_type_t.default.getter(v101);
          if (qword_1010EA2E8 != -1)
            swift_once(&qword_1010EA2E8, sub_100B5E0D8);
          v103 = qword_1011B7DC8;
          v104 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
          v105 = swift_allocObject(v104, 112, 7);
          *(_OWORD *)(v105 + 16) = v115;
          v106 = UUID.uuidString.getter(v105);
          v108 = v107;
          *(_QWORD *)(v105 + 56) = &type metadata for String;
          v109 = sub_10001AA00();
          *(_QWORD *)(v105 + 32) = v106;
          *(_QWORD *)(v105 + 40) = v108;
          *(_QWORD *)(v105 + 96) = &type metadata for Int;
          *(_QWORD *)(v105 + 104) = &protocol witness table for Int;
          *(_QWORD *)(v105 + 64) = v109;
          *(_QWORD *)(v105 + 72) = 1;
          os_log(_:dso:log:_:_:)(v102, &_mh_execute_header, v103, "UUID %@ is a lostMode record with %d records", 44, 2, v105);

          swift_bridgeObjectRelease();
          sub_1000126B0(v119, type metadata accessor for LostModeInfoRecord);
          v19 = v139;
          v100((uint64_t)v24, v139);
          v20 = v137;
        }
      }
      else
      {
        v40 = sub_1000126EC(v29, v122, type metadata accessor for WildModeAssociationRecord);
        v41 = static os_log_type_t.default.getter(v40);
        if (qword_1010EA2F8 != -1)
          swift_once(&qword_1010EA2F8, sub_100B5E19C);
        v42 = qword_1011B7DD8;
        v43 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v44 = swift_allocObject(v43, 72, 7);
        *(_OWORD *)(v44 + 16) = v126;
        v45 = UUID.uuidString.getter(v44);
        v47 = v46;
        *(_QWORD *)(v44 + 56) = &type metadata for String;
        *(_QWORD *)(v44 + 64) = sub_10001AA00();
        *(_QWORD *)(v44 + 32) = v45;
        *(_QWORD *)(v44 + 40) = v47;
        os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v42, "#Durian: UUID %@ is a UT record", 31, 2, v44);
        v48 = swift_bridgeObjectRelease();
        v49 = MACAddress.data.getter(v48);
        v51 = v50;
        v52 = objc_allocWithZone((Class)SPBeaconingKey);
        v53 = DateInterval._bridgeToObjectiveC()().super.isa;
        v54 = Data._bridgeToObjectiveC()().super.isa;
        v55 = objc_msgSend(v52, "initWithDateInterval:key:", v53, v54);

        sub_10001BC14(v49, v51);
        v56 = objc_allocWithZone((Class)SPCommandKeys);
        v57 = v55;
        v58 = Data._bridgeToObjectiveC()().super.isa;
        v59 = Data._bridgeToObjectiveC()().super.isa;
        v60 = Data._bridgeToObjectiveC()().super.isa;
        v61 = objc_msgSend(v56, "initWithBeaconingKey:commandKey:connectionToken:nearbyToken:", v57, v58, v59, v60);

        v62 = (uint64_t)v138;
        v63 = v131;
        v64 = v139;
        v141(v138, (uint64_t)v131, v139);
        v65 = sub_10001A9A8(&qword_10111BE20);
        v66 = swift_allocObject(v65, 40, 7);
        *(_OWORD *)(v66 + 16) = v121;
        *(_QWORD *)(v66 + 32) = v61;
        *(_QWORD *)&v153 = v66;
        specialized Array._endMutation()(v66);
        v67 = v153;
        v68 = v61;
        v69 = v140;
        v70 = swift_isUniquelyReferenced_nonNull_native(v140);
        *(_QWORD *)&v153 = v69;
        sub_10010D0F0(v67, v62, v70);
        v140 = (_QWORD *)v153;
        swift_bridgeObjectRelease();
        v71 = v137;
        v72 = *(void (**)(uint64_t, uint64_t))(v137 + 8);
        v72(v62, v64);

        v19 = v64;
        v20 = v71;
        v24 = v63;
        sub_1000126B0(v122, type metadata accessor for WildModeAssociationRecord);
        v72((uint64_t)v63, v64);
        v27 = v128;
      }
      v28 = v142 + 1;
      v29 = (uint64_t)v136;
    }
    while (v142 + 1 != v132);
    v112 = v140;
    v130(v27, 1, 1, v19, v73);
  }
  else
  {
    v110 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v20 + 56);
    v111 = swift_bridgeObjectRetain(a1);
    v112 = _swiftEmptyDictionarySingleton;
    v110(v27, 1, 1, v19, v111);
  }
LABEL_22:
  swift_bridgeObjectRelease();
  return v112;
}

void sub_10048D14C()
{
  JUMPOUT(0x10048D178);
}

uint64_t sub_10048D3CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v41[4];
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD aBlock[6];

  v5 = v4;
  v45 = a1;
  v46 = a4;
  v43 = a2;
  v44 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v51 = *(_QWORD *)(v6 - 8);
  v52 = v6;
  __chkstk_darwin(v6);
  v50 = &v41[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for DispatchQoS(0);
  v48 = *(_QWORD *)(v8 - 8);
  v49 = v8;
  __chkstk_darwin(v8);
  v47 = &v41[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for DateInterval(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = &v41[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v42 = static os_log_type_t.info.getter(v13);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v15 = qword_1011B7D28;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v16, 112, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E22B10;
  aBlock[0] = *v5;
  v18 = sub_10001A9A8(&qword_1010F49B8);
  v19 = String.init<A>(describing:)(aBlock, v18);
  v21 = v20;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  v22 = sub_10001AA00();
  *(_QWORD *)(v17 + 32) = v19;
  *(_QWORD *)(v17 + 40) = v21;
  *(_QWORD *)(v17 + 96) = &type metadata for String;
  *(_QWORD *)(v17 + 104) = v22;
  *(_QWORD *)(v17 + 64) = v22;
  *(_QWORD *)(v17 + 72) = 0xD000000000000029;
  *(_QWORD *)(v17 + 80) = 0x8000000100ED7370;
  os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v15, "%@: %@", 6, 2, v17);
  swift_bridgeObjectRelease();
  v23 = swift_allocObject(&unk_101078FD8, 24, 7);
  swift_weakInit(v23 + 16, v5);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(&v41[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)], v43, v10);
  v24 = *(unsigned __int8 *)(v11 + 80);
  v25 = (v24 + 32) & ~v24;
  v26 = (v12 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = swift_allocObject(&unk_101079000, v26 + 16, v24 | 7);
  v28 = v45;
  *(_QWORD *)(v27 + 16) = v23;
  *(_QWORD *)(v27 + 24) = v28;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(v27 + v25, v14, v10);
  v29 = (_QWORD *)(v27 + v26);
  v30 = v46;
  *v29 = v44;
  v29[1] = v30;
  aBlock[4] = sub_1004D0250;
  aBlock[5] = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101079018;
  v31 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(v28);
  v32 = swift_retain();
  v33 = v47;
  static DispatchQoS.unspecified.getter(v32);
  v53 = _swiftEmptyArrayStorage;
  v34 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v35 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v36 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v37 = v50;
  v38 = v35;
  v39 = v52;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v38, v36, v52, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v33, v37, v31);
  _Block_release(v31);
  (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v37, v39);
  (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v33, v49);
  swift_release();
  return swift_release();
}

void sub_10048D790(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  void (*v45)(char *, unint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD v67[2];
  void (*v68)(uint64_t);
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  __int128 v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  int64_t v80;
  char *v81;
  _QWORD *v82;
  char v83[32];

  v67[1] = a5;
  v68 = a4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v81 = (char *)v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FD090);
  v11 = __chkstk_darwin(v78);
  v77 = (char *)v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v67 - v14;
  __chkstk_darwin(v13);
  v76 = (char *)v67 - v16;
  a1 += 16;
  swift_beginAccess(a1, v83, 0, 0);
  if (swift_weakLoadStrong(a1))
  {
    v17 = (uint64_t)sub_10048BA14(a2, a3);
    v18 = swift_release();
  }
  else
  {
    v18 = sub_1006BAB90((uint64_t)_swiftEmptyArrayStorage);
    v17 = v18;
  }
  v19 = static os_log_type_t.default.getter(v18);
  if (qword_1010EA270 != -1)
LABEL_48:
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, qword_1011B7D50, "#Durian: Returning keys for command", 35, 2, _swiftEmptyArrayStorage);
  v20 = *(_QWORD *)(v17 + 64);
  v69 = v17 + 64;
  v21 = 1 << *(_BYTE *)(v17 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v19 = v22 & v20;
  v70 = (unint64_t)(v21 + 63) >> 6;
  swift_bridgeObjectRetain(v17);
  v23 = 0;
  v72 = xmmword_100E22B10;
  v74 = v17;
  v75 = v9;
  v73 = v15;
  v71 = v8;
  while (1)
  {
    if (v19)
    {
      v79 = (v19 - 1) & v19;
      v80 = v23;
      v40 = __clz(__rbit64(v19)) | (v23 << 6);
      goto LABEL_29;
    }
    v41 = v23 + 1;
    if (__OFADD__(v23, 1))
      goto LABEL_47;
    if (v41 >= v70)
    {
LABEL_45:
      swift_release();
      v68(v17);
      swift_bridgeObjectRelease();
      return;
    }
    v42 = *(_QWORD *)(v69 + 8 * v41);
    v43 = v23 + 1;
    if (!v42)
    {
      v43 = v23 + 2;
      if (v23 + 2 >= v70)
        goto LABEL_45;
      v42 = *(_QWORD *)(v69 + 8 * v43);
      if (!v42)
      {
        v43 = v23 + 3;
        if (v23 + 3 >= v70)
          goto LABEL_45;
        v42 = *(_QWORD *)(v69 + 8 * v43);
        if (!v42)
        {
          v43 = v23 + 4;
          if (v23 + 4 >= v70)
            goto LABEL_45;
          v42 = *(_QWORD *)(v69 + 8 * v43);
          if (!v42)
          {
            v43 = v23 + 5;
            if (v23 + 5 >= v70)
              goto LABEL_45;
            v42 = *(_QWORD *)(v69 + 8 * v43);
            if (!v42)
              break;
          }
        }
      }
    }
LABEL_28:
    v79 = (v42 - 1) & v42;
    v80 = v43;
    v40 = __clz(__rbit64(v42)) + (v43 << 6);
LABEL_29:
    v45 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    v46 = (uint64_t)v76;
    v45(v76, *(_QWORD *)(v17 + 48) + *(_QWORD *)(v9 + 72) * v40, v8);
    v47 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v40);
    v48 = v78;
    *(_QWORD *)(v46 + *(int *)(v78 + 48)) = v47;
    sub_100005CF0(v46, (uint64_t)v15, &qword_1010FD090);
    v49 = *(int *)(v48 + 48);
    v50 = v77;
    v45(v77, (unint64_t)v15, v8);
    v19 = *(_QWORD *)&v15[v49];
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v81, v50, v8);
    if ((unint64_t)v19 >> 62)
    {
      if (v19 < 0)
        v66 = v19;
      else
        v66 = v19 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRetain(v19);
      v17 = _CocoaArrayWrapper.endIndex.getter(v66);
      if (!v17)
      {
LABEL_44:
        v24 = swift_bridgeObjectRelease();
        v52 = _swiftEmptyArrayStorage;
        goto LABEL_8;
      }
    }
    else
    {
      v17 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v47);
      swift_bridgeObjectRetain(v19);
      if (!v17)
        goto LABEL_44;
    }
    v82 = _swiftEmptyArrayStorage;
    sub_10009A2F4(0, v17 & ~(v17 >> 63), 0);
    if (v17 < 0)
    {
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    v51 = 0;
    v52 = v82;
    do
    {
      if ((v19 & 0xC000000000000001) != 0)
        v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v51, v19);
      else
        v53 = *(id *)(v19 + 8 * v51 + 32);
      v54 = v53;
      v55 = objc_msgSend(v53, "beaconingKey");
      v56 = objc_msgSend(v55, "key");

      v57 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v56);
      v59 = v58;

      v60 = Data.hexString.getter(v57, v59);
      v62 = v61;
      sub_10001BC14(v57, v59);

      v82 = v52;
      v64 = v52[2];
      v63 = v52[3];
      if (v64 >= v63 >> 1)
      {
        sub_10009A2F4(v63 > 1, v64 + 1, 1);
        v52 = v82;
      }
      ++v51;
      v52[2] = v64 + 1;
      v65 = &v52[2 * v64];
      v65[4] = v60;
      v65[5] = v62;
    }
    while (v17 != v51);
    v24 = swift_bridgeObjectRelease();
    v8 = v71;
LABEL_8:
    v25 = static os_log_type_t.default.getter(v24);
    v26 = qword_1011B7D50;
    v27 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v28 = swift_allocObject(v27, 112, 7);
    *(_OWORD *)(v28 + 16) = v72;
    v29 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v30 = v81;
    v31 = dispatch thunk of CustomStringConvertible.description.getter(v8, v29);
    v33 = v32;
    *(_QWORD *)(v28 + 56) = &type metadata for String;
    v34 = sub_10001AA00();
    *(_QWORD *)(v28 + 64) = v34;
    *(_QWORD *)(v28 + 32) = v31;
    *(_QWORD *)(v28 + 40) = v33;
    v82 = v52;
    v35 = sub_10001A9A8(&qword_1011063B0);
    v36 = sub_1000193A4((unint64_t *)&qword_1010F1AD8, &qword_1011063B0, (const char *)&protocol conformance descriptor for [A]);
    v37 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v35, v36);
    v39 = v38;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v28 + 96) = &type metadata for String;
    *(_QWORD *)(v28 + 104) = v34;
    *(_QWORD *)(v28 + 72) = v37;
    *(_QWORD *)(v28 + 80) = v39;
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "%@: %@", 6, 2, v28);
    swift_bridgeObjectRelease();
    v9 = v75;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v30, v8);
    v15 = v73;
    sub_100004048((uint64_t)v73, &qword_1010FD090);
    v17 = v74;
    v19 = v79;
    v23 = v80;
  }
  v44 = v23 + 6;
  if (v23 + 6 >= v70)
    goto LABEL_45;
  v42 = *(_QWORD *)(v69 + 8 * v44);
  if (v42)
  {
    v43 = v23 + 6;
    goto LABEL_28;
  }
  while (1)
  {
    v43 = v44 + 1;
    if (__OFADD__(v44, 1))
      break;
    if (v43 >= v70)
      goto LABEL_45;
    v42 = *(_QWORD *)(v69 + 8 * v43);
    ++v44;
    if (v42)
      goto LABEL_28;
  }
  __break(1u);
}

uint64_t sub_10048DE2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD aBlock[6];

  v4 = v3;
  v34 = a1;
  v35 = a3;
  v33 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v8 - 8);
  v37 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static os_log_type_t.info.getter(v9);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v13 = qword_1011B7D28;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 112, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B10;
  aBlock[0] = *v3;
  v16 = sub_10001A9A8(&qword_1010F49B8);
  v17 = String.init<A>(describing:)(aBlock, v16);
  v19 = v18;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  v20 = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v17;
  *(_QWORD *)(v15 + 40) = v19;
  *(_QWORD *)(v15 + 96) = &type metadata for String;
  *(_QWORD *)(v15 + 104) = v20;
  *(_QWORD *)(v15 + 64) = v20;
  *(_QWORD *)(v15 + 72) = 0xD00000000000001CLL;
  *(_QWORD *)(v15 + 80) = 0x8000000100ED7480;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "%@: %@", 6, 2, v15);
  swift_bridgeObjectRelease();
  v21 = swift_allocObject(&unk_101078FD8, 24, 7);
  swift_weakInit(v21 + 16, v4);
  v22 = (_QWORD *)swift_allocObject(&unk_101079050, 48, 7);
  v23 = v33;
  v24 = v34;
  v22[2] = v21;
  v22[3] = v24;
  v25 = v35;
  v22[4] = v23;
  v22[5] = v25;
  aBlock[4] = sub_1004D02AC;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101079068;
  v26 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(v24);
  v27 = swift_retain();
  static DispatchQoS.unspecified.getter(v27);
  v39 = _swiftEmptyArrayStorage;
  v28 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v29 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v30 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v29, v30, v5, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v37);
  swift_release();
  return swift_release();
}

void sub_10048E15C(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, unint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  id v62;
  void *v63;
  id v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(_QWORD *);
  _QWORD *v78;
  int64_t v79;
  __int128 v80;
  char *v81;
  char *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  int64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  char v93[32];

  v76 = a4;
  v77 = a3;
  v6 = type metadata accessor for UUID(0);
  v89 = *(_QWORD *)(v6 - 8);
  v90 = v6;
  __chkstk_darwin(v6);
  v88 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_10001A9A8(&qword_1010FD090);
  v8 = __chkstk_darwin(v83);
  v82 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v87 = (uint64_t)&v76 - v11;
  __chkstk_darwin(v10);
  v81 = (char *)&v76 - v12;
  v13 = type metadata accessor for Date(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DateInterval(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v93, 0, 0);
  if (swift_weakLoadStrong(a1))
  {
    static Date.trustedNow.getter((uint64_t)v15);
    DateInterval.init(start:duration:)(v15, 1.0);
    v84 = sub_10048BA14(a2, (uint64_t)v19);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v20 = swift_release();
  }
  else
  {
    v20 = sub_1006BAB90((uint64_t)_swiftEmptyArrayStorage);
    v84 = (_QWORD *)v20;
  }
  v21 = static os_log_type_t.default.getter(v20);
  if (qword_1010EA270 != -1)
LABEL_48:
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, qword_1011B7D50, "Returning keys for command", 26, 2, _swiftEmptyArrayStorage, v76);
  v22 = v84;
  v23 = v84[8];
  v78 = v84 + 8;
  v24 = 1 << *((_BYTE *)v84 + 32);
  v25 = -1;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  v21 = v25 & v23;
  v79 = (unint64_t)(v24 + 63) >> 6;
  swift_bridgeObjectRetain(v84);
  v26 = 0;
  v80 = xmmword_100E22B10;
  while (1)
  {
    if (v21)
    {
      v85 = (v21 - 1) & v21;
      v86 = v26;
      v44 = __clz(__rbit64(v21)) | (v26 << 6);
      goto LABEL_29;
    }
    v45 = v26 + 1;
    if (__OFADD__(v26, 1))
      goto LABEL_47;
    if (v45 >= v79)
    {
LABEL_45:
      swift_release();
      v77(v22);
      swift_bridgeObjectRelease();
      return;
    }
    v46 = v78[v45];
    v47 = v26 + 1;
    if (!v46)
    {
      v47 = v26 + 2;
      if (v26 + 2 >= v79)
        goto LABEL_45;
      v46 = v78[v47];
      if (!v46)
      {
        v47 = v26 + 3;
        if (v26 + 3 >= v79)
          goto LABEL_45;
        v46 = v78[v47];
        if (!v46)
        {
          v47 = v26 + 4;
          if (v26 + 4 >= v79)
            goto LABEL_45;
          v46 = v78[v47];
          if (!v46)
          {
            v47 = v26 + 5;
            if (v26 + 5 >= v79)
              goto LABEL_45;
            v46 = v78[v47];
            if (!v46)
              break;
          }
        }
      }
    }
LABEL_28:
    v85 = (v46 - 1) & v46;
    v86 = v47;
    v44 = __clz(__rbit64(v46)) + (v47 << 6);
LABEL_29:
    v50 = v89;
    v49 = v90;
    v51 = *(void (**)(char *, unint64_t, uint64_t))(v89 + 16);
    v52 = (uint64_t)v81;
    v51(v81, v22[6] + *(_QWORD *)(v89 + 72) * v44, v90);
    v53 = *(_QWORD *)(v22[7] + 8 * v44);
    v54 = v83;
    *(_QWORD *)(v52 + *(int *)(v83 + 48)) = v53;
    v55 = v87;
    sub_100005CF0(v52, v87, &qword_1010FD090);
    v56 = *(int *)(v54 + 48);
    v57 = v82;
    v51(v82, v55, v49);
    v58 = *(_QWORD *)(v55 + v56);
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v88, v57, v49);
    if ((unint64_t)v58 >> 62)
    {
      if (v58 < 0)
        v75 = v58;
      else
        v75 = v58 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v58);
      v21 = _CocoaArrayWrapper.endIndex.getter(v75);
      if (!v21)
      {
LABEL_44:
        v27 = swift_bridgeObjectRelease();
        v60 = _swiftEmptyArrayStorage;
        goto LABEL_8;
      }
    }
    else
    {
      v21 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(v58);
      if (!v21)
        goto LABEL_44;
    }
    v92 = _swiftEmptyArrayStorage;
    sub_10009A2F4(0, v21 & ~(v21 >> 63), 0);
    if (v21 < 0)
    {
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    v59 = 0;
    v60 = v92;
    v91 = v58 & 0xC000000000000001;
    v61 = v58;
    do
    {
      if (v91)
        v62 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v59, v58);
      else
        v62 = *(id *)(v58 + 8 * v59 + 32);
      v63 = v62;
      v64 = objc_msgSend(v62, "beaconingKey");
      v65 = objc_msgSend(v64, "key");

      v66 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v65);
      v68 = v67;

      v69 = Data.hexString.getter(v66, v68);
      v71 = v70;
      sub_10001BC14(v66, v68);

      v92 = v60;
      v73 = v60[2];
      v72 = v60[3];
      if (v73 >= v72 >> 1)
      {
        sub_10009A2F4(v72 > 1, v73 + 1, 1);
        v60 = v92;
      }
      ++v59;
      v60[2] = v73 + 1;
      v74 = &v60[2 * v73];
      v74[4] = v69;
      v74[5] = v71;
      v58 = v61;
    }
    while (v21 != v59);
    v27 = swift_bridgeObjectRelease();
LABEL_8:
    v28 = static os_log_type_t.default.getter(v27);
    v29 = qword_1011B7D50;
    v30 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v31 = swift_allocObject(v30, 112, 7);
    *(_OWORD *)(v31 + 16) = v80;
    v32 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v33 = v88;
    v34 = v90;
    v35 = dispatch thunk of CustomStringConvertible.description.getter(v90, v32);
    v37 = v36;
    *(_QWORD *)(v31 + 56) = &type metadata for String;
    v38 = sub_10001AA00();
    *(_QWORD *)(v31 + 64) = v38;
    *(_QWORD *)(v31 + 32) = v35;
    *(_QWORD *)(v31 + 40) = v37;
    v92 = v60;
    v39 = sub_10001A9A8(&qword_1011063B0);
    v40 = sub_1000193A4((unint64_t *)&qword_1010F1AD8, &qword_1011063B0, (const char *)&protocol conformance descriptor for [A]);
    v41 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v39, v40);
    v43 = v42;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v31 + 96) = &type metadata for String;
    *(_QWORD *)(v31 + 104) = v38;
    *(_QWORD *)(v31 + 72) = v41;
    *(_QWORD *)(v31 + 80) = v43;
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "%@: %@", 6, 2, v31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v89 + 8))(v33, v34);
    sub_100004048(v87, &qword_1010FD090);
    v22 = v84;
    v21 = v85;
    v26 = v86;
  }
  v48 = v26 + 6;
  if (v26 + 6 >= v79)
    goto LABEL_45;
  v46 = v78[v48];
  if (v46)
  {
    v47 = v26 + 6;
    goto LABEL_28;
  }
  while (1)
  {
    v47 = v48 + 1;
    if (__OFADD__(v48, 1))
      break;
    if (v47 >= v79)
      goto LABEL_45;
    v46 = v78[v47];
    ++v48;
    if (v46)
      goto LABEL_28;
  }
  __break(1u);
}

uint64_t sub_10048E898@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  Class v24;
  Class v25;
  id v26;
  uint64_t result;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  id v42;
  Class isa;
  Class v44;
  Class v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _OWORD v50[3];
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v49 = a3;
  v5 = type metadata accessor for TimeBasedKey(0);
  v6 = __chkstk_darwin(v5);
  v8 = (unint64_t *)((char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __chkstk_darwin(v6);
  __chkstk_darwin(v9);
  v13 = *a1 / 0x60uLL;
  v48 = *a1;
  if (v48)
    v14 = v13 + 1;
  else
    v14 = 0;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
  {
    v46 = v12;
    v47 = (uint64_t)&v46 - v11;
    v16 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v17 = *(_QWORD *)(v10 + 72);
    swift_bridgeObjectRetain(a2);
    while (1)
    {
      sub_10005972C(v16, (uint64_t)v8, type metadata accessor for TimeBasedKey);
      if (*v8 == v14)
        break;
      sub_1000126B0((uint64_t)v8, type metadata accessor for TimeBasedKey);
      v16 += v17;
      if (!--v15)
      {
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    v28 = v46;
    sub_1000126EC((uint64_t)v8, v46, type metadata accessor for TimeBasedKey);
    v29 = v28;
    v30 = v47;
    sub_1000126EC(v29, v47, type metadata accessor for TimeBasedKey);
    v31 = (__int128 *)((char *)a1 + *(int *)(v5 + 24));
    v32 = v31[2];
    v33 = *v31;
    v52 = v31[1];
    v53 = v32;
    v51 = v33;
    v34 = sub_1007DFD44();
    v46 = v35;
    v36 = (__int128 *)(v30 + *(int *)(v5 + 24));
    v37 = v36[2];
    v38 = *v36;
    v50[1] = v36[1];
    v50[2] = v37;
    v50[0] = v38;
    sub_1004D4410(v50, (void (*)(_QWORD, _QWORD))sub_10005CB9C, (void (*)(uint64_t, uint64_t))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
    v39 = sub_1007DFD44();
    v41 = v40;
    sub_1004D4410(v50, (void (*)(_QWORD, _QWORD))sub_1000FC25C, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
    v42 = objc_allocWithZone((Class)SPBeaconingKey);
    isa = DateInterval._bridgeToObjectiveC()().super.isa;
    v44 = Data._bridgeToObjectiveC()().super.isa;
    v45 = Data._bridgeToObjectiveC()().super.isa;
    sub_10001BC14(v39, v41);
    v26 = objc_msgSend(v42, "initWithDateInterval:key:secondaryKey:primaryIndex:secondaryIndex:", isa, v44, v45, v48, v14);

    sub_10001BC14(v34, v46);
    result = sub_1000126B0(v47, type metadata accessor for TimeBasedKey);
  }
  else
  {
LABEL_9:
    v18 = (__int128 *)((char *)a1 + *(int *)(v5 + 24));
    v19 = v18[1];
    v51 = *v18;
    v52 = v19;
    v53 = v18[2];
    v20 = sub_1007DFD44();
    v22 = v21;
    v23 = objc_allocWithZone((Class)SPBeaconingKey);
    v24 = DateInterval._bridgeToObjectiveC()().super.isa;
    v25 = Data._bridgeToObjectiveC()().super.isa;
    v26 = objc_msgSend(v23, "initWithDateInterval:key:secondaryKey:primaryIndex:secondaryIndex:", v24, v25, 0, v48, 0);

    result = sub_10001BC14(v20, v22);
  }
  *v49 = v26;
  return result;
}

unint64_t sub_10048EBF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  id v41;
  Class isa;
  Class v43;
  id v44;
  id v45;
  id v46;
  Class v47;
  Class v48;
  Class v49;
  id v50;
  id v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  id v60;
  Class v61;
  Class v62;
  id v63;
  id v64;
  id v65;
  Class v66;
  Class v67;
  Class v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  id v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD v84[2];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  _QWORD v94[3];
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;

  v91 = a2;
  v4 = sub_10001A9A8(&qword_101111B40);
  __chkstk_darwin(v4);
  v6 = (char *)v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LostModeInfoRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v11);
  v13 = (char *)v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for WildModeAssociationRecord(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = _s18ConnectionKeyGroupVMa(0);
  v86 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v90 = (char *)v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UUID(0);
  v87 = *(_QWORD *)(v19 - 8);
  v88 = v19;
  __chkstk_darwin(v19);
  v84[1] = (char *)v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = (unint64_t)_swiftEmptyArrayStorage;
  v85 = v2;
  v21 = *(_QWORD *)(v2 + 280);
  sub_10080B648(a1, (uint64_t)&v92);
  if (v93)
  {
    sub_10000F9FC(&v92, (uint64_t)v94);
    v22 = v95;
    v23 = v96;
    v24 = sub_10001AA44(v94, v95);
    sub_1008595F4((uint64_t)v24, v91, 0, 1, 0, v21, v22, v23);
    __asm { BR              X10 }
  }
  sub_100004048((uint64_t)&v92, (uint64_t *)&unk_1010EE310);
  sub_10081C0CC(a1, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
  {
    v28 = v17;
    v29 = sub_1000126EC((uint64_t)v13, (uint64_t)v17, type metadata accessor for WildModeAssociationRecord);
    v30 = static os_log_type_t.default.getter(v29);
    if (qword_1010EA2F8 != -1)
      swift_once(&qword_1010EA2F8, sub_100B5E19C);
    v31 = qword_1011B7DD8;
    v32 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v33 = swift_allocObject(v32, 72, 7);
    *(_OWORD *)(v33 + 16) = xmmword_100E22B00;
    v34 = UUID.uuidString.getter(v33);
    v36 = v35;
    *(_QWORD *)(v33 + 56) = &type metadata for String;
    *(_QWORD *)(v33 + 64) = sub_10001AA00();
    *(_QWORD *)(v33 + 32) = v34;
    *(_QWORD *)(v33 + 40) = v36;
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "#Durian: UUID %@ is a UT record", 31, 2, v33);
    v37 = swift_bridgeObjectRelease();
    v38 = MACAddress.data.getter(v37);
    v40 = v39;
    v41 = objc_allocWithZone((Class)SPBeaconingKey);
    isa = DateInterval._bridgeToObjectiveC()().super.isa;
    v43 = Data._bridgeToObjectiveC()().super.isa;
    v44 = objc_msgSend(v41, "initWithDateInterval:key:", isa, v43);

    sub_10001BC14(v38, v40);
    v45 = objc_allocWithZone((Class)SPCommandKey);
    v46 = v44;
    v47 = Data._bridgeToObjectiveC()().super.isa;
    v48 = Data._bridgeToObjectiveC()().super.isa;
    v49 = Data._bridgeToObjectiveC()().super.isa;
    v50 = objc_msgSend(v45, "initWithBeaconingKey:commandKey:connectionToken:nearbyToken:primaryIndex:secondaryIndex:type:", v46, v47, v48, v49, 0, 0, 2);

    v51 = v50;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v51);
    v53 = *(_QWORD *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v52 = *(_QWORD *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v53 >= v52 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1);
    v54 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v51);
    specialized Array._endMutation()(v54);

    v55 = type metadata accessor for WildModeAssociationRecord;
    v56 = (uint64_t)v28;
    goto LABEL_19;
  }
  sub_100004048((uint64_t)v13, &qword_101102FB0);
  v26 = sub_100889F84(a1);
  if (v26[2])
  {
    sub_10005972C((uint64_t)v26 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), (uint64_t)v6, type metadata accessor for LostModeInfoRecord);
    v27 = 0;
  }
  else
  {
    v27 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v27, 1, v7);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    sub_1000126EC((uint64_t)v6, (uint64_t)v10, type metadata accessor for LostModeInfoRecord);
    v57 = (uint64_t *)&v10[*(int *)(v7 + 44)];
    v58 = *v57;
    v59 = v57[1];
    v60 = objc_allocWithZone((Class)SPBeaconingKey);
    sub_10001BBBC(v58, v59);
    v61 = DateInterval._bridgeToObjectiveC()().super.isa;
    v62 = Data._bridgeToObjectiveC()().super.isa;
    v63 = objc_msgSend(v60, "initWithDateInterval:key:", v61, v62);

    sub_10001BC14(v58, v59);
    v64 = objc_allocWithZone((Class)SPCommandKey);
    v65 = v63;
    v66 = Data._bridgeToObjectiveC()().super.isa;
    v67 = Data._bridgeToObjectiveC()().super.isa;
    v68 = Data._bridgeToObjectiveC()().super.isa;
    v69 = objc_msgSend(v64, "initWithBeaconingKey:commandKey:connectionToken:nearbyToken:primaryIndex:secondaryIndex:type:", v65, v66, v67, v68, 0, 0, 2);

    v71 = static os_log_type_t.default.getter(v70);
    if (qword_1010EA2E8 != -1)
      swift_once(&qword_1010EA2E8, sub_100B5E0D8);
    v72 = qword_1011B7DC8;
    v73 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v74 = swift_allocObject(v73, 112, 7);
    *(_OWORD *)(v74 + 16) = xmmword_100E22B10;
    v75 = UUID.uuidString.getter(v74);
    v77 = v76;
    *(_QWORD *)(v74 + 56) = &type metadata for String;
    v78 = sub_10001AA00();
    *(_QWORD *)(v74 + 32) = v75;
    *(_QWORD *)(v74 + 40) = v77;
    *(_QWORD *)(v74 + 96) = &type metadata for Int;
    *(_QWORD *)(v74 + 104) = &protocol witness table for Int;
    *(_QWORD *)(v74 + 64) = v78;
    *(_QWORD *)(v74 + 72) = 1;
    os_log(_:dso:log:_:_:)(v71, &_mh_execute_header, v72, "UUID %@ is a lostMode record with %d records", 44, 2, v74);
    swift_bridgeObjectRelease();
    v79 = v69;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
    v81 = *(_QWORD *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v80 = *(_QWORD *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v81 >= v80 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1);
    v82 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v81, v79);
    specialized Array._endMutation()(v82);

    v55 = type metadata accessor for LostModeInfoRecord;
    v56 = (uint64_t)v10;
LABEL_19:
    sub_1000126B0(v56, v55);
    return v97;
  }
  sub_100004048((uint64_t)v6, &qword_101111B40);
  return v97;
}

uint64_t sub_10048FA40@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;
  id v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  id v33;
  Class isa;
  Class v35;
  unint64_t v36;
  objc_class *v37;
  unint64_t v38;
  _QWORD *v39;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  objc_class *v75;
  unint64_t v76;
  Class v77;
  unint64_t v78;
  uint64_t v79;
  Class v80;
  Class v81;
  void *v82;
  Swift::String v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  Class v93;
  id v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;

  v96 = a4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TimeBasedKey(0);
  v13 = (char *)a1 + *(int *)(v12 + 24);
  v14 = *((_QWORD *)v13 + 1);
  v97 = v4;
  if (v14 >> 60 == 15)
  {
    LODWORD(v95) = static os_log_type_t.error.getter(v12);
    if (qword_1010EA248 != -1)
      swift_once(&qword_1010EA248, sub_100B5D8FC);
    v15 = qword_1011B7D28;
    v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v17 = swift_allocObject(v16, 112, 7);
    *(_OWORD *)(v17 + 16) = xmmword_100E22B10;
    v18 = a2[3];
    v19 = a2[4];
    sub_10001AA44(a2, v18);
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v19 + 8) + 8) + 32))(v18);
    v21 = UUID.uuidString.getter(v20);
    v23 = v22;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(_QWORD *)(v17 + 56) = &type metadata for String;
    v24 = sub_10001AA00();
    *(_QWORD *)(v17 + 32) = v21;
    *(_QWORD *)(v17 + 40) = v23;
    v25 = *a1;
    *(_QWORD *)(v17 + 96) = &type metadata for UInt64;
    *(_QWORD *)(v17 + 104) = &protocol witness table for UInt64;
    *(_QWORD *)(v17 + 64) = v24;
    *(_QWORD *)(v17 + 72) = v25;
    result = swift_bridgeObjectRelease();
    v27 = 0;
    goto LABEL_14;
  }
  v100 = *(_QWORD *)v13;
  v28 = v100;
  v101 = v14;
  v29 = *((_OWORD *)v13 + 2);
  v102 = *((_OWORD *)v13 + 1);
  v103 = v29;
  sub_10001BBBC(v100, v14);
  v30 = sub_1007DFD44();
  v32 = v31;
  v33 = objc_allocWithZone((Class)SPBeaconingKey);
  isa = DateInterval._bridgeToObjectiveC()().super.isa;
  v35 = Data._bridgeToObjectiveC()().super.isa;
  v94 = objc_msgSend(v33, "initWithDateInterval:key:", isa, v35);

  sub_10001BC14(v30, v32);
  v36 = *a1;
  v37 = (objc_class *)objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedLongLong:", *a1);
  if (v36)
    v38 = v36 / 0x60 + 1;
  else
    v38 = 0;
  v39 = (_QWORD *)*a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
  *a3 = v39;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v39 = sub_1007C9F2C(0, v39[2] + 1, 1, v39);
    *a3 = v39;
  }
  v42 = v39[2];
  v41 = v39[3];
  if (v42 >= v41 >> 1)
    v39 = sub_1007C9F2C((_QWORD *)(v41 > 1), v42 + 1, 1, v39);
  v39[2] = v42 + 1;
  v39[v42 + 4] = v38;
  *a3 = v39;
  v43 = String.utf8Data.getter(0x646E616D6D6F63, 0xE700000000000000);
  v45 = v44;
  sub_10001BBBC(v28, v14);
  v46 = v97;
  sub_1007E6A88(v28, v14, v43, v45, 32);
  if (!v46)
  {
    v49 = v47;
    v50 = v48;
    sub_10001EF3C(v28, v14);
    sub_1002F702C(v49, v50);
    v51 = v14;
    sub_10001BC14(v43, v45);
    v52 = v98;
    v92 = v99;
    v53 = String.utf8Data.getter(0x7463656E6E6F63, 0xE700000000000000);
    v55 = v54;
    sub_10001BBBC(v28, v51);
    sub_1007E6A88(v28, v51, v53, v55, 32);
    v57 = v56;
    v59 = v58;
    v93 = v37;
    v95 = v51;
    sub_10001EF3C(v28, v51);
    sub_1002F702C(v57, v59);
    sub_10001BC14(v53, v55);
    v90 = v99;
    v91 = v98;
    v60 = sub_1007DFD44();
    v62 = v61;
    v63 = String.utf8Data.getter(0x646E616D6D6F63, 0xE700000000000000);
    v65 = v64;
    v66 = v95;
    sub_10001BBBC(v28, v95);
    sub_1007E6A88(v28, v66, v63, v65, 32);
    v68 = v67;
    v70 = v69;
    sub_10001EF3C(v28, v95);
    sub_1002F702C(v68, v70);
    v97 = 0;
    v89 = v28;
    sub_10001BC14(v63, v65);
    v71 = v98;
    v72 = v99;
    v73 = sub_1002F955C(v98, v99, v60, v62);
    v86 = v74;
    v87 = v73;
    sub_10001BC14(v71, v72);
    sub_10001BC14(v60, v62);
    v88 = objc_allocWithZone((Class)SPCommandKey);
    v75 = v93;
    v76 = v92;
    v77 = Data._bridgeToObjectiveC()().super.isa;
    v93 = v77;
    v78 = v90;
    v79 = v91;
    v80 = Data._bridgeToObjectiveC()().super.isa;
    v81 = Data._bridgeToObjectiveC()().super.isa;
    v82 = v94;
    v27 = objc_msgSend(v88, "initWithBeaconingKey:commandKey:connectionToken:nearbyToken:primaryIndex:secondaryIndex:type:", v94, v77, v80, v81, v75, 0, 0);

    sub_10001BC14(v87, v86);
    sub_10001BC14(v79, v78);
    sub_10001BC14(v52, v76);

    result = sub_10001EF3C(v89, v95);
LABEL_14:
    *v96 = v27;
    return result;
  }
  sub_10001BC14(v43, v45);
  sub_10001EF3C(v28, v14);
  v98 = 0;
  v99 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  v83._object = (void *)0x8000000100ED71F0;
  v83._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v83);
  v104 = v46;
  v84 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  _print_unlocked<A, B>(_:_:)(&v104, &v98, v84, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v98, v99, "searchpartyd/KeyRepresentable.swift", 35, 2, 415, 0);
  __break(1u);
  return result;
}

void sub_100490224(int **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;
  _QWORD v41[20];
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v41[2] = a4;
  v7 = sub_10001A9A8(&qword_1011118E0);
  v8 = __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  v41[12] = (char *)v41 - v9;
  v43 = _s18ConnectionKeyGroupVMa(0);
  v41[16] = *(_QWORD *)(v43 - 8);
  v10 = __chkstk_darwin(v43);
  v41[17] = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v41[11] = (char *)v41 - v13;
  v14 = __chkstk_darwin(v12);
  v41[5] = (char *)v41 - v15;
  v16 = __chkstk_darwin(v14);
  v41[7] = (char *)v41 - v17;
  v18 = __chkstk_darwin(v16);
  v41[14] = (char *)v41 - v19;
  v20 = __chkstk_darwin(v18);
  v41[10] = (char *)v41 - v21;
  v22 = __chkstk_darwin(v20);
  v41[4] = (char *)v41 - v23;
  __chkstk_darwin(v22);
  v41[6] = (char *)v41 - v24;
  v42 = type metadata accessor for TimeBasedKey(0);
  v25 = __chkstk_darwin(v42);
  v41[9] = (char *)v41 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v28 = __chkstk_darwin(v27);
  v41[15] = (char *)v41 - v29;
  __chkstk_darwin(v28);
  v41[8] = (char *)v41 - v30;
  v31 = *a1;
  v32 = *(_QWORD *)(a2 + 280);
  v33 = *(_QWORD *)(v32 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v34 = type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v32, v33, &type metadata for () + 1, v34);
  v35 = v44;
  v36 = a3[3];
  v37 = a3[4];
  v38 = sub_10001AA44(a3, v36);
  v41[3] = sub_1004DF978((unint64_t)v38, v31, (unint64_t)v31, 1, 0, 0, v35, v36, v37);
  v41[1] = v39;
  LOBYTE(v31) = v40;
  swift_release();
  __asm { BR              X10 }
}

uint64_t sub_10049053C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;

  *(_QWORD *)(v4 - 168) = v0;
  v5 = *(_QWORD *)(v4 - 296);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = v5 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    *(_QWORD *)(v4 - 256) = *(_QWORD *)(v4 - 232) + 32;
    *(_QWORD *)(v4 - 200) = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v5);
    v8 = _swiftEmptyArrayStorage;
    v9 = *(_QWORD *)(v4 - 192);
    v10 = *(_QWORD *)(v4 - 248);
    *(_QWORD *)(v4 - 240) = v1;
    *(_QWORD *)(v4 - 216) = v2;
    do
    {
      *(_QWORD *)(v4 - 176) = v8;
      sub_10005972C(v7, v1, type metadata accessor for TimeBasedKey);
      sub_10005972C(v1, v10, type metadata accessor for TimeBasedKey);
      v11 = (uint64_t *)(v10 + *(int *)(*(_QWORD *)(v4 - 160) + 24));
      v12 = v11[1];
      if (v12 >> 60 != 15)
      {
        *(_QWORD *)(v4 - 208) = v6;
        v14 = *v11;
        sub_10001BBBC(*v11, v12);
        v15 = String.utf8Data.getter(0x7463656E6E6F63, 0xE700000000000000);
        v17 = v16;
        sub_10001BBBC(v14, v12);
        v18 = *(_QWORD *)(v4 - 168);
        sub_1007E6A88(v14, v12, v15, v17, 32);
        *(_QWORD *)(v4 - 168) = v20;
        if (!v18)
        {
          v21 = v19;
          sub_10001EF3C(v14, v12);
          __asm { BR              X9 }
        }
        sub_10001BC14(v15, v17);
        sub_10001EF3C(v14, v12);
        *(_QWORD *)(v4 - 128) = 0;
        *(_QWORD *)(v4 - 120) = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        v30 = *(_QWORD *)(v4 - 120);
        *(_QWORD *)(v4 - 128) = *(_QWORD *)(v4 - 128);
        *(_QWORD *)(v4 - 120) = v30;
        v31._object = (void *)0x8000000100ECF430;
        v31._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v31);
        *(_QWORD *)(v4 - 144) = v18;
        v32 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        _print_unlocked<A, B>(_:_:)(v4 - 144, v4 - 128, v32, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)(v4 - 128), *(_QWORD *)(v4 - 120), "searchpartyd/KeyRepresentable.swift", 35, 2, 423, 0);
        __break(1u);
        JUMPOUT(0x1004915D4);
      }
      sub_1000126B0(v10, type metadata accessor for TimeBasedKey);
      v13 = *(_QWORD *)(v4 - 216);
      v22 = *(_QWORD *)(v4 - 152);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v13, 1, 1, v22);
      sub_1000126B0(v1, type metadata accessor for TimeBasedKey);
      v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v22);
      v8 = *(_QWORD **)(v4 - 176);
      if (v23 == 1)
      {
        sub_100004048(v13, &qword_1011118E0);
      }
      else
      {
        v24 = *(_QWORD *)(v4 - 264);
        sub_1000126EC(v13, v24, _s18ConnectionKeyGroupVMa);
        sub_1000126EC(v24, *(_QWORD *)(v4 - 184), _s18ConnectionKeyGroupVMa);
        v25 = v6;
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
          v8 = (_QWORD *)sub_1007C8E64(0, v8[2] + 1, 1, (unint64_t)v8);
        v27 = v8[2];
        v26 = v8[3];
        if (v27 >= v26 >> 1)
          v8 = (_QWORD *)sub_1007C8E64(v26 > 1, v27 + 1, 1, (unint64_t)v8);
        v8[2] = v27 + 1;
        sub_1000126EC(*(_QWORD *)(v4 - 184), (uint64_t)v8+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v27, _s18ConnectionKeyGroupVMa);
        v6 = v25;
      }
      v7 += *(_QWORD *)(v4 - 200);
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    if (v8[2])
      goto LABEL_16;
LABEL_18:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v9 + 56))(*(_QWORD *)(v4 - 304), 1, 1, *(_QWORD *)(v4 - 152));
    goto LABEL_19;
  }
  v8 = _swiftEmptyArrayStorage;
  v9 = *(_QWORD *)(v4 - 192);
  if (!_swiftEmptyArrayStorage[2])
    goto LABEL_18;
LABEL_16:
  v28 = *(_QWORD *)(v4 - 304);
  sub_10005972C((uint64_t)v8 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v28, _s18ConnectionKeyGroupVMa);
  (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(v9 + 56))(v28, 0, 1, *(_QWORD *)(v4 - 152));
LABEL_19:
  sub_100217264(*(_QWORD *)(v4 - 296), *(_QWORD *)(v4 - 312), 0);
  return swift_bridgeObjectRelease();
}

void sub_100491664(void **a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  Class isa;
  Class v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  id v40;
  Class v41;
  Class v42;
  Class v43;
  void *v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;

  v46 = a3;
  v5 = _s18ConnectionKeyGroupVMa(0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *a1;
  v9 = a2[2];
  v10 = a2[3];
  sub_10001BBBC(v9, v10);
  v11 = objc_msgSend(v8, "connectionToken");
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v9, v10);
  LOBYTE(v11) = v15;
  sub_10001BC14(v12, v14);
  sub_10001BC14(v9, v10);
  sub_10005972C((uint64_t)a2, (uint64_t)v7, _s18ConnectionKeyGroupVMa);
  if ((v11 & 1) != 0)
  {
    sub_1000126B0((uint64_t)v7, _s18ConnectionKeyGroupVMa);
    v16 = 0;
  }
  else
  {
    v17 = *v7;
    v18 = v7[1];
    sub_10001BBBC(*v7, v18);
    v19 = objc_msgSend(v8, "beaconingKey");
    v20 = objc_msgSend(v19, "key");

    v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v17, v18);
    LOBYTE(v20) = v24;
    sub_10001BC14(v21, v23);
    sub_10001BC14(v17, v18);
    sub_1000126B0((uint64_t)v7, _s18ConnectionKeyGroupVMa);
    if ((v20 & 1) != 0)
    {
      v16 = 0;
    }
    else
    {
      v25 = *a2;
      v26 = a2[1];
      v27 = objc_allocWithZone((Class)SPBeaconingKey);
      sub_10001BBBC(v25, v26);
      isa = DateInterval._bridgeToObjectiveC()().super.isa;
      v29 = Data._bridgeToObjectiveC()().super.isa;
      v30 = objc_msgSend(v27, "initWithDateInterval:key:", isa, v29);

      sub_10001BC14(v25, v26);
      v31 = a2[7];
      v32 = a2[8];
      sub_10001AA44(a2 + 4, v31);
      dispatch thunk of RawRepresentable.rawValue.getter(&v47, v31, *(_QWORD *)(v32 + 56));
      v33 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedLongLong:", v47);
      v34 = objc_msgSend(v8, "primaryIndex");
      v35 = objc_msgSend(v8, "connectionToken");
      v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
      v38 = v37;

      v39 = objc_allocWithZone((Class)SPCommandKey);
      v40 = v33;
      v41 = Data._bridgeToObjectiveC()().super.isa;
      v42 = Data._bridgeToObjectiveC()().super.isa;
      v43 = Data._bridgeToObjectiveC()().super.isa;
      v44 = v39;
      v45 = v30;
      v16 = objc_msgSend(v44, "initWithBeaconingKey:commandKey:connectionToken:nearbyToken:primaryIndex:secondaryIndex:type:", v30, v41, v42, v43, v34, v40, 1);

      sub_10001BC14(v36, v38);
    }
  }
  *v46 = v16;
}

_QWORD *sub_1004919E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  Class isa;
  Class v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  Class v29;
  uint64_t v30;
  Class v31;
  Class v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD v39[2];
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _QWORD v48[6];

  v42 = _s18ConnectionKeyGroupVMa(0);
  v4 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v43 = (_QWORD *)((char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for TimeBasedKeysCriteria(0);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10080B648(a1, (uint64_t)&v46);
  if (v47)
  {
    sub_10000F9FC(&v46, (uint64_t)v48);
    *v8 = a2;
    swift_storeEnumTagMultiPayload(v8, v6, 1);
    swift_bridgeObjectRetain(a2);
    sub_100834754((uint64_t)v48, (uint64_t)v8);
    v11 = sub_10047CF78(v10);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v8, type metadata accessor for TimeBasedKeysCriteria);
    v9 = _swiftEmptyArrayStorage;
    *(_QWORD *)&v46 = _swiftEmptyArrayStorage;
    v12 = v11[2];
    if (v12)
    {
      v13 = (uint64_t)v11 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      v14 = *(_QWORD *)(v4 + 72);
      v40 = v43 + 4;
      v41 = v14;
      v39[1] = v11;
      swift_bridgeObjectRetain(v11);
      v15 = v43;
      do
      {
        v44 = v13;
        sub_10005972C(v13, (uint64_t)v15, _s18ConnectionKeyGroupVMa);
        v17 = *v15;
        v18 = v15[1];
        v19 = objc_allocWithZone((Class)SPBeaconingKey);
        sub_10001BBBC(v17, v18);
        isa = DateInterval._bridgeToObjectiveC()().super.isa;
        v21 = Data._bridgeToObjectiveC()().super.isa;
        v22 = objc_msgSend(v19, "initWithDateInterval:key:", isa, v21);

        sub_10001BC14(v17, v18);
        v24 = v15[7];
        v23 = v15[8];
        sub_10001AA44(v40, v24);
        dispatch thunk of RawRepresentable.rawValue.getter(&v45, v24, *(_QWORD *)(v23 + 56));
        v25 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedLongLong:", v45);
        v26 = v15[2];
        v27 = v15[3];
        v28 = objc_allocWithZone((Class)SPCommandKey);
        sub_10001BBBC(v26, v27);
        v29 = Data._bridgeToObjectiveC()().super.isa;
        v30 = v12;
        v31 = Data._bridgeToObjectiveC()().super.isa;
        v32 = Data._bridgeToObjectiveC()().super.isa;
        v33 = objc_msgSend(v28, "initWithBeaconingKey:commandKey:connectionToken:nearbyToken:primaryIndex:secondaryIndex:type:", v22, v29, v31, v32, v25, 0, 0);

        sub_10001BC14(v26, v27);
        v34 = v30;

        v35 = sub_1000126B0((uint64_t)v15, _s18ConnectionKeyGroupVMa);
        if (v33)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
          v37 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v36 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v37 >= v36 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
          v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v33);
          specialized Array._endMutation()(v16);
        }
        v13 = v44 + v41;
        v12 = v34 - 1;
      }
      while (v12);
      swift_bridgeObjectRelease();
      v9 = (_QWORD *)v46;
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100004048((uint64_t)&v46, (uint64_t *)&unk_1010EE310);
    return _swiftEmptyArrayStorage;
  }
  return v9;
}

_QWORD *sub_100491E98(uint64_t a1, char a2, int *a3, char a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  int v35;
  void *v36;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char v47;
  int *v48;
  _QWORD v49[9];
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v56 = _s18ConnectionKeyGroupVMa(0);
  v58 = *(_QWORD *)(v56 - 8);
  v9 = __chkstk_darwin(v56);
  v49[6] = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v54 = (char *)v49 - v12;
  v13 = __chkstk_darwin(v11);
  v52 = (char *)v49 - v14;
  v15 = __chkstk_darwin(v13);
  v53 = (char *)v49 - v16;
  __chkstk_darwin(v15);
  v51 = (char *)v49 - v17;
  v61 = type metadata accessor for TimeBasedKey(0);
  v18 = __chkstk_darwin(v61);
  v55 = (char *)v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v60 = (char *)v49 - v21;
  v22 = __chkstk_darwin(v20);
  v57 = (char *)v49 - v23;
  __chkstk_darwin(v22);
  v59 = (char *)v49 - v24;
  v25 = sub_10001A9A8(&qword_1011118E0);
  v26 = __chkstk_darwin(v25);
  v49[7] = (char *)v49 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v29 = __chkstk_darwin(v28);
  __chkstk_darwin(v29);
  v49[8] = (char *)v49 - v30;
  v31 = type metadata accessor for TimeBasedKeysCriteria(0);
  __chkstk_darwin(v31);
  v33 = (char *)v49 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = v4;
  v34 = *(_QWORD *)(v4 + 280);
  sub_10080B648(a1, (uint64_t)&v62);
  if (v63)
  {
    v35 = a2 & 1;
    sub_10000F9FC(&v62, (uint64_t)&v64);
    *v33 = v35;
    *((_QWORD *)v33 + 1) = a3;
    v33[16] = a4;
    swift_storeEnumTagMultiPayload(v33, v31, 3);
    sub_100834754((uint64_t)&v64, (uint64_t)v33);
    v39 = sub_10047CF78(v38);
    swift_bridgeObjectRelease();
    v40 = sub_1000126B0((uint64_t)v33, type metadata accessor for TimeBasedKeysCriteria);
    if (v35)
    {
      v49[2] = v39;
      v41 = *(_QWORD *)(v34 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
      v42 = type metadata accessor for BeaconKeyManager(0);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v34, v41, &type metadata for () + 1, v42);
      v43 = (_QWORD *)v62;
      v44 = v65;
      v45 = v66;
      v46 = sub_10001AA44(&v64, v65);
      v49[3] = sub_1004DF978((unint64_t)v46, a3, (unint64_t)a3, 1, 0, 0, v43, v44, v45);
      LOBYTE(v44) = v47;
      swift_release();
      __asm { BR              X10 }
    }
    __chkstk_darwin(v40);
    v49[-4] = v50;
    v49[-3] = &v64;
    v48 = a3;
    v36 = sub_100A76CE0((_QWORD *(*)(uint64_t *__return_ptr, uint64_t))sub_1004D43C0, (uint64_t)&v49[-6], (uint64_t)v39);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v64);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100004048((uint64_t)&v62, (uint64_t *)&unk_1010EE310);
    return _swiftEmptyArrayStorage;
  }
  return v36;
}

void sub_100493654(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  _QWORD v38[15];
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v38[3] = a1;
  v38[6] = a5;
  v39 = _s18ConnectionKeyGroupVMa(0);
  v41 = *(_QWORD *)(v39 - 8);
  v9 = __chkstk_darwin(v39);
  v38[4] = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v38[13] = (char *)v38 - v12;
  v13 = __chkstk_darwin(v11);
  v38[9] = (char *)v38 - v14;
  v15 = __chkstk_darwin(v13);
  __chkstk_darwin(v15);
  v38[10] = (char *)v38 - v16;
  v45 = type metadata accessor for TimeBasedKey(0);
  v17 = __chkstk_darwin(v45);
  v38[14] = (char *)v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v43 = (char *)v38 - v20;
  v21 = __chkstk_darwin(v19);
  v40 = (char *)v38 - v22;
  __chkstk_darwin(v21);
  v42 = (char *)v38 - v23;
  v24 = sub_10001A9A8(&qword_1011118E0);
  v25 = __chkstk_darwin(v24);
  v38[5] = (char *)v38 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v28 = __chkstk_darwin(v27);
  __chkstk_darwin(v28);
  v38[7] = (char *)v38 - v29;
  v30 = *(_QWORD *)(a2 + 280);
  v31 = *(_QWORD *)(v30 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v32 = type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v30, v31, &type metadata for () + 1, v32);
  v44 = v5;
  v33 = v46;
  v34 = a3[3];
  v35 = a3[4];
  v36 = sub_10001AA44(a3, v34);
  sub_1004DF978((unint64_t)v36, a4, (unint64_t)a4, 0, 0, 0, v33, v34, v35);
  LOBYTE(a4) = v37;
  swift_release();
  __asm { BR              X10 }
}

uint64_t sub_100493940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  id v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  Class isa;
  Class v36;
  id v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  id v44;
  id v45;
  id v46;
  Class v47;
  Class v48;
  Class v49;
  uint64_t v50;
  Swift::String v51;
  uint64_t v52;

  *(_QWORD *)(v4 - 312) = v0;
  v5 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v4 - 304) = v2;
  if (v5)
  {
    v6 = v2 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    *(_QWORD *)(v4 - 256) = v1 + 32;
    *(_QWORD *)(v4 - 224) = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v2);
    v7 = _swiftEmptyArrayStorage;
    v9 = *(_QWORD *)(v4 - 208);
    v8 = *(_QWORD *)(v4 - 200);
    v10 = *(_QWORD *)(v4 - 184);
    do
    {
      *(_QWORD *)(v4 - 176) = v7;
      v11 = *(_QWORD *)(v4 - 168);
      sub_10005972C(v6, v11, type metadata accessor for TimeBasedKey);
      sub_10005972C(v11, v9, type metadata accessor for TimeBasedKey);
      v12 = (uint64_t *)(v9 + *(int *)(*(_QWORD *)(v4 - 152) + 24));
      v13 = v12[1];
      if (v13 >> 60 != 15)
      {
        *(_QWORD *)(v4 - 232) = v5;
        v14 = *v12;
        sub_10001BBBC(*v12, v13);
        v15 = String.utf8Data.getter(0x7463656E6E6F63, 0xE700000000000000);
        v17 = v16;
        sub_10001BBBC(v14, v13);
        v18 = *(_QWORD *)(v4 - 160);
        sub_1007E6A88(v14, v13, v15, v17, 32);
        *(_QWORD *)(v4 - 192) = v20;
        if (!v18)
        {
          v21 = v19;
          sub_10001EF3C(v14, v13);
          v22 = (char *)&loc_100493A98 + *((int *)qword_100494BE8 + (v21 >> 62));
          *(_QWORD *)(v4 - 240) = v21;
          __asm { BR              X9 }
        }
        sub_10001BC14(v15, v17);
        sub_10001EF3C(v14, v13);
        *(_QWORD *)(v4 - 128) = 0;
        *(_QWORD *)(v4 - 120) = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        v50 = *(_QWORD *)(v4 - 120);
        *(_QWORD *)(v4 - 128) = *(_QWORD *)(v4 - 128);
        *(_QWORD *)(v4 - 120) = v50;
        v51._object = (void *)0x8000000100ECF430;
        v51._countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v51);
        *(_QWORD *)(v4 - 144) = v18;
        v52 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        _print_unlocked<A, B>(_:_:)(v4 - 144, v4 - 128, v52, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)(v4 - 128), *(_QWORD *)(v4 - 120), "searchpartyd/KeyRepresentable.swift", 35, 2, 423, 0);
        __break(1u);
        JUMPOUT(0x100494B70);
      }
      sub_1000126B0(v9, type metadata accessor for TimeBasedKey);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v1, 1, 1, v8);
      sub_1000126B0(*(_QWORD *)(v4 - 168), type metadata accessor for TimeBasedKey);
      v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v1, 1, v8);
      v7 = *(_QWORD **)(v4 - 176);
      if (v23 == 1)
      {
        sub_100004048(v1, &qword_1011118E0);
      }
      else
      {
        v24 = *(_QWORD *)(v4 - 248);
        sub_1000126EC(v1, v24, _s18ConnectionKeyGroupVMa);
        sub_1000126EC(v24, *(_QWORD *)(v4 - 216), _s18ConnectionKeyGroupVMa);
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
          v7 = (_QWORD *)sub_1007C8E64(0, v7[2] + 1, 1, (unint64_t)v7);
        v26 = v7[2];
        v25 = v7[3];
        if (v26 >= v25 >> 1)
          v7 = (_QWORD *)sub_1007C8E64(v25 > 1, v26 + 1, 1, (unint64_t)v7);
        v7[2] = v26 + 1;
        sub_1000126EC(*(_QWORD *)(v4 - 216), (uint64_t)v7+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v26, _s18ConnectionKeyGroupVMa);
      }
      v6 += *(_QWORD *)(v4 - 224);
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = _swiftEmptyArrayStorage;
    v8 = *(_QWORD *)(v4 - 200);
    v10 = *(_QWORD *)(v4 - 184);
  }
  v27 = *(_QWORD *)(v4 - 264);
  v28 = *(_QWORD *)(v4 - 280);
  if (v7[2])
  {
    sub_10005972C((uint64_t)v7 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), *(_QWORD *)(v4 - 264), _s18ConnectionKeyGroupVMa);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v27, 0, 1, v8);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v10 + 56))(*(_QWORD *)(v4 - 264), 1, 1, v8);
  }
  sub_100217264(*(_QWORD *)(v4 - 304), *(_QWORD *)(v4 - 312), 0);
  swift_bridgeObjectRelease();
  sub_10000F9B8(v27, v28, &qword_1011118E0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v28, 1, v8) == 1)
  {
    sub_100004048(v27, &qword_1011118E0);
    result = sub_100004048(v28, &qword_1011118E0);
    v30 = 0;
  }
  else
  {
    v31 = *(uint64_t **)(v4 - 288);
    sub_1000126EC(v28, (uint64_t)v31, _s18ConnectionKeyGroupVMa);
    v32 = *v31;
    v33 = v31[1];
    v34 = objc_allocWithZone((Class)SPBeaconingKey);
    sub_10001BBBC(v32, v33);
    isa = DateInterval._bridgeToObjectiveC()().super.isa;
    v36 = Data._bridgeToObjectiveC()().super.isa;
    v37 = objc_msgSend(v34, "initWithDateInterval:key:", isa, v36);

    sub_10001BC14(v32, v33);
    v38 = *(_QWORD **)(v4 - 296);
    v40 = v38[7];
    v39 = v38[8];
    sub_10001AA44(v38 + 4, v40);
    dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)(v4 - 128), v40, *(_QWORD *)(v39 + 56));
    v41 = *(_QWORD *)(v4 - 128);
    v42 = v38[2];
    v43 = v38[3];
    v44 = objc_allocWithZone((Class)NSNumber);
    sub_10001BBBC(v42, v43);
    v45 = objc_msgSend(v44, "initWithUnsignedLongLong:", v41);
    v46 = objc_allocWithZone((Class)SPCommandKey);
    v47 = Data._bridgeToObjectiveC()().super.isa;
    v48 = Data._bridgeToObjectiveC()().super.isa;
    v49 = Data._bridgeToObjectiveC()().super.isa;
    v30 = objc_msgSend(v46, "initWithBeaconingKey:commandKey:connectionToken:nearbyToken:primaryIndex:secondaryIndex:type:", v37, v47, v48, v49, v45, 0, 0);

    sub_10001BC14(v42, v43);
    sub_1000126B0((uint64_t)v31, _s18ConnectionKeyGroupVMa);
    result = sub_100004048(*(_QWORD *)(v4 - 264), &qword_1011118E0);
  }
  **(_QWORD **)(v4 - 272) = v30;
  return result;
}

uint64_t sub_100494C08@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  Class isa;
  Class v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  Class v26;
  Class v27;
  Class v28;
  id v29;
  uint64_t result;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;

  v35 = a4;
  v7 = type metadata accessor for DateInterval(0);
  v33 = *(_QWORD *)(v7 - 8);
  v34 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[7];
  v10 = a1[8];
  sub_10001AA44(a1 + 4, v11);
  dispatch thunk of RawRepresentable.rawValue.getter(&v36, v11, *(_QWORD *)(v10 + 56));
  v12 = v36;
  if (v36)
    v13 = v36 / 0x60 + 1;
  else
    v13 = 0;
  v32 = v9;
  sub_1007F73D4(a2, v13, 1, (uint64_t)v9);
  v14 = *a3;
  v15 = a3[1];
  v16 = objc_allocWithZone((Class)SPBeaconingKey);
  sub_10001BBBC(v14, v15);
  isa = DateInterval._bridgeToObjectiveC()().super.isa;
  v18 = Data._bridgeToObjectiveC()().super.isa;
  v19 = objc_msgSend(v16, "initWithDateInterval:key:", isa, v18);

  sub_10001BC14(v14, v15);
  v21 = a1[2];
  v20 = a1[3];
  v22 = objc_allocWithZone((Class)NSNumber);
  sub_10001BBBC(v21, v20);
  v23 = objc_msgSend(v22, "initWithUnsignedLongLong:", v12);
  v24 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedLongLong:", v13);
  v25 = objc_allocWithZone((Class)SPCommandKey);
  v26 = Data._bridgeToObjectiveC()().super.isa;
  v27 = Data._bridgeToObjectiveC()().super.isa;
  v28 = Data._bridgeToObjectiveC()().super.isa;
  v29 = objc_msgSend(v25, "initWithBeaconingKey:commandKey:connectionToken:nearbyToken:primaryIndex:secondaryIndex:type:", v19, v26, v27, v28, v23, v24, 1);

  sub_10001BC14(v21, v20);
  result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v32, v34);
  *v35 = v29;
  return result;
}

uint64_t sub_100494E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD aBlock[7];

  v54 = a2;
  v56 = a3;
  v57 = a4;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v62 = *(_QWORD *)(v5 - 8);
  v63 = v5;
  __chkstk_darwin(v5);
  v61 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v59 = *(_QWORD *)(v7 - 8);
  v60 = v7;
  __chkstk_darwin(v7);
  v58 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v51 = v10;
  v52 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TimeBasedKeysCriteria(0);
  v49 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v49 + 64);
  v13 = __chkstk_darwin(v11);
  v14 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v50) = static os_log_type_t.default.getter(v13);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v15 = qword_1011B7D50;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v16, 112, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E22B10;
  v18 = UUID.uuidString.getter(v17);
  v20 = v19;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  v21 = sub_10001AA00();
  *(_QWORD *)(v17 + 64) = v21;
  *(_QWORD *)(v17 + 32) = v18;
  *(_QWORD *)(v17 + 40) = v20;
  v22 = v54;
  TimeBasedKeysCriteria.description.getter();
  *(_QWORD *)(v17 + 96) = &type metadata for String;
  *(_QWORD *)(v17 + 104) = v21;
  *(_QWORD *)(v17 + 72) = v23;
  *(_QWORD *)(v17 + 80) = v24;
  os_log(_:dso:log:_:_:)(v50, &_mh_execute_header, v15, "commandKeys for uuid %{mask.hash}@, criteria %{public}@.", 56, 2, v17);
  swift_bridgeObjectRelease();
  v25 = v53;
  v50 = *(_QWORD *)(v53 + 144);
  v26 = swift_allocObject(&unk_101078FD8, 24, 7);
  swift_weakInit(v26 + 16, v25);
  sub_10005972C(v22, (uint64_t)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TimeBasedKeysCriteria);
  v27 = v52;
  v28 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v52, a1, v55);
  v29 = *(unsigned __int8 *)(v49 + 80);
  v30 = (v29 + 16) & ~v29;
  v31 = (v12 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = *(unsigned __int8 *)(v9 + 80);
  v33 = (v32 + v31 + 8) & ~v32;
  v34 = (v51 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  v35 = swift_allocObject(&unk_1010797A8, v34 + 16, v29 | v32 | 7);
  sub_1000126EC((uint64_t)v14, v35 + v30, type metadata accessor for TimeBasedKeysCriteria);
  *(_QWORD *)(v35 + v31) = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v35 + v33, v27, v28);
  v36 = (_QWORD *)(v35 + v34);
  v37 = v57;
  *v36 = v56;
  v36[1] = v37;
  aBlock[4] = sub_1004D42D4;
  aBlock[5] = v35;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010797C0;
  v38 = _Block_copy(aBlock);
  swift_retain();
  v39 = swift_retain();
  v40 = v58;
  static DispatchQoS.unspecified.getter(v39);
  v64 = _swiftEmptyArrayStorage;
  v41 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v42 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v43 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v44 = v61;
  v45 = v42;
  v46 = v63;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v64, v45, v43, v63, v41);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v40, v44, v38);
  _Block_release(v38);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v44, v46);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v40, v60);
  swift_release();
  return swift_release();
}

void sub_100495294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  _QWORD v14[6];

  v14[1] = a5;
  v14[2] = a4;
  v6 = type metadata accessor for Date(0);
  __chkstk_darwin(v6);
  v7 = type metadata accessor for DateInterval(0);
  v8 = __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  v9 = type metadata accessor for TimeBasedKeysCriteria(0);
  __chkstk_darwin(v9);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a1, (uint64_t)v11, v12);
  v13 = (char *)sub_1004953C4 + 4 * byte_100E3F4E4[swift_getEnumCaseMultiPayload(v11, v9)];
  __asm { BR              X10 }
}

uint64_t sub_1004953C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v3, v5, v2);
  swift_beginAccess(v4, v6 - 104, 0, 0);
  if (swift_weakLoadStrong(v4))
  {
    v7 = sub_10048EBF0(v0, v3);
    swift_release();
    (*(void (**)(unint64_t))(v6 - 112))(v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = static os_log_type_t.error.getter(0);
    if (qword_1010EA270 != -1)
      swift_once(&qword_1010EA270, sub_100B5DAF0);
    v9 = qword_1011B7D50;
    v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v11 = swift_allocObject(v10, 72, 7);
    *(_OWORD *)(v11 + 16) = xmmword_100E22B00;
    v12 = UUID.uuidString.getter(v11);
    v14 = v13;
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    *(_QWORD *)(v11 + 64) = sub_10001AA00();
    *(_QWORD *)(v11 + 32) = v12;
    *(_QWORD *)(v11 + 40) = v14;
    os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Failed to retrieve command keys for %{mask.hash}@", 49, 2, v11);
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD *))(v6 - 112))(_swiftEmptyArrayStorage);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
}

unint64_t sub_100495840(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  __int128 v38;
  uint64_t v39;
  void **v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSUUID v45;
  id v46;
  id v47;
  void *v48;
  char isUniquelyReferenced_nonNull_native;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  id v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  NSDate v101;
  void *v102;
  id v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  id v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  id v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  NSObject *v158;
  os_log_type_t v159;
  uint8_t *v160;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  _QWORD *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  __int128 v174;
  char *v175;
  uint64_t v176;
  char *v177;
  void *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  unsigned int (*v185)(__int128 *, uint64_t, uint64_t);
  char *v186;
  char *v187;
  uint64_t v188;
  id v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void (*v193)(uint64_t, uint64_t, uint64_t, uint64_t);
  void **v194;
  id v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  id v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010F47F0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v162 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v162 - v6;
  v8 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v8);
  v181 = (uint64_t)&v162 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v197 = *(_QWORD *)(v10 - 8);
  v198 = v10;
  v11 = __chkstk_darwin(v10);
  v184 = (char *)&v162 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v162 - v13;
  v15 = sub_10001A9A8(&qword_1010ED860);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v162 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v172 = (char *)&v162 - v20;
  v21 = __chkstk_darwin(v19);
  v180 = (char *)&v162 - v22;
  v23 = __chkstk_darwin(v21);
  v177 = (char *)&v162 - v24;
  __chkstk_darwin(v23);
  v26 = (__int128 *)((char *)&v162 - v25);
  v27 = type metadata accessor for UUID(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v162 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = a1;
  sub_10036AC6C();
  sub_1000FC598(v31, (uint64_t)v26);
  swift_bridgeObjectRelease();
  v185 = *(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v28 + 48);
  if (v185(v26, 1, v27) == 1)
  {
    swift_bridgeObjectRelease();
    v32 = &qword_1010ED860;
    v33 = v26;
LABEL_62:
    sub_100004048((uint64_t)v33, v32);
    if (qword_1010E9D28 != -1)
      swift_once(&qword_1010E9D28, sub_1005D439C);
    v156 = type metadata accessor for Logger(0);
    v157 = sub_10001A9E8(v156, (uint64_t)qword_1011B71E0);
    v158 = Logger.logObject.getter(v157);
    v159 = static os_log_type_t.error.getter(v158);
    if (os_log_type_enabled(v158, v159))
    {
      v160 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v160 = 0;
      _os_log_impl((void *)&_mh_execute_header, v158, v159, "Missing member record to compute group taskInfos!", v160, 2u);
      swift_slowDealloc(v160, -1, -1);
    }

    return sub_1006B9EEC((uint64_t)_swiftEmptyArrayStorage);
  }
  (*(void (**)(char *, __int128 *, uint64_t))(v28 + 32))(v30, v26, v27);
  v170 = *((_QWORD *)v186 + 35);
  sub_10080B648((uint64_t)v30, (uint64_t)&v202);
  if (!v203)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    swift_bridgeObjectRelease();
    v32 = (uint64_t *)&unk_1010EE310;
    v33 = &v202;
    goto LABEL_62;
  }
  v169 = v30;
  v190 = v28;
  v188 = v27;
  sub_10000F9FC(&v202, (uint64_t)&v204);
  v34 = v205;
  v35 = v206;
  v36 = sub_10001AA44(&v204, v205);
  v37 = sub_1004BA310((uint64_t)v36, v186, v34, v35);
  v39 = v37[2];
  v168 = v37;
  if (v39)
  {
    v166 = v7;
    v164 = v5;
    v192 = 0;
    v40 = (void **)(v37 + 4);
    v175 = &v200;
    v41 = &_swiftEmptyDictionarySingleton;
    v182 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager;
    v183 = SPBeaconTaskNamePlaySound;
    v171 = SPBeaconTaskNameStopSound;
    v167 = SPBeaconTaskNameEnableLostMode;
    v165 = SPBeaconTaskNameDisableLostMode;
    v163 = SPBeaconTaskNameEnableNotifyWhenFound;
    *(_QWORD *)&v38 = 141558531;
    v174 = v38;
    v173 = (char *)&type metadata for Any + 8;
    v176 = v8;
    v187 = v14;
    v42 = v188;
    v43 = v190;
    v44 = (uint64_t)v177;
    v179 = v18;
    while (1)
    {
      v194 = v40;
      v195 = v41;
      v50 = *v40;
      *(_QWORD *)&v202 = 2;
      v51 = v50;
      Date.init()(v51);
      v193 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
      v193(v44, 1, 1, v42);
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v183);
      v54 = v53;
      v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      v57 = v52 == v55 && v54 == v56;
      v196 = v39;
      if (v57)
      {
        v59 = swift_bridgeObjectRelease_n(v54, 2);
LABEL_17:
        v189 = v51;
        __chkstk_darwin(v59);
        *(&v162 - 2) = v66;
        *(&v162 - 1) = v67;
        v68 = sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
        v69 = v192;
        OS_dispatch_queue.sync<A>(execute:)(sub_1004D6594, &v162 - 4, v68);
        v192 = v69;
        v70 = v201;
        if (qword_1010E9D28 != -1)
          swift_once(&qword_1010E9D28, sub_1005D439C);
        v71 = type metadata accessor for Logger(0);
        sub_10001A9E8(v71, (uint64_t)qword_1011B71E0);
        v72 = v181;
        sub_10005972C(v191, v181, type metadata accessor for OwnedBeaconGroup);
        v73 = v70;
        v74 = Logger.logObject.getter(v73);
        v75 = static os_log_type_t.info.getter(v74);
        if (os_log_type_enabled(v74, v75))
        {
          v76 = swift_slowAlloc(32, -1);
          v77 = v72;
          v178 = (void *)swift_slowAlloc(64, -1);
          v201 = v178;
          *(_DWORD *)v76 = v174;
          v199 = 1752392040;
          v78 = v175;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v175, v76 + 4, v76 + 12);
          *(_WORD *)(v76 + 12) = 2081;
          v79 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v80 = dispatch thunk of CustomStringConvertible.description.getter(v188, v79);
          v199 = sub_100016940(v80, v81, (uint64_t *)&v201);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v78, v76 + 14, v76 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0(v77, type metadata accessor for OwnedBeaconGroup);
          *(_WORD *)(v76 + 22) = 2080;
          v82 = objc_msgSend(v73, "debugDescription");
          v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
          v85 = v84;

          v86 = v83;
          v8 = v176;
          v199 = sub_100016940(v86, v85, (uint64_t *)&v201);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v78, v76 + 24, v76 + 32);

          v44 = (uint64_t)v177;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v74, v75, "Play taskInfo for group %{private,mask.hash}s: %s", (uint8_t *)v76, 0x20u);
          v87 = v178;
          swift_arrayDestroy(v178, 2, v173);
          swift_slowDealloc(v87, -1, -1);
          v88 = v76;
          v14 = v187;
          swift_slowDealloc(v88, -1, -1);

        }
        else
        {
          sub_1000126B0(v72, type metadata accessor for OwnedBeaconGroup);

        }
        v89 = v193;
        *(_QWORD *)&v202 = objc_msgSend(v73, "state");
        v90 = objc_msgSend(v73, "lastUpdated");
        v91 = v184;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v90);

        v93 = v197;
        v92 = v198;
        (*(void (**)(char *, uint64_t))(v197 + 8))(v14, v198);
        (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v14, v91, v92);
        v94 = objc_msgSend(v73, "error");
        v95 = objc_msgSend(v73, "commandIdentifier");
        v51 = v189;
        if (v95)
        {
          v96 = v95;
          v97 = (uint64_t)v180;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v95);

          v98 = 0;
          v42 = v188;
        }
        else
        {
          v98 = 1;
          v42 = v188;
          v97 = (uint64_t)v180;
        }

        v89(v97, v98, 1, v42);
        sub_100004084(v97, v44, &qword_1010ED860);
        v18 = v179;
        goto LABEL_26;
      }
      v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v54, v55, v56, 0);
      swift_bridgeObjectRelease();
      v59 = swift_bridgeObjectRelease();
      if ((v58 & 1) != 0)
        goto LABEL_17;
      v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v171);
      v62 = v61;
      v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      if (v60 == v64 && v62 == v63)
      {
        v65 = swift_bridgeObjectRelease_n(v62, 2);
LABEL_32:
        __chkstk_darwin(v65);
        *(&v162 - 2) = v105;
        *(&v162 - 1) = v106;
        v107 = sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
        v108 = v192;
        OS_dispatch_queue.sync<A>(execute:)(sub_1004D603C, &v162 - 4, v107);
        v192 = v108;
        v109 = v201;
        *(_QWORD *)&v202 = objc_msgSend(v201, "state");
        v110 = objc_msgSend(v109, "lastUpdated");
        v111 = v184;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v110);

        v113 = v197;
        v112 = v198;
        (*(void (**)(char *, uint64_t))(v197 + 8))(v14, v198);
        (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v14, v111, v112);
        v94 = objc_msgSend(v109, "error");
        v114 = objc_msgSend(v109, "commandIdentifier");
        if (v114)
        {
          v115 = v114;
          v116 = v172;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v114);

          v117 = 0;
          v109 = v115;
        }
        else
        {
          v117 = 1;
          v116 = v172;
        }

        v118 = v188;
        v193((uint64_t)v116, v117, 1, v188);
        v119 = (uint64_t)v116;
        v42 = v118;
        sub_100004084(v119, v44, &qword_1010ED860);
        goto LABEL_26;
      }
      v104 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v62, v64, v63, 0);
      swift_bridgeObjectRelease();
      v65 = swift_bridgeObjectRelease();
      if ((v104 & 1) != 0)
        goto LABEL_32;
      v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(v167);
      v122 = v121;
      v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      if (v120 == v124 && v122 == v123)
        break;
      v125 = _stringCompareWithSmolCheck(_:_:expecting:)(v120, v122, v124, v123, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v125 & 1) != 0)
        goto LABEL_40;
      v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v165);
      v135 = v134;
      v137 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      if (v133 == v137 && v135 == v136)
      {
        swift_bridgeObjectRelease_n(v135, 2);
      }
      else
      {
        v138 = _stringCompareWithSmolCheck(_:_:expecting:)(v133, v135, v137, v136, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v138 & 1) == 0)
        {
          v146 = static String._unconditionallyBridgeFromObjectiveC(_:)(v163);
          v148 = v147;
          v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
          if (v146 == v150 && v148 == v149)
          {
            swift_bridgeObjectRelease_n(v148, 2);
            goto LABEL_59;
          }
          v151 = _stringCompareWithSmolCheck(_:_:expecting:)(v146, v148, v150, v149, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v151 & 1) != 0)
          {
LABEL_59:
            sub_10036AC6C();
            v153 = v152;
            v154 = v186;
            swift_retain();
            v155 = v192;
            sub_1004BBC64(v153, (uint64_t)v154, v44, &v202);
            v192 = v155;
            v42 = v188;
            swift_bridgeObjectRelease();
            swift_release(v154);
          }
          v94 = 0;
          goto LABEL_26;
        }
      }
      v139 = sub_100889F60(v191 + *(int *)(v8 + 24));
      v140 = v139[2];
      v141 = type metadata accessor for LostModeRecord(0);
      v142 = *(_QWORD *)(v141 - 8);
      if (v140)
      {
        v143 = (uint64_t)v164;
        sub_10005972C((uint64_t)v139+ ((*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80)), (uint64_t)v164, type metadata accessor for LostModeRecord);
        v144 = 0;
      }
      else
      {
        v144 = 1;
        v143 = (uint64_t)v164;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v142 + 56))(v143, v144, 1, v141);
      swift_bridgeObjectRelease();
      v145 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v143, 1, v141);
      sub_100004048(v143, (uint64_t *)&unk_1010F47F0);
      v8 = v176;
      if (v145 == 1)
      {
LABEL_53:
        v94 = 0;
        *(_QWORD *)&v202 = 0;
        goto LABEL_54;
      }
LABEL_44:
      v94 = 0;
      *(_QWORD *)&v202 = 2;
LABEL_54:
      v42 = v188;
LABEL_26:
      v99 = v202;
      v100 = v51;
      swift_errorRetain(v94);
      v101.super.isa = Date._bridgeToObjectiveC()().super.isa;
      if (v94)
      {
        v102 = (void *)_convertErrorToNSError(_:)(v94);
        swift_errorRelease(v94);
      }
      else
      {
        v102 = 0;
      }
      v103 = objc_msgSend(objc_allocWithZone((Class)SPBeaconTaskInformation), "initWithName:lastUpdated:error:state:", v100, v101.super.isa, v102, v99);

      sub_10000F9B8(v44, (uint64_t)v18, &qword_1010ED860);
      if (v185((__int128 *)v18, 1, v42) == 1)
      {
        v45.super.isa = 0;
      }
      else
      {
        v45.super.isa = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v190 + 8))(v18, v42);
      }
      v14 = v187;
      objc_msgSend(v103, "setCommandIdentifier:", v45.super.isa);

      v46 = v100;
      v47 = v103;
      v48 = v195;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v195);
      v201 = v48;
      sub_10010BBE4((uint64_t)v47, v46, isUniquelyReferenced_nonNull_native);
      v41 = v201;

      swift_bridgeObjectRelease();
      swift_errorRelease(v94);
      (*(void (**)(char *, uint64_t))(v197 + 8))(v14, v198);
      sub_100004048(v44, &qword_1010ED860);
      v40 = v194 + 1;
      v39 = v196 - 1;
      v43 = v190;
      if (v196 == 1)
        goto LABEL_68;
    }
    swift_bridgeObjectRelease_n(v122, 2);
LABEL_40:
    v126 = sub_100889F60(v191 + *(int *)(v8 + 24));
    v127 = v126[2];
    v128 = type metadata accessor for LostModeRecord(0);
    v129 = *(_QWORD *)(v128 - 8);
    if (v127)
    {
      v130 = (uint64_t)v166;
      sub_10005972C((uint64_t)v126 + ((*(unsigned __int8 *)(v129 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80)), (uint64_t)v166, type metadata accessor for LostModeRecord);
      v131 = 0;
    }
    else
    {
      v131 = 1;
      v130 = (uint64_t)v166;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v129 + 56))(v130, v131, 1, v128);
    swift_bridgeObjectRelease();
    v132 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v129 + 48))(v130, 1, v128);
    sub_100004048(v130, (uint64_t *)&unk_1010F47F0);
    v8 = v176;
    if (v132 != 1)
      goto LABEL_53;
    goto LABEL_44;
  }
  v41 = &_swiftEmptyDictionarySingleton;
  v42 = v188;
  v43 = v190;
LABEL_68:
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v204);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v169, v42);
  return (unint64_t)v41;
}

uint64_t sub_100496960(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __n128 v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  int v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  id v60;
  _BYTE v61[24];

  v52 = a7;
  v57 = a6;
  v58 = a3;
  v54 = a4;
  v55 = a5;
  v9 = sub_10001A9A8(&qword_1010ED860);
  v10 = __chkstk_darwin(v9);
  v53 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v56 = (uint64_t)&v51 - v12;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v13);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v51 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v51 - v20;
  v22 = type metadata accessor for UUID(0);
  v59 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v24 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = a2[3];
  v25 = a2[4];
  sub_10001AA44(a2, v26);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v25 + 8) + 8) + 32))(v26);
  v27 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier);
  v28 = swift_beginAccess(v27, v61, 0, 0);
  v29 = *v27;
  if (!*(_QWORD *)(*v27 + 16))
    goto LABEL_7;
  swift_bridgeObjectRetain(*v27);
  v30 = sub_100003FB0((uint64_t)v24);
  if ((v31 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    (*(void (**)(char *, uint64_t, __n128))(v59 + 8))(v24, v22, v28);
    v32 = 0;
    *v58 = 2;
    goto LABEL_8;
  }
  v32 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v30);
  swift_retain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v24, v22);
  v33 = sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(v52, v32, v33);
  swift_release(v32);
  v34 = v60;
  v35 = objc_msgSend(v60, "state");
  *v58 = v35;
  if (!v34)
  {
LABEL_8:
    v41 = 1;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
    v34 = 0;
    v40 = v54;
    goto LABEL_9;
  }
  v36 = objc_msgSend(v34, "lastUpdated");
  v37 = v51;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v36);

  v38 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v38(v15, v37, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
  v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
  v40 = v54;
  if (v39 != 1)
  {
    v38(v21, v15, v16);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 40))(v40, v21, v16);
    goto LABEL_12;
  }
  v41 = 0;
LABEL_9:
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v21, v40, v16);
  sub_100004048((uint64_t)v15, (uint64_t *)&unk_1010EA690);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 40))(v40, v21, v16);
  if ((v41 & 1) != 0)
  {
    v42 = *v55;
    *v55 = 0;
    swift_errorRelease(v42);
    swift_release(v32);
    v43 = v56;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v56, 1, 1, v22);
    return sub_100004084(v43, v57, &qword_1010ED860);
  }
LABEL_12:
  v44 = objc_msgSend(v34, "error");
  v45 = *v55;
  *v55 = (uint64_t)v44;
  swift_errorRelease(v45);
  v46 = objc_msgSend(v34, "commandIdentifier");
  v47 = (uint64_t)v53;
  if (v46)
  {
    v48 = v46;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v46);

    v49 = 0;
  }
  else
  {
    v49 = 1;
  }

  swift_release(v32);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v47, v49, 1, v22);
  v43 = v56;
  sub_100005CF0(v47, v56, &qword_1010ED860);
  return sub_100004084(v43, v57, &qword_1010ED860);
}

uint64_t sub_100496E08(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t inited;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v5 = static os_log_type_t.info.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v6 = qword_1011B7D28;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v8 = swift_allocObject(v7, 112, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100E22B10;
  v23 = *v2;
  v9 = sub_10001A9A8(&qword_1010F49B8);
  v10 = String.init<A>(describing:)(&v23, v9);
  v12 = v11;
  *(_QWORD *)(v8 + 56) = &type metadata for String;
  v13 = sub_10001AA00();
  *(_QWORD *)(v8 + 32) = v10;
  *(_QWORD *)(v8 + 40) = v12;
  *(_QWORD *)(v8 + 96) = &type metadata for String;
  *(_QWORD *)(v8 + 104) = v13;
  *(_QWORD *)(v8 + 64) = v13;
  *(_QWORD *)(v8 + 72) = 0xD000000000000017;
  *(_QWORD *)(v8 + 80) = 0x8000000100ED72A0;
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "%@: %@", 6, 2, v8);
  swift_bridgeObjectRelease();
  v14 = sub_10001A9A8(&qword_1011002F0);
  inited = swift_initStackObject(v14, &v22);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  v16 = (void *)SPBeaconTypeDurian;
  *(_QWORD *)(inited + 32) = SPBeaconTypeDurian;
  v17 = v16;
  v18 = sub_1003D76AC(inited);
  swift_setDeallocating(inited);
  type metadata accessor for SPBeaconType(0);
  swift_arrayDestroy(inited + 32, 1, v19);
  v20 = swift_allocObject(&unk_101078C68, 32, 7);
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  swift_retain();
  sub_100489EAC((uint64_t)v18, 0, 0, (uint64_t)sub_1004CFF9C, v20);
  swift_bridgeObjectRelease();
  return swift_release();
}

Swift::Int sub_100496FF8(uint64_t a1, void (*a2)(void *))
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  id v10;
  id v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  _QWORD *v26;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v3 = &_swiftEmptySetSingleton;
    v26 = &_swiftEmptySetSingleton;
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      v7 = v6;
      v8 = sub_10000F4A0(0, &qword_1010F2158, SPBeacon_ptr);
      do
      {
        v24 = v7;
        swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v10 = objc_msgSend(v25, "role");

        v11 = v25;
        if (v10)
        {
          v12 = v26;
          v13 = v26[2];
          if (v26[3] <= v13)
          {
            sub_100A1915C(v13 + 1);
            v12 = v26;
          }
          result = NSObject._rawHashValue(seed:)(v12[5]);
          v14 = v12 + 7;
          v15 = -1 << *((_BYTE *)v12 + 32);
          v16 = result & ~v15;
          v17 = v16 >> 6;
          if (((-1 << v16) & ~v12[(v16 >> 6) + 7]) != 0)
          {
            v18 = __clz(__rbit64((-1 << v16) & ~v12[(v16 >> 6) + 7])) | v16 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v19 = 0;
            v20 = (unint64_t)(63 - v15) >> 6;
            do
            {
              if (++v17 == v20 && (v19 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              v21 = v17 == v20;
              if (v17 == v20)
                v17 = 0;
              v19 |= v21;
              v22 = v14[v17];
            }
            while (v22 == -1);
            v18 = __clz(__rbit64(~v22)) + (v17 << 6);
          }
          *(_QWORD *)((char *)v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
          *(_QWORD *)(v12[6] + 8 * v18) = v11;
          ++v12[2];
        }
        else
        {

        }
        v7 = __CocoaSet.Iterator.next()(result);
      }
      while (v7);
      v3 = v26;
    }
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    v3 = (void *)sub_1004A5FDC(v23);
  }
  a2(v3);
  return swift_release();
}

uint64_t sub_100497234(uint64_t a1, id a2)
{
  id v3;
  uint64_t result;

  v3 = objc_msgSend(a2, "roleId");
  result = type metadata accessor for BeaconNamingRecord(0);
  *(_QWORD *)(a1 + *(int *)(result + 28)) = v3;
  return result;
}

uint64_t sub_100497278(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;

  v9 = sub_10001A9A8(&qword_101108090);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v11, &qword_101108090);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v9);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v13 = *v11;
    v14 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
    v29 = v13;
    swift_errorRetain(v13);
    v17 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v18 = String.init<A>(describing:)(&v29, v17);
    v20 = v19;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = sub_10001AA00();
    *(_QWORD *)(v16 + 32) = v18;
    *(_QWORD *)(v16 + 40) = v20;
    v21 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v22 = (void *)static OS_os_log.default.getter(v21);
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v22, "Could not set role on the beacon. Error - %@", 44, 2, v16);
    swift_bridgeObjectRelease();

    ((void (*)(_QWORD))a2)(0);
    return swift_errorRelease(v13);
  }
  else
  {
    v24 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v25 = (void *)static OS_os_log.default.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    os_log(_:dso:log:type:_:)("Successfully updated beacon with role.", 38, 2, &_mh_execute_header, v25, v26, _swiftEmptyArrayStorage);

    v27 = sub_1002835F0(a5, *(_QWORD *)(a4 + 280));
    a2();

    return sub_100004048((uint64_t)v11, &qword_101108090);
  }
}

uint64_t sub_100497494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010ED860);
  v3[8] = v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[9] = swift_task_alloc(v7);
  v3[10] = swift_task_alloc(v7);
  return swift_task_switch(sub_100497530, 0, 0);
}

uint64_t sub_100497530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v16 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 280);
  sub_1000181C8();
  swift_bridgeObjectRelease();
  v7 = swift_task_alloc(32);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100330B8C);
  swift_task_dealloc(v7);
  sub_100005CF0(v2, v1, &qword_1010ED860);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v16, v5, v3);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v1, 1, v3);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 48);
  v11 = *(_QWORD *)(v0 + 40);
  v12 = *(_QWORD *)(v0 + 16);
  if (v8 == 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v10 + 32))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
    sub_100004048(v9, &qword_1010ED860);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v10 + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v12, v9, v11);
  }
  v13 = *(_QWORD *)(v0 + 72);
  v14 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100497694(uint64_t a1, id a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  id v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id result;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  v10 = objc_msgSend(a2, "name");
  if (v10)
  {

    v11 = (_QWORD *)(a1 + *(int *)(type metadata accessor for BeaconNamingRecord(0) + 32));
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRelease();
    *v11 = a3;
    v11[1] = a4;
  }
  v12 = a5[3];
  v13 = a5[4];
  sub_10001AA44(a5, v12);
  v14 = (void *)(*(uint64_t (**)(id, uint64_t, uint64_t))(v13 + 200))(objc_msgSend(a2, "roleId"), v12, v13);
  if (v14)
  {
    v15 = v14;
    v16 = objc_msgSend(v14, "roleId");

    *(_QWORD *)(a1 + *(int *)(type metadata accessor for BeaconNamingRecord(0) + 28)) = v16;
  }
  result = objc_msgSend(a2, "emoji");
  if (result)
  {
    v18 = result;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v21 = v20;

    v22 = (uint64_t *)(a1 + *(int *)(type metadata accessor for BeaconNamingRecord(0) + 36));
    result = (id)swift_bridgeObjectRelease();
    *v22 = v19;
    v22[1] = v21;
  }
  return result;
}

uint64_t sub_1004977C8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t EnumCaseMultiPayload;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  void (*v55)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void **v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void (**v102)(uint64_t);
  void (*v103)(uint64_t);
  void **v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t);
  void (*v127)(uint64_t);
  __int128 v128;
  uint64_t v129;
  _QWORD v130[3];

  v126 = a4;
  v127 = (void (*)(uint64_t))a5;
  v124 = a3;
  v125 = a2;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v6);
  v115 = (char *)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_10001A9A8((uint64_t *)&unk_1011115B0);
  v117 = *(_QWORD *)(v123 - 8);
  v8 = __chkstk_darwin(v123);
  v114 = (char *)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v116 = (uint64_t)&v104 - v10;
  v118 = type metadata accessor for URL(0);
  v120 = *(_QWORD *)(v118 - 8);
  v11 = __chkstk_darwin(v118);
  v110 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v109 = (char *)&v104 - v14;
  __chkstk_darwin(v13);
  v122 = (char *)&v104 - v15;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010F77B0);
  v17 = __chkstk_darwin(v16);
  v111 = (char *)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v113 = (uint64_t)&v104 - v19;
  v20 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v20);
  v108 = (uint64_t)&v104 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v22);
  v24 = (char *)&v104 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for OwnedBeaconRecord(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(_QWORD *)(v26 + 64);
  v28 = __chkstk_darwin(v25);
  v112 = (uint64_t)&v104 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v28);
  v119 = (uint64_t)&v104 - v30;
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v104 - v32;
  __chkstk_darwin(v31);
  v121 = (uint64_t)&v104 - v34;
  v35 = sub_10001A9A8(&qword_101108090);
  __chkstk_darwin(v35);
  v37 = (uint64_t *)((char *)&v104 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v37, &qword_101108090);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v37, v35);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v39 = *v37;
    v40 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    v41 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v42 = swift_allocObject(v41, 72, 7);
    *(_OWORD *)(v42 + 16) = xmmword_100E22B00;
    v130[0] = v39;
    swift_errorRetain(v39);
    v43 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v44 = String.init<A>(describing:)(v130, v43);
    v46 = v45;
    *(_QWORD *)(v42 + 56) = &type metadata for String;
    *(_QWORD *)(v42 + 64) = sub_10001AA00();
    *(_QWORD *)(v42 + 32) = v44;
    *(_QWORD *)(v42 + 40) = v46;
    v47 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v48 = (void *)static OS_os_log.default.getter(v47);
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v48, "Could not update beacon name. Error - %@", 40, 2, v42);
    swift_bridgeObjectRelease();

    v126(0);
    return swift_errorRelease(v39);
  }
  v107 = (char *)v20;
  v50 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  os_log(_:dso:log:_:_:)(v50, &_mh_execute_header, qword_1011B7D38, "Successfully updated beacon name record", 39, 2, _swiftEmptyArrayStorage);
  v51 = *(_QWORD *)(v125 + 280);
  sub_1007EEF64(15);
  type metadata accessor for Transaction(0);
  static Transaction.named<A>(_:with:)("com.apple.searchpartyd.triggerSiriDeviceNameSync", 48, 2, sub_100088044, v51);
  v52 = swift_retain();
  PassthroughSubject.send(_:)(v52);
  swift_release();
  sub_10080B648(v124, (uint64_t)&v128);
  if (!v129)
  {
    v65 = sub_100004048((uint64_t)&v128, (uint64_t *)&unk_1010EE310);
    v66 = static os_log_type_t.error.getter(v65);
    v67 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v68 = swift_allocObject(v67, 72, 7);
    *(_OWORD *)(v68 + 16) = xmmword_100E22B00;
    v69 = UUID.uuidString.getter(v68);
    v71 = v70;
    *(_QWORD *)(v68 + 56) = &type metadata for String;
    *(_QWORD *)(v68 + 64) = sub_10001AA00();
    *(_QWORD *)(v68 + 32) = v69;
    *(_QWORD *)(v68 + 40) = v71;
    v72 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v73 = (void *)static OS_os_log.default.getter(v72);
    os_log(_:dso:log:_:_:)(v66, &_mh_execute_header, v73, "Could not find just updated record: %@", 38, 2, v68);
    swift_bridgeObjectRelease();

    v126(0);
    return sub_100004048((uint64_t)v37, &qword_101108090);
  }
  sub_10000F9FC(&v128, (uint64_t)v130);
  sub_100030784((uint64_t)v130, (uint64_t)&v128);
  v53 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v54 = swift_dynamicCast(v24, &v128, v53, v25, 6);
  v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  if ((v54 & 1) == 0)
  {
    v55(v24, 1, 1, v25);
    sub_100004048((uint64_t)v24, (uint64_t *)&unk_1010F47C0);
    v126(1);
LABEL_19:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v130);
    return sub_100004048((uint64_t)v37, &qword_101108090);
  }
  v106 = 0;
  v55(v24, 0, 1, v25);
  v56 = v121;
  sub_1000126EC((uint64_t)v24, v121, type metadata accessor for OwnedBeaconRecord);
  sub_10005972C(v56, (uint64_t)v33, type metadata accessor for OwnedBeaconRecord);
  v57 = v119;
  sub_10005972C((uint64_t)v33, v119, type metadata accessor for OwnedBeaconRecord);
  v58 = *(unsigned __int8 *)(v26 + 80);
  v59 = (v58 + 16) & ~v58;
  v124 = v58;
  v105 = v58 | 7;
  v60 = swift_allocObject(&unk_101079708, v59 + v27, v58 | 7);
  sub_1000126EC((uint64_t)v33, v60 + v59, type metadata accessor for OwnedBeaconRecord);
  v61 = v56 + *(int *)(v25 + 20);
  v62 = sub_10088A6EC();
  if (!v62[2])
  {
    sub_100498340(v57);
    goto LABEL_13;
  }
  v104 = (void **)v60;
  v63 = v108;
  sub_10005972C(v56 + *(int *)(v25 + 24), v108, type metadata accessor for StableIdentifier);
  v64 = swift_getEnumCaseMultiPayload(v63, v107);
  sub_1000126B0(v63, type metadata accessor for StableIdentifier);
  if (v64)
  {
    v57 = v119;
    sub_100498340(v119);
LABEL_13:
    swift_release();
    swift_bridgeObjectRelease();
LABEL_16:
    v125 = v61;
    v119 = ~v124;
    sub_1000126B0(v57, type metadata accessor for OwnedBeaconRecord);
    v108 = *(_QWORD *)(v51 + 160);
    if (qword_1010EA118 != -1)
      swift_once(&qword_1010EA118, sub_100A2ECA4);
    v76 = v118;
    v77 = sub_10001A9E8(v118, (uint64_t)qword_1011B7B10);
    v78 = *(void (**)(char *, uint64_t, uint64_t))(v120 + 16);
    v79 = v122;
    v78(v122, v77, v76);
    v80 = v109;
    v78(v109, (uint64_t)v79, v76);
    v81 = v123;
    v82 = (uint64_t)v114;
    v107 = &v114[*(int *)(v123 + 40)];
    v83 = (uint64_t)v107;
    v84 = type metadata accessor for DirectorySequence(0);
    v85 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56);
    v85(v83, 1, 1, v84);
    v78((char *)v82, (uint64_t)v80, v76);
    *(_QWORD *)(v82 + *(int *)(v81 + 36)) = v108;
    v86 = v110;
    v78(v110, (uint64_t)v80, v76);
    swift_retain();
    v87 = (uint64_t)v115;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)(v86, 0, 0);
    v88 = *(void (**)(char *, uint64_t))(v120 + 8);
    v88(v80, v76);
    v85(v87, 0, 1, v84);
    sub_100004084(v87, (uint64_t)v107, (uint64_t *)&unk_1010F77A0);
    v89 = v116;
    sub_100005CF0(v82, v116, (uint64_t *)&unk_1011115B0);
    v90 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v117 + 56);
    v91 = (uint64_t)v111;
    v92 = v123;
    v90(v111, 1, 1, v123);
    sub_100004048(v91, (uint64_t *)&unk_1010F77C0);
    sub_100005CF0(v89, v91, (uint64_t *)&unk_1011115B0);
    v90((char *)v91, 0, 1, v92);
    sub_100005CF0(v91, v113, (uint64_t *)&unk_1010F77B0);
    v93 = ((uint64_t (*)(char *, uint64_t))v88)(v122, v76);
    __chkstk_darwin(v93);
    v94 = (void **)v125;
    *(&v104 - 2) = 0;
    *(&v104 - 1) = v94;
    sub_100A79994(sub_1004D6568, (uint64_t)(&v104 - 4));
    v96 = v95;
    type metadata accessor for Transaction(0);
    v97 = v121;
    v98 = v112;
    sub_10005972C(v121, v112, type metadata accessor for OwnedBeaconRecord);
    v99 = (v124 + 24) & v119;
    v100 = (v27 + v99 + 7) & 0xFFFFFFFFFFFFFFF8;
    v101 = swift_allocObject(&unk_101079730, v100 + 16, v105);
    *(_QWORD *)(v101 + 16) = v96;
    sub_1000126EC(v98, v101 + v99, type metadata accessor for OwnedBeaconRecord);
    v102 = (void (**)(uint64_t))(v101 + v100);
    v103 = v127;
    *v102 = v126;
    v102[1] = v103;
    swift_retain();
    static Transaction.asyncTask(name:block:)("UpdateSharesForNameChange", 25, 2, &unk_1010FD0F0, v101);
    swift_release();
    sub_1000126B0(v97, type metadata accessor for OwnedBeaconRecord);
    goto LABEL_19;
  }
  v74 = *(_QWORD *)(v125 + 40);
  if (v74)
  {
    v75 = v104;
    swift_retain();
    swift_retain();
    sub_1003CDF78((uint64_t)v62, v56, v74, (void (*)(uint64_t))sub_1004D3B5C, v75);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n(v75, 2);
    v57 = v119;
    goto LABEL_16;
  }
  result = sub_1000126B0(v119, type metadata accessor for OwnedBeaconRecord);
  __break(1u);
  return result;
}

void sub_100498340(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B7648);
  v6 = sub_10005972C(a1, (uint64_t)v4, type metadata accessor for OwnedBeaconRecord);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    *(_DWORD *)v9 = 141558275;
    v15 = 1752392040;
    v16 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = type metadata accessor for UUID(0);
    v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    v15 = sub_100016940(v13, v14, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v4, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Successfully pushed record update to shares: %{private,mask.hash}s.", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v4, type metadata accessor for OwnedBeaconRecord);
  }

}

uint64_t sub_10049857C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4[31] = a3;
  v4[32] = a4;
  v4[29] = a1;
  v4[30] = a2;
  v5 = type metadata accessor for OwnedBeaconRecord(0);
  v4[33] = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[34] = swift_task_alloc(v6);
  v4[35] = swift_task_alloc(v6);
  v4[36] = swift_task_alloc(v6);
  v7 = type metadata accessor for OwnerSharingCircle(0);
  v4[37] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[38] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[39] = swift_task_alloc(v9);
  v4[40] = swift_task_alloc(v9);
  return swift_task_switch(sub_100498630, 0, 0);
}

uint64_t sub_100498630()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBD0 + dword_1010EBBD0);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBD4);
    *(_QWORD *)(v0 + 328) = v2;
    *v2 = v0;
    v2[1] = sub_10049871C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10049871C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 328);
  *(_QWORD *)(*(_QWORD *)v1 + 336) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100498778, 0, 0);
}

uint64_t sub_100498778()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t (*v21)(void);

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 336))
  {
    v2 = *(_QWORD *)(v0 + 232);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v0 + 344) = v3;
    if (v3)
    {
      v4 = *(_QWORD *)(v0 + 304);
      v5 = *(_QWORD *)(v0 + 232);
      v6 = *(_DWORD *)(v4 + 80);
      *(_DWORD *)(v0 + 416) = v6;
      *(_QWORD *)(v0 + 352) = *(_QWORD *)(v4 + 72);
      *(_QWORD *)(v0 + 360) = 0;
      v7 = *(_QWORD *)(v0 + 320);
      v8 = v5 + ((v6 + 32) & ~(unint64_t)v6);
      swift_bridgeObjectRetain(v5);
      sub_10005972C(v8, v7, type metadata accessor for OwnerSharingCircle);
      v9 = (_QWORD *)swift_task_alloc(dword_1010EE2BC);
      *(_QWORD *)(v0 + 368) = v9;
      *v9 = v0;
      v9[1] = sub_1004989CC;
      return sub_1000C2B20(*(_QWORD *)(v0 + 320), 0);
    }
    else
    {
      result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
      if (*(_QWORD *)(v0 + 80))
      {
        sub_10000F9FC((__int128 *)(v0 + 56), v0 + 136);
        sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
        v21 = (uint64_t (*)(void))((char *)&dword_1010EBCD0 + dword_1010EBCD0);
        v20 = (_QWORD *)swift_task_alloc(unk_1010EBCD4);
        *(_QWORD *)(v0 + 384) = v20;
        *v20 = v0;
        v20[1] = sub_100498A30;
        return v21();
      }
      else
      {
        __break(1u);
      }
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9F20 != -1)
      swift_once(&qword_1010E9F20, sub_100791C44);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B7648);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "No BeaconSharingService!", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    v16 = *(_QWORD *)(v0 + 312);
    v18 = *(_QWORD *)(v0 + 280);
    v17 = *(_QWORD *)(v0 + 288);
    v19 = *(_QWORD *)(v0 + 272);
    swift_task_dealloc(*(_QWORD *)(v0 + 320));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_1004989CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 368);
  *(_QWORD *)(*(_QWORD *)v1 + 376) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100499168;
  else
    v3 = sub_100498DB4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100498A30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 384);
  *(_QWORD *)(*(_QWORD *)v1 + 392) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100498A8C, 0, 0);
}

uint64_t sub_100498A8C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (_QWORD *)(v0 + 136);
  if (*(_QWORD *)(v0 + 392))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_10110DC74);
    *(_QWORD *)(v0 + 400) = v2;
    *v2 = v0;
    v2[1] = sub_100498D50;
    return sub_10096FF34(*(_QWORD *)(v0 + 232));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9F20 != -1)
      swift_once(&qword_1010E9F20, sub_100791C44);
    v4 = *(_QWORD *)(v0 + 288);
    v5 = *(_QWORD *)(v0 + 240);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B7648);
    v7 = sub_10005972C(v5, v4, type metadata accessor for OwnedBeaconRecord);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(_QWORD *)(v0 + 288);
    if (v10)
    {
      v12 = swift_slowAlloc(22, -1);
      v13 = swift_slowAlloc(32, -1);
      v22 = v13;
      *(_DWORD *)v12 = 141558275;
      *(_QWORD *)(v0 + 200) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v12 + 4, v12 + 12);
      *(_WORD *)(v12 + 12) = 2081;
      v14 = type metadata accessor for UUID(0);
      v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
      *(_QWORD *)(v0 + 208) = sub_100016940(v16, v17, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v11, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Successfully pushed record update to owner circle shares: %{private,mask.hash}s.", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 288), type metadata accessor for OwnedBeaconRecord);
    }

    (*(void (**)(uint64_t))(v0 + 248))(1);
    swift_release();
    v18 = *(_QWORD *)(v0 + 312);
    v20 = *(_QWORD *)(v0 + 280);
    v19 = *(_QWORD *)(v0 + 288);
    v21 = *(_QWORD *)(v0 + 272);
    swift_task_dealloc(*(_QWORD *)(v0 + 320));
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100498D50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 400);
  *(_QWORD *)(*(_QWORD *)v1 + 408) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10049953C;
  else
    v3 = sub_100498EF8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100498DB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v5)(void);

  sub_1000126B0(*(_QWORD *)(v0 + 320), type metadata accessor for OwnerSharingCircle);
  v1 = *(_QWORD *)(v0 + 360) + 1;
  if (v1 == *(_QWORD *)(v0 + 344))
  {
    swift_bridgeObjectRelease();
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 136);
      sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
      v5 = (uint64_t (*)(void))((char *)&dword_1010EBCD0 + dword_1010EBCD0);
      v3 = (_QWORD *)swift_task_alloc(unk_1010EBCD4);
      *(_QWORD *)(v0 + 384) = v3;
      *v3 = v0;
      v3[1] = sub_100498A30;
      return v5();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_QWORD *)(v0 + 360) = v1;
    sub_10005972C(*(_QWORD *)(v0 + 232)+ ((*(unsigned __int8 *)(v0 + 416) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 416))+ *(_QWORD *)(v0 + 352) * v1, *(_QWORD *)(v0 + 320), type metadata accessor for OwnerSharingCircle);
    v4 = (_QWORD *)swift_task_alloc(dword_1010EE2BC);
    *(_QWORD *)(v0 + 368) = v4;
    *v4 = v0;
    v4[1] = sub_1004989CC;
    return sub_1000C2B20(*(_QWORD *)(v0 + 320), 0);
  }
  return result;
}

uint64_t sub_100498EF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  swift_release();
  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1011B7648);
  v4 = sub_10005972C(v2, v1, type metadata accessor for OwnedBeaconRecord);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 288);
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v20 = v10;
    *(_DWORD *)v9 = 141558275;
    *(_QWORD *)(v0 + 200) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = type metadata accessor for UUID(0);
    v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    *(_QWORD *)(v0 + 208) = sub_100016940(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Successfully pushed record update to owner circle shares: %{private,mask.hash}s.", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 288), type metadata accessor for OwnedBeaconRecord);
  }

  (*(void (**)(uint64_t))(v0 + 248))(1);
  swift_release();
  v15 = *(_QWORD *)(v0 + 312);
  v17 = *(_QWORD *)(v0 + 280);
  v16 = *(_QWORD *)(v0 + 288);
  v18 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100499168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (__cdecl *v29)();
  uint64_t v30;

  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 240);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B7648);
  sub_10005972C(v4, v3, type metadata accessor for OwnedBeaconRecord);
  v6 = sub_10005972C(v2, v1, type metadata accessor for OwnerSharingCircle);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v11 = *(_QWORD *)(v0 + 312);
  v10 = *(_QWORD *)(v0 + 320);
  if (v9)
  {
    v12 = *(_QWORD *)(v0 + 280);
    v28 = *(_QWORD *)(v0 + 376);
    v13 = swift_slowAlloc(42, -1);
    v14 = swift_slowAlloc(64, -1);
    v30 = v14;
    *(_DWORD *)v13 = 141558787;
    *(_QWORD *)(v13 + 4) = 1752392040;
    *(_WORD *)(v13 + 12) = 2081;
    v15 = type metadata accessor for UUID(0);
    v27 = v10;
    v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
    *(_QWORD *)(v13 + 14) = sub_100016940(v17, v18, &v30);
    swift_bridgeObjectRelease();
    sub_1000126B0(v12, type metadata accessor for OwnedBeaconRecord);
    *(_WORD *)(v13 + 22) = 2160;
    *(_QWORD *)(v13 + 24) = 1752392040;
    *(_WORD *)(v13 + 32) = 2081;
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
    *(_QWORD *)(v13 + 34) = sub_100016940(v19, v20, &v30);
    swift_bridgeObjectRelease();
    sub_1000126B0(v11, type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to update name record in keydrop: %{private,mask.hash}s, shareId: %{private,mask.hash}s.", (uint8_t *)v13, 0x2Au);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
    swift_errorRelease(v28);

    v21 = v27;
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 280);
    swift_errorRelease(*(_QWORD *)(v0 + 376));

    sub_1000126B0(v11, type metadata accessor for OwnerSharingCircle);
    sub_1000126B0(v22, type metadata accessor for OwnedBeaconRecord);
    v21 = v10;
  }
  sub_1000126B0(v21, type metadata accessor for OwnerSharingCircle);
  v23 = *(_QWORD *)(v0 + 360) + 1;
  if (v23 == *(_QWORD *)(v0 + 344))
  {
    swift_bridgeObjectRelease();
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 136);
      sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
      v29 = (uint64_t (__cdecl *)())((char *)&dword_1010EBCD0 + dword_1010EBCD0);
      v25 = (_QWORD *)swift_task_alloc(unk_1010EBCD4);
      *(_QWORD *)(v0 + 384) = v25;
      *v25 = v0;
      v25[1] = sub_100498A30;
      return v29();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(_QWORD *)(v0 + 360) = v23;
    sub_10005972C(*(_QWORD *)(v0 + 232)+ ((*(unsigned __int8 *)(v0 + 416) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 416))+ *(_QWORD *)(v0 + 352) * v23, *(_QWORD *)(v0 + 320), type metadata accessor for OwnerSharingCircle);
    v26 = (_QWORD *)swift_task_alloc(dword_1010EE2BC);
    *(_QWORD *)(v0 + 368) = v26;
    *v26 = v0;
    v26[1] = sub_1004989CC;
    return sub_1000C2B20(*(_QWORD *)(v0 + 320), 0);
  }
  return result;
}

uint64_t sub_10049953C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 240);
  v34 = type metadata accessor for Logger(0);
  sub_10001A9E8(v34, (uint64_t)qword_1011B7648);
  v3 = sub_10005972C(v2, v1, type metadata accessor for OwnedBeaconRecord);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 408);
  v8 = *(_QWORD *)(v0 + 272);
  if (v6)
  {
    v33 = *(_QWORD *)(v0 + 408);
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v35 = v10;
    *(_DWORD *)v9 = 141558275;
    *(_QWORD *)(v0 + 216) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = type metadata accessor for UUID(0);
    v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    *(_QWORD *)(v0 + 224) = sub_100016940(v13, v14, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to send name record updates to members: %{private,mask.hash}s.", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
    swift_release();
    swift_errorRelease(v33);
  }
  else
  {
    swift_release();
    swift_errorRelease(v7);
    sub_1000126B0(v8, type metadata accessor for OwnedBeaconRecord);
  }

  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  v15 = *(_QWORD *)(v0 + 288);
  v16 = *(_QWORD *)(v0 + 240);
  sub_10001A9E8(v34, (uint64_t)qword_1011B7648);
  v17 = sub_10005972C(v16, v15, type metadata accessor for OwnedBeaconRecord);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  v21 = *(_QWORD *)(v0 + 288);
  if (v20)
  {
    v22 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(32, -1);
    v35 = v23;
    *(_DWORD *)v22 = 141558275;
    *(_QWORD *)(v0 + 200) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2081;
    v24 = type metadata accessor for UUID(0);
    v25 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v24, v25);
    *(_QWORD *)(v0 + 208) = sub_100016940(v26, v27, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v21, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Successfully pushed record update to owner circle shares: %{private,mask.hash}s.", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 288), type metadata accessor for OwnedBeaconRecord);
  }

  (*(void (**)(uint64_t))(v0 + 248))(1);
  swift_release();
  v28 = *(_QWORD *)(v0 + 312);
  v30 = *(_QWORD *)(v0 + 280);
  v29 = *(_QWORD *)(v0 + 288);
  v31 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004999B4(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v7 = sub_10001A9A8(&qword_101108090);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v9, &qword_101108090);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v7);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v11 = *v9;
    v12 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v13 = qword_1011B7D38;
    v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v15 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
    v25 = v11;
    swift_errorRetain(v11);
    v16 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v17 = String.init<A>(describing:)(&v25, v16);
    v19 = v18;
    *(_QWORD *)(v15 + 56) = &type metadata for String;
    *(_QWORD *)(v15 + 64) = sub_10001AA00();
    *(_QWORD *)(v15 + 32) = v17;
    *(_QWORD *)(v15 + 40) = v19;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "create BeaconNameRecord failed %@.", 34, 2, v15);
    swift_bridgeObjectRelease();
    a2(0);
    return swift_errorRelease(v11);
  }
  else
  {
    v21 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, qword_1011B7D38, "create BeaconNameRecord success.", 32, 2, _swiftEmptyArrayStorage);
    a2(1);
    v22 = *(_QWORD *)(a4 + 280);
    sub_1007EEF64(15);
    type metadata accessor for Transaction(0);
    static Transaction.named<A>(_:with:)("com.apple.searchpartyd.triggerSiriDeviceNameSync", 48, 2, sub_100088044, v22);
    v23 = swift_retain();
    PassthroughSubject.send(_:)(v23);
    swift_release();
    return sub_100004048((uint64_t)v9, &qword_101108090);
  }
}

uint64_t sub_100499C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v49 = a7;
  v50 = a8;
  v47 = a6;
  v48 = a5;
  v46 = a4;
  v41 = a1;
  v51 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v51 - 8);
  v44 = *(_QWORD *)(v10 + 64);
  v45 = v10;
  __chkstk_darwin(v51);
  v43 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v39 = v12;
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v40 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OwnedBeaconRecord(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v19);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v21;
  v22 = type metadata accessor for KeySyncRecord(0);
  sub_100499ECC(a2, *(_QWORD *)(a3 + *(int *)(v22 + 20)));
  v23 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v21, 1, 1, v23);
  sub_10005972C(a2, (uint64_t)v18, type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v46, v12);
  v24 = v45;
  v25 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v43, v47, v51);
  v26 = *(unsigned __int8 *)(v16 + 80);
  v27 = (v26 + 32) & ~v26;
  v28 = *(unsigned __int8 *)(v13 + 80);
  v29 = (v17 + v28 + v27) & ~v28;
  v30 = (v14 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = *(unsigned __int8 *)(v24 + 80);
  v32 = (v31 + v30 + 8) & ~v31;
  v33 = (v44 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  v34 = swift_allocObject(&unk_1010795C8, v33 + 16, v26 | v28 | v31 | 7);
  *(_QWORD *)(v34 + 16) = 0;
  *(_QWORD *)(v34 + 24) = 0;
  sub_1000126EC((uint64_t)v18, v34 + v27, type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v34 + v29, v40, v39);
  *(_QWORD *)(v34 + v30) = v48;
  (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v34 + v32, v25, v51);
  v35 = (_QWORD *)(v34 + v33);
  v36 = v50;
  *v35 = v49;
  v35[1] = v36;
  swift_retain();
  sub_100691AC0((uint64_t)v42, (uint64_t)&unk_1010FD0D0, v34);
  return swift_release();
}

uint64_t sub_100499ECC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v5 = type metadata accessor for OwnedBeaconRecord(0);
  v48 = *(_QWORD *)(v5 - 8);
  v6 = *(_QWORD *)(v48 + 64);
  __chkstk_darwin(v5);
  v47 = (uint64_t)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for ShareRecord(0);
  v7 = *(_QWORD *)(v51 - 8);
  v8 = __chkstk_darwin(v51);
  v45 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v37 - v10;
  v49 = a1;
  v50 = v2;
  v44 = *(_QWORD *)(v2 + 280);
  v12 = sub_10088A6EC();
  v13 = v12[2];
  if (v13)
  {
    v14 = *(unsigned __int8 *)(v7 + 80);
    v42 = ~v14;
    v43 = v14;
    v37 = v12;
    v15 = (uint64_t)v12 + ((v14 + 32) & ~v14);
    v41 = v6 + v14;
    v16 = *(_QWORD *)(v7 + 72);
    v39 = xmmword_100E221E0;
    v17 = v51;
    v40 = v16;
    v38 = a2;
    do
    {
      v32 = sub_10005972C(v15, (uint64_t)v11, type metadata accessor for ShareRecord);
      v33 = *(_QWORD *)&v11[*(int *)(v17 + 44)];
      if (v33 > a2)
      {
        v34 = a2;
        v35 = static os_log_type_t.default.getter(v32);
        if (qword_1010EA248 != -1)
          swift_once(&qword_1010EA248, sub_100B5D8FC);
        v18 = qword_1011B7D28;
        v19 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v20 = swift_allocObject(v19, 152, 7);
        *(_OWORD *)(v20 + 16) = v39;
        v21 = UUID.uuidString.getter(v20);
        v23 = v22;
        *(_QWORD *)(v20 + 56) = &type metadata for String;
        v24 = sub_10001AA00();
        *(_QWORD *)(v20 + 32) = v21;
        *(_QWORD *)(v20 + 40) = v23;
        *(_QWORD *)(v20 + 96) = &type metadata for UInt64;
        *(_QWORD *)(v20 + 104) = &protocol witness table for UInt64;
        *(_QWORD *)(v20 + 112) = v33;
        *(_QWORD *)(v20 + 64) = v24;
        *(_QWORD *)(v20 + 72) = v34;
        *(_QWORD *)(v20 + 136) = &type metadata for UInt64;
        *(_QWORD *)(v20 + 144) = &protocol witness table for UInt64;
        os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v18, "Redistributing keys for share %@: newPrimaryIndex: %lu, share, sharePrimaryIndex: %lu", 85, 2, v20, v37);
        swift_bridgeObjectRelease();
        v25 = v47;
        sub_10005972C(v49, v47, type metadata accessor for OwnedBeaconRecord);
        v26 = v45;
        sub_10005972C((uint64_t)v11, v45, type metadata accessor for ShareRecord);
        v27 = *(unsigned __int8 *)(v48 + 80);
        v28 = (v27 + 24) & ~v27;
        v29 = (v41 + v28) & v42;
        v30 = swift_allocObject(&unk_1010795F0, v29 + v46, v43 | v27 | 7);
        *(_QWORD *)(v30 + 16) = v50;
        v31 = v30 + v28;
        v17 = v51;
        sub_1000126EC(v25, v31, type metadata accessor for OwnedBeaconRecord);
        sub_1000126EC(v26, v30 + v29, type metadata accessor for ShareRecord);
        a2 = v38;
        swift_retain();
        sub_10080AD54((uint64_t)v11, 0, (void (*)(uint64_t))sub_1004D36D8, (void (*)(uint64_t))v30, v44, a2);
        swift_release();
        v16 = v40;
      }
      sub_1000126B0((uint64_t)v11, type metadata accessor for ShareRecord);
      v15 += v16;
      --v13;
    }
    while (v13);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_10049A230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v8[9] = a8;
  v8[10] = v15;
  v8[7] = a6;
  v8[8] = a7;
  v8[6] = a5;
  v9 = type metadata accessor for Date(0);
  v8[11] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[12] = v10;
  v8[13] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v8[14] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[15] = v12;
  v8[16] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)swift_task_alloc(dword_10110EEA4);
  v8[17] = v13;
  *v13 = v8;
  v13[1] = sub_10049A2D8;
  return sub_1009A1F44();
}

uint64_t sub_10049A2D8(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_BYTE *)(*(_QWORD *)v1 + 144) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10049A334, 0, 0);
}

uint64_t sub_10049A334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t type[8];
  uint64_t v35[2];

  if (*(_BYTE *)(v0 + 144) == 1)
  {
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v1 = *(_QWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 120);
    v2 = *(_QWORD *)(v0 + 128);
    v4 = *(_QWORD *)(v0 + 112);
    *(_QWORD *)type = *(_QWORD *)(v0 + 104);
    v6 = *(_QWORD *)(v0 + 88);
    v5 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 64);
    v8 = type metadata accessor for Logger(0);
    sub_10001A9E8(v8, (uint64_t)qword_1011B7660);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
    v9 = (*(uint64_t (**)(os_log_type_t *, uint64_t, uint64_t))(v5 + 16))(*(os_log_type_t **)type, v7, v6);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    v12 = os_log_type_enabled(v10, v11);
    v14 = *(_QWORD *)(v0 + 120);
    v13 = *(_QWORD *)(v0 + 128);
    v15 = *(_QWORD *)(v0 + 104);
    v16 = *(_QWORD *)(v0 + 112);
    v17 = *(_QWORD *)(v0 + 88);
    v18 = *(_QWORD *)(v0 + 96);
    if (v12)
    {
      v31 = *(_QWORD *)(v0 + 56);
      v32 = *(_QWORD *)(v0 + 88);
      v19 = swift_slowAlloc(42, -1);
      v33 = swift_slowAlloc(64, -1);
      v35[0] = v33;
      *(_DWORD *)v19 = 141558787;
      *(_QWORD *)(v0 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v19 + 4, v19 + 12);
      *(_WORD *)(v19 + 12) = 2081;
      v20 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v21 = dispatch thunk of CustomStringConvertible.description.getter(v16, v20);
      *(_QWORD *)(v0 + 24) = sub_100016940(v21, v22, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v19 + 14, v19 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v16);
      *(_WORD *)(v19 + 22) = 2048;
      *(_QWORD *)(v0 + 32) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v19 + 24, v19 + 32);
      *(_WORD *)(v19 + 32) = 2080;
      v23 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v24 = dispatch thunk of CustomStringConvertible.description.getter(v32, v23);
      *(_QWORD *)(v0 + 40) = sub_100016940(v24, v25, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v19 + 34, v19 + 42);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v15, v32);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Posting SPManagedCBPeripheralChanged on keySyncRecord update from CL for %{private,mask.hash}s index %llu date %s.", (uint8_t *)v19, 0x2Au);
      swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v14 + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v15, v17);

    }
    v26 = (void *)SPManagedCBPeripheralChangedNotification;
    v27 = type metadata accessor for DarwinNotificationHelper(0);
    swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    DarwinNotificationHelper.init(notificationName:rateLimit:)(v26, 0.0);
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
    swift_release();
  }
  v28 = *(_QWORD *)(v0 + 128);
  v29 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t))(v0 + 72))(1);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10049A6D8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = type metadata accessor for ShareRecord(0);
  *(_QWORD *)(a1 + *(int *)(result + 44)) = a2;
  return result;
}

uint64_t sub_10049A708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v8 = type metadata accessor for ShareRecord(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v36 - v12;
  v14 = sub_10001A9A8((uint64_t *)&unk_101108180);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v16, (uint64_t *)&unk_101108180);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v14);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v18 = *v16;
    v19 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA248 != -1)
      swift_once(&qword_1010EA248, sub_100B5D8FC);
    v20 = qword_1011B7D28;
    v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v22 = swift_allocObject(v21, 72, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
    v37 = v18;
    swift_errorRetain(v18);
    v23 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v24 = String.init<A>(describing:)(&v37, v23);
    v26 = v25;
    *(_QWORD *)(v22 + 56) = &type metadata for String;
    *(_QWORD *)(v22 + 64) = sub_10001AA00();
    *(_QWORD *)(v22 + 32) = v24;
    *(_QWORD *)(v22 + 40) = v26;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Could not update ShareRecord. Error - %@", 40, 2, v22);
    swift_bridgeObjectRelease();
    result = swift_errorRelease(v18);
  }
  else
  {
    v28 = sub_1000126EC((uint64_t)v16, (uint64_t)v13, type metadata accessor for ShareRecord);
    v29 = static os_log_type_t.default.getter(v28);
    if (qword_1010EA248 != -1)
      swift_once(&qword_1010EA248, sub_100B5D8FC);
    v30 = qword_1011B7D28;
    v31 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v32 = swift_allocObject(v31, 72, 7);
    *(_OWORD *)(v32 + 16) = xmmword_100E22B00;
    sub_10005972C((uint64_t)v13, (uint64_t)v11, type metadata accessor for ShareRecord);
    v33 = String.init<A>(describing:)(v11, v8);
    v35 = v34;
    *(_QWORD *)(v32 + 56) = &type metadata for String;
    *(_QWORD *)(v32 + 64) = sub_10001AA00();
    *(_QWORD *)(v32 + 32) = v33;
    *(_QWORD *)(v32 + 40) = v35;
    os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "Successfully updated sharePrimaryIndex of %@", 44, 2, v32);
    swift_bridgeObjectRelease();
    result = sub_1000126B0((uint64_t)v13, type metadata accessor for ShareRecord);
  }
  if (*(_QWORD *)(a2 + 40))
  {
    swift_retain();
    sub_1003A7660(a3, a4);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10049AA14(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = swift_allocObject(&unk_101079550, 24, 7);
  *(_QWORD *)(v7 + 16) = a4;
  swift_retain();
  sub_1007A277C(a3, 0, (void (*)(uint64_t))sub_1004D2A40, v7, (void (*)(uint64_t))sub_1004D2A48, a1);
  swift_release();
  return swift_release();
}

uint64_t sub_10049AAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for KeyAlignmentRecord(0);
  *(_QWORD *)(a1 + *(int *)(v8 + 28)) = a2;
  static Date.trustedNow.getter((uint64_t)v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 40))(a1 + *(int *)(v8 + 32), v7, v4);
}

uint64_t sub_10049AB4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = sub_10001A9A8(&qword_1011082B0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10000F9B8(a1, (uint64_t)v4, &qword_1011082B0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v2);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v6 = *v4;
    v7 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v9 = swift_allocObject(v8, 72, 7);
    *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
    v21 = v6;
    swift_errorRetain(v6);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v11 = String.init<A>(describing:)(&v21, v10);
    v13 = v12;
    *(_QWORD *)(v9 + 56) = &type metadata for String;
    *(_QWORD *)(v9 + 64) = sub_10001AA00();
    *(_QWORD *)(v9 + 32) = v11;
    *(_QWORD *)(v9 + 40) = v13;
    v14 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v15 = (void *)static OS_os_log.default.getter(v14);
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v15, "Could not update last seen key indexto alignment record. Error - %@", 67, 2, v9);
    swift_bridgeObjectRelease();

    return swift_errorRelease(v6);
  }
  else
  {
    v17 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v18 = (void *)static OS_os_log.default.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    os_log(_:dso:log:type:_:)("Successfully update last seen key index to alignment record.", 60, 2, &_mh_execute_header, v18, v19, _swiftEmptyArrayStorage);

    return sub_100004048((uint64_t)v4, &qword_1011082B0);
  }
}

uint64_t sub_10049AD30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_10049AD48, 0, 0);
}

uint64_t sub_10049AD48()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);
  id v8;

  v1 = *(void **)(v0 + 24);
  v2 = type metadata accessor for AnalyticsEvent(0);
  v3 = (char *)swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(_QWORD *)(v0 + 32) = v3;
  swift_defaultActor_initialize(v3);
  v4 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v3 + 14) = v4;
  UUID.init()(v4);
  v5 = &v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v7(&v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v6);
  *((_QWORD *)v3 + 15) = 0xD000000000000031;
  *((_QWORD *)v3 + 16) = 0x8000000100ED7770;
  v8 = v1;
  return swift_task_switch(sub_10049AE4C, v3, 0);
}

uint64_t sub_10049AE4C()
{
  uint64_t v0;

  sub_100CE90C8(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 16), *(void **)(v0 + 24));

  return swift_task_switch(sub_1004826B4, 0, 0);
}

id sub_10049AEB8(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t inited;
  unint64_t v10;
  id result;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  id v18;
  unsigned int v19;
  id v20;
  uint64_t v21;
  NSString v22;
  char v23;
  id v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  char v29[64];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EEBD0);
  inited = swift_initStackObject(v8, v29);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = 0x6E4979654B77656ELL;
  *(_QWORD *)(inited + 40) = 0xEB00000000786564;
  *(_QWORD *)(inited + 48) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInteger:", a1);
  *(_BYTE *)(inited + 56) = 0;
  v10 = sub_1006B9444(inited);
  result = objc_msgSend(a2, "systemVersion");
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  v12 = (uint64_t)result;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
  v28 = v10;
  sub_10010AC08(v12, 0, 0xD000000000000013, 0x8000000100ED0EC0, isUniquelyReferenced_nonNull_native);
  v14 = v28;
  swift_bridgeObjectRelease();
  result = objc_msgSend(a2, "systemVersion");
  if (!result)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v15 = (uint64_t)result;
  v16 = swift_isUniquelyReferenced_nonNull_native(v14);
  v28 = v14;
  sub_10010AC08(v15, 0, 0xD00000000000001BLL, 0x8000000100ED0EE0, v16);
  v17 = v28;
  swift_bridgeObjectRelease();
  v18 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v19 = objc_msgSend(v18, "isInternalBuild");

  if (v19)
  {
    v20 = objc_msgSend(a2, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);

    UUID.uuidString.getter(v21);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v23 = swift_isUniquelyReferenced_nonNull_native(v17);
    v28 = v17;
    sub_10010AC08((uint64_t)v22, 0, 0x6544646572696170, 0xEE00444965636976, v23);
    v17 = v28;
    swift_bridgeObjectRelease();
    v24 = objc_msgSend(a2, "serialNumber");
    if (v24)
    {
      v25 = (uint64_t)v24;
      v26 = swift_isUniquelyReferenced_nonNull_native(v17);
      v28 = v17;
      sub_10010AC08(v25, 0, 0xD000000000000018, 0x8000000100ECAF40, v26);
      v17 = v28;
      swift_bridgeObjectRelease();
    }
  }
  return (id)v17;
}

uint64_t sub_10049B1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  _QWORD aBlock[6];

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v2 + 144);
  v13 = (_QWORD *)swift_allocObject(&unk_101078BC8, 40, 7);
  v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_1004BC678;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101078BE0;
  v14 = _Block_copy(aBlock);
  swift_retain();
  v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  v21 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_10049B3BC(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  Swift::String v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(_QWORD *);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;

  v56 = a3;
  v57 = a2;
  *(_QWORD *)&v72 = 0;
  v4 = type metadata accessor for Date(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DateInterval(0);
  v64 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v71 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v68 = *(_QWORD *)(v8 - 8);
  v69 = v8;
  __chkstk_darwin(v8);
  v67 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v10);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for BeaconNamingRecord(0);
  v63 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v60 = (uint64_t)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_autoreleasePoolPush();
  v70 = *(_QWORD *)(a1 + 280);
  v15 = sub_100017368();
  v16 = v15;
  v81 = _swiftEmptyArrayStorage;
  v17 = *(_QWORD *)(v15 + 16);
  v66 = v6;
  v62 = v17;
  if (v17)
  {
    v54 = v14;
    v55 = a1;
    v18 = 0;
    v61 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueueSynchronizer;
    v19 = v15 + 32;
    v59 = SPBeaconRoleIdUndefined;
    KeyPath = v58;
    while (1)
    {
      if (v18 >= *(_QWORD *)(v16 + 16))
      {
        __break(1u);
        goto LABEL_24;
      }
      sub_100030784(v19, (uint64_t)&v78);
      v22 = v79;
      v21 = v80;
      sub_10001AA44(&v78, v79);
      v23 = v67;
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v21 + 8) + 8) + 32))(v22);
      __chkstk_darwin(v24);
      v25 = v72;
      QueueSynchronizer.conditionalSync<A>(_:)(sub_10029183C);
      *(_QWORD *)&v72 = v25;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v23, v69);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v12, 1, KeyPath) == 1)
      {
        sub_100004048((uint64_t)v12, (uint64_t *)&unk_101105880);
      }
      else
      {
        v26 = v60;
        sub_1000126EC((uint64_t)v12, v60, type metadata accessor for BeaconNamingRecord);
        v27 = *(_QWORD *)(v26 + *(int *)(KeyPath + 28));
        sub_1000126B0(v26, type metadata accessor for BeaconNamingRecord);
        if (v59 < v27)
        {
          sub_10000F9FC(&v78, (uint64_t)&v74);
          v28 = v81;
          if ((swift_isUniquelyReferenced_nonNull_native(v81) & 1) == 0)
          {
            sub_10009A628(0, v28[2] + 1, 1);
            v28 = v81;
          }
          v29 = v10;
          v31 = v28[2];
          v30 = v28[3];
          if (v31 >= v30 >> 1)
            sub_10009A628(v30 > 1, v31 + 1, 1);
          v32 = v76;
          v33 = v77;
          v34 = sub_10009F5D0((uint64_t)&v74, v76);
          __chkstk_darwin(v34);
          v36 = (char *)&v54 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v37 + 16))(v36);
          sub_1004AA86C(v31, (uint64_t)v36, (uint64_t *)&v81, v32, v33);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v74);
          v10 = v29;
          KeyPath = v58;
          goto LABEL_5;
        }
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v78);
LABEL_5:
      ++v18;
      v19 += 40;
      if (v62 == v18)
      {
        v38 = v81;
        a1 = v55;
        v14 = v54;
        goto LABEL_16;
      }
    }
  }
  v38 = _swiftEmptyArrayStorage;
LABEL_16:
  swift_bridgeObjectRelease();
  *(_QWORD *)&v78 = v38;
  swift_retain();
  swift_retain();
  v39 = v72;
  sub_1004CFE08((_QWORD **)&v78, a1);
  if (v39)
  {
LABEL_25:
    swift_release();
    swift_release();
    __break(1u);
    JUMPOUT(0x10049BD54);
  }
  swift_release();
  swift_release();
  v40 = v78;
  objc_autoreleasePoolPop(v14);
  v81 = _swiftEmptyArrayStorage;
  if (*(_QWORD *)(v40 + 16))
  {
    v62 = v40;
    v72 = xmmword_100E22B00;
    sub_100030784(v40 + 32, (uint64_t)&v78);
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v41 = v74;
    KeyPath = swift_getKeyPath(&unk_100E3F578);
    v42 = sub_100C1BED0(KeyPath, v41);
    if ((v43 & 1) == 0)
    {
      v44 = v42;
      swift_bridgeObjectRelease();
      swift_release();
      v45 = (uint64_t)v66;
      static Date.trustedNow.getter((uint64_t)v66);
      v46 = (uint64_t)v71;
      DateInterval.init(start:duration:)(v45, (double)v44 * 60.0);
      v47 = v79;
      v48 = v80;
      v49 = sub_10001AA44(&v78, v79);
      sub_1008595F4((uint64_t)v49, v46, 0, 0, 0, v70, v47, v48);
      __asm { BR              X9 }
    }
LABEL_24:
    v74 = 0;
    v75 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    v52._object = (void *)0x8000000100ED5FD0;
    v52._countAndFlagsBits = 0xD000000000000026;
    String.append(_:)(v52);
    v73 = KeyPath;
    v53 = sub_10001A9A8(&qword_1010FB170);
    _print_unlocked<A, B>(_:_:)(&v73, &v74, v53, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v74, v75, "searchpartyd/Configuration.swift", 32, 2, 24, 0);
    __break(1u);
    goto LABEL_25;
  }
  swift_release();
  v57(_swiftEmptyArrayStorage);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10049BD64@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  id v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  Class isa;
  Class v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  id v67;
  Class v68;
  uint64_t v69;
  unint64_t v70;
  Class v71;
  uint64_t v72;
  unint64_t v73;
  Class v74;
  void *v75;
  void *v76;
  Swift::String v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  id v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  v87 = a3;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TimeBasedKey(0);
  v11 = (char *)a1 + *(int *)(v10 + 24);
  v88 = *((_QWORD *)v11 + 1);
  if (v88 >> 60 == 15)
  {
    v86 = v3;
    LODWORD(v88) = static os_log_type_t.error.getter(v10);
    if (qword_1010EA248 != -1)
      swift_once(&qword_1010EA248, sub_100B5D8FC);
    v12 = qword_1011B7D28;
    v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v14 = swift_allocObject(v13, 112, 7);
    *(_OWORD *)(v14 + 16) = xmmword_100E22B10;
    v15 = a2[3];
    v16 = a2[4];
    sub_10001AA44(a2, v15);
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 8) + 32))(v15);
    v18 = UUID.uuidString.getter(v17);
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(_QWORD *)(v14 + 56) = &type metadata for String;
    v21 = sub_10001AA00();
    *(_QWORD *)(v14 + 32) = v18;
    *(_QWORD *)(v14 + 40) = v20;
    v22 = *a1;
    *(_QWORD *)(v14 + 96) = &type metadata for UInt64;
    *(_QWORD *)(v14 + 104) = &protocol witness table for UInt64;
    *(_QWORD *)(v14 + 64) = v21;
    *(_QWORD *)(v14 + 72) = v22;
    result = swift_bridgeObjectRelease();
    v24 = 0;
    goto LABEL_7;
  }
  v26 = v88;
  v91 = *(_QWORD *)v11;
  v25 = v91;
  v92 = v88;
  v27 = *((_OWORD *)v11 + 2);
  v93 = *((_OWORD *)v11 + 1);
  v94 = v27;
  sub_10001BBBC(v91, v88);
  v28 = sub_1007DFD44();
  v30 = v29;
  v31 = objc_allocWithZone((Class)SPBeaconingKey);
  isa = DateInterval._bridgeToObjectiveC()().super.isa;
  v33 = Data._bridgeToObjectiveC()().super.isa;
  v34 = objc_msgSend(v31, "initWithDateInterval:key:", isa, v33);

  sub_10001BC14(v28, v30);
  v35 = String.utf8Data.getter(0x646E616D6D6F63, 0xE700000000000000);
  v37 = v36;
  sub_10001BBBC(v25, v26);
  sub_1007E6A88(v25, v26, v35, v37, 32);
  if (!v3)
  {
    v40 = v38;
    v41 = v39;
    sub_10001EF3C(v25, v88);
    sub_1002F702C(v40, v41);
    sub_10001BC14(v35, v37);
    v42 = v89;
    v84 = v90;
    v43 = String.utf8Data.getter(0x7463656E6E6F63, 0xE700000000000000);
    v45 = v44;
    v46 = v88;
    sub_10001BBBC(v25, v88);
    sub_1007E6A88(v25, v46, v43, v45, 32);
    v48 = v47;
    v50 = v49;
    v83 = v34;
    sub_10001EF3C(v25, v88);
    sub_1002F702C(v48, v50);
    sub_10001BC14(v43, v45);
    v81 = v90;
    v82 = v89;
    v51 = sub_1007DFD44();
    v53 = v52;
    v54 = String.utf8Data.getter(0x646E616D6D6F63, 0xE700000000000000);
    v56 = v55;
    v57 = v88;
    sub_10001BBBC(v25, v88);
    v85 = v25;
    sub_1007E6A88(v25, v57, v54, v56, 32);
    v59 = v58;
    v61 = v60;
    sub_10001EF3C(v85, v88);
    sub_1002F702C(v59, v61);
    v86 = 0;
    sub_10001BC14(v54, v56);
    v62 = v89;
    v63 = v90;
    v64 = sub_1002F955C(v89, v90, v51, v53);
    v66 = v65;
    sub_10001BC14(v62, v63);
    sub_10001BC14(v51, v53);
    v67 = objc_allocWithZone((Class)SPCommandKeys);
    v80 = v42;
    v68 = Data._bridgeToObjectiveC()().super.isa;
    v70 = v81;
    v69 = v82;
    v71 = Data._bridgeToObjectiveC()().super.isa;
    v72 = v64;
    v73 = v66;
    v74 = Data._bridgeToObjectiveC()().super.isa;
    v75 = v67;
    v76 = v83;
    v24 = objc_msgSend(v75, "initWithBeaconingKey:commandKey:connectionToken:nearbyToken:", v83, v68, v71, v74);
    sub_10001BC14(v72, v73);
    sub_10001BC14(v69, v70);
    sub_10001BC14(v80, v84);

    result = sub_10001EF3C(v85, v88);
LABEL_7:
    *v87 = v24;
    return result;
  }
  sub_10001BC14(v35, v37);
  sub_10001EF3C(v25, v88);
  v89 = 0;
  v90 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  v77._object = (void *)0x8000000100ED71F0;
  v77._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v77);
  v95 = v3;
  v78 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  _print_unlocked<A, B>(_:_:)(&v95, &v89, v78, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v89, v90, "searchpartyd/KeyRepresentable.swift", 35, 2, 415, 0);
  __break(1u);
  return result;
}

uint64_t sub_10049C45C(__int128 *a1, uint64_t (*a2)(__int128 *))
{
  uint64_t v2;
  char v3;
  unint64_t v4;
  __int128 v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11;

  v2 = *((_QWORD *)a1 + 7);
  v3 = *((_BYTE *)a1 + 64);
  v4 = *((unsigned __int8 *)a1 + 16) | ((unint64_t)*((unsigned __int16 *)a1 + 9) << 16);
  v6 = *a1;
  v7 = v4;
  v8 = *(__int128 *)((char *)a1 + 24);
  v9 = *(__int128 *)((char *)a1 + 40);
  v10 = v2;
  v11 = v3;
  return a2(&v6);
}

uint64_t sub_10049C4C0(uint64_t a1, uint64_t (*a2)(_OWORD *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _OWORD v14[4];
  char v15;

  v4 = static os_log_type_t.error.getter(a1);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
  *(_QWORD *)&v14[0] = a1;
  swift_errorRetain(a1);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v8 = String.init<A>(describing:)(v14, v7);
  v10 = v9;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 64) = sub_10001AA00();
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v10;
  v11 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v12 = (void *)static OS_os_log.default.getter(v11);
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v12, "Failed to fetch user stats. Error - %@", 38, 2, v6, *(_QWORD *)&v14[0]);
  swift_bridgeObjectRelease();

  v14[0] = xmmword_100E3F4B0;
  memset(&v14[1], 0, 48);
  v15 = 0;
  return a2(v14);
}

uint64_t sub_10049C5EC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  char v50;
  char *v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  void (*v55)(char *, char *, uint64_t);
  void (*v56)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  unsigned int (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v62 = a2;
  v5 = sub_10001A9A8((uint64_t *)&unk_101102F70);
  v6 = __chkstk_darwin(v5);
  v63 = (uint64_t)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v55 - v8;
  v69 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v69 - 8);
  v11 = __chkstk_darwin(v69);
  v66 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v55 - v13;
  v15 = sub_10001A9A8(&qword_1010F2CA8);
  v16 = __chkstk_darwin(v15);
  v64 = (uint64_t)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v55 - v18;
  v20 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v21 = __chkstk_darwin(v20);
  v65 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v24 = (char *)&v55 - v23;
  v68 = type metadata accessor for Date(0);
  v70 = *(_QWORD *)(v68 - 8);
  v25 = __chkstk_darwin(v68);
  v59 = (char *)&v55 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v67 = (char *)&v55 - v27;
  v28 = *(_QWORD *)(a3 + 280);
  v30 = a1[3];
  v29 = a1[4];
  sub_10001AA44(a1, v30);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v29 + 8) + 8) + 32))(v30);
  v61 = v28;
  sub_1008202EC((uint64_t)v14, (uint64_t)v9);
  v31 = sub_10001A9A8(&qword_101102F80);
  v60 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48);
  if (v60(v9, 1, v31) == 1)
  {
    sub_100004048((uint64_t)v9, (uint64_t *)&unk_101102F70);
    v32 = type metadata accessor for BeaconStatus(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v19, 1, 1, v32);
  }
  else
  {
    sub_1000126EC((uint64_t)v9, (uint64_t)v19, type metadata accessor for BeaconStatus);
    v32 = type metadata accessor for BeaconStatus(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v19, 0, 1, v32);
  }
  v33 = *(void (**)(char *, uint64_t))(v10 + 8);
  v33(v14, v69);
  type metadata accessor for BeaconStatus(0);
  v34 = *(_QWORD *)(v32 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v19, 1, v32);
  v37 = v70;
  v38 = v68;
  if (v36 == 1)
  {
    sub_100004048((uint64_t)v19, &qword_1010F2CA8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56))(v24, 1, 1, v38);
  }
  else
  {
    v39 = &v19[*(int *)(v32 + 24)];
    v58 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
    v58(v24, v39, v68);
    sub_1000126B0((uint64_t)v19, type metadata accessor for BeaconStatus);
    v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56);
    v40(v24, 0, 1, v38);
    v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
    if (v57(v24, 1, v38) != 1)
    {
      v55 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
      v56 = v40;
      v55(v67, v24, v38);
      v41 = v62[3];
      v42 = v62[4];
      sub_10001AA44(v62, v41);
      v43 = (uint64_t)v66;
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v42 + 8) + 8) + 32))(v41);
      v44 = v63;
      sub_1008202EC(v43, v63);
      if (v60((char *)v44, 1, v31) == 1)
      {
        sub_100004048(v44, (uint64_t *)&unk_101102F70);
        v45 = 1;
        v46 = v64;
        v24 = v65;
      }
      else
      {
        v46 = v64;
        sub_1000126EC(v44, v64, type metadata accessor for BeaconStatus);
        v45 = 0;
        v24 = v65;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v46, v45, 1, v32);
      v33(v66, v69);
      v47 = v35((char *)v46, 1, v32);
      v48 = v70;
      v49 = v56;
      if (v47 == 1)
      {
        sub_100004048(v46, &qword_1010F2CA8);
        v49(v24, 1, 1, v38);
      }
      else
      {
        v58(v24, (char *)(v46 + *(int *)(v32 + 24)), v38);
        sub_1000126B0(v46, type metadata accessor for BeaconStatus);
        v49(v24, 0, 1, v38);
        if (v57(v24, 1, v38) != 1)
        {
          v52 = v59;
          v55(v59, v24, v38);
          v53 = v67;
          v50 = static Date.> infix(_:_:)(v67, v52);
          v54 = *(void (**)(char *, uint64_t))(v48 + 8);
          v54(v52, v38);
          v54(v53, v38);
          return v50 & 1;
        }
      }
      (*(void (**)(char *, uint64_t))(v48 + 8))(v67, v38);
    }
  }
  sub_100004048((uint64_t)v24, (uint64_t *)&unk_1010EA690);
  v50 = 0;
  return v50 & 1;
}

