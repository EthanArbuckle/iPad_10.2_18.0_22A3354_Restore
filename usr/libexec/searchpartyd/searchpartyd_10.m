uint64_t sub_1005CB47C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 408);
  v4 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 392);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, *(_QWORD *)(v0 + 352) + *(int *)(v0 + 604), v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101081740, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 576) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 584) = v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F7950);
  *v10 = v0;
  v10[1] = sub_1005CB578;
  return unsafeBlocking<A>(_:)(v0 + 336, sub_1005CCE40, v8, v11);
}

uint64_t sub_1005CB578()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 584));
  swift_release();
  return swift_task_switch(sub_1005CB5D4, *(_QWORD *)(v1 + 568), 0);
}

uint64_t sub_1005CB5D4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[45];
  swift_release();
  v0[74] = v0[42];
  return swift_task_switch(sub_1005CB61C, v1, 0);
}

uint64_t sub_1005CB61C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = *(_QWORD *)(v0 + 424);
  v1 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 416);
  sub_100A79444(*(_QWORD *)(v0 + 592), v3);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v4 = *(void **)(v0 + 552);
    v5 = *(_BYTE *)(v0 + 608);
    v6 = *(_QWORD *)(v0 + 512);
    v7 = *(_QWORD *)(v0 + 472);
    v8 = *(_QWORD *)(v0 + 360);
    sub_100004048(*(_QWORD *)(v0 + 416), (uint64_t *)&unk_1010F7810);
    v9 = *(_QWORD *)(v8 + 160);
    type metadata accessor for Transaction(0);
    sub_100030784(v0 + 16, v0 + 96);
    v10 = swift_allocObject(&unk_101081768, 73, 7);
    sub_10000F9FC((__int128 *)(v0 + 96), v10 + 16);
    *(_QWORD *)(v10 + 56) = v9;
    *(_QWORD *)(v10 + 64) = v4;
    *(_BYTE *)(v10 + 72) = v5;
    v11 = v4;
    swift_retain();
    static Transaction.asyncTask(name:block:)("LocationFetchServiceConnections.updateLocations:beacon:", 55, 2, &unk_1011004D0, v10);
    swift_release();

  }
  else
  {
    v12 = *(_QWORD *)(v0 + 440);
    v13 = *(_QWORD *)(v0 + 424);
    v14 = *(_QWORD *)(v0 + 472) + *(int *)(v0 + 600);
    sub_1000126EC(*(_QWORD *)(v0 + 416), v12, type metadata accessor for BeaconEstimatedLocation);
    v15 = static Date.> infix(_:_:)(v14, v12 + *(int *)(v13 + 40));
    v16 = *(void **)(v0 + 552);
    if ((v15 & 1) != 0)
    {
      v17 = *(_BYTE *)(v0 + 608);
      v6 = *(_QWORD *)(v0 + 512);
      v7 = *(_QWORD *)(v0 + 472);
      v18 = *(_QWORD *)(v0 + 440);
      v19 = *(_QWORD *)(*(_QWORD *)(v0 + 360) + 160);
      type metadata accessor for Transaction(0);
      sub_100030784(v0 + 16, v0 + 256);
      v20 = swift_allocObject(&unk_101081790, 73, 7);
      sub_10000F9FC((__int128 *)(v0 + 256), v20 + 16);
      *(_QWORD *)(v20 + 56) = v19;
      *(_QWORD *)(v20 + 64) = v16;
      *(_BYTE *)(v20 + 72) = v17;
      v21 = v16;
      swift_retain();
      static Transaction.asyncTask(name:block:)("LocationFetchServiceConnections.updateLocations:beacon:", 55, 2, &unk_1011004D8, v20);
      swift_release();

      v22 = v18;
    }
    else
    {
      v6 = *(_QWORD *)(v0 + 512);
      v7 = *(_QWORD *)(v0 + 472);
      v23 = *(_QWORD *)(v0 + 440);

      v22 = v23;
    }
    sub_1000126B0(v22, type metadata accessor for BeaconEstimatedLocation);
  }
  sub_1000126B0(v7, type metadata accessor for DeviceEvent.Location);
  sub_1000126B0(v6, type metadata accessor for DeviceEvent);
  v24 = *(_QWORD *)(v0 + 512);
  v26 = *(_QWORD *)(v0 + 480);
  v25 = *(_QWORD *)(v0 + 488);
  v27 = *(_QWORD *)(v0 + 472);
  v29 = *(_QWORD *)(v0 + 440);
  v28 = *(_QWORD *)(v0 + 448);
  v31 = *(_QWORD *)(v0 + 408);
  v30 = *(_QWORD *)(v0 + 416);
  v32 = *(_QWORD *)(v0 + 376);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005CB8F4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  *(_BYTE *)(v4 + 292) = a3;
  *(_QWORD *)(v4 + 168) = a1;
  *(_QWORD *)(v4 + 176) = a4;
  v6 = sub_10001A9A8(&qword_1010ED860);
  *(_QWORD *)(v4 + 184) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v4 + 192) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 200) = v8;
  v9 = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v4 + 208) = v9;
  *(_QWORD *)(v4 + 216) = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v11 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v4 + 224) = v11;
  *(_QWORD *)(v4 + 40) = v10;
  *(_QWORD *)(v4 + 48) = sub_100006204(&qword_1010F4A80, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E25DE4);
  v12 = sub_100018F08((_QWORD *)(v4 + 16));
  sub_10005972C(a2, (uint64_t)v12, type metadata accessor for LocalFindableAccessoryRecord);
  sub_10005972C((uint64_t)v12, v11, type metadata accessor for LocalFindableAccessoryRecord);
  return swift_task_switch(sub_1005CBA14, 0, 0);
}

uint64_t sub_1005CBA14()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  void *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, uint64_t, __n128);
  __n128 v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void (*v47)(void);
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  _QWORD *v52;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *log;
  os_log_t loga;
  os_log_type_t v70;
  char v71;
  uint64_t v72;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  v5 = sub_10001A9A8(&qword_1011003C0);
  v6 = *(_QWORD *)(v4 + 72);
  *(_QWORD *)(v0 + 232) = v6;
  LODWORD(v7) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 288) = v7;
  v7 = v7;
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(v5, v8 + v6, v7 | 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  v10 = v9 + v8;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 240) = v11;
  v11(v10, v2, v3);
  sub_1000126B0(v2, type metadata accessor for LocalFindableAccessoryRecord);
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v12 = *(void **)(v0 + 168);
  v13 = type metadata accessor for Logger(0);
  sub_10001A9E8(v13, (uint64_t)qword_1011B71C8);
  sub_100030784(v0 + 16, v0 + 56);
  v14 = Logger.logObject.getter(v12);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v70 = v15;
    v16 = *(_QWORD *)(v0 + 216);
    v63 = *(_QWORD *)(v0 + 200);
    log = v14;
    v17 = *(_QWORD *)(v0 + 192);
    v64 = *(id *)(v0 + 168);
    v18 = swift_slowAlloc(42, -1);
    v65 = swift_slowAlloc(32, -1);
    v72 = v65;
    *(_DWORD *)v18 = 141558787;
    *(_QWORD *)(v0 + 136) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v18 + 4, v18 + 12);
    *(_WORD *)(v18 + 12) = 2081;
    v19 = sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    v11(v16, (uint64_t)v19, v17);
    v20 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v17, v20);
    v23 = v22;
    v24 = *(void (**)(uint64_t, uint64_t, __n128))(v63 + 8);
    v25 = swift_bridgeObjectRetain(v9);
    v24(v16, v17, v25);
    v1 = (_QWORD *)(v0 + 16);
    *(_QWORD *)(v0 + 144) = sub_100016940(v21, v23, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
    *(_WORD *)(v18 + 22) = 2050;
    v26 = objc_msgSend(v64, "source");

    *(_QWORD *)(v0 + 152) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v18 + 24, v18 + 32);

    *(_WORD *)(v18 + 32) = 2048;
    *(_QWORD *)(v0 + 160) = *(_QWORD *)(v9 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v18 + 34, v18 + 42);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v70, "Update device event for beacon: %{private,mask.hash}s, source: %{public}ld,\nclientBeaconIdentifiers %ld].", (uint8_t *)v18, 0x2Au);
    swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {
    v27 = *(void **)(v0 + 168);
    swift_bridgeObjectRetain(v9);

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
    swift_bridgeObjectRelease();

  }
  v28 = *(_QWORD *)(v0 + 192);
  v29 = sub_10001B664(v9);
  *(_QWORD *)(v0 + 248) = v29;
  swift_setDeallocating(v9);
  swift_arrayDestroy(v10, *(_QWORD *)(v9 + 16), v28);
  swift_deallocClassInstance(v9, 32, 7);
  v30 = *(_BYTE *)(v29 + 32);
  *(_BYTE *)(v0 + 293) = v30;
  v31 = -1;
  v32 = -1 << v30;
  if (-v32 < 64)
    v31 = ~(-1 << -(char)v32);
  v33 = v31 & *(_QWORD *)(v29 + 56);
  if (v33)
  {
    v34 = 0;
    v35 = __clz(__rbit64(v33));
    v36 = (v33 - 1) & v33;
    v37 = *(_QWORD **)(v0 + 248);
    goto LABEL_10;
  }
  v54 = 63 - v32;
  v37 = *(_QWORD **)(v0 + 248);
  if ((unint64_t)(63 - v32) <= 0x7F)
    goto LABEL_41;
  v55 = v37[8];
  if (!v55)
  {
    if (v54 >= 0xC0)
    {
      v55 = v37[9];
      if (v55)
      {
        v34 = 2;
        goto LABEL_15;
      }
      if (v54 >= 0x100)
      {
        v55 = v37[10];
        if (v55)
        {
          v34 = 3;
          goto LABEL_15;
        }
        if (v54 >= 0x140)
        {
          v55 = v37[11];
          if (v55)
          {
            v34 = 4;
            goto LABEL_15;
          }
          if (v54 >= 0x180)
          {
            v55 = v37[12];
            if (v55)
            {
              v34 = 5;
              goto LABEL_15;
            }
            if (v54 >= 0x1C0)
            {
              v56 = v1;
              v55 = v37[13];
              if (v55)
              {
                v34 = 6;
LABEL_31:
                v1 = v56;
                goto LABEL_15;
              }
              if (v54 >= 0x200)
              {
                v55 = v37[14];
                if (v55)
                {
                  v34 = 7;
                  goto LABEL_31;
                }
                v57 = 0;
                v58 = v54 >> 6;
                if (v54 >> 6 <= 8)
                  v58 = 8;
                v59 = v58 - 8;
                while (1)
                {
                  v1 = v56;
                  if (v59 == v57)
                    break;
                  v55 = v37[v57++ + 15];
                  if (v55)
                  {
                    v34 = v57 + 7;
                    goto LABEL_31;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_41:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 200) + 56))(*(_QWORD *)(v0 + 184), 1, 1, *(_QWORD *)(v0 + 192));
    goto LABEL_42;
  }
  v34 = 1;
LABEL_15:
  v36 = (v55 - 1) & v55;
  v35 = __clz(__rbit64(v55)) + (v34 << 6);
LABEL_10:
  *(_QWORD *)(v0 + 256) = v34;
  *(_QWORD *)(v0 + 264) = v36;
  v38 = *(_QWORD *)(v0 + 192);
  v39 = *(_QWORD *)(v0 + 200);
  v40 = *(_QWORD *)(v0 + 184);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 240))(v40, v37[6] + *(_QWORD *)(v0 + 232) * v35, v38);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v40, 0, 1, v38);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v40, 1, v38) != 1)
  {
    v41 = *(unsigned __int8 *)(v0 + 288);
    v66 = *(_QWORD *)(v0 + 192);
    v67 = *(_QWORD *)(v0 + 216);
    v42 = *(_QWORD *)(v0 + 176);
    v71 = *(_BYTE *)(v0 + 292);
    loga = *(os_log_t *)(v0 + 168);
    v43 = (v41 + 24) & ~v41;
    v44 = (*(_QWORD *)(v0 + 208) + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
    v45 = (v44 + 47) & 0xFFFFFFFFFFFFFFF8;
    v46 = v41 | 7;
    v47 = *(void (**)(void))(*(_QWORD *)(v0 + 200) + 32);
    v47();
    sub_100030784((uint64_t)v1, v0 + 96);
    v48 = swift_allocObject(&unk_101081718, v45 + 9, v46);
    *(_QWORD *)(v0 + 272) = v48;
    *(_QWORD *)(v48 + 16) = v42;
    ((void (*)(uint64_t, uint64_t, uint64_t))v47)(v48 + v43, v67, v66);
    sub_10000F9FC((__int128 *)(v0 + 96), v48 + v44);
    v49 = v48 + v45;
    *(_QWORD *)v49 = loga;
    *(_BYTE *)(v49 + 8) = v71;
    v50 = async function pointer to unsafeBlocking<A>(_:)[1];
    v51 = loga;
    swift_retain();
    v52 = (_QWORD *)swift_task_alloc(v50);
    *(_QWORD *)(v0 + 280) = v52;
    *v52 = v0;
    v52[1] = sub_1005CC0FC;
    return unsafeBlocking<A>(_:)(v52, sub_1005CD610, v48, &type metadata for () + 1);
  }
LABEL_42:
  swift_release();
  v60 = *(_QWORD *)(v0 + 216);
  v61 = *(_QWORD *)(v0 + 224);
  v62 = *(_QWORD *)(v0 + 184);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  swift_task_dealloc(v61);
  swift_task_dealloc(v60);
  swift_task_dealloc(v62);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005CC0FC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 280));
  swift_release();
  return swift_task_switch(sub_1005CC158, 0, 0);
}

void sub_1005CC158()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(void);
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;

  v4 = (_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 256);
  v6 = *(_QWORD *)(v3 + 264);
  if (v6)
  {
    v7 = (v6 - 1) & v6;
    v8 = __clz(__rbit64(v6)) | (v5 << 6);
    v2 = *(_QWORD *)(v3 + 248);
    goto LABEL_3;
  }
  v24 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  v6 = (unint64_t)((1 << *(_BYTE *)(v3 + 293)) + 63) >> 6;
  v2 = *(_QWORD *)(v3 + 248);
  if (v24 >= v6)
    goto LABEL_26;
  v0 = v2 + 56;
  v25 = *(_QWORD *)(v2 + 56 + 8 * v24);
  ++v5;
  if (v25)
  {
LABEL_8:
    v7 = (v25 - 1) & v25;
    v8 = __clz(__rbit64(v25)) + (v5 << 6);
LABEL_3:
    *(_QWORD *)(v3 + 256) = v5;
    *(_QWORD *)(v3 + 264) = v7;
    v9 = *(_QWORD *)(v3 + 192);
    v10 = *(_QWORD *)(v3 + 200);
    v11 = *(_QWORD *)(v3 + 184);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 240))(v11, *(_QWORD *)(v2 + 48) + *(_QWORD *)(v3 + 232) * v8, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v11, 0, 1, v9);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9) != 1)
    {
      v12 = *(unsigned __int8 *)(v3 + 288);
      v29 = *(_QWORD *)(v3 + 192);
      v30 = *(_QWORD *)(v3 + 216);
      v13 = *(_QWORD *)(v3 + 176);
      v32 = *(_BYTE *)(v3 + 292);
      v31 = *(void **)(v3 + 168);
      v14 = (v12 + 24) & ~v12;
      v15 = (*(_QWORD *)(v3 + 208) + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
      v16 = (v15 + 47) & 0xFFFFFFFFFFFFFFF8;
      v17 = v12 | 7;
      v18 = *(void (**)(void))(*(_QWORD *)(v3 + 200) + 32);
      v18();
      sub_100030784((uint64_t)v4, v3 + 96);
      v19 = swift_allocObject(&unk_101081718, v16 + 9, v17);
      *(_QWORD *)(v3 + 272) = v19;
      *(_QWORD *)(v19 + 16) = v13;
      ((void (*)(uint64_t, uint64_t, uint64_t))v18)(v19 + v14, v30, v29);
      sub_10000F9FC((__int128 *)(v3 + 96), v19 + v15);
      v20 = v19 + v16;
      *(_QWORD *)v20 = v31;
      *(_BYTE *)(v20 + 8) = v32;
      v21 = async function pointer to unsafeBlocking<A>(_:)[1];
      v22 = v31;
      swift_retain();
      v23 = (_QWORD *)swift_task_alloc(v21);
      *(_QWORD *)(v3 + 280) = v23;
      *v23 = v3;
      v23[1] = sub_1005CC0FC;
      unsafeBlocking<A>(_:)(v23, sub_1005CD610, v19, &type metadata for () + 1);
      return;
    }
    goto LABEL_27;
  }
  v5 = v24 + 1;
  if (v24 + 1 >= v6)
    goto LABEL_26;
  v25 = *(_QWORD *)(v0 + 8 * v5);
  if (v25)
    goto LABEL_8;
  v5 = v24 + 2;
  if (v24 + 2 >= v6)
    goto LABEL_26;
  v25 = *(_QWORD *)(v0 + 8 * v5);
  if (v25)
    goto LABEL_8;
  v5 = v24 + 3;
  if (v24 + 3 >= v6)
    goto LABEL_26;
  v25 = *(_QWORD *)(v0 + 8 * v5);
  if (v25)
    goto LABEL_8;
  v5 = v24 + 4;
  if (v24 + 4 >= v6)
    goto LABEL_26;
  v25 = *(_QWORD *)(v0 + 8 * v5);
  if (v25)
    goto LABEL_8;
  v5 = v24 + 5;
  if (v24 + 5 >= v6)
    goto LABEL_26;
  v25 = *(_QWORD *)(v0 + 8 * v5);
  if (v25)
    goto LABEL_8;
  v24 += 6;
  if (v24 >= v6)
  {
LABEL_26:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v3 + 200) + 56))(*(_QWORD *)(v3 + 184), 1, 1, *(_QWORD *)(v3 + 192));
LABEL_27:
    swift_release();
    v27 = *(_QWORD *)(v3 + 216);
    v26 = *(_QWORD *)(v3 + 224);
    v28 = *(_QWORD *)(v3 + 184);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v4);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    (*(void (**)(void))(v3 + 8))();
    return;
  }
  v1 = (_QWORD *)(v3 + 16);
  v25 = *(_QWORD *)(v0 + 8 * v24);
  if (v25)
  {
    v5 = v24;
    goto LABEL_8;
  }
  while (1)
  {
    v5 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    v4 = v1;
    if (v5 >= v6)
      goto LABEL_26;
LABEL_23:
    v25 = *(_QWORD *)(v0 + 8 * v5);
    ++v24;
    if (v25)
      goto LABEL_8;
  }
  __break(1u);
}

uint64_t sub_1005CC484()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v0 = sub_10001A9A8(&qword_1011002F0);
  v1 = swift_allocObject(v0, 72, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100E27910;
  v2 = (void *)SPBeaconTypeDurian;
  v3 = (void *)SPBeaconTypeAccessory;
  *(_QWORD *)(v1 + 32) = SPBeaconTypeDurian;
  *(_QWORD *)(v1 + 40) = v3;
  v4 = (void *)SPBeaconTypeHele;
  v5 = (void *)SPBeaconTypeSelfBeaconing;
  *(_QWORD *)(v1 + 48) = SPBeaconTypeHele;
  *(_QWORD *)(v1 + 56) = v5;
  v6 = (void *)SPBeaconTypeVirtualMeDevice;
  *(_QWORD *)(v1 + 64) = SPBeaconTypeVirtualMeDevice;
  v7 = v2;
  v8 = v3;
  v9 = v4;
  v10 = v5;
  v11 = v6;
  return v1;
}

_QWORD *sub_1005CC534(uint64_t a1, uint64_t (*a2)(char *, uint64_t, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, _QWORD, _QWORD);
  uint64_t v22;
  _QWORD *v23;

  v21 = a2;
  v22 = a3;
  v20 = sub_10001A9A8(&qword_101108FE0);
  v5 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    v18[1] = v3;
    v23 = _swiftEmptyArrayStorage;
    sub_10009B28C(0, v8, 0);
    v9 = v23;
    v19 = sub_10001A9A8((uint64_t *)&unk_101108FD0);
    v10 = *(_QWORD *)(v19 - 8);
    v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v12 = *(_QWORD *)(v10 + 72);
    do
    {
      v13 = sub_10001A9A8((uint64_t *)&unk_10110C6B0);
      v14 = *(int *)(v20 + 48);
      *(_QWORD *)&v7[v14] = v21(v7, v11, *(_QWORD *)(v11 + *(int *)(v13 + 48)), *(_QWORD *)(v11 + *(int *)(v19 + 48)));
      v23 = v9;
      v16 = v9[2];
      v15 = v9[3];
      if (v16 >= v15 >> 1)
      {
        sub_10009B28C(v15 > 1, v16 + 1, 1);
        v9 = v23;
      }
      v9[2] = v16 + 1;
      sub_100005CF0((uint64_t)v7, (uint64_t)v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v16, &qword_101108FE0);
      v11 += v12;
      --v8;
    }
    while (v8);
  }
  return v9;
}

_QWORD *sub_1005CC6CC(uint64_t a1, uint64_t (*a2)(char *, _QWORD *, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD v16[2];
  uint64_t (*v17)(char *, _QWORD *, _QWORD, _QWORD);
  uint64_t v18;
  _QWORD *v19;

  v17 = a2;
  v18 = a3;
  v5 = sub_10001A9A8(&qword_101108FE0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v16[1] = v3;
    v19 = _swiftEmptyArrayStorage;
    sub_10009B28C(0, v9, 0);
    v10 = v19;
    v11 = (_QWORD *)(a1 + 80);
    do
    {
      v12 = *(int *)(v5 + 48);
      *(_QWORD *)&v8[v12] = v17(v8, v11 - 6, *(v11 - 1), *v11);
      v19 = v10;
      v14 = v10[2];
      v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_10009B28C(v13 > 1, v14 + 1, 1);
        v10 = v19;
      }
      v10[2] = v14 + 1;
      sub_100005CF0((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, &qword_101108FE0);
      v11 += 7;
      --v9;
    }
    while (v9);
  }
  return v10;
}

uint64_t sub_1005CC820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 1;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1005CC898@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_100A836C4(v1 + v4, *(_BYTE *)(v1 + v4 + *(_QWORD *)(v3 + 64)), a1);
}

uint64_t sub_1005CC8E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_101100304);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  v3[20] = v2;
  v3[21] = v0 + 24;
  return swift_task_switch(sub_1005AEF94, 0, 0);
}

uint64_t sub_1005CC94C()
{
  uint64_t v0;

  return sub_100A82DAC(v0);
}

uint64_t sub_1005CC954(uint64_t a1)
{
  uint64_t v1;

  return sub_100C6A9AC(a1, v1);
}

uint64_t sub_1005CC95C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1005CC9BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  sub_1005B8AEC(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1005CC9FC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  v9 = v0 + v4 + v1[10];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = v0 + v4 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
    v12(v13, v10);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_1005CCB2C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(type metadata accessor for BeaconEstimatedLocation(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_100A82E24(*(_QWORD *)(v0 + 16), v0 + v2, *v3, v3[1]);
}

uint64_t sub_1005CCB84()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 64) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  v9 = v0 + v4 + v1[10];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = v0 + v4 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
    v12(v13, v10);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1005CCCA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BeaconEstimatedLocation(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + 24;
  v7 = v1 + ((v4 + 64) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_10110034C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004C28;
  return sub_1005B1C24(a1, v5, v6, v7);
}

uint64_t sub_1005CCD2C()
{
  uint64_t v0;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1005CCD5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;

  v2 = v0 + 16;
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_BYTE *)(v0 + 72);
  v6 = (_QWORD *)swift_task_alloc(dword_10110036C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100004A74;
  return sub_1005C11B0(v2, v3, v4, v5);
}

uint64_t sub_1005CCDC8()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A82E00);
}

uint64_t sub_1005CCDD4()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 32));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 72));

  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_1005CCE18()
{
  uint64_t v0;

  return sub_1005B77A0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + 32, (_QWORD *)(v0 + 72), *(void **)(v0 + 112));
}

uint64_t sub_1005CCE30()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A82760);
}

uint64_t sub_1005CCE44@<X0>(_QWORD *a1@<X8>)
{
  return sub_1005CD190(a1);
}

uint64_t sub_1005CCE5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = *(_BYTE *)(v0 + 40);
  v8 = (_QWORD *)swift_task_alloc(dword_10110038C);
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_100004A74;
  return sub_1005C24DC(v2, v3, v4, v7, v5, v6);
}

uint64_t sub_1005CCED8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1005CCF14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_BYTE *)(v0 + 32);
  v7 = (_QWORD *)swift_task_alloc(dword_10110039C);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100004A74;
  return sub_1005C2634(v2, v3, v6, v4, v5);
}

uint64_t sub_1005CCF88(uint64_t a1)
{
  uint64_t v1;

  return sub_1005C3BFC(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24)) & 1;
}

uint64_t sub_1005CCFA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(v1 + 24);
  sub_10001A9A8((uint64_t *)&unk_1011002D0);
  return sub_100C923E8(a1, v3, *(_QWORD *)(a1 + 40)) & 1;
}

id sub_1005CD040(char *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4;

  return sub_1005C3C9C(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

id sub_1005CD048(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;

  return sub_1005C441C(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t sub_1005CD050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1011002D0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v2 | 7;
  v5 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v0 + v3;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject(v0, v5 + 8, v4);
}

BOOL sub_1005CD124@<W0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  _BOOL8 result;

  v3 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1011002D0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = sub_1005C4A0C(v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
  *a1 = result;
  return result;
}

uint64_t sub_1005CD184()
{
  return sub_1005CD61C((uint64_t (*)(_QWORD, unint64_t, unint64_t, _QWORD, _QWORD))sub_1005C1D78);
}

uint64_t sub_1005CD190@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 80, v5, 0, 0);
  v3 = *(_QWORD *)(v1 + 80);
  *a1 = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_1005CD1E0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1005CD228()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100A83538(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

_QWORD *sub_1005CD268@<X0>(_QWORD *a1@<X8>)
{
  return sub_100A82E50(a1);
}

uint64_t sub_1005CD270()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1005CD29C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1011003FC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_1005B9B54(a1, v4, v5, v6);
}

uint64_t sub_1005CD308()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1005CD33C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10110040C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004A74;
  return sub_1005BB490(a1, v4, v5, v7, v6);
}

uint64_t sub_1005CD3B4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1005CD3D8(uint64_t a1)
{
  uint64_t v1;

  return sub_1008FCCAC(a1, v1);
}

uint64_t sub_1005CD3F0(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for BeaconIdentifier(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *((_QWORD *)v1 + 2);
  v7 = *((_QWORD *)v1 + 3);
  v8 = v1[4];
  v9 = *((_QWORD *)v1 + 5);
  v10 = (uint64_t)v1 + v5;
  v11 = (uint64_t)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_QWORD *)swift_task_alloc(dword_101100494);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_100004A74;
  return sub_1005BC100(v8, a1, v6, v7, v9, v10, v11);
}

uint64_t sub_1005CD4B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for BeaconIdentifier(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + *(int *)(v1 + 20), v8);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 40, v5);
}

uint64_t sub_1005CD570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 47) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v6));

  return swift_deallocObject(v0, v7 + 9, v5);
}

uint64_t sub_1005CD610()
{
  return sub_1005CD61C((uint64_t (*)(_QWORD, unint64_t, unint64_t, _QWORD, _QWORD))sub_1008DD73C);
}

uint64_t sub_1005CD61C(uint64_t (*a1)(_QWORD, unint64_t, unint64_t, _QWORD, _QWORD))
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a1(*(_QWORD *)(v1 + 16), v1 + v3, v1 + v4, *(_QWORD *)(v1 + ((v4 + 47) & 0xFFFFFFFFFFFFFFF8)), *(unsigned __int8 *)(v1 + ((v4 + 47) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1005CD694(uint64_t a1)
{
  uint64_t v1;

  return sub_100C6AB44(a1, v1);
}

uint64_t sub_1005CD6A8()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_release();

  return swift_deallocObject(v0, 73, 7);
}

uint64_t sub_1005CD6DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 64));
  return swift_deallocObject(v0, v7 + 89, v5);
}

uint64_t sub_1005CD798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_101100504);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  return sub_1005B0F20(v2, v0 + 24);
}

uint64_t sub_1005CD7F0()
{
  uint64_t v0;

  return sub_1005AEA00(v0);
}

uint64_t sub_1005CD7F8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_101100534);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_1005AEA88(v0);
}

uint64_t sub_1005CD840()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_101100544);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  v2[5] = v0;
  return swift_task_switch(sub_1005AEBC4, 0, 0);
}

uint64_t storeEnumTagSinglePayload for LocationFetchService.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1005CD8E8 + 4 * byte_100E44B25[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1005CD91C + 4 * byte_100E44B20[v4]))();
}

uint64_t sub_1005CD91C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005CD924(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005CD92CLL);
  return result;
}

uint64_t sub_1005CD938(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005CD940);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1005CD944(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005CD94C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationFetchService.Error()
{
  return &type metadata for LocationFetchService.Error;
}

unint64_t sub_1005CD96C()
{
  unint64_t result;

  result = qword_101100560;
  if (!qword_101100560)
  {
    result = swift_getWitnessTable(byte_100E44C30, &type metadata for LocationFetchService.Error);
    atomic_store(result, (unint64_t *)&qword_101100560);
  }
  return result;
}

uint64_t sub_1005CD9BC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1005CD9EC + 4 * byte_100E44CE0[*v0]))(0x746867696C666E69, 0xE800000000000000);
}

uint64_t sub_1005CD9EC()
{
  return 0x6574656C706D6F63;
}

uint64_t sub_1005CDA08()
{
  return 0x64656C696166;
}

uint64_t sub_1005CDA1C()
{
  return 0x676E69766F6D6572;
}

void sub_1005CDA30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v9;

  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for SecureLocationsSubscription(0);
  v2 = type metadata accessor for Date(0);
  v3 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x2065646F6D20;
  v5._object = (void *)0xE600000000000000;
  String.append(_:)(v5);
  v6 = 0xE900000000000065;
  v7 = 0x76697463616F7270;
  switch(*(_QWORD *)(v0 + *(int *)(v1 + 24)))
  {
    case 0:
      break;
    case 1:
      v6 = 0xE700000000000000;
      v7 = 0x776F6C6C616873;
      break;
    case 2:
      v6 = 0xE400000000000000;
      v7 = 1702259052;
      break;
    case 3:
      v6 = 0xE500000000000000;
      v7 = 0x72656E776FLL;
      break;
    case 4:
      v6 = 0xEE00657669746361;
      v7 = 0x6F725072656E776FLL;
      break;
    case 5:
      v6 = 0x8000000100ED9D40;
      v7 = 0xD000000000000013;
      break;
    default:
      v6 = 0xE700000000000000;
      v7 = 0x6E776F6E6B6E75;
      break;
  }
  v8 = v6;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x20657461747320;
  v9._object = (void *)0xE700000000000000;
  String.append(_:)(v9);
  __asm { BR              X10 }
}

uint64_t sub_1005CDC30()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v3;

  v0._countAndFlagsBits = 0x746867696C666E69;
  v0._object = (void *)0xE800000000000000;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(0xE800000000000000);
  v1._countAndFlagsBits = 93;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return v3;
}

void sub_1005CDCB8()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;

  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v1 = *v0;
  v2 = (void *)v0[1];
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x617453656D697420;
  v4._object = (void *)0xEB0000000020706DLL;
  String.append(_:)(v4);
  v5 = type metadata accessor for SecureLocationsSubscription(0);
  v6 = type metadata accessor for Date(0);
  v7 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v6, v7);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x2065646F6D20;
  v9._object = (void *)0xE600000000000000;
  String.append(_:)(v9);
  v10 = 0xE900000000000065;
  v11 = 0x76697463616F7270;
  switch(*(uint64_t *)((char *)v0 + *(int *)(v5 + 24)))
  {
    case 0:
      break;
    case 1:
      v10 = 0xE700000000000000;
      v11 = 0x776F6C6C616873;
      break;
    case 2:
      v10 = 0xE400000000000000;
      v11 = 1702259052;
      break;
    case 3:
      v10 = 0xE500000000000000;
      v11 = 0x72656E776FLL;
      break;
    case 4:
      v10 = 0xEE00657669746361;
      v11 = 0x6F725072656E776FLL;
      break;
    case 5:
      v10 = 0x8000000100ED9D40;
      v11 = 0xD000000000000013;
      break;
    default:
      v10 = 0xE700000000000000;
      v11 = 0x6E776F6E6B6E75;
      break;
  }
  v12 = v10;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x20657461747320;
  v13._object = (void *)0xE700000000000000;
  String.append(_:)(v13);
  __asm { BR              X10 }
}

uint64_t sub_1005CDEFC()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v3;

  v0._countAndFlagsBits = 0x746867696C666E69;
  v0._object = (void *)0xE800000000000000;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(0xE800000000000000);
  v1._countAndFlagsBits = 93;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return v3;
}

void sub_1005CDF8C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE v39[200];
  uint64_t v40[27];
  _BYTE v41[40];

  v37 = a5;
  v9 = type metadata accessor for Date(0);
  v35[1] = *(_QWORD *)(v9 - 8);
  v35[2] = v9;
  __chkstk_darwin(v9);
  v35[3] = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010EF1C0);
  __chkstk_darwin(v11);
  v13 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SecureLocationsSubscription(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v35[0] = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v36 = (uint64_t)v35 - v18;
  v19 = sub_1005D11D0(a2, a3, a4);
  v21 = v20;
  v22 = swift_beginAccess(a1 + 24, v41, 0, 0);
  v23 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v23 + 16))
  {
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v23);
    v24 = sub_100518DA0(v19, v21);
    if ((v25 & 1) != 0)
    {
      sub_1005D13D0(*(_QWORD *)(v23 + 56) + *(_QWORD *)(v15 + 72) * v24, (uint64_t)v13);
      v26 = 0;
    }
    else
    {
      v26 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, v26, 1, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
    {
      v33 = (uint64_t)v13;
      v34 = v36;
      sub_1005D1490(v33, v36);
      __asm { BR              X10 }
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56))(v13, 1, 1, v14, v22);
  }
  swift_bridgeObjectRelease();
  sub_1005D1450((uint64_t)v13);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v27 = type metadata accessor for Logger(0);
  sub_10001A9E8(v27, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain_n(a3, 2);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(32, -1);
    v40[0] = v32;
    *(_DWORD *)v31 = 141558275;
    v38 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v31 + 4, v31 + 12);
    *(_WORD *)(v31 + 12) = 2081;
    swift_bridgeObjectRetain(a3);
    v38 = sub_100016940(a2, (unint64_t)a3, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "subscribeAndFetch - no cached subscription for %{private,mask.hash}s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  *v37 = 1;
}

uint64_t sub_1005CE8EC(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[3];

  v40 = a1;
  v9 = sub_10001A9A8(&qword_1010EF1C0);
  __chkstk_darwin(v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for SecureLocationsSubscription(0);
  v13 = *((_QWORD *)v12 - 1);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = sub_1005D11D0(a2, a3, a4);
  v17 = v16;
  v18 = (uint64_t)v15 + v12[5];
  swift_bridgeObjectRetain(a3);
  static Date.trustedNow.getter(v18);
  v19 = objc_msgSend(a4, "subscriptionMode");
  *v15 = a2;
  v15[1] = (uint64_t)a3;
  *(uint64_t *)((char *)v15 + v12[6]) = (uint64_t)v19;
  v20 = v12[7];
  v39 = a5;
  *((_BYTE *)v15 + v20) = a5;
  v21 = (uint64_t *)((char *)v15 + v12[8]);
  *v21 = 0;
  v21[1] = 0;
  v22 = objc_msgSend(a4, "pushIdentifiers", swift_bridgeObjectRetain(a3).n128_f64[0]);
  v23 = sub_10001A9A8(&qword_1011063B0);
  v24 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v22, &type metadata for String, v23, &protocol witness table for String);

  if (*(_QWORD *)(v24 + 16) && (v25 = sub_100518DA0(a2, (uint64_t)a3), (v26 & 1) != 0))
  {
    v27 = *(_QWORD **)(*(_QWORD *)(v24 + 56) + 8 * v25);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v27[2])
    {
      v29 = v27[4];
      v28 = v27[5];
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRelease();
      *v21 = v29;
      v21[1] = v28;
      goto LABEL_7;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_7:
  v30 = v40;
  v31 = v41;
  sub_1005D13D0((uint64_t)v15, (uint64_t)v11);
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v13 + 56))(v11, 0, 1, v12);
  swift_beginAccess(v30 + 24, v43, 33, 0);
  swift_bridgeObjectRetain(v17);
  sub_1000FFC24((uint64_t)v11, v31, v17);
  swift_endAccess(v43);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v32 = type metadata accessor for Logger(0);
  sub_10001A9E8(v32, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain(v17);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v36 = swift_slowAlloc(22, -1);
    v43[0] = swift_slowAlloc(64, -1);
    *(_DWORD *)v36 = 136315394;
    swift_bridgeObjectRetain(v17);
    v42 = sub_100016940(v31, v17, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease_n(v17, 3);
    *(_WORD *)(v36 + 12) = 2080;
    __asm { BR              X10 }
  }

  swift_bridgeObjectRelease_n(v17, 2);
  return sub_1005D1414((uint64_t)v15);
}

void sub_1005CED58(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[3];

  v8 = sub_10001A9A8(&qword_1010EF1C0);
  __chkstk_darwin(v8);
  v10 = (char *)&v21[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1005D11D0(a2, a3, a4);
  v13 = v12;
  swift_beginAccess(a1 + 24, v21, 33, 0);
  sub_100103E0C(v11, v13, (uint64_t)v10);
  sub_1005D1450((uint64_t)v10);
  swift_endAccess(v21);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v14 = type metadata accessor for Logger(0);
  sub_10001A9E8(v14, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain(v13);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v21[0] = v19;
    *(_DWORD *)v18 = 136315138;
    swift_bridgeObjectRetain(v13);
    v20 = sub_100016940(v11, v13, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease_n(v13, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "SubscribeAndFetch - removed subscription %s", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v13, 2);
  }
}

uint64_t sub_1005CEF80@<X0>(id a1@<X3>, uint64_t a2@<X0>, uint64_t a3@<X1>, void *a4@<X2>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[24];

  v7 = sub_1005D11D0(a3, a4, a1);
  v9 = v8;
  swift_beginAccess(a2 + 24, v20, 0, 0);
  v10 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(v10 + 16))
  {
    swift_bridgeObjectRetain(v10);
    v11 = sub_100518DA0(v7, v9);
    if ((v12 & 1) != 0)
    {
      v13 = v11;
      v14 = *(_QWORD *)(v10 + 56);
      v15 = type metadata accessor for SecureLocationsSubscription(0);
      v16 = *(_QWORD *)(v15 - 8);
      sub_1005D13D0(v14 + *(_QWORD *)(v16 + 72) * v13, a5);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(a5, 0, 1, v15);
    }
    else
    {
      v18 = type metadata accessor for SecureLocationsSubscription(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a5, 1, 1, v18);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = type metadata accessor for SecureLocationsSubscription(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a5, 1, 1, v17);
  }
  return swift_bridgeObjectRelease();
}

void sub_1005CF0B8(uint64_t a1@<X0>, unsigned __int8 *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  int64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[3];
  char v67[24];
  unsigned __int8 v68;

  v59 = a2;
  v64 = type metadata accessor for SecureLocationsSubscription(0);
  v62 = *(_QWORD *)(v64 - 8);
  v3 = __chkstk_darwin(v64);
  v58 = (uint64_t)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v57 = (uint64_t *)((char *)&v55 - v6);
  __chkstk_darwin(v5);
  v8 = (char *)&v55 - v7;
  v9 = sub_10001A9A8(&qword_101100760);
  v10 = __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v14 = (uint64_t *)((char *)&v55 - v13);
  v68 = 0;
  swift_beginAccess(a1 + 24, v67, 0, 0);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(v15 + 64);
  v60 = v15 + 64;
  v17 = 1 << *(_BYTE *)(v15 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v61 = (unint64_t)(v17 + 63) >> 6;
  v56 = v61 - 1;
  v63 = v15;
  swift_bridgeObjectRetain(v15);
  v20 = 0;
  if (!v19)
    goto LABEL_6;
LABEL_4:
  v21 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v22 = v21 | (v20 << 6);
LABEL_5:
  v23 = *(_QWORD *)(v63 + 56);
  v24 = (_QWORD *)(*(_QWORD *)(v63 + 48) + 16 * v22);
  v25 = v24[1];
  *v12 = *v24;
  v12[1] = v25;
  v26 = v23 + *(_QWORD *)(v62 + 72) * v22;
  v27 = sub_10001A9A8(&qword_101100768);
  sub_1005D13D0(v26, (uint64_t)v12 + *(int *)(v27 + 48));
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v12, 0, 1, v27);
  swift_bridgeObjectRetain(v25);
  while (1)
  {
    sub_100005CF0((uint64_t)v12, (uint64_t)v14, &qword_101100760);
    v32 = sub_10001A9A8(&qword_101100768);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v14, 1, v32) == 1)
    {
      swift_release();
      goto LABEL_35;
    }
    v34 = *v14;
    v33 = v14[1];
    sub_1005D1490((uint64_t)v14 + *(int *)(v32 + 48), (uint64_t)v8);
    if (*(_QWORD *)&v8[*(int *)(v64 + 24)] == 1)
    {
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v35 = type metadata accessor for Logger(0);
      sub_10001A9E8(v35, (uint64_t)qword_1011B7A18);
      v36 = v57;
      sub_1005D13D0((uint64_t)v8, (uint64_t)v57);
      v37 = v58;
      sub_1005D13D0((uint64_t)v8, v58);
      swift_bridgeObjectRetain(v33);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.default.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = swift_slowAlloc(52, -1);
        v42 = swift_slowAlloc(96, -1);
        v64 = v42;
        *(_DWORD *)v41 = 141559043;
        v65 = 1752392040;
        v66[0] = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v41 + 4, v41 + 12);
        *(_WORD *)(v41 + 12) = 2081;
        swift_bridgeObjectRetain(v33);
        v65 = sub_100016940(v34, v33, v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v41 + 14, v41 + 22);
        swift_bridgeObjectRelease_n(v33, 3);
        *(_WORD *)(v41 + 22) = 2160;
        v65 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v41 + 24, v41 + 32);
        *(_WORD *)(v41 + 32) = 2081;
        v43 = *v36;
        v44 = v36[1];
        swift_bridgeObjectRetain(v44);
        v65 = sub_100016940(v43, v44, v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v41 + 34, v41 + 42);
        swift_bridgeObjectRelease();
        sub_1005D1414((uint64_t)v36);
        *(_WORD *)(v41 + 42) = 2082;
        v45 = v58;
        sub_1005CDA30();
        v65 = sub_100016940(v46, v47, v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v41 + 44, v41 + 52);
        swift_bridgeObjectRelease();
        sub_1005D1414(v45);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "SubscribeAndFetch - Found an active shallow subscription with key %{private,mask.hash}s -> %{private,mask.hash}s  %{public}s", (uint8_t *)v41, 0x34u);
        v48 = v64;
        swift_arrayDestroy(v64, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v41, -1, -1);

      }
      else
      {

        sub_1005D1414(v37);
        sub_1005D1414((uint64_t)v36);
        swift_bridgeObjectRelease_n(v33, 2);
      }
      sub_1005D1414((uint64_t)v8);
      swift_release();
      v68 = 1;
LABEL_35:
      if (qword_1010EA098 != -1)
        goto LABEL_40;
      goto LABEL_36;
    }
    sub_1005D1414((uint64_t)v8);
    swift_bridgeObjectRelease();
    if (v19)
      goto LABEL_4;
LABEL_6:
    v28 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v28 < v61)
    {
      v29 = *(_QWORD *)(v60 + 8 * v28);
      if (v29)
        goto LABEL_9;
      v30 = v20 + 2;
      ++v20;
      if (v28 + 1 < v61)
      {
        v29 = *(_QWORD *)(v60 + 8 * v30);
        if (v29)
          goto LABEL_12;
        v20 = v28 + 1;
        if (v28 + 2 < v61)
        {
          v29 = *(_QWORD *)(v60 + 8 * (v28 + 2));
          if (v29)
          {
            v28 += 2;
            goto LABEL_9;
          }
          v30 = v28 + 3;
          v20 = v28 + 2;
          if (v28 + 3 < v61)
          {
            v29 = *(_QWORD *)(v60 + 8 * v30);
            if (!v29)
            {
              while (1)
              {
                v28 = v30 + 1;
                if (__OFADD__(v30, 1))
                  break;
                if (v28 >= v61)
                {
                  v20 = v56;
                  goto LABEL_23;
                }
                v29 = *(_QWORD *)(v60 + 8 * v28);
                ++v30;
                if (v29)
                  goto LABEL_9;
              }
              __break(1u);
              return;
            }
LABEL_12:
            v28 = v30;
LABEL_9:
            v19 = (v29 - 1) & v29;
            v22 = __clz(__rbit64(v29)) + (v28 << 6);
            v20 = v28;
            goto LABEL_5;
          }
        }
      }
    }
LABEL_23:
    v31 = sub_10001A9A8(&qword_101100768);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v12, 1, 1, v31);
    v19 = 0;
  }
  __break(1u);
LABEL_40:
  swift_once(&qword_1010EA098, sub_10098F7D8);
LABEL_36:
  v49 = type metadata accessor for Logger(0);
  v50 = sub_10001A9E8(v49, (uint64_t)qword_1011B7A18);
  v51 = v68;
  v52 = Logger.logObject.getter(v50);
  v53 = static os_log_type_t.default.getter(v52);
  if (os_log_type_enabled(v52, v53))
  {
    v54 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v54 = 67109120;
    LODWORD(v66[0]) = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v66, (char *)v66 + 4, v54 + 4, v54 + 8);
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "SubscribeAndFetch - hasActiveShallowSubscriptions %{BOOL}d", v54, 8u);
    swift_slowDealloc(v54, -1, -1);
  }

  swift_beginAccess(&v68, v66, 0, 0);
  *v59 = v68;
}

uint64_t sub_1005CF7D0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t result;
  _QWORD v14[6];

  v4 = v3;
  v8 = *(NSObject **)(v4 + 16);
  v9 = (_QWORD *)swift_allocObject(&unk_101081940, 48, 7);
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = v4;
  v10 = swift_allocObject(&unk_101081968, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_1005D1508;
  *(_QWORD *)(v10 + 24) = v9;
  v14[4] = sub_10001D850;
  v14[5] = v10;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_10001D8B8;
  v14[3] = &unk_101081980;
  v11 = _Block_copy(v14);
  swift_bridgeObjectRetain(a2);
  v12 = a3;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v11);
  _Block_release(v11);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v10, "", 120, 173, 35, 1);
  swift_release();
  result = swift_release();
  if ((v8 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1005CF91C(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  const char *v33;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[3];

  v40 = a4;
  v7 = sub_10001A9A8(&qword_1010EF1C0);
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for SecureLocationsSubscription(0);
  v39 = *((_QWORD *)v10 - 1);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain_n(a2, 2);
  v15 = a3;
  v38 = v14;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  v18 = &selRef_connectedServicesChanged_;
  if (os_log_type_enabled(v16, v17))
  {
    v36 = v9;
    v19 = swift_slowAlloc(32, -1);
    v20 = swift_slowAlloc(64, -1);
    v35 = v20;
    *(_DWORD *)v19 = 141558531;
    v41 = 1752392040;
    v42[0] = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    swift_bridgeObjectRetain(a2);
    v37 = a1;
    v41 = sub_100016940(a1, a2, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v19 + 22) = 2082;
    v21 = objc_msgSend(v15, "subscriptionMode");
    v22 = 0xE900000000000065;
    v23 = 0x76697463616F7270;
    switch((unint64_t)v21)
    {
      case 0uLL:
        break;
      case 1uLL:
        v22 = 0xE700000000000000;
        v23 = 0x776F6C6C616873;
        break;
      case 2uLL:
        v22 = 0xE400000000000000;
        v23 = 1702259052;
        break;
      case 3uLL:
        v22 = 0xE500000000000000;
        v23 = 0x72656E776FLL;
        break;
      case 4uLL:
        v22 = 0xEE00657669746361;
        v23 = 0x6F725072656E776FLL;
        break;
      case 5uLL:
        v22 = 0x8000000100ED9D40;
        v23 = 0xD000000000000013;
        break;
      default:
        v22 = 0xE700000000000000;
        v23 = 0x6E776F6E6B6E75;
        break;
    }
    v41 = sub_100016940(v23, v22, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v19 + 24, v19 + 32);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "SubscribeAndFetch - adding pending key subscription %{private,mask.hash}s in mode %{public}s", (uint8_t *)v19, 0x20u);
    v24 = v35;
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    v9 = v36;
    a1 = v37;
    v18 = &selRef_connectedServicesChanged_;
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v25 = (uint64_t)v12 + v10[5];
  swift_bridgeObjectRetain(a2);
  static Date.trustedNow.getter(v25);
  v26 = objc_msgSend(v15, v18[460]);
  *v12 = a1;
  v12[1] = a2;
  *(uint64_t *)((char *)v12 + v10[6]) = (uint64_t)v26;
  *((_BYTE *)v12 + v10[7]) = 0;
  v27 = (uint64_t *)((char *)v12 + v10[8]);
  *v27 = 0;
  v27[1] = 0;
  v28 = objc_msgSend(v15, v18[460]);
  switch((unint64_t)v28)
  {
    case 0uLL:
    case 5uLL:
      sub_1005D13D0((uint64_t)v12, (uint64_t)v9);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v39 + 56))(v9, 0, 1, v10);
      v29 = v40 + 32;
      goto LABEL_16;
    case 1uLL:
      sub_1005D13D0((uint64_t)v12, (uint64_t)v9);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v39 + 56))(v9, 0, 1, v10);
      v29 = v40 + 40;
LABEL_16:
      swift_beginAccess(v29, v42, 33, 0);
      swift_bridgeObjectRetain(a2);
      sub_1000FFC24((uint64_t)v9, a1, a2);
      swift_endAccess(v42);
      return sub_1005D1414((uint64_t)v12);
    case 2uLL:
      v30 = Logger.logObject.getter(v28);
      v31 = static os_log_type_t.error.getter(v30);
      if (!os_log_type_enabled(v30, v31))
        goto LABEL_22;
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      v33 = "SubscribeAndFetch - key request in live - we don't currently do this. This is an anomaly";
      break;
    default:
      v30 = Logger.logObject.getter(v28);
      v31 = static os_log_type_t.error.getter(v30);
      if (!os_log_type_enabled(v30, v31))
        goto LABEL_22;
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      v33 = "SubscribeAndFetch unknown mode specified";
      break;
  }
  _os_log_impl((void *)&_mh_execute_header, v30, v31, v33, v32, 2u);
  swift_slowDealloc(v32, -1, -1);
LABEL_22:

  return sub_1005D1414((uint64_t)v12);
}

uint64_t sub_1005CFE7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  char *v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  double v68;
  unint64_t v69;
  double v70;
  uint64_t result;
  char v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97[3];

  v92 = a4;
  v90 = a2;
  v91 = a5;
  v7 = type metadata accessor for Date(0);
  v86 = *(_QWORD *)(v7 - 8);
  v87 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SecureLocationsSubscription(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v88 = (uint64_t)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010EF1C0);
  v14 = __chkstk_darwin(v13);
  v85 = (uint64_t)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v84 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v84 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v84 - v23;
  __chkstk_darwin(v22);
  v25 = *(void (**)(void))(v11 + 56);
  v93 = (char *)&v84 - v26;
  v25();
  v89 = a1;
  if (a1 != 5)
  {
    if (a1 == 1)
    {
      v37 = v90;
      v38 = swift_beginAccess(v90 + 40, v97, 0, 0);
      v39 = *(_QWORD *)(v37 + 40);
      if (*(_QWORD *)(v39 + 16))
      {
        v40 = v92;
        swift_bridgeObjectRetain(v92);
        swift_bridgeObjectRetain(v39);
        v41 = sub_100518DA0(a3, v40);
        if ((v42 & 1) != 0)
        {
          sub_1005D13D0(*(_QWORD *)(v39 + 56) + *(_QWORD *)(v11 + 72) * v41, (uint64_t)v21);
          v43 = v21;
          v44 = 0;
        }
        else
        {
          v43 = v21;
          v44 = 1;
        }
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v25)(v43, v44, 1, v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v25)(v21, 1, 1, v10, v38);
      }
      v24 = v21;
      goto LABEL_22;
    }
    if (a1)
    {
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v45 = type metadata accessor for Logger(0);
      v46 = sub_10001A9E8(v45, (uint64_t)qword_1011B7A18);
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.error.getter(v47);
      v49 = os_log_type_enabled(v47, v48);
      v50 = v93;
      if (v49)
      {
        v51 = (uint8_t *)swift_slowAlloc(12, -1);
        v52 = swift_slowAlloc(32, -1);
        v97[0] = v52;
        *(_DWORD *)v51 = 136446210;
        v53 = 0x76697463616F7270;
        v54 = 0xE900000000000065;
        switch(v89)
        {
          case 0:
            break;
          case 2:
            v54 = 0xE400000000000000;
            v53 = 1702259052;
            break;
          case 3:
            v54 = 0xE500000000000000;
            v53 = 0x72656E776FLL;
            break;
          case 4:
            v53 = 0x6F725072656E776FLL;
            v54 = 0xEE00657669746361;
            break;
          case 5:
            v54 = 0x8000000100ED9D40;
            v53 = 0xD000000000000013;
            break;
          default:
            v54 = 0xE700000000000000;
            v53 = 0x6E776F6E6B6E75;
            break;
        }
        v94 = sub_100016940(v53, v54, v97);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v51 + 4, v51 + 12);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "SubscribeAndFetch hasPendingSubscription - unexpected subscription mode %{public}s", v51, 0xCu);
        swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1, -1);
        swift_slowDealloc(v51, -1, -1);
      }

      v81 = (uint64_t)v50;
      goto LABEL_68;
    }
  }
  v27 = v90;
  v28 = swift_beginAccess(v90 + 32, v97, 0, 0);
  v29 = *(_QWORD *)(v27 + 32);
  if (*(_QWORD *)(v29 + 16))
  {
    v30 = a3;
    v31 = v92;
    swift_bridgeObjectRetain(v92);
    swift_bridgeObjectRetain(v29);
    v84 = v30;
    v32 = sub_100518DA0(v30, v31);
    v33 = (uint64_t)v93;
    if ((v34 & 1) != 0)
    {
      sub_1005D13D0(*(_QWORD *)(v29 + 56) + *(_QWORD *)(v11 + 72) * v32, (uint64_t)v24);
      v35 = v24;
      v36 = 0;
    }
    else
    {
      v35 = v24;
      v36 = 1;
    }
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v25)(v35, v36, 1, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a3 = v84;
    goto LABEL_23;
  }
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v25)(v24, 1, 1, v10, v28);
LABEL_22:
  v33 = (uint64_t)v93;
LABEL_23:
  sub_1005D1450(v33);
  sub_100005CF0((uint64_t)v24, v33, &qword_1010EF1C0);
  sub_1005D1524(v33, (uint64_t)v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v18, 1, v10) == 1)
  {
    sub_1005D1450((uint64_t)v18);
    v55 = v92;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v56 = type metadata accessor for Logger(0);
    sub_10001A9E8(v56, (uint64_t)qword_1011B7A18);
    swift_bridgeObjectRetain_n(v55, 2);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.default.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      v60 = swift_slowAlloc(32, -1);
      v61 = swift_slowAlloc(64, -1);
      v94 = v61;
      *(_DWORD *)v60 = 136446723;
      v62 = 0x76697463616F7270;
      v63 = 0xE900000000000065;
      switch(v89)
      {
        case 0:
          break;
        case 1:
          v63 = 0xE700000000000000;
          v62 = 0x776F6C6C616873;
          break;
        case 2:
          v63 = 0xE400000000000000;
          v62 = 1702259052;
          break;
        case 3:
          v63 = 0xE500000000000000;
          v62 = 0x72656E776FLL;
          break;
        case 4:
          v62 = 0x6F725072656E776FLL;
          v63 = 0xEE00657669746361;
          break;
        case 5:
          v63 = 0x8000000100ED9D40;
          v62 = 0xD000000000000013;
          break;
        default:
          v63 = 0xE700000000000000;
          v62 = 0x6E776F6E6B6E75;
          break;
      }
      v96 = sub_100016940(v62, v63, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v60 + 4, v60 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v60 + 12) = 2160;
      v96 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v60 + 14, v60 + 22);
      *(_WORD *)(v60 + 22) = 2081;
      swift_bridgeObjectRetain(v55);
      v96 = sub_100016940(a3, v55, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v60 + 24, v60 + 32);
      swift_bridgeObjectRelease_n(v55, 3);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "SubscribeAndFetch - no pendingKeyRequest in %{public}s for %{private,mask.hash}s", (uint8_t *)v60, 0x20u);
      swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v60, -1, -1);

      v81 = (uint64_t)v93;
      goto LABEL_68;
    }
    swift_bridgeObjectRelease_n(v55, 2);

  }
  else
  {
    v64 = v88;
    sub_1005D1490((uint64_t)v18, v88);
    v65 = static Date.trustedNow.getter((uint64_t)v9);
    v66 = Date.timeIntervalSince1970.getter(v65);
    v67 = (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v9, v87);
    v68 = v66 - Date.timeIntervalSince1970.getter(v67);
    v69 = v92;
    switch(*(_QWORD *)(v64 + *(int *)(v10 + 24)))
    {
      case 0:
        v70 = 86400.0;
        goto LABEL_36;
      case 1:
        v70 = 240.0;
        goto LABEL_36;
      case 2:
      case 3:
        v70 = 120.0;
LABEL_36:
        if (v68 > v70)
          goto LABEL_37;
        goto LABEL_33;
      default:
        if (v68 <= 0.0)
        {
LABEL_33:
          sub_1005D1414(v64);
          result = sub_1005D1450(v33);
          v72 = 1;
          goto LABEL_69;
        }
LABEL_37:
        if (qword_1010EA098 != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v73 = type metadata accessor for Logger(0);
        sub_10001A9E8(v73, (uint64_t)qword_1011B7A18);
        swift_bridgeObjectRetain_n(v69, 2);
        v75 = Logger.logObject.getter(v74);
        v76 = static os_log_type_t.default.getter(v75);
        if (os_log_type_enabled(v75, v76))
        {
          v77 = swift_slowAlloc(32, -1);
          v78 = swift_slowAlloc(64, -1);
          v94 = v78;
          *(_DWORD *)v77 = 136446723;
          v79 = 0x76697463616F7270;
          v80 = 0xE900000000000065;
          switch(v89)
          {
            case 0:
              break;
            case 1:
              v80 = 0xE700000000000000;
              v79 = 0x776F6C6C616873;
              break;
            case 2:
              v80 = 0xE400000000000000;
              v79 = 1702259052;
              break;
            case 3:
              v80 = 0xE500000000000000;
              v79 = 0x72656E776FLL;
              break;
            case 4:
              v79 = 0x6F725072656E776FLL;
              v80 = 0xEE00657669746361;
              break;
            case 5:
              v80 = 0x8000000100ED9D40;
              v79 = 0xD000000000000013;
              break;
            default:
              v80 = 0xE700000000000000;
              v79 = 0x6E776F6E6B6E75;
              break;
          }
          v96 = sub_100016940(v79, v80, &v94);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v77 + 4, v77 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v77 + 12) = 2160;
          v96 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v77 + 14, v77 + 22);
          *(_WORD *)(v77 + 22) = 2081;
          swift_bridgeObjectRetain(v69);
          v96 = sub_100016940(a3, v69, &v94);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v77 + 24, v77 + 32);
          swift_bridgeObjectRelease_n(v69, 3);
          _os_log_impl((void *)&_mh_execute_header, v75, v76, "SubscribeAndFetch - pendingKeyRequest in %{public}s for %{private,mask.hash}s is outside of expirationWindow - removing it", (uint8_t *)v77, 0x20u);
          swift_arrayDestroy(v78, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v78, -1, -1);
          swift_slowDealloc(v77, -1, -1);

          v33 = (uint64_t)v93;
          v64 = v88;
        }
        else
        {

          swift_bridgeObjectRelease_n(v69, 2);
        }
        if (v89 == 1)
        {
          v82 = v90 + 40;
        }
        else
        {
          if (v89)
            goto LABEL_66;
          v82 = v90 + 32;
        }
        swift_beginAccess(v82, &v94, 33, 0);
        v83 = v85;
        sub_100103E0C(a3, v69, v85);
        sub_1005D1450(v83);
        swift_endAccess(&v94);
LABEL_66:
        sub_1005D1414(v64);
        break;
    }
  }
  v81 = v33;
LABEL_68:
  result = sub_1005D1450(v81);
  v72 = 0;
LABEL_69:
  *v91 = v72;
  return result;
}

uint64_t sub_1005D0A04()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for SecureLocationsSubscriptionManager()
{
  return objc_opt_self(_TtC12searchpartyd34SecureLocationsSubscriptionManager);
}

_QWORD *sub_1005D0A60(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v13 = a3[7];
    *(_QWORD *)((char *)v4 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
    *((_BYTE *)v4 + v13) = *((_BYTE *)a2 + v13);
    v14 = a3[8];
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain(v17);
  }
  return v4;
}

uint64_t sub_1005D0B38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 32) + 8));
}

_QWORD *sub_1005D0B98(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  v13 = a3[8];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_bridgeObjectRetain(v16);
  return a1;
}

_QWORD *sub_1005D0C44(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v12 = a3[8];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

_OWORD *sub_1005D0D0C(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  return a1;
}

_QWORD *sub_1005D0D98(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  v13 = a3[8];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t sub_1005D0E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005D0E48);
}

uint64_t sub_1005D0E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1005D0EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005D0ED0);
}

uint64_t sub_1005D0ED0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SecureLocationsSubscription(uint64_t a1)
{
  uint64_t result;

  result = qword_101100718;
  if (!qword_101100718)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecureLocationsSubscription);
  return result;
}

uint64_t sub_1005D0F80(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_100E44DB0;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_100E44DC8;
    v4[4] = &unk_100E44DE0;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_1005D1014()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v18;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001F6FC();
  v12 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v8);
  static DispatchQoS.unspecified.getter(v12);
  v18 = _swiftEmptyArrayStorage;
  v13 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v15 = sub_10001F738();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v2, v13);
  v1[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000031, 0x8000000100EDC830, v7, v4, v11, 0);
  v1[3] = _swiftEmptyDictionarySingleton;
  v1[4] = _swiftEmptyDictionarySingleton;
  v1[5] = _swiftEmptyDictionarySingleton;
  return v1;
}

uint64_t sub_1005D11D0(uint64_t a1, void *a2, id a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;

  v6 = objc_msgSend(a3, "clientApp");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  swift_bridgeObjectRetain(v9);
  v10._countAndFlagsBits = 12079;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11 = v7;
  v12 = v9;
  v13 = objc_msgSend(a3, "subscriptionMode");
  v14 = (void *)0xE900000000000065;
  v15 = 0x76697463616F7270;
  switch((unint64_t)v13)
  {
    case 0uLL:
      break;
    case 1uLL:
      v14 = (void *)0xE700000000000000;
      v15 = 0x776F6C6C616873;
      break;
    case 2uLL:
      v14 = (void *)0xE400000000000000;
      v15 = 1702259052;
      break;
    case 3uLL:
      v14 = (void *)0xE500000000000000;
      v15 = 0x72656E776FLL;
      break;
    case 4uLL:
      v14 = (void *)0xEE00657669746361;
      v15 = 0x6F725072656E776FLL;
      break;
    case 5uLL:
      v14 = (void *)0x8000000100ED9D40;
      v15 = 0xD000000000000013;
      break;
    default:
      v14 = (void *)0xE700000000000000;
      v15 = 0x6E776F6E6B6E75;
      break;
  }
  swift_bridgeObjectRetain(v12);
  v16._countAndFlagsBits = v15;
  v16._object = v14;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRetain(v12);
  v17._countAndFlagsBits = 12079;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRetain(v12);
  v18._countAndFlagsBits = a1;
  v18._object = a2;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1005D13D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SecureLocationsSubscription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005D1414(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SecureLocationsSubscription(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1005D1450(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010EF1C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1005D1490(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SecureLocationsSubscription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005D14D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1005D1508()
{
  uint64_t v0;

  return sub_1005CF91C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1005D1514()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005D1524(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010EF1C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsSubscriptionRequestState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1005D15B8 + 4 * byte_100E44D2F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1005D15EC + 4 * byte_100E44D2A[v4]))();
}

uint64_t sub_1005D15EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005D15F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005D15FCLL);
  return result;
}

uint64_t sub_1005D1608(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005D1610);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1005D1614(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005D161C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsSubscriptionRequestState()
{
  return &type metadata for SecureLocationsSubscriptionRequestState;
}

unint64_t sub_1005D163C()
{
  unint64_t result;

  result = qword_101100770;
  if (!qword_101100770)
  {
    result = swift_getWitnessTable(byte_100E44ED8, &type metadata for SecureLocationsSubscriptionRequestState);
    atomic_store(result, (unint64_t *)&qword_101100770);
  }
  return result;
}

uint64_t sub_1005D1680(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD aBlock[7];

  v67 = a1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v69 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v68 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SharedBeaconRecord(0);
  v65 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v66 = v11;
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64);
  v15 = __chkstk_darwin(v13);
  v16 = __chkstk_darwin(v15);
  v20 = (char *)&v54 - v19;
  if (!*(_QWORD *)(a2 + 16))
  {
    __break(1u);
    goto LABEL_5;
  }
  v56 = v18;
  v57 = v12;
  v58 = v17;
  v59 = v2;
  v60 = v16;
  v61 = v8;
  v62 = v7;
  v63 = v5;
  v64 = v4;
  v21 = type metadata accessor for CryptoKeys(0);
  v22 = DateInterval.start.getter(v21);
  LODWORD(v55) = static os_log_type_t.default.getter(v22);
  if (qword_1010EA250 != -1)
LABEL_5:
    swift_once(&qword_1010EA250, sub_100B5D964);
  v23 = qword_1011B7D30;
  v24 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v25 = swift_allocObject(v24, 112, 7);
  *(_OWORD *)(v25 + 16) = xmmword_100E22B10;
  v26 = v67;
  v27 = UUID.uuidString.getter(v25);
  v29 = v28;
  *(_QWORD *)(v25 + 56) = &type metadata for String;
  v30 = sub_10001AA00();
  *(_QWORD *)(v25 + 64) = v30;
  *(_QWORD *)(v25 + 32) = v27;
  *(_QWORD *)(v25 + 40) = v29;
  v31 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v32 = v60;
  v33 = dispatch thunk of CustomStringConvertible.description.getter(v60, v31);
  *(_QWORD *)(v25 + 96) = &type metadata for String;
  *(_QWORD *)(v25 + 104) = v30;
  *(_QWORD *)(v25 + 72) = v33;
  *(_QWORD *)(v25 + 80) = v34;
  os_log(_:dso:log:_:_:)(v55, &_mh_execute_header, v23, "CryptoKeyStreamInspector scanning key batch for identifier: %@ firstDate: %@", 76, 2, v25);
  swift_bridgeObjectRelease();
  v35 = v59;
  v55 = *(_QWORD *)(v59 + 24);
  v36 = (uint64_t)v57;
  sub_10005972C(v26, (uint64_t)v57, type metadata accessor for SharedBeaconRecord);
  v37 = v58;
  v38 = v56;
  (*(void (**)(uint64_t, char *, uint64_t))(v58 + 16))(v56, v20, v32);
  v39 = *(unsigned __int8 *)(v65 + 80);
  v40 = (v39 + 24) & ~v39;
  v41 = *(unsigned __int8 *)(v37 + 80);
  v42 = (v66 + v41 + v40) & ~v41;
  v43 = swift_allocObject(&unk_101081AA0, v42 + v14, v39 | v41 | 7);
  *(_QWORD *)(v43 + 16) = v35;
  sub_1003DE8F0(v36, v43 + v40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v43 + v42, v38, v32);
  aBlock[4] = sub_1005D408C;
  aBlock[5] = v43;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101081AB8;
  v44 = _Block_copy(aBlock);
  v45 = swift_retain();
  v46 = v68;
  static DispatchQoS.unspecified.getter(v45);
  v70 = _swiftEmptyArrayStorage;
  v47 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v48 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v49 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v50 = v62;
  v51 = v48;
  v52 = v64;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v70, v51, v49, v64, v47);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v50, v44);
  _Block_release(v44);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v50, v52);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v46, v61);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v32);
  return swift_release();
}

uint64_t sub_1005D1AF8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  _QWORD *v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[3];
  char v72[32];

  v68 = a3;
  v67 = type metadata accessor for CryptoKeyStreamInspector.Event(0);
  __chkstk_darwin(v67);
  v66 = (uint64_t)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SharedBeaconRecord(0);
  v62 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v64 = v7;
  v65 = (uint64_t)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v8);
  v59 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_101100918);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_10001A9A8(&qword_101100920);
  v61 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v60 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(int *)(v6 + 20);
  v69 = a2;
  v20 = a2 + v19;
  swift_beginAccess(a1 + 4, v72, 0, 0);
  if (!*(_QWORD *)(a1[4] + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain(a1[4]);
  sub_100003FB0(v20);
  if ((v21 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    v53 = sub_10001A9A8(&qword_101100928);
    swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
    v22 = PassthroughSubject.init()();
    v58 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    v55 = v18;
    v57 = v20;
    v58(v18, v20, v15);
    swift_beginAccess(a1 + 4, v71, 33, 0);
    swift_retain_n(v22, 2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1[4]);
    v70 = a1[4];
    a1[4] = 0x8000000000000000;
    v54 = v22;
    sub_10010D79C(v22, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
    a1[4] = v70;
    swift_bridgeObjectRelease();
    v56 = *(void (**)(char *, uint64_t))(v16 + 8);
    v56(v18, v15);
    swift_endAccess(v71);
    v71[0] = v22;
    v24 = &v13[*(int *)(sub_10001A9A8(&qword_101100930) + 48)];
    v25 = v13;
    v26 = (void *)a1[3];
    *v25 = v26;
    v27 = (char *)a1 + OBJC_IVAR____TtC12searchpartyd24CryptoKeyStreamInspector_delay;
    v28 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v24, v27, v28);
    v29 = v11;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v25, enum case for Publishers.TimeGroupingStrategy.byTime<A>(_:), v10);
    v30 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v31 = (uint64_t)v59;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v59, 1, 1, v30);
    v32 = sub_10001F6FC();
    v33 = sub_1000193A4(&qword_101100938, &qword_101100928, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v34 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    v52 = v15;
    v35 = v34;
    v36 = v26;
    v37 = v60;
    Publisher.collect<A>(_:options:)(v25, v31, v53, v32, v33, v35);
    sub_100004048(v31, &qword_1010EECC8);
    (*(void (**)(_QWORD *, uint64_t))(v29 + 8))(v25, v10);
    swift_release();
    v38 = v65;
    sub_10005972C(v69, v65, type metadata accessor for SharedBeaconRecord);
    v39 = *(unsigned __int8 *)(v62 + 80);
    v40 = (v39 + 24) & ~v39;
    v41 = swift_allocObject(&unk_101081AF0, v40 + v64, v39 | 7);
    *(_QWORD *)(v41 + 16) = a1;
    sub_1003DE8F0(v38, v41 + v40);
    v42 = sub_1000193A4(&qword_101100940, &qword_101100920, (const char *)&protocol conformance descriptor for Publishers.CollectByTime<A, B>);
    swift_retain();
    v43 = v63;
    v44 = Publisher<>.sink(receiveValue:)(sub_1005D4288, v41, v63, v42);
    swift_release();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v37, v43);
    v45 = (uint64_t)v55;
    v46 = v52;
    v58(v55, v57, v52);
    swift_beginAccess(a1 + 5, v71, 33, 0);
    swift_retain();
    v47 = swift_isUniquelyReferenced_nonNull_native(a1[5]);
    v70 = a1[5];
    a1[5] = 0x8000000000000000;
    sub_10010D780(v44, v45, v47);
    a1[5] = v70;
    swift_bridgeObjectRelease();
    v56((char *)v45, v46);
    swift_endAccess(v71);
    swift_release();
    goto LABEL_6;
  }
  swift_retain();
  swift_bridgeObjectRelease();
LABEL_6:
  v48 = v66;
  sub_10005972C(v69, v66, type metadata accessor for SharedBeaconRecord);
  v49 = v48 + *(int *)(v67 + 20);
  v50 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v49, v68, v50);
  PassthroughSubject.send(_:)(v48);
  swift_release();
  return sub_1000126B0(v48, type metadata accessor for CryptoKeyStreamInspector.Event);
}

uint64_t sub_1005D2104(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];

  v40 = a3;
  v41 = a2;
  v4 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for CryptoKeyStreamInspector.Event(0);
  v7 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v10);
  v37 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v39 = (char *)&v33 - v17;
  v18 = *a1;
  v19 = *(_QWORD *)(*a1 + 16);
  v20 = _swiftEmptyArrayStorage;
  v38 = v7;
  v36 = v18;
  if (v19)
  {
    v34 = v4;
    v35 = v6;
    v44[0] = _swiftEmptyArrayStorage;
    sub_10009B2E4(0, v19, 0);
    v21 = v18 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v42 = *(_QWORD *)(v7 + 72);
    v22 = v12;
    do
    {
      sub_10005972C(v21, (uint64_t)v9, type metadata accessor for CryptoKeyStreamInspector.Event);
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, &v9[*(int *)(v43 + 20)], v12);
      sub_1000126B0((uint64_t)v9, type metadata accessor for CryptoKeyStreamInspector.Event);
      v20 = (_QWORD *)v44[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v44[0]) & 1) == 0)
      {
        sub_10009B2E4(0, v20[2] + 1, 1);
        v20 = (_QWORD *)v44[0];
      }
      v24 = v20[2];
      v23 = v20[3];
      if (v24 >= v23 >> 1)
      {
        sub_10009B2E4(v23 > 1, v24 + 1, 1);
        v20 = (_QWORD *)v44[0];
      }
      v20[2] = v24 + 1;
      v12 = v22;
      (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))((unint64_t)v20+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v24, v16, v22);
      v44[0] = v20;
      v21 += v42;
      --v19;
    }
    while (v19);
    v26 = v40;
    v25 = v41;
    v4 = v34;
    v6 = v35;
  }
  else
  {
    v26 = v40;
    v25 = v41;
  }
  v27 = v37;
  sub_1001E5FD4((uint64_t)v20, v37);
  swift_bridgeObjectRelease();
  v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v27, 1, v12);
  v29 = v38;
  v30 = (uint64_t)v39;
  if (v28 == 1)
    return sub_100004048((uint64_t)v27, (uint64_t *)&unk_1010EA690);
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v39, v27, v12);
  if (*(_QWORD *)(v36 + 16))
  {
    sub_10005972C(v36 + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80)), (uint64_t)v6, type metadata accessor for SharedBeaconRecord);
    v32 = v26 + *(int *)(v4 + 20);
    swift_beginAccess(v25 + 40, v44, 33, 0);
    sub_100103F58(v32);
    swift_endAccess(v44);
    swift_release();
    swift_unownedRetainStrong(*(_QWORD *)(v25 + 16));
    sub_1003AD294((uint64_t)v6, v30);
    swift_release();
    sub_1000126B0((uint64_t)v6, type metadata accessor for SharedBeaconRecord);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v30, v12);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005D24A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_unownedRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  v1 = v0 + OBJC_IVAR____TtC12searchpartyd24CryptoKeyStreamInspector_delay;
  v2 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1005D2518()
{
  return type metadata accessor for CryptoKeyStreamInspector(0);
}

uint64_t type metadata accessor for CryptoKeyStreamInspector(uint64_t a1)
{
  return sub_10001B630(a1, qword_1011007A8, (uint64_t)&nominal type descriptor for CryptoKeyStreamInspector);
}

uint64_t sub_1005D2534(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t *sub_1005D25C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  uint64_t v58;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v41 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v41 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = *a2;
    v7 = a2[1];
    sub_10001BBBC(*a2, v7);
    *a1 = v6;
    a1[1] = v7;
    v8 = (int *)type metadata accessor for SharedBeaconRecord(0);
    v9 = v8[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    v54 = *(_QWORD *)(v12 - 8);
    v13 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
    v13(v10, v11, v12);
    v53 = v13;
    v13((char *)a1 + v8[6], (char *)a2 + v8[6], v12);
    v14 = v8[7];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *v15 = *v16;
    v57 = *((_QWORD *)v16 + 2);
    *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
    *((_QWORD *)v15 + 2) = v57;
    v17 = v8[8];
    v18 = (uint64_t *)((char *)a1 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v55 = v19[1];
    *v18 = *v19;
    v18[1] = v55;
    v20 = v8[9];
    v21 = (uint64_t *)((char *)a1 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = v8[10];
    v25 = (uint64_t *)((char *)a1 + v24);
    v26 = (uint64_t *)((char *)a2 + v24);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    *(uint64_t *)((char *)a1 + v8[11]) = *(uint64_t *)((char *)a2 + v8[11]);
    *(uint64_t *)((char *)a1 + v8[12]) = *(uint64_t *)((char *)a2 + v8[12]);
    *((_BYTE *)a1 + v8[13]) = *((_BYTE *)a2 + v8[13]);
    *((_BYTE *)a1 + v8[14]) = *((_BYTE *)a2 + v8[14]);
    *(uint64_t *)((char *)a1 + v8[15]) = *(uint64_t *)((char *)a2 + v8[15]);
    *((_BYTE *)a1 + v8[16]) = *((_BYTE *)a2 + v8[16]);
    *(uint64_t *)((char *)a1 + v8[17]) = *(uint64_t *)((char *)a2 + v8[17]);
    v28 = v8[18];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = type metadata accessor for Date(0);
    v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16);
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRetain(v23);
    v33 = swift_bridgeObjectRetain(v27);
    v56 = v32;
    v58 = v31;
    v34 = v31;
    v35 = v12;
    ((void (*)(char *, char *, uint64_t, __n128))v32)(v29, v30, v34, v33);
    v36 = v8[19];
    v37 = (char *)a1 + v36;
    v38 = (char *)a2 + v36;
    v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
    if (v39((char *)a2 + v36, 1, v35))
    {
      v40 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      v53(v37, v38, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v37, 0, 1, v35);
    }
    v42 = v8[20];
    v43 = (_DWORD *)((char *)a1 + v42);
    v44 = (_DWORD *)((char *)a2 + v42);
    v45 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    v46 = *(_QWORD *)(v45 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
    {
      v47 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      *v43 = *v44;
      v48 = *(int *)(v45 + 20);
      v49 = (char *)v43 + v48;
      v50 = (char *)v44 + v48;
      if (v39(v50, 1, v35))
      {
        v51 = sub_10001A9A8(&qword_1010ED860);
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      }
      else
      {
        v53(v49, v50, v35);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v49, 0, 1, v35);
      }
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
    }
    v56((char *)a1 + *(int *)(a3 + 20), (char *)a2 + *(int *)(a3 + 20), v58);
  }
  return a1;
}

uint64_t sub_1005D2934(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v17)(uint64_t, uint64_t);

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v5 = a1 + v4[5];
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  v8(a1 + v4[6], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = a1 + v4[18];
  v10 = type metadata accessor for Date(0);
  v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v17(v9, v10);
  v11 = a1 + v4[19];
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v12(v11, 1, v6))
    v8(v11, v6);
  v13 = a1 + v4[20];
  v14 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
  {
    v15 = v13 + *(int *)(v14 + 20);
    if (!v12(v15, 1, v6))
      v8(v15, v6);
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v17)(a1 + *(int *)(a2 + 20), v10);
}

uint64_t *sub_1005D2AC4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;

  v5 = *a2;
  v6 = a2[1];
  sub_10001BBBC(*a2, v6);
  *a1 = v5;
  a1[1] = v6;
  v7 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v8 = v7[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v52 = *(_QWORD *)(v11 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
  v12(v9, v10, v11);
  v51 = v12;
  v12((char *)a1 + v7[6], (char *)a2 + v7[6], v11);
  v13 = v7[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *v14 = *v15;
  v55 = *((_QWORD *)v15 + 2);
  *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
  *((_QWORD *)v14 + 2) = v55;
  v16 = v7[8];
  v17 = (uint64_t *)((char *)a1 + v16);
  v18 = (uint64_t *)((char *)a2 + v16);
  v53 = v18[1];
  *v17 = *v18;
  v17[1] = v53;
  v19 = v7[9];
  v20 = (uint64_t *)((char *)a1 + v19);
  v21 = (uint64_t *)((char *)a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = v7[10];
  v24 = (uint64_t *)((char *)a1 + v23);
  v25 = (uint64_t *)((char *)a2 + v23);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  *(uint64_t *)((char *)a1 + v7[11]) = *(uint64_t *)((char *)a2 + v7[11]);
  *(uint64_t *)((char *)a1 + v7[12]) = *(uint64_t *)((char *)a2 + v7[12]);
  *((_BYTE *)a1 + v7[13]) = *((_BYTE *)a2 + v7[13]);
  *((_BYTE *)a1 + v7[14]) = *((_BYTE *)a2 + v7[14]);
  *(uint64_t *)((char *)a1 + v7[15]) = *(uint64_t *)((char *)a2 + v7[15]);
  *((_BYTE *)a1 + v7[16]) = *((_BYTE *)a2 + v7[16]);
  *(uint64_t *)((char *)a1 + v7[17]) = *(uint64_t *)((char *)a2 + v7[17]);
  v27 = v7[18];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = type metadata accessor for Date(0);
  v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRetain(v22);
  v32 = swift_bridgeObjectRetain(v26);
  v54 = v31;
  v56 = v30;
  v33 = v30;
  v34 = v11;
  ((void (*)(char *, char *, uint64_t, __n128))v31)(v28, v29, v33, v32);
  v35 = v7[19];
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
  if (v38((char *)a2 + v35, 1, v34))
  {
    v39 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    v51(v36, v37, v34);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v36, 0, 1, v34);
  }
  v40 = v7[20];
  v41 = (_DWORD *)((char *)a1 + v40);
  v42 = (_DWORD *)((char *)a2 + v40);
  v43 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  v44 = *(_QWORD *)(v43 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
  {
    v45 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    *v41 = *v42;
    v46 = *(int *)(v43 + 20);
    v47 = (char *)v41 + v46;
    v48 = (char *)v42 + v46;
    if (v38(v48, 1, v34))
    {
      v49 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      v51(v47, v48, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v47, 0, 1, v34);
    }
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
  }
  v54((char *)a1 + *(int *)(a3 + 20), (char *)a2 + *(int *)(a3 + 20), v56);
  return a1;
}

uint64_t *sub_1005D2E04(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  int v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(_DWORD *, uint64_t, uint64_t);
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  uint64_t v70;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v11 = v10[5];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(void (**)(char *, char *, uint64_t))(v15 + 24);
  v16(v12, v13, v14);
  v66 = v16;
  v16((char *)a1 + v10[6], (char *)a2 + v10[6], v14);
  v17 = v10[7];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  *v18 = *v19;
  *((_QWORD *)v18 + 1) = *((_QWORD *)v19 + 1);
  v20 = *((_QWORD *)v19 + 2);
  *((_QWORD *)v18 + 2) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease();
  v21 = v10[8];
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  *v22 = *v23;
  v24 = v23[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease();
  v25 = v10[9];
  v26 = (uint64_t *)((char *)a1 + v25);
  v27 = (uint64_t *)((char *)a2 + v25);
  *v26 = *v27;
  v28 = v27[1];
  v26[1] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease();
  v29 = v10[10];
  v30 = (uint64_t *)((char *)a1 + v29);
  v31 = (uint64_t *)((char *)a2 + v29);
  *v30 = *v31;
  v32 = v31[1];
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + v10[11]) = *(uint64_t *)((char *)a2 + v10[11]);
  *(uint64_t *)((char *)a1 + v10[12]) = *(uint64_t *)((char *)a2 + v10[12]);
  *((_BYTE *)a1 + v10[13]) = *((_BYTE *)a2 + v10[13]);
  *((_BYTE *)a1 + v10[14]) = *((_BYTE *)a2 + v10[14]);
  *(uint64_t *)((char *)a1 + v10[15]) = *(uint64_t *)((char *)a2 + v10[15]);
  *((_BYTE *)a1 + v10[16]) = *((_BYTE *)a2 + v10[16]);
  *(uint64_t *)((char *)a1 + v10[17]) = *(uint64_t *)((char *)a2 + v10[17]);
  v33 = v10[18];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = type metadata accessor for Date(0);
  v68 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 24);
  v68(v34, v35, v36);
  v37 = v10[19];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v67 = v15;
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v15) = v40((char *)a1 + v37, 1, v14);
  v41 = v40(v39, 1, v14);
  v69 = a3;
  v70 = v36;
  if ((_DWORD)v15)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v38, v39, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v38, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v38, v14);
LABEL_6:
    v42 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_7;
  }
  v66(v38, v39, v14);
LABEL_7:
  v43 = v10[20];
  v44 = (_DWORD *)((char *)a1 + v43);
  v45 = (_DWORD *)((char *)a2 + v43);
  v46 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v47 + 48);
  v49 = v48(v44, 1, v46);
  v50 = v48(v45, 1, v46);
  if (v49)
  {
    if (v50)
    {
      v51 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      v52 = v69;
    }
    else
    {
      *v44 = *v45;
      v55 = *(int *)(v46 + 20);
      v56 = (char *)v44 + v55;
      v57 = (char *)v45 + v55;
      v52 = v69;
      if (v40(v57, 1, v14))
      {
        v58 = sub_10001A9A8(&qword_1010ED860);
        memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v56, v57, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v56, 0, 1, v14);
      }
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
    }
    v53 = v70;
  }
  else
  {
    v53 = v70;
    if (!v50)
    {
      *v44 = *v45;
      v59 = *(int *)(v46 + 20);
      v60 = (char *)v44 + v59;
      v61 = (char *)v45 + v59;
      v62 = v40(v60, 1, v14);
      v63 = v40(v61, 1, v14);
      if (v62)
      {
        v52 = v69;
        if (!v63)
        {
          (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v60, v61, v14);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v60, 0, 1, v14);
          goto LABEL_21;
        }
      }
      else
      {
        v52 = v69;
        if (!v63)
        {
          v66(v60, v61, v14);
          goto LABEL_21;
        }
        (*(void (**)(char *, uint64_t))(v67 + 8))(v60, v14);
      }
      v65 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      goto LABEL_21;
    }
    sub_1000126B0((uint64_t)v44, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    v54 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    v52 = v69;
  }
LABEL_21:
  v68((char *)a1 + *(int *)(v52 + 20), (char *)a2 + *(int *)(v52 + 20), v53);
  return a1;
}

char *sub_1005D3304(char *a1, char *a2, uint64_t a3)
{
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *__dst;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v5 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v6 = v5[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v11(&a1[v5[6]], &a2[v5[6]], v9);
  v12 = v5[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
  *(_OWORD *)&a1[v5[8]] = *(_OWORD *)&a2[v5[8]];
  *(_OWORD *)&a1[v5[9]] = *(_OWORD *)&a2[v5[9]];
  *(_OWORD *)&a1[v5[10]] = *(_OWORD *)&a2[v5[10]];
  *(_QWORD *)&a1[v5[11]] = *(_QWORD *)&a2[v5[11]];
  *(_QWORD *)&a1[v5[12]] = *(_QWORD *)&a2[v5[12]];
  a1[v5[13]] = a2[v5[13]];
  a1[v5[14]] = a2[v5[14]];
  *(_QWORD *)&a1[v5[15]] = *(_QWORD *)&a2[v5[15]];
  a1[v5[16]] = a2[v5[16]];
  *(_QWORD *)&a1[v5[17]] = *(_QWORD *)&a2[v5[17]];
  v15 = v5[18];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for Date(0);
  v36 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
  v36(v16, v17, v18);
  v19 = v5[19];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v35 = v10;
  if (v22(&a2[v19], 1, v9))
  {
    v23 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v11(v20, v21, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, v9);
  }
  v24 = v5[20];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    *(_DWORD *)v25 = *(_DWORD *)v26;
    v30 = *(int *)(v27 + 20);
    __dst = &v25[v30];
    v31 = &v26[v30];
    if (v22(v31, 1, v9))
    {
      v32 = sub_10001A9A8(&qword_1010ED860);
      memcpy(__dst, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v11(__dst, v31, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v9);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v36(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v18);
  return a1;
}

uint64_t *sub_1005D35F4(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int v65;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  uint64_t v72;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v9 = v8[5];
  v10 = (char *)a1 + v9;
  v11 = &a2[v9];
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(char *, char *, uint64_t))(v13 + 40);
  v14(v10, v11, v12);
  v68 = v14;
  v14((char *)a1 + v8[6], &a2[v8[6]], v12);
  v15 = v8[7];
  v16 = (char *)a1 + v15;
  v17 = &a2[v15];
  *v16 = *v17;
  v19 = *((_QWORD *)v17 + 1);
  v18 = *((_QWORD *)v17 + 2);
  *((_QWORD *)v16 + 1) = v19;
  *((_QWORD *)v16 + 2) = v18;
  swift_bridgeObjectRelease();
  v20 = v8[8];
  v21 = (uint64_t *)((char *)a1 + v20);
  v22 = (uint64_t *)&a2[v20];
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = v8[9];
  v26 = (uint64_t *)((char *)a1 + v25);
  v27 = (uint64_t *)&a2[v25];
  v29 = *v27;
  v28 = v27[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  v30 = v8[10];
  v31 = (uint64_t *)((char *)a1 + v30);
  v32 = (uint64_t *)&a2[v30];
  v34 = *v32;
  v33 = v32[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + v8[11]) = *(_QWORD *)&a2[v8[11]];
  *(uint64_t *)((char *)a1 + v8[12]) = *(_QWORD *)&a2[v8[12]];
  *((_BYTE *)a1 + v8[13]) = a2[v8[13]];
  *((_BYTE *)a1 + v8[14]) = a2[v8[14]];
  *(uint64_t *)((char *)a1 + v8[15]) = *(_QWORD *)&a2[v8[15]];
  *((_BYTE *)a1 + v8[16]) = a2[v8[16]];
  *(uint64_t *)((char *)a1 + v8[17]) = *(_QWORD *)&a2[v8[17]];
  v35 = v8[18];
  v36 = (char *)a1 + v35;
  v37 = &a2[v35];
  v38 = type metadata accessor for Date(0);
  v70 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 40);
  v70(v36, v37, v38);
  v39 = v8[19];
  v40 = (char *)a1 + v39;
  v41 = &a2[v39];
  v69 = v13;
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  LODWORD(v13) = v42((char *)a1 + v39, 1, v12);
  v43 = v42(v41, 1, v12);
  v71 = a3;
  v72 = v38;
  if ((_DWORD)v13)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v40, v41, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v40, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v69 + 8))(v40, v12);
LABEL_6:
    v44 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_7;
  }
  v68(v40, v41, v12);
LABEL_7:
  v45 = v8[20];
  v46 = (char *)a1 + v45;
  v47 = &a2[v45];
  v48 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  v51 = v50(v46, 1, v48);
  v52 = v50(v47, 1, v48);
  if (v51)
  {
    if (v52)
    {
      v53 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      v54 = v71;
    }
    else
    {
      *(_DWORD *)v46 = *(_DWORD *)v47;
      v57 = *(int *)(v48 + 20);
      v58 = &v46[v57];
      v59 = &v47[v57];
      v54 = v71;
      if (v42(v59, 1, v12))
      {
        v60 = sub_10001A9A8(&qword_1010ED860);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v58, v59, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v58, 0, 1, v12);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    v55 = v72;
  }
  else
  {
    v55 = v72;
    if (!v52)
    {
      *(_DWORD *)v46 = *(_DWORD *)v47;
      v61 = *(int *)(v48 + 20);
      v62 = &v46[v61];
      v63 = &v47[v61];
      v64 = v42(v62, 1, v12);
      v65 = v42(v63, 1, v12);
      if (v64)
      {
        v54 = v71;
        if (!v65)
        {
          (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v62, v63, v12);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v62, 0, 1, v12);
          goto LABEL_21;
        }
      }
      else
      {
        v54 = v71;
        if (!v65)
        {
          v68(v62, v63, v12);
          goto LABEL_21;
        }
        (*(void (**)(char *, uint64_t))(v69 + 8))(v62, v12);
      }
      v67 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
      goto LABEL_21;
    }
    sub_1000126B0((uint64_t)v46, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    v56 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    v54 = v71;
  }
LABEL_21:
  v70((char *)a1 + *(int *)(v54 + 20), &a2[*(int *)(v54 + 20)], v55);
  return a1;
}

uint64_t sub_1005D3AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005D3AB8);
}

uint64_t sub_1005D3AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for SharedBeaconRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1005D3B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005D3B38);
}

uint64_t sub_1005D3B38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for SharedBeaconRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for Date(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for CryptoKeyStreamInspector.Event(uint64_t a1)
{
  return sub_10001B630(a1, qword_1011008E0, (uint64_t)&nominal type descriptor for CryptoKeyStreamInspector.Event);
}

uint64_t sub_1005D3BC8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for SharedBeaconRecord(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_1005D3C4C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v2 = v1;
  v24 = a1;
  v3 = type metadata accessor for DispatchTimeInterval(0);
  v22 = *(_QWORD *)(v3 - 8);
  v23 = v3;
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001F6FC();
  v16 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v12);
  static DispatchQoS.unspecified.getter(v16);
  v25 = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v19 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v6, v17);
  v2[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000036, 0x8000000100EDC8C0, v11, v8, v15, 0);
  v2[4] = _swiftEmptyDictionarySingleton;
  v2[5] = _swiftEmptyDictionarySingleton;
  *v5 = 60;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v22 + 104))(v5, enum case for DispatchTimeInterval.seconds(_:), v23);
  OS_dispatch_queue.SchedulerTimeType.Stride.init(_:)(v5);
  v20 = v24;
  v2[2] = v24;
  swift_unownedRetain(v20);
  return v2;
}

uint64_t sub_1005D3EA4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v22 = *(unsigned __int8 *)(v2 + 80);
  v20 = *(_QWORD *)(v2 + 64);
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v19 = *(_QWORD *)(v4 + 64);
  swift_release();
  v21 = (v22 + 24) & ~v22;
  sub_10001BC14(*(_QWORD *)(v0 + v21), *(_QWORD *)(v0 + v21 + 8));
  v6 = v0 + v21 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v21 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v10(v0 + v21 + v1[18], v3);
  v11 = v0 + v21 + v1[19];
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v12(v11, 1, v7))
    v9(v11, v7);
  v13 = v0 + v21 + v1[20];
  v14 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
  {
    v15 = v13 + *(int *)(v14 + 20);
    if (!v12(v15, 1, v7))
      v9(v15, v7);
  }
  v16 = (v21 + v20 + v5) & ~v5;
  v17 = v16 + v19;
  v10(v0 + v16, v3);
  return swift_deallocObject(v0, v17, v22 | v5 | 7);
}

uint64_t sub_1005D408C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  return sub_1005D1AF8(*(_QWORD **)(v0 + 16), v0 + v2, v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t sub_1005D40F0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1005D4288(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SharedBeaconRecord(0) - 8) + 80);
  return sub_1005D2104(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

unint64_t SPPlaySoundContext.description.getter(uint64_t a1)
{
  unint64_t result;

  result = 0x746C75616665642ELL;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x676E69676E61722ELL;
      break;
    case 2:
    case 5:
      result = 0x6E696B636172742ELL;
      break;
    case 3:
      result = 0xD000000000000010;
      break;
    case 4:
      result = 0x6F4365756575712ELL;
      break;
    default:
      result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

uint64_t sub_1005D439C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B71E0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B71E0);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x6E614D646E756F73, 0xEC00000072656761);
}

unint64_t sub_1005D4418()
{
  uint64_t *v0;

  return SPPlaySoundContext.description.getter(*v0);
}

void sub_1005D4420()
{
  qword_1011B71F8 = (uint64_t)&off_10104B058;
}

unint64_t sub_1005D4434@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1005FC270(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005D445C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1005FD598();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1005D44B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1005FD598();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1005D4504()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1005D453C + 4 * byte_100E44F66[*v0]))(0x65755179616C702ELL, 0xEB00000000646575);
}

uint64_t sub_1005D453C()
{
  return 0x696E4979616C702ELL;
}

uint64_t sub_1005D45BC()
{
  return 0x74756F656D69742ELL;
}

uint64_t sub_1005D45D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_101100948);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_101100948);
  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B71E0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_1005D4664()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager____lazy_storage___commandManager);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager____lazy_storage___commandManager);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager____lazy_storage___commandManager);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)CLFindMyAccessoryManager), "initWithDelegate:delegateQueue:", v0, *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue));
    v5 = *v1;
    *v1 = (uint64_t)v4;
    v1[1] = (uint64_t)&off_1010BECC0;
    v3 = v4;
    swift_unknownObjectRelease(v5);
    v2 = 0;
  }
  swift_unknownObjectRetain(v2);
  return v3;
}

id sub_1005D4700(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t *v31;
  objc_class *v32;
  id v33;
  id v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  objc_super v39;
  _QWORD *v40;

  v3 = v2;
  v37 = a1;
  v38 = a2;
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue;
  v36 = sub_10001F6FC();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  v15 = v3;
  static DispatchQoS.unspecified.getter(v15);
  v40 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v17, v18, v4, v16);
  *(_QWORD *)&v3[v14] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003ALL, 0x8000000100EDCC00, v9, v6, v13, 0);
  *(_QWORD *)&v15[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_playSoundSubjects] = _swiftEmptyDictionarySingleton;
  *(_QWORD *)&v15[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_stopSoundSubjects] = _swiftEmptyDictionarySingleton;
  *(_QWORD *)&v15[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators] = _swiftEmptyDictionarySingleton;
  v19 = &v15[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager____lazy_storage___commandManager];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_10001A9E8(v20, (uint64_t)qword_1011B71E0);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.debug.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Init SoundPlaybackManager", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }

  v25 = v37;
  *(_QWORD *)&v15[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_beaconStore] = v37;
  v26 = *(void **)&v3[v14];
  v27 = type metadata accessor for OwnerCommandManager();
  swift_allocObject(v27, 192, 7);
  swift_retain();
  v28 = v38;
  swift_retain();
  v29 = v26;
  v30 = sub_10046DC04(v25, v28, v26);
  swift_release();

  v31 = (uint64_t *)&v15[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_findMyCommandManager];
  v31[3] = v27;
  v31[4] = (uint64_t)&off_101077C40;
  *v31 = v30;
  swift_retain();

  v32 = (objc_class *)type metadata accessor for SoundPlaybackManager();
  v39.receiver = v15;
  v39.super_class = v32;
  v33 = objc_msgSendSuper2(&v39, "init");
  *(_QWORD *)(v30 + 48) = &off_101081C18;
  swift_unknownObjectWeakAssign(v30 + 40, v33);
  v34 = v33;
  sub_1005D4AB4();
  swift_release();

  swift_release();
  swift_release();
  return v34;
}

uint64_t sub_1005D4AB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  int64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  _QWORD v76[3];
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;

  v1 = type metadata accessor for BeaconObservation(0);
  v65 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v66 = (char *)&v65 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for WildModeAssociationRecord(0);
  v73 = *(_QWORD *)(v70 - 8);
  v3 = __chkstk_darwin(v70);
  v72 = (uint64_t)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v69 = (uint64_t)&v65 - v6;
  __chkstk_darwin(v5);
  v8 = (char *)&v65 - v7;
  v75 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v75 - 8);
  v10 = __chkstk_darwin(v75);
  v74 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v65 - v12;
  v67 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_beaconStore);
  v14 = sub_100017368();
  v15 = v14;
  v16 = _swiftEmptyArrayStorage;
  v82 = _swiftEmptyArrayStorage;
  v17 = *(_QWORD *)(v14 + 16);
  v71 = v8;
  if (v17)
  {
    v18 = 0;
    v19 = v14 + 32;
    v68 = v17;
    while (v18 < *(_QWORD *)(v15 + 16))
    {
      sub_100030784(v19, (uint64_t)&v79);
      v21 = v80;
      v20 = v81;
      sub_10001AA44(&v79, v80);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v20 + 112))(v21, v20) & 1) != 0)
      {
        sub_10000F9FC(&v79, (uint64_t)v76);
        v22 = v82;
        if ((swift_isUniquelyReferenced_nonNull_native(v82) & 1) == 0)
        {
          sub_10009A628(0, v22[2] + 1, 1);
          v22 = v82;
        }
        v23 = v15;
        v25 = v22[2];
        v24 = v22[3];
        if (v25 >= v24 >> 1)
          sub_10009A628(v24 > 1, v25 + 1, 1);
        v26 = v77;
        v27 = v78;
        v28 = sub_10009F5D0((uint64_t)v76, v77);
        __chkstk_darwin(v28);
        v30 = (char *)&v65 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v31 + 16))(v30);
        sub_1004AA86C(v25, (uint64_t)v30, (uint64_t *)&v82, v26, v27);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v76);
        v8 = v71;
        v15 = v23;
        v17 = v68;
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v79);
      }
      ++v18;
      v19 += 40;
      if (v17 == v18)
      {
        v16 = v82;
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_50;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  v32 = v16[2];
  v33 = v75;
  if (v32)
  {
    v76[0] = _swiftEmptyArrayStorage;
    sub_10009A578(0, v32, 0);
    v34 = (uint64_t)(v16 + 4);
    do
    {
      sub_100030784(v34, (uint64_t)&v79);
      v35 = v80;
      v36 = v81;
      sub_10001AA44(&v79, v80);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v36 + 8) + 8) + 32))(v35);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v79);
      v37 = (_QWORD *)v76[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v76[0]) & 1) == 0)
      {
        sub_10009A578(0, v37[2] + 1, 1);
        v37 = (_QWORD *)v76[0];
      }
      v39 = v37[2];
      v38 = v37[3];
      if (v39 >= v38 >> 1)
      {
        sub_10009A578(v38 > 1, v39 + 1, 1);
        v37 = (_QWORD *)v76[0];
      }
      v37[2] = v39 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))((unint64_t)v37+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v39, v13, v33);
      v76[0] = v37;
      v34 += 40;
      --v32;
    }
    while (v32);
    swift_release();
  }
  else
  {
    swift_release();
    v37 = _swiftEmptyArrayStorage;
  }
  *(_QWORD *)&v79 = v37;
  v40 = sub_10081BF2C();
  v76[0] = _swiftEmptyArrayStorage;
  v41 = v40[2];
  if (v41)
  {
    v42 = 0;
    v43 = _swiftEmptyArrayStorage;
    while (v42 < v40[2])
    {
      v44 = (*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
      v45 = *(_QWORD *)(v73 + 72);
      sub_10005972C((uint64_t)v40 + v44 + v45 * v42, (uint64_t)v8, type metadata accessor for WildModeAssociationRecord);
      if (v8[*(int *)(v70 + 52)] == 3)
      {
        sub_1000126EC((uint64_t)v8, v69, type metadata accessor for WildModeAssociationRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
          sub_10009AEA4(0, v43[2] + 1, 1);
        v43 = (_QWORD *)v76[0];
        v47 = *(_QWORD *)(v76[0] + 16);
        v46 = *(_QWORD *)(v76[0] + 24);
        if (v47 >= v46 >> 1)
        {
          sub_10009AEA4(v46 > 1, v47 + 1, 1);
          v43 = (_QWORD *)v76[0];
        }
        v43[2] = v47 + 1;
        sub_1000126EC(v69, (uint64_t)v43 + v44 + v47 * v45, type metadata accessor for WildModeAssociationRecord);
        v8 = v71;
      }
      else
      {
        sub_1000126B0((uint64_t)v8, type metadata accessor for WildModeAssociationRecord);
      }
      if (v41 == ++v42)
      {
        v48 = (_QWORD *)v76[0];
        v33 = v75;
        goto LABEL_35;
      }
    }
LABEL_50:
    __break(1u);
    result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  v48 = _swiftEmptyArrayStorage;
LABEL_35:
  swift_bridgeObjectRelease();
  v49 = v48[2];
  v50 = v74;
  if (v49)
  {
    v76[0] = _swiftEmptyArrayStorage;
    sub_10009A578(0, v49, 0);
    v51 = (uint64_t)v48 + ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80));
    v52 = *(_QWORD *)(v73 + 72);
    do
    {
      v53 = v72;
      sub_10005972C(v51, v72, type metadata accessor for WildModeAssociationRecord);
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v50, v53, v33);
      sub_1000126B0(v53, type metadata accessor for WildModeAssociationRecord);
      v54 = (_QWORD *)v76[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v76[0]) & 1) == 0)
      {
        sub_10009A578(0, v54[2] + 1, 1);
        v54 = (_QWORD *)v76[0];
      }
      v56 = v54[2];
      v55 = v54[3];
      if (v56 >= v55 >> 1)
      {
        sub_10009A578(v55 > 1, v56 + 1, 1);
        v54 = (_QWORD *)v76[0];
      }
      v54[2] = v56 + 1;
      v57 = (unint64_t)v54
          + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
          + *(_QWORD *)(v9 + 72) * v56;
      v50 = v74;
      v33 = v75;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v57, v74, v75);
      v76[0] = v54;
      v51 += v52;
      --v49;
    }
    while (v49);
    swift_release();
  }
  else
  {
    swift_release();
    v54 = _swiftEmptyArrayStorage;
  }
  sub_1003028FC((uint64_t)v54);
  swift_bridgeObjectRetain(v79);
  v59 = sub_1005F9828(v58, (uint64_t)&off_10104A530);
  swift_bridgeObjectRelease();
  v60 = v59[2];
  if (v60)
  {
    v61 = (uint64_t)v59 + ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80));
    v62 = *(_QWORD *)(v65 + 72);
    swift_bridgeObjectRetain(v59);
    v63 = (uint64_t)v66;
    do
    {
      sub_10005972C(v61, v63, type metadata accessor for BeaconObservation);
      sub_1005D5770(v63);
      sub_1000126B0(v63, type metadata accessor for BeaconObservation);
      v61 += v62;
      --v60;
    }
    while (v60);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1007EEF64(10);
}

uint64_t sub_1005D5218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t (*v3)(uint64_t);
  uint64_t (*v4)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  Swift::UInt v32;
  Swift::Int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char isUniquelyReferenced_nonNull_native;
  BOOL v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  void *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65[10];
  _QWORD *v66;

  v4 = v3;
  v8 = sub_10001A9A8(&qword_1010EF660);
  __chkstk_darwin(v8);
  v55 = (uint64_t)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BeaconObservation(0);
  v61 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v60 = (uint64_t)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v49 - v14;
  __chkstk_darwin(v13);
  v52 = (uint64_t)&v49 - v16;
  if (qword_1010E9CF0 != -1)
LABEL_36:
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v17 = qword_1011B7160;
  v54 = objc_autoreleasePoolPush();
  v18 = sub_10001A9A8(&qword_1010F7770);
  OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v17, v18);
  v53 = v4;
  v19 = v65[0];
  if (*(_QWORD *)(v65[0] + 16) && (v20 = sub_100003FB0(a1), (v21 & 1) != 0))
  {
    v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRelease();
    v23 = sub_100508D98(v22);
    swift_bridgeObjectRelease();
    sub_10088FD00((uint64_t)v23);
    a1 = v24;
    swift_release();
    v25 = _swiftEmptyArrayStorage;
    v66 = _swiftEmptyArrayStorage;
    v59 = *(_QWORD *)(a1 + 16);
    if (v59)
    {
      v50 = a2;
      v51 = a3;
      v26 = 0;
      v4 = type metadata accessor for BeaconObservation;
      a2 = -1;
      a3 = qword_100E452A0;
      v57 = v15;
      v58 = v10;
      v56 = a1;
      while (1)
      {
        if (v26 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = (*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
        v63 = *(_QWORD *)(v61 + 72);
        v64 = v26 + 1;
        v62 = v27;
        sub_10005972C(a1 + v27 + v63 * v26, (uint64_t)v15, type metadata accessor for BeaconObservation);
        sub_100374684();
        v28 = Set.init(minimumCapacity:)(7);
        v29 = 0;
        for (i = v28 + 56; ; i = v28 + 56)
        {
          while (1)
          {
            v31 = *((char *)&off_101048148 + v29++ + 32);
            Hasher.init(_seed:)(v65);
            v32 = qword_100E452A0[v31];
            Hasher._combine(_:)(v32);
            v33 = Hasher._finalize()();
            v34 = -1 << *(_BYTE *)(v28 + 32);
            v35 = v33 & ~v34;
            if (((*(_QWORD *)(i + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
              goto LABEL_17;
            v36 = *(_QWORD *)(v28 + 48);
            if (qword_100E452A0[*(char *)(v36 + v35)] != v32)
              break;
LABEL_10:
            if (v29 == 7)
              goto LABEL_19;
          }
          v37 = ~v34;
          while (1)
          {
            v35 = (v35 + 1) & v37;
            if (((*(_QWORD *)(i + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
              break;
            if (qword_100E452A0[*(char *)(v36 + v35)] == v32)
              goto LABEL_10;
          }
LABEL_17:
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28);
          v65[0] = v28;
          sub_100A1F790(v31, v35, isUniquelyReferenced_nonNull_native);
          v28 = v65[0];
          swift_bridgeObjectRelease();
          if (v29 == 7)
            break;
        }
LABEL_19:
        v15 = v57;
        v10 = v58;
        v39 = sub_100A07E5C(v57[*(int *)(v58 + 24)], v28);
        swift_bridgeObjectRelease();
        if (v39)
        {
          v4 = type metadata accessor for BeaconObservation;
          sub_1000126EC((uint64_t)v15, v60, type metadata accessor for BeaconObservation);
          v40 = v66;
          if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) == 0)
          {
            sub_10009AAC8(0, v40[2] + 1, 1);
            v40 = v66;
          }
          v41 = v62;
          v43 = v40[2];
          v42 = v40[3];
          if (v43 >= v42 >> 1)
          {
            sub_10009AAC8(v42 > 1, v43 + 1, 1);
            v40 = v66;
          }
          v40[2] = v43 + 1;
          sub_1000126EC(v60, (uint64_t)v40 + v41 + v43 * v63, type metadata accessor for BeaconObservation);
        }
        else
        {
          v4 = type metadata accessor for BeaconObservation;
          sub_1000126B0((uint64_t)v15, type metadata accessor for BeaconObservation);
        }
        a1 = v56;
        v26 = v64;
        if (v64 == v59)
        {
          v25 = v66;
          a3 = v51;
          a2 = v50;
          break;
        }
      }
    }
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v25 = _swiftEmptyArrayStorage;
  }
  objc_autoreleasePoolPop(v54);
  v44 = v55;
  sub_100A797E8((uint64_t)v25, v55);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v44, 1, v10) == 1)
  {
    sub_100004048(v44, &qword_1010EF660);
LABEL_33:
    v47 = 1;
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v61 + 56))(a3, v47, 1, v10);
  }
  v45 = v44;
  v46 = v52;
  sub_1000126EC(v45, v52, type metadata accessor for BeaconObservation);
  if (!sub_1001C1560(*(unsigned __int8 *)(v46 + *(int *)(v10 + 24)), a2))
  {
    sub_1000126B0(v46, type metadata accessor for BeaconObservation);
    goto LABEL_33;
  }
  sub_1000126EC(v46, (uint64_t)a3, type metadata accessor for BeaconObservation);
  v47 = 0;
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v61 + 56))(a3, v47, 1, v10);
}

uint64_t sub_1005D5770(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(void);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v3 = type metadata accessor for BeaconObservation(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v36 - v8;
  v10 = type metadata accessor for UUID(0);
  __chkstk_darwin(v10);
  v40 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v12;
  v13 = *(void (**)(void))(v12 + 16);
  v42 = v14;
  v39 = v13;
  v13();
  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v15 = type metadata accessor for Logger(0);
  sub_10001A9E8(v15, (uint64_t)qword_1011B71E0);
  v16 = sub_10005972C(a1, (uint64_t)v9, type metadata accessor for BeaconObservation);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(12, -1);
    v37 = v4;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v36 = v3;
    v22 = v21;
    v45 = v21;
    v38 = v1;
    *(_DWORD *)v20 = 136315138;
    v23 = sub_1006EC890();
    v43 = sub_100016940(v23, v24, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v9, type metadata accessor for BeaconObservation);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Found %s. Force completion so we're not stuck forever", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v25 = v22;
    v3 = v36;
    swift_slowDealloc(v25, -1, -1);
    v26 = v20;
    v4 = v37;
    swift_slowDealloc(v26, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v9, type metadata accessor for BeaconObservation);
  }

  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v27 = qword_1011B7160;
  v28 = v40;
  v29 = v42;
  ((void (*)(char *, char *, uint64_t))v39)(v7, v40, v42);
  static Date.trustedNow.getter((uint64_t)&v7[*(int *)(v3 + 20)]);
  v7[*(int *)(v3 + 24)] = 29;
  v30 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
  v31 = *(unsigned __int8 *)(v4 + 80);
  v32 = (v31 + 32) & ~v31;
  v33 = swift_allocObject(v30, v32 + *(_QWORD *)(v4 + 72), v31 | 7);
  *(_OWORD *)(v33 + 16) = xmmword_100E22B00;
  sub_10005972C((uint64_t)v7, v33 + v32, type metadata accessor for BeaconObservation);
  v34 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v34);
  *(&v36 - 4) = v27;
  *(&v36 - 3) = v33;
  *(&v36 - 2) = 0;
  *(&v36 - 1) = 0;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, &v36 - 6, &type metadata for () + 1);
  swift_bridgeObjectRelease();
  sub_1000126B0((uint64_t)v7, type metadata accessor for BeaconObservation);
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v28, v29);
}

uint64_t sub_1005D5B28(uint64_t a1, uint64_t a2, void (*a3)(void **), void (*a4)(void **))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_BYTE *, uint64_t, uint64_t);
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  int v43;
  _BOOL4 v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void (*v51)(_BYTE *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void **v55;
  os_log_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  _BYTE *v60;
  void (*v61)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, _BYTE *, uint64_t);
  void (**v72)(void **);
  void (*v73)(void **);
  void *v74;
  void *v75;
  const void *v76;
  id v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  void **v93;
  void **v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void **v98;
  _BYTE *v99;
  _BYTE *v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  int v104;
  uint64_t v105;
  void **v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  void **v119;
  void *v121;
  _BYTE *v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  void (**v132)(void **);
  void (*v133)(void **);
  void *v134;
  void *v135;
  const void *v136;
  id v137;
  uint64_t v138;
  _BYTE *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE v146[4];
  int v147;
  void **v148;
  _BYTE *v149;
  _BYTE *v150;
  uint64_t v151;
  uint64_t v152;
  _BYTE *v153;
  _BYTE *v154;
  uint64_t v155;
  _BYTE *v156;
  _BYTE *v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE *v160;
  uint64_t v161;
  _BYTE *v162;
  _BYTE *v163;
  _BYTE *v164;
  uint64_t v165;
  _BYTE *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  os_log_t v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(_BYTE *, uint64_t, uint64_t);
  uint64_t v175;
  void (*v176)(void **);
  void (*v177)(void **);
  char *v178;
  uint64_t v179;
  void **aBlock;
  uint64_t v181;
  uint64_t (*v182)(uint64_t);
  void *v183;
  uint64_t (*v184)();
  uint64_t v185;

  v177 = a4;
  v176 = a3;
  v169 = type metadata accessor for DispatchWorkItemFlags(0);
  v167 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v166 = &v146[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v168 = type metadata accessor for DispatchQoS(0);
  v165 = *(_QWORD *)(v168 - 8);
  __chkstk_darwin(v168);
  v164 = &v146[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v8);
  v157 = &v146[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v158 = type metadata accessor for OwnedBeaconRecord(0);
  v10 = *(_QWORD *)(v158 - 8);
  v11 = __chkstk_darwin(v158);
  v153 = &v146[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __chkstk_darwin(v11);
  v154 = &v146[-v14];
  v152 = v15;
  __chkstk_darwin(v13);
  v162 = &v146[-v16];
  v17 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v17);
  v171 = (os_log_t)&v146[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v172 = type metadata accessor for OwnedBeaconGroup(0);
  v170 = *(_QWORD *)(v172 - 8);
  v19 = __chkstk_darwin(v172);
  v149 = &v146[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19);
  v22 = &v146[-v21];
  v23 = type metadata accessor for UUID(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v156 = &v146[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = __chkstk_darwin(v25);
  v160 = &v146[-v28];
  v29 = __chkstk_darwin(v27);
  v150 = &v146[-v30];
  v31 = __chkstk_darwin(v29);
  v33 = &v146[-v32];
  v159 = v34;
  __chkstk_darwin(v31);
  v36 = &v146[-v35];
  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v37 = type metadata accessor for Logger(0);
  v38 = sub_10001A9E8(v37, (uint64_t)qword_1011B71E0);
  v39 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v24 + 16);
  v173 = a1;
  v39(v36, a1, v23);
  v174 = v39;
  v175 = a2;
  v40 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v39)(v33, a2, v23);
  v155 = v38;
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter(v41);
  v43 = v42;
  v44 = os_log_type_enabled(v41, v42);
  v161 = v24;
  if (v44)
  {
    v45 = swift_slowAlloc(32, -1);
    v46 = (void **)swift_slowAlloc(64, -1);
    v148 = v46;
    *(_DWORD *)v45 = 141558531;
    v179 = 1752392040;
    aBlock = v46;
    v151 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &aBlock, v45 + 4, v45 + 12);
    *(_WORD *)(v45 + 12) = 2081;
    v47 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v163 = v22;
    v48 = v47;
    v147 = v43;
    v49 = dispatch thunk of CustomStringConvertible.description.getter(v23, v47);
    v179 = sub_100016940(v49, v50, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &aBlock, v45 + 14, v45 + 22);
    swift_bridgeObjectRelease();
    v51 = *(void (**)(_BYTE *, uint64_t))(v24 + 8);
    v51(v36, v23);
    *(_WORD *)(v45 + 22) = 2082;
    v52 = v48;
    v22 = v163;
    v53 = dispatch thunk of CustomStringConvertible.description.getter(v23, v52);
    v179 = sub_100016940(v53, v54, (uint64_t *)&aBlock);
    v10 = v151;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &aBlock, v45 + 24, v45 + 32);
    swift_bridgeObjectRelease();
    v51(v33, v23);
    _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v147, "Connect to %{private,mask.hash}s commandId: %{public}s.", (uint8_t *)v45, 0x20u);
    v55 = v148;
    swift_arrayDestroy(v148, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v45, -1, -1);
  }
  else
  {
    v51 = *(void (**)(_BYTE *, uint64_t))(v24 + 8);
    v51(v36, v23);
    v51(v33, v23);
  }

  v56 = v171;
  v57 = v172;
  v58 = v173;
  sub_10081EDA8(v173, (uint64_t)v171);
  if ((*(unsigned int (**)(os_log_t, uint64_t, uint64_t))(v170 + 48))(v56, 1, v57) == 1)
  {
    sub_100004048((uint64_t)v56, (uint64_t *)&unk_1010FF7F0);
    v59 = v178;
    v60 = v160;
    v61 = v174;
    v174(v160, v58, v23);
    v62 = v156;
    v61(v156, v175, v23);
    v63 = v161;
    v64 = *(unsigned __int8 *)(v161 + 80);
    v65 = (v64 + 24) & ~v64;
    v66 = v23;
    v67 = (v159 + v64 + v65) & ~v64;
    v68 = (v159 + v67 + 7) & 0xFFFFFFFFFFFFFFF8;
    v69 = swift_allocObject(&unk_1010828A8, v68 + 16, v64 | 7);
    *(_QWORD *)(v69 + 16) = v59;
    v70 = v69 + v65;
    v71 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v63 + 32);
    v71(v70, v60, v66);
    v71(v69 + v67, v62, v66);
    v72 = (void (**)(void **))(v69 + v68);
    v73 = v177;
    *v72 = v176;
    v72[1] = v73;
    v184 = sub_1005FD07C;
    v185 = v69;
    aBlock = _NSConcreteStackBlock;
    v181 = 1107296256;
    v182 = sub_100016FB8;
    v183 = &unk_1010828C0;
    v74 = _Block_copy(&aBlock);
    v75 = v59;
    v76 = v74;
    v77 = v75;
    v78 = swift_retain();
    v79 = v164;
    static DispatchQoS.unspecified.getter(v78);
    v179 = (uint64_t)_swiftEmptyArrayStorage;
    v80 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v81 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v82 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v83 = v166;
    v84 = v81;
    v85 = v169;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v179, v84, v82, v169, v80);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v79, v83, v76);
    _Block_release(v76);
    (*(void (**)(_BYTE *, uint64_t))(v167 + 8))(v83, v85);
    (*(void (**)(_BYTE *, uint64_t))(v165 + 8))(v79, v168);
    return swift_release();
  }
  sub_1000126EC((uint64_t)v56, (uint64_t)v22, type metadata accessor for OwnedBeaconGroup);
  v86 = v157;
  sub_1007F3570((uint64_t)v22, (uint64_t)v157);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v86, 1, v158) != 1)
  {
    v163 = v22;
    v99 = v162;
    sub_1000126EC((uint64_t)v86, (uint64_t)v162, type metadata accessor for OwnedBeaconRecord);
    sub_10005972C((uint64_t)v99, (uint64_t)v154, type metadata accessor for OwnedBeaconRecord);
    v100 = v150;
    v101 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v174)(v150, v175, v23);
    v102 = Logger.logObject.getter(v101);
    v103 = static os_log_type_t.default.getter(v102);
    v104 = v103;
    if (os_log_type_enabled(v102, v103))
    {
      v105 = swift_slowAlloc(32, -1);
      v106 = (void **)swift_slowAlloc(64, -1);
      v173 = (uint64_t)v106;
      *(_DWORD *)v105 = 141558531;
      v179 = 1752392040;
      aBlock = v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &aBlock, v105 + 4, v105 + 12);
      *(_WORD *)(v105 + 12) = 2081;
      v151 = v10;
      v107 = v154;
      LODWORD(v172) = v104;
      v108 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v171 = v102;
      v109 = v108;
      v110 = dispatch thunk of CustomStringConvertible.description.getter(v23, v108);
      v179 = sub_100016940(v110, v111, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &aBlock, v105 + 14, v105 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v107, type metadata accessor for OwnedBeaconRecord);
      *(_WORD *)(v105 + 22) = 2082;
      v112 = dispatch thunk of CustomStringConvertible.description.getter(v23, v109);
      v179 = sub_100016940(v112, v113, (uint64_t *)&aBlock);
      v10 = v151;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &aBlock, v105 + 24, v105 + 32);
      swift_bridgeObjectRelease();
      v51(v100, v23);
      v102 = v171;
      _os_log_impl((void *)&_mh_execute_header, v171, (os_log_type_t)v172, "Connect to primary beacon %{private,mask.hash}s commandId: %{public}s.", (uint8_t *)v105, 0x20u);
      v114 = v173;
      swift_arrayDestroy(v173, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v114, -1, -1);
      swift_slowDealloc(v105, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v154, type metadata accessor for OwnedBeaconRecord);
      v51(v100, v23);
    }

    v121 = v178;
    v173 = *(_QWORD *)&v178[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
    v122 = v153;
    sub_10005972C((uint64_t)v162, (uint64_t)v153, type metadata accessor for OwnedBeaconRecord);
    v123 = v160;
    v174(v160, v175, v23);
    v124 = *(unsigned __int8 *)(v10 + 80);
    v125 = v23;
    v126 = (v124 + 24) & ~v124;
    v127 = v161;
    v128 = *(unsigned __int8 *)(v161 + 80);
    v129 = (v152 + v128 + v126) & ~v128;
    v130 = (v159 + v129 + 7) & 0xFFFFFFFFFFFFFFF8;
    v131 = swift_allocObject(&unk_1010828F8, v130 + 16, v124 | v128 | 7);
    *(_QWORD *)(v131 + 16) = v121;
    sub_1000126EC((uint64_t)v122, v131 + v126, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v127 + 32))(v131 + v129, v123, v125);
    v132 = (void (**)(void **))(v131 + v130);
    v133 = v177;
    *v132 = v176;
    v132[1] = v133;
    v184 = sub_1005FD408;
    v185 = v131;
    aBlock = _NSConcreteStackBlock;
    v181 = 1107296256;
    v182 = sub_100016FB8;
    v183 = &unk_101082910;
    v134 = _Block_copy(&aBlock);
    v135 = v121;
    v136 = v134;
    v137 = v135;
    v138 = swift_retain();
    v139 = v164;
    static DispatchQoS.unspecified.getter(v138);
    v179 = (uint64_t)_swiftEmptyArrayStorage;
    v140 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v141 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v142 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v143 = v166;
    v144 = v141;
    v145 = v169;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v179, v144, v142, v169, v140);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v139, v143, v136);
    _Block_release(v136);
    (*(void (**)(_BYTE *, uint64_t))(v167 + 8))(v143, v145);
    (*(void (**)(_BYTE *, uint64_t))(v165 + 8))(v139, v168);
    sub_1000126B0((uint64_t)v162, type metadata accessor for OwnedBeaconRecord);
    sub_1000126B0((uint64_t)v163, type metadata accessor for OwnedBeaconGroup);
    return swift_release();
  }
  v87 = v23;
  sub_100004048((uint64_t)v86, (uint64_t *)&unk_1010F47C0);
  v88 = v149;
  v89 = sub_10005972C((uint64_t)v22, (uint64_t)v149, type metadata accessor for OwnedBeaconGroup);
  v90 = Logger.logObject.getter(v89);
  v91 = static os_log_type_t.error.getter(v90);
  if (os_log_type_enabled(v90, v91))
  {
    v92 = (uint8_t *)swift_slowAlloc(12, -1);
    v93 = (void **)swift_slowAlloc(32, -1);
    v163 = v22;
    v94 = v93;
    aBlock = v93;
    *(_DWORD *)v92 = 136446210;
    v95 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v96 = dispatch thunk of CustomStringConvertible.description.getter(v87, v95);
    v179 = sub_100016940(v96, v97, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &aBlock, v92 + 4, v92 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v88, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v90, v91, "No primary beacon for group %{public}s. Cannot connect!", v92, 0xCu);
    swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
    v98 = v94;
    v22 = v163;
    swift_slowDealloc(v98, -1, -1);
    swift_slowDealloc(v92, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v88, type metadata accessor for OwnedBeaconGroup);
  }

  type metadata accessor for CommandError(0);
  v116 = v115;
  v179 = 3;
  v117 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v118 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
  _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v179, v117, v116, v118);
  v119 = aBlock;
  v176(aBlock);

  return sub_1000126B0((uint64_t)v22, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_1005D69E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;

  sub_10001AA44((_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_findMyCommandManager), *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_findMyCommandManager + 24));
  v9 = type metadata accessor for OwnedBeaconRecord(0);
  return sub_10046C654(a2 + *(int *)(v9 + 20), a3, a4, a5);
}

uint64_t sub_1005D6A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, char *, uint64_t);
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD aBlock[6];

  v38 = a3;
  v39 = a4;
  v42 = type metadata accessor for DispatchWorkItemFlags(0);
  v45 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v41 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v43 = *(_QWORD *)(v8 - 8);
  v44 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v11);
  v15 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v37 - v16;
  v40 = *(_QWORD *)&v4[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v18((char *)&v37 - v16, a1, v11);
  v18(v15, a2, v11);
  v19 = *(unsigned __int8 *)(v12 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = (v13 + v19 + v20) & ~v19;
  v22 = (v13 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_101082808, v22 + 16, v19 | 7);
  *(_QWORD *)(v23 + 16) = v4;
  v24 = v23 + v20;
  v25 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 32);
  v25(v24, v17, v11);
  v25(v23 + v21, v15, v11);
  v26 = (_QWORD *)(v23 + v22);
  v27 = v39;
  *v26 = v38;
  v26[1] = v27;
  aBlock[4] = sub_1005FCE18;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101082820;
  v28 = _Block_copy(aBlock);
  v29 = v4;
  v30 = swift_retain();
  static DispatchQoS.unspecified.getter(v30);
  v46 = _swiftEmptyArrayStorage;
  v31 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v33 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v35 = v41;
  v34 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v32, v33, v42, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v35, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v35, v34);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v44);
  return swift_release();
}

uint64_t sub_1005D6D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, char *, uint64_t);
  uint64_t (**v25)(uint64_t);
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;

  v27[1] = a5;
  v28 = a3;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v13 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)v27 - v14;
  v16 = *sub_10001AA44((_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_findMyCommandManager), *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_findMyCommandManager + 24));
  v17 = swift_allocObject(&unk_101082858, 32, 7);
  *(_QWORD *)(v17 + 16) = a4;
  *(_QWORD *)(v17 + 24) = a5;
  v29 = type metadata accessor for Transaction(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v18(v15, a2, v9);
  v18(v13, v28, v9);
  v19 = *(unsigned __int8 *)(v10 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = (v11 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v19 + v21 + 16) & ~v19;
  v23 = swift_allocObject(&unk_101082880, v22 + v11, v19 | 7);
  *(_QWORD *)(v23 + 16) = v16;
  v24 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v24(v23 + v20, v15, v9);
  v25 = (uint64_t (**)(uint64_t))(v23 + v21);
  *v25 = sub_10046D484;
  v25[1] = (uint64_t (*)(uint64_t))v17;
  v24(v23 + v22, v13, v9);
  swift_retain();
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("OwnerCommandManager.disconnect", 30, 2, &unk_101100BA8, v23);
  swift_release();
  return swift_release();
}

uint64_t sub_1005D6EFC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, double a6)
{
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  _QWORD *v105;
  char *v106;
  char *v107;
  _QWORD *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  Swift::UInt v116;
  Swift::Int v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char isUniquelyReferenced_nonNull_native;
  BOOL v123;
  _QWORD *v124;
  char v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int (*v135)(uint64_t, uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  NSObject *v138;
  os_log_type_t v139;
  uint8_t *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint8_t *v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  NSObject *v150;
  os_log_type_t v151;
  char *v152;
  uint8_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void (*v158)(uint64_t, uint64_t);
  os_log_type_t v159;
  void (*v160)(uint64_t, uint64_t);
  uint64_t v161;
  BOOL v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  void *v169;
  _QWORD v170[2];
  uint64_t v171;
  void (*v172)(char *, uint64_t);
  uint64_t (*v173)(char *, uint64_t, uint64_t);
  uint64_t v174;
  id v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  char *v192;
  void (*v193)(uint64_t);
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199[3];
  _QWORD *v200;
  char v201[8];

  v193 = a4;
  v194 = a5;
  v196 = a3;
  v191 = type metadata accessor for BeaconObservation(0);
  v188 = *(_QWORD *)(v191 - 8);
  v10 = __chkstk_darwin(v191);
  v197 = (char *)v170 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v186 = (uint64_t)v170 - v13;
  v14 = __chkstk_darwin(v12);
  v189 = (char *)v170 - v15;
  __chkstk_darwin(v14);
  v198 = (char *)v170 - v16;
  v17 = sub_10001A9A8(&qword_1010EF660);
  v18 = __chkstk_darwin(v17);
  v192 = (char *)v170 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v177 = (uint64_t)v170 - v21;
  __chkstk_darwin(v20);
  v184 = (uint64_t)v170 - v22;
  v23 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v23);
  v180 = (uint64_t)v170 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = type metadata accessor for UUID(0);
  v195 = *(_QWORD *)(v187 - 8);
  v25 = __chkstk_darwin(v187);
  v178 = (char *)v170 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v190 = (char *)v170 - v28;
  v29 = __chkstk_darwin(v27);
  v176 = (char *)v170 - v30;
  v31 = __chkstk_darwin(v29);
  v183 = (uint64_t)v170 - v32;
  __chkstk_darwin(v31);
  v34 = (char *)v170 - v33;
  v35 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v35);
  v37 = (char *)v170 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for OwnedBeaconGroup(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = __chkstk_darwin(v38);
  v179 = (uint64_t)v170 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v40);
  v44 = (char *)v170 - v43;
  __chkstk_darwin(v42);
  v46 = (char *)v170 - v45;
  sub_10081EDA8(a2, (uint64_t)v37);
  v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
  v185 = v38;
  if (v47(v37, 1, v38) == 1)
  {
    sub_100004048((uint64_t)v37, (uint64_t *)&unk_1010FF7F0);
    return sub_1005D841C(a1, a2, v196, (uint64_t)v193, v194, a6);
  }
  v175 = v6;
  v174 = a2;
  v182 = a1;
  sub_1000126EC((uint64_t)v37, (uint64_t)v46, type metadata accessor for OwnedBeaconGroup);
  if (qword_1010E9D28 != -1)
    goto LABEL_77;
  while (1)
  {
    v49 = type metadata accessor for Logger(0);
    v50 = sub_10001A9E8(v49, (uint64_t)qword_1011B71E0);
    v181 = v46;
    sub_10005972C((uint64_t)v46, (uint64_t)v44, type metadata accessor for OwnedBeaconGroup);
    v51 = v195;
    v52 = v187;
    v173 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v195 + 16);
    v53 = v173(v34, v182, v187);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.default.getter(v54);
    v56 = os_log_type_enabled(v54, v55);
    v57 = (uint64_t)v198;
    if (v56)
    {
      v58 = swift_slowAlloc(32, -1);
      v171 = swift_slowAlloc(96, -1);
      v199[0] = v171;
      *(_DWORD *)v58 = 136446722;
      v59 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v60 = dispatch thunk of CustomStringConvertible.description.getter(v52, v59);
      v200 = (_QWORD *)sub_100016940(v60, v61, v199);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v58 + 4, v58 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v44, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v58 + 12) = 2080;
      v62 = 0xE800000000000000;
      v63 = 0x746C75616665642ELL;
      switch(v196)
      {
        case 0:
          break;
        case 1:
          v63 = 0x676E69676E61722ELL;
          break;
        case 2:
          v62 = 0xE900000000000067;
          goto LABEL_13;
        case 3:
          v62 = 0x8000000100ED1070;
          v63 = 0xD000000000000010;
          break;
        case 4:
          v62 = 0xEF64656D7269666ELL;
          v63 = 0x6F4365756575712ELL;
          break;
        case 5:
          v62 = 0xEE0074726F685367;
LABEL_13:
          v63 = 0x6E696B636172742ELL;
          break;
        default:
          v62 = 0xE700000000000000;
          v63 = 0x6E776F6E6B6E75;
          break;
      }
      v200 = (_QWORD *)sub_100016940(v63, v62, v199);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v58 + 14, v58 + 22);
      swift_bridgeObjectRelease();
      *(_WORD *)(v58 + 22) = 2082;
      v65 = v187;
      v66 = dispatch thunk of CustomStringConvertible.description.getter(v187, v59);
      v200 = (_QWORD *)sub_100016940(v66, v67, v199);
      v52 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v58 + 24, v58 + 32);
      swift_bridgeObjectRelease();
      v172 = *(void (**)(char *, uint64_t))(v195 + 8);
      v172(v34, v65);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Play sound for group %{public}s with context %s. CommandId %{public}s", (uint8_t *)v58, 0x20u);
      v68 = v171;
      swift_arrayDestroy(v171, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1, -1);
      swift_slowDealloc(v58, -1, -1);

      v64 = v175;
      v57 = (uint64_t)v198;
    }
    else
    {
      sub_1000126B0((uint64_t)v44, type metadata accessor for OwnedBeaconGroup);
      v172 = *(void (**)(char *, uint64_t))(v51 + 8);
      v172(v34, v52);

      v64 = v175;
    }
    v69 = (uint64_t)v181;
    sub_10036AC6C();
    v71 = v70;
    v72 = v64;
    sub_1005FA0C4(v71, (uint64_t)v72);
    v74 = v73;
    swift_bridgeObjectRelease();

    v34 = v197;
    if ((v74 & 1) == 0)
    {
      v87 = v179;
      v88 = sub_10005972C(v69, v179, type metadata accessor for OwnedBeaconGroup);
      v89 = Logger.logObject.getter(v88);
      v90 = static os_log_type_t.default.getter(v89);
      if (os_log_type_enabled(v89, v90))
      {
        v91 = (uint8_t *)swift_slowAlloc(12, -1);
        v92 = swift_slowAlloc(32, -1);
        v199[0] = v92;
        *(_DWORD *)v91 = 136446210;
        v93 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v94 = dispatch thunk of CustomStringConvertible.description.getter(v52, v93);
        v200 = (_QWORD *)sub_100016940(v94, v95, v199);
        v69 = (uint64_t)v181;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v91 + 4, v91 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v87, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v89, v90, "Queue not needed for group %{public}s", v91, 0xCu);
        swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v92, -1, -1);
        swift_slowDealloc(v91, -1, -1);
      }
      else
      {
        sub_1000126B0(v87, type metadata accessor for OwnedBeaconGroup);
      }

      sub_1005D9BD4(v182, v69, v196, (uint64_t)v193, v194, a6);
      return sub_1000126B0(v69, type metadata accessor for OwnedBeaconGroup);
    }
    sub_10036AC6C();
    v75 = v180;
    sub_1000FC598(v76, v180);
    swift_bridgeObjectRelease();
    v77 = v195;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v195 + 48))(v75, 1, v52) == 1)
      break;
    v175 = v72;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 32))(v183, v75, v52);
    if (qword_1010E9CF0 != -1)
      swift_once(&qword_1010E9CF0, sub_10058CADC);
    v96 = qword_1011B7160;
    v97 = objc_autoreleasePoolPush();
    v98 = sub_10001A9A8(&qword_1010F7770);
    OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v96, v98);
    v99 = v199[0];
    v100 = *(_QWORD *)(v199[0] + 16);
    v101 = (uint64_t)v189;
    v170[1] = v50;
    if (!v100)
    {
      swift_bridgeObjectRelease();
      v108 = _swiftEmptyArrayStorage;
      v46 = v190;
      v44 = v192;
      goto LABEL_55;
    }
    v102 = sub_100003FB0(v183);
    v44 = v192;
    if ((v103 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v108 = _swiftEmptyArrayStorage;
      v46 = v190;
      goto LABEL_55;
    }
    v104 = *(_QWORD *)(*(_QWORD *)(v99 + 56) + 8 * v102);
    swift_bridgeObjectRetain(v104);
    swift_bridgeObjectRelease();
    v105 = sub_100508D98(v104);
    swift_bridgeObjectRelease();
    sub_10088FD00((uint64_t)v105);
    v46 = v106;
    swift_release();
    v107 = v46;
    v108 = _swiftEmptyArrayStorage;
    v200 = _swiftEmptyArrayStorage;
    v179 = *((_QWORD *)v46 + 2);
    if (!v179)
    {
      v46 = v190;
LABEL_54:
      swift_release();
LABEL_55:
      objc_autoreleasePoolPop(v97);
      v133 = v184;
      sub_100A797E8((uint64_t)v108, v184);
      swift_bridgeObjectRelease();
      v134 = v177;
      sub_10000F9B8(v133, v177, &qword_1010EF660);
      v135 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v188 + 48);
      v136 = v191;
      if (v135(v134, 1, v191) == 1)
      {
        sub_100004048(v134, &qword_1010EF660);
      }
      else
      {
        sub_1000126EC(v134, v57, type metadata accessor for BeaconObservation);
        v137 = sub_10005972C(v57, (uint64_t)v34, type metadata accessor for BeaconObservation);
        v138 = Logger.logObject.getter(v137);
        v139 = static os_log_type_t.debug.getter(v138);
        if (os_log_type_enabled(v138, v139))
        {
          v140 = (uint8_t *)swift_slowAlloc(12, -1);
          v141 = swift_slowAlloc(32, -1);
          v199[0] = v141;
          *(_DWORD *)v140 = 136315138;
          v142 = sub_1006EC890();
          v200 = (_QWORD *)sub_100016940(v142, v143, v199);
          v69 = (uint64_t)v181;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v140 + 4, v140 + 12);
          swift_bridgeObjectRelease();
          sub_1000126B0((uint64_t)v34, type metadata accessor for BeaconObservation);
          _os_log_impl((void *)&_mh_execute_header, v138, v139, "Found observation %s", v140, 0xCu);
          swift_arrayDestroy(v141, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v141, -1, -1);
          v144 = v140;
          v46 = v190;
          swift_slowDealloc(v144, -1, -1);

        }
        else
        {

          sub_1000126B0((uint64_t)v34, type metadata accessor for BeaconObservation);
        }
        sub_1000126B0(v57, type metadata accessor for BeaconObservation);
        v136 = v191;
        v44 = v192;
      }
      sub_10000F9B8(v184, (uint64_t)v44, &qword_1010EF660);
      v145 = v135((uint64_t)v44, 1, v136);
      v146 = v174;
      if (v145 == 1)
      {
        sub_100004048((uint64_t)v44, &qword_1010EF660);
        v147 = v187;
        goto LABEL_66;
      }
      v148 = v44[*(int *)(v136 + 24)];
      sub_1000126B0((uint64_t)v44, type metadata accessor for BeaconObservation);
      v147 = v187;
      if (v148 == 23)
      {
        v149 = v173(v46, v146, v187);
        v150 = Logger.logObject.getter(v149);
        v151 = static os_log_type_t.error.getter(v150);
        if (os_log_type_enabled(v150, v151))
        {
          v152 = v46;
          v153 = (uint8_t *)swift_slowAlloc(12, -1);
          v154 = swift_slowAlloc(32, -1);
          v199[0] = v154;
          *(_DWORD *)v153 = 136315138;
          v155 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v156 = dispatch thunk of CustomStringConvertible.description.getter(v147, v155);
          v200 = (_QWORD *)sub_100016940(v156, v157, v199);
          v69 = (uint64_t)v181;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v153 + 4, v153 + 12);
          swift_bridgeObjectRelease();
          v158 = (void (*)(uint64_t, uint64_t))v172;
          v172(v152, v147);
          v159 = v151;
          v160 = v158;
          _os_log_impl((void *)&_mh_execute_header, v150, v159, "Play Sound has already been queued for groupIdentifier: %s", v153, 0xCu);
          swift_arrayDestroy(v154, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v154, -1, -1);
          swift_slowDealloc(v153, -1, -1);
        }
        else
        {
          v160 = (void (*)(uint64_t, uint64_t))v172;
          v172(v46, v147);
        }

        type metadata accessor for CommandError(0);
        v164 = v166;
        v165 = 11;
LABEL_73:
        v200 = (_QWORD *)v165;
        v167 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
        v168 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
        _BridgedStoredNSError.init(_:userInfo:)(v199, &v200, v167, v164, v168);
        v169 = (void *)v199[0];
        v193(v199[0]);

      }
      else
      {
LABEL_66:
        v161 = (uint64_t)v176;
        v173(v176, v146, v147);
        if (v196 == 4)
        {
          v160 = (void (*)(uint64_t, uint64_t))v172;
          v172((char *)v161, v147);
          sub_1005FB708(v146);
        }
        else
        {
          v162 = sub_1005FB2CC(v161);
          v160 = (void (*)(uint64_t, uint64_t))v172;
          v172((char *)v161, v147);
          if (v162)
          {
            type metadata accessor for CommandError(0);
            v164 = v163;
            v165 = 10;
            goto LABEL_73;
          }
        }
        sub_1005D9BD4(v182, v69, v196, (uint64_t)v193, v194, a6);
      }
      sub_100004048(v184, &qword_1010EF660);
      v160(v183, v147);
      return sub_1000126B0(v69, type metadata accessor for OwnedBeaconGroup);
    }
    v171 = (uint64_t)v97;
    v109 = 0;
    v178 = v46;
LABEL_29:
    if (v109 < *((_QWORD *)v107 + 2))
    {
      v110 = (*(unsigned __int8 *)(v188 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v188 + 80);
      v111 = *(_QWORD *)(v188 + 72);
      v195 = v109 + 1;
      v185 = v110;
      v180 = v111;
      sub_10005972C((uint64_t)&v107[v110 + v111 * v109], v101, type metadata accessor for BeaconObservation);
      sub_100374684();
      v112 = Set.init(minimumCapacity:)(7);
      v113 = 0;
      v114 = v112 + 56;
      while (1)
      {
        v115 = *((char *)&off_101049E10 + v113++ + 32);
        Hasher.init(_seed:)(v199);
        v116 = qword_100E452A0[v115];
        Hasher._combine(_:)(v116);
        v117 = Hasher._finalize()();
        v118 = -1 << *(_BYTE *)(v112 + 32);
        v119 = v117 & ~v118;
        if (((*(_QWORD *)(v114 + ((v119 >> 3) & 0xFFFFFFFFFFFFF8)) >> v119) & 1) == 0)
          goto LABEL_38;
        v120 = *(_QWORD *)(v112 + 48);
        if (qword_100E452A0[*(char *)(v120 + v119)] == v116)
        {
LABEL_31:
          if (v113 == 7)
            goto LABEL_40;
        }
        else
        {
          v121 = ~v118;
          while (1)
          {
            v119 = (v119 + 1) & v121;
            if (((*(_QWORD *)(v114 + ((v119 >> 3) & 0xFFFFFFFFFFFFF8)) >> v119) & 1) == 0)
              break;
            if (qword_100E452A0[*(char *)(v120 + v119)] == v116)
              goto LABEL_31;
          }
LABEL_38:
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v112);
          v199[0] = v112;
          sub_100A1F790(v115, v119, isUniquelyReferenced_nonNull_native);
          v112 = v199[0];
          swift_bridgeObjectRelease();
          if (v113 == 7)
          {
LABEL_40:
            v101 = (uint64_t)v189;
            v123 = sub_100A07E5C(v189[*(int *)(v191 + 24)], v112);
            swift_bridgeObjectRelease();
            if (v123)
            {
              sub_1000126EC(v101, v186, type metadata accessor for BeaconObservation);
              v124 = v200;
              v125 = swift_isUniquelyReferenced_nonNull_native(v200);
              v34 = v197;
              v57 = (uint64_t)v198;
              if ((v125 & 1) == 0)
              {
                sub_10009AAC8(0, v124[2] + 1, 1);
                v124 = v200;
              }
              v127 = v124[2];
              v126 = v124[3];
              if (v127 >= v126 >> 1)
              {
                sub_10009AAC8(v126 > 1, v127 + 1, 1);
                v124 = v200;
              }
              v124[2] = v127 + 1;
              sub_1000126EC(v186, (uint64_t)v124 + v185 + v127 * v180, type metadata accessor for BeaconObservation);
              v46 = v190;
              v44 = v192;
            }
            else
            {
              sub_1000126B0(v101, type metadata accessor for BeaconObservation);
              v46 = v190;
              v44 = v192;
              v34 = v197;
              v57 = (uint64_t)v198;
            }
            v109 = v195;
            v107 = v178;
            if (v195 == v179)
            {
              v108 = v200;
              v69 = (uint64_t)v181;
              v97 = (void *)v171;
              goto LABEL_54;
            }
            goto LABEL_29;
          }
          v114 = v112 + 56;
        }
      }
    }
    __break(1u);
LABEL_77:
    swift_once(&qword_1010E9D28, sub_1005D439C);
  }
  sub_100004048(v75, &qword_1010ED860);
  v78 = v178;
  v79 = v173(v178, v174, v52);
  v80 = Logger.logObject.getter(v79);
  v81 = static os_log_type_t.error.getter(v80);
  if (os_log_type_enabled(v80, v81))
  {
    v82 = (uint8_t *)swift_slowAlloc(12, -1);
    v83 = swift_slowAlloc(32, -1);
    v199[0] = v83;
    *(_DWORD *)v82 = 136315138;
    v84 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v85 = dispatch thunk of CustomStringConvertible.description.getter(v52, v84);
    v200 = (_QWORD *)sub_100016940(v85, v86, v199);
    v69 = (uint64_t)v181;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v201, v82 + 4, v82 + 12);
    swift_bridgeObjectRelease();
    v172(v78, v52);
    _os_log_impl((void *)&_mh_execute_header, v80, v81, "Group %s has no member!", v82, 0xCu);
    swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v83, -1, -1);
    swift_slowDealloc(v82, -1, -1);
  }
  else
  {
    v172(v78, v52);
  }

  type metadata accessor for CommandError(0);
  v129 = v128;
  v200 = 0;
  v130 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v131 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
  _BridgedStoredNSError.init(_:userInfo:)(v199, &v200, v130, v129, v131);
  v132 = (void *)v199[0];
  v193(v199[0]);

  return sub_1000126B0(v69, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_1005D841C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v55;
  int v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  void **v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void **v75;
  void *v76;
  unint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t i;
  uint64_t v92;
  Swift::UInt v93;
  Swift::Int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  void **v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int (*v122)(uint64_t, uint64_t, uint64_t);
  uint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  uint8_t *v126;
  void **v127;
  void **v128;
  uint64_t v129;
  unint64_t v130;
  void **v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  char *v136;
  uint64_t v137;
  NSObject *v138;
  os_log_type_t v139;
  uint8_t *v140;
  void **v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  BOOL v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  char *v184;
  void (*v185)(char *, uint64_t);
  uint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t (*v204)(char *, uint64_t, uint64_t);
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void **aBlock;
  uint64_t v218;
  uint64_t (*v219)(uint64_t);
  void *v220;
  void (*v221)();
  uint64_t v222;
  uint64_t v223;
  char v224[8];

  v214 = a5;
  v213 = a4;
  v216 = a3;
  v211 = a1;
  v201 = type metadata accessor for DispatchWorkItemFlags(0);
  v198 = *(_QWORD *)(v201 - 8);
  __chkstk_darwin(v201);
  v197 = (char *)&v182 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = type metadata accessor for DispatchQoS(0);
  v200 = *(_QWORD *)(v202 - 8);
  __chkstk_darwin(v202);
  v199 = (char *)&v182 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = type metadata accessor for DispatchQoS.QoSClass(0);
  v195 = *(_QWORD *)(v196 - 8);
  __chkstk_darwin(v196);
  v194 = (char *)&v182 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BeaconObservation(0);
  v210 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v182 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v207 = (uint64_t)&v182 - v16;
  v17 = __chkstk_darwin(v15);
  v215 = (uint64_t)&v182 - v18;
  __chkstk_darwin(v17);
  v193 = (char *)&v182 - v19;
  v20 = sub_10001A9A8(&qword_1010EF660);
  v21 = __chkstk_darwin(v20);
  v191 = (uint64_t)&v182 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v190 = (uint64_t)&v182 - v24;
  __chkstk_darwin(v23);
  v203 = (uint64_t)&v182 - v25;
  v26 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v26);
  v28 = (char *)&v182 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for UUID(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = __chkstk_darwin(v29);
  v192 = (char *)&v182 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v188 = (char *)&v182 - v34;
  v35 = __chkstk_darwin(v33);
  v189 = (char *)&v182 - v36;
  __chkstk_darwin(v35);
  v38 = (char *)&v182 - v37;
  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v39 = type metadata accessor for Logger(0);
  v40 = sub_10001A9E8(v39, (uint64_t)qword_1011B71E0);
  v204 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 16);
  v41 = v204(v38, a2, v29);
  v206 = v40;
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.default.getter(v42);
  v44 = os_log_type_enabled(v42, v43);
  v205 = v29;
  if (v44)
  {
    v212 = v14;
    v209 = v11;
    v208 = a2;
    v45 = swift_slowAlloc(32, -1);
    v46 = (void **)swift_slowAlloc(64, -1);
    aBlock = v46;
    *(_DWORD *)v45 = 136315650;
    v47 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v48 = dispatch thunk of CustomStringConvertible.description.getter(v29, v47);
    v223 = sub_100016940(v48, v49, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v45 + 4, v45 + 12);
    swift_bridgeObjectRelease();
    v50 = *(void (**)(char *, uint64_t))(v30 + 8);
    v50(v38, v29);
    *(_WORD *)(v45 + 12) = 2080;
    v51 = 0x746C75616665642ELL;
    v52 = 0xE800000000000000;
    switch(v216)
    {
      case 0:
        break;
      case 1:
        v51 = 0x676E69676E61722ELL;
        break;
      case 2:
        v51 = 0x6E696B636172742ELL;
        v52 = 0xE900000000000067;
        break;
      case 3:
        v52 = 0x8000000100ED1070;
        v51 = 0xD000000000000010;
        break;
      case 4:
        v52 = 0xEF64656D7269666ELL;
        v51 = 0x6F4365756575712ELL;
        break;
      case 5:
        v52 = 0xEE0074726F685367;
        v51 = 0x6E696B636172742ELL;
        break;
      default:
        v52 = 0xE700000000000000;
        v51 = 0x6E776F6E6B6E75;
        break;
    }
    v223 = sub_100016940(v51, v52, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v45 + 14, v45 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v45 + 22) = 2048;
    v223 = *(_QWORD *)&a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v45 + 24, v45 + 32);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "playSoundSingle %s context %s timeout %f", (uint8_t *)v45, 0x20u);
    swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v45, -1, -1);

    a2 = v208;
    v11 = v209;
    v14 = v212;
  }
  else
  {
    v50 = *(void (**)(char *, uint64_t))(v30 + 8);
    v50(v38, v29);

  }
  sub_10080B648(a2, (uint64_t)&aBlock);
  v53 = v220;
  sub_100004048((uint64_t)&aBlock, (uint64_t *)&unk_1010EE310);
  if (v53)
  {
    if ((sub_1005DF5B4(a2) & 1) != 0)
      return sub_1005EB2FC(v211, a2, v216, v213, v214, a6);
    v68 = v211;
    v69 = a2;
    v70 = v216;
    return sub_1005EB9D0(v68, a6, v69, v70, v213, v214);
  }
  sub_10081C0CC(a2, (uint64_t)v28);
  v55 = type metadata accessor for WildModeAssociationRecord(0);
  v56 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 48))(v28, 1, v55);
  v57 = sub_100004048((uint64_t)v28, &qword_101102FB0);
  if (v56 == 1)
  {
    v58 = v192;
    v59 = v205;
    v60 = v204(v192, a2, v205);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.error.getter(v61);
    if (os_log_type_enabled(v61, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc(12, -1);
      v64 = (void **)swift_slowAlloc(32, -1);
      aBlock = v64;
      *(_DWORD *)v63 = 136315138;
      v65 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v66 = dispatch thunk of CustomStringConvertible.description.getter(v59, v65);
      v223 = sub_100016940(v66, v67, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v63 + 4, v63 + 12);
      swift_bridgeObjectRelease();
      v50(v58, v59);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Invalid beacon %s", v63, 0xCu);
      swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v63, -1, -1);
    }
    else
    {
      v50(v58, v59);
    }

    sub_10001F6FC();
    v106 = v195;
    v107 = v194;
    v108 = v196;
    (*(void (**)(char *, _QWORD, uint64_t))(v195 + 104))(v194, enum case for DispatchQoS.QoSClass.default(_:), v196);
    v109 = (void *)static OS_dispatch_queue.global(qos:)(v107);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v107, v108);
    v110 = swift_allocObject(&unk_101082380, 32, 7);
    v111 = v214;
    *(_QWORD *)(v110 + 16) = v213;
    *(_QWORD *)(v110 + 24) = v111;
    v221 = sub_1005FC590;
    v222 = v110;
    aBlock = _NSConcreteStackBlock;
    v218 = 1107296256;
    v112 = &unk_101082398;
LABEL_82:
    v219 = sub_100016FB8;
    v220 = v112;
    v173 = _Block_copy(&aBlock);
    v174 = swift_retain();
    v175 = v199;
    static DispatchQoS.unspecified.getter(v174);
    v223 = (uint64_t)_swiftEmptyArrayStorage;
    v176 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v177 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v178 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v179 = v197;
    v180 = v177;
    v181 = v201;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v223, v180, v178, v201, v176);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v175, v179, v173);
    _Block_release(v173);

    (*(void (**)(char *, uint64_t))(v198 + 8))(v179, v181);
    (*(void (**)(char *, uint64_t))(v200 + 8))(v175, v202);
    return swift_release();
  }
  v71 = v193;
  if (v216 != 2)
  {
    if (v216 == 5)
    {
      v68 = v211;
      v69 = a2;
      v70 = 5;
      return sub_1005EB9D0(v68, a6, v69, v70, v213, v214);
    }
    if (v216 != 4)
    {
      v113 = Logger.logObject.getter(v57);
      v114 = static os_log_type_t.error.getter(v113);
      if (os_log_type_enabled(v113, v114))
      {
        v115 = (uint8_t *)swift_slowAlloc(12, -1);
        v116 = (void **)swift_slowAlloc(32, -1);
        aBlock = v116;
        *(_DWORD *)v115 = 136315138;
        v117 = 0x746C75616665642ELL;
        v118 = 0xE800000000000000;
        switch(v216)
        {
          case 0:
            break;
          case 1:
            v117 = 0x676E69676E61722ELL;
            break;
          case 2:
            v117 = 0x6E696B636172742ELL;
            v118 = 0xE900000000000067;
            break;
          case 3:
            v118 = 0x8000000100ED1070;
            v117 = 0xD000000000000010;
            break;
          default:
            v118 = 0xE700000000000000;
            v117 = 0x6E776F6E6B6E75;
            break;
        }
        v223 = sub_100016940(v117, v118, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v115 + 4, v115 + 12);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v113, v114, "Invalid context for UT play sound %s", v115, 0xCu);
        swift_arrayDestroy(v116, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v116, -1, -1);
        swift_slowDealloc(v115, -1, -1);
      }

      sub_10001F6FC();
      v168 = v195;
      v169 = v194;
      v170 = v196;
      (*(void (**)(char *, _QWORD, uint64_t))(v195 + 104))(v194, enum case for DispatchQoS.QoSClass.default(_:), v196);
      v109 = (void *)static OS_dispatch_queue.global(qos:)(v169);
      (*(void (**)(char *, uint64_t))(v168 + 8))(v169, v170);
      v171 = swift_allocObject(&unk_1010823D0, 32, 7);
      v172 = v214;
      *(_QWORD *)(v171 + 16) = v213;
      *(_QWORD *)(v171 + 24) = v172;
      v221 = sub_1005FD5F8;
      v222 = v171;
      aBlock = _NSConcreteStackBlock;
      v218 = 1107296256;
      v112 = &unk_1010823E8;
      goto LABEL_82;
    }
  }
  v212 = v14;
  if (qword_1010E9CF0 != -1)
    goto LABEL_85;
LABEL_25:
  v72 = qword_1011B7160;
  v73 = objc_autoreleasePoolPush();
  v74 = sub_10001A9A8(&qword_1010F7770);
  OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v72, v74);
  v75 = aBlock;
  v76 = aBlock[2];
  v185 = v50;
  if (!v76)
  {
    swift_bridgeObjectRelease();
    v85 = _swiftEmptyArrayStorage;
    v78 = (uint64_t)v212;
    goto LABEL_58;
  }
  v77 = sub_100003FB0(a2);
  v78 = (uint64_t)v212;
  if ((v79 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v85 = _swiftEmptyArrayStorage;
    goto LABEL_58;
  }
  v80 = *((_QWORD *)v75[7] + v77);
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRelease();
  v81 = sub_100508D98(v80);
  swift_bridgeObjectRelease();
  sub_10088FD00((uint64_t)v81);
  v83 = v82;
  swift_release();
  v84 = v83;
  v85 = _swiftEmptyArrayStorage;
  v223 = (uint64_t)_swiftEmptyArrayStorage;
  v184 = *(char **)(v84 + 16);
  if (v184)
  {
    v182 = v73;
    v86 = 0;
    v71 = qword_100E452A0;
    v208 = a2;
    v209 = v11;
    v183 = v84;
    while (1)
    {
      if ((unint64_t)v86 >= *(_QWORD *)(v84 + 16))
      {
        __break(1u);
LABEL_85:
        swift_once(&qword_1010E9CF0, sub_10058CADC);
        goto LABEL_25;
      }
      v87 = (*(unsigned __int8 *)(v210 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v210 + 80);
      v88 = *(_QWORD *)(v210 + 72);
      v192 = v86 + 1;
      v187 = v87;
      v186 = v88;
      sub_10005972C(v84 + v87 + v88 * (_QWORD)v86, v215, type metadata accessor for BeaconObservation);
      sub_100374684();
      v89 = Set.init(minimumCapacity:)(7);
      v90 = 0;
      for (i = v89 + 56; ; i = v89 + 56)
      {
        while (1)
        {
          v92 = *((char *)&off_101049DE8 + v90++ + 32);
          Hasher.init(_seed:)(&aBlock);
          v93 = qword_100E452A0[v92];
          Hasher._combine(_:)(v93);
          v94 = Hasher._finalize()();
          v95 = -1 << *(_BYTE *)(v89 + 32);
          v96 = v94 & ~v95;
          if (((*(_QWORD *)(i + ((v96 >> 3) & 0xFFFFFFFFFFFFF8)) >> v96) & 1) == 0)
            goto LABEL_40;
          v97 = *(_QWORD *)(v89 + 48);
          if (qword_100E452A0[*(char *)(v97 + v96)] != v93)
            break;
LABEL_33:
          if (v90 == 7)
            goto LABEL_42;
        }
        v98 = ~v95;
        while (1)
        {
          v96 = (v96 + 1) & v98;
          if (((*(_QWORD *)(i + ((v96 >> 3) & 0xFFFFFFFFFFFFF8)) >> v96) & 1) == 0)
            break;
          if (qword_100E452A0[*(char *)(v97 + v96)] == v93)
            goto LABEL_33;
        }
LABEL_40:
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v89);
        aBlock = (void **)v89;
        sub_100A1F790(v92, v96, isUniquelyReferenced_nonNull_native);
        v89 = (uint64_t)aBlock;
        swift_bridgeObjectRelease();
        if (v90 == 7)
          break;
      }
LABEL_42:
      v11 = v209;
      v100 = v215;
      v101 = sub_100A07E5C(*(_BYTE *)(v215 + *(int *)(v209 + 24)), v89);
      swift_bridgeObjectRelease();
      if (v101)
      {
        sub_1000126EC(v100, v207, type metadata accessor for BeaconObservation);
        v102 = v223;
        v103 = swift_isUniquelyReferenced_nonNull_native(v223);
        a2 = v208;
        v50 = v185;
        if ((v103 & 1) == 0)
        {
          sub_10009AAC8(0, *(_QWORD *)(v102 + 16) + 1, 1);
          v102 = v223;
        }
        v105 = *(_QWORD *)(v102 + 16);
        v104 = *(_QWORD *)(v102 + 24);
        if (v105 >= v104 >> 1)
        {
          sub_10009AAC8(v104 > 1, v105 + 1, 1);
          v102 = v223;
        }
        *(_QWORD *)(v102 + 16) = v105 + 1;
        sub_1000126EC(v207, v102 + v187 + v105 * v186, type metadata accessor for BeaconObservation);
      }
      else
      {
        sub_1000126B0(v100, type metadata accessor for BeaconObservation);
        a2 = v208;
        v50 = v185;
      }
      v78 = (uint64_t)v212;
      v86 = v192;
      v84 = v183;
      if (v192 == v184)
      {
        v85 = (_QWORD *)v223;
        v71 = v193;
        v73 = v182;
        break;
      }
    }
  }
  swift_release();
LABEL_58:
  objc_autoreleasePoolPop(v73);
  v119 = v203;
  sub_100A797E8((uint64_t)v85, v203);
  swift_bridgeObjectRelease();
  v120 = v119;
  v121 = v190;
  sub_10000F9B8(v120, v190, &qword_1010EF660);
  v122 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v210 + 48);
  if (v122(v121, 1, v11) == 1)
  {
    sub_100004048(v121, &qword_1010EF660);
  }
  else
  {
    sub_1000126EC(v121, (uint64_t)v71, type metadata accessor for BeaconObservation);
    v123 = sub_10005972C((uint64_t)v71, v78, type metadata accessor for BeaconObservation);
    v124 = Logger.logObject.getter(v123);
    v125 = static os_log_type_t.debug.getter(v124);
    if (os_log_type_enabled(v124, v125))
    {
      v126 = (uint8_t *)swift_slowAlloc(12, -1);
      v127 = (void **)swift_slowAlloc(32, -1);
      v209 = v11;
      v128 = v127;
      aBlock = v127;
      *(_DWORD *)v126 = 136315138;
      v129 = sub_1006EC890();
      v223 = sub_100016940(v129, v130, (uint64_t *)&aBlock);
      v50 = v185;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v126 + 4, v126 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v212, type metadata accessor for BeaconObservation);
      _os_log_impl((void *)&_mh_execute_header, v124, v125, "Found observation %s", v126, 0xCu);
      swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
      v131 = v128;
      v11 = v209;
      swift_slowDealloc(v131, -1, -1);
      swift_slowDealloc(v126, -1, -1);

      v132 = (uint64_t)v193;
    }
    else
    {

      sub_1000126B0(v78, type metadata accessor for BeaconObservation);
      v132 = (uint64_t)v71;
    }
    sub_1000126B0(v132, type metadata accessor for BeaconObservation);
  }
  v133 = v191;
  sub_10000F9B8(v203, v191, &qword_1010EF660);
  if (v122(v133, 1, v11) == 1)
  {
    sub_100004048(v133, &qword_1010EF660);
    v134 = v205;
    goto LABEL_69;
  }
  v135 = *(unsigned __int8 *)(v133 + *(int *)(v11 + 24));
  sub_1000126B0(v133, type metadata accessor for BeaconObservation);
  v134 = v205;
  if (v135 == 23)
  {
    v136 = v188;
    v137 = v204(v188, a2, v205);
    v138 = Logger.logObject.getter(v137);
    v139 = static os_log_type_t.error.getter(v138);
    if (os_log_type_enabled(v138, v139))
    {
      v140 = (uint8_t *)swift_slowAlloc(12, -1);
      v141 = (void **)swift_slowAlloc(32, -1);
      aBlock = v141;
      *(_DWORD *)v140 = 136315138;
      v142 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v143 = dispatch thunk of CustomStringConvertible.description.getter(v134, v142);
      v223 = sub_100016940(v143, v144, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v140 + 4, v140 + 12);
      swift_bridgeObjectRelease();
      v50(v136, v134);
      _os_log_impl((void *)&_mh_execute_header, v138, v139, "Play Sound has already been queued for: %s", v140, 0xCu);
      swift_arrayDestroy(v141, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v141, -1, -1);
      swift_slowDealloc(v140, -1, -1);
    }
    else
    {
      v50(v136, v134);
    }

    sub_10001F6FC();
    v154 = v195;
    v155 = v194;
    v156 = v196;
    (*(void (**)(char *, _QWORD, uint64_t))(v195 + 104))(v194, enum case for DispatchQoS.QoSClass.default(_:), v196);
    v150 = (void *)static OS_dispatch_queue.global(qos:)(v155);
    (*(void (**)(char *, uint64_t))(v154 + 8))(v155, v156);
    v157 = swift_allocObject(&unk_101082470, 32, 7);
    v158 = v214;
    *(_QWORD *)(v157 + 16) = v213;
    *(_QWORD *)(v157 + 24) = v158;
    v221 = sub_1005FC5C8;
    v222 = v157;
    aBlock = _NSConcreteStackBlock;
    v218 = 1107296256;
    v153 = &unk_101082488;
LABEL_76:
    v219 = sub_100016FB8;
    v220 = v153;
    v159 = _Block_copy(&aBlock);
    v160 = swift_retain();
    v161 = v199;
    static DispatchQoS.unspecified.getter(v160);
    v223 = (uint64_t)_swiftEmptyArrayStorage;
    v162 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v163 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v164 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v165 = v197;
    v166 = v163;
    v167 = v201;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v223, v166, v164, v201, v162);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v161, v165, v159);
    _Block_release(v159);

    (*(void (**)(char *, uint64_t))(v198 + 8))(v165, v167);
    (*(void (**)(char *, uint64_t))(v200 + 8))(v161, v202);
    sub_100004048(v203, &qword_1010EF660);
    return swift_release();
  }
  else
  {
LABEL_69:
    v145 = (uint64_t)v189;
    v204(v189, a2, v134);
    if (v216 == 4)
    {
      v50((char *)v145, v134);
      sub_1005FB708(a2);
    }
    else
    {
      v146 = sub_1005FB2CC(v145);
      v50((char *)v145, v134);
      if (v146)
      {
        sub_10001F6FC();
        v147 = v195;
        v148 = v194;
        v149 = v196;
        (*(void (**)(char *, _QWORD, uint64_t))(v195 + 104))(v194, enum case for DispatchQoS.QoSClass.default(_:), v196);
        v150 = (void *)static OS_dispatch_queue.global(qos:)(v148);
        (*(void (**)(char *, uint64_t))(v147 + 8))(v148, v149);
        v151 = swift_allocObject(&unk_101082420, 32, 7);
        v152 = v214;
        *(_QWORD *)(v151 + 16) = v213;
        *(_QWORD *)(v151 + 24) = v152;
        v221 = sub_1005FC5AC;
        v222 = v151;
        aBlock = _NSConcreteStackBlock;
        v218 = 1107296256;
        v153 = &unk_101082438;
        goto LABEL_76;
      }
    }
    sub_1005EB2FC(v211, a2, 2, v213, v214, a6);
    return sub_100004048(v203, &qword_1010EF660);
  }
}

void sub_1005D9BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  void *v6;
  void *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char v32;
  char v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  BOOL v55;
  unint64_t v56;
  int64_t v57;
  void (*v58)(char *, unint64_t, uint64_t);
  void (*v59)(char *, char *, uint64_t);
  id v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t My;
  _QWORD *v66;
  uint64_t v67;
  double Current;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t ObjectType;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  char *v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  int64_t v141;
  unsigned int v142;
  char *v143;
  __int128 v144;
  int v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char v157[8];
  _QWORD v158[4];
  _QWORD *v159;
  double aBlock;
  uint64_t v161;
  uint64_t (*v162)(uint64_t);
  void *v163;
  uint64_t v164;
  uint64_t v165;

  v7 = v6;
  v123 = a5;
  v122 = a4;
  v121 = a3;
  v120 = a1;
  v129 = type metadata accessor for DispatchWorkItemFlags(0);
  v128 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v127 = (char *)&v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for DispatchQoS(0);
  v125 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v124 = (char *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for DispatchQoS.QoSClass(0);
  v118 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v117 = (char *)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OwnedBeaconGroup(0);
  v132 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v133 = v14;
  v134 = (uint64_t)&v116 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v15);
  v135 = (char *)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v137);
  v136 = (uint64_t)&v116 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = type metadata accessor for Date(0);
  v152 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153);
  v143 = (char *)&v116 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for BeaconObservation(0);
  v148 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v147 = (char *)&v116 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v156 = (char *)&v116 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v25 = (char *)&v116 - v24;
  v26 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v26);
  v150 = (char *)&v116 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10036AC6C();
  v29 = v28;
  v30 = v7;
  v31 = 0;
  sub_1005FA0C4(v29, (uint64_t)v30);
  v33 = v32;
  swift_bridgeObjectRelease();
  v131 = v30;

  v34 = v25;
  if ((v33 & 1) != 0)
    v35 = 23;
  else
    v35 = 24;
  v145 = v35;
  v130 = a2;
  sub_10036AC6C();
  v37 = *(_QWORD *)(v36 + 56);
  v140 = v36 + 56;
  v38 = 1 << *(_BYTE *)(v36 + 32);
  v39 = -1;
  if (v38 < 64)
    v39 = ~(-1 << v38);
  v40 = v39 & v37;
  v141 = (unint64_t)(v38 + 63) >> 6;
  v142 = enum case for Feature.FindMy.trustedNowUsesReferenceClock(_:);
  v151 = v36;
  swift_bridgeObjectRetain(v36);
  v41 = 0;
  v139 = &type metadata for () + 1;
  v144 = xmmword_100E22B00;
  v146 = v25;
  while (1)
  {
    if (v40)
    {
      v50 = __clz(__rbit64(v40));
      v51 = (v40 - 1) & v40;
      v52 = v50 | (v41 << 6);
      v53 = v152;
      v54 = v150;
      goto LABEL_26;
    }
    v55 = __OFADD__(v41++, 1);
    v53 = v152;
    if (v55)
    {
      __break(1u);
      goto LABEL_62;
    }
    v54 = v150;
    if (v41 >= v141)
      goto LABEL_58;
    v56 = *(_QWORD *)(v140 + 8 * v41);
    if (!v56)
      break;
LABEL_25:
    v51 = (v56 - 1) & v56;
    v52 = __clz(__rbit64(v56)) + (v41 << 6);
LABEL_26:
    v58 = *(void (**)(char *, unint64_t, uint64_t))(v21 + 16);
    v58(v54, *(_QWORD *)(v151 + 48) + *(_QWORD *)(v21 + 72) * v52, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v54, 0, 1, v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v54, 1, v20) == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      v87 = v130;
LABEL_59:
      v88 = v131;
      sub_1007EEF64(10);
      v89 = *(NSObject **)&v88[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
      v90 = v134;
      sub_10005972C(v87, v134, type metadata accessor for OwnedBeaconGroup);
      v91 = *(unsigned __int8 *)(v132 + 80);
      v92 = (v91 + 16) & ~v91;
      v93 = v87;
      v94 = (v133 + v92 + 7) & 0xFFFFFFFFFFFFFFF8;
      v95 = swift_allocObject(&unk_101082038, v94 + 8, v91 | 7);
      sub_1000126EC(v90, v95 + v92, type metadata accessor for OwnedBeaconGroup);
      *(_QWORD *)(v95 + v94) = v88;
      v96 = swift_allocObject(&unk_101082060, 32, 7);
      *(_QWORD *)(v96 + 16) = sub_1005FB994;
      *(_QWORD *)(v96 + 24) = v95;
      v164 = (uint64_t)sub_10001D850;
      v165 = v96;
      aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
      v161 = 1107296256;
      v162 = sub_10001D8B8;
      v163 = &unk_101082078;
      v97 = _Block_copy(&aBlock);
      v98 = v88;
      swift_retain();
      swift_release();
      dispatch_sync(v89, v97);
      _Block_release(v97);
      LOBYTE(v89) = swift_isEscapingClosureAtFileLocation(v96, "", 129, 426, 27, 1);
      swift_release();
      if ((v89 & 1) == 0)
      {
        v99 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v99);
        *(&v116 - 6) = (uint64_t)v98;
        *(&v116 - 5) = v93;
        *((double *)&v116 - 4) = a6;
        v100 = v121;
        *(&v116 - 3) = v120;
        *(&v116 - 2) = v100;
        static Transaction.named<A>(_:with:)("SoundPlaybackManager.queuePlaySound", 35, 2, sub_1005FBA0C, &v116 - 8);
        sub_10001F6FC();
        v101 = v118;
        v102 = v117;
        v103 = v119;
        (*(void (**)(char *, _QWORD, uint64_t))(v118 + 104))(v117, enum case for DispatchQoS.QoSClass.default(_:), v119);
        v104 = (void *)static OS_dispatch_queue.global(qos:)(v102);
        (*(void (**)(char *, uint64_t))(v101 + 8))(v102, v103);
        v105 = swift_allocObject(&unk_1010820B0, 32, 7);
        v106 = v123;
        *(_QWORD *)(v105 + 16) = v122;
        *(_QWORD *)(v105 + 24) = v106;
        v164 = (uint64_t)sub_1002A3AD4;
        v165 = v105;
        aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
        v161 = 1107296256;
        v162 = sub_100016FB8;
        v163 = &unk_1010820C8;
        v107 = _Block_copy(&aBlock);
        v108 = swift_retain();
        v109 = v124;
        static DispatchQoS.unspecified.getter(v108);
        v159 = _swiftEmptyArrayStorage;
        v110 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v111 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v112 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v113 = v127;
        v114 = v111;
        v115 = v129;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v159, v114, v112, v129, v110);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v109, v113, v107);
        _Block_release(v107);

        (*(void (**)(char *, uint64_t))(v128 + 8))(v113, v115);
        (*(void (**)(char *, uint64_t))(v125 + 8))(v109, v126);
        swift_release();
        swift_release();
        return;
      }
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    v155 = v51;
    v59 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v59(v34, v54, v20);
    if (qword_1010E9CF0 != -1)
      swift_once(&qword_1010E9CF0, sub_10058CADC);
    v154 = qword_1011B7160;
    v58(v156, (unint64_t)v34, v20);
    if (qword_1010EA1D0 != -1)
      swift_once(&qword_1010EA1D0, sub_100B11444);
    aBlock = 7.45683732e247;
    *(double *)&v161 = -5.98008217e197;
    SynchronousCache.cachedValue<A>(key:computeBlock:)(&v159, &aBlock, sub_10001F628, 0, &type metadata for Bool);
    swift_bridgeObjectRelease();
    if (v159 == 1)
    {
      v60 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
      v61 = objc_msgSend(v60, "isInternalBuild");

      if (v61)
      {
        if (qword_1010E98B0 != -1)
          swift_once(&qword_1010E98B0, sub_10001F1E8);
        v62 = sub_10001A9E8(v137, (uint64_t)qword_1010E98B8);
        swift_beginAccess(v62, v157, 0, 0);
        v63 = v62;
        v64 = v136;
        sub_10000F9B8(v63, v136, (uint64_t *)&unk_1010EA690);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v64, 1, v153) != 1)
        {
          v42 = v143;
          (*(void (**)(void))(v53 + 32))();
          goto LABEL_8;
        }
        sub_100004048(v64, (uint64_t *)&unk_1010EA690);
      }
    }
    My = type metadata accessor for Feature.FindMy(0);
    v163 = (void *)My;
    v164 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v66 = sub_100018F08(&aBlock);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v66, v142, My);
    LOBYTE(My) = isFeatureEnabled(_:)(&aBlock);
    v67 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    if ((My & 1) == 0)
    {
      v42 = v143;
      Date.init()(v67);
      goto LABEL_8;
    }
    sub_100B3575C();
    Current = CFAbsoluteTimeGetCurrent();
    if (qword_1010EA1F8 != -1)
      swift_once(&qword_1010EA1F8, sub_100B35618);
    v69 = qword_101115B98;
    v70 = sub_10001A9A8(&qword_1010EBE48);
    v71 = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100033284, 0, v69, v139, v70);
    if (Current - aBlock - *(double *)&v161 > 86400.0)
    {
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100033298, 0, qword_101115B98, &type metadata for () + 1, &type metadata for () + 1);
      v138 = v31;
      v72 = type metadata accessor for TaskPriority(0);
      v73 = *(_QWORD *)(v72 - 8);
      v74 = (uint64_t)v135;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v73 + 56))(v135, 1, 1, v72);
      v75 = swift_allocObject(&unk_101082100, 32, 7);
      *(_QWORD *)(v75 + 16) = 0;
      v76 = (uint64_t *)(v75 + 16);
      *(_QWORD *)(v75 + 24) = 0;
      v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v74, 1, v72);
      if ((_DWORD)v77 == 1)
      {
        sub_100004048(v74, &qword_1010F46C0);
        v78 = 0;
        v79 = *v76;
        if (*v76)
          goto LABEL_43;
LABEL_47:
        v82 = 0;
        v84 = 0;
      }
      else
      {
        LOBYTE(v78) = TaskPriority.rawValue.getter(v77);
        (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v74, v72);
        v78 = v78;
        v79 = *v76;
        if (!*v76)
          goto LABEL_47;
LABEL_43:
        v80 = *(_QWORD *)(v75 + 24);
        ObjectType = swift_getObjectType(v79);
        swift_unknownObjectRetain(v79);
        v82 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v80);
        v84 = v83;
        swift_unknownObjectRelease(v79);
      }
      v42 = v143;
      v85 = swift_allocObject(&unk_101082128, 32, 7);
      *(_QWORD *)(v85 + 16) = &unk_101100B90;
      *(_QWORD *)(v85 + 24) = v75;
      if (v84 | v82)
      {
        v158[0] = 0;
        v158[1] = 0;
        v86 = v158;
        v158[2] = v82;
        v158[3] = v84;
      }
      else
      {
        v86 = 0;
      }
      v31 = v138;
      v53 = v152;
      swift_task_create(v78 | 0x1C00, v86, &type metadata for () + 1, &unk_101100B98, v85);
      v71 = swift_release();
      goto LABEL_52;
    }
    v42 = v143;
LABEL_52:
    Date.init(timeIntervalSinceReferenceDate:)(v71);
LABEL_8:
    v43 = (uint64_t)v147;
    v59(v147, v156, v20);
    v44 = v149;
    (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v43 + *(int *)(v149 + 20), v42, v153);
    *(_BYTE *)(v43 + *(int *)(v44 + 24)) = v145;
    v45 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
    v46 = *(unsigned __int8 *)(v148 + 80);
    v47 = (v46 + 32) & ~v46;
    v48 = swift_allocObject(v45, v47 + *(_QWORD *)(v148 + 72), v46 | 7);
    *(_OWORD *)(v48 + 16) = v144;
    sub_10005972C(v43, v48 + v47, type metadata accessor for BeaconObservation);
    v49 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v49);
    *(&v116 - 4) = v154;
    *(&v116 - 3) = v48;
    *(&v116 - 2) = 0;
    *(&v116 - 1) = 0;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, &v116 - 6, &type metadata for () + 1);
    swift_bridgeObjectRelease();
    sub_1000126B0(v43, type metadata accessor for BeaconObservation);
    v34 = v146;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v146, v20);
    v40 = v155;
  }
  v57 = v41 + 1;
  if (v41 + 1 >= v141)
    goto LABEL_58;
  v56 = *(_QWORD *)(v140 + 8 * v57);
  if (v56)
    goto LABEL_24;
  v57 = v41 + 2;
  if (v41 + 2 >= v141)
    goto LABEL_58;
  v56 = *(_QWORD *)(v140 + 8 * v57);
  if (v56)
    goto LABEL_24;
  v57 = v41 + 3;
  if (v41 + 3 >= v141)
    goto LABEL_58;
  v56 = *(_QWORD *)(v140 + 8 * v57);
  if (v56)
    goto LABEL_24;
  v57 = v41 + 4;
  if (v41 + 4 >= v141)
    goto LABEL_58;
  v56 = *(_QWORD *)(v140 + 8 * v57);
  if (v56)
    goto LABEL_24;
  v57 = v41 + 5;
  if (v41 + 5 >= v141)
  {
LABEL_58:
    v87 = v130;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v150, 1, 1, v20);
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_59;
  }
  v56 = *(_QWORD *)(v140 + 8 * v57);
  if (v56)
  {
LABEL_24:
    v41 = v57;
    goto LABEL_25;
  }
  while (1)
  {
    v41 = v57 + 1;
    if (__OFADD__(v57, 1))
      break;
    if (v41 >= v141)
      goto LABEL_58;
    v56 = *(_QWORD *)(v140 + 8 * v41);
    ++v57;
    if (v56)
      goto LABEL_25;
  }
LABEL_63:
  __break(1u);
}

uint64_t sub_1005DAB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v11 = type metadata accessor for UUID(0);
  v52 = *(_QWORD *)(v11 - 8);
  v53 = v11;
  __chkstk_darwin(v11);
  v51 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OwnedBeaconGroup(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v50 = (uint64_t)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v42 - v20;
  sub_10081EDA8(a2, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_100004048((uint64_t)v15, (uint64_t *)&unk_1010FF7F0);
    return sub_1005DAF98(a1, a2, a3, a4, a5);
  }
  else
  {
    v48 = a4;
    v49 = a3;
    v47 = v5;
    sub_1000126EC((uint64_t)v15, (uint64_t)v21, type metadata accessor for OwnedBeaconGroup);
    if (qword_1010E9D28 != -1)
      swift_once(&qword_1010E9D28, sub_1005D439C);
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_1011B71E0);
    v24 = v50;
    sub_10005972C((uint64_t)v21, v50, type metadata accessor for OwnedBeaconGroup);
    v26 = v51;
    v25 = v52;
    v27 = a1;
    v28 = v53;
    v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, a1, v53);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      v33 = swift_slowAlloc(22, -1);
      v46 = v21;
      v34 = v33;
      v45 = swift_slowAlloc(64, -1);
      v55 = v45;
      *(_DWORD *)v34 = 136315394;
      v43 = v34 + 4;
      v44 = v32;
      v35 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v36 = dispatch thunk of CustomStringConvertible.description.getter(v28, v35);
      v54 = sub_100016940(v36, v37, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v43, v34 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v24, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v34 + 12) = 2080;
      v38 = dispatch thunk of CustomStringConvertible.description.getter(v28, v35);
      v54 = sub_100016940(v38, v39, &v55);
      v27 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v34 + 14, v34 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v28);
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v44, "Stop sound for group %s. CommandId %s", (uint8_t *)v34, 0x16u);
      v40 = v45;
      swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      v41 = v34;
      v21 = v46;
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {
      sub_1000126B0(v24, type metadata accessor for OwnedBeaconGroup);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v28);
    }

    sub_1005DB2A0(v27, (uint64_t)v21, v49, v48, a5);
    return sub_1000126B0((uint64_t)v21, type metadata accessor for OwnedBeaconGroup);
  }
}

uint64_t sub_1005DAF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  char *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD aBlock[7];

  v46 = a3;
  v47 = a4;
  v50 = type metadata accessor for DispatchWorkItemFlags(0);
  v53 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v49 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v10 - 8);
  v52 = v10;
  __chkstk_darwin(v10);
  v45 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = __chkstk_darwin(v12);
  v43 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v42 - v16;
  v48 = *(_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v18((char *)&v42 - v16, a2, v12);
  v18((char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  v19 = *(unsigned __int8 *)(v13 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = (v14 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v19 + 16 + v23) & ~v19;
  v25 = swift_allocObject(&unk_101081EF8, v24 + v14, v19 | 7);
  v26 = v25 + v20;
  v27 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
  v27(v26, v17, v12);
  *(double *)(v25 + v21) = a5;
  v28 = v43;
  v29 = v44;
  *(_QWORD *)(v25 + v22) = v44;
  v30 = (_QWORD *)(v25 + v23);
  v31 = v47;
  *v30 = v46;
  v30[1] = v31;
  v27(v25 + v24, v28, v12);
  aBlock[4] = sub_1005FAF58;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101081F10;
  v32 = _Block_copy(aBlock);
  v33 = v29;
  v34 = swift_retain();
  v35 = v45;
  static DispatchQoS.unspecified.getter(v34);
  v54 = _swiftEmptyArrayStorage;
  v36 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v37 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v38 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v40 = v49;
  v39 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v37, v38, v50, v36);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v35, v40, v32);
  _Block_release(v32);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v40, v39);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v35, v52);
  return swift_release();
}

uint64_t sub_1005DB2A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD aBlock[7];

  v47 = a4;
  v45 = a3;
  v49 = type metadata accessor for DispatchWorkItemFlags(0);
  v52 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v48 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v50 = *(_QWORD *)(v10 - 8);
  v51 = v10;
  __chkstk_darwin(v10);
  v44 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OwnedBeaconGroup(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  __chkstk_darwin(v16);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = *(_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  sub_10005972C(a2, (uint64_t)v19, v20);
  v21 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  v22 = *(unsigned __int8 *)(v17 + 80);
  v23 = (v22 + 16) & ~v22;
  v24 = (v18 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF8;
  v26 = *(unsigned __int8 *)(v13 + 80);
  v27 = (v26 + v25 + 8) & ~v26;
  v28 = (v14 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = swift_allocObject(&unk_101081C50, v28 + 16, v22 | v26 | 7);
  sub_1000126EC((uint64_t)v19, v29 + v23, type metadata accessor for OwnedBeaconGroup);
  v30 = v43;
  *(_QWORD *)(v29 + v24) = v43;
  *(double *)(v29 + v25) = a5;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v29 + v27, v15, v21);
  v31 = (_QWORD *)(v29 + v28);
  v32 = v47;
  *v31 = v45;
  v31[1] = v32;
  aBlock[4] = sub_1005FA774;
  aBlock[5] = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101081C68;
  v33 = _Block_copy(aBlock);
  v34 = v30;
  v35 = swift_retain();
  v36 = v44;
  static DispatchQoS.unspecified.getter(v35);
  v53 = _swiftEmptyArrayStorage;
  v37 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v38 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v39 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v41 = v48;
  v40 = v49;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v38, v39, v49, v37);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v41, v33);
  _Block_release(v33);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v41, v40);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v36, v51);
  return swift_release();
}

uint64_t sub_1005DB5E4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  Class isa;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  char v56[8];

  v4 = v3;
  v8 = type metadata accessor for Date(0);
  v52 = *(_QWORD *)(v8 - 8);
  v53 = v8;
  __chkstk_darwin(v8);
  v51 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OwnedBeaconGroup(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10081EDA8(a2, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010FF7F0);
    result = (uint64_t)sub_1005DBAC0(a2);
    v18 = (id)result;
  }
  else
  {
    sub_1000126EC((uint64_t)v12, (uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
    sub_10036AC6C();
    v20 = v19;
    v21 = a1;
    v22 = (uint64_t)sub_1005FB0CC(v20, (uint64_t)v21, (uint64_t)v56, (uint64_t (*)(char *))sub_1005DBAC0);
    swift_bridgeObjectRelease();

    v50 = a3;
    if ((unint64_t)v22 >> 62)
      goto LABEL_43;
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v22);
    for (; v23; v23 = _CocoaArrayWrapper.endIndex.getter(v43))
    {
      v24 = v22 & 0xC000000000000001;
      v25 = 4;
      do
      {
        if (v24)
          v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25 - 4, v22);
        else
          v26 = *(id *)(v22 + 8 * v25);
        v18 = v26;
        v27 = v25 - 3;
        if (__OFADD__(v25 - 4, 1))
        {
          __break(1u);
          goto LABEL_40;
        }
        if (!objc_msgSend(v26, "state"))
        {
LABEL_37:
          swift_bridgeObjectRelease();
          sub_1000126B0((uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
          result = swift_bridgeObjectRelease();
          goto LABEL_48;
        }

        ++v25;
      }
      while (v27 != v23);
      v28 = 4;
      while (1)
      {
        v29 = v24
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28 - 4, v22)
            : *(id *)(v22 + 8 * v28);
        v18 = v29;
        v30 = v28 - 3;
        if (__OFADD__(v28 - 4, 1))
          break;
        if (objc_msgSend(v29, "state") == (id)1)
          goto LABEL_37;

        ++v28;
        if (v30 == v23)
        {
          v31 = 4;
          while (1)
          {
            v32 = v24
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v31 - 4, v22)
                : *(id *)(v22 + 8 * v31);
            v18 = v32;
            v33 = v31 - 3;
            if (__OFADD__(v31 - 4, 1))
              goto LABEL_41;
            if (objc_msgSend(v32, "state") == (id)4)
              goto LABEL_37;

            ++v31;
            if (v33 == v23)
            {
              v34 = 4;
              v48 = v4;
              v49 = v16;
              while (1)
              {
                v36 = v24
                    ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34 - 4, v22)
                    : *(id *)(v22 + 8 * v34);
                v18 = v36;
                v16 = (char *)(v34 - 3);
                if (__OFADD__(v34 - 4, 1))
                  goto LABEL_42;
                v37 = objc_msgSend(v36, "error");
                if (v37
                  && (v55 = v37,
                      v38 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0),
                      type metadata accessor for CommandError(0),
                      v40 = v39,
                      (swift_dynamicCast(&v54, &v55, v38, v39, 6) & 1) != 0))
                {
                  v41 = v54;
                  v42 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
                  _BridgedStoredNSError.code.getter(&v55, v40, v42);

                  if (v55 == (id)10)
                  {
                    swift_bridgeObjectRelease_n(v22, 2);
                    result = sub_1000126B0((uint64_t)v49, type metadata accessor for OwnedBeaconGroup);
                    goto LABEL_48;
                  }

                  v4 = v48;
                }
                else
                {

                }
                ++v34;
                v35 = v16 == (char *)v23;
                v16 = v49;
                if (v35)
                  goto LABEL_47;
              }
            }
          }
        }
      }
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      if (v22 < 0)
        v43 = v22;
      else
        v43 = v22 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v22);
    }
LABEL_47:
    swift_bridgeObjectRelease_n(v22, 2);
    v44 = SPBeaconTaskNamePlaySound;
    v45 = v51;
    static Date.trustedNow.getter(v51);
    v46 = objc_allocWithZone((Class)SPBeaconTaskInformation);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v18 = objc_msgSend(v46, "initWithName:lastUpdated:error:state:", v44, isa, 0, 2);

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v45, v53);
    result = sub_1000126B0((uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
LABEL_48:
    a3 = v50;
  }
  *a3 = v18;
  return result;
}

os_log_t sub_1005DBAC0(uint64_t a1)
{
  int *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  void *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  os_log_t v79;
  uint64_t (*v80)(uint64_t);
  __objc2_ivar_list **p_ivars;
  uint64_t v82;
  __objc2_class_ro **p_info;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *i;
  uint64_t v89;
  Swift::UInt v90;
  Swift::Int v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  __n128 v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  void (*v120)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  NSDate v126;
  void *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  Class isa;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  NSObject *v144;
  os_log_type_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  __n128 v152;
  uint64_t v153;
  unint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  NSObject *v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int (*v161)(uint64_t, uint64_t, uint64_t);
  uint64_t v163;
  unsigned int (*v164)(uint64_t, uint64_t, uint64_t);
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  int *v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  NSObject *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  os_log_type_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  os_log_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  int *v213;
  os_log_t v214;
  char *v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  NSObject *v225;
  uint64_t v226;
  os_log_type_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char v241;
  uint64_t v242;
  char *v243;
  unint64_t v244;
  char v245;
  uint64_t v246;
  uint64_t v247;
  os_log_t v248;
  void (*v249)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v250;
  uint64_t v251;
  void *v252;
  uint64_t v253;
  NSObject *v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  os_log_t v267;
  char *v268;
  char *v269;
  unint64_t v270;
  uint64_t v271;
  os_log_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  unsigned int (*v277)(uint64_t, uint64_t, uint64_t);
  char *v278;
  char *v279;
  unint64_t v280;
  uint64_t v281;
  os_log_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int *v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  char *v293;
  uint64_t v294;
  uint64_t (*v295)(uint64_t);
  char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  uint64_t v317;
  char *v318;
  void *v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  int *v330;
  char *v331;
  os_log_t v332;
  uint64_t v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  unsigned int (*v337)(uint64_t, uint64_t, uint64_t);
  os_log_t v338;
  _QWORD *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  char v344[8];
  char v345[8];
  unsigned int (*v346)(_QWORD, _QWORD, _QWORD);
  __int128 v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;

  v2 = v1;
  v328 = a1;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v3);
  v302 = (uint64_t)&v288 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v303 = type metadata accessor for OwnedBeaconRecord(0);
  v301 = *(_QWORD *)(v303 - 8);
  v5 = __chkstk_darwin(v303);
  v295 = (uint64_t (*)(uint64_t))((char *)&v288 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v298 = (uint64_t)&v288 - v7;
  v8 = sub_10001A9A8(&qword_1010EF1D8);
  v9 = __chkstk_darwin(v8);
  v317 = (uint64_t)&v288 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v315 = (uint64_t)&v288 - v12;
  v13 = __chkstk_darwin(v11);
  v297 = (uint64_t)&v288 - v14;
  v15 = __chkstk_darwin(v13);
  v293 = (char *)&v288 - v16;
  __chkstk_darwin(v15);
  v305 = (uint64_t)&v288 - v17;
  v326 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  v327 = *(_QWORD *)(v326 - 8);
  v18 = __chkstk_darwin(v326);
  v313 = (uint64_t)&v288 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v311 = (uint64_t)&v288 - v21;
  v22 = __chkstk_darwin(v20);
  v294 = (uint64_t)&v288 - v23;
  v24 = __chkstk_darwin(v22);
  v296 = (char *)&v288 - v25;
  v26 = __chkstk_darwin(v24);
  v299 = (uint64_t)&v288 - v27;
  v28 = __chkstk_darwin(v26);
  v290 = (uint64_t)&v288 - v29;
  v30 = __chkstk_darwin(v28);
  v291 = (uint64_t)&v288 - v31;
  __chkstk_darwin(v30);
  v304 = (uint64_t)&v288 - v32;
  v33 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v33);
  v308 = (uint64_t)&v288 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v307 = type metadata accessor for OwnedBeaconGroup(0);
  v306 = *(_QWORD *)(v307 - 8);
  __chkstk_darwin(v307);
  v309 = (uint64_t)&v288 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_10001A9A8(&qword_1010ED860);
  v37 = __chkstk_darwin(v36);
  v316 = (char *)&v288 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v312 = (char *)&v288 - v39;
  v323 = type metadata accessor for UUID(0);
  v324 = *(_QWORD *)(v323 - 8);
  v40 = __chkstk_darwin(v323);
  v318 = (char *)&v288 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v40);
  v292 = (char *)&v288 - v43;
  v44 = __chkstk_darwin(v42);
  v46 = (char *)&v288 - v45;
  __chkstk_darwin(v44);
  v310 = (char *)&v288 - v47;
  v48 = sub_10001A9A8(&qword_1010EF660);
  __chkstk_darwin(v48);
  v322 = (char *)&v288 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = (int *)type metadata accessor for BeaconObservation(0);
  v335 = *((_QWORD *)v50 - 1);
  v51 = __chkstk_darwin(v50);
  v333 = (uint64_t)&v288 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __chkstk_darwin(v51);
  v334 = (char *)&v288 - v54;
  __chkstk_darwin(v53);
  v314 = (uint64_t)&v288 - v55;
  v56 = type metadata accessor for Date(0);
  v57 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v59 = (char *)&v288 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for DispatchPredicate(0);
  v61 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v63 = (uint64_t *)((char *)&v288 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0));
  v64 = *(void **)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  *v63 = v64;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v61 + 104))(v63, enum case for DispatchPredicate.onQueue(_:), v60);
  v65 = v64;
  LOBYTE(v64) = _dispatchPreconditionTest(_:)(v63);
  v66 = (*(uint64_t (**)(_QWORD *, uint64_t))(v61 + 8))(v63, v60);
  if ((v64 & 1) != 0)
  {
    Date.init()(v66);
    v350 = 2;
    if (qword_1010E9CF0 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010E9CF0, sub_10058CADC);
LABEL_3:
  v67 = qword_1011B7160;
  v319 = objc_autoreleasePoolPush();
  v68 = sub_10001A9A8(&qword_1010F7770);
  OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v67, v68);
  v300 = 0;
  v69 = v339;
  v70 = v339[2];
  v325 = v59;
  v321 = v56;
  v320 = v57;
  if (v70)
  {
    v71 = sub_100003FB0(v328);
    v72 = (uint64_t)v322;
    if ((v73 & 1) != 0)
    {
      v74 = *(_QWORD *)(v69[7] + 8 * v71);
      swift_bridgeObjectRetain(v74);
      swift_bridgeObjectRelease();
      v75 = (uint64_t)sub_100508D98(v74);
      swift_bridgeObjectRelease();
      sub_10088FD00(v75);
      v77 = v76;
      swift_release(v75);
      v78 = _swiftEmptyArrayStorage;
      *(_QWORD *)&v347 = _swiftEmptyArrayStorage;
      v332 = *(os_log_t *)(v77 + 16);
      if (v332)
      {
        v289 = v2;
        v79 = 0;
        v80 = type metadata accessor for BeaconObservation;
        p_ivars = (__objc2_ivar_list **)&off_1010486F0;
        v82 = -1;
        p_info = (__objc2_class_ro **)qword_100E452A0;
        v84 = (uint64_t)v334;
        v331 = v46;
        v330 = v50;
        v329 = v77;
        while (1)
        {
          if ((unint64_t)v79 >= *(_QWORD *)(v77 + 16))
          {
            __break(1u);
            goto LABEL_123;
          }
          v85 = (*(unsigned __int8 *)(v335 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v335 + 80);
          v86 = *(_QWORD *)(v335 + 72);
          v338 = (os_log_t)((char *)&v79->isa + 1);
          v337 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v85;
          v336 = v86;
          sub_10005972C(v77 + v85 + v86 * (_QWORD)v79, v84, type metadata accessor for BeaconObservation);
          sub_100374684();
          v78 = (_QWORD *)Set.init(minimumCapacity:)(7);
          v87 = 0;
          for (i = v78 + 7; ; i = v78 + 7)
          {
            while (1)
            {
              v89 = *((char *)&off_1010486F0 + v87++ + 32);
              Hasher.init(_seed:)(&v339);
              v90 = qword_100E452A0[v89];
              Hasher._combine(_:)(v90);
              v91 = Hasher._finalize()();
              v92 = -1 << *((_BYTE *)v78 + 32);
              v93 = v91 & ~v92;
              if (((*(_QWORD *)((char *)i + ((v93 >> 3) & 0xFFFFFFFFFFFFF8)) >> v93) & 1) == 0)
                goto LABEL_18;
              v94 = v78[6];
              if (qword_100E452A0[*(char *)(v94 + v93)] != v90)
                break;
LABEL_11:
              if (v87 == 7)
                goto LABEL_20;
            }
            v95 = ~v92;
            while (1)
            {
              v93 = (v93 + 1) & v95;
              if (((*(_QWORD *)((char *)i + ((v93 >> 3) & 0xFFFFFFFFFFFFF8)) >> v93) & 1) == 0)
                break;
              if (qword_100E452A0[*(char *)(v94 + v93)] == v90)
                goto LABEL_11;
            }
LABEL_18:
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v78);
            v339 = v78;
            sub_100A1F790(v89, v93, isUniquelyReferenced_nonNull_native);
            v78 = v339;
            swift_bridgeObjectRelease();
            if (v87 == 7)
              break;
          }
LABEL_20:
          v50 = v330;
          v84 = (uint64_t)v334;
          v75 = sub_100A07E5C(v334[v330[6]], (uint64_t)v78);
          swift_bridgeObjectRelease();
          if ((v75 & 1) != 0)
          {
            v80 = type metadata accessor for BeaconObservation;
            sub_1000126EC(v84, v333, type metadata accessor for BeaconObservation);
            v78 = (_QWORD *)v347;
            if ((swift_isUniquelyReferenced_nonNull_native(v347) & 1) == 0)
            {
              v75 = (uint64_t)&v347;
              sub_10009AAC8(0, v78[2] + 1, 1);
              v78 = (_QWORD *)v347;
            }
            v98 = v78[2];
            v97 = v78[3];
            if (v98 >= v97 >> 1)
            {
              v75 = (uint64_t)&v347;
              sub_10009AAC8(v97 > 1, v98 + 1, 1);
              v78 = (_QWORD *)v347;
            }
            v78[2] = v98 + 1;
            sub_1000126EC(v333, (uint64_t)v337 + (_QWORD)v78 + v98 * v336, type metadata accessor for BeaconObservation);
          }
          else
          {
            v80 = type metadata accessor for BeaconObservation;
            sub_1000126B0(v84, type metadata accessor for BeaconObservation);
          }
          v46 = v331;
          v77 = v329;
          v79 = v338;
          if (v338 == v332)
          {
            v78 = (_QWORD *)v347;
            v56 = v321;
            v59 = v325;
            v57 = v320;
            v2 = v289;
            v72 = (uint64_t)v322;
            break;
          }
        }
      }
      swift_release(v77);
    }
    else
    {
      swift_bridgeObjectRelease();
      v78 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v78 = _swiftEmptyArrayStorage;
    v72 = (uint64_t)v322;
  }
  objc_autoreleasePoolPop(v319);
  sub_100A797E8((uint64_t)v78, v72);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v335 + 48))(v72, 1, v50) == 1)
  {
    sub_100004048(v72, &qword_1010EF660);
    goto LABEL_41;
  }
  (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v56);
  v99 = v314;
  sub_1000126EC(v72, v314, type metadata accessor for BeaconObservation);
  v100 = *(unsigned __int8 *)(v99 + v50[6]);
  if (v100 == 23)
  {
    v101 = 4;
LABEL_39:
    v350 = v101;
    goto LABEL_40;
  }
  if (v100 == 24)
  {
    v101 = 1;
    goto LABEL_39;
  }
  if (v100 != 25)
  {
    v101 = 2;
    goto LABEL_39;
  }
  v350 = 0;
LABEL_40:
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v59, v99 + v50[5], v56);
  sub_1000126B0(v99, type metadata accessor for BeaconObservation);
LABEL_41:
  v50 = v2;
  sub_10080B648(v328, (uint64_t)&v347);
  p_info = &OBJC_METACLASS____TtC12searchpartyd20LocationFetchService.info;
  p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
  v84 = v323;
  v102 = v324;
  if (!v348)
  {
    sub_100004048((uint64_t)&v347, (uint64_t *)&unk_1010EE310);
    goto LABEL_51;
  }
  sub_10000F9FC(&v347, (uint64_t)&v339);
  v103 = v340;
  v104 = v341;
  sub_10001AA44(&v339, v340);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v104 + 120))(v103, v104) & 1) != 0)
  {
    v105 = v340;
    v106 = v341;
    sub_10001AA44(&v339, v340);
    v107 = v105;
    v108 = (uint64_t)v312;
    (*(void (**)(uint64_t, uint64_t))(v106 + 192))(v107, v106);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48))(v108, 1, v84) == 1)
    {
      v109 = &qword_1010ED860;
LABEL_48:
      v111 = v108;
LABEL_49:
      sub_100004048(v111, v109);
      goto LABEL_50;
    }
    v110 = (uint64_t)v310;
    (*(void (**)(char *, uint64_t, uint64_t))(v102 + 32))(v310, v108, v84);
    v108 = v308;
    sub_10081EDA8(v110, v308);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v306 + 48))(v108, 1, v307) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v110, v84);
      v109 = (uint64_t *)&unk_1010FF7F0;
      goto LABEL_48;
    }
    sub_1000126EC(v108, v309, type metadata accessor for OwnedBeaconGroup);
    v78 = (_QWORD *)((char *)v50 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
    v152 = swift_beginAccess((char *)v50 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v345, 0, 0);
    v153 = *v78;
    if (!*(_QWORD *)(*v78 + 16))
    {
      v157 = v305;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v327 + 56))(v305, 1, 1, v326, v152);
LABEL_94:
      sub_1000126B0(v309, type metadata accessor for OwnedBeaconGroup);
      (*(void (**)(uint64_t, uint64_t))(v324 + 8))(v110, v84);
LABEL_95:
      v109 = &qword_1010EF1D8;
      v111 = v157;
      goto LABEL_49;
    }
    v331 = v46;
    swift_bridgeObjectRetain(v153);
    v154 = sub_100003FB0(v328);
    v156 = v327;
    if ((v155 & 1) != 0)
    {
      v157 = v305;
      sub_10005972C(*(_QWORD *)(v153 + 56) + *(_QWORD *)(v327 + 72) * v154, v305, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      v158 = *(NSObject **)(v156 + 56);
      v159 = v157;
      v160 = 0;
    }
    else
    {
      v158 = *(NSObject **)(v327 + 56);
      v157 = v305;
      v159 = v305;
      v160 = 1;
    }
    v163 = v326;
    v338 = v158;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v158)(v159, v160, 1, v326);
    swift_bridgeObjectRelease();
    v164 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v156 + 48);
    v165 = v164(v157, 1, v163);
    v110 = (uint64_t)v310;
    if (v165 == 1)
      goto LABEL_94;
    v337 = v164;
    sub_1000126EC(v157, v304, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v166 = v302;
    sub_1007F3570(v309, v302);
    v167 = v303;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v301 + 48))(v166, 1, v303) == 1)
    {
      sub_100004048(v166, (uint64_t *)&unk_1010F47C0);
    }
    else
    {
      v168 = v298;
      sub_1000126EC(v166, v298, type metadata accessor for OwnedBeaconRecord);
      v169 = v168 + *(int *)(v167 + 20);
      v170 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v169, v328, v84, v170) & 1) == 0)
      {
        v336 = v169;
        v190 = sub_1007F78E4(v309);
        __chkstk_darwin(v190);
        *(&v288 - 2) = v168;
        v191 = sub_100A78648(sub_1005FA61C, (uint64_t)(&v288 - 4), (uint64_t)v190);
        swift_bridgeObjectRelease();
        v192 = &_swiftEmptySetSingleton;
        if (v191)
          v192 = v191;
        v338 = v192;
        if (qword_1010E9D28 != -1)
          swift_once(&qword_1010E9D28, sub_1005D439C);
        v193 = type metadata accessor for Logger(0);
        v194 = sub_10001A9E8(v193, (uint64_t)qword_1011B71E0);
        v77 = v324;
        v82 = (uint64_t)v331;
        (*(void (**)(char *, uint64_t, uint64_t))(v324 + 16))(v331, v328, v84);
        v80 = v295;
        sub_10005972C(v168, (uint64_t)v295, type metadata accessor for OwnedBeaconRecord);
        v195 = swift_bridgeObjectRetain_n(v338, 2);
        v335 = v194;
        v75 = Logger.logObject.getter(v195);
        v196 = static os_log_type_t.info.getter(v75);
        v197 = v196;
        if (os_log_type_enabled((os_log_t)v75, v196))
        {
          v198 = swift_slowAlloc(62, -1);
          v334 = (char *)swift_slowAlloc(96, -1);
          *(_QWORD *)&v347 = v334;
          *(_DWORD *)v198 = 141559299;
          v343 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, v344, v198 + 4, v198 + 12);
          *(_WORD *)(v198 + 12) = 2081;
          v199 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          LODWORD(v333) = v197;
          v200 = v82;
          v201 = v199;
          v332 = (os_log_t)v75;
          v202 = dispatch thunk of CustomStringConvertible.description.getter(v323, v199);
          v343 = sub_100016940(v202, v203, (uint64_t *)&v347);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, v344, v198 + 14, v198 + 22);
          swift_bridgeObjectRelease();
          v330 = *(int **)(v324 + 8);
          ((void (*)(uint64_t, uint64_t))v330)(v200, v323);
          *(_WORD *)(v198 + 22) = 2160;
          v343 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, v344, v198 + 24, v198 + 32);
          *(_WORD *)(v198 + 32) = 2081;
          v204 = (uint64_t)v295;
          v205 = dispatch thunk of CustomStringConvertible.description.getter(v323, v201);
          v343 = sub_100016940(v205, v206, (uint64_t *)&v347);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, v344, v198 + 34, v198 + 42);
          swift_bridgeObjectRelease();
          sub_1000126B0(v204, type metadata accessor for OwnedBeaconRecord);
          *(_WORD *)(v198 + 42) = 2160;
          v343 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, v344, v198 + 44, v198 + 52);
          *(_WORD *)(v198 + 52) = 2081;
          v207 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v208 = v338;
          swift_bridgeObjectRetain(v338);
          v210 = Set.description.getter(v209, v323, v207);
          v212 = v211;
          swift_bridgeObjectRelease();
          v343 = sub_100016940(v210, v212, (uint64_t *)&v347);
          v84 = v323;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, v344, v198 + 54, v198 + 62);
          swift_bridgeObjectRelease_n(v208, 2);
          v213 = v330;
          swift_bridgeObjectRelease();
          v214 = v332;
          _os_log_impl((void *)&_mh_execute_header, v332, (os_log_type_t)v333, "device: %{private,mask.hash}s, primaryBeacon: %{private,mask.hash}s, nearbyPeers: %{private,mask.hash}s", (uint8_t *)v198, 0x3Eu);
          v215 = v334;
          swift_arrayDestroy(v334, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v215, -1, -1);
          swift_slowDealloc(v198, -1, -1);

        }
        else
        {
LABEL_123:
          v213 = *(int **)(v77 + 8);
          ((void (*)(uint64_t, uint64_t))v213)(v82, v84);
          sub_1000126B0((uint64_t)v80, type metadata accessor for OwnedBeaconRecord);

          v208 = v338;
          swift_bridgeObjectRelease_n(v338, 2);
        }
        v240 = v304;
        v157 = (uint64_t)v293;
        v241 = sub_100A07660(v328, (uint64_t)v208);
        swift_bridgeObjectRelease();
        if ((v241 & 1) == 0)
        {
          sub_1000126B0(v240, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
          sub_1000126B0(v309, type metadata accessor for OwnedBeaconGroup);
          ((void (*)(char *, uint64_t))v213)(v310, v84);
          sub_1000126B0(v298, type metadata accessor for OwnedBeaconRecord);
          goto LABEL_50;
        }
        v242 = *v78;
        v243 = v310;
        if (*(_QWORD *)(*v78 + 16))
        {
          swift_bridgeObjectRetain(*v78);
          v244 = sub_100003FB0(v336);
          if ((v245 & 1) != 0)
          {
            v246 = v327;
            sub_10005972C(*(_QWORD *)(v242 + 56) + *(_QWORD *)(v327 + 72) * v244, v157, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
            v247 = 0;
          }
          else
          {
            v247 = 1;
            v246 = v327;
          }
          v249 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v246 + 56);
          v250 = v326;
          v249(v157, v247, 1, v326);
          swift_bridgeObjectRelease();
          if (v337(v157, 1, v250) != 1)
          {
            v251 = v291;
            sub_1000126EC(v157, v291, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
            v252 = (void *)sub_1005DBAC0(v251 + *(int *)(v326 + 20));
            sub_100030784((uint64_t)&v339, (uint64_t)&v347);
            v253 = v290;
            sub_10005972C(v251, v290, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
            v338 = v252;
            v254 = Logger.logObject.getter(v338);
            v255 = static os_log_type_t.info.getter(v254);
            if (os_log_type_enabled(v254, (os_log_type_t)v255))
            {
              LODWORD(v337) = v255;
              v256 = swift_slowAlloc(62, -1);
              v336 = swift_slowAlloc(128, -1);
              v346 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v336;
              *(_DWORD *)v256 = 141559299;
              v343 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, v344, v256 + 4, v256 + 12);
              *(_WORD *)(v256 + 12) = 2081;
              v258 = v348;
              v257 = v349;
              sub_10001AA44(&v347, v348);
              v259 = v292;
              (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v257 + 8) + 8) + 32))(v258);
              v260 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
              v261 = v323;
              v262 = dispatch thunk of CustomStringConvertible.description.getter(v323, v260);
              v264 = v263;
              ((void (*)(char *, uint64_t))v213)(v259, v261);
              v343 = sub_100016940(v262, v264, (uint64_t *)&v346);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, v344, v256 + 14, v256 + 22);
              swift_bridgeObjectRelease();
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v347);
              *(_WORD *)(v256 + 22) = 2082;
              swift_beginAccess(&v350, &v343, 0, 0);
              v265 = 0xE800000000000000;
              v266 = 0x676E696E6E75722ELL;
              switch(v350)
              {
                case -1:
                  v266 = 0x6E776F6E6B6E752ELL;
                  break;
                case 0:
                  break;
                case 1:
                  v266 = 0x676E69646E65702ELL;
                  break;
                case 2:
                  v265 = 0xE500000000000000;
                  v266 = 0x656C64692ELL;
                  break;
                case 3:
                  v265 = 0xE600000000000000;
                  v266 = 0x726F7272652ELL;
                  break;
                case 4:
                  v265 = 0xE700000000000000;
                  v266 = 0x6465756575712ELL;
                  break;
                default:
                  v265 = 0x8000000100EDC950;
                  v266 = 0xD000000000000010;
                  break;
              }
              v342 = sub_100016940(v266, v265, (uint64_t *)&v346);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v342, &v343, v256 + 24, v256 + 32);
              swift_bridgeObjectRelease();
              *(_WORD *)(v256 + 32) = 2082;
              v278 = (char *)-[NSObject state](v338, "state") + 1;
              v279 = v325;
              v280 = 0xE800000000000000;
              v281 = 0x676E696E6E75722ELL;
              switch((unint64_t)v278)
              {
                case 0uLL:
                  v281 = 0x6E776F6E6B6E752ELL;
                  break;
                case 1uLL:
                  break;
                case 2uLL:
                  v281 = 0x676E69646E65702ELL;
                  break;
                case 3uLL:
                  v280 = 0xE500000000000000;
                  v281 = 0x656C64692ELL;
                  break;
                case 4uLL:
                  v280 = 0xE600000000000000;
                  v281 = 0x726F7272652ELL;
                  break;
                case 5uLL:
                  v280 = 0xE700000000000000;
                  v281 = 0x6465756575712ELL;
                  break;
                default:
                  v280 = 0x8000000100EDC950;
                  v281 = 0xD000000000000010;
                  break;
              }
              v342 = sub_100016940(v281, v280, (uint64_t *)&v346);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v342, &v343, v256 + 34, v256 + 42);
              v282 = v338;

              swift_bridgeObjectRelease();
              *(_WORD *)(v256 + 42) = 2160;
              v342 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v342, &v343, v256 + 44, v256 + 52);
              *(_WORD *)(v256 + 52) = 2081;
              v283 = v290;
              v284 = v323;
              v285 = dispatch thunk of CustomStringConvertible.description.getter(v323, v260);
              v342 = sub_100016940(v285, v286, (uint64_t *)&v346);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v342, &v343, v256 + 54, v256 + 62);
              swift_bridgeObjectRelease();
              sub_1000126B0(v283, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
              _os_log_impl((void *)&_mh_execute_header, v254, (os_log_type_t)v337, "Beacon: %{private,mask.hash}s has state: %{public}s, -- taking playSound taskInfo state %{public}s from primary %{private,mask.hash}s.", (uint8_t *)v256, 0x3Eu);
              v287 = v336;
              swift_arrayDestroy(v336, 4, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v287, -1, -1);
              swift_slowDealloc(v256, -1, -1);

              sub_1000126B0(v291, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
              sub_1000126B0(v304, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
              sub_1000126B0(v309, type metadata accessor for OwnedBeaconGroup);
              ((void (*)(char *, uint64_t))v213)(v310, v284);
              (*(void (**)(char *, uint64_t))(v320 + 8))(v279, v321);
            }
            else
            {

              sub_1000126B0(v253, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
              v267 = v338;

              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v347);
              sub_1000126B0(v251, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
              sub_1000126B0(v240, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
              sub_1000126B0(v309, type metadata accessor for OwnedBeaconGroup);
              ((void (*)(char *, uint64_t))v213)(v310, v323);
              (*(void (**)(char *, uint64_t))(v320 + 8))(v325, v321);
            }
            sub_1000126B0(v298, type metadata accessor for OwnedBeaconRecord);
            goto LABEL_153;
          }
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v327 + 56))(v157, 1, 1, v326);
        }
        sub_1000126B0(v240, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
        sub_1000126B0(v309, type metadata accessor for OwnedBeaconGroup);
        ((void (*)(char *, uint64_t))v213)(v243, v84);
        sub_1000126B0(v298, type metadata accessor for OwnedBeaconRecord);
        goto LABEL_95;
      }
      sub_1000126B0(v168, type metadata accessor for OwnedBeaconRecord);
    }
    sub_10036AC6C();
    v172 = v171;
    v173 = sub_10001A9A8(&qword_1011003C0);
    v174 = *(unsigned __int8 *)(v324 + 80);
    v175 = (v174 + 32) & ~v174;
    v176 = swift_allocObject(v173, v175 + *(_QWORD *)(v324 + 72), v174 | 7);
    *(_OWORD *)(v176 + 16) = xmmword_100E22B00;
    v177 = v176 + v175;
    v179 = v340;
    v178 = v341;
    sub_10001AA44(&v339, v340);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v178 + 8) + 8) + 32))(v179);
    v180 = sub_100640734(v176, v172);
    swift_setDeallocating(v176);
    swift_arrayDestroy(v177, *(_QWORD *)(v176 + 16), v323);
    swift_deallocClassInstance(v176, 32, 7);
    v181 = v50;
    v182 = sub_1005F9BD0((uint64_t)v180, (uint64_t)v181);
    swift_release(v180);

    v183 = v182[2];
    if (v183)
    {
      v184 = (uint64_t)v182
           + ((*(unsigned __int8 *)(v327 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v327 + 80));
      v185 = *(_QWORD *)(v327 + 72);
      swift_bridgeObjectRetain(v182);
      v186 = (uint64_t)v296;
      while (1)
      {
        sub_10005972C(v184, v186, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
        if (*(_BYTE *)(v186 + *(int *)(v326 + 40)) == 1)
          break;
        sub_1000126B0(v186, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
        v184 += v185;
        if (!--v183)
        {
          swift_bridgeObjectRelease();
          goto LABEL_105;
        }
      }
      swift_bridgeObjectRelease();
      v187 = v297;
      sub_1000126EC(v186, v297, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      v188 = v187;
      v189 = 0;
    }
    else
    {
LABEL_105:
      v187 = v297;
      v188 = v297;
      v189 = 1;
    }
    v216 = v326;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v338)(v188, v189, 1, v326);
    swift_bridgeObjectRelease();
    v217 = v337(v187, 1, v216);
    v218 = v323;
    v219 = v304;
    v220 = v324;
    v221 = v299;
    if (v217 == 1)
    {
      sub_1000126B0(v304, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      sub_1000126B0(v309, type metadata accessor for OwnedBeaconGroup);
      (*(void (**)(char *, uint64_t))(v220 + 8))(v310, v218);
      v109 = &qword_1010EF1D8;
      v111 = v187;
      goto LABEL_49;
    }
    sub_1000126EC(v187, v299, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    if ((static UUID.== infix(_:_:)(v219, v221) & 1) == 0)
    {
      sub_1000126B0(v221, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      sub_1000126B0(v219, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      sub_1000126B0(v309, type metadata accessor for OwnedBeaconGroup);
      (*(void (**)(char *, uint64_t))(v220 + 8))(v310, v218);
      goto LABEL_50;
    }
    v222 = (void *)sub_1005DBAC0(v221 + *(int *)(v326 + 20));
    if (qword_1010E9D28 != -1)
      swift_once(&qword_1010E9D28, sub_1005D439C);
    v223 = type metadata accessor for Logger(0);
    sub_10001A9E8(v223, (uint64_t)qword_1011B71E0);
    sub_100030784((uint64_t)&v339, (uint64_t)&v347);
    v224 = v294;
    sub_10005972C(v221, v294, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v338 = v222;
    v225 = Logger.logObject.getter(v338);
    v226 = v221;
    v227 = static os_log_type_t.info.getter(v225);
    if (os_log_type_enabled(v225, v227))
    {
      v228 = swift_slowAlloc(62, -1);
      v337 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))swift_slowAlloc(128, -1);
      v346 = v337;
      *(_DWORD *)v228 = 141559299;
      v343 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, v344, v228 + 4, v228 + 12);
      *(_WORD *)(v228 + 12) = 2081;
      v230 = v348;
      v229 = v349;
      sub_10001AA44(&v347, v348);
      v231 = v292;
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v229 + 8) + 8) + 32))(v230);
      v232 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v233 = v323;
      v234 = dispatch thunk of CustomStringConvertible.description.getter(v323, v232);
      v235 = v220;
      v237 = v236;
      v336 = *(_QWORD *)(v235 + 8);
      ((void (*)(char *, uint64_t))v336)(v231, v233);
      v343 = sub_100016940(v234, v237, (uint64_t *)&v346);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, v344, v228 + 14, v228 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v347);
      *(_WORD *)(v228 + 22) = 2082;
      swift_beginAccess(&v350, &v343, 0, 0);
      v238 = 0xE800000000000000;
      v239 = 0x676E696E6E75722ELL;
      switch(v350)
      {
        case -1:
          v239 = 0x6E776F6E6B6E752ELL;
          break;
        case 0:
          break;
        case 1:
          v239 = 0x676E69646E65702ELL;
          break;
        case 2:
          v238 = 0xE500000000000000;
          v239 = 0x656C64692ELL;
          break;
        case 3:
          v238 = 0xE600000000000000;
          v239 = 0x726F7272652ELL;
          break;
        case 4:
          v238 = 0xE700000000000000;
          v239 = 0x6465756575712ELL;
          break;
        default:
          v238 = 0x8000000100EDC950;
          v239 = 0xD000000000000010;
          break;
      }
      v342 = sub_100016940(v239, v238, (uint64_t *)&v346);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v342, &v343, v228 + 24, v228 + 32);
      swift_bridgeObjectRelease();
      *(_WORD *)(v228 + 32) = 2082;
      v268 = (char *)-[NSObject state](v338, "state") + 1;
      v269 = v325;
      v270 = 0xE800000000000000;
      v271 = 0x676E696E6E75722ELL;
      switch((unint64_t)v268)
      {
        case 0uLL:
          v271 = 0x6E776F6E6B6E752ELL;
          break;
        case 1uLL:
          break;
        case 2uLL:
          v271 = 0x676E69646E65702ELL;
          break;
        case 3uLL:
          v270 = 0xE500000000000000;
          v271 = 0x656C64692ELL;
          break;
        case 4uLL:
          v270 = 0xE600000000000000;
          v271 = 0x726F7272652ELL;
          break;
        case 5uLL:
          v270 = 0xE700000000000000;
          v271 = 0x6465756575712ELL;
          break;
        default:
          v270 = 0x8000000100EDC950;
          v271 = 0xD000000000000010;
          break;
      }
      v342 = sub_100016940(v271, v270, (uint64_t *)&v346);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v342, &v343, v228 + 34, v228 + 42);
      v272 = v338;

      swift_bridgeObjectRelease();
      *(_WORD *)(v228 + 42) = 2160;
      v342 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v342, &v343, v228 + 44, v228 + 52);
      *(_WORD *)(v228 + 52) = 2081;
      v273 = v294;
      v274 = v323;
      v275 = dispatch thunk of CustomStringConvertible.description.getter(v323, v232);
      v342 = sub_100016940(v275, v276, (uint64_t *)&v346);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v342, &v343, v228 + 54, v228 + 62);
      swift_bridgeObjectRelease();
      sub_1000126B0(v273, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      _os_log_impl((void *)&_mh_execute_header, v225, v227, "Beacon: %{private,mask.hash}s has state: %{public}s, -- taking playSound taskInfo state %{public}s from %{private,mask.hash}s.", (uint8_t *)v228, 0x3Eu);
      v277 = v337;
      swift_arrayDestroy(v337, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v277, -1, -1);
      swift_slowDealloc(v228, -1, -1);

      sub_1000126B0(v299, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      sub_1000126B0(v304, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      sub_1000126B0(v309, type metadata accessor for OwnedBeaconGroup);
      ((void (*)(char *, uint64_t))v336)(v310, v274);
      (*(void (**)(char *, uint64_t))(v320 + 8))(v269, v321);
    }
    else
    {

      sub_1000126B0(v224, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      v248 = v338;

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v347);
      sub_1000126B0(v226, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      sub_1000126B0(v219, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      sub_1000126B0(v309, type metadata accessor for OwnedBeaconGroup);
      (*(void (**)(char *, uint64_t))(v220 + 8))(v310, v323);
      (*(void (**)(char *, uint64_t))(v320 + 8))(v325, v321);
    }
LABEL_153:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v339);
    return v338;
  }
LABEL_50:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v339);
LABEL_51:
  v112 = (_QWORD *)((char *)&p_info[305]->flags + (_QWORD)v50);
  v113 = swift_beginAccess(v112, &v339, 0, 0);
  v114 = *v112;
  if (*(_QWORD *)(*v112 + 16))
  {
    swift_bridgeObjectRetain(*v112);
    v115 = sub_100003FB0(v328);
    v116 = v326;
    v117 = v327;
    v118 = v315;
    if ((v119 & 1) != 0)
    {
      sub_10005972C(*(_QWORD *)(v114 + 56) + *(_QWORD *)(v327 + 72) * v115, v315, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      v120 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v117 + 56);
      v120(v118, 0, 1, v116);
    }
    else
    {
      v120 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v327 + 56);
      v120(v315, 1, 1, v326);
    }
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48))(v118, 1, v116) != 1)
    {
      v122 = v118;
      v123 = v311;
      sub_1000126EC(v122, v311, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      v121 = *(_QWORD *)(v123 + *(int *)(v116 + 36));
      swift_errorRetain(v121);
      sub_1000126B0(v123, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      if (v121)
        v350 = 3;
      goto LABEL_60;
    }
  }
  else
  {
    v120 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v327 + 56);
    v118 = v315;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))v120)(v315, 1, 1, v326, v113);
  }
  sub_100004048(v118, &qword_1010EF1D8);
  v121 = 0;
LABEL_60:
  v124 = v350;
  v125 = SPBeaconTaskNamePlaySound;
  swift_errorRetain(v121);
  v126.super.isa = Date._bridgeToObjectiveC()().super.isa;
  if (v121)
  {
    v127 = (void *)_convertErrorToNSError(_:)(v121);
    swift_errorRelease(v121);
  }
  else
  {
    v127 = 0;
  }
  v338 = (os_log_t)objc_msgSend(objc_allocWithZone((Class)SPBeaconTaskInformation), "initWithName:lastUpdated:error:state:", v125, v126.super.isa, v127, v124);

  v128 = *v112;
  if (*(_QWORD *)(*v112 + 16))
  {
    swift_bridgeObjectRetain(*v112);
    v129 = sub_100003FB0(v328);
    v130 = v323;
    v131 = v326;
    v132 = v318;
    v133 = v317;
    if ((v134 & 1) != 0)
    {
      sub_10005972C(*(_QWORD *)(v128 + 56) + *(_QWORD *)(v327 + 72) * v129, v317, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      v135 = v133;
      v136 = 0;
    }
    else
    {
      v135 = v317;
      v136 = 1;
    }
    v120(v135, v136, 1, v131);
    swift_bridgeObjectRelease();
  }
  else
  {
    v133 = v317;
    v131 = v326;
    v120(v317, 1, 1, v326);
    v130 = v323;
    v132 = v318;
  }
  v137 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v327 + 48))(v133, 1, v131);
  v138 = v324;
  if (v137)
  {
    sub_100004048(v133, &qword_1010EF1D8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v138 + 56))(v316, 1, 1, v130);
    isa = 0;
  }
  else
  {
    v140 = v313;
    sub_10005972C(v133, v313, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    sub_100004048(v133, &qword_1010EF1D8);
    v141 = v316;
    (*(void (**)(char *, uint64_t, uint64_t))(v138 + 16))(v316, v140, v130);
    sub_1000126B0(v140, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v138 + 56))(v141, 0, 1, v130);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v138 + 48))(v141, 1, v130) == 1)
    {
      isa = 0;
    }
    else
    {
      isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v138 + 8))(v141, v130);
    }
  }
  -[NSObject setCommandIdentifier:](v338, "setCommandIdentifier:", isa);

  if (p_ivars[421] != (__objc2_ivar_list *)-1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v142 = type metadata accessor for Logger(0);
  sub_10001A9E8(v142, (uint64_t)qword_1011B71E0);
  v143 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v138 + 16))(v132, v328, v130);
  v144 = Logger.logObject.getter(v143);
  v145 = static os_log_type_t.info.getter(v144);
  if (os_log_type_enabled(v144, v145))
  {
    v146 = swift_slowAlloc(32, -1);
    v337 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))swift_slowAlloc(64, -1);
    v343 = (uint64_t)v337;
    *(_DWORD *)v146 = 141558531;
    *(_QWORD *)&v347 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v347, (char *)&v347 + 8, v146 + 4, v146 + 12);
    *(_WORD *)(v146 + 12) = 2081;
    v147 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v148 = dispatch thunk of CustomStringConvertible.description.getter(v130, v147);
    *(_QWORD *)&v347 = sub_100016940(v148, v149, &v343);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v347, (char *)&v347 + 8, v146 + 14, v146 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v138 + 8))(v132, v130);
    *(_WORD *)(v146 + 22) = 2082;
    swift_beginAccess(&v350, &v347, 0, 0);
    v150 = 0x676E696E6E75722ELL;
    v151 = 0xE800000000000000;
    switch(v350)
    {
      case -1:
        v150 = 0x6E776F6E6B6E752ELL;
        break;
      case 0:
        break;
      case 1:
        v150 = 0x676E69646E65702ELL;
        break;
      case 2:
        v151 = 0xE500000000000000;
        v150 = 0x656C64692ELL;
        break;
      case 3:
        v151 = 0xE600000000000000;
        v150 = 0x726F7272652ELL;
        break;
      case 4:
        v151 = 0xE700000000000000;
        v150 = 0x6465756575712ELL;
        break;
      default:
        v151 = 0x8000000100EDC950;
        v150 = 0xD000000000000010;
        break;
    }
    v346 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))sub_100016940(v150, v151, &v343);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, &v347, v146 + 24, v146 + 32);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v144, v145, "TaskInfo for Beacon: %{private,mask.hash}s has state: %{public}s.", (uint8_t *)v146, 0x20u);
    v161 = v337;
    swift_arrayDestroy(v337, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v161, -1, -1);
    swift_slowDealloc(v146, -1, -1);

    swift_errorRelease(v121);
  }
  else
  {

    swift_errorRelease(v121);
    (*(void (**)(char *, uint64_t))(v138 + 8))(v132, v130);
  }
  (*(void (**)(char *, uint64_t))(v320 + 8))(v325, v321);
  return v338;
}

uint64_t sub_1005DE620@<X0>(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  Class isa;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _BYTE v38[8];

  v37 = a3;
  v6 = type metadata accessor for Date(0);
  v35 = *(_QWORD *)(v6 - 8);
  v36 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OwnedBeaconGroup(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10081EDA8(a2, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_100004048((uint64_t)v11, (uint64_t *)&unk_1010FF7F0);
    result = (uint64_t)sub_1005DE998(a2);
    v17 = (id)result;
  }
  else
  {
    sub_1000126EC((uint64_t)v11, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
    sub_10036AC6C();
    v19 = v18;
    v20 = a1;
    v21 = (uint64_t)sub_1005FB0CC(v19, (uint64_t)v20, (uint64_t)v38, (uint64_t (*)(char *))sub_1005DE998);
    swift_bridgeObjectRelease();

    v34 = v3;
    if ((unint64_t)v21 >> 62)
      goto LABEL_26;
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v21);
    for (; v22; v22 = _CocoaArrayWrapper.endIndex.getter(v33))
    {
      v23 = v21 & 0xC000000000000001;
      v24 = 4;
      do
      {
        if (v23)
          v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24 - 4, v21);
        else
          v25 = *(id *)(v21 + 8 * v24);
        v17 = v25;
        v26 = v24 - 3;
        if (__OFADD__(v24 - 4, 1))
        {
          __break(1u);
          goto LABEL_25;
        }
        if (!objc_msgSend(v25, "state"))
        {
          swift_bridgeObjectRelease();
          sub_1000126B0((uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
          result = swift_bridgeObjectRelease();
          goto LABEL_23;
        }

        ++v24;
      }
      while (v26 != v22);
      v27 = 4;
      while (1)
      {
        v28 = v23
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v27 - 4, v21)
            : *(id *)(v21 + 8 * v27);
        v17 = v28;
        v29 = v27 - 3;
        if (__OFADD__(v27 - 4, 1))
          break;
        if (objc_msgSend(v28, "state") == (id)1)
        {
          swift_bridgeObjectRelease_n(v21, 2);
          goto LABEL_22;
        }

        ++v27;
        if (v29 == v22)
          goto LABEL_19;
      }
LABEL_25:
      __break(1u);
LABEL_26:
      if (v21 < 0)
        v33 = v21;
      else
        v33 = v21 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v21);
    }
LABEL_19:
    swift_bridgeObjectRelease_n(v21, 2);
    v30 = SPBeaconTaskNameStopSound;
    static Date.trustedNow.getter((uint64_t)v8);
    v31 = objc_allocWithZone((Class)SPBeaconTaskInformation);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v17 = objc_msgSend(v31, "initWithName:lastUpdated:error:state:", v30, isa, 0, 2);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v36);
LABEL_22:
    result = sub_1000126B0((uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
  }
LABEL_23:
  *v37 = v17;
  return result;
}

id sub_1005DE998(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t i;
  uint64_t v49;
  Swift::UInt v50;
  Swift::Int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char isUniquelyReferenced_nonNull_native;
  BOOL v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  __n128 v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  NSDate v80;
  void *v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  Class isa;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t (*v100)(uint64_t);
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD v123[8];
  _QWORD *v124;

  v3 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v3);
  v5 = (char *)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EF1D8);
  v7 = __chkstk_darwin(v6);
  v108 = (uint64_t)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v106 = (uint64_t)&v99 - v9;
  v113 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  v112 = *(_QWORD *)(v113 - 8);
  v10 = __chkstk_darwin(v113);
  v103 = (uint64_t)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v102 = (uint64_t)&v99 - v12;
  v13 = sub_10001A9A8(&qword_1010EF660);
  __chkstk_darwin(v13);
  v111 = (char *)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for BeaconObservation(0);
  v118 = *(_QWORD *)(v15 - 8);
  v119 = v15;
  v16 = __chkstk_darwin(v15);
  v116 = (uint64_t)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v117 = (char *)&v99 - v19;
  __chkstk_darwin(v18);
  v104 = (uint64_t)&v99 - v20;
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (uint64_t (*)(uint64_t))((char *)&v99 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = type metadata accessor for DispatchPredicate(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (uint64_t *)((char *)&v99 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v107 = v1;
  v29 = *(void **)(v1 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  *v28 = v29;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v26 + 104))(v28, enum case for DispatchPredicate.onQueue(_:), v25);
  v30 = v29;
  LOBYTE(v29) = _dispatchPreconditionTest(_:)(v28);
  v31 = (*(uint64_t (**)(_QWORD *, uint64_t))(v26 + 8))(v28, v25);
  if ((v29 & 1) == 0)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  Date.init()(v31);
  if (qword_1010E9CF0 != -1)
LABEL_57:
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v32 = qword_1011B7160;
  v105 = objc_autoreleasePoolPush();
  v33 = sub_10001A9A8(&qword_1010F7770);
  OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v32, v33);
  v34 = v123[0];
  v35 = *(_QWORD *)(v123[0] + 16);
  v36 = v119;
  v37 = (uint64_t)v111;
  v110 = v21;
  v109 = v22;
  if (v35 && (v38 = sub_100003FB0(a1), (v39 & 1) != 0))
  {
    v40 = *(_QWORD *)(*(_QWORD *)(v34 + 56) + 8 * v38);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRelease();
    v41 = sub_100508D98(v40);
    swift_bridgeObjectRelease();
    sub_10088FD00((uint64_t)v41);
    v43 = v42;
    swift_release(v41);
    v44 = _swiftEmptyArrayStorage;
    v124 = _swiftEmptyArrayStorage;
    v115 = *(_QWORD *)(v43 + 16);
    if (v115)
    {
      v99 = a1;
      v100 = v24;
      v101 = v5;
      v45 = 0;
      v24 = type metadata accessor for BeaconObservation;
      a1 = -1;
      v5 = (char *)qword_100E452A0;
      v21 = (uint64_t)v117;
      v114 = v43;
      while (1)
      {
        if (v45 >= *(_QWORD *)(v43 + 16))
        {
          __break(1u);
          goto LABEL_56;
        }
        v46 = (*(unsigned __int8 *)(v118 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80);
        v121 = *(_QWORD *)(v118 + 72);
        v122 = v45 + 1;
        v120 = v46;
        sub_10005972C(v43 + v46 + v121 * v45, v21, type metadata accessor for BeaconObservation);
        sub_100374684();
        v22 = Set.init(minimumCapacity:)(7);
        v47 = 0;
        for (i = v22 + 56; ; i = v22 + 56)
        {
          while (1)
          {
            v49 = *((char *)&off_101048718 + v47++ + 32);
            Hasher.init(_seed:)(v123);
            v50 = qword_100E452A0[v49];
            Hasher._combine(_:)(v50);
            v51 = Hasher._finalize()();
            v52 = -1 << *(_BYTE *)(v22 + 32);
            v53 = v51 & ~v52;
            if (((*(_QWORD *)(i + ((v53 >> 3) & 0xFFFFFFFFFFFFF8)) >> v53) & 1) == 0)
              goto LABEL_18;
            v54 = *(_QWORD *)(v22 + 48);
            if (qword_100E452A0[*(char *)(v54 + v53)] != v50)
              break;
LABEL_11:
            if (v47 == 7)
              goto LABEL_20;
          }
          v55 = ~v52;
          while (1)
          {
            v53 = (v53 + 1) & v55;
            if (((*(_QWORD *)(i + ((v53 >> 3) & 0xFFFFFFFFFFFFF8)) >> v53) & 1) == 0)
              break;
            if (qword_100E452A0[*(char *)(v54 + v53)] == v50)
              goto LABEL_11;
          }
LABEL_18:
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v22);
          v123[0] = v22;
          sub_100A1F790(v49, v53, isUniquelyReferenced_nonNull_native);
          v22 = v123[0];
          swift_bridgeObjectRelease();
          if (v47 == 7)
            break;
        }
LABEL_20:
        v36 = v119;
        v21 = (uint64_t)v117;
        v57 = sub_100A07E5C(v117[*(int *)(v119 + 24)], v22);
        swift_bridgeObjectRelease();
        if (v57)
        {
          v24 = type metadata accessor for BeaconObservation;
          sub_1000126EC(v21, v116, type metadata accessor for BeaconObservation);
          v58 = v124;
          if ((swift_isUniquelyReferenced_nonNull_native(v124) & 1) == 0)
          {
            sub_10009AAC8(0, v58[2] + 1, 1);
            v58 = v124;
          }
          v22 = v120;
          v60 = v58[2];
          v59 = v58[3];
          if (v60 >= v59 >> 1)
          {
            sub_10009AAC8(v59 > 1, v60 + 1, 1);
            v58 = v124;
          }
          v58[2] = v60 + 1;
          sub_1000126EC(v116, (uint64_t)v58 + v22 + v60 * v121, type metadata accessor for BeaconObservation);
        }
        else
        {
          v24 = type metadata accessor for BeaconObservation;
          sub_1000126B0(v21, type metadata accessor for BeaconObservation);
        }
        v43 = v114;
        v45 = v122;
        if (v122 == v115)
        {
          v44 = v124;
          v5 = v101;
          v21 = v110;
          v22 = v109;
          v24 = v100;
          a1 = v99;
          v37 = (uint64_t)v111;
          break;
        }
      }
    }
    swift_release(v43);
  }
  else
  {
    swift_bridgeObjectRelease();
    v44 = _swiftEmptyArrayStorage;
  }
  objc_autoreleasePoolPop(v105);
  sub_100A797E8((uint64_t)v44, v37);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48))(v37, 1, v36) == 1)
  {
    sub_100004048(v37, &qword_1010EF660);
    v61 = 2;
  }
  else
  {
    (*(void (**)(uint64_t (*)(uint64_t), uint64_t))(v22 + 8))(v24, v21);
    v62 = v37;
    v63 = v104;
    sub_1000126EC(v62, v104, type metadata accessor for BeaconObservation);
    v61 = 2 * (*(_BYTE *)(v63 + *(int *)(v36 + 24)) != 26);
    (*(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t))(v22 + 16))(v24, v63 + *(int *)(v36 + 20), v21);
    sub_1000126B0(v63, type metadata accessor for BeaconObservation);
  }
  v64 = (_QWORD *)(v107 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  v65 = swift_beginAccess(v107 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v123, 0, 0);
  v66 = *v64;
  if (!*(_QWORD *)(*v64 + 16))
  {
    v68 = a1;
    v67 = v5;
    v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v112 + 56);
    v72 = v106;
    v73(v106, 1, 1, v113, v65);
LABEL_38:
    sub_100004048(v72, &qword_1010EF1D8);
    v77 = 0;
    goto LABEL_41;
  }
  v67 = v5;
  swift_bridgeObjectRetain(*v64);
  v68 = a1;
  v69 = sub_100003FB0(a1);
  v71 = v112;
  if ((v70 & 1) != 0)
  {
    v72 = v106;
    sub_10005972C(*(_QWORD *)(v66 + 56) + *(_QWORD *)(v112 + 72) * v69, v106, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v71 + 56);
    v74 = v72;
    v75 = 0;
  }
  else
  {
    v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v112 + 56);
    v72 = v106;
    v74 = v106;
    v75 = 1;
  }
  v76 = v113;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v73)(v74, v75, 1, v113);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v72, 1, v76) == 1)
    goto LABEL_38;
  v78 = v102;
  sub_1000126EC(v72, v102, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v77 = *(_QWORD *)(v78 + *(int *)(v76 + 36));
  swift_errorRetain(v77);
  sub_1000126B0(v78, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  if (v77)
    v61 = 3;
LABEL_41:
  v79 = SPBeaconTaskNameStopSound;
  swift_errorRetain(v77);
  v80.super.isa = Date._bridgeToObjectiveC()().super.isa;
  if (v77)
  {
    v81 = (void *)_convertErrorToNSError(_:)(v77);
    swift_errorRelease(v77);
  }
  else
  {
    v81 = 0;
  }
  v82 = objc_msgSend(objc_allocWithZone((Class)SPBeaconTaskInformation), "initWithName:lastUpdated:error:state:", v79, v80.super.isa, v81, v61);

  v83 = *v64;
  if (*(_QWORD *)(*v64 + 16))
  {
    swift_bridgeObjectRetain(*v64);
    v84 = sub_100003FB0(v68);
    v85 = v108;
    v86 = v113;
    v87 = v112;
    if ((v88 & 1) != 0)
    {
      sub_10005972C(*(_QWORD *)(v83 + 56) + *(_QWORD *)(v112 + 72) * v84, v108, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      v89 = v85;
      v90 = 0;
    }
    else
    {
      v89 = v108;
      v90 = 1;
    }
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v73)(v89, v90, 1, v86);
    swift_bridgeObjectRelease();
  }
  else
  {
    v85 = v108;
    v86 = v113;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v73)(v108, 1, 1, v113);
    v87 = v112;
  }
  v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v85, 1, v86);
  v92 = v110;
  if (v91)
  {
    sub_100004048(v85, &qword_1010EF1D8);
    v93 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v67, 1, 1, v93);
    isa = 0;
  }
  else
  {
    v95 = v103;
    sub_10005972C(v85, v103, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    sub_100004048(v85, &qword_1010EF1D8);
    v96 = type metadata accessor for UUID(0);
    v97 = *(_QWORD *)(v96 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v67, v95, v96);
    sub_1000126B0(v95, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v67, 0, 1, v96);
    isa = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v67, 1, v96) != 1)
    {
      isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v97 + 8))(v67, v96);
    }
  }
  objc_msgSend(v82, "setCommandIdentifier:", isa, v99, v100, v101);

  swift_errorRelease(v77);
  (*(void (**)(uint64_t (*)(uint64_t), uint64_t))(v109 + 8))(v24, v92);
  return v82;
}

id sub_1005DF4FC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SoundPlaybackManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1005DF5B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  id v20;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v2 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v2);
  v4 = (char *)&v23[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for WildModeAssociationRecord(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10081C0CC(a1, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100004048((uint64_t)v4, &qword_101102FB0);
    sub_10080B648(a1, (uint64_t)v23);
    v9 = v24;
    if (v24)
    {
      v10 = v25;
      sub_10001AA44(v23, v24);
      v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 176))(v9, v10);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v23);
      v12 = (void *)SPBeaconTypeHele;
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v15 = v14;
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      if (v13 == v17 && v15 == v16)
        v18 = 1;
      else
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v17, v16, 0);
      v20 = v12;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100004048((uint64_t)v23, (uint64_t *)&unk_1010EE310);
      v18 = 0;
    }
  }
  else
  {
    sub_1000126EC((uint64_t)v4, (uint64_t)v8, type metadata accessor for WildModeAssociationRecord);
    v19 = v8[*(int *)(v5 + 52)];
    sub_1000126B0((uint64_t)v8, type metadata accessor for WildModeAssociationRecord);
    v18 = v19 == 3;
  }
  return v18 & 1;
}

uint64_t sub_1005DF7B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39[3];
  uint64_t v40;
  uint64_t v41;

  v2 = type metadata accessor for UUID(0);
  v35 = *(_QWORD *)(v2 - 8);
  v36 = v2;
  __chkstk_darwin(v2);
  v34 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_10110EEB0);
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BeaconProductInfoRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for WildModeAssociationRecord(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10081C0CC(a1, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_100004048((uint64_t)v13, &qword_101102FB0);
    sub_10080B648(a1, (uint64_t)&v37);
    if (v38)
    {
      sub_10000F9FC(&v37, (uint64_t)v39);
      sub_10081BB64(a1, (uint64_t)v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      {
        sub_100004048((uint64_t)v6, &qword_10110EEB0);
        v19 = v40;
        v18 = v41;
        sub_10001AA44(v39, v40);
        LOBYTE(v19) = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 96))(v19, v18);
      }
      else
      {
        sub_1000126EC((uint64_t)v6, (uint64_t)v10, type metadata accessor for BeaconProductInfoRecord);
        LODWORD(v19) = (*(_DWORD *)&v10[*(int *)(v7 + 68)] >> 8) & 1;
        sub_1000126B0((uint64_t)v10, type metadata accessor for BeaconProductInfoRecord);
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v39);
    }
    else
    {
      sub_100004048((uint64_t)&v37, (uint64_t *)&unk_1010EE310);
      if (qword_1010E9D38 != -1)
        swift_once(&qword_1010E9D38, sub_1005D45D4);
      v20 = type metadata accessor for Logger(0);
      sub_10001A9E8(v20, (uint64_t)qword_101100948);
      v22 = v34;
      v21 = v35;
      v23 = v36;
      v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, a1, v36);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.error.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = swift_slowAlloc(22, -1);
        v28 = swift_slowAlloc(32, -1);
        v39[0] = v28;
        *(_DWORD *)v27 = 141558275;
        *(_QWORD *)&v37 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 8, v27 + 4, v27 + 12);
        *(_WORD *)(v27 + 12) = 2081;
        v29 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v30 = dispatch thunk of CustomStringConvertible.description.getter(v23, v29);
        *(_QWORD *)&v37 = sub_100016940(v30, v31, v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 8, v27 + 14, v27 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v23);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Missing beacon record for %{private,mask.hash}s!", (uint8_t *)v27, 0x16u);
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v27, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v23);
      }

      LOBYTE(v19) = 0;
    }
  }
  else
  {
    sub_1000126EC((uint64_t)v13, (uint64_t)v17, type metadata accessor for WildModeAssociationRecord);
    LOBYTE(v19) = sub_1001DB970();
    sub_1000126B0((uint64_t)v17, type metadata accessor for WildModeAssociationRecord);
  }
  return v19 & 1;
}

void sub_1005DFC1C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;

  sub_10036AC6C();
  v4 = v3;
  v5 = a2;
  sub_1005F86C8(v4, (uint64_t)v5);
  swift_bridgeObjectRelease();

}

uint64_t sub_1005DFC78(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(_QWORD);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v41;
  char *v42;
  void *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD aBlock[7];

  v48 = a5;
  v43 = a2;
  v44 = a3;
  v46 = a1;
  v50 = type metadata accessor for DispatchWorkItemFlags(0);
  v53 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v49 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v10 - 8);
  v52 = v10;
  __chkstk_darwin(v10);
  v45 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v41 = v12;
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v42 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OwnedBeaconGroup(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = *(_QWORD *)&a2[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
  sub_10005972C(v44, (uint64_t)v18, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a4, v12);
  v20 = *(unsigned __int8 *)(v16 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = (v17 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(unsigned __int8 *)(v13 + 80);
  v25 = (v24 + v23 + 8) & ~v24;
  v26 = (v14 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(&unk_101082150, v27 + 8, v20 | v24 | 7);
  sub_1000126EC((uint64_t)v18, v28 + v21, type metadata accessor for OwnedBeaconGroup);
  v29 = v42;
  v30 = v43;
  *(_QWORD *)(v28 + v22) = v43;
  *(double *)(v28 + v23) = a6;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v28 + v25, v29, v41);
  *(_QWORD *)(v28 + v26) = v48;
  *(_QWORD *)(v28 + v27) = v46;
  aBlock[4] = sub_1005FBB90;
  aBlock[5] = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101082168;
  v31 = _Block_copy(aBlock);
  v32 = v30;
  v33 = swift_retain();
  v34 = v45;
  static DispatchQoS.unspecified.getter(v33);
  v54 = _swiftEmptyArrayStorage;
  v35 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v36 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v37 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v39 = v49;
  v38 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v36, v37, v50, v35);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v34, v39, v31);
  _Block_release(v31);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v39, v38);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v34, v52);
  return swift_release();
}

uint64_t sub_1005DFFCC(uint64_t a1, void *a2, void (*a3)(_QWORD, _QWORD, _QWORD), uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(_BYTE *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  int v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void (*v78)(_BYTE *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  void (*v86)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v87;
  char *v88;
  __n128 v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  _BYTE *v99;
  void *v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  double v126;
  uint64_t v127;
  unint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  _BYTE *v131;
  double v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _BYTE *v137;
  double v138;
  _BYTE *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(_BYTE *, _QWORD, uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  _BYTE *v165;
  uint64_t v166;
  void (*v167)(uint64_t, _BYTE *, uint64_t);
  uint64_t v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  _BYTE *v173;
  uint64_t v174;
  _BYTE *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  _BYTE *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  _BYTE *v190;
  uint64_t v191;
  _BYTE *v192;
  uint64_t v194;
  _BYTE *v195;
  _BYTE *v196;
  _BYTE *v197;
  _BYTE *v198;
  uint64_t v199;
  NSObject *v200;
  os_log_type_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  _BYTE *v206;
  double v207;
  uint64_t v208;
  NSObject *v209;
  os_log_type_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  _BYTE *v215;
  uint64_t v216;
  _BYTE *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  id v225;
  void *v226;
  id v227;
  _BYTE *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _BYTE *v232;
  uint64_t v233;
  _BYTE *v234;
  void (*v235)(_QWORD, _QWORD, _QWORD);
  _BYTE v236[12];
  int v237;
  uint64_t v238;
  _BYTE *v239;
  uint64_t v240;
  _BYTE *v241;
  uint64_t v242;
  uint64_t v243;
  _BYTE *v244;
  uint64_t v245;
  uint64_t v246;
  _BYTE *v247;
  uint64_t v248;
  uint64_t v249;
  _BYTE *v250;
  uint64_t v251;
  _BYTE *v252;
  _BYTE *v253;
  uint64_t v254;
  _BYTE *v255;
  uint64_t v256;
  _BYTE *v257;
  uint64_t v258;
  _BYTE *v259;
  _BYTE *v260;
  uint64_t v261;
  uint64_t v262;
  _BYTE *v263;
  uint64_t v264;
  unint64_t v265;
  _BYTE *v266;
  uint64_t v267;
  uint64_t v268;
  _BYTE *v269;
  _BYTE *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  _BYTE *v275;
  uint64_t v276;
  uint64_t v277;
  _BYTE *v278;
  uint64_t v279;
  uint64_t v280;
  _BYTE *v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _BYTE *v287;
  _BYTE *v288;
  _BYTE *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  void (*v293)(_BYTE *, _QWORD, uint64_t);
  int v294;
  uint64_t v295;
  uint64_t v296;
  _BYTE *v297;
  _BYTE *v298;
  uint64_t v299;
  void (*v300)(_QWORD, _QWORD, _QWORD);
  _BYTE *v301;
  char *v302;
  _BYTE *v303;
  unint64_t v304;
  uint64_t v305;
  _BYTE *v306;
  uint64_t aBlock[6];
  uint64_t v308;
  char v309[8];
  uint64_t v310;
  double v311;
  char v312[8];

  v296 = a5;
  v292 = a4;
  v300 = a3;
  v264 = sub_10001A9A8(&qword_101100A68);
  v304 = *(_QWORD *)(v264 - 8);
  __chkstk_darwin(v264);
  v263 = &v236[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v262 = sub_10001A9A8(&qword_101100A70);
  v261 = *(_QWORD *)(v262 - 8);
  __chkstk_darwin(v262);
  v260 = &v236[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v11);
  v281 = &v236[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v272 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v271 = *(_QWORD *)(v272 - 8);
  __chkstk_darwin(v272);
  v269 = &v236[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v268 = sub_10001A9A8(&qword_101100A78);
  v267 = *(_QWORD *)(v268 - 8);
  __chkstk_darwin(v268);
  v266 = &v236[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v274 = sub_10001A9A8(&qword_101100A80);
  v273 = *(_QWORD *)(v274 - 8);
  __chkstk_darwin(v274);
  v270 = &v236[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v277 = sub_10001A9A8(&qword_101100A88);
  v276 = *(_QWORD *)(v277 - 8);
  __chkstk_darwin(v277);
  v275 = &v236[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v280 = sub_10001A9A8(&qword_101100A90);
  v279 = *(_QWORD *)(v280 - 8);
  __chkstk_darwin(v280);
  v278 = &v236[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v283 = sub_10001A9A8(&qword_101100A98);
  v282 = *(_QWORD *)(v283 - 8);
  __chkstk_darwin(v283);
  v288 = &v236[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v19);
  v289 = &v236[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v246 = type metadata accessor for DispatchWorkItemFlags(0);
  v245 = *(_QWORD *)(v246 - 8);
  __chkstk_darwin(v246);
  v244 = &v236[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v243 = type metadata accessor for DispatchQoS(0);
  v242 = *(_QWORD *)(v243 - 8);
  __chkstk_darwin(v243);
  v241 = &v236[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = type metadata accessor for OwnedBeaconGroup(0);
  v284 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v291 = v24;
  v297 = &v236[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v251 = type metadata accessor for DispatchTime(0);
  v240 = *(_QWORD *)(v251 - 8);
  v25 = __chkstk_darwin(v251);
  v239 = &v236[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v25);
  v250 = &v236[-v27];
  v249 = type metadata accessor for Date(0);
  v248 = *(_QWORD *)(v249 - 8);
  __chkstk_darwin(v249);
  v247 = &v236[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v29 = sub_10001A9A8(&qword_1010EF1D8);
  __chkstk_darwin(v29);
  v257 = &v236[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v258 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  v256 = *(_QWORD *)(v258 - 8);
  v31 = __chkstk_darwin(v258);
  v253 = &v236[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v33 = __chkstk_darwin(v31);
  v306 = &v236[-v34];
  __chkstk_darwin(v33);
  v255 = &v236[-v35];
  v36 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v36);
  v303 = &v236[-((v37 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v38 = type metadata accessor for UUID(0);
  v39 = __chkstk_darwin(v38);
  v287 = &v236[-((v40 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v41 = __chkstk_darwin(v39);
  v252 = &v236[-v42];
  v43 = __chkstk_darwin(v41);
  v298 = &v236[-v44];
  v45 = __chkstk_darwin(v43);
  v259 = &v236[-v46];
  v47 = __chkstk_darwin(v45);
  v49 = &v236[-v48];
  v50 = __chkstk_darwin(v47);
  v52 = &v236[-v51];
  v290 = v53;
  __chkstk_darwin(v50);
  v55 = &v236[-v54];
  v56 = a1 + *(int *)(v23 + 24);
  v299 = v57;
  v58 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v57 + 16);
  v58(&v236[-v54], v56, v38);
  sub_10036AC6C();
  v60 = v59;
  v61 = a2;
  sub_1005FA0C4(v60, (uint64_t)v61);
  v63 = v62;
  v305 = 0;
  swift_bridgeObjectRelease();
  v302 = v61;

  v294 = v63;
  v64 = 0x6575657551;
  if ((v63 & 1) == 0)
    v64 = 0;
  v285 = v64;
  if ((v63 & 1) != 0)
    v65 = 0xE500000000000000;
  else
    v65 = 0xE000000000000000;
  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v66 = type metadata accessor for Logger(0);
  v67 = sub_10001A9E8(v66, (uint64_t)qword_1011B71E0);
  v58(v52, (uint64_t)v55, v38);
  v293 = v58;
  v58(v49, (uint64_t)v300, v38);
  swift_bridgeObjectRetain_n(v65, 2);
  v254 = v67;
  v69 = Logger.logObject.getter(v68);
  v70 = static os_log_type_t.default.getter(v69);
  v71 = v70;
  v72 = os_log_type_enabled(v69, v70);
  v301 = v55;
  v295 = a1;
  v265 = v65;
  if (v72)
  {
    v73 = swift_slowAlloc(42, -1);
    v238 = swift_slowAlloc(96, -1);
    aBlock[0] = v238;
    *(_DWORD *)v73 = 136446978;
    v237 = v71;
    swift_bridgeObjectRetain(v65);
    v308 = sub_100016940(v285, v65, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v309, v73 + 4, v73 + 12);
    swift_bridgeObjectRelease_n(v65, 3);
    *(_WORD *)(v73 + 12) = 2082;
    v74 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v75 = dispatch thunk of CustomStringConvertible.description.getter(v38, v74);
    v308 = sub_100016940(v75, v76, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v309, v73 + 14, v73 + 22);
    swift_bridgeObjectRelease();
    v77 = v299;
    v78 = *(void (**)(_BYTE *, uint64_t))(v299 + 8);
    v78(v52, v38);
    *(_WORD *)(v73 + 22) = 2048;
    v308 = *(_QWORD *)&a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v309, v73 + 24, v73 + 32);
    *(_WORD *)(v73 + 32) = 2082;
    v79 = v74;
    a1 = v295;
    v80 = dispatch thunk of CustomStringConvertible.description.getter(v38, v79);
    v308 = sub_100016940(v80, v81, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v308, v309, v73 + 34, v73 + 42);
    swift_bridgeObjectRelease();
    v78(v49, v38);
    _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v237, "%{public}s playSound for group %{public}s with timeout %f. CommandId %{public}s", (uint8_t *)v73, 0x2Au);
    v82 = v238;
    swift_arrayDestroy(v238, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v82, -1, -1);
    swift_slowDealloc(v73, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v65, 2);
    v77 = v299;
    v78 = *(void (**)(_BYTE *, uint64_t))(v299 + 8);
    v78(v52, v38);
    v78(v49, v38);
  }

  v83 = (uint64_t)v306;
  if ((v294 & 1) == 0)
    goto LABEL_22;
  sub_10036AC6C();
  v84 = v303;
  sub_1000FC598(v85, (uint64_t)v303);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v77 + 48))(v84, 1, v38) == 1)
  {
    sub_100004048((uint64_t)v84, &qword_1010ED860);
LABEL_22:
    v286 = v38;
    v98 = v302;
    v99 = v289;
    sub_1007F3570(a1, (uint64_t)v289);
    v100 = sub_1007F78E4(a1);
    v101 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_10036AC6C();
    v103 = v102;
    __chkstk_darwin(v102);
    *(_QWORD *)&v236[-48] = v99;
    *(_QWORD *)&v236[-40] = v100;
    *(_QWORD *)&v236[-32] = aBlock;
    *(_QWORD *)&v236[-24] = v98;
    v235 = v300;
    sub_1003F08EC((void (*)(char *))sub_1005FBC2C, (uint64_t)&v236[-64], v103);
    swift_bridgeObjectRelease();
    v104 = swift_bridgeObjectRelease();
    v306 = (_BYTE *)aBlock[0];
    v305 = *(_QWORD *)(aBlock[0] + 16);
    if (v305)
    {
      v311 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
      swift_bridgeObjectRetain(v306);
      specialized ContiguousArray.reserveCapacity(_:)(v305);
      v303 = (_BYTE *)sub_1000193A4(&qword_101100AB0, &qword_101100AA0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
      v105 = 0;
      v106 = v264;
      v107 = v263;
      v108 = v262;
      v109 = v261;
      v110 = v260;
      do
      {
        v111 = v105 + 1;
        v310 = *(_QWORD *)&v306[8 * v105 + 32];
        swift_retain();
        v112 = sub_10001A9A8(&qword_101100AA0);
        v113 = sub_10001A9A8(&qword_101100AA8);
        Publisher.map<A>(_:)(sub_1005E395C, 0, v112, v113, v303);
        v114 = sub_10001A9A8(&qword_101100AB8);
        v115 = sub_1000193A4(&qword_101100AC0, &qword_101100A68, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
        v116 = sub_1000193A4(&qword_101100AC8, &qword_101100AB8, (const char *)&protocol conformance descriptor for Just<A>);
        Publisher.catch<A>(_:)(sub_1005E3960, 0, v106, v114, v115, v116);
        (*(void (**)(_BYTE *, uint64_t))(v304 + 8))(v107, v106);
        v117 = sub_1000193A4(&qword_101100AD0, &qword_101100A70, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
        v118 = Publisher.eraseToAnyPublisher()(v108, v117);
        (*(void (**)(_BYTE *, uint64_t))(v109 + 8))(v110, v108);
        v119 = swift_release();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v119);
        v120 = *(_QWORD *)(*(_QWORD *)&v311 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v120);
        v121 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v120, v118);
        specialized ContiguousArray._endMutation()(v121);
        v105 = v111;
      }
      while (v305 != v111);
      v101 = v311;
      v104 = swift_bridgeObjectRelease();
    }
    v306 = (_BYTE *)Transaction.subscriptionCleaner.getter(v104);
    v122 = swift_allocObject(&unk_1010821A0, 25, 7);
    v305 = v122;
    *(_QWORD *)(v122 + 16) = 2;
    *(_BYTE *)(v122 + 24) = 1;
    v311 = v101;
    v123 = sub_10001A9A8(&qword_101100AD8);
    v124 = sub_1000193A4(&qword_101100AE0, &qword_101100AD8, (const char *)&protocol conformance descriptor for [A]);
    v125 = sub_1000193A4(&qword_101100AE8, &qword_101100AF0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v126 = COERCE_DOUBLE(Sequence<>.merged()(v123, v124, v125));
    swift_bridgeObjectRelease();
    v311 = v126;
    v127 = sub_10001A9A8(&qword_101100AF0);
    v128 = sub_1005FA87C();
    v129 = v266;
    Publisher<>.setFailureType<A>(to:)(&type metadata for SoundPlaybackManager.SoundPlaybackManagerError, v127, &type metadata for SoundPlaybackManager.SoundPlaybackManagerError, v125, v128);
    v130 = swift_release();
    v131 = v269;
    static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v130, a6);
    v311 = *(double *)&v302[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
    v132 = v311;
    v133 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v304 = *(_QWORD *)(*(_QWORD *)(v133 - 8) + 56);
    v134 = (uint64_t)v281;
    ((void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))v304)(v281, 1, 1, v133);
    v135 = sub_10001F6FC();
    v264 = v135;
    v136 = sub_1000193A4(&qword_101100B00, &qword_101100A78, (const char *)&protocol conformance descriptor for Publishers.SetFailureType<A, B>);
    v137 = (_BYTE *)sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    v303 = v137;
    v138 = COERCE_DOUBLE(*(id *)&v132);
    v139 = v270;
    v140 = v268;
    Publisher.timeout<A>(_:scheduler:options:customError:)(v131, &v311, v134, sub_1005E396C, 0, v268, v135, v136, v137);
    sub_100004048(v134, &qword_1010EECC8);

    (*(void (**)(_BYTE *, uint64_t))(v271 + 8))(v131, v272);
    (*(void (**)(_BYTE *, uint64_t))(v267 + 8))(v129, v140);
    v141 = sub_10001A9A8(&qword_101100B08);
    v142 = sub_1000193A4(&qword_101100B10, &qword_101100A80, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
    v143 = v275;
    v144 = v274;
    Publisher.map<A>(_:)(sub_1005E3978, 0, v274, v141, v142);
    (*(void (**)(_BYTE *, uint64_t))(v273 + 8))(v139, v144);
    v145 = sub_10001A9A8(&qword_101100B18);
    v146 = sub_1000193A4(&qword_101100B20, &qword_101100A88, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v147 = sub_1000193A4(&qword_101100B28, &qword_101100B18, (const char *)&protocol conformance descriptor for Just<A>);
    v148 = v278;
    v149 = v277;
    Publisher.catch<A>(_:)(sub_1005E397C, 0, v277, v145, v146, v147);
    (*(void (**)(_BYTE *, uint64_t))(v276 + 8))(v143, v149);
    v311 = v138;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v304)(v134, 1, 1, v133);
    v150 = sub_1000193A4(&qword_101100B30, &qword_101100A90, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
    v151 = *(id *)&v138;
    v152 = v280;
    Publisher.receive<A>(on:options:)(&v311, v134, v280, v264, v150, v303);
    sub_100004048(v134, &qword_1010EECC8);

    (*(void (**)(_BYTE *, uint64_t))(v279 + 8))(v148, v152);
    v153 = v286;
    v154 = v293;
    v293(v298, v301, v286);
    v155 = v153;
    v154(v287, v300, v153);
    sub_10005972C(v295, (uint64_t)v297, type metadata accessor for OwnedBeaconGroup);
    v156 = v299;
    v157 = *(unsigned __int8 *)(v299 + 80);
    v158 = (v157 + 32) & ~v157;
    v304 = (v158 + v290 + 7) & 0xFFFFFFFFFFFFFFF8;
    v159 = (v158 + v290 + 23) & 0xFFFFFFFFFFFFFFF8;
    v160 = (v157 + v159 + 8) & ~v157;
    v161 = *(unsigned __int8 *)(v284 + 80);
    v162 = (v290 + v161 + v160) & ~v161;
    v303 = (_BYTE *)(v157 | v161 | 7);
    v284 = (v291 + v162 + 7) & 0xFFFFFFFFFFFFFFF8;
    v163 = (v284 + 15) & 0xFFFFFFFFFFFFFFF8;
    v164 = swift_allocObject(&unk_1010821C8, v163 + 8, v303);
    v165 = v306;
    *(_QWORD *)(v164 + 16) = v296;
    *(_QWORD *)(v164 + 24) = v165;
    v166 = v164 + v158;
    v167 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v156 + 32);
    v168 = v155;
    v167(v166, v298, v155);
    v300 = (void (*)(_QWORD, _QWORD, _QWORD))v167;
    v169 = v164 + v304;
    *(_QWORD *)v169 = v305;
    LODWORD(v304) = v294 & 1;
    *(_BYTE *)(v169 + 8) = v294 & 1;
    v170 = v302;
    *(_QWORD *)(v164 + v159) = v302;
    v171 = v164 + v160;
    v172 = v168;
    v167(v171, v287, v168);
    v173 = v297;
    sub_1000126EC((uint64_t)v297, v164 + v162, type metadata accessor for OwnedBeaconGroup);
    *(_QWORD *)(v164 + v284) = v292;
    *(double *)(v164 + v163) = a6;
    v174 = swift_allocObject(&unk_101081E08, 24, 7);
    swift_unknownObjectWeakInit(v174 + 16, v170);
    v175 = v298;
    v293(v298, v301, v172);
    sub_10005972C(v295, (uint64_t)v173, type metadata accessor for OwnedBeaconGroup);
    v176 = (v157 + 40) & ~v157;
    v177 = (v290 + v176 + 7) & 0xFFFFFFFFFFFFFFF8;
    v178 = (v177 + 15) & 0xFFFFFFFFFFFFFFF8;
    v179 = (v178 + 15) & 0xFFFFFFFFFFFFFFF8;
    v180 = (v161 + v179 + 8) & ~v161;
    v181 = v180 + v291;
    v182 = (_QWORD *)swift_allocObject(&unk_1010821F0, v180 + v291 + 1, v303);
    v183 = v285;
    v182[2] = v174;
    v182[3] = v183;
    v182[4] = v265;
    v184 = v175;
    v185 = v286;
    v300((char *)v182 + v176, v184, v286);
    v186 = v305;
    *(_QWORD *)((char *)v182 + v177) = v305;
    *(double *)((char *)v182 + v178) = a6;
    *(_QWORD *)((char *)v182 + v179) = v292;
    sub_1000126EC((uint64_t)v297, (uint64_t)v182 + v180, type metadata accessor for OwnedBeaconGroup);
    *((_BYTE *)v182 + v181) = v304;
    v187 = sub_1000193A4(&qword_101100B38, &qword_101100A98, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    swift_retain_n(v186, 2);
    v188 = v302;
    v189 = v296;
    swift_retain();
    v190 = v306;
    swift_unknownObjectRetain(v306);
    v191 = v283;
    v192 = v288;
    Publisher.sink(receiveCompletion:receiveValue:)(sub_1005FBDEC, v164, sub_1005FC004, v182, v283, v187);
    swift_release();
    swift_release();
    (*(void (**)(_BYTE *, uint64_t))(v282 + 8))(v192, v191);
    AnyCancellable.store(in:)(v189);
    swift_unknownObjectRelease(v190);
    swift_release();
    (*(void (**)(_BYTE *, uint64_t))(v299 + 8))(v301, v185);
    sub_100004048((uint64_t)v289, (uint64_t *)&unk_1010F47C0);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v86 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v77 + 32);
  v87 = (uint64_t)v259;
  v86(v259, v84, v38);
  v88 = &v302[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators];
  v89 = swift_beginAccess(&v302[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators], &v308, 0, 0);
  v90 = *(_QWORD *)v88;
  if (!*(_QWORD *)(*(_QWORD *)v88 + 16))
  {
    v95 = v257;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, __n128))(v256 + 56))(v257, 1, 1, v258, v89);
    v92 = v87;
LABEL_20:
    v78((_BYTE *)v92, v38);
    sub_100004048((uint64_t)v95, &qword_1010EF1D8);
LABEL_21:
    a1 = v295;
    goto LABEL_22;
  }
  swift_bridgeObjectRetain(*(_QWORD *)v88);
  v91 = sub_100003FB0(v87);
  v92 = v87;
  if ((v93 & 1) != 0)
  {
    v94 = v256;
    v95 = v257;
    sub_10005972C(*(_QWORD *)(v90 + 56) + *(_QWORD *)(v256 + 72) * v91, (uint64_t)v257, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v96 = 0;
    v97 = v258;
  }
  else
  {
    v96 = 1;
    v97 = v258;
    v95 = v257;
    v94 = v256;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v94 + 56))(v95, v96, 1, v97);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v94 + 48))(v95, 1, v97) == 1)
    goto LABEL_20;
  v194 = (uint64_t)v95;
  v195 = v255;
  sub_1000126EC(v194, (uint64_t)v255, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  if (!v195[*(int *)(v97 + 24)])
  {
    v206 = v247;
    static Date.trustedNow.getter((uint64_t)v247);
    v207 = Date.timeIntervalSince(_:)(&v195[*(int *)(v97 + 32)]);
    (*(void (**)(_BYTE *, uint64_t))(v248 + 8))(v206, v249);
    if (a6 * 0.5 >= v207)
    {
      swift_bridgeObjectRelease();
      v208 = sub_10005972C((uint64_t)v195, v83, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      v209 = Logger.logObject.getter(v208);
      v210 = static os_log_type_t.error.getter(v209);
      if (os_log_type_enabled(v209, v210))
      {
        v211 = swift_slowAlloc(22, -1);
        v305 = swift_slowAlloc(32, -1);
        aBlock[0] = v305;
        *(_DWORD *)v211 = 136446466;
        v212 = Date.localISO8601.getter();
        v311 = COERCE_DOUBLE(sub_100016940(v212, v213, aBlock));
        v77 = v299;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v311, v312, v211 + 4, v211 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v83, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
        *(_WORD *)(v211 + 12) = 2050;
        v311 = v207;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v311, v312, v211 + 14, v211 + 22);
        _os_log_impl((void *)&_mh_execute_header, v209, v210, "Last retry %{public}s.\nTime since: %{public}f. Defer retry", (uint8_t *)v211, 0x16u);
        v214 = v305;
        swift_arrayDestroy(v305, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v214, -1, -1);
        swift_slowDealloc(v211, -1, -1);
      }
      else
      {
        sub_1000126B0(v83, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      }

      v305 = *(_QWORD *)&v302[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
      v215 = v239;
      static DispatchTime.now()(v216);
      + infix(_:_:)(v215, a6 - v207);
      v306 = *(_BYTE **)(v240 + 8);
      ((void (*)(_BYTE *, uint64_t))v306)(v215, v251);
      v293(v298, v300, v38);
      v217 = v297;
      sub_10005972C(v295, (uint64_t)v297, type metadata accessor for OwnedBeaconGroup);
      v218 = *(unsigned __int8 *)(v77 + 80);
      v219 = (v218 + 24) & ~v218;
      v220 = *(unsigned __int8 *)(v284 + 80);
      v221 = (v290 + v220 + v219) & ~v220;
      v222 = (v291 + v221 + 7) & 0xFFFFFFFFFFFFFFF8;
      v223 = (v222 + 15) & 0xFFFFFFFFFFFFFFF8;
      v224 = swift_allocObject(&unk_101082218, v223 + 8, v218 | v220 | 7);
      v225 = v302;
      *(_QWORD *)(v224 + 16) = v302;
      v86((_BYTE *)(v224 + v219), v298, v38);
      sub_1000126EC((uint64_t)v217, v224 + v221, type metadata accessor for OwnedBeaconGroup);
      *(_QWORD *)(v224 + v222) = v292;
      *(double *)(v224 + v223) = a6;
      aBlock[4] = (uint64_t)sub_1005FC1D4;
      aBlock[5] = v224;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100016FB8;
      aBlock[3] = (uint64_t)&unk_101082230;
      v226 = _Block_copy(aBlock);
      v227 = v225;
      v228 = v241;
      static DispatchQoS.unspecified.getter(v227);
      v311 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
      v229 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v230 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v231 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v232 = v244;
      v233 = v246;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v311, v230, v231, v246, v229);
      v234 = v250;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v250, v228, v232, v226);
      _Block_release(v226);
      (*(void (**)(_BYTE *, uint64_t))(v245 + 8))(v232, v233);
      (*(void (**)(_BYTE *, uint64_t))(v242 + 8))(v228, v243);
      ((void (*)(_BYTE *, uint64_t))v306)(v234, v251);
      sub_1000126B0((uint64_t)v255, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      v78(v259, v38);
      v78(v301, v38);
      return swift_release();
    }
    sub_1000126B0((uint64_t)v195, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v78(v259, v38);
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
  v196 = v252;
  v197 = v301;
  v293(v252, v301, v38);
  v198 = v253;
  v199 = sub_10005972C((uint64_t)v195, (uint64_t)v253, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v200 = Logger.logObject.getter(v199);
  v201 = static os_log_type_t.error.getter(v200);
  if (os_log_type_enabled(v200, v201))
  {
    v202 = swift_slowAlloc(22, -1);
    aBlock[0] = swift_slowAlloc(64, -1);
    *(_DWORD *)v202 = 136315394;
    v203 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v204 = dispatch thunk of CustomStringConvertible.description.getter(v38, v203);
    v311 = COERCE_DOUBLE(sub_100016940(v204, v205, aBlock));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v311, v312, v202 + 4, v202 + 12);
    swift_bridgeObjectRelease();
    v78(v196, v38);
    *(_WORD *)(v202 + 12) = 2080;
    __asm { BR              X10 }
  }

  sub_1000126B0((uint64_t)v198, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v78(v196, v38);
  sub_1000126B0((uint64_t)v195, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v78(v259, v38);
  return ((uint64_t (*)(_BYTE *, uint64_t))v78)(v197, v38);
}

uint64_t sub_1005E1E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, _BYTE *, uint64_t);
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  _BYTE v79[12];
  int v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t aBlock[7];
  uint64_t v95;
  uint64_t v96;

  v92 = a6;
  v93 = a5;
  v82 = a3;
  v9 = sub_10001A9A8(&qword_1010EF1D8);
  __chkstk_darwin(v9);
  v88 = &v79[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v86 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v86);
  v87 = &v79[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for UUID(0);
  v89 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v85 = &v79[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __chkstk_darwin(v13);
  v91 = &v79[-v16];
  v84 = v17;
  __chkstk_darwin(v15);
  v81 = &v79[-v18];
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v19);
  v21 = &v79[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = type metadata accessor for OwnedBeaconRecord(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = &v79[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000F9B8(a2, (uint64_t)v21, (uint64_t *)&unk_1010F47C0);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    sub_100004048((uint64_t)v21, (uint64_t *)&unk_1010F47C0);
LABEL_5:
    v29 = a1;
    v30 = sub_1005E2654(a1, v92, 0);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
    v32 = *(_QWORD *)(*(_QWORD *)a4 + 16);
    v31 = *(_QWORD *)(*(_QWORD *)a4 + 24);
    if (v32 >= v31 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
    v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
    specialized Array._endMutation()(v33);
    goto LABEL_21;
  }
  sub_1000126EC((uint64_t)v21, (uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
  v26 = &v25[*(int *)(v22 + 20)];
  v27 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v28 = dispatch thunk of static Equatable.== infix(_:_:)(v26, a1, v12, v27);
  if ((v28 & 1) != 0)
  {
    sub_1000126B0((uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
    goto LABEL_5;
  }
  __chkstk_darwin(v28);
  *(_QWORD *)&v79[-16] = v25;
  v34 = v90;
  v35 = sub_100A78648(sub_1005FA61C, (uint64_t)&v79[-32], v82);
  v90 = v34;
  if (v35)
    v36 = (void *)v35;
  else
    v36 = &_swiftEmptySetSingleton;
  v37 = sub_100A07660(a1, (uint64_t)v36);
  swift_bridgeObjectRelease();
  if ((v37 & 1) != 0)
  {
    if (qword_1010E9D28 != -1)
      swift_once(&qword_1010E9D28, sub_1005D439C);
    v38 = type metadata accessor for Logger(0);
    sub_10001A9E8(v38, (uint64_t)qword_1011B71E0);
    v39 = v89;
    v40 = v81;
    v41 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v89 + 16))(v81, a1, v12);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.default.getter(v42);
    v44 = v43;
    v29 = a1;
    if (os_log_type_enabled(v42, v43))
    {
      v45 = swift_slowAlloc(22, -1);
      v82 = swift_slowAlloc(32, -1);
      aBlock[0] = v82;
      *(_DWORD *)v45 = 141558275;
      v95 = 1752392040;
      v80 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v45 + 4, v45 + 12);
      *(_WORD *)(v45 + 12) = 2081;
      v46 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v47 = v42;
      v48 = dispatch thunk of CustomStringConvertible.description.getter(v12, v46);
      v95 = sub_100016940(v48, v49, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v45 + 14, v45 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v89 + 8))(v40, v12);
      _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v80, "Ignoring nearby non-primary beacon %{private,mask.hash}s", (uint8_t *)v45, 0x16u);
      v50 = v82;
      swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v45, -1, -1);

    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v39 + 8))(v40, v12);

    }
  }
  else
  {
    v51 = sub_1005E2654(a1, v92, 0);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v51);
    v53 = *(_QWORD *)(*(_QWORD *)a4 + 16);
    v52 = *(_QWORD *)(*(_QWORD *)a4 + 24);
    if (v53 >= v52 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1);
    v29 = a1;
    v54 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v51);
    specialized Array._endMutation()(v54);
  }
  sub_1000126B0((uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
LABEL_21:
  v82 = swift_allocObject(&unk_101081E08, 24, 7);
  swift_unknownObjectWeakInit(v82 + 16, v93);
  v55 = v89;
  v56 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v89 + 16);
  v57 = v91;
  v83 = v29;
  v56(v91, v29, v12);
  v58 = v85;
  v56(v85, v92, v12);
  v59 = *(unsigned __int8 *)(v55 + 80);
  v60 = (v59 + 16) & ~v59;
  v61 = (v84 + v59 + v60) & ~v59;
  v62 = (v84 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
  v63 = swift_allocObject(&unk_1010822B8, v62 + 8, v59 | 7);
  v64 = v63 + v60;
  v65 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v55 + 32);
  v65(v64, v57, v12);
  v65(v63 + v61, v58, v12);
  *(_QWORD *)(v63 + v62) = v82;
  aBlock[4] = (uint64_t)sub_1005FC2C4;
  aBlock[5] = v63;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100016FB8;
  aBlock[3] = (uint64_t)&unk_1010822D0;
  v66 = _Block_copy(aBlock);
  v95 = (uint64_t)_swiftEmptyArrayStorage;
  v67 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  swift_retain();
  v68 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v69 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v70 = v87;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v95, v68, v69, v86, v67);
  v71 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v71, *(unsigned int *)(v71 + 48), *(unsigned __int16 *)(v71 + 52));
  v72 = DispatchWorkItem.init(flags:block:)(v70, v66);
  swift_release();
  swift_release();
  v73 = (uint64_t)v91;
  v74 = v83;
  v56(v91, v83, v12);
  v75 = (uint64_t)v88;
  v56(v88, v92, v12);
  v76 = (int *)type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  v56((_BYTE *)(v75 + v76[5]), v74, v12);
  v77 = v75 + v76[8];
  swift_retain();
  static Date.trustedNow.getter(v77);
  *(_BYTE *)(v75 + v76[6]) = 0;
  *(_QWORD *)(v75 + v76[7]) = v72;
  *(_QWORD *)(v75 + v76[9]) = 0;
  *(_BYTE *)(v75 + v76[10]) = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v76 - 1) + 56))(v75, 0, 1, v76);
  swift_beginAccess(v93 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, aBlock, 33, 0);
  sub_1000FF1EC(v75, v73);
  swift_endAccess(aBlock);
  return swift_release();
}

uint64_t sub_1005E2654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  uint64_t *v38;
  char isUniquelyReferenced_nonNull_native;
  char v40;
  uint64_t My;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void (*v60)(void);
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t ObjectType;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t (*v73)(char *, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77[5];
  uint64_t v78;
  uint64_t v79;

  v75 = a3;
  v76 = a1;
  v72 = a2;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v71 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v69 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v69 - v11;
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (void (**)(char *, uint64_t))((char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v74 = v3;
  v17 = *(void **)(v3 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  *v16 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  v18 = v17;
  v19 = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
  if ((v19 & 1) != 0)
  {
    if (qword_1010E9D28 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010E9D28, sub_1005D439C);
LABEL_3:
  v70 = type metadata accessor for Logger(0);
  sub_10001A9E8(v70, (uint64_t)qword_1011B71E0);
  v20 = v76;
  v73 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v21 = v73(v12, v76, v4);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc(32, -1);
    v69 = (void (*)(char *, uint64_t))swift_slowAlloc(64, -1);
    v77[0] = (uint64_t)v69;
    *(_DWORD *)v24 = 141558531;
    v78 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v24 + 4, v24 + 12);
    *(_WORD *)(v24 + 12) = 2081;
    v25 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v4, v25);
    v78 = sub_100016940(v26, v27, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease();
    v28 = v12;
    v29 = *(void (**)(char *, uint64_t))(v5 + 8);
    v29(v28, v4);
    *(_WORD *)(v24 + 22) = 2082;
    v30 = 0xE800000000000000;
    v31 = 0x746C75616665642ELL;
    v32 = v74;
    switch(v75)
    {
      case 0:
        break;
      case 1:
        v31 = 0x676E69676E61722ELL;
        break;
      case 2:
        v30 = 0xE900000000000067;
        goto LABEL_12;
      case 3:
        v30 = 0x8000000100ED1070;
        v31 = 0xD000000000000010;
        break;
      case 4:
        v30 = 0xEF64656D7269666ELL;
        v31 = 0x6F4365756575712ELL;
        break;
      case 5:
        v30 = 0xEE0074726F685367;
LABEL_12:
        v31 = 0x6E696B636172742ELL;
        break;
      default:
        v30 = 0xE700000000000000;
        v31 = 0x6E776F6E6B6E75;
        v32 = v74;
        break;
    }
    v78 = sub_100016940(v31, v30, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v24 + 24, v24 + 32);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Calling play sound on device %{private,mask.hash}s with context %{public}s", (uint8_t *)v24, 0x20u);
    v34 = v69;
    swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    v20 = v76;
  }
  else
  {
    v33 = v12;
    v29 = *(void (**)(char *, uint64_t))(v5 + 8);
    v29(v33, v4);

    v32 = v74;
  }
  v35 = sub_10001A9A8(&qword_101100B40);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  v36 = PassthroughSubject.init()();
  v37 = v73;
  v73(v10, v20, v4);
  v38 = (uint64_t *)(v32 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_playSoundSubjects);
  swift_beginAccess(v32 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_playSoundSubjects, v77, 33, 0);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v38);
  v78 = *v38;
  *v38 = 0x8000000000000000;
  sub_10010D7B8(v36, (uint64_t)v10, isUniquelyReferenced_nonNull_native);
  *v38 = v78;
  swift_bridgeObjectRelease();
  v29(v10, v4);
  swift_endAccess(v77);
  v40 = sub_1005DF7B0(v20);
  My = type metadata accessor for Feature.FindMy(0);
  v77[3] = My;
  v77[4] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v42 = sub_100018F08(v77);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v42, enum case for Feature.FindMy.spPlaySoundAll(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v77);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v77);
  if ((My & 1) == 0 || (v40 & 1) != 0)
  {
    if (v75 == 5)
    {
      v52 = sub_1005D4664();
      v58 = v57;
      swift_getObjectType(v52);
      v59 = objc_msgSend((id)objc_opt_self(CLFindMyAccessorySoundSequence), "shortSequence");
      v60 = *(void (**)(void))(v58 + 56);
    }
    else
    {
      if (v75 == 2)
      {
        v61 = sub_1005D4664();
        v63 = v62;
        ObjectType = swift_getObjectType(v61);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v20, ObjectType, v63);
        swift_unknownObjectRelease(v61);
LABEL_31:
        v77[0] = v36;
        v66 = sub_1000193A4(&qword_101100B48, &qword_101100B40, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
        v56 = Publisher.eraseToAnyPublisher()(v35, v66);
        goto LABEL_32;
      }
      if (v75 == 1)
      {
        v52 = sub_1005D4664();
        v54 = v53;
        swift_getObjectType(v52);
        v55 = objc_msgSend((id)objc_opt_self(CLFindMyAccessorySoundSequence), "rangingSequence");
      }
      else
      {
        v52 = sub_1005D4664();
        v54 = v65;
        swift_getObjectType(v52);
        v55 = objc_msgSend((id)objc_opt_self(CLFindMyAccessorySoundSequence), "defaultSequence");
      }
      v59 = v55;
      v60 = *(void (**)(void))(v54 + 40);
    }
    v60();
    swift_unknownObjectRelease(v52);

    goto LABEL_31;
  }
  v69 = v29;
  if (qword_1010E9D38 != -1)
    swift_once(&qword_1010E9D38, sub_1005D45D4);
  sub_10001A9E8(v70, (uint64_t)qword_101100948);
  v43 = v71;
  v44 = v37(v71, v20, v4);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.default.getter(v45);
  if (os_log_type_enabled(v45, v46))
  {
    v47 = swift_slowAlloc(32, -1);
    v48 = swift_slowAlloc(64, -1);
    v77[0] = v48;
    *(_DWORD *)v47 = 136315651;
    v78 = sub_100016940(0xD000000000000024, 0x8000000100EDCB40, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v47 + 4, v47 + 12);
    *(_WORD *)(v47 + 12) = 2160;
    v78 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v47 + 14, v47 + 22);
    *(_WORD *)(v47 + 22) = 2081;
    v49 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v50 = dispatch thunk of CustomStringConvertible.description.getter(v4, v49);
    v78 = sub_100016940(v50, v51, v77);
    v20 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v47 + 24, v47 + 32);
    swift_bridgeObjectRelease();
    v69(v43, v4);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "%s SPPlaySoundAll: %{private,mask.hash}s does NOT support ranging", (uint8_t *)v47, 0x20u);
    swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v47, -1, -1);
  }
  else
  {
    v69(v43, v4);
  }

  v56 = sub_1005F3920(v20, v72, v75, v36);
LABEL_32:
  v67 = v56;
  swift_release();
  return v67;
}

void sub_1005E2F5C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  id v32;
  _QWORD *v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t, uint64_t, int *);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(char *, uint64_t, uint64_t);
  void (*v86)(char *, uint64_t, uint64_t, int *);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103[3];
  uint64_t v104;
  _BYTE v105[32];

  v4 = v3;
  v94 = a3;
  v93 = a2;
  v102 = a1;
  v5 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v5);
  v98 = (uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BeaconObservation(0);
  v8 = *(_QWORD *)(v7 - 8);
  v95 = v7;
  v96 = v8;
  __chkstk_darwin(v7);
  v97 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v90 = *(_QWORD *)(v10 - 8);
  v91 = v10;
  __chkstk_darwin(v10);
  v88 = (uint64_t)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v101 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v92 = (char *)&v82 - v17;
  __chkstk_darwin(v16);
  v99 = (char *)&v82 - v18;
  v19 = sub_10001A9A8(&qword_1010EF1D8);
  v20 = __chkstk_darwin(v19);
  v89 = (uint64_t)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v82 - v22;
  v24 = (int *)type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  v25 = *((_QWORD *)v24 - 1);
  __chkstk_darwin(v24);
  v100 = (uint64_t)&v82 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for DispatchPredicate(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (uint64_t *)((char *)&v82 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = *(void **)(v4 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  *v30 = v31;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v28 + 104))(v30, enum case for DispatchPredicate.onQueue(_:), v27);
  v32 = v31;
  LOBYTE(v31) = _dispatchPreconditionTest(_:)(v30);
  (*(void (**)(_QWORD *, uint64_t))(v28 + 8))(v30, v27);
  if ((v31 & 1) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  v33 = (_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  v34 = swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v105, 0, 0);
  v35 = *v33;
  if (!*(_QWORD *)(*v33 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, int *, __n128))(v25 + 56))(v23, 1, 1, v24, v34);
    v28 = v102;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain(*v33);
  v28 = v102;
  v36 = sub_100003FB0(v102);
  if ((v37 & 1) != 0)
  {
    sub_10005972C(*(_QWORD *)(v35 + 56) + *(_QWORD *)(v25 + 72) * v36, (uint64_t)v23, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v38 = *(void (**)(char *, uint64_t, uint64_t, int *))(v25 + 56);
    v38(v23, 0, 1, v24);
  }
  else
  {
    v38 = *(void (**)(char *, uint64_t, uint64_t, int *))(v25 + 56);
    v38(v23, 1, 1, v24);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v25 + 48))(v23, 1, v24) == 1)
  {
LABEL_8:
    sub_100004048((uint64_t)v23, &qword_1010EF1D8);
    if (qword_1010E9D28 == -1)
    {
LABEL_9:
      v39 = type metadata accessor for Logger(0);
      sub_10001A9E8(v39, (uint64_t)qword_1011B71E0);
      v40 = v101;
      v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v101 + 16))(v15, v28, v12);
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.error.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        v44 = swift_slowAlloc(22, -1);
        v45 = v12;
        v46 = swift_slowAlloc(32, -1);
        v103[0] = v46;
        *(_DWORD *)v44 = 141558275;
        v104 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v44 + 4, v44 + 12);
        *(_WORD *)(v44 + 12) = 2081;
        v47 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v48 = dispatch thunk of CustomStringConvertible.description.getter(v45, v47);
        v104 = sub_100016940(v48, v49, v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v44 + 14, v44 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v45);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "No coordinator for %{private,mask.hash}s. Cannot complete!", (uint8_t *)v44, 0x16u);
        swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v44, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v12);
      }

      return;
    }
LABEL_28:
    swift_once(&qword_1010E9D28, sub_1005D439C);
    goto LABEL_9;
  }
  v86 = v38;
  v87 = v4;
  sub_1000126EC((uint64_t)v23, v100, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v50 = type metadata accessor for Logger(0);
  sub_10001A9E8(v50, (uint64_t)qword_1011B71E0);
  v51 = v101;
  v52 = v99;
  v85 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v101 + 16);
  v53 = v85(v99, v28, v12);
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.default.getter(v54);
  if (os_log_type_enabled(v54, v55))
  {
    v56 = swift_slowAlloc(22, -1);
    v84 = swift_slowAlloc(32, -1);
    v103[0] = v84;
    *(_DWORD *)v56 = 141558275;
    v104 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v56 + 4, v56 + 12);
    *(_WORD *)(v56 + 12) = 2081;
    v83 = v56 + 14;
    v57 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v58 = dispatch thunk of CustomStringConvertible.description.getter(v12, v57);
    v104 = sub_100016940(v58, v59, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v83, v56 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v99, v12);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "commandComplete %{private,mask.hash}s", (uint8_t *)v56, 0x16u);
    v60 = v84;
    swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v56, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v12);
  }

  v61 = v100;
  v62 = swift_retain();
  dispatch thunk of DispatchWorkItem.cancel()(v62);
  swift_release();
  if ((v93 & 1) != 0)
    v63 = 5;
  else
    v63 = 3;
  *(_BYTE *)(v61 + v24[6]) = v63;
  *(_BYTE *)(v61 + v24[10]) = 0;
  v64 = v88;
  static Date.trustedNow.getter(v88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 40))(v61 + v24[8], v64, v91);
  v65 = v24[9];
  v66 = *(_QWORD *)(v61 + v65);
  v67 = v94;
  swift_errorRetain(v94);
  swift_errorRelease(v66);
  *(_QWORD *)(v61 + v65) = v67;
  v68 = (uint64_t)v92;
  v69 = (void (*)(char *, uint64_t, uint64_t))v85;
  v85(v92, v28, v12);
  v70 = v89;
  sub_10005972C(v61, v89, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v86((char *)v70, 0, 1, v24);
  swift_beginAccess(v33, v103, 33, 0);
  sub_1000FF1EC(v70, v68);
  swift_endAccess(v103);
  v71 = v28;
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v72 = qword_1011B7160;
  v73 = (uint64_t)v97;
  v69(v97, v71, v12);
  v74 = v95;
  static Date.trustedNow.getter(v73 + *(int *)(v95 + 20));
  *(_BYTE *)(v73 + *(int *)(v74 + 24)) = 29;
  v75 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
  v76 = *(unsigned __int8 *)(v96 + 80);
  v77 = (v76 + 32) & ~v76;
  v78 = swift_allocObject(v75, v77 + *(_QWORD *)(v96 + 72), v76 | 7);
  *(_OWORD *)(v78 + 16) = xmmword_100E22B00;
  sub_10005972C(v73, v78 + v77, type metadata accessor for BeaconObservation);
  v79 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v79);
  *(&v82 - 4) = v72;
  *(&v82 - 3) = v78;
  *(&v82 - 2) = 0;
  *(&v82 - 1) = 0;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, &v82 - 6, &type metadata for () + 1);
  swift_bridgeObjectRelease();
  sub_1000126B0(v73, type metadata accessor for BeaconObservation);
  v80 = v98;
  sub_10081C0CC(v71, v98);
  v81 = type metadata accessor for WildModeAssociationRecord(0);
  LODWORD(v78) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 48))(v80, 1, v81);
  sub_100004048(v80, &qword_101102FB0);
  if ((_DWORD)v78 == 1)
    sub_1007EEF64(10);
  else
    sub_1007F4EB8();
  sub_1000126B0(v100, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
}

uint64_t sub_1005E3960(unint64_t *a1)
{
  return sub_1005F3170(a1, &qword_101100AA8);
}

void sub_1005E396C(_QWORD *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1005E397C(unint64_t *a1)
{
  return sub_1005F3170(a1, &qword_101100B08);
}

void sub_1005E3988(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  void *v41;
  int v42;
  uint64_t v43;
  char v44[24];
  uint64_t v45[2];
  unint64_t v46;
  _BYTE v47[16];

  v42 = a7;
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = a6 + 16;
  Transaction.capture()();
  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v20 = type metadata accessor for Logger(0);
  sub_10001A9E8(v20, (uint64_t)qword_1011B71E0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a5, v16);
  v21 = swift_retain_n(a6, 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc(22, -1);
    v40 = a9;
    v25 = v24;
    v26 = swift_slowAlloc(64, -1);
    v45[0] = v26;
    *(_DWORD *)v25 = 136446466;
    v41 = a8;
    v27 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v16, v27);
    v46 = sub_100016940(v28, v29, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    *(_WORD *)(v25 + 12) = 2082;
    v30 = v43;
    swift_beginAccess(v43, v44, 0, 0);
    v31 = *(_BYTE *)(a6 + 24);
    v46 = *(_QWORD *)(a6 + 16);
    v47[0] = v31;
    sub_1005FC2B4(v46, v31);
    v32 = sub_10001A9A8(&qword_101100BA0);
    v33 = String.init<A>(describing:)(&v46, v32);
    v46 = sub_100016940(v33, v34, v45);
    a8 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v25 + 14, v25 + 22);
    swift_release_n(a6, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "playSound for group %{public}s) completion. Result: %{public}s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    v35 = v25;
    a9 = v40;
    swift_slowDealloc(v35, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);

    swift_release_n(a6, 2);
    v30 = v43;
  }
  swift_beginAccess(v30, &v46, 0, 0);
  if (*(_BYTE *)(a6 + 24) == 1)
  {
    v36 = *(_QWORD *)(a6 + 16);
    sub_1005FAC50(v36);
    if ((v42 & 1) != 0)
    {
      sub_1005E3D28(a9, a10, a11, a1);
      sub_1005FBC74(v36, 1);
    }
    else
    {
      sub_10036AC6C();
      v38 = v37;
      sub_1005FC2B4(v36, 1);
      v39 = a8;
      sub_1005F8C1C(v38, (uint64_t)v39, v36);
      sub_1005FBC74(v36, 1);

      sub_1005FBC74(v36, 1);
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_1005E3D28(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  id v33;
  char v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, unint64_t);
  unint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  void *v97;
  unint64_t v98;
  uint64_t (*v99)(char *, unint64_t, unint64_t);
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120[2];

  v102 = a1;
  v103 = a3;
  v113 = a2;
  v6 = type metadata accessor for Date(0);
  v107 = *(_QWORD *)(v6 - 8);
  v108 = v6;
  __chkstk_darwin(v6);
  v106 = (uint64_t)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EF660);
  __chkstk_darwin(v8);
  v111 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for BeaconObservation(0);
  v117 = *(_QWORD *)(v115 - 8);
  v10 = __chkstk_darwin(v115);
  v109 = (uint64_t)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v116 = (uint64_t)&v96 - v13;
  v14 = __chkstk_darwin(v12);
  v114 = (char *)&v96 - v15;
  __chkstk_darwin(v14);
  v110 = (uint64_t)&v96 - v16;
  v17 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v17);
  v19 = (char *)&v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v104 = (char *)&v96 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v112 = (char *)&v96 - v25;
  __chkstk_darwin(v24);
  v27 = (char *)&v96 - v26;
  v28 = type metadata accessor for DispatchPredicate(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (unint64_t *)((char *)&v96 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v105 = v4;
  v32 = *(_QWORD *)&v4[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
  *v31 = v32;
  (*(void (**)(unint64_t *, _QWORD, unint64_t))(v29 + 104))(v31, enum case for DispatchPredicate.onQueue(_:), v28);
  v33 = (id)v32;
  v34 = _dispatchPreconditionTest(_:)(v31);
  (*(void (**)(unint64_t *, unint64_t))(v29 + 8))(v31, v28);
  if ((v34 & 1) == 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v35 = type metadata accessor for OwnedBeaconGroup(0);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v36(v27, v113 + *(int *)(v35 + 24), v20);
  sub_10036AC6C();
  sub_1000FC598(v37, (uint64_t)v19);
  swift_bridgeObjectRelease();
  v32 = (unint64_t)v27;
  v29 = v21;
  v28 = v20;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    v38 = &qword_1010ED860;
    v39 = (uint64_t)v19;
    goto LABEL_24;
  }
  v99 = (uint64_t (*)(char *, unint64_t, unint64_t))v36;
  v40 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v41 = (uint64_t)v112;
  v40(v112, v19, v20);
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v42 = qword_1011B7160;
  v43 = objc_autoreleasePoolPush();
  v44 = sub_10001A9A8(&qword_1010F7770);
  OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v42, v44);
  v45 = v120[0];
  v46 = v115;
  v47 = (uint64_t)v111;
  if (*(_QWORD *)(v120[0] + 16) && (v48 = sub_100003FB0(v41), (v49 & 1) != 0))
  {
    v100 = v29;
    v50 = *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v48);
    swift_bridgeObjectRetain(v50);
    swift_bridgeObjectRelease();
    v51 = sub_100508D98(v50);
    swift_bridgeObjectRelease();
    sub_10088FD00((uint64_t)v51);
    v53 = v52;
    swift_release();
    v54 = _swiftEmptyArrayStorage;
    v120[0] = (uint64_t)_swiftEmptyArrayStorage;
    v55 = *(_QWORD *)(v53 + 16);
    if (v55)
    {
      v97 = v43;
      v98 = v32;
      v101 = v28;
      v32 = 0;
      v56 = (uint64_t)v114;
      while (v32 < *(_QWORD *)(v53 + 16))
      {
        v28 = (*(unsigned __int8 *)(v117 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80);
        v29 = *(_QWORD *)(v117 + 72);
        sub_10005972C(v53 + v28 + v29 * v32, v56, type metadata accessor for BeaconObservation);
        if (*(_BYTE *)(v56 + *(int *)(v46 + 24)) == 23)
        {
          sub_1000126EC(v56, v116, type metadata accessor for BeaconObservation);
          if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
            sub_10009AAC8(0, v54[2] + 1, 1);
          v54 = (_QWORD *)v120[0];
          v58 = *(_QWORD *)(v120[0] + 16);
          v57 = *(_QWORD *)(v120[0] + 24);
          if (v58 >= v57 >> 1)
          {
            sub_10009AAC8(v57 > 1, v58 + 1, 1);
            v54 = (_QWORD *)v120[0];
          }
          v54[2] = v58 + 1;
          sub_1000126EC(v116, (uint64_t)v54 + v28 + v58 * v29, type metadata accessor for BeaconObservation);
          v56 = (uint64_t)v114;
          v46 = v115;
        }
        else
        {
          sub_1000126B0(v56, type metadata accessor for BeaconObservation);
        }
        if (v55 == ++v32)
        {
          v54 = (_QWORD *)v120[0];
          v28 = v101;
          v32 = v98;
          v47 = (uint64_t)v111;
          v43 = v97;
          goto LABEL_21;
        }
      }
      __break(1u);
      goto LABEL_41;
    }
LABEL_21:
    swift_release();
    v29 = v100;
    v41 = (uint64_t)v112;
  }
  else
  {
    swift_bridgeObjectRelease();
    v54 = _swiftEmptyArrayStorage;
  }
  objc_autoreleasePoolPop(v43);
  sub_100A797E8((uint64_t)v54, v47);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48))(v47, 1, v46) == 1)
  {
    (*(void (**)(uint64_t, unint64_t))(v29 + 8))(v41, v28);
    v38 = &qword_1010EF660;
    v39 = v47;
LABEL_24:
    sub_100004048(v39, v38);
    if (qword_1010E9D28 == -1)
    {
LABEL_25:
      v59 = type metadata accessor for Logger(0);
      v60 = sub_10001A9E8(v59, (uint64_t)qword_1011B71E0);
      v61 = Logger.logObject.getter(v60);
      v62 = static os_log_type_t.error.getter(v61);
      if (os_log_type_enabled(v61, v62))
      {
        v63 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "No playback observation found. Cannot retry", v63, 2u);
        swift_slowDealloc(v63, -1, -1);
      }

      return (*(uint64_t (**)(unint64_t, unint64_t))(v29 + 8))(v32, v28);
    }
LABEL_42:
    swift_once(&qword_1010E9D28, sub_1005D439C);
    goto LABEL_25;
  }
  v117 = 0;
  v101 = v28;
  v100 = v29;
  v65 = v110;
  sub_1000126EC(v47, v110, type metadata accessor for BeaconObservation);
  v66 = v106;
  static Date.trustedNow.getter(v106);
  v67 = Date.timeIntervalSince(_:)(v65 + *(int *)(v46 + 20));
  (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v66, v108);
  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v68 = type metadata accessor for Logger(0);
  sub_10001A9E8(v68, (uint64_t)qword_1011B71E0);
  v69 = v109;
  v70 = sub_10005972C(v65, v109, type metadata accessor for BeaconObservation);
  v71 = Logger.logObject.getter(v70);
  v72 = static os_log_type_t.default.getter(v71);
  if (os_log_type_enabled(v71, v72))
  {
    v73 = swift_slowAlloc(22, -1);
    v74 = swift_slowAlloc(32, -1);
    v120[0] = v74;
    *(_DWORD *)v73 = 136446466;
    v75 = Date.localISO8601.getter();
    v118 = sub_100016940(v75, v76, v120);
    v65 = v110;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v73 + 4, v73 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v69, type metadata accessor for BeaconObservation);
    *(_WORD *)(v73 + 12) = 2050;
    v118 = *(_QWORD *)&v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v73 + 14, v73 + 22);
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "Queued at %{public}s. Time since: %{public}f", (uint8_t *)v73, 0x16u);
    swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
    v77 = v74;
    v41 = (uint64_t)v112;
    swift_slowDealloc(v77, -1, -1);
    swift_slowDealloc(v73, -1, -1);
  }
  else
  {
    sub_1000126B0(v69, type metadata accessor for BeaconObservation);
  }

  v78 = v104;
  v79 = v113;
  if (v67 >= 180.0)
  {
    v98 = v32;
    v83 = v101;
    v84 = v99(v104, v32, v101);
    v85 = Logger.logObject.getter(v84);
    v86 = static os_log_type_t.error.getter(v85);
    if (os_log_type_enabled(v85, v86))
    {
      v87 = swift_slowAlloc(22, -1);
      v88 = swift_slowAlloc(32, -1);
      v120[0] = v88;
      *(_DWORD *)v87 = 134218242;
      v118 = 0x4066800000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v87 + 4, v87 + 12);
      *(_WORD *)(v87 + 12) = 2080;
      v89 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v90 = dispatch thunk of CustomStringConvertible.description.getter(v101, v89);
      v118 = sub_100016940(v90, v91, v120);
      v83 = v101;
      v41 = (uint64_t)v112;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v87 + 14, v87 + 22);
      swift_bridgeObjectRelease();
      v82 = *(void (**)(char *, unint64_t))(v100 + 8);
      v82(v78, v83);
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "%f elapsed. Posting error alert for %s", (uint8_t *)v87, 0x16u);
      swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1, -1);
      swift_slowDealloc(v87, -1, -1);
    }
    else
    {
      v82 = *(void (**)(char *, unint64_t))(v100 + 8);
      v82(v78, v83);
    }

    v32 = v98;
    v92 = v105;
    sub_1005E6CB0(v98, 0);
    sub_10036AC6C();
    v94 = v93;
    v95 = v92;
    sub_1005F9248(v94, (uint64_t)v95, 0);
    swift_bridgeObjectRelease();

    sub_1000126B0(v65, type metadata accessor for BeaconObservation);
    v82((char *)v41, v83);
  }
  else
  {
    v80 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v80);
    *(&v96 - 6) = (uint64_t)v105;
    *(&v96 - 5) = v79;
    *((double *)&v96 - 4) = a4;
    v81 = v103;
    *(&v96 - 3) = v102;
    *(&v96 - 2) = v81;
    static Transaction.named<A>(_:with:)("SoundPlaybackManager.queuePlaySound", 35, 2, sub_1005FBA0C, &v96 - 8);
    sub_1000126B0(v65, type metadata accessor for BeaconObservation);
    v82 = *(void (**)(char *, unint64_t))(v100 + 8);
    v83 = v101;
    v82((char *)v41, v101);
  }
  return ((uint64_t (*)(unint64_t, unint64_t))v82)(v32, v83);
}

void sub_1005E48A0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char *a6, unint64_t a7, uint64_t a8, double a9, unsigned __int8 a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t Strong;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v87;
  _BYTE *v88;
  unint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void (*v99)(_BYTE *, uint64_t);
  _BYTE *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  _BYTE *v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  uint8_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _BYTE v121[4];
  int v122;
  uint64_t v123;
  uint64_t (*v124)(_BYTE *, uint64_t, uint64_t);
  uint64_t v125;
  char *v126;
  int v127;
  uint64_t v128;
  _BYTE *v129;
  unint64_t v130;
  _BYTE *v131;
  unint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE *v135;
  char *v136;
  uint64_t v137;
  _BYTE *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142[3];
  uint64_t v143;
  _BYTE v144[32];

  v132 = a7;
  v133 = a8;
  v136 = a6;
  v139 = a5;
  v130 = a4;
  v128 = a3;
  v137 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v137 - 8);
  v14 = __chkstk_darwin(v137);
  v16 = &v121[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v14);
  v19 = &v121[-v18];
  v20 = __chkstk_darwin(v17);
  v22 = &v121[-v21];
  v23 = __chkstk_darwin(v20);
  v129 = &v121[-v24];
  v25 = __chkstk_darwin(v23);
  v134 = &v121[-v26];
  v27 = __chkstk_darwin(v25);
  v131 = &v121[-v28];
  __chkstk_darwin(v27);
  v135 = &v121[-v29];
  v30 = sub_10001A9A8(&qword_101100AA8);
  v31 = __chkstk_darwin(v30);
  v33 = (unint64_t *)&v121[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v31);
  v138 = &v121[-v34];
  v35 = sub_10001A9A8(&qword_101100B08);
  __chkstk_darwin(v35);
  v37 = (unint64_t *)&v121[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v144, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v39 = (char *)Strong;
    sub_10000F9B8(a1, (uint64_t)v37, &qword_101100B08);
    if (swift_getEnumCaseMultiPayload(v37, v35) == 1)
    {
      v40 = *v37;
      v41 = v13;
      if (*v37 == 3)
      {
        if (qword_1010E9D28 != -1)
          swift_once(&qword_1010E9D28, sub_1005D439C);
        v42 = type metadata accessor for Logger(0);
        sub_10001A9E8(v42, (uint64_t)qword_1011B71E0);
        v43 = v137;
        v44 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v19, v139, v137);
        v45 = Logger.logObject.getter(v44);
        v46 = static os_log_type_t.error.getter(v45);
        if (os_log_type_enabled(v45, v46))
        {
          v47 = swift_slowAlloc(22, -1);
          v48 = swift_slowAlloc(32, -1);
          v136 = v39;
          v49 = v48;
          v142[0] = v48;
          *(_DWORD *)v47 = 136446466;
          v50 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v51 = dispatch thunk of CustomStringConvertible.description.getter(v43, v50);
          v143 = sub_100016940(v51, v52, v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v47 + 4, v47 + 12);
          swift_bridgeObjectRelease();
          (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v19, v43);
          *(_WORD *)(v47 + 12) = 2048;
          v143 = *(_QWORD *)&a9;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v47 + 14, v47 + 22);
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "Play sound timed out for %{public}s after %f. CL should have completed by now", (uint8_t *)v47, 0x16u);
          swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v49, -1, -1);
          swift_slowDealloc(v47, -1, -1);

        }
        else
        {

          (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v19, v43);
        }
      }
      else
      {
        if (qword_1010E9D28 != -1)
          swift_once(&qword_1010E9D28, sub_1005D439C);
        v69 = type metadata accessor for Logger(0);
        sub_10001A9E8(v69, (uint64_t)qword_1011B71E0);
        v70 = v137;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v16, v139, v137);
        sub_1005FAC50(v40);
        v71 = sub_1005FAC50(v40);
        v72 = Logger.logObject.getter(v71);
        v73 = static os_log_type_t.error.getter(v72);
        if (os_log_type_enabled(v72, v73))
        {
          v74 = swift_slowAlloc(22, -1);
          v136 = v39;
          v75 = v74;
          v76 = swift_slowAlloc(64, -1);
          v142[0] = v76;
          *(_DWORD *)v75 = 136446466;
          v77 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v78 = dispatch thunk of CustomStringConvertible.description.getter(v70, v77);
          v143 = sub_100016940(v78, v79, v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v75 + 4, v75 + 12);
          swift_bridgeObjectRelease();
          (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v16, v70);
          *(_WORD *)(v75 + 12) = 2082;
          v143 = v40;
          sub_1005FAC50(v40);
          v80 = String.init<A>(describing:)(&v143, &type metadata for SoundPlaybackManager.SoundPlaybackManagerError);
          v143 = sub_100016940(v80, v81, v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v75 + 14, v75 + 22);
          swift_bridgeObjectRelease();
          sub_1005FAC60(v40);
          sub_1005FAC60(v40);
          _os_log_impl((void *)&_mh_execute_header, v72, v73, "Play sound failed for %{public}s with unexpected error %{public}s", (uint8_t *)v75, 0x16u);
          swift_arrayDestroy(v76, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v76, -1, -1);
          swift_slowDealloc(v75, -1, -1);

        }
        else
        {

          (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v16, v70);
          sub_1005FAC60(v40);
          sub_1005FAC60(v40);

        }
        sub_1005FAC60(v40);
      }
    }
    else
    {
      v53 = v138;
      sub_1005FAC70((uint64_t)v37, (uint64_t)v138);
      sub_10000F9B8((uint64_t)v53, (uint64_t)v33, &qword_101100AA8);
      v54 = v13;
      if (swift_getEnumCaseMultiPayload(v33, v30) == 1)
      {
        v136 = v39;
        v55 = *v33;
        v56 = v137;
        if (qword_1010E9D28 != -1)
          swift_once(&qword_1010E9D28, sub_1005D439C);
        v57 = type metadata accessor for Logger(0);
        sub_10001A9E8(v57, (uint64_t)qword_1011B71E0);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v54 + 16))(v22, v139, v56);
        sub_1005FAC50(v55);
        v58 = sub_1005FAC50(v55);
        v59 = Logger.logObject.getter(v58);
        v60 = static os_log_type_t.error.getter(v59);
        if (os_log_type_enabled(v59, v60))
        {
          v61 = v54;
          v62 = swift_slowAlloc(22, -1);
          v63 = swift_slowAlloc(64, -1);
          v142[0] = v63;
          *(_DWORD *)v62 = 136446466;
          v64 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v65 = dispatch thunk of CustomStringConvertible.description.getter(v56, v64);
          v143 = sub_100016940(v65, v66, v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v62 + 4, v62 + 12);
          swift_bridgeObjectRelease();
          (*(void (**)(_BYTE *, uint64_t))(v61 + 8))(v22, v56);
          *(_WORD *)(v62 + 12) = 2082;
          v143 = v55;
          sub_1005FAC50(v55);
          v67 = String.init<A>(describing:)(&v143, &type metadata for SoundPlaybackManager.SoundPlaybackManagerError);
          v143 = sub_100016940(v67, v68, v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v62 + 14, v62 + 22);
          swift_bridgeObjectRelease();
          sub_1005FAC60(v55);
          sub_1005FAC60(v55);
          _os_log_impl((void *)&_mh_execute_header, v59, v60, "Play sound failed for %{public}s. Error %{public}s", (uint8_t *)v62, 0x16u);
          swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v63, -1, -1);
          swift_slowDealloc(v62, -1, -1);

        }
        else
        {

          sub_1005FAC60(v55);
          sub_1005FAC60(v55);
          (*(void (**)(_BYTE *, uint64_t))(v54 + 8))(v22, v56);
        }
        sub_1005FAC60(v55);
        sub_100004048((uint64_t)v138, &qword_101100AA8);
      }
      else
      {
        v126 = v136 + 16;
        v82 = (uint64_t)v135;
        v83 = v137;
        (*(void (**)(_BYTE *, unint64_t *, uint64_t))(v13 + 32))(v135, v33, v137);
        if (qword_1010E9D28 != -1)
          swift_once(&qword_1010E9D28, sub_1005D439C);
        v127 = a10;
        v84 = type metadata accessor for Logger(0);
        v85 = sub_10001A9E8(v84, (uint64_t)qword_1011B71E0);
        v86 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16);
        v87 = v131;
        v86(v131, v82, v83);
        v88 = v134;
        v124 = (uint64_t (*)(_BYTE *, uint64_t, uint64_t))v86;
        v86(v134, v139, v83);
        v89 = v130;
        swift_bridgeObjectRetain_n(v130, 2);
        v125 = v85;
        v91 = Logger.logObject.getter(v90);
        v92 = static os_log_type_t.default.getter(v91);
        v93 = v92;
        if (os_log_type_enabled(v91, v92))
        {
          v94 = swift_slowAlloc(42, -1);
          v123 = swift_slowAlloc(96, -1);
          v142[0] = v123;
          *(_DWORD *)v94 = 136446979;
          v122 = v93;
          swift_bridgeObjectRetain(v89);
          v143 = sub_100016940(v128, v89, v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v94 + 4, v94 + 12);
          swift_bridgeObjectRelease_n(v89, 3);
          *(_WORD *)(v94 + 12) = 2160;
          v143 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v94 + 14, v94 + 22);
          *(_WORD *)(v94 + 22) = 2081;
          v95 = v54;
          v96 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v97 = dispatch thunk of CustomStringConvertible.description.getter(v83, v96);
          v143 = sub_100016940(v97, v98, v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v94 + 24, v94 + 32);
          swift_bridgeObjectRelease();
          v99 = *(void (**)(_BYTE *, uint64_t))(v95 + 8);
          v99(v87, v83);
          *(_WORD *)(v94 + 32) = 2082;
          v100 = v134;
          v101 = dispatch thunk of CustomStringConvertible.description.getter(v83, v96);
          v143 = sub_100016940(v101, v102, v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v94 + 34, v94 + 42);
          swift_bridgeObjectRelease();
          v99(v100, v83);
          _os_log_impl((void *)&_mh_execute_header, v91, (os_log_type_t)v122, "%{public}s play sound started for %{private,mask.hash}s. Group: %{public}s", (uint8_t *)v94, 0x2Au);
          v103 = v123;
          swift_arrayDestroy(v123, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v103, -1, -1);
          v104 = v94;
          v82 = (uint64_t)v135;
          swift_slowDealloc(v104, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(v89, 2);
          v99 = *(void (**)(_BYTE *, uint64_t))(v54 + 8);
          v99(v87, v83);
          v99(v88, v83);
        }

        swift_beginAccess(v126, v142, 1, 0);
        v105 = v136;
        v106 = *((_QWORD *)v136 + 2);
        v107 = v136[24];
        *((_QWORD *)v136 + 2) = 0;
        v105[24] = 0;
        sub_1005FBC74(v106, v107);
        sub_1005E56F0(v82, v132, a9);
        sub_10036AC6C();
        __chkstk_darwin(v108);
        *(_QWORD *)&v121[-16] = v82;
        v110 = sub_100854334((uint64_t)sub_1005FD5DC, (uint64_t)&v121[-32], v109);
        v111 = v39;
        sub_1005F8F04(v110, (uint64_t)v111);
        swift_release();

        if ((v127 & 1) != 0)
        {
          v112 = v129;
          v113 = v124(v129, v139, v83);
          v114 = Logger.logObject.getter(v113);
          v115 = static os_log_type_t.default.getter(v114);
          if (os_log_type_enabled(v114, v115))
          {
            v116 = (uint8_t *)swift_slowAlloc(12, -1);
            v117 = swift_slowAlloc(32, -1);
            v143 = v117;
            *(_DWORD *)v116 = 136446210;
            v118 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v119 = dispatch thunk of CustomStringConvertible.description.getter(v83, v118);
            v140 = sub_100016940(v119, v120, &v143);
            v82 = (uint64_t)v135;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v116 + 4, v116 + 12);
            swift_bridgeObjectRelease();
            v99(v129, v83);
            _os_log_impl((void *)&_mh_execute_header, v114, v115, "Posting success alert for %{public}s", v116, 0xCu);
            swift_arrayDestroy(v117, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v117, -1, -1);
            swift_slowDealloc(v116, -1, -1);
          }
          else
          {
            v99(v112, v83);
          }

          sub_1005E6CB0(v139, 1);
          sub_100004048((uint64_t)v138, &qword_101100AA8);
        }
        else
        {
          sub_100004048((uint64_t)v138, &qword_101100AA8);

        }
        v99((_BYTE *)v82, v83);
      }
    }
  }
}

uint64_t sub_1005E56F0(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  void (*v81)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  __int16 v83;
  char v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t My;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  NSObject *v121;
  os_log_type_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  id v130;
  uint64_t v131;
  NSObject *v132;
  os_log_type_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  void (*v139)(char *, uint64_t);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  NSObject *v145;
  os_log_type_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD v159[2];
  uint64_t (*v160)(char *, uint64_t, uint64_t);
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(char *, uint64_t, uint64_t, uint64_t);
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  id v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  char v194[8];
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200[8];
  char v201[8];

  v4 = v3;
  v173 = a2;
  v190 = a1;
  v187 = type metadata accessor for DispatchTime(0);
  v185 = *(_QWORD *)(v187 - 8);
  v6 = __chkstk_darwin(v187);
  v184 = (char *)v159 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v186 = (char *)v159 - v8;
  v9 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v9);
  v182 = (uint64_t)v159 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = type metadata accessor for BeaconObservation(0);
  v174 = *(_QWORD *)(v180 - 8);
  __chkstk_darwin(v180);
  v181 = (char *)v159 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = type metadata accessor for Date(0);
  v178 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v177 = (uint64_t)v159 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v13);
  v172 = (char *)v159 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = type metadata accessor for OwnedBeaconRecord(0);
  v170 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v167 = (uint64_t)v159 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8((uint64_t *)&unk_101102F70);
  __chkstk_darwin(v16);
  v18 = (char *)v159 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = type metadata accessor for BeaconStatus(0);
  __chkstk_darwin(v169);
  v168 = (uint64_t)v159 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = type metadata accessor for UUID(0);
  v20 = *(_QWORD *)(v188 - 8);
  v21 = __chkstk_darwin(v188);
  v176 = (char *)v159 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v166 = (char *)v159 - v24;
  __chkstk_darwin(v23);
  v26 = (char *)v159 - v25;
  v27 = sub_10001A9A8(&qword_1010EF1D8);
  v28 = __chkstk_darwin(v27);
  v175 = (uint64_t)v159 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v31 = (char *)v159 - v30;
  v191 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  v32 = *(_QWORD *)(v191 - 8);
  __chkstk_darwin(v191);
  v189 = (uint64_t)v159 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for DispatchPredicate(0);
  v35 = *(_QWORD **)(v34 - 8);
  __chkstk_darwin(v34);
  v37 = (_QWORD *)((char *)v159 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = *(void **)(v4 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  *v37 = v38;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v35[13])(v37, enum case for DispatchPredicate.onQueue(_:), v34);
  v183 = v38;
  v39 = _dispatchPreconditionTest(_:)(v37);
  ((void (*)(_QWORD *, uint64_t))v35[1])(v37, v34);
  if ((v39 & 1) == 0)
  {
    __break(1u);
LABEL_63:
    swift_once(&qword_1010E9D28, sub_1005D439C);
    goto LABEL_10;
  }
  v35 = (_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  v40 = swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v201, 0, 0);
  v41 = *v35;
  if (!*(_QWORD *)(*v35 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v32 + 56))(v31, 1, 1, v191, v40);
    return sub_100004048((uint64_t)v31, &qword_1010EF1D8);
  }
  swift_bridgeObjectRetain(*v35);
  v39 = v190;
  v42 = sub_100003FB0(v190);
  if ((v43 & 1) != 0)
  {
    sub_10005972C(*(_QWORD *)(v41 + 56) + *(_QWORD *)(v32 + 72) * v42, (uint64_t)v31, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v44 = 0;
  }
  else
  {
    v44 = 1;
  }
  v45 = v191;
  v165 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
  v165(v31, v44, 1, v191);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v31, 1, v45) == 1)
    return sub_100004048((uint64_t)v31, &qword_1010EF1D8);
  sub_1000126EC((uint64_t)v31, v189, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v163 = *(_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_beaconStore);
  sub_10080B648(v39, (uint64_t)v200);
  if (qword_1010E9D28 != -1)
    goto LABEL_63;
LABEL_10:
  v161 = v35;
  v164 = type metadata accessor for Logger(0);
  v47 = sub_10001A9E8(v164, (uint64_t)qword_1011B71E0);
  v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v49 = v39;
  v50 = v188;
  v51 = v48(v26, v49, v188);
  v159[1] = v47;
  v52 = Logger.logObject.getter(v51);
  v53 = static os_log_type_t.default.getter(v52);
  v54 = os_log_type_enabled(v52, v53);
  v162 = v4;
  if (v54)
  {
    v55 = swift_slowAlloc(32, -1);
    v56 = swift_slowAlloc(32, -1);
    v160 = v48;
    v57 = v56;
    v197 = v56;
    *(_DWORD *)v55 = 141558531;
    *(_QWORD *)&v195 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, (char *)&v195 + 8, v55 + 4, v55 + 12);
    *(_WORD *)(v55 + 12) = 2081;
    v58 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v59 = dispatch thunk of CustomStringConvertible.description.getter(v188, v58);
    *(_QWORD *)&v195 = sub_100016940(v59, v60, &v197);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, (char *)&v195 + 8, v55 + 14, v55 + 22);
    swift_bridgeObjectRelease();
    v61 = *(void (**)(char *, uint64_t))(v20 + 8);
    v61(v26, v188);
    *(_WORD *)(v55 + 22) = 2048;
    *(double *)&v195 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, (char *)&v195 + 8, v55 + 24, v55 + 32);
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Play sound running: for %{private,mask.hash}s, timeout: %f.", (uint8_t *)v55, 0x20u);
    swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
    v62 = v57;
    v48 = v160;
    swift_slowDealloc(v62, -1, -1);
    v63 = v55;
    v50 = v188;
    swift_slowDealloc(v63, -1, -1);
  }
  else
  {
    v61 = *(void (**)(char *, uint64_t))(v20 + 8);
    v61(v26, v50);
  }

  sub_10000F9B8((uint64_t)v200, (uint64_t)&v195, (uint64_t *)&unk_1010EE310);
  v64 = v189;
  if (!v196)
  {
    sub_100004048((uint64_t)&v195, (uint64_t *)&unk_1010EE310);
    v71 = v174;
LABEL_19:
    v72 = (int *)v191;
    *(_BYTE *)(v64 + *(int *)(v191 + 40)) = 0;
    goto LABEL_27;
  }
  v65 = v189;
  sub_10000F9FC(&v195, (uint64_t)&v197);
  v66 = v198;
  v67 = v199;
  sub_10001AA44(&v197, v198);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v67 + 120))(v66, v67) & 1) == 0)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v197);
    v71 = v174;
    v64 = v65;
    goto LABEL_19;
  }
  sub_1008202EC(v190, (uint64_t)v18);
  v68 = sub_10001A9A8(&qword_101102F80);
  v64 = v65;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 48))(v18, 1, v68) == 1)
  {
    v69 = (uint64_t *)&unk_101102F70;
    v70 = (uint64_t)v18;
  }
  else
  {
    v73 = (uint64_t)v18;
    v74 = v168;
    sub_1000126EC(v73, v168, type metadata accessor for BeaconStatus);
    v75 = *(_BYTE *)(v74 + *(int *)(v169 + 20));
    sub_1000126B0(v74, type metadata accessor for BeaconStatus);
    v76 = sub_1000AF25C(v75 & 0xB);
    sub_100030784((uint64_t)&v197, (uint64_t)&v195);
    v77 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v78 = (uint64_t)v172;
    v79 = v171;
    v80 = swift_dynamicCast(v172, &v195, v77, v171, 6);
    v81 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v170 + 56);
    if ((v80 & 1) != 0)
    {
      v81(v78, 0, 1, v79);
      v82 = v167;
      sub_1000126EC(v78, v167, type metadata accessor for OwnedBeaconRecord);
      sub_1009A2B44();
      v72 = (int *)v191;
      if ((v83 & 0x100) != 0)
      {
        sub_1000126B0(v82, type metadata accessor for OwnedBeaconRecord);
        v71 = v174;
        v64 = v65;
      }
      else
      {
        v84 = v83;
        v85 = (int *)v191;
        v160 = v48;
        v86 = v198;
        v87 = v199;
        v88 = sub_10001AA44(&v197, v198);
        v89 = sub_10086B814((uint64_t)v88, (v76 >> 8) & 1, HIWORD(v76) & 1, HIBYTE(v76) & 1, v86, v87);
        v90 = v89[2] == 2 && (sub_100A08510(2u, (uint64_t)v89) || v84 == 2);
        v50 = v188;
        v48 = v160;
        v143 = v166;
        *(_BYTE *)(v65 + v85[10]) = v90;
        v48(v143, v190, v50);
        swift_bridgeObjectRetain_n(v89, 3);
        v145 = Logger.logObject.getter(v144);
        v146 = static os_log_type_t.default.getter(v145);
        if (os_log_type_enabled(v145, v146))
        {
          v147 = swift_slowAlloc(48, -1);
          v148 = swift_slowAlloc(64, -1);
          v193 = v148;
          *(_DWORD *)v147 = 67110147;
          swift_beginAccess(v65, &v195, 0, 0);
          LODWORD(v192) = *(unsigned __int8 *)(v65 + *(int *)(v191 + 40));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, (char *)&v192 + 4, v147 + 4, v147 + 8);
          *(_WORD *)(v147 + 8) = 2160;
          v192 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, &v193, v147 + 10, v147 + 18);
          *(_WORD *)(v147 + 18) = 2081;
          v149 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v150 = dispatch thunk of CustomStringConvertible.description.getter(v188, v149);
          v192 = sub_100016940(v150, v151, (uint64_t *)&v193);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, &v193, v147 + 20, v147 + 28);
          swift_bridgeObjectRelease();
          v61(v143, v188);
          *(_WORD *)(v147 + 28) = 2048;
          v152 = v89[2];
          swift_bridgeObjectRelease();
          v192 = v152;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, &v193, v147 + 30, v147 + 38);
          swift_bridgeObjectRelease();
          *(_WORD *)(v147 + 38) = 2082;
          swift_bridgeObjectRetain(v89);
          v154 = Set.description.getter(v153, &type metadata for UInt8, &protocol witness table for UInt8);
          v156 = v155;
          swift_bridgeObjectRelease();
          v192 = sub_100016940(v154, v156, (uint64_t *)&v193);
          v50 = v188;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, &v193, v147 + 40, v147 + 48);
          swift_bridgeObjectRelease_n(v89, 2);
          v157 = v189;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v145, v146, "Play sound running: airPodPlayingSoundWithBothBudsInCase %{BOOL}d for %{private,mask.hash}s. Nearby Count: %ld, nearby: %{public}s.", (uint8_t *)v147, 0x30u);
          swift_arrayDestroy(v148, 2, (char *)&type metadata for Any + 8);
          v72 = (int *)v191;
          swift_slowDealloc(v148, -1, -1);
          v158 = v147;
          v48 = v160;
          swift_slowDealloc(v158, -1, -1);

          v64 = v157;
          sub_1000126B0(v167, type metadata accessor for OwnedBeaconRecord);
          v71 = v174;
        }
        else
        {

          swift_bridgeObjectRelease_n(v89, 4);
          v61(v143, v50);
          sub_1000126B0(v167, type metadata accessor for OwnedBeaconRecord);
          v71 = v174;
          v72 = v85;
          v64 = v65;
        }
      }
      goto LABEL_26;
    }
    v81(v78, 1, 1, v79);
    v69 = (uint64_t *)&unk_1010F47C0;
    v70 = v78;
  }
  sub_100004048(v70, v69);
  v72 = (int *)v191;
  v71 = v174;
LABEL_26:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v197);
LABEL_27:
  v91 = v190;
  swift_beginAccess(v64, &v197, 33, 0);
  *(_BYTE *)(v64 + v72[6]) = 2;
  v92 = v177;
  static Date.trustedNow.getter(v177);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v178 + 40))(v64 + v72[8], v92, v179);
  swift_endAccess(&v197);
  v93 = (uint64_t)v176;
  v48(v176, v91, v50);
  v94 = v64;
  v95 = v175;
  sub_10005972C(v94, v175, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v165((char *)v95, 0, 1, (uint64_t)v72);
  swift_beginAccess(v161, &v197, 33, 0);
  sub_1000FF1EC(v95, v93);
  swift_endAccess(&v197);
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v96 = qword_1011B7160;
  v97 = (uint64_t)v181;
  v48(v181, v91, v50);
  v98 = v180;
  static Date.trustedNow.getter(v97 + *(int *)(v180 + 20));
  *(_BYTE *)(v97 + *(int *)(v98 + 24)) = 25;
  v99 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
  v100 = *(unsigned __int8 *)(v71 + 80);
  v101 = (v100 + 32) & ~v100;
  v102 = swift_allocObject(v99, v101 + *(_QWORD *)(v71 + 72), v100 | 7);
  *(_OWORD *)(v102 + 16) = xmmword_100E22B00;
  sub_10005972C(v97, v102 + v101, type metadata accessor for BeaconObservation);
  v103 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v103);
  v159[-4] = v96;
  v159[-3] = v102;
  v159[-2] = 0;
  v159[-1] = 0;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, &v159[-6], &type metadata for () + 1);
  swift_bridgeObjectRelease();
  sub_1000126B0(v97, type metadata accessor for BeaconObservation);
  v104 = v182;
  sub_10081C0CC(v91, v182);
  v105 = type metadata accessor for WildModeAssociationRecord(0);
  LODWORD(v102) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 48))(v104, 1, v105);
  sub_100004048(v104, &qword_101102FB0);
  if ((_DWORD)v102 == 1)
    sub_1007EEF64(10);
  else
    sub_1007F4EB8();
  v106 = sub_1005DF7B0(v91);
  My = type metadata accessor for Feature.FindMy(0);
  v198 = My;
  v199 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v108 = sub_100018F08(&v197);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v108, enum case for Feature.FindMy.spPlaySoundAll(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(&v197);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v197);
  if ((My & 1) == 0 || (v106 & 1) != 0)
    goto LABEL_52;
  if (v173 > 5)
  {
    if (qword_1010E9D38 != -1)
      swift_once(&qword_1010E9D38, sub_1005D45D4);
    v120 = sub_10001A9E8(v164, (uint64_t)qword_101100948);
    v121 = Logger.logObject.getter(v120);
    v122 = static os_log_type_t.error.getter(v121);
    if (os_log_type_enabled(v121, v122))
    {
      v123 = swift_slowAlloc(22, -1);
      v124 = swift_slowAlloc(32, -1);
      v197 = v124;
      *(_DWORD *)v123 = 136315394;
      v193 = sub_100016940(0xD000000000000029, 0x8000000100EDCB10, &v197);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v123 + 4, v123 + 12);
      *(_WORD *)(v123 + 12) = 2048;
      v193 = v173;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v123 + 14, v123 + 22);
      _os_log_impl((void *)&_mh_execute_header, v121, v122, "%s Unexpected play sound context %ld!", (uint8_t *)v123, 0x16u);
      swift_arrayDestroy(v124, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v124, -1, -1);
      swift_slowDealloc(v123, -1, -1);
    }

    sub_10000F9B8((uint64_t)v200, (uint64_t)&v197, (uint64_t *)&unk_1010EE310);
    v125 = v198;
    if (v198)
    {
      v126 = v199;
      sub_10001AA44(&v197, v198);
      v111 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v126 + 176))(v125, v126);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v197);
      v112 = (void *)SPBeaconTypeHele;
      v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
      v115 = v127;
      v117 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
      v118 = v128;
      if (v113 == v117 && v115 == v128)
        goto LABEL_39;
      goto LABEL_48;
    }
LABEL_50:
    sub_100004048((uint64_t)&v197, (uint64_t *)&unk_1010EE310);
LABEL_51:
    a3 = 20.0;
    goto LABEL_52;
  }
  if (((1 << v173) & 0x1D) == 0)
  {
    a3 = 2.0;
    goto LABEL_52;
  }
  sub_10000F9B8((uint64_t)v200, (uint64_t)&v197, (uint64_t *)&unk_1010EE310);
  v109 = v198;
  if (!v198)
    goto LABEL_50;
  v110 = v199;
  sub_10001AA44(&v197, v198);
  v111 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v110 + 176))(v109, v110);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v197);
  v112 = (void *)SPBeaconTypeHele;
  v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
  v115 = v114;
  v117 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
  v118 = v116;
  if (v113 != v117 || v115 != v116)
  {
LABEL_48:
    v129 = _stringCompareWithSmolCheck(_:_:expecting:)(v113, v115, v117, v118, 0);
    v130 = v112;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a3 = 30.0;
    if ((v129 & 1) != 0)
      goto LABEL_52;
    goto LABEL_51;
  }
LABEL_39:
  v119 = v112;

  swift_bridgeObjectRelease_n(v115, 2);
  a3 = 30.0;
LABEL_52:
  if (qword_1010E9D38 != -1)
    swift_once(&qword_1010E9D38, sub_1005D45D4);
  v131 = sub_10001A9E8(v164, (uint64_t)qword_101100948);
  v132 = Logger.logObject.getter(v131);
  v133 = static os_log_type_t.default.getter(v132);
  if (os_log_type_enabled(v132, v133))
  {
    v134 = swift_slowAlloc(22, -1);
    v135 = swift_slowAlloc(32, -1);
    v197 = v135;
    *(_DWORD *)v134 = 136315394;
    v193 = sub_100016940(0xD000000000000029, 0x8000000100EDCB10, &v197);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v134 + 4, v134 + 12);
    *(_WORD *)(v134 + 12) = 2048;
    v193 = *(_QWORD *)&a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v134 + 14, v134 + 22);
    _os_log_impl((void *)&_mh_execute_header, v132, v133, "%s scheduling timeout block after %f seconds", (uint8_t *)v134, 0x16u);
    swift_arrayDestroy(v135, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v135, -1, -1);
    swift_slowDealloc(v134, -1, -1);
  }

  v136 = v184;
  static DispatchTime.now()(v137);
  v138 = v186;
  + infix(_:_:)(v136, a3);
  v139 = *(void (**)(char *, uint64_t))(v185 + 8);
  v140 = v187;
  v139(v136, v187);
  v141 = v189;
  v142 = *(_QWORD *)(v189 + v72[7]);
  swift_retain();
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v138, v142);
  swift_release();
  v139(v138, v140);
  sub_100004048((uint64_t)v200, (uint64_t *)&unk_1010EE310);
  return sub_1000126B0(v141, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
}

uint64_t sub_1005E6CB0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _BYTE *v31;
  char v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  id v39;
  NSString v40;
  id v41;
  id v42;
  id v43;
  NSString v44;
  id v45;
  uint64_t v46;
  void *v47;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char *v55;
  _QWORD aBlock[6];
  __int128 v57[2];
  _QWORD v58[6];

  v54 = a2;
  v53 = type metadata accessor for PlaySoundUserNotification(0);
  __chkstk_darwin(v53);
  v55 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LocalizationUtility.Table(0);
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  __chkstk_darwin(v4);
  v50 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v6);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OwnedBeaconGroup(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v13);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for WildModeAssociationRecord(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10081C0CC(a1, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_100004048((uint64_t)v15, &qword_101102FB0);
    sub_10081EDA8(a1, (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010FF7F0);
      v20 = sub_1007EFA24(a1);
      if (v21)
      {
        v22 = v20;
        v23 = v21;
      }
      else
      {
        v28 = v51;
        v27 = v52;
        v29 = v50;
        (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v50, enum case for LocalizationUtility.Table.default(_:), v52);
        v22 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000029, 0x8000000100ECB510, v29);
        v23 = v30;
        (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v27);
      }
    }
    else
    {
      sub_1000126EC((uint64_t)v8, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
      v26 = (uint64_t *)&v12[*(int *)(v9 + 36)];
      v22 = *v26;
      v23 = v26[1];
      swift_bridgeObjectRetain(v23);
      sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    }
    v25 = 64;
  }
  else
  {
    sub_1000126EC((uint64_t)v15, (uint64_t)v19, type metadata accessor for WildModeAssociationRecord);
    v22 = sub_1001DB1BC();
    v23 = v24;
    sub_1000126B0((uint64_t)v19, type metadata accessor for WildModeAssociationRecord);
    v25 = 65;
  }
  v31 = v55;
  v32 = v54;
  v33 = v53;
  v34 = &v55[*(int *)(v53 + 36)];
  v35 = type metadata accessor for UUID(0);
  v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v34, a1, v35);
  *v31 = 1;
  v31[1] = v25;
  UUID.init()(v36);
  v37 = (uint64_t *)&v31[*(int *)(v33 + 28)];
  *v37 = v22;
  v37[1] = v23;
  v31[*(int *)(v33 + 32)] = v32 & 1;
  if (qword_1010EA140 != -1)
    swift_once(&qword_1010EA140, sub_100A3A528);
  v58[3] = v33;
  v58[4] = &off_101083200;
  v38 = sub_100018F08(v58);
  sub_10005972C((uint64_t)v31, (uint64_t)v38, type metadata accessor for PlaySoundUserNotification);
  v39 = objc_allocWithZone((Class)UNUserNotificationCenter);
  v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v41 = objc_msgSend(v39, "initWithBundleIdentifier:", v40);

  v42 = sub_100C0B880((uint64_t)v38);
  UUID.uuidString.getter(v42);
  v43 = v42;
  v44 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v45 = objc_msgSend((id)objc_opt_self(UNNotificationRequest), "requestWithIdentifier:content:trigger:destinations:", v44, v43, 0, 7);

  sub_100030784((uint64_t)v58, (uint64_t)v57);
  v46 = swift_allocObject(&unk_101082268, 72, 7);
  sub_10000F9FC(v57, v46 + 16);
  *(_QWORD *)(v46 + 56) = 0;
  *(_QWORD *)(v46 + 64) = 0;
  aBlock[4] = sub_100216F78;
  aBlock[5] = v46;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100555E2C;
  aBlock[3] = &unk_101082280;
  v47 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v41, "addNotificationRequest:withCompletionHandler:", v45, v47);

  _Block_release(v47);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v58);
  return sub_1000126B0((uint64_t)v31, type metadata accessor for PlaySoundUserNotification);
}

uint64_t sub_1005E7248(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  void (*v47)(_BYTE *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  int v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void (*v65)(_BYTE *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(_BYTE *, uint64_t);
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  void (*v77)(_QWORD, _QWORD);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  BOOL v98;
  unint64_t v99;
  int64_t v100;
  void (*v101)(_BYTE *, _BYTE *, uint64_t);
  _QWORD *v102;
  id v103;
  unsigned int v104;
  void (*v105)(_QWORD, _QWORD);
  uint64_t v106;
  _BYTE *v107;
  uint64_t My;
  _QWORD *v109;
  uint64_t v110;
  double Current;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t ObjectType;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned __int8 v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  uint64_t v134;
  _BYTE *v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  _BYTE *v148;
  char *v150;
  __n128 v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int64_t v158;
  uint64_t v159;
  int64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  _BYTE *v164;
  _BYTE *v165;
  uint64_t v166;
  NSObject *v167;
  os_log_type_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  void (*v177)(uint64_t, uint64_t);
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _BYTE *v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  _BYTE *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _BYTE *v192;
  uint64_t v193;
  uint64_t v194;
  _BYTE v195[12];
  int v196;
  uint64_t v197;
  uint64_t v198;
  _BYTE *v199;
  _BYTE *v200;
  uint64_t v201;
  _BYTE *v202;
  uint64_t v203;
  uint64_t v204;
  _BYTE *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  _BYTE *v214;
  uint64_t v215;
  _BYTE *v216;
  _BYTE *v217;
  uint64_t v218;
  void (*v219)(_QWORD, _QWORD);
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  int64_t v223;
  _BYTE *v224;
  __int128 v225;
  _BYTE *v226;
  uint64_t v227;
  uint64_t v228;
  _BYTE *v229;
  uint64_t v230;
  void (*v231)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v232;
  _BYTE *v233;
  uint64_t v234;
  _BYTE *v235;
  uint64_t v236;
  _BYTE *v237;
  _BYTE *v238;
  char v239[8];
  uint64_t v240;
  char v241[8];
  _QWORD v242[4];
  _QWORD *v243;
  double aBlock;
  uint64_t v245;
  uint64_t (*v246)(uint64_t);
  void *v247;
  uint64_t v248;
  uint64_t v249;

  v209 = a5;
  v208 = a4;
  v10 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v10);
  v216 = &v195[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v218 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v218);
  v217 = &v195[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v234 = type metadata accessor for Date(0);
  v236 = *(_QWORD *)(v234 - 8);
  __chkstk_darwin(v234);
  v235 = &v195[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v228 = type metadata accessor for BeaconObservation(0);
  v227 = *(_QWORD *)(v228 - 8);
  __chkstk_darwin(v228);
  v226 = &v195[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v204 = type metadata accessor for DispatchWorkItemFlags(0);
  v203 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v202 = &v195[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v212 = type metadata accessor for DispatchQoS(0);
  v16 = *(_QWORD *)(v212 - 8);
  __chkstk_darwin(v212);
  v210 = &v195[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v207 = type metadata accessor for DispatchQoS.QoSClass(0);
  v206 = *(_QWORD *)(v207 - 8);
  __chkstk_darwin(v207);
  v205 = &v195[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = sub_10001A9A8(&qword_1010EF1D8);
  __chkstk_darwin(v19);
  v237 = &v195[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v223 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  v222 = *(_QWORD *)(v223 - 8);
  v21 = __chkstk_darwin(v223);
  v200 = &v195[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v21);
  v221 = &v195[-v23];
  v24 = sub_10001A9A8(&qword_1010ED860);
  v25 = __chkstk_darwin(v24);
  v229 = &v195[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v25);
  v224 = &v195[-v27];
  v28 = type metadata accessor for UUID(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = __chkstk_darwin(v28);
  v238 = &v195[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v32 = __chkstk_darwin(v30);
  v232 = &v195[-v33];
  v34 = __chkstk_darwin(v32);
  v199 = &v195[-v35];
  v36 = __chkstk_darwin(v34);
  v233 = &v195[-v37];
  v38 = __chkstk_darwin(v36);
  v40 = &v195[-v39];
  v41 = __chkstk_darwin(v38);
  v43 = &v195[-v42];
  __chkstk_darwin(v41);
  v45 = &v195[-v44];
  v46 = a1 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 24);
  v230 = v29;
  v47 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v29 + 16);
  v47(v45, v46, v28);
  v215 = a1;
  sub_10036AC6C();
  v49 = v48;
  v50 = a2;
  sub_1005FA0C4(v49, (uint64_t)v50);
  LODWORD(v225) = v51;
  swift_bridgeObjectRelease();
  v213 = v50;

  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v52 = type metadata accessor for Logger(0);
  v53 = sub_10001A9E8(v52, (uint64_t)qword_1011B71E0);
  v47(v43, (uint64_t)v45, v28);
  v231 = (void (*)(_BYTE *, _BYTE *, uint64_t))v47;
  v54 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v47)(v40, a3, v28);
  v198 = v53;
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.default.getter(v55);
  v57 = v56;
  v58 = os_log_type_enabled(v55, v56);
  v220 = v28;
  v211 = v16;
  v214 = v45;
  v201 = a3;
  if (v58)
  {
    v59 = swift_slowAlloc(32, -1);
    v197 = swift_slowAlloc(64, -1);
    aBlock = *(double *)&v197;
    *(_DWORD *)v59 = 136315650;
    v60 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v196 = v57;
    v61 = v60;
    v62 = dispatch thunk of CustomStringConvertible.description.getter(v220, v60);
    v240 = sub_100016940(v62, v63, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v240, v241, v59 + 4, v59 + 12);
    swift_bridgeObjectRelease();
    v64 = v230;
    v65 = *(void (**)(_BYTE *, uint64_t))(v230 + 8);
    v65(v43, v220);
    *(_WORD *)(v59 + 12) = 2048;
    v240 = *(_QWORD *)&a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v240, v241, v59 + 14, v59 + 22);
    *(_WORD *)(v59 + 22) = 2080;
    v66 = v61;
    v45 = v214;
    v67 = dispatch thunk of CustomStringConvertible.description.getter(v220, v66);
    v240 = sub_100016940(v67, v68, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v240, v241, v59 + 24, v59 + 32);
    swift_bridgeObjectRelease();
    v219 = (void (*)(_QWORD, _QWORD))v65;
    v65(v40, v220);
    _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v196, "Stop sound %s timeout %f. CommandId %s", (uint8_t *)v59, 0x20u);
    v69 = v197;
    swift_arrayDestroy(v197, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1, -1);
    v70 = v59;
    v28 = v220;
    swift_slowDealloc(v70, -1, -1);
  }
  else
  {
    v64 = v230;
    v71 = *(void (**)(_BYTE *, uint64_t))(v230 + 8);
    v71(v43, v28);
    v219 = (void (*)(_QWORD, _QWORD))v71;
    v71(v40, v28);
  }

  v72 = (uint64_t)v233;
  v73 = v232;
  v74 = (uint64_t)v237;
  if ((v225 & 1) == 0)
    goto LABEL_9;
  sub_10036AC6C();
  v75 = v224;
  sub_1000FC598(v76, (uint64_t)v224);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v64 + 48))(v75, 1, v28) == 1)
  {
    sub_100004048((uint64_t)v75, &qword_1010ED860);
LABEL_9:
    v77 = v219;
    goto LABEL_10;
  }
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v64 + 32))(v72, v75, v28);
  v150 = &v213[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators];
  v151 = swift_beginAccess(&v213[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators], v239, 0, 0);
  v152 = *(_QWORD *)v150;
  if (*(_QWORD *)(v152 + 16))
  {
    swift_bridgeObjectRetain(v152);
    v153 = sub_100003FB0(v72);
    if ((v154 & 1) != 0)
    {
      v155 = v222;
      sub_10005972C(*(_QWORD *)(v152 + 56) + *(_QWORD *)(v222 + 72) * v153, v74, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      v156 = v155;
      v157 = 0;
    }
    else
    {
      v157 = 1;
      v156 = v222;
    }
    v158 = v223;
    v159 = v156;
    (*(void (**)(uint64_t, uint64_t, uint64_t, int64_t))(v156 + 56))(v74, v157, 1, v223);
    v160 = v158;
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, int64_t))(v159 + 48))(v74, 1, v158) != 1)
    {
      v162 = v221;
      sub_1000126EC(v74, (uint64_t)v221, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      if (*((_BYTE *)v162 + *(int *)(v160 + 24)) == 4)
      {
        v163 = v72;
        v164 = v199;
        v231(v199, v45, v28);
        v165 = v200;
        v166 = sub_10005972C((uint64_t)v162, (uint64_t)v200, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
        v167 = Logger.logObject.getter(v166);
        v168 = static os_log_type_t.error.getter(v167);
        if (os_log_type_enabled(v167, v168))
        {
          v169 = swift_slowAlloc(22, -1);
          aBlock = COERCE_DOUBLE(swift_slowAlloc(64, -1));
          *(_DWORD *)v169 = 136315394;
          v170 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v171 = dispatch thunk of CustomStringConvertible.description.getter(v28, v170);
          v240 = sub_100016940(v171, v172, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v240, v241, v169 + 4, v169 + 12);
          swift_bridgeObjectRelease();
          v219(v164, v28);
          *(_WORD *)(v169 + 12) = 2080;
          __asm { BR              X10 }
        }
        v177 = v219;
        v219(v164, v28);
        sub_1000126B0((uint64_t)v165, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);

        v178 = v28;
        v179 = v163;
        sub_10001F6FC();
        v180 = v206;
        v181 = v205;
        v182 = v207;
        (*(void (**)(_BYTE *, _QWORD, uint64_t))(v206 + 104))(v205, enum case for DispatchQoS.QoSClass.default(_:), v207);
        v183 = (void *)static OS_dispatch_queue.global(qos:)(v181);
        (*(void (**)(_BYTE *, uint64_t))(v180 + 8))(v181, v182);
        v184 = swift_allocObject(&unk_101081D40, 32, 7);
        v185 = v209;
        *(_QWORD *)(v184 + 16) = v208;
        *(_QWORD *)(v184 + 24) = v185;
        v248 = (uint64_t)sub_1005FD5F4;
        v249 = v184;
        aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
        v245 = 1107296256;
        v246 = sub_100016FB8;
        v247 = &unk_101081D58;
        v186 = _Block_copy(&aBlock);
        v187 = swift_retain();
        v188 = v210;
        static DispatchQoS.unspecified.getter(v187);
        v240 = (uint64_t)_swiftEmptyArrayStorage;
        v189 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v190 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v191 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v192 = v202;
        v193 = v190;
        v194 = v204;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v240, v193, v191, v204, v189);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v188, v192, v186);
        _Block_release(v186);

        (*(void (**)(_BYTE *, uint64_t))(v203 + 8))(v192, v194);
        (*(void (**)(_BYTE *, uint64_t))(v211 + 8))(v188, v212);
        sub_1000126B0((uint64_t)v221, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
        v177(v179, v178);
        v177((uint64_t)v214, v178);
        return swift_release();
      }
      sub_10036AC6C();
      v174 = v173;
      v175 = v213;
      sub_1005F8F04(v174, (uint64_t)v175);
      swift_bridgeObjectRelease();

      v73 = v232;
      sub_1000126B0((uint64_t)v162, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      v176 = v72;
      v77 = v219;
      v219(v176, v28);
      goto LABEL_10;
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, int64_t, __n128))(v222 + 56))(v74, 1, 1, v223, v151);
  }
  v161 = v72;
  v77 = v219;
  v219(v161, v28);
  sub_100004048(v74, &qword_1010EF1D8);
LABEL_10:
  sub_10036AC6C();
  v79 = *(_QWORD *)(v78 + 56);
  v222 = v78 + 56;
  v80 = 1 << *(_BYTE *)(v78 + 32);
  v81 = -1;
  if (v80 < 64)
    v81 = ~(-1 << v80);
  v82 = v81 & v79;
  v223 = (unint64_t)(v80 + 63) >> 6;
  LODWORD(v224) = enum case for Feature.FindMy.trustedNowUsesReferenceClock(_:);
  v233 = (_BYTE *)v78;
  swift_bridgeObjectRetain(v78);
  v83 = 0;
  v221 = &type metadata for () + 1;
  v225 = xmmword_100E22B00;
  while (1)
  {
    v93 = v231;
    v94 = v229;
    if (v82)
    {
      v95 = __clz(__rbit64(v82));
      v82 &= v82 - 1;
      v96 = v95 | (v83 << 6);
      v97 = v236;
      goto LABEL_32;
    }
    v98 = __OFADD__(v83++, 1);
    v97 = v236;
    if (v98)
    {
      __break(1u);
      JUMPOUT(0x1005E88A4);
    }
    if (v83 >= v223)
      goto LABEL_64;
    v99 = *(_QWORD *)(v222 + 8 * v83);
    if (!v99)
      break;
LABEL_31:
    v82 = (v99 - 1) & v99;
    v96 = __clz(__rbit64(v99)) + (v83 << 6);
LABEL_32:
    v231(v229, (_BYTE *)(*((_QWORD *)v233 + 6) + *(_QWORD *)(v64 + 72) * v96), v28);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v94, 0, 1, v28);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v64 + 48))(v94, 1, v28) == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      v131 = v204;
      v132 = v203;
      v133 = v202;
      goto LABEL_65;
    }
    v101 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v64 + 32);
    v101(v73, v94, v28);
    if (qword_1010E9CF0 != -1)
      swift_once(&qword_1010E9CF0, sub_10058CADC);
    v237 = (_BYTE *)qword_1011B7160;
    v93(v238, v73, v28);
    if (qword_1010EA1D0 != -1)
      swift_once(&qword_1010EA1D0, sub_100B11444);
    aBlock = 7.45683732e247;
    *(double *)&v245 = -5.98008217e197;
    SynchronousCache.cachedValue<A>(key:computeBlock:)(&v243, &aBlock, sub_10001F628, 0, &type metadata for Bool);
    swift_bridgeObjectRelease();
    v102 = (_QWORD *)&unk_101115000;
    if (v243 == 1)
    {
      v103 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
      v104 = objc_msgSend(v103, "isInternalBuild");

      if (v104)
      {
        v105 = v77;
        if (qword_1010E98B0 != -1)
          swift_once(&qword_1010E98B0, sub_10001F1E8);
        v106 = sub_10001A9E8(v218, (uint64_t)qword_1010E98B8);
        swift_beginAccess(v106, &v240, 0, 0);
        v107 = v217;
        sub_10000F9B8(v106, (uint64_t)v217, (uint64_t *)&unk_1010EA690);
        v85 = v234;
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v97 + 48))(v107, 1, v234) != 1)
        {
          v84 = v235;
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v97 + 32))(v235, v107, v85);
          v77 = v105;
          goto LABEL_14;
        }
        sub_100004048((uint64_t)v107, (uint64_t *)&unk_1010EA690);
        v77 = v105;
        v102 = &unk_101115000;
      }
    }
    My = type metadata accessor for Feature.FindMy(0);
    v247 = (void *)My;
    v248 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v109 = sub_100018F08(&aBlock);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v109, v224, My);
    LOBYTE(My) = isFeatureEnabled(_:)(&aBlock);
    v110 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    if ((My & 1) == 0)
    {
      v84 = v235;
      Date.init()(v110);
      v85 = v234;
      goto LABEL_14;
    }
    sub_100B3575C();
    Current = CFAbsoluteTimeGetCurrent();
    v84 = v235;
    if (qword_1010EA1F8 != -1)
      swift_once(&qword_1010EA1F8, sub_100B35618);
    v112 = v102[371];
    v113 = sub_10001A9A8(&qword_1010EBE48);
    v114 = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100033284, 0, v112, v221, v113);
    if (Current - aBlock - *(double *)&v245 > 86400.0)
    {
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100033298, 0, v102[371], &type metadata for () + 1, &type metadata for () + 1);
      v115 = type metadata accessor for TaskPriority(0);
      v116 = *(_QWORD *)(v115 - 8);
      v117 = (uint64_t)v216;
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v116 + 56))(v216, 1, 1, v115);
      v118 = swift_allocObject(&unk_101081CF0, 32, 7);
      *(_QWORD *)(v118 + 16) = 0;
      v119 = (uint64_t *)(v118 + 16);
      *(_QWORD *)(v118 + 24) = 0;
      v120 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 48))(v117, 1, v115);
      if ((_DWORD)v120 == 1)
      {
        sub_100004048(v117, &qword_1010F46C0);
        v121 = 0;
        v122 = *v119;
        if (*v119)
          goto LABEL_49;
LABEL_53:
        v125 = 0;
        v127 = 0;
      }
      else
      {
        v128 = TaskPriority.rawValue.getter(v120);
        (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v117, v115);
        v121 = v128;
        v122 = *v119;
        if (!*v119)
          goto LABEL_53;
LABEL_49:
        v123 = *(_QWORD *)(v118 + 24);
        ObjectType = swift_getObjectType(v122);
        swift_unknownObjectRetain(v122);
        v125 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v123);
        v127 = v126;
        swift_unknownObjectRelease(v122);
      }
      v85 = v234;
      v129 = swift_allocObject(&unk_101081D18, 32, 7);
      *(_QWORD *)(v129 + 16) = &unk_1010EBE50;
      *(_QWORD *)(v129 + 24) = v118;
      if (v127 | v125)
      {
        v242[0] = 0;
        v242[1] = 0;
        v130 = v242;
        v242[2] = v125;
        v242[3] = v127;
      }
      else
      {
        v130 = 0;
      }
      v28 = v220;
      v97 = v236;
      v84 = v235;
      swift_task_create(v121 | 0x1C00, v130, &type metadata for () + 1, &unk_1010EE4A0, v129);
      v114 = swift_release();
      v77 = v219;
      goto LABEL_58;
    }
    v85 = v234;
LABEL_58:
    Date.init(timeIntervalSinceReferenceDate:)(v114);
LABEL_14:
    v86 = (uint64_t)v226;
    v101(v226, v238, v28);
    v87 = v228;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v97 + 32))(v86 + *(int *)(v228 + 20), v84, v85);
    *(_BYTE *)(v86 + *(int *)(v87 + 24)) = 26;
    v88 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
    v89 = *(unsigned __int8 *)(v227 + 80);
    v90 = (v89 + 32) & ~v89;
    v91 = swift_allocObject(v88, v90 + *(_QWORD *)(v227 + 72), v89 | 7);
    *(_OWORD *)(v91 + 16) = v225;
    sub_10005972C(v86, v91 + v90, type metadata accessor for BeaconObservation);
    v92 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v92);
    *(_QWORD *)&v195[-32] = v237;
    *(_QWORD *)&v195[-24] = v91;
    *(_QWORD *)&v195[-16] = 0;
    *(_QWORD *)&v195[-8] = 0;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001514CC, &v195[-48], &type metadata for () + 1);
    swift_bridgeObjectRelease();
    sub_1000126B0(v86, type metadata accessor for BeaconObservation);
    v73 = v232;
    v77(v232, v28);
    v64 = v230;
  }
  v100 = v83 + 1;
  if (v83 + 1 >= v223)
    goto LABEL_64;
  v99 = *(_QWORD *)(v222 + 8 * v100);
  if (v99)
    goto LABEL_30;
  v100 = v83 + 2;
  if (v83 + 2 >= v223)
    goto LABEL_64;
  v99 = *(_QWORD *)(v222 + 8 * v100);
  if (v99)
    goto LABEL_30;
  v100 = v83 + 3;
  if (v83 + 3 >= v223)
    goto LABEL_64;
  v99 = *(_QWORD *)(v222 + 8 * v100);
  if (v99)
    goto LABEL_30;
  v100 = v83 + 4;
  if (v83 + 4 >= v223)
    goto LABEL_64;
  v99 = *(_QWORD *)(v222 + 8 * v100);
  if (v99)
    goto LABEL_30;
  v100 = v83 + 5;
  if (v83 + 5 >= v223)
    goto LABEL_64;
  v99 = *(_QWORD *)(v222 + 8 * v100);
  if (v99)
  {
LABEL_30:
    v83 = v100;
    goto LABEL_31;
  }
  while (1)
  {
    v83 = v100 + 1;
    if (__OFADD__(v100, 1))
    {
      __break(1u);
      JUMPOUT(0x1005E8BF0);
    }
    if (v83 >= v223)
      break;
    v99 = *(_QWORD *)(v222 + 8 * v83);
    ++v100;
    if (v99)
      goto LABEL_31;
  }
LABEL_64:
  v131 = v204;
  v132 = v203;
  v133 = v202;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v229, 1, 1, v220);
  swift_release();
  swift_bridgeObjectRelease();
LABEL_65:
  sub_10001F6FC();
  v134 = v206;
  v135 = v205;
  v136 = v207;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v206 + 104))(v205, enum case for DispatchQoS.QoSClass.default(_:), v207);
  v137 = (void *)static OS_dispatch_queue.global(qos:)(v135);
  (*(void (**)(_BYTE *, uint64_t))(v134 + 8))(v135, v136);
  v138 = swift_allocObject(&unk_101081CA0, 32, 7);
  v139 = v209;
  *(_QWORD *)(v138 + 16) = v208;
  *(_QWORD *)(v138 + 24) = v139;
  v248 = (uint64_t)sub_1002E3C58;
  v249 = v138;
  aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
  v245 = 1107296256;
  v246 = sub_100016FB8;
  v247 = &unk_101081CB8;
  v140 = _Block_copy(&aBlock);
  v141 = swift_retain();
  v142 = v210;
  static DispatchQoS.unspecified.getter(v141);
  v243 = _swiftEmptyArrayStorage;
  v143 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v144 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v145 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v243, v144, v145, v131, v143);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v142, v133, v140);
  _Block_release(v140);

  (*(void (**)(_BYTE *, uint64_t))(v132 + 8))(v133, v131);
  (*(void (**)(_BYTE *, uint64_t))(v211 + 8))(v142, v212);
  swift_release();
  v146 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v146);
  v147 = v213;
  *(_QWORD *)&v195[-48] = v215;
  *(_QWORD *)&v195[-40] = v147;
  *(_QWORD *)&v195[-32] = v201;
  *(double *)&v195[-24] = a6;
  v148 = v214;
  *(_QWORD *)&v195[-16] = v214;
  static Transaction.named<A>(_:with:)("SoundPlaybackManager.playSoundGroup", 35, 2, sub_1005FA808, &v195[-64]);
  return ((uint64_t (*)(_BYTE *, uint64_t))v219)(v148, v220);
}

uint64_t sub_1005E8C0C(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140[8];
  _QWORD **v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;

  v138 = a4;
  v129 = a5;
  v134 = a1;
  v9 = sub_10001A9A8(&qword_101100A68);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_101100A70);
  v137 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OwnedBeaconGroup(0);
  v124 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v126 = v17;
  v132 = (uint64_t)&v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for UUID(0);
  v125 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v120 = v18;
  v131 = (char *)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v19);
  v119 = (char *)&v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v110 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v108 = (char *)&v104 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_10001A9A8(&qword_101100A78);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v104 = (char *)&v104 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_10001A9A8(&qword_101100A80);
  v109 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v107 = (char *)&v104 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_10001A9A8(&qword_101100A88);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v113 = (char *)&v104 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_10001A9A8(&qword_101100A90);
  v117 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v116 = (char *)&v104 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_10001A9A8(&qword_101100A98);
  v122 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v127 = (char *)&v104 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = _swiftEmptyArrayStorage;
  v146 = _swiftEmptyArrayStorage;
  v130 = a2;
  sub_10036AC6C();
  v141 = &v146;
  v142 = a3;
  v133 = a3;
  v29 = v139;
  v143 = v138;
  sub_1003F08EC((void (*)(char *))sub_1005FA850, (uint64_t)v140, v30);
  v121 = v29;
  v31 = swift_bridgeObjectRelease();
  v139 = (uint64_t)v146;
  v138 = v146[2];
  v112 = v21;
  if (v138)
  {
    v145 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v139);
    specialized ContiguousArray.reserveCapacity(_:)(v138);
    v32 = sub_1000193A4(&qword_101100AB0, &qword_101100AA0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v135 = v10;
    v136 = v32;
    v33 = 0;
    v34 = v9;
    do
    {
      v35 = v33 + 1;
      v144 = *(_QWORD *)(v139 + 8 * v33 + 32);
      swift_retain();
      v36 = sub_10001A9A8(&qword_101100AA0);
      v37 = sub_10001A9A8(&qword_101100AA8);
      Publisher.map<A>(_:)(sub_1005E395C, 0, v36, v37, v136);
      v38 = sub_10001A9A8(&qword_101100AB8);
      v39 = sub_1000193A4(&qword_101100AC0, &qword_101100A68, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
      v40 = sub_1000193A4(&qword_101100AC8, &qword_101100AB8, (const char *)&protocol conformance descriptor for Just<A>);
      Publisher.catch<A>(_:)(sub_1005E3960, 0, v34, v38, v39, v40);
      (*(void (**)(char *, uint64_t))(v135 + 8))(v12, v34);
      v41 = sub_1000193A4(&qword_101100AD0, &qword_101100A70, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
      v42 = Publisher.eraseToAnyPublisher()(v13, v41);
      (*(void (**)(char *, uint64_t))(v137 + 8))(v15, v13);
      v43 = swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v43);
      v44 = v145[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v44);
      v45 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v42);
      specialized ContiguousArray._endMutation()(v45);
      v33 = v35;
    }
    while (v138 != v35);
    v28 = v145;
    v31 = swift_bridgeObjectRelease();
  }
  v139 = Transaction.subscriptionCleaner.getter(v31);
  v138 = swift_allocObject(&unk_101081D90, 17, 7);
  *(_BYTE *)(v138 + 16) = 0;
  v145 = v28;
  v46 = sub_10001A9A8(&qword_101100AD8);
  v47 = sub_1000193A4(&qword_101100AE0, &qword_101100AD8, (const char *)&protocol conformance descriptor for [A]);
  v48 = sub_1000193A4(&qword_101100AE8, &qword_101100AF0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v49 = (_QWORD *)Sequence<>.merged()(v46, v47, v48);
  swift_bridgeObjectRelease();
  v145 = v49;
  v50 = sub_10001A9A8(&qword_101100AF0);
  v51 = sub_1005FA87C();
  v52 = v104;
  Publisher<>.setFailureType<A>(to:)(&type metadata for SoundPlaybackManager.SoundPlaybackManagerError, v50, &type metadata for SoundPlaybackManager.SoundPlaybackManagerError, v48, v51);
  v53 = swift_release();
  v54 = v108;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v53, a6);
  v145 = *(_QWORD **)&v133[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
  v55 = v145;
  v56 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v137 = *(_QWORD *)(*(_QWORD *)(v56 - 8) + 56);
  v57 = (uint64_t)v119;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v137)(v119, 1, 1, v56);
  v58 = sub_10001F6FC();
  v135 = v58;
  v59 = sub_1000193A4(&qword_101100B00, &qword_101100A78, (const char *)&protocol conformance descriptor for Publishers.SetFailureType<A, B>);
  v60 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v136 = v60;
  v61 = v55;
  v103 = v60;
  v62 = v107;
  v63 = v106;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v54, &v145, v57, sub_1005E396C, 0, v106, v58, v59, v103);
  sub_100004048(v57, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v110 + 8))(v54, v112);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v52, v63);
  v64 = sub_10001A9A8(&qword_101100B08);
  v65 = sub_1000193A4(&qword_101100B10, &qword_101100A80, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  v66 = v113;
  v67 = v111;
  Publisher.map<A>(_:)(sub_1005E3978, 0, v111, v64, v65);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v62, v67);
  v68 = sub_10001A9A8(&qword_101100B18);
  v69 = sub_1000193A4(&qword_101100B20, &qword_101100A88, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v70 = sub_1000193A4(&qword_101100B28, &qword_101100B18, (const char *)&protocol conformance descriptor for Just<A>);
  v71 = v116;
  v72 = v115;
  Publisher.catch<A>(_:)(sub_1005E397C, 0, v115, v68, v69, v70);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v66, v72);
  v145 = v61;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v137)(v57, 1, 1, v56);
  v73 = sub_1000193A4(&qword_101100B30, &qword_101100A90, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  v74 = v61;
  v75 = v118;
  Publisher.receive<A>(on:options:)(&v145, v57, v118, v135, v73, v136);
  sub_100004048(v57, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v117 + 8))(v71, v75);
  v76 = v125;
  v137 = *(_QWORD *)(v125 + 16);
  v77 = v128;
  ((void (*)(char *, uint64_t, uint64_t))v137)(v131, v129, v128);
  sub_10005972C(v130, v132, type metadata accessor for OwnedBeaconGroup);
  v78 = *(unsigned __int8 *)(v76 + 80);
  v79 = (v78 + 32) & ~v78;
  v136 = v120 + 7;
  v80 = (v120 + 7 + v79) & 0xFFFFFFFFFFFFFFF8;
  v81 = *(unsigned __int8 *)(v124 + 80);
  v135 = v81 + 8;
  v82 = (v81 + 8 + v80) & ~v81;
  v124 = v78 | v81 | 7;
  v126 += 7;
  v83 = (v126 + v82) & 0xFFFFFFFFFFFFFFF8;
  v84 = swift_allocObject(&unk_101081DB8, v83 + 8, v124);
  v85 = v139;
  *(_QWORD *)(v84 + 16) = v134;
  *(_QWORD *)(v84 + 24) = v85;
  v125 = *(_QWORD *)(v76 + 32);
  v86 = v131;
  ((void (*)(uint64_t, char *, uint64_t))v125)(v84 + v79, v131, v77);
  v87 = v138;
  *(_QWORD *)(v84 + v80) = v138;
  v88 = v132;
  sub_1000126EC(v132, v84 + v82, type metadata accessor for OwnedBeaconGroup);
  *(_QWORD *)(v84 + v83) = v133;
  ((void (*)(char *, uint64_t, uint64_t))v137)(v86, v129, v77);
  sub_10005972C(v130, v88, type metadata accessor for OwnedBeaconGroup);
  v89 = (v78 + 16) & ~v78;
  v90 = (v136 + v89) & 0xFFFFFFFFFFFFFFF8;
  v91 = (v135 + v90) & ~v81;
  v92 = (v126 + v91) & 0xFFFFFFFFFFFFFFF8;
  v93 = (v92 + 15) & 0xFFFFFFFFFFFFFFF8;
  v94 = swift_allocObject(&unk_101081DE0, v93 + 8, v124);
  ((void (*)(uint64_t, char *, uint64_t))v125)(v94 + v89, v131, v128);
  *(_QWORD *)(v94 + v90) = v87;
  sub_1000126EC(v132, v94 + v91, type metadata accessor for OwnedBeaconGroup);
  v95 = v133;
  *(_QWORD *)(v94 + v92) = v133;
  *(double *)(v94 + v93) = a6;
  v96 = sub_1000193A4(&qword_101100B38, &qword_101100A98, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain_n(v87, 2);
  v97 = v95;
  v98 = v134;
  swift_retain();
  v99 = v139;
  swift_unknownObjectRetain(v139);
  v100 = v123;
  v101 = v127;
  Publisher.sink(receiveCompletion:receiveValue:)(sub_1005FA9F8, v84, sub_1005FABB8, v94, v123, v96);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v122 + 8))(v101, v100);
  AnyCancellable.store(in:)(v98);
  swift_unknownObjectRelease(v99);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1005E983C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD aBlock[6];
  _QWORD *v46;

  v8 = sub_10001A9A8(&qword_1010EF1D8);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v39);
  v41 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v43 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = a1;
  v42 = a4;
  v15 = sub_1005E9C08(a1, a4);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
  v17 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v16 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (v17 >= v16 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
  v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
  specialized Array._endMutation()(v18);
  v19 = swift_allocObject(&unk_101081E08, 24, 7);
  swift_unknownObjectWeakInit(v19 + 16, a3);
  v40 = a3;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v21 = v43;
  v20(v43, v44, v12);
  v22 = *(unsigned __int8 *)(v13 + 80);
  v23 = (v22 + 16) & ~v22;
  v24 = (v14 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = swift_allocObject(&unk_101081E30, v24 + 8, v22 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v25 + v23, v21, v12);
  *(_QWORD *)(v25 + v24) = v19;
  aBlock[4] = sub_1005FAD6C;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101081E48;
  v26 = _Block_copy(aBlock);
  v46 = _swiftEmptyArrayStorage;
  v27 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  swift_retain();
  v28 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v29 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v30 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v28, v29, v39, v27);
  v31 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  v32 = DispatchWorkItem.init(flags:block:)(v30, v26);
  swift_release();
  swift_release();
  v33 = (uint64_t)v43;
  v34 = v44;
  v20(v43, v44, v12);
  v20(v10, v42, v12);
  v35 = (int *)type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  v20(&v10[v35[5]], v34, v12);
  v36 = (uint64_t)&v10[v35[8]];
  swift_retain();
  static Date.trustedNow.getter(v36);
  v10[v35[6]] = 4;
  *(_QWORD *)&v10[v35[7]] = v32;
  *(_QWORD *)&v10[v35[9]] = 0;
  v10[v35[10]] = 0;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(*((_QWORD *)v35 - 1) + 56))(v10, 0, 1, v35);
  swift_beginAccess(v40 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, aBlock, 33, 0);
  sub_1000FF1EC((uint64_t)v10, v33);
  swift_endAccess(aBlock);
  return swift_release();
}

uint64_t sub_1005E9C08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  char v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char isUniquelyReferenced_nonNull_native;
  char v38;
  uint64_t My;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t ObjectType;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  void (*v60)(char *, uint64_t);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[5];
  uint64_t v67;
  uint64_t v68;

  v62 = a2;
  v65 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v65 - 8);
  v5 = __chkstk_darwin(v65);
  v61 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v58 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v58 - v10;
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v64 = v2;
  v16 = *(void **)(v2 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v17 = v16;
  v18 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v18 & 1) != 0)
  {
    if (qword_1010E9D28 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010E9D28, sub_1005D439C);
LABEL_3:
  v60 = (void (*)(char *, uint64_t))type metadata accessor for Logger(0);
  sub_10001A9E8((uint64_t)v60, (uint64_t)qword_1011B71E0);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v20 = v65;
  v21 = v19(v11, a1, v65);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  v24 = os_log_type_enabled(v22, v23);
  v63 = a1;
  if (v24)
  {
    v25 = swift_slowAlloc(22, -1);
    v59 = v19;
    v26 = v25;
    v27 = swift_slowAlloc(32, -1);
    v66[0] = v27;
    *(_DWORD *)v26 = 141558275;
    v67 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v26 + 4, v26 + 12);
    *(_WORD *)(v26 + 12) = 2081;
    v28 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v29 = dispatch thunk of CustomStringConvertible.description.getter(v65, v28);
    v67 = sub_100016940(v29, v30, v66);
    v20 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v26 + 14, v26 + 22);
    swift_bridgeObjectRelease();
    v31 = *(void (**)(char *, uint64_t))(v4 + 8);
    v31(v11, v20);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Calling stop sound on device %{private,mask.hash}s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    v32 = v27;
    a1 = v63;
    swift_slowDealloc(v32, -1, -1);
    v33 = v26;
    v19 = v59;
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {
    v31 = *(void (**)(char *, uint64_t))(v4 + 8);
    v31(v11, v20);
  }

  v34 = sub_10001A9A8(&qword_101100B40);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  v35 = PassthroughSubject.init()();
  v19(v9, a1, v20);
  v36 = (uint64_t *)(v64 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_stopSoundSubjects);
  swift_beginAccess(v64 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_stopSoundSubjects, v66, 33, 0);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v36);
  v67 = *v36;
  *v36 = 0x8000000000000000;
  sub_10010D7B8(v35, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *v36 = v67;
  swift_bridgeObjectRelease();
  v31(v9, v20);
  swift_endAccess(v66);
  v38 = sub_1005DF7B0(a1);
  My = type metadata accessor for Feature.FindMy(0);
  v66[3] = My;
  v66[4] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v40 = sub_100018F08(v66);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v40, enum case for Feature.FindMy.spPlaySoundAll(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v66);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v66);
  if ((My & 1) == 0 || (v38 & 1) != 0)
  {
    v50 = sub_1005D4664();
    v52 = v51;
    ObjectType = swift_getObjectType(v50);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 64))(a1, ObjectType, v52);
    swift_unknownObjectRelease(v50);
    v66[0] = v35;
    v54 = sub_1000193A4(&qword_101100B48, &qword_101100B40, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v55 = Publisher.eraseToAnyPublisher()(v34, v54);
  }
  else
  {
    if (qword_1010E9D38 != -1)
      swift_once(&qword_1010E9D38, sub_1005D45D4);
    sub_10001A9E8((uint64_t)v60, (uint64_t)qword_101100948);
    v41 = v61;
    v42 = v19(v61, a1, v20);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.default.getter(v43);
    if (os_log_type_enabled(v43, v44))
    {
      v45 = swift_slowAlloc(32, -1);
      v65 = swift_slowAlloc(64, -1);
      v66[0] = v65;
      *(_DWORD *)v45 = 136315651;
      v67 = sub_100016940(0xD00000000000001CLL, 0x8000000100EDCA60, v66);
      v60 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v45 + 4, v45 + 12);
      *(_WORD *)(v45 + 12) = 2160;
      v67 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v45 + 14, v45 + 22);
      *(_WORD *)(v45 + 22) = 2081;
      v46 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v20, v46);
      v67 = sub_100016940(v47, v48, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v45 + 24, v45 + 32);
      swift_bridgeObjectRelease();
      v60(v41, v20);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%s SPPlaySoundAll: %{private,mask.hash}s does NOT support ranging", (uint8_t *)v45, 0x20u);
      v49 = v65;
      swift_arrayDestroy(v65, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v45, -1, -1);
    }
    else
    {
      v31(v41, v20);
    }

    v55 = sub_1005F511C(v63, v62, v35);
  }
  v56 = v55;
  swift_release();
  return v56;
}

void sub_1005EA2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint8_t *v19;
  uint64_t Strong;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[3];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 16;
  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v9 = type metadata accessor for Logger(0);
  sub_10001A9E8(v9, (uint64_t)qword_1011B71E0);
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v23 = a1;
    v13 = swift_slowAlloc(12, -1);
    v22 = a2 + 16;
    v14 = (uint8_t *)v13;
    v15 = swift_slowAlloc(32, -1);
    v25[0] = v15;
    *(_DWORD *)v14 = 136315138;
    v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v4, v16);
    v24 = sub_100016940(v17, v18, v25);
    a1 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Timed out stop sound waiting for CL. Beacon %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    v19 = v14;
    v8 = v22;
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  swift_beginAccess(v8, v25, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v8);
  if (Strong)
  {
    v21 = (void *)Strong;
    sub_1005E2F5C(a1, 0, 0);

  }
}

uint64_t sub_1005EA534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  sub_10000F9B8(a1, a2, &qword_101100AA8);
  v3 = sub_10001A9A8(&qword_101100B08);
  return swift_storeEnumTagMultiPayload(a2, v3, 0);
}

void sub_1005EA578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v15 = type metadata accessor for Logger(0);
  sub_10001A9E8(v15, (uint64_t)qword_1011B71E0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a4, v11);
  v16 = swift_retain_n(a5, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(18, -1);
    v31 = a7;
    v20 = v19;
    v21 = swift_slowAlloc(32, -1);
    v35 = v21;
    *(_DWORD *)v20 = 136315394;
    v30 = a6;
    v22 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v11, v22);
    v33 = sub_100016940(v23, v24, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    *(_WORD *)(v20 + 12) = 1024;
    swift_beginAccess(a5 + 16, &v33, 0, 0);
    v25 = *(unsigned __int8 *)(a5 + 16);
    swift_release();
    v32 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v20 + 14, v20 + 18);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Stop sound for group %s completion. Success? %{BOOL}d", (uint8_t *)v20, 0x12u);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    v26 = v20;
    a7 = v31;
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);

    swift_release();
  }
  sub_10036AC6C();
  v28 = v27;
  v29 = a7;
  sub_1005F9248(v28, (uint64_t)v29, 1);
  swift_bridgeObjectRelease();

}

void sub_1005EA840(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, void *a5, double a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  _BYTE *v91;
  char *v92;
  uint64_t v93;
  id v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v93 = a4;
  v94 = a5;
  v91 = a3;
  v96 = a2;
  v8 = type metadata accessor for UUID(0);
  v97 = *(_QWORD *)(v8 - 8);
  v98 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v90 - v13;
  v15 = __chkstk_darwin(v12);
  v92 = (char *)&v90 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v90 - v18;
  __chkstk_darwin(v17);
  v95 = (char *)&v90 - v20;
  v21 = sub_10001A9A8(&qword_101100AA8);
  v22 = __chkstk_darwin(v21);
  v24 = (unint64_t *)((char *)&v90 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22);
  v26 = (char *)&v90 - v25;
  v27 = sub_10001A9A8(&qword_101100B08);
  __chkstk_darwin(v27);
  v29 = (unint64_t *)((char *)&v90 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v29, &qword_101100B08);
  if (swift_getEnumCaseMultiPayload(v29, v27) == 1)
  {
    v30 = *v29;
    if (*v29 == 3)
    {
      if (qword_1010E9D28 != -1)
        swift_once(&qword_1010E9D28, sub_1005D439C);
      v31 = type metadata accessor for Logger(0);
      v32 = sub_10001A9E8(v31, (uint64_t)qword_1011B71E0);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.error.getter(v33);
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v35 = 134217984;
        v99 = a6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v35 + 4, v35 + 12);
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Stop sound timed out after %f. CL should have completed by now", v35, 0xCu);
        swift_slowDealloc(v35, -1, -1);
      }

    }
    else
    {
      if (qword_1010E9D28 != -1)
        swift_once(&qword_1010E9D28, sub_1005D439C);
      v52 = type metadata accessor for Logger(0);
      sub_10001A9E8(v52, (uint64_t)qword_1011B71E0);
      v53 = v97;
      v54 = v98;
      (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v11, v96, v98);
      sub_1005FAC50(v30);
      v55 = sub_1005FAC50(v30);
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.error.getter(v56);
      if (os_log_type_enabled(v56, v57))
      {
        v58 = swift_slowAlloc(22, -1);
        v59 = swift_slowAlloc(64, -1);
        v99 = *(double *)&v59;
        *(_DWORD *)v58 = 136315394;
        v60 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v61 = dispatch thunk of CustomStringConvertible.description.getter(v54, v60);
        v101 = sub_100016940(v61, v62, (uint64_t *)&v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v58 + 4, v58 + 12);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v53 + 8))(v11, v54);
        *(_WORD *)(v58 + 12) = 2080;
        v101 = v30;
        sub_1005FAC50(v30);
        v63 = String.init<A>(describing:)(&v101, &type metadata for SoundPlaybackManager.SoundPlaybackManagerError);
        v101 = sub_100016940(v63, v64, (uint64_t *)&v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v58 + 14, v58 + 22);
        swift_bridgeObjectRelease();
        sub_1005FAC60(v30);
        sub_1005FAC60(v30);
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Stop sound failed for %s with unexpected error %s", (uint8_t *)v58, 0x16u);
        swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v59, -1, -1);
        swift_slowDealloc(v58, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v53 + 8))(v11, v54);
        sub_1005FAC60(v30);
        sub_1005FAC60(v30);
      }

      sub_1005FAC60(v30);
    }
  }
  else
  {
    sub_1005FAC70((uint64_t)v29, (uint64_t)v26);
    sub_10000F9B8((uint64_t)v26, (uint64_t)v24, &qword_101100AA8);
    v36 = (uint64_t)v26;
    if (swift_getEnumCaseMultiPayload(v24, v21) == 1)
    {
      v37 = *v24;
      v38 = v97;
      if (qword_1010E9D28 != -1)
        swift_once(&qword_1010E9D28, sub_1005D439C);
      v39 = type metadata accessor for Logger(0);
      sub_10001A9E8(v39, (uint64_t)qword_1011B71E0);
      v40 = v98;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v14, v96, v98);
      sub_1005FAC50(v37);
      v41 = sub_1005FAC50(v37);
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.error.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        v44 = swift_slowAlloc(22, -1);
        v96 = v36;
        v45 = v44;
        v46 = swift_slowAlloc(64, -1);
        v99 = *(double *)&v46;
        *(_DWORD *)v45 = 136315394;
        v47 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v48 = dispatch thunk of CustomStringConvertible.description.getter(v40, v47);
        v101 = sub_100016940(v48, v49, (uint64_t *)&v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v45 + 4, v45 + 12);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v40);
        *(_WORD *)(v45 + 12) = 2080;
        v101 = v37;
        sub_1005FAC50(v37);
        v50 = String.init<A>(describing:)(&v101, &type metadata for SoundPlaybackManager.SoundPlaybackManagerError);
        v101 = sub_100016940(v50, v51, (uint64_t *)&v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v45 + 14, v45 + 22);
        swift_bridgeObjectRelease();
        sub_1005FAC60(v37);
        sub_1005FAC60(v37);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Stop sound failed for %s with error %s", (uint8_t *)v45, 0x16u);
        swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v45, -1, -1);

        sub_1005FAC60(v37);
        sub_100004048(v96, &qword_101100AA8);
      }
      else
      {

        sub_1005FAC60(v37);
        sub_1005FAC60(v37);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v40);
        sub_1005FAC60(v37);
        sub_100004048(v36, &qword_101100AA8);
      }
    }
    else
    {
      v65 = v97;
      v66 = v95;
      v67 = v24;
      v68 = v98;
      (*(void (**)(char *, unint64_t *, uint64_t))(v97 + 32))(v95, v67, v98);
      if (qword_1010E9D28 != -1)
        swift_once(&qword_1010E9D28, sub_1005D439C);
      v91 += 16;
      v69 = type metadata accessor for Logger(0);
      sub_10001A9E8(v69, (uint64_t)qword_1011B71E0);
      v70 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
      v70(v19, v66, v68);
      v71 = v92;
      v72 = ((uint64_t (*)(char *, uint64_t, uint64_t))v70)(v92, v96, v68);
      v73 = Logger.logObject.getter(v72);
      v74 = static os_log_type_t.default.getter(v73);
      if (os_log_type_enabled(v73, v74))
      {
        v75 = swift_slowAlloc(22, -1);
        v90 = swift_slowAlloc(64, -1);
        v99 = *(double *)&v90;
        *(_DWORD *)v75 = 136315394;
        v76 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v77 = dispatch thunk of CustomStringConvertible.description.getter(v98, v76);
        v101 = sub_100016940(v77, v78, (uint64_t *)&v99);
        v96 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v75 + 4, v75 + 12);
        swift_bridgeObjectRelease();
        v79 = *(void (**)(char *, uint64_t))(v65 + 8);
        v79(v19, v98);
        *(_WORD *)(v75 + 12) = 2080;
        v80 = v76;
        v68 = v98;
        v81 = dispatch thunk of CustomStringConvertible.description.getter(v98, v80);
        v101 = sub_100016940(v81, v82, (uint64_t *)&v99);
        v36 = v96;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v75 + 14, v75 + 22);
        swift_bridgeObjectRelease();
        v79(v71, v68);
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "Stop sound succeeded for %s. Group: %s", (uint8_t *)v75, 0x16u);
        v83 = v90;
        swift_arrayDestroy(v90, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v83, -1, -1);
        v84 = v75;
        v66 = v95;
        swift_slowDealloc(v84, -1, -1);
      }
      else
      {
        v79 = *(void (**)(char *, uint64_t))(v65 + 8);
        v79(v19, v68);
        v79(v71, v68);
      }

      v85 = v91;
      swift_beginAccess(v91, &v99, 1, 0);
      *v85 = 1;
      sub_10036AC6C();
      __chkstk_darwin(v86);
      *(&v90 - 2) = (uint64_t)v66;
      v88 = sub_100854334((uint64_t)sub_1005FACB8, (uint64_t)(&v90 - 4), v87);
      v89 = v94;
      sub_1005F94F8(v88, (uint64_t)v89);
      swift_release();

      sub_100004048(v36, &qword_101100AA8);
      v79(v66, v68);
    }
  }
}

BOOL sub_1005EB284(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for UUID(0);
  v5 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, v5) & 1) == 0;
}

uint64_t sub_1005EB2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  char *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int v34;
  NSObject *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t, uint64_t);
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  _QWORD *v81;
  void **aBlock;
  uint64_t v83;
  uint64_t (*v84)(uint64_t);
  void *v85;
  uint64_t (*v86)();
  uint64_t v87;

  v69 = a5;
  v68 = a4;
  v66 = a3;
  v65 = a1;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v74 = *(_QWORD *)(v9 - 8);
  v75 = v9;
  __chkstk_darwin(v9);
  v73 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v71 = *(_QWORD *)(v11 - 8);
  v72 = v11;
  __chkstk_darwin(v11);
  v70 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for DispatchQoS.QoSClass(0);
  v64 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v63 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v77 = v16;
  v78 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v17);
  v19 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for BeaconObservation(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = v6;
  if ((sub_1005DF5B4(a2) & 1) != 0)
    v24 = 23;
  else
    v24 = 24;
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v25 = qword_1011B7160;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v79 = v14;
  v76 = v26;
  v26(v23, a2, v14);
  static Date.trustedNow.getter((uint64_t)&v23[*(int *)(v20 + 20)]);
  v23[*(int *)(v20 + 24)] = v24;
  v27 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
  v28 = *(unsigned __int8 *)(v21 + 80);
  v29 = (v28 + 32) & ~v28;
  v30 = swift_allocObject(v27, v29 + *(_QWORD *)(v21 + 72), v28 | 7);
  *(_OWORD *)(v30 + 16) = xmmword_100E22B00;
  sub_10005972C((uint64_t)v23, v30 + v29, type metadata accessor for BeaconObservation);
  v31 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v31);
  *(&v62 - 4) = v25;
  *(&v62 - 3) = v30;
  *(&v62 - 2) = 0;
  *(&v62 - 1) = 0;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, &v62 - 6, &type metadata for () + 1);
  swift_bridgeObjectRelease();
  sub_1000126B0((uint64_t)v23, type metadata accessor for BeaconObservation);
  v32 = v80;
  sub_10081C0CC(a2, (uint64_t)v19);
  v33 = type metadata accessor for WildModeAssociationRecord(0);
  v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v19, 1, v33);
  sub_100004048((uint64_t)v19, &qword_101102FB0);
  if (v34 == 1)
    sub_1007EEF64(10);
  else
    sub_1007F4EB8();
  v35 = *(NSObject **)&v32[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
  v37 = v78;
  v36 = v79;
  v76(v78, a2, v79);
  v38 = *(unsigned __int8 *)(v15 + 80);
  v39 = (v38 + 24) & ~v38;
  v40 = swift_allocObject(&unk_101082628, v39 + v77, v38 | 7);
  *(_QWORD *)(v40 + 16) = v32;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v40 + v39, v37, v36);
  v41 = swift_allocObject(&unk_101082650, 32, 7);
  *(_QWORD *)(v41 + 16) = sub_1005FC8F4;
  *(_QWORD *)(v41 + 24) = v40;
  v86 = sub_10005CBA4;
  v87 = v41;
  aBlock = _NSConcreteStackBlock;
  v83 = 1107296256;
  v84 = sub_10001D8B8;
  v85 = &unk_101082668;
  v42 = _Block_copy(&aBlock);
  v43 = v32;
  swift_retain();
  swift_release();
  dispatch_sync(v35, v42);
  _Block_release(v42);
  LOBYTE(v35) = swift_isEscapingClosureAtFileLocation(v41, "", 129, 784, 27, 1);
  result = swift_release();
  if ((v35 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v45 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v45);
    *(&v62 - 6) = (uint64_t)v43;
    *(&v62 - 5) = a2;
    *((double *)&v62 - 4) = a6;
    v46 = v66;
    *(&v62 - 3) = v65;
    *(&v62 - 2) = v46;
    static Transaction.named<A>(_:with:)("SoundPlaybackManager.queuePlaySoundSingle", 41, 2, sub_1005FC934, &v62 - 8);
    sub_10001F6FC();
    v47 = v64;
    v48 = v63;
    v49 = v67;
    (*(void (**)(char *, _QWORD, uint64_t))(v64 + 104))(v63, enum case for DispatchQoS.QoSClass.default(_:), v67);
    v50 = (void *)static OS_dispatch_queue.global(qos:)(v48);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
    v51 = swift_allocObject(&unk_1010826A0, 32, 7);
    v52 = v69;
    *(_QWORD *)(v51 + 16) = v68;
    *(_QWORD *)(v51 + 24) = v52;
    v86 = sub_1002E3C58;
    v87 = v51;
    aBlock = _NSConcreteStackBlock;
    v83 = 1107296256;
    v84 = sub_100016FB8;
    v85 = &unk_1010826B8;
    v53 = _Block_copy(&aBlock);
    v54 = swift_retain();
    v55 = v70;
    static DispatchQoS.unspecified.getter(v54);
    v81 = _swiftEmptyArrayStorage;
    v56 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v57 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v58 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v59 = v73;
    v60 = v57;
    v61 = v75;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v81, v60, v58, v75, v56);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v55, v59, v53);
    _Block_release(v53);

    (*(void (**)(char *, uint64_t))(v74 + 8))(v59, v61);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v55, v72);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1005EB9D0(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  char *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v42;
  char *v43;
  char *v44;
  void *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD aBlock[7];

  v46 = a4;
  v48 = a5;
  v49 = a6;
  v52 = type metadata accessor for DispatchWorkItemFlags(0);
  v55 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v51 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v53 = *(_QWORD *)(v10 - 8);
  v54 = v10;
  __chkstk_darwin(v10);
  v47 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = __chkstk_darwin(v12);
  v44 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v43 = (char *)&v42 - v16;
  v50 = *(_QWORD *)(v6 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  v17 = *(void (**)(void))(v13 + 16);
  v17();
  ((void (*)(char *, uint64_t, uint64_t))v17)((char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  v18 = *(unsigned __int8 *)(v13 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = (v14 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v18 + 16 + v23) & ~v18;
  v25 = swift_allocObject(&unk_1010824C0, v24 + v14, v18 | 7);
  v26 = v25 + v19;
  v27 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
  v27(v26, v43, v12);
  *(_QWORD *)(v25 + v20) = v46;
  *(double *)(v25 + v21) = a2;
  v28 = v44;
  v29 = v45;
  *(_QWORD *)(v25 + v22) = v45;
  v30 = (_QWORD *)(v25 + v23);
  v31 = v49;
  *v30 = v48;
  v30[1] = v31;
  v27(v25 + v24, v28, v12);
  aBlock[4] = sub_1005FC6A4;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010824D8;
  v32 = _Block_copy(aBlock);
  v33 = v29;
  v34 = swift_retain();
  v35 = v47;
  static DispatchQoS.unspecified.getter(v34);
  v56 = _swiftEmptyArrayStorage;
  v36 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v37 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v38 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v40 = v51;
  v39 = v52;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v37, v38, v52, v36);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v35, v40, v32);
  _Block_release(v32);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v40, v39);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v35, v54);
  return swift_release();
}

void sub_1005EBCF0(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  type metadata accessor for CommandError(0);
  v6 = v5;
  v10 = a3;
  v7 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v8 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
  _BridgedStoredNSError.init(_:userInfo:)(&v11, &v10, v7, v6, v8);
  v9 = v11;
  a1(v11);

}

uint64_t sub_1005EBD98(uint64_t a1, void **a2, void **a3, uint64_t a4, uint64_t a5, void **a6, double a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, void **, uint64_t);
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void **v46;
  unint64_t v47;
  uint64_t v48;
  void **v49;
  _QWORD *v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, void **, uint64_t);
  char *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void **v110;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  void **v138;
  void (*v139)(char *, uint64_t);
  uint64_t v140;
  char *v141;
  uint64_t v142;
  _QWORD *v143;
  char *v144;
  _QWORD *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(char *, void **, uint64_t);
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  void **v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  void **v166;
  uint64_t v167;
  void **v168;
  void **v169;
  _QWORD *v170;
  void **aBlock;
  uint64_t v172;
  uint64_t (*v173)(uint64_t);
  void *v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  char v178[8];

  v168 = a6;
  v158 = a5;
  v152 = a4;
  v11 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v11);
  v151 = (uint64_t)&v138 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = type metadata accessor for BeaconObservation(0);
  v149 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v150 = (char *)&v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = type metadata accessor for DispatchWorkItemFlags(0);
  v161 = *(_QWORD *)(v165 - 8);
  __chkstk_darwin(v165);
  v164 = (char *)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = type metadata accessor for DispatchQoS(0);
  v160 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153);
  v159 = (char *)&v138 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = type metadata accessor for DispatchQoS.QoSClass(0);
  v156 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157);
  v155 = (char *)&v138 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010EF1D8);
  v18 = __chkstk_darwin(v17);
  v146 = (char *)&v138 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v138 - v20;
  v167 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  v163 = *(_QWORD *)(v167 - 8);
  v22 = __chkstk_darwin(v167);
  v143 = (void ***)((char *)&v138 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22);
  v142 = (uint64_t)&v138 - v24;
  v25 = type metadata accessor for UUID(0);
  v26 = *(_QWORD **)(v25 - 8);
  v27 = v26[8];
  v28 = __chkstk_darwin(v25);
  v144 = (char *)&v138 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v28);
  v147 = (char *)&v138 - v30;
  v31 = __chkstk_darwin(v29);
  v141 = (char *)&v138 - v32;
  __chkstk_darwin(v31);
  v34 = (char *)&v138 - v33;
  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v35 = type metadata accessor for Logger(0);
  v36 = sub_10001A9E8(v35, (uint64_t)qword_1011B71E0);
  v37 = (void (*)(char *, void **, uint64_t))v26[2];
  v169 = (void **)a1;
  v154 = v37;
  v38 = ((uint64_t (*)(char *, uint64_t, uint64_t))v37)(v34, a1, v25);
  v140 = v36;
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter(v39);
  v41 = os_log_type_enabled(v39, v40);
  v162 = a2;
  v166 = a3;
  v145 = v26;
  if (v41)
  {
    v42 = swift_slowAlloc(32, -1);
    v138 = (void **)swift_slowAlloc(64, -1);
    aBlock = v138;
    *(_DWORD *)v42 = 136446722;
    v43 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v44 = dispatch thunk of CustomStringConvertible.description.getter(v25, v43);
    v177 = sub_100016940(v44, v45, (uint64_t *)&aBlock);
    v46 = v162;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease();
    v139 = (void (*)(char *, uint64_t))v26[1];
    v139(v34, v25);
    *(_WORD *)(v42 + 12) = 2082;
    v47 = 0xE800000000000000;
    v48 = 0x746C75616665642ELL;
    switch((unint64_t)v46)
    {
      case 0uLL:
        break;
      case 1uLL:
        v48 = 0x676E69676E61722ELL;
        break;
      case 2uLL:
        v47 = 0xE900000000000067;
        goto LABEL_12;
      case 3uLL:
        v47 = 0x8000000100ED1070;
        v48 = 0xD000000000000010;
        break;
      case 4uLL:
        v47 = 0xEF64656D7269666ELL;
        v48 = 0x6F4365756575712ELL;
        break;
      case 5uLL:
        v47 = 0xEE0074726F685367;
LABEL_12:
        v48 = 0x6E696B636172742ELL;
        break;
      default:
        v47 = 0xE700000000000000;
        v48 = 0x6E776F6E6B6E75;
        break;
    }
    v177 = sub_100016940(v48, v47, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v42 + 14, v42 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 22) = 2048;
    v177 = *(_QWORD *)&a7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v42 + 24, v42 + 32);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "playSoundOneShot %{public}s context %{public}s timeout %f", (uint8_t *)v42, 0x20u);
    v49 = v138;
    swift_arrayDestroy(v138, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v42, -1, -1);

    a3 = v166;
  }
  else
  {
    v139 = (void (*)(char *, uint64_t))v26[1];
    v139(v34, v25);

  }
  v50 = (void **)((char *)a3 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  v51 = swift_beginAccess((char *)a3 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, &v177, 0, 0);
  v52 = *v50;
  v53 = v163;
  if (!*(_QWORD *)(*v50 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v163 + 56))(v21, 1, 1, v167, v51);
LABEL_20:
    v143 = v50;
    sub_100004048((uint64_t)v21, &qword_1010EF1D8);
LABEL_21:
    v58 = swift_allocObject(&unk_101081E08, 24, 7);
    swift_unknownObjectWeakInit(v58 + 16, a3);
    v59 = (uint64_t)v147;
    v60 = v154;
    v154(v147, v169, v25);
    v61 = v144;
    v60(v144, v168, v25);
    v62 = v25;
    v63 = v145;
    v64 = *((unsigned __int8 *)v145 + 80);
    v65 = (v64 + 16) & ~v64;
    v66 = (v27 + v64 + v65) & ~v64;
    v67 = (v27 + v66 + 7) & 0xFFFFFFFFFFFFFFF8;
    v68 = swift_allocObject(&unk_101082510, v67 + 8, v64 | 7);
    v69 = v68 + v65;
    v70 = (void (*)(uint64_t, uint64_t, uint64_t))v63[4];
    v71 = v62;
    v70(v69, v59, v62);
    v70(v68 + v66, (uint64_t)v61, v62);
    *(_QWORD *)(v68 + v67) = v58;
    v72 = (void (*)(uint64_t, uint64_t, uint64_t))v60;
    v175 = sub_1005FC71C;
    v176 = v68;
    aBlock = _NSConcreteStackBlock;
    v172 = 1107296256;
    v173 = sub_100016FB8;
    v174 = &unk_101082528;
    v73 = _Block_copy(&aBlock);
    v170 = _swiftEmptyArrayStorage;
    v74 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    swift_retain();
    v75 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v76 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v77 = v164;
    v144 = (char *)v75;
    v145 = (_QWORD *)v74;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v170, v75, v76, v165, v74);
    v78 = type metadata accessor for DispatchWorkItem(0);
    swift_allocObject(v78, *(unsigned int *)(v78 + 48), *(unsigned __int16 *)(v78 + 52));
    v79 = DispatchWorkItem.init(flags:block:)(v77, v73);
    swift_release();
    swift_release();
    v72(v59, (uint64_t)v169, v71);
    v80 = (uint64_t)v146;
    v81 = (uint64_t)v169;
    v72((uint64_t)v146, (uint64_t)v168, v71);
    v82 = (int *)v167;
    v72(v80 + *(int *)(v167 + 20), v81, v71);
    v83 = v80 + v82[8];
    swift_retain();
    static Date.trustedNow.getter(v83);
    *(_BYTE *)(v80 + v82[6]) = 1;
    *(_QWORD *)(v80 + v82[7]) = v79;
    *(_QWORD *)(v80 + v82[9]) = 0;
    *(_BYTE *)(v80 + v82[10]) = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v163 + 56))(v80, 0, 1, v82);
    swift_beginAccess(v143, &aBlock, 33, 0);
    sub_1000FF1EC(v80, v59);
    swift_endAccess(&aBlock);
    if (qword_1010E9CF0 != -1)
      swift_once(&qword_1010E9CF0, sub_10058CADC);
    v84 = qword_1011B7160;
    v85 = (uint64_t)v150;
    v72((uint64_t)v150, v81, v71);
    v86 = v148;
    static Date.trustedNow.getter(v85 + *(int *)(v148 + 20));
    *(_BYTE *)(v85 + *(int *)(v86 + 24)) = 24;
    v87 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
    v88 = *(unsigned __int8 *)(v149 + 80);
    v89 = (v88 + 32) & ~v88;
    v90 = swift_allocObject(v87, v89 + *(_QWORD *)(v149 + 72), v88 | 7);
    *(_OWORD *)(v90 + 16) = xmmword_100E22B00;
    sub_10005972C(v85, v90 + v89, type metadata accessor for BeaconObservation);
    v91 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v91);
    *(&v138 - 4) = (void **)v84;
    *(&v138 - 3) = (void **)v90;
    *(&v138 - 2) = 0;
    *(&v138 - 1) = 0;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, &v138 - 6, &type metadata for () + 1);
    v167 = 0;
    swift_bridgeObjectRelease();
    sub_1000126B0(v85, type metadata accessor for BeaconObservation);
    v92 = v151;
    sub_10081C0CC(v81, v151);
    v93 = type metadata accessor for WildModeAssociationRecord(0);
    LODWORD(v90) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 48))(v92, 1, v93);
    sub_100004048(v92, &qword_101102FB0);
    if ((_DWORD)v90 == 1)
      sub_1007EEF64(10);
    else
      sub_1007F4EB8();
    v94 = v153;
    v95 = v152;
    sub_10001F6FC();
    v96 = v156;
    v97 = v155;
    v98 = v157;
    (*(void (**)(char *, _QWORD, uint64_t))(v156 + 104))(v155, enum case for DispatchQoS.QoSClass.default(_:), v157);
    v99 = (void *)static OS_dispatch_queue.global(qos:)(v97);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v97, v98);
    v100 = swift_allocObject(&unk_101082560, 32, 7);
    v101 = v158;
    *(_QWORD *)(v100 + 16) = v95;
    *(_QWORD *)(v100 + 24) = v101;
    v175 = sub_1002E3C58;
    v176 = v100;
    aBlock = _NSConcreteStackBlock;
    v172 = 1107296256;
    v173 = sub_100016FB8;
    v174 = &unk_101082578;
    v102 = _Block_copy(&aBlock);
    v103 = swift_retain();
    v104 = v159;
    static DispatchQoS.unspecified.getter(v103);
    v170 = _swiftEmptyArrayStorage;
    v105 = v164;
    v106 = v76;
    v107 = v165;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v170, v144, v106, v165, v145);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v104, v105, v102);
    _Block_release(v102);

    (*(void (**)(char *, uint64_t))(v161 + 8))(v105, v107);
    (*(void (**)(char *, uint64_t))(v160 + 8))(v104, v94);
    swift_release();
    v108 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v108);
    v109 = (uint64_t)v169;
    *(&v138 - 6) = v166;
    *(&v138 - 5) = (void **)v109;
    v110 = v162;
    *(&v138 - 4) = v168;
    *(&v138 - 3) = v110;
    *((double *)&v138 - 2) = a7;
    static Transaction.named<A>(_:with:)("SoundPlaybackManager.playSoundOneShot", 37, 2, sub_1005FC730, &v138 - 8);
    return swift_release();
  }
  swift_bridgeObjectRetain(*v50);
  v54 = sub_100003FB0((uint64_t)v169);
  if ((v55 & 1) != 0)
  {
    sub_10005972C(*(_QWORD *)(v52 + 56) + *(_QWORD *)(v53 + 72) * v54, (uint64_t)v21, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v56 = 0;
  }
  else
  {
    v56 = 1;
  }
  v57 = v167;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56))(v21, v56, 1, v167);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v21, 1, v57) == 1)
    goto LABEL_20;
  v112 = v142;
  sub_1000126EC((uint64_t)v21, v142, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  if (qword_1010E9D30 != -1)
    swift_once(&qword_1010E9D30, sub_1005D4420);
  if (sub_1001C0B1C(*(unsigned __int8 *)(v112 + *(int *)(v167 + 24)), qword_1011B71F8))
  {
    v143 = v50;
    sub_1000126B0(v112, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    goto LABEL_21;
  }
  v113 = v141;
  v154(v141, v169, v25);
  v114 = (uint64_t)v143;
  v115 = sub_10005972C(v112, (uint64_t)v143, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v116 = Logger.logObject.getter(v115);
  v117 = static os_log_type_t.error.getter(v116);
  if (os_log_type_enabled(v116, v117))
  {
    v118 = swift_slowAlloc(22, -1);
    aBlock = (void **)swift_slowAlloc(64, -1);
    *(_DWORD *)v118 = 136315394;
    v119 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v120 = dispatch thunk of CustomStringConvertible.description.getter(v25, v119);
    v170 = (_QWORD *)sub_100016940(v120, v121, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &aBlock, v118 + 4, v118 + 12);
    swift_bridgeObjectRelease();
    v139(v113, v25);
    *(_WORD *)(v118 + 12) = 2080;
    __asm { BR              X10 }
  }
  v139(v113, v25);
  sub_1000126B0(v114, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);

  v122 = v153;
  sub_10001F6FC();
  v123 = v156;
  v124 = v155;
  v125 = v157;
  (*(void (**)(char *, _QWORD, uint64_t))(v156 + 104))(v155, enum case for DispatchQoS.QoSClass.default(_:), v157);
  v126 = (void *)static OS_dispatch_queue.global(qos:)(v124);
  (*(void (**)(char *, uint64_t))(v123 + 8))(v124, v125);
  v127 = swift_allocObject(&unk_1010825B0, 32, 7);
  v128 = v158;
  *(_QWORD *)(v127 + 16) = v152;
  *(_QWORD *)(v127 + 24) = v128;
  v175 = sub_1005FC750;
  v176 = v127;
  aBlock = _NSConcreteStackBlock;
  v172 = 1107296256;
  v173 = sub_100016FB8;
  v174 = &unk_1010825C8;
  v129 = _Block_copy(&aBlock);
  v130 = swift_retain();
  v131 = v159;
  static DispatchQoS.unspecified.getter(v130);
  v170 = _swiftEmptyArrayStorage;
  v132 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v133 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v134 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v135 = v164;
  v136 = v133;
  v137 = v165;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v170, v136, v134, v165, v132);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v131, v135, v129);
  _Block_release(v129);

  (*(void (**)(char *, uint64_t))(v161 + 8))(v135, v137);
  (*(void (**)(char *, uint64_t))(v160 + 8))(v131, v122);
  sub_1000126B0(v142, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  return swift_release();
}

void sub_1005ED024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), const char *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  void (*v17)(_BYTE *, uint64_t, uint64_t);
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(_BYTE *, uint64_t);
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(_BYTE *, uint64_t);
  uint64_t v34;
  uint64_t Strong;
  void *v36;
  _BYTE v37[12];
  int v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[3];

  v41 = a5;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v37[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v15 = &v37[-v14];
  v42 = a3 + 16;
  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v16 = type metadata accessor for Logger(0);
  sub_10001A9E8(v16, (uint64_t)qword_1011B71E0);
  v17 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16);
  v17(v15, a1, v9);
  v18 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v17)(v13, a2, v9);
  v19 = Logger.logObject.getter(v18);
  v20 = a4();
  v21 = v20;
  if (os_log_type_enabled(v19, v20))
  {
    v22 = swift_slowAlloc(32, -1);
    v40 = a1;
    v23 = v22;
    v24 = swift_slowAlloc(64, -1);
    v39 = v24;
    *(_DWORD *)v23 = 141558531;
    v43 = 1752392040;
    v44[0] = v24;
    v38 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v23 + 4, v23 + 12);
    *(_WORD *)(v23 + 12) = 2081;
    v25 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v9, v25);
    v43 = sub_100016940(v26, v27, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease();
    v28 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
    v28(v15, v9);
    *(_WORD *)(v23 + 22) = 2082;
    v29 = dispatch thunk of CustomStringConvertible.description.getter(v9, v25);
    v43 = sub_100016940(v29, v30, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v23 + 24, v23 + 32);
    swift_bridgeObjectRelease();
    v28(v13, v9);
    _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v38, v41, (uint8_t *)v23, 0x20u);
    v31 = v39;
    swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    v32 = v23;
    a1 = v40;
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    v33 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
    v33(v15, v9);
    v33(v13, v9);
  }

  v34 = v42;
  swift_beginAccess(v42, v44, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v34);
  if (Strong)
  {
    v36 = (void *)Strong;
    sub_1005E2F5C(a1, 0, 0);

  }
}

uint64_t sub_1005ED340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  id v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v67;
  unint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t, uint64_t);
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  id v93;
  id v94[2];

  v83 = a1;
  v84 = a5;
  v81 = a3;
  v11 = type metadata accessor for UUID(0);
  v89 = *(_QWORD *)(v11 - 8);
  v90 = v11;
  v91 = *(_QWORD *)(v89 + 64);
  __chkstk_darwin(v11);
  v88 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v78 = *(_QWORD *)(v13 - 8);
  v79 = v13;
  __chkstk_darwin(v13);
  v71 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v15);
  v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_10001A9A8(&qword_101100B50);
  v74 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8(&qword_101100B58);
  v21 = *(_QWORD *)(v20 - 8);
  v75 = v20;
  v76 = v21;
  __chkstk_darwin(v20);
  v70 = (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_10001A9A8(&qword_101100B60);
  v82 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v73 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8(&qword_101100B68);
  v25 = *(_QWORD *)(v24 - 8);
  v86 = v24;
  v87 = v25;
  v26 = __chkstk_darwin(v24);
  v92 = (char *)&v67 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = Transaction.subscriptionCleaner.getter(v26);
  v77 = a2;
  v28 = (void *)sub_1005E2654(a3, a4, a5);
  v93 = *(id *)(a2 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  v29 = v93;
  v94[0] = v28;
  v30 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
  v69(v17, 1, 1, v30);
  v31 = v29;
  v32 = sub_10001A9A8(&qword_101100AA0);
  v33 = sub_10001F6FC();
  v68 = v33;
  v34 = sub_1000193A4(&qword_101100AB0, &qword_101100AA0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v35 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v93, v17, v32, v33, v34, v35);
  sub_100004048((uint64_t)v17, &qword_1010EECC8);

  v36 = swift_release();
  v37 = v71;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v36, a6);
  v94[0] = v31;
  v69(v17, 1, 1, v30);
  v38 = sub_1000193A4(&qword_101100B70, &qword_101100B50, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v39 = v31;
  v40 = v70;
  v41 = v72;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v37, v94, v17, sub_1005E396C, 0, v72, v68, v38, v35);
  sub_100004048((uint64_t)v17, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v78 + 8))(v37, v79);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v19, v41);
  v42 = sub_10001A9A8(&qword_101100AA8);
  v43 = sub_1000193A4(&qword_101100B78, &qword_101100B58, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  v44 = v73;
  v45 = v75;
  Publisher.map<A>(_:)(sub_1005E395C, 0, v75, v42, v43);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v40, v45);
  v46 = sub_10001A9A8(&qword_101100AB8);
  v47 = sub_1000193A4(&qword_101100B80, &qword_101100B60, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v48 = sub_1000193A4(&qword_101100AC8, &qword_101100AB8, (const char *)&protocol conformance descriptor for Just<A>);
  v49 = v80;
  Publisher.catch<A>(_:)(sub_1005E3960, 0, v80, v46, v47, v48);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v44, v49);
  v50 = swift_allocObject(&unk_101081E08, 24, 7);
  swift_unknownObjectWeakInit(v50 + 16, v77);
  v52 = v88;
  v51 = v89;
  v53 = v90;
  (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v88, v81, v90);
  v54 = *(unsigned __int8 *)(v51 + 80);
  v55 = v51;
  v56 = (v54 + 32) & ~v54;
  v57 = (v91 + v56 + 7) & 0xFFFFFFFFFFFFFFF8;
  v58 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
  v59 = (v58 + 15) & 0xFFFFFFFFFFFFFFF8;
  v60 = swift_allocObject(&unk_101082600, v59 + 8, v54 | 7);
  *(_QWORD *)(v60 + 16) = v50;
  v61 = v83;
  *(_QWORD *)(v60 + 24) = v83;
  (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v60 + v56, v52, v53);
  *(double *)(v60 + v57) = a6;
  *(_QWORD *)(v60 + v58) = v84;
  v62 = v85;
  *(_QWORD *)(v60 + v59) = v85;
  v63 = sub_1000193A4(&qword_101100B88, &qword_101100B68, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  swift_unknownObjectRetain(v62);
  v64 = v86;
  v65 = v92;
  Publisher<>.sink(receiveValue:)(sub_1005FC814, v60, v86, v63);
  swift_release();
  (*(void (**)(char *, uint64_t))(v87 + 8))(v65, v64);
  AnyCancellable.store(in:)(v61);
  swift_unknownObjectRelease(v62);
  return swift_release();
}

unint64_t sub_1005ED9B8(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t result;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE v57[24];

  v54 = a6;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v50 - v15;
  v17 = sub_10001A9A8(&qword_101100AA8);
  __chkstk_darwin(v17);
  v19 = (unint64_t *)((char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v57, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a2);
  if (result)
  {
    v21 = (void *)result;
    Transaction.capture()();
    sub_10000F9B8(a1, (uint64_t)v19, &qword_101100AA8);
    if (swift_getEnumCaseMultiPayload(v19, v17) == 1)
    {
      v53 = a5;
      v22 = *v19;
      if (qword_1010E9D28 != -1)
        swift_once(&qword_1010E9D28, sub_1005D439C);
      v23 = type metadata accessor for Logger(0);
      sub_10001A9E8(v23, (uint64_t)qword_1011B71E0);
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v53, v10);
      sub_1005FAC50(v22);
      v24 = sub_1005FAC50(v22);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.error.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = swift_slowAlloc(22, -1);
        v54 = swift_slowAlloc(64, -1);
        v56 = v54;
        *(_DWORD *)v27 = 136315394;
        v28 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v29 = dispatch thunk of CustomStringConvertible.description.getter(v10, v28);
        v55 = sub_100016940(v29, v30, (uint64_t *)&v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v27 + 4, v27 + 12);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
        *(_WORD *)(v27 + 12) = 2080;
        v55 = v22;
        sub_1005FAC50(v22);
        v31 = String.init<A>(describing:)(&v55, &type metadata for SoundPlaybackManager.SoundPlaybackManagerError);
        v55 = sub_100016940(v31, v32, (uint64_t *)&v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v27 + 14, v27 + 22);
        swift_bridgeObjectRelease();
        sub_1005FAC60(v22);
        sub_1005FAC60(v22);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Play sound oneShot failed for %s. Error %s", (uint8_t *)v27, 0x16u);
        v33 = v54;
        swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v27, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
        sub_1005FAC60(v22);
        sub_1005FAC60(v22);
      }

      v45 = sub_1005FA87C();
      v46 = swift_allocError(&type metadata for SoundPlaybackManager.SoundPlaybackManagerError, v45, 0, 0);
      *v47 = v22;
      v48 = swift_allocError(&type metadata for SoundPlaybackManager.SoundPlaybackManagerError, v45, 0, 0);
      *v49 = v46;
      sub_1005FAC50(v22);
      sub_1005E2F5C(v53, 0, v48);

      swift_errorRelease(v48);
      return sub_1005FAC60(v22);
    }
    else
    {
      if (qword_1010E9D28 != -1)
        swift_once(&qword_1010E9D28, sub_1005D439C);
      v34 = type metadata accessor for Logger(0);
      sub_10001A9E8(v34, (uint64_t)qword_1011B71E0);
      v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, a5, v10);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.default.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        v38 = swift_slowAlloc(12, -1);
        v53 = a5;
        v39 = (uint8_t *)v38;
        v52 = swift_slowAlloc(32, -1);
        v56 = v52;
        *(_DWORD *)v39 = 136315138;
        v51 = v39 + 4;
        v40 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v41 = dispatch thunk of CustomStringConvertible.description.getter(v10, v40);
        v55 = sub_100016940(v41, v42, (uint64_t *)&v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v51, v39 + 12);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Play sound oneShot started successfully for %s", v39, 0xCu);
        v43 = v52;
        swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        v44 = v39;
        a5 = v53;
        swift_slowDealloc(v44, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      }

      sub_1005E56F0(a5, v54, a3);
      return sub_100004048((uint64_t)v19, &qword_101100AA8);
    }
  }
  return result;
}

uint64_t sub_1005EDF5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v14[24];

  v4 = sub_10001A9A8(&qword_1010EF1D8);
  __chkstk_darwin(v4);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for UUID(0);
  __chkstk_darwin(v7);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t))(v10 + 16))(v9, a2);
  v11 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v14, 33, 0);
  sub_1000FF1EC((uint64_t)v6, (uint64_t)v9);
  return swift_endAccess(v14);
}

uint64_t sub_1005EE064(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, char *, uint64_t);
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  _QWORD *v52;
  _QWORD aBlock[6];

  v51 = a2;
  v43 = a1;
  v44 = a5;
  v47 = type metadata accessor for DispatchWorkItemFlags(0);
  v50 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v46 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v48 = *(_QWORD *)(v11 - 8);
  v49 = v11;
  __chkstk_darwin(v11);
  v42 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = __chkstk_darwin(v13);
  v41 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v40 - v17;
  v45 = *(_QWORD *)&a2[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v19((char *)&v40 - v17, a3, v13);
  v19((char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a4, v13);
  v20 = *(unsigned __int8 *)(v14 + 80);
  v21 = (v20 + 24) & ~v20;
  v22 = v15 + 7;
  v23 = (v15 + 7 + v21) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v20 + v23 + 8) & ~v20;
  v25 = (v22 + v24) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  v27 = swift_allocObject(&unk_1010826F0, v26 + 8, v20 | 7);
  *(_QWORD *)(v27 + 16) = v51;
  v28 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 32);
  v28(v27 + v21, v18, v13);
  *(double *)(v27 + v23) = a6;
  v28(v27 + v24, v41, v13);
  v29 = v43;
  *(_QWORD *)(v27 + v25) = v44;
  *(_QWORD *)(v27 + v26) = v29;
  aBlock[4] = sub_1005FCA08;
  aBlock[5] = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101082708;
  v30 = _Block_copy(aBlock);
  v31 = v51;
  v32 = swift_retain();
  v33 = v42;
  static DispatchQoS.unspecified.getter(v32);
  v52 = _swiftEmptyArrayStorage;
  v34 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v35 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v36 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v38 = v46;
  v37 = v47;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v35, v36, v47, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v33, v38, v30);
  _Block_release(v30);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v38, v37);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v33, v49);
  return swift_release();
}

uint64_t sub_1005EE380(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  int v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  os_log_t v70;
  void **v71;
  uint64_t v72;
  int *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  __n128 v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t, uint64_t);
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  void **v108;
  double v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  void **v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  void **v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  void (*v136)(char *, uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(uint64_t, char *, uint64_t);
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  NSObject *v157;
  os_log_type_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(char *, uint64_t);
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  double v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  NSObject *v171;
  os_log_type_t v172;
  uint64_t v173;
  void **v174;
  uint64_t v175;
  unint64_t v176;
  void *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  void (*v182)(char *, uint64_t, uint64_t);
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(uint64_t, char *, uint64_t);
  void *v193;
  id v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  os_log_t v203;
  void **v204;
  int v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  void (*v249)(char *, uint64_t);
  uint64_t v250;
  char *v251;
  uint64_t v252;
  void (*v253)(char *, uint64_t, uint64_t);
  char *v254;
  uint64_t v255;
  uint64_t v256;
  char v257[8];
  double v258;
  void **aBlock;
  uint64_t v260;
  uint64_t (*v261)(uint64_t);
  void *v262;
  void *v263;
  uint64_t v264;

  v246 = a5;
  v248 = a4;
  v231 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v230 = *(_QWORD *)(v231 - 8);
  __chkstk_darwin(v231);
  v229 = (char *)&v203 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v11);
  v223 = (char *)&v203 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v225 = sub_10001A9A8(&qword_101100B50);
  v224 = *(_QWORD *)(v225 - 8);
  __chkstk_darwin(v225);
  v222 = (char *)&v203 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v228 = sub_10001A9A8(&qword_101100B58);
  v227 = *(_QWORD *)(v228 - 8);
  __chkstk_darwin(v228);
  v226 = (char *)&v203 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v234 = sub_10001A9A8(&qword_101100B60);
  v233 = *(_QWORD *)(v234 - 8);
  __chkstk_darwin(v234);
  v232 = (char *)&v203 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v236 = sub_10001A9A8(&qword_101100B68);
  v235 = *(_QWORD *)(v236 - 8);
  __chkstk_darwin(v236);
  v245 = (char *)&v203 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v239 = type metadata accessor for DispatchWorkItemFlags(0);
  v212 = *(_QWORD *)(v239 - 8);
  __chkstk_darwin(v239);
  v240 = (char *)&v203 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = type metadata accessor for DispatchQoS(0);
  v210 = *(_QWORD *)(v211 - 8);
  __chkstk_darwin(v211);
  v209 = (char *)&v203 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = type metadata accessor for DispatchTime(0);
  v208 = *(_QWORD *)(v214 - 8);
  v19 = __chkstk_darwin(v214);
  v207 = (char *)&v203 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v213 = (char *)&v203 - v21;
  v217 = type metadata accessor for Date(0);
  v216 = *(_QWORD *)(v217 - 8);
  __chkstk_darwin(v217);
  v215 = (uint64_t)&v203 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8(&qword_1010EF1D8);
  v24 = __chkstk_darwin(v23);
  v221 = (char *)&v203 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v241 = (char *)&v203 - v26;
  v243 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  v244 = *(_QWORD *)(v243 - 8);
  v27 = __chkstk_darwin(v243);
  v219 = (uint64_t)&v203 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v206 = (uint64_t)&v203 - v30;
  __chkstk_darwin(v29);
  v220 = (uint64_t)&v203 - v31;
  v255 = type metadata accessor for UUID(0);
  v32 = *(_QWORD *)(v255 - 8);
  v33 = __chkstk_darwin(v255);
  v242 = (char *)&v203 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v251 = (char *)&v203 - v36;
  v37 = __chkstk_darwin(v35);
  v247 = (char *)&v203 - v38;
  v39 = __chkstk_darwin(v37);
  v41 = (char *)&v203 - v40;
  v237 = v42;
  __chkstk_darwin(v39);
  v44 = (char *)&v203 - v43;
  v254 = a1;
  v45 = sub_1005DF5B4(a2);
  LODWORD(v249) = v45;
  if ((v45 & 1) != 0)
    v46 = 0x6575657551;
  else
    v46 = 0;
  if ((v45 & 1) != 0)
    v47 = 0xE500000000000000;
  else
    v47 = 0xE000000000000000;
  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v48 = type metadata accessor for Logger(0);
  v49 = sub_10001A9E8(v48, (uint64_t)qword_1011B71E0);
  v50 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
  v51 = v255;
  v50(v44, a2, v255);
  v253 = v50;
  v50(v41, a3, v51);
  swift_bridgeObjectRetain(v47);
  v218 = v49;
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.default.getter(v53);
  v55 = v54;
  v56 = os_log_type_enabled(v53, v54);
  v252 = a3;
  v250 = a2;
  v238 = v32;
  if (v56)
  {
    v57 = swift_slowAlloc(52, -1);
    v205 = v55;
    v58 = v57;
    v204 = (void **)swift_slowAlloc(96, -1);
    aBlock = v204;
    *(_DWORD *)v58 = 136447235;
    v203 = v53;
    swift_bridgeObjectRetain(v47);
    v256 = sub_100016940(v46, v47, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, v257, v58 + 4, v58 + 12);
    swift_bridgeObjectRelease_n(v47, 3);
    *(_WORD *)(v58 + 12) = 2160;
    v256 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, v257, v58 + 14, v58 + 22);
    *(_WORD *)(v58 + 22) = 2081;
    v59 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v60 = v255;
    v61 = v59;
    v62 = dispatch thunk of CustomStringConvertible.description.getter(v255, v59);
    v256 = sub_100016940(v62, v63, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, v257, v58 + 24, v58 + 32);
    swift_bridgeObjectRelease();
    v64 = *(void (**)(char *, uint64_t))(v32 + 8);
    v64(v44, v60);
    *(_WORD *)(v58 + 32) = 2048;
    v256 = *(_QWORD *)&a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, v257, v58 + 34, v58 + 42);
    *(_WORD *)(v58 + 42) = 2082;
    v65 = v61;
    a2 = v250;
    v66 = dispatch thunk of CustomStringConvertible.description.getter(v60, v65);
    v256 = sub_100016940(v66, v67, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, v257, v58 + 44, v58 + 52);
    swift_bridgeObjectRelease();
    v68 = v60;
    v69 = v64;
    v64(v41, v68);
    v70 = v203;
    _os_log_impl((void *)&_mh_execute_header, v203, (os_log_type_t)v205, "%{public}s playSoundSingle for %{private,mask.hash}s with timeout %f. CommandId %{public}s", (uint8_t *)v58, 0x34u);
    v71 = v204;
    swift_arrayDestroy(v204, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1, -1);
    swift_slowDealloc(v58, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(v47, 2);
    v69 = *(void (**)(char *, uint64_t))(v32 + 8);
    v72 = v255;
    v69(v44, v255);
    v69(v41, v72);

  }
  v73 = (int *)v243;
  v74 = v242;
  v75 = (uint64_t)v241;
  if ((v249 & 1) == 0)
    goto LABEL_20;
  v76 = &v254[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators];
  v77 = swift_beginAccess(&v254[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators], &v256, 0, 0);
  v78 = *(_QWORD *)v76;
  if (!*(_QWORD *)(v78 + 16))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *, __n128))(v244 + 56))(v75, 1, 1, v73, v77);
LABEL_19:
    sub_100004048(v75, &qword_1010EF1D8);
    goto LABEL_20;
  }
  swift_bridgeObjectRetain(v78);
  v79 = sub_100003FB0(a2);
  v80 = v244;
  if ((v81 & 1) != 0)
  {
    sub_10005972C(*(_QWORD *)(v78 + 56) + *(_QWORD *)(v244 + 72) * v79, v75, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v82 = 0;
  }
  else
  {
    v82 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v80 + 56))(v75, v82, 1, v73);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v80 + 48))(v75, 1, v73) == 1)
    goto LABEL_19;
  v153 = v75;
  v154 = v220;
  sub_1000126EC(v153, v220, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  if (!*(_BYTE *)(v154 + v73[6]))
  {
    v166 = v215;
    static Date.trustedNow.getter(v215);
    v167 = Date.timeIntervalSince(_:)(v154 + v73[8]);
    (*(void (**)(uint64_t, uint64_t))(v216 + 8))(v166, v217);
    if (a6 * 0.5 >= v167)
    {
      v168 = v252;
      v169 = v206;
      v170 = sub_10005972C(v154, v206, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      v171 = Logger.logObject.getter(v170);
      v172 = static os_log_type_t.error.getter(v171);
      if (os_log_type_enabled(v171, v172))
      {
        v173 = swift_slowAlloc(22, -1);
        v174 = (void **)swift_slowAlloc(32, -1);
        aBlock = v174;
        *(_DWORD *)v173 = 136446466;
        v175 = Date.localISO8601.getter();
        v258 = COERCE_DOUBLE(sub_100016940(v175, v176, (uint64_t *)&aBlock));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v258, &aBlock, v173 + 4, v173 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v169, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
        *(_WORD *)(v173 + 12) = 2050;
        v258 = v167;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v258, &aBlock, v173 + 14, v173 + 22);
        _os_log_impl((void *)&_mh_execute_header, v171, v172, "Last retry %{public}s.\nTime since: %{public}f. Defer retry", (uint8_t *)v173, 0x16u);
        swift_arrayDestroy(v174, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v174, -1, -1);
        swift_slowDealloc(v173, -1, -1);
      }
      else
      {
        sub_1000126B0(v169, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      }

      v177 = v254;
      v246 = *(_QWORD *)&v254[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
      v178 = v207;
      static DispatchTime.now()(v179);
      + infix(_:_:)(v178, a6 - v167);
      v249 = *(void (**)(char *, uint64_t))(v208 + 8);
      v249(v178, v214);
      v180 = v247;
      v181 = v255;
      v182 = v253;
      v253(v247, v168, v255);
      v183 = v251;
      v182(v251, v250, v181);
      v184 = v238;
      v185 = *(unsigned __int8 *)(v238 + 80);
      v186 = (v185 + 24) & ~v185;
      v187 = (v237 + v185 + v186) & ~v185;
      v188 = (v237 + v187 + 7) & 0xFFFFFFFFFFFFFFF8;
      v189 = (v188 + 15) & 0xFFFFFFFFFFFFFFF8;
      v190 = swift_allocObject(&unk_1010827B8, v189 + 8, v185 | 7);
      *(_QWORD *)(v190 + 16) = v177;
      v191 = v190 + v186;
      v192 = *(void (**)(uint64_t, char *, uint64_t))(v184 + 32);
      v192(v191, v180, v181);
      v192(v190 + v187, v183, v181);
      *(_QWORD *)(v190 + v188) = v248;
      *(double *)(v190 + v189) = a6;
      v263 = sub_1005FCD78;
      v264 = v190;
      aBlock = _NSConcreteStackBlock;
      v260 = 1107296256;
      v261 = sub_100016FB8;
      v262 = &unk_1010827D0;
      v193 = _Block_copy(&aBlock);
      v194 = v177;
      v195 = v209;
      static DispatchQoS.unspecified.getter(v194);
      v258 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
      v196 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v197 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v198 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v199 = v240;
      v200 = v197;
      v201 = v239;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v258, v200, v198, v239, v196);
      v202 = v213;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v213, v195, v199, v193);
      _Block_release(v193);
      (*(void (**)(char *, uint64_t))(v212 + 8))(v199, v201);
      (*(void (**)(char *, uint64_t))(v210 + 8))(v195, v211);
      v249(v202, v214);
      sub_1000126B0(v220, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      return swift_release();
    }
    sub_1000126B0(v154, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
LABEL_20:
    v83 = swift_allocObject(&unk_101081E08, 24, 7);
    swift_unknownObjectWeakInit(v83 + 16, v254);
    v84 = (uint64_t)v247;
    v85 = v255;
    v86 = v253;
    v253(v247, a2, v255);
    v87 = v251;
    v86(v251, v252, v85);
    v88 = v238;
    v220 = *(unsigned __int8 *)(v238 + 80);
    v89 = (v220 + 16) & ~v220;
    v243 = v220 | 7;
    v90 = (v237 + v220 + v89) & ~v220;
    v241 = (char *)(v237 + 7);
    v91 = (v237 + 7 + v90) & 0xFFFFFFFFFFFFFFF8;
    v92 = swift_allocObject(&unk_101082740, v91 + 8, v220 | 7);
    v93 = *(char **)(v88 + 32);
    v242 = v93;
    ((void (*)(uint64_t, uint64_t, uint64_t))v93)(v92 + v89, v84, v85);
    ((void (*)(uint64_t, char *, uint64_t))v93)(v92 + v90, v87, v85);
    *(_QWORD *)(v92 + v91) = v83;
    v263 = sub_1005FC71C;
    v264 = v92;
    aBlock = _NSConcreteStackBlock;
    v260 = 1107296256;
    v261 = sub_100016FB8;
    v262 = &unk_101082758;
    v94 = _Block_copy(&aBlock);
    v258 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    v95 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    swift_retain();
    v96 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v97 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v98 = v240;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v258, v96, v97, v239, v95);
    v99 = type metadata accessor for DispatchWorkItem(0);
    swift_allocObject(v99, *(unsigned int *)(v99 + 48), *(unsigned __int16 *)(v99 + 52));
    v100 = DispatchWorkItem.init(flags:block:)(v98, v94);
    swift_release();
    swift_release();
    v101 = v250;
    v102 = v253;
    v253((char *)v84, v250, v85);
    v103 = (uint64_t)v221;
    v104 = v252;
    v102(v221, v252, v85);
    v102((char *)(v103 + v73[5]), v101, v85);
    v105 = v103 + v73[8];
    v240 = (char *)v100;
    swift_retain();
    static Date.trustedNow.getter(v105);
    *(_BYTE *)(v103 + v73[6]) = 0;
    *(_QWORD *)(v103 + v73[7]) = v100;
    *(_QWORD *)(v103 + v73[9]) = 0;
    *(_BYTE *)(v103 + v73[10]) = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v244 + 56))(v103, 0, 1, v73);
    v106 = v254;
    swift_beginAccess(&v254[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators], &aBlock, 33, 0);
    sub_1000FF1EC(v103, v84);
    v107 = swift_endAccess(&aBlock);
    v244 = Transaction.subscriptionCleaner.getter(v107);
    v108 = (void **)sub_1005E2654(v101, v104, v248);
    v258 = *(double *)&v106[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
    v109 = v258;
    aBlock = v108;
    v110 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v111 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 56);
    v112 = (uint64_t)v223;
    v111(v223, 1, 1, v110);
    v113 = (void **)*(id *)&v109;
    v114 = sub_10001A9A8(&qword_101100AA0);
    v115 = sub_10001F6FC();
    v116 = sub_1000193A4(&qword_101100AB0, &qword_101100AA0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v117 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    v118 = v222;
    Publisher.receive<A>(on:options:)(&v258, v112, v114, v115, v116, v117);
    sub_100004048(v112, &qword_1010EECC8);

    v119 = swift_release();
    v120 = v229;
    static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v119, a6);
    aBlock = v113;
    v111((char *)v112, 1, 1, v110);
    v121 = sub_1000193A4(&qword_101100B70, &qword_101100B50, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v122 = v113;
    v123 = v226;
    v124 = v225;
    Publisher.timeout<A>(_:scheduler:options:customError:)(v120, &aBlock, v112, sub_1005E396C, 0, v225, v115, v121, v117);
    sub_100004048(v112, &qword_1010EECC8);

    (*(void (**)(char *, uint64_t))(v230 + 8))(v120, v231);
    (*(void (**)(char *, uint64_t))(v224 + 8))(v118, v124);
    v125 = sub_10001A9A8(&qword_101100AA8);
    v126 = sub_1000193A4(&qword_101100B78, &qword_101100B58, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
    v127 = v232;
    v128 = v228;
    Publisher.map<A>(_:)(sub_1005E395C, 0, v228, v125, v126);
    (*(void (**)(char *, uint64_t))(v227 + 8))(v123, v128);
    v129 = sub_10001A9A8(&qword_101100AB8);
    v130 = sub_1000193A4(&qword_101100B80, &qword_101100B60, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v131 = sub_1000193A4(&qword_101100AC8, &qword_101100AB8, (const char *)&protocol conformance descriptor for Just<A>);
    v132 = v234;
    Publisher.catch<A>(_:)(sub_1005E3960, 0, v234, v129, v130, v131);
    (*(void (**)(char *, uint64_t))(v233 + 8))(v127, v132);
    v133 = swift_allocObject(&unk_101081E08, 24, 7);
    swift_unknownObjectWeakInit(v133 + 16, v254);
    v134 = v247;
    v135 = v255;
    v136 = v253;
    v253(v247, v250, v255);
    v136(v251, v252, v135);
    v137 = v220;
    v138 = (v137 + 32) & ~v137;
    v139 = (unint64_t)&v241[v138] & 0xFFFFFFFFFFFFFFF8;
    v140 = (v139 + 15) & 0xFFFFFFFFFFFFFFF8;
    v141 = (v137 + v140 + 9) & ~v137;
    v142 = (unint64_t)&v241[v141] & 0xFFFFFFFFFFFFFFF8;
    v143 = swift_allocObject(&unk_101082790, v142 + 8, v243);
    v144 = v246;
    *(_QWORD *)(v143 + 16) = v133;
    *(_QWORD *)(v143 + 24) = v144;
    v145 = v143 + v138;
    v146 = (void (*)(uint64_t, char *, uint64_t))v242;
    ((void (*)(uint64_t, char *, uint64_t))v242)(v145, v134, v135);
    *(double *)(v143 + v139) = a6;
    v147 = v143 + v140;
    *(_QWORD *)v147 = v248;
    *(_BYTE *)(v147 + 8) = v249 & 1;
    v146(v143 + v141, v251, v135);
    v148 = v244;
    *(_QWORD *)(v143 + v142) = v244;
    v149 = sub_1000193A4(&qword_101100B88, &qword_101100B68, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
    swift_retain();
    swift_unknownObjectRetain(v148);
    v150 = v236;
    v151 = v245;
    Publisher<>.sink(receiveValue:)(sub_1005FCC4C, v143, v236, v149);
    swift_release();
    (*(void (**)(char *, uint64_t))(v235 + 8))(v151, v150);
    AnyCancellable.store(in:)(v144);
    swift_release();
    swift_unknownObjectRelease(v148);
    return swift_release();
  }
  v253(v74, a2, v255);
  v155 = v219;
  v156 = sub_10005972C(v154, v219, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v157 = Logger.logObject.getter(v156);
  v158 = static os_log_type_t.error.getter(v157);
  if (os_log_type_enabled(v157, v158))
  {
    v159 = swift_slowAlloc(22, -1);
    v160 = v155;
    v254 = (char *)swift_slowAlloc(64, -1);
    aBlock = (void **)v254;
    *(_DWORD *)v159 = 136315394;
    v161 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v162 = v69;
    v163 = v255;
    v164 = dispatch thunk of CustomStringConvertible.description.getter(v255, v161);
    v258 = COERCE_DOUBLE(sub_100016940(v164, v165, (uint64_t *)&aBlock));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v258, &aBlock, v159 + 4, v159 + 12);
    swift_bridgeObjectRelease();
    v162(v74, v163);
    *(_WORD *)(v159 + 12) = 2080;
    __asm { BR              X10 }
  }

  sub_1000126B0(v155, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v69(v74, v255);
  return sub_1000126B0(v154, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
}

uint64_t sub_1005EFBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  _QWORD v17[8];

  type metadata accessor for Transaction(0);
  v17[2] = a1;
  v17[3] = a3;
  *(double *)&v17[4] = a8;
  v17[5] = a2;
  v17[6] = a4;
  return static Transaction.named<A>(_:with:)(a5, a6, 2, a7, v17, (char *)&type metadata for () + 8);
}

void sub_1005EFC58(uint64_t a1, uint64_t a2, double a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(uint64_t a1), int a7, uint64_t (*a8)(uint64_t a1))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint8_t *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint8_t *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t (*v68)(char *, uint64_t, uint64_t);
  uint64_t (*v69)(uint64_t);
  uint64_t (*v70)(uint64_t);
  uint8_t *v71;
  uint64_t Strong;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76[24];

  v69 = a8;
  v70 = a6;
  LODWORD(v71) = a7;
  v73 = a5;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v65 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v65 - v19;
  v21 = sub_10001A9A8(&qword_101100AA8);
  __chkstk_darwin(v21);
  v23 = (unint64_t *)((char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v76, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    Transaction.capture()();
    sub_10000F9B8(a1, (uint64_t)v23, &qword_101100AA8);
    if (swift_getEnumCaseMultiPayload(v23, v21) == 1)
    {
      v24 = *v23;
      v25 = v73;
      if (qword_1010E9D28 != -1)
        swift_once(&qword_1010E9D28, sub_1005D439C);
      v26 = type metadata accessor for Logger(0);
      sub_10001A9E8(v26, (uint64_t)qword_1011B71E0);
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v15, v25, v11);
      sub_1005FAC50(v24);
      v27 = sub_1005FAC50(v24);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.error.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        v30 = swift_slowAlloc(22, -1);
        v31 = swift_slowAlloc(64, -1);
        v75 = v31;
        *(_DWORD *)v30 = 136315394;
        v32 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v33 = dispatch thunk of CustomStringConvertible.description.getter(v11, v32);
        v74 = sub_100016940(v33, v34, &v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v30 + 4, v30 + 12);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
        *(_WORD *)(v30 + 12) = 2080;
        v74 = v24;
        sub_1005FAC50(v24);
        v35 = String.init<A>(describing:)(&v74, &type metadata for SoundPlaybackManager.SoundPlaybackManagerError);
        v74 = sub_100016940(v35, v36, &v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v30 + 14, v30 + 22);
        swift_bridgeObjectRelease();
        sub_1005FAC60(v24);
        sub_1005FAC60(v24);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Play sound single failed for %s. Error %s", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
        v37 = v31;
        v25 = v73;
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v30, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
        sub_1005FAC60(v24);
        sub_1005FAC60(v24);
      }

      v51 = (void *)Strong;
      if ((v71 & 1) != 0)
      {
        sub_1005F039C(v69, v25, v70, a3);
        sub_1005FAC60(v24);

      }
      else
      {
        v62 = sub_1005FA87C();
        v63 = swift_allocError(&type metadata for SoundPlaybackManager.SoundPlaybackManagerError, v62, 0, 0);
        *v64 = v24;
        sub_1005FAC50(v24);
        sub_1005E2F5C(v25, 0, v63);
        sub_1005FAC60(v24);

        swift_errorRelease(v63);
      }
    }
    else
    {
      v38 = v73;
      if (qword_1010E9D28 != -1)
        swift_once(&qword_1010E9D28, sub_1005D439C);
      v39 = type metadata accessor for Logger(0);
      v40 = (uint64_t (*)(uint64_t))sub_10001A9E8(v39, (uint64_t)qword_1011B71E0);
      v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16);
      v41 = v68(v20, v38, v11);
      v69 = v40;
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.default.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc(12, -1);
        v67 = swift_slowAlloc(32, -1);
        v75 = v67;
        *(_DWORD *)v44 = 136315138;
        v66 = v44 + 4;
        v45 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v46 = dispatch thunk of CustomStringConvertible.description.getter(v11, v45);
        v74 = sub_100016940(v46, v47, &v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v66, v44 + 12);
        swift_bridgeObjectRelease();
        v48 = *(void (**)(char *, uint64_t))(v12 + 8);
        v48(v20, v11);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Play sound single started successfully for %s", v44, 0xCu);
        v49 = v67;
        swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v49, -1, -1);
        v50 = v44;
        v38 = v73;
        swift_slowDealloc(v50, -1, -1);
      }
      else
      {
        v48 = *(void (**)(char *, uint64_t))(v12 + 8);
        v48(v20, v11);
      }

      v52 = (void *)Strong;
      sub_1005E56F0(v38, (unint64_t)v70, a3);
      if ((v71 & 1) != 0)
      {
        v53 = v68(v18, v38, v11);
        v54 = Logger.logObject.getter(v53);
        v55 = static os_log_type_t.default.getter(v54);
        if (os_log_type_enabled(v54, v55))
        {
          v56 = (uint8_t *)swift_slowAlloc(12, -1);
          v57 = swift_slowAlloc(32, -1);
          v75 = v57;
          *(_DWORD *)v56 = 136315138;
          v71 = v56 + 4;
          v58 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v59 = dispatch thunk of CustomStringConvertible.description.getter(v11, v58);
          v74 = sub_100016940(v59, v60, &v75);
          v38 = v73;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v71, v56 + 12);
          swift_bridgeObjectRelease();
          v48(v18, v11);
          _os_log_impl((void *)&_mh_execute_header, v54, v55, "Posting success alert for %s", v56, 0xCu);
          swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v57, -1, -1);
          v61 = v56;
          v52 = (void *)Strong;
          swift_slowDealloc(v61, -1, -1);
        }
        else
        {
          v48(v18, v11);
        }

        sub_1005E6CB0(v38, 1);
      }

      sub_100004048((uint64_t)v23, &qword_101100AA8);
    }
  }
}

void sub_1005F039C(uint64_t (*a1)(uint64_t a1), unint64_t a2, uint64_t (*a3)(uint64_t a1), double a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  id v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t);
  char *v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t);
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t);
  uint64_t (*v81)(uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  void *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96[2];

  v5 = v4;
  v80 = a1;
  v81 = a3;
  v8 = (uint64_t (*)(uint64_t))type metadata accessor for UUID(0);
  v87 = *((_QWORD *)v8 - 1);
  __chkstk_darwin(v8);
  v85 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v83 = *(_QWORD *)(v10 - 8);
  v84 = v10;
  __chkstk_darwin(v10);
  v82 = (uint64_t)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010EF660);
  __chkstk_darwin(v12);
  v89 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for BeaconObservation(0);
  v93 = *(_QWORD *)(v91 - 8);
  v14 = __chkstk_darwin(v91);
  v90 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v92 = (uint64_t)&v76 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v76 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v76 - v21;
  v23 = type metadata accessor for DispatchPredicate(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (uint64_t (**)(uint64_t))((char *)&v76 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = *(void **)(v5 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  *v26 = v27;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v24 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v23);
  v28 = v27;
  v29 = _dispatchPreconditionTest(_:)(v26);
  (*(void (**)(_QWORD *, uint64_t))(v24 + 8))(v26, v23);
  if ((v29 & 1) == 0)
    goto LABEL_38;
  if (qword_1010E9CF0 != -1)
    goto LABEL_39;
  while (1)
  {
    v30 = qword_1011B7160;
    v88 = objc_autoreleasePoolPush();
    v31 = sub_10001A9A8(&qword_1010F7770);
    OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v30, v31);
    v79 = 0;
    v32 = v96[0];
    v33 = v91;
    if (!*(_QWORD *)(v96[0] + 16) || (v34 = sub_100003FB0(a2), (v35 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      v39 = _swiftEmptyArrayStorage;
      goto LABEL_19;
    }
    v78 = v22;
    v36 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v34);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRelease();
    v37 = sub_100508D98(v36);
    swift_bridgeObjectRelease();
    sub_10088FD00((uint64_t)v37);
    v22 = v38;
    swift_release();
    v39 = _swiftEmptyArrayStorage;
    v96[0] = (uint64_t)_swiftEmptyArrayStorage;
    v40 = *((_QWORD *)v22 + 2);
    if (!v40)
      break;
    v76 = v8;
    v77 = a2;
    v86 = v5;
    a2 = 0;
    v8 = type metadata accessor for BeaconObservation;
    while (a2 < *((_QWORD *)v22 + 2))
    {
      v5 = (*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
      v41 = *(_QWORD *)(v93 + 72);
      sub_10005972C((uint64_t)&v22[v5 + v41 * a2], (uint64_t)v20, type metadata accessor for BeaconObservation);
      if (v20[*(int *)(v33 + 24)] == 23)
      {
        sub_1000126EC((uint64_t)v20, v92, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
          sub_10009AAC8(0, v39[2] + 1, 1);
        v39 = (_QWORD *)v96[0];
        v43 = *(_QWORD *)(v96[0] + 16);
        v42 = *(_QWORD *)(v96[0] + 24);
        if (v43 >= v42 >> 1)
        {
          sub_10009AAC8(v42 > 1, v43 + 1, 1);
          v39 = (_QWORD *)v96[0];
        }
        v39[2] = v43 + 1;
        sub_1000126EC(v92, (uint64_t)v39 + v5 + v43 * v41, type metadata accessor for BeaconObservation);
        v33 = v91;
      }
      else
      {
        sub_1000126B0((uint64_t)v20, type metadata accessor for BeaconObservation);
      }
      if (v40 == ++a2)
      {
        v39 = (_QWORD *)v96[0];
        v5 = v86;
        a2 = v77;
        v8 = v76;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  }
LABEL_18:
  swift_release();
  v22 = v78;
LABEL_19:
  v45 = (uint64_t)v89;
  v44 = (uint64_t)v90;
  objc_autoreleasePoolPop(v88);
  sub_100A797E8((uint64_t)v39, v45);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v45, 1, v33) == 1)
  {
    sub_100004048(v45, &qword_1010EF660);
    if (qword_1010E9D28 != -1)
      swift_once(&qword_1010E9D28, sub_1005D439C);
    v46 = type metadata accessor for Logger(0);
    v47 = sub_10001A9E8(v46, (uint64_t)qword_1011B71E0);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "No playback observation found. Cannot retry", v50, 2u);
      swift_slowDealloc(v50, -1, -1);
    }

  }
  else
  {
    v86 = v5;
    sub_1000126EC(v45, (uint64_t)v22, type metadata accessor for BeaconObservation);
    v51 = v82;
    static Date.trustedNow.getter(v82);
    v52 = Date.timeIntervalSince(_:)(&v22[*(int *)(v33 + 20)]);
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v51, v84);
    if (qword_1010E9D28 != -1)
      swift_once(&qword_1010E9D28, sub_1005D439C);
    v53 = type metadata accessor for Logger(0);
    v54 = sub_10001A9E8(v53, (uint64_t)qword_1011B71E0);
    v55 = sub_10005972C((uint64_t)v22, v44, type metadata accessor for BeaconObservation);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.default.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      v58 = swift_slowAlloc(22, -1);
      v92 = swift_slowAlloc(32, -1);
      v96[0] = v92;
      *(_DWORD *)v58 = 136446466;
      v59 = Date.localISO8601.getter();
      v61 = sub_100016940(v59, v60, v96);
      v93 = v54;
      v94 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v58 + 4, v58 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v44, type metadata accessor for BeaconObservation);
      *(_WORD *)(v58 + 12) = 2050;
      v94 = *(_QWORD *)&v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v58 + 14, v58 + 22);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Queued at %{public}s. Time since: %{public}f", (uint8_t *)v58, 0x16u);
      v62 = v92;
      swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v58, -1, -1);
    }
    else
    {
      sub_1000126B0(v44, type metadata accessor for BeaconObservation);
    }

    v64 = (uint64_t (*)(uint64_t))v86;
    v63 = v87;
    v65 = v85;
    if (v52 >= 180.0)
    {
      v68 = (*(uint64_t (**)(char *, unint64_t, uint64_t (*)(uint64_t)))(v87 + 16))(v85, a2, v8);
      v69 = Logger.logObject.getter(v68);
      v70 = static os_log_type_t.error.getter(v69);
      if (os_log_type_enabled(v69, v70))
      {
        v71 = swift_slowAlloc(22, -1);
        v93 = swift_slowAlloc(32, -1);
        v96[0] = v93;
        *(_DWORD *)v71 = 134218242;
        v94 = 0x4066800000000000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v71 + 4, v71 + 12);
        *(_WORD *)(v71 + 12) = 2080;
        v72 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v73 = dispatch thunk of CustomStringConvertible.description.getter(v8, v72);
        v94 = sub_100016940(v73, v74, v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v71 + 14, v71 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t (*)(uint64_t)))(v87 + 8))(v65, v8);
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "%f elapsed. Posting error alert for %s", (uint8_t *)v71, 0x16u);
        v75 = v93;
        swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v75, -1, -1);
        swift_slowDealloc(v71, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t (*)(uint64_t)))(v63 + 8))(v65, v8);
      }

      sub_1005E6CB0(a2, 0);
      sub_1005E2F5C(a2, 0, 0);
    }
    else
    {
      v66 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v66);
      *(&v76 - 6) = v64;
      *(&v76 - 5) = (uint64_t (*)(uint64_t))a2;
      *((double *)&v76 - 4) = a4;
      v67 = v81;
      *(&v76 - 3) = v80;
      *(&v76 - 2) = v67;
      static Transaction.named<A>(_:with:)("SoundPlaybackManager.queuePlaySoundSingle", 41, 2, sub_1005FC934, &v76 - 8);
    }
    sub_1000126B0((uint64_t)v22, type metadata accessor for BeaconObservation);
  }
}

uint64_t sub_1005F0D2C(void (*a1)(_QWORD, _QWORD, _QWORD, _QWORD), char *a2, uint64_t a3, uint64_t a4, char *a5, double a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(_QWORD, _QWORD, _QWORD);
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  _BOOL4 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void (*v74)(char *, uint64_t);
  void (*v75)(char *, uint64_t);
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v81;
  uint64_t (*v82)(_QWORD);
  void *v83;
  uint64_t (*v84)(_QWORD);
  _QWORD *v85;
  unsigned int (*v86)(__int128 *, uint64_t, uint64_t);
  uint64_t *v87;
  __int128 *v88;
  void (*v89)(char *, __int128 *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(_QWORD);
  void *v100;
  void *v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  void (*v105)(_QWORD, _QWORD, _QWORD);
  char *v106;
  uint64_t v107;
  NSObject *v108;
  os_log_type_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  int *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  void (*v125)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v126;
  unint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  void (*v138)(_QWORD, _QWORD, _QWORD);
  char *v139;
  char *v140;
  uint64_t v141;
  NSObject *v142;
  os_log_type_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  void (*v153)(char *, uint64_t);
  uint64_t v154;
  uint64_t v155;
  char *v156;
  void (*v157)(char *, char *, _QWORD);
  char *v158;
  void (*v159)(_QWORD, _QWORD, _QWORD);
  uint64_t v160;
  uint64_t v161;
  int v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  NSObject *v166;
  os_log_type_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  void (*v173)(uint64_t, uint64_t);
  int v174;
  uint64_t v175;
  char *v176;
  char v177;
  void (*v178)(char *, char *, _QWORD);
  char *v179;
  char *v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void (*v188)(uint64_t, char *, _QWORD);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  uint64_t v237;
  void (*v238)(char *, uint64_t);
  char *v239;
  char *v240;
  char *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  char *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  void (*v264)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v265;
  char *v266;
  char *v267;
  _QWORD *v268;
  void (*v269)(_QWORD, _QWORD, _QWORD);
  char *v270;
  uint64_t v271;
  __int128 v272;
  uint64_t v273;
  uint64_t aBlock;
  uint64_t v275;
  uint64_t (*v276)(uint64_t);
  void *v277;
  uint64_t (*v278)(_QWORD);
  uint64_t v279;
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  char v283[8];

  v255 = a4;
  v254 = a3;
  v267 = a2;
  v243 = type metadata accessor for BeaconObservation(0);
  v244 = *(_QWORD *)(v243 - 8);
  __chkstk_darwin(v243);
  v246 = (char *)&v225 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v258 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v225 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v259 = type metadata accessor for DispatchQoS(0);
  v257 = *(_QWORD *)(v259 - 8);
  __chkstk_darwin(v259);
  v256 = (char *)&v225 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v253 = type metadata accessor for DispatchQoS.QoSClass(0);
  v252 = *(_QWORD *)(v253 - 8);
  __chkstk_darwin(v253);
  v251 = (char *)&v225 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010EF1D8);
  v16 = __chkstk_darwin(v15);
  v242 = (char *)&v225 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v249 = (char *)&v225 - v18;
  v262 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  v261 = *(_QWORD *)(v262 - 8);
  v19 = __chkstk_darwin(v262);
  v237 = (uint64_t)&v225 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v225 - v22;
  v24 = __chkstk_darwin(v21);
  v245 = (uint64_t)&v225 - v25;
  v26 = __chkstk_darwin(v24);
  v227 = (uint64_t)&v225 - v27;
  v28 = __chkstk_darwin(v26);
  v228 = (uint64_t)&v225 - v29;
  v30 = __chkstk_darwin(v28);
  v229 = (uint64_t)&v225 - v31;
  __chkstk_darwin(v30);
  v230 = (uint64_t)&v225 - v32;
  v33 = sub_10001A9A8(&qword_1010ED860);
  v34 = __chkstk_darwin(v33);
  v232 = (uint64_t)&v225 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  v37 = (__int128 *)((char *)&v225 - v36);
  v38 = type metadata accessor for UUID(0);
  v39 = *(_QWORD **)(v38 - 8);
  v40 = __chkstk_darwin(v38);
  v241 = (char *)&v225 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v40);
  v240 = (char *)&v225 - v43;
  v44 = __chkstk_darwin(v42);
  v265 = (char *)&v225 - v45;
  v46 = __chkstk_darwin(v44);
  v234 = (char *)&v225 - v47;
  v48 = __chkstk_darwin(v46);
  v260 = (char *)&v225 - v49;
  v50 = __chkstk_darwin(v48);
  v226 = (char *)&v225 - v51;
  v52 = __chkstk_darwin(v50);
  v225 = (char *)&v225 - v53;
  v54 = __chkstk_darwin(v52);
  v231 = (char *)&v225 - v55;
  v56 = __chkstk_darwin(v54);
  v236 = (char *)&v225 - v57;
  v58 = __chkstk_darwin(v56);
  v270 = (char *)&v225 - v59;
  __chkstk_darwin(v58);
  v61 = (char *)&v225 - v60;
  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v235 = v23;
  v250 = v12;
  v62 = type metadata accessor for Logger(0);
  v63 = sub_10001A9E8(v62, (uint64_t)qword_1011B71E0);
  v64 = (void (*)(_QWORD, _QWORD, _QWORD))v39[2];
  v264 = a1;
  v269 = v64;
  v65 = ((uint64_t (*)(char *, void (*)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t))v64)(v61, a1, v38);
  v263 = v63;
  v66 = Logger.logObject.getter(v65);
  v67 = static os_log_type_t.default.getter(v66);
  v68 = os_log_type_enabled(v66, v67);
  v268 = v39;
  v248 = v10;
  v266 = a5;
  if (v68)
  {
    v69 = swift_slowAlloc(32, -1);
    v70 = swift_slowAlloc(32, -1);
    aBlock = v70;
    *(_DWORD *)v69 = 141558531;
    *(_QWORD *)&v280 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v280, (char *)&v280 + 8, v69 + 4, v69 + 12);
    *(_WORD *)(v69 + 12) = 2081;
    v71 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v72 = dispatch thunk of CustomStringConvertible.description.getter(v38, v71);
    *(_QWORD *)&v280 = sub_100016940(v72, v73, &aBlock);
    v39 = v268;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v280, (char *)&v280 + 8, v69 + 14, v69 + 22);
    swift_bridgeObjectRelease();
    v74 = (void (*)(char *, uint64_t))v39[1];
    v74(v61, v38);
    *(_WORD *)(v69 + 22) = 2048;
    *(double *)&v280 = a6;
    v75 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v280, (char *)&v280 + 8, v69 + 24, v69 + 32);
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "stopSoundSingle %{private,mask.hash}s timeout %f", (uint8_t *)v69, 0x20u);
    swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1, -1);
    swift_slowDealloc(v69, -1, -1);
  }
  else
  {
    v75 = (void (*)(char *, uint64_t))v39[1];
    v75(v61, v38);
  }

  v76 = v267;
  v77 = &v267[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators];
  swift_beginAccess(&v267[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators], v283, 0, 0);
  v239 = v77;
  v78 = *(_QWORD *)v77;
  v79 = *(_QWORD *)&v76[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_beaconStore];
  swift_bridgeObjectRetain(v78);
  v80 = v264;
  v247 = v79;
  sub_10080B648((uint64_t)v264, (uint64_t)&v280);
  v238 = v75;
  if (!v281)
  {
    sub_100004048((uint64_t)&v280, (uint64_t *)&unk_1010EE310);
LABEL_17:
    v104 = (uint64_t)v270;
    v105 = v269;
    goto LABEL_18;
  }
  sub_10000F9FC(&v280, (uint64_t)&aBlock);
  v81 = v277;
  v82 = v278;
  sub_10001AA44(&aBlock, (uint64_t)v277);
  if (((*((uint64_t (**)(void *, uint64_t (*)(_QWORD)))v82 + 15))(v81, v82) & 1) == 0)
  {
LABEL_16:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    goto LABEL_17;
  }
  v83 = v277;
  v84 = v278;
  sub_10001AA44(&aBlock, (uint64_t)v277);
  (*((void (**)(void *, uint64_t (*)(_QWORD)))v84 + 24))(v83, v84);
  v85 = v39;
  v86 = (unsigned int (*)(__int128 *, uint64_t, uint64_t))v39[6];
  if (v86(v37, 1, v38) == 1)
  {
    v87 = &qword_1010ED860;
    v88 = v37;
LABEL_15:
    sub_100004048((uint64_t)v88, v87);
    goto LABEL_16;
  }
  v89 = (void (*)(char *, __int128 *, uint64_t))v85[4];
  v90 = (uint64_t)v236;
  v89(v236, v37, v38);
  sub_1008259D0(v90, (uint64_t)&v272);
  if (!v273)
  {
    v75 = v238;
    v238((char *)v90, v38);
    v87 = (uint64_t *)&unk_101107010;
    v88 = &v272;
    goto LABEL_15;
  }
  v233 = v78;
  sub_10000F9FC(&v272, (uint64_t)&v280);
  v91 = v281;
  v92 = v282;
  sub_10001AA44(&v280, v281);
  v93 = (*(uint64_t (**)(uint64_t, uint64_t))(v92 + 16))(v91, v92);
  v94 = sub_10001A9A8(&qword_1011003C0);
  v95 = *((unsigned __int8 *)v85 + 80);
  v96 = (v95 + 32) & ~v95;
  v97 = swift_allocObject(v94, v96 + v85[9], v95 | 7);
  *(_OWORD *)(v97 + 16) = xmmword_100E22B00;
  v98 = v97 + v96;
  v100 = v277;
  v99 = v278;
  sub_10001AA44(&aBlock, (uint64_t)v277);
  (*(void (**)(void *))(*(_QWORD *)(*((_QWORD *)v99 + 1) + 8) + 32))(v100);
  v101 = sub_100640734(v97, v93);
  swift_setDeallocating(v97);
  swift_arrayDestroy(v98, *(_QWORD *)(v97 + 16), v38);
  swift_deallocClassInstance(v97, 32, 7);
  v102 = v232;
  sub_1000FC598((uint64_t)v101, v232);
  swift_release();
  v103 = v86((__int128 *)v102, 1, v38);
  v104 = (uint64_t)v270;
  if (v103 == 1)
  {
    v75 = v238;
    v238(v236, v38);
    sub_100004048(v102, &qword_1010ED860);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v280);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    v105 = v269;
    v78 = v233;
LABEL_18:
    v106 = v260;
LABEL_19:
    v107 = ((uint64_t (*)(char *, void (*)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t))v105)(v106, v80, v38);
    goto LABEL_20;
  }
  v126 = (uint64_t)v231;
  v89(v231, (__int128 *)v102, v38);
  v78 = v233;
  v105 = v269;
  v106 = v260;
  if (!*(_QWORD *)(v233 + 16) || (v127 = sub_100003FB0(v126), (v128 & 1) == 0))
  {
    v75 = v238;
    v238((char *)v126, v38);
    v75(v236, v38);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v280);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    goto LABEL_19;
  }
  v129 = *(_QWORD *)(v261 + 72);
  v130 = v229;
  sub_10005972C(*(_QWORD *)(v78 + 56) + v129 * v127, v229, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v131 = v230;
  sub_1000126EC(v130, v230, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v75 = v238;
  if (!*(_QWORD *)(v78 + 16) || (v132 = sub_100003FB0((uint64_t)v80), (v133 & 1) == 0))
  {
    v155 = v131;
LABEL_36:
    sub_1000126B0(v155, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v156 = (char *)v126;
LABEL_37:
    v75(v156, v38);
    v75(v236, v38);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v280);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    v106 = v260;
    v105 = v269;
    v107 = ((uint64_t (*)(char *, void (*)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t))v269)(v260, v80, v38);
LABEL_20:
    v108 = Logger.logObject.getter(v107);
    v109 = static os_log_type_t.default.getter(v108);
    if (os_log_type_enabled(v108, v109))
    {
      v110 = v106;
      v111 = swift_slowAlloc(22, -1);
      v112 = swift_slowAlloc(32, -1);
      v233 = v78;
      v113 = v112;
      aBlock = v112;
      *(_DWORD *)v111 = 141558275;
      *(_QWORD *)&v280 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v280, (char *)&v280 + 8, v111 + 4, v111 + 12);
      *(_WORD *)(v111 + 12) = 2081;
      v114 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v115 = dispatch thunk of CustomStringConvertible.description.getter(v38, v114);
      *(_QWORD *)&v280 = sub_100016940(v115, v116, &aBlock);
      v104 = (uint64_t)v270;
      v80 = v264;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v280, (char *)&v280 + 8, v111 + 14, v111 + 22);
      swift_bridgeObjectRelease();
      v117 = v110;
      v105 = v269;
      v75(v117, v38);
      _os_log_impl((void *)&_mh_execute_header, v108, v109, "stopSoundSingle for %{private,mask.hash}s directly.", (uint8_t *)v111, 0x16u);
      swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
      v118 = v113;
      v78 = v233;
      swift_slowDealloc(v118, -1, -1);
      swift_slowDealloc(v111, -1, -1);
    }
    else
    {
      v75(v106, v38);
    }

    v105(v104, v80, v38);
    v119 = v250;
    v120 = (int *)v262;
    v121 = (uint64_t)v249;
    v122 = v261;
    if (!*(_QWORD *)(v78 + 16))
      goto LABEL_42;
    goto LABEL_24;
  }
  v134 = v227;
  sub_10005972C(*(_QWORD *)(v78 + 56) + v132 * v129, v227, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v135 = v134;
  v136 = v228;
  sub_1000126EC(v135, v228, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  if ((static UUID.== infix(_:_:)(v136, v131) & 1) == 0)
  {
    sub_1000126B0(v136, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v155 = v131;
    goto LABEL_36;
  }
  v120 = (int *)v262;
  if (*(_BYTE *)(v131 + *(int *)(v262 + 40)) != 1)
  {
    sub_1000126B0(v136, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    sub_1000126B0(v131, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v156 = v231;
    goto LABEL_37;
  }
  v137 = v231;
  v138 = v269;
  v269(v104, v231, v38);
  v139 = v225;
  v138(v225, v80, v38);
  v140 = v226;
  v141 = ((uint64_t (*)(char *, char *, uint64_t))v138)(v226, v137, v38);
  v142 = Logger.logObject.getter(v141);
  v143 = static os_log_type_t.default.getter(v142);
  v144 = v143;
  if (os_log_type_enabled(v142, v143))
  {
    v145 = swift_slowAlloc(42, -1);
    v146 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v272 = v146;
    *(_DWORD *)v145 = 141558787;
    v271 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v271, &v272, v145 + 4, v145 + 12);
    *(_WORD *)(v145 + 12) = 2081;
    v147 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    LODWORD(v264) = v144;
    v148 = dispatch thunk of CustomStringConvertible.description.getter(v38, v147);
    v271 = sub_100016940(v148, v149, (uint64_t *)&v272);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v271, &v272, v145 + 14, v145 + 22);
    swift_bridgeObjectRelease();
    v238(v139, v38);
    *(_WORD *)(v145 + 22) = 2160;
    v271 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v271, &v272, v145 + 24, v145 + 32);
    *(_WORD *)(v145 + 32) = 2081;
    v150 = v147;
    v104 = (uint64_t)v270;
    v151 = dispatch thunk of CustomStringConvertible.description.getter(v38, v150);
    v271 = sub_100016940(v151, v152, (uint64_t *)&v272);
    v78 = v233;
    v105 = v269;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v271, &v272, v145 + 34, v145 + 42);
    swift_bridgeObjectRelease();
    v238(v140, v38);
    _os_log_impl((void *)&_mh_execute_header, v142, (os_log_type_t)v264, "Overriding stopSoundSingle %{private,mask.hash}s because %{private,mask.hash}s is indicating it was playing both in-case.", (uint8_t *)v145, 0x2Au);
    swift_arrayDestroy(v146, 2, (char *)&type metadata for Any + 8);
    v153 = v238;
    swift_slowDealloc(v146, -1, -1);
    v154 = v145;
    v120 = (int *)v262;
    swift_slowDealloc(v154, -1, -1);

    sub_1000126B0(v228, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    sub_1000126B0(v230, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v153(v231, v38);
    v153(v236, v38);
    v121 = (uint64_t)v249;
    v122 = v261;
  }
  else
  {

    v75(v140, v38);
    v75(v139, v38);
    sub_1000126B0(v228, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    sub_1000126B0(v131, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v75(v231, v38);
    v75(v236, v38);
    v121 = (uint64_t)v249;
    v122 = v261;
    v105 = v269;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v280);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
  v119 = v250;
  if (!*(_QWORD *)(v78 + 16))
    goto LABEL_42;
LABEL_24:
  v123 = sub_100003FB0(v104);
  if ((v124 & 1) != 0)
  {
    sub_10005972C(*(_QWORD *)(v78 + 56) + *(_QWORD *)(v122 + 72) * v123, v121, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v125 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v122 + 56);
    v125(v121, 0, 1, v120);
    goto LABEL_43;
  }
LABEL_42:
  v125 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v122 + 56);
  v125(v121, 1, 1, v120);
LABEL_43:
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v122 + 48))(v121, 1, v120) == 1)
  {
    v264 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v125;
    v157 = (void (*)(char *, char *, _QWORD))v105;
    v158 = v119;
    v159 = (void (*)(_QWORD, _QWORD, _QWORD))v38;
    v160 = v248;
    sub_100004048(v121, &qword_1010EF1D8);
LABEL_58:
    v178 = v157;
    v157(v265, (char *)v104, v159);
    v179 = v240;
    v178(v240, v266, v159);
    v180 = v241;
    v178(v241, (char *)v104, v159);
    v278 = SharingCircleWildAdvertisementKey.init(key:);
    v279 = 0;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v275 = 1107296256;
    v276 = sub_100016FB8;
    v277 = &unk_101081F38;
    v181 = _Block_copy(&aBlock);
    *(_QWORD *)&v272 = _swiftEmptyArrayStorage;
    v182 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v183 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v184 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v262 = v183;
    v261 = v184;
    v263 = v182;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v272, v183, v184, v160, v182);
    v185 = type metadata accessor for DispatchWorkItem(0);
    swift_allocObject(v185, *(unsigned int *)(v185 + 48), *(unsigned __int16 *)(v185 + 52));
    v186 = DispatchWorkItem.init(flags:block:)(v158, v181);
    v187 = (uint64_t)v242;
    static Date.trustedNow.getter((uint64_t)&v242[v120[8]]);
    v188 = (void (*)(uint64_t, char *, _QWORD))v268[4];
    v188(v187, v179, v159);
    v188(v187 + v120[5], v180, v159);
    *(_BYTE *)(v187 + v120[6]) = 4;
    *(_QWORD *)(v187 + v120[7]) = v186;
    *(_QWORD *)(v187 + v120[9]) = 0;
    *(_BYTE *)(v187 + v120[10]) = 0;
    v264(v187, 0, 1, v120);
    swift_beginAccess(v239, &aBlock, 33, 0);
    sub_1000FF1EC(v187, (uint64_t)v265);
    swift_endAccess(&aBlock);
    v189 = v160;
    if (qword_1010E9CF0 != -1)
      swift_once(&qword_1010E9CF0, sub_10058CADC);
    v190 = qword_1011B7160;
    v191 = (uint64_t)v246;
    v192 = v270;
    v269(v246, v270, v159);
    v193 = v243;
    static Date.trustedNow.getter(v191 + *(int *)(v243 + 20));
    *(_BYTE *)(v191 + *(int *)(v193 + 24)) = 26;
    v194 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
    v195 = *(unsigned __int8 *)(v244 + 80);
    v196 = (v195 + 32) & ~v195;
    v197 = swift_allocObject(v194, v196 + *(_QWORD *)(v244 + 72), v195 | 7);
    v269 = v159;
    v198 = (char *)v197;
    *(_OWORD *)(v197 + 16) = xmmword_100E22B00;
    sub_10005972C(v191, v197 + v196, type metadata accessor for BeaconObservation);
    v199 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v199);
    *(&v225 - 4) = (char *)v190;
    *(&v225 - 3) = v198;
    *(&v225 - 2) = 0;
    *(&v225 - 1) = 0;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, &v225 - 6, &type metadata for () + 1);
    swift_bridgeObjectRelease();
    sub_1000126B0(v191, type metadata accessor for BeaconObservation);
    sub_1007EEF64(10);
    sub_10001F6FC();
    v200 = v252;
    v201 = v251;
    v202 = v253;
    (*(void (**)(char *, _QWORD, uint64_t))(v252 + 104))(v251, enum case for DispatchQoS.QoSClass.default(_:), v253);
    v203 = (void *)static OS_dispatch_queue.global(qos:)(v201);
    (*(void (**)(char *, uint64_t))(v200 + 8))(v201, v202);
    v204 = swift_allocObject(&unk_101081F70, 32, 7);
    v205 = v255;
    *(_QWORD *)(v204 + 16) = v254;
    *(_QWORD *)(v204 + 24) = v205;
    v278 = (uint64_t (*)(_QWORD))sub_1002E3C58;
    v279 = v204;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v275 = 1107296256;
    v276 = sub_100016FB8;
    v277 = &unk_101081F88;
    v206 = _Block_copy(&aBlock);
    v207 = swift_retain();
    v208 = v256;
    static DispatchQoS.unspecified.getter(v207);
    *(_QWORD *)&v272 = _swiftEmptyArrayStorage;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v272, v262, v261, v189, v263);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v208, v158, v206);
    _Block_release(v206);

    (*(void (**)(char *, uint64_t))(v258 + 8))(v158, v189);
    (*(void (**)(char *, uint64_t))(v257 + 8))(v208, v259);
    swift_release();
    v209 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v209);
    *(&v225 - 4) = v267;
    *(&v225 - 3) = v192;
    *(&v225 - 2) = v266;
    *((double *)&v225 - 1) = a6;
    static Transaction.named<A>(_:with:)("SoundPlaybackManager.playSoundSingle", 36, 2, sub_1005FAFC0, &v225 - 6);
    return ((uint64_t (*)(char *, void (*)(_QWORD, _QWORD, _QWORD)))v268[1])(v192, v269);
  }
  v161 = v245;
  sub_1000126EC(v121, v245, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v162 = *(unsigned __int8 *)(v161 + v120[6]);
  if (v162 != 4)
  {
    v264 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v125;
    v172 = (uint64_t)v235;
    sub_10005972C(v161, (uint64_t)v235, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    if (v162 == 1)
    {
      sub_1000126B0(v172, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    }
    else
    {
      v174 = *(unsigned __int8 *)(v172 + v120[6]);
      sub_1000126B0(v172, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      if (v174 != 2)
        goto LABEL_55;
    }
    v175 = swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()(v175);
    swift_release();
    v176 = &v267[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_playSoundSubjects];
    swift_beginAccess(&v267[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_playSoundSubjects], &v280, 0, 0);
    if (*(_QWORD *)(*(_QWORD *)v176 + 16))
    {
      v157 = (void (*)(char *, char *, _QWORD))v105;
      v159 = (void (*)(_QWORD, _QWORD, _QWORD))v38;
      swift_bridgeObjectRetain(*(_QWORD *)v176);
      sub_100003FB0(v104);
      v158 = v119;
      v160 = v248;
      if ((v177 & 1) != 0)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        aBlock = 4;
        PassthroughSubject.send(completion:)(&aBlock);
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      goto LABEL_57;
    }
LABEL_55:
    v157 = (void (*)(char *, char *, _QWORD))v105;
    v158 = v119;
    v159 = (void (*)(_QWORD, _QWORD, _QWORD))v38;
    v160 = v248;
LABEL_57:
    sub_1000126B0(v161, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    goto LABEL_58;
  }
  v163 = v234;
  v105(v234, v104, v38);
  v164 = v237;
  v165 = sub_10005972C(v161, v237, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v166 = Logger.logObject.getter(v165);
  v167 = static os_log_type_t.error.getter(v166);
  if (os_log_type_enabled(v166, v167))
  {
    v168 = swift_slowAlloc(32, -1);
    v269 = (void (*)(_QWORD, _QWORD, _QWORD))swift_slowAlloc(64, -1);
    aBlock = (uint64_t)v269;
    *(_DWORD *)v168 = 141558531;
    *(_QWORD *)&v280 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v280, (char *)&v280 + 8, v168 + 4, v168 + 12);
    *(_WORD *)(v168 + 12) = 2081;
    v169 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v170 = dispatch thunk of CustomStringConvertible.description.getter(v38, v169);
    *(_QWORD *)&v280 = sub_100016940(v170, v171, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v280, (char *)&v280 + 8, v168 + 14, v168 + 22);
    swift_bridgeObjectRelease();
    v238(v163, v38);
    *(_WORD *)(v168 + 22) = 2082;
    __asm { BR              X10 }
  }
  v173 = (void (*)(uint64_t, uint64_t))v238;
  v238(v163, v38);
  sub_1000126B0(v164, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);

  sub_10001F6FC();
  v210 = v252;
  v211 = v251;
  v212 = v253;
  (*(void (**)(char *, _QWORD, uint64_t))(v252 + 104))(v251, enum case for DispatchQoS.QoSClass.default(_:), v253);
  v213 = (void *)static OS_dispatch_queue.global(qos:)(v211);
  (*(void (**)(char *, uint64_t))(v210 + 8))(v211, v212);
  v214 = swift_allocObject(&unk_101081FC0, 32, 7);
  v215 = v255;
  *(_QWORD *)(v214 + 16) = v254;
  *(_QWORD *)(v214 + 24) = v215;
  v278 = (uint64_t (*)(_QWORD))sub_1005FD5F4;
  v279 = v214;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  v275 = 1107296256;
  v276 = sub_100016FB8;
  v277 = &unk_101081FD8;
  v216 = _Block_copy(&aBlock);
  v217 = swift_retain();
  v218 = v256;
  static DispatchQoS.unspecified.getter(v217);
  *(_QWORD *)&v280 = _swiftEmptyArrayStorage;
  v219 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v220 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v221 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v222 = v220;
  v223 = v248;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v280, v222, v221, v248, v219);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v218, v119, v216);
  _Block_release(v216);

  (*(void (**)(char *, uint64_t))(v258 + 8))(v119, v223);
  (*(void (**)(char *, uint64_t))(v257 + 8))(v218, v259);
  sub_1000126B0(v245, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v173(v104, v38);
  return swift_release();
}

uint64_t sub_1005F2AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  id v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t, uint64_t);
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  id v90[2];

  v79 = a3;
  v81 = a1;
  v9 = type metadata accessor for UUID(0);
  v86 = *(_QWORD *)(v9 - 8);
  v87 = v9;
  v88 = *(_QWORD *)(v86 + 64);
  __chkstk_darwin(v9);
  v85 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v76 = *(_QWORD *)(v11 - 8);
  v77 = v11;
  __chkstk_darwin(v11);
  v68 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v13);
  v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_10001A9A8(&qword_101100B50);
  v71 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_101100B58);
  v19 = *(_QWORD *)(v18 - 8);
  v73 = v18;
  v74 = v19;
  __chkstk_darwin(v18);
  v67 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_101100B60);
  v80 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v70 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8(&qword_101100B68);
  v23 = *(_QWORD *)(v22 - 8);
  v83 = v22;
  v84 = v23;
  v24 = __chkstk_darwin(v22);
  v72 = (char *)&v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = Transaction.subscriptionCleaner.getter(v24);
  v75 = a2;
  v26 = (void *)sub_1005E9C08(a3, a4);
  v89 = *(id *)(a2 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  v27 = v89;
  v90[0] = v26;
  v28 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v66 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v66(v15, 1, 1, v28);
  v29 = v27;
  v30 = sub_10001A9A8(&qword_101100AA0);
  v31 = sub_10001F6FC();
  v32 = sub_1000193A4(&qword_101100AB0, &qword_101100AA0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v33 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v89, v15, v30, v31, v32, v33);
  sub_100004048((uint64_t)v15, &qword_1010EECC8);

  v34 = swift_release();
  v35 = v68;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v34, a5);
  v90[0] = v29;
  v66(v15, 1, 1, v28);
  v36 = sub_1000193A4(&qword_101100B70, &qword_101100B50, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v37 = v29;
  v64 = v33;
  v38 = v67;
  v39 = v69;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v35, v90, v15, sub_1005E396C, 0, v69, v31, v36, v64);
  sub_100004048((uint64_t)v15, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v76 + 8))(v35, v77);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v17, v39);
  v40 = sub_10001A9A8(&qword_101100AA8);
  v41 = sub_1000193A4(&qword_101100B78, &qword_101100B58, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  v42 = v70;
  v43 = v73;
  Publisher.map<A>(_:)(sub_1005E395C, 0, v73, v40, v41);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v38, v43);
  v44 = sub_10001A9A8(&qword_101100AB8);
  v45 = sub_1000193A4(&qword_101100B80, &qword_101100B60, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v46 = sub_1000193A4(&qword_101100AC8, &qword_101100AB8, (const char *)&protocol conformance descriptor for Just<A>);
  v47 = v72;
  v48 = v78;
  Publisher.catch<A>(_:)(sub_1005E3960, 0, v78, v44, v45, v46);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v42, v48);
  v49 = swift_allocObject(&unk_101081E08, 24, 7);
  swift_unknownObjectWeakInit(v49 + 16, v75);
  v51 = v85;
  v50 = v86;
  v52 = v87;
  (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v85, v79, v87);
  v53 = *(unsigned __int8 *)(v50 + 80);
  v54 = v50;
  v55 = (v53 + 32) & ~v53;
  v56 = (v88 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
  v57 = swift_allocObject(&unk_101082010, v56 + 8, v53 | 7);
  v58 = v81;
  *(_QWORD *)(v57 + 16) = v81;
  *(_QWORD *)(v57 + 24) = v49;
  (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v57 + v55, v51, v52);
  v59 = v82;
  *(_QWORD *)(v57 + v56) = v82;
  v60 = sub_1000193A4(&qword_101100B88, &qword_101100B68, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  v61 = v59;
  swift_unknownObjectRetain(v59);
  v62 = v83;
  Publisher<>.sink(receiveValue:)(sub_1005FB078, v57, v83, v60);
  swift_release();
  (*(void (**)(char *, uint64_t))(v84 + 8))(v47, v62);
  AnyCancellable.store(in:)(v58);
  swift_unknownObjectRelease(v61);
  return swift_release();
}

uint64_t sub_1005F3118@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  v5 = sub_10001A9A8(&qword_101100AA8);
  return swift_storeEnumTagMultiPayload(a2, v5, 0);
}

uint64_t sub_1005F3170(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v8;

  v3 = sub_10001A9A8(a2);
  __chkstk_darwin(v3);
  v5 = (unint64_t *)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *a1;
  *v5 = v6;
  swift_storeEnumTagMultiPayload(v5, v3, 1);
  sub_1005FAC50(v6);
  return Just.init(_:)(v5, v3);
}

uint64_t sub_1005F3204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  void *v23;
  uint64_t *v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73[24];
  char v74[24];

  v70 = a4;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v68 = v6;
  v69 = v7;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v65 - v11;
  v13 = sub_10001A9A8(&qword_101100AA8);
  __chkstk_darwin(v13);
  v15 = (unint64_t *)((char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_10001A9A8(&qword_1010EF1D8);
  __chkstk_darwin(v16);
  v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v67 = (uint64_t)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  Transaction.capture()();
  swift_beginAccess(a3, v74, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a3);
  if (result)
  {
    v23 = (void *)result;
    v24 = (uint64_t *)(result + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
    v25 = swift_beginAccess(result + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v73, 0, 0);
    v26 = *v24;
    if (!*(_QWORD *)(v26 + 16))
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v20 + 56))(v18, 1, 1, v19, v25);
LABEL_8:

      return sub_100004048((uint64_t)v18, &qword_1010EF1D8);
    }
    swift_bridgeObjectRetain(v26);
    v27 = sub_100003FB0(v70);
    if ((v28 & 1) != 0)
    {
      sub_10005972C(*(_QWORD *)(v26 + 56) + *(_QWORD *)(v20 + 72) * v27, (uint64_t)v18, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      v29 = 0;
    }
    else
    {
      v29 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, v29, 1, v19);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
      goto LABEL_8;
    v30 = v67;
    sub_1000126EC((uint64_t)v18, v67, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    sub_10000F9B8(a1, (uint64_t)v15, &qword_101100AA8);
    if (swift_getEnumCaseMultiPayload(v15, v13) == 1)
    {
      v31 = *v15;
      v32 = v68;
      v33 = v69;
      if (qword_1010E9D28 != -1)
        swift_once(&qword_1010E9D28, sub_1005D439C);
      v34 = type metadata accessor for Logger(0);
      sub_10001A9E8(v34, (uint64_t)qword_1011B71E0);
      (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v10, v70, v32);
      sub_1005FAC50(v31);
      v35 = sub_1005FAC50(v31);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.error.getter(v36);
      v38 = v37;
      if (os_log_type_enabled(v36, v37))
      {
        v39 = swift_slowAlloc(32, -1);
        LODWORD(v65) = v38;
        v40 = v39;
        v41 = swift_slowAlloc(64, -1);
        v66 = v41;
        *(_DWORD *)v40 = 141558531;
        v71 = 1752392040;
        v72 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v40 + 4, v40 + 12);
        *(_WORD *)(v40 + 12) = 2081;
        v42 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v43 = dispatch thunk of CustomStringConvertible.description.getter(v32, v42);
        v71 = sub_100016940(v43, v44, &v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v40 + 14, v40 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v69 + 8))(v10, v32);
        *(_WORD *)(v40 + 22) = 2080;
        v71 = v31;
        sub_1005FAC50(v31);
        v45 = String.init<A>(describing:)(&v71, &type metadata for SoundPlaybackManager.SoundPlaybackManagerError);
        v71 = sub_100016940(v45, v46, &v72);
        v30 = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v40 + 24, v40 + 32);
        swift_bridgeObjectRelease();
        sub_1005FAC60(v31);
        sub_1005FAC60(v31);
        _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v65, "Stop sound failed for %{private,mask.hash}s. Error %s", (uint8_t *)v40, 0x20u);
        v47 = v66;
        swift_arrayDestroy(v66, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v40, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v32);
        sub_1005FAC60(v31);
        sub_1005FAC60(v31);
      }

      v61 = sub_1005FA87C();
      v62 = swift_allocError(&type metadata for SoundPlaybackManager.SoundPlaybackManagerError, v61, 0, 0);
      *v63 = v31;
      v64 = *(int *)(v19 + 36);
      swift_errorRelease(*(_QWORD *)(v30 + v64));
      *(_QWORD *)(v30 + v64) = v62;
    }
    else
    {
      v48 = v68;
      v49 = v69;
      if (qword_1010E9D28 != -1)
        swift_once(&qword_1010E9D28, sub_1005D439C);
      v50 = type metadata accessor for Logger(0);
      sub_10001A9E8(v50, (uint64_t)qword_1011B71E0);
      v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 16))(v12, v70, v48);
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.default.getter(v52);
      if (os_log_type_enabled(v52, v53))
      {
        v54 = swift_slowAlloc(22, -1);
        v55 = swift_slowAlloc(32, -1);
        v66 = v55;
        *(_DWORD *)v54 = 141558275;
        v71 = 1752392040;
        v72 = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v54 + 4, v54 + 12);
        *(_WORD *)(v54 + 12) = 2081;
        v65 = v54 + 14;
        v56 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v57 = v68;
        v58 = dispatch thunk of CustomStringConvertible.description.getter(v68, v56);
        v71 = sub_100016940(v58, v59, &v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v65, v54 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v69 + 8))(v12, v57);
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Stop sound completed successfully for %{private,mask.hash}s", (uint8_t *)v54, 0x16u);
        v60 = v66;
        swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1, -1);
        swift_slowDealloc(v54, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v49 + 8))(v12, v48);
      }

      sub_100004048((uint64_t)v15, &qword_101100AA8);
    }
    sub_1005E2F5C(v70, 1, 0);

    return sub_1000126B0(v30, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  }
  return result;
}

uint64_t sub_1005F3920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  id v23;
  uint64_t v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t);
  _QWORD *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(_BYTE *, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(_BYTE *, uint64_t);
  void *v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, _BYTE *, uint64_t);
  id v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v60[4];
  int v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v67 = a3;
  v68 = a4;
  v71 = a1;
  v72 = a2;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v60[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v7);
  v12 = &v60[-v11];
  v13 = __chkstk_darwin(v10);
  v70 = &v60[-v14];
  v65 = v15;
  __chkstk_darwin(v13);
  v17 = &v60[-v16];
  v18 = type metadata accessor for DispatchPredicate(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = &v60[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v66 = v4;
  v22 = *(void **)&v4[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
  *v21 = v22;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v19 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v18);
  v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v21);
  (*(void (**)(_QWORD *, uint64_t))(v19 + 8))(v21, v18);
  if ((v22 & 1) != 0)
  {
    if (qword_1010E9D28 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010E9D28, sub_1005D439C);
LABEL_3:
  v64 = v9;
  v24 = type metadata accessor for Logger(0);
  sub_10001A9E8(v24, (uint64_t)qword_1011B71E0);
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16);
  v25(v17, v71, v5);
  v26 = v70;
  v27 = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))v25)(v70, v72, v5);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  v30 = v29;
  v31 = os_log_type_enabled(v28, v29);
  v69 = v12;
  v63 = v6;
  if (v31)
  {
    v32 = swift_slowAlloc(32, -1);
    v33 = swift_slowAlloc(64, -1);
    v62 = v33;
    *(_DWORD *)v32 = 141558531;
    v73 = 1752392040;
    v74 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v32 + 4, v32 + 12);
    *(_WORD *)(v32 + 12) = 2081;
    v34 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v61 = v30;
    v35 = dispatch thunk of CustomStringConvertible.description.getter(v5, v34);
    v73 = sub_100016940(v35, v36, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v32 + 14, v32 + 22);
    swift_bridgeObjectRelease();
    v37 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
    v37(v17, v5);
    *(_WORD *)(v32 + 22) = 2082;
    v38 = v70;
    v39 = dispatch thunk of CustomStringConvertible.description.getter(v5, v34);
    v73 = sub_100016940(v39, v40, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v32 + 24, v32 + 32);
    swift_bridgeObjectRelease();
    v37(v38, v5);
    v12 = v69;
    _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v61, "SPPlaySound play sound on device %{private,mask.hash}s commandId: %{public}s.", (uint8_t *)v32, 0x20u);
    v41 = v62;
    swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    v42 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
    v42(v17, v5);
    v42(v26, v5);
  }

  v43 = v66;
  v70 = sub_10001AA44(&v66[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_findMyCommandManager], *(_QWORD *)&v66[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_findMyCommandManager + 24]);
  v44 = v71;
  v25(v12, v71, v5);
  v45 = v64;
  v46 = v72;
  v25(v64, v72, v5);
  v47 = v5;
  v48 = v63;
  v49 = *(unsigned __int8 *)(v63 + 80);
  v50 = (v49 + 16) & ~v49;
  v51 = (v65 + v49 + v50) & ~v49;
  v52 = (v65 + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
  v53 = swift_allocObject(&unk_101082308, v52 + 8, v49 | 7);
  v54 = v53 + v50;
  v55 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v48 + 32);
  v55(v54, v69, v47);
  v55(v53 + v51, v45, v47);
  *(_QWORD *)(v53 + v52) = v43;
  v56 = v43;
  sub_10046CB00(v44, v46, v67, (uint64_t)sub_1005FC3C8, v53);
  swift_release();
  v74 = v68;
  v57 = sub_10001A9A8(&qword_101100B40);
  v58 = sub_1000193A4(&qword_101100B48, &qword_101100B40, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v57, v58);
}

uint64_t sub_1005F3DFC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD aBlock[6];
  _QWORD *v37;

  v29 = a4;
  v32 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v30 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v8 - 8);
  v34 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(_QWORD *)&a2[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject(&unk_101082330, v17 + 8, v15 | 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v18 + v16, v14, v11);
  v19 = v29;
  *(_QWORD *)(v18 + v17) = v29;
  aBlock[4] = sub_1005FC524;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101082348;
  v20 = _Block_copy(aBlock);
  swift_retain();
  v21 = a2;
  v22 = swift_errorRetain(v19);
  static DispatchQoS.unspecified.getter(v22);
  v37 = _swiftEmptyArrayStorage;
  v23 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v25 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v26 = v30;
  v27 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v24, v25, v32, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v26, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v26, v27);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v34);
  return swift_release();
}

void sub_1005F40A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  unint64_t v52;
  os_log_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  const char *v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint32_t v95;
  char *v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  int v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  os_log_type_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  NSObject *v127;
  os_log_type_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  os_log_t v134;
  int v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t (*v145)(char *, uint64_t, uint64_t);
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _BYTE v151[16];
  uint64_t v152;
  uint64_t v153[3];
  uint64_t v154;
  uint64_t v155;

  v3 = v2;
  v138 = a2;
  v5 = sub_10001A9A8(&qword_1010EF1D8);
  __chkstk_darwin(v5);
  v146 = (char *)&v134 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v7);
  v9 = (char *)&v134 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v147 - 8);
  v11 = __chkstk_darwin(v147);
  v143 = (char *)&v134 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v139 = (char *)&v134 - v14;
  v15 = __chkstk_darwin(v13);
  v137 = (char *)&v134 - v16;
  v17 = __chkstk_darwin(v15);
  v142 = (char *)&v134 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v134 - v20;
  v22 = __chkstk_darwin(v19);
  v141 = (char *)&v134 - v23;
  v24 = __chkstk_darwin(v22);
  v140 = (char *)&v134 - v25;
  __chkstk_darwin(v24);
  v27 = (char *)&v134 - v26;
  v28 = type metadata accessor for DispatchPredicate(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (os_log_t *)((char *)&v134 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = *(void **)(v3 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  *v31 = v32;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v29 + 104))(v31, enum case for DispatchPredicate.onQueue(_:), v28);
  v33 = v32;
  LOBYTE(v32) = _dispatchPreconditionTest(_:)(v31);
  (*(void (**)(_QWORD *, uint64_t))(v29 + 8))(v31, v28);
  if ((v32 & 1) == 0)
  {
    __break(1u);
    goto LABEL_52;
  }
  v144 = v3;
  v148 = a1;
  sub_10080B648(a1, (uint64_t)v153);
  v34 = v154;
  if (!v154)
  {
    sub_100004048((uint64_t)v153, (uint64_t *)&unk_1010EE310);
    v29 = v147;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v9, 1, 1, v147);
LABEL_10:
    sub_100004048((uint64_t)v9, &qword_1010ED860);
    if (qword_1010E9D28 == -1)
    {
LABEL_11:
      v56 = type metadata accessor for Logger(0);
      sub_10001A9E8(v56, (uint64_t)qword_1011B71E0);
      v40 = v148;
      v145 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
      v57 = v145(v21, v148, v29);
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.default.getter(v58);
      if (os_log_type_enabled(v58, v59))
      {
        v60 = swift_slowAlloc(22, -1);
        v61 = swift_slowAlloc(32, -1);
        v153[0] = v61;
        *(_DWORD *)v60 = 141558275;
        v150 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, v151, v60 + 4, v60 + 12);
        *(_WORD *)(v60 + 12) = 2081;
        v62 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v63 = dispatch thunk of CustomStringConvertible.description.getter(v29, v62);
        v150 = sub_100016940(v63, v64, v153);
        v40 = v148;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, v151, v60 + 14, v60 + 22);
        swift_bridgeObjectRelease();
        v50 = *(void (**)(char *, uint64_t))(v10 + 8);
        v50(v21, v29);
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "didStartPlayingSoundOnDevice %{private,mask.hash}s", (uint8_t *)v60, 0x16u);
        swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v61, -1, -1);
        swift_slowDealloc(v60, -1, -1);
      }
      else
      {
        v50 = *(void (**)(char *, uint64_t))(v10 + 8);
        v50(v21, v29);
      }

      goto LABEL_16;
    }
LABEL_52:
    swift_once(&qword_1010E9D28, sub_1005D439C);
    goto LABEL_11;
  }
  v35 = v155;
  sub_10001AA44(v153, v154);
  (*(void (**)(uint64_t, uint64_t))(v35 + 192))(v34, v35);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v153);
  v29 = v147;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v147) == 1)
    goto LABEL_10;
  v36 = v27;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v27, v9, v29);
  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v37 = type metadata accessor for Logger(0);
  sub_10001A9E8(v37, (uint64_t)qword_1011B71E0);
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v39 = v140;
  v40 = v148;
  v38(v140, v148, v29);
  v41 = v141;
  v145 = (uint64_t (*)(char *, uint64_t, uint64_t))v38;
  v42 = ((uint64_t (*)(char *, char *, uint64_t))v38)(v141, v36, v29);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.default.getter(v43);
  v45 = v44;
  if (os_log_type_enabled(v43, v44))
  {
    v46 = swift_slowAlloc(32, -1);
    v136 = swift_slowAlloc(64, -1);
    v153[0] = v136;
    *(_DWORD *)v46 = 141558531;
    v150 = 1752392040;
    v135 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, v151, v46 + 4, v46 + 12);
    *(_WORD *)(v46 + 12) = 2081;
    v47 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v134 = v43;
    v48 = dispatch thunk of CustomStringConvertible.description.getter(v29, v47);
    v150 = sub_100016940(v48, v49, v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, v151, v46 + 14, v46 + 22);
    swift_bridgeObjectRelease();
    v50 = *(void (**)(char *, uint64_t))(v10 + 8);
    v50(v39, v29);
    *(_WORD *)(v46 + 22) = 2082;
    v51 = dispatch thunk of CustomStringConvertible.description.getter(v29, v47);
    v150 = sub_100016940(v51, v52, v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, v151, v46 + 24, v46 + 32);
    swift_bridgeObjectRelease();
    v50(v41, v29);
    v53 = v134;
    _os_log_impl((void *)&_mh_execute_header, v134, (os_log_type_t)v135, "didStartPlayingSoundOnDevice %{private,mask.hash}s. groupId %{public}s", (uint8_t *)v46, 0x20u);
    v54 = v136;
    swift_arrayDestroy(v136, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    v55 = v46;
    v40 = v148;
    swift_slowDealloc(v55, -1, -1);

  }
  else
  {

    v50 = *(void (**)(char *, uint64_t))(v10 + 8);
    v50(v41, v29);
    v50(v39, v29);
  }
  v50(v36, v29);
LABEL_16:
  v65 = v144;
  v66 = (uint64_t)v146;
  v67 = (uint64_t *)(v144 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  swift_beginAccess(v144 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v153, 0, 0);
  v68 = *v67;
  if (!*(_QWORD *)(v68 + 16))
  {
    v76 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v66, 1, 1, v76);
LABEL_22:
    sub_100004048(v66, &qword_1010EF1D8);
    if (qword_1010E9D28 != -1)
      swift_once(&qword_1010E9D28, sub_1005D439C);
    v78 = type metadata accessor for Logger(0);
    sub_10001A9E8(v78, (uint64_t)qword_1011B71E0);
    v79 = v143;
    v80 = v145(v143, v40, v29);
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.error.getter(v81);
    if (os_log_type_enabled(v81, v82))
    {
      v83 = v29;
      v84 = v50;
      v85 = v79;
      v86 = swift_slowAlloc(12, -1);
      v87 = swift_slowAlloc(32, -1);
      v150 = v87;
      *(_DWORD *)v86 = 136315138;
      v88 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v89 = dispatch thunk of CustomStringConvertible.description.getter(v83, v88);
      v152 = sub_100016940(v89, v90, &v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v86 + 4, v86 + 12);
      swift_bridgeObjectRelease();
      v84(v85, v83);
      v91 = "didStartPlayingSoundOnDevice called with unknown device %s";
      v92 = v81;
      v93 = v82;
      v94 = (uint8_t *)v86;
      v95 = 12;
LABEL_39:
      _os_log_impl((void *)&_mh_execute_header, v92, v93, v91, v94, v95);
      swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v87, -1, -1);
      swift_slowDealloc(v86, -1, -1);
LABEL_42:

      return;
    }
    v96 = v79;
    goto LABEL_41;
  }
  swift_bridgeObjectRetain(v68);
  v69 = sub_100003FB0(v40);
  if ((v70 & 1) != 0)
  {
    v71 = v69;
    v72 = *(_QWORD *)(v68 + 56);
    v73 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
    v74 = *(_QWORD *)(v73 - 8);
    v75 = v72 + *(_QWORD *)(v74 + 72) * v71;
    v29 = v147;
    sub_10005972C(v75, v66, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v74 + 56))(v66, 0, 1, v73);
  }
  else
  {
    v73 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v66, 1, 1, v73);
  }
  v77 = v142;
  swift_bridgeObjectRelease();
  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 48))(v66, 1, v73) == 1)
    goto LABEL_22;
  sub_100004048(v66, &qword_1010EF1D8);
  v97 = (uint64_t *)(v65 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_playSoundSubjects);
  swift_beginAccess(v65 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_playSoundSubjects, &v150, 0, 0);
  v98 = *v97;
  if (!*(_QWORD *)(v98 + 16))
  {
LABEL_35:
    if (qword_1010E9D28 != -1)
      swift_once(&qword_1010E9D28, sub_1005D439C);
    v117 = type metadata accessor for Logger(0);
    sub_10001A9E8(v117, (uint64_t)qword_1011B71E0);
    v118 = v139;
    v119 = v145(v139, v40, v29);
    v81 = Logger.logObject.getter(v119);
    v120 = static os_log_type_t.error.getter(v81);
    if (os_log_type_enabled(v81, v120))
    {
      v86 = swift_slowAlloc(22, -1);
      v87 = swift_slowAlloc(32, -1);
      v152 = v87;
      *(_DWORD *)v86 = 141558275;
      v149 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v86 + 4, v86 + 12);
      *(_WORD *)(v86 + 12) = 2081;
      v121 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v122 = dispatch thunk of CustomStringConvertible.description.getter(v29, v121);
      v149 = sub_100016940(v122, v123, &v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v86 + 14, v86 + 22);
      swift_bridgeObjectRelease();
      v50(v118, v29);
      v91 = "Missing playSoundSubject for device %{private,mask.hash}s!";
      v92 = v81;
      v93 = v120;
      v94 = (uint8_t *)v86;
      v95 = 22;
      goto LABEL_39;
    }
    v96 = v118;
LABEL_41:
    v50(v96, v29);
    goto LABEL_42;
  }
  swift_bridgeObjectRetain(v98);
  v99 = sub_100003FB0(v40);
  if ((v100 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  v101 = *(_QWORD *)(*(_QWORD *)(v98 + 56) + 8 * v99);
  swift_retain();
  swift_bridgeObjectRelease();
  v102 = v138;
  if (v138)
  {
    swift_errorRetain(v138);
    if (qword_1010E9D28 != -1)
      swift_once(&qword_1010E9D28, sub_1005D439C);
    v103 = type metadata accessor for Logger(0);
    sub_10001A9E8(v103, (uint64_t)qword_1011B71E0);
    v145(v77, v40, v29);
    swift_errorRetain(v102);
    v104 = swift_errorRetain(v102);
    v105 = Logger.logObject.getter(v104);
    v106 = static os_log_type_t.error.getter(v105);
    v107 = v106;
    if (os_log_type_enabled(v105, v106))
    {
      v108 = v77;
      v109 = swift_slowAlloc(32, -1);
      v148 = swift_slowAlloc(64, -1);
      v152 = v148;
      *(_DWORD *)v109 = 141558531;
      v149 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v109 + 4, v109 + 12);
      *(_WORD *)(v109 + 12) = 2081;
      v110 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      LODWORD(v147) = v107;
      v111 = dispatch thunk of CustomStringConvertible.description.getter(v29, v110);
      v149 = sub_100016940(v111, v112, &v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v109 + 14, v109 + 22);
      swift_bridgeObjectRelease();
      v50(v108, v29);
      *(_WORD *)(v109 + 22) = 2082;
      v149 = v102;
      swift_errorRetain(v102);
      v113 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v114 = String.init<A>(describing:)(&v149, v113);
      v149 = sub_100016940(v114, v115, &v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v109 + 24, v109 + 32);
      swift_bridgeObjectRelease();
      swift_errorRelease(v102);
      swift_errorRelease(v102);
      _os_log_impl((void *)&_mh_execute_header, v105, (os_log_type_t)v147, "didStartPlayingSoundOnDevice %{private,mask.hash}s failed due to %{public}s", (uint8_t *)v109, 0x20u);
      v116 = v148;
      swift_arrayDestroy(v148, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v116, -1, -1);
      swift_slowDealloc(v109, -1, -1);
    }
    else
    {
      v50(v77, v29);
      swift_errorRelease(v102);
      swift_errorRelease(v102);
    }

    v152 = v102;
    swift_errorRetain(v102);
    PassthroughSubject.send(completion:)(&v152);
    swift_release();
    swift_errorRelease(v102);
    swift_errorRelease(v102);
  }
  else
  {
    if (qword_1010E9D28 != -1)
      swift_once(&qword_1010E9D28, sub_1005D439C);
    v124 = type metadata accessor for Logger(0);
    sub_10001A9E8(v124, (uint64_t)qword_1011B71E0);
    v125 = v137;
    v126 = v145(v137, v40, v29);
    v127 = Logger.logObject.getter(v126);
    v128 = static os_log_type_t.default.getter(v127);
    if (os_log_type_enabled(v127, v128))
    {
      v129 = swift_slowAlloc(22, -1);
      v130 = swift_slowAlloc(32, -1);
      v152 = v130;
      *(_DWORD *)v129 = 141558275;
      v149 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v129 + 4, v129 + 12);
      *(_WORD *)(v129 + 12) = 2081;
      v147 = v101;
      v131 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v132 = dispatch thunk of CustomStringConvertible.description.getter(v29, v131);
      v149 = sub_100016940(v132, v133, &v152);
      v40 = v148;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v129 + 14, v129 + 22);
      swift_bridgeObjectRelease();
      v50(v125, v29);
      _os_log_impl((void *)&_mh_execute_header, v127, v128, "didStartPlayingSoundOnDevice %{private,mask.hash}s succeeded", (uint8_t *)v129, 0x16u);
      swift_arrayDestroy(v130, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v130, -1, -1);
      swift_slowDealloc(v129, -1, -1);
    }
    else
    {
      v50(v125, v29);
    }

    PassthroughSubject.send(_:)(v40);
    v152 = 4;
    PassthroughSubject.send(completion:)(&v152);
    swift_release();
  }
}

uint64_t sub_1005F511C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  uint64_t v20;
  void (*v21)(_BYTE *, uint64_t, uint64_t);
  _QWORD *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void (*v33)(_BYTE *, uint64_t);
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void (*v38)(_BYTE *, uint64_t);
  void *v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, _BYTE *, uint64_t);
  id v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v56[12];
  int v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE *v60;
  uint64_t v61;
  _BYTE *v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v64 = a3;
  v66 = a2;
  v67 = a1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD **)(v4 - 8);
  v6 = v5[8];
  v7 = __chkstk_darwin(v4);
  v8 = __chkstk_darwin(v7);
  v62 = &v56[-v9];
  v10 = __chkstk_darwin(v8);
  v65 = &v56[-v11];
  __chkstk_darwin(v10);
  v13 = &v56[-v12];
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = &v56[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v63 = v3;
  v18 = *(void **)&v3[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
  *v17 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) != 0)
  {
    v61 = v6;
    if (qword_1010E9D28 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010E9D28, sub_1005D439C);
LABEL_3:
  v60 = &v56[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = type metadata accessor for Logger(0);
  sub_10001A9E8(v20, (uint64_t)qword_1011B71E0);
  v21 = (void (*)(_BYTE *, uint64_t, uint64_t))v5[2];
  v21(v13, v67, v4);
  v22 = v65;
  v23 = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))v21)(v65, v66, v4);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter(v24);
  v26 = v25;
  v27 = os_log_type_enabled(v24, v25);
  v59 = v5;
  if (v27)
  {
    v28 = swift_slowAlloc(32, -1);
    v29 = swift_slowAlloc(64, -1);
    v58 = v29;
    *(_DWORD *)v28 = 141558531;
    v68 = 1752392040;
    v69 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v28 + 4, v28 + 12);
    *(_WORD *)(v28 + 12) = 2081;
    v30 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v57 = v26;
    v31 = dispatch thunk of CustomStringConvertible.description.getter(v4, v30);
    v68 = sub_100016940(v31, v32, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease();
    v33 = (void (*)(_BYTE *, uint64_t))v5[1];
    v33(v13, v4);
    *(_WORD *)(v28 + 22) = 2082;
    v34 = v65;
    v35 = dispatch thunk of CustomStringConvertible.description.getter(v4, v30);
    v68 = sub_100016940(v35, v36, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v28 + 24, v28 + 32);
    swift_bridgeObjectRelease();
    v33(v34, v4);
    _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v57, "SPPlaySound stop sound on device %{private,mask.hash}s commandId: %{public}s.", (uint8_t *)v28, 0x20u);
    v37 = v58;
    swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    v38 = (void (*)(_BYTE *, uint64_t))v5[1];
    v38(v13, v4);
    v38(v22, v4);
  }

  v39 = v63;
  v65 = sub_10001AA44(&v63[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_findMyCommandManager], *(_QWORD *)&v63[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_findMyCommandManager + 24]);
  v40 = v62;
  v21(v62, v67, v4);
  v41 = v60;
  v42 = v66;
  v21(v60, v66, v4);
  v43 = v4;
  v44 = v59;
  v45 = *((unsigned __int8 *)v59 + 80);
  v46 = (v45 + 16) & ~v45;
  v47 = (v61 + v45 + v46) & ~v45;
  v48 = (v61 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
  v49 = swift_allocObject(&unk_101081E80, v48 + 8, v45 | 7);
  v50 = v49 + v46;
  v51 = (void (*)(uint64_t, _BYTE *, uint64_t))v44[4];
  v51(v50, v40, v43);
  v51(v49 + v47, v41, v43);
  *(_QWORD *)(v49 + v48) = v39;
  v52 = v39;
  sub_10046CFB4(v67, v42, (uint64_t)sub_1005FAD84, v49);
  swift_release();
  v69 = v64;
  v53 = sub_10001A9A8(&qword_101100B40);
  v54 = sub_1000193A4(&qword_101100B48, &qword_101100B40, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v53, v54);
}

void sub_1005F55EC(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, const char *a5, uint64_t a6, const char *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v64 = a5;
  v65 = a4;
  v66 = a2;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v60 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v60 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v60 - v22;
  if (a1)
  {
    v63 = a6;
    swift_errorRetain(a1);
    if (qword_1010E9D28 != -1)
      swift_once(&qword_1010E9D28, sub_1005D439C);
    v24 = type metadata accessor for Logger(0);
    sub_10001A9E8(v24, (uint64_t)qword_1011B71E0);
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v25(v18, v66, v11);
    v25(v15, a3, v11);
    swift_errorRetain(a1);
    v26 = swift_errorRetain(a1);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    v29 = v28;
    if (os_log_type_enabled(v27, v28))
    {
      v30 = swift_slowAlloc(42, -1);
      v31 = swift_slowAlloc(96, -1);
      v62 = v31;
      *(_DWORD *)v30 = 141558787;
      v67 = 1752392040;
      v68 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v30 + 4, v30 + 12);
      *(_WORD *)(v30 + 12) = 2081;
      v60 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v61 = v29;
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v11, v60);
      v67 = sub_100016940(v32, v33, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v30 + 14, v30 + 22);
      swift_bridgeObjectRelease();
      v34 = *(void (**)(char *, uint64_t))(v12 + 8);
      v34(v18, v11);
      *(_WORD *)(v30 + 22) = 2082;
      v67 = a1;
      swift_errorRetain(a1);
      v35 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v36 = String.init<A>(describing:)(&v67, v35);
      v67 = sub_100016940(v36, v37, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v30 + 24, v30 + 32);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      *(_WORD *)(v30 + 32) = 2082;
      v38 = dispatch thunk of CustomStringConvertible.description.getter(v11, v60);
      v67 = sub_100016940(v38, v39, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v30 + 34, v30 + 42);
      swift_bridgeObjectRelease();
      v34(v15, v11);
      _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v61, v64, (uint8_t *)v30, 0x2Au);
      v40 = v62;
      swift_arrayDestroy(v62, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {
      v56 = *(void (**)(char *, uint64_t))(v12 + 8);
      v56(v18, v11);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      v56(v15, v11);
    }

    v57 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v57);
    v58 = v66;
    *(&v60 - 4) = (uint64_t)v65;
    *(&v60 - 3) = v58;
    *(&v60 - 2) = a1;
    static Transaction.named<A>(_:with:)("SoundPlaybackManager.SPPlaySound", 32, 2, v63, &v60 - 6);
    swift_errorRelease(a1);
  }
  else
  {
    v65 = a7;
    if (qword_1010E9D28 != -1)
      swift_once(&qword_1010E9D28, sub_1005D439C);
    v41 = type metadata accessor for Logger(0);
    sub_10001A9E8(v41, (uint64_t)qword_1011B71E0);
    v42 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v42(v23, v66, v11);
    v43 = ((uint64_t (*)(char *, uint64_t, uint64_t))v42)(v21, a3, v11);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.default.getter(v44);
    v46 = v45;
    if (os_log_type_enabled(v44, v45))
    {
      v47 = swift_slowAlloc(32, -1);
      v48 = swift_slowAlloc(64, -1);
      v66 = v48;
      *(_DWORD *)v47 = 141558531;
      v67 = 1752392040;
      v68 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v47 + 4, v47 + 12);
      *(_WORD *)(v47 + 12) = 2081;
      v49 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      LODWORD(v64) = v46;
      v50 = dispatch thunk of CustomStringConvertible.description.getter(v11, v49);
      v67 = sub_100016940(v50, v51, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v47 + 14, v47 + 22);
      swift_bridgeObjectRelease();
      v52 = *(void (**)(char *, uint64_t))(v12 + 8);
      v52(v23, v11);
      *(_WORD *)(v47 + 22) = 2082;
      v53 = dispatch thunk of CustomStringConvertible.description.getter(v11, v49);
      v67 = sub_100016940(v53, v54, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v47 + 24, v47 + 32);
      swift_bridgeObjectRelease();
      v52(v21, v11);
      _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v64, v65, (uint8_t *)v47, 0x20u);
      v55 = v66;
      swift_arrayDestroy(v66, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v47, -1, -1);
    }
    else
    {
      v59 = *(void (**)(char *, uint64_t))(v12 + 8);
      v59(v23, v11);
      v59(v21, v11);
    }

  }
}

uint64_t sub_1005F5C40(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];
  _QWORD *v36;

  v29 = a4;
  v31 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v8 - 8);
  v33 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(_QWORD *)&a2[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 24) & ~v15;
  v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject(&unk_101081EA8, v17 + 8, v15 | 7);
  *(_QWORD *)(v18 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v18 + v16, v14, v11);
  v19 = v29;
  *(_QWORD *)(v18 + v17) = v29;
  aBlock[4] = sub_1005FAE4C;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101081EC0;
  v20 = _Block_copy(aBlock);
  v21 = a2;
  v22 = swift_errorRetain(v19);
  static DispatchQoS.unspecified.getter(v22);
  v36 = _swiftEmptyArrayStorage;
  v23 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v25 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v26 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v24, v25, v31, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v26);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v33);
  return swift_release();
}

void sub_1005F5ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  unint64_t v52;
  os_log_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  char v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  const char *v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  int v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  os_log_t v124;
  int v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t (*v134)(char *, uint64_t, uint64_t);
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _BYTE v141[16];
  uint64_t v142;
  uint64_t v143[3];
  uint64_t v144;
  uint64_t v145;

  v3 = v2;
  v128 = a2;
  v5 = sub_10001A9A8(&qword_1010EF1D8);
  __chkstk_darwin(v5);
  v135 = (char *)&v124 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v7);
  v9 = (char *)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v137 - 8);
  v11 = __chkstk_darwin(v137);
  v136 = (char *)&v124 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v129 = (char *)&v124 - v14;
  v15 = __chkstk_darwin(v13);
  v127 = (char *)&v124 - v16;
  v17 = __chkstk_darwin(v15);
  v132 = (char *)&v124 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v124 - v20;
  v22 = __chkstk_darwin(v19);
  v131 = (char *)&v124 - v23;
  v24 = __chkstk_darwin(v22);
  v130 = (char *)&v124 - v25;
  __chkstk_darwin(v24);
  v27 = (char *)&v124 - v26;
  v28 = type metadata accessor for DispatchPredicate(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v31 = (os_log_t *)((char *)&v124 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = *(void **)(v3 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  *v31 = v32;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v29 + 104))(v31, enum case for DispatchPredicate.onQueue(_:), v28);
  v33 = v32;
  LOBYTE(v32) = _dispatchPreconditionTest(_:)(v31);
  (*(void (**)(_QWORD *, uint64_t))(v29 + 8))(v31, v28);
  if ((v32 & 1) == 0)
  {
    __break(1u);
    goto LABEL_50;
  }
  v133 = v3;
  v138 = a1;
  sub_10080B648(a1, (uint64_t)v143);
  v34 = v144;
  if (!v144)
  {
    sub_100004048((uint64_t)v143, (uint64_t *)&unk_1010EE310);
    v29 = v137;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v9, 1, 1, v137);
LABEL_10:
    sub_100004048((uint64_t)v9, &qword_1010ED860);
    if (qword_1010E9D28 == -1)
    {
LABEL_11:
      v56 = type metadata accessor for Logger(0);
      sub_10001A9E8(v56, (uint64_t)qword_1011B71E0);
      v40 = v138;
      v134 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
      v57 = v134(v21, v138, v29);
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.default.getter(v58);
      if (os_log_type_enabled(v58, v59))
      {
        v60 = swift_slowAlloc(22, -1);
        v61 = swift_slowAlloc(32, -1);
        v143[0] = v61;
        *(_DWORD *)v60 = 141558275;
        v140 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v141, v60 + 4, v60 + 12);
        *(_WORD *)(v60 + 12) = 2081;
        v62 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v63 = dispatch thunk of CustomStringConvertible.description.getter(v29, v62);
        v140 = sub_100016940(v63, v64, v143);
        v40 = v138;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v141, v60 + 14, v60 + 22);
        swift_bridgeObjectRelease();
        v50 = *(void (**)(char *, uint64_t))(v10 + 8);
        v50(v21, v29);
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "didStopPlayingSoundOnDevice %{private,mask.hash}s", (uint8_t *)v60, 0x16u);
        swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v61, -1, -1);
        swift_slowDealloc(v60, -1, -1);
      }
      else
      {
        v50 = *(void (**)(char *, uint64_t))(v10 + 8);
        v50(v21, v29);
      }

      goto LABEL_16;
    }
LABEL_50:
    swift_once(&qword_1010E9D28, sub_1005D439C);
    goto LABEL_11;
  }
  v35 = v145;
  sub_10001AA44(v143, v144);
  (*(void (**)(uint64_t, uint64_t))(v35 + 192))(v34, v35);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v143);
  v29 = v137;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v137) == 1)
    goto LABEL_10;
  v36 = v27;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v27, v9, v29);
  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v37 = type metadata accessor for Logger(0);
  sub_10001A9E8(v37, (uint64_t)qword_1011B71E0);
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v39 = v130;
  v40 = v138;
  v38(v130, v138, v29);
  v41 = v131;
  v134 = (uint64_t (*)(char *, uint64_t, uint64_t))v38;
  v42 = ((uint64_t (*)(char *, char *, uint64_t))v38)(v131, v36, v29);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.default.getter(v43);
  v45 = v44;
  if (os_log_type_enabled(v43, v44))
  {
    v46 = swift_slowAlloc(32, -1);
    v126 = swift_slowAlloc(64, -1);
    v143[0] = v126;
    *(_DWORD *)v46 = 141558531;
    v140 = 1752392040;
    v125 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v141, v46 + 4, v46 + 12);
    *(_WORD *)(v46 + 12) = 2081;
    v47 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v124 = v43;
    v48 = dispatch thunk of CustomStringConvertible.description.getter(v29, v47);
    v140 = sub_100016940(v48, v49, v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v141, v46 + 14, v46 + 22);
    swift_bridgeObjectRelease();
    v50 = *(void (**)(char *, uint64_t))(v10 + 8);
    v50(v39, v29);
    *(_WORD *)(v46 + 22) = 2082;
    v51 = dispatch thunk of CustomStringConvertible.description.getter(v29, v47);
    v140 = sub_100016940(v51, v52, v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v141, v46 + 24, v46 + 32);
    swift_bridgeObjectRelease();
    v50(v41, v29);
    v53 = v124;
    _os_log_impl((void *)&_mh_execute_header, v124, (os_log_type_t)v125, "didStopPlayingSoundOnDevice %{private,mask.hash}s. groupId %{public}s", (uint8_t *)v46, 0x20u);
    v54 = v126;
    swift_arrayDestroy(v126, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    v55 = v46;
    v40 = v138;
    swift_slowDealloc(v55, -1, -1);

  }
  else
  {

    v50 = *(void (**)(char *, uint64_t))(v10 + 8);
    v50(v41, v29);
    v50(v39, v29);
  }
  v50(v36, v29);
LABEL_16:
  v65 = v133;
  v66 = (uint64_t)v135;
  v67 = (uint64_t *)(v133 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  swift_beginAccess(v133 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v143, 0, 0);
  v68 = *v67;
  v69 = v136;
  if (!*(_QWORD *)(v68 + 16))
  {
    v77 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v66, 1, 1, v77);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain(v68);
  v70 = sub_100003FB0(v40);
  if ((v71 & 1) != 0)
  {
    v72 = v70;
    v73 = *(_QWORD *)(v68 + 56);
    v74 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
    v75 = *(_QWORD *)(v74 - 8);
    v76 = v73 + *(_QWORD *)(v75 + 72) * v72;
    v29 = v137;
    sub_10005972C(v76, v66, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v75 + 56))(v66, 0, 1, v74);
  }
  else
  {
    v74 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v66, 1, 1, v74);
  }
  v78 = v132;
  swift_bridgeObjectRelease();
  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 48))(v66, 1, v74) == 1)
  {
LABEL_22:
    sub_100004048(v66, &qword_1010EF1D8);
    if (qword_1010E9D28 != -1)
      swift_once(&qword_1010E9D28, sub_1005D439C);
    v79 = type metadata accessor for Logger(0);
    sub_10001A9E8(v79, (uint64_t)qword_1011B71E0);
    v80 = v134(v69, v40, v29);
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.error.getter(v81);
    if (os_log_type_enabled(v81, v82))
    {
      v83 = swift_slowAlloc(22, -1);
      v84 = swift_slowAlloc(32, -1);
      v140 = v84;
      *(_DWORD *)v83 = 141558275;
      v142 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143, v83 + 4, v83 + 12);
      *(_WORD *)(v83 + 12) = 2081;
      v85 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v86 = dispatch thunk of CustomStringConvertible.description.getter(v29, v85);
      v142 = sub_100016940(v86, v87, &v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143, v83 + 14, v83 + 22);
      swift_bridgeObjectRelease();
      v50(v69, v29);
      v88 = "didStopPlayingSoundOnDevice called with unknown device %{private,mask.hash}s";
LABEL_38:
      _os_log_impl((void *)&_mh_execute_header, v81, v82, v88, (uint8_t *)v83, 0x16u);
      swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v83, -1, -1);
LABEL_40:

      return;
    }
    goto LABEL_39;
  }
  sub_100004048(v66, &qword_1010EF1D8);
  v89 = (uint64_t *)(v65 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_stopSoundSubjects);
  swift_beginAccess(v65 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_stopSoundSubjects, &v140, 0, 0);
  v90 = *v89;
  if (!*(_QWORD *)(v90 + 16))
  {
LABEL_34:
    if (qword_1010E9D28 != -1)
      swift_once(&qword_1010E9D28, sub_1005D439C);
    v109 = type metadata accessor for Logger(0);
    sub_10001A9E8(v109, (uint64_t)qword_1011B71E0);
    v69 = v129;
    v110 = v134(v129, v40, v29);
    v81 = Logger.logObject.getter(v110);
    v82 = static os_log_type_t.error.getter(v81);
    if (os_log_type_enabled(v81, v82))
    {
      v83 = swift_slowAlloc(22, -1);
      v84 = swift_slowAlloc(32, -1);
      v142 = v84;
      *(_DWORD *)v83 = 141558275;
      v139 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v83 + 4, v83 + 12);
      *(_WORD *)(v83 + 12) = 2081;
      v111 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v112 = dispatch thunk of CustomStringConvertible.description.getter(v29, v111);
      v139 = sub_100016940(v112, v113, &v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v83 + 14, v83 + 22);
      swift_bridgeObjectRelease();
      v50(v69, v29);
      v88 = "Missing stopSoundSubject for device %{private,mask.hash}s!";
      goto LABEL_38;
    }
LABEL_39:
    v50(v69, v29);
    goto LABEL_40;
  }
  swift_bridgeObjectRetain(v90);
  v91 = sub_100003FB0(v40);
  if ((v92 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  v93 = *(_QWORD *)(*(_QWORD *)(v90 + 56) + 8 * v91);
  swift_retain();
  swift_bridgeObjectRelease();
  v94 = v128;
  if (v128)
  {
    swift_errorRetain(v128);
    if (qword_1010E9D28 != -1)
      swift_once(&qword_1010E9D28, sub_1005D439C);
    v95 = type metadata accessor for Logger(0);
    sub_10001A9E8(v95, (uint64_t)qword_1011B71E0);
    v134(v78, v40, v29);
    swift_errorRetain(v94);
    v96 = swift_errorRetain(v94);
    v97 = Logger.logObject.getter(v96);
    v98 = static os_log_type_t.error.getter(v97);
    v99 = v98;
    if (os_log_type_enabled(v97, v98))
    {
      v100 = v78;
      v101 = swift_slowAlloc(32, -1);
      v138 = swift_slowAlloc(64, -1);
      v142 = v138;
      *(_DWORD *)v101 = 141558531;
      v139 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v101 + 4, v101 + 12);
      *(_WORD *)(v101 + 12) = 2081;
      v102 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      LODWORD(v137) = v99;
      v103 = dispatch thunk of CustomStringConvertible.description.getter(v29, v102);
      v139 = sub_100016940(v103, v104, &v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v101 + 14, v101 + 22);
      swift_bridgeObjectRelease();
      v50(v100, v29);
      *(_WORD *)(v101 + 22) = 2082;
      v139 = v94;
      swift_errorRetain(v94);
      v105 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v106 = String.init<A>(describing:)(&v139, v105);
      v139 = sub_100016940(v106, v107, &v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v101 + 24, v101 + 32);
      swift_bridgeObjectRelease();
      swift_errorRelease(v94);
      swift_errorRelease(v94);
      _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v137, "didStopPlayingSoundOnDevice %{private,mask.hash}s failed due to %{public}s", (uint8_t *)v101, 0x20u);
      v108 = v138;
      swift_arrayDestroy(v138, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v108, -1, -1);
      swift_slowDealloc(v101, -1, -1);
    }
    else
    {
      v50(v78, v29);
      swift_errorRelease(v94);
      swift_errorRelease(v94);
    }

    v142 = v94;
    swift_errorRetain(v94);
    PassthroughSubject.send(completion:)(&v142);
    swift_release();
    swift_errorRelease(v94);
    swift_errorRelease(v94);
  }
  else
  {
    if (qword_1010E9D28 != -1)
      swift_once(&qword_1010E9D28, sub_1005D439C);
    v114 = type metadata accessor for Logger(0);
    sub_10001A9E8(v114, (uint64_t)qword_1011B71E0);
    v115 = v127;
    v116 = v134(v127, v40, v29);
    v117 = Logger.logObject.getter(v116);
    v118 = static os_log_type_t.default.getter(v117);
    if (os_log_type_enabled(v117, v118))
    {
      v119 = swift_slowAlloc(22, -1);
      v120 = swift_slowAlloc(32, -1);
      v142 = v120;
      *(_DWORD *)v119 = 141558275;
      v139 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v119 + 4, v119 + 12);
      *(_WORD *)(v119 + 12) = 2081;
      v137 = v93;
      v121 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v122 = dispatch thunk of CustomStringConvertible.description.getter(v29, v121);
      v139 = sub_100016940(v122, v123, &v142);
      v40 = v138;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v119 + 14, v119 + 22);
      swift_bridgeObjectRelease();
      v50(v115, v29);
      _os_log_impl((void *)&_mh_execute_header, v117, v118, "didStopPlayingSoundOnDevice %{private,mask.hash}s succeeded", (uint8_t *)v119, 0x16u);
      swift_arrayDestroy(v120, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v120, -1, -1);
      swift_slowDealloc(v119, -1, -1);
    }
    else
    {
      v50(v115, v29);
    }

    PassthroughSubject.send(_:)(v40);
    v142 = 4;
    PassthroughSubject.send(completion:)(&v142);
    swift_release();
  }
}

void sub_1005F6F4C(uint64_t a1, uint64_t a2)
{
  __objc2_ivar_list **v2;
  __objc2_ivar_list **p_ivars;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  char *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  os_log_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  const char *v95;
  char *v96;
  __objc2_ivar_list **v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  os_log_type_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void (*v110)(char *, uint64_t);
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  os_log_t v119;
  uint64_t v120;
  char *v121;
  int v122;
  uint64_t (*v123)(char *, uint64_t, uint64_t);
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  void (*v128)(char *, uint64_t);
  __objc2_ivar_list **v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135[3];
  uint64_t v136;
  uint64_t v137;

  p_ivars = v2;
  v126 = a2;
  v5 = sub_10001A9A8(&qword_1010EF1D8);
  __chkstk_darwin(v5);
  v130 = (char *)&v117 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v7);
  v9 = (char *)&v117 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v131 - 8);
  v11 = __chkstk_darwin(v131);
  v132 = (char *)&v117 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v124 = (char *)&v117 - v14;
  v15 = __chkstk_darwin(v13);
  v127 = (char *)&v117 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v117 - v18;
  v20 = __chkstk_darwin(v17);
  v125 = (char *)&v117 - v21;
  v22 = __chkstk_darwin(v20);
  v128 = (void (*)(char *, uint64_t))((char *)&v117 - v23);
  __chkstk_darwin(v22);
  v25 = (char *)&v117 - v24;
  v26 = type metadata accessor for DispatchPredicate(0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (uint64_t *)((char *)&v117 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = *(__objc2_ivar_list **)((char *)p_ivars + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  *v29 = v30;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v27 + 104))(v29, enum case for DispatchPredicate.onQueue(_:), v26);
  v31 = v30;
  v32 = _dispatchPreconditionTest(_:)(v29);
  (*(void (**)(_QWORD *, uint64_t))(v27 + 8))(v29, v26);
  if ((v32 & 1) == 0)
  {
    __break(1u);
    goto LABEL_41;
  }
  v129 = p_ivars;
  sub_10080B648(a1, (uint64_t)v135);
  v33 = v136;
  p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
  v32 = a1;
  if (!v136)
  {
    sub_100004048((uint64_t)v135, (uint64_t *)&unk_1010EE310);
    v29 = (_QWORD *)v10;
    v27 = v131;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v9, 1, 1, v131);
LABEL_9:
    sub_100004048((uint64_t)v9, &qword_1010ED860);
    if (qword_1010E9D28 == -1)
    {
LABEL_10:
      v59 = type metadata accessor for Logger(0);
      sub_10001A9E8(v59, (uint64_t)qword_1011B71E0);
      v40 = (uint64_t (*)(char *, uint64_t, uint64_t))v29[2];
      v60 = v40(v19, v32, v27);
      v61 = Logger.logObject.getter(v60);
      v62 = static os_log_type_t.default.getter(v61);
      if (os_log_type_enabled(v61, v62))
      {
        v63 = swift_slowAlloc(22, -1);
        v123 = v40;
        v64 = v63;
        v65 = swift_slowAlloc(32, -1);
        v125 = (char *)v65;
        *(_DWORD *)v64 = 141558275;
        v134 = 1752392040;
        v135[0] = v65;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, v135, v64 + 4, v64 + 12);
        *(_WORD *)(v64 + 12) = 2081;
        v66 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v67 = dispatch thunk of CustomStringConvertible.description.getter(v27, v66);
        v134 = sub_100016940(v67, v68, v135);
        p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, v135, v64 + 14, v64 + 22);
        swift_bridgeObjectRelease();
        v128 = (void (*)(char *, uint64_t))v29[1];
        v128(v19, v27);
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "didCompletePlayingSoundOnDevice %{private,mask.hash}s", (uint8_t *)v64, 0x16u);
        v69 = v125;
        swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v69, -1, -1);
        v70 = v64;
        v40 = v123;
        swift_slowDealloc(v70, -1, -1);
      }
      else
      {
        v128 = (void (*)(char *, uint64_t))v29[1];
        v128(v19, v27);
      }

      goto LABEL_14;
    }
LABEL_41:
    swift_once(&qword_1010E9D28, sub_1005D439C);
    goto LABEL_10;
  }
  v34 = v137;
  sub_10001AA44(v135, v136);
  v35 = *(void (**)(uint64_t, uint64_t))(v34 + 192);
  v36 = v34;
  v32 = a1;
  v35(v33, v36);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v135);
  v29 = (_QWORD *)v10;
  v27 = v131;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v131) == 1)
    goto LABEL_9;
  v37 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v38 = v25;
  v37(v25, v9, v27);
  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v39 = type metadata accessor for Logger(0);
  sub_10001A9E8(v39, (uint64_t)qword_1011B71E0);
  v40 = (uint64_t (*)(char *, uint64_t, uint64_t))v29[2];
  v41 = (char *)v128;
  v40((char *)v128, a1, v27);
  v42 = v125;
  v43 = v40(v125, (uint64_t)v38, v27);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.default.getter(v44);
  v122 = v45;
  if (os_log_type_enabled(v44, v45))
  {
    v46 = swift_slowAlloc(32, -1);
    v47 = swift_slowAlloc(64, -1);
    v120 = v47;
    *(_DWORD *)v46 = 141558531;
    v134 = 1752392040;
    v135[0] = v47;
    v121 = v38;
    v118 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, v135, v46 + 4, v46 + 12);
    *(_WORD *)(v46 + 12) = 2081;
    v48 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v123 = v40;
    v49 = v48;
    v119 = v44;
    v50 = (char *)v128;
    v51 = dispatch thunk of CustomStringConvertible.description.getter(v27, v48);
    v134 = sub_100016940(v51, v52, v135);
    v32 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, v135, v46 + 14, v46 + 22);
    swift_bridgeObjectRelease();
    v53 = (void (*)(char *, uint64_t))v118[1];
    v53(v50, v27);
    *(_WORD *)(v46 + 22) = 2082;
    v54 = v49;
    v40 = v123;
    v55 = dispatch thunk of CustomStringConvertible.description.getter(v27, v54);
    v134 = sub_100016940(v55, v56, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, v135, v46 + 24, v46 + 32);
    swift_bridgeObjectRelease();
    v53(v42, v27);
    v57 = v119;
    _os_log_impl((void *)&_mh_execute_header, v119, (os_log_type_t)v122, "didCompletePlayingSoundOnDevice %{private,mask.hash}s. groupId %{public}s", (uint8_t *)v46, 0x20u);
    v58 = v120;
    swift_arrayDestroy(v120, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v46, -1, -1);

    v128 = v53;
    v53(v121, v27);
  }
  else
  {

    v110 = (void (*)(char *, uint64_t))v29[1];
    v110(v42, v27);
    v110(v41, v27);
    v128 = v110;
    v110(v38, v27);
  }
LABEL_14:
  v71 = (uint64_t)v130;
  v72 = (uint64_t *)((char *)v129 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  swift_beginAccess((char *)v129 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v135, 0, 0);
  v73 = *v72;
  if (!*(_QWORD *)(v73 + 16))
  {
    v83 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v71, 1, 1, v83);
LABEL_20:
    sub_100004048(v71, &qword_1010EF1D8);
    if (p_ivars[421] != (__objc2_ivar_list *)-1)
      swift_once(&qword_1010E9D28, sub_1005D439C);
    v85 = type metadata accessor for Logger(0);
    sub_10001A9E8(v85, (uint64_t)qword_1011B71E0);
    v86 = v40(v132, v32, v27);
    v87 = Logger.logObject.getter(v86);
    v88 = static os_log_type_t.error.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      v89 = swift_slowAlloc(22, -1);
      v90 = swift_slowAlloc(32, -1);
      *(_DWORD *)v89 = 141558275;
      v133 = 1752392040;
      v134 = v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v89 + 4, v89 + 12);
      *(_WORD *)(v89 + 12) = 2081;
      v91 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v92 = v132;
      v93 = dispatch thunk of CustomStringConvertible.description.getter(v27, v91);
      v133 = sub_100016940(v93, v94, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v89 + 14, v89 + 22);
      swift_bridgeObjectRelease();
      v128(v92, v27);
      v95 = "didCompletePlayingSoundOnDevice called with unknown device %{private,mask.hash}s";
LABEL_24:
      _os_log_impl((void *)&_mh_execute_header, v87, v88, v95, (uint8_t *)v89, 0x16u);
      swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1, -1);
      swift_slowDealloc(v89, -1, -1);
LABEL_27:

      return;
    }
    v96 = v132;
    goto LABEL_26;
  }
  swift_bridgeObjectRetain(v73);
  v74 = sub_100003FB0(v32);
  if ((v75 & 1) != 0)
  {
    v76 = v74;
    v77 = *(_QWORD *)(v73 + 56);
    v78 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
    v79 = v40;
    v80 = *(_QWORD *)(v78 - 8);
    v81 = v77 + *(_QWORD *)(v80 + 72) * v76;
    v27 = v131;
    sub_10005972C(v81, v71, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v82 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v80 + 56);
    v40 = v79;
    v82(v71, 0, 1, v78);
  }
  else
  {
    v78 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v71, 1, 1, v78);
  }
  v84 = v127;
  swift_bridgeObjectRelease();
  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 48))(v71, 1, v78) == 1)
    goto LABEL_20;
  v97 = p_ivars;
  sub_100004048(v71, &qword_1010EF1D8);
  sub_1005E2F5C(v32, 0, 0);
  v98 = v126;
  if (!v126)
  {
    if (v97[421] != (__objc2_ivar_list *)-1)
      swift_once(&qword_1010E9D28, sub_1005D439C);
    v111 = type metadata accessor for Logger(0);
    sub_10001A9E8(v111, (uint64_t)qword_1011B71E0);
    v112 = v124;
    v113 = v40(v124, v32, v27);
    v87 = Logger.logObject.getter(v113);
    v88 = static os_log_type_t.default.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      v89 = swift_slowAlloc(22, -1);
      v90 = swift_slowAlloc(32, -1);
      *(_DWORD *)v89 = 141558275;
      v133 = 1752392040;
      v134 = v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v89 + 4, v89 + 12);
      *(_WORD *)(v89 + 12) = 2081;
      v114 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v115 = dispatch thunk of CustomStringConvertible.description.getter(v27, v114);
      v133 = sub_100016940(v115, v116, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v89 + 14, v89 + 22);
      swift_bridgeObjectRelease();
      v128(v112, v27);
      v95 = "didCompletePlayingSoundOnDevice %{private,mask.hash}s succeeded";
      goto LABEL_24;
    }
    v96 = v112;
LABEL_26:
    v128(v96, v27);
    goto LABEL_27;
  }
  swift_errorRetain(v126);
  if (v97[421] != (__objc2_ivar_list *)-1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v99 = type metadata accessor for Logger(0);
  sub_10001A9E8(v99, (uint64_t)qword_1011B71E0);
  v40(v84, v32, v27);
  swift_errorRetain(v98);
  v100 = swift_errorRetain(v98);
  v87 = Logger.logObject.getter(v100);
  v101 = static os_log_type_t.error.getter(v87);
  if (!os_log_type_enabled(v87, v101))
  {
    swift_errorRelease(v98);
    v128(v84, v27);
    swift_errorRelease(v98);
    swift_errorRelease(v98);
    goto LABEL_27;
  }
  v102 = swift_slowAlloc(32, -1);
  v103 = swift_slowAlloc(64, -1);
  *(_DWORD *)v102 = 141558531;
  v133 = 1752392040;
  v134 = v103;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v102 + 4, v102 + 12);
  *(_WORD *)(v102 + 12) = 2081;
  v104 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v105 = dispatch thunk of CustomStringConvertible.description.getter(v27, v104);
  v133 = sub_100016940(v105, v106, &v134);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v102 + 14, v102 + 22);
  swift_bridgeObjectRelease();
  v128(v84, v27);
  *(_WORD *)(v102 + 22) = 2082;
  v133 = v98;
  swift_errorRetain(v98);
  v107 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v108 = String.init<A>(describing:)(&v133, v107);
  v133 = sub_100016940(v108, v109, &v134);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v102 + 24, v102 + 32);
  swift_bridgeObjectRelease();
  swift_errorRelease(v98);
  swift_errorRelease(v98);
  _os_log_impl((void *)&_mh_execute_header, v87, v101, "didCompletePlayingSoundOnDevice %{private,mask.hash}s failed due to %{public}s", (uint8_t *)v102, 0x20u);
  swift_arrayDestroy(v103, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v103, -1, -1);
  swift_slowDealloc(v102, -1, -1);

  swift_errorRelease(v98);
}

unint64_t SPBeaconTaskState.description.getter(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;

  v1 = a1 + 1;
  result = 0x676E696E6E75722ELL;
  switch(v1)
  {
    case 0:
      result = 0x6E776F6E6B6E752ELL;
      break;
    case 1:
      return result;
    case 2:
      result = 0x676E69646E65702ELL;
      break;
    case 3:
      result = 0x656C64692ELL;
      break;
    case 4:
      result = 0x726F7272652ELL;
      break;
    case 5:
      result = 0x6465756575712ELL;
      break;
    default:
      result = 0xD000000000000010;
      break;
  }
  return result;
}

unint64_t sub_1005F7E2C()
{
  uint64_t *v0;

  return SPBeaconTaskState.description.getter(*v0);
}

uint64_t type metadata accessor for SoundPlaybackManager()
{
  return objc_opt_self(_TtC12searchpartyd20SoundPlaybackManager);
}

_QWORD *sub_1005F7E54(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((_QWORD *)((char *)a1 + a3[5]), (_QWORD *)((char *)a2 + a3[5]), v7);
    v9 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v10 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v10;
    v11 = a3[8];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for Date(0);
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_retain(v10);
    v15(v12, v13, v14);
    v16 = a3[9];
    v17 = *(_QWORD *)((char *)a2 + v16);
    swift_errorRetain(v17);
    *(_QWORD *)((char *)a1 + v16) = v17;
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  }
  return a1;
}

uint64_t sub_1005F7F64(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  swift_release(*(_QWORD *)(a1 + a2[7]));
  v6 = a1 + a2[8];
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_errorRelease(*(_QWORD *)(a1 + a2[9]));
}

uint64_t sub_1005F7FF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  v10 = a3[8];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Date(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_retain(v9);
  v14(v11, v12, v13);
  v15 = a3[9];
  v16 = *(_QWORD *)(a2 + v15);
  swift_errorRetain(v16);
  *(_QWORD *)(a1 + v15) = v16;
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1005F80D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v8 = a3[7];
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_retain(v9);
  swift_release(v10);
  v11 = a3[8];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[9];
  v16 = *(_QWORD *)(a1 + v15);
  v17 = *(_QWORD *)(a2 + v15);
  swift_errorRetain(v17);
  *(_QWORD *)(a1 + v15) = v17;
  swift_errorRelease(v16);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1005F81C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[8];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

uint64_t sub_1005F828C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_release(v9);
  v10 = a3[8];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[9];
  v15 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_errorRelease(v15);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1005F8364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005F8370);
}

uint64_t sub_1005F8370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for Date(0);
    v10 = a1 + *(int *)(a3 + 32);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1005F8418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005F8424);
}

uint64_t sub_1005F8424(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for Date(0);
    v12 = a1 + *(int *)(a4 + 32);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(uint64_t a1)
{
  uint64_t result;

  result = qword_101100A18;
  if (!qword_101100A18)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SoundPlaybackManager.PlaybackCoordinator);
  return result;
}

uint64_t sub_1005F8504(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[7];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = v5[0];
    v5[2] = &unk_100E45068;
    v5[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      v5[5] = &unk_100E45080;
      v5[6] = &unk_100E45098;
      swift_initStructMetadata(a1, 256, 7, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

unint64_t *assignWithTake for SoundPlaybackManager.SoundPlaybackManagerError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
LABEL_5:
    *a1 = v4;
    return a1;
  }
  *a1 = v4;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SoundPlaybackManager.SoundPlaybackManagerError(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 3;
  if (v4 >= 5)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SoundPlaybackManager.SoundPlaybackManagerError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for SoundPlaybackManager.SoundPlaybackManagerError()
{
  return &type metadata for SoundPlaybackManager.SoundPlaybackManagerError;
}

void sub_1005F86C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  _BYTE v59[24];
  char v60[24];
  uint64_t v61;

  v4 = sub_10001A9A8(&qword_1010EF1D8);
  v5 = __chkstk_darwin(v4);
  v53 = (uint64_t)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v49 - v7;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v13);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 56);
  v50 = a1 + 56;
  v17 = 1 << *(_BYTE *)(a1 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v20 = (uint64_t *)(a2 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  v54 = a1;
  v21 = a1;
  v22 = (uint64_t)v12;
  swift_bridgeObjectRetain(v21);
  v23 = swift_beginAccess(v20, v60, 0, 0);
  v24 = 0;
  v51 = (unint64_t)(v17 + 63) >> 6;
  v52 = v15;
  v55 = v8;
  v56 = v22;
  while (1)
  {
    if (v19)
    {
      v58 = (v19 - 1) & v19;
      v27 = __clz(__rbit64(v19)) | (v24 << 6);
      goto LABEL_24;
    }
    v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v28 >= v51)
      goto LABEL_38;
    v29 = *(_QWORD *)(v50 + 8 * v28);
    ++v24;
    if (!v29)
    {
      v24 = v28 + 1;
      if (v28 + 1 >= v51)
        goto LABEL_38;
      v29 = *(_QWORD *)(v50 + 8 * v24);
      if (!v29)
      {
        v24 = v28 + 2;
        if (v28 + 2 >= v51)
          goto LABEL_38;
        v29 = *(_QWORD *)(v50 + 8 * v24);
        if (!v29)
        {
          v24 = v28 + 3;
          if (v28 + 3 >= v51)
            goto LABEL_38;
          v29 = *(_QWORD *)(v50 + 8 * v24);
          if (!v29)
            break;
        }
      }
    }
LABEL_23:
    v58 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v24 << 6);
LABEL_24:
    v31 = *(_QWORD *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16))(v15, *(_QWORD *)(v54 + 48) + v31 * v27, v9, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
      goto LABEL_39;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v22, v15, v9);
    v32 = *v20;
    v33 = *(_QWORD *)(*v20 + 16);
    v57 = v24;
    if (v33)
    {
      swift_bridgeObjectRetain(v32);
      v34 = sub_100003FB0(v22);
      if ((v35 & 1) != 0)
      {
        v36 = v34;
        v37 = *(_QWORD *)(v32 + 56);
        v38 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
        v39 = *(_QWORD *)(v38 - 8);
        v40 = v37 + *(_QWORD *)(v39 + 72) * v36;
        v8 = v55;
        sub_10005972C(v40, (uint64_t)v55, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v8, 0, 1, v38);
      }
      else
      {
        v38 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v8, 1, 1, v38);
      }
      swift_bridgeObjectRelease();
      v22 = v56;
    }
    else
    {
      v38 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v8, 1, 1, v38);
    }
    type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
    v41 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v8, 1, v38))
    {
      sub_100004048((uint64_t)v8, &qword_1010EF1D8);
    }
    else
    {
      swift_retain();
      v42 = sub_100004048((uint64_t)v8, &qword_1010EF1D8);
      dispatch thunk of DispatchWorkItem.cancel()(v42);
      swift_release();
    }
    swift_beginAccess(v20, v59, 33, 0);
    swift_bridgeObjectRetain(*v20);
    v43 = sub_100003FB0(v22);
    v45 = v44;
    swift_bridgeObjectRelease();
    if ((v45 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v20);
      v47 = *v20;
      v61 = *v20;
      *v20 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100A9B8CC();
        v47 = v61;
      }
      (*(void (**)(unint64_t, uint64_t))(v10 + 8))(*(_QWORD *)(v47 + 48) + v43 * v31, v9);
      v48 = v61;
      v26 = v53;
      sub_1000126EC(*(_QWORD *)(v61 + 56) + *(_QWORD *)(v41 + 72) * v43, v53, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      sub_10010653C(v43, v48);
      *v20 = v48;
      swift_bridgeObjectRelease();
      v25 = 0;
    }
    else
    {
      v25 = 1;
      v26 = v53;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v26, v25, 1, v38);
    sub_100004048(v26, &qword_1010EF1D8);
    swift_endAccess(v59);
    v22 = v56;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v56, v9);
    v8 = v55;
    v15 = v52;
    v24 = v57;
    v19 = v58;
  }
  v30 = v28 + 4;
  if (v30 >= v51)
  {
LABEL_38:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v15, 1, 1, v9, v23);
LABEL_39:
    swift_release();
    return;
  }
  v29 = *(_QWORD *)(v50 + 8 * v30);
  if (v29)
  {
    v24 = v30;
    goto LABEL_23;
  }
  while (1)
  {
    v24 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v24 >= v51)
      goto LABEL_38;
    v29 = *(_QWORD *)(v50 + 8 * v24);
    ++v30;
    if (v29)
      goto LABEL_23;
  }
LABEL_41:
  __break(1u);
}

void sub_1005F8C1C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 v16;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 56);
  v27 = a1 + 56;
  v13 = 1 << *(_BYTE *)(a1 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v28 = (unint64_t)(v13 + 63) >> 6;
  v29 = a1;
  v16 = swift_bridgeObjectRetain(a1);
  v17 = 0;
  if (!v15)
    goto LABEL_5;
LABEL_4:
  v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16))(v11, *(_QWORD *)(v29 + 48) + *(_QWORD *)(v6 + 72) * i, v5, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
      goto LABEL_25;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    v23 = sub_1005FA87C();
    v24 = swift_allocError(&type metadata for SoundPlaybackManager.SoundPlaybackManagerError, v23, 0, 0);
    *v25 = a3;
    sub_1005FAC50(a3);
    sub_1005E2F5C((uint64_t)v8, 0, v24);
    swift_errorRelease(v24);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if (v15)
      goto LABEL_4;
LABEL_5:
    v20 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v28)
      goto LABEL_24;
    v21 = *(_QWORD *)(v27 + 8 * v20);
    ++v17;
    if (!v21)
    {
      v17 = v20 + 1;
      if (v20 + 1 >= v28)
        goto LABEL_24;
      v21 = *(_QWORD *)(v27 + 8 * v17);
      if (!v21)
      {
        v17 = v20 + 2;
        if (v20 + 2 >= v28)
          goto LABEL_24;
        v21 = *(_QWORD *)(v27 + 8 * v17);
        if (!v21)
        {
          v17 = v20 + 3;
          if (v20 + 3 >= v28)
            goto LABEL_24;
          v21 = *(_QWORD *)(v27 + 8 * v17);
          if (!v21)
            break;
        }
      }
    }
LABEL_20:
    v15 = (v21 - 1) & v21;
  }
  v22 = v20 + 4;
  if (v22 >= v28)
  {
LABEL_24:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56))(v11, 1, 1, v5, v16);
LABEL_25:
    swift_release();
    return;
  }
  v21 = *(_QWORD *)(v27 + 8 * v22);
  if (v21)
  {
    v17 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    v17 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v17 >= v28)
      goto LABEL_24;
    v21 = *(_QWORD *)(v27 + 8 * v17);
    ++v22;
    if (v21)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
}

void sub_1005F8F04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  __n128 v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char *v26;
  int64_t v27;
  _QWORD *v28;
  int64_t v29;
  char v30[24];
  uint64_t v31;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1 + 56;
  v12 = 1 << *(_BYTE *)(a1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(a1 + 56);
  v15 = (_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_playSoundSubjects);
  swift_bridgeObjectRetain(a1);
  v28 = v15;
  v16 = swift_beginAccess(v15, v30, 0, 0);
  v17 = 0;
  v26 = v10;
  v27 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v29 = v17;
      v19 = v18 | (v17 << 6);
      goto LABEL_24;
    }
    v20 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v20 >= v27)
      goto LABEL_28;
    v21 = *(_QWORD *)(v11 + 8 * v20);
    v22 = v17 + 1;
    if (!v21)
    {
      v22 = v17 + 2;
      if (v17 + 2 >= v27)
        goto LABEL_28;
      v21 = *(_QWORD *)(v11 + 8 * v22);
      if (!v21)
      {
        v22 = v17 + 3;
        if (v17 + 3 >= v27)
          goto LABEL_28;
        v21 = *(_QWORD *)(v11 + 8 * v22);
        if (!v21)
        {
          v22 = v17 + 4;
          if (v17 + 4 >= v27)
            goto LABEL_28;
          v21 = *(_QWORD *)(v11 + 8 * v22);
          if (!v21)
            break;
        }
      }
    }
LABEL_23:
    v14 = (v21 - 1) & v21;
    v29 = v22;
    v19 = __clz(__rbit64(v21)) + (v22 << 6);
LABEL_24:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16))(v10, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v5 + 72) * v19, v4, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
      goto LABEL_29;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    if (*(_QWORD *)(*v28 + 16))
    {
      swift_bridgeObjectRetain(*v28);
      sub_100003FB0((uint64_t)v7);
      if ((v24 & 1) != 0)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        v31 = 4;
        PassthroughSubject.send(completion:)(&v31);
        v10 = v26;
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    sub_1005E2F5C((uint64_t)v7, 0, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v17 = v29;
  }
  v23 = v17 + 5;
  if (v17 + 5 >= v27)
  {
LABEL_28:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v10, 1, 1, v4, v16);
LABEL_29:
    swift_release();
    return;
  }
  v21 = *(_QWORD *)(v11 + 8 * v23);
  if (v21)
  {
    v22 = v17 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v22 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v22 >= v27)
      goto LABEL_28;
    v21 = *(_QWORD *)(v11 + 8 * v22);
    ++v23;
    if (v21)
      goto LABEL_23;
  }
LABEL_31:
  __break(1u);
}

void sub_1005F9248(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 v16;
  int64_t v17;
  int v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 56);
  v25 = a1 + 56;
  v13 = 1 << *(_BYTE *)(a1 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v26 = (unint64_t)(v13 + 63) >> 6;
  v16 = swift_bridgeObjectRetain(a1);
  v17 = 0;
  v18 = a3 & 1;
  if (!v15)
    goto LABEL_5;
LABEL_4:
  v19 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v19 | (v17 << 6); ; i = __clz(__rbit64(v22)) + (v17 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16))(v11, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v6 + 72) * i, v5, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
      goto LABEL_25;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    sub_1005E2F5C((uint64_t)v8, v18, 0);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if (v15)
      goto LABEL_4;
LABEL_5:
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v26)
      goto LABEL_24;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v26)
        goto LABEL_24;
      v22 = *(_QWORD *)(v25 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v26)
          goto LABEL_24;
        v22 = *(_QWORD *)(v25 + 8 * v17);
        if (!v22)
        {
          v17 = v21 + 3;
          if (v21 + 3 >= v26)
            goto LABEL_24;
          v22 = *(_QWORD *)(v25 + 8 * v17);
          if (!v22)
            break;
        }
      }
    }
LABEL_20:
    v15 = (v22 - 1) & v22;
  }
  v23 = v21 + 4;
  if (v23 >= v26)
  {
LABEL_24:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56))(v11, 1, 1, v5, v16);
LABEL_25:
    swift_release();
    return;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v17 = v23;
    goto LABEL_20;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v26)
      goto LABEL_24;
    v22 = *(_QWORD *)(v25 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
}

void sub_1005F94F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  int64_t v30;
  char *v31;
  char v32[24];
  uint64_t v33;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v8);
  v31 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1 + 56;
  v11 = 1 << *(_BYTE *)(a1 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(a1 + 56);
  v14 = (_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_stopSoundSubjects);
  swift_bridgeObjectRetain(a1);
  v15 = swift_beginAccess(v14, v32, 0, 0);
  v16 = 0;
  v17 = v11 + 63;
  v18 = a1;
  v29 = v14;
  v30 = v17 >> 6;
  while (1)
  {
    if (v13)
    {
      v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v20 = v16;
      v21 = v19 | (v16 << 6);
      v22 = v31;
      goto LABEL_24;
    }
    v23 = v16 + 1;
    v22 = v31;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v23 >= v30)
      goto LABEL_28;
    v24 = *(_QWORD *)(v10 + 8 * v23);
    v25 = v16 + 1;
    if (!v24)
    {
      v25 = v16 + 2;
      if (v16 + 2 >= v30)
        goto LABEL_28;
      v24 = *(_QWORD *)(v10 + 8 * v25);
      if (!v24)
      {
        v25 = v16 + 3;
        if (v16 + 3 >= v30)
          goto LABEL_28;
        v24 = *(_QWORD *)(v10 + 8 * v25);
        if (!v24)
        {
          v25 = v16 + 4;
          if (v16 + 4 >= v30)
            goto LABEL_28;
          v24 = *(_QWORD *)(v10 + 8 * v25);
          if (!v24)
            break;
        }
      }
    }
LABEL_23:
    v13 = (v24 - 1) & v24;
    v20 = v25;
    v21 = __clz(__rbit64(v24)) + (v25 << 6);
LABEL_24:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16))(v22, *(_QWORD *)(v18 + 48) + *(_QWORD *)(v5 + 72) * v21, v4, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v22, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v22, 1, v4) == 1)
      goto LABEL_29;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v22, v4);
    if (*(_QWORD *)(*v14 + 16))
    {
      swift_bridgeObjectRetain(*v14);
      sub_100003FB0((uint64_t)v7);
      if ((v27 & 1) != 0)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        v33 = 4;
        PassthroughSubject.send(completion:)(&v33);
        v14 = v29;
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v16 = v20;
  }
  v26 = v16 + 5;
  if (v16 + 5 >= v30)
  {
LABEL_28:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v31, 1, 1, v4, v15);
LABEL_29:
    swift_release();
    return;
  }
  v24 = *(_QWORD *)(v10 + 8 * v26);
  if (v24)
  {
    v25 = v16 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v25 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v25 >= v30)
      goto LABEL_28;
    v24 = *(_QWORD *)(v10 + 8 * v25);
    ++v26;
    if (v24)
      goto LABEL_23;
  }
LABEL_31:
  __break(1u);
}

_QWORD *sub_1005F9828(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  _QWORD *v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t, __n128);
  uint64_t v40;
  _QWORD *v41;

  v5 = sub_10001A9A8(&qword_1010EF660);
  __chkstk_darwin(v5);
  v33 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for BeaconObservation(0);
  v40 = *(_QWORD *)(v38 - 8);
  v7 = __chkstk_darwin(v38);
  v37 = (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v32 = (uint64_t)&v31 - v9;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v35 = v13;
    v36 = a2;
    v18 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v34 = *(_QWORD *)(v11 + 72);
    v39 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
    v31 = a1;
    v19 = swift_bridgeObjectRetain(a1);
    v41 = _swiftEmptyArrayStorage;
    v20 = v33;
    while (1)
    {
      v39(v16, v18, v10, v19);
      v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v21)(v16, 0, 1, v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1)
        break;
      v22 = (uint64_t)v35;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v35, v16, v10);
      sub_1005D5218(v22, v36, v20);
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v22, v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v41;
      }
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v22, v10);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v40 + 48))(v20, 1, v38) == 1)
      {
        sub_100004048((uint64_t)v20, &qword_1010EF660);
      }
      else
      {
        v23 = (uint64_t)v20;
        v24 = v32;
        sub_1000126EC(v23, v32, type metadata accessor for BeaconObservation);
        sub_1000126EC(v24, v37, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
          v41 = (_QWORD *)sub_1007C9764(0, v41[2] + 1, 1, (unint64_t)v41);
        v26 = v41[2];
        v25 = v41[3];
        if (v26 >= v25 >> 1)
          v41 = (_QWORD *)sub_1007C9764(v25 > 1, v26 + 1, 1, (unint64_t)v41);
        v27 = v41;
        v41[2] = v26 + 1;
        sub_1000126EC(v37, (uint64_t)v27+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * v26, type metadata accessor for BeaconObservation);
        v20 = v33;
      }
      v18 += v34;
      if (!--v17)
      {
        v21(v16, 1, 1, v10, v19);
        break;
      }
    }
  }
  else
  {
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56);
    v29 = swift_bridgeObjectRetain(a1);
    v41 = _swiftEmptyArrayStorage;
    v28(v16, 1, 1, v10, v29);
  }
  swift_bridgeObjectRelease();
  return v41;
}

_QWORD *sub_1005F9BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *result;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char v54[24];
  uint64_t v55;

  v55 = a2;
  v3 = sub_10001A9A8(&qword_1010EF1D8);
  __chkstk_darwin(v3);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  v6 = *(_QWORD *)(v53 - 8);
  v7 = __chkstk_darwin(v53);
  v47 = (uint64_t)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v46 = (uint64_t)&v44 - v9;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v14);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a1 + 56);
  v50 = a1 + 56;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v21 = (_QWORD *)(v55 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  v55 = a1;
  swift_bridgeObjectRetain(a1);
  v52 = v21;
  result = (_QWORD *)swift_beginAccess(v21, v54, 0, 0);
  v23 = 0;
  v51 = (unint64_t)(v18 + 63) >> 6;
  v48 = _swiftEmptyArrayStorage;
  v49 = v6;
  while (1)
  {
    if (v20)
    {
      v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v25 = v24 | (v23 << 6);
      goto LABEL_22;
    }
    v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v26 >= v51)
      goto LABEL_36;
    v27 = *(_QWORD *)(v50 + 8 * v26);
    ++v23;
    if (!v27)
    {
      v23 = v26 + 1;
      if (v26 + 1 >= v51)
        goto LABEL_36;
      v27 = *(_QWORD *)(v50 + 8 * v23);
      if (!v27)
      {
        v23 = v26 + 2;
        if (v26 + 2 >= v51)
          goto LABEL_36;
        v27 = *(_QWORD *)(v50 + 8 * v23);
        if (!v27)
        {
          v23 = v26 + 3;
          if (v26 + 3 >= v51)
            goto LABEL_36;
          v27 = *(_QWORD *)(v50 + 8 * v23);
          if (!v27)
            break;
        }
      }
    }
LABEL_21:
    v20 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v16, *(_QWORD *)(v55 + 48) + *(_QWORD *)(v11 + 72) * v25, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1)
      goto LABEL_37;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v16, v10);
    v29 = *v52;
    if (*(_QWORD *)(*v52 + 16))
    {
      swift_bridgeObjectRetain(*v52);
      v30 = sub_100003FB0((uint64_t)v13);
      if ((v31 & 1) != 0)
      {
        sub_10005972C(*(_QWORD *)(v29 + 56) + *(_QWORD *)(v6 + 72) * v30, (uint64_t)v5, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
        v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
        v33 = v5;
        v34 = 0;
      }
      else
      {
        v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
        v33 = v5;
        v34 = 1;
      }
      v36 = v53;
      v32(v33, v34, 1, v53);
      v35 = v36;
      v6 = v49;
      swift_bridgeObjectRelease();
    }
    else
    {
      v35 = v53;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v5, 1, 1, v53);
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, v35) == 1)
    {
      result = (_QWORD *)sub_100004048((uint64_t)v5, &qword_1010EF1D8);
    }
    else
    {
      v37 = v46;
      sub_1000126EC((uint64_t)v5, v46, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      sub_1000126EC(v37, v47, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
        v48 = (_QWORD *)sub_1007CA0F8(0, v48[2] + 1, 1, (unint64_t)v48);
      v39 = v48[2];
      v38 = v48[3];
      v40 = v39 + 1;
      if (v39 >= v38 >> 1)
      {
        v45 = v39 + 1;
        v43 = (_QWORD *)sub_1007CA0F8(v38 > 1, v39 + 1, 1, (unint64_t)v48);
        v40 = v45;
        v48 = v43;
      }
      v41 = v47;
      v42 = v48;
      v48[2] = v40;
      result = (_QWORD *)sub_1000126EC(v41, (uint64_t)v42+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v39, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    }
  }
  v28 = v26 + 4;
  if (v28 >= v51)
  {
LABEL_36:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v16, 1, 1, v10);
LABEL_37:
    swift_release(v55);
    return v48;
  }
  v27 = *(_QWORD *)(v50 + 8 * v28);
  if (v27)
  {
    v23 = v28;
    goto LABEL_21;
  }
  while (1)
  {
    v23 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v23 >= v51)
      goto LABEL_36;
    v27 = *(_QWORD *)(v50 + 8 * v23);
    ++v28;
    if (v27)
      goto LABEL_21;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_1005FA0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __n128 v19;
  int64_t v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  id v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  char *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;
  int64_t v56;

  v4 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v4);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WildModeAssociationRecord(0);
  v50 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v44 = (uint64_t)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v13);
  v51 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 56);
  v45 = a1 + 56;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v49 = OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_beaconStore;
  v46 = (unint64_t)(v16 + 63) >> 6;
  v48 = (id)SPBeaconTypeHele;
  v52 = a1;
  v19 = swift_bridgeObjectRetain(a1);
  v20 = 0;
  v47 = v12;
  v42 = v6;
  v43 = a2;
  if (v18)
    goto LABEL_7;
LABEL_9:
  v26 = v20 + 1;
  v24 = v51;
  if (__OFADD__(v20, 1))
  {
    __break(1u);
    goto LABEL_40;
  }
  if (v26 >= v46)
    goto LABEL_35;
  v27 = *(_QWORD *)(v45 + 8 * v26);
  ++v20;
  if (v27)
  {
LABEL_24:
    v18 = (v27 - 1) & v27;
    v23 = __clz(__rbit64(v27)) + (v20 << 6);
    while (1)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16))(v24, *(_QWORD *)(v52 + 48) + *(_QWORD *)(v10 + 72) * v23, v9, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v24, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v24, 1, v9) == 1)
      {
LABEL_38:
        swift_release();
        return;
      }
      v56 = v20;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v24, v9);
      sub_10081C0CC((uint64_t)v12, (uint64_t)v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v6, 1, v7) != 1)
        break;
      v29 = v7;
      sub_100004048((uint64_t)v6, &qword_101102FB0);
      sub_10080B648((uint64_t)v12, (uint64_t)v53);
      v30 = v54;
      if (!v54)
      {
        sub_100004048((uint64_t)v53, (uint64_t *)&unk_1010EE310);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        goto LABEL_38;
      }
      v31 = v55;
      sub_10001AA44(v53, v54);
      v32 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v31 + 176))(v30, v31);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v53);
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      v35 = v34;
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
      if (v33 != v37 || v35 != v36)
      {
        v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v37, v36, 0);
        v21 = v48;

        v12 = v47;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        v6 = v42;
        v7 = v29;
        v20 = v56;
        if ((v41 & 1) == 0)
          goto LABEL_38;
LABEL_6:
        if (!v18)
          goto LABEL_9;
        goto LABEL_7;
      }
      v25 = v48;

      swift_bridgeObjectRelease_n(v35, 2);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v6 = v42;
      v7 = v29;
      v20 = v56;
      if (!v18)
        goto LABEL_9;
LABEL_7:
      v22 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v23 = v22 | (v20 << 6);
      v24 = v51;
    }
    v38 = v44;
    sub_1000126EC((uint64_t)v6, v44, type metadata accessor for WildModeAssociationRecord);
    v39 = *(unsigned __int8 *)(v38 + *(int *)(v7 + 52));
    sub_1000126B0(v38, type metadata accessor for WildModeAssociationRecord);
    if (v39 == 4)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v47, v9);
      goto LABEL_38;
    }
    v12 = v47;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v47, v9);
    v20 = v56;
    if (v39 != 3)
      goto LABEL_38;
    goto LABEL_6;
  }
  v20 = v26 + 1;
  if (v26 + 1 >= v46)
  {
LABEL_35:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v51, 1, 1, v9, v19);
    swift_release();
    return;
  }
  v27 = *(_QWORD *)(v45 + 8 * v20);
  if (v27)
    goto LABEL_24;
  v20 = v26 + 2;
  if (v26 + 2 >= v46)
    goto LABEL_35;
  v27 = *(_QWORD *)(v45 + 8 * v20);
  if (v27)
    goto LABEL_24;
  v20 = v26 + 3;
  if (v26 + 3 >= v46)
    goto LABEL_35;
  v27 = *(_QWORD *)(v45 + 8 * v20);
  if (v27)
    goto LABEL_24;
  v28 = v26 + 4;
  if (v28 >= v46)
    goto LABEL_35;
  v27 = *(_QWORD *)(v45 + 8 * v28);
  if (v27)
  {
    v20 = v28;
    goto LABEL_24;
  }
  while (1)
  {
    v20 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v20 >= v46)
      goto LABEL_35;
    v27 = *(_QWORD *)(v45 + 8 * v20);
    ++v28;
    if (v27)
      goto LABEL_24;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_1005FA61C(uint64_t *a1)
{
  return sub_1005FC2D8(a1) & 1;
}

uint64_t sub_1005FA634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8;
  v15 = v3 | v8 | 7;
  v10 = ((*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v11(v0 + v4 + *(int *)(v1 + 24), v6);
  v12 = v0 + v4 + *(int *)(v1 + 28);
  v13 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v11(v0 + v9, v6);
  swift_release();
  return swift_deallocObject(v0, v10, v15);
}

uint64_t sub_1005FA774()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;

  v1 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + v4 + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (uint64_t *)(v0 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_1005E7248(v0 + v2, *(void **)(v0 + v3), v0 + v6, *v7, v7[1], *(double *)(v0 + v4));
}

uint64_t sub_1005FA808(uint64_t a1)
{
  uint64_t v1;

  return sub_1005E8C0C(a1, *(_QWORD *)(v1 + 16), *(char **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 48), *(double *)(v1 + 40));
}

uint64_t sub_1005FA82C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005FA850(uint64_t a1)
{
  uint64_t *v1;

  return sub_1005E983C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1005FA86C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_1005FA87C()
{
  unint64_t result;

  result = qword_101100AF8;
  if (!qword_101100AF8)
  {
    result = swift_getWitnessTable(asc_100E450CC, &type metadata for SoundPlaybackManager.SoundPlaybackManagerError);
    atomic_store(result, (unint64_t *)&qword_101100AF8);
  }
  return result;
}

uint64_t sub_1005FA8C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for OwnedBeaconGroup(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v4, v1);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v9), *(_QWORD *)(v0 + v9 + 8));
  v12(v0 + v9 + *(int *)(v6 + 24), v1);
  v13 = v0 + v9 + *(int *)(v6 + 28);
  v14 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject(v0, v11 + 8, v10);
}

void sub_1005FA9F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  sub_1005EA578(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, *(_QWORD *)(v1 + v5), v1 + v7, *(void **)(v1 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1005FAA88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for OwnedBeaconGroup(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v4, v1);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v9), *(_QWORD *)(v0 + v9 + 8));
  v12(v0 + v9 + *(int *)(v6 + 24), v1);
  v13 = v0 + v9 + *(int *)(v6 + 28);
  v14 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject(v0, ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v10);
}

void sub_1005FABB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1005EA840(a1, v1 + v4, *(_BYTE **)(v1 + v5), v1 + v7, *(void **)(v1 + v8), *(double *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFF8)));
}

unint64_t sub_1005FAC50(unint64_t result)
{
  if (result >= 4)
    return swift_errorRetain(result);
  return result;
}

unint64_t sub_1005FAC60(unint64_t result)
{
  if (result >= 4)
    return swift_errorRelease(result);
  return result;
}

uint64_t sub_1005FAC70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_101100AA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BOOL sub_1005FACB8(uint64_t a1)
{
  uint64_t v1;

  return sub_1005EB284(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1005FACD4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1005FACF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1005FAD6C()
{
  return sub_1005FB9A8((uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(unint64_t, _QWORD))sub_1005EA2D8);
}

void sub_1005FAD84(uint64_t a1)
{
  sub_1005FC3E4(a1, "SPPlaySound stop sound failed on device %{private,mask.hash}s. %{public}s commandId: %{public}s.", (uint64_t)sub_1005FADA0, "SPPlaySound stop sound initiated on device %{private,mask.hash}s commandId: %{public}s.");
}

uint64_t sub_1005FADA0(uint64_t a1)
{
  uint64_t v1;

  return sub_1005F5C40(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1005FADBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1005FAE4C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_1005F5ED4(v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1005FAEA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v3 + 16 + v8) & ~v3;
  v10 = v9 + v5;
  v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v0 + v4, v1);

  swift_release(*(_QWORD *)(v0 + v8 + 8));
  v11(v0 + v9, v1);
  return swift_deallocObject(v0, v10, v6);
}

uint64_t sub_1005FAF58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1005F0D2C((void (*)(_QWORD, _QWORD, _QWORD, _QWORD))(v0 + v3), *(char **)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8), (char *)(v0 + ((v2 + 16 + ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v2)), *(double *)(v0 + v4));
}

uint64_t sub_1005FAFC0(uint64_t a1)
{
  uint64_t v1;

  return sub_1005F2AD8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(double *)(v1 + 40));
}

uint64_t sub_1005FAFE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1005FB078(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_1005F3204(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

_QWORD *sub_1005FB0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD v28[2];
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *);
  int v36;
  _QWORD *v37;

  v34 = a2;
  v35 = a4;
  v33 = type metadata accessor for UUID(0);
  v31 = *(_QWORD *)(v33 - 8);
  v6 = __chkstk_darwin(v33);
  v32 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v30 = (char *)v28 - v8;
  v9 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v9)
  {
    v28[1] = v4;
    v37 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v9);
    result = (_QWORD *)sub_1003B2D14(a1);
    v11 = (uint64_t)result;
    v13 = v12;
    v15 = v14 & 1;
    v29 = a1 + 56;
    v16 = v31;
    v17 = v32;
    while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(_BYTE *)(a1 + 32))
    {
      if (((*(_QWORD *)(v29 + (((unint64_t)v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        goto LABEL_11;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v13)
        goto LABEL_12;
      v18 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(v16 + 72) * v11;
      v19 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
      v20 = v30;
      v21 = v33;
      v36 = v15;
      v19(v30, v18, v33);
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v17, v20, v21);
      v22 = v35(v17);
      v23 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v17, v21);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v23);
      v24 = v37[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
      v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v22);
      specialized ContiguousArray._endMutation()(v25);
      result = (_QWORD *)sub_1003B2DB8(v11, v13, v36 & 1, a1);
      v11 = (uint64_t)result;
      v13 = v26;
      v15 = v27 & 1;
      if (!--v9)
      {
        sub_1000FE2A4((uint64_t)result, v26, v15);
        return v37;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

BOOL sub_1005FB2CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;

  v2 = type metadata accessor for BeaconObservation(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v42 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v38 - v6;
  if (qword_1010E9CF0 != -1)
    goto LABEL_25;
  while (1)
  {
    v8 = qword_1011B7160;
    v9 = objc_autoreleasePoolPush();
    v10 = sub_10001A9A8(&qword_1010F7770);
    OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v8, v10);
    v11 = v45;
    if (!v45[2] || (v12 = sub_100003FB0(a1), (v13 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      v17 = _swiftEmptyArrayStorage;
      goto LABEL_18;
    }
    v14 = *(_QWORD *)(v11[7] + 8 * v12);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRelease();
    v15 = sub_100508D98(v14);
    swift_bridgeObjectRelease();
    sub_10088FD00((uint64_t)v15);
    a1 = v16;
    swift_release();
    v17 = _swiftEmptyArrayStorage;
    v45 = _swiftEmptyArrayStorage;
    v18 = *(_QWORD *)(a1 + 16);
    if (!v18)
      break;
    v39 = v9;
    v19 = 0;
    v20 = _swiftEmptyArrayStorage;
    v40 = v3;
    v41 = v18;
    while (v19 < *(_QWORD *)(a1 + 16))
    {
      v21 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      v22 = *(_QWORD *)(v3 + 72);
      sub_10005972C(a1 + v21 + v22 * v19, (uint64_t)v7, type metadata accessor for BeaconObservation);
      if (v7[*(int *)(v2 + 24)] == 22)
      {
        v23 = v2;
        sub_1000126EC((uint64_t)v7, v42, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
          sub_10009AAC8(0, v20[2] + 1, 1);
        v20 = v45;
        v25 = v45[2];
        v24 = v45[3];
        if (v25 >= v24 >> 1)
        {
          sub_10009AAC8(v24 > 1, v25 + 1, 1);
          v20 = v45;
        }
        v20[2] = v25 + 1;
        sub_1000126EC(v42, (uint64_t)v20 + v21 + v25 * v22, type metadata accessor for BeaconObservation);
        v2 = v23;
        v3 = v40;
        v18 = v41;
      }
      else
      {
        sub_1000126B0((uint64_t)v7, type metadata accessor for BeaconObservation);
      }
      if (v18 == ++v19)
      {
        v17 = v45;
        v9 = v39;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_25:
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  }
LABEL_17:
  swift_release();
LABEL_18:
  objc_autoreleasePoolPop(v9);
  if (qword_1010E9D28 != -1)
    swift_once(&qword_1010E9D28, sub_1005D439C);
  v26 = type metadata accessor for Logger(0);
  sub_10001A9E8(v26, (uint64_t)qword_1011B71E0);
  swift_bridgeObjectRetain_n(v17, 2);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    v31 = (_QWORD *)swift_slowAlloc(32, -1);
    v45 = v31;
    *(_DWORD *)v30 = 136315138;
    swift_bridgeObjectRetain(v17);
    v33 = Array.description.getter(v32, v2);
    v35 = v34;
    swift_bridgeObjectRelease();
    v43 = sub_100016940(v33, v35, (uint64_t *)&v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease_n(v17, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Found queueObservations %s", v30, 0xCu);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v17, 2);
  }
  v36 = v17[2];
  swift_bridgeObjectRelease();
  return v36 == 0;
}

uint64_t sub_1005FB708(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[16];

  v2 = type metadata accessor for BeaconObservation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v6 = qword_1011B7160;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, a1, v7);
  static Date.trustedNow.getter((uint64_t)&v5[*(int *)(v2 + 20)]);
  v5[*(int *)(v2 + 24)] = 22;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
  v9 = *(unsigned __int8 *)(v3 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(v8, v10 + *(_QWORD *)(v3 + 72), v9 | 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B00;
  sub_10005972C((uint64_t)v5, v11 + v10, type metadata accessor for BeaconObservation);
  v12 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v12);
  *(_QWORD *)&v14[-32] = v6;
  *(_QWORD *)&v14[-24] = v11;
  *(_QWORD *)&v14[-16] = 0;
  *(_QWORD *)&v14[-8] = 0;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, &v14[-48], &type metadata for () + 1);
  swift_bridgeObjectRelease();
  return sub_1000126B0((uint64_t)v5, type metadata accessor for BeaconObservation);
}

uint64_t sub_1005FB8AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 28);
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1005FB994()
{
  return sub_1005FB9A8(type metadata accessor for OwnedBeaconGroup, (uint64_t (*)(unint64_t, _QWORD))sub_1005DFC1C);
}

uint64_t sub_1005FB9A8(uint64_t (*a1)(_QWORD), uint64_t (*a2)(unint64_t, _QWORD))
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(a1(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return a2(v2 + v4, *(_QWORD *)(v2 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1005FB9FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005FBA0C(uint64_t a1)
{
  return sub_1005FCDF0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, double))sub_1005DFC78);
}

uint64_t sub_1005FBA28()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005FBA4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8;
  v15 = v3 | v8 | 7;
  v10 = ((((*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v11(v0 + v4 + *(int *)(v1 + 24), v6);
  v12 = v0 + v4 + *(int *)(v1 + 28);
  v13 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v11(v0 + v9, v6);
  swift_release();
  return swift_deallocObject(v0, v10, v15);
}

uint64_t sub_1005FBB90()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + v4 + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1005DFFCC(v0 + v2, *(void **)(v0 + v3), (void (*)(_QWORD, _QWORD, _QWORD))(v0 + v6), *(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + ((v7 + 15) & 0xFFFFFFFFFFFFF8)), *(double *)(v0 + v4));
}

uint64_t sub_1005FBC2C(uint64_t a1)
{
  uint64_t *v1;

  return sub_1005E1E28(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1005FBC4C()
{
  uint64_t v0;

  sub_1005FBC74(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  return swift_deallocObject(v0, 25, 7);
}

unint64_t sub_1005FBC74(unint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return sub_1005FAC60(result);
  return result;
}

uint64_t sub_1005FBC80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (v4 + v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v3 + v6 + 8) & ~v3;
  v8 = type metadata accessor for OwnedBeaconGroup(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v5 + v10 + v7) & ~v10;
  v18 = v3 | v10 | 7;
  v12 = ((((*(_QWORD *)(v9 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  v13 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v13(v0 + v4, v1);
  swift_release();

  v13(v0 + v7, v1);
  v14 = v0 + v11;
  sub_10001BC14(*(_QWORD *)v14, *(_QWORD *)(v14 + 8));
  v13(v14 + *(int *)(v8 + 24), v1);
  v15 = v14 + *(int *)(v8 + 28);
  v16 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v12, v18);
}

void sub_1005FBDEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = (v5 + v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v4 + v7 + 8) & ~v4;
  v9 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v10 = (v6 + *(unsigned __int8 *)(v9 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1005E3988(*(double *)(v1 + ((v11 + 15) & 0xFFFFFFFFFFFFF8)), a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v5, *(_QWORD *)(v1 + ((v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8)), *(unsigned __int8 *)(v1 + ((v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(void **)(v1 + v7), v1 + v8, v1 + v10, *(_QWORD *)(v1 + v11));
}

uint64_t sub_1005FBECC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = (((((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for OwnedBeaconGroup(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + v5 + 8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = *(_QWORD *)(v7 + 64) + v9 + 1;
  swift_release();
  swift_bridgeObjectRelease();
  v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v4, v1);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v9), *(_QWORD *)(v0 + v9 + 8));
  v12(v0 + v9 + *(int *)(v6 + 24), v1);
  v13 = v0 + v9 + *(int *)(v6 + 28);
  v14 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v11, v10);
}

void sub_1005FC004(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + v7 + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  sub_1005E48A0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), v1 + v4, *(char **)(v1 + v5), *(_QWORD *)(v1 + v7), v1 + v9, *(double *)(v1 + v6), *(_BYTE *)(v1 + v9 + *(_QWORD *)(v8 + 64)));
}

uint64_t sub_1005FC0C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for OwnedBeaconGroup(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = ((((*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;

  v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v4, v1);
  sub_10001BC14(*(_QWORD *)(v0 + v9), *(_QWORD *)(v0 + v9 + 8));
  v12(v0 + v9 + *(int *)(v6 + 24), v1);
  v13 = v0 + v9 + *(int *)(v6 + 28);
  v14 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_1005FC1D4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1005EFBB4(*(_QWORD *)(v0 + 16), v0 + v2, v0 + v5, *(_QWORD *)(v0 + v6), (uint64_t)"SoundPlaybackManager.queuePlaySound", 35, (uint64_t)sub_1005FBA0C, *(double *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFF8)));
}

unint64_t sub_1005FC270(unint64_t result)
{
  if (result >= 7)
    return 7;
  return result;
}

uint64_t sub_1005FC280()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (*(_QWORD *)(v0 + 56))
    swift_release();
  return swift_deallocObject(v0, 72, 7);
}

unint64_t sub_1005FC2B4(unint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return sub_1005FAC50(result);
  return result;
}

void sub_1005FC2C4()
{
  sub_1005FCB18((uint64_t (*)(void))&static os_log_type_t.error.getter, "Timed out playSound waiting for CL. Beacon %{private,mask.hash}s. CommandId: %{public}s");
}

uint64_t sub_1005FC2D8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *a1;
  v4 = type metadata accessor for OwnedBeaconRecord(0);
  return sub_100A07660(v2 + *(int *)(v4 + 20), v3) & 1;
}

uint64_t sub_1005FC328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);

  return swift_deallocObject(v0, v8 + 8, v6);
}

void sub_1005FC3C8(uint64_t a1)
{
  sub_1005FC3E4(a1, "SPPlaySound play sound failed on device %{private,mask.hash}s. %{public}s commandId: %{public}s.", (uint64_t)sub_1005FC470, "SPPlaySound play sound initiated on device %{private,mask.hash}s commandId: %{public}s.");
}

void sub_1005FC3E4(uint64_t a1, const char *a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  sub_1005F55EC(a1, v4 + ((v10 + 16) & ~v10), v4 + ((*(_QWORD *)(v9 + 64) + v10 + ((v10 + 16) & ~v10)) & ~v10), *(const char **)(v4+ ((*(_QWORD *)(v9 + 64) + ((*(_QWORD *)(v9 + 64) + v10 + ((v10 + 16) & ~v10)) & ~v10) + 7) & 0xFFFFFFFFFFFFF8)), a2, a3, a4);
}

uint64_t sub_1005FC470(uint64_t a1)
{
  uint64_t v1;

  return sub_1005F3DFC(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1005FC48C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1005FC524()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v0 + v2;
  v4 = *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8));
  Transaction.capture()();
  sub_1005F40A4(v3, v4);
}

void sub_1005FC590()
{
  uint64_t v0;

  sub_1005EBCF0(*(void (**)(void *))(v0 + 16), *(_QWORD *)(v0 + 24), 0);
}

void sub_1005FC5AC()
{
  uint64_t v0;

  sub_1005EBCF0(*(void (**)(void *))(v0 + 16), *(_QWORD *)(v0 + 24), 10);
}

void sub_1005FC5C8()
{
  uint64_t v0;

  sub_1005EBCF0(*(void (**)(void *))(v0 + 16), *(_QWORD *)(v0 + 24), 11);
}

uint64_t sub_1005FC5E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v3 + 16 + v8) & ~v3;
  v10 = v9 + v5;
  v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v0 + v4, v1);

  swift_release(*(_QWORD *)(v0 + v8 + 8));
  v11(v0 + v9, v1);
  return swift_deallocObject(v0, v10, v6);
}

uint64_t sub_1005FC6A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_1005EBD98(v0 + v3, *(void ***)(v0 + v4), *(void ***)(v0 + v6), *(_QWORD *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), (void **)(v0 + ((v2 + 16 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v2)), *(double *)(v0 + v5));
}

void sub_1005FC71C()
{
  sub_1005FCB18((uint64_t (*)(void))&static os_log_type_t.default.getter, "Timed out waiting for CommandManager. Beacon %{private,mask.hash}s. CommandId %{public}s");
}

uint64_t sub_1005FC730(uint64_t a1)
{
  uint64_t v1;

  return sub_1005ED340(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(double *)(v1 + 48));
}

void sub_1005FC750()
{
  uint64_t v0;

  sub_1005EBCF0(*(void (**)(void *))(v0 + 16), *(_QWORD *)(v0 + 24), 1);
}

uint64_t sub_1005FC76C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (((((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

unint64_t sub_1005FC814(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1005ED9B8(a1, *(_QWORD *)(v1 + 16), *(double *)(v1 + v5), *(_QWORD *)(v1 + 24), v1 + v4, *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1005FC880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1005FC8F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_1005EDF5C(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1005FC924()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005FC934(uint64_t a1)
{
  return sub_1005FCDF0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, double))sub_1005EE064);
}

uint64_t sub_1005FC950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + 7;
  v7 = (v3 + ((v6 + v4) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v3;
  v8 = (((v6 + v7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(_QWORD *)(v0 + v8));
  return swift_deallocObject(v0, v8 + 8, v5);
}

uint64_t sub_1005FCA08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = *(_QWORD *)(v1 + 64) + 7;
  v5 = (v4 + v3) & 0xFFFFFFFFFFFFFFF8;
  return sub_1005EE380(*(char **)(v0 + 16), v0 + v3, v0 + ((v2 + v5 + 8) & ~v2), *(_QWORD *)(v0 + ((v4 + ((v2 + v5 + 8) & ~v2)) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v4 + ((v2 + v5 + 8) & ~v2)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)), *(double *)(v0 + v5));
}

uint64_t sub_1005FCA78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(_QWORD *)(v0 + v8));
  return swift_deallocObject(v0, v8 + 8, v6);
}

void sub_1005FCB18(uint64_t (*a1)(void), const char *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  sub_1005ED024(v2 + ((v6 + 16) & ~v6), v2 + ((*(_QWORD *)(v5 + 64) + v6 + ((v6 + 16) & ~v6)) & ~v6), *(_QWORD *)(v2+ ((*(_QWORD *)(v5 + 64) + ((*(_QWORD *)(v5 + 64) + v6 + ((v6 + 16) & ~v6)) & ~v6) + 7) & 0xFFFFFFFFFFFFF8)), a1, a2);
}

uint64_t sub_1005FCB8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + 7;
  v7 = (v3 + ((((v6 + v4) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9) & ~v3;
  v8 = (v6 + v7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v8));
  return swift_deallocObject(v0, v8 + 8, v5);
}

void sub_1005FCC4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = (*(_QWORD *)(v3 + 64) + 7 + v5) & 0xFFFFFFFFFFFFFFF8;
  sub_1005EFC58(a1, *(_QWORD *)(v1 + 16), *(double *)(v1 + v6), *(_QWORD *)(v1 + 24), v1 + v5, *(uint64_t (**)(uint64_t))(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8)), *(unsigned __int8 *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), (uint64_t (*)(uint64_t))(v1 + ((v4 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 9) & ~v4)));
}

uint64_t sub_1005FCCD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = ((((v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;

  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  return swift_deallocObject(v0, v8, v6);
}

uint64_t sub_1005FCD78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  return sub_1005EFBB4(*(_QWORD *)(v0 + 16), v0 + v3, v0 + ((v4 + v2 + v3) & ~v2), *(_QWORD *)(v0 + ((v4 + ((v4 + v2 + v3) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8)), (uint64_t)"SoundPlaybackManager.queuePlaySoundSingle", 41, (uint64_t)sub_1005FC934, *(double *)(v0 + ((((v4 + ((v4 + v2 + v3) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1005FCDF0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, double))
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(double *)(v2 + 32));
}

uint64_t sub_1005FCE18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  return sub_1005D6D30(*(_QWORD *)(v0 + 16), v0 + v3, v0 + ((v4 + v2 + v3) & ~v2), *(_QWORD *)(v0 + ((v4 + ((v4 + v2 + v3) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v4 + ((v4 + v2 + v3) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1005FCE70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v3 + v7 + 16) & ~v3;
  v9 = v8 + v5;
  swift_release(*(_QWORD *)(v0 + 16));
  v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  v10(v0 + v8, v1);
  return swift_deallocObject(v0, v9, v6);
}

uint64_t sub_1005FCF1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v3 + v5 + 16) & ~v3;
  v7 = *(_QWORD *)(v0 + 16);
  v8 = v0 + v4;
  v9 = (uint64_t *)(v0 + v5);
  v10 = *v9;
  v11 = v9[1];
  v12 = v0 + v6;
  v13 = (_QWORD *)swift_task_alloc(dword_1010FCA54);
  *(_QWORD *)(v1 + 16) = v13;
  *v13 = v1;
  v13[1] = sub_100004A74;
  return sub_100457DC4(v7, v8, v10, v11, v12);
}

uint64_t sub_1005FCFD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;

  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v6);
}

uint64_t sub_1005FD07C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = (v4 + v2 + v3) & ~v2;
  v6 = v0 + v3;
  v7 = v0 + v5;
  v8 = (uint64_t *)(v0 + ((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = *v8;
  v9 = v8[1];
  sub_10001AA44((_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_findMyCommandManager), *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_findMyCommandManager + 24));
  return sub_10046C654(v6, v7, v10, v9);
}

uint64_t sub_1005FD118()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v22 = *(_QWORD *)(v2 + 64);
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v21 = *(_QWORD *)(v5 + 64);

  v23 = (v3 + 24) & ~v3;
  v7 = v0 + v23;
  sub_10001BC14(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
  v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(v0 + v23 + v1[5], v4);
  v9 = v0 + v23 + v1[6];
  v10 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v9, v10))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v4);
      v11 = v3;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v4);
      v11 = v3;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v3 = v11;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v12 = v7 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4))
    v8(v12, v4);
  v13 = v7 + v1[8];
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  sub_10001BC14(*(_QWORD *)(v7 + v1[9]), *(_QWORD *)(v7 + v1[9] + 8));
  v15 = (uint64_t *)(v7 + v1[10]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10001BC14(*v15, v16);
  v17 = (uint64_t *)(v7 + v1[11]);
  v18 = v17[1];
  if (v18 >> 60 != 15)
    sub_10001BC14(*v17, v18);
  v19 = (v23 + v22 + v6) & ~v6;
  sub_10001BC14(*(_QWORD *)(v7 + v1[12]), *(_QWORD *)(v7 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v7 + v1[13]), *(_QWORD *)(v7 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v0 + v19, v4);
  swift_release();
  return swift_deallocObject(v0, ((v21 + v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | v6 | 7);
}

uint64_t sub_1005FD408()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;

  v1 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (uint64_t *)(v0 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_1005D69E0(*(_QWORD *)(v0 + 16), v0 + v2, v0 + v5, *v6, v6[1]);
}

uint64_t storeEnumTagSinglePayload for SoundPlaybackManager.PlaybackState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1005FD4D0 + 4 * byte_100E44FB6[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1005FD504 + 4 * byte_100E44FB1[v4]))();
}

uint64_t sub_1005FD504(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005FD50C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005FD514);
  return result;
}

uint64_t sub_1005FD520(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005FD528);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1005FD52C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005FD534(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SoundPlaybackManager.PlaybackState()
{
  return &type metadata for SoundPlaybackManager.PlaybackState;
}

unint64_t sub_1005FD554()
{
  unint64_t result;

  result = qword_101100BB0;
  if (!qword_101100BB0)
  {
    result = swift_getWitnessTable(a5_5, &type metadata for SoundPlaybackManager.PlaybackState);
    atomic_store(result, (unint64_t *)&qword_101100BB0);
  }
  return result;
}

unint64_t sub_1005FD598()
{
  unint64_t result;

  result = qword_101100BB8;
  if (!qword_101100BB8)
  {
    result = swift_getWitnessTable(aE_29, &type metadata for SoundPlaybackManager.PlaybackState);
    atomic_store(result, (unint64_t *)&qword_101100BB8);
  }
  return result;
}

BOOL sub_1005FD5DC(uint64_t a1)
{
  return sub_1005FACB8(a1);
}

uint64_t sub_1005FD720()
{
  return 20;
}

uint64_t sub_1005FD728(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v34;
  int64_t v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v3 = v2;
  v6 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  v40 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v46 = sub_10001A9A8(&qword_1010EBFF8);
  v7 = __chkstk_darwin(v46);
  v37 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v39 = (_QWORD **)((char *)&v34 - v10);
  v11 = __chkstk_darwin(v9);
  v13 = (_QWORD **)((char *)&v34 - v12);
  __chkstk_darwin(v11);
  v38 = (char *)&v34 - v14;
  v15 = *(_QWORD *)(a2 + 64);
  v34 = (_QWORD *)(a2 + 64);
  v16 = 1 << *(_BYTE *)(a2 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v35 = (unint64_t)(v16 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v41 = a2;
  swift_bridgeObjectRetain(a2);
  v36 = v13;
  v49 = a1;
  if (v18)
  {
    v45 = v3;
    v19 = __clz(__rbit64(v18));
    v42 = (v18 - 1) & v18;
    v43 = 0;
    goto LABEL_17;
  }
  v20 = 1;
  if (v35 > 1)
  {
    v21 = v34[1];
    if (v21)
    {
LABEL_16:
      v45 = v3;
      v42 = (v21 - 1) & v21;
      v43 = v20;
      v19 = __clz(__rbit64(v21)) + (v20 << 6);
LABEL_17:
      v23 = *(_QWORD *)(v41 + 56);
      v24 = (uint64_t *)(*(_QWORD *)(v41 + 48) + 16 * v19);
      v25 = *v24;
      v26 = v24[1];
      v44 = *(_QWORD *)(v40 + 72);
      v27 = v46;
      v28 = v38;
      sub_100035420(v23 + v44 * v19, (uint64_t)&v38[*(int *)(v46 + 48)]);
      *v28 = v25;
      v28[1] = v26;
      sub_100005CF0((uint64_t)v28, (uint64_t)v13, &qword_1010EBFF8);
      v29 = *(int *)(v27 + 48);
      v30 = v39;
      v31 = *v13;
      v32 = v13[1];
      *v39 = *v13;
      v30[1] = v32;
      sub_100035420((uint64_t)v13 + v29, (uint64_t)v30 + v29);
      v47 = v31;
      v48 = v32;
      __asm { BR              X9 }
    }
    v22 = 2;
    if (v35 > 2)
    {
      v21 = v34[2];
      if (v21)
        goto LABEL_15;
      v22 = 3;
      if (v35 <= 3)
        goto LABEL_22;
      v21 = v34[3];
      if (v21)
        goto LABEL_15;
      v22 = 4;
      if (v35 <= 4)
        goto LABEL_22;
      v21 = v34[4];
      if (v21)
      {
LABEL_15:
        v20 = v22;
        goto LABEL_16;
      }
      v22 = 5;
      if (v35 > 5)
      {
        v21 = v34[5];
        if (v21)
          goto LABEL_15;
        while (1)
        {
          v20 = v22 + 1;
          if (__OFADD__(v22, 1))
          {
            __break(1u);
            JUMPOUT(0x1005FDD48);
          }
          if (v20 >= v35)
            break;
          v21 = v34[v20];
          ++v22;
          if (v21)
            goto LABEL_16;
        }
      }
    }
  }
LABEL_22:
  swift_release();
  return a1;
}

uint64_t sub_1005FDD68(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1005FDDA4 + 4 * byte_100E45400[a1]))(0x4E6E6F6973736573, 0xEC00000065636E6FLL);
}

uint64_t sub_1005FDDA4()
{
  return 12645;
}

unint64_t sub_1005FDDB0()
{
  return 0xD000000000000013;
}

uint64_t sub_1005FDFFC(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char v41;
  __int128 v42;
  _BYTE v43[16];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101100BD0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100600CAC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AirPodsPairingLockCheckRequestContent.CodingKeys, &type metadata for AirPodsPairingLockCheckRequestContent.CodingKeys, v11, v9, v10);
  v42 = *v3;
  v41 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v42 = v3[1];
    v41 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    sub_100005CF0((uint64_t)(v3 + 2), (uint64_t)v43, &qword_1011194A0);
    sub_100005CF0((uint64_t)v43, (uint64_t)&v42, &qword_1011194A0);
    v41 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v13 = *((_QWORD *)v3 + 6);
    LOBYTE(v42) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v42, v5);
    v42 = *(__int128 *)((char *)v3 + 56);
    v41 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v42 = *(__int128 *)((char *)v3 + 72);
    v41 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v42 = *(__int128 *)((char *)v3 + 88);
    v41 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v14 = *((_QWORD *)v3 + 13);
    LOBYTE(v42) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v42, v5);
    v15 = *((_QWORD *)v3 + 14);
    v16 = *((unsigned __int8 *)v3 + 120);
    LOBYTE(v42) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v42, v5);
    *(_QWORD *)&v42 = *((_QWORD *)v3 + 16);
    v41 = 9;
    v17 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
    v18 = sub_1001B1324();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, v17, v18);
    *(_QWORD *)&v42 = *((_QWORD *)v3 + 17);
    v41 = 10;
    v19 = sub_10001A9A8(&qword_101100BE0);
    v20 = sub_100600CF0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, v19, v20);
    v21 = *((_QWORD *)v3 + 18);
    v22 = *((unsigned __int8 *)v3 + 152);
    LOBYTE(v42) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v42, v5);
    v42 = v3[10];
    v41 = 12;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v42 = v3[11];
    v41 = 13;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v42 = v3[12];
    v41 = 14;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v42 = v3[13];
    v41 = 15;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v12);
    v23 = *((_QWORD *)v3 + 28);
    v24 = *((_QWORD *)v3 + 29);
    LOBYTE(v42) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v42, v5);
    v25 = *((_QWORD *)v3 + 30);
    v26 = *((_QWORD *)v3 + 31);
    LOBYTE(v42) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v42, v5);
    v27 = *((_QWORD *)v3 + 32);
    v28 = *((_QWORD *)v3 + 33);
    LOBYTE(v42) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v28, &v42, v5);
    v29 = *((_QWORD *)v3 + 34);
    v30 = *((_QWORD *)v3 + 35);
    LOBYTE(v42) = 19;
    KeyedEncodingContainer.encode(_:forKey:)(v29, v30, &v42, v5);
    v31 = *((_QWORD *)v3 + 36);
    v32 = *((_QWORD *)v3 + 37);
    LOBYTE(v42) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, v32, &v42, v5);
    v33 = *((_QWORD *)v3 + 38);
    v34 = *((_QWORD *)v3 + 39);
    LOBYTE(v42) = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v33, v34, &v42, v5);
    v35 = *((_QWORD *)v3 + 40);
    v36 = *((_QWORD *)v3 + 41);
    LOBYTE(v42) = 22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v35, v36, &v42, v5);
    v37 = *((_QWORD *)v3 + 42);
    v38 = *((_QWORD *)v3 + 43);
    LOBYTE(v42) = 23;
    KeyedEncodingContainer.encode(_:forKey:)(v37, v38, &v42, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005FE5C0()
{
  unsigned __int8 *v0;

  return sub_1005FDD68(*v0);
}

uint64_t sub_1005FE5C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100600FD8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1005FE5EC(_BYTE *a1@<X8>)
{
  *a1 = 24;
}

uint64_t sub_1005FE5F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100600CAC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005FE620(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100600CAC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005FE648(_QWORD *a1)
{
  const void *v1;
  _BYTE v4[352];

  memcpy(v4, v1, sizeof(v4));
  return sub_1005FDFFC(a1);
}

uint64_t *sub_1005FE698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *result;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;

  v6 = *(_QWORD *)(a1 + 256);
  v7 = *(_QWORD *)(a1 + 264);
  v9 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 112);
  v12 = *(_QWORD *)(a1 + 120);
  v13 = *(_QWORD *)(a1 + 128);
  v57 = *(_QWORD *)(a1 + 144);
  v58 = *(_QWORD *)(a1 + 136);
  v48 = *(_QWORD *)(a1 + 248);
  v49 = *(_QWORD *)(a1 + 240);
  sub_10001BBBC(v49, v48);
  v46 = v7;
  v47 = v6;
  sub_10001BBBC(v6, v7);
  v45 = v9;
  v43 = v8;
  sub_10001BD08(v9, v8);
  v51 = v11;
  v41 = v10;
  sub_10001BBBC(v11, v10);
  v40 = v12;
  v50 = v13;
  sub_10001BBBC(v12, v13);
  sub_10001BBBC(v58, v57);
  v14 = sub_100035530();
  v42 = DataProtocol.intValue.getter(&type metadata for Data, v14);
  v15 = *(_QWORD *)(a1 + 176);
  v44 = *(_QWORD *)(a1 + 168);
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v15);
  v16 = sub_1006BABB8((uint64_t)_swiftEmptyArrayStorage);
  v39 = sub_1005FD728(v16, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a1 + 208);
  v18 = *(_QWORD *)(a1 + 24);
  v55 = *(_QWORD *)(a1 + 16);
  v56 = *(_QWORD *)(a1 + 216);
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD *)(a1 + 80);
  v35 = *(_QWORD *)(a1 + 88);
  v54 = *(_QWORD *)(a1 + 96);
  v22 = *(_QWORD *)(a1 + 64);
  v33 = *(_QWORD *)(a1 + 72);
  v34 = *(_QWORD *)(a1 + 56);
  v23 = *(_QWORD *)(a1 + 296);
  v37 = *(_QWORD *)(a1 + 192);
  v38 = *(_QWORD *)(a1 + 288);
  v24 = *(_QWORD *)(a1 + 312);
  v32 = *(_QWORD *)(a1 + 304);
  v36 = *(_QWORD *)(a1 + 200);
  sub_10001BBBC(v37, v36);
  sub_10001BBBC(v17, v56);
  sub_10001BBBC(v55, v18);
  sub_10001BBBC(v19, v20);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v21);
  if (v24 >> 60 != 15)
  {
    v26 = sub_1001EDBAC(v32, v24);
    v28 = v27;
    Data.hexString.getter(v26, v27);
    sub_10001BC14(v26, v28);
    __asm { BR              X11 }
  }
  result = sub_100600034((uint64_t *)a1);
  *(_QWORD *)a4 = v49;
  *(_QWORD *)(a4 + 8) = v48;
  *(_QWORD *)(a4 + 16) = v47;
  *(_QWORD *)(a4 + 24) = v46;
  *(_QWORD *)(a4 + 32) = v45;
  *(_QWORD *)(a4 + 40) = v43;
  *(_QWORD *)(a4 + 64) = v41;
  *(_QWORD *)(a4 + 72) = v40;
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = v51;
  v29 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a4 + 80) = v50;
  v31 = *(_QWORD *)(a1 + 184);
  v30 = *(_BYTE *)(a1 + 160);
  *(_QWORD *)(a4 + 88) = v58;
  *(_QWORD *)(a4 + 96) = v57;
  *(_QWORD *)(a4 + 104) = v42;
  *(_QWORD *)(a4 + 112) = v29;
  *(_BYTE *)(a4 + 120) = v30;
  *(_QWORD *)(a4 + 128) = v44;
  *(_QWORD *)(a4 + 136) = v39;
  *(_QWORD *)(a4 + 144) = v31;
  *(_BYTE *)(a4 + 152) = 0;
  *(_QWORD *)(a4 + 160) = v37;
  *(_QWORD *)(a4 + 168) = v36;
  *(_QWORD *)(a4 + 176) = v17;
  *(_QWORD *)(a4 + 184) = v56;
  *(_QWORD *)(a4 + 192) = v55;
  *(_QWORD *)(a4 + 200) = v18;
  *(_QWORD *)(a4 + 208) = v19;
  *(_QWORD *)(a4 + 216) = v20;
  *(_QWORD *)(a4 + 224) = v35;
  *(_QWORD *)(a4 + 232) = v54;
  *(_QWORD *)(a4 + 240) = v34;
  *(_QWORD *)(a4 + 248) = v22;
  *(_QWORD *)(a4 + 256) = v33;
  *(_QWORD *)(a4 + 264) = v21;
  *(_QWORD *)(a4 + 272) = 0x302E302E31;
  *(_QWORD *)(a4 + 280) = 0xE500000000000000;
  *(_QWORD *)(a4 + 288) = v38;
  *(_QWORD *)(a4 + 296) = v23;
  *(_QWORD *)(a4 + 304) = 0;
  *(_QWORD *)(a4 + 312) = 0;
  *(_QWORD *)(a4 + 320) = 0;
  *(_QWORD *)(a4 + 328) = 0;
  *(_QWORD *)(a4 + 336) = a2;
  *(_QWORD *)(a4 + 344) = a3;
  return result;
}

uint64_t sub_1005FEA8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[186] = a4;
  v4[185] = a3;
  v4[184] = a2;
  v4[183] = a1;
  v5 = type metadata accessor for HashAlgorithm(0);
  v4[187] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[188] = v6;
  v4[189] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v4[190] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[191] = v8;
  v4[192] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v4[193] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[194] = v10;
  v4[195] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005FEB48, 0, 0);
}

void sub_1005FEB48()
{
  _QWORD *v0;
  unint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  void *v38;
  id v39;
  unsigned int v40;
  NSString v41;
  unsigned int v42;
  void *v43;
  const void *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  __n128 v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  void (__cdecl *v57)();

  v1 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v3 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (!v3)
  {
    __break(1u);
    goto LABEL_11;
  }
  v4 = v3;
  v5 = objc_msgSend(v3, "serverFriendlyDescription");

  if (!v5)
  {
LABEL_11:
    __break(1u);
    return;
  }
  v6 = v0[195];
  v7 = v0[194];
  v8 = v0[193];
  v9 = v0[192];
  v55 = v0[191];
  v56 = v0[190];
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v12 = v11;

  v13 = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_100109D28(v10, v12, 0xD000000000000011, 0x8000000100ECA2C0, v13);
  v14 = v1;
  v15 = swift_bridgeObjectRelease();
  v16 = Date.init()(v15);
  v17 = Date.epoch.getter(v16);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v0[182] = v17;
  v18 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v20 = v19;
  v21 = swift_isUniquelyReferenced_nonNull_native(v14);
  sub_100109D28(v18, v20, 0xD000000000000015, 0x8000000100ECA2E0, v21);
  swift_bridgeObjectRelease();
  v0[180] = 1;
  v22 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v24 = v23;
  v25 = swift_isUniquelyReferenced_nonNull_native(v14);
  sub_100109D28(v22, v24, 0xD000000000000013, 0x8000000100ECA300, v25);
  v26 = v14;
  swift_bridgeObjectRelease();
  v27 = sub_100AC2EB8();
  v29 = v28;
  v30 = swift_isUniquelyReferenced_nonNull_native(v26);
  sub_100109D28((uint64_t)v27, v29, 0x6567412D72657355, 0xEA0000000000746ELL, v30);
  v31 = swift_bridgeObjectRelease();
  v32 = static Locale.current.getter(v31);
  v33 = Locale.acceptLanguageCode.getter(v32);
  v35 = v34;
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v9, v56);
  v36 = swift_isUniquelyReferenced_nonNull_native(v26);
  sub_100109D28(v33, v35, 0x4C2D747065636341, 0xEF65676175676E61, v36);
  v37 = v26;
  swift_bridgeObjectRelease();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v38 = (void *)qword_1011B7C08;
  v39 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v40 = objc_msgSend(v39, "isInternalBuild");

  if (v40)
  {
    v41 = String._bridgeToObjectiveC()();
    v42 = objc_msgSend(v38, "BOOLForKey:", v41);

    v43 = v0 + 134;
    v44 = v0 + 2;
    if (v42)
    {
      v45 = swift_isUniquelyReferenced_nonNull_native(v37);
      sub_100109D28(0x7465722C6C616572, 0xEF302D726F727245, 0xD000000000000012, 0x8000000100ECA340, v45);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v43 = v0 + 134;
    v44 = v0 + 2;
  }
  v0[196] = v37;
  v46 = v0[185];
  v47 = v0[184];
  v48 = (uint64_t *)v0[183];
  sub_1005FFCD8(v48);
  sub_1005FE698((uint64_t)v48, v47, v46, (uint64_t)v44);
  v49 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
  v0[197] = JSONEncoder.init()(v50);
  memcpy(v43, v44, 0x160uLL);
  v51 = sub_1005FFE64();
  v52 = dispatch thunk of JSONEncoder.encode<A>(_:)(v43, &type metadata for AirPodsPairingLockCheckRequestContent, v51);
  v0[198] = v52;
  v0[199] = v53;
  sub_10001BBBC(v52, v53);
  v57 = (void (__cdecl *)())((char *)&dword_1011152C0 + dword_1011152C0);
  v54 = (_QWORD *)swift_task_alloc(unk_1011152C4);
  v0[200] = v54;
  *v54 = v0;
  v54[1] = sub_1005FF1A0;
  v57();
}

uint64_t sub_1005FF1A0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 1600);
  *(_QWORD *)(v3 + 1608) = a1;
  *(_QWORD *)(v3 + 1616) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_1005FF200, 0, 0);
}

uint64_t sub_1005FF200()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v15;

  v1 = v0[202];
  v2 = v0[201];
  v3 = v0[199];
  v4 = v0[198];
  v5 = v0[189];
  v6 = v0[188];
  v7 = v0[187];
  v0[178] = v2;
  v0[179] = v1;
  sub_10001BBBC(v4, v3);
  sub_10001BBBC(v2, v1);
  sub_10078E27C(v4, v3);
  sub_10001BC14(v4, v3);
  sub_10001BC14(v2, v1);
  v8 = v0[178];
  v0[203] = v8;
  v9 = v0[179];
  v0[204] = v9;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  v10 = Data.hash(algorithm:)(v5, v8, v9);
  v12 = v11;
  v0[205] = v10;
  v0[206] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = (char *)&dword_1011152B8 + dword_1011152B8;
  v13 = (_QWORD *)swift_task_alloc(unk_1011152BC);
  v0[207] = v13;
  *v13 = v0;
  v13[1] = sub_1005FF340;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v15)(v10, v12, v0[186]);
}

uint64_t sub_1005FF340(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  unint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 1656);
  *(_QWORD *)(*(_QWORD *)v2 + 1664) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1005FF810;
  }
  else
  {
    v7 = v4[206];
    v8 = v4[205];
    v4[209] = a1;
    sub_10001BC14(v8, v7);
    v6 = sub_1005FF3C0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1005FF3C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  _BYTE *v50;
  _BYTE *v51;

  v1 = v0[209];
  v2 = v0[208];
  v3 = (_BYTE *)v0[196];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v51 = v3;
  sub_1001664D0(v1, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, &v51);
  if (v2)
    return swift_bridgeObjectRelease();
  v6 = v0[204];
  v45 = v0;
  v7 = v0[203];
  v8 = v51;
  swift_bridgeObjectRelease();
  v9 = sub_10001BC14(v7, v6);
  v10 = static os_log_type_t.debug.getter(v9);
  if (qword_1010EA310 != -1)
LABEL_27:
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, qword_1011B7DF0, "Pairing lock header:", 20, 2, _swiftEmptyArrayStorage);
  v46 = v8 + 64;
  v11 = -1;
  v12 = -1 << v8[32];
  if (-v12 < 64)
    v11 = ~(-1 << -(char)v12);
  v13 = v11 & *((_QWORD *)v8 + 8);
  v48 = (unint64_t)(63 - v12) >> 6;
  v50 = v8;
  swift_bridgeObjectRetain(v8);
  v14 = 0;
  v8 = &type metadata for String;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v14 << 6);
      goto LABEL_8;
    }
    v29 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v48)
      goto LABEL_24;
    v30 = *(_QWORD *)&v46[8 * v29];
    ++v14;
    if (!v30)
    {
      v14 = v29 + 1;
      if (v29 + 1 >= v48)
        goto LABEL_24;
      v30 = *(_QWORD *)&v46[8 * v14];
      if (!v30)
      {
        v14 = v29 + 2;
        if (v29 + 2 >= v48)
          goto LABEL_24;
        v30 = *(_QWORD *)&v46[8 * v14];
        if (!v30)
          break;
      }
    }
LABEL_23:
    v13 = (v30 - 1) & v30;
    v16 = __clz(__rbit64(v30)) + (v14 << 6);
LABEL_8:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*((_QWORD *)v50 + 6) + v17);
    v10 = *v18;
    v19 = v18[1];
    v20 = (uint64_t *)(*((_QWORD *)v50 + 7) + v17);
    v21 = *v20;
    v22 = v20[1];
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v22);
    v24 = static os_log_type_t.debug.getter(v23);
    v25 = qword_1011B7DF0;
    v26 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v27 = swift_allocObject(v26, 112, 7);
    *(_OWORD *)(v27 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v27 + 56) = &type metadata for String;
    v28 = sub_10001AA00();
    *(_QWORD *)(v27 + 32) = v10;
    *(_QWORD *)(v27 + 40) = v19;
    *(_QWORD *)(v27 + 96) = &type metadata for String;
    *(_QWORD *)(v27 + 104) = v28;
    *(_QWORD *)(v27 + 64) = v28;
    *(_QWORD *)(v27 + 72) = v21;
    *(_QWORD *)(v27 + 80) = v22;
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "%@: %@", 6, 2, v27);
    swift_bridgeObjectRelease();
  }
  v31 = v29 + 3;
  if (v31 < v48)
  {
    v30 = *(_QWORD *)&v46[8 * v31];
    if (!v30)
    {
      while (1)
      {
        v14 = v31 + 1;
        if (__OFADD__(v31, 1))
          goto LABEL_26;
        if (v14 >= v48)
          goto LABEL_24;
        v30 = *(_QWORD *)&v46[8 * v14];
        ++v31;
        if (v30)
          goto LABEL_23;
      }
    }
    v14 = v31;
    goto LABEL_23;
  }
LABEL_24:
  v47 = v45[198];
  v49 = v45[199];
  v32 = (uint64_t *)v45[183];
  v33 = swift_release();
  v34 = static os_log_type_t.debug.getter(v33);
  v35 = qword_1011B7DF0;
  v36 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v37 = swift_allocObject(v36, 72, 7);
  *(_OWORD *)(v37 + 16) = xmmword_100E22B00;
  memcpy(v45 + 46, v45 + 2, 0x160uLL);
  sub_1005FFEA8(v45 + 2);
  v38 = String.init<A>(describing:)(v45 + 46, &type metadata for AirPodsPairingLockCheckRequestContent);
  v40 = v39;
  *(_QWORD *)(v37 + 56) = &type metadata for String;
  *(_QWORD *)(v37 + 64) = sub_10001AA00();
  *(_QWORD *)(v37 + 32) = v38;
  *(_QWORD *)(v37 + 40) = v40;
  os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Pairing lock body %@", 20, 2, v37);
  swift_release();
  sub_100600034(v32);
  swift_bridgeObjectRelease();
  sub_10001BC14(v47, v49);
  swift_release();
  sub_1006001C0(v45 + 2);
  v41 = v45[199];
  v42 = v45[198];
  v43 = v45[192];
  v44 = v45[189];
  swift_task_dealloc(v45[195]);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v45[1])(v50, v42, v41);
}

uint64_t sub_1005FF810()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  uint64_t v53;

  v1 = v0 + 1448;
  v2 = *(_QWORD *)(v0 + 1632);
  v3 = *(_QWORD *)(v0 + 1624);
  sub_10001BC14(*(_QWORD *)(v0 + 1640), *(_QWORD *)(v0 + 1648));
  v4 = sub_10001BC14(v3, v2);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = &qword_1010EA000;
  if (qword_1010EA310 != -1)
LABEL_27:
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v7 = *(_QWORD *)(v0 + 1664);
  v8 = qword_1011B7DF0;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v10 = swift_allocObject(v9, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v0 + 1448) = v7;
  swift_errorRetain(v7);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v12 = String.init<A>(describing:)(v1, v11);
  v14 = v13;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v1 = sub_10001AA00();
  *(_QWORD *)(v10 + 64) = v1;
  *(_QWORD *)(v10 + 32) = v12;
  *(_QWORD *)(v10 + 40) = v14;
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v8, "Failed to generate attestation header %@:", 41, 2, v10);
  swift_bridgeObjectRelease();
  v15 = swift_errorRelease(v7);
  v48 = (_QWORD *)v0;
  v5 = *(_QWORD *)(v0 + 1568);
  v16 = static os_log_type_t.debug.getter(v15);
  if (v6[98] != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, qword_1011B7DF0, "Pairing lock header:", 20, 2, _swiftEmptyArrayStorage);
  v49 = v5 + 64;
  v17 = -1;
  v18 = -1 << *(_BYTE *)(v5 + 32);
  if (-v18 < 64)
    v17 = ~(-1 << -(char)v18);
  v19 = v17 & *(_QWORD *)(v5 + 64);
  v51 = (unint64_t)(63 - v18) >> 6;
  v53 = v5;
  swift_bridgeObjectRetain(v5);
  v0 = 0;
  while (1)
  {
    if (v19)
    {
      v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v21 = v20 | (v0 << 6);
      goto LABEL_8;
    }
    v32 = v0 + 1;
    if (__OFADD__(v0, 1))
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v5 = (uint64_t)v48;
    if (v32 >= v51)
      goto LABEL_24;
    v33 = *(_QWORD *)(v49 + 8 * v32);
    ++v0;
    if (!v33)
    {
      v0 = v32 + 1;
      if (v32 + 1 >= v51)
        goto LABEL_24;
      v33 = *(_QWORD *)(v49 + 8 * v0);
      if (!v33)
      {
        v0 = v32 + 2;
        if (v32 + 2 >= v51)
          goto LABEL_24;
        v33 = *(_QWORD *)(v49 + 8 * v0);
        if (!v33)
          break;
      }
    }
LABEL_23:
    v19 = (v33 - 1) & v33;
    v21 = __clz(__rbit64(v33)) + (v0 << 6);
LABEL_8:
    v22 = 16 * v21;
    v23 = (uint64_t *)(*(_QWORD *)(v53 + 48) + v22);
    v24 = *v23;
    v25 = v23[1];
    v26 = (uint64_t *)(*(_QWORD *)(v53 + 56) + v22);
    v5 = *v26;
    v27 = v26[1];
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v27);
    v6 = (uint64_t *)static os_log_type_t.debug.getter(v28);
    v29 = qword_1011B7DF0;
    v30 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v31 = swift_allocObject(v30, 112, 7);
    *(_OWORD *)(v31 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v31 + 56) = &type metadata for String;
    *(_QWORD *)(v31 + 64) = v1;
    *(_QWORD *)(v31 + 32) = v24;
    *(_QWORD *)(v31 + 40) = v25;
    *(_QWORD *)(v31 + 96) = &type metadata for String;
    *(_QWORD *)(v31 + 104) = v1;
    *(_QWORD *)(v31 + 72) = v5;
    *(_QWORD *)(v31 + 80) = v27;
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v29, "%@: %@", 6, 2, v31);
    swift_bridgeObjectRelease();
  }
  v34 = v32 + 3;
  if (v34 < v51)
  {
    v33 = *(_QWORD *)(v49 + 8 * v34);
    if (!v33)
    {
      while (1)
      {
        v0 = v34 + 1;
        if (__OFADD__(v34, 1))
          goto LABEL_26;
        if (v0 >= v51)
          goto LABEL_24;
        v33 = *(_QWORD *)(v49 + 8 * v0);
        ++v34;
        if (v33)
          goto LABEL_23;
      }
    }
    v0 = v34;
    goto LABEL_23;
  }
LABEL_24:
  v50 = v48[198];
  v52 = v48[199];
  v47 = (uint64_t *)v48[183];
  v35 = swift_release();
  v36 = static os_log_type_t.debug.getter(v35);
  v37 = qword_1011B7DF0;
  v38 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v39 = swift_allocObject(v38, 72, 7);
  *(_OWORD *)(v39 + 16) = xmmword_100E22B00;
  memcpy(v48 + 46, v48 + 2, 0x160uLL);
  sub_1005FFEA8(v48 + 2);
  v40 = String.init<A>(describing:)(v48 + 46, &type metadata for AirPodsPairingLockCheckRequestContent);
  *(_QWORD *)(v39 + 56) = &type metadata for String;
  *(_QWORD *)(v39 + 64) = v1;
  *(_QWORD *)(v39 + 32) = v40;
  *(_QWORD *)(v39 + 40) = v41;
  os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "Pairing lock body %@", 20, 2, v39);
  swift_release();
  sub_100600034(v47);
  swift_bridgeObjectRelease();
  sub_10001BC14(v50, v52);
  swift_release();
  sub_1006001C0(v48 + 2);
  v42 = v48[199];
  v43 = v48[198];
  v44 = v48[192];
  v45 = v48[189];
  swift_task_dealloc(v48[195]);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v48[1])(v53, v43, v42);
}

uint64_t *sub_1005FFCD8(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[8];
  v7 = a1[10];
  v8 = a1[12];
  v9 = a1[13];
  v10 = a1[14];
  v12 = a1[16];
  v13 = a1[15];
  v14 = a1[18];
  v15 = a1[17];
  v16 = a1[21];
  v17 = a1[22];
  v18 = a1[25];
  v19 = a1[24];
  v20 = a1[27];
  v21 = a1[26];
  v22 = a1[29];
  v23 = a1[28];
  v24 = a1[31];
  v25 = a1[30];
  v26 = a1[33];
  v27 = a1[32];
  v29 = a1[34];
  v28 = a1[35];
  v32 = a1[38];
  v30 = a1[37];
  v31 = a1[39];
  sub_10001BBBC(*a1, a1[1]);
  sub_10001BBBC(v2, v3);
  sub_10001BD08(v4, v5);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  sub_10001BBBC(v9, v10);
  sub_10001BBBC(v13, v12);
  sub_10001BBBC(v15, v14);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  sub_10001BBBC(v19, v18);
  sub_10001BBBC(v21, v20);
  sub_10001BBBC(v23, v22);
  sub_10001BBBC(v25, v24);
  sub_10001BBBC(v27, v26);
  sub_10001BD08(v29, v28);
  swift_bridgeObjectRetain(v30);
  sub_10001BD08(v32, v31);
  return a1;
}

unint64_t sub_1005FFE64()
{
  unint64_t result;

  result = qword_101100BC8;
  if (!qword_101100BC8)
  {
    result = swift_getWitnessTable(a9_7, &type metadata for AirPodsPairingLockCheckRequestContent);
    atomic_store(result, (unint64_t *)&qword_101100BC8);
  }
  return result;
}

uint64_t *sub_1005FFEA8(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[10];
  v10 = a1[11];
  v12 = a1[12];
  v13 = a1[16];
  v14 = a1[17];
  v15 = a1[21];
  v18 = a1[22];
  v16 = a1[20];
  v17 = a1[23];
  v20 = a1[25];
  v21 = a1[24];
  v23 = a1[27];
  v24 = a1[26];
  v25 = a1[29];
  v26 = a1[31];
  v27 = a1[33];
  v28 = a1[35];
  v29 = a1[37];
  v30 = a1[39];
  v19 = a1[41];
  v22 = a1[43];
  sub_10001BBBC(*a1, a1[1]);
  sub_10001BBBC(v2, v3);
  sub_10001BD08(v4, v5);
  sub_10001BBBC(v6, v7);
  sub_10001BBBC(v8, v9);
  sub_10001BBBC(v10, v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  sub_10001BBBC(v16, v15);
  sub_10001BBBC(v18, v17);
  sub_10001BBBC(v21, v20);
  sub_10001BBBC(v24, v23);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  return a1;
}

uint64_t *sub_100600034(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[13];
  v7 = a1[14];
  v9 = a1[16];
  v10 = a1[15];
  v11 = a1[18];
  v12 = a1[17];
  v13 = a1[25];
  v14 = a1[24];
  v15 = a1[27];
  v16 = a1[26];
  v17 = a1[29];
  v18 = a1[28];
  v19 = a1[31];
  v20 = a1[30];
  v21 = a1[33];
  v22 = a1[32];
  v24 = a1[34];
  v23 = a1[35];
  v26 = a1[38];
  v25 = a1[39];
  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(v2, v3);
  sub_10001EF3C(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v6, v7);
  sub_10001BC14(v10, v9);
  sub_10001BC14(v12, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v14, v13);
  sub_10001BC14(v16, v15);
  sub_10001BC14(v18, v17);
  sub_10001BC14(v20, v19);
  sub_10001BC14(v22, v21);
  sub_10001EF3C(v24, v23);
  swift_bridgeObjectRelease();
  sub_10001EF3C(v26, v25);
  return a1;
}

uint64_t *sub_1006001C0(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[10];
  v10 = a1[11];
  v12 = a1[12];
  v13 = a1[21];
  v16 = a1[22];
  v14 = a1[20];
  v15 = a1[23];
  v17 = a1[25];
  v18 = a1[24];
  v19 = a1[27];
  v20 = a1[26];
  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(v2, v3);
  sub_10001EF3C(v4, v5);
  sub_10001BC14(v6, v7);
  sub_10001BC14(v8, v9);
  sub_10001BC14(v10, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v14, v13);
  sub_10001BC14(v16, v15);
  sub_10001BC14(v18, v17);
  sub_10001BC14(v20, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10060034C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100600390(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010EBFF8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1006003D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t destroy for AirPodsPairingLockCheckRequestContent(uint64_t *a1)
{
  unint64_t v2;

  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(a1[2], a1[3]);
  v2 = a1[5];
  if (v2 >> 60 != 15)
    sub_10001BC14(a1[4], v2);
  sub_10001BC14(a1[7], a1[8]);
  sub_10001BC14(a1[9], a1[10]);
  sub_10001BC14(a1[11], a1[12]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(a1[20], a1[21]);
  sub_10001BC14(a1[22], a1[23]);
  sub_10001BC14(a1[24], a1[25]);
  sub_10001BC14(a1[26], a1[27]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AirPodsPairingLockCheckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = (uint64_t *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    sub_10001BBBC(*v8, *(_QWORD *)(a2 + 40));
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v9;
  }
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 64);
  sub_10001BBBC(v11, v12);
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  sub_10001BBBC(v13, v14);
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  sub_10001BBBC(v15, v16);
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  v17 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v17;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v18 = *(_QWORD *)(a2 + 128);
  v19 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v18;
  *(_QWORD *)(a1 + 136) = v19;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  v20 = *(_QWORD *)(a2 + 160);
  v21 = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  sub_10001BBBC(v20, v21);
  *(_QWORD *)(a1 + 160) = v20;
  *(_QWORD *)(a1 + 168) = v21;
  v22 = *(_QWORD *)(a2 + 176);
  v23 = *(_QWORD *)(a2 + 184);
  sub_10001BBBC(v22, v23);
  *(_QWORD *)(a1 + 176) = v22;
  *(_QWORD *)(a1 + 184) = v23;
  v24 = *(_QWORD *)(a2 + 192);
  v25 = *(_QWORD *)(a2 + 200);
  sub_10001BBBC(v24, v25);
  *(_QWORD *)(a1 + 192) = v24;
  *(_QWORD *)(a1 + 200) = v25;
  v26 = *(_QWORD *)(a2 + 208);
  v27 = *(_QWORD *)(a2 + 216);
  sub_10001BBBC(v26, v27);
  *(_QWORD *)(a1 + 208) = v26;
  *(_QWORD *)(a1 + 216) = v27;
  v28 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v28;
  v29 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v29;
  v30 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v30;
  v31 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v31;
  v32 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v32;
  v33 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v33;
  v34 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = v34;
  v35 = *(_QWORD *)(a2 + 336);
  v36 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = v35;
  *(_QWORD *)(a1 + 344) = v36;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v36);
  return a1;
}

uint64_t assignWithCopy for AirPodsPairingLockCheckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  sub_10001BC14(v10, v11);
  v12 = (uint64_t *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40) >> 60 != 15)
  {
    if (v13 >> 60 != 15)
    {
      v15 = *v12;
      sub_10001BBBC(*v12, *(_QWORD *)(a2 + 40));
      v16 = *(_QWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 32) = v15;
      *(_QWORD *)(a1 + 40) = v13;
      sub_10001BC14(v16, v17);
      goto LABEL_8;
    }
    sub_1000DC964(a1 + 32);
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v12;
    goto LABEL_8;
  }
  v14 = *v12;
  sub_10001BBBC(*v12, *(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = v13;
LABEL_8:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v18 = *(_QWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 64);
  sub_10001BBBC(v18, v19);
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v18;
  *(_QWORD *)(a1 + 64) = v19;
  sub_10001BC14(v20, v21);
  v22 = *(_QWORD *)(a2 + 72);
  v23 = *(_QWORD *)(a2 + 80);
  sub_10001BBBC(v22, v23);
  v24 = *(_QWORD *)(a1 + 72);
  v25 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v22;
  *(_QWORD *)(a1 + 80) = v23;
  sub_10001BC14(v24, v25);
  v26 = *(_QWORD *)(a2 + 88);
  v27 = *(_QWORD *)(a2 + 96);
  sub_10001BBBC(v26, v27);
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v26;
  *(_QWORD *)(a1 + 96) = v27;
  sub_10001BC14(v28, v29);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v30 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v30;
  v31 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease();
  v32 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease();
  v33 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v33;
  v34 = *(_QWORD *)(a2 + 160);
  v35 = *(_QWORD *)(a2 + 168);
  sub_10001BBBC(v34, v35);
  v36 = *(_QWORD *)(a1 + 160);
  v37 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = v34;
  *(_QWORD *)(a1 + 168) = v35;
  sub_10001BC14(v36, v37);
  v38 = *(_QWORD *)(a2 + 176);
  v39 = *(_QWORD *)(a2 + 184);
  sub_10001BBBC(v38, v39);
  v40 = *(_QWORD *)(a1 + 176);
  v41 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = v38;
  *(_QWORD *)(a1 + 184) = v39;
  sub_10001BC14(v40, v41);
  v42 = *(_QWORD *)(a2 + 192);
  v43 = *(_QWORD *)(a2 + 200);
  sub_10001BBBC(v42, v43);
  v44 = *(_QWORD *)(a1 + 192);
  v45 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = v42;
  *(_QWORD *)(a1 + 200) = v43;
  sub_10001BC14(v44, v45);
  v46 = *(_QWORD *)(a2 + 208);
  v47 = *(_QWORD *)(a2 + 216);
  sub_10001BBBC(v46, v47);
  v48 = *(_QWORD *)(a1 + 208);
  v49 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = v46;
  *(_QWORD *)(a1 + 216) = v47;
  sub_10001BC14(v48, v49);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v50 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 232) = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  v51 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 248) = v51;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v52 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 264) = v52;
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v53 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 280) = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  v54 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 296) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  v55 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 312) = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  v56 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 328) = v56;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  v57 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 344) = v57;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for AirPodsPairingLockCheckRequestContent(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x160uLL);
}

uint64_t assignWithTake for AirPodsPairingLockCheckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v6, v7);
  v8 = (_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 >> 60 != 15)
  {
    v10 = *(_QWORD *)(a2 + 40);
    if (v10 >> 60 != 15)
    {
      v11 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = *v8;
      *(_QWORD *)(a1 + 40) = v10;
      sub_10001BC14(v11, v9);
      goto LABEL_6;
    }
    sub_1000DC964(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
LABEL_6:
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v12;
  sub_10001BC14(v13, v14);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  sub_10001BC14(v15, v16);
  v17 = *(_QWORD *)(a1 + 88);
  v18 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  sub_10001BC14(v17, v18);
  v19 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v19;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  v20 = *(_QWORD *)(a1 + 160);
  v21 = *(_QWORD *)(a1 + 168);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  sub_10001BC14(v20, v21);
  v22 = *(_QWORD *)(a1 + 176);
  v23 = *(_QWORD *)(a1 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  sub_10001BC14(v22, v23);
  v24 = *(_QWORD *)(a1 + 192);
  v25 = *(_QWORD *)(a1 + 200);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  sub_10001BC14(v24, v25);
  v26 = *(_QWORD *)(a1 + 208);
  v27 = *(_QWORD *)(a1 + 216);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  sub_10001BC14(v26, v27);
  v28 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = v28;
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v29;
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v30;
  swift_bridgeObjectRelease();
  v31 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = v31;
  swift_bridgeObjectRelease();
  v32 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v32;
  swift_bridgeObjectRelease();
  v33 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v33;
  swift_bridgeObjectRelease();
  v34 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = v34;
  swift_bridgeObjectRelease();
  v35 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v35;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsPairingLockCheckRequestContent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 352))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 128);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsPairingLockCheckRequestContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 344) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 352) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 128) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 352) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingLockCheckRequestContent()
{
  return &type metadata for AirPodsPairingLockCheckRequestContent;
}

ValueMetadata *type metadata accessor for AirPodsPairingLockCheckRequest()
{
  return &type metadata for AirPodsPairingLockCheckRequest;
}

unint64_t sub_100600CAC()
{
  unint64_t result;

  result = qword_101100BD8;
  if (!qword_101100BD8)
  {
    result = swift_getWitnessTable(byte_100E455D4, &type metadata for AirPodsPairingLockCheckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101100BD8);
  }
  return result;
}

unint64_t sub_100600CF0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101100BE8;
  if (!qword_101100BE8)
  {
    v1 = sub_10001F784(&qword_101100BE0);
    v2[0] = &protocol witness table for String;
    v2[1] = sub_100600D5C();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_101100BE8);
  }
  return result;
}

unint64_t sub_100600D5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101100BF0;
  if (!qword_101100BF0)
  {
    v1 = type metadata accessor for MultipartAccessoryPairingInfo(255);
    result = swift_getWitnessTable(byte_100E4B060, v1);
    atomic_store(result, (unint64_t *)&qword_101100BF0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AirPodsPairingLockCheckRequestContent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE9)
    goto LABEL_17;
  if (a2 + 23 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 23) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 23;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 23;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 23;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x18;
  v8 = v6 - 24;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsPairingLockCheckRequestContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 23 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 23) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE8)
    return ((uint64_t (*)(void))((char *)&loc_100600E80 + 4 * byte_100E4541D[v4]))();
  *a1 = a2 + 23;
  return ((uint64_t (*)(void))((char *)sub_100600EB4 + 4 * byte_100E45418[v4]))();
}

uint64_t sub_100600EB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100600EBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100600EC4);
  return result;
}

uint64_t sub_100600ED0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100600ED8);
  *(_BYTE *)result = a2 + 23;
  return result;
}

uint64_t sub_100600EDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100600EE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingLockCheckRequestContent.CodingKeys()
{
  return &type metadata for AirPodsPairingLockCheckRequestContent.CodingKeys;
}

unint64_t sub_100600F04()
{
  unint64_t result;

  result = qword_101100BF8;
  if (!qword_101100BF8)
  {
    result = swift_getWitnessTable(byte_100E455AC, &type metadata for AirPodsPairingLockCheckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101100BF8);
  }
  return result;
}

unint64_t sub_100600F4C()
{
  unint64_t result;

  result = qword_101100C00;
  if (!qword_101100C00)
  {
    result = swift_getWitnessTable(byte_100E4551C, &type metadata for AirPodsPairingLockCheckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101100C00);
  }
  return result;
}

unint64_t sub_100600F94()
{
  unint64_t result;

  result = qword_101100C08;
  if (!qword_101100C08)
  {
    result = swift_getWitnessTable(byte_100E45544, &type metadata for AirPodsPairingLockCheckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101100C08);
  }
  return result;
}

uint64_t sub_100600FD8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;

  if (a1 == 0x4E6E6F6973736573 && a2 == 0xEC00000065636E6FLL)
  {
    v5 = 0xEC00000065636E6FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E6E6F6973736573, 0xEC00000065636E6FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 12645 && a2 == 0xE200000000000000)
  {
    v7 = 0xE200000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12645, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000013)
  {
    v8 = 0x8000000100EC3110;
    if (a2 == 0x8000000100EC3110)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100EC3110, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x74617453636E7973 && a2 == 0xEA00000000007375)
  {
    v9 = 0xEA00000000007375;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74617453636E7973, 0xEA00000000007375, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 1684628325 && a2 == 0xE400000000000000)
  {
    v10 = 0xE400000000000000;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684628325, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x644970696863 && a2 == 0xE600000000000000)
  {
    v11 = 0xE600000000000000;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644970696863, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v12 = 0xEC0000007265626DLL;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x644974726170 && a2 == 0xE600000000000000)
  {
    v13 = 0xE600000000000000;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644974726170, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x6F636165426D756ELL && a2 == 0xEA0000000000736ELL)
  {
    v14 = 0xEA0000000000736ELL;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F636165426D756ELL, 0xEA0000000000736ELL, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100EC8A80)
  {
    v15 = 0x8000000100EC8A80;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100EC8A80, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0xD00000000000001BLL && a2 == 0x8000000100EDCCE0)
  {
    v16 = 0x8000000100EDCCE0;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100EDCCE0, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_67;
  }
  if (a1 == 0x6E55646572616873 && a2 == 0xEA00000000007469)
  {
    v17 = 0xEA00000000007469;
LABEL_73:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E55646572616873, 0xEA00000000007469, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_73;
  }
  if (a1 == 0x314B64656573 && a2 == 0xE600000000000000)
  {
    v18 = 0xE600000000000000;
LABEL_79:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x314B64656573, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_79;
  }
  if (a1 == 0x7374726563 && a2 == 0xE500000000000000)
  {
    v19 = 0xE500000000000000;
LABEL_85:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7374726563, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_85;
  }
  if (a1 == 0x726F737365636361 && a2 == 0xED00006E67695379)
  {
    v20 = 0xED00006E67695379;
LABEL_91:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F737365636361, 0xED00006E67695379, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_91;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100EDCD00)
  {
    v21 = 0x8000000100EDCD00;
LABEL_97:
    swift_bridgeObjectRelease(v21);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100EDCD00, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_97;
  }
  if (a1 == 0xD000000000000011)
  {
    v22 = 0x8000000100ECA360;
    if (a2 == 0x8000000100ECA360)
      goto LABEL_102;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ECA360, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
LABEL_102:
    swift_bridgeObjectRelease(v22);
    return 16;
  }
  if (a1 == 0x69634572656E776FLL && a2 == 0xE900000000000064)
  {
    v23 = 0xE900000000000064;
LABEL_108:
    swift_bridgeObjectRelease(v23);
    return 17;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69634572656E776FLL, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
    goto LABEL_108;
  }
  if (a1 == 0x69684372656E776FLL && a2 == 0xEB00000000644970)
  {
    v24 = 0xEB00000000644970;
LABEL_114:
    swift_bridgeObjectRelease(v24);
    return 18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69684372656E776FLL, 0xEB00000000644970, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
    goto LABEL_114;
  }
  if (a1 == 0x7372655663657073 && a2 == 0xEB000000006E6F69)
  {
    v25 = 0xEB000000006E6F69;
LABEL_120:
    swift_bridgeObjectRelease(v25);
    return 19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7372655663657073, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v25 = a2;
    goto LABEL_120;
  }
  if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556)
  {
    v26 = 0xEF6E6F6973726556;
LABEL_126:
    swift_bridgeObjectRelease(v26);
    return 20;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261776D726966, 0xEF6E6F6973726556, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
    goto LABEL_126;
  }
  if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064)
  {
    v27 = 0xE900000000000064;
LABEL_132:
    swift_bridgeObjectRelease(v27);
    return 21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v27 = a2;
    goto LABEL_132;
  }
  if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    v28 = 0xE800000000000000;
LABEL_138:
    swift_bridgeObjectRelease(v28);
    return 22;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449726F646E6576, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v28 = a2;
    goto LABEL_138;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100EDCD20)
  {
    swift_bridgeObjectRelease(0x8000000100EDCD20);
    return 23;
  }
  else
  {
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EDCD20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v29 & 1) != 0)
      return 23;
    else
      return 24;
  }
}

uint64_t sub_100601994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B7200);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7200);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017, 0x8000000100E45630, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_100601A64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  Swift::UInt8 v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  Swift::UInt64 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v2 = v1;
  v4 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v54 = *(_QWORD *)(v4 - 8);
  v55 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010FBA50);
  __chkstk_darwin(v7);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v56 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v52 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010FBA40);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v53 = (uint64_t)&v51 - v16;
  v17 = type metadata accessor for UUID(0);
  v18 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v17, v18);
  v19 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
  v20 = *(unsigned __int8 *)(v1 + v19[5]);
  if (v20 == 2)
  {
    v21 = 0;
  }
  else
  {
    v21 = v20 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v21);
  Hasher._combine(_:)(*(_BYTE *)(v1 + v19[6]));
  Hasher._combine(_:)(*(_BYTE *)(v1 + v19[7]));
  v22 = (uint64_t *)(v1 + v19[8]);
  v23 = *v22;
  v24 = v22[1];
  swift_bridgeObjectRetain(v24);
  String.hash(into:)(a1, v23, v24);
  swift_bridgeObjectRelease();
  v25 = (uint64_t *)(v2 + v19[9]);
  v26 = *v25;
  v27 = v25[1];
  swift_bridgeObjectRetain(v27);
  String.hash(into:)(a1, v26, v27);
  swift_bridgeObjectRelease();
  v28 = v2 + v19[10];
  if (*(_BYTE *)(v28 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v29 = *(_QWORD *)v28;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }
  v30 = (uint64_t *)(v2 + v19[11]);
  v31 = v30[1];
  if (v31)
  {
    v51 = v10;
    v32 = v6;
    v33 = *v30;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v31);
    v34 = v33;
    v6 = v32;
    v10 = v51;
    String.hash(into:)(a1, v34, v31);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v35 = v53;
  sub_10000F9B8(v2 + v19[12], v53, &qword_1010FBA40);
  v36 = v56;
  v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
  if (v37(v35, 1, v10) == 1)
  {
    Hasher._combine(_:)(0);
    v38 = v56;
  }
  else
  {
    v39 = v35;
    v40 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v52, v39, v10);
    Hasher._combine(_:)(1u);
    v41 = sub_100006204(&qword_1010FE228, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v10, v41);
    v38 = v56;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v40, v10);
  }
  sub_10000F9B8(v2 + v19[13], (uint64_t)v15, &qword_1010FBA40);
  if (v37((uint64_t)v15, 1, v10) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v42 = v52;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v52, v15, v10);
    Hasher._combine(_:)(1u);
    v43 = sub_100006204(&qword_1010FE228, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v10, v43);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v42, v10);
  }
  v44 = (uint64_t *)(v2 + v19[14]);
  v45 = *v44;
  v46 = v44[1];
  swift_bridgeObjectRetain(v46);
  String.hash(into:)(a1, v45, v46);
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(v2 + v19[15]) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v47 = *(_QWORD *)(v2 + v19[15]);
  else
    v47 = 0;
  Hasher._combine(_:)(v47);
  sub_10000F9B8(v2 + v19[16], (uint64_t)v9, &qword_1010FBA50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v9, 1, v55) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_100606DEC((uint64_t)v9, (uint64_t)v6);
    Hasher._combine(_:)(1u);
    sub_1004F96A4(a1);
    sub_1000126B0((uint64_t)v6, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  }
  Hasher._combine(_:)(*(_DWORD *)(v2 + v19[17]));
  v48 = *(_QWORD *)(v2 + v19[18]);
  if (v48)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v48);
    sub_100969AF0(a1, v48);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v49 = sub_100006204(&qword_1010FE228, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(a1, v10, v49);
  dispatch thunk of Hashable.hash(into:)(a1, v10, v49);
  dispatch thunk of Hashable.hash(into:)(a1, v10, v49);
  dispatch thunk of Hashable.hash(into:)(a1, v10, v49);
  dispatch thunk of Hashable.hash(into:)(a1, v10, v49);
  return dispatch thunk of Hashable.hash(into:)(a1, v10, v49);
}

uint64_t sub_100602058(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100602090 + 4 * byte_100E45630[a1]))(0x696669746E656469, 0xEA00000000007265);
}

unint64_t sub_100602090()
{
  return 0xD000000000000012;
}

uint64_t sub_100602148()
{
  return 0x55656C6261736964;
}

unint64_t sub_100602164()
{
  return 0xD000000000000011;
}

uint64_t sub_100602290(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  char v52;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101100D00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100606DA8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BeaconProductInfoRecord.CodingKeys, &type metadata for BeaconProductInfoRecord.CodingKeys, v11, v9, v10);
  LOBYTE(v51) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v51, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
    v15 = *(unsigned __int8 *)(v3 + v14[5]);
    LOBYTE(v51) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, &v51, v5);
    v16 = *(unsigned __int8 *)(v3 + v14[6]);
    LOBYTE(v51) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v51, v5);
    v17 = *(unsigned __int8 *)(v3 + v14[7]);
    LOBYTE(v51) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v51, v5);
    v18 = (uint64_t *)(v3 + v14[8]);
    v19 = *v18;
    v20 = v18[1];
    LOBYTE(v51) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v51, v5);
    v21 = (uint64_t *)(v3 + v14[9]);
    v22 = *v21;
    v23 = v21[1];
    LOBYTE(v51) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v51, v5);
    v24 = (uint64_t *)(v3 + v14[10]);
    v25 = *v24;
    v26 = *((unsigned __int8 *)v24 + 8);
    LOBYTE(v51) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v51, v5);
    v27 = (uint64_t *)(v3 + v14[11]);
    v28 = *v27;
    v29 = v27[1];
    LOBYTE(v51) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v51, v5);
    v30 = v3 + v14[12];
    LOBYTE(v51) = 8;
    v31 = type metadata accessor for URL(0);
    v32 = sub_100006204(&qword_1010FE330, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v30, &v51, v5, v31, v32);
    v33 = v3 + v14[13];
    LOBYTE(v51) = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v33, &v51, v5, v31, v32);
    v34 = (uint64_t *)(v3 + v14[14]);
    v35 = *v34;
    v36 = v34[1];
    LOBYTE(v51) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v35, v36, &v51, v5);
    v37 = *(double *)(v3 + v14[15]);
    LOBYTE(v51) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(&v51, v5, v37);
    v50 = v3 + v14[16];
    LOBYTE(v51) = 12;
    v38 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    v39 = sub_100006204(&qword_1010FE2A8, type metadata accessor for AccessoryInfoResponseContent.Configuration, (uint64_t)&unk_100E414D0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v50, &v51, v5, v38, v39);
    LODWORD(v51) = *(_DWORD *)(v3 + v14[17]);
    v52 = 13;
    v40 = sub_100136494();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v51, &v52, v5, &type metadata for AccessoryCapabilities, v40);
    v51 = *(_QWORD *)(v3 + v14[18]);
    v52 = 14;
    v41 = sub_10001A9A8(&qword_1010FE278);
    v42 = sub_1004FF9D0(&qword_1010FE2C8, (uint64_t (*)(void))sub_1004FFA38, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v51, &v52, v5, v41, v42);
    v43 = v3 + v14[19];
    LOBYTE(v51) = 15;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v43, &v51, v5, v31, v32);
    v44 = v3 + v14[20];
    LOBYTE(v51) = 16;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v44, &v51, v5, v31, v32);
    v45 = v3 + v14[21];
    LOBYTE(v51) = 17;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v45, &v51, v5, v31, v32);
    v46 = v3 + v14[22];
    LOBYTE(v51) = 18;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v46, &v51, v5, v31, v32);
    v47 = v3 + v14[23];
    LOBYTE(v51) = 19;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v47, &v51, v5, v31, v32);
    v48 = v3 + v14[24];
    LOBYTE(v51) = 20;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v48, &v51, v5, v31, v32);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100602844@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(void);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  char v50;
  int *v51;
  uint64_t v52;
  int v53;
  int v54;
  _BOOL4 v55;
  int v56;
  int v57;
  int v58;
  _BOOL4 v59;
  int v60;
  int v61;
  char *v62;
  int *v63;
  uint64_t result;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, _QWORD *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BOOL4 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t *v134;
  int *v135;
  char *v136;
  _QWORD v137[2];
  char v138;

  v115 = a2;
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v114 = (uint64_t *)((char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __chkstk_darwin(v5);
  v110 = (uint64_t *)((char *)&v109 - v8);
  v9 = __chkstk_darwin(v7);
  v113 = (uint64_t *)((char *)&v109 - v10);
  v11 = __chkstk_darwin(v9);
  v112 = (uint64_t *)((char *)&v109 - v12);
  v13 = __chkstk_darwin(v11);
  v111 = (uint64_t *)((char *)&v109 - v14);
  __chkstk_darwin(v13);
  v116 = (uint64_t *)((char *)&v109 - v15);
  v16 = sub_10001A9A8(&qword_1010FBA50);
  __chkstk_darwin(v16);
  v117 = (uint64_t)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_1010FBA40);
  v19 = __chkstk_darwin(v18);
  v118 = (uint64_t)&v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v121 = (uint64_t)&v109 - v21;
  v125 = type metadata accessor for UUID(0);
  v122 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v120 = (uint64_t *)((char *)&v109 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v126 = sub_10001A9A8(&qword_101100D10);
  v119 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v24 = (char *)&v109 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
  v26 = (int *)__chkstk_darwin(v25);
  v28 = (char *)&v109 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = &v28[v26[10]];
  *(_QWORD *)v29 = 0;
  v29[8] = 1;
  v30 = &v28[v26[11]];
  *(_QWORD *)v30 = 0;
  *((_QWORD *)v30 + 1) = 0;
  v134 = (uint64_t *)v30;
  v31 = v26[12];
  v128 = v4;
  v32 = *(void (**)(void))(v4 + 56);
  v132 = &v28[v31];
  v32();
  v131 = &v28[v25[13]];
  v32();
  v33 = (uint64_t)&v28[v25[16]];
  v34 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
  v130 = v33;
  v35(v33, 1, 1, v34);
  v135 = v25;
  v136 = v28;
  v127 = v25[18];
  *(_QWORD *)&v28[v127] = 0;
  v36 = a1[3];
  v37 = a1[4];
  v124 = a1;
  sub_10001AA44(a1, v36);
  v38 = sub_100606DA8();
  v123 = v24;
  v39 = v133;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BeaconProductInfoRecord.CodingKeys, &type metadata for BeaconProductInfoRecord.CodingKeys, v38, v36, v37);
  v129 = v3;
  if (v39)
  {
    v133 = v39;
    LODWORD(v126) = 0;
    v40 = 21376;
    v41 = v136;
    v42 = v124;
    v43 = v125;
  }
  else
  {
    v109 = v34;
    v44 = v3;
    v45 = v119;
    LOBYTE(v137[0]) = 0;
    v46 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v47 = v120;
    v48 = v125;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v120, v125, v137, v126, v125, v46);
    v49 = v136;
    (*(void (**)(char *, _QWORD *, uint64_t))(v122 + 32))(v136, v47, v48);
    LOBYTE(v137[0]) = 1;
    v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v137, v126);
    v51 = v135;
    v49[v135[5]] = v50;
    LOBYTE(v137[0]) = 2;
    v49[v51[6]] = KeyedDecodingContainer.decode(_:forKey:)(v137, v126) & 1;
    LOBYTE(v137[0]) = 3;
    v49[v51[7]] = KeyedDecodingContainer.decode(_:forKey:)(v137, v126) & 1;
    LOBYTE(v137[0]) = 4;
    v52 = KeyedDecodingContainer.decode(_:forKey:)(v137, v126);
    v67 = (uint64_t *)&v49[v51[8]];
    *v67 = v52;
    v67[1] = v68;
    LOBYTE(v137[0]) = 5;
    v69 = KeyedDecodingContainer.decode(_:forKey:)(v137, v126);
    v70 = (uint64_t *)&v49[v51[9]];
    *v70 = v69;
    v70[1] = v71;
    LOBYTE(v137[0]) = 6;
    MEMORY[0] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v137, v126);
    MEMORY[8] = v72 & 1;
    LOBYTE(v137[0]) = 7;
    v73 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v137, v126);
    v74 = v134;
    *v134 = v73;
    v74[1] = v75;
    LOBYTE(v137[0]) = 8;
    v76 = sub_100006204(&qword_1010FE320, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v44, v137, v126, v44, v76);
    v77 = v48;
    sub_100004084(v121, (uint64_t)v132, &qword_1010FBA40);
    LOBYTE(v137[0]) = 9;
    v78 = v76;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v44, v137, v126, v44, v76);
    v133 = 0;
    sub_100004084(v118, (uint64_t)v131, &qword_1010FBA40);
    LOBYTE(v137[0]) = 10;
    v79 = v133;
    v80 = KeyedDecodingContainer.decode(_:forKey:)(v137, v126);
    v133 = v79;
    if (v79)
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v123, v126);
      LODWORD(v126) = 0;
      v40 = 21425;
    }
    else
    {
      v82 = (uint64_t *)&v136[v135[14]];
      *v82 = v80;
      v82[1] = v81;
      LOBYTE(v137[0]) = 11;
      v83 = v133;
      v84.n128_f64[0] = KeyedDecodingContainer.decode(_:forKey:)(v137, v126);
      v133 = v83;
      if (v83)
        goto LABEL_32;
      *(_QWORD *)&v136[v135[15]] = v84.n128_u64[0];
      LOBYTE(v137[0]) = 12;
      v85 = sub_100006204(&qword_1010FE260, type metadata accessor for AccessoryInfoResponseContent.Configuration, (uint64_t)&unk_100E414F8);
      v86 = v133;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v109, v137, v126, v109, v85);
      v133 = v86;
      if (v86)
        goto LABEL_32;
      sub_100004084(v117, v130, &qword_1010FBA50);
      v138 = 13;
      v87 = sub_1001362FC();
      v88 = v133;
      KeyedDecodingContainer.decode<A>(_:forKey:)(v137, &type metadata for AccessoryCapabilities, &v138, v126, &type metadata for AccessoryCapabilities, v87);
      v133 = v88;
      if (v88)
        goto LABEL_32;
      *(_DWORD *)&v136[v135[17]] = v137[0];
      v89 = sub_10001A9A8(&qword_1010FE278);
      v138 = 14;
      v90 = sub_1004FF9D0(&qword_1010FE280, (uint64_t (*)(void))sub_1004FF8C0, (const char *)&protocol conformance descriptor for <A> [A]);
      v91 = v133;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v89, &v138, v126, v89, v90);
      v133 = v91;
      if (v91)
        goto LABEL_32;
      v93 = v136;
      v92 = v137[0];
      v94 = v127;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v93[v94] = v92;
      LOBYTE(v137[0]) = 15;
      v95 = v133;
      KeyedDecodingContainer.decode<A>(_:forKey:)(v116, v129, v137, v126, v129, v76);
      v133 = v95;
      if (v95)
      {
LABEL_32:
        (*(void (**)(char *, uint64_t, __n128))(v45 + 8))(v123, v126, v84);
        LODWORD(v126) = 0;
        v40 = 22449;
      }
      else
      {
        v96 = v129;
        v97 = *(void (**)(char *, _QWORD *, uint64_t))(v128 + 32);
        v97(&v136[v135[19]], v116, v129);
        LOBYTE(v137[0]) = 16;
        v98 = v133;
        KeyedDecodingContainer.decode<A>(_:forKey:)(v111, v96, v137, v126, v96, v76);
        v133 = v98;
        if (!v98)
        {
          v99 = v129;
          v97(&v136[v135[20]], v111, v129);
          LOBYTE(v137[0]) = 17;
          v100 = v133;
          KeyedDecodingContainer.decode<A>(_:forKey:)(v112, v99, v137, v126, v99, v76);
          v101 = v100 == 0;
          v133 = v100;
          if (v100
            || (v102 = v129,
                v97(&v136[v135[21]], v112, v129),
                LOBYTE(v137[0]) = 18,
                v103 = v133,
                KeyedDecodingContainer.decode<A>(_:forKey:)(v113, v102, v137, v126, v102, v78),
                (v133 = v103) != 0))
          {
            (*(void (**)(char *, uint64_t))(v45 + 8))(v123, v126);
            v56 = 0;
            v57 = 0;
          }
          else
          {
            v104 = v129;
            v97(&v136[v135[22]], v113, v129);
            LOBYTE(v137[0]) = 19;
            v105 = v133;
            KeyedDecodingContainer.decode<A>(_:forKey:)(v110, v104, v137, v126, v104, v78);
            v133 = v105;
            if (v105)
            {
              (*(void (**)(char *, uint64_t))(v45 + 8))(v123, v126);
              v57 = 0;
              v56 = 1;
            }
            else
            {
              v106 = v129;
              v97(&v136[v135[23]], v110, v129);
              LOBYTE(v137[0]) = 20;
              v107 = v133;
              KeyedDecodingContainer.decode<A>(_:forKey:)(v114, v106, v137, v126, v106, v78);
              v133 = v107;
              if (!v107)
              {
                (*(void (**)(char *, uint64_t))(v45 + 8))(v123, v126);
                v108 = (uint64_t)v136;
                v97(&v136[v135[24]], v114, v129);
                sub_100604630(v108, v115);
                _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v124);
                return sub_1000126B0(v108, type metadata accessor for BeaconProductInfoRecord);
              }
              (*(void (**)(char *, uint64_t))(v45 + 8))(v123, v126);
              v56 = 1;
              v57 = 1;
            }
          }
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v124);
          (*(void (**)(char *, uint64_t))(v122 + 8))(v136, v77);
          swift_bridgeObjectRelease();
          v53 = 1;
          LODWORD(v126) = 1;
          v54 = 1;
          v55 = v101;
          goto LABEL_9;
        }
        (*(void (**)(char *, uint64_t))(v45 + 8))(v123, v126);
        v40 = 55217;
        LODWORD(v126) = 1;
      }
    }
    v41 = v136;
    v42 = v124;
    v43 = v77;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  v53 = (v40 >> 10) & 1;
  if ((v40 & 1) != 0)
    (*(void (**)(char *, uint64_t))(v122 + 8))(v41, v43);
  if ((v40 & 0x10) != 0)
    swift_bridgeObjectRelease();
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  if ((v40 & 0x20) != 0)
  {
LABEL_9:
    v59 = v55;
    swift_bridgeObjectRelease();
    v58 = v54;
    v60 = v56;
    v61 = v57;
  }
  swift_bridgeObjectRelease();
  sub_100004048((uint64_t)v132, &qword_1010FBA40);
  sub_100004048((uint64_t)v131, &qword_1010FBA40);
  v63 = v135;
  v62 = v136;
  if (v53)
    swift_bridgeObjectRelease();
  sub_100004048(v130, &qword_1010FBA50);
  result = swift_bridgeObjectRelease();
  v66 = v128;
  v65 = v129;
  if ((_DWORD)v126)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v128 + 8))(&v62[v63[19]], v129);
    if (!v58)
      goto LABEL_14;
  }
  else if (!v58)
  {
LABEL_14:
    if (v59)
      goto LABEL_15;
    goto LABEL_20;
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(&v62[v63[20]], v65);
  if (v59)
  {
LABEL_15:
    result = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(&v62[v63[21]], v65);
    if (!v60)
      goto LABEL_16;
LABEL_21:
    result = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(&v62[v63[22]], v65);
    if (!v61)
      return result;
    return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(&v62[v63[23]], v65);
  }
LABEL_20:
  if (v60)
    goto LABEL_21;
LABEL_16:
  if (!v61)
    return result;
  return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(&v62[v63[23]], v65);
}

uint64_t sub_10060353C@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v33;
  int *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v47)(uint64_t, uint64_t, uint64_t);

  v33 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(a9, a1, v33);
  v34 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
  *(_BYTE *)(a9 + v34[5]) = a2;
  *(_BYTE *)(a9 + v34[6]) = a3;
  *(_BYTE *)(a9 + v34[7]) = a4;
  v35 = (_QWORD *)(a9 + v34[8]);
  *v35 = a5;
  v35[1] = a6;
  v36 = (_QWORD *)(a9 + v34[9]);
  *v36 = a7;
  v36[1] = a8;
  v37 = a9 + v34[10];
  *(_QWORD *)v37 = a11;
  *(_BYTE *)(v37 + 8) = a12 & 1;
  v38 = (_QWORD *)(a9 + v34[11]);
  *v38 = a13;
  v38[1] = a14;
  sub_100005CF0(a15, a9 + v34[12], &qword_1010FBA40);
  sub_100005CF0(a16, a9 + v34[13], &qword_1010FBA40);
  v39 = (_QWORD *)(a9 + v34[14]);
  *v39 = a17;
  v39[1] = a18;
  *(double *)(a9 + v34[15]) = a10;
  sub_100005CF0(a19, a9 + v34[16], &qword_1010FBA50);
  *(_DWORD *)(a9 + v34[17]) = a20;
  *(_QWORD *)(a9 + v34[18]) = a21;
  v40 = a9 + v34[19];
  v41 = type metadata accessor for URL(0);
  v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 32);
  v47(v40, a22, v41);
  v47(a9 + v34[20], a23, v41);
  v47(a9 + v34[21], a24, v41);
  v47(a9 + v34[22], a25, v41);
  v47(a9 + v34[23], a26, v41);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v47)(a9 + v34[24], a27, v41);
}

uint64_t sub_1006037C0()
{
  unsigned __int8 *v0;

  return sub_100602058(*v0);
}

uint64_t sub_1006037C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100607B78(a1, a2);
  *a3 = result;
  return result;
}

void sub_1006037EC(_BYTE *a1@<X8>)
{
  *a1 = 21;
}

uint64_t sub_1006037F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100606DA8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100603820(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100606DA8();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_100603848()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100601A64((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100603888()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100601A64((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_1006038C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100602844(a1, a2);
}

uint64_t sub_1006038D4(_QWORD *a1)
{
  return sub_100602290(a1);
}

uint64_t sub_1006038EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int v73;
  int v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;

  v77 = a3;
  v78 = a2;
  v4 = type metadata accessor for URL(0);
  v69 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v76 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v75 = (char *)&v55 - v8;
  v9 = __chkstk_darwin(v7);
  v72 = (char *)&v55 - v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v55 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v55 - v15;
  v55 = (uint64_t)&v55 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v55 - v17;
  v56 = (uint64_t)&v55 - v17;
  v19 = sub_10001A9A8(&qword_1010FBA50);
  __chkstk_darwin(v19);
  v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = v21;
  v22 = sub_10001A9A8(&qword_1010FBA40);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v55 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = v25;
  __chkstk_darwin(v23);
  v27 = (char *)&v55 - v26;
  v64 = (uint64_t)&v55 - v26;
  v28 = (int *)type metadata accessor for AccessoryProductInfo(0);
  v29 = v28[10];
  v30 = *(unsigned __int8 *)(a1 + v28[6]);
  v73 = *(unsigned __int8 *)(a1 + v28[7]);
  v74 = v30;
  v31 = v28[13];
  v32 = (uint64_t *)(a1 + v28[12]);
  v33 = *v32;
  v60 = v32[1];
  v34 = *(_QWORD *)(a1 + v31 + 8);
  v70 = *(_QWORD *)(a1 + v31);
  v71 = v33;
  v62 = v34;
  v35 = v28[15];
  v36 = a1 + v28[14];
  v67 = *(_QWORD *)v36;
  v66 = *(unsigned __int8 *)(v36 + 8);
  v37 = a1 + v28[17];
  v38 = *(_QWORD *)(a1 + v35 + 8);
  v65 = *(_QWORD *)(a1 + v35);
  v59 = v38;
  v68 = *(unsigned __int8 *)(a1 + v29);
  sub_10000F9B8(v37, (uint64_t)v27, &qword_1010FBA40);
  sub_10000F9B8(a1 + v28[16], (uint64_t)v25, &qword_1010FBA40);
  v39 = v28[19];
  v40 = (uint64_t *)(a1 + v28[18]);
  v41 = v40[1];
  v61 = *v40;
  v42 = *(double *)(a1 + v39);
  sub_10000F9B8(a1 + v28[20], (uint64_t)v21, &qword_1010FBA50);
  v43 = v28[22];
  v57 = *(_DWORD *)(a1 + v28[21]);
  v44 = *(_QWORD *)(a1 + v43);
  v45 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 16);
  v45(v18, a1 + v28[25], v4);
  v45(v16, a1 + v28[26], v4);
  v46 = (uint64_t)v13;
  v45(v13, a1 + v28[27], v4);
  v47 = (uint64_t)v72;
  v45(v72, a1 + v28[28], v4);
  v48 = (uint64_t)v75;
  v45(v75, a1 + v28[29], v4);
  v49 = a1 + v28[30];
  v50 = (uint64_t)v76;
  v45(v76, v49, v4);
  swift_bridgeObjectRetain(v44);
  v51 = v60;
  swift_bridgeObjectRetain(v60);
  v52 = v62;
  swift_bridgeObjectRetain(v62);
  v53 = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v41);
  sub_1000126B0(a1, type metadata accessor for AccessoryProductInfo);
  return sub_10060353C(v78, v68, v74, v73, v71, v51, v70, v52, v77, v42, v67, v66, v65, v53, v64, (uint64_t)v63, v61, v41, (uint64_t)v58,
           v57,
           v44,
           v56,
           v55,
           v46,
           v47,
           v48,
           v50);
}

id sub_100603CFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  unsigned int v12;
  NSString v13;
  unsigned __int8 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSString v19;
  NSString v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSString v28;
  NSString v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int (*v41)(unint64_t, uint64_t, uint64_t);
  NSURL *v42;
  void *v43;
  void *v44;
  NSString v45;
  uint64_t v46;
  NSURL *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  id v51;
  NSString v52;
  uint64_t v53;
  uint64_t v54;
  NSString v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  id v64;
  NSString v65;
  NSString v66;
  NSArray v67;
  id v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  int *v82;
  unint64_t v83;
  id v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  _QWORD *v88;

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010FBA40);
  v3 = __chkstk_darwin(v2);
  v85 = (uint64_t)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (unint64_t)&v82 - v5;
  v7 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = objc_msgSend(objc_allocWithZone((Class)SPDiscoveredAccessoryProductInformation), "init");
  if (qword_1010EA198 != -1)
    goto LABEL_49;
  while (1)
  {
    v10 = (void *)qword_1011B7C08;
    v11 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
    v12 = objc_msgSend(v11, "isInternalBuild");

    if (v12)
    {
      v13 = String._bridgeToObjectiveC()();
      v14 = objc_msgSend(v10, "BOOLForKey:", v13);

      v15 = *(unsigned __int8 *)(v1 + v7[5]);
      if (v15 == 2)
      {
        v16 = 0;
        goto LABEL_9;
      }
    }
    else
    {
      v15 = *(unsigned __int8 *)(v1 + v7[5]);
      if (v15 == 2)
      {
        objc_msgSend(v84, "setIsManagedAccessory:", 0);
        sub_100604630(v1, (uint64_t)v9);
        goto LABEL_11;
      }
      v14 = 0;
    }
    v16 = v15 & 1;
LABEL_9:
    objc_msgSend(v84, "setIsManagedAccessory:", v16);
    sub_100604630(v1, (uint64_t)v9);
    if ((v14 & 1) != 0)
    {
      v17 = 0;
      goto LABEL_12;
    }
LABEL_11:
    v17 = v9[v7[6]];
LABEL_12:
    sub_1000126B0((uint64_t)v9, type metadata accessor for BeaconProductInfoRecord);
    v18 = v84;
    objc_msgSend(v84, "setEligibleForPairing:", v17);
    objc_msgSend(v18, "setHidden:", *(unsigned __int8 *)(v1 + v7[7]));
    v19 = String._bridgeToObjectiveC()();
    objc_msgSend(v18, "setModelName:", v19);

    v20 = String._bridgeToObjectiveC()();
    objc_msgSend(v18, "setManufacturerName:", v20);

    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v9 = (char *)sub_100C1AF0C((uint64_t)v88);
    swift_bridgeObjectRelease();
    v21 = *((_QWORD *)v9 + 2);
    if (!v21)
      break;
    v83 = v6;
    v6 = 0;
    v22 = v9 + 32;
    v86 = v9 + 32;
    v87 = v21;
    while (v6 < *((_QWORD *)v9 + 2))
    {
      v31 = *(_QWORD *)&v22[32 * v6 + 24];
      v32 = *(_QWORD *)(v31 + 16);
      if (v32)
      {
        v33 = v1 + v7[10];
        v34 = *(_QWORD *)v33;
        v35 = *(unsigned __int8 *)(v33 + 8);
        v36 = (uint64_t *)(v31 + 64);
        while (1)
        {
          v37 = *(v36 - 4) == v34 ? v35 : 1;
          if (v37 != 1)
            break;
          v36 += 5;
          if (!--v32)
            goto LABEL_17;
        }
        v23 = *(v36 - 2);
        v24 = v7;
        v25 = v1;
        v26 = *v36;
        v27 = objc_allocWithZone((Class)SPBeaconRole);
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v26);
        v28 = String._bridgeToObjectiveC()();
        v29 = String._bridgeToObjectiveC()();
        v30 = objc_msgSend(v27, "initWithRoleId:role:roleEmoji:", v34, v28, v29);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v1 = v25;
        v7 = v24;
        objc_msgSend(v84, "setDefaultRole:", v30);

        v22 = v86;
        v21 = v87;
      }
LABEL_17:
      if (++v6 == v21)
      {
        swift_bridgeObjectRelease();
        v6 = v83;
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_49:
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  }
  swift_bridgeObjectRelease();
LABEL_29:
  sub_10000F9B8(v1 + v7[12], v6, &qword_1010FBA40);
  v38 = type metadata accessor for URL(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = v6;
  v41 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v39 + 48);
  v43 = 0;
  if (v41(v40, 1, v38) != 1)
  {
    URL._bridgeToObjectiveC()(v42);
    v43 = v44;
    (*(void (**)(unint64_t, uint64_t))(v39 + 8))(v40, v38);
  }
  objc_msgSend(v84, "setDisableURL:", v43);

  if (*(_QWORD *)(v1 + v7[11] + 8))
    v45 = String._bridgeToObjectiveC()();
  else
    v45 = 0;
  objc_msgSend(v84, "setAppBundleIdentifier:", v45);

  v46 = v85;
  sub_10000F9B8(v1 + v7[13], v85, &qword_1010FBA40);
  if (v41(v46, 1, v38) == 1)
  {
    v48 = 0;
  }
  else
  {
    v49 = v46;
    URL._bridgeToObjectiveC()(v47);
    v48 = v50;
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v49, v38);
  }
  v51 = v84;
  objc_msgSend(v84, "setLowBatteryInfoURL:", v48);

  v52 = String._bridgeToObjectiveC()();
  objc_msgSend(v51, "setVersion:", v52);

  objc_msgSend(v51, "setTxPower:", *(double *)(v1 + v7[15]));
  objc_msgSend(v51, "setCapabilities:", sub_100C6C080(*(_DWORD *)(v1 + v7[17])));
  v85 = *(_QWORD *)(v1 + v7[18]);
  if (v85)
  {
    v53 = *(_QWORD *)(v85 + 16);
    if (v53)
    {
      v82 = v7;
      v83 = v1;
      v88 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v85);
      specialized ContiguousArray.reserveCapacity(_:)(v53);
      v54 = 0;
      do
      {
        v59 = *(unsigned __int8 *)(v85 + v54 + 32);
        v60 = *(_QWORD *)(v85 + v54 + 48);
        v61 = *(_QWORD *)(v85 + v54 + 64);
        v62 = *(_QWORD *)(v85 + v54 + 80);
        v86 = *(char **)(v85 + v54 + 72);
        LODWORD(v87) = *(unsigned __int8 *)(v85 + v54 + 88);
        v63 = objc_allocWithZone((Class)SPAccessoryLayoutTemplate);
        swift_bridgeObjectRetain(v62);
        swift_bridgeObjectRetain(v60);
        v64 = objc_msgSend(v63, "init", swift_bridgeObjectRetain(v61).n128_f64[0]);
        objc_msgSend(v64, "setPartIdentifier:", v59);
        v65 = String._bridgeToObjectiveC()();
        objc_msgSend(v64, "setPartType:", v65);

        v66 = String._bridgeToObjectiveC()();
        objc_msgSend(v64, "setPartName:", v66);

        if (v62)
        {
          swift_bridgeObjectRetain(v62);
          v55 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          v55 = 0;
        }
        objc_msgSend(v64, "setPartSymbol:", v55);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        objc_msgSend(v64, "setIsPrimary:", v87 & 1);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v56);
        v57 = v88[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v57);
        v58 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v57, v64);
        specialized ContiguousArray._endMutation()(v58);
        v54 += 64;
        --v53;
      }
      while (v53);
      swift_bridgeObjectRelease();
      v7 = v82;
    }
    sub_100604674();
    v67.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v67.super.isa = 0;
  }
  v68 = v84;
  objc_msgSend(v84, "setLayoutTemplate:", v67.super.isa);

  URL._bridgeToObjectiveC()((NSURL *)v7[19]);
  v70 = v69;
  objc_msgSend(v68, "setDefaultHeroIcon:", v69);

  URL._bridgeToObjectiveC()((NSURL *)v7[20]);
  v72 = v71;
  objc_msgSend(v68, "setDefaultListIcon:", v71);

  URL._bridgeToObjectiveC()((NSURL *)v7[21]);
  v74 = v73;
  objc_msgSend(v68, "setDefaultHeroIcon2x:", v73);

  URL._bridgeToObjectiveC()((NSURL *)v7[22]);
  v76 = v75;
  objc_msgSend(v68, "setDefaultListIcon2x:", v75);

  URL._bridgeToObjectiveC()((NSURL *)v7[23]);
  v78 = v77;
  objc_msgSend(v68, "setDefaultHeroIcon3x:", v77);

  URL._bridgeToObjectiveC()((NSURL *)v7[24]);
  v80 = v79;
  objc_msgSend(v68, "setDefaultListIcon3x:", v79);

  return v68;
}

uint64_t type metadata accessor for BeaconProductInfoRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_101100C68;
  if (!qword_101100C68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconProductInfoRecord);
  return result;
}

uint64_t sub_100604630(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeaconProductInfoRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100604674()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010FBA58;
  if (!qword_1010FBA58)
  {
    v1 = objc_opt_self(SPAccessoryLayoutTemplate);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1010FBA58);
  }
  return result;
}

_QWORD *sub_1006046B0(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, void *, __n128);
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  int *v46;
  uint64_t v47;
  unsigned int (*v48)(_QWORD *, uint64_t, int *, __n128);
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  void (*v85)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  void (*v92)(char *, char *, void *, __n128);
  __n128 v93;
  char *v95;
  uint64_t v96;
  char *__dst;
  void *__dsta;
  unsigned int (*v99)(char *, uint64_t, void *, __n128);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v31 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = a3[9];
    v14 = a3[10];
    v15 = (_QWORD *)((char *)a1 + v13);
    v16 = (_QWORD *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (char *)a1 + v14;
    v19 = (char *)a2 + v14;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    v18[8] = v19[8];
    v20 = a3[11];
    v21 = a3[12];
    v22 = (_QWORD *)((char *)a1 + v20);
    v23 = (_QWORD *)((char *)a2 + v20);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    __dst = (char *)a1 + v21;
    v25 = (char *)a2 + v21;
    v26 = type metadata accessor for URL(0);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(unsigned int (**)(char *, uint64_t, void *, __n128))(v27 + 48);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v17);
    v29 = swift_bridgeObjectRetain(v24);
    v99 = v28;
    if (v28(v25, 1, (void *)v26, v29))
    {
      v30 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(__dst, v25, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dst, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
    }
    v32 = a3[13];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    __dsta = (void *)v26;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v28)((char *)a2 + v32, 1, v26))
    {
      v35 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v33, v34, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v33, 0, 1, v26);
    }
    v36 = a3[14];
    v37 = a3[15];
    v38 = (_QWORD *)((char *)a1 + v36);
    v39 = (_QWORD *)((char *)a2 + v36);
    v40 = *v39;
    v41 = v39[1];
    v42 = *(_QWORD *)((char *)a2 + v37);
    *v38 = v40;
    v38[1] = v41;
    *(_QWORD *)((char *)a1 + v37) = v42;
    v43 = a3[16];
    v44 = (_QWORD *)((char *)a1 + v43);
    v45 = (_QWORD *)((char *)a2 + v43);
    v46 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    v47 = *((_QWORD *)v46 - 1);
    v48 = *(unsigned int (**)(_QWORD *, uint64_t, int *, __n128))(v47 + 48);
    v49 = swift_bridgeObjectRetain(v41);
    if (v48(v45, 1, v46, v49))
    {
      v50 = sub_10001A9A8(&qword_1010FBA50);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
    }
    else
    {
      v96 = v47;
      v51 = v45[1];
      *v44 = *v45;
      v44[1] = v51;
      v52 = v45[3];
      v44[2] = v45[2];
      v44[3] = v52;
      v53 = v45[5];
      v44[4] = v45[4];
      v44[5] = v53;
      *((_WORD *)v44 + 24) = *((_WORD *)v45 + 24);
      *((_BYTE *)v44 + 72) = *((_BYTE *)v45 + 72);
      v54 = v45[8];
      v44[7] = v45[7];
      v44[8] = v54;
      v55 = v46[10];
      v95 = (char *)v44 + v55;
      v56 = (char *)v45 + v55;
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRetain(v52);
      v57 = swift_bridgeObjectRetain(v53);
      if (v99(v56, 1, __dsta, v57))
      {
        v58 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v95, v56, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
        v59 = v27;
      }
      else
      {
        v59 = v27;
        (*(void (**)(char *, char *, void *))(v27 + 16))(v95, v56, __dsta);
        (*(void (**)(char *, _QWORD, uint64_t, void *))(v27 + 56))(v95, 0, 1, __dsta);
      }
      v60 = v46[11];
      v61 = (char *)v44 + v60;
      v62 = (char *)v45 + v60;
      if (((unsigned int (*)(char *, uint64_t, void *))v99)((char *)v45 + v60, 1, __dsta))
      {
        v63 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, void *))(v59 + 16))(v61, v62, __dsta);
        (*(void (**)(char *, _QWORD, uint64_t, void *))(v59 + 56))(v61, 0, 1, __dsta);
      }
      v64 = v46[12];
      v65 = (char *)v44 + v64;
      v66 = (char *)v45 + v64;
      *(_QWORD *)v65 = *(_QWORD *)v66;
      v65[8] = v66[8];
      v67 = v46[13];
      v68 = (_QWORD *)((char *)v44 + v67);
      v69 = (_QWORD *)((char *)v45 + v67);
      v70 = v69[1];
      *v68 = *v69;
      v68[1] = v70;
      v71 = v46[14];
      v72 = *(_QWORD *)((char *)v45 + v71);
      *(_QWORD *)((char *)v44 + v71) = v72;
      v73 = v46[15];
      v74 = (_QWORD *)((char *)v44 + v73);
      v75 = (_QWORD *)((char *)v45 + v73);
      v76 = v75[1];
      *v74 = *v75;
      v74[1] = v76;
      v77 = v46[16];
      v78 = *(_QWORD *)((char *)v45 + v77);
      *(_QWORD *)((char *)v44 + v77) = v78;
      v79 = v46[17];
      v80 = (char *)v44 + v79;
      v81 = (char *)v45 + v79;
      *(_OWORD *)v80 = *(_OWORD *)v81;
      v80[16] = v81[16];
      v82 = v46[18];
      v83 = (char *)v44 + v82;
      v84 = (char *)v45 + v82;
      *(_OWORD *)v83 = *(_OWORD *)v84;
      v83[16] = v84[16];
      v85 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v96 + 56);
      swift_bridgeObjectRetain(v70);
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRetain(v76);
      v86 = swift_bridgeObjectRetain(v78);
      v85(v44, 0, 1, v46, v86);
    }
    v87 = a3[18];
    *(_DWORD *)((char *)a1 + a3[17]) = *(_DWORD *)((char *)a2 + a3[17]);
    v88 = *(_QWORD *)((char *)a2 + v87);
    *(_QWORD *)((char *)a1 + v87) = v88;
    v89 = a3[19];
    v90 = (char *)a1 + v89;
    v91 = (char *)a2 + v89;
    v92 = *(void (**)(char *, char *, void *, __n128))(v27 + 16);
    v93 = swift_bridgeObjectRetain(v88);
    v92(v90, v91, __dsta, v93);
    ((void (*)(char *, char *, void *))v92)((char *)a1 + a3[20], (char *)a2 + a3[20], __dsta);
    ((void (*)(char *, char *, void *))v92)((char *)a1 + a3[21], (char *)a2 + a3[21], __dsta);
    ((void (*)(char *, char *, void *))v92)((char *)a1 + a3[22], (char *)a2 + a3[22], __dsta);
    ((void (*)(char *, char *, void *))v92)((char *)a1 + a3[23], (char *)a2 + a3[23], __dsta);
    ((void (*)(char *, char *, void *))v92)((char *)a1 + a3[24], (char *)a2 + a3[24], __dsta);
  }
  return a1;
}

uint64_t sub_100604C08(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v15)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = a1 + a2[12];
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = a1 + a2[13];
  if (!v8(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  v10 = a1 + a2[16];
  v11 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12 = v10 + *(int *)(v11 + 40);
    if (!v8(v12, 1, v6))
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v12, v6);
    v13 = v10 + *(int *)(v11 + 44);
    if (!v8(v13, 1, v6))
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v13, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v15 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v15(a1 + a2[19], v6);
  v15(a1 + a2[20], v6);
  v15(a1 + a2[21], v6);
  v15(a1 + a2[22], v6);
  v15(a1 + a2[23], v6);
  return ((uint64_t (*)(uint64_t, uint64_t))v15)(a1 + a2[24], v6);
}

uint64_t sub_100604E70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, void *, __n128);
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  int *v44;
  uint64_t v45;
  unsigned int (*v46)(_QWORD *, uint64_t, int *, __n128);
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  void (*v83)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, void *, __n128);
  __n128 v91;
  char *v93;
  uint64_t v94;
  void *__dst;
  void *__dsta;
  unsigned int (*v97)(char *, uint64_t, void *, __n128);

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a3[9];
  v13 = a3[10];
  v14 = (_QWORD *)(a1 + v12);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = a1 + v13;
  v18 = a2 + v13;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  v19 = a3[11];
  v20 = a3[12];
  v21 = (_QWORD *)(a1 + v19);
  v22 = (_QWORD *)(a2 + v19);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  __dst = (void *)(a1 + v20);
  v24 = (void *)(a2 + v20);
  v25 = type metadata accessor for URL(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned int (**)(char *, uint64_t, void *, __n128))(v26 + 48);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v16);
  v28 = swift_bridgeObjectRetain(v23);
  v97 = v27;
  if (v27((char *)v24, 1, (void *)v25, v28))
  {
    v29 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(__dst, v24, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v26 + 16))(__dst, v24, v25);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(__dst, 0, 1, v25);
  }
  v30 = a3[13];
  v31 = (void *)(a1 + v30);
  v32 = (const void *)(a2 + v30);
  __dsta = (void *)v25;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v27)(a2 + v30, 1, v25))
  {
    v33 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 16))(v31, v32, v25);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v31, 0, 1, v25);
  }
  v34 = a3[14];
  v35 = a3[15];
  v36 = (_QWORD *)(a1 + v34);
  v37 = (uint64_t *)(a2 + v34);
  v38 = *v37;
  v39 = v37[1];
  v40 = *(_QWORD *)(a2 + v35);
  *v36 = v38;
  v36[1] = v39;
  *(_QWORD *)(a1 + v35) = v40;
  v41 = a3[16];
  v42 = (_QWORD *)(a1 + v41);
  v43 = (_QWORD *)(a2 + v41);
  v44 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v45 = *((_QWORD *)v44 - 1);
  v46 = *(unsigned int (**)(_QWORD *, uint64_t, int *, __n128))(v45 + 48);
  v47 = swift_bridgeObjectRetain(v39);
  if (v46(v43, 1, v44, v47))
  {
    v48 = sub_10001A9A8(&qword_1010FBA50);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    v94 = v45;
    v49 = v43[1];
    *v42 = *v43;
    v42[1] = v49;
    v50 = v43[3];
    v42[2] = v43[2];
    v42[3] = v50;
    v51 = v43[5];
    v42[4] = v43[4];
    v42[5] = v51;
    *((_WORD *)v42 + 24) = *((_WORD *)v43 + 24);
    *((_BYTE *)v42 + 72) = *((_BYTE *)v43 + 72);
    v52 = v43[8];
    v42[7] = v43[7];
    v42[8] = v52;
    v53 = v44[10];
    v93 = (char *)v42 + v53;
    v54 = (char *)v43 + v53;
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v50);
    v55 = swift_bridgeObjectRetain(v51);
    if (v97(v54, 1, __dsta, v55))
    {
      v56 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v93, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      v57 = v26;
    }
    else
    {
      v57 = v26;
      (*(void (**)(char *, char *, void *))(v26 + 16))(v93, v54, __dsta);
      (*(void (**)(char *, _QWORD, uint64_t, void *))(v26 + 56))(v93, 0, 1, __dsta);
    }
    v58 = v44[11];
    v59 = (char *)v42 + v58;
    v60 = (char *)v43 + v58;
    if (((unsigned int (*)(char *, uint64_t, void *))v97)((char *)v43 + v58, 1, __dsta))
    {
      v61 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, void *))(v57 + 16))(v59, v60, __dsta);
      (*(void (**)(char *, _QWORD, uint64_t, void *))(v57 + 56))(v59, 0, 1, __dsta);
    }
    v62 = v44[12];
    v63 = (char *)v42 + v62;
    v64 = (char *)v43 + v62;
    *(_QWORD *)v63 = *(_QWORD *)v64;
    v63[8] = v64[8];
    v65 = v44[13];
    v66 = (_QWORD *)((char *)v42 + v65);
    v67 = (_QWORD *)((char *)v43 + v65);
    v68 = v67[1];
    *v66 = *v67;
    v66[1] = v68;
    v69 = v44[14];
    v70 = *(_QWORD *)((char *)v43 + v69);
    *(_QWORD *)((char *)v42 + v69) = v70;
    v71 = v44[15];
    v72 = (_QWORD *)((char *)v42 + v71);
    v73 = (_QWORD *)((char *)v43 + v71);
    v74 = v73[1];
    *v72 = *v73;
    v72[1] = v74;
    v75 = v44[16];
    v76 = *(_QWORD *)((char *)v43 + v75);
    *(_QWORD *)((char *)v42 + v75) = v76;
    v77 = v44[17];
    v78 = (char *)v42 + v77;
    v79 = (char *)v43 + v77;
    *(_OWORD *)v78 = *(_OWORD *)v79;
    v78[16] = v79[16];
    v80 = v44[18];
    v81 = (char *)v42 + v80;
    v82 = (char *)v43 + v80;
    *(_OWORD *)v81 = *(_OWORD *)v82;
    v81[16] = v82[16];
    v83 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v94 + 56);
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v74);
    v84 = swift_bridgeObjectRetain(v76);
    v83(v42, 0, 1, v44, v84);
  }
  v85 = a3[18];
  *(_DWORD *)(a1 + a3[17]) = *(_DWORD *)(a2 + a3[17]);
  v86 = *(_QWORD *)(a2 + v85);
  *(_QWORD *)(a1 + v85) = v86;
  v87 = a3[19];
  v88 = a1 + v87;
  v89 = a2 + v87;
  v90 = *(void (**)(uint64_t, uint64_t, void *, __n128))(v26 + 16);
  v91 = swift_bridgeObjectRetain(v86);
  v90(v88, v89, __dsta, v91);
  ((void (*)(uint64_t, uint64_t, void *))v90)(a1 + a3[20], a2 + a3[20], __dsta);
  ((void (*)(uint64_t, uint64_t, void *))v90)(a1 + a3[21], a2 + a3[21], __dsta);
  ((void (*)(uint64_t, uint64_t, void *))v90)(a1 + a3[22], a2 + a3[22], __dsta);
  ((void (*)(uint64_t, uint64_t, void *))v90)(a1 + a3[23], a2 + a3[23], __dsta);
  ((void (*)(uint64_t, uint64_t, void *))v90)(a1 + a3[24], a2 + a3[24], __dsta);
  return a1;
}

uint64_t sub_10060539C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t (*v46)(uint64_t, uint64_t, int *);
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const void *v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const void *v64;
  int v65;
  int v66;
  size_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 *v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  __int128 v96;
  void (*v97)(uint64_t, _QWORD, uint64_t, int *, __n128);
  __n128 v98;
  uint64_t v99;
  const void *v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 *v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  __int128 *v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(uint64_t, uint64_t, uint64_t);
  void *__dst;
  void *__dsta;
  void *__dstb;
  uint64_t v136;
  uint64_t v137;
  _QWORD *__src;
  unsigned int (*v139)(const void *, uint64_t, uint64_t, __n128);

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v7 = a3[8];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  v11 = a3[9];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v14 = v13[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease();
  v15 = a3[10];
  v16 = a1 + v15;
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  *(_BYTE *)(v16 + 8) = *((_BYTE *)v17 + 8);
  *(_QWORD *)v16 = v18;
  v19 = a3[11];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  v23 = a3[12];
  v24 = (void *)(a1 + v23);
  v25 = (void *)(a2 + v23);
  v26 = type metadata accessor for URL(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v30)
  {
    (*(void (**)(void *, uint64_t))(v27 + 8))(v24, v26);
LABEL_6:
    v31 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v27 + 24))(v24, v25, v26);
LABEL_7:
  v32 = a3[13];
  v33 = (void *)(a1 + v32);
  v34 = (void *)(a2 + v32);
  v35 = v28((void *)(a1 + v32), 1, v26);
  v36 = v28(v34, 1, v26);
  v139 = (unsigned int (*)(const void *, uint64_t, uint64_t, __n128))v28;
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 16))(v33, v34, v26);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v33, 0, 1, v26);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v36)
  {
    (*(void (**)(void *, uint64_t))(v27 + 8))(v33, v26);
LABEL_12:
    v37 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v27 + 24))(v33, v34, v26);
LABEL_13:
  v38 = a3[14];
  v39 = (_QWORD *)(a1 + v38);
  v40 = (_QWORD *)(a2 + v38);
  *v39 = *v40;
  v41 = v40[1];
  v39[1] = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  v42 = a3[16];
  v43 = a1 + v42;
  v44 = a2 + v42;
  v45 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  __src = (_QWORD *)*((_QWORD *)v45 - 1);
  v46 = (uint64_t (*)(uint64_t, uint64_t, int *))__src[6];
  v47 = v46(v43, 1, v45);
  v48 = v46(v44, 1, v45);
  if (v47)
  {
    if (!v48)
    {
      v136 = v27;
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v49 = *(_QWORD *)(v44 + 8);
      *(_QWORD *)(v43 + 8) = v49;
      *(_QWORD *)(v43 + 16) = *(_QWORD *)(v44 + 16);
      v50 = *(_QWORD *)(v44 + 24);
      *(_QWORD *)(v43 + 24) = v50;
      *(_QWORD *)(v43 + 32) = *(_QWORD *)(v44 + 32);
      v51 = *(_QWORD *)(v44 + 40);
      *(_QWORD *)(v43 + 40) = v51;
      *(_WORD *)(v43 + 48) = *(_WORD *)(v44 + 48);
      *(_QWORD *)(v43 + 56) = *(_QWORD *)(v44 + 56);
      v52 = *(_QWORD *)(v44 + 64);
      *(_BYTE *)(v43 + 72) = *(_BYTE *)(v44 + 72);
      *(_QWORD *)(v43 + 64) = v52;
      v53 = v45[10];
      __dst = (void *)(v43 + v53);
      v54 = (const void *)(v44 + v53);
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRetain(v50);
      v55 = swift_bridgeObjectRetain(v51);
      if (v139(v54, 1, v26, v55))
      {
        v56 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(__dst, v54, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
        v57 = v136;
      }
      else
      {
        v57 = v136;
        (*(void (**)(void *, const void *, uint64_t))(v136 + 16))(__dst, v54, v26);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v136 + 56))(__dst, 0, 1, v26);
      }
      v69 = v45[11];
      v70 = (void *)(v43 + v69);
      v71 = (const void *)(v44 + v69);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v139)(v44 + v69, 1, v26))
      {
        v72 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v57 + 16))(v70, v71, v26);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v70, 0, 1, v26);
      }
      v73 = v45[12];
      v74 = v43 + v73;
      v75 = (uint64_t *)(v44 + v73);
      v76 = *v75;
      *(_BYTE *)(v74 + 8) = *((_BYTE *)v75 + 8);
      *(_QWORD *)v74 = v76;
      v77 = v45[13];
      v78 = (_QWORD *)(v43 + v77);
      v79 = (_QWORD *)(v44 + v77);
      *v78 = *v79;
      v80 = v79[1];
      v78[1] = v80;
      v81 = v45[14];
      v82 = *(_QWORD *)(v44 + v81);
      *(_QWORD *)(v43 + v81) = v82;
      v83 = v45[15];
      v84 = (_QWORD *)(v43 + v83);
      v85 = (_QWORD *)(v44 + v83);
      *v84 = *v85;
      v86 = v85[1];
      v84[1] = v86;
      v87 = v45[16];
      v88 = *(_QWORD *)(v44 + v87);
      *(_QWORD *)(v43 + v87) = v88;
      v89 = v45[17];
      v90 = v43 + v89;
      v91 = (__int128 *)(v44 + v89);
      v92 = *v91;
      *(_BYTE *)(v90 + 16) = *((_BYTE *)v91 + 16);
      *(_OWORD *)v90 = v92;
      v93 = v45[18];
      v94 = v43 + v93;
      v95 = (__int128 *)(v44 + v93);
      v96 = *v95;
      *(_BYTE *)(v94 + 16) = *((_BYTE *)v95 + 16);
      *(_OWORD *)v94 = v96;
      v97 = (void (*)(uint64_t, _QWORD, uint64_t, int *, __n128))__src[7];
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v86);
      v98 = swift_bridgeObjectRetain(v88);
      v97(v43, 0, 1, v45, v98);
      v27 = v136;
      goto LABEL_43;
    }
LABEL_19:
    v58 = sub_10001A9A8(&qword_1010FBA50);
    memcpy((void *)v43, (const void *)v44, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_43;
  }
  if (v48)
  {
    sub_1000126B0(v43, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    goto LABEL_19;
  }
  v137 = v27;
  *(_QWORD *)v43 = *(_QWORD *)v44;
  v59 = *(_QWORD *)(v44 + 8);
  *(_QWORD *)(v43 + 8) = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v43 + 16) = *(_QWORD *)(v44 + 16);
  v60 = *(_QWORD *)(v44 + 24);
  *(_QWORD *)(v43 + 24) = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v43 + 32) = *(_QWORD *)(v44 + 32);
  v61 = *(_QWORD *)(v44 + 40);
  *(_QWORD *)(v43 + 40) = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease();
  *(_WORD *)(v43 + 48) = *(_WORD *)(v44 + 48);
  *(_QWORD *)(v43 + 56) = *(_QWORD *)(v44 + 56);
  v62 = *(_QWORD *)(v44 + 64);
  *(_BYTE *)(v43 + 72) = *(_BYTE *)(v44 + 72);
  *(_QWORD *)(v43 + 64) = v62;
  v63 = v45[10];
  v64 = (const void *)(v44 + v63);
  __dsta = (void *)(v43 + v63);
  v65 = ((uint64_t (*)(void))v139)();
  v66 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v139)(v64, 1, v26);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(void *, const void *, uint64_t))(v137 + 16))(__dsta, v64, v26);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v137 + 56))(__dsta, 0, 1, v26);
      goto LABEL_35;
    }
    v67 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
    v68 = __dsta;
  }
  else
  {
    if (!v66)
    {
      (*(void (**)(void *, const void *, uint64_t))(v137 + 24))(__dsta, v64, v26);
      goto LABEL_35;
    }
    (*(void (**)(void *, uint64_t))(v137 + 8))(__dsta, v26);
    v67 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
    v68 = __dsta;
  }
  memcpy(v68, v64, v67);
LABEL_35:
  v99 = v45[11];
  v100 = (const void *)(v44 + v99);
  __dstb = (void *)(v43 + v99);
  v101 = ((uint64_t (*)(void))v139)();
  v102 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v139)(v100, 1, v26);
  if (v101)
  {
    if (v102)
    {
      v103 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(__dstb, v100, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
      v27 = v137;
    }
    else
    {
      v27 = v137;
      (*(void (**)(void *, const void *, uint64_t))(v137 + 16))(__dstb, v100, v26);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v137 + 56))(__dstb, 0, 1, v26);
    }
  }
  else
  {
    v27 = v137;
    if (v102)
    {
      (*(void (**)(void *, uint64_t))(v137 + 8))(__dstb, v26);
      v104 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(__dstb, v100, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v137 + 24))(__dstb, v100, v26);
    }
  }
  v105 = v45[12];
  v106 = v43 + v105;
  v107 = (uint64_t *)(v44 + v105);
  v108 = *v107;
  *(_BYTE *)(v106 + 8) = *((_BYTE *)v107 + 8);
  *(_QWORD *)v106 = v108;
  v109 = v45[13];
  v110 = (_QWORD *)(v43 + v109);
  v111 = (_QWORD *)(v44 + v109);
  *v110 = *v111;
  v112 = v111[1];
  v110[1] = v112;
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRelease();
  v113 = v45[14];
  v114 = *(_QWORD *)(v44 + v113);
  *(_QWORD *)(v43 + v113) = v114;
  swift_bridgeObjectRetain(v114);
  swift_bridgeObjectRelease();
  v115 = v45[15];
  v116 = (_QWORD *)(v43 + v115);
  v117 = (_QWORD *)(v44 + v115);
  *v116 = *v117;
  v118 = v117[1];
  v116[1] = v118;
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRelease();
  v119 = v45[16];
  v120 = *(_QWORD *)(v44 + v119);
  *(_QWORD *)(v43 + v119) = v120;
  swift_bridgeObjectRetain(v120);
  swift_bridgeObjectRelease();
  v121 = v45[17];
  v122 = v43 + v121;
  v123 = (__int128 *)(v44 + v121);
  v124 = *v123;
  *(_BYTE *)(v122 + 16) = *((_BYTE *)v123 + 16);
  *(_OWORD *)v122 = v124;
  v125 = v45[18];
  v126 = v43 + v125;
  v127 = (__int128 *)(v44 + v125);
  v128 = *v127;
  *(_BYTE *)(v126 + 16) = *((_BYTE *)v127 + 16);
  *(_OWORD *)v126 = v128;
LABEL_43:
  *(_DWORD *)(a1 + a3[17]) = *(_DWORD *)(a2 + a3[17]);
  v129 = a3[18];
  v130 = *(_QWORD *)(a2 + v129);
  *(_QWORD *)(a1 + v129) = v130;
  swift_bridgeObjectRetain(v130);
  swift_bridgeObjectRelease();
  v131 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 24);
  v131(a1 + a3[19], a2 + a3[19], v26);
  v131(a1 + a3[20], a2 + a3[20], v26);
  v131(a1 + a3[21], a2 + a3[21], v26);
  v131(a1 + a3[22], a2 + a3[22], v26);
  v131(a1 + a3[23], a2 + a3[23], v26);
  v131(a1 + a3[24], a2 + a3[24], v26);
  return a1;
}

uint64_t sub_100605D28(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  char *__dst;
  char *__dsta;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = a3[12];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
  if (v17(v14, 1, v15))
  {
    v18 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v19 = a3[13];
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  if (v17((const void *)(a2 + v19), 1, v15))
  {
    v22 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v20, v21, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v20, 0, 1, v15);
  }
  v23 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v23) = *(_QWORD *)(a2 + v23);
  v24 = a3[16];
  v25 = (_OWORD *)(a1 + v24);
  v26 = (_OWORD *)(a2 + v24);
  v27 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v28 = *((_QWORD *)v27 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v28 + 48))(v26, 1, v27))
  {
    v29 = sub_10001A9A8(&qword_1010FBA50);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v30 = v26[1];
    *v25 = *v26;
    v25[1] = v30;
    v25[2] = v26[2];
    *((_WORD *)v25 + 24) = *((_WORD *)v26 + 24);
    v31 = *((_QWORD *)v26 + 8);
    *((_QWORD *)v25 + 7) = *((_QWORD *)v26 + 7);
    *((_QWORD *)v25 + 8) = v31;
    *((_BYTE *)v25 + 72) = *((_BYTE *)v26 + 72);
    v32 = v27[10];
    v50 = v28;
    __dst = (char *)v25 + v32;
    v33 = (char *)v26 + v32;
    if (v17((char *)v26 + v32, 1, v15))
    {
      v34 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(__dst, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(__dst, v33, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    v35 = v27[11];
    __dsta = (char *)v25 + v35;
    v36 = (char *)v26 + v35;
    if (v17((char *)v26 + v35, 1, v15))
    {
      v37 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(__dsta, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(__dsta, v36, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dsta, 0, 1, v15);
    }
    v38 = v27[12];
    v39 = (char *)v25 + v38;
    v40 = (char *)v26 + v38;
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    *(_OWORD *)((char *)v25 + v27[13]) = *(_OWORD *)((char *)v26 + v27[13]);
    *(_QWORD *)((char *)v25 + v27[14]) = *(_QWORD *)((char *)v26 + v27[14]);
    *(_OWORD *)((char *)v25 + v27[15]) = *(_OWORD *)((char *)v26 + v27[15]);
    *(_QWORD *)((char *)v25 + v27[16]) = *(_QWORD *)((char *)v26 + v27[16]);
    v41 = v27[17];
    v42 = (char *)v25 + v41;
    v43 = (char *)v26 + v41;
    v42[16] = v43[16];
    *(_OWORD *)v42 = *(_OWORD *)v43;
    v44 = v27[18];
    v45 = (char *)v25 + v44;
    v46 = (char *)v26 + v44;
    v45[16] = v46[16];
    *(_OWORD *)v45 = *(_OWORD *)v46;
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v50 + 56))(v25, 0, 1, v27);
  }
  v47 = a3[18];
  *(_DWORD *)(a1 + a3[17]) = *(_DWORD *)(a2 + a3[17]);
  *(_QWORD *)(a1 + v47) = *(_QWORD *)(a2 + v47);
  v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32);
  v48(a1 + a3[19], a2 + a3[19], v15);
  v48(a1 + a3[20], a2 + a3[20], v15);
  v48(a1 + a3[21], a2 + a3[21], v15);
  v48(a1 + a3[22], a2 + a3[22], v15);
  v48(a1 + a3[23], a2 + a3[23], v15);
  v48(a1 + a3[24], a2 + a3[24], v15);
  return a1;
}

uint64_t sub_100606190(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const void *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t (*v50)(uint64_t, uint64_t, int *);
  int v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const void *v66;
  int v67;
  int v68;
  size_t v69;
  void *v70;
  uint64_t v71;
  void *v72;
  const void *v73;
  uint64_t v74;
  const void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const void *v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t, uint64_t);
  void *v113;
  void *v114;
  _QWORD *__src;
  uint64_t v116;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  v13 = a3[9];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  v18 = a3[10];
  v19 = a3[11];
  v20 = a1 + v18;
  v21 = a2 + v18;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  v22 = (_QWORD *)(a1 + v19);
  v23 = (uint64_t *)(a2 + v19);
  v25 = *v23;
  v24 = v23[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  v26 = a3[12];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  v29 = type metadata accessor for URL(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(void))(v30 + 48);
  v32 = ((uint64_t (*)(void *, uint64_t, uint64_t))v31)(v27, 1, v29);
  v33 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v31)(v28, 1, v29);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, const void *, uint64_t))(v30 + 32))(v27, v28, v29);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v33)
  {
    (*(void (**)(void *, uint64_t))(v30 + 8))(v27, v29);
LABEL_6:
    v34 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v30 + 40))(v27, v28, v29);
LABEL_7:
  v35 = a3[13];
  v36 = (void *)(a1 + v35);
  v37 = (const void *)(a2 + v35);
  v38 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v31)(a1 + v35, 1, v29);
  v39 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v31)(v37, 1, v29);
  v116 = v30;
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(void *, const void *, uint64_t))(v30 + 32))(v36, v37, v29);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v36, 0, 1, v29);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v39)
  {
    (*(void (**)(void *, uint64_t))(v30 + 8))(v36, v29);
LABEL_12:
    v40 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(v30 + 40))(v36, v37, v29);
LABEL_13:
  v41 = a3[14];
  v42 = (_QWORD *)(a1 + v41);
  v43 = (uint64_t *)(a2 + v41);
  v45 = *v43;
  v44 = v43[1];
  *v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease();
  v46 = a3[16];
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  __src = (_QWORD *)*((_QWORD *)v49 - 1);
  v50 = (uint64_t (*)(uint64_t, uint64_t, int *))__src[6];
  v51 = v50(v47, 1, v49);
  v52 = v50(v48, 1, v49);
  if (v51)
  {
    if (!v52)
    {
      v53 = *(_OWORD *)(v48 + 16);
      *(_OWORD *)v47 = *(_OWORD *)v48;
      *(_OWORD *)(v47 + 16) = v53;
      *(_OWORD *)(v47 + 32) = *(_OWORD *)(v48 + 32);
      *(_WORD *)(v47 + 48) = *(_WORD *)(v48 + 48);
      v54 = *(_QWORD *)(v48 + 64);
      *(_QWORD *)(v47 + 56) = *(_QWORD *)(v48 + 56);
      *(_QWORD *)(v47 + 64) = v54;
      *(_BYTE *)(v47 + 72) = *(_BYTE *)(v48 + 72);
      v55 = v49[10];
      v56 = (void *)(v47 + v55);
      v57 = (const void *)(v48 + v55);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v31)(v48 + v55, 1, v29))
      {
        v58 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 32))(v56, v57, v29);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v56, 0, 1, v29);
      }
      v71 = v49[11];
      v72 = (void *)(v47 + v71);
      v73 = (const void *)(v48 + v71);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v31)(v48 + v71, 1, v29))
      {
        v74 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
        v60 = v116;
      }
      else
      {
        v75 = v73;
        v60 = v116;
        (*(void (**)(void *, const void *, uint64_t))(v116 + 32))(v72, v75, v29);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v72, 0, 1, v29);
      }
      v76 = v49[12];
      v77 = v47 + v76;
      v78 = v48 + v76;
      *(_QWORD *)v77 = *(_QWORD *)v78;
      *(_BYTE *)(v77 + 8) = *(_BYTE *)(v78 + 8);
      *(_OWORD *)(v47 + v49[13]) = *(_OWORD *)(v48 + v49[13]);
      *(_QWORD *)(v47 + v49[14]) = *(_QWORD *)(v48 + v49[14]);
      *(_OWORD *)(v47 + v49[15]) = *(_OWORD *)(v48 + v49[15]);
      *(_QWORD *)(v47 + v49[16]) = *(_QWORD *)(v48 + v49[16]);
      v79 = v49[17];
      v80 = v47 + v79;
      v81 = v48 + v79;
      *(_BYTE *)(v80 + 16) = *(_BYTE *)(v81 + 16);
      *(_OWORD *)v80 = *(_OWORD *)v81;
      v82 = v49[18];
      v83 = v47 + v82;
      v84 = v48 + v82;
      *(_BYTE *)(v83 + 16) = *(_BYTE *)(v84 + 16);
      *(_OWORD *)v83 = *(_OWORD *)v84;
      ((void (*)(uint64_t, _QWORD, uint64_t, int *))__src[7])(v47, 0, 1, v49);
      goto LABEL_43;
    }
LABEL_19:
    v59 = sub_10001A9A8(&qword_1010FBA50);
    memcpy((void *)v47, (const void *)v48, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    v60 = v116;
    goto LABEL_43;
  }
  if (v52)
  {
    sub_1000126B0(v47, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    goto LABEL_19;
  }
  v61 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *(_QWORD *)(v47 + 8) = v61;
  swift_bridgeObjectRelease();
  v62 = *(_QWORD *)(v48 + 24);
  *(_QWORD *)(v47 + 16) = *(_QWORD *)(v48 + 16);
  *(_QWORD *)(v47 + 24) = v62;
  swift_bridgeObjectRelease();
  v63 = *(_QWORD *)(v48 + 40);
  *(_QWORD *)(v47 + 32) = *(_QWORD *)(v48 + 32);
  *(_QWORD *)(v47 + 40) = v63;
  swift_bridgeObjectRelease();
  *(_WORD *)(v47 + 48) = *(_WORD *)(v48 + 48);
  v64 = *(_QWORD *)(v48 + 64);
  *(_QWORD *)(v47 + 56) = *(_QWORD *)(v48 + 56);
  *(_QWORD *)(v47 + 64) = v64;
  *(_BYTE *)(v47 + 72) = *(_BYTE *)(v48 + 72);
  v65 = v49[10];
  v66 = (const void *)(v48 + v65);
  v113 = (void *)(v47 + v65);
  v67 = v31();
  v68 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v31)(v66, 1, v29);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(void *, const void *, uint64_t))(v116 + 32))(v113, v66, v29);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v29);
      goto LABEL_35;
    }
    v69 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
    v70 = v113;
  }
  else
  {
    if (!v68)
    {
      (*(void (**)(void *, const void *, uint64_t))(v116 + 40))(v113, v66, v29);
      goto LABEL_35;
    }
    (*(void (**)(void *, uint64_t))(v116 + 8))(v113, v29);
    v69 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
    v70 = v113;
  }
  memcpy(v70, v66, v69);
LABEL_35:
  v85 = v49[11];
  v86 = (const void *)(v48 + v85);
  v114 = (void *)(v47 + v85);
  v87 = v31();
  v88 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v31)(v86, 1, v29);
  if (v87)
  {
    if (v88)
    {
      v89 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v114, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
      v60 = v116;
    }
    else
    {
      v60 = v116;
      (*(void (**)(void *, const void *, uint64_t))(v116 + 32))(v114, v86, v29);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v114, 0, 1, v29);
    }
  }
  else
  {
    v60 = v116;
    if (v88)
    {
      (*(void (**)(void *, uint64_t))(v116 + 8))(v114, v29);
      v90 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v114, v86, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v116 + 40))(v114, v86, v29);
    }
  }
  v91 = v49[12];
  v92 = v47 + v91;
  v93 = v48 + v91;
  *(_QWORD *)v92 = *(_QWORD *)v93;
  *(_BYTE *)(v92 + 8) = *(_BYTE *)(v93 + 8);
  v94 = v49[13];
  v95 = (_QWORD *)(v47 + v94);
  v96 = (uint64_t *)(v48 + v94);
  v98 = *v96;
  v97 = v96[1];
  *v95 = v98;
  v95[1] = v97;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v47 + v49[14]) = *(_QWORD *)(v48 + v49[14]);
  swift_bridgeObjectRelease();
  v99 = v49[15];
  v100 = (_QWORD *)(v47 + v99);
  v101 = (uint64_t *)(v48 + v99);
  v103 = *v101;
  v102 = v101[1];
  *v100 = v103;
  v100[1] = v102;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v47 + v49[16]) = *(_QWORD *)(v48 + v49[16]);
  swift_bridgeObjectRelease();
  v104 = v49[17];
  v105 = v47 + v104;
  v106 = v48 + v104;
  *(_OWORD *)v105 = *(_OWORD *)v106;
  *(_BYTE *)(v105 + 16) = *(_BYTE *)(v106 + 16);
  v107 = v49[18];
  v108 = v47 + v107;
  v109 = v48 + v107;
  *(_BYTE *)(v108 + 16) = *(_BYTE *)(v109 + 16);
  *(_OWORD *)v108 = *(_OWORD *)v109;
LABEL_43:
  v110 = a3[18];
  *(_DWORD *)(a1 + a3[17]) = *(_DWORD *)(a2 + a3[17]);
  *(_QWORD *)(a1 + v110) = *(_QWORD *)(a2 + v110);
  swift_bridgeObjectRelease();
  v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 40);
  v111(a1 + a3[19], a2 + a3[19], v29);
  v111(a1 + a3[20], a2 + a3[20], v29);
  v111(a1 + a3[21], a2 + a3[21], v29);
  v111(a1 + a3[22], a2 + a3[22], v29);
  v111(a1 + a3[23], a2 + a3[23], v29);
  v111(a1 + a3[24], a2 + a3[24], v29);
  return a1;
}

uint64_t sub_1006069D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006069E0);
}

uint64_t sub_1006069E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = sub_10001A9A8(&qword_1010FBA40);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[12];
    }
    else
    {
      v16 = sub_10001A9A8(&qword_1010FBA50);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
      {
        v8 = v16;
        v15 = a3[16];
      }
      else
      {
        v8 = type metadata accessor for URL(0);
        v14 = *(_QWORD *)(v8 - 8);
        v15 = a3[19];
      }
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[8] + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_100606ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100606AE8);
}

uint64_t sub_100606AE8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[8] + 8) = (a2 - 1);
      return result;
    }
    v13 = sub_10001A9A8(&qword_1010FBA40);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[12];
    }
    else
    {
      v16 = sub_10001A9A8(&qword_1010FBA50);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[16];
      }
      else
      {
        v10 = type metadata accessor for URL(0);
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[19];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100606BE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[8];
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v10[1] = &unk_100E45668;
    v10[2] = &unk_100E45680;
    v10[3] = &unk_100E45680;
    v10[4] = &unk_100E45698;
    v10[5] = &unk_100E45698;
    v10[6] = &unk_100E456B0;
    v10[7] = &unk_100E456C8;
    sub_100149C5C(319, (unint64_t *)&qword_1010FCE00, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    if (v5 <= 0x3F)
    {
      v11 = *(_QWORD *)(v4 - 8) + 64;
      v12 = v11;
      v13 = &unk_100E45698;
      v14 = (char *)&value witness table for Builtin.Int64 + 64;
      sub_100149C5C(319, &qword_1010FE028, type metadata accessor for AccessoryInfoResponseContent.Configuration);
      if (v7 <= 0x3F)
      {
        v15 = *(_QWORD *)(v6 - 8) + 64;
        v16 = (char *)&value witness table for Builtin.Int32 + 64;
        v17 = &unk_100E456E0;
        v8 = type metadata accessor for URL(319);
        if (v9 <= 0x3F)
        {
          v18 = *(_QWORD *)(v8 - 8) + 64;
          v19 = v18;
          v20 = v18;
          v21 = v18;
          v22 = v18;
          v23 = v18;
          swift_initStructMetadata(a1, 256, 21, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_100606D20()
{
  return sub_100006204(&qword_101100CF0, type metadata accessor for BeaconProductInfoRecord, (uint64_t)&unk_100E456F8);
}

uint64_t sub_100606D4C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204(&qword_101111700, type metadata accessor for BeaconProductInfoRecord, (uint64_t)&unk_100E45760);
  result = sub_100006204(&qword_101100CF8, type metadata accessor for BeaconProductInfoRecord, (uint64_t)&unk_100E457A4);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100606DA8()
{
  unint64_t result;

  result = qword_101100D08;
  if (!qword_101100D08)
  {
    result = swift_getWitnessTable(aY_43, &type metadata for BeaconProductInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101100D08);
  }
  return result;
}

uint64_t sub_100606DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100606E30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  int *v38;
  uint64_t v39;
  int v40;
  int v41;
  char v42;
  _BOOL4 v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  _QWORD *v62;
  char v63;
  _QWORD *v64;
  int v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  int *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char v92;
  void (*v93)(char *, uint64_t);
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  char v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int (*v110)(uint64_t, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int (*v119)(uint64_t, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;

  v130 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v127 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v124 = (uint64_t)&v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_10001A9A8(&qword_1010FE2E8);
  __chkstk_darwin(v126);
  v131 = (uint64_t)&v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010FBA50);
  v7 = __chkstk_darwin(v6);
  v125 = (uint64_t)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v128 = (uint64_t)&v118 - v10;
  __chkstk_darwin(v9);
  v129 = (uint64_t)&v118 - v11;
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v134 = v12;
  v135 = v13;
  __chkstk_darwin(v12);
  v133 = (char *)&v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010FE230);
  v16 = __chkstk_darwin(v15);
  v132 = (uint64_t)&v118 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v118 - v18;
  v20 = sub_10001A9A8(&qword_1010FBA40);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v118 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v118 - v25;
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v118 - v28;
  v30 = __chkstk_darwin(v27);
  v32 = (char *)&v118 - v31;
  v33 = __chkstk_darwin(v30);
  v35 = (char *)&v118 - v34;
  __chkstk_darwin(v33);
  v37 = (char *)&v118 - v36;
  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0)
    goto LABEL_9;
  v38 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
  v39 = v38[5];
  v40 = *(unsigned __int8 *)(a1 + v39);
  v41 = *(unsigned __int8 *)(a2 + v39);
  if (v40 == 2)
  {
    if (v41 != 2)
      goto LABEL_9;
  }
  else
  {
    v42 = 0;
    v43 = (v40 & 1) == 0;
    if (v41 == 2 || ((v43 ^ v41) & 1) == 0)
      return v42 & 1;
  }
  if (*(unsigned __int8 *)(a1 + v38[6]) != *(unsigned __int8 *)(a2 + v38[6])
    || *(unsigned __int8 *)(a1 + v38[7]) != *(unsigned __int8 *)(a2 + v38[7]))
  {
    goto LABEL_9;
  }
  v45 = v38[8];
  v46 = *(_QWORD *)(a1 + v45);
  v47 = *(_QWORD *)(a1 + v45 + 8);
  v48 = (uint64_t *)(a2 + v45);
  v49 = *v48;
  v50 = v48[1];
  v51 = v46 == *v48;
  v123 = v38;
  if (v51 && v47 == v50
    || (v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v47, v49, v50, 0),
        v38 = v123,
        v53 = v52,
        v42 = 0,
        (v53 & 1) != 0))
  {
    v54 = v38[9];
    v55 = *(_QWORD *)(a1 + v54);
    v56 = *(_QWORD *)(a1 + v54 + 8);
    v57 = (_QWORD *)(a2 + v54);
    v58 = v57[1];
    if (v55 == *v57 && v56 == v58)
      goto LABEL_18;
    v59 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v56, *v57, v58, 0);
    v38 = v123;
    v60 = v59;
    v42 = 0;
    if ((v60 & 1) != 0)
    {
LABEL_18:
      v61 = v38[10];
      v62 = (_QWORD *)(a1 + v61);
      v63 = *(_BYTE *)(a1 + v61 + 8);
      v64 = (_QWORD *)(a2 + v61);
      v65 = *(unsigned __int8 *)(a2 + v61 + 8);
      if ((v63 & 1) != 0)
      {
        if (!v65)
          goto LABEL_9;
      }
      else
      {
        if (*v62 != *v64)
          LOBYTE(v65) = 1;
        if ((v65 & 1) != 0)
          goto LABEL_9;
      }
      v66 = v38[11];
      v67 = (_QWORD *)(a1 + v66);
      v68 = *(_QWORD *)(a1 + v66 + 8);
      v69 = (_QWORD *)(a2 + v66);
      v70 = v69[1];
      if (v68)
      {
        if (!v70)
          goto LABEL_9;
        if (*v67 != *v69 || v68 != v70)
        {
          v71 = _stringCompareWithSmolCheck(_:_:expecting:)(*v67, v68, *v69, v70, 0);
          v38 = v123;
          v72 = v71;
          v42 = 0;
          if ((v72 & 1) == 0)
            return v42 & 1;
        }
      }
      else if (v70)
      {
        goto LABEL_9;
      }
      v73 = v38[12];
      v120 = a1;
      v74 = a1 + v73;
      v75 = v38;
      sub_10000F9B8(v74, (uint64_t)v37, &qword_1010FBA40);
      v76 = v75[12];
      v121 = a2;
      sub_10000F9B8(a2 + v76, (uint64_t)v35, &qword_1010FBA40);
      v77 = (uint64_t)&v19[*(int *)(v15 + 48)];
      sub_10000F9B8((uint64_t)v37, (uint64_t)v19, &qword_1010FBA40);
      v122 = v77;
      sub_10000F9B8((uint64_t)v35, v77, &qword_1010FBA40);
      v78 = v134;
      v79 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48);
      if (v79((uint64_t)v19, 1, v134) == 1)
      {
        sub_100004048((uint64_t)v35, &qword_1010FBA40);
        sub_100004048((uint64_t)v37, &qword_1010FBA40);
        if (v79(v122, 1, v78) == 1)
        {
          v119 = v79;
          sub_100004048((uint64_t)v19, &qword_1010FBA40);
          goto LABEL_38;
        }
      }
      else
      {
        sub_10000F9B8((uint64_t)v19, (uint64_t)v32, &qword_1010FBA40);
        if (v79(v122, 1, v78) != 1)
        {
          v119 = v79;
          v82 = v133;
          (*(void (**)(char *, uint64_t, uint64_t))(v135 + 32))(v133, v122, v78);
          v83 = sub_100006204(&qword_1010FE238, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          LODWORD(v122) = dispatch thunk of static Equatable.== infix(_:_:)(v32, v82, v78, v83);
          v84 = *(void (**)(char *, uint64_t))(v135 + 8);
          v84(v133, v78);
          sub_100004048((uint64_t)v35, &qword_1010FBA40);
          sub_100004048((uint64_t)v37, &qword_1010FBA40);
          v84(v32, v78);
          sub_100004048((uint64_t)v19, &qword_1010FBA40);
          if ((v122 & 1) == 0)
            goto LABEL_9;
LABEL_38:
          v85 = v123;
          sub_10000F9B8(v120 + v123[13], (uint64_t)v29, &qword_1010FBA40);
          sub_10000F9B8(v121 + v85[13], (uint64_t)v26, &qword_1010FBA40);
          v86 = v132;
          v87 = v132 + *(int *)(v15 + 48);
          sub_10000F9B8((uint64_t)v29, v132, &qword_1010FBA40);
          sub_10000F9B8((uint64_t)v26, v87, &qword_1010FBA40);
          v88 = v119;
          if (v119(v86, 1, v78) == 1)
          {
            sub_100004048((uint64_t)v26, &qword_1010FBA40);
            sub_100004048((uint64_t)v29, &qword_1010FBA40);
            if (v88(v87, 1, v78) == 1)
            {
              sub_100004048(v86, &qword_1010FBA40);
              goto LABEL_46;
            }
          }
          else
          {
            sub_10000F9B8(v86, (uint64_t)v23, &qword_1010FBA40);
            if (v88(v87, 1, v78) != 1)
            {
              v89 = v135;
              v90 = v133;
              (*(void (**)(char *, uint64_t, uint64_t))(v135 + 32))(v133, v87, v78);
              v91 = sub_100006204(&qword_1010FE238, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
              v92 = dispatch thunk of static Equatable.== infix(_:_:)(v23, v90, v78, v91);
              v93 = *(void (**)(char *, uint64_t))(v89 + 8);
              v93(v90, v78);
              sub_100004048((uint64_t)v26, &qword_1010FBA40);
              sub_100004048((uint64_t)v29, &qword_1010FBA40);
              v93(v23, v78);
              sub_100004048(v86, &qword_1010FBA40);
              if ((v92 & 1) == 0)
                goto LABEL_9;
LABEL_46:
              v94 = v123;
              v95 = v123[14];
              v96 = v120;
              v97 = *(_QWORD *)(v120 + v95);
              v98 = *(_QWORD *)(v120 + v95 + 8);
              v99 = v121;
              v100 = (_QWORD *)(v121 + v95);
              v101 = v100[1];
              if (v97 == *v100 && v98 == v101
                || (v102 = _stringCompareWithSmolCheck(_:_:expecting:)(v97, v98, *v100, v101, 0),
                    v94 = v123,
                    v96 = v120,
                    v99 = v121,
                    v103 = v102,
                    v42 = 0,
                    (v103 & 1) != 0))
              {
                if (*(double *)(v96 + v94[15]) != *(double *)(v99 + v94[15]))
                  goto LABEL_9;
                v104 = v129;
                v105 = v99;
                v106 = v94;
                sub_10000F9B8(v96 + v94[16], v129, &qword_1010FBA50);
                v107 = v128;
                sub_10000F9B8(v105 + v106[16], v128, &qword_1010FBA50);
                v108 = v131;
                v109 = v131 + *(int *)(v126 + 48);
                sub_10000F9B8(v104, v131, &qword_1010FBA50);
                sub_10000F9B8(v107, v109, &qword_1010FBA50);
                v110 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48);
                v111 = v130;
                if (v110(v108, 1, v130) == 1)
                {
                  sub_100004048(v107, &qword_1010FBA50);
                  sub_100004048(v104, &qword_1010FBA50);
                  if (v110(v109, 1, v111) == 1)
                  {
                    sub_100004048(v108, &qword_1010FBA50);
LABEL_57:
                    if (*(_DWORD *)(v120 + v123[17]) == *(_DWORD *)(v121 + v123[17]))
                    {
                      v115 = v123[18];
                      v116 = *(_QWORD *)(v120 + v115);
                      v117 = *(_QWORD *)(v121 + v115);
                      if (v116)
                      {
                        if (!v117 || (sub_1002483C0(v116, v117) & 1) == 0)
                          goto LABEL_9;
LABEL_63:
                        if ((static URL.== infix(_:_:)(v120 + v123[19], v121 + v123[19]) & 1) != 0
                          && (static URL.== infix(_:_:)(v120 + v123[20], v121 + v123[20]) & 1) != 0
                          && (static URL.== infix(_:_:)(v120 + v123[21], v121 + v123[21]) & 1) != 0
                          && (static URL.== infix(_:_:)(v120 + v123[22], v121 + v123[22]) & 1) != 0
                          && (static URL.== infix(_:_:)(v120 + v123[23], v121 + v123[23]) & 1) != 0)
                        {
                          v42 = static URL.== infix(_:_:)(v120 + v123[24], v121 + v123[24]);
                          return v42 & 1;
                        }
                        goto LABEL_9;
                      }
                      if (!v117)
                        goto LABEL_63;
                    }
LABEL_9:
                    v42 = 0;
                    return v42 & 1;
                  }
                }
                else
                {
                  v112 = v125;
                  sub_10000F9B8(v108, v125, &qword_1010FBA50);
                  if (v110(v109, 1, v111) != 1)
                  {
                    v113 = v124;
                    sub_100606DEC(v109, v124);
                    v114 = sub_1004FEF84(v112, v113);
                    sub_1000126B0(v113, type metadata accessor for AccessoryInfoResponseContent.Configuration);
                    sub_100004048(v107, &qword_1010FBA50);
                    sub_100004048(v104, &qword_1010FBA50);
                    sub_1000126B0(v112, type metadata accessor for AccessoryInfoResponseContent.Configuration);
                    sub_100004048(v108, &qword_1010FBA50);
                    if (!v114)
                      goto LABEL_9;
                    goto LABEL_57;
                  }
                  sub_100004048(v107, &qword_1010FBA50);
                  sub_100004048(v104, &qword_1010FBA50);
                  sub_1000126B0(v112, type metadata accessor for AccessoryInfoResponseContent.Configuration);
                }
                v80 = &qword_1010FE2E8;
                v81 = v108;
LABEL_44:
                sub_100004048(v81, v80);
                goto LABEL_9;
              }
              return v42 & 1;
            }
            sub_100004048((uint64_t)v26, &qword_1010FBA40);
            sub_100004048((uint64_t)v29, &qword_1010FBA40);
            (*(void (**)(char *, uint64_t))(v135 + 8))(v23, v78);
          }
          v80 = &qword_1010FE230;
          v81 = v86;
          goto LABEL_44;
        }
        sub_100004048((uint64_t)v35, &qword_1010FBA40);
        sub_100004048((uint64_t)v37, &qword_1010FBA40);
        (*(void (**)(char *, uint64_t))(v135 + 8))(v32, v78);
      }
      v80 = &qword_1010FE230;
      v81 = (uint64_t)v19;
      goto LABEL_44;
    }
  }
  return v42 & 1;
}

uint64_t getEnumTagSinglePayload for BeaconProductInfoRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEC)
    goto LABEL_17;
  if (a2 + 20 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 20) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 20;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 20;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 20;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x15;
  v8 = v6 - 21;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BeaconProductInfoRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 20 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 20) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEB)
    return ((uint64_t (*)(void))((char *)&loc_100607A20 + 4 * byte_100E4564A[v4]))();
  *a1 = a2 + 20;
  return ((uint64_t (*)(void))((char *)sub_100607A54 + 4 * byte_100E45645[v4]))();
}

uint64_t sub_100607A54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100607A5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100607A64);
  return result;
}

uint64_t sub_100607A70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100607A78);
  *(_BYTE *)result = a2 + 20;
  return result;
}

uint64_t sub_100607A7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100607A84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconProductInfoRecord.CodingKeys()
{
  return &type metadata for BeaconProductInfoRecord.CodingKeys;
}

unint64_t sub_100607AA4()
{
  unint64_t result;

  result = qword_101100D18;
  if (!qword_101100D18)
  {
    result = swift_getWitnessTable(byte_100E45868, &type metadata for BeaconProductInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101100D18);
  }
  return result;
}

unint64_t sub_100607AEC()
{
  unint64_t result;

  result = qword_101100D20;
  if (!qword_101100D20)
  {
    result = swift_getWitnessTable(byte_100E457D8, &type metadata for BeaconProductInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101100D20);
  }
  return result;
}

unint64_t sub_100607B34()
{
  unint64_t result;

  result = qword_101100D28;
  if (!qword_101100D28)
  {
    result = swift_getWitnessTable(byte_100E45800, &type metadata for BeaconProductInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101100D28);
  }
  return result;
}

uint64_t sub_100607B78(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000012)
  {
    v7 = 0x8000000100ED9790;
    if (a2 == 0x8000000100ED9790)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100ED9790, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000012)
  {
    v8 = 0x8000000100EDCD70;
    if (a2 == 0x8000000100EDCD70)
      goto LABEL_18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100EDCD70, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_18:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x6E6564646968 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6564646968, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_24;
  }
  if (a1 == 0x6D614E6C65646F6DLL && a2 == 0xE900000000000065)
  {
    v10 = 0xE900000000000065;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E6C65646F6DLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_30;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100EC83B0)
  {
    v11 = 0x8000000100EC83B0;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC83B0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_36;
  }
  if (a1 == 0x52746C7561666564 && a2 == 0xEB00000000656C6FLL)
  {
    v12 = 0xEB00000000656C6FLL;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x52746C7561666564, 0xEB00000000656C6FLL, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_42;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100ED9680)
  {
    v13 = 0x8000000100ED9680;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100ED9680, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_48;
  }
  if (a1 == 0x55656C6261736964 && a2 == 0xEA00000000004C52)
  {
    v14 = 0xEA00000000004C52;
LABEL_54:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x55656C6261736964, 0xEA00000000004C52, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_54;
  }
  if (a1 == 0xD000000000000011)
  {
    v15 = 0x8000000100ED96A0;
    if (a2 == 0x8000000100ED96A0)
      goto LABEL_59;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ED96A0, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_59:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    v16 = 0xE700000000000000;
LABEL_65:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_65;
  }
  if (a1 == 0x7265776F507874 && a2 == 0xE700000000000000)
  {
    v17 = 0xE700000000000000;
LABEL_71:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265776F507874, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_71;
  }
  if (a1 == 0x72756769666E6F63 && a2 == 0xED00006E6F697461)
  {
    v18 = 0xED00006E6F697461;
LABEL_77:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72756769666E6F63, 0xED00006E6F697461, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_77;
  }
  if (a1 == 0x696C696261706163 && a2 == 0xEC00000073656974)
  {
    v19 = 0xEC00000073656974;
LABEL_83:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696C696261706163, 0xEC00000073656974, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_83;
  }
  if (a1 == 0x655474756F79616CLL && a2 == 0xEE006574616C706DLL)
  {
    v20 = 0xEE006574616C706DLL;
LABEL_89:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x655474756F79616CLL, 0xEE006574616C706DLL, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_89;
  }
  if (a1 == 0x48746C7561666564 && a2 == 0xEF6E6F63496F7265)
  {
    v21 = 0xEF6E6F63496F7265;
LABEL_95:
    swift_bridgeObjectRelease(v21);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x48746C7561666564, 0xEF6E6F63496F7265, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_95;
  }
  if (a1 == 0x4C746C7561666564 && a2 == 0xEF6E6F6349747369)
  {
    v22 = 0xEF6E6F6349747369;
LABEL_101:
    swift_bridgeObjectRelease(v22);
    return 16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4C746C7561666564, 0xEF6E6F6349747369, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
    goto LABEL_101;
  }
  if (a1 == 0xD000000000000011)
  {
    v23 = 0x8000000100ED95A0;
    if (a2 == 0x8000000100ED95A0)
      goto LABEL_106;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ED95A0, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
LABEL_106:
    swift_bridgeObjectRelease(v23);
    return 17;
  }
  if (a1 == 0xD000000000000011)
  {
    v24 = 0x8000000100ED95C0;
    if (a2 == 0x8000000100ED95C0)
      goto LABEL_111;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ED95C0, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
LABEL_111:
    swift_bridgeObjectRelease(v24);
    return 18;
  }
  if (a1 == 0xD000000000000011)
  {
    v25 = 0x8000000100ED95E0;
    if (a2 == 0x8000000100ED95E0)
      goto LABEL_116;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ED95E0, a1, a2, 0) & 1) != 0)
  {
    v25 = a2;
LABEL_116:
    swift_bridgeObjectRelease(v25);
    return 19;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100ED9600)
  {
    swift_bridgeObjectRelease(0x8000000100ED9600);
    return 20;
  }
  else
  {
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ED9600, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v26 & 1) != 0)
      return 20;
    else
      return 21;
  }
}

uint64_t sub_100608438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  const char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  const char *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  id v60;

  v1 = type metadata accessor for LocalizationUtility.Table(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LeftWhileTravelingUserNotification(0);
  v6 = v0 + *(int *)(v5 + 20);
  v8 = *(void **)(v6 + 8);
  v7 = *(_QWORD *)(v6 + 16);
  v9 = *(_QWORD *)(v6 + 24);
  if ((*(_BYTE *)(v6 + 32) & 1) == 0)
  {
    v14 = v8;
    swift_bridgeObjectRetain(v9);
    if (v9)
    {
      v15 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000) == 0)
        v15 = v7 & 0xFFFFFFFFFFFFLL;
      if (v15)
      {
        v60 = v14;
        v16 = v1;
        v17 = 0xD000000000000039;
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeAccessory);
        v20 = v19;
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
        if (v18 != v21 || v20 != v22)
        {
          v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v21, v22, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v24 & 1) != 0)
          {
            v25 = 0x8000000100ED0A80;
LABEL_45:
            v1 = v16;
            v54 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
            v41 = (_QWORD *)swift_allocObject(v54, 72, 7);
            *((_OWORD *)v41 + 1) = xmmword_100E22B00;
            v41[7] = &type metadata for String;
            v41[8] = sub_10001AA00();
            v41[4] = v7;
            v41[5] = v9;
            v14 = v60;
            goto LABEL_46;
          }
          v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeDurian);
          v20 = v50;
          v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
          if (v49 != v52 || v20 != v51)
          {
            v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v20, v52, v51, 0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v53 & 1) != 0)
            {
              v25 = 0x8000000100ED0A80;
            }
            else
            {
              v17 = 0xD00000000000003BLL;
              v25 = 0x8000000100ED0A40;
            }
            goto LABEL_45;
          }
        }
        swift_bridgeObjectRelease_n(v20, 2);
        v25 = 0x8000000100ED0A80;
        goto LABEL_45;
      }
      swift_bridgeObjectRelease();
    }
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeAccessory);
    v35 = v34;
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    if (v33 == v36 && v35 == v37)
    {
      swift_bridgeObjectRelease_n(v35, 2);
      v17 = 0xD000000000000044;
    }
    else
    {
      v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v36, v37, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0)
      {
        v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeDurian);
        v44 = v43;
        v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
        if (v42 != v45 || v44 != v46)
        {
          v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v44, v45, v46, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v48 & 1) != 0)
            v17 = 0xD000000000000041;
          else
            v17 = 0xD000000000000043;
          if ((v48 & 1) != 0)
            v25 = 0x8000000100ED09A0;
          else
            v25 = 0x8000000100ED0950;
          goto LABEL_26;
        }
        swift_bridgeObjectRelease_n(v44, 2);
        v17 = 0xD000000000000041;
        v40 = "SEPARATION_MONITORING_SINGLE_LEFT_BEHIND_GENERIC_ALERT_TITLE_B389";
LABEL_25:
        v25 = (unint64_t)(v40 - 32) | 0x8000000000000000;
LABEL_26:
        v41 = _swiftEmptyArrayStorage;
LABEL_46:
        (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for LocalizationUtility.Table.default(_:), v1);
        v55 = static LocalizationUtility.localizedString(key:table:)(v17, v25, v4);
        v57 = v56;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
        v32 = String.init(format:arguments:)(v55, v57, v41);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v32;
      }
      v17 = 0xD000000000000044;
    }
    v40 = "SEPARATION_MONITORING_SINGLE_LEFT_BEHIND_GENERIC_ALERT_TITLE_HAWKEYE";
    goto LABEL_25;
  }
  v10 = *(_QWORD *)v6;
  v11 = *(unsigned __int8 *)(v0 + *(int *)(v5 + 32)) - 1;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for LocalizationUtility.Table.default(_:), v1);
  swift_bridgeObjectRetain(v10);
  if (v11 >= 2)
  {
    v12 = 0xD00000000000003ELL;
    v13 = "SEPARATION_MONITORING_MULTIPLE_DEVICES_LEFT_BEHIND_ALERT_TITLE";
  }
  else
  {
    v12 = 0xD00000000000003CLL;
    v13 = "SEPARATION_MONITORING_MULTIPLE_ITEMS_LEFT_BEHIND_ALERT_TITLE";
  }
  v26 = static LocalizationUtility.localizedString(key:table:)(v12, (unint64_t)(v13 - 32) | 0x8000000000000000, v4);
  v28 = v27;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v29 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v30 = swift_allocObject(v29, 72, 7);
  *(_OWORD *)(v30 + 16) = xmmword_100E22B00;
  v31 = *(_QWORD *)(v10 + 16);
  sub_100306ACC(v10, v8, v7, v9, 1);
  *(_QWORD *)(v30 + 56) = &type metadata for Int;
  *(_QWORD *)(v30 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v30 + 32) = v31;
  v32 = static String.localizedStringWithFormat(_:_:)(v26, v28, v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t sub_10060896C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = type metadata accessor for LocalizationUtility.Table(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LeftWhileTravelingUserNotification(0);
  v6 = (uint64_t *)(v0 + *(int *)(v5 + 24));
  v7 = v6[1];
  if (v7)
  {
    v8 = v5;
    v9 = *v6;
    v10 = *(unsigned __int8 *)(v0 + *(int *)(v5 + 32)) - 1;
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for LocalizationUtility.Table.default(_:), v1);
    swift_bridgeObjectRetain(v7);
    if (v10 > 1)
    {
      v11 = 0xD000000000000041;
      v12 = "SEPARATION_MONITORING_MULTIPLE_DEVICES_LEFT_BEHIND_ALERT_SUBTITLE";
    }
    else
    {
      v11 = 0xD00000000000003FLL;
      v12 = "SEPARATION_MONITORING_MULTIPLE_ITEMS_LEFT_BEHIND_ALERT_SUBTITLE";
    }
    v14 = static LocalizationUtility.localizedString(key:table:)(v11, (unint64_t)(v12 - 32) | 0x8000000000000000, v4);
    v16 = v15;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v18 = swift_allocObject(v17, 112, 7);
    *(_OWORD *)(v18 + 16) = xmmword_100E22B10;
    v19 = *(_QWORD *)(*(_QWORD *)(v0 + *(int *)(v8 + 20)) + 16);
    *(_QWORD *)(v18 + 56) = &type metadata for Int;
    *(_QWORD *)(v18 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v18 + 32) = v19;
    *(_QWORD *)(v18 + 96) = &type metadata for String;
    *(_QWORD *)(v18 + 104) = sub_10001AA00();
    *(_QWORD *)(v18 + 72) = v9;
    *(_QWORD *)(v18 + 80) = v7;
    v13 = static String.localizedStringWithFormat(_:_:)(v14, v16, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for LocalizationUtility.Table.default(_:), v1);
    v13 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000035, 0x8000000100ED0800, v4);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return v13;
}

unint64_t sub_100608B70()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v23;
  _QWORD *v24;
  _BYTE v25[128];

  v1 = (void *)objc_opt_self(NSKeyedArchiver);
  v2 = type metadata accessor for LeftWhileTravelingUserNotification(0);
  v3 = *(_QWORD *)(v0 + *(int *)(v2 + 28));
  *(_QWORD *)&v23 = 0;
  v4 = objc_msgSend(v1, "archivedDataWithRootObject:requiringSecureCoding:error:", v3, 1, &v23);
  v5 = (id)v23;
  if (v4)
  {
    v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {
    v9 = v5;
    v10 = _convertNSErrorToError(_:)(v5);

    swift_willThrow(v11);
    swift_errorRelease(v10);
    v6 = 0;
    v8 = 0xF000000000000000;
  }
  v12 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  inited = swift_initStackObject(v12, v25);
  *(_OWORD *)(inited + 16) = xmmword_100E22B10;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPSeparationAlertUserInfoLocationKey);
  *(_QWORD *)(inited + 40) = v14;
  if (v8 >> 60 == 15)
  {
    v15 = objc_msgSend(objc_allocWithZone((Class)NSNull), "init");
    *(_QWORD *)(inited + 72) = sub_100306A90();
    *(_QWORD *)(inited + 48) = v15;
  }
  else
  {
    v24 = &type metadata for Data;
    *(_QWORD *)&v23 = v6;
    *((_QWORD *)&v23 + 1) = v8;
    sub_10010F90C(&v23, (_OWORD *)(inited + 48));
  }
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPSeparationAlertUserInfoBeaconIdentifiersKey);
  *(_QWORD *)(inited + 88) = v16;
  v17 = *(_QWORD *)(v0 + *(int *)(v2 + 20));
  sub_10001BD08(v6, v8);
  swift_bridgeObjectRetain(v17);
  sub_100302094(v18);
  v20 = v19;
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 120) = sub_10001A9A8(&qword_1011063B0);
  *(_QWORD *)(inited + 96) = v20;
  v21 = sub_1006B8B10(inited);
  sub_10001EF3C(v6, v8);
  return v21;
}

uint64_t sub_100608D74()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  unint64_t v3;
  Swift::String v4;
  Swift::String v5;
  int *v6;
  Swift::String v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  Swift::String v11;
  void *v12;
  double v13;
  Swift::String v14;
  double v15;
  Swift::String v16;
  _OWORD v18[2];
  char v19;
  __int128 v20;

  *(_QWORD *)&v18[0] = 0;
  *((_QWORD *)&v18[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(88);
  v20 = v18[0];
  v1._object = (void *)0x8000000100EDCD90;
  v1._countAndFlagsBits = 0xD000000000000027;
  String.append(_:)(v1);
  v2 = type metadata accessor for UUID(0);
  v3 = sub_1001D4C18();
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x6E6974736564202CLL;
  v5._object = (void *)0xEF203A6E6F697461;
  String.append(_:)(v5);
  v6 = (int *)type metadata accessor for LeftWhileTravelingUserNotification(0);
  LOBYTE(v18[0]) = *(_BYTE *)(v0 + v6[8]);
  _print_unlocked<A, B>(_:_:)(v18, &v20, &type metadata for UserNotificationDestination, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v7._countAndFlagsBits = 0x747865746E6F6320;
  v7._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v7);
  v8 = v0 + v6[5];
  v9 = *(_BYTE *)(v8 + 32);
  v10 = *(_OWORD *)(v8 + 16);
  v18[0] = *(_OWORD *)v8;
  v18[1] = v10;
  v19 = v9;
  _print_unlocked<A, B>(_:_:)(v18, &v20, &type metadata for SeparationMonitoringBeaconsContext, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v11._countAndFlagsBits = 0x6F697461636F6C20;
  v11._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v11);
  v12 = *(void **)(v0 + v6[7]);
  objc_msgSend(v12, "coordinate");
  Double.write<A>(to:)(&v20, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v13);
  v14._countAndFlagsBits = 8236;
  v14._object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  objc_msgSend(v12, "coordinate");
  Double.write<A>(to:)(&v20, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v15);
  v16._countAndFlagsBits = 62;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return v20;
}

uint64_t sub_100608F68(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 32)) | 0x20u;
}

uint64_t sub_100608F84(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 32));
}

uint64_t type metadata accessor for LeftWhileTravelingUserNotification(uint64_t a1)
{
  uint64_t result;

  result = qword_101100D88;
  if (!qword_101100D88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LeftWhileTravelingUserNotification);
  return result;
}

_QWORD *sub_100608FD0(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)v10;
    v12 = (void *)*((_QWORD *)v10 + 1);
    v13 = *((_QWORD *)v10 + 2);
    v14 = *((_QWORD *)v10 + 3);
    v15 = v10[32];
    sub_100306C34(*(_QWORD *)v10, v12, v13, v14, v15);
    *(_QWORD *)v9 = v11;
    *((_QWORD *)v9 + 1) = v12;
    *((_QWORD *)v9 + 2) = v13;
    *((_QWORD *)v9 + 3) = v14;
    v9[32] = v15;
    v16 = a3[6];
    v17 = a3[7];
    v18 = (_QWORD *)((char *)a1 + v16);
    v19 = (_QWORD *)((char *)a2 + v16);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = *(void **)((char *)a2 + v17);
    *(_QWORD *)((char *)a1 + v17) = v21;
    v22 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)a1 + v22) = *((_BYTE *)a2 + v22);
    swift_bridgeObjectRetain(v20);
    v23 = v21;
  }
  return a1;
}

void sub_1006090D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  sub_100306ACC(*(_QWORD *)v5, *(void **)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_BYTE *)(v5 + 32));
  swift_bridgeObjectRelease();

}

uint64_t sub_100609144(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  v11 = *(void **)(v9 + 8);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = *(_QWORD *)(v9 + 24);
  v14 = *(_BYTE *)(v9 + 32);
  sub_100306C34(*(_QWORD *)v9, v11, v12, v13, v14);
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  *(_QWORD *)(v8 + 16) = v12;
  *(_QWORD *)(v8 + 24) = v13;
  *(_BYTE *)(v8 + 32) = v14;
  v15 = a3[6];
  v16 = a3[7];
  v17 = (_QWORD *)(a1 + v15);
  v18 = (_QWORD *)(a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = *(void **)(a2 + v16);
  *(_QWORD *)(a1 + v16) = v20;
  v21 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  swift_bridgeObjectRetain(v19);
  v22 = v20;
  return a1;
}

uint64_t sub_100609220(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  v11 = *(void **)(v9 + 8);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = *(_QWORD *)(v9 + 24);
  v14 = *(_BYTE *)(v9 + 32);
  sub_100306C34(*(_QWORD *)v9, v11, v12, v13, v14);
  v15 = *(_QWORD *)v8;
  v16 = *(void **)(v8 + 8);
  v17 = *(_QWORD *)(v8 + 16);
  v18 = *(_QWORD *)(v8 + 24);
  v19 = *(_BYTE *)(v8 + 32);
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  *(_QWORD *)(v8 + 16) = v12;
  *(_QWORD *)(v8 + 24) = v13;
  *(_BYTE *)(v8 + 32) = v14;
  sub_100306ACC(v15, v16, v17, v18, v19);
  v20 = a3[6];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  *v21 = *v22;
  v23 = v22[1];
  v21[1] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease();
  v24 = a3[7];
  v25 = *(void **)(a2 + v24);
  v26 = *(void **)(a1 + v24);
  *(_QWORD *)(a1 + v24) = v25;
  v27 = v25;

  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100609330(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v12 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1006093C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 32);
  v11 = *(_QWORD *)v8;
  v12 = *(void **)(v8 + 8);
  v13 = *(_QWORD *)(v8 + 16);
  v14 = *(_QWORD *)(v8 + 24);
  v15 = *(_BYTE *)(v8 + 32);
  v16 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v16;
  *(_BYTE *)(v8 + 32) = v10;
  sub_100306ACC(v11, v12, v13, v14, v15);
  v17 = a3[6];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  v22 = a3[7];
  v23 = *(void **)(a1 + v22);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);

  v24 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  return a1;
}

uint64_t sub_100609484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100609490);
}

uint64_t sub_100609490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10060950C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100609518);
}

uint64_t sub_100609518(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t sub_100609590(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "!";
    v4[2] = &unk_100E45980;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = &unk_100E45998;
    v4[5] = &unk_100E459B0;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10060962C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[29] = a2;
  v3[30] = v2;
  v3[28] = a1;
  v4 = sub_10001A9A8(&qword_1010EC870);
  v3[31] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CircleTrustRequestEnvelopeV1(0);
  v3[32] = v5;
  v3[33] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MemberSharingCircle(0);
  v3[34] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[35] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[36] = swift_task_alloc(v8);
  v3[37] = swift_task_alloc(v8);
  v3[38] = swift_task_alloc(v8);
  return swift_task_switch(sub_1006096F4, v2, 0);
}

uint64_t sub_1006096F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if ((sub_100AB3A40() & 1) != 0)
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6748);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.error.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure on share request by underage account. Operation is not allowed.", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

    type metadata accessor for SPBeaconSharingError(0);
    v7 = v6;
    *(_QWORD *)(v0 + 216) = 8;
    v8 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v9 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
    v10 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 208), v0 + 216, v8, v7, v9);
    swift_willThrow(v10);
    v11 = *(_QWORD *)(v0 + 296);
    v12 = *(_QWORD *)(v0 + 288);
    v13 = *(_QWORD *)(v0 + 264);
    v14 = *(_QWORD *)(v0 + 248);
    swift_task_dealloc(*(_QWORD *)(v0 + 304));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v0 + 240) + 112);
    *(_QWORD *)(v0 + 312) = v16;
    return swift_task_switch(sub_1006098B8, v16, 0);
  }
}

uint64_t sub_1006098B8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 320) = v2;
  v3 = sub_10001A9A8(&qword_1010EC840);
  *v2 = v0;
  v2[1] = sub_100609934;
  return unsafeBlocking<A>(_:)(v0 + 152, sub_10001ED30, *(_QWORD *)(v0 + 312), v3);
}

uint64_t sub_100609934()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 312);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 320));
  swift_release();
  return swift_task_switch(sub_100609990, v1, 0);
}

uint64_t sub_100609990()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[30];
  v0[41] = v0[19];
  return swift_task_switch(sub_1006099AC, v1, 0);
}

uint64_t sub_1006099AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0[41];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = 0;
    v4 = v0[34];
    v16 = v0[35];
    v15 = *(_QWORD *)(v1 + 16);
    while (v3 < *(_QWORD *)(v1 + 16))
    {
      v5 = v0[38];
      v6 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
      v7 = *(_QWORD *)(v16 + 72);
      sub_10005972C(v0[41] + v6 + v7 * v3, v5, type metadata accessor for MemberSharingCircle);
      v8 = v0[38];
      if (*(_BYTE *)(v5 + *(int *)(v4 + 40)) == 2)
      {
        v9 = v1;
        v10 = v4;
        sub_10060C080(v8, v0[37]);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_10009A4D0(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v12 = _swiftEmptyArrayStorage[2];
        v11 = _swiftEmptyArrayStorage[3];
        if (v12 >= v11 >> 1)
          sub_10009A4D0(v11 > 1, v12 + 1, 1);
        v13 = v0[37];
        _swiftEmptyArrayStorage[2] = v12 + 1;
        sub_10060C080(v13, (uint64_t)_swiftEmptyArrayStorage + v6 + v12 * v7);
        v4 = v10;
        v1 = v9;
        v2 = v15;
      }
      else
      {
        sub_1000126B0(v8, type metadata accessor for MemberSharingCircle);
      }
      if (v2 == ++v3)
        goto LABEL_12;
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  v0[42] = _swiftEmptyArrayStorage[2];
  swift_release();
  if (qword_1010E9D08 != -1)
LABEL_15:
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v0[43] = qword_1011B71A8;
  return swift_task_switch(sub_100609B80, 0, 0);
}

uint64_t sub_100609B80()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 352) = v2;
  *v2 = v0;
  v2[1] = sub_100609BF4;
  return unsafeBlocking<A>(_:)(v0 + 176, sub_100033264, *(_QWORD *)(v0 + 344), &type metadata for Configuration);
}

uint64_t sub_100609BF4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 352));
  swift_release();
  return swift_task_switch(sub_100609C50, 0, 0);
}

uint64_t sub_100609C50()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[30];
  v0[45] = v0[22];
  return swift_task_switch(sub_100609C6C, v1, 0);
}

uint64_t sub_100609C6C()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, char, uint64_t);

  v1 = *(_QWORD *)(v0 + 336);
  v2 = sub_100C1BA64(*(_QWORD *)(v0 + 360));
  swift_bridgeObjectRelease();
  if (v1 >= v2)
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B6748);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = *(_QWORD *)(v0 + 336);
      v18 = swift_slowAlloc(22, -1);
      *(_DWORD *)v18 = 134218240;
      *(_QWORD *)(v0 + 120) = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v18 + 4, v18 + 12);
      *(_WORD *)(v18 + 12) = 2048;
      *(_QWORD *)(v0 + 128) = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v18 + 14, v18 + 22);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Request limit reached for beacons.\nopenRequests: %ld >= maxPendingRequestSharedItem: %lu.", (uint8_t *)v18, 0x16u);
      swift_slowDealloc(v18, -1, -1);
    }

    type metadata accessor for SPBeaconSharingError(0);
    v20 = v19;
    *(_QWORD *)(v0 + 112) = 10;
    v21 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v22 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
    v23 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 136), v0 + 112, v21, v20, v22);
    swift_willThrow(v23);
    v24 = *(_QWORD *)(v0 + 296);
    v25 = *(_QWORD *)(v0 + 288);
    v26 = *(_QWORD *)(v0 + 264);
    v27 = *(_QWORD *)(v0 + 248);
    swift_task_dealloc(*(_QWORD *)(v0 + 304));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 264);
    v4 = *(_QWORD *)(v0 + 256);
    v5 = *(_QWORD *)(v0 + 232);
    v6 = *(_QWORD *)(v0 + 240);
    v7 = *(_QWORD *)(v0 + 224) + *(int *)(*(_QWORD *)(v0 + 272) + 28);
    v8 = type metadata accessor for UUID(0);
    *(_QWORD *)(v0 + 368) = v8;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v3, v7, v8);
    *(_QWORD *)(v0 + 40) = v4;
    *(_QWORD *)(v0 + 48) = sub_100006204(&qword_101100EA0, type metadata accessor for CircleTrustRequestEnvelopeV1, (uint64_t)&unk_100E38D40);
    *(_QWORD *)(v0 + 56) = sub_100006204(&qword_101100EA8, type metadata accessor for CircleTrustRequestEnvelopeV1, (uint64_t)&unk_100E38C50);
    v9 = sub_100018F08((_QWORD *)(v0 + 16));
    sub_10005972C(v3, (uint64_t)v9, type metadata accessor for CircleTrustRequestEnvelopeV1);
    v10 = v5 + *(int *)(type metadata accessor for MemberPeerTrust(0) + 28);
    v28 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t))((char *)&dword_101120690 + dword_101120690);
    v11 = (_QWORD *)swift_task_alloc(unk_101120694);
    *(_QWORD *)(v0 + 376) = v11;
    *v11 = v0;
    v11[1] = sub_100609F80;
    return v28(v6 + 120, v0 + 16, 7, v10);
  }
}

uint64_t sub_100609F80()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 376);
  *(_QWORD *)(*v1 + 384) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 240);
    v5 = sub_10060A430;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 240);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 16));
    v5 = sub_100609FF4;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100609FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[2];

  sub_1000126B0(*(_QWORD *)(v0 + 264), type metadata accessor for CircleTrustRequestEnvelopeV1);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 392) = sub_10001A9E8(v3, (uint64_t)qword_1011B6748);
  v4 = sub_10005972C(v2, v1, type metadata accessor for MemberSharingCircle);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 368);
    v8 = *(_QWORD *)(v0 + 288);
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v30[0] = v10;
    *(_DWORD *)v9 = 141558275;
    *(_QWORD *)(v0 + 192) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v7, v11);
    *(_QWORD *)(v0 + 200) = sub_100016940(v12, v13, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Data update on share request. Update %{private,mask.hash}s.", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 288), type metadata accessor for MemberSharingCircle);
  }

  v14 = *(_QWORD *)(v0 + 384);
  v15 = *(_QWORD *)(v0 + 248);
  v16 = swift_task_alloc(32);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)(v0 + 224);
  sub_100ADB304((void (*)(uint64_t, _UNKNOWN **))sub_10060C0C4, v15);
  if (v14)
  {
    swift_task_dealloc(v16);
    swift_errorRetain(v14);
    v17 = swift_errorRetain(v14);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v30[0] = v21;
      *(_DWORD *)v20 = 136315138;
      swift_getErrorValue(v14, v0 + 168, v0 + 88);
      v22 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
      *(_QWORD *)(v0 + 184) = sub_100016940(v22, v23, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v14);
      swift_errorRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failure in share requesting, cloud data update error %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      swift_errorRelease(v14);
    }
    else
    {
      swift_errorRelease(v14);
      swift_errorRelease(v14);
      swift_errorRelease(v14);

    }
    v26 = *(_QWORD *)(v0 + 296);
    v27 = *(_QWORD *)(v0 + 288);
    v28 = *(_QWORD *)(v0 + 264);
    v29 = *(_QWORD *)(v0 + 248);
    swift_task_dealloc(*(_QWORD *)(v0 + 304));
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 312);
    swift_task_dealloc(v16);
    return swift_task_switch(sub_10060A69C, v24, 0);
  }
}

uint64_t sub_10060A430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  sub_1000126B0(*(_QWORD *)(v0 + 264), type metadata accessor for CircleTrustRequestEnvelopeV1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 384);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6748);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 384);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v21 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v7, v0 + 144, v0 + 64);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
    *(_QWORD *)(v0 + 160) = sub_100016940(v10, v11, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failure in share requesting, message sending error %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 384));
    swift_errorRelease(v7);
  }

  v12 = *(_QWORD *)(v0 + 384);
  v13 = sub_100067D98();
  v14 = swift_allocError(&type metadata for BeaconSharingFlowError, v13, 0, 0);
  *v15 = 3;
  swift_willThrow(v14);
  swift_errorRelease(v12);
  v16 = *(_QWORD *)(v0 + 296);
  v17 = *(_QWORD *)(v0 + 288);
  v18 = *(_QWORD *)(v0 + 264);
  v19 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10060A69C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 400) = *(_QWORD *)(*(_QWORD *)(v0 + 312) + 128);
  return swift_task_switch(sub_10060A6BC, 0, 0);
}

uint64_t sub_10060A6BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[50];
  v2 = v0[31];
  v3 = swift_task_alloc(32);
  v0[51] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[52] = v4;
  *v4 = v0;
  v4[1] = sub_10060A760;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x8000000100EC6890, sub_1000682F8, v3, &type metadata for () + 1);
}

uint64_t sub_10060A760()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 416);
  *(_QWORD *)(*v1 + 424) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10060A858;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 408));
    v4 = sub_10060A7CC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10060A7CC()
{
  uint64_t v0;

  return swift_task_switch(sub_10060A7E0, *(_QWORD *)(v0 + 240), 0);
}

uint64_t sub_10060A7E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100004048(*(_QWORD *)(v0 + 248), &qword_1010EC870);
  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10060A858()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 408));
  return swift_task_switch(sub_10060A898, v1, 0);
}

uint64_t sub_10060A898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  sub_100004048(*(_QWORD *)(v0 + 248), &qword_1010EC870);
  v1 = *(_QWORD *)(v0 + 424);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v14 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_getErrorValue(v1, v0 + 168, v0 + 88);
    v7 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
    *(_QWORD *)(v0 + 184) = sub_100016940(v7, v8, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure in share requesting, cloud data update error %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = *(_QWORD *)(v0 + 296);
  v10 = *(_QWORD *)(v0 + 288);
  v11 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10060AA88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MemberSharingCircle(0);
  *(_BYTE *)(a1 + *(int *)(v8 + 40)) = 2;
  v9 = type metadata accessor for MemberPeerTrust(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2 + *(int *)(v9 + 20), v4);
  v10 = *(int *)(v8 + 36);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a1 + v10));
  v14 = *(_QWORD *)(a1 + v10);
  *(_QWORD *)(a1 + v10) = 0x8000000000000000;
  sub_10010AFEC(2u, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a1 + v10) = v14;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10060AB80(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[9] = a1;
  v2[10] = v1;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F7780);
  v2[11] = v3;
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[12] = swift_task_alloc(v4);
  v2[13] = swift_task_alloc(v4);
  v2[14] = swift_task_alloc(v4);
  v2[15] = swift_task_alloc(v4);
  v5 = type metadata accessor for UUID(0);
  v2[16] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[17] = v6;
  v2[18] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EC870);
  v2[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MemberSharingCircle(0);
  v2[20] = v8;
  v2[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10060AC78, v1, 0);
}

uint64_t sub_10060AC78()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, unint64_t, uint64_t);
  char v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;

  v1 = (unint64_t)(v0 + 7);
  if (qword_1010E9938 != -1)
    goto LABEL_38;
  while (1)
  {
    v2 = v0[9];
    v3 = v0[21];
    v4 = type metadata accessor for Logger(0);
    v0[22] = sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
    v5 = sub_10005972C(v2, v3, type metadata accessor for MemberSharingCircle);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    v8 = os_log_type_enabled(v6, v7);
    v9 = v0[21];
    if (v8)
    {
      v59 = v0[16];
      v10 = swift_slowAlloc(22, -1);
      v11 = (_QWORD *)swift_slowAlloc(32, -1);
      v61 = v11;
      *(_DWORD *)v10 = 141558275;
      v0[7] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v0 + 8, v10 + 4, v10 + 12);
      *(_WORD *)(v10 + 12) = 2081;
      v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v13 = dispatch thunk of CustomStringConvertible.description.getter(v59, v12);
      v0[8] = sub_100016940(v13, v14, (uint64_t *)&v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v10 + 14, v10 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v9, type metadata accessor for MemberSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Data update on handle share request decline. Update %{private,mask.hash}s.", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {
      sub_1000126B0(v9, type metadata accessor for MemberSharingCircle);
    }

    swift_bridgeObjectRetain(*(_QWORD *)(v0[9] + *(int *)(v0[20] + 36)));
    v16 = sub_10060BBA8(v15);
    swift_bridgeObjectRelease();
    v1 = *(_QWORD *)(v16 + 16);
    if (!v1)
      break;
    v60 = v0[17];
    v51 = v0[11];
    v61 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v1, 0);
    v18 = sub_10001D6A8(v16);
    v19 = 0;
    v20 = v16 + 64;
    v21 = *(_BYTE *)(v16 + 32);
    v47 = v16 + 88;
    v52 = v16;
    v53 = v0;
    v48 = v1;
    v49 = v17;
    v50 = v16 + 64;
    while ((v18 & 0x8000000000000000) == 0 && (uint64_t)v18 < 1 << v21)
    {
      if ((*(_QWORD *)(v20 + 8 * (v18 >> 6)) & (1 << v18)) == 0)
        goto LABEL_33;
      if (*(_DWORD *)(v16 + 36) != v17)
        goto LABEL_34;
      v55 = v18 >> 6;
      v54 = v19;
      v23 = *(int *)(v51 + 48);
      v25 = v0[15];
      v24 = v0[16];
      v26 = v0[13];
      v27 = v0[14];
      v56 = v0[12];
      v57 = v0[18];
      v58 = *(_QWORD *)(v60 + 72);
      v28 = *(void (**)(uint64_t, unint64_t, uint64_t))(v60 + 16);
      v28(v25, *(_QWORD *)(v16 + 48) + v58 * v18, v24);
      v29 = *(_BYTE *)(*(_QWORD *)(v16 + 56) + v18);
      *(_BYTE *)(v25 + v23) = v29;
      v28(v27, v25, v24);
      *(_BYTE *)(v27 + *(int *)(v51 + 48)) = v29;
      sub_10060BFF8(v27, v26);
      sub_100004048(v25, (uint64_t *)&unk_1010F7780);
      v28(v56, v26, v24);
      v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 32);
      v30(v57, v56, v24);
      sub_100004048(v26, (uint64_t *)&unk_1010F7780);
      v31 = v61;
      if ((swift_isUniquelyReferenced_nonNull_native(v61) & 1) == 0)
      {
        sub_10009A578(0, v31[2] + 1, 1);
        v31 = v61;
      }
      v1 = v31[2];
      v32 = v31[3];
      v16 = v52;
      v0 = v53;
      if (v1 >= v32 >> 1)
      {
        sub_10009A578(v32 > 1, v1 + 1, 1);
        v31 = v61;
      }
      v33 = v53[18];
      v34 = v53[16];
      v31[2] = v1 + 1;
      v30((uint64_t)v31+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ v1 * v58, v33, v34);
      v61 = v31;
      v21 = *(_BYTE *)(v52 + 32);
      v22 = 1 << v21;
      if ((uint64_t)v18 >= 1 << v21)
        goto LABEL_35;
      v20 = v50;
      v35 = v18 >> 6;
      v36 = *(_QWORD *)(v50 + 8 * v55);
      if ((v36 & (1 << v18)) == 0)
        goto LABEL_36;
      v17 = v49;
      if (*(_DWORD *)(v52 + 36) != v49)
        goto LABEL_37;
      v37 = v36 & (-2 << (v18 & 0x3F));
      if (v37)
      {
        v22 = __clz(__rbit64(v37)) | v18 & 0xFFFFFFFFFFFFFFC0;
        v1 = v48;
      }
      else
      {
        v38 = v55 + 1;
        v39 = (v22 + 63) >> 6;
        v1 = v48;
        if (v55 + 1 < v39)
        {
          v40 = *(_QWORD *)(v50 + 8 * v38);
          if (!v40)
          {
            v38 = v55 + 2;
            if (v55 + 2 >= v39)
              goto LABEL_8;
            v40 = *(_QWORD *)(v50 + 8 * v38);
            if (!v40)
            {
              while (v39 - 3 != v35)
              {
                v40 = *(_QWORD *)(v47 + 8 * v35++);
                if (v40)
                {
                  v38 = v35 + 2;
                  goto LABEL_23;
                }
              }
              goto LABEL_8;
            }
          }
LABEL_23:
          v22 = __clz(__rbit64(v40)) + (v38 << 6);
        }
      }
LABEL_8:
      v19 = v54 + 1;
      v18 = v22;
      if (v54 + 1 == v1)
      {
        swift_release();
        goto LABEL_31;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  }
  swift_release();
  v31 = _swiftEmptyArrayStorage;
LABEL_31:
  v41 = v0[19];
  v42 = v0[9];
  v43 = swift_task_alloc(32);
  *(_QWORD *)(v43 + 16) = v42;
  *(_QWORD *)(v43 + 24) = v31;
  sub_100ADB304((void (*)(uint64_t, _UNKNOWN **))sub_10060C040, v41);
  v44 = v0[10];
  swift_bridgeObjectRelease();
  swift_task_dealloc(v43);
  v45 = *(_QWORD *)(v44 + 112);
  v0[23] = v45;
  return swift_task_switch(sub_10060B400, v45, 0);
}

uint64_t sub_10060B400()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 192) = *(_QWORD *)(*(_QWORD *)(v0 + 184) + 128);
  return swift_task_switch(sub_10060B420, 0, 0);
}

uint64_t sub_10060B420()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[24];
  v2 = v0[19];
  v3 = swift_task_alloc(32);
  v0[25] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[26] = v4;
  *v4 = v0;
  v4[1] = sub_10060B4C4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x8000000100EC6890, sub_100067DDC, v3, &type metadata for () + 1);
}

uint64_t sub_10060B4C4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  *(_QWORD *)(*v1 + 216) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10060B5D4;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 200));
    v4 = sub_10060B530;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10060B530()
{
  uint64_t v0;

  return swift_task_switch(sub_10060B544, *(_QWORD *)(v0 + 80), 0);
}

uint64_t sub_10060B544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100004048(*(_QWORD *)(v0 + 152), &qword_1010EC870);
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10060B5D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  return swift_task_switch(sub_10060B614, v1, 0);
}

uint64_t sub_10060B614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  sub_100004048(*(_QWORD *)(v0 + 152), &qword_1010EC870);
  v1 = *(_QWORD *)(v0 + 216);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v16 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_getErrorValue(v1, v0 + 40, v0 + 16);
    v7 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 48) = sub_100016940(v7, v8, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure handle share request decline, cloud data update error %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 112);
  v11 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 96);
  v13 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10060B814(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, __n128);
  __n128 v18;
  void (*v19)(char *, uint64_t);
  void (*v20)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v21;
  void (*v22)(unint64_t, char *, uint64_t);
  uint64_t v23;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v43;
  uint64_t result;
  _QWORD v45[2];
  void (*v46)(char *, uint64_t, uint64_t, uint64_t, __n128);
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v45 - v9;
  v11 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v11);
  v13 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for MemberSharingCircle(0);
  *(_BYTE *)(a1 + *(int *)(v50 + 40)) = 1;
  v14 = *(_QWORD *)(a2 + 16);
  v45[1] = a2;
  if (v14)
  {
    v15 = a2;
    v16 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v51 = *(_QWORD *)(v5 + 72);
    v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
    v18 = swift_bridgeObjectRetain(v15);
    v48 = v13;
    v49 = v5;
    v47 = v10;
    while (1)
    {
      v17(v13, v16, v4, v18);
      v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v20)(v13, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) == 1)
        return swift_bridgeObjectRelease();
      v46 = v20;
      v52 = v14;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v13, v4);
      v21 = v4;
      v22 = (void (*)(unint64_t, char *, uint64_t))v17;
      ((void (*)(char *, char *, uint64_t))v17)(v8, v10, v4);
      v23 = *(int *)(v50 + 36);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a1 + v23));
      v25 = (uint64_t)v8;
      v26 = isUniquelyReferenced_nonNull_native;
      v53 = *(_QWORD **)(a1 + v23);
      v27 = v53;
      v28 = a1;
      *(_QWORD *)(a1 + v23) = 0x8000000000000000;
      v29 = v25;
      v31 = sub_100003FB0(v25);
      v32 = v27[2];
      v33 = (v30 & 1) == 0;
      v34 = v32 + v33;
      if (__OFADD__(v32, v33))
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
        __break(1u);
        return result;
      }
      v35 = v30;
      if (v27[3] >= v34)
      {
        if ((v26 & 1) == 0)
          sub_100A9B8E0();
        v8 = (char *)v29;
        v38 = v53;
        if ((v35 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_100A88E4C(v34, v26);
        v8 = (char *)v29;
        v36 = sub_100003FB0(v29);
        if ((v35 & 1) != (v37 & 1))
          goto LABEL_21;
        v31 = v36;
        v38 = v53;
        if ((v35 & 1) != 0)
        {
LABEL_3:
          *(_BYTE *)(v38[7] + v31) = 1;
          goto LABEL_4;
        }
      }
      v38[(v31 >> 6) + 8] |= 1 << v31;
      v22(v38[6] + v31 * v51, v8, v21);
      *(_BYTE *)(v38[7] + v31) = 1;
      v39 = v38[2];
      v40 = __OFADD__(v39, 1);
      v41 = v39 + 1;
      if (v40)
        goto LABEL_20;
      v38[2] = v41;
LABEL_4:
      a1 = v28;
      *(_QWORD *)(v28 + v23) = v38;
      swift_bridgeObjectRelease();
      v5 = v49;
      v19 = *(void (**)(char *, uint64_t))(v49 + 8);
      v4 = v21;
      v19(v8, v21);
      v10 = v47;
      v19(v47, v21);
      v16 += v51;
      v14 = v52 - 1;
      v13 = v48;
      v17 = (void (*)(char *, uint64_t, uint64_t, __n128))v22;
      if (v52 == 1)
      {
        v46(v48, 1, 1, v4, v18);
        return swift_bridgeObjectRelease();
      }
    }
  }
  v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56);
  v43 = swift_bridgeObjectRetain(a2);
  v42(v13, 1, 1, v4, v43);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10060BB5C()
{
  uint64_t v0;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 120));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ShareRequestUseCase()
{
  return objc_opt_self(_TtC12searchpartyd19ShareRequestUseCase);
}

uint64_t sub_10060BBA8(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_10060BCF8((unint64_t *)((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    if (v1)
      swift_willThrow(v8);
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc(v7, -1);
    bzero(v9, v7);
    v2 = sub_10060BCF8((unint64_t *)v9, v6, v2);
    swift_slowDealloc(v9, -1, -1);
  }
  return v2;
}

uint64_t sub_10060BCF8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  void (*v21)(char *, unint64_t, uint64_t);
  int v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int64_t v43;

  v30 = a2;
  v31 = a1;
  v40 = sub_10001A9A8((uint64_t *)&unk_1010F7780);
  v4 = __chkstk_darwin(v40);
  v39 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v37 = (char *)&v30 - v6;
  v35 = type metadata accessor for UUID(0);
  v38 = *(_QWORD **)(v35 - 8);
  result = __chkstk_darwin(v35);
  v36 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 0;
  v41 = (_QWORD *)a3;
  v10 = *(_QWORD *)(a3 + 64);
  v32 = 0;
  v33 = a3 + 64;
  v11 = 1 << *(_BYTE *)(a3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v34 = (unint64_t)(v11 + 63) >> 6;
  v14 = (uint64_t)v37;
  v15 = v38;
  v16 = v35;
  v17 = v36;
  v18 = v39;
  while (1)
  {
    if (v13)
    {
      v42 = (v13 - 1) & v13;
      v43 = v9;
      v19 = __clz(__rbit64(v13)) | (v9 << 6);
      goto LABEL_5;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v25 >= v34)
      return sub_10041C56C(v31, v30, v32, v41);
    v26 = *(_QWORD *)(v33 + 8 * v25);
    v27 = v9 + 1;
    if (!v26)
    {
      v27 = v9 + 2;
      if (v9 + 2 >= v34)
        return sub_10041C56C(v31, v30, v32, v41);
      v26 = *(_QWORD *)(v33 + 8 * v27);
      if (!v26)
      {
        v27 = v9 + 3;
        if (v9 + 3 >= v34)
          return sub_10041C56C(v31, v30, v32, v41);
        v26 = *(_QWORD *)(v33 + 8 * v27);
        if (!v26)
          break;
      }
    }
LABEL_20:
    v42 = (v26 - 1) & v26;
    v43 = v27;
    v19 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_5:
    v20 = v41;
    v21 = (void (*)(char *, unint64_t, uint64_t))v15[2];
    v21(v17, v41[6] + v15[9] * v19, v16);
    v22 = *(unsigned __int8 *)(v20[7] + v19);
    v21((char *)v14, (unint64_t)v17, v16);
    v23 = *(int *)(v40 + 48);
    *(_BYTE *)(v14 + v23) = v22;
    v21(v18, v14, v16);
    v18[v23] = v22;
    sub_100004048(v14, (uint64_t *)&unk_1010F7780);
    v24 = (void (*)(char *, uint64_t))v15[1];
    v24(v18, v16);
    result = ((uint64_t (*)(char *, uint64_t))v24)(v17, v16);
    v9 = v43;
    v13 = v42;
    if (v22 == 2)
    {
      *(unint64_t *)((char *)v31 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      if (__OFADD__(v32++, 1))
      {
        __break(1u);
        return sub_10041C56C(v31, v30, v32, v41);
      }
    }
  }
  v28 = v9 + 4;
  if (v9 + 4 >= v34)
    return sub_10041C56C(v31, v30, v32, v41);
  v26 = *(_QWORD *)(v33 + 8 * v28);
  if (v26)
  {
    v27 = v9 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v27 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v27 >= v34)
      return sub_10041C56C(v31, v30, v32, v41);
    v26 = *(_QWORD *)(v33 + 8 * v27);
    ++v28;
    if (v26)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10060BFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F7780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10060C040()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  sub_100ADD0D0(v1);
}

uint64_t sub_10060C080(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MemberSharingCircle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10060C0C4()
{
  uint64_t v0;

  sub_1009842F0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10060C104(uint64_t a1)
{
  uint64_t v1;

  return sub_10060AA88(a1, *(_QWORD *)(v1 + 16));
}

uint64_t *PencilSendPairingStatusCommandPayload.expectedLength.unsafeMutableAddressor()
{
  return &static PencilSendPairingStatusCommandPayload.expectedLength;
}

uint64_t static PencilSendPairingStatusCommandPayload.expectedLength.getter()
{
  _BYTE v1[24];

  swift_beginAccess(&static PencilSendPairingStatusCommandPayload.expectedLength, v1, 0, 0);
  return static PencilSendPairingStatusCommandPayload.expectedLength;
}

uint64_t static PencilSendPairingStatusCommandPayload.expectedLength.setter(uint64_t a1)
{
  uint64_t result;
  _BYTE v3[24];

  result = swift_beginAccess(&static PencilSendPairingStatusCommandPayload.expectedLength, v3, 1, 0);
  static PencilSendPairingStatusCommandPayload.expectedLength = a1;
  return result;
}

uint64_t (*static PencilSendPairingStatusCommandPayload.expectedLength.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&static PencilSendPairingStatusCommandPayload.expectedLength, a1, 33, 0);
  return j__swift_endAccess_0;
}

uint64_t PencilSendPairingStatusCommandPayload.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_10060C620(a1);
  if (v1)
    return v3;
  return result;
}

uint64_t PencilSendPairingStatusCommandPayload.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v15[2];
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  dispatch thunk of BinaryEncoding.container()(v16, v9, v10);
  v15[0] = a2;
  v15[1] = a3;
  v11 = v17;
  v12 = v18;
  sub_10009F5D0((uint64_t)v16, v17);
  v13 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(v15, &type metadata for Data, v13, v11, v12);
  if (!v5)
    __asm { BR              X10 }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
}

uint64_t sub_10060C53C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_10060C620(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_10060C568(_QWORD *a1)
{
  uint64_t *v1;

  return PencilSendPairingStatusCommandPayload.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_10060C584(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      v2 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        v3 = type metadata accessor for Data.RangeReference(0);
        result = swift_allocObject(v3, 32, 7);
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_10060C620(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  unint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v39;
  uint64_t v40;
  NSObject *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v2 = v1;
  v4 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  dispatch thunk of BinaryDecoding.container()(v45, v7, v8);
  v9 = v46;
  v10 = v47;
  sub_10009F5D0((uint64_t)v45, v46);
  v11 = dispatch thunk of BinaryDecodingContaining.decode(length:)(4, v9, v10);
  if (!v1)
  {
    v2 = v11;
    v13 = v12;
    v14 = v46;
    v15 = v47;
    sub_10009F5D0((uint64_t)v45, v46);
    v16 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v14, v15);
    v18 = v46;
    v17 = v47;
    v43 = v19;
    sub_10009F5D0((uint64_t)v45, v46);
    v20 = v17;
    v21 = v43;
    v22 = dispatch thunk of BinaryDecodingContaining.decode(length:)(100, v18, v20);
    v42 = v23;
    v24 = sub_10001BBBC(v16, v21);
    static Endianness.current.getter(v24);
    sub_100059570();
    FixedWidthInteger.init(data:ofEndianness:)(&v44, v16, v21, v6);
    if (BYTE1(v44) != 1)
    {
      sub_1002F7C0C(v44, v22, v42);
      sub_10001BC14(v16, v21);
      __asm { BR              X10 }
    }
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v25 = type metadata accessor for Logger(0);
    sub_10001A9E8(v25, (uint64_t)qword_1011B7E28);
    sub_10001BBBC(v16, v21);
    v26 = sub_10001BBBC(v16, v21);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    v41 = v27;
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      v44 = v40;
      *(_DWORD *)v29 = 136315138;
      v39 = v29 + 4;
      v30 = Data.hexString.getter(v16, v43);
      v48 = sub_100016940(v30, v31, &v44);
      v21 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v39, v29 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v16, v21);
      sub_10001BC14(v16, v21);
      v32 = v41;
      _os_log_impl((void *)&_mh_execute_header, v41, v28, "Invalid signature length: %s", v29, 0xCu);
      v33 = v40;
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {
      sub_10001BC14(v16, v21);
      sub_10001BC14(v16, v21);

    }
    v34 = type metadata accessor for BinaryEncodingError(0);
    v35 = sub_1001120A4();
    swift_allocError(v34, v35, 0, 0);
    v37 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v36, enum case for BinaryEncodingError.encodingError(_:), v34);
    swift_willThrow(v37);
    sub_10001BC14(v22, v42);
    sub_10001BC14(v16, v21);
    sub_10001BC14(v2, v13);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v45);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v2;
}

unint64_t sub_10060CA8C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10060CAB8();
  result = sub_10015CCDC();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10060CAB8()
{
  unint64_t result;

  result = qword_101100EB8;
  if (!qword_101100EB8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for PencilSendPairingStatusCommandPayload, &type metadata for PencilSendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_101100EB8);
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilSendPairingStatusCommandPayload()
{
  return &type metadata for PencilSendPairingStatusCommandPayload;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdPayload()
{
  return &type metadata for VerifyFindMyNetworkIdPayload;
}

uint64_t sub_10060CB1C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_10060CBB4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

unint64_t sub_10060CB44(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10060CB70();
  result = sub_100439F94();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10060CB70()
{
  unint64_t result;

  result = qword_101100EC0;
  if (!qword_101100EC0)
  {
    result = swift_getWitnessTable(byte_100E45AF0, &type metadata for VerifyFindMyNetworkIdPayload);
    atomic_store(result, (unint64_t *)&qword_101100EC0);
  }
  return result;
}

uint64_t sub_10060CBB4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v10, v3, v4);
  v5 = v11;
  v6 = v12;
  sub_10009F5D0((uint64_t)v10, v11);
  v8 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v5, v6);
  if (!v1)
    __asm { BR              X10 }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v10);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v8;
}

uint64_t sub_10060CCC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = type metadata accessor for LocalizationUtility.Table(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PlaySoundUserNotification(0);
  v6 = *(unsigned __int8 *)(v0 + *(int *)(v5 + 32));
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for LocalizationUtility.Table.default(_:), v1);
  if (v6 == 1)
    v7 = "PLAY_SOUND_SUCCESS_TITLE_HAWKEYE";
  else
    v7 = "PLAY_SOUND_FAILURE_TITLE_HAWKEYE";
  v8 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000020, (unint64_t)(v7 - 32) | 0x8000000000000000, v4);
  v10 = v9;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v12 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
  v13 = (uint64_t *)(v0 + *(int *)(v5 + 28));
  v15 = *v13;
  v14 = v13[1];
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  *(_QWORD *)(v12 + 64) = sub_10001AA00();
  *(_QWORD *)(v12 + 32) = v15;
  *(_QWORD *)(v12 + 40) = v14;
  swift_bridgeObjectRetain(v14);
  v16 = String.init(format:arguments:)(v8, v10, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_10060CE34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v1 = type metadata accessor for LocalizationUtility.Table(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(unsigned __int8 *)(v0 + 1);
  v6 = type metadata accessor for PlaySoundUserNotification(0);
  v7 = v6;
  if (v5 == 65)
    v8 = 0x8000000100EDCE80;
  else
    v8 = 0x8000000100EDCE20;
  v9 = 0x8000000100EDCDF0;
  if (v5 == 65)
  {
    v9 = 0x8000000100EDCE50;
    v10 = 0xD00000000000002DLL;
  }
  else
  {
    v10 = 0xD000000000000023;
  }
  if (*(_BYTE *)(v0 + *(int *)(v6 + 32)))
    v11 = v9;
  else
    v11 = v8;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for LocalizationUtility.Table.default(_:), v1);
  v12 = static LocalizationUtility.localizedString(key:table:)(v10, v11, v4);
  v14 = v13;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  v17 = (uint64_t *)(v0 + *(int *)(v7 + 28));
  v19 = *v17;
  v18 = v17[1];
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_10001AA00();
  *(_QWORD *)(v16 + 32) = v19;
  *(_QWORD *)(v16 + 40) = v18;
  swift_bridgeObjectRetain(v18);
  v20 = String.init(format:arguments:)(v12, v14, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v20;
}

unint64_t sub_10060D004()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v0 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  inited = swift_initStackObject(v0, &v5);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = 1684632949;
  *(_QWORD *)(inited + 40) = 0xE400000000000000;
  v2 = UUID.uuidString.getter(inited);
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v3;
  return sub_1006B8B10(inited);
}

uint64_t type metadata accessor for PlaySoundUserNotification(uint64_t a1)
{
  uint64_t result;

  result = qword_101100F20;
  if (!qword_101100F20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PlaySoundUserNotification);
  return result;
}

_QWORD *sub_10060D0C4(_WORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    *a1 = *(_WORD *)a2;
    v7 = a3[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UUID(0);
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = a3[7];
    v13 = a3[8];
    v14 = (_QWORD *)((char *)v4 + v12);
    v15 = (_QWORD *)((char *)a2 + v12);
    v17 = *v15;
    v16 = v15[1];
    LOBYTE(v15) = *((_BYTE *)a2 + v13);
    *v14 = v17;
    v14[1] = v16;
    *((_BYTE *)v4 + v13) = (_BYTE)v15;
    v18 = a3[9];
    v19 = (char *)v4 + v18;
    v20 = (char *)a2 + v18;
    swift_bridgeObjectRetain(v16);
    v11(v19, v20, v10);
  }
  return v4;
}

uint64_t sub_10060D1A4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  v4 = a1 + a2[6];
  v5 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + a2[9], v5);
}

_WORD *sub_10060D224(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = a3[8];
  v13 = (_QWORD *)((char *)a1 + v11);
  v14 = (uint64_t *)((char *)a2 + v11);
  v16 = *v14;
  v15 = v14[1];
  LOBYTE(v14) = *((_BYTE *)a2 + v12);
  *v13 = v16;
  v13[1] = v15;
  *((_BYTE *)a1 + v12) = (_BYTE)v14;
  v17 = a3[9];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  swift_bridgeObjectRetain(v15);
  v10(v18, v19, v9);
  return a1;
}

_BYTE *sub_10060D2D8(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a3[6];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = &a1[v11];
  v13 = &a2[v11];
  *v12 = *v13;
  v14 = v13[1];
  v15 = v12[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[a3[8]] = a2[a3[8]];
  v10(&a1[a3[9]], &a2[a3[9]], v9);
  return a1;
}

_WORD *sub_10060D3A4(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  v10((char *)a1 + a3[9], (char *)a2 + a3[9], v9);
  return a1;
}

_WORD *sub_10060D444(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (uint64_t *)((char *)a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  v16 = v12[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease(v16);
  v17 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v10((char *)a1 + v17, (char *)a2 + v17, v9);
  return a1;
}

uint64_t sub_10060D4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10060D500);
}

uint64_t sub_10060D500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10060D584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10060D590);
}

uint64_t sub_10060D590(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10060D610(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v4[0] = &unk_100E45B80;
  v4[1] = &unk_100E45B98;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = &unk_100E45BB0;
    v7 = &unk_100E45BC8;
    v8 = v5;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10060D6A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10060D6AC);
}

uint64_t sub_10060D6AC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FMNAccountType(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_10060D728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10060D734);
}

char *sub_10060D734(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FMNAccountType(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AirPodsLEPairingLockAckEndPoint(uint64_t a1)
{
  uint64_t result;

  result = qword_101100FC0;
  if (!qword_101100FC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirPodsLEPairingLockAckEndPoint);
  return result;
}

void sub_10060D7E4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t *, _QWORD);
  Swift::String v5;
  void *v6;
  id v7;
  unsigned int v8;
  NSString v9;
  id v10;
  uint64_t v11;

  v1 = *v0;
  v2 = sub_10001A9A8(&qword_1010EBF60);
  v3 = OS_dispatch_queue.sync<A>(execute:)(sub_10003403C, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.host.setter();
  URLComponents.path.setter();
  v4 = (void (*)(uint64_t *, _QWORD))URLComponents.path.modify(&v11);
  v5._countAndFlagsBits = 0xD00000000000001ELL;
  v5._object = (void *)0x8000000100EDCF10;
  String.append(_:)(v5);
  v4(&v11, 0);
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v6 = (void *)qword_1011B7C08;
  v7 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v8 = objc_msgSend(v7, "isInternalBuild");

  if (v8)
  {
    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v6, "stringForKey:", v9);

    if (v10)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

      URLComponents.host.setter();
    }
  }
}

uint64_t *sub_10060D9A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
  }
  return a1;
}

uint64_t sub_10060DA44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 20), v4);
}

uint64_t sub_10060DAAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_10060DB1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_10060DB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_10060DBFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_10060DC6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10060DC78);
}

uint64_t sub_10060DC78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10060DCB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10060DCC0);
}

uint64_t sub_10060DCC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for BeaconIdentifier(uint64_t a1)
{
  uint64_t result;

  result = qword_101101050;
  if (!qword_101101050)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconIdentifier);
  return result;
}

uint64_t sub_10060DD3C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10060DDA4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  char v18;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1011010A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10060E568();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BeaconIdentifier.CodingKeys, &type metadata for BeaconIdentifier.CodingKeys, v11, v9, v10);
  v18 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v18, v5, v12, v13);
  if (!v2)
  {
    v14 = v3 + *(int *)(type metadata accessor for BeaconIdentifier(0) + 20);
    v17 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v17, v5, v12, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10060DF00@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void (*v23)(uint64_t, _QWORD *, uint64_t);
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v28 = a2;
  v32 = type metadata accessor for UUID(0);
  v30 = *(_QWORD *)(v32 - 8);
  v4 = __chkstk_darwin(v32);
  v29 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v31 = (uint64_t *)((char *)&v26 - v6);
  v33 = sub_10001A9A8(&qword_101101090);
  v7 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BeaconIdentifier(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v14);
  v15 = sub_10060E568();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BeaconIdentifier.CodingKeys, &type metadata for BeaconIdentifier.CodingKeys, v15, v14, v13);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v26 = v10;
  v27 = a1;
  v16 = v7;
  v17 = (uint64_t)v12;
  v19 = v29;
  v18 = v30;
  v35 = 0;
  v20 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v21 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v31, v32, &v35, v33, v32, v20);
  v22 = v21;
  v23 = *(void (**)(uint64_t, _QWORD *, uint64_t))(v18 + 32);
  v24 = v32;
  v23(v17, v22, v32);
  v34 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v19, v24, &v34, v33, v24, v20);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v33);
  v23(v17 + *(int *)(v26 + 20), v19, v32);
  sub_1002B1C50(v17, v28);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  return sub_1002B1C94(v17);
}

uint64_t sub_10060E1A8()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0x6E65644972657375;
}

uint64_t sub_10060E1F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10060E750(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10060E218(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10060E568();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10060E240(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10060E568();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10060E268@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10060DF00(a1, a2);
}

uint64_t sub_10060E27C(_QWORD *a1)
{
  return sub_10060DDA4(a1);
}

Swift::Int sub_10060E290()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_10060E324(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for UUID(0);
  v3 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int sub_10060E3A8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_10060E438()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v5;

  v0 = type metadata accessor for UUID(0);
  v1 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v5 = dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
  v2._countAndFlagsBits = 47;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10060E4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static UUID.== infix(_:_:)(a1, a2) & 1) != 0)
    return static UUID.== infix(_:_:)(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20));
  else
    return 0;
}

uint64_t sub_10060E53C()
{
  return sub_100006204(&qword_101101088, type metadata accessor for BeaconIdentifier, (uint64_t)&unk_100E45C64);
}

unint64_t sub_10060E568()
{
  unint64_t result;

  result = qword_101101098;
  if (!qword_101101098)
  {
    result = swift_getWitnessTable(byte_100E45E08, &type metadata for BeaconIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101101098);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BeaconIdentifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10060E5F8 + 4 * byte_100E45C45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10060E62C + 4 * byte_100E45C40[v4]))();
}

uint64_t sub_10060E62C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10060E634(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10060E63CLL);
  return result;
}

uint64_t sub_10060E648(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10060E650);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10060E654(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10060E65C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconIdentifier.CodingKeys()
{
  return &type metadata for BeaconIdentifier.CodingKeys;
}

unint64_t sub_10060E67C()
{
  unint64_t result;

  result = qword_1011010A8;
  if (!qword_1011010A8)
  {
    result = swift_getWitnessTable(a9_8, &type metadata for BeaconIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011010A8);
  }
  return result;
}

unint64_t sub_10060E6C4()
{
  unint64_t result;

  result = qword_1011010B0;
  if (!qword_1011010B0)
  {
    result = swift_getWitnessTable(a1_19, &type metadata for BeaconIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011010B0);
  }
  return result;
}

unint64_t sub_10060E70C()
{
  unint64_t result;

  result = qword_1011010B8;
  if (!qword_1011010B8)
  {
    result = swift_getWitnessTable(byte_100E45D78, &type metadata for BeaconIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011010B8);
  }
  return result;
}

uint64_t sub_10060E750(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6E65644972657375 && a2 == 0xEE00726569666974)
  {
    v5 = 0xEE00726569666974;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65644972657375, 0xEE00726569666974, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100EC28D0)
  {
    swift_bridgeObjectRelease(0x8000000100EC28D0);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC28D0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_QWORD *sub_10060E860(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  int *v10;
  uint64_t v11;
  unsigned int (*v12)(_BYTE *, uint64_t, int *, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(_BYTE *, uint64_t, uint64_t, __n128);
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  int *v56;
  _QWORD *v57;
  unsigned int (*v58)(_QWORD *, uint64_t, int *, __n128);
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  void (*v97)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  _OWORD *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  _BYTE *v108;
  unint64_t v109;
  uint64_t v110;
  void (*v111)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  _BYTE *v126;
  uint64_t v127;
  _BYTE *v128;
  _BYTE *v129;
  uint64_t v130;
  _BYTE *v131;
  _BYTE *v132;
  __n128 v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  void (*v142)(_BYTE *, _QWORD, uint64_t, int *, __n128);
  __n128 v143;
  _BYTE *__dst;
  _QWORD *__dsta;
  uint64_t v147;
  unsigned int (*v148)(char *, uint64_t, uint64_t, __n128);
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    v6 = a2[4];
    *(_QWORD *)(a1 + 32) = v6;
    v7 = *(int *)(a3 + 28);
    v8 = (_BYTE *)(a1 + v7);
    v9 = (char *)a2 + v7;
    v10 = (int *)type metadata accessor for AccessoryProductInfo(0);
    v11 = *((_QWORD *)v10 - 1);
    v12 = *(unsigned int (**)(_BYTE *, uint64_t, int *, __n128))(v11 + 48);
    swift_bridgeObjectRetain(v5);
    v13 = swift_bridgeObjectRetain(v6);
    if (v12(v9, 1, v10, v13))
    {
      v14 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v149 = v3;
      v150 = v11;
      *(_QWORD *)v8 = *(_QWORD *)v9;
      v8[8] = v9[8];
      v16 = v10[5];
      v17 = &v8[v16];
      v18 = &v9[v16];
      v19 = type metadata accessor for ServerStatusCode(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
      v8[v10[6]] = v9[v10[6]];
      v8[v10[7]] = v9[v10[7]];
      v20 = v10[8];
      v21 = &v8[v20];
      v22 = &v9[v20];
      v147 = v22[1];
      *v21 = *v22;
      v21[1] = v147;
      v8[v10[9]] = v9[v10[9]];
      v8[v10[10]] = v9[v10[10]];
      v8[v10[11]] = v9[v10[11]];
      v23 = v10[12];
      v24 = &v8[v23];
      v25 = &v9[v23];
      v26 = v25[1];
      *v24 = *v25;
      v24[1] = v26;
      v27 = v10[13];
      v28 = &v8[v27];
      v29 = &v9[v27];
      v30 = v29[1];
      *v28 = *v29;
      v28[1] = v30;
      v31 = v10[14];
      v32 = &v8[v31];
      v33 = &v9[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      v34 = v10[15];
      v35 = &v8[v34];
      v36 = &v9[v34];
      v37 = v36[1];
      *v35 = *v36;
      v35[1] = v37;
      v38 = v10[16];
      __dst = &v8[v38];
      v39 = &v9[v38];
      v40 = type metadata accessor for URL(0);
      v41 = *(_QWORD *)(v40 - 8);
      v42 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v41 + 48);
      swift_bridgeObjectRetain(v147);
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v30);
      v43 = swift_bridgeObjectRetain(v37);
      if (v42(v39, 1, v40, v43))
      {
        v44 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(__dst, v39, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v41 + 16))(__dst, v39, v40);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v41 + 56))(__dst, 0, 1, v40);
      }
      v45 = v10[17];
      v46 = &v8[v45];
      v47 = &v9[v45];
      v151 = v41;
      v152 = v40;
      if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v42)(&v9[v45], 1, v40))
      {
        v48 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v41 + 16))(v46, v47, v40);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v46, 0, 1, v40);
      }
      v49 = v10[18];
      v50 = &v8[v49];
      v51 = &v9[v49];
      v52 = v51[1];
      *v50 = *v51;
      v50[1] = v52;
      *(_QWORD *)&v8[v10[19]] = *(_QWORD *)&v9[v10[19]];
      v53 = v10[20];
      v54 = &v8[v53];
      v55 = &v9[v53];
      v56 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
      v57 = (_QWORD *)*((_QWORD *)v56 - 1);
      v58 = (unsigned int (*)(_QWORD *, uint64_t, int *, __n128))v57[6];
      v59 = swift_bridgeObjectRetain(v52);
      if (v58(v55, 1, v56, v59))
      {
        v60 = sub_10001A9A8(&qword_1010FBA50);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      else
      {
        __dsta = v57;
        v148 = v42;
        v61 = v55[1];
        *v54 = *v55;
        v54[1] = v61;
        v62 = v55[3];
        v54[2] = v55[2];
        v54[3] = v62;
        v63 = v55[5];
        v54[4] = v55[4];
        v54[5] = v63;
        *((_WORD *)v54 + 24) = *((_WORD *)v55 + 24);
        *((_BYTE *)v54 + 72) = *((_BYTE *)v55 + 72);
        v64 = v55[8];
        v54[7] = v55[7];
        v54[8] = v64;
        v65 = v56[10];
        v66 = (char *)v54 + v65;
        v67 = (char *)v55 + v65;
        swift_bridgeObjectRetain(v61);
        swift_bridgeObjectRetain(v62);
        v68 = swift_bridgeObjectRetain(v63);
        if (v148(v67, 1, v152, v68))
        {
          v69 = sub_10001A9A8(&qword_1010FBA40);
          memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
          v70 = v151;
        }
        else
        {
          v71 = v66;
          v70 = v151;
          (*(void (**)(char *, char *, uint64_t))(v151 + 16))(v71, v67, v152);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v151 + 56))(v71, 0, 1, v152);
        }
        v72 = v56[11];
        v73 = (char *)v54 + v72;
        v74 = (char *)v55 + v72;
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v148)((char *)v55 + v72, 1, v152))
        {
          v75 = sub_10001A9A8(&qword_1010FBA40);
          memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v73, v74, v152);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v73, 0, 1, v152);
        }
        v76 = v56[12];
        v77 = (char *)v54 + v76;
        v78 = (char *)v55 + v76;
        *(_QWORD *)v77 = *(_QWORD *)v78;
        v77[8] = v78[8];
        v79 = v56[13];
        v80 = (_QWORD *)((char *)v54 + v79);
        v81 = (_QWORD *)((char *)v55 + v79);
        v82 = v81[1];
        *v80 = *v81;
        v80[1] = v82;
        v83 = v56[14];
        v84 = *(_QWORD *)((char *)v55 + v83);
        *(_QWORD *)((char *)v54 + v83) = v84;
        v85 = v56[15];
        v86 = (_QWORD *)((char *)v54 + v85);
        v87 = (_QWORD *)((char *)v55 + v85);
        v88 = v87[1];
        *v86 = *v87;
        v86[1] = v88;
        v89 = v56[16];
        v90 = *(_QWORD *)((char *)v55 + v89);
        *(_QWORD *)((char *)v54 + v89) = v90;
        v91 = v56[17];
        v92 = (char *)v54 + v91;
        v93 = (char *)v55 + v91;
        *(_OWORD *)v92 = *(_OWORD *)v93;
        v92[16] = v93[16];
        v94 = v56[18];
        v95 = (char *)v54 + v94;
        v96 = (char *)v55 + v94;
        *(_OWORD *)v95 = *(_OWORD *)v96;
        v95[16] = v96[16];
        v97 = (void (*)(_QWORD *, _QWORD, uint64_t, int *, __n128))__dsta[7];
        swift_bridgeObjectRetain(v82);
        swift_bridgeObjectRetain(v84);
        swift_bridgeObjectRetain(v88);
        v98 = swift_bridgeObjectRetain(v90);
        v97(v54, 0, 1, v56, v98);
      }
      *(_DWORD *)&v8[v10[21]] = *(_DWORD *)&v9[v10[21]];
      v99 = v10[22];
      v100 = *(_QWORD *)&v9[v99];
      *(_QWORD *)&v8[v99] = v100;
      v101 = v10[23];
      v102 = &v8[v101];
      v103 = &v9[v101];
      v104 = *(_QWORD *)&v9[v101 + 8];
      swift_bridgeObjectRetain(v100);
      if (v104 >> 60 == 15)
      {
        *(_OWORD *)v102 = *v103;
      }
      else
      {
        v105 = *(_QWORD *)v103;
        sub_10001BBBC(v105, v104);
        *(_QWORD *)v102 = v105;
        *((_QWORD *)v102 + 1) = v104;
      }
      v106 = v10[24];
      v107 = &v8[v106];
      v108 = &v9[v106];
      v109 = *((_QWORD *)v108 + 1);
      if (v109 >> 60 == 15)
      {
        *(_OWORD *)v107 = *(_OWORD *)v108;
      }
      else
      {
        v110 = *(_QWORD *)v108;
        sub_10001BBBC(*(_QWORD *)v108, *((_QWORD *)v108 + 1));
        *(_QWORD *)v107 = v110;
        *((_QWORD *)v107 + 1) = v109;
      }
      v111 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v151 + 16);
      v111(&v8[v10[25]], &v9[v10[25]], v152);
      v111(&v8[v10[26]], &v9[v10[26]], v152);
      v111(&v8[v10[27]], &v9[v10[27]], v152);
      v111(&v8[v10[28]], &v9[v10[28]], v152);
      v111(&v8[v10[29]], &v9[v10[29]], v152);
      v111(&v8[v10[30]], &v9[v10[30]], v152);
      v112 = v10[31];
      v113 = &v8[v112];
      v114 = &v9[v112];
      v115 = v114[1];
      *v113 = *v114;
      v113[1] = v115;
      v116 = v10[32];
      v117 = *(_QWORD *)&v9[v116];
      *(_QWORD *)&v8[v116] = v117;
      v118 = v10[33];
      v119 = &v8[v118];
      v120 = &v9[v118];
      v121 = v120[1];
      *v119 = *v120;
      v119[1] = v121;
      v122 = v10[34];
      v123 = *(_QWORD *)&v9[v122];
      *(_QWORD *)&v8[v122] = v123;
      v124 = v10[35];
      v125 = &v8[v124];
      v126 = &v9[v124];
      *(_OWORD *)v125 = *(_OWORD *)v126;
      v125[16] = v126[16];
      v127 = v10[36];
      v128 = &v8[v127];
      v129 = &v9[v127];
      *(_OWORD *)v128 = *(_OWORD *)v129;
      v128[16] = v129[16];
      v130 = v10[37];
      v131 = &v8[v130];
      v132 = &v9[v130];
      swift_bridgeObjectRetain(v115);
      swift_bridgeObjectRetain(v117);
      swift_bridgeObjectRetain(v121);
      v133 = swift_bridgeObjectRetain(v123);
      ((void (*)(_BYTE *, _BYTE *, uint64_t, __n128))v111)(v131, v132, v152, v133);
      v111(&v8[v10[38]], &v9[v10[38]], v152);
      v111(&v8[v10[39]], &v9[v10[39]], v152);
      v111(&v8[v10[40]], &v9[v10[40]], v152);
      v111(&v8[v10[41]], &v9[v10[41]], v152);
      v111(&v8[v10[42]], &v9[v10[42]], v152);
      v8[v10[43]] = v9[v10[43]];
      v8[v10[44]] = v9[v10[44]];
      v8[v10[45]] = v9[v10[45]];
      v134 = v10[46];
      v135 = &v8[v134];
      v136 = &v9[v134];
      v137 = v136[1];
      *v135 = *v136;
      v135[1] = v137;
      v138 = v10[47];
      v139 = &v8[v138];
      v140 = &v9[v138];
      v141 = v140[1];
      *v139 = *v140;
      v139[1] = v141;
      v142 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *, __n128))(v150 + 56);
      swift_bridgeObjectRetain(v137);
      v143 = swift_bridgeObjectRetain(v141);
      v142(v8, 0, 1, v10, v143);
      return v149;
    }
  }
  return v3;
}

uint64_t sub_10060F090(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  void (*v22)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = (int *)type metadata accessor for AccessoryProductInfo(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v5 - 1) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = v4 + v5[5];
    v8 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v4 + v5[16];
    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    if (!v12(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    v13 = v4 + v5[17];
    if (!v12(v13, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
    swift_bridgeObjectRelease();
    v14 = v4 + v5[20];
    v15 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = v14 + *(int *)(v15 + 40);
      if (!v12(v16, 1, v10))
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v16, v10);
      v17 = v14 + *(int *)(v15 + 44);
      if (!v12(v17, 1, v10))
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v17, v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v18 = (uint64_t *)(v4 + v5[23]);
    v19 = v18[1];
    if (v19 >> 60 != 15)
      sub_10001BC14(*v18, v19);
    v20 = (uint64_t *)(v4 + v5[24]);
    v21 = v20[1];
    if (v21 >> 60 != 15)
      sub_10001BC14(*v20, v21);
    v22 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v22(v4 + v5[25], v10);
    v22(v4 + v5[26], v10);
    v22(v4 + v5[27], v10);
    v22(v4 + v5[28], v10);
    v22(v4 + v5[29], v10);
    v22(v4 + v5[30], v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22(v4 + v5[37], v10);
    v22(v4 + v5[38], v10);
    v22(v4 + v5[39], v10);
    v22(v4 + v5[40], v10);
    v22(v4 + v5[41], v10);
    v22(v4 + v5[42], v10);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10060F43C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int *v9;
  uint64_t v10;
  unsigned int (*v11)(_BYTE *, uint64_t, int *, __n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  int *v57;
  _QWORD *v58;
  unsigned int (*v59)(_QWORD *, uint64_t, int *, __n128);
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  __n128 v68;
  unsigned int (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  void (*v96)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  _OWORD *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  _BYTE *v107;
  unint64_t v108;
  uint64_t v109;
  void (*v110)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  _BYTE *v125;
  uint64_t v126;
  _BYTE *v127;
  _BYTE *v128;
  uint64_t v129;
  _BYTE *v130;
  _BYTE *v131;
  __n128 v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  void (*v141)(_BYTE *, _QWORD, uint64_t, int *, __n128);
  __n128 v142;
  unsigned int (*v144)(char *, uint64_t, uint64_t);
  void *v145;
  char *v146;
  _BYTE *__dst;
  _QWORD *__dsta;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v3 = a1;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(int *)(a3 + 28);
  v7 = (_BYTE *)(a1 + v6);
  v8 = (_BYTE *)(a2 + v6);
  v9 = (int *)type metadata accessor for AccessoryProductInfo(0);
  v10 = *((_QWORD *)v9 - 1);
  v11 = *(unsigned int (**)(_BYTE *, uint64_t, int *, __n128))(v10 + 48);
  swift_bridgeObjectRetain(v4);
  v12 = swift_bridgeObjectRetain(v5);
  if (v11(v8, 1, v9, v12))
  {
    v13 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v149 = v10;
    v150 = v3;
    *(_QWORD *)v7 = *(_QWORD *)v8;
    v7[8] = v8[8];
    v14 = v9[5];
    v15 = &v7[v14];
    v16 = &v8[v14];
    v17 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v7[v9[6]] = v8[v9[6]];
    v7[v9[7]] = v8[v9[7]];
    v18 = v9[8];
    v19 = &v7[v18];
    v20 = &v8[v18];
    v145 = (void *)v20[1];
    *v19 = *v20;
    v19[1] = v145;
    v7[v9[9]] = v8[v9[9]];
    v7[v9[10]] = v8[v9[10]];
    v7[v9[11]] = v8[v9[11]];
    v21 = v9[12];
    v22 = &v7[v21];
    v23 = &v8[v21];
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = v9[13];
    v26 = &v7[v25];
    v27 = &v8[v25];
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = v9[14];
    v30 = &v7[v29];
    v31 = &v8[v29];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    v32 = v9[15];
    v33 = &v7[v32];
    v34 = &v8[v32];
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    v36 = v9[16];
    __dst = &v7[v36];
    v37 = &v8[v36];
    v38 = type metadata accessor for URL(0);
    v39 = *(_QWORD *)(v38 - 8);
    v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
    swift_bridgeObjectRetain(v145);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v28);
    v41 = v35;
    v42 = v40;
    v43 = swift_bridgeObjectRetain(v41);
    if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t, __n128))v40)(v37, 1, v38, v43))
    {
      v44 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(__dst, v37, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v39 + 16))(__dst, v37, v38);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v39 + 56))(__dst, 0, 1, v38);
    }
    v45 = v39;
    v46 = v9[17];
    v47 = &v7[v46];
    v48 = &v8[v46];
    v151 = v45;
    v144 = v42;
    if (v42(&v8[v46], 1, v38))
    {
      v49 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v45 + 16))(v47, v48, v38);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v47, 0, 1, v38);
    }
    v50 = v9[18];
    v51 = &v7[v50];
    v52 = &v8[v50];
    v53 = v52[1];
    *v51 = *v52;
    v51[1] = v53;
    *(_QWORD *)&v7[v9[19]] = *(_QWORD *)&v8[v9[19]];
    v54 = v9[20];
    v55 = &v7[v54];
    v56 = &v8[v54];
    v57 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    v58 = (_QWORD *)*((_QWORD *)v57 - 1);
    v59 = (unsigned int (*)(_QWORD *, uint64_t, int *, __n128))v58[6];
    v60 = swift_bridgeObjectRetain(v53);
    if (v59(v56, 1, v57, v60))
    {
      v61 = sub_10001A9A8(&qword_1010FBA50);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      __dsta = v58;
      v62 = v56[1];
      *v55 = *v56;
      v55[1] = v62;
      v63 = v56[3];
      v55[2] = v56[2];
      v55[3] = v63;
      v64 = v56[5];
      v55[4] = v56[4];
      v55[5] = v64;
      *((_WORD *)v55 + 24) = *((_WORD *)v56 + 24);
      *((_BYTE *)v55 + 72) = *((_BYTE *)v56 + 72);
      v65 = v56[8];
      v55[7] = v56[7];
      v55[8] = v65;
      v66 = v57[10];
      v146 = (char *)v55 + v66;
      v67 = (char *)v56 + v66;
      swift_bridgeObjectRetain(v62);
      swift_bridgeObjectRetain(v63);
      v68 = swift_bridgeObjectRetain(v64);
      v69 = v144;
      if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v144)(v67, 1, v38, v68))
      {
        v70 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v146, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v151 + 16))(v146, v67, v38);
        v69 = v144;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v151 + 56))(v146, 0, 1, v38);
      }
      v71 = v57[11];
      v72 = (char *)v55 + v71;
      v73 = (char *)v56 + v71;
      if (v69((char *)v56 + v71, 1, v38))
      {
        v74 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v151 + 16))(v72, v73, v38);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v151 + 56))(v72, 0, 1, v38);
      }
      v75 = v57[12];
      v76 = (char *)v55 + v75;
      v77 = (char *)v56 + v75;
      *(_QWORD *)v76 = *(_QWORD *)v77;
      v76[8] = v77[8];
      v78 = v57[13];
      v79 = (_QWORD *)((char *)v55 + v78);
      v80 = (_QWORD *)((char *)v56 + v78);
      v81 = v80[1];
      *v79 = *v80;
      v79[1] = v81;
      v82 = v57[14];
      v83 = *(_QWORD *)((char *)v56 + v82);
      *(_QWORD *)((char *)v55 + v82) = v83;
      v84 = v57[15];
      v85 = (_QWORD *)((char *)v55 + v84);
      v86 = (_QWORD *)((char *)v56 + v84);
      v87 = v86[1];
      *v85 = *v86;
      v85[1] = v87;
      v88 = v57[16];
      v89 = *(_QWORD *)((char *)v56 + v88);
      *(_QWORD *)((char *)v55 + v88) = v89;
      v90 = v57[17];
      v91 = (char *)v55 + v90;
      v92 = (char *)v56 + v90;
      *(_OWORD *)v91 = *(_OWORD *)v92;
      v91[16] = v92[16];
      v93 = v57[18];
      v94 = (char *)v55 + v93;
      v95 = (char *)v56 + v93;
      *(_OWORD *)v94 = *(_OWORD *)v95;
      v94[16] = v95[16];
      v96 = (void (*)(_QWORD *, _QWORD, uint64_t, int *, __n128))__dsta[7];
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v87);
      v97 = swift_bridgeObjectRetain(v89);
      v96(v55, 0, 1, v57, v97);
    }
    *(_DWORD *)&v7[v9[21]] = *(_DWORD *)&v8[v9[21]];
    v98 = v9[22];
    v99 = *(_QWORD *)&v8[v98];
    *(_QWORD *)&v7[v98] = v99;
    v100 = v9[23];
    v101 = &v7[v100];
    v102 = &v8[v100];
    v103 = *(_QWORD *)&v8[v100 + 8];
    swift_bridgeObjectRetain(v99);
    if (v103 >> 60 == 15)
    {
      *(_OWORD *)v101 = *v102;
    }
    else
    {
      v104 = *(_QWORD *)v102;
      sub_10001BBBC(v104, v103);
      *(_QWORD *)v101 = v104;
      *((_QWORD *)v101 + 1) = v103;
    }
    v105 = v9[24];
    v106 = &v7[v105];
    v107 = &v8[v105];
    v108 = *((_QWORD *)v107 + 1);
    if (v108 >> 60 == 15)
    {
      *(_OWORD *)v106 = *(_OWORD *)v107;
    }
    else
    {
      v109 = *(_QWORD *)v107;
      sub_10001BBBC(*(_QWORD *)v107, *((_QWORD *)v107 + 1));
      *(_QWORD *)v106 = v109;
      *((_QWORD *)v106 + 1) = v108;
    }
    v110 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v151 + 16);
    v110(&v7[v9[25]], &v8[v9[25]], v38);
    v110(&v7[v9[26]], &v8[v9[26]], v38);
    v110(&v7[v9[27]], &v8[v9[27]], v38);
    v110(&v7[v9[28]], &v8[v9[28]], v38);
    v110(&v7[v9[29]], &v8[v9[29]], v38);
    v110(&v7[v9[30]], &v8[v9[30]], v38);
    v111 = v9[31];
    v112 = &v7[v111];
    v113 = &v8[v111];
    v114 = v113[1];
    *v112 = *v113;
    v112[1] = v114;
    v115 = v9[32];
    v116 = *(_QWORD *)&v8[v115];
    *(_QWORD *)&v7[v115] = v116;
    v117 = v9[33];
    v118 = &v7[v117];
    v119 = &v8[v117];
    v120 = v119[1];
    *v118 = *v119;
    v118[1] = v120;
    v121 = v9[34];
    v122 = *(_QWORD *)&v8[v121];
    *(_QWORD *)&v7[v121] = v122;
    v123 = v9[35];
    v124 = &v7[v123];
    v125 = &v8[v123];
    *(_OWORD *)v124 = *(_OWORD *)v125;
    v124[16] = v125[16];
    v126 = v9[36];
    v127 = &v7[v126];
    v128 = &v8[v126];
    *(_OWORD *)v127 = *(_OWORD *)v128;
    v127[16] = v128[16];
    v129 = v9[37];
    v130 = &v7[v129];
    v131 = &v8[v129];
    swift_bridgeObjectRetain(v114);
    swift_bridgeObjectRetain(v116);
    swift_bridgeObjectRetain(v120);
    v132 = swift_bridgeObjectRetain(v122);
    ((void (*)(_BYTE *, _BYTE *, uint64_t, __n128))v110)(v130, v131, v38, v132);
    v110(&v7[v9[38]], &v8[v9[38]], v38);
    v110(&v7[v9[39]], &v8[v9[39]], v38);
    v110(&v7[v9[40]], &v8[v9[40]], v38);
    v110(&v7[v9[41]], &v8[v9[41]], v38);
    v110(&v7[v9[42]], &v8[v9[42]], v38);
    v7[v9[43]] = v8[v9[43]];
    v7[v9[44]] = v8[v9[44]];
    v7[v9[45]] = v8[v9[45]];
    v133 = v9[46];
    v134 = &v7[v133];
    v135 = &v8[v133];
    v136 = v135[1];
    *v134 = *v135;
    v134[1] = v136;
    v137 = v9[47];
    v138 = &v7[v137];
    v139 = &v8[v137];
    v140 = v139[1];
    *v138 = *v139;
    v138[1] = v140;
    v141 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *, __n128))(v149 + 56);
    swift_bridgeObjectRetain(v136);
    v142 = swift_bridgeObjectRetain(v140);
    v141(v7, 0, 1, v9, v142);
    return v150;
  }
  return v3;
}

_QWORD *sub_10060FC48(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int *v11;
  _QWORD *v12;
  uint64_t (*v13)(_BYTE *, uint64_t, int *);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(_BYTE *, uint64_t, uint64_t);
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  int *v95;
  _QWORD *v96;
  unsigned int (*v97)(_QWORD *, uint64_t, int *, __n128);
  __n128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  __n128 v106;
  unsigned int (*v107)(char *, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  _BYTE *v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  int *v123;
  uint64_t (*v124)(uint64_t, uint64_t, int *);
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  __n128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  __int128 v159;
  uint64_t v160;
  char *v161;
  char *v162;
  __int128 v163;
  void (*v164)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _BYTE *v169;
  _OWORD *v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _BYTE *v174;
  _BYTE *v175;
  unint64_t v176;
  uint64_t v177;
  void (*v178)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _BYTE *v192;
  _BYTE *v193;
  char v194;
  uint64_t v195;
  _BYTE *v196;
  _BYTE *v197;
  char v198;
  uint64_t v199;
  _BYTE *v200;
  _BYTE *v201;
  __n128 v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  _QWORD *v209;
  uint64_t v210;
  void (*v211)(_BYTE *, _QWORD, uint64_t, int *, __n128);
  __n128 v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _BYTE *v218;
  int v219;
  int v220;
  size_t v221;
  void *v222;
  uint64_t v223;
  void *v224;
  _BYTE *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _BYTE *v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _BYTE *v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  _BYTE *v248;
  __int128 v249;
  void (*v250)(uint64_t, _QWORD, uint64_t, int *, __n128);
  __n128 v251;
  uint64_t v252;
  _BYTE *v253;
  int v254;
  int v255;
  size_t v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  _BYTE *v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  _QWORD *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  _BYTE *v276;
  __int128 v277;
  uint64_t v278;
  uint64_t v279;
  _BYTE *v280;
  __int128 v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t *v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t *v294;
  uint64_t *v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  void (*v301)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v302;
  _QWORD *v303;
  _QWORD *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  _QWORD *v309;
  _QWORD *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  _BYTE *v315;
  _BYTE *v316;
  __int128 v317;
  uint64_t v318;
  _BYTE *v319;
  _BYTE *v320;
  __int128 v321;
  uint64_t v322;
  _QWORD *v323;
  _QWORD *v324;
  uint64_t v325;
  uint64_t v326;
  _QWORD *v327;
  _QWORD *v328;
  uint64_t v329;
  unsigned int (*v331)(char *, uint64_t, uint64_t);
  _BYTE *__dst;
  _QWORD *__dsta;
  unsigned int (*__dstb)(_BYTE *, uint64_t, uint64_t, __n128);
  void *v335;
  char *v336;
  void *v337;
  void *v338;
  void *v339;
  void *v340;
  _QWORD *__src;
  _QWORD *__srca;
  uint64_t v343;
  uint64_t v344;
  _QWORD *v345;
  _QWORD *v346;

  v5 = a1;
  *a1 = *a2;
  v6 = a2[1];
  v5[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v5[2] = a2[2];
  v5[3] = a2[3];
  v7 = a2[4];
  v5[4] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 28);
  v9 = (char *)v5 + v8;
  v10 = (char *)a2 + v8;
  v11 = (int *)type metadata accessor for AccessoryProductInfo(0);
  v12 = (_QWORD *)*((_QWORD *)v11 - 1);
  v13 = (uint64_t (*)(_BYTE *, uint64_t, int *))v12[6];
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      sub_1000126B0((uint64_t)v9, type metadata accessor for AccessoryProductInfo);
      goto LABEL_7;
    }
    v50 = *(_QWORD *)v10;
    v9[8] = v10[8];
    *(_QWORD *)v9 = v50;
    v51 = v11[5];
    v52 = &v9[v51];
    v53 = &v10[v51];
    v54 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v54 - 8) + 24))(v52, v53, v54);
    v9[v11[6]] = v10[v11[6]];
    v9[v11[7]] = v10[v11[7]];
    v55 = v11[8];
    v56 = &v9[v55];
    v57 = &v10[v55];
    *v56 = *v57;
    v58 = v57[1];
    v56[1] = v58;
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRelease();
    v9[v11[9]] = v10[v11[9]];
    v9[v11[10]] = v10[v11[10]];
    v9[v11[11]] = v10[v11[11]];
    v59 = v11[12];
    v60 = &v9[v59];
    v61 = &v10[v59];
    *v60 = *v61;
    v62 = v61[1];
    v60[1] = v62;
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRelease();
    v63 = v11[13];
    v64 = &v9[v63];
    v65 = &v10[v63];
    *v64 = *v65;
    v66 = v65[1];
    v64[1] = v66;
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRelease();
    v67 = v11[14];
    v68 = &v9[v67];
    v69 = &v10[v67];
    v70 = *(_QWORD *)v69;
    v68[8] = v69[8];
    *(_QWORD *)v68 = v70;
    v71 = v11[15];
    v72 = &v9[v71];
    v73 = &v10[v71];
    *v72 = *v73;
    v74 = v73[1];
    v72[1] = v74;
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRelease();
    v75 = v11[16];
    v76 = &v9[v75];
    v77 = &v10[v75];
    v78 = type metadata accessor for URL(0);
    v79 = *(_QWORD *)(v78 - 8);
    v80 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v79 + 48);
    v81 = v80(v76, 1, v78);
    v82 = v80(v77, 1, v78);
    if (v81)
    {
      if (!v82)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v79 + 16))(v76, v77, v78);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
        goto LABEL_22;
      }
    }
    else
    {
      if (!v82)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v79 + 24))(v76, v77, v78);
LABEL_22:
        v110 = v11[17];
        v111 = &v9[v110];
        v112 = &v10[v110];
        v113 = v80(&v9[v110], 1, v78);
        v114 = v80(v112, 1, v78);
        v344 = v79;
        v346 = v5;
        if (v113)
        {
          if (!v114)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v79 + 16))(v111, v112, v78);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v111, 0, 1, v78);
            goto LABEL_28;
          }
        }
        else
        {
          if (!v114)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v79 + 24))(v111, v112, v78);
LABEL_28:
            v116 = v11[18];
            v117 = &v9[v116];
            v118 = &v10[v116];
            *v117 = *v118;
            v119 = v118[1];
            v117[1] = v119;
            swift_bridgeObjectRetain(v119);
            swift_bridgeObjectRelease();
            *(_QWORD *)&v9[v11[19]] = *(_QWORD *)&v10[v11[19]];
            v120 = v11[20];
            v121 = (uint64_t)&v9[v120];
            v122 = &v10[v120];
            v123 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
            __srca = (_QWORD *)*((_QWORD *)v123 - 1);
            v124 = (uint64_t (*)(uint64_t, uint64_t, int *))__srca[6];
            v125 = v124(v121, 1, v123);
            v126 = v124((uint64_t)v122, 1, v123);
            if (v125)
            {
              if (!v126)
              {
                *(_QWORD *)v121 = *(_QWORD *)v122;
                v127 = *((_QWORD *)v122 + 1);
                *(_QWORD *)(v121 + 8) = v127;
                *(_QWORD *)(v121 + 16) = *((_QWORD *)v122 + 2);
                __dstb = (unsigned int (*)(_BYTE *, uint64_t, uint64_t, __n128))v80;
                v128 = *((_QWORD *)v122 + 3);
                *(_QWORD *)(v121 + 24) = v128;
                *(_QWORD *)(v121 + 32) = *((_QWORD *)v122 + 4);
                v129 = *((_QWORD *)v122 + 5);
                *(_QWORD *)(v121 + 40) = v129;
                *(_WORD *)(v121 + 48) = *((_WORD *)v122 + 24);
                *(_QWORD *)(v121 + 56) = *((_QWORD *)v122 + 7);
                v130 = *((_QWORD *)v122 + 8);
                *(_BYTE *)(v121 + 72) = v122[72];
                *(_QWORD *)(v121 + 64) = v130;
                v131 = v123[10];
                v337 = (void *)(v121 + v131);
                v132 = &v122[v131];
                swift_bridgeObjectRetain(v127);
                swift_bridgeObjectRetain(v128);
                v133 = swift_bridgeObjectRetain(v129);
                if (__dstb(v132, 1, v78, v133))
                {
                  v134 = sub_10001A9A8(&qword_1010FBA40);
                  memcpy(v337, v132, *(_QWORD *)(*(_QWORD *)(v134 - 8) + 64));
                }
                else
                {
                  (*(void (**)(void *, _BYTE *, uint64_t))(v344 + 16))(v337, v132, v78);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v344 + 56))(v337, 0, 1, v78);
                }
                v223 = v123[11];
                v224 = (void *)(v121 + v223);
                v225 = &v122[v223];
                if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))__dstb)(&v122[v223], 1, v78))
                {
                  v226 = sub_10001A9A8(&qword_1010FBA40);
                  memcpy(v224, v225, *(_QWORD *)(*(_QWORD *)(v226 - 8) + 64));
                }
                else
                {
                  (*(void (**)(void *, _BYTE *, uint64_t))(v344 + 16))(v224, v225, v78);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v344 + 56))(v224, 0, 1, v78);
                }
                v227 = v123[12];
                v228 = v121 + v227;
                v229 = &v122[v227];
                v230 = *(_QWORD *)v229;
                *(_BYTE *)(v228 + 8) = v229[8];
                *(_QWORD *)v228 = v230;
                v231 = v123[13];
                v232 = (_QWORD *)(v121 + v231);
                v233 = &v122[v231];
                *v232 = *v233;
                v234 = v233[1];
                v232[1] = v234;
                v235 = v123[14];
                v339 = *(void **)&v122[v235];
                *(_QWORD *)(v121 + v235) = v339;
                v236 = v123[15];
                v237 = (_QWORD *)(v121 + v236);
                v238 = &v122[v236];
                *v237 = *v238;
                v239 = v238[1];
                v237[1] = v239;
                v240 = v123[16];
                v241 = *(_QWORD *)&v122[v240];
                *(_QWORD *)(v121 + v240) = v241;
                v242 = v123[17];
                v243 = v121 + v242;
                v244 = &v122[v242];
                v245 = *(_OWORD *)v244;
                *(_BYTE *)(v243 + 16) = v244[16];
                *(_OWORD *)v243 = v245;
                v246 = v123[18];
                v247 = v121 + v246;
                v248 = &v122[v246];
                v249 = *(_OWORD *)v248;
                *(_BYTE *)(v247 + 16) = v248[16];
                *(_OWORD *)v247 = v249;
                v250 = (void (*)(uint64_t, _QWORD, uint64_t, int *, __n128))__srca[7];
                swift_bridgeObjectRetain(v234);
                swift_bridgeObjectRetain(v339);
                swift_bridgeObjectRetain(v239);
                v251 = swift_bridgeObjectRetain(v241);
                v250(v121, 0, 1, v123, v251);
LABEL_71:
                v5 = v346;
                *(_DWORD *)&v9[v11[21]] = *(_DWORD *)&v10[v11[21]];
                v282 = v11[22];
                v283 = *(_QWORD *)&v10[v282];
                *(_QWORD *)&v9[v282] = v283;
                swift_bridgeObjectRetain(v283);
                swift_bridgeObjectRelease();
                v284 = v11[23];
                v285 = (uint64_t *)&v9[v284];
                v286 = (uint64_t *)&v10[v284];
                v287 = *(_QWORD *)&v10[v284 + 8];
                if (*(_QWORD *)&v9[v284 + 8] >> 60 == 15)
                {
                  v288 = v344;
                  if (v287 >> 60 != 15)
                  {
                    v289 = *v286;
                    sub_10001BBBC(*v286, v287);
                    *v285 = v289;
                    v285[1] = v287;
                    goto LABEL_78;
                  }
                }
                else
                {
                  v288 = v344;
                  if (v287 >> 60 != 15)
                  {
                    v290 = *v286;
                    sub_10001BBBC(*v286, v287);
                    v291 = *v285;
                    v292 = v285[1];
                    *v285 = v290;
                    v285[1] = v287;
                    sub_10001BC14(v291, v292);
LABEL_78:
                    v293 = v11[24];
                    v294 = (uint64_t *)&v9[v293];
                    v295 = (uint64_t *)&v10[v293];
                    v296 = *(_QWORD *)&v10[v293 + 8];
                    if (*(_QWORD *)&v9[v293 + 8] >> 60 == 15)
                    {
                      if (v296 >> 60 != 15)
                      {
                        v297 = *v295;
                        sub_10001BBBC(*v295, v296);
                        *v294 = v297;
                        v294[1] = v296;
LABEL_85:
                        v301 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v288 + 24);
                        v301(&v9[v11[25]], &v10[v11[25]], v78);
                        v301(&v9[v11[26]], &v10[v11[26]], v78);
                        v301(&v9[v11[27]], &v10[v11[27]], v78);
                        v301(&v9[v11[28]], &v10[v11[28]], v78);
                        v301(&v9[v11[29]], &v10[v11[29]], v78);
                        v301(&v9[v11[30]], &v10[v11[30]], v78);
                        v302 = v11[31];
                        v303 = &v9[v302];
                        v304 = &v10[v302];
                        *v303 = *v304;
                        v305 = v304[1];
                        v303[1] = v305;
                        swift_bridgeObjectRetain(v305);
                        swift_bridgeObjectRelease();
                        v306 = v11[32];
                        v307 = *(_QWORD *)&v10[v306];
                        *(_QWORD *)&v9[v306] = v307;
                        swift_bridgeObjectRetain(v307);
                        swift_bridgeObjectRelease();
                        v308 = v11[33];
                        v309 = &v9[v308];
                        v310 = &v10[v308];
                        *v309 = *v310;
                        v311 = v310[1];
                        v309[1] = v311;
                        swift_bridgeObjectRetain(v311);
                        swift_bridgeObjectRelease();
                        v312 = v11[34];
                        v313 = *(_QWORD *)&v10[v312];
                        *(_QWORD *)&v9[v312] = v313;
                        swift_bridgeObjectRetain(v313);
                        swift_bridgeObjectRelease();
                        v314 = v11[35];
                        v315 = &v9[v314];
                        v316 = &v10[v314];
                        v317 = *(_OWORD *)v316;
                        v315[16] = v316[16];
                        *(_OWORD *)v315 = v317;
                        v318 = v11[36];
                        v319 = &v9[v318];
                        v320 = &v10[v318];
                        v321 = *(_OWORD *)v320;
                        v319[16] = v320[16];
                        *(_OWORD *)v319 = v321;
                        v301(&v9[v11[37]], &v10[v11[37]], v78);
                        v301(&v9[v11[38]], &v10[v11[38]], v78);
                        v301(&v9[v11[39]], &v10[v11[39]], v78);
                        v301(&v9[v11[40]], &v10[v11[40]], v78);
                        v301(&v9[v11[41]], &v10[v11[41]], v78);
                        v301(&v9[v11[42]], &v10[v11[42]], v78);
                        v9[v11[43]] = v10[v11[43]];
                        v9[v11[44]] = v10[v11[44]];
                        v9[v11[45]] = v10[v11[45]];
                        v322 = v11[46];
                        v323 = &v9[v322];
                        v324 = &v10[v322];
                        *v323 = *v324;
                        v325 = v324[1];
                        v323[1] = v325;
                        swift_bridgeObjectRetain(v325);
                        swift_bridgeObjectRelease();
                        v326 = v11[47];
                        v327 = &v9[v326];
                        v328 = &v10[v326];
                        *v327 = *v328;
                        v329 = v328[1];
                        v327[1] = v329;
                        swift_bridgeObjectRetain(v329);
                        swift_bridgeObjectRelease();
                        return v5;
                      }
                    }
                    else
                    {
                      if (v296 >> 60 != 15)
                      {
                        v298 = *v295;
                        sub_10001BBBC(*v295, v296);
                        v299 = *v294;
                        v300 = v294[1];
                        *v294 = v298;
                        v294[1] = v296;
                        sub_10001BC14(v299, v300);
                        goto LABEL_85;
                      }
                      sub_1000DC964((uint64_t)v294);
                    }
                    *(_OWORD *)v294 = *(_OWORD *)v295;
                    goto LABEL_85;
                  }
                  sub_1000DC964((uint64_t)v285);
                }
                *(_OWORD *)v285 = *(_OWORD *)v286;
                goto LABEL_78;
              }
LABEL_34:
              v135 = sub_10001A9A8(&qword_1010FBA50);
              memcpy((void *)v121, v122, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
              goto LABEL_71;
            }
            if (v126)
            {
              sub_1000126B0(v121, type metadata accessor for AccessoryInfoResponseContent.Configuration);
              goto LABEL_34;
            }
            *(_QWORD *)v121 = *(_QWORD *)v122;
            v213 = *((_QWORD *)v122 + 1);
            *(_QWORD *)(v121 + 8) = v213;
            swift_bridgeObjectRetain(v213);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v121 + 16) = *((_QWORD *)v122 + 2);
            v214 = *((_QWORD *)v122 + 3);
            *(_QWORD *)(v121 + 24) = v214;
            swift_bridgeObjectRetain(v214);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v121 + 32) = *((_QWORD *)v122 + 4);
            v215 = *((_QWORD *)v122 + 5);
            *(_QWORD *)(v121 + 40) = v215;
            swift_bridgeObjectRetain(v215);
            swift_bridgeObjectRelease();
            *(_WORD *)(v121 + 48) = *((_WORD *)v122 + 24);
            *(_QWORD *)(v121 + 56) = *((_QWORD *)v122 + 7);
            v216 = *((_QWORD *)v122 + 8);
            *(_BYTE *)(v121 + 72) = v122[72];
            *(_QWORD *)(v121 + 64) = v216;
            v217 = v123[10];
            v218 = &v122[v217];
            v338 = (void *)(v121 + v217);
            v219 = ((uint64_t (*)(void))v80)();
            v220 = v80(v218, 1, v78);
            if (v219)
            {
              if (v220)
              {
                v221 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
                v222 = v338;
LABEL_59:
                memcpy(v222, v218, v221);
                goto LABEL_62;
              }
              (*(void (**)(void *, _BYTE *, uint64_t))(v344 + 16))(v338, v218, v78);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v344 + 56))(v338, 0, 1, v78);
            }
            else
            {
              if (v220)
              {
                (*(void (**)(void *, uint64_t))(v344 + 8))(v338, v78);
                v221 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
                v222 = v338;
                goto LABEL_59;
              }
              (*(void (**)(void *, _BYTE *, uint64_t))(v344 + 24))(v338, v218, v78);
            }
LABEL_62:
            v252 = v123[11];
            v253 = &v122[v252];
            v340 = (void *)(v121 + v252);
            v254 = ((uint64_t (*)(void))v80)();
            v255 = v80(v253, 1, v78);
            if (v254)
            {
              if (!v255)
              {
                (*(void (**)(void *, _BYTE *, uint64_t))(v344 + 16))(v340, v253, v78);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v344 + 56))(v340, 0, 1, v78);
                goto LABEL_70;
              }
              v256 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
              v257 = v340;
            }
            else
            {
              if (!v255)
              {
                (*(void (**)(void *, _BYTE *, uint64_t))(v344 + 24))(v340, v253, v78);
                goto LABEL_70;
              }
              (*(void (**)(void *, uint64_t))(v344 + 8))(v340, v78);
              v256 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
              v257 = v340;
            }
            memcpy(v257, v253, v256);
LABEL_70:
            v258 = v123[12];
            v259 = v121 + v258;
            v260 = &v122[v258];
            v261 = *(_QWORD *)v260;
            *(_BYTE *)(v259 + 8) = v260[8];
            *(_QWORD *)v259 = v261;
            v262 = v123[13];
            v263 = (_QWORD *)(v121 + v262);
            v264 = &v122[v262];
            *v263 = *v264;
            v265 = v264[1];
            v263[1] = v265;
            swift_bridgeObjectRetain(v265);
            swift_bridgeObjectRelease();
            v266 = v123[14];
            v267 = *(_QWORD *)&v122[v266];
            *(_QWORD *)(v121 + v266) = v267;
            swift_bridgeObjectRetain(v267);
            swift_bridgeObjectRelease();
            v268 = v123[15];
            v269 = (_QWORD *)(v121 + v268);
            v270 = &v122[v268];
            *v269 = *v270;
            v271 = v270[1];
            v269[1] = v271;
            swift_bridgeObjectRetain(v271);
            swift_bridgeObjectRelease();
            v272 = v123[16];
            v273 = *(_QWORD *)&v122[v272];
            *(_QWORD *)(v121 + v272) = v273;
            swift_bridgeObjectRetain(v273);
            swift_bridgeObjectRelease();
            v274 = v123[17];
            v275 = v121 + v274;
            v276 = &v122[v274];
            v277 = *(_OWORD *)v276;
            *(_BYTE *)(v275 + 16) = v276[16];
            *(_OWORD *)v275 = v277;
            v278 = v123[18];
            v279 = v121 + v278;
            v280 = &v122[v278];
            v281 = *(_OWORD *)v280;
            *(_BYTE *)(v279 + 16) = v280[16];
            *(_OWORD *)v279 = v281;
            goto LABEL_71;
          }
          (*(void (**)(_BYTE *, uint64_t))(v79 + 8))(v111, v78);
        }
        v115 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
        goto LABEL_28;
      }
      (*(void (**)(_BYTE *, uint64_t))(v79 + 8))(v76, v78);
    }
    v109 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    goto LABEL_22;
  }
  if (v15)
  {
LABEL_7:
    v49 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    return v5;
  }
  __src = v12;
  v345 = v5;
  v16 = *(_QWORD *)v10;
  v9[8] = v10[8];
  *(_QWORD *)v9 = v16;
  v17 = v11[5];
  v18 = &v9[v17];
  v19 = &v10[v17];
  v20 = type metadata accessor for ServerStatusCode(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v9[v11[6]] = v10[v11[6]];
  v9[v11[7]] = v10[v11[7]];
  v21 = v11[8];
  v22 = &v9[v21];
  v23 = &v10[v21];
  *v22 = *v23;
  v335 = (void *)v23[1];
  v22[1] = v335;
  v9[v11[9]] = v10[v11[9]];
  v9[v11[10]] = v10[v11[10]];
  v9[v11[11]] = v10[v11[11]];
  v24 = v11[12];
  v25 = &v9[v24];
  v26 = &v10[v24];
  *v25 = *v26;
  v27 = v26[1];
  v25[1] = v27;
  v28 = v11[13];
  v29 = &v9[v28];
  v30 = &v10[v28];
  *v29 = *v30;
  v31 = v30[1];
  v29[1] = v31;
  v32 = v11[14];
  v33 = &v9[v32];
  v34 = &v10[v32];
  v35 = v34[8];
  *(_QWORD *)v33 = *(_QWORD *)v34;
  v33[8] = v35;
  v36 = v11[15];
  v37 = &v9[v36];
  v38 = &v10[v36];
  *v37 = *v38;
  v39 = v38[1];
  v37[1] = v39;
  v40 = v11[16];
  __dst = &v9[v40];
  v41 = &v10[v40];
  v42 = type metadata accessor for URL(0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
  swift_bridgeObjectRetain(v335);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v31);
  v45 = v39;
  v46 = v44;
  v47 = swift_bridgeObjectRetain(v45);
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t, __n128))v44)(v41, 1, v42, v47))
  {
    v48 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(__dst, v41, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v43 + 16))(__dst, v41, v42);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v43 + 56))(__dst, 0, 1, v42);
  }
  v83 = v43;
  v84 = v11[17];
  v85 = &v9[v84];
  v86 = &v10[v84];
  v343 = v83;
  v331 = v46;
  if (v46(&v10[v84], 1, v42))
  {
    v87 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v83 + 16))(v85, v86, v42);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v85, 0, 1, v42);
  }
  v88 = v11[18];
  v89 = &v9[v88];
  v90 = &v10[v88];
  *v89 = *v90;
  v91 = v90[1];
  v89[1] = v91;
  *(_QWORD *)&v9[v11[19]] = *(_QWORD *)&v10[v11[19]];
  v92 = v11[20];
  v93 = &v9[v92];
  v94 = &v10[v92];
  v95 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v96 = (_QWORD *)*((_QWORD *)v95 - 1);
  v97 = (unsigned int (*)(_QWORD *, uint64_t, int *, __n128))v96[6];
  v98 = swift_bridgeObjectRetain(v91);
  if (v97(v94, 1, v95, v98))
  {
    v99 = sub_10001A9A8(&qword_1010FBA50);
    memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
  }
  else
  {
    __dsta = v96;
    *v93 = *v94;
    v100 = v94[1];
    v93[1] = v100;
    v93[2] = v94[2];
    v101 = v94[3];
    v93[3] = v101;
    v93[4] = v94[4];
    v102 = v94[5];
    v93[5] = v102;
    *((_WORD *)v93 + 24) = *((_WORD *)v94 + 24);
    v93[7] = v94[7];
    v103 = v94[8];
    *((_BYTE *)v93 + 72) = *((_BYTE *)v94 + 72);
    v93[8] = v103;
    v104 = v95[10];
    v336 = (char *)v93 + v104;
    v105 = (char *)v94 + v104;
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRetain(v101);
    v106 = swift_bridgeObjectRetain(v102);
    v107 = v331;
    if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v331)(v105, 1, v42, v106))
    {
      v108 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v336, v105, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v343 + 16))(v336, v105, v42);
      v107 = v331;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v343 + 56))(v336, 0, 1, v42);
    }
    v136 = v95[11];
    v137 = (char *)v93 + v136;
    v138 = (char *)v94 + v136;
    if (v107((char *)v94 + v136, 1, v42))
    {
      v139 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v343 + 16))(v137, v138, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v343 + 56))(v137, 0, 1, v42);
    }
    v140 = v95[12];
    v141 = (char *)v93 + v140;
    v142 = (char *)v94 + v140;
    v143 = *(_QWORD *)v142;
    v141[8] = v142[8];
    *(_QWORD *)v141 = v143;
    v144 = v95[13];
    v145 = (_QWORD *)((char *)v93 + v144);
    v146 = (_QWORD *)((char *)v94 + v144);
    *v145 = *v146;
    v147 = v146[1];
    v145[1] = v147;
    v148 = v95[14];
    v149 = *(_QWORD *)((char *)v94 + v148);
    *(_QWORD *)((char *)v93 + v148) = v149;
    v150 = v95[15];
    v151 = (_QWORD *)((char *)v93 + v150);
    v152 = (_QWORD *)((char *)v94 + v150);
    *v151 = *v152;
    v153 = v152[1];
    v151[1] = v153;
    v154 = v95[16];
    v155 = *(_QWORD *)((char *)v94 + v154);
    *(_QWORD *)((char *)v93 + v154) = v155;
    v156 = v95[17];
    v157 = (char *)v93 + v156;
    v158 = (char *)v94 + v156;
    v159 = *(_OWORD *)v158;
    v157[16] = v158[16];
    *(_OWORD *)v157 = v159;
    v160 = v95[18];
    v161 = (char *)v93 + v160;
    v162 = (char *)v94 + v160;
    v163 = *(_OWORD *)v162;
    v161[16] = v162[16];
    *(_OWORD *)v161 = v163;
    v164 = (void (*)(_QWORD *, _QWORD, uint64_t, int *, __n128))__dsta[7];
    swift_bridgeObjectRetain(v147);
    swift_bridgeObjectRetain(v149);
    swift_bridgeObjectRetain(v153);
    v165 = swift_bridgeObjectRetain(v155);
    v164(v93, 0, 1, v95, v165);
  }
  *(_DWORD *)&v9[v11[21]] = *(_DWORD *)&v10[v11[21]];
  v166 = v11[22];
  v167 = *(_QWORD *)&v10[v166];
  *(_QWORD *)&v9[v166] = v167;
  v168 = v11[23];
  v169 = &v9[v168];
  v170 = &v10[v168];
  v171 = *(_QWORD *)&v10[v168 + 8];
  swift_bridgeObjectRetain(v167);
  if (v171 >> 60 == 15)
  {
    *(_OWORD *)v169 = *v170;
  }
  else
  {
    v172 = *(_QWORD *)v170;
    sub_10001BBBC(v172, v171);
    *(_QWORD *)v169 = v172;
    *((_QWORD *)v169 + 1) = v171;
  }
  v173 = v11[24];
  v174 = &v9[v173];
  v175 = &v10[v173];
  v176 = *((_QWORD *)v175 + 1);
  if (v176 >> 60 == 15)
  {
    *(_OWORD *)v174 = *(_OWORD *)v175;
  }
  else
  {
    v177 = *(_QWORD *)v175;
    sub_10001BBBC(*(_QWORD *)v175, *((_QWORD *)v175 + 1));
    *(_QWORD *)v174 = v177;
    *((_QWORD *)v174 + 1) = v176;
  }
  v178 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v343 + 16);
  v178(&v9[v11[25]], &v10[v11[25]], v42);
  v178(&v9[v11[26]], &v10[v11[26]], v42);
  v178(&v9[v11[27]], &v10[v11[27]], v42);
  v178(&v9[v11[28]], &v10[v11[28]], v42);
  v178(&v9[v11[29]], &v10[v11[29]], v42);
  v178(&v9[v11[30]], &v10[v11[30]], v42);
  v179 = v11[31];
  v180 = &v9[v179];
  v181 = &v10[v179];
  *v180 = *v181;
  v182 = v181[1];
  v180[1] = v182;
  v183 = v11[32];
  v184 = *(_QWORD *)&v10[v183];
  *(_QWORD *)&v9[v183] = v184;
  v185 = v11[33];
  v186 = &v9[v185];
  v187 = &v10[v185];
  *v186 = *v187;
  v188 = v187[1];
  v186[1] = v188;
  v189 = v11[34];
  v190 = *(_QWORD *)&v10[v189];
  *(_QWORD *)&v9[v189] = v190;
  v191 = v11[35];
  v192 = &v9[v191];
  v193 = &v10[v191];
  v194 = v193[16];
  *(_OWORD *)v192 = *(_OWORD *)v193;
  v192[16] = v194;
  v195 = v11[36];
  v196 = &v9[v195];
  v197 = &v10[v195];
  v198 = v197[16];
  *(_OWORD *)v196 = *(_OWORD *)v197;
  v196[16] = v198;
  v199 = v11[37];
  v200 = &v9[v199];
  v201 = &v10[v199];
  swift_bridgeObjectRetain(v182);
  swift_bridgeObjectRetain(v184);
  swift_bridgeObjectRetain(v188);
  v202 = swift_bridgeObjectRetain(v190);
  ((void (*)(_BYTE *, _BYTE *, uint64_t, __n128))v178)(v200, v201, v42, v202);
  v178(&v9[v11[38]], &v10[v11[38]], v42);
  v178(&v9[v11[39]], &v10[v11[39]], v42);
  v178(&v9[v11[40]], &v10[v11[40]], v42);
  v178(&v9[v11[41]], &v10[v11[41]], v42);
  v178(&v9[v11[42]], &v10[v11[42]], v42);
  v9[v11[43]] = v10[v11[43]];
  v9[v11[44]] = v10[v11[44]];
  v9[v11[45]] = v10[v11[45]];
  v203 = v11[46];
  v204 = &v9[v203];
  v205 = &v10[v203];
  *v204 = *v205;
  v206 = v205[1];
  v204[1] = v206;
  v207 = v11[47];
  v208 = &v9[v207];
  v209 = &v10[v207];
  *v208 = *v209;
  v210 = v209[1];
  v208[1] = v210;
  v211 = (void (*)(_BYTE *, _QWORD, uint64_t, int *, __n128))__src[7];
  swift_bridgeObjectRetain(v206);
  v212 = swift_bridgeObjectRetain(v210);
  v211(v9, 0, 1, v11, v212);
  return v345;
}

uint64_t sub_10061117C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(_BYTE *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void (*v51)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v59;
  char *__dst;
  char *__dsta;
  uint64_t v62;
  uint64_t v63;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 28);
  v5 = (_BYTE *)(a1 + v4);
  v6 = (_BYTE *)(a2 + v4);
  v7 = (int *)type metadata accessor for AccessoryProductInfo(0);
  v8 = *((_QWORD *)v7 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    v9 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v62 = v8;
    *(_QWORD *)v5 = *(_QWORD *)v6;
    v5[8] = v6[8];
    v10 = v7[5];
    v11 = &v5[v10];
    v12 = &v6[v10];
    v13 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    v5[v7[6]] = v6[v7[6]];
    v5[v7[7]] = v6[v7[7]];
    *(_OWORD *)&v5[v7[8]] = *(_OWORD *)&v6[v7[8]];
    v5[v7[9]] = v6[v7[9]];
    v5[v7[10]] = v6[v7[10]];
    v5[v7[11]] = v6[v7[11]];
    *(_OWORD *)&v5[v7[12]] = *(_OWORD *)&v6[v7[12]];
    *(_OWORD *)&v5[v7[13]] = *(_OWORD *)&v6[v7[13]];
    v14 = v7[14];
    v15 = &v5[v14];
    v16 = &v6[v14];
    v15[8] = v16[8];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *(_OWORD *)&v5[v7[15]] = *(_OWORD *)&v6[v7[15]];
    v17 = v7[16];
    v18 = &v5[v17];
    v19 = &v6[v17];
    v20 = type metadata accessor for URL(0);
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48);
    if (v22(v19, 1, v20))
    {
      v23 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v21 + 32))(v18, v19, v20);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v24 = v7[17];
    v25 = &v5[v24];
    v26 = &v6[v24];
    v63 = v21;
    if (v22(&v6[v24], 1, v20))
    {
      v27 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v21 + 32))(v25, v26, v20);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v25, 0, 1, v20);
    }
    *(_OWORD *)&v5[v7[18]] = *(_OWORD *)&v6[v7[18]];
    *(_QWORD *)&v5[v7[19]] = *(_QWORD *)&v6[v7[19]];
    v28 = v7[20];
    v29 = &v5[v28];
    v30 = &v6[v28];
    v31 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    v32 = *((_QWORD *)v31 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v32 + 48))(v30, 1, v31))
    {
      v33 = sub_10001A9A8(&qword_1010FBA50);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v34 = v30[1];
      *v29 = *v30;
      v29[1] = v34;
      v29[2] = v30[2];
      *((_WORD *)v29 + 24) = *((_WORD *)v30 + 24);
      v35 = *((_QWORD *)v30 + 8);
      *((_QWORD *)v29 + 7) = *((_QWORD *)v30 + 7);
      *((_QWORD *)v29 + 8) = v35;
      *((_BYTE *)v29 + 72) = *((_BYTE *)v30 + 72);
      v36 = v31[10];
      v59 = v32;
      __dst = (char *)v29 + v36;
      v37 = (char *)v30 + v36;
      if (v22((_BYTE *)v30 + v36, 1, v20))
      {
        v38 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(__dst, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v63 + 32))(__dst, v37, v20);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(__dst, 0, 1, v20);
      }
      v39 = v31[11];
      __dsta = (char *)v29 + v39;
      v40 = (char *)v30 + v39;
      if (v22((_BYTE *)v30 + v39, 1, v20))
      {
        v41 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(__dsta, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v63 + 32))(__dsta, v40, v20);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(__dsta, 0, 1, v20);
      }
      v42 = v31[12];
      v43 = (char *)v29 + v42;
      v44 = (char *)v30 + v42;
      *(_QWORD *)v43 = *(_QWORD *)v44;
      v43[8] = v44[8];
      *(_OWORD *)((char *)v29 + v31[13]) = *(_OWORD *)((char *)v30 + v31[13]);
      *(_QWORD *)((char *)v29 + v31[14]) = *(_QWORD *)((char *)v30 + v31[14]);
      *(_OWORD *)((char *)v29 + v31[15]) = *(_OWORD *)((char *)v30 + v31[15]);
      *(_QWORD *)((char *)v29 + v31[16]) = *(_QWORD *)((char *)v30 + v31[16]);
      v45 = v31[17];
      v46 = (char *)v29 + v45;
      v47 = (char *)v30 + v45;
      v46[16] = v47[16];
      *(_OWORD *)v46 = *(_OWORD *)v47;
      v48 = v31[18];
      v49 = (char *)v29 + v48;
      v50 = (char *)v30 + v48;
      v49[16] = v50[16];
      *(_OWORD *)v49 = *(_OWORD *)v50;
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v59 + 56))(v29, 0, 1, v31);
    }
    *(_DWORD *)&v5[v7[21]] = *(_DWORD *)&v6[v7[21]];
    *(_QWORD *)&v5[v7[22]] = *(_QWORD *)&v6[v7[22]];
    *(_OWORD *)&v5[v7[23]] = *(_OWORD *)&v6[v7[23]];
    *(_OWORD *)&v5[v7[24]] = *(_OWORD *)&v6[v7[24]];
    v51 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v63 + 32);
    v51(&v5[v7[25]], &v6[v7[25]], v20);
    v51(&v5[v7[26]], &v6[v7[26]], v20);
    v51(&v5[v7[27]], &v6[v7[27]], v20);
    v51(&v5[v7[28]], &v6[v7[28]], v20);
    v51(&v5[v7[29]], &v6[v7[29]], v20);
    v51(&v5[v7[30]], &v6[v7[30]], v20);
    *(_OWORD *)&v5[v7[31]] = *(_OWORD *)&v6[v7[31]];
    *(_QWORD *)&v5[v7[32]] = *(_QWORD *)&v6[v7[32]];
    *(_OWORD *)&v5[v7[33]] = *(_OWORD *)&v6[v7[33]];
    *(_QWORD *)&v5[v7[34]] = *(_QWORD *)&v6[v7[34]];
    v52 = v7[35];
    v53 = &v5[v52];
    v54 = &v6[v52];
    v53[16] = v54[16];
    *(_OWORD *)v53 = *(_OWORD *)v54;
    v55 = v7[36];
    v56 = &v5[v55];
    v57 = &v6[v55];
    v56[16] = v57[16];
    *(_OWORD *)v56 = *(_OWORD *)v57;
    v51(&v5[v7[37]], &v6[v7[37]], v20);
    v51(&v5[v7[38]], &v6[v7[38]], v20);
    v51(&v5[v7[39]], &v6[v7[39]], v20);
    v51(&v5[v7[40]], &v6[v7[40]], v20);
    v51(&v5[v7[41]], &v6[v7[41]], v20);
    v51(&v5[v7[42]], &v6[v7[42]], v20);
    v5[v7[43]] = v6[v7[43]];
    v5[v7[44]] = v6[v7[44]];
    v5[v7[45]] = v6[v7[45]];
    *(_OWORD *)&v5[v7[46]] = *(_OWORD *)&v6[v7[46]];
    *(_OWORD *)&v5[v7[47]] = *(_OWORD *)&v6[v7[47]];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v62 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_100611808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  int *v10;
  _QWORD *v11;
  uint64_t (*v12)(_BYTE *, uint64_t, int *);
  int v13;
  int v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(void);
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  _OWORD *v70;
  int *v71;
  unsigned int (**v72)(_OWORD *, uint64_t, int *);
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  int *v95;
  uint64_t (*v96)(uint64_t, uint64_t, int *);
  int v97;
  int v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  void (*v120)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v121;
  _BYTE *v122;
  _BYTE *v123;
  uint64_t v124;
  _BYTE *v125;
  _BYTE *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  unsigned int v133;
  size_t v134;
  void *v135;
  uint64_t v136;
  void *v137;
  _BYTE *v138;
  uint64_t v139;
  const void *v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  _BYTE *v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _BYTE *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE *v171;
  uint64_t v172;
  uint64_t v173;
  _BYTE *v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t *v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  void (*v187)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v188;
  _QWORD *v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _BYTE *v199;
  _BYTE *v200;
  uint64_t v201;
  _BYTE *v202;
  _BYTE *v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  int v215;
  void *__src;
  void *__srca;
  _QWORD *v218;
  _QWORD *v219;
  void *v220;
  uint64_t v221;
  uint64_t (*v222)(void);
  unsigned int (*v223)(_BYTE *, uint64_t, uint64_t);
  uint64_t v224;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 28);
  v8 = (_BYTE *)(a1 + v7);
  v9 = (_BYTE *)(a2 + v7);
  v10 = (int *)type metadata accessor for AccessoryProductInfo(0);
  v11 = (_QWORD *)*((_QWORD *)v10 - 1);
  v12 = (uint64_t (*)(_BYTE *, uint64_t, int *))v11[6];
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_1000126B0((uint64_t)v8, type metadata accessor for AccessoryProductInfo);
      goto LABEL_7;
    }
    *(_QWORD *)v8 = *(_QWORD *)v9;
    v8[8] = v9[8];
    v29 = v10[5];
    v30 = &v8[v29];
    v31 = &v9[v29];
    v32 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v32 - 8) + 40))(v30, v31, v32);
    v8[v10[6]] = v9[v10[6]];
    v8[v10[7]] = v9[v10[7]];
    v33 = v10[8];
    v34 = &v8[v33];
    v35 = (uint64_t *)&v9[v33];
    v37 = *v35;
    v36 = v35[1];
    *v34 = v37;
    v34[1] = v36;
    swift_bridgeObjectRelease();
    v8[v10[9]] = v9[v10[9]];
    v8[v10[10]] = v9[v10[10]];
    v8[v10[11]] = v9[v10[11]];
    v38 = v10[12];
    v39 = &v8[v38];
    v40 = (uint64_t *)&v9[v38];
    v42 = *v40;
    v41 = v40[1];
    *v39 = v42;
    v39[1] = v41;
    swift_bridgeObjectRelease();
    v43 = v10[13];
    v44 = &v8[v43];
    v45 = (uint64_t *)&v9[v43];
    v47 = *v45;
    v46 = v45[1];
    *v44 = v47;
    v44[1] = v46;
    swift_bridgeObjectRelease();
    v48 = v10[14];
    v49 = &v8[v48];
    v50 = &v9[v48];
    *(_QWORD *)v49 = *(_QWORD *)v50;
    v49[8] = v50[8];
    v51 = v10[15];
    v52 = &v8[v51];
    v53 = (uint64_t *)&v9[v51];
    v55 = *v53;
    v54 = v53[1];
    *v52 = v55;
    v52[1] = v54;
    swift_bridgeObjectRelease();
    v56 = v10[16];
    v57 = &v8[v56];
    v58 = &v9[v56];
    v59 = type metadata accessor for URL(0);
    v60 = *(_QWORD *)(v59 - 8);
    v61 = *(uint64_t (**)(void))(v60 + 48);
    v62 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v61)(v57, 1, v59);
    v63 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v61)(v58, 1, v59);
    if (v62)
    {
      if (!v63)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v60 + 32))(v57, v58, v59);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
        goto LABEL_22;
      }
    }
    else
    {
      if (!v63)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v60 + 40))(v57, v58, v59);
LABEL_22:
        v81 = v10[17];
        v82 = &v8[v81];
        v83 = &v9[v81];
        v84 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v61)(&v8[v81], 1, v59);
        v85 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v61)(v83, 1, v59);
        v222 = v61;
        v224 = v60;
        if (v84)
        {
          if (!v85)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v60 + 32))(v82, v83, v59);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v82, 0, 1, v59);
            goto LABEL_28;
          }
        }
        else
        {
          if (!v85)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v60 + 40))(v82, v83, v59);
LABEL_28:
            v87 = v10[18];
            v88 = &v8[v87];
            v89 = (uint64_t *)&v9[v87];
            v91 = *v89;
            v90 = v89[1];
            *v88 = v91;
            v88[1] = v90;
            swift_bridgeObjectRelease();
            *(_QWORD *)&v8[v10[19]] = *(_QWORD *)&v9[v10[19]];
            v92 = v10[20];
            v93 = (uint64_t)&v8[v92];
            v94 = &v9[v92];
            v95 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
            v219 = (_QWORD *)*((_QWORD *)v95 - 1);
            v96 = (uint64_t (*)(uint64_t, uint64_t, int *))v219[6];
            v97 = v96(v93, 1, v95);
            v98 = v96((uint64_t)v94, 1, v95);
            if (v97)
            {
              if (!v98)
              {
                v99 = *((_OWORD *)v94 + 1);
                *(_OWORD *)v93 = *(_OWORD *)v94;
                *(_OWORD *)(v93 + 16) = v99;
                *(_OWORD *)(v93 + 32) = *((_OWORD *)v94 + 2);
                *(_WORD *)(v93 + 48) = *((_WORD *)v94 + 24);
                v100 = *((_QWORD *)v94 + 8);
                *(_QWORD *)(v93 + 56) = *((_QWORD *)v94 + 7);
                *(_QWORD *)(v93 + 64) = v100;
                *(_BYTE *)(v93 + 72) = v94[72];
                v101 = v95[10];
                v102 = (void *)(v93 + v101);
                v103 = &v94[v101];
                if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v222)(&v94[v101], 1, v59))
                {
                  v104 = sub_10001A9A8(&qword_1010FBA40);
                  memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
                }
                else
                {
                  (*(void (**)(void *, _BYTE *, uint64_t))(v224 + 32))(v102, v103, v59);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v224 + 56))(v102, 0, 1, v59);
                }
                v136 = v95[11];
                v137 = (void *)(v93 + v136);
                v138 = &v94[v136];
                if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v222)(&v94[v136], 1, v59))
                {
                  v139 = sub_10001A9A8(&qword_1010FBA40);
                  memcpy(v137, v138, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
                  v106 = v224;
                }
                else
                {
                  v140 = v138;
                  v106 = v224;
                  (*(void (**)(void *, const void *, uint64_t))(v224 + 32))(v137, v140, v59);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v224 + 56))(v137, 0, 1, v59);
                }
                v141 = v95[12];
                v142 = v93 + v141;
                v143 = &v94[v141];
                *(_QWORD *)v142 = *(_QWORD *)v143;
                *(_BYTE *)(v142 + 8) = v143[8];
                *(_OWORD *)(v93 + v95[13]) = *(_OWORD *)&v94[v95[13]];
                *(_QWORD *)(v93 + v95[14]) = *(_QWORD *)&v94[v95[14]];
                *(_OWORD *)(v93 + v95[15]) = *(_OWORD *)&v94[v95[15]];
                *(_QWORD *)(v93 + v95[16]) = *(_QWORD *)&v94[v95[16]];
                v144 = v95[17];
                v145 = v93 + v144;
                v146 = &v94[v144];
                *(_BYTE *)(v145 + 16) = v146[16];
                *(_OWORD *)v145 = *(_OWORD *)v146;
                v147 = v95[18];
                v148 = v93 + v147;
                v149 = &v94[v147];
                *(_BYTE *)(v148 + 16) = v149[16];
                *(_OWORD *)v148 = *(_OWORD *)v149;
                ((void (*)(uint64_t, _QWORD, uint64_t, int *))v219[7])(v93, 0, 1, v95);
                goto LABEL_64;
              }
LABEL_34:
              v105 = sub_10001A9A8(&qword_1010FBA50);
              memcpy((void *)v93, v94, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
              v106 = v224;
              goto LABEL_64;
            }
            if (v98)
            {
              sub_1000126B0(v93, type metadata accessor for AccessoryInfoResponseContent.Configuration);
              goto LABEL_34;
            }
            v127 = *((_QWORD *)v94 + 1);
            *(_QWORD *)v93 = *(_QWORD *)v94;
            *(_QWORD *)(v93 + 8) = v127;
            swift_bridgeObjectRelease();
            v128 = *((_QWORD *)v94 + 3);
            *(_QWORD *)(v93 + 16) = *((_QWORD *)v94 + 2);
            *(_QWORD *)(v93 + 24) = v128;
            swift_bridgeObjectRelease();
            v129 = *((_QWORD *)v94 + 5);
            *(_QWORD *)(v93 + 32) = *((_QWORD *)v94 + 4);
            *(_QWORD *)(v93 + 40) = v129;
            swift_bridgeObjectRelease();
            *(_WORD *)(v93 + 48) = *((_WORD *)v94 + 24);
            v130 = *((_QWORD *)v94 + 8);
            *(_QWORD *)(v93 + 56) = *((_QWORD *)v94 + 7);
            *(_QWORD *)(v93 + 64) = v130;
            *(_BYTE *)(v93 + 72) = v94[72];
            v131 = v95[10];
            v132 = &v94[v131];
            v220 = (void *)(v93 + v131);
            v215 = v222();
            v133 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v222)(v132, 1, v59);
            if (v215)
            {
              if (!v133)
              {
                (*(void (**)(void *, _BYTE *, uint64_t))(v224 + 32))(v220, v132, v59);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v224 + 56))(v220, 0, 1, v59);
                goto LABEL_56;
              }
              v134 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
              v135 = v220;
            }
            else
            {
              if (!v133)
              {
                (*(void (**)(void *, _BYTE *, uint64_t))(v224 + 40))(v220, v132, v59);
                goto LABEL_56;
              }
              (*(void (**)(void *, uint64_t))(v224 + 8))(v220, v59);
              v134 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
              v135 = v220;
            }
            memcpy(v135, v132, v134);
LABEL_56:
            v150 = v95[11];
            v151 = &v94[v150];
            __srca = (void *)(v93 + v150);
            v152 = v222();
            v153 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v222)(v151, 1, v59);
            if (v152)
            {
              if (v153)
              {
                v154 = sub_10001A9A8(&qword_1010FBA40);
                memcpy(__srca, v151, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
                v106 = v224;
              }
              else
              {
                v106 = v224;
                (*(void (**)(void *, _BYTE *, uint64_t))(v224 + 32))(__srca, v151, v59);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v224 + 56))(__srca, 0, 1, v59);
              }
            }
            else
            {
              v106 = v224;
              if (v153)
              {
                (*(void (**)(void *, uint64_t))(v224 + 8))(__srca, v59);
                v155 = sub_10001A9A8(&qword_1010FBA40);
                memcpy(__srca, v151, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
              }
              else
              {
                (*(void (**)(void *, _BYTE *, uint64_t))(v224 + 40))(__srca, v151, v59);
              }
            }
            v156 = v95[12];
            v157 = v93 + v156;
            v158 = &v94[v156];
            *(_QWORD *)v157 = *(_QWORD *)v158;
            *(_BYTE *)(v157 + 8) = v158[8];
            v159 = v95[13];
            v160 = (_QWORD *)(v93 + v159);
            v161 = (uint64_t *)&v94[v159];
            v163 = *v161;
            v162 = v161[1];
            *v160 = v163;
            v160[1] = v162;
            swift_bridgeObjectRelease();
            *(_QWORD *)(v93 + v95[14]) = *(_QWORD *)&v94[v95[14]];
            swift_bridgeObjectRelease();
            v164 = v95[15];
            v165 = (_QWORD *)(v93 + v164);
            v166 = (uint64_t *)&v94[v164];
            v168 = *v166;
            v167 = v166[1];
            *v165 = v168;
            v165[1] = v167;
            swift_bridgeObjectRelease();
            *(_QWORD *)(v93 + v95[16]) = *(_QWORD *)&v94[v95[16]];
            swift_bridgeObjectRelease();
            v169 = v95[17];
            v170 = v93 + v169;
            v171 = &v94[v169];
            *(_OWORD *)v170 = *(_OWORD *)v171;
            *(_BYTE *)(v170 + 16) = v171[16];
            v172 = v95[18];
            v173 = v93 + v172;
            v174 = &v94[v172];
            *(_BYTE *)(v173 + 16) = v174[16];
            *(_OWORD *)v173 = *(_OWORD *)v174;
LABEL_64:
            *(_DWORD *)&v8[v10[21]] = *(_DWORD *)&v9[v10[21]];
            *(_QWORD *)&v8[v10[22]] = *(_QWORD *)&v9[v10[22]];
            swift_bridgeObjectRelease();
            v175 = v10[23];
            v176 = (uint64_t *)&v8[v175];
            v177 = (uint64_t *)&v9[v175];
            v178 = *(_QWORD *)&v8[v175 + 8];
            if (v178 >> 60 != 15)
            {
              v179 = v177[1];
              if (v179 >> 60 != 15)
              {
                v180 = *v176;
                *v176 = *v177;
                v176[1] = v179;
                sub_10001BC14(v180, v178);
LABEL_69:
                v181 = v10[24];
                v182 = (uint64_t *)&v8[v181];
                v183 = (uint64_t *)&v9[v181];
                v184 = *(_QWORD *)&v8[v181 + 8];
                if (v184 >> 60 != 15)
                {
                  v185 = v183[1];
                  if (v185 >> 60 != 15)
                  {
                    v186 = *v182;
                    *v182 = *v183;
                    v182[1] = v185;
                    sub_10001BC14(v186, v184);
                    goto LABEL_74;
                  }
                  sub_1000DC964((uint64_t)v182);
                }
                *(_OWORD *)v182 = *(_OWORD *)v183;
LABEL_74:
                v187 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v106 + 40);
                v187(&v8[v10[25]], &v9[v10[25]], v59);
                v187(&v8[v10[26]], &v9[v10[26]], v59);
                v187(&v8[v10[27]], &v9[v10[27]], v59);
                v187(&v8[v10[28]], &v9[v10[28]], v59);
                v187(&v8[v10[29]], &v9[v10[29]], v59);
                v187(&v8[v10[30]], &v9[v10[30]], v59);
                v188 = v10[31];
                v189 = &v8[v188];
                v190 = (uint64_t *)&v9[v188];
                v192 = *v190;
                v191 = v190[1];
                *v189 = v192;
                v189[1] = v191;
                swift_bridgeObjectRelease();
                *(_QWORD *)&v8[v10[32]] = *(_QWORD *)&v9[v10[32]];
                swift_bridgeObjectRelease();
                v193 = v10[33];
                v194 = &v8[v193];
                v195 = (uint64_t *)&v9[v193];
                v197 = *v195;
                v196 = v195[1];
                *v194 = v197;
                v194[1] = v196;
                swift_bridgeObjectRelease();
                *(_QWORD *)&v8[v10[34]] = *(_QWORD *)&v9[v10[34]];
                swift_bridgeObjectRelease();
                v198 = v10[35];
                v199 = &v8[v198];
                v200 = &v9[v198];
                *(_OWORD *)v199 = *(_OWORD *)v200;
                v199[16] = v200[16];
                v201 = v10[36];
                v202 = &v8[v201];
                v203 = &v9[v201];
                v202[16] = v203[16];
                *(_OWORD *)v202 = *(_OWORD *)v203;
                v187(&v8[v10[37]], &v9[v10[37]], v59);
                v187(&v8[v10[38]], &v9[v10[38]], v59);
                v187(&v8[v10[39]], &v9[v10[39]], v59);
                v187(&v8[v10[40]], &v9[v10[40]], v59);
                v187(&v8[v10[41]], &v9[v10[41]], v59);
                v187(&v8[v10[42]], &v9[v10[42]], v59);
                v8[v10[43]] = v9[v10[43]];
                v8[v10[44]] = v9[v10[44]];
                v8[v10[45]] = v9[v10[45]];
                v204 = v10[46];
                v205 = &v8[v204];
                v206 = (uint64_t *)&v9[v204];
                v208 = *v206;
                v207 = v206[1];
                *v205 = v208;
                v205[1] = v207;
                swift_bridgeObjectRelease();
                v209 = v10[47];
                v210 = &v8[v209];
                v211 = (uint64_t *)&v9[v209];
                v213 = *v211;
                v212 = v211[1];
                *v210 = v213;
                v210[1] = v212;
                swift_bridgeObjectRelease();
                return a1;
              }
              sub_1000DC964((uint64_t)v176);
            }
            *(_OWORD *)v176 = *(_OWORD *)v177;
            goto LABEL_69;
          }
          (*(void (**)(_BYTE *, uint64_t))(v60 + 8))(v82, v59);
        }
        v86 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
        goto LABEL_28;
      }
      (*(void (**)(_BYTE *, uint64_t))(v60 + 8))(v57, v59);
    }
    v80 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
    goto LABEL_22;
  }
  if (v14)
  {
LABEL_7:
    v28 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v8[8] = v9[8];
  v15 = v10[5];
  v16 = &v8[v15];
  v17 = &v9[v15];
  v18 = type metadata accessor for ServerStatusCode(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v8[v10[6]] = v9[v10[6]];
  v8[v10[7]] = v9[v10[7]];
  *(_OWORD *)&v8[v10[8]] = *(_OWORD *)&v9[v10[8]];
  v8[v10[9]] = v9[v10[9]];
  v8[v10[10]] = v9[v10[10]];
  v8[v10[11]] = v9[v10[11]];
  *(_OWORD *)&v8[v10[12]] = *(_OWORD *)&v9[v10[12]];
  *(_OWORD *)&v8[v10[13]] = *(_OWORD *)&v9[v10[13]];
  v19 = v10[14];
  v20 = &v8[v19];
  v21 = &v9[v19];
  v20[8] = v21[8];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_OWORD *)&v8[v10[15]] = *(_OWORD *)&v9[v10[15]];
  v22 = v10[16];
  v23 = &v8[v22];
  v24 = &v9[v22];
  v25 = type metadata accessor for URL(0);
  v26 = *(_QWORD *)(v25 - 8);
  v223 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48);
  if (v223(v24, 1, v25))
  {
    v27 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v26 + 32))(v23, v24, v25);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  v64 = v10[17];
  v65 = &v8[v64];
  v66 = &v9[v64];
  v221 = v26;
  if (v223(&v9[v64], 1, v25))
  {
    v67 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v26 + 32))(v65, v66, v25);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v65, 0, 1, v25);
  }
  *(_OWORD *)&v8[v10[18]] = *(_OWORD *)&v9[v10[18]];
  *(_QWORD *)&v8[v10[19]] = *(_QWORD *)&v9[v10[19]];
  v68 = v10[20];
  v69 = &v8[v68];
  v70 = &v9[v68];
  v71 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v72 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((_QWORD *)v71 - 1);
  if (v72[6](v70, 1, v71))
  {
    v73 = sub_10001A9A8(&qword_1010FBA50);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
  }
  else
  {
    __src = v72;
    v218 = v11;
    v74 = v70[1];
    *v69 = *v70;
    v69[1] = v74;
    v69[2] = v70[2];
    *((_WORD *)v69 + 24) = *((_WORD *)v70 + 24);
    v75 = *((_QWORD *)v70 + 8);
    *((_QWORD *)v69 + 7) = *((_QWORD *)v70 + 7);
    *((_QWORD *)v69 + 8) = v75;
    *((_BYTE *)v69 + 72) = *((_BYTE *)v70 + 72);
    v76 = v71[10];
    v77 = (char *)v69 + v76;
    v78 = (char *)v70 + v76;
    if (v223((_BYTE *)v70 + v76, 1, v25))
    {
      v79 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v221 + 32))(v77, v78, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v221 + 56))(v77, 0, 1, v25);
    }
    v107 = v71[11];
    v108 = (char *)v69 + v107;
    v109 = (char *)v70 + v107;
    if (v223((_BYTE *)v70 + v107, 1, v25))
    {
      v110 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v221 + 32))(v108, v109, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v221 + 56))(v108, 0, 1, v25);
    }
    v111 = v71[12];
    v112 = (char *)v69 + v111;
    v113 = (char *)v70 + v111;
    *(_QWORD *)v112 = *(_QWORD *)v113;
    v112[8] = v113[8];
    *(_OWORD *)((char *)v69 + v71[13]) = *(_OWORD *)((char *)v70 + v71[13]);
    *(_QWORD *)((char *)v69 + v71[14]) = *(_QWORD *)((char *)v70 + v71[14]);
    *(_OWORD *)((char *)v69 + v71[15]) = *(_OWORD *)((char *)v70 + v71[15]);
    *(_QWORD *)((char *)v69 + v71[16]) = *(_QWORD *)((char *)v70 + v71[16]);
    v114 = v71[17];
    v115 = (char *)v69 + v114;
    v116 = (char *)v70 + v114;
    v115[16] = v116[16];
    *(_OWORD *)v115 = *(_OWORD *)v116;
    v117 = v71[18];
    v118 = (char *)v69 + v117;
    v119 = (char *)v70 + v117;
    v118[16] = v119[16];
    *(_OWORD *)v118 = *(_OWORD *)v119;
    (*((void (**)(_OWORD *, _QWORD, uint64_t, int *))__src + 7))(v69, 0, 1, v71);
    v11 = v218;
  }
  *(_DWORD *)&v8[v10[21]] = *(_DWORD *)&v9[v10[21]];
  *(_QWORD *)&v8[v10[22]] = *(_QWORD *)&v9[v10[22]];
  *(_OWORD *)&v8[v10[23]] = *(_OWORD *)&v9[v10[23]];
  *(_OWORD *)&v8[v10[24]] = *(_OWORD *)&v9[v10[24]];
  v120 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v221 + 32);
  v120(&v8[v10[25]], &v9[v10[25]], v25);
  v120(&v8[v10[26]], &v9[v10[26]], v25);
  v120(&v8[v10[27]], &v9[v10[27]], v25);
  v120(&v8[v10[28]], &v9[v10[28]], v25);
  v120(&v8[v10[29]], &v9[v10[29]], v25);
  v120(&v8[v10[30]], &v9[v10[30]], v25);
  *(_OWORD *)&v8[v10[31]] = *(_OWORD *)&v9[v10[31]];
  *(_QWORD *)&v8[v10[32]] = *(_QWORD *)&v9[v10[32]];
  *(_OWORD *)&v8[v10[33]] = *(_OWORD *)&v9[v10[33]];
  *(_QWORD *)&v8[v10[34]] = *(_QWORD *)&v9[v10[34]];
  v121 = v10[35];
  v122 = &v8[v121];
  v123 = &v9[v121];
  v122[16] = v123[16];
  *(_OWORD *)v122 = *(_OWORD *)v123;
  v124 = v10[36];
  v125 = &v8[v124];
  v126 = &v9[v124];
  v125[16] = v126[16];
  *(_OWORD *)v125 = *(_OWORD *)v126;
  v120(&v8[v10[37]], &v9[v10[37]], v25);
  v120(&v8[v10[38]], &v9[v10[38]], v25);
  v120(&v8[v10[39]], &v9[v10[39]], v25);
  v120(&v8[v10[40]], &v9[v10[40]], v25);
  v120(&v8[v10[41]], &v9[v10[41]], v25);
  v120(&v8[v10[42]], &v9[v10[42]], v25);
  v8[v10[43]] = v9[v10[43]];
  v8[v10[44]] = v9[v10[44]];
  v8[v10[45]] = v9[v10[45]];
  *(_OWORD *)&v8[v10[46]] = *(_OWORD *)&v9[v10[46]];
  *(_OWORD *)&v8[v10[47]] = *(_OWORD *)&v9[v10[47]];
  ((void (*)(_BYTE *, _QWORD, uint64_t, int *))v11[7])(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_100612964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100612970);
}

uint64_t sub_100612970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v9);
  }
}

uint64_t sub_1006129FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100612A08);
}

uint64_t sub_100612A08(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for PairingConfig(uint64_t a1)
{
  uint64_t result;

  result = qword_101101118;
  if (!qword_101101118)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PairingConfig);
  return result;
}

void sub_100612ABC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100E45E70;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = &unk_100E45E70;
  sub_100612B40(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

void sub_100612B40(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1010F00C0)
  {
    v2 = type metadata accessor for AccessoryProductInfo(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1010F00C0);
  }
}

uint64_t sub_100612B94()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7218);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7218);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000013, 0x8000000100EDCFB0);
}

uint64_t sub_100612C14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7230);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7230);
  if (qword_1010E9D48 != -1)
    swift_once(&qword_1010E9D48, sub_100612B94);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7218);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100612CA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v2);
  *(_QWORD *)(v2 + 112) = 0xD000000000000013;
  *(_QWORD *)(v2 + 120) = 0x8000000100E45E80;
  v7 = v2 + OBJC_IVAR____TtC12searchpartyd19FinderStateObserver__stateInfoCache;
  v8 = type metadata accessor for FinderStateInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd19FinderStateObserver_notificationListener) = 0;
  v9 = OBJC_IVAR____TtC12searchpartyd19FinderStateObserver_workItemQueue;
  v10 = type metadata accessor for WorkItemQueue(0);
  UUID.init()(v10);
  *(_QWORD *)(v2 + v9) = WorkItemQueue.__allocating_init(name:identifier:)(0xD000000000000018, 0x8000000100EDCFD0, v6);
  v11 = OBJC_IVAR____TtC12searchpartyd19FinderStateObserver_finderStreamStateProvider;
  v12 = sub_10001A9A8(&qword_101101370);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  *(_QWORD *)(v2 + v11) = AsyncStreamProvider.init()();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd19FinderStateObserver_finderStateManager) = a1;
  return v2;
}

uint64_t sub_100612DE8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1[10] = v0;
  v1[11] = *v0;
  v2 = type metadata accessor for UUID(0);
  v1[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100612E48, v0, 0);
}

uint64_t sub_100612E48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = swift_allocObject(&unk_101083510, 24, 7);
  v16 = *(_OWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 80);
  swift_weakInit(v2 + 16, v3);
  v4 = sub_10001A9A8(&qword_1010F0E48);
  inited = swift_initStackObject(v4, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPFinderStateChangedNotification);
  v8 = v7;
  v9 = swift_allocObject(&unk_101083538, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_1006147A8;
  *(_QWORD *)(v9 + 24) = v2;
  *(_QWORD *)(inited + 32) = v6;
  *(_QWORD *)(inited + 40) = v8;
  *(_QWORD *)(inited + 48) = sub_10015A05C;
  *(_QWORD *)(inited + 56) = v9;
  swift_retain();
  v10 = sub_1006B9680(inited);
  v11 = type metadata accessor for DarwinNotificationHelper(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd19FinderStateObserver_notificationListener) = DarwinNotificationHelper.init(notificationHandlers:)(v10);
  swift_release();
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v12 = swift_allocObject(&unk_101083560, 32, 7);
  *(_OWORD *)(v12 + 16) = v16;
  swift_retain();
  v13 = swift_retain();
  UUID.init()(v13);
  v14 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v1, &unk_101101368, v12, &unk_101101328, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v14);
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100613018(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    sub_100613744();
    return swift_release();
  }
  return result;
}

uint64_t sub_10061306C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_10001A9A8(&qword_1010EBAC8);
  v2[4] = v3;
  v2[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FinderStateInfo(0);
  v2[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[7] = v5;
  v2[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1006130F4, v1, 0);
}

uint64_t sub_1006130F4()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;

  v1 = v0[3];
  v2 = sub_100614300();
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[9] = v3;
  *v3 = v0;
  v3[1] = sub_100613180;
  return withCheckedContinuation<A>(isolation:function:_:)(v0[5], v1, v2, 0x6E4965746174735FLL, 0xEC00000029286F66, sub_100033604, v0[3], v0[4]);
}

uint64_t sub_100613180()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  return swift_task_switch(sub_1006131D8, v1, 0);
}

uint64_t sub_1006131D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v1 + 48))(v2, 1, *(_QWORD *)(v0 + 48)) == 1)
  {
    sub_100004048(v2, &qword_1010EBAC8);
    v3 = _swiftEmptyArrayStorage;
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 64);
    sub_1000306A0(v2, v4);
    v5 = sub_10001A9A8(&qword_101101330);
    v6 = sub_10001A9A8(&qword_1010EBAF8);
    v7 = *(_QWORD *)(v6 - 8);
    v8 = *(_QWORD *)(v7 + 72);
    v9 = *(unsigned __int8 *)(v7 + 80);
    v10 = (v9 + 32) & ~v9;
    v3 = (_QWORD *)swift_allocObject(v5, v10 + v8, v9 | 7);
    *((_OWORD *)v3 + 1) = xmmword_100E22B00;
    v11 = (uint64_t)v3 + v10 + *(int *)(v6 + 48);
    (*(void (**)(void))(v1 + 56))();
    sub_1000306A0(v4, v11);
  }
  v12 = *(_QWORD *)(v0 + 64);
  v13 = *(_QWORD *)(v0 + 40);
  AsyncStreamProvider.stream(initialEvents:)(v3);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100613318(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v4 = sub_10001A9A8(&qword_101101338);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v12 = sub_100614300();
  v13 = *(unsigned __int8 *)(v5 + 80);
  v14 = (v13 + 40) & ~v13;
  v15 = (char *)swift_allocObject(&unk_1010834C0, v14 + v6, v13 | 7);
  *((_QWORD *)v15 + 2) = a2;
  *((_QWORD *)v15 + 3) = v12;
  *((_QWORD *)v15 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v15[v14], v7, v4);
  swift_retain_n(a2, 2);
  v16 = sub_100691AC0((uint64_t)v10, (uint64_t)&unk_101101348, (uint64_t)v15);
  return swift_release(v16);
}

uint64_t sub_10061346C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[2] = a4;
  v5[3] = a5;
  v7 = type metadata accessor for UUID(0);
  v5[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_101101338);
  v5[5] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[6] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v5[7] = v10;
  v5[8] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1006134F8, a4, 0);
}

uint64_t sub_1006134F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = *(_QWORD *)(v7 + OBJC_IVAR____TtC12searchpartyd19FinderStateObserver_workItemQueue);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v6, v3);
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = (v2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_1010834E8, v11 + 8, v9 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v12 + v10, v1, v3);
  *(_QWORD *)(v12 + v11) = v7;
  swift_retain(v8);
  v13 = swift_retain(v7);
  UUID.init()(v13);
  v14 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v5, &unk_101101358, v12, &unk_101101360, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v14);
  swift_release(v8);
  swift_release(v14);
  swift_task_dealloc(v1);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10061362C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = a2;
  v4 = sub_10001A9A8(&qword_1010EBAC8);
  v2[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10061368C, a2, 0);
}

uint64_t sub_10061368C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC12searchpartyd19FinderStateObserver__stateInfoCache;
  swift_beginAccess(v2, v0 + 16, 0, 0);
  sub_100614430(v2, v1);
  return swift_task_switch(sub_1006136F0, 0, 0);
}

uint64_t sub_1006136F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = sub_10001A9A8(&qword_101101338);
  CheckedContinuation.resume(returning:)(v1, v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100613744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v22[4];

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v2);
  v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject(&unk_101083448, 40, 7);
  v7[2] = 0;
  v8 = v7 + 2;
  v7[3] = 0;
  v7[4] = v1;
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  v10 = swift_retain();
  if (v9 == 1)
  {
    sub_100004048((uint64_t)v4, &qword_1010F46C0);
    v11 = 0;
    v12 = 0;
    v13 = 7168;
  }
  else
  {
    v14 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    v13 = v14 | 0x1C00;
    v15 = *v8;
    if (*v8)
    {
      v16 = v7[3];
      ObjectType = swift_getObjectType(*v8);
      swift_unknownObjectRetain(v15);
      v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v12 = v18;
      swift_unknownObjectRelease(v15);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  v19 = swift_allocObject(&unk_101083470, 32, 7);
  *(_QWORD *)(v19 + 16) = &unk_101101310;
  *(_QWORD *)(v19 + 24) = v7;
  if (v12 | v11)
  {
    v22[0] = 0;
    v22[1] = 0;
    v20 = v22;
    v22[2] = v11;
    v22[3] = v12;
  }
  else
  {
    v20 = 0;
  }
  swift_task_create(v13, v20, &type metadata for () + 1, &unk_1010EE4A0, v19);
  return swift_release();
}

uint64_t sub_100613918(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;

  v4[2] = a4;
  v4[3] = *a4;
  v6 = type metadata accessor for UUID(0);
  v4[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10061397C, a4, 0);
}

uint64_t sub_10061397C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = OBJC_IVAR____TtC12searchpartyd19FinderStateObserver_workItemQueue;
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v3 = swift_allocObject(&unk_101083498, 32, 7);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = *(_QWORD *)(v4 + v2);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 16);
  swift_retain(v5);
  v6 = swift_retain(v4);
  UUID.init()(v6);
  v7 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v1, &unk_101101320, v3, &unk_101101328, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v7);
  swift_release(v5);
  swift_release(v7);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100613A50(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1[9] = a1;
  v3 = sub_10001A9A8(&qword_1010EBAF8);
  v1[10] = v3;
  v1[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FinderStateInfo(0);
  v1[12] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[13] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[14] = swift_task_alloc(v6);
  v1[15] = swift_task_alloc(v6);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EBAC8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[16] = swift_task_alloc(v7);
  v1[17] = swift_task_alloc(v7);
  v1[18] = swift_task_alloc(v7);
  v1[19] = swift_task_alloc(v7);
  return swift_task_switch(sub_100613B38, a1, 0);
}

uint64_t sub_100613B38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[19];
  v2 = v0[9];
  v3 = OBJC_IVAR____TtC12searchpartyd19FinderStateObserver__stateInfoCache;
  v0[20] = OBJC_IVAR____TtC12searchpartyd19FinderStateObserver__stateInfoCache;
  v4 = v2 + v3;
  swift_beginAccess(v2 + v3, v0 + 2, 0, 0);
  sub_100614430(v4, v1);
  v0[21] = *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd19FinderStateObserver_finderStateManager);
  swift_retain();
  return swift_task_switch(sub_100613BC0, 0, 0);
}

uint64_t sub_100613BC0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[22] = v2;
  *v2 = v0;
  v2[1] = sub_100613C2C;
  return unsafeBlocking<A>(_:)(v0[15], sub_100614478, v0[21], v0[12]);
}

uint64_t sub_100613C2C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 176));
  swift_release();
  return swift_task_switch(sub_100613C8C, v1, 0);
}

uint64_t sub_100613C8C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v0[17];
  v1 = v0[18];
  v3 = v0[12];
  v4 = v0[13];
  v5 = v0[9] + v0[20];
  sub_1006144D0(v0[15], v1);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v1, 0, 1, v3);
  sub_1004EF38C(v1, v2);
  swift_beginAccess(v5, v0 + 5, 33, 0);
  sub_100614514(v2, v5);
  swift_endAccess(v0 + 5);
  return swift_task_switch(sub_100613D40, 0, 0);
}

uint64_t sub_100613D40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  sub_100614430(*(_QWORD *)(v0 + 152), v1);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = *(unsigned __int8 **)(v0 + 128);
  if (v4 == 1)
  {
    sub_100004048((uint64_t)v5, &qword_1010EBAC8);
    v6 = 0xE300000000000000;
    v7 = 7104878;
  }
  else
  {
    v8 = *v5;
    sub_1000306E4((uint64_t)v5);
    if (v8)
      v7 = 1702195828;
    else
      v7 = 0x65736C6166;
    if (v8)
      v6 = 0xE400000000000000;
    else
      v6 = 0xE500000000000000;
  }
  if (qword_1010E9D50 != -1)
    swift_once(&qword_1010E9D50, sub_100612C14);
  v10 = *(_QWORD *)(v0 + 112);
  v9 = *(_QWORD *)(v0 + 120);
  v11 = type metadata accessor for Logger(0);
  sub_10001A9E8(v11, (uint64_t)qword_1011B7230);
  sub_1006144D0(v9, v10);
  swift_bridgeObjectRetain(v6);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  v15 = os_log_type_enabled(v13, v14);
  v16 = *(unsigned __int8 **)(v0 + 112);
  if (v15)
  {
    v17 = swift_slowAlloc(18, -1);
    v18 = swift_slowAlloc(32, -1);
    v22 = v18;
    *(_DWORD *)v17 = 136446466;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v0 + 64) = sub_100016940(v7, v6, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease_n(v6, 3);
    *(_WORD *)(v17 + 12) = 1024;
    v19 = *v16;
    sub_1000306E4((uint64_t)v16);
    *(_DWORD *)(v0 + 200) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 204, v17 + 14, v17 + 18);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Refreshed finder state info. Old: %{public}s, new: %{BOOL}d.", (uint8_t *)v17, 0x12u);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    sub_1000306E4(*(_QWORD *)(v0 + 112));
    swift_bridgeObjectRelease_n(v6, 2);
  }

  v20 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 184) = OBJC_IVAR____TtC12searchpartyd19FinderStateObserver_finderStreamStateProvider;
  return swift_task_switch(sub_100613FC8, v20, 0);
}

uint64_t sub_100613FC8()
{
  _QWORD *v0;

  v0[24] = *(_QWORD *)(v0[9] + v0[23]);
  return swift_task_switch(sub_100613FEC, 0, 0);
}

uint64_t sub_100613FEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = v6 + *(int *)(*(_QWORD *)(v0 + 80) + 48);
  sub_100614430(v1, v6);
  sub_1006144D0(v5, v7);
  AsyncStreamProvider.yield(value:transaction:)(v6, 0);
  swift_release();
  sub_100004048(v6, &qword_1010EBAF8);
  sub_1000306E4(v5);
  sub_100004048(v1, &qword_1010EBAC8);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v9);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006140E8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_100004048(v0 + OBJC_IVAR____TtC12searchpartyd19FinderStateObserver__stateInfoCache, &qword_1010EBAC8);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100614164()
{
  return type metadata accessor for FinderStateObserver(0);
}

uint64_t type metadata accessor for FinderStateObserver(uint64_t a1)
{
  uint64_t result;

  result = qword_1011011A8;
  if (!qword_1011011A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FinderStateObserver);
  return result;
}

void sub_1006141A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[1] = &unk_100E45ED0;
  sub_100614244(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[4] = &unk_100E45EE8;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
  }
}

void sub_100614244(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1011011C8)
  {
    v2 = type metadata accessor for FinderStateInfo(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1011011C8);
  }
}

uint64_t sub_100614298()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1011011BC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  return sub_100612DE8();
}

unint64_t sub_1006142DC(uint64_t a1)
{
  unint64_t result;

  result = sub_100614300();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100614300()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010EBEA8;
  if (!qword_1010EBEA8)
  {
    v1 = type metadata accessor for FinderStateObserver(255);
    result = swift_getWitnessTable(aE_59, v1);
    atomic_store(result, (unint64_t *)&qword_1010EBEA8);
  }
  return result;
}

uint64_t sub_100614348()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100614374(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (_QWORD *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10110130C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004C28;
  return sub_100613918(a1, v4, v5, v6);
}

uint64_t sub_1006143E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_10110131C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  return sub_100613A50(v2);
}

uint64_t sub_100614430(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010EBAC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100614478()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for FinderStateInfo(0);
  return OS_dispatch_queue.sync<A>(execute:)(sub_10061455C, v0, v1);
}

uint64_t sub_1006144D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FinderStateInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100614514(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010EBAC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10061455C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1001C4FE8(v1, a1);
}

uint64_t sub_100614574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_101101338);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1006145F4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_101101338) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_101101344);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004A74;
  return sub_10061346C(a1, v5, v6, v7, v8);
}

uint64_t sub_10061468C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10001A9A8(&qword_101101338);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100614704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(sub_10001A9A8(&qword_101101338) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v6 = (_QWORD *)swift_task_alloc(dword_101101354);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100004A74;
  return sub_10061362C(v4, v5);
}

uint64_t sub_100614784()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1006147A8(uint64_t a1)
{
  uint64_t v1;

  return sub_100613018(a1, v1);
}

uint64_t sub_1006147B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1006147D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1006147F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_10110131C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004C28;
  return sub_100613A50(v2);
}

uint64_t sub_100614850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7248);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7248);
  if (qword_1010E9D68 != -1)
    swift_once(&qword_1010E9D68, sub_100616194);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7260);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1006148E0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1[2] = v0;
  v1[3] = *v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  v1[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[6] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[7] = swift_task_alloc(v5);
  v6 = swift_task_alloc(v5);
  v1[8] = v6;
  swift_defaultActor_initialize(v0);
  v0[14] = 0xD000000000000013;
  v0[15] = 0x8000000100E45F60;
  sub_100614F18(v6);
  v7 = type metadata accessor for CloudStorageDatabase(0);
  v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v1[9] = v8;
  swift_defaultActor_initialize(v8);
  v9 = OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_logger;
  if (qword_1010E9CD0 != -1)
    swift_once(&qword_1010E9CD0, sub_10050FCEC);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B7108);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8 + v9, v11, v10);
  *(_QWORD *)(v8 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_connectionPair) = 0;
  *(_DWORD *)(v8 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_currentVersion) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v8 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_baseContainerURL, v6, v3);
  *(_BYTE *)(v8 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_temporary) = 0;
  return swift_task_switch(sub_100614AA0, v8, 0);
}

uint64_t sub_100614AA0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[9];
  (*(void (**)(_QWORD, _QWORD))(v0[6] + 8))(v0[8], v0[5]);
  v2 = type metadata accessor for CloudStorageStore(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v0[10] = v3;
  swift_defaultActor_initialize(v3);
  strcpy((char *)(v3 + 120), "CloudStorage");
  *(_BYTE *)(v3 + 133) = 0;
  *(_WORD *)(v3 + 134) = -5120;
  v4 = v3 + OBJC_IVAR____TtC12searchpartyd17CloudStorageStore_state;
  v5 = type metadata accessor for CloudStorageStore.State(0);
  swift_storeEnumTagMultiPayload(v4, v5, 2);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd17CloudStorageStore_stateContinuations) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v3 + 112) = v1;
  return swift_task_switch(sub_100614B68, v3, 0);
}

uint64_t sub_100614B68()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = v0[2];
  *(_QWORD *)(v1 + 128) = v0[10];
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v3 = objc_msgSend(v2, "bundleIdentifier");

  if (v3)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v6 = v5;

  }
  else
  {
    v6 = 0x8000000100EC5D30;
    v4 = 0xD00000000000001DLL;
  }
  v7 = v0[7];
  type metadata accessor for CloudKitStorage(0);
  sub_100614F18(v7);
  v8 = *(_QWORD *)(v1 + 128);
  v9 = sub_100006C64(&qword_1011014B0, 255, type metadata accessor for CloudStorageStore, (uint64_t)&unk_100E55268);
  v10 = sub_10001A9A8(&qword_1011014B8);
  v11 = type metadata accessor for CloudKitCoordinator.Database(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = swift_allocObject(v10, v14 + *(_QWORD *)(v12 + 72), v13 | 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v15 + v14, enum case for CloudKitCoordinator.Database.private(_:), v11);
  v16 = async function pointer to CloudKitStorage.__allocating_init(containerURL:containerIdentifier:bundleIdentifier:dataStore:databases:containerEnvironment:)[1];
  swift_retain();
  v17 = (_QWORD *)swift_task_alloc(v16);
  v0[11] = v17;
  *v17 = v0;
  v17[1] = sub_100614D50;
  return CloudKitStorage.__allocating_init(containerURL:containerIdentifier:bundleIdentifier:dataStore:databases:containerEnvironment:)(v0[7], 0xD00000000000001ELL, 0x8000000100EDD030, v4, v6, v8, v9, v15);
}

uint64_t sub_100614D50(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 88);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    v8 = v4[7];
    v7 = v4[8];
    v9 = v4[4];
    v10 = v4[2];
    swift_bridgeObjectRelease();
    swift_release();
    v11 = type metadata accessor for CloudStorageService();
    swift_defaultActor_destroy(v10);
    swift_deallocPartialClassInstance(v10, v11, 144, 15);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  else
  {
    v13 = v4[2];
    *(_QWORD *)(v13 + 136) = a1;
    return swift_task_switch(sub_100614E30, v13, 0);
  }
}

uint64_t sub_100614E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 1, 1, v5);
  v7 = sub_100006C64(&qword_1011014A0, v6, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_100E45FC0);
  v8 = (_QWORD *)swift_allocObject(&unk_101083620, 40, 7);
  v8[2] = v4;
  v8[3] = v7;
  v8[4] = v4;
  swift_retain_n(v4, 2);
  sub_100626BC4(v3, (uint64_t)&unk_1011014C8, (uint64_t)v8);
  swift_release();
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100614F18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  id v12;
  unsigned int v13;
  NSString *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t result;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, _BYTE *, uint64_t);
  _BYTE v30[12];
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;

  v2 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v2);
  v4 = &v30[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v30[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v30[-v10];
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v32 = 0x7365547265646E75;
  v33 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v31, &v32, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((v31 & 1) != 0)
  {
    v12 = objc_msgSend(objc_allocWithZone((Class)NSProcessInfo), "init");
    v13 = objc_msgSend(v12, "processIdentifier");

    v32 = 0;
    v33 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    v14 = NSTemporaryDirectory();
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;
    swift_bridgeObjectRelease();

    v32 = v15;
    v33 = v17;
    v18._countAndFlagsBits = 0x2D7473657463782FLL;
    v18._object = (void *)0xE800000000000000;
    String.append(_:)(v18);
    v31 = v13;
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._object = (void *)0x8000000100EDD0F0;
    v20._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v20);
    if (qword_1010E9D60 != -1)
      swift_once(&qword_1010E9D60, sub_10061614C);
    v21 = type metadata accessor for UUID(0);
    sub_10001A9E8(v21, (uint64_t)qword_101101378);
    v22 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    URL.init(fileURLWithPath:isDirectory:)(v32, v33, 1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v25 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    v26 = 1;
    v27 = objc_msgSend(v25, "URLsForDirectory:inDomains:", 5, 1);

    v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v5);
    if (*(_QWORD *)(v28 + 16))
    {
      (*(void (**)(_BYTE *, unint64_t, uint64_t))(v6 + 16))(v4, v28 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v5);
      v26 = 0;
    }
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v26, 1, v5);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_100027CE0((uint64_t)v4);
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000039, 0x8000000100EDD0B0, "searchpartyd/CloudStorageService.swift", 38, 2, 183, 0);
      __break(1u);
    }
    else
    {
      v29 = *(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32);
      v29((uint64_t)v11, v4, v5);
      URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001DLL, 0x8000000100EC5D30, 1);
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
      return v29(a1, v9, v5);
    }
  }
  return result;
}

uint64_t sub_10061536C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 120) = a4;
  return swift_task_switch(sub_100615384, a4, 0);
}

uint64_t sub_100615384()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBD58 + dword_1010EBD58);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBD5C);
    *(_QWORD *)(v0 + 128) = v2;
    *v2 = v0;
    v2[1] = sub_100615468;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100615468(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006154C4, v3, 0);
}

uint64_t sub_1006154C4()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 136))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_1010FC394);
    *(_QWORD *)(v0 + 144) = v2;
    *v2 = v0;
    v2[1] = sub_100615580;
    return sub_10044B510();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = sub_100033220();
    v5 = swift_allocError(&type metadata for DaemonError, v4, 0, 0);
    *v6 = 0xD000000000000012;
    v6[1] = 0x8000000100ED5A80;
    swift_willThrow(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100615580()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  return swift_task_switch(sub_1006155D8, v1, 0);
}

uint64_t sub_1006155D8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CloudKitStorage.startup()
                         + async function pointer to dispatch thunk of CloudKitStorage.startup());
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.startup()
                                  + 1));
  *(_QWORD *)(v0 + 152) = v1;
  *v1 = v0;
  v1[1] = sub_100615638;
  return v3();
}

uint64_t sub_100615638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();
  _QWORD *v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v3 = *(_QWORD **)v1;
  v3[20] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v4 = v3[15];
    v5 = sub_100615760;
  }
  else
  {
    v6 = (_QWORD *)swift_task_alloc(dword_1011014D4);
    v3[21] = v6;
    *v6 = v3;
    v6[1] = sub_1006156C8;
    v4 = v3[15];
    v6[2] = v4;
    v5 = sub_1006157E0;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1006156C8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100615794;
  else
    v4 = sub_10061572C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 120), 0);
}

uint64_t sub_10061572C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100615760()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100615794()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006157C8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1006157E0, v0, 0);
}

uint64_t sub_1006157E0()
{
  uint64_t v0;
  id v1;
  unsigned int v2;
  void *v3;
  id v4;
  NSString v5;
  unsigned __int8 v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v2 = objc_msgSend(v1, "isInternalBuild");

  if (!v2)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = (void *)objc_opt_self(NSUserDefaults);
  *(_QWORD *)(v0 + 24) = v3;
  v4 = objc_msgSend(v3, "standardUserDefaults");
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "BOOLForKey:", v5);

  if ((v6 & 1) != 0)
    return (*(uint64_t (**)(void))(v0 + 8))();
  if (qword_1010E9D58 != -1)
    swift_once(&qword_1010E9D58, sub_100614850);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B7248);
  *(_QWORD *)(v0 + 32) = v9;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Performing one time DB reset migration to Production.", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain();
  v14 = (_QWORD *)swift_task_alloc(v13);
  *(_QWORD *)(v0 + 40) = v14;
  *v14 = v0;
  v14[1] = sub_1006159DC;
  return withTimeout<A>(_:block:)(v14, 0x8155A43676E00000, 6, &unk_1011014E0, *(_QWORD *)(v0 + 16), &type metadata for () + 1);
}

uint64_t sub_1006159DC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 40);
  *(_QWORD *)(*v1 + 48) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 16);
  if (v0)
  {
    v5 = sub_100615CCC;
  }
  else
  {
    swift_release();
    v5 = sub_100615A4C;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100615A4C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v0[7] = *(_QWORD *)(v0[2] + 136);
  v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CloudKitStorage.reset()
                         + async function pointer to dispatch thunk of CloudKitStorage.reset());
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.reset()
                                  + 1));
  v0[8] = v1;
  *v1 = v0;
  v1[1] = sub_100615AB0;
  return v3();
}

uint64_t sub_100615AB0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t (*v7)(unint64_t, unint64_t);

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    return (*(uint64_t (**)(void))(v4 + 8))();
  v7 = (uint64_t (*)(unint64_t, unint64_t))((char *)&async function pointer to dispatch thunk of CloudKitStorage.create(zoneName:)
                                                                  + async function pointer to dispatch thunk of CloudKitStorage.create(zoneName:));
  v6 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.create(zoneName:)
                                  + 1));
  *(_QWORD *)(v2 + 72) = v6;
  *v6 = v4;
  v6[1] = sub_100615B60;
  return v7(0xD000000000000016, 0x8000000100EC76A0);
}

uint64_t sub_100615B60()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return swift_task_switch(sub_100615BC8, *(_QWORD *)(v2 + 16), 0);
}

uint64_t sub_100615BC8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  id v6;
  NSString v7;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Finished one time DB reset migration to Production.", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(void **)(v1 + 24);

  v6 = objc_msgSend(v5, "standardUserDefaults");
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "setBool:forKey:", 1, v7);

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100615CCC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100615D00()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_100615D18, v0, 0);
}

uint64_t sub_100615D18()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CloudKitStorage.isManateeAvailable()
                         + async function pointer to dispatch thunk of CloudKitStorage.isManateeAvailable());
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.isManateeAvailable()
                                  + 1));
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_100615D78;
  return v3();
}

uint64_t sub_100615D78(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_BYTE *)(*(_QWORD *)v1 + 36) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100615DD4, v3, 0);
}

uint64_t sub_100615DD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  int v5;
  uint8_t *v6;

  if (qword_1010E9D58 != -1)
    swift_once(&qword_1010E9D58, sub_100614850);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7248);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(unsigned __int8 *)(v0 + 36);
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67240192;
    *(_DWORD *)(v0 + 32) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 36, v6 + 4, v6 + 8);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Current isManateeAvailable: %{BOOL,public}d", v6, 8u);
    swift_slowDealloc(v6, -1, -1);
  }

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 36));
}

uint64_t sub_100615EF4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[15]);
  swift_release(v0[16]);
  swift_release(v0[17]);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100615F28(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_1011014A0, a2, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService, (uint64_t)&unk_100E45FC0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100615F64(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a2;
  v3 = type metadata accessor for CloudKitStorage.State(0);
  v2[3] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[4] = v4;
  v2[5] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100615FC4, 0, 0);
}

uint64_t sub_100615FC4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[2];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[4] + 104))(v0[5], enum case for CloudKitStorage.State.available(_:), v0[3]);
  return swift_task_switch(sub_100616014, v1, 0);
}

uint64_t sub_100616014()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                      + async function pointer to dispatch thunk of CloudKitStorage.await(state:));
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                  + 1));
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_10061607C;
  return v3(*(_QWORD *)(v0 + 40));
}

uint64_t sub_10061607C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*v1 + 48);
  v3 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100616108, *(_QWORD *)(v3 + 16), 0);
  v5 = *(_QWORD *)(v3 + 40);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 + 32) + 8))(v5, *(_QWORD *)(v3 + 24));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100616108()
{
  _QWORD *v0;

  (*(void (**)(_QWORD, _QWORD))(v0[4] + 8))(v0[5], v0[3]);
  return swift_task_switch(sub_1002176D8, 0, 0);
}

uint64_t sub_10061614C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for UUID(0);
  sub_1000234D8(v0, qword_101101378);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_101101378);
  return UUID.init()(v1);
}

uint64_t sub_100616194()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7260);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7260);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000013, 0x8000000100E45F60);
}

uint64_t sub_100616214()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100616240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1011014C4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  v3[15] = v2;
  return swift_task_switch(sub_100615384, v2, 0);
}

uint64_t sub_1006162A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1011014DC);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004C28;
  return sub_100615F64(a1, v1);
}

uint64_t sub_1006162F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011014E8);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011014E8);
  if (qword_1010E9DC8 != -1)
    swift_once(&qword_1010E9DC8, sub_100618278);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7368);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100616384@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1006163A0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF3B8);
  sub_1000234D8(v0, qword_1011B7278);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7278);
  v1 = sub_1000193A4(&qword_1010F2E28, &qword_1010EF3B8, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x696669746E656469, 0xEA00000000007265, v0, v1);
}

uint64_t sub_100616434()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF408);
  sub_1000234D8(v0, qword_1011B7290);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7290);
  v1 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x657264644163616DLL, 0xEA00000000007373, v0, v1);
}

uint64_t sub_1006164C8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF408);
  sub_1000234D8(v0, qword_1011B72A8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B72A8);
  v1 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000011, 0x8000000100EDD230, v0, v1);
}

uint64_t sub_10061655C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010F2E50);
  sub_1000234D8(v0, qword_1011B72C0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B72C0);
  v1 = sub_1000193A4(&qword_1010F2E58, &qword_1010F2E50, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x754E6C6169726573, 0xEC0000007265626DLL, v0, v1);
}

uint64_t sub_1006165F4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF3B0);
  sub_1000234D8(v0, qword_1011B72D8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B72D8);
  v1 = sub_1000193A4(&qword_1010EF3D8, &qword_1010EF3B0, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x6574614472696170, 0xE800000000000000, v0, v1);
}

uint64_t sub_100616684()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF4D0);
  sub_1000234D8(v0, qword_1011B72F0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B72F0);
  v1 = sub_1000193A4(&qword_101101620, &qword_1010EF4D0, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x6449726F646E6576, 0xE800000000000000, v0, v1);
}

uint64_t sub_100616714()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF4D0);
  sub_1000234D8(v0, qword_1011B7308);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7308);
  v1 = sub_1000193A4(&qword_101101620, &qword_1010EF4D0, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x49746375646F7270, 0xE900000000000064, v0, v1);
}

uint64_t sub_1006167A8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF408);
  sub_1000234D8(v0, qword_1011B7320);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7320);
  v1 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x4B65746176697270, 0xEA00000000007965, v0, v1);
}

uint64_t sub_10061683C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF408);
  sub_1000234D8(v0, qword_1011B7338);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7338);
  v1 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x6553646572616873, 0xEC00000074657263, v0, v1);
}

uint64_t sub_1006168D4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF408);
  sub_1000234D8(v0, qword_1011B7350);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7350);
  v1 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000015, 0x8000000100EDD210, v0, v1);
}

uint64_t sub_100616968(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  NSURL *v29;
  void *v30;
  void *v31;
  unsigned int v32;
  id v33;
  char *v34;
  id v35;
  NSURL *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  unsigned int v42;
  id v43;
  id v44;
  NSURL *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  id v51;
  unsigned int v52;
  id v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  id v64;
  uint64_t v65;
  id v66;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v58 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v58 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v58 - v14;
  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    v61 = v1;
    *(_QWORD *)(a1 + 40) = 0;
    swift_release();
    v63 = v13;
    sub_100616DCC();
    v64 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    if (qword_1010E9D70 != -1)
      swift_once(&qword_1010E9D70, sub_1006162F4);
    v17 = type metadata accessor for Logger(0);
    sub_10001A9E8(v17, (uint64_t)qword_1011014E8);
    v18 = *(uint64_t (**)(char *, char *, uint64_t))(v4 + 16);
    v62 = v15;
    v19 = v18(v7, v15, v3);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = (void *)swift_slowAlloc(32, -1);
      v66 = v23;
      v60 = v10;
      *(_DWORD *)v22 = 136446210;
      v59 = v22 + 4;
      v24 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v25 = dispatch thunk of CustomStringConvertible.description.getter(v3, v24);
      v65 = sub_100016940(v25, v26, (uint64_t *)&v66);
      v10 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v59, v22 + 12);
      swift_bridgeObjectRelease();
      v27 = *(void (**)(char *, uint64_t))(v4 + 8);
      v27(v7, v3);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Purging database: %{public}s", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      v27 = *(void (**)(char *, uint64_t))(v4 + 8);
      v27(v7, v3);
    }

    v28 = v62;
    URL._bridgeToObjectiveC()(v29);
    v31 = v30;
    v66 = 0;
    v32 = objc_msgSend(v64, "removeItemAtURL:error:", v30, &v66);

    v33 = v66;
    v34 = v63;
    if (v32)
    {
      v35 = v66;
    }
    else
    {
      v37 = v66;
      v38 = _convertNSErrorToError(_:)(v33);

      swift_willThrow(v39);
      swift_errorRelease(v38);
    }
    URL._bridgeToObjectiveC()(v36);
    v41 = v40;
    v66 = 0;
    v42 = objc_msgSend(v64, "removeItemAtURL:error:", v40, &v66);

    v43 = v66;
    if (v42)
    {
      v44 = v66;
    }
    else
    {
      v46 = v66;
      v47 = _convertNSErrorToError(_:)(v43);

      swift_willThrow(v48);
      swift_errorRelease(v47);
    }
    URL._bridgeToObjectiveC()(v45);
    v50 = v49;
    v66 = 0;
    v51 = v64;
    v52 = objc_msgSend(v64, "removeItemAtURL:error:", v49, &v66);

    v53 = v66;
    if (v52)
    {
      v54 = v66;

    }
    else
    {
      v55 = v66;
      v56 = _convertNSErrorToError(_:)(v53);

      swift_willThrow(v57);
      swift_errorRelease(v56);
    }
    v27(v10, v3);
    v27(v34, v3);
    return ((uint64_t (*)(char *, uint64_t))v27)(v28, v3);
  }
  return result;
}

uint64_t sub_100616DCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void (*v4)(char *, uint64_t);
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v3);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000013, 0x8000000100EDD190, 0);
  v4 = *(void (**)(char *, uint64_t))(v1 + 8);
  v4(v3, v0);
  sub_1007EC9B8((uint64_t)v3);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017, 0x8000000100EDD1B0, 0);
  v4(v3, v0);
  sub_1007EC9B8((uint64_t)v3);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017, 0x8000000100EDD1D0, 0);
  return ((uint64_t (*)(char *, uint64_t))v4)(v3, v0);
}

void (*sub_100616F18(uint64_t a1, uint64_t a2))(uint64_t, _QWORD *)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void (*result)(uint64_t, _QWORD *);

  if (qword_1010E9D70 != -1)
    swift_once(&qword_1010E9D70, sub_1006162F4);
  v5 = type metadata accessor for Logger(0);
  v6 = (void *)sub_10001A9E8(v5, (uint64_t)qword_1011014E8);
  v7 = sub_100006204(&qword_101101618, type metadata accessor for StandaloneBeaconDatabase, (uint64_t)&unk_100E46098);
  result = static Database.establishConnection(logger:temporary:)(v6, 0, a2, v7);
  if (!v2)
  {
    *(_QWORD *)(a1 + 40) = result;
    return (void (*)(uint64_t, _QWORD *))swift_release();
  }
  return result;
}

void sub_100616FD4(int a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  Swift::String v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  int v33;
  int v34;
  uint64_t v35;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9D70 != -1)
    swift_once(&qword_1010E9D70, sub_1006162F4);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011014E8);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (_DWORD *)swift_slowAlloc(14, -1);
    v32[0] = v9;
    v15 = a3;
    v16 = v14;
    *v14 = 67109376;
    v34 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v14 + 1, v14 + 2);
    *((_WORD *)v16 + 4) = 1024;
    v33 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, (char *)v16 + 10, (char *)v16 + 14);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Migrate schema %d -> %d", (uint8_t *)v16, 0xEu);
    v17 = v16;
    a3 = v15;
    v9 = (char *)v32[0];
    swift_slowDealloc(v17, -1, -1);
  }

  if (a2 == 1)
  {
    v18._countAndFlagsBits = 0xD00000000000001FLL;
    v18._object = (void *)0x8000000100ECBA70;
    Connection.execute(_:)(v18);
    if (!v19)
    {
      v20._object = (void *)0x8000000100ECBA90;
      v20._countAndFlagsBits = 0xD000000000000018;
      Connection.execute(_:)(v20);
      if (!v22)
      {
        v23 = __chkstk_darwin(v21);
        v24 = v32[1];
        v32[-2] = a3;
        v32[-1] = v24;
        v25 = UUID.init()(v23);
        v26 = UUID.uuidString.getter(v25);
        v28 = v27;
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        Connection.savepoint(_:block:)(v26, v28, sub_100618764, &v32[-4]);
        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    v29 = sub_10012C434();
    v30 = swift_allocError(&type metadata for DatabaseError, v29, 0, 0);
    *(_DWORD *)v31 = a2;
    *(_BYTE *)(v31 + 4) = 0;
    swift_willThrow(v30);
  }
}

uint64_t sub_100617298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = Table.create(temporary:ifNotExists:withoutRowid:block:)(0, 0, 0, sub_100617450, 0);
  Connection.run(_:_:)(v1, v2, _swiftEmptyArrayStorage);
  if (v0)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v3 = sub_10001A9A8(&qword_1010EF3C8);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100E22B00;
  if (qword_1010E9D78 != -1)
    swift_once(&qword_1010E9D78, sub_1006163A0);
  v5 = sub_10001A9A8(&qword_1010EF3B8);
  v6 = sub_10001A9E8(v5, (uint64_t)qword_1011B7278);
  *(_QWORD *)(v4 + 56) = v5;
  *(_QWORD *)(v4 + 64) = sub_1000193A4(&qword_1010EF3C0, &qword_1010EF3B8, (const char *)&protocol conformance descriptor for Expression<A>);
  v7 = sub_100018F08((_QWORD *)(v4 + 32));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v7, v6, v5);
  v8 = Table.createIndex(_:unique:ifNotExists:)(v4, 1, 0);
  v10 = v9;
  swift_bridgeObjectRelease();
  Connection.run(_:_:)(v8, v10, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_100617450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v53;
  char *v54;
  void (*v55)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v62 = sub_10001A9A8(&qword_1010EF4E0);
  v59 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v61 = (char *)&v53 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_10001A9A8(&qword_1010EF358);
  v1 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v60 = (char *)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101101628);
  __chkstk_darwin(v3);
  v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_101101630);
  __chkstk_darwin(v6);
  v54 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010F2ED0);
  __chkstk_darwin(v8);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010F2EA0);
  __chkstk_darwin(v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010F2EB8);
  __chkstk_darwin(v14);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010F2EC0);
  __chkstk_darwin(v17);
  v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9D78 != -1)
    swift_once(&qword_1010E9D78, sub_1006163A0);
  v20 = sub_10001A9A8(&qword_1010EF3B8);
  v21 = sub_10001A9E8(v20, (uint64_t)qword_1011B7278);
  v58 = v1;
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
  v22(v19, 1, 1, v63);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v16, 1, 1, v20);
  v23 = type metadata accessor for UUID(0);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v21, 0, v19, v16, v23, &protocol witness table for UUID);
  sub_100004048((uint64_t)v16, &qword_1010F2EB8);
  sub_100004048((uint64_t)v19, &qword_1010F2EC0);
  if (qword_1010E9D80 != -1)
    swift_once(&qword_1010E9D80, sub_100616434);
  v24 = sub_10001A9A8(&qword_1010EF408);
  v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B7290);
  v22(v19, 1, 1, v63);
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
  v26(v13, 1, 1, v24);
  v57 = v25;
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v25, 0, v19, v13, &type metadata for Data, &protocol witness table for Data);
  sub_100004048((uint64_t)v13, &qword_1010F2EA0);
  sub_100004048((uint64_t)v19, &qword_1010F2EC0);
  if (qword_1010E9D88 != -1)
    swift_once(&qword_1010E9D88, sub_1006164C8);
  v27 = sub_10001A9E8(v24, (uint64_t)qword_1011B72A8);
  v22(v19, 1, 1, v63);
  v55 = v26;
  v26(v13, 1, 1, v24);
  v56 = v27;
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v27, 0, v19, v13, &type metadata for Data, &protocol witness table for Data);
  sub_100004048((uint64_t)v13, &qword_1010F2EA0);
  sub_100004048((uint64_t)v19, &qword_1010F2EC0);
  if (qword_1010E9D90 != -1)
    swift_once(&qword_1010E9D90, sub_10061655C);
  v28 = sub_10001A9A8(&qword_1010F2E50);
  v29 = sub_10001A9E8(v28, (uint64_t)qword_1011B72C0);
  v22(v19, 1, 1, v63);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v10, 1, 1, v28);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v29, 0, v19, v10, &type metadata for String, &protocol witness table for String);
  sub_100004048((uint64_t)v10, &qword_1010F2ED0);
  sub_100004048((uint64_t)v19, &qword_1010F2EC0);
  if (qword_1010E9D98 != -1)
    swift_once(&qword_1010E9D98, sub_1006165F4);
  v30 = sub_10001A9A8(&qword_1010EF3B0);
  v31 = sub_10001A9E8(v30, (uint64_t)qword_1011B72D8);
  v22(v19, 1, 1, v63);
  v32 = (uint64_t)v54;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v54, 1, 1, v30);
  v33 = type metadata accessor for Date(0);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v31, 0, v19, v32, v33, &protocol witness table for Date);
  sub_100004048(v32, (uint64_t *)&unk_101101630);
  sub_100004048((uint64_t)v19, &qword_1010F2EC0);
  if (qword_1010E9DA0 != -1)
    swift_once(&qword_1010E9DA0, sub_100616684);
  v34 = sub_10001A9A8(&qword_1010EF4D0);
  v35 = sub_10001A9E8(v34, (uint64_t)qword_1011B72F0);
  v22(v19, 1, 1, v63);
  v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56);
  v36(v5, 1, 1, v34);
  v37 = sub_10012C6D4();
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v35, 0, v19, v5, &type metadata for UInt32, v37);
  sub_100004048((uint64_t)v5, &qword_101101628);
  sub_100004048((uint64_t)v19, &qword_1010F2EC0);
  if (qword_1010E9DA8 != -1)
    swift_once(&qword_1010E9DA8, sub_100616714);
  v38 = sub_10001A9E8(v34, (uint64_t)qword_1011B7308);
  v22(v19, 1, 1, v63);
  v36(v5, 1, 1, v34);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v38, 0, v19, v5, &type metadata for UInt32, v37);
  sub_100004048((uint64_t)v5, &qword_101101628);
  sub_100004048((uint64_t)v19, &qword_1010F2EC0);
  if (qword_1010E9DB0 != -1)
    swift_once(&qword_1010E9DB0, sub_1006167A8);
  v39 = sub_10001A9E8(v24, (uint64_t)qword_1011B7320);
  v22(v19, 1, 1, v63);
  v40 = v55;
  v55(v13, 1, 1, v24);
  v54 = (char *)v39;
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v39, 0, v19, v13, &type metadata for Data, &protocol witness table for Data);
  sub_100004048((uint64_t)v13, &qword_1010F2EA0);
  sub_100004048((uint64_t)v19, &qword_1010F2EC0);
  if (qword_1010E9DB8 != -1)
    swift_once(&qword_1010E9DB8, sub_10061683C);
  v41 = sub_10001A9E8(v24, (uint64_t)qword_1011B7338);
  v22(v19, 1, 1, v63);
  v40(v13, 1, 1, v24);
  v53 = v41;
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v41, 0, v19, v13, &type metadata for Data, &protocol witness table for Data);
  sub_100004048((uint64_t)v13, &qword_1010F2EA0);
  sub_100004048((uint64_t)v19, &qword_1010F2EC0);
  if (qword_1010E9DC0 != -1)
    swift_once(&qword_1010E9DC0, sub_1006168D4);
  v42 = sub_10001A9E8(v24, (uint64_t)qword_1011B7350);
  v43 = v63;
  v22(v19, 1, 1, v63);
  v40(v13, 1, 1, v24);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v42, 0, v19, v13, &type metadata for Data, &protocol witness table for Data);
  sub_100004048((uint64_t)v13, &qword_1010F2EA0);
  sub_100004048((uint64_t)v19, &qword_1010F2EC0);
  v44 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  v45 = v61;
  v46 = ExpressionType<>.length.getter(v24, v44);
  v64 = static MACAddress.length.getter(v46);
  v47 = v60;
  == infix<A>(_:_:)(v45, &v64, &type metadata for Int, &protocol witness table for Int, &protocol witness table for Int64);
  v48 = *(void (**)(char *, uint64_t))(v59 + 8);
  v49 = v62;
  v48(v45, v62);
  TableBuilder.check(_:)(v47);
  v50 = *(void (**)(char *, uint64_t))(v58 + 8);
  v50(v47, v43);
  v51 = ExpressionType<>.length.getter(v24, v44);
  v64 = static MACAddress.length.getter(v51);
  == infix<A>(_:_:)(v45, &v64, &type metadata for Int, &protocol witness table for Int, &protocol witness table for Int64);
  v48(v45, v49);
  TableBuilder.check(_:)(v47);
  v50(v47, v43);
  ExpressionType<>.length.getter(v24, v44);
  v64 = 85;
  == infix<A>(_:_:)(v45, &v64, &type metadata for Int, &protocol witness table for Int, &protocol witness table for Int64);
  v48(v45, v49);
  TableBuilder.check(_:)(v47);
  v50(v47, v43);
  ExpressionType<>.length.getter(v24, v44);
  v64 = 32;
  == infix<A>(_:_:)(v45, &v64, &type metadata for Int, &protocol witness table for Int, &protocol witness table for Int64);
  v48(v45, v49);
  TableBuilder.check(_:)(v47);
  return ((uint64_t (*)(char *, uint64_t))v50)(v47, v43);
}

uint64_t sub_100617F88()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[3]);
  swift_release(v0[5]);
  v1 = (char *)v0 + OBJC_IVAR____TtC12searchpartyd24StandaloneBeaconDatabase_standaloneBeacon;
  v2 = type metadata accessor for Table(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100617FE8()
{
  return type metadata accessor for StandaloneBeaconDatabase(0);
}

uint64_t type metadata accessor for StandaloneBeaconDatabase(uint64_t a1)
{
  uint64_t result;

  result = qword_101101528;
  if (!qword_101101528)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StandaloneBeaconDatabase);
  return result;
}

uint64_t sub_10061802C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = (char *)&value witness table for Builtin.Int32 + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = &unk_100E46040;
  v4[3] = &unk_100E46040;
  v4[4] = &unk_100E46058;
  result = type metadata accessor for Table(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1006180CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1006184C8, v0, v1, &type metadata for () + 1, v2);
  return v4;
}

uint64_t sub_100618134()
{
  return sub_100618314();
}

uint64_t sub_100618148()
{
  return sub_100616DCC();
}

void sub_10061815C(int a1, int a2, uint64_t a3)
{
  sub_100616FD4(a1, a2, a3);
}

uint64_t sub_100618170(uint64_t a1, uint64_t a2)
{
  return sub_1006181A8(a1, a2, (uint64_t)sub_1006182FC);
}

uint64_t sub_10061818C(uint64_t a1, uint64_t a2)
{
  return sub_1006181A8(a1, a2, (uint64_t)sub_100618260);
}

uint64_t sub_1006181A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  _QWORD v7[4];

  v5 = v3[3];
  v7[3] = *v3;
  return OSAllocatedUnfairLock.callAsFunction<A>(_:)(a3, v7, v5, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8);
}

uint64_t sub_1006181E8(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(aI_73, a1);
  return Database.description.getter(a1, WitnessTable);
}

uint64_t sub_100618224(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204(&qword_1010F2E78, type metadata accessor for StandaloneBeaconDatabase, (uint64_t)&unk_100E46070);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void (*sub_100618260())(uint64_t, _QWORD *)
{
  uint64_t v0;

  return sub_100616F18(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100618278()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7368);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7368);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000018, 0x8000000100E46000);
}

uint64_t sub_1006182FC()
{
  uint64_t v0;

  return sub_100616968(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100618314()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD v12[2];

  v2 = type metadata accessor for Keychain.DataProtectionClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = static Keychain.data(account:service:)(0x6170686372616573, 0xEB00000000797472, 0xD000000000000010);
  if (!v1)
  {
    if (v7 >> 60 == 15)
    {
      v0 = static Data.random(bytes:)(32);
      v9 = v8;
      v12[0] = v0;
      v12[1] = v8;
      (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Keychain.DataProtectionClass.c(_:), v2);
      sub_10001BBBC(v0, v9);
      v10 = sub_100035530();
      static Keychain.set<A>(data:account:service:dataProtectionClass:)(v12, 0x6170686372616573, 0xEB00000000797472, 0xD000000000000010, 0x8000000100EDD1F0, v5, &type metadata for Data, v10);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      sub_10001BC14(v0, v9);
    }
    else
    {
      return v6;
    }
  }
  return v0;
}

uint64_t sub_1006184C8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 40);
  *a1 = v2;
  return swift_retain(v2);
}

uint64_t sub_1006184E4()
{
  static Keychain.deleteData(account:service:)(0x6170686372616573, 0xEB00000000797472, 0xD000000000000010, 0x8000000100EDD1F0);
  return 1;
}

uint64_t sub_100618764()
{
  return sub_100617298();
}

Swift::Int sub_10061877C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD00000000000002ELL, 0x8000000100EC34D0);
  return Hasher._finalize()();
}

uint64_t sub_1006187D0(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD00000000000002ELL, 0x8000000100EC34D0);
}

Swift::Int sub_1006187EC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD00000000000002ELL, 0x8000000100EC34D0);
  return Hasher._finalize()();
}

uint64_t sub_10061883C@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104B080, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_10061888C(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000002ELL;
  a1[1] = 0x8000000100EC34D0;
}

uint64_t sub_100618950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 120) = a4;
  *(_QWORD *)(v5 + 128) = a5;
  return swift_task_switch(sub_100618968, 0, 0);
}

uint64_t sub_100618968()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB88 + dword_1010EBB88);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB8C);
    *(_QWORD *)(v0 + 136) = v2;
    *v2 = v0;
    v2[1] = sub_100618A4C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100618A4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100618AA8, 0, 0);
}

uint64_t sub_100618AA8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void (*v7)(_QWORD, uint64_t);

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 144))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_101103F64);
    *(_QWORD *)(v0 + 152) = v2;
    *v2 = v0;
    v2[1] = sub_100618B90;
    return sub_1006B1EAC(0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = sub_100033220();
    v5 = swift_allocError(&type metadata for DaemonError, v4, 0, 0);
    *v6 = 0xD00000000000001DLL;
    v6[1] = 0x8000000100EC5EF0;
    swift_willThrow(v5);
    v7 = *(void (**)(_QWORD, uint64_t))(v0 + 120);
    swift_errorRetain(v5);
    v7(0, v5);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100618B90(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 152);
  *(_QWORD *)(*v2 + 160) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100618C58;
  }
  else
  {
    *(_QWORD *)(v4 + 168) = a1;
    v6 = sub_100618C04;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100618C04()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 144);
  (*(void (**)(void *, _QWORD))(v0 + 120))(v1, 0);
  swift_release(v2);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100618C58()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_QWORD, uint64_t);

  swift_release(*(_QWORD *)(v0 + 144));
  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(void (**)(_QWORD, uint64_t))(v0 + 120);
  swift_errorRetain(v1);
  v2(0, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100618D68()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SchedulerTrampoline();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SchedulerTrampoline()
{
  return objc_opt_self(_TtC12searchpartydP33_8F16B571022752B5A0333344EAF60C1619SchedulerTrampoline);
}

id sub_100618DBC()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 48);
  if (v1)
  {
    v2 = *(id *)(v0 + 48);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SchedulerTrampoline()), "init");
    v4 = *(void **)(v0 + 48);
    *(_QWORD *)(v0 + 48) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

uint64_t sub_100618E24()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  _QWORD *v19;
  _QWORD aBlock[6];

  v1 = *v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v18 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = PressuredExitTransactionManager.begin(_:)("com.apple.icloud.searchpartyd.schedulerservice.startup", 54, 2);
  v17[1] = v0[4];
  v10 = (_QWORD *)swift_allocObject(&unk_101083768, 40, 7);
  v10[2] = v0;
  v10[3] = v9;
  v10[4] = v1;
  aBlock[4] = sub_1006197A4;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101083780;
  v11 = _Block_copy(aBlock);
  swift_retain();
  v12 = swift_retain();
  static DispatchQoS.unspecified.getter(v12);
  v19 = _swiftEmptyArrayStorage;
  v13 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v15 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v14, v15, v2, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v11);
  _Block_release(v11);
  swift_release();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

uint64_t sub_10061904C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v12;

  v2 = type metadata accessor for MachServiceName(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for XPCServiceDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MachServiceName.init(_:)(0xD000000000000027, 0x8000000100EDD310);
  v9 = sub_100618DBC();
  if (qword_1010E9DD0 != -1)
    swift_once(&qword_1010E9DD0, sub_1006191B4);
  v10 = (id)qword_101101640;
  swift_retain();
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:shouldAccept:interruptionHandler:invalidationHandler:)(v4, 0, v9, v10, sub_1006197B0, a1, 0, 0, 0, 0);
  XPCSessionManager.register(service:)(v8);
  Transaction.end()();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1006191B4()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL___SPSchedulerXPCProtocol);
  v1 = sub_1007B6904();
  v2 = swift_allocObject(v1, ((*(unsigned int *)(v1 + 48) + 7) & 0x1FFFFFFF8) + 8, *(unsigned __int16 *)(v1 + 52) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v2 + 32) = sub_10000F4A0(0, (unint64_t *)&unk_101101790, SPSchedulerInformation_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v2, "schedulePublishWakeWithInformation:completion:", 0, 0);
  result = swift_bridgeObjectRelease();
  qword_101101640 = (uint64_t)v0;
  return result;
}

uint64_t sub_100619270(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t v10;

  v3 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA280 != -1)
    swift_once(&qword_1010EA280, sub_100B5DBB0);
  v4 = qword_1011B7D60;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v6 = swift_allocObject(v5, 112, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E22B10;
  v8 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 64) = sub_10001AA00();
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v7;
  *(_QWORD *)(v6 + 96) = sub_10000F4A0(0, (unint64_t *)&unk_101101770, NSXPCConnection_ptr);
  *(_QWORD *)(v6 + 104) = sub_100159FB0();
  *(_QWORD *)(v6 + 72) = a1;
  swift_bridgeObjectRetain(v7);
  v9 = a1;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "in custom shouldAccept (%@) for %@", 34, 2, v6);
  swift_bridgeObjectRelease();
  v10 = sub_100619734();
  return NSXPCConnection.hasEntitlement<A>(_:)(v10, &type metadata for SchedulerEntitlement, v10) & 1;
}

uint64_t sub_100619398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  v1 = v0 + OBJC_IVAR____TtC12searchpartyd16SchedulerService_transactionManager;
  v2 = type metadata accessor for PressuredExitTransactionManager(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100619408()
{
  return type metadata accessor for SchedulerService(0);
}

uint64_t type metadata accessor for SchedulerService(uint64_t a1)
{
  uint64_t result;

  result = qword_1011016A0;
  if (!qword_1011016A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SchedulerService);
  return result;
}

uint64_t sub_10061944C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_100E46138;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = &unk_100E46150;
  result = type metadata accessor for PressuredExitTransactionManager(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

_QWORD *sub_1006194E8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = 0xD000000000000010;
  v1[3] = 0x8000000100E46100;
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v12 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v8);
  static DispatchQoS.unspecified.getter(v12);
  v20 = _swiftEmptyArrayStorage;
  v13 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v15 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v14, v15, v2, v13);
  v1[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002FLL, 0x8000000100EDD340, v7, v4, v11, 0);
  v16 = type metadata accessor for XPCSessionManager(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v17 = XPCSessionManager.init(name:)(0xD000000000000010, 0x8000000100E46100);
  v1[5] = v17;
  v1[6] = 0;
  PressuredExitTransactionManager.init()(v17);
  return v1;
}

uint64_t sub_100619714()
{
  return sub_100618E24();
}

unint64_t sub_100619734()
{
  unint64_t result;

  result = qword_101101780;
  if (!qword_101101780)
  {
    result = swift_getWitnessTable(byte_100E462F0, &type metadata for SchedulerEntitlement);
    atomic_store(result, (unint64_t *)&qword_101101780);
  }
  return result;
}

uint64_t sub_100619778()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1006197A4()
{
  uint64_t v0;

  return sub_10061904C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1006197B4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1006197D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v23[4];

  v4 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v4);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  v9 = (_QWORD *)swift_allocObject(&unk_1010837E0, 48, 7);
  v9[2] = 0;
  v10 = v9 + 2;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  v11 = swift_retain();
  if ((_DWORD)a1 == 1)
  {
    sub_10012FC44((uint64_t)v6);
    v12 = 0;
    v13 = 0;
    v14 = 7168;
  }
  else
  {
    v15 = TaskPriority.rawValue.getter(v11);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    v14 = v15 | 0x1C00;
    v16 = *v10;
    if (*v10)
    {
      v17 = v9[3];
      ObjectType = swift_getObjectType(*v10);
      swift_unknownObjectRetain(v16);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v17);
      v13 = v19;
      swift_unknownObjectRelease(v16);
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
  }
  v20 = swift_allocObject(&unk_101083808, 32, 7);
  *(_QWORD *)(v20 + 16) = &unk_1011017A8;
  *(_QWORD *)(v20 + 24) = v9;
  if (v13 | v12)
  {
    v23[0] = 0;
    v23[1] = 0;
    v21 = v23;
    v23[2] = v12;
    v23[3] = v13;
  }
  else
  {
    v21 = 0;
  }
  swift_task_create(v14, v21, &type metadata for () + 1, &unk_1010EE4A0, v20);
  return swift_release();
}

uint64_t sub_1006199AC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1006199D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1011017A4);
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004C28;
  *(_OWORD *)(v2 + 120) = v3;
  return swift_task_switch(sub_100618968, 0, 0);
}

uint64_t sub_100619A38()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100619A5C()
{
  unint64_t result;

  result = qword_1011017B8;
  if (!qword_1011017B8)
  {
    result = swift_getWitnessTable(byte_100E462B0, &type metadata for SchedulerTrampoline.Error);
    atomic_store(result, (unint64_t *)&qword_1011017B8);
  }
  return result;
}

ValueMetadata *type metadata accessor for SchedulerTrampoline.Error()
{
  return &type metadata for SchedulerTrampoline.Error;
}

uint64_t _s12searchpartyd19SchedulerTrampolineC5ErrorOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100619AF4 + 4 * byte_100E460D0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100619B14 + 4 * byte_100E460D5[v4]))();
}

_BYTE *sub_100619AF4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100619B14(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100619B1C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100619B24(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100619B2C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100619B34(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SchedulerEntitlement()
{
  return &type metadata for SchedulerEntitlement;
}

unint64_t sub_100619B54()
{
  unint64_t result;

  result = qword_1011017C0;
  if (!qword_1011017C0)
  {
    result = swift_getWitnessTable(aY_44, &type metadata for SchedulerEntitlement);
    atomic_store(result, (unint64_t *)&qword_1011017C0);
  }
  return result;
}

unint64_t sub_100619B9C()
{
  unint64_t result;

  result = qword_1011017C8;
  if (!qword_1011017C8)
  {
    result = swift_getWitnessTable(byte_100E46288, &type metadata for SchedulerTrampoline.Error);
    atomic_store(result, (unint64_t *)&qword_1011017C8);
  }
  return result;
}

unint64_t sub_100619BE4()
{
  unint64_t result;

  result = qword_1011017D0;
  if (!qword_1011017D0)
  {
    result = swift_getWitnessTable(byte_100E461A8, &type metadata for SchedulerEntitlement);
    atomic_store(result, (unint64_t *)&qword_1011017D0);
  }
  return result;
}

uint64_t sub_100619C28()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 200) = v0;
  return swift_task_switch(sub_100619C40, v0, 0);
}

uint64_t sub_100619C40()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t (__cdecl *v7)();

  swift_retain();
  v1 = sub_1007C8248(0, 1, 1, _swiftEmptyArrayStorage);
  v3 = v1[2];
  v2 = v1[3];
  if (v3 >= v2 >> 1)
    v1 = sub_1007C8248((_QWORD *)(v2 > 1), v3 + 1, 1, v1);
  *(_QWORD *)(v0 + 208) = v1;
  v4 = *(_QWORD *)(v0 + 200);
  *(_QWORD *)(v0 + 40) = type metadata accessor for DeviceBeaconPayloadPublisher();
  *(_QWORD *)(v0 + 48) = &off_101083A10;
  *(_QWORD *)(v0 + 16) = v4;
  v1[2] = v3 + 1;
  sub_10000F9FC((__int128 *)(v0 + 16), (uint64_t)&v1[5 * v3 + 4]);
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 56);
    sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    v7 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC18 + dword_1010EBC18);
    v6 = (_QWORD *)swift_task_alloc(unk_1010EBC1C);
    *(_QWORD *)(v0 + 216) = v6;
    *v6 = v0;
    v6[1] = sub_100619DC8;
    return v7();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100619DC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100619E28, v3, 0);
}

uint64_t sub_100619E28()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  v1 = (_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 224);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 208);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = *(_QWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 24);
    swift_retain();
    v6 = *(_QWORD **)(v0 + 208);
    if (v4 >= v5 >> 1)
      v6 = sub_1007C8248((_QWORD *)(v5 > 1), v4 + 1, 1, *(_QWORD **)(v0 + 208));
    *(_QWORD *)(v0 + 160) = type metadata accessor for PencilPairingService(0);
    *(_QWORD *)(v0 + 168) = &off_1010A0EA0;
    *(_QWORD *)(v0 + 136) = v2;
    v6[2] = v4 + 1;
    sub_10000F9FC((__int128 *)(v0 + 136), (uint64_t)&v6[5 * v4 + 4]);
    swift_release();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v6 = *(_QWORD **)(v0 + 208);
  }
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v6);
}

uint64_t sub_100619F00@<X0>(uint64_t a1@<X8>)
{
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "objectForKey:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v9, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100005CF0((uint64_t)v9, (uint64_t)v10, (uint64_t *)&unk_1010F6390);
  if (v11)
  {
    v5 = type metadata accessor for Date(0);
    v6 = swift_dynamicCast(a1, v10, (char *)&type metadata for Any + 8, v5, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010F6390);
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t sub_10061A054()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[3] = v0;
  v2 = type metadata accessor for ClientOrigin(0);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RequestOrigin(0);
  v1[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10061A0D4, v0, 0);
}

uint64_t sub_10061A0D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[6];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[5] + 104))(v1, enum case for ClientOrigin.other(_:), v0[4]);
  RequestOrigin.init(_:)(v1);
  v2 = type metadata accessor for Session(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = (_QWORD *)swift_task_alloc(async function pointer to Session.init(_:)[1]);
  v0[8] = v3;
  *v3 = v0;
  v3[1] = sub_10061A168;
  return Session.init(_:)(v0[7]);
}

uint64_t sub_10061A168(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v3 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 72) = a1;
  swift_task_dealloc(v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to Session.isMyLocationEnabled(cached:)[1]);
  *(_QWORD *)(v6 + 80) = v4;
  *v4 = v6;
  v4[1] = sub_10061A1D8;
  return Session.isMyLocationEnabled(cached:)(1);
}

uint64_t sub_10061A1D8(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 80);
  *(_BYTE *)(v3 + 100) = a1;
  *(_QWORD *)(v3 + 88) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = *(_QWORD *)(v3 + 24);
    v6 = sub_10061A38C;
  }
  else
  {
    v7 = *(_QWORD *)(v3 + 24);
    swift_release();
    v6 = sub_10061A258;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_10061A258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  int v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (qword_1010EA620 != -1)
    swift_once(&qword_1010EA620, sub_100DC7BE8);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B8520);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(unsigned __int8 *)(v0 + 100);
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67109120;
    *(_DWORD *)(v0 + 96) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 100, v6 + 4, v6 + 8);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Result of SML returning %{BOOL}d.", v6, 8u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(unsigned __int8 *)(v0 + 100);
  v8 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_10061A38C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_release();
  if (qword_1010EA620 != -1)
    swift_once(&qword_1010EA620, sub_100DC7BE8);
  v1 = *(_QWORD *)(v0 + 88);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B8520);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 88);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Result of SML unknown, returning false due to error %{public}@.", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 88));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v12 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

_QWORD *sub_10061A574(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v32;
  uint64_t v33;
  _UNKNOWN **v34;
  _UNKNOWN **v35;

  v2 = v1;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OwnedDeviceSubmitEndpoint(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v32 - v11;
  swift_defaultActor_initialize(v2);
  v2[14] = 0xD00000000000001CLL;
  v2[15] = 0x8000000100E46330;
  v13 = enum case for FMNAccountType.searchParty(_:);
  v14 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v12, v13, v14);
  sub_10024F5A4((uint64_t)&v12[*(int *)(v7 + 20)]);
  v15 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v16 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v6, 1, 1, v16);
  v17 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v6);
  v18 = type metadata accessor for ServerInteractionController(0);
  v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  sub_10005972C((uint64_t)v12, (uint64_t)v10, type metadata accessor for OwnedDeviceSubmitEndpoint);
  v20 = sub_10041D864((uint64_t)v10, v17, v19);
  sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedDeviceSubmitEndpoint);
  v2[17] = v20;
  v21 = type metadata accessor for DeviceIdentityUtility(0);
  v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  swift_defaultActor_initialize(v22);
  v23 = v22 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  v24 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  *(_QWORD *)(v22 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(_QWORD *)(v22 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v22 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 2;
  v2[18] = v22;
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v25 = qword_1011B7160;
  v26 = type metadata accessor for BeaconObservationStore(0);
  v34 = &off_10107F6C8;
  v35 = &off_101059408;
  v33 = v26;
  *(_QWORD *)&v32 = v25;
  v27 = type metadata accessor for MemberCircleRevokeManager();
  v28 = swift_allocObject(v27, 80, 7);
  *(_QWORD *)(v28 + 24) = 0;
  swift_unknownObjectWeakInit(v28 + 16, 0);
  sub_100057E20(&v32, (_OWORD *)(v28 + 32));
  v2[19] = v28;
  v29 = type metadata accessor for MemberCircleRevokeAssistant();
  v30 = swift_allocObject(v29, 16, 7);
  v2[20] = v30;
  v2[16] = a1;
  *(_QWORD *)(v28 + 24) = &off_1010B7188;
  swift_unknownObjectWeakAssign(v28 + 16, v30);
  swift_retain();
  return v2;
}

uint64_t sub_10061A894()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1[30] = v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  v1[31] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EA690) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[32] = swift_task_alloc(v3);
  v1[33] = swift_task_alloc(v3);
  v4 = type metadata accessor for Date(0);
  v1[34] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[35] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[36] = swift_task_alloc(v6);
  v1[37] = swift_task_alloc(v6);
  return swift_task_switch(sub_10061A95C, v0, 0);
}

uint64_t sub_10061A95C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;

  if (qword_1010EA620 != -1)
    swift_once(&qword_1010EA620, sub_100DC7BE8);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B8520);
  v0[38] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Start publishing own device beacons.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v0[37];

  static Date.trustedNow.getter(v6);
  v7 = (_QWORD *)swift_task_alloc(dword_101101834);
  v0[39] = v7;
  *v7 = v0;
  v7[1] = sub_10061AA68;
  return sub_1006227B0();
}

uint64_t sub_10061AA68()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 312);
  *(_QWORD *)(*v1 + 320) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10061BE44;
  else
    v4 = sub_10061AACC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 240), 0);
}

uint64_t sub_10061AACC(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Local disk fetch completed.", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = v1[34];
  v6 = v1[35];
  v7 = v1[33];

  sub_100619F00(v7);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5);
  v9 = v1[36];
  if (v8 == 1)
  {
    v10 = v1[33];
    static Date.distantPast.getter(v9);
    sub_100004048(v10, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[35] + 32))(v9, v1[33], v1[34]);
  }
  v11 = (_QWORD *)swift_task_alloc(dword_10110180C);
  v1[41] = v11;
  *v11 = v1;
  v11[1] = sub_10061AC04;
  v12 = v1[30];
  v11[25] = v12;
  return swift_task_switch(sub_100619C40, v12, 0);
}

uint64_t sub_10061AC04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 328);
  v3[42] = a1;
  v3[43] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10061BEC0;
  else
    v5 = sub_10061AC70;
  return swift_task_switch(v5, v3[30], 0);
}

uint64_t sub_10061AC70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  int *v20;

  v0[24] = _swiftEmptyArrayStorage;
  v1 = v0[42];
  v2 = *(_QWORD *)(v1 + 16);
  v0[44] = v2;
  if (v2)
  {
    v0[45] = 0;
    sub_100030784(v1 + 32, (uint64_t)(v0 + 7));
    v3 = v0[10];
    v4 = v0[11];
    sub_10001AA44(v0 + 7, v3);
    v5 = *(int **)(v4 + 8);
    v20 = (int *)((char *)v5 + *v5);
    v6 = (_QWORD *)swift_task_alloc(v5[1]);
    v0[46] = v6;
    *v6 = v0;
    v6[1] = sub_10061AF3C;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v20)(v0[36], v3, v4);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v11 = 134217984;
      v0[29] = _swiftEmptyArrayStorage[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 29, v0 + 30, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Got %ld payloads to publish for own devices.", v11, 0xCu);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    swift_beginAccess(v0 + 24, v0 + 17, 0, 0);
    v12 = v0[24];
    v0[49] = v12;
    if (*(_QWORD *)(v12 + 16))
    {
      v13 = dword_10110196C;
      swift_bridgeObjectRetain(v12);
      v14 = (_QWORD *)swift_task_alloc(v13);
      v0[50] = v14;
      *v14 = v0;
      v14[1] = sub_10061B2AC;
      return sub_10061C60C(v12);
    }
    else
    {
      v15 = swift_bridgeObjectRelease();
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.default.getter(v16);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "No observations to publish for owned devices.", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

      v0[52] = 0;
      v19 = (_QWORD *)swift_task_alloc(dword_101101814);
      v0[53] = v19;
      *v19 = v0;
      v19[1] = sub_10061B460;
      return sub_10061A054();
    }
  }
}

uint64_t sub_10061AF3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 368);
  *(_QWORD *)(*v2 + 376) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 240);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = sub_10061BF4C;
    v8 = v6;
  }
  else
  {
    v8 = *(_QWORD *)(v4 + 240);
    *(_QWORD *)(v4 + 384) = a1;
    v7 = sub_10061AFC8;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_10061AFC8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD *v21;
  int *v22;

  v1 = v0[44];
  v2 = v0[45] + 1;
  sub_100302754(v0[48]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    v3 = v0[24];
    swift_bridgeObjectRetain(v3);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v7 = 134217984;
      v0[29] = *(_QWORD *)(v3 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 29, v0 + 30, v7 + 4, v7 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Got %ld payloads to publish for own devices.", v7, 0xCu);
      swift_slowDealloc(v7, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    swift_beginAccess(v0 + 24, v0 + 17, 0, 0);
    v14 = v0[24];
    v0[49] = v14;
    if (*(_QWORD *)(v14 + 16))
    {
      v15 = dword_10110196C;
      swift_bridgeObjectRetain(v14);
      v16 = (_QWORD *)swift_task_alloc(v15);
      v0[50] = v16;
      *v16 = v0;
      v16[1] = sub_10061B2AC;
      return sub_10061C60C(v14);
    }
    else
    {
      v17 = swift_bridgeObjectRelease();
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.default.getter(v18);
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "No observations to publish for owned devices.", v20, 2u);
        swift_slowDealloc(v20, -1, -1);
      }

      v0[52] = 0;
      v21 = (_QWORD *)swift_task_alloc(dword_101101814);
      v0[53] = v21;
      *v21 = v0;
      v21[1] = sub_10061B460;
      return sub_10061A054();
    }
  }
  else
  {
    v8 = v0[45] + 1;
    v0[45] = v8;
    sub_100030784(v0[42] + 40 * v8 + 32, (uint64_t)(v0 + 7));
    v9 = v0[10];
    v10 = v0[11];
    sub_10001AA44(v0 + 7, v9);
    v11 = *(int **)(v10 + 8);
    v22 = (int *)((char *)v11 + *v11);
    v12 = (_QWORD *)swift_task_alloc(v11[1]);
    v0[46] = v12;
    *v12 = v0;
    v12[1] = sub_10061AF3C;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v22)(v0[36], v9, v10);
  }
}

uint64_t sub_10061B2AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 400);
  *(_QWORD *)(*v1 + 408) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 240);
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    v5 = sub_10061BFE4;
  }
  else
  {
    v5 = sub_10061B330;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10061B330()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[24];
  swift_bridgeObjectRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v5 = 134217984;
    v6 = *(_QWORD *)(v1 + 16);
    swift_bridgeObjectRelease();
    v0[28] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 28, v0 + 29, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Completed publish of %ld own device payloads.", v5, 0xCu);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v1, 2);
  }

  v0[52] = 0;
  v7 = (_QWORD *)swift_task_alloc(dword_101101814);
  v0[53] = v7;
  *v7 = v0;
  v7[1] = sub_10061B460;
  return sub_10061A054();
}

uint64_t sub_10061B460(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 424);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_BYTE *)(*(_QWORD *)v1 + 488) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10061B4C0, v3, 0);
}

uint64_t sub_10061B4C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);

  if ((*(_BYTE *)(v0 + 488) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 416);
    if (v1)
    {
      v2 = swift_errorRetain(*(_QWORD *)(v0 + 416));
      v4 = *(_QWORD *)(v0 + 288);
      v3 = *(_QWORD *)(v0 + 296);
      v5 = *(_QWORD *)(v0 + 272);
      v6 = *(_QWORD *)(v0 + 280);
      swift_willThrow(v2);
      swift_errorRelease(v1);
      v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
      v7(v4, v5);
      v7(v3, v5);
      v8 = *(_QWORD *)(v0 + 288);
      v10 = *(_QWORD *)(v0 + 256);
      v9 = *(_QWORD *)(v0 + 264);
      v11 = *(_QWORD *)(v0 + 248);
      swift_task_dealloc(*(_QWORD *)(v0 + 296));
      swift_task_dealloc(v8);
      swift_task_dealloc(v9);
      swift_task_dealloc(v10);
      swift_task_dealloc(v11);
    }
    else
    {
      v14 = *(_QWORD *)(v0 + 288);
      v15 = *(_QWORD *)(v0 + 296);
      v16 = *(_QWORD *)(v0 + 272);
      v17 = *(_QWORD *)(v0 + 280);
      v19 = *(_QWORD *)(v0 + 256);
      v18 = *(_QWORD *)(v0 + 264);
      v20 = *(_QWORD *)(v0 + 248);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v19, v15, v16);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v16);
      sub_100624AC8(v19);
      v21 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v21(v14, v16);
      v21(v15, v16);
      swift_task_dealloc(v15);
      swift_task_dealloc(v14);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v12 = (_QWORD *)swift_task_alloc(dword_10110182C);
    *(_QWORD *)(v0 + 432) = v12;
    *v12 = v0;
    v12[1] = sub_10061B658;
    return sub_10061FA60(*(_QWORD *)(v0 + 288));
  }
}

uint64_t sub_10061B658(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 432);
  v3[55] = a1;
  v3[56] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10061C214;
  else
    v5 = sub_10061B6C4;
  return swift_task_switch(v5, v3[30], 0);
}

uint64_t sub_10061B6C4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t (__cdecl *v8)();

  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 440));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 440);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v5 = 134217984;
    *(_QWORD *)(v0 + 208) = *(_QWORD *)(v4 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Got %ld anonymous shared device payloads to publish.", v5, 0xCu);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 160, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 16, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 40))
  {
    sub_10000F9FC((__int128 *)(v0 + 16), v0 + 96);
    sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
    v8 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB88 + dword_1010EBB88);
    v7 = (_QWORD *)swift_task_alloc(unk_1010EBB8C);
    *(_QWORD *)(v0 + 456) = v7;
    *v7 = v0;
    v7[1] = sub_10061B878;
    return v8();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10061B878(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 456);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 464) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10061B8D8, v3, 0);
}

uint64_t sub_10061B8D8()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (*(_QWORD *)(v0 + 464))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
    v1 = (_QWORD *)swift_task_alloc(dword_101103F6C);
    *(_QWORD *)(v0 + 472) = v1;
    *v1 = v0;
    v1[1] = sub_10061BB84;
    return sub_1006B35E8(*(_QWORD *)(v0 + 440));
  }
  else
  {
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
    v3 = sub_100033220();
    v4 = swift_allocError(&type metadata for DaemonError, v3, 0, 0);
    *v5 = 0xD00000000000001DLL;
    v5[1] = 0x8000000100EC5EF0;
    swift_willThrow(v4);
    swift_errorRetain(v4);
    v6 = swift_errorRetain(v4);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v23 = *(_QWORD *)(v0 + 416);
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v9 = 138412290;
      swift_errorRetain(v4);
      v11 = _swift_stdlib_bridgeErrorToNSError(v4);
      *(_QWORD *)(v0 + 184) = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v9 + 4, v9 + 12);
      *v10 = v11;
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error publishing owned devices anonymously. Error: %@.", v9, 0xCu);
      v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v10, 1, v12);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

      swift_errorRelease(v23);
    }
    else
    {
      swift_errorRelease(*(_QWORD *)(v0 + 416));
      swift_errorRelease(v4);
      swift_errorRelease(v4);

    }
    v13 = swift_errorRetain(v4);
    v15 = *(_QWORD *)(v0 + 288);
    v14 = *(_QWORD *)(v0 + 296);
    v16 = *(_QWORD *)(v0 + 272);
    v17 = *(_QWORD *)(v0 + 280);
    swift_willThrow(v13);
    swift_errorRelease(v4);
    v18 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v18(v15, v16);
    v18(v14, v16);
    v19 = *(_QWORD *)(v0 + 288);
    v21 = *(_QWORD *)(v0 + 256);
    v20 = *(_QWORD *)(v0 + 264);
    v22 = *(_QWORD *)(v0 + 248);
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10061BB84(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 472);
  *(_QWORD *)(*v2 + 480) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 240);
    swift_bridgeObjectRelease();
    v7 = sub_10061C40C;
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 240);

    v7 = sub_10061BC08;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10061BC08()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);

  swift_bridgeObjectRetain(v0[55]);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (!os_log_type_enabled(v2, v3))
  {
    swift_bridgeObjectRelease_n(v0[55], 2);

    swift_release();
    v7 = v0[52];
    if (v7)
      goto LABEL_3;
LABEL_5:
    v19 = v0[36];
    v20 = v0[37];
    v21 = v0[34];
    v22 = v0[35];
    v24 = v0[32];
    v23 = v0[33];
    v25 = v0[31];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v24, v20, v21);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v21);
    sub_100624AC8(v24);
    v26 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v26(v19, v21);
    v26(v20, v21);
    swift_task_dealloc(v20);
    swift_task_dealloc(v19);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
  v4 = v0[55];
  v5 = (uint8_t *)swift_slowAlloc(12, -1);
  *(_DWORD *)v5 = 134217984;
  v6 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRelease();
  v0[25] = v6;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 25, v0 + 26, v5 + 4, v5 + 12);
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v2, v3, "Published %ld anonymous shared device payloads.", v5, 0xCu);
  swift_slowDealloc(v5, -1, -1);
  swift_release();

  v7 = v0[52];
  if (!v7)
    goto LABEL_5;
LABEL_3:
  v8 = swift_errorRetain(v7);
  v10 = v0[36];
  v9 = v0[37];
  v11 = v0[34];
  v12 = v0[35];
  swift_willThrow(v8);
  swift_errorRelease(v7);
  v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v13(v10, v11);
  v13(v9, v11);
  v14 = v0[36];
  v16 = v0[32];
  v15 = v0[33];
  v17 = v0[31];
  swift_task_dealloc(v0[37]);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_10061BE44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 272));
  v1 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10061BEC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 280) + 8);
  v3(*(_QWORD *)(v0 + 288), v2);
  v3(v1, v2);
  v4 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 264);
  v7 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10061BF4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 280) + 8);
  v3(*(_QWORD *)(v0 + 288), v2);
  v3(v1, v2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  v4 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 264);
  v7 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10061BFE4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  v1 = v0[51];
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[51];
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    v0[27] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 27, v0 + 28, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error publishing owned devices. Error: %{public}@.", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v10 = v0[51];
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }
  v11 = v0[51];
  v13 = v0[30];
  v12 = v0[31];

  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v12, 1, 1, v14);
  v16 = sub_100006C64(&qword_101101940, v15, (uint64_t (*)(uint64_t))type metadata accessor for DeviceBeaconPayloadPublisher, (uint64_t)&unk_100E463AC);
  v17 = (_QWORD *)swift_allocObject(&unk_101083B58, 48, 7);
  v17[2] = v13;
  v17[3] = v16;
  v17[4] = v13;
  v17[5] = v11;
  swift_retain();
  swift_errorRetain(v11);
  swift_retain();
  sub_100691AC0(v12, (uint64_t)&unk_101101978, (uint64_t)v17);
  swift_release();
  v0[52] = v11;
  v18 = (_QWORD *)swift_task_alloc(dword_101101814);
  v0[53] = v18;
  *v18 = v0;
  v18[1] = sub_10061B460;
  return sub_10061A054();
}

uint64_t sub_10061C214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 448);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 416);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 184) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error publishing owned devices anonymously. Error: %@.", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 416));
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v10 = swift_errorRetain(v1);
  v12 = *(_QWORD *)(v0 + 288);
  v11 = *(_QWORD *)(v0 + 296);
  v13 = *(_QWORD *)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 280);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v15(v12, v13);
  v15(v11, v13);
  v16 = *(_QWORD *)(v0 + 288);
  v18 = *(_QWORD *)(v0 + 256);
  v17 = *(_QWORD *)(v0 + 264);
  v19 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10061C40C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  swift_release();
  v1 = *(_QWORD *)(v0 + 480);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 416);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 184) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error publishing owned devices anonymously. Error: %@.", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 416));
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v10 = swift_errorRetain(v1);
  v12 = *(_QWORD *)(v0 + 288);
  v11 = *(_QWORD *)(v0 + 296);
  v13 = *(_QWORD *)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 280);
  swift_willThrow(v10);
  swift_errorRelease(v1);
  v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v15(v12, v13);
  v15(v11, v13);
  v16 = *(_QWORD *)(v0 + 288);
  v18 = *(_QWORD *)(v0 + 256);
  v17 = *(_QWORD *)(v0 + 264);
  v19 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10061C60C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[23] = a1;
  v2[24] = v1;
  v3 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v2[25] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[26] = v4;
  v2[27] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10061C66C, v1, 0);
}

uint64_t sub_10061C66C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);

  if (qword_1010EA620 != -1)
    swift_once(&qword_1010EA620, sub_100DC7BE8);
  v1 = *(_QWORD *)(v0 + 184);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B8520);
  swift_bridgeObjectRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 184);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    *(_QWORD *)(v0 + 176) = *(_QWORD *)(v7 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Publishing location for %ld devices.", v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  v9 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (v9
    && (v10 = v9,
        v11 = objc_msgSend(v9, "uniqueDeviceIdentifier"),
        v10,
        v11))
  {
    v12 = *(_QWORD *)(v0 + 184);
    v13 = *(_QWORD *)(v0 + 192);
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v16 = v15;

    strcpy((char *)(v0 + 16), "searchpartyd");
    *(_BYTE *)(v0 + 29) = 0;
    *(_WORD *)(v0 + 30) = -5120;
    *(_QWORD *)(v0 + 32) = 0x6548656369766564;
    *(_QWORD *)(v0 + 40) = 0xEF74616562747261;
    *(_QWORD *)(v0 + 48) = v14;
    *(_QWORD *)(v0 + 56) = v16;
    v17 = *(_QWORD *)(v13 + 144);
    v18 = unk_10110E13C;
    v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10110E138 + dword_10110E138);
    swift_bridgeObjectRetain(v12);
    swift_retain();
    v19 = (_QWORD *)swift_task_alloc(v18);
    *(_QWORD *)(v0 + 224) = v19;
    *v19 = v0;
    v19[1] = sub_10061C9E8;
    return v28(v0 + 16, *(_QWORD *)(v0 + 184), v17);
  }
  else
  {
    v21 = Logger.logObject.getter(v9);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unable to get device identifier for publishing ownedDevice payloads", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    sub_100CDDB34(0x6548656369766564, 0xEF74616562747261, 0xD00000000000001ALL, 0x8000000100EDD4A0);
    v24 = type metadata accessor for DeviceBeaconPayloadPublisher.PublishError(0);
    v25 = sub_100006C64(&qword_101101960, 255, type metadata accessor for DeviceBeaconPayloadPublisher.PublishError, (uint64_t)&unk_100E46400);
    swift_allocError(v24, v25, 0, 0);
    v27 = swift_storeEnumTagMultiPayload(v26, v24, 4);
    swift_willThrow(v27);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10061C9E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 224);
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 192);
  v4[29] = a1;
  v4[30] = a2;
  v4[31] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_10061CA4C, v6, 0);
}

uint64_t sub_10061CA4C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 232);
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 240);
    v2 = *(_QWORD *)(v0 + 248);
    *(_QWORD *)(v0 + 88) = &type metadata for OwnSubmitRequest;
    *(_QWORD *)(v0 + 96) = sub_1006253A8();
    *(_QWORD *)(v0 + 64) = v1;
    *(_QWORD *)(v0 + 72) = v3;
    *(_QWORD *)(v0 + 80) = v2;
    swift_bridgeObjectRetain(v1);
    sub_10001BBBC(v3, v2);
    v4 = (_QWORD *)swift_task_alloc(dword_1010F7D04);
    *(_QWORD *)(v0 + 256) = v4;
    *v4 = v0;
    v4[1] = sub_10061CBB4;
    return sub_100338A60(*(_QWORD *)(v0 + 216), v0 + 64);
  }
  else
  {
    sub_100CDDB34(0x6548656369766564, 0xEF74616562747261, 0xD000000000000022, 0x8000000100EDD4C0);
    v6 = type metadata accessor for DeviceBeaconPayloadPublisher.PublishError(0);
    v7 = sub_100006C64(&qword_101101960, 255, type metadata accessor for DeviceBeaconPayloadPublisher.PublishError, (uint64_t)&unk_100E46400);
    swift_allocError(v6, v7, 0, 0);
    v9 = swift_storeEnumTagMultiPayload(v8, v6, 2);
    swift_willThrow(v9);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10061CBB4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 256);
  *(_QWORD *)(*v1 + 264) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 192);
    v5 = sub_10061CE20;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 192);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 64));
    v5 = sub_10061CC28;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10061CC28()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 264);
  sub_100D7CA5C(*(_QWORD *)(v0 + 216));
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 208) + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 200));
    v3 = *(_QWORD *)(v0 + 240);
    v2 = *(_QWORD *)(v0 + 248);
    v4 = *(_QWORD *)(v0 + 232);
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    swift_getErrorValue(v1, v0 + 168, v0 + 128);
    *(_QWORD *)(v0 + 152) = Error.code.getter(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 0x6F44726F72726520;
    v6._object = (void *)0xED00003A6E69616DLL;
    String.append(_:)(v6);
    swift_getErrorValue(v1, v0 + 160, v0 + 104);
    v7._countAndFlagsBits = Error.domain.getter(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    sub_100CDDB34(0x6548656369766564, 0xEF74616562747261, 0xD000000000000018, 0x8000000100EDD4F0);
    v8 = swift_bridgeObjectRelease();
    swift_willThrow(v8);
    sub_100153D94(v4, v3, v2);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 240);
    v10 = *(_QWORD *)(v0 + 248);
    v11 = *(_QWORD *)(v0 + 232);
    v12 = *(_QWORD *)(v0 + 216);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 208) + 8))(v12, *(_QWORD *)(v0 + 200));
    sub_100153D94(v11, v9, v10);
    swift_task_dealloc(v12);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10061CE20()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 64));
  v1 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 232);
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  swift_getErrorValue(v1, v0 + 168, v0 + 128);
  *(_QWORD *)(v0 + 152) = Error.code.getter(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6F44726F72726520;
  v6._object = (void *)0xED00003A6E69616DLL;
  String.append(_:)(v6);
  swift_getErrorValue(v1, v0 + 160, v0 + 104);
  v7._countAndFlagsBits = Error.domain.getter(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  sub_100CDDB34(0x6548656369766564, 0xEF74616562747261, 0xD000000000000018, 0x8000000100EDD4F0);
  v8 = swift_bridgeObjectRelease();
  swift_willThrow(v8);
  sub_100153D94(v4, v3, v2);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10061CFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;

  v5[2] = a4;
  v5[3] = a5;
  v7 = sub_10001A9A8(&qword_1010F46C0);
  v5[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10061D020, a4, 0);
}

uint64_t sub_10061D020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = sub_10001A9A8(&qword_1010ED400);
  v5 = swift_allocObject(v4, 40, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v5 + 32) = v1;
  v6 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v2, 1, 1, v6);
  v8 = sub_100006C64(&qword_101101940, v7, (uint64_t (*)(uint64_t))type metadata accessor for DeviceBeaconPayloadPublisher, (uint64_t)&unk_100E463AC);
  v9 = (_QWORD *)swift_allocObject(&unk_101083B80, 48, 7);
  v9[2] = v3;
  v9[3] = v8;
  v9[4] = v5;
  v9[5] = v3;
  swift_retain_n(v3, 2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v5);
  sub_100691AC0(v2, (uint64_t)&unk_101101988, (uint64_t)v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10061D13C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v1[20] = v0;
  v2 = type metadata accessor for UUID(0);
  v1[21] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[22] = v3;
  v1[23] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v1[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SharedBeaconRecord(0);
  v1[25] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[26] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[27] = swift_task_alloc(v7);
  v1[28] = swift_task_alloc(v7);
  v1[29] = swift_task_alloc(v7);
  v1[30] = swift_task_alloc(v7);
  v1[31] = swift_task_alloc(v7);
  v8 = type metadata accessor for StableIdentifier(0);
  v1[32] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[33] = swift_task_alloc(v9);
  v1[34] = swift_task_alloc(v9);
  v1[35] = swift_task_alloc(v9);
  v10 = type metadata accessor for OwnedBeaconRecord(0);
  v1[36] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v1[37] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[38] = swift_task_alloc(v12);
  v1[39] = swift_task_alloc(v12);
  return swift_task_switch(sub_10061D294, v0, 0);
}

uint64_t sub_10061D294()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[20];
  v0[14] = _swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(v1 + 128);
  v0[40] = v2;
  return swift_task_switch(sub_10061D2BC, v2, 0);
}

uint64_t sub_10061D2BC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 328) = v2;
  v3 = sub_10001A9A8(&qword_1010EE190);
  *v2 = v0;
  v2[1] = sub_10061D338;
  return unsafeBlocking<A>(_:)(v0 + 104, sub_10001ED38, *(_QWORD *)(v0 + 320), v3);
}

uint64_t sub_10061D338()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 320);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 328));
  swift_release();
  return swift_task_switch(sub_10061D394, v1, 0);
}

uint64_t sub_10061D394()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[20];
  v0[42] = v0[13];
  return swift_task_switch(sub_10061D3B0, v1, 0);
}

void sub_10061D3B0()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0[42];
  v26 = *(_QWORD *)(v1 + 16);
  if (!v26)
  {
LABEL_17:
    v21 = v0[40];
    swift_bridgeObjectRelease();
    v0[43] = sub_1000178D0((uint64_t)_swiftEmptyArrayStorage);
    swift_release();
    swift_task_switch(sub_10061D6AC, v21, 0);
    return;
  }
  v2 = 0;
  v24 = v0[36];
  v25 = v0[37];
  v22 = v0[22];
  v23 = v0[42];
  while (v2 < *(_QWORD *)(v1 + 16))
  {
    v5 = v0[39];
    v6 = v0[34];
    v7 = v0[35];
    v8 = v0[32];
    v9 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    v10 = *(_QWORD *)(v25 + 72);
    sub_10005972C(v0[42] + v9 + v10 * v2, v5, type metadata accessor for OwnedBeaconRecord);
    v11 = v5 + *(int *)(v24 + 24);
    sub_10005972C(v11, v7, type metadata accessor for StableIdentifier);
    LODWORD(v8) = swift_getEnumCaseMultiPayload(v7, v8);
    sub_1000126B0(v7, type metadata accessor for StableIdentifier);
    sub_10005972C(v11, v6, type metadata accessor for StableIdentifier);
    v12 = v0[34];
    if ((_DWORD)v8 == 1)
      goto LABEL_12;
    v14 = v0[32];
    v13 = v0[33];
    sub_10005972C(v0[34], v13, type metadata accessor for StableIdentifier);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13, v14);
    if (EnumCaseMultiPayload == 2)
    {
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    if (EnumCaseMultiPayload == 3)
    {
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_11:
      v16 = v0[33];
      v12 = v0[34];
      v17 = v0[21];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v16, v17);
LABEL_12:
      v1 = v23;
      sub_1000126B0(v12, type metadata accessor for StableIdentifier);
      sub_1000126EC(v0[39], v0[38], type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_10009A680(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v19 = _swiftEmptyArrayStorage[2];
      v18 = _swiftEmptyArrayStorage[3];
      if (v19 >= v18 >> 1)
        sub_10009A680(v18 > 1, v19 + 1, 1);
      v20 = v0[38];
      _swiftEmptyArrayStorage[2] = v19 + 1;
      sub_1000126EC(v20, (uint64_t)_swiftEmptyArrayStorage + v9 + v19 * v10, type metadata accessor for OwnedBeaconRecord);
      goto LABEL_4;
    }
    v3 = v0[39];
    v4 = v0[34];
    sub_1000126B0(v0[33], type metadata accessor for StableIdentifier);
    sub_1000126B0(v4, type metadata accessor for StableIdentifier);
    sub_1000126B0(v3, type metadata accessor for OwnedBeaconRecord);
    v1 = v23;
LABEL_4:
    if (v26 == ++v2)
      goto LABEL_17;
  }
  __break(1u);
}

uint64_t sub_10061D6AC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 352) = v2;
  v3 = sub_10001A9A8(&qword_1010ECA48);
  *v2 = v0;
  v2[1] = sub_10061D728;
  return unsafeBlocking<A>(_:)(v0 + 96, sub_10007C3B8, *(_QWORD *)(v0 + 320), v3);
}

uint64_t sub_10061D728()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 320);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 352));
  swift_release();
  return swift_task_switch(sub_10061D788, v1, 0);
}

uint64_t sub_10061D788()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[20];
  v0[45] = v0[12];
  return swift_task_switch(sub_10061D7A4, v1, 0);
}

uint64_t sub_10061D7A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;

  v2 = *(_QWORD *)(v1 + 360);
  v47 = *(_QWORD *)(v2 + 16);
  if (v47)
  {
    v3 = 0;
    v4 = *(_QWORD *)(v1 + 200);
    v45 = *(_QWORD *)(v1 + 208);
    v43 = _swiftEmptyArrayStorage;
    v49 = v4;
    while (1)
    {
      if (v3 >= *(_QWORD *)(v2 + 16))
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = *(_QWORD *)(v1 + 240);
      v6 = *(_QWORD *)(v1 + 248);
      v8 = (*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
      v0 = *(_QWORD *)(v45 + 72);
      sub_10005972C(*(_QWORD *)(v1 + 360) + v8 + v0 * v3, v6, type metadata accessor for SharedBeaconRecord);
      v9 = *(unsigned __int8 *)(v6 + *(int *)(v4 + 64));
      sub_10005972C(v6, v7, type metadata accessor for SharedBeaconRecord);
      v10 = *(_QWORD *)(v1 + 240);
      v11 = *(_QWORD *)(v1 + 248);
      v12 = *(_QWORD *)(v1 + 232);
      if (v9 == 1)
        break;
      v13 = *(unsigned __int8 *)(v10 + *(int *)(v4 + 64));
      sub_1000126B0(v10, type metadata accessor for SharedBeaconRecord);
      sub_10005972C(v11, v12, type metadata accessor for SharedBeaconRecord);
      if (v13 == 4)
        goto LABEL_4;
      v14 = *(_QWORD *)(v1 + 232);
      v4 = v49;
      v15 = *(_QWORD *)(v14 + *(int *)(v49 + 44));
      sub_10005972C(v14, *(_QWORD *)(v1 + 224), type metadata accessor for SharedBeaconRecord);
      v16 = *(_QWORD *)(v1 + 224);
      v5 = *(_QWORD *)(v1 + 232);
      if (v15 == -1)
      {
        sub_1000126B0(v16, type metadata accessor for SharedBeaconRecord);
        goto LABEL_5;
      }
      v17 = *(_QWORD *)(v16 + *(int *)(v49 + 48));
      sub_1000126B0(v16, type metadata accessor for SharedBeaconRecord);
      sub_1000126B0(v5, type metadata accessor for SharedBeaconRecord);
      if (v17 != -1)
      {
        sub_1000126EC(*(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 216), type metadata accessor for SharedBeaconRecord);
        v18 = v43;
        if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
        {
          sub_10009A654(0, v43[2] + 1, 1);
          v18 = _swiftEmptyArrayStorage;
        }
        v20 = v18[2];
        v19 = v18[3];
        if (v20 >= v19 >> 1)
        {
          sub_10009A654(v19 > 1, v20 + 1, 1);
          v18 = _swiftEmptyArrayStorage;
        }
        v21 = *(_QWORD *)(v1 + 216);
        v18[2] = v20 + 1;
        v43 = v18;
        sub_1000126EC(v21, (uint64_t)v18 + v8 + v20 * v0, type metadata accessor for SharedBeaconRecord);
        v4 = v49;
        goto LABEL_7;
      }
LABEL_6:
      sub_1000126B0(*(_QWORD *)(v1 + 248), type metadata accessor for SharedBeaconRecord);
LABEL_7:
      if (v47 == ++v3)
        goto LABEL_21;
    }
    sub_1000126B0(v10, type metadata accessor for SharedBeaconRecord);
    sub_10005972C(v11, v12, type metadata accessor for SharedBeaconRecord);
LABEL_4:
    v5 = *(_QWORD *)(v1 + 232);
    v4 = v49;
LABEL_5:
    sub_1000126B0(v5, type metadata accessor for SharedBeaconRecord);
    goto LABEL_6;
  }
  v43 = _swiftEmptyArrayStorage;
LABEL_21:
  swift_bridgeObjectRelease();
  v0 = (uint64_t)sub_100017758((uint64_t)v43);
  swift_release();
  if (qword_1010EA620 != -1)
LABEL_29:
    swift_once(&qword_1010EA620, sub_100DC7BE8);
  v22 = *(_QWORD *)(v1 + 344);
  v23 = type metadata accessor for Logger(0);
  *(_QWORD *)(v1 + 368) = sub_10001A9E8(v23, (uint64_t)qword_1011B8520);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v0);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter(v25);
  v27 = os_log_type_enabled(v25, v26);
  v28 = *(_QWORD *)(v1 + 344);
  if (v27)
  {
    v29 = swift_slowAlloc(22, -1);
    *(_DWORD *)v29 = 134218240;
    *(_QWORD *)(v1 + 144) = *(_QWORD *)(v28 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2048;
    *(_QWORD *)(v1 + 152) = *(_QWORD *)(v0 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 152, v1 + 160, v29 + 14, v29 + 22);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Finding unpublished payloads for %ld owned beacons and %ld shared beacons.", (uint8_t *)v29, 0x16u);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  v51 = *(_QWORD *)(v1 + 344);
  sub_1000175CC(v0);
  *(_QWORD *)(v1 + 376) = v51;
  v30 = *(_QWORD *)(v51 + 16);
  *(_QWORD *)(v1 + 384) = v30;
  if (v30)
  {
    *(_QWORD *)(v1 + 392) = 0;
    v31 = *(_QWORD *)(v1 + 192);
    sub_100030784(v51 + 32, v1 + 56);
    sub_100619F00(v31);
    v32 = (_QWORD *)swift_task_alloc(dword_10110195C);
    *(_QWORD *)(v1 + 400) = v32;
    *v32 = v1;
    v32[1] = sub_10061DC98;
    return sub_10061E2F8(v1 + 56, *(_QWORD *)(v1 + 192));
  }
  else
  {
    swift_bridgeObjectRelease();
    v34 = *(_QWORD *)(v1 + 304);
    v35 = *(_QWORD *)(v1 + 312);
    v37 = *(_QWORD *)(v1 + 272);
    v36 = *(_QWORD *)(v1 + 280);
    v38 = *(_QWORD *)(v1 + 264);
    v40 = *(_QWORD *)(v1 + 240);
    v39 = *(_QWORD *)(v1 + 248);
    v41 = *(_QWORD *)(v1 + 232);
    v42 = *(_QWORD *)(v1 + 224);
    v44 = *(_QWORD *)(v1 + 216);
    v46 = *(_QWORD *)(v1 + 192);
    v48 = *(_QWORD *)(v1 + 184);
    v50 = sub_1007ECF78(*(_QWORD *)(v1 + 112));
    swift_bridgeObjectRelease();
    swift_task_dealloc(v35);
    swift_task_dealloc(v34);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v44);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    return (*(uint64_t (**)(_QWORD *))(v1 + 8))(v50);
  }
}

uint64_t sub_10061DC98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 400);
  *(_QWORD *)(*(_QWORD *)v2 + 408) = v1;
  swift_task_dealloc(v5);
  v6 = v4[24];
  v7 = v4[20];
  if (v1)
  {
    sub_100004048(v6, (uint64_t *)&unk_1010EA690);
    v8 = sub_10061DEC0;
  }
  else
  {
    v4[52] = a1;
    sub_100004048(v6, (uint64_t *)&unk_1010EA690);
    v8 = sub_10061DD2C;
  }
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_10061DD2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  sub_1003025F8(*(_QWORD *)(v0 + 416));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 392) + 1;
  if (v1 == *(_QWORD *)(v0 + 384))
  {
    swift_bridgeObjectRelease();
    v2 = *(_QWORD *)(v0 + 304);
    v3 = *(_QWORD *)(v0 + 312);
    v5 = *(_QWORD *)(v0 + 272);
    v4 = *(_QWORD *)(v0 + 280);
    v6 = *(_QWORD *)(v0 + 264);
    v8 = *(_QWORD *)(v0 + 240);
    v7 = *(_QWORD *)(v0 + 248);
    v9 = *(_QWORD *)(v0 + 232);
    v13 = *(_QWORD *)(v0 + 224);
    v14 = *(_QWORD *)(v0 + 216);
    v15 = *(_QWORD *)(v0 + 192);
    v16 = *(_QWORD *)(v0 + 184);
    v17 = sub_1007ECF78(*(_QWORD *)(v0 + 112));
    swift_bridgeObjectRelease();
    swift_task_dealloc(v3);
    swift_task_dealloc(v2);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v17);
  }
  else
  {
    *(_QWORD *)(v0 + 392) = v1;
    v11 = *(_QWORD *)(v0 + 192);
    sub_100030784(*(_QWORD *)(v0 + 376) + 40 * v1 + 32, v0 + 56);
    sub_100619F00(v11);
    v12 = (_QWORD *)swift_task_alloc(dword_10110195C);
    *(_QWORD *)(v0 + 400) = v12;
    *v12 = v0;
    v12[1] = sub_10061DC98;
    return sub_10061E2F8(v0 + 56, *(_QWORD *)(v0 + 192));
  }
}

uint64_t sub_10061DEC0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  os_log_type_t type;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;

  v1 = (_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 408);
  sub_100030784(v0 + 56, v0 + 16);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v36 = *(_QWORD *)(v0 + 408);
    v6 = *(_QWORD *)(v0 + 184);
    v31 = *(_QWORD *)(v0 + 176);
    v7 = *(_QWORD *)(v0 + 168);
    v8 = swift_slowAlloc(32, -1);
    v34 = (uint64_t *)swift_slowAlloc(8, -1);
    v38 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 120) = 1752392040;
    v41 = v38;
    *(_DWORD *)v8 = 141558531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    type = v5;
    v9 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
    sub_10001AA44((_QWORD *)(v0 + 16), v9);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) + 32))(v9);
    v11 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v7, v11);
    v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v6, v7);
    *(_QWORD *)(v0 + 128) = sub_100016940(v12, v14, &v41);
    v1 = (_QWORD *)(v0 + 56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    *(_WORD *)(v8 + 22) = 2114;
    swift_errorRetain(v36);
    v15 = _swift_stdlib_bridgeErrorToNSError(v36);
    *(_QWORD *)(v0 + 136) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v8 + 24, v8 + 32);
    *v34 = v15;
    swift_errorRelease(v36);
    swift_errorRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v4, type, "Error gathering owned device payloads for %{private,mask.hash}s: %{public}@.", (uint8_t *)v8, 0x20u);
    v16 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v34, 1, v16);
    swift_slowDealloc(v34, -1, -1);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    v17 = v36;
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 408);

    swift_errorRelease(v18);
    swift_errorRelease(v18);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    v17 = v18;
  }
  swift_errorRelease(v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  v19 = *(_QWORD *)(v0 + 392) + 1;
  if (v19 == *(_QWORD *)(v0 + 384))
  {
    swift_bridgeObjectRelease();
    v20 = *(_QWORD *)(v0 + 304);
    v21 = *(_QWORD *)(v0 + 312);
    v23 = *(_QWORD *)(v0 + 272);
    v22 = *(_QWORD *)(v0 + 280);
    v24 = *(_QWORD *)(v0 + 264);
    v26 = *(_QWORD *)(v0 + 240);
    v25 = *(_QWORD *)(v0 + 248);
    v27 = *(_QWORD *)(v0 + 232);
    v33 = *(_QWORD *)(v0 + 224);
    v35 = *(_QWORD *)(v0 + 216);
    v37 = *(_QWORD *)(v0 + 192);
    v39 = *(_QWORD *)(v0 + 184);
    v40 = sub_1007ECF78(*(_QWORD *)(v0 + 112));
    swift_bridgeObjectRelease();
    swift_task_dealloc(v21);
    swift_task_dealloc(v20);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v33);
    swift_task_dealloc(v35);
    swift_task_dealloc(v37);
    swift_task_dealloc(v39);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v40);
  }
  else
  {
    *(_QWORD *)(v0 + 392) = v19;
    v29 = *(_QWORD *)(v0 + 192);
    sub_100030784(*(_QWORD *)(v0 + 376) + 40 * v19 + 32, (uint64_t)v1);
    sub_100619F00(v29);
    v30 = (_QWORD *)swift_task_alloc(dword_10110195C);
    *(_QWORD *)(v0 + 400) = v30;
    *v30 = v0;
    v30[1] = sub_10061DC98;
    return sub_10061E2F8((uint64_t)v1, *(_QWORD *)(v0 + 192));
  }
}

uint64_t sub_10061E2F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3[46] = a2;
  v3[47] = v2;
  v3[45] = a1;
  v4 = type metadata accessor for OwnedBeaconRecord(0);
  v3[48] = v4;
  v3[49] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F7810);
  v3[50] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BeaconEstimatedLocation(0);
  v3[51] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[52] = v7;
  v3[53] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v3[54] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[55] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v3[56] = v10;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[57] = swift_task_alloc(v11);
  v3[58] = swift_task_alloc(v11);
  v3[59] = swift_task_alloc(v11);
  v3[60] = swift_task_alloc(v11);
  return swift_task_switch(sub_10061E3F8, v2, 0);
}

uint64_t sub_10061E3F8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (_QWORD *)v0[45];
  v0[39] = _swiftEmptyArrayStorage;
  v2 = v1[3];
  v3 = v1[4];
  sub_10001AA44(v1, v2);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) + 32))(v2);
  v4 = (_QWORD *)swift_task_alloc(dword_101101954);
  v0[61] = v4;
  *v4 = v0;
  v4[1] = sub_10061E490;
  return sub_1006221D4(v0[50], v0[60], v0[46]);
}

uint64_t sub_10061E490()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 376);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 488));
  return swift_task_switch(sub_10061E4E8, v1, 0);
}

uint64_t sub_10061E4E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 400);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 416) + 48))(v1, 1, *(_QWORD *)(v0 + 408)) == 1)
  {
    swift_bridgeObjectRelease();
    sub_100004048(v1, (uint64_t *)&unk_1010F7810);
    if (qword_1010EA620 != -1)
      swift_once(&qword_1010EA620, sub_100DC7BE8);
    v2 = *(_QWORD *)(v0 + 480);
    v3 = *(_QWORD *)(v0 + 464);
    v4 = *(_QWORD *)(v0 + 432);
    v5 = *(_QWORD *)(v0 + 440);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B8520);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(_QWORD *)(v0 + 464);
    v12 = *(_QWORD *)(v0 + 432);
    v13 = *(_QWORD *)(v0 + 440);
    if (v10)
    {
      v14 = swift_slowAlloc(22, -1);
      v15 = swift_slowAlloc(32, -1);
      v33 = v15;
      *(_DWORD *)v14 = 141558275;
      *(_QWORD *)(v0 + 304) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v14 + 4, v14 + 12);
      *(_WORD *)(v14 + 12) = 2081;
      v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
      *(_QWORD *)(v0 + 344) = sub_100016940(v17, v18, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease();
      v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v19(v11, v12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No new location available for publish for : %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v19(*(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 432));
    }

    v19(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 432));
    v27 = *(_QWORD *)(v0 + 472);
    v29 = *(_QWORD *)(v0 + 456);
    v28 = *(_QWORD *)(v0 + 464);
    v30 = *(_QWORD *)(v0 + 424);
    v32 = *(_QWORD *)(v0 + 392);
    v31 = *(_QWORD *)(v0 + 400);
    swift_task_dealloc(*(_QWORD *)(v0 + 480));
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 384);
    v20 = *(_QWORD *)(v0 + 392);
    v22 = *(_QWORD *)(v0 + 360);
    sub_1000126EC(v1, *(_QWORD *)(v0 + 424), type metadata accessor for BeaconEstimatedLocation);
    sub_100030784(v22, v0 + 152);
    v23 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v24 = swift_dynamicCast(v20, v0 + 152, v23, v21, 6);
    *(_BYTE *)(v0 + 600) = v24;
    if (v24)
      sub_1000126B0(*(_QWORD *)(v0 + 392), type metadata accessor for OwnedBeaconRecord);
    v25 = *(_QWORD *)(*(_QWORD *)(v0 + 376) + 128);
    *(_QWORD *)(v0 + 496) = v25;
    return swift_task_switch(sub_10061E838, v25, 0);
  }
}

uint64_t sub_10061E838()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 504) = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  *v2 = v0;
  v2[1] = sub_10061E8B0;
  return unsafeBlocking<A>(_:)(v0 + 320, sub_10007C6FC, *(_QWORD *)(v0 + 496), v3);
}

uint64_t sub_10061E8B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 496);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 504));
  swift_release();
  return swift_task_switch(sub_10061E90C, v1, 0);
}

uint64_t sub_10061E90C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[47];
  v0[64] = v0[40];
  return swift_task_switch(sub_10061E928, v1, 0);
}

uint64_t sub_10061E928()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 512);
  v2 = *(_BYTE *)(v0 + 600);
  v4 = *(_QWORD *)(v0 + 472);
  v3 = *(_QWORD *)(v0 + 480);
  v6 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD *)(v0 + 448);
  v7 = *(_QWORD *)(v0 + 432);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(_QWORD *)(v0 + 520) = v8;
  v8(v4, v3, v7);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 + 24) & ~v9;
  v11 = v10 + v5;
  v12 = swift_allocObject(&unk_101083B30, v10 + v5 + 1, v9 | 7);
  *(_QWORD *)(v0 + 528) = v12;
  *(_QWORD *)(v12 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v12 + v10, v4, v7);
  *(_BYTE *)(v12 + v11) = v2;
  v13 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v14 = (_QWORD *)swift_task_alloc(v13);
  *(_QWORD *)(v0 + 536) = v14;
  v15 = sub_10001A9A8(&qword_101108F70);
  *v14 = v0;
  v14[1] = sub_10061EA34;
  return unsafeBlocking<A>(_:)(v0 + 232, sub_10062442C, v12, v15);
}

uint64_t sub_10061EA34()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 536);
  *(_QWORD *)(*v1 + 544) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 376);
    v5 = sub_10061F620;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 376);
    swift_release();
    v5 = sub_10061EAA8;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10061EAA8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t My;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v1 = *(_QWORD *)(v0 + 544);
  v3 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  sub_10001BC14(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
  sub_10001BBBC(v3, v2);
  v4 = sub_1007E6F8C(v3, v2);
  if (v1)
  {
    sub_10001BC14(v3, v2);
    v33 = 0;
    v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    *(_QWORD *)(v0 + 288) = 0;
    *(_QWORD *)(v0 + 296) = 0xE000000000000000;
    v8._object = (void *)0x8000000100EC7AC0;
    v8._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v8);
    *(_QWORD *)(v0 + 352) = v1;
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    _print_unlocked<A, B>(_:_:)(v0 + 352, v0 + 288, v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296), "searchpartyd/KeyRepresentable.swift", 35, 2, 256, 0);
  }
  else
  {
    v6 = v4;
    v7 = v5;
    sub_10001BC14(v3, v2);
    sub_1002F7394(v6, v7);
    v11 = (_QWORD *)(v0 + 72);
    sub_1006244B4(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 424), v33, v34, (_QWORD *)(v0 + 16));
    sub_10001BC14(v33, v34);
    v12 = *(_QWORD **)(v0 + 312);
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_1007C839C(0, v12[2] + 1, 1, v12);
    v14 = v12[2];
    v13 = v12[3];
    if (v14 >= v13 >> 1)
      v12 = sub_1007C839C((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
    v12[2] = v14 + 1;
    v15 = &v12[7 * v14];
    v16 = *(_OWORD *)(v0 + 16);
    v17 = *(_OWORD *)(v0 + 32);
    v18 = *(_OWORD *)(v0 + 48);
    v15[10] = *(_QWORD *)(v0 + 64);
    *((_OWORD *)v15 + 3) = v17;
    *((_OWORD *)v15 + 4) = v18;
    *((_OWORD *)v15 + 2) = v16;
    sub_10001BC14(v3, v2);
    *(_QWORD *)(v0 + 312) = v12;
    My = type metadata accessor for Feature.FindMy(0);
    *(_QWORD *)(v0 + 96) = My;
    *(_QWORD *)(v0 + 104) = sub_100006C64((unint64_t *)&qword_1010EE1B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v20 = sub_100018F08(v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v20, enum case for Feature.FindMy.itemSharing(_:), My);
    LOBYTE(My) = isFeatureEnabled(_:)(v11);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v11);
    if ((My & 1) != 0)
    {
      v21 = (_QWORD *)swift_task_alloc(dword_101101814);
      *(_QWORD *)(v0 + 552) = v21;
      *v21 = v0;
      v21[1] = sub_10061F014;
      return sub_10061A054();
    }
    else
    {
      v22 = *(_QWORD *)(v0 + 480);
      v23 = *(_QWORD *)(v0 + 432);
      v24 = *(_QWORD *)(v0 + 440);
      v25 = *(_QWORD *)(v0 + 424);
      swift_release();
      sub_1000126B0(v25, type metadata accessor for BeaconEstimatedLocation);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
      v26 = *(_QWORD *)(v0 + 312);
      v27 = *(_QWORD *)(v0 + 472);
      v29 = *(_QWORD *)(v0 + 456);
      v28 = *(_QWORD *)(v0 + 464);
      v30 = *(_QWORD *)(v0 + 424);
      v32 = *(_QWORD *)(v0 + 392);
      v31 = *(_QWORD *)(v0 + 400);
      swift_task_dealloc(*(_QWORD *)(v0 + 480));
      swift_task_dealloc(v27);
      swift_task_dealloc(v28);
      swift_task_dealloc(v29);
      swift_task_dealloc(v30);
      swift_task_dealloc(v31);
      swift_task_dealloc(v32);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v26);
    }
  }
}

uint64_t sub_10061F014(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 552);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  *(_BYTE *)(*(_QWORD *)v1 + 601) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10061F074, v3, 0);
}

uint64_t sub_10061F074()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (__cdecl *v14)();

  if (*(_BYTE *)(v0 + 601) == 1)
  {
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 264, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 192, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 216))
    {
      sub_10000F9FC((__int128 *)(v0 + 192), v0 + 112);
      sub_10001AA44((_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 136));
      v14 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBD0 + dword_1010EBBD0);
      v2 = (_QWORD *)swift_task_alloc(unk_1010EBBD4);
      *(_QWORD *)(v0 + 560) = v2;
      *v2 = v0;
      v2[1] = sub_10061F220;
      return v14();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 480);
    v4 = *(_QWORD *)(v0 + 432);
    v5 = *(_QWORD *)(v0 + 440);
    v6 = *(_QWORD *)(v0 + 424);
    swift_release();
    sub_1000126B0(v6, type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    v7 = *(_QWORD *)(v0 + 312);
    v8 = *(_QWORD *)(v0 + 472);
    v10 = *(_QWORD *)(v0 + 456);
    v9 = *(_QWORD *)(v0 + 464);
    v11 = *(_QWORD *)(v0 + 424);
    v13 = *(_QWORD *)(v0 + 392);
    v12 = *(_QWORD *)(v0 + 400);
    swift_task_dealloc(*(_QWORD *)(v0 + 480));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
  }
  return result;
}

uint64_t sub_10061F220(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 560);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  *(_QWORD *)(*(_QWORD *)v1 + 568) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10061F280, v3, 0);
}

uint64_t sub_10061F280()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_QWORD *)(v0 + 568))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 112));
    v1 = (_QWORD *)swift_task_alloc(dword_1010EE2D4);
    *(_QWORD *)(v0 + 576) = v1;
    *v1 = v0;
    v1[1] = sub_10061F3A4;
    return sub_1000C3870(*(_QWORD *)(v0 + 480));
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 480);
    v4 = *(_QWORD *)(v0 + 432);
    v5 = *(_QWORD *)(v0 + 440);
    v6 = *(_QWORD *)(v0 + 424);
    swift_release();
    sub_1000126B0(v6, type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 112));
    v7 = *(_QWORD *)(v0 + 312);
    v8 = *(_QWORD *)(v0 + 472);
    v10 = *(_QWORD *)(v0 + 456);
    v9 = *(_QWORD *)(v0 + 464);
    v11 = *(_QWORD *)(v0 + 424);
    v13 = *(_QWORD *)(v0 + 392);
    v12 = *(_QWORD *)(v0 + 400);
    swift_task_dealloc(*(_QWORD *)(v0 + 480));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
  }
}

uint64_t sub_10061F3A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 576);
  v3[73] = a1;
  v3[74] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[47];
    swift_bridgeObjectRelease();
    v6 = sub_10061F998;
    v7 = v5;
  }
  else
  {
    v7 = v3[47];
    v6 = sub_10061F424;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_10061F424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 592);
  v2 = *(_QWORD *)(v0 + 584);
  v3 = *(_QWORD *)(v0 + 480);
  v4 = *(_QWORD *)(v0 + 424);
  v5 = *(_QWORD *)(v0 + 376);
  v6 = (_QWORD *)swift_task_alloc(48);
  v6[2] = v5;
  v6[3] = v3;
  v6[4] = v4;
  v7 = sub_100A76230((void (*)(__int128 *__return_ptr, uint64_t, __n128))sub_100624498, (uint64_t)v6, v2);
  v8 = *(_QWORD *)(v0 + 480);
  v9 = *(_QWORD *)(v0 + 440);
  v26 = *(_QWORD *)(v0 + 432);
  v10 = *(_QWORD *)(v0 + 424);
  if (v1)
  {
    swift_release();
    swift_release();
    swift_task_dealloc(v6);
    swift_bridgeObjectRelease();
    sub_1000126B0(v10, type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v26);
    swift_bridgeObjectRelease();
    v11 = *(_QWORD *)(v0 + 472);
    v13 = *(_QWORD *)(v0 + 456);
    v12 = *(_QWORD *)(v0 + 464);
    v14 = *(_QWORD *)(v0 + 424);
    v16 = *(_QWORD *)(v0 + 392);
    v15 = *(_QWORD *)(v0 + 400);
    swift_task_dealloc(*(_QWORD *)(v0 + 480));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v18 = (uint64_t)v7;
    swift_bridgeObjectRelease();
    swift_task_dealloc(v6);
    sub_1003025F8(v18);
    swift_release();
    swift_release();
    sub_1000126B0(v10, type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v26);
    v19 = *(_QWORD *)(v0 + 312);
    v20 = *(_QWORD *)(v0 + 472);
    v22 = *(_QWORD *)(v0 + 456);
    v21 = *(_QWORD *)(v0 + 464);
    v23 = *(_QWORD *)(v0 + 424);
    v25 = *(_QWORD *)(v0 + 392);
    v24 = *(_QWORD *)(v0 + 400);
    swift_task_dealloc(*(_QWORD *)(v0 + 480));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v19);
  }
}

uint64_t sub_10061F620()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t My;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = (_QWORD *)(v0 + 72);
  swift_release();
  v2 = *(_QWORD *)(v0 + 544);
  if (qword_1010EA620 != -1)
    swift_once(&qword_1010EA620, sub_100DC7BE8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 520);
  v4 = *(_QWORD *)(v0 + 480);
  v5 = *(_QWORD *)(v0 + 456);
  v6 = *(_QWORD *)(v0 + 432);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B8520);
  v8 = v3(v5, v4, v6);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 456);
  v13 = *(_QWORD *)(v0 + 432);
  v14 = *(_QWORD *)(v0 + 440);
  if (v11)
  {
    v15 = swift_slowAlloc(22, -1);
    v36 = v2;
    v16 = swift_slowAlloc(32, -1);
    v37 = v16;
    *(_DWORD *)v15 = 141558275;
    *(_QWORD *)(v0 + 328) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    v17 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v13, v17);
    *(_QWORD *)(v0 + 336) = sub_100016940(v18, v19, &v37);
    v1 = (_QWORD *)(v0 + 72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "No owned device key for shared item: %{private,mask.hash}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
    v20 = v36;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v14 + 8))(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 432));
    v20 = v2;
  }
  swift_errorRelease(v20);

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 96) = My;
  *(_QWORD *)(v0 + 104) = sub_100006C64((unint64_t *)&qword_1010EE1B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v22 = sub_100018F08(v1);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v22, enum case for Feature.FindMy.itemSharing(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if ((My & 1) != 0)
  {
    v23 = (_QWORD *)swift_task_alloc(dword_101101814);
    *(_QWORD *)(v0 + 552) = v23;
    *v23 = v0;
    v23[1] = sub_10061F014;
    return sub_10061A054();
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 480);
    v26 = *(_QWORD *)(v0 + 432);
    v27 = *(_QWORD *)(v0 + 440);
    v28 = *(_QWORD *)(v0 + 424);
    swift_release();
    sub_1000126B0(v28, type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
    v29 = *(_QWORD *)(v0 + 312);
    v30 = *(_QWORD *)(v0 + 472);
    v32 = *(_QWORD *)(v0 + 456);
    v31 = *(_QWORD *)(v0 + 464);
    v33 = *(_QWORD *)(v0 + 424);
    v35 = *(_QWORD *)(v0 + 392);
    v34 = *(_QWORD *)(v0 + 400);
    swift_task_dealloc(*(_QWORD *)(v0 + 480));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v29);
  }
}

uint64_t sub_10061F998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 424);
  swift_release();
  swift_release();
  sub_1000126B0(v4, type metadata accessor for BeaconEstimatedLocation);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v5 = *(_QWORD *)(v0 + 472);
  v7 = *(_QWORD *)(v0 + 456);
  v6 = *(_QWORD *)(v0 + 464);
  v8 = *(_QWORD *)(v0 + 424);
  v10 = *(_QWORD *)(v0 + 392);
  v9 = *(_QWORD *)(v0 + 400);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10061FA60(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v2[49] = a1;
  v2[50] = v1;
  v3 = *(_QWORD *)(type metadata accessor for ObservedAdvertisement(0) - 8);
  v2[51] = v3;
  v2[52] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010F2CA8);
  v2[53] = v4;
  v2[54] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BeaconStatus(0);
  v2[55] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[56] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[57] = swift_task_alloc(v7);
  v2[58] = swift_task_alloc(v7);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F0EE0);
  v2[59] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v2[60] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v2[61] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[62] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v2[63] = v12;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[64] = swift_task_alloc(v13);
  v2[65] = swift_task_alloc(v13);
  v2[66] = swift_task_alloc(v13);
  v2[67] = swift_task_alloc(v13);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010F7810);
  v2[68] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for BeaconEstimatedLocation(0);
  v2[69] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v2[70] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[71] = swift_task_alloc(v17);
  v2[72] = swift_task_alloc(v17);
  v18 = type metadata accessor for SharedBeaconRecord(0);
  v2[73] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v2[74] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[75] = swift_task_alloc(v20);
  v2[76] = swift_task_alloc(v20);
  v2[77] = swift_task_alloc(v20);
  v2[78] = swift_task_alloc(v20);
  v2[79] = swift_task_alloc(v20);
  return swift_task_switch(sub_10061FC70, v1, 0);
}

uint64_t sub_10061FC70()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 264, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 104, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 128))
  {
    sub_10000F9FC((__int128 *)(v0 + 104), v0 + 64);
    sub_10001AA44((_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBD0 + dword_1010EBBD0);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBD4);
    *(_QWORD *)(v0 + 640) = v2;
    *v2 = v0;
    v2[1] = sub_10061FD5C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10061FD5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 640);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 400);
  *(_QWORD *)(*(_QWORD *)v1 + 648) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10061FDBC, v3, 0);
}

uint64_t sub_10061FDBC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = (_QWORD *)(v0 + 64);
  if (*(_QWORD *)(v0 + 648))
  {
    v2 = *(_QWORD *)(v0 + 400);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    *(_QWORD *)(v0 + 368) = _swiftEmptyArrayStorage;
    v3 = *(_QWORD *)(v2 + 128);
    *(_QWORD *)(v0 + 656) = v3;
    return swift_task_switch(sub_10061FF94, v3, 0);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 632);
    v6 = *(_QWORD *)(v0 + 624);
    v7 = *(_QWORD *)(v0 + 616);
    v8 = *(_QWORD *)(v0 + 608);
    v9 = *(_QWORD *)(v0 + 600);
    v10 = *(_QWORD *)(v0 + 576);
    v11 = *(_QWORD *)(v0 + 568);
    v15 = *(_QWORD *)(v0 + 544);
    v16 = *(_QWORD *)(v0 + 536);
    v17 = *(_QWORD *)(v0 + 528);
    v18 = *(_QWORD *)(v0 + 520);
    v19 = *(_QWORD *)(v0 + 512);
    v20 = *(_QWORD *)(v0 + 480);
    v21 = *(_QWORD *)(v0 + 472);
    v22 = *(_QWORD *)(v0 + 464);
    v23 = *(_QWORD *)(v0 + 456);
    v24 = *(_QWORD *)(v0 + 432);
    v25 = *(_QWORD *)(v0 + 416);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v12 = sub_100033220();
    v13 = swift_allocError(&type metadata for DaemonError, v12, 0, 0);
    *v14 = 0xD000000000000014;
    v14[1] = 0x8000000100EDD460;
    swift_willThrow(v13);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10061FF94()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 664) = v2;
  v3 = sub_10001A9A8(&qword_1010ECA48);
  *v2 = v0;
  v2[1] = sub_100620010;
  return unsafeBlocking<A>(_:)(v0 + 344, sub_10007C3B8, *(_QWORD *)(v0 + 656), v3);
}

uint64_t sub_100620010()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 656);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 664));
  swift_release();
  return swift_task_switch(sub_100620070, v1, 0);
}

uint64_t sub_100620070()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[50];
  v0[84] = v0[43];
  return swift_task_switch(sub_10062008C, v1, 0);
}

uint64_t sub_10062008C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v1 = *(_QWORD *)(v0 + 672);
  v63 = *(_QWORD *)(v1 + 16);
  if (v63)
  {
    v2 = 0;
    v61 = *(_QWORD *)(v0 + 592);
    v3 = *(_QWORD *)(v0 + 584);
    v59 = _swiftEmptyArrayStorage;
    v65 = v3;
    while (1)
    {
      if (v2 >= *(_QWORD *)(v1 + 16))
      {
        __break(1u);
LABEL_29:
        swift_once(&qword_1010EA620, sub_100DC7BE8);
LABEL_24:
        v33 = *(_QWORD *)(v0 + 680);
        v34 = type metadata accessor for Logger(0);
        sub_10001A9E8(v34, (uint64_t)qword_1011B8520);
        v35 = *(_QWORD *)(v0 + 368);
        swift_bridgeObjectRetain_n(v35, 2);
        swift_bridgeObjectRetain(v33);
        v37 = Logger.logObject.getter(v36);
        v38 = static os_log_type_t.default.getter(v37);
        v39 = os_log_type_enabled(v37, v38);
        v40 = *(_QWORD *)(v0 + 680);
        if (v39)
        {
          v41 = swift_slowAlloc(22, -1);
          *(_DWORD *)v41 = 134218240;
          v42 = *(_QWORD *)(v40 + 16);
          swift_bridgeObjectRelease();
          *(_QWORD *)(v0 + 320) = v42;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v41 + 4, v41 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v41 + 12) = 2048;
          v43 = *(_QWORD *)(v35 + 16);
          swift_bridgeObjectRelease();
          *(_QWORD *)(v0 + 328) = v43;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v41 + 14, v41 + 22);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "Unpublished anonymous payloads for %ld shared beacons found %ld to publish.", (uint8_t *)v41, 0x16u);
          swift_slowDealloc(v41, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(v35, 2);
          swift_bridgeObjectRelease_n(v40, 2);
        }

        swift_release();
        v44 = *(_QWORD *)(v0 + 632);
        v45 = *(_QWORD *)(v0 + 624);
        v46 = *(_QWORD *)(v0 + 616);
        v47 = *(_QWORD *)(v0 + 608);
        v48 = *(_QWORD *)(v0 + 600);
        v49 = *(_QWORD *)(v0 + 576);
        v50 = *(_QWORD *)(v0 + 568);
        v51 = *(_QWORD *)(v0 + 544);
        v52 = *(_QWORD *)(v0 + 536);
        v53 = *(_QWORD *)(v0 + 528);
        v54 = *(_QWORD *)(v0 + 520);
        v55 = *(_QWORD *)(v0 + 512);
        v56 = *(_QWORD *)(v0 + 480);
        v57 = *(_QWORD *)(v0 + 472);
        v58 = *(_QWORD *)(v0 + 464);
        v60 = *(_QWORD *)(v0 + 456);
        v62 = *(_QWORD *)(v0 + 432);
        v64 = *(_QWORD *)(v0 + 416);
        swift_beginAccess(v65, v0 + 288, 0, 0);
        v66 = *(_QWORD *)(v0 + 368);
        swift_task_dealloc(v44);
        swift_task_dealloc(v45);
        swift_task_dealloc(v46);
        swift_task_dealloc(v47);
        swift_task_dealloc(v48);
        swift_task_dealloc(v49);
        swift_task_dealloc(v50);
        swift_task_dealloc(v51);
        swift_task_dealloc(v52);
        swift_task_dealloc(v53);
        swift_task_dealloc(v54);
        swift_task_dealloc(v55);
        swift_task_dealloc(v56);
        swift_task_dealloc(v57);
        swift_task_dealloc(v58);
        swift_task_dealloc(v60);
        swift_task_dealloc(v62);
        swift_task_dealloc(v64);
        return (*(uint64_t (**)(uint64_t))(v0 + 8))(v66);
      }
      v5 = *(_QWORD *)(v0 + 632);
      v6 = *(_QWORD *)(v0 + 624);
      v7 = (*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80);
      v8 = *(_QWORD *)(v61 + 72);
      sub_10005972C(*(_QWORD *)(v0 + 672) + v7 + v8 * v2, v5, type metadata accessor for SharedBeaconRecord);
      v9 = *(unsigned __int8 *)(v5 + *(int *)(v3 + 64));
      sub_10005972C(v5, v6, type metadata accessor for SharedBeaconRecord);
      v10 = *(_QWORD *)(v0 + 632);
      v11 = *(_QWORD *)(v0 + 624);
      v12 = *(_QWORD *)(v0 + 616);
      if (v9 == 1)
        break;
      v13 = *(unsigned __int8 *)(v11 + *(int *)(v3 + 64));
      sub_1000126B0(v11, type metadata accessor for SharedBeaconRecord);
      sub_10005972C(v10, v12, type metadata accessor for SharedBeaconRecord);
      if (v13 == 4)
        goto LABEL_4;
      v14 = *(_QWORD *)(v0 + 616);
      v3 = v65;
      v15 = *(_QWORD *)(v14 + *(int *)(v65 + 44));
      sub_10005972C(v14, *(_QWORD *)(v0 + 608), type metadata accessor for SharedBeaconRecord);
      v4 = *(_QWORD *)(v0 + 616);
      v16 = *(_QWORD *)(v0 + 608);
      if (v15 == -1)
      {
        sub_1000126B0(v16, type metadata accessor for SharedBeaconRecord);
        goto LABEL_5;
      }
      v17 = *(_QWORD *)(v16 + *(int *)(v65 + 48));
      sub_1000126B0(v16, type metadata accessor for SharedBeaconRecord);
      sub_1000126B0(v4, type metadata accessor for SharedBeaconRecord);
      if (v17 != -1)
      {
        sub_1000126EC(*(_QWORD *)(v0 + 632), *(_QWORD *)(v0 + 600), type metadata accessor for SharedBeaconRecord);
        v18 = v59;
        if ((swift_isUniquelyReferenced_nonNull_native(v59) & 1) == 0)
        {
          sub_10009A654(0, v59[2] + 1, 1);
          v18 = _swiftEmptyArrayStorage;
        }
        v20 = v18[2];
        v19 = v18[3];
        if (v20 >= v19 >> 1)
        {
          sub_10009A654(v19 > 1, v20 + 1, 1);
          v18 = _swiftEmptyArrayStorage;
        }
        v21 = *(_QWORD *)(v0 + 600);
        v18[2] = v20 + 1;
        v59 = v18;
        sub_1000126EC(v21, (uint64_t)v18 + v7 + v20 * v8, type metadata accessor for SharedBeaconRecord);
        v3 = v65;
        goto LABEL_7;
      }
LABEL_6:
      sub_1000126B0(*(_QWORD *)(v0 + 632), type metadata accessor for SharedBeaconRecord);
LABEL_7:
      if (v63 == ++v2)
        goto LABEL_21;
    }
    sub_1000126B0(v11, type metadata accessor for SharedBeaconRecord);
    sub_10005972C(v10, v12, type metadata accessor for SharedBeaconRecord);
LABEL_4:
    v4 = *(_QWORD *)(v0 + 616);
    v3 = v65;
LABEL_5:
    sub_1000126B0(v4, type metadata accessor for SharedBeaconRecord);
    goto LABEL_6;
  }
  v59 = _swiftEmptyArrayStorage;
LABEL_21:
  swift_bridgeObjectRelease();
  v22 = sub_100017758((uint64_t)v59);
  *(_QWORD *)(v0 + 680) = v22;
  swift_release();
  v23 = v22[2];
  *(_QWORD *)(v0 + 688) = v23;
  if (!v23)
  {
    v65 = v0 + 368;
    if (qword_1010EA620 != -1)
      goto LABEL_29;
    goto LABEL_24;
  }
  *(_OWORD *)(v0 + 696) = 0u;
  v24 = *(_QWORD *)(v0 + 656);
  v25 = *(_QWORD *)(v0 + 480);
  v26 = *(_QWORD *)(v0 + 392);
  v27 = *(_QWORD *)(v0 + 680) + 32;
  swift_bridgeObjectRetain(v22);
  sub_100030784(v27, v0 + 224);
  v28 = *(_QWORD *)(v0 + 248);
  v29 = *(_QWORD *)(v0 + 256);
  sub_10001AA44((_QWORD *)(v0 + 224), v28);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v29 + 8) + 8) + 32))(v28);
  v30 = type metadata accessor for Date(0);
  v31 = *(_QWORD *)(v30 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v25, v26, v30);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(v25, 0, 1, v30);
  return swift_task_switch(sub_100620688, v24, 0);
}

uint64_t sub_100620688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 656);
  v2 = *(_QWORD *)(v0 + 536);
  v3 = *(_QWORD *)(v0 + 528);
  v5 = *(_QWORD *)(v0 + 496);
  v4 = *(_QWORD *)(v0 + 504);
  v6 = *(_QWORD *)(v0 + 488);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)(v0 + 712) = v7;
  v7(v3, v2, v6);
  LODWORD(v8) = *(_DWORD *)(v5 + 80);
  *(_DWORD *)(v0 + 872) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_101083AB8, v9 + v4, v8 | 7);
  *(_QWORD *)(v0 + 720) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  *(_QWORD *)(v0 + 728) = v11;
  v11(v10 + v9, v3, v6);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 736) = v13;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010F7950);
  *v13 = v0;
  v13[1] = sub_100620790;
  return unsafeBlocking<A>(_:)(v0 + 312, sub_10007CA2C, v10, v14);
}

uint64_t sub_100620790()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 656);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 736));
  swift_release();
  return swift_task_switch(sub_1006207F4, v1, 0);
}

uint64_t sub_1006207F4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[50];
  v0[93] = v0[39];
  return swift_task_switch(sub_100620810, v1, 0);
}

uint64_t sub_100620810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v1 = *(_QWORD *)(v0 + 744);
  v2 = *(_QWORD *)(v0 + 696);
  v3 = *(_QWORD *)(v0 + 560);
  v55 = *(_QWORD *)(v0 + 552);
  v4 = *(_QWORD *)(v0 + 544);
  v5 = *(_QWORD *)(v0 + 536);
  v7 = *(_QWORD *)(v0 + 488);
  v6 = *(_QWORD *)(v0 + 496);
  v8 = *(_QWORD *)(v0 + 480);
  v9 = (unint64_t *)swift_task_alloc(32);
  v9[2] = (unint64_t)&off_1010485E0;
  v9[3] = v8;
  v10 = sub_10008B52C((uint64_t (*)(char *))sub_100624350, v9, v1);
  swift_task_dealloc(v9);
  sub_100A79444(v10, v4);
  swift_bridgeObjectRelease();
  sub_100004048(v8, (uint64_t *)&unk_1010EA690);
  v11 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(_QWORD *)(v0 + 752) = v11;
  v11(v5, v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v55) != 1)
  {
    v25 = *(_QWORD *)(v0 + 656);
    sub_1000126EC(*(_QWORD *)(v0 + 544), *(_QWORD *)(v0 + 576), type metadata accessor for BeaconEstimatedLocation);
    v26 = sub_100620CC8;
    v27 = v25;
    return swift_task_switch(v26, v27, 0);
  }
  sub_100004048(*(_QWORD *)(v0 + 544), (uint64_t *)&unk_1010F7810);
  v12 = *(_QWORD *)(v0 + 688);
  v13 = *(_QWORD *)(v0 + 704) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
  if (v13 != v12)
  {
    v28 = *(_QWORD *)(v0 + 704) + 1;
    *(_QWORD *)(v0 + 704) = v28;
    *(_QWORD *)(v0 + 696) = v2;
    v29 = *(_QWORD *)(v0 + 656);
    v30 = *(_QWORD *)(v0 + 480);
    v31 = *(_QWORD *)(v0 + 392);
    sub_100030784(*(_QWORD *)(v0 + 680) + 40 * v28 + 32, v0 + 224);
    v32 = *(_QWORD *)(v0 + 248);
    v33 = *(_QWORD *)(v0 + 256);
    sub_10001AA44((_QWORD *)(v0 + 224), v32);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v33 + 8) + 8) + 32))(v32);
    v34 = type metadata accessor for Date(0);
    v35 = *(_QWORD *)(v34 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v30, v31, v34);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v30, 0, 1, v34);
    v26 = sub_100620688;
    v27 = v29;
    return swift_task_switch(v26, v27, 0);
  }
  swift_bridgeObjectRelease();
  if (qword_1010EA620 != -1)
    swift_once(&qword_1010EA620, sub_100DC7BE8);
  v14 = *(_QWORD *)(v0 + 680);
  v15 = type metadata accessor for Logger(0);
  sub_10001A9E8(v15, (uint64_t)qword_1011B8520);
  v16 = *(_QWORD *)(v0 + 368);
  swift_bridgeObjectRetain_n(v16, 2);
  swift_bridgeObjectRetain(v14);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  v21 = *(_QWORD *)(v0 + 680);
  if (v20)
  {
    v22 = swift_slowAlloc(22, -1);
    *(_DWORD *)v22 = 134218240;
    v23 = *(_QWORD *)(v21 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 320) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2048;
    v24 = *(_QWORD *)(v16 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 328) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Unpublished anonymous payloads for %ld shared beacons found %ld to publish.", (uint8_t *)v22, 0x16u);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v16, 2);
    swift_bridgeObjectRelease_n(v21, 2);
  }

  swift_release();
  v37 = *(_QWORD *)(v0 + 632);
  v38 = *(_QWORD *)(v0 + 624);
  v39 = *(_QWORD *)(v0 + 616);
  v40 = *(_QWORD *)(v0 + 608);
  v41 = *(_QWORD *)(v0 + 600);
  v42 = *(_QWORD *)(v0 + 576);
  v43 = *(_QWORD *)(v0 + 568);
  v44 = *(_QWORD *)(v0 + 544);
  v45 = *(_QWORD *)(v0 + 536);
  v46 = *(_QWORD *)(v0 + 528);
  v47 = *(_QWORD *)(v0 + 520);
  v48 = *(_QWORD *)(v0 + 512);
  v49 = *(_QWORD *)(v0 + 480);
  v50 = *(_QWORD *)(v0 + 472);
  v51 = *(_QWORD *)(v0 + 464);
  v52 = *(_QWORD *)(v0 + 456);
  v53 = *(_QWORD *)(v0 + 432);
  v54 = *(_QWORD *)(v0 + 416);
  swift_beginAccess(v0 + 368, v0 + 288, 0, 0);
  v56 = *(_QWORD *)(v0 + 368);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v56);
}

uint64_t sub_100620CC8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 760) = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  *v2 = v0;
  v2[1] = sub_100620D40;
  return unsafeBlocking<A>(_:)(v0 + 336, sub_10007C6FC, *(_QWORD *)(v0 + 656), v3);
}

uint64_t sub_100620D40()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 656);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 760));
  swift_release();
  return swift_task_switch(sub_100620DA0, v1, 0);
}

uint64_t sub_100620DA0()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[50];
  v0[96] = v0[42];
  return swift_task_switch(sub_100620DBC, v1, 0);
}

uint64_t sub_100620DBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uid_t v3;
  _QWORD *v4;

  v0[97] = *(_QWORD *)(v0[96] + OBJC_IVAR____TtC12searchpartyd16BeaconKeyManager_keyStore);
  swift_retain();
  swift_release();
  v1 = v0[31];
  v2 = v0[32];
  sub_10001AA44(v0 + 28, v1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8) + 32))(v1);
  v3 = getuid();
  sub_100A06500(v3);
  v4 = (_QWORD *)swift_task_alloc(dword_1010FCEC4);
  v0[98] = v4;
  *v4 = v0;
  v4[1] = sub_100620E90;
  return sub_100477624(v0[64], v0[65], 1);
}

uint64_t sub_100620E90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();

  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 784);
  *(_QWORD *)(*(_QWORD *)v3 + 792) = v2;
  swift_task_dealloc(v7);
  v8 = (void (*)(uint64_t, uint64_t))v6[94];
  v9 = v6[65];
  v10 = v6[64];
  v11 = v6[61];
  v12 = v6[50];
  swift_release();
  if (v2)
  {
    swift_errorRelease(v2);
    v8(v10, v11);
    v8(v9, v11);
    v13 = sub_10062213C;
  }
  else
  {
    v6[100] = a2;
    v6[101] = a1;
    v8(v10, v11);
    v8(v9, v11);
    v13 = sub_100620F78;
  }
  return swift_task_switch(v13, v12, 0);
}

uint64_t sub_100620F78()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0 + 28;
  v2 = v0[100];
  if (v2 >> 60 == 15)
  {
    v0[102] = v0[99];
    v3 = v0[31];
    v4 = v0[32];
    sub_10001AA44(v1, v3);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) + 32))(v3);
    v5 = (_QWORD *)swift_task_alloc(dword_10110D1F4);
    v0[103] = v5;
    *v5 = v0;
    v5[1] = sub_10062108C;
    return sub_100954C24(v0[59], v0[67]);
  }
  else
  {
    v7 = v0[101];
    v8 = v0[99];
    v0[106] = v2;
    v0[105] = v7;
    v0[104] = v8;
    v9 = v0[82];
    v10 = v0[31];
    v11 = v0[32];
    sub_10001AA44(v1, v10);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8) + 32))(v10);
    return swift_task_switch(sub_100621818, v9, 0);
  }
}

uint64_t sub_10062108C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 752);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 536);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 488);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 400);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 824));
  v1(v2, v3);
  return swift_task_switch(sub_100621104, v4, 0);
}

uint64_t sub_100621104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)();
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v1 = *(_QWORD *)(v0 + 472);
  v2 = type metadata accessor for TimeBasedKey(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) != 1)
  {
    v19 = (__int128 *)(v1 + *(int *)(v2 + 24));
    v20 = *v19;
    v21 = v19[2];
    *(_OWORD *)(v0 + 32) = v19[1];
    *(_OWORD *)(v0 + 48) = v21;
    *(_OWORD *)(v0 + 16) = v20;
    sub_1004D4410((_QWORD *)(v0 + 16), (void (*)(_QWORD, _QWORD))sub_10005CB9C, (void (*)(uint64_t, uint64_t))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
    sub_1000126B0(v1, type metadata accessor for TimeBasedKey);
    v22 = sub_1007DFD44();
    v24 = v23;
    sub_1004D4410((_QWORD *)(v0 + 16), (void (*)(_QWORD, _QWORD))sub_1000FC25C, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
    v25 = *(_QWORD *)(v0 + 816);
    *(_QWORD *)(v0 + 848) = v24;
    *(_QWORD *)(v0 + 840) = v22;
    *(_QWORD *)(v0 + 832) = v25;
    v26 = *(_QWORD *)(v0 + 656);
    v27 = *(_QWORD *)(v0 + 248);
    v28 = *(_QWORD *)(v0 + 256);
    sub_10001AA44((_QWORD *)(v0 + 224), v27);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v28 + 8) + 8) + 32))(v27);
    v29 = sub_100621818;
    return swift_task_switch(v29, v26, 0);
  }
  v74 = v0 + 368;
  sub_100004048(v1, (uint64_t *)&unk_1010F0EE0);
  v3 = &qword_1010EA000;
  if (qword_1010EA620 != -1)
    swift_once(&qword_1010EA620, sub_100DC7BE8);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B8520);
  v5 = sub_100030784(v0 + 224, v0 + 184);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v68 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
    v70 = *(_QWORD *)(v0 + 576);
    v8 = *(_QWORD *)(v0 + 536);
    v9 = *(_QWORD *)(v0 + 488);
    v72 = v4;
    v10 = swift_slowAlloc(22, -1);
    v66 = swift_slowAlloc(32, -1);
    v76 = v66;
    *(_DWORD *)v10 = 141558275;
    *(_QWORD *)(v0 + 352) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    v12 = *(_QWORD *)(v0 + 208);
    v11 = *(_QWORD *)(v0 + 216);
    sub_10001AA44((_QWORD *)(v0 + 184), v12);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8) + 32))(v12);
    v13 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v9, v13);
    v16 = v15;
    v68(v8, v9);
    *(_QWORD *)(v0 + 360) = sub_100016940(v14, v16, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v74, v10 + 14, v10 + 22);
    v3 = &qword_1010EA000;
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 184));
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "No secondary advertisement found for %{private,mask.hash}s to publish anonymously.", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    v17 = v10;
    v4 = v72;
    swift_slowDealloc(v17, -1, -1);

    v18 = v70;
  }
  else
  {
    v30 = *(_QWORD *)(v0 + 576);

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 184));
    v18 = v30;
  }
  sub_1000126B0(v18, type metadata accessor for BeaconEstimatedLocation);
  v31 = *(_QWORD *)(v0 + 816);
  v32 = *(_QWORD *)(v0 + 688);
  v33 = *(_QWORD *)(v0 + 704) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
  if (v33 != v32)
  {
    v44 = *(_QWORD *)(v0 + 704) + 1;
    *(_QWORD *)(v0 + 704) = v44;
    *(_QWORD *)(v0 + 696) = v31;
    v26 = *(_QWORD *)(v0 + 656);
    v45 = *(_QWORD *)(v0 + 480);
    v46 = *(_QWORD *)(v0 + 392);
    sub_100030784(*(_QWORD *)(v0 + 680) + 40 * v44 + 32, v0 + 224);
    v47 = *(_QWORD *)(v0 + 248);
    v48 = *(_QWORD *)(v0 + 256);
    sub_10001AA44((_QWORD *)(v0 + 224), v47);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v48 + 8) + 8) + 32))(v47);
    v49 = type metadata accessor for Date(0);
    v50 = *(_QWORD *)(v49 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v45, v46, v49);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v45, 0, 1, v49);
    v29 = sub_100620688;
    return swift_task_switch(v29, v26, 0);
  }
  swift_bridgeObjectRelease();
  if (v3[196] != -1)
    swift_once(&qword_1010EA620, sub_100DC7BE8);
  v34 = *(_QWORD *)(v0 + 680);
  sub_10001A9E8(v4, (uint64_t)qword_1011B8520);
  v35 = *(_QWORD *)(v0 + 368);
  swift_bridgeObjectRetain_n(v35, 2);
  swift_bridgeObjectRetain(v34);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  v39 = os_log_type_enabled(v37, v38);
  v40 = *(_QWORD *)(v0 + 680);
  if (v39)
  {
    v41 = swift_slowAlloc(22, -1);
    *(_DWORD *)v41 = 134218240;
    v42 = *(_QWORD *)(v40 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 320) = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v41 + 12) = 2048;
    v43 = *(_QWORD *)(v35 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 328) = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v41 + 14, v41 + 22);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Unpublished anonymous payloads for %ld shared beacons found %ld to publish.", (uint8_t *)v41, 0x16u);
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v35, 2);
    swift_bridgeObjectRelease_n(v40, 2);
  }

  swift_release();
  v52 = *(_QWORD *)(v0 + 632);
  v53 = *(_QWORD *)(v0 + 624);
  v54 = *(_QWORD *)(v0 + 616);
  v55 = *(_QWORD *)(v0 + 608);
  v56 = *(_QWORD *)(v0 + 600);
  v57 = *(_QWORD *)(v0 + 576);
  v58 = *(_QWORD *)(v0 + 568);
  v59 = *(_QWORD *)(v0 + 544);
  v60 = *(_QWORD *)(v0 + 536);
  v61 = *(_QWORD *)(v0 + 528);
  v62 = *(_QWORD *)(v0 + 520);
  v63 = *(_QWORD *)(v0 + 512);
  v64 = *(_QWORD *)(v0 + 480);
  v65 = *(_QWORD *)(v0 + 472);
  v67 = *(_QWORD *)(v0 + 464);
  v69 = *(_QWORD *)(v0 + 456);
  v71 = *(_QWORD *)(v0 + 432);
  v73 = *(_QWORD *)(v0 + 416);
  swift_beginAccess(v74, v0 + 288, 0, 0);
  v75 = *(_QWORD *)(v0 + 368);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v67);
  swift_task_dealloc(v69);
  swift_task_dealloc(v71);
  swift_task_dealloc(v73);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v75);
}

uint64_t sub_100621818()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 728);
  v2 = *(unsigned __int8 *)(v0 + 872);
  v3 = *(_QWORD *)(v0 + 656);
  v4 = *(_QWORD *)(v0 + 528);
  v5 = *(_QWORD *)(v0 + 488);
  v6 = (v2 + 24) & ~v2;
  v7 = *(_QWORD *)(v0 + 504) + v6;
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 712))(v4, *(_QWORD *)(v0 + 536), v5);
  v9 = swift_allocObject(&unk_101083AE0, v7, v8);
  *(_QWORD *)(v0 + 856) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 864) = v11;
  *v11 = v0;
  v11[1] = sub_100621904;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 432), sub_100624370, v9, *(_QWORD *)(v0 + 424));
}

uint64_t sub_100621904()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 752);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 536);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 488);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 400);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 864));
  swift_release();
  v1(v2, v3);
  return swift_task_switch(sub_100621990, v4, 0);
}

uint64_t sub_100621990()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  os_log_type_t type;
  os_log_type_t typea[8];
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v1 = (_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 432);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 448) + 48))(v2, 1, *(_QWORD *)(v0 + 440)) == 1)
  {
    sub_100004048(v2, &qword_1010F2CA8);
    if (qword_1010EA620 != -1)
      swift_once(&qword_1010EA620, sub_100DC7BE8);
    v3 = type metadata accessor for Logger(0);
    sub_10001A9E8(v3, (uint64_t)qword_1011B8520);
    v4 = sub_100030784(v0 + 224, v0 + 144);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(_QWORD *)(v0 + 848);
    v9 = *(_QWORD *)(v0 + 840);
    if (v7)
    {
      type = v6;
      v81 = *(_QWORD *)(v0 + 840);
      v83 = *(_QWORD *)(v0 + 576);
      v10 = *(_QWORD *)(v0 + 536);
      v74 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
      v11 = *(_QWORD *)(v0 + 488);
      v12 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(32, -1);
      v13 = v86;
      *(_DWORD *)v12 = 141558275;
      *(_QWORD *)(v0 + 376) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v0 + 384, v12 + 4, v12 + 12);
      *(_WORD *)(v12 + 12) = 2081;
      v79 = v8;
      v14 = *(_QWORD *)(v0 + 168);
      v15 = *(_QWORD *)(v0 + 176);
      sub_10001AA44((_QWORD *)(v0 + 144), v14);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v15 + 8) + 8) + 32))(v14);
      v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v11, v16);
      v19 = v18;
      v74(v10, v11);
      *(_QWORD *)(v0 + 384) = sub_100016940(v17, v19, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 384, v0 + 392, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 144));
      _os_log_impl((void *)&_mh_execute_header, v5, type, "No current advertisement status found for %{private,mask.hash}s to publish anonymously.", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      v20 = v13;
      v1 = (_QWORD *)(v0 + 224);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      sub_10001BC14(v81, v79);
      v21 = v83;
    }
    else
    {
      v38 = *(_QWORD *)(v0 + 576);

      sub_10001BC14(v9, v8);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 144));
      v21 = v38;
    }
    sub_1000126B0(v21, type metadata accessor for BeaconEstimatedLocation);
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 848);
    v23 = *(_QWORD *)(v0 + 840);
    v24 = *(_QWORD *)(v0 + 576);
    v25 = *(_QWORD *)(v0 + 568);
    v27 = *(_QWORD *)(v0 + 456);
    v26 = *(_QWORD *)(v0 + 464);
    v28 = *(_QWORD *)(v0 + 416);
    sub_1000126EC(v2, v26, type metadata accessor for BeaconStatus);
    sub_10005972C(v26, v27, type metadata accessor for BeaconStatus);
    sub_10005972C(v24, v25, type metadata accessor for BeaconEstimatedLocation);
    sub_10001BBBC(v23, v22);
    sub_100622468(v23, v22, v27, v25, v28);
    v29 = *(_QWORD *)(v0 + 368);
    if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
      v29 = sub_1007C84C4(0, *(_QWORD *)(v29 + 16) + 1, 1, v29);
    v31 = *(_QWORD *)(v29 + 16);
    v30 = *(_QWORD *)(v29 + 24);
    if (v31 >= v30 >> 1)
      v29 = sub_1007C84C4(v30 > 1, v31 + 1, 1, v29);
    v32 = *(_QWORD *)(v0 + 848);
    v33 = *(_QWORD *)(v0 + 840);
    v34 = *(_QWORD *)(v0 + 576);
    v35 = *(_QWORD *)(v0 + 464);
    v37 = *(_QWORD *)(v0 + 408);
    v36 = *(_QWORD *)(v0 + 416);
    *(_QWORD *)(v29 + 16) = v31 + 1;
    sub_1000126EC(v36, v29+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(_QWORD *)(v37 + 72) * v31, type metadata accessor for ObservedAdvertisement);
    sub_10001BC14(v33, v32);
    *(_QWORD *)(v0 + 368) = v29;
    sub_1000126B0(v35, type metadata accessor for BeaconStatus);
    sub_1000126B0(v34, type metadata accessor for BeaconEstimatedLocation);
    v1 = (_QWORD *)(v0 + 224);
  }
  v39 = *(_QWORD *)(v0 + 832);
  v40 = *(_QWORD *)(v0 + 688);
  v41 = *(_QWORD *)(v0 + 704) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v41 == v40)
  {
    swift_bridgeObjectRelease();
    if (qword_1010EA620 != -1)
      swift_once(&qword_1010EA620, sub_100DC7BE8);
    v42 = *(_QWORD *)(v0 + 680);
    v43 = type metadata accessor for Logger(0);
    sub_10001A9E8(v43, (uint64_t)qword_1011B8520);
    v44 = *(_QWORD *)(v0 + 368);
    swift_bridgeObjectRetain_n(v44, 2);
    swift_bridgeObjectRetain(v42);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.default.getter(v46);
    v48 = os_log_type_enabled(v46, v47);
    v49 = *(_QWORD *)(v0 + 680);
    if (v48)
    {
      v50 = swift_slowAlloc(22, -1);
      *(_DWORD *)v50 = 134218240;
      v51 = *(_QWORD *)(v49 + 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 320) = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v50 + 4, v50 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 12) = 2048;
      v52 = *(_QWORD *)(v44 + 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 328) = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v50 + 14, v50 + 22);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Unpublished anonymous payloads for %ld shared beacons found %ld to publish.", (uint8_t *)v50, 0x16u);
      swift_slowDealloc(v50, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v44, 2);
      swift_bridgeObjectRelease_n(v49, 2);
    }

    swift_release();
    v62 = *(_QWORD *)(v0 + 632);
    v63 = *(_QWORD *)(v0 + 624);
    v64 = *(_QWORD *)(v0 + 616);
    v65 = *(_QWORD *)(v0 + 608);
    v66 = *(_QWORD *)(v0 + 600);
    v67 = *(_QWORD *)(v0 + 576);
    v68 = *(_QWORD *)(v0 + 568);
    v69 = *(_QWORD *)(v0 + 544);
    v70 = *(_QWORD *)(v0 + 536);
    v71 = *(_QWORD *)(v0 + 528);
    v72 = *(_QWORD *)(v0 + 520);
    v73 = *(_QWORD *)(v0 + 512);
    v75 = *(_QWORD *)(v0 + 480);
    v76 = *(_QWORD *)(v0 + 472);
    *(_QWORD *)typea = *(_QWORD *)(v0 + 464);
    v80 = *(_QWORD *)(v0 + 456);
    v82 = *(_QWORD *)(v0 + 432);
    v84 = *(_QWORD *)(v0 + 416);
    swift_beginAccess(v0 + 368, v0 + 288, 0, 0);
    v85 = *(_QWORD *)(v0 + 368);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(*(_QWORD *)typea);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v85);
  }
  else
  {
    v53 = *(_QWORD *)(v0 + 704) + 1;
    *(_QWORD *)(v0 + 704) = v53;
    *(_QWORD *)(v0 + 696) = v39;
    v54 = *(_QWORD *)(v0 + 656);
    v55 = *(_QWORD *)(v0 + 480);
    v56 = *(_QWORD *)(v0 + 392);
    sub_100030784(*(_QWORD *)(v0 + 680) + 40 * v53 + 32, (uint64_t)v1);
    v58 = *(_QWORD *)(v0 + 248);
    v57 = *(_QWORD *)(v0 + 256);
    sub_10001AA44(v1, v58);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v57 + 8) + 8) + 32))(v58);
    v59 = type metadata accessor for Date(0);
    v60 = *(_QWORD *)(v59 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v55, v56, v59);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v60 + 56))(v55, 0, 1, v59);
    return swift_task_switch(sub_100620688, v54, 0);
  }
}

uint64_t sub_10062213C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v0[102] = 0;
  v1 = v0[31];
  v2 = v0[32];
  sub_10001AA44(v0 + 28, v1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 8) + 32))(v1);
  v3 = (_QWORD *)swift_task_alloc(dword_10110D1F4);
  v0[103] = v3;
  *v3 = v0;
  v3[1] = sub_10062108C;
  return sub_100954C24(v0[59], v0[67]);
}

uint64_t sub_1006221D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[9] = v7;
  v4[10] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10062223C, v3, 0);
}

uint64_t sub_10062223C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 128);
  *(_QWORD *)(v0 + 88) = v1;
  return swift_task_switch(sub_100622258, v1, 0);
}

uint64_t sub_100622258()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = v0[10];
  v1 = v0[11];
  v4 = v0[8];
  v3 = v0[9];
  v5 = v0[7];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, v0[4], v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101083B08, v7 + v3, v6 | 7);
  v0[12] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[13] = v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F7950);
  *v10 = v0;
  v10[1] = sub_10062234C;
  return unsafeBlocking<A>(_:)(v0 + 2, sub_10007CA2C, v8, v11);
}

uint64_t sub_10062234C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  swift_release();
  return swift_task_switch(sub_1006223AC, v1, 0);
}

uint64_t sub_1006223AC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[6];
  v0[14] = v0[2];
  return swift_task_switch(sub_1006223C8, v1, 0);
}

uint64_t sub_1006223C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = (unint64_t *)swift_task_alloc(32);
  v5[2] = (unint64_t)&off_101048590;
  v5[3] = v3;
  v6 = sub_10008B52C((uint64_t (*)(char *))sub_1006258F0, v5, v1);
  swift_task_dealloc(v5);
  sub_100A79444(v6, v4);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100622468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  void (*v23)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, _BYTE *, uint64_t);
  int *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  _BYTE v36[4];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;

  v38 = a1;
  v39 = a2;
  v8 = sub_10001A9A8((uint64_t *)&unk_101100320);
  __chkstk_darwin(v8);
  v10 = &v36[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  __chkstk_darwin(v11);
  v13 = &v36[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v14);
  v16 = &v36[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = &v36[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19);
  v40 = &v36[-v22];
  v37 = *(unsigned __int8 *)(a3 + *(int *)(type metadata accessor for BeaconStatus(0) + 20));
  sub_1000126B0(a3, type metadata accessor for BeaconStatus);
  sub_10000F9B8(a4 + v11[12], (uint64_t)v16, (uint64_t *)&unk_1010EA690);
  sub_10005972C(a4, (uint64_t)v13, type metadata accessor for BeaconEstimatedLocation);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    v23 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 16);
    v23(v40, &v13[v11[10]], v17);
    sub_1000126B0((uint64_t)v13, type metadata accessor for BeaconEstimatedLocation);
    sub_100004048((uint64_t)v16, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    sub_1000126B0((uint64_t)v13, type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 32))(v40, v16, v17);
    v23 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 16);
  }
  v24 = *(_QWORD *)(a4 + v11[7]);
  v25 = *(_QWORD *)(a4 + v11[8]);
  v26 = v37 & 0xF0;
  v27 = *(_QWORD *)(a4 + v11[9]);
  v23(v21, (_BYTE *)(a4 + v11[10]), v17);
  sub_1000126B0(a4, type metadata accessor for BeaconEstimatedLocation);
  *(_QWORD *)v10 = v24;
  *((_QWORD *)v10 + 1) = v25;
  *((_QWORD *)v10 + 2) = v27;
  v28 = type metadata accessor for ObservedAdvertisement.Location(0);
  v29 = *(void (**)(char *, _BYTE *, uint64_t))(v18 + 32);
  v29(&v10[*(int *)(v28 + 28)], v21, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v10, 0, 1, v28);
  v30 = (int *)type metadata accessor for ObservedAdvertisement(0);
  v31 = a5 + v30[13];
  v32 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  *(_QWORD *)a5 = 0;
  *(_WORD *)(a5 + 8) = 1;
  v34 = v39;
  v33 = v40;
  *(_QWORD *)(a5 + 16) = v38;
  *(_QWORD *)(a5 + 24) = v34;
  *(_BYTE *)(a5 + 32) = v26;
  *(_WORD *)(a5 + 33) = 0;
  *(_BYTE *)(a5 + 35) = 1;
  *(_DWORD *)(a5 + 36) = -1;
  v29((char *)(a5 + v30[11]), v33, v17);
  *(_BYTE *)(a5 + v30[14]) = 0;
  return sub_100005CF0((uint64_t)v10, a5 + v30[12], (uint64_t *)&unk_101100320);
}

uint64_t sub_1006227B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 208) = v0;
  v2 = type metadata accessor for LocationFetcher(0);
  *(_QWORD *)(v1 + 216) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100622808, v0, 0);
}

uint64_t sub_100622808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t (__cdecl *v8)();

  if (qword_1010EA620 != -1)
    swift_once(&qword_1010EA620, sub_100DC7BE8);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B8520);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fetching own device locations from disk before publishing own devices.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v8 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v7 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 224) = v7;
    *v7 = v0;
    v7[1] = sub_1006229A8;
    return v8();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006229A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100622A08, v3, 0);
}

uint64_t sub_100622A08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(void);

  v1 = *(_QWORD *)(v0 + 232);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (!v1)
  {
    v5 = *(_QWORD *)(v0 + 216);
    v6 = sub_100033220();
    v7 = swift_allocError(&type metadata for DaemonError, v6, 0, 0);
    *v8 = 0xD000000000000010;
    v8[1] = 0x8000000100EC6470;
    swift_willThrow(v7);
    swift_task_dealloc(v5);
    v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 160))
  {
    sub_10000F9FC((__int128 *)(v0 + 136), v0 + 96);
    sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
    v9 = (uint64_t (*)(void))((char *)&dword_1010EBC40 + dword_1010EBC40);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBC44);
    *(_QWORD *)(v0 + 240) = v3;
    *v3 = v0;
    v3[1] = sub_100622B1C;
    v4 = v9;
    return v4();
  }
  __break(1u);
  return result;
}

uint64_t sub_100622B1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100622B7C, v3, 0);
}

uint64_t sub_100622B7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[6];

  v1 = *(_QWORD *)(v0 + 248);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
    v11[3] = &type metadata for DiskFetchPolicy;
    v11[4] = sub_100624178();
    v2 = qword_1010E9CF0;
    swift_retain();
    if (v2 != -1)
      swift_once(&qword_1010E9CF0, sub_10058CADC);
    v3 = *(char **)(v0 + 216);
    v4 = qword_1011B7160;
    swift_retain();
    v5 = sub_1006B9080((uint64_t)_swiftEmptyArrayStorage);
    sub_1003F1570(v1, v11, v4, v5, v3);
    return swift_task_switch(sub_100622CC4, *(_QWORD *)(v0 + 232), 0);
  }
  else
  {
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
    v7 = *(_QWORD *)(v0 + 216);
    v8 = sub_100033220();
    v9 = swift_allocError(&type metadata for DaemonError, v8, 0, 0);
    *v10 = 0xD000000000000010;
    v10[1] = 0x8000000100EC6470;
    swift_willThrow(v9);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100622CC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 256) = v3;
  v4 = sub_10001A9A8(&qword_1010F0B20);
  *v3 = v0;
  v3[1] = sub_100622D4C;
  return unsafeBlocking<A>(_:)(v0 + 200, sub_10001CB10, v1, v4);
}

uint64_t sub_100622D4C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 256));
  swift_release();
  return swift_task_switch(sub_100622DA8, *(_QWORD *)(v1 + 232), 0);
}

uint64_t sub_100622DA8()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[26];
  v0[33] = v0[25];
  return swift_task_switch(sub_100622DC0, v1, 0);
}

uint64_t sub_100622DC0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = v2[33];
  v4 = v2[26];
  v5 = v2[27];
  v6 = sub_100006C64(&qword_101101940, a2, (uint64_t (*)(uint64_t))type metadata accessor for DeviceBeaconPayloadPublisher, (uint64_t)&unk_100E463AC);
  v7 = swift_task_alloc(32);
  v2[34] = v7;
  *(_QWORD *)(v7 + 16) = v5;
  *(_QWORD *)(v7 + 24) = v3;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v2[35] = v8;
  *v8 = v2;
  v8[1] = sub_100622E8C;
  return withCheckedContinuation<A>(isolation:function:_:)(v8, v4, v6, 0xD000000000000018, 0x8000000100EDD440, sub_1006241BC, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_100622E8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 272);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 208);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 280));
  swift_bridgeObjectRelease();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100622F00, v2, 0);
}

uint64_t sub_100622F00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 216);
  swift_release();
  swift_release();
  sub_1000126B0(v1, type metadata accessor for LocationFetcher);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100622F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;

  v19 = a2;
  v5 = type metadata accessor for LocationFetcher(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = sub_10001A9A8(&qword_101108DF0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_101083A68, v12 + v10, v11 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  type metadata accessor for Transaction(0);
  sub_10005972C(v19, (uint64_t)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LocationFetcher);
  v14 = *(unsigned __int8 *)(v6 + 80);
  v15 = (v14 + 40) & ~v14;
  v16 = (_QWORD *)swift_allocObject(&unk_101083A90, v15 + v7, v14 | 7);
  v16[2] = sub_100624228;
  v16[3] = v13;
  v16[4] = a3;
  sub_1000126EC((uint64_t)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v16 + v15, type metadata accessor for LocationFetcher);
  swift_retain();
  swift_bridgeObjectRetain(a3);
  static Transaction.asyncTask(name:block:)("beaconsFromDisk.FromDisk", 24, 2, &unk_1010F7740, v16);
  swift_release();
  return swift_release();
}

uint64_t sub_100623110()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  if (qword_1010EA620 != -1)
    swift_once(&qword_1010EA620, sub_100DC7BE8);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B8520);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Done fetching own device locations from disk before publishing own devices.", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = sub_10001A9A8(&qword_101108DF0);
  return CheckedContinuation.resume(returning:)(v5, v5);
}

uint64_t sub_1006231F8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[15]);
  swift_release(v0[16]);
  swift_release(v0[17]);
  swift_release(v0[18]);
  swift_release(v0[19]);
  swift_release(v0[20]);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for DeviceBeaconPayloadPublisher()
{
  return objc_opt_self(_TtC12searchpartyd28DeviceBeaconPayloadPublisher);
}

uint64_t sub_100623264()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_101101824);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000AA8AC;
  return sub_10061D13C();
}

uint64_t sub_1006232AC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_101101940, a2, (uint64_t (*)(uint64_t))type metadata accessor for DeviceBeaconPayloadPublisher, (uint64_t)&unk_100E463AC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

double sub_1006232E8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unsigned __int8 v17;
  __int128 v18;
  unsigned __int16 v19;
  uint64_t v20;

  v9 = *a1;
  v10 = a1[1];
  v11 = sub_10001A9A8((uint64_t *)&unk_101109390);
  sub_100624C08(a2, a3, v9, v10, (uint64_t)a1 + *(int *)(v11 + 48), *((unsigned __int8 *)a1 + *(int *)(v11 + 64)), (uint64_t *)&v16);
  if (!v4)
  {
    v13 = v17;
    v14 = v20;
    v15 = v19;
    *(_OWORD *)a4 = v16;
    *(_QWORD *)(a4 + 16) = v13;
    result = *(double *)&v18;
    *(_OWORD *)(a4 + 24) = v18;
    *(_QWORD *)(a4 + 40) = v15;
    *(_QWORD *)(a4 + 48) = v14;
  }
  return result;
}

uint64_t sub_100623398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = a3;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v31 - v9;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD **)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v31 - v16;
  result = type metadata accessor for BeaconEstimatedLocation(0);
  v19 = *(_QWORD *)(a2 + 16);
  if (!v19)
    goto LABEL_12;
  v20 = result;
  v21 = *(int *)(result + 44);
  v31 = a1;
  v22 = *(unsigned __int8 *)(a1 + v21);
  if (*(unsigned __int8 *)(a2 + 32) == v22)
    goto LABEL_5;
  if (v19 == 1)
    goto LABEL_12;
  if (*(unsigned __int8 *)(a2 + 33) == v22)
  {
LABEL_5:
    sub_10000F9B8(v32, (uint64_t)v10, (uint64_t *)&unk_1010EA690);
    v23 = (unsigned int (*)(char *, uint64_t, uint64_t))v12[6];
    if (v23(v10, 1, v11) == 1)
    {
      v24 = (uint64_t)v10;
    }
    else
    {
      v25 = (void (*)(char *, char *, uint64_t))v12[4];
      v25(v17, v10, v11);
      sub_10000F9B8(v31 + *(int *)(v20 + 48), (uint64_t)v8, (uint64_t *)&unk_1010EA690);
      if (v23(v8, 1, v11) != 1)
      {
        v25(v15, v8, v11);
        v27 = sub_100006C64((unint64_t *)&qword_1010F4820, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v26 = dispatch thunk of static Comparable.< infix(_:_:)(v15, v17, v11, v27) ^ 1;
        v28 = (void (*)(char *, uint64_t))v12[1];
        v28(v15, v11);
        v28(v17, v11);
        return v26 & 1;
      }
      ((void (*)(char *, uint64_t))v12[1])(v17, v11);
      v24 = (uint64_t)v8;
    }
    sub_100004048(v24, (uint64_t *)&unk_1010EA690);
    v26 = 1;
    return v26 & 1;
  }
  if (v19 == 2)
  {
LABEL_12:
    v26 = 0;
    return v26 & 1;
  }
  for (i = 34; ; ++i)
  {
    v30 = i - 31;
    if (__OFADD__(i - 32, 1))
      break;
    if (*(unsigned __int8 *)(a2 + i) == v22)
      goto LABEL_5;
    v26 = 0;
    if (v30 == v19)
      return v26 & 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_100623630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v5[7] = a4;
  v5[8] = a5;
  v7 = *(_QWORD *)(type metadata accessor for MemberSharingCircle(0) - 8);
  v5[9] = v7;
  v5[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_101101990);
  v5[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v5[12] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[13] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v5[14] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[15] = swift_task_alloc(v12);
  v5[16] = swift_task_alloc(v12);
  return swift_task_switch(sub_1006236F0, a5, 0);
}

uint64_t sub_1006236F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void (*v9)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 136) = v2;
  if (!v2)
  {
LABEL_9:
    v12 = *(_QWORD *)(v0 + 120);
    v14 = *(_QWORD *)(v0 + 80);
    v13 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  swift_bridgeObjectRetain(v1);
  v3 = 0;
  while (1)
  {
    *(_QWORD *)(v0 + 144) = v3;
    v4 = *(_QWORD *)(v0 + 88);
    v5 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 8 * v3 + 32);
    *(_QWORD *)(v0 + 152) = v5;
    *(_QWORD *)(v0 + 32) = v5;
    swift_errorRetain(v5);
    swift_errorRetain(v5);
    v6 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    *(_QWORD *)(v0 + 160) = v6;
    v7 = type metadata accessor for DeviceBeaconPayloadPublisher.PublishError(0);
    v8 = swift_dynamicCast(v4, v0 + 32, v6, v7, 6);
    v9 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
    v10 = *(_QWORD *)(v0 + 88);
    if ((v8 & 1) != 0)
      break;
    v9(*(_QWORD *)(v0 + 88), 1, 1, v7);
    swift_errorRelease(v5);
    sub_100004048(v10, &qword_101101990);
LABEL_4:
    v3 = *(_QWORD *)(v0 + 144) + 1;
    if (v3 == *(_QWORD *)(v0 + 136))
    {
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
  }
  v9(*(_QWORD *)(v0 + 88), 0, 1, v7);
  if (swift_getEnumCaseMultiPayload(v10, v7))
  {
    v11 = *(_QWORD *)(v0 + 88);
    swift_errorRelease(v5);
    sub_1000126B0(v11, type metadata accessor for DeviceBeaconPayloadPublisher.PublishError);
    goto LABEL_4;
  }
  v16 = *(_QWORD *)(v0 + 128);
  v17 = *(_QWORD *)(v0 + 96);
  v18 = *(_QWORD *)(v0 + 104);
  v19 = *(_QWORD *)(v0 + 88);
  v20 = *(_QWORD *)(v0 + 64);
  v21 = *(_QWORD *)(v19 + *(int *)(sub_10001A9A8(&qword_101101998) + 48));
  *(_QWORD *)(v0 + 168) = v21;
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
  *(_QWORD *)(v0 + 176) = v22;
  v22(v16, v19, v17);
  swift_errorRetain(v21);
  v23 = *(_QWORD *)(v20 + 128);
  *(_QWORD *)(v0 + 184) = v23;
  return swift_task_switch(sub_1006238F4, v23, 0);
}

uint64_t sub_1006238F4()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[22];
  v1 = v0[23];
  v3 = v0[15];
  v5 = v0[13];
  v4 = v0[14];
  v6 = v0[12];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v3, v0[16], v6);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = swift_allocObject(&unk_101083BA8, v8 + v4, v7 | 7);
  v0[24] = v9;
  *(_QWORD *)(v9 + 16) = v1;
  v2(v9 + v8, v3, v6);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  v0[25] = v11;
  v12 = sub_10001A9A8(&qword_1010EC840);
  *v11 = v0;
  v11[1] = sub_1006239E4;
  return unsafeBlocking<A>(_:)(v0 + 5, sub_1000D9288, v9, v12);
}

uint64_t sub_1006239E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  swift_release();
  return swift_task_switch(sub_100623A44, v1, 0);
}

uint64_t sub_100623A44()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[8];
  v0[26] = v0[5];
  return swift_task_switch(sub_100623A60, v1, 0);
}

uint64_t sub_100623A60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void (*v26)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 216) = v2;
  if (v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(v0 + 72);
    v5 = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v0 + 28) = v5;
    v6 = *(_QWORD *)(v4 + 72);
    *(_QWORD *)(v0 + 224) = v6;
    while (1)
    {
      *(_QWORD *)(v0 + 232) = v3;
      v8 = *(_QWORD *)(v0 + 160);
      v7 = *(_QWORD *)(v0 + 168);
      sub_10005972C(v1 + ((v5 + 32) & ~(unint64_t)v5) + v3 * v6, *(_QWORD *)(v0 + 80), type metadata accessor for MemberSharingCircle);
      *(_QWORD *)(v0 + 48) = v7;
      swift_errorRetain(v7);
      if (swift_dynamicCast(v0 + 16, v0 + 48, v8, &type metadata for KeyDropInterface.KeyDropError, 6)
        && *(_BYTE *)(v0 + 24) == 1
        && *(_QWORD *)(v0 + 16) > 5uLL)
      {
        v29 = (_QWORD *)swift_task_alloc(dword_10111A224);
        *(_QWORD *)(v0 + 240) = v29;
        *v29 = v0;
        v29[1] = sub_100623DC4;
        return sub_100C2EE60(*(_QWORD *)(v0 + 80));
      }
      v9 = *(_QWORD *)(v0 + 216);
      v10 = *(_QWORD *)(v0 + 232) + 1;
      sub_1000126B0(*(_QWORD *)(v0 + 80), type metadata accessor for MemberSharingCircle);
      if (v10 == v9)
        break;
      v6 = *(_QWORD *)(v0 + 224);
      v3 = *(_QWORD *)(v0 + 232) + 1;
      LOBYTE(v5) = *(_BYTE *)(v0 + 28);
      v1 = *(_QWORD *)(v0 + 208);
    }
  }
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v0 + 168);
  v12 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 104);
  swift_errorRelease(v11);
  swift_errorRelease(v11);
  swift_errorRelease(v12);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  v16 = *(_QWORD *)(v0 + 144) + 1;
  if (v16 == *(_QWORD *)(v0 + 136))
  {
LABEL_9:
    swift_bridgeObjectRelease();
    v17 = *(_QWORD *)(v0 + 120);
    v19 = *(_QWORD *)(v0 + 80);
    v18 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  while (1)
  {
    *(_QWORD *)(v0 + 144) = v16;
    v21 = *(_QWORD *)(v0 + 88);
    v22 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 8 * v16 + 32);
    *(_QWORD *)(v0 + 152) = v22;
    *(_QWORD *)(v0 + 32) = v22;
    swift_errorRetain(v22);
    swift_errorRetain(v22);
    v23 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    *(_QWORD *)(v0 + 160) = v23;
    v24 = type metadata accessor for DeviceBeaconPayloadPublisher.PublishError(0);
    v25 = swift_dynamicCast(v21, v0 + 32, v23, v24, 6);
    v26 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
    v27 = *(_QWORD *)(v0 + 88);
    if (v25)
      break;
    v26(*(_QWORD *)(v0 + 88), 1, 1, v24);
    swift_errorRelease(v22);
    sub_100004048(v27, &qword_101101990);
LABEL_12:
    v16 = *(_QWORD *)(v0 + 144) + 1;
    if (v16 == *(_QWORD *)(v0 + 136))
      goto LABEL_9;
  }
  v26(*(_QWORD *)(v0 + 88), 0, 1, v24);
  if (swift_getEnumCaseMultiPayload(v27, v24))
  {
    v28 = *(_QWORD *)(v0 + 88);
    swift_errorRelease(v22);
    sub_1000126B0(v28, type metadata accessor for DeviceBeaconPayloadPublisher.PublishError);
    goto LABEL_12;
  }
  v30 = *(_QWORD *)(v0 + 128);
  v31 = *(_QWORD *)(v0 + 96);
  v32 = *(_QWORD *)(v0 + 104);
  v33 = *(_QWORD *)(v0 + 88);
  v34 = *(_QWORD *)(v0 + 64);
  v35 = *(_QWORD *)(v33 + *(int *)(sub_10001A9A8(&qword_101101998) + 48));
  *(_QWORD *)(v0 + 168) = v35;
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32);
  *(_QWORD *)(v0 + 176) = v36;
  v36(v30, v33, v31);
  swift_errorRetain(v35);
  v37 = *(_QWORD *)(v34 + 128);
  *(_QWORD *)(v0 + 184) = v37;
  return swift_task_switch(sub_1006238F4, v37, 0);
}

uint64_t sub_100623DC4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 240));
  return swift_task_switch(sub_100623E1C, v1, 0);
}

uint64_t sub_100623E1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void (*v25)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 232) + 1;
  sub_1000126B0(*(_QWORD *)(v0 + 80), type metadata accessor for MemberSharingCircle);
  if (v2 != v1)
  {
    do
    {
      v15 = *(_QWORD *)(v0 + 224);
      v16 = *(_QWORD *)(v0 + 232) + 1;
      *(_QWORD *)(v0 + 232) = v16;
      v18 = *(_QWORD *)(v0 + 160);
      v17 = *(_QWORD *)(v0 + 168);
      sub_10005972C(*(_QWORD *)(v0 + 208)+ ((*(unsigned __int8 *)(v0 + 28) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 28))+ v15 * v16, *(_QWORD *)(v0 + 80), type metadata accessor for MemberSharingCircle);
      *(_QWORD *)(v0 + 48) = v17;
      swift_errorRetain(v17);
      if ((swift_dynamicCast(v0 + 16, v0 + 48, v18, &type metadata for KeyDropInterface.KeyDropError, 6) & 1) != 0
        && *(_BYTE *)(v0 + 24) == 1
        && *(_QWORD *)(v0 + 16) > 5uLL)
      {
        v19 = (_QWORD *)swift_task_alloc(dword_10111A224);
        *(_QWORD *)(v0 + 240) = v19;
        *v19 = v0;
        v19[1] = sub_100623DC4;
        return sub_100C2EE60(*(_QWORD *)(v0 + 80));
      }
      v13 = *(_QWORD *)(v0 + 216);
      v14 = *(_QWORD *)(v0 + 232) + 1;
      sub_1000126B0(*(_QWORD *)(v0 + 80), type metadata accessor for MemberSharingCircle);
    }
    while (v14 != v13);
  }
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 104);
  swift_errorRelease(v3);
  swift_errorRelease(v3);
  swift_errorRelease(v4);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v8 = *(_QWORD *)(v0 + 144) + 1;
  if (v8 == *(_QWORD *)(v0 + 136))
  {
LABEL_3:
    swift_bridgeObjectRelease();
    v9 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 80);
    v10 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  while (1)
  {
    *(_QWORD *)(v0 + 144) = v8;
    v20 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 8 * v8 + 32);
    *(_QWORD *)(v0 + 152) = v21;
    *(_QWORD *)(v0 + 32) = v21;
    swift_errorRetain(v21);
    swift_errorRetain(v21);
    v22 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    *(_QWORD *)(v0 + 160) = v22;
    v23 = type metadata accessor for DeviceBeaconPayloadPublisher.PublishError(0);
    v24 = swift_dynamicCast(v20, v0 + 32, v22, v23, 6);
    v25 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
    v26 = *(_QWORD *)(v0 + 88);
    if (v24)
      break;
    v25(*(_QWORD *)(v0 + 88), 1, 1, v23);
    swift_errorRelease(v21);
    sub_100004048(v26, &qword_101101990);
LABEL_12:
    v8 = *(_QWORD *)(v0 + 144) + 1;
    if (v8 == *(_QWORD *)(v0 + 136))
      goto LABEL_3;
  }
  v25(*(_QWORD *)(v0 + 88), 0, 1, v23);
  if (swift_getEnumCaseMultiPayload(v26, v23))
  {
    v27 = *(_QWORD *)(v0 + 88);
    swift_errorRelease(v21);
    sub_1000126B0(v27, type metadata accessor for DeviceBeaconPayloadPublisher.PublishError);
    goto LABEL_12;
  }
  v28 = *(_QWORD *)(v0 + 128);
  v29 = *(_QWORD *)(v0 + 96);
  v30 = *(_QWORD *)(v0 + 104);
  v31 = *(_QWORD *)(v0 + 88);
  v32 = *(_QWORD *)(v0 + 64);
  v33 = *(_QWORD *)(v31 + *(int *)(sub_10001A9A8(&qword_101101998) + 48));
  *(_QWORD *)(v0 + 168) = v33;
  v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32);
  *(_QWORD *)(v0 + 176) = v34;
  v34(v28, v31, v29);
  swift_errorRetain(v33);
  v35 = *(_QWORD *)(v32 + 128);
  *(_QWORD *)(v0 + 184) = v35;
  return swift_task_switch(sub_1006238F4, v35, 0);
}

unint64_t sub_100624178()
{
  unint64_t result;

  result = qword_101101948;
  if (!qword_101101948)
  {
    result = swift_getWitnessTable(aX_3, &type metadata for DiskFetchPolicy);
    atomic_store(result, &qword_101101948);
  }
  return result;
}

uint64_t sub_1006241BC(uint64_t a1)
{
  uint64_t v1;

  return sub_100622F5C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1006241C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_101108DF0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100624228()
{
  sub_10001A9A8(&qword_101108DF0);
  return sub_100623110();
}

uint64_t sub_100624268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for LocationFetcher(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v4 + 24));
  v7 = v0 + v4 + *(int *)(v1 + 32);
  v8 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100624350(uint64_t a1)
{
  uint64_t v1;

  return sub_100623398(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_100624370@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100A82B00(v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_1006243B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 1;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_10062442C(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  sub_100DD1F48(v1 + v5, *(unsigned __int8 *)(v1 + v5 + *(_QWORD *)(v4 + 64)));
  if (!v2)
  {
    *a1 = v6;
    a1[1] = v7;
    a1[2] = v8;
    a1[3] = v9;
  }
}

double sub_100624498@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1006232E8(a1, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

void sub_1006244B4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int *v20;
  double v21;
  int v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84[2];

  v81 = a4;
  v75 = a1;
  v77 = a5;
  v76 = type metadata accessor for UUID(0);
  v73 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v74 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for OwnSubmitLocationInfo(0);
  v72 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v71 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v9);
  v80 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v78 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v66 - v15;
  v17 = type metadata accessor for BeaconPayloadv1(0);
  __chkstk_darwin(v17);
  v19 = (uint64_t *)((char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  v21 = *(double *)(a2 + v20[9]);
  v22 = sub_1001E58F8(v21);
  v23 = a2 + v20[10];
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v79 = v11;
  v24(v16, v23, v11);
  v25 = *(double *)(a2 + v20[7]);
  v26 = *(double *)(a2 + v20[8]);
  v27 = a3;
  v28 = a3;
  v29 = v81;
  sub_10001BBBC(v28, v81);
  v30 = v82;
  sub_10078DD3C(v27, v29, (uint64_t)v16, v22, 0, v19, v25, v26, v21);
  if (!v30)
  {
    v31 = a2;
    v82 = v24;
    v32 = v79;
    v33 = (uint64_t)v80;
    v34 = v78;
    v35 = BeaconPayloadv1.encode()();
    v66 = v19;
    v67 = v36;
    v68 = v37;
    v69 = v35;
    v81 = v38;
    sub_10000F9B8(v31 + v20[12], v33, (uint64_t *)&unk_1010EA690);
    v39 = v32;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v33, 1, v32) == 1)
    {
      sub_100004048(v33, (uint64_t *)&unk_1010EA690);
      if (qword_1010EA620 != -1)
        swift_once(&qword_1010EA620, sub_100DC7BE8);
      v40 = type metadata accessor for Logger(0);
      sub_10001A9E8(v40, (uint64_t)qword_1011B8520);
      v41 = v73;
      v42 = v74;
      v43 = v76;
      v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v73 + 16))(v74, v75, v76);
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.error.getter(v45);
      if (os_log_type_enabled(v45, v46))
      {
        v47 = swift_slowAlloc(22, -1);
        v48 = v41;
        v49 = swift_slowAlloc(32, -1);
        *(_DWORD *)v47 = 141558275;
        v83 = 1752392040;
        v84[0] = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v47 + 4, v47 + 12);
        *(_WORD *)(v47 + 12) = 2081;
        v82 = (void (*)(char *, uint64_t, uint64_t))(v47 + 14);
        v50 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v51 = dispatch thunk of CustomStringConvertible.description.getter(v43, v50);
        v83 = sub_100016940(v51, v52, v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v82, v47 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v48 + 8))(v42, v43);
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "location does not contain a scanDate %{private,mask.hash}s", (uint8_t *)v47, 0x16u);
        swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v49, -1, -1);
        swift_slowDealloc(v47, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
      }

      v61 = (uint64_t)v66;
      v62 = type metadata accessor for DeviceBeaconPayloadPublisher.PublishError(0);
      v63 = sub_100006C64(&qword_101101960, 255, type metadata accessor for DeviceBeaconPayloadPublisher.PublishError, (uint64_t)&unk_100E46400);
      swift_allocError(v62, v63, 0, 0);
      v65 = swift_storeEnumTagMultiPayload(v64, v62, 9);
      swift_willThrow(v65);
      sub_10001BC14(v69, v81);
      sub_10001BC14(v67, v68);
      sub_1000126B0(v61, type metadata accessor for BeaconPayloadv1);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v34, v33, v32);
      v53 = v71;
      v82(&v71[*(int *)(v70 + 20)], (uint64_t)v34, v32);
      v54 = v68;
      *v53 = v67;
      v53[1] = v54;
      v55 = sub_10001A9A8(&qword_1010ED4A8);
      v56 = *(unsigned __int8 *)(v72 + 80);
      v57 = (v56 + 32) & ~v56;
      v58 = swift_allocObject(v55, v57 + *(_QWORD *)(v72 + 72), v56 | 7);
      *(_OWORD *)(v58 + 16) = xmmword_100E22B00;
      sub_1000126EC((uint64_t)v53, v58 + v57, type metadata accessor for OwnSubmitLocationInfo);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v34, v39);
      sub_1000126B0((uint64_t)v66, type metadata accessor for BeaconPayloadv1);
      v59 = v77;
      v60 = v81;
      *v77 = v69;
      v59[1] = v60;
      *((_BYTE *)v59 + 16) = 1;
      v59[3] = 0;
      v59[4] = 0;
      *((_WORD *)v59 + 20) = 4;
      v59[6] = v58;
    }
  }
}

uint64_t type metadata accessor for DeviceBeaconPayloadPublisher.PublishError(uint64_t a1)
{
  uint64_t result;

  result = qword_101101A18;
  if (!qword_101101A18)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeviceBeaconPayloadPublisher.PublishError);
  return result;
}

uint64_t sub_100624AC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  NSString v9;
  uint64_t v11;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  sub_10000F9B8(a1, (uint64_t)v4, (uint64_t *)&unk_1010EA690);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setObject:forKey:", isa, v9);

  swift_unknownObjectRelease(isa);
  return sub_100004048(a1, (uint64_t *)&unk_1010EA690);
}

void sub_100624C08(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  int *v24;
  double v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  int v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95[2];

  v92 = a4;
  v85 = a6;
  v82 = a5;
  v83 = a1;
  v84 = a7;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v87 = v9;
  v88 = v10;
  __chkstk_darwin(v9);
  v86 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for OwnSubmitLocationInfo(0);
  v81 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v80 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v13);
  v90 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v89 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v75 - v19;
  v21 = type metadata accessor for BeaconPayloadv1(0);
  __chkstk_darwin(v21);
  v23 = (uint64_t *)((char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  v25 = *(double *)(a2 + v24[9]);
  v26 = sub_1001E58F8(v25);
  v27 = a2 + v24[10];
  v28 = *(uint64_t **)(v16 + 16);
  v91 = v15;
  ((void (*)(char *, uint64_t, uint64_t))v28)(v20, v27, v15);
  v29 = *(double *)(a2 + v24[7]);
  v30 = *(double *)(a2 + v24[8]);
  v31 = a3;
  v32 = a3;
  v33 = v92;
  sub_10001BBBC(v32, v92);
  v34 = v93;
  sub_10078DD3C(v31, v33, (uint64_t)v20, v26, 0, v23, v29, v30, v25);
  if (!v34)
  {
    v93 = v28;
    v36 = (uint64_t)v90;
    v35 = v91;
    v37 = BeaconPayloadv1.encode()();
    v38 = v23;
    v92 = v39;
    v76 = v40;
    v77 = v41;
    v78 = v37;
    sub_10000F9B8(a2 + v24[12], v36, (uint64_t *)&unk_1010EA690);
    v42 = v35;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v36, 1, v35) == 1)
    {
      sub_100004048(v36, (uint64_t *)&unk_1010EA690);
      if (qword_1010EA620 != -1)
        swift_once(&qword_1010EA620, sub_100DC7BE8);
      v93 = v38;
      v43 = type metadata accessor for Logger(0);
      sub_10001A9E8(v43, (uint64_t)qword_1011B8520);
      v45 = v87;
      v44 = v88;
      v46 = v86;
      v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v88 + 16))(v86, v83, v87);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.error.getter(v48);
      if (os_log_type_enabled(v48, v49))
      {
        v50 = v46;
        v51 = swift_slowAlloc(22, -1);
        v52 = swift_slowAlloc(32, -1);
        *(_DWORD *)v51 = 141558275;
        v94 = 1752392040;
        v95[0] = v52;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v51 + 4, v51 + 12);
        *(_WORD *)(v51 + 12) = 2081;
        v53 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v54 = dispatch thunk of CustomStringConvertible.description.getter(v45, v53);
        v94 = sub_100016940(v54, v55, v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v51 + 14, v51 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v88 + 8))(v50, v45);
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "location does not contain a scanDate %{private,mask.hash}s", (uint8_t *)v51, 0x16u);
        swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1, -1);
        swift_slowDealloc(v51, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v45);
      }

      v71 = type metadata accessor for DeviceBeaconPayloadPublisher.PublishError(0);
      v72 = sub_100006C64(&qword_101101960, 255, type metadata accessor for DeviceBeaconPayloadPublisher.PublishError, (uint64_t)&unk_100E46400);
      swift_allocError(v71, v72, 0, 0);
      v74 = swift_storeEnumTagMultiPayload(v73, v71, 9);
      swift_willThrow(v74);
      sub_10001BC14(v78, v76);
      sub_10001BC14(v77, v92);
      sub_1000126B0((uint64_t)v93, type metadata accessor for BeaconPayloadv1);
    }
    else
    {
      v56 = v89;
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v89, v36, v42);
      v57 = v80;
      ((void (*)(char *, char *, uint64_t))v93)(&v80[*(int *)(v79 + 20)], v56, v42);
      v58 = v77;
      v59 = v92;
      *v57 = v77;
      v57[1] = v59;
      sub_10001BBBC(v58, v59);
      v60 = v78;
      v61 = v76;
      v62 = sub_10001BBBC(v78, v76);
      v93 = (uint64_t *)UUID.uuidString.getter(v62);
      v90 = v63;
      v64 = sub_10001A9A8(&qword_1010ED4A8);
      v65 = *(unsigned __int8 *)(v81 + 80);
      v66 = v16;
      v67 = (v65 + 32) & ~v65;
      v68 = swift_allocObject(v64, v67 + *(_QWORD *)(v81 + 72), v65 | 7);
      *(_OWORD *)(v68 + 16) = xmmword_100E22B00;
      sub_1000126EC((uint64_t)v57, v68 + v67, type metadata accessor for OwnSubmitLocationInfo);
      sub_10001BC14(v60, v61);
      sub_10001BC14(v58, v92);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v89, v91);
      sub_1000126B0((uint64_t)v38, type metadata accessor for BeaconPayloadv1);
      v69 = v84;
      *v84 = v60;
      v69[1] = v61;
      *((_BYTE *)v69 + 16) = 2;
      v70 = v90;
      v69[3] = (uint64_t)v93;
      v69[4] = (uint64_t)v70;
      *((_BYTE *)v69 + 40) = v85;
      *((_BYTE *)v69 + 41) = 1;
      v69[6] = v68;
    }
  }
}

uint64_t sub_100625240()
{
  return sub_1006252E0((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_100625254(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_101101974);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004A74;
  return sub_10061CFC0(a1, v4, v5, v7, v6);
}

uint64_t sub_1006252CC()
{
  return sub_1006252E0((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1006252E0(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  _QWORD *v2;

  swift_unknownObjectRelease(v2[2]);
  a1(v2[4]);
  a2(v2[5]);
  return swift_deallocObject(v2, 48, 7);
}

uint64_t sub_10062532C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_101101984);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004A74;
  return sub_100623630(a1, v4, v5, v7, v6);
}

unint64_t sub_1006253A8()
{
  unint64_t result;

  result = qword_1011019A0;
  if (!qword_1011019A0)
  {
    result = swift_getWitnessTable("ّ$", &type metadata for OwnSubmitRequest);
    atomic_store(result, (unint64_t *)&qword_1011019A0);
  }
  return result;
}

uint64_t *sub_1006253EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v13 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v13);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = *(int *)(sub_10001A9A8(&qword_101101998) + 48);
      v11 = *(uint64_t *)((char *)a2 + v10);
      swift_errorRetain(v11);
      *(uint64_t *)((char *)a1 + v10) = v11;
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_1006254E4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
    return swift_bridgeObjectRelease();
  if (!(_DWORD)result)
  {
    v4 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
    v5 = *(_QWORD *)(a1 + *(int *)(sub_10001A9A8(&qword_101101998) + 48));
    return swift_errorRelease(v5);
  }
  return result;
}

uint64_t *sub_10062555C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v10 = *a2;
    *a1 = *a2;
    swift_bridgeObjectRetain(v10);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(sub_10001A9A8(&qword_101101998) + 48);
    v9 = *(uint64_t *)((char *)a2 + v8);
    swift_errorRetain(v9);
    *(uint64_t *)((char *)a1 + v8) = v9;
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

uint64_t *sub_10062562C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for DeviceBeaconPayloadPublisher.PublishError);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v10 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v10);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = *(int *)(sub_10001A9A8(&qword_101101998) + 48);
      v9 = *(uint64_t *)((char *)a2 + v8);
      swift_errorRetain(v9);
      *(uint64_t *)((char *)a1 + v8) = v9;
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

char *sub_100625714(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = sub_10001A9A8(&qword_101101998);
    *(_QWORD *)&a1[*(int *)(v7 + 48)] = *(_QWORD *)&a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

char *sub_1006257B4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for DeviceBeaconPayloadPublisher.PublishError);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = sub_10001A9A8(&qword_101101998);
      *(_QWORD *)&a1[*(int *)(v7 + 48)] = *(_QWORD *)&a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_10062586C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, *(_QWORD *)(result - 8) + 64, "\b");
    v5[0] = v4;
    v5[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v5);
    return 0;
  }
  return result;
}

uint64_t sub_1006258F0(uint64_t a1)
{
  return sub_100624350(a1) & 1;
}

uint64_t sub_100625908()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_unknownObjectRelease(v0[2]);
  sub_10001D8A8(v0[4], v0[5]);
  swift_release();
  v1 = (char *)v0 + OBJC_IVAR____TtC12searchpartyd40SelfLocatingBeaconPayloadCacheSubscriber_lastPublishedDate;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100625980()
{
  return type metadata accessor for SelfLocatingBeaconPayloadCacheSubscriber(0);
}

uint64_t type metadata accessor for SelfLocatingBeaconPayloadCacheSubscriber(uint64_t a1)
{
  uint64_t result;

  result = qword_101101A88;
  if (!qword_101101A88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SelfLocatingBeaconPayloadCacheSubscriber);
  return result;
}

uint64_t sub_1006259C4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_100E46490;
  v4[1] = &unk_100E46490;
  v4[2] = &unk_100E464A8;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100625A54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  _QWORD *v20;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 48) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  static Date.distantPast.getter(v10);
  v13 = OBJC_IVAR____TtC12searchpartyd40SelfLocatingBeaconPayloadCacheSubscriber_serialQueue;
  sub_10001F6FC();
  v14 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v8);
  static DispatchQoS.unspecified.getter(v14);
  v20 = _swiftEmptyArrayStorage;
  v15 = sub_100139304();
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v17 = sub_10001F738();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v2, v15);
  *(_QWORD *)(v1 + v13) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000046, 0x8000000100EDD5D0, v7, v4, v12, 0);
  return v1;
}

uint64_t sub_100625C0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD v21[5];
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  __int128 v24;
  __int128 v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = sub_10001A9A8(&qword_1010FE6F0);
  v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  v4 = sub_10001A9A8(&qword_101102108);
  __chkstk_darwin(v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010FE6F8);
  v8 = __chkstk_darwin(v7);
  v10 = (_QWORD *)((char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v12 = (char *)v21 - v11;
  *(_QWORD *)&v24 = a1;
  swift_bridgeObjectRetain(a1);
  v13 = sub_10001A9A8(&qword_101102110);
  v14 = sub_10001A9A8(&qword_101102118);
  if (!swift_dynamicCast(v25, &v24, v13, v14, 6))
  {
    v21[1] = 0;
    v26 = 0;
    memset(v25, 0, sizeof(v25));
    sub_100004048((uint64_t)v25, &qword_101102120);
    v21[3] = v21;
    v25[0] = xmmword_100E22FC0;
    v17 = *(int *)(v4 + 48);
    *v10 = a1;
    v10[1] = 0;
    v21[4] = v7;
    v18 = (char *)v10 + *(int *)(v7 + 44);
    v19 = type metadata accessor for Data.Iterator(0);
    v22 = *(_QWORD *)(v19 - 8);
    v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
    v23(v18, 1, 1, v19);
    sub_100005CF0((uint64_t)v10, (uint64_t)v6, &qword_1010FE6F8);
    *(_QWORD *)&v6[v17] = 0;
    v21[2] = a1;
    swift_bridgeObjectRetain(a1);
    sub_100005CF0((uint64_t)v6, (uint64_t)v12, &qword_1010FE6F8);
    __asm { BR              X12 }
  }
  sub_10000F9FC(v25, (uint64_t)&v27);
  v15 = v28;
  v16 = v29;
  sub_10001AA44(&v27, v28);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(&v24, sub_100638F84, 0, &type metadata for Data._Representation, v15, v16);
  swift_bridgeObjectRelease();
  v25[0] = v24;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v27);
  return *(_QWORD *)&v25[0];
}

void sub_100626210(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[5];

  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_100626274
     + *((int *)qword_1006264A8 + (sub_10001AA44(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_100626284()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  sub_10001BBBC(v1, v0);
  sub_100638F84(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_10001BC14(v1, v0);
  v4 = v12;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v13);
  return v4;
}

uint64_t sub_1006264B8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[5];

  v9[3] = &type metadata for UnsafeMutableRawBufferPointer;
  v9[4] = &protocol witness table for UnsafeMutableRawBufferPointer;
  v9[0] = a1;
  v9[1] = a2;
  v2 = sub_10001AA44(v9, (uint64_t)&type metadata for UnsafeMutableRawBufferPointer);
  v3 = *v2;
  if (*v2)
  {
    v4 = (_BYTE *)v2[1];
    v5 = (uint64_t)&v4[-v3];
    if (v4 == (_BYTE *)v3)
    {
      v3 = 0;
    }
    else if (v5 <= 14)
    {
      v3 = sub_1006462A0((_BYTE *)*v2, v4);
    }
    else
    {
      v7 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
      __DataStorage.init(bytes:length:)(v3, v5);
      if ((unint64_t)v5 >= 0x7FFFFFFF)
      {
        v8 = type metadata accessor for Data.RangeReference(0);
        v3 = swift_allocObject(v8, 32, 7);
        *(_QWORD *)(v3 + 16) = 0;
        *(_QWORD *)(v3 + 24) = v5;
      }
      else
      {
        v3 = v5 << 32;
      }
    }
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v9);
  return v3;
}

uint64_t sub_1006265B8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  v2 = sub_10001AA44(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = sub_1006462A0(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = sub_100646360((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      v6 = sub_1006463D8((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    v6 = 0;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
  return v6;
}

uint64_t sub_100626670@<X0>(uint64_t a1@<X8>)
{
  unint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = type metadata accessor for BeaconKeyServiceBuilder.WorkItem(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v14 - v8;
  v10 = *v1;
  if (!*(_QWORD *)(*v1 + 16))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, 1, 1, v3);
  result = swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((result & 1) != 0)
  {
    v12 = *(_QWORD *)(v10 + 16);
    if (v12)
    {
LABEL_4:
      v13 = v12 - 1;
      sub_1000126EC(v10+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * (v12 - 1), (uint64_t)v7, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
      *(_QWORD *)(v10 + 16) = v13;
      *v1 = v10;
      sub_1000126EC((uint64_t)v7, (uint64_t)v9, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
      sub_1000126EC((uint64_t)v9, a1, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(a1, 0, 1, v3);
    }
  }
  else
  {
    result = sub_1008C5E88(v10);
    v10 = result;
    v12 = *(_QWORD *)(result + 16);
    if (v12)
      goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t sub_1006267E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v4 + 64) = a1;
  *(_QWORD *)(v4 + 72) = v3;
  if (a2)
  {
    ObjectType = swift_getObjectType(a2);
    v7 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, a3);
    v9 = v8;
  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  return swift_task_switch(sub_100626850, v7, v9);
}

uint64_t sub_100626850()
{
  _OWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;

  v23 = 0u;
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    v16 = 0;
    v9 = 0;
    v8 = 0xF000000000000000;
    v15 = 0uLL;
    v14 = 0uLL;
  }
  else
  {
    v21 = v0 + 1;
    v1 = (uint64_t *)*((_QWORD *)v0 + 9);
    v2 = *v1;
    v3 = v1[1];
    v4 = v1[2];
    v5 = v1[3];
    v19 = v0;
    v7 = v1[4];
    v6 = v1[5];
    v8 = v1[8];
    v18 = v1[6];
    v9 = v1[7];
    sub_10001BBBC(v9, v8);
    sub_10001BBBC(v9, v8);
    sub_10001BD08(v2, v3);
    sub_10001BBBC(v4, v5);
    v20 = v7;
    v10 = v7;
    v11 = v6;
    sub_10001BBBC(v10, v6);
    sub_10001BBBC(v9, v8);
    sub_10001BD08(v2, v3);
    sub_10001BBBC(v4, v5);
    sub_1007E1B84(v2, v3, v4, v5, v9, v8, 1, v1 + 6, v21, v1 + 7);
    v0 = v19;
    v22 = v19[2];
    v23 = v19[1];
    v17 = v19[3];
    sub_10001BC14(v9, v8);
    sub_10001BC14(v4, v5);
    sub_10001EF3C(v2, v3);
    sub_10001EF3C(v2, v3);
    sub_10001BC14(v4, v5);
    sub_10001BC14(v20, v11);
    sub_10001BC14(v9, v8);
    v14 = v17;
    v15 = v22;
    v16 = v18;
  }
  v12 = *((_QWORD *)v0 + 8);
  *(_QWORD *)v12 = v16;
  *(_QWORD *)(v12 + 8) = v9;
  *(_QWORD *)(v12 + 16) = v8;
  *(_OWORD *)(v12 + 24) = v23;
  *(_OWORD *)(v12 + 40) = v15;
  *(_OWORD *)(v12 + 56) = v14;
  return (*((uint64_t (**)(void))v0 + 1))();
}

id sub_100626B74(uint64_t a1)
{
  return sub_100636E84(a1, (SEL *)&selRef_fileHandleForReadingFromURL_error_);
}

uint64_t sub_100626BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100626BE0(a1, a2, a3, (uint64_t)&type metadata for () + 8);
}

uint64_t sub_100626BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100626BE0(a1, a2, a3, (uint64_t)&type metadata for Data);
}

uint64_t sub_100626BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 v19;
  _QWORD v21[4];

  v8 = type metadata accessor for TaskPriority(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8);
  if ((_DWORD)v10 == 1)
  {
    sub_100004048(a1, &qword_1010F46C0);
    v11 = 7168;
    v12 = *(_QWORD *)(a3 + 16);
    if (!v12)
    {
LABEL_6:
      v18 = 0;
      return swift_task_create(v11, v18, a4, a2, a3);
    }
  }
  else
  {
    v19 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    v11 = v19 | 0x1C00;
    v12 = *(_QWORD *)(a3 + 16);
    if (!v12)
      goto LABEL_6;
  }
  v13 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v12);
  swift_unknownObjectRetain(v12);
  v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
  v17 = v16;
  swift_unknownObjectRelease(v12);
  if (!(v17 | v15))
    goto LABEL_6;
  v21[0] = 0;
  v21[1] = 0;
  v18 = v21;
  v21[2] = v15;
  v21[3] = v17;
  return swift_task_create(v11, v18, a4, a2, a3);
}

uint64_t sub_100626D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_100004048(a1, &qword_1010F46C0);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v16 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = sub_10001A9A8(&qword_101102158);
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v9, v18, v17, a2, a3);
}

uint64_t sub_100626E44(uint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) == 0)
    return a2;
  __break(1u);
  return result;
}

void sub_100626E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x100626FBCLL);
}

Swift::Int sub_100626FF0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_10088F290(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_100639088(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_100627070(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_10088F2A4(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_100639AD4(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1006270D8(uint64_t a1)
{
  return sub_10062E2A0(a1, qword_101101B90);
}

uint64_t sub_1006270E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSString *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v21 = 0x7365547265646E75;
  v22 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v23, &v21, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (v23 == 1)
  {
    v8 = NSTemporaryDirectory();
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v21 = v9;
    v22 = v11;
    v12._countAndFlagsBits = 0x2F7370614D79654BLL;
    v12._object = (void *)0xE800000000000000;
    String.append(_:)(v12);
    v14 = UUID.init()(v13);
    v15 = UUID.uuidString.getter(v14);
    v17 = v16;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v18._countAndFlagsBits = v15;
    v18._object = v17;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    URL.init(fileURLWithPath:)(v21, v22);
    return swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for BeaconStore(0);
    sub_1007EC9B8((uint64_t)v3);
    URL.appendingPathComponent(_:isDirectory:)(0x7370614D79654BLL, 0xE700000000000000, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
}

uint64_t sub_1006272F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD v10[3];
  _OWORD v11[2];
  uint64_t v12;

  v3 = v2;
  swift_defaultActor_initialize(v2);
  *(_QWORD *)(v2 + 112) = 0x7972616D697250;
  *(_QWORD *)(v2 + 120) = 0xE700000000000000;
  *(_QWORD *)(v2 + 128) = 0x7261646E6F636553;
  *(_QWORD *)(v2 + 136) = 0xE900000000000079;
  *(_QWORD *)(v2 + 152) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v2 + 160) = _swiftEmptyDictionarySingleton;
  *(_OWORD *)(v2 + 176) = 0u;
  v6 = v2 + 176;
  *(_QWORD *)(v2 + 168) = 4000;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_QWORD *)(v2 + 208) = 0;
  sub_1006270E4();
  *(_QWORD *)(v2 + 144) = a1;
  v7 = qword_1010EA1D0;
  swift_retain();
  if (v7 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  *(_QWORD *)&v11[0] = 0x7365547265646E75;
  *((_QWORD *)&v11[0] + 1) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(v10, v11, sub_10001F628, 0, &type metadata for Bool);
  swift_release();
  swift_bridgeObjectRelease();
  if (LOBYTE(v10[0]) == 1)
  {
    swift_beginAccess(v6, v11, 33, 0);
    sub_100004084(a2, v6, &qword_101102150);
    v8 = v11;
  }
  else
  {
    sub_100004048(a2, &qword_101102150);
    v12 = 0;
    memset(v11, 0, sizeof(v11));
    swift_beginAccess(v6, v10, 33, 0);
    sub_100004084((uint64_t)v11, v6, &qword_101102150);
    v8 = v10;
  }
  swift_endAccess(v8);
  return v3;
}

uint64_t sub_1006274B8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  return swift_task_switch(sub_1006274D0, v0, 0);
}

uint64_t sub_1006274D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 128) + 176;
  swift_beginAccess(v1, v0 + 96, 0, 0);
  sub_10000F9B8(v1, v0 + 56, &qword_101102150);
  if (*(_QWORD *)(v0 + 80))
  {
    v2 = *(_QWORD *)(v0 + 128);
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    v3 = *(_QWORD *)(v0 + 40);
    v4 = *(_QWORD *)(v0 + 48);
    sub_10001AA44((_QWORD *)(v0 + 16), v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(v2 + OBJC_IVAR____TtC12searchpartyd23BeaconKeyServiceBuilder_keyMapDirectory, v3, v4);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  }
  else
  {
    sub_100004048(v0 + 56, &qword_101102150);
  }
  sub_100627FE4();
  v5 = (_QWORD *)swift_task_alloc(dword_101101F84);
  *(_QWORD *)(v0 + 136) = v5;
  *v5 = v0;
  v5[1] = sub_100627748;
  return sub_100627790();
}

uint64_t sub_100627748()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 136));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100627790()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[10] = v0;
  v2 = type metadata accessor for BeaconKeyServiceBuilder.FileKey(0);
  v1[11] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[12] = v3;
  v1[13] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for BeaconIdentifier(0);
  v1[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for KeyGenerationBeaconInfo(0);
  v1[15] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[16] = v6;
  v1[17] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100627838, v0, 0);
}

uint64_t sub_100627838()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t *v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;

  v2 = (_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = (_QWORD *)(v0 + 72);
  v4 = sub_10075428C(*(_QWORD *)(v1 + 144));
  v65 = *(_QWORD *)(v4 + 16);
  if (!v65)
  {
    swift_bridgeObjectRelease();
LABEL_49:
    if (qword_1010E9DD8 != -1)
      swift_once(&qword_1010E9DD8, sub_1006270D8);
    v53 = type metadata accessor for Logger(0);
    sub_10001A9E8(v53, (uint64_t)qword_101101B90);
    v54 = swift_retain();
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.default.getter(v55);
    v57 = os_log_type_enabled(v55, v56);
    v58 = *v2;
    if (v57)
    {
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v59 = 134217984;
      swift_beginAccess(v58 + 160, v2 - 5, 0, 0);
      *v3 = *(_QWORD *)(*(_QWORD *)(v58 + 160) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v2, v59 + 4, v59 + 12);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "opened all keymaps, keymaps.count = %ld", v59, 0xCu);
      swift_slowDealloc(v59, -1, -1);

    }
    else
    {

      swift_release();
    }
    goto LABEL_54;
  }
  v62 = v3;
  isUniquelyReferenced_nonNull_native = 0;
  v72 = v2 - 8;
  v67 = *(_QWORD *)(v73 + 120);
  v68 = *(_QWORD *)(v73 + 128);
  v70 = *(_QWORD *)(v73 + 96);
  v71 = *(_QWORD *)(v73 + 88);
  v15 = (_QWORD *)(*(_QWORD *)(v73 + 80) + 160);
  v66 = v4 + ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80));
  v63 = v4;
  v64 = v2;
  while (1)
  {
    if (isUniquelyReferenced_nonNull_native >= *(_QWORD *)(v4 + 16))
      goto LABEL_59;
    v17 = *(_QWORD *)(v73 + 136);
    v18 = *(_QWORD *)(v73 + 112);
    v69 = isUniquelyReferenced_nonNull_native;
    sub_10005972C(v66 + *(_QWORD *)(v68 + 72) * isUniquelyReferenced_nonNull_native, v17, type metadata accessor for KeyGenerationBeaconInfo);
    sub_10005972C(v17, v18, type metadata accessor for BeaconIdentifier);
    v19 = v17 + *(int *)(v67 + 24);
    v20 = *(_QWORD *)(v19 + 8) >> 60 != 15 && *(_QWORD *)(v19 + 40) >> 60 != 15;
    v21 = sub_100633844(*(_QWORD *)(v73 + 112), 0);
    if (v21)
    {
      v22 = v21;
      v23 = swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
      isUniquelyReferenced_nonNull_native = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)
                                                      + 0x10);
      v24 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (isUniquelyReferenced_nonNull_native >= v24 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, isUniquelyReferenced_nonNull_native + 1, 1);
      v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(isUniquelyReferenced_nonNull_native, v22);
      specialized Array._endMutation()(v25);
      swift_release();
    }
    if (v20)
    {
      v26 = sub_100633844(*(_QWORD *)(v73 + 112), 1);
      if (v26)
      {
        v27 = v26;
        v28 = swift_retain();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v28);
        isUniquelyReferenced_nonNull_native = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8)
                                                        + 0x10);
        v29 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (isUniquelyReferenced_nonNull_native >= v29 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, isUniquelyReferenced_nonNull_native + 1, 1);
        v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(isUniquelyReferenced_nonNull_native, v27);
        specialized Array._endMutation()(v30);
        swift_release();
      }
    }
    sub_1000126B0(*(_QWORD *)(v73 + 112), type metadata accessor for BeaconIdentifier);
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
      v31 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v31)
        break;
      goto LABEL_6;
    }
    v51 = (uint64_t)_swiftEmptyArrayStorage < 0
        ? _swiftEmptyArrayStorage
        : (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    v31 = _CocoaArrayWrapper.endIndex.getter(v51);
    swift_bridgeObjectRelease();
    if (v31)
      break;
LABEL_6:
    isUniquelyReferenced_nonNull_native = v69 + 1;
    v16 = *(_QWORD *)(v73 + 136);
    swift_bridgeObjectRelease();
    sub_1000126B0(v16, type metadata accessor for KeyGenerationBeaconInfo);
    v2 = v64;
    v4 = v63;
    if (v69 + 1 == v65)
    {
      swift_bridgeObjectRelease();
      v3 = v62;
      goto LABEL_49;
    }
  }
  v32 = 0;
  while (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
  {
    v34 = specialized _ArrayBuffer._getElementSlowPath(_:)(v32, _swiftEmptyArrayStorage);
    v35 = v32 + 1;
    if (__OFADD__(v32, 1))
      goto LABEL_56;
LABEL_30:
    v36 = v31;
    v37 = *(_QWORD *)(v73 + 104);
    sub_10005972C(*(_QWORD *)(v73 + 136), v37, type metadata accessor for BeaconIdentifier);
    *(_BYTE *)(v37 + *(int *)(v71 + 20)) = *(_BYTE *)(v34 + OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_sequence);
    swift_beginAccess(v15, v72, 33, 0);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v15);
    v38 = (_QWORD *)*v15;
    v74 = (_QWORD *)*v15;
    *v15 = 0x8000000000000000;
    v40 = sub_10051962C(v37);
    v41 = v38[2];
    v42 = (v39 & 1) == 0;
    v43 = v41 + v42;
    if (__OFADD__(v41, v42))
      goto LABEL_57;
    v2 = v39;
    if (v38[3] >= v43)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v39 & 1) != 0)
          goto LABEL_23;
      }
      else
      {
        sub_100A9DD18();
        v38 = v74;
        if ((v2 & 1) != 0)
          goto LABEL_23;
      }
    }
    else
    {
      v44 = *(_QWORD *)(v73 + 104);
      sub_100A8D198(v43, isUniquelyReferenced_nonNull_native);
      v38 = v74;
      v45 = sub_10051962C(v44);
      if ((v2 & 1) != (v46 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(_QWORD *)(v73 + 88));
      v40 = v45;
      if ((v2 & 1) != 0)
      {
LABEL_23:
        v33 = v38[7];
        swift_release();
        *(_QWORD *)(v33 + 8 * v40) = v34;
        goto LABEL_24;
      }
    }
    v47 = *(_QWORD *)(v73 + 104);
    v38[(v40 >> 6) + 8] |= 1 << v40;
    sub_10005972C(v47, v38[6] + *(_QWORD *)(v70 + 72) * v40, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
    *(_QWORD *)(v38[7] + 8 * v40) = v34;
    v48 = v38[2];
    v49 = __OFADD__(v48, 1);
    v50 = v48 + 1;
    if (v49)
      goto LABEL_58;
    v38[2] = v50;
LABEL_24:
    isUniquelyReferenced_nonNull_native = *(_QWORD *)(v73 + 104);
    *v15 = v38;
    swift_bridgeObjectRelease();
    sub_1000126B0(isUniquelyReferenced_nonNull_native, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
    swift_endAccess(v72);
    swift_release();
    ++v32;
    v31 = v36;
    if (v35 == v36)
      goto LABEL_6;
  }
  v34 = _swiftEmptyArrayStorage[v32 + 4];
  swift_retain();
  v35 = v32 + 1;
  if (!__OFADD__(v32, 1))
    goto LABEL_30;
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
  swift_once(&qword_1010E9DD8, sub_1006270D8);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_101101B90);
  v6 = swift_errorRetain(isUniquelyReferenced_nonNull_native);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = v2 - 2;
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412290;
    v12 = _convertErrorToNSError(_:)(isUniquelyReferenced_nonNull_native);
    *v9 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v9, v15, v10 + 4, v10 + 12);
    *v11 = v12;
    swift_errorRelease(isUniquelyReferenced_nonNull_native);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error in openAllKeyMaps(): %@", v10, 0xCu);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(isUniquelyReferenced_nonNull_native);
  }
  else
  {
    swift_errorRelease(isUniquelyReferenced_nonNull_native);
    swift_errorRelease(isUniquelyReferenced_nonNull_native);

  }
LABEL_54:
  v60 = *(_QWORD *)(v73 + 104);
  v61 = *(_QWORD *)(v73 + 112);
  swift_task_dealloc(*(_QWORD *)(v73 + 136));
  swift_task_dealloc(v61);
  swift_task_dealloc(v60);
  return (*(uint64_t (**)(void))(v73 + 8))();
}

void sub_100627FE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(_QWORD, _QWORD, _QWORD);
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char *v27;
  Swift::String v28;
  Swift::Bool v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  NSURL *v41;
  void *v42;
  void *v43;
  unsigned int v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  __int128 v57;
  unsigned int (*v58)(_QWORD, _QWORD, _QWORD);
  uint64_t v59;
  char *v60;
  id v61;
  char *v62;
  uint64_t (*v63)(char *, char *, uint64_t);
  char v64[24];
  __int128 v65;
  uint64_t v66;
  id v67[3];
  uint64_t v68;
  uint64_t v69;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v51 - v6;
  v8 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for DirectorySequence(0);
  v54 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
  v13 = v0 + OBJC_IVAR____TtC12searchpartyd23BeaconKeyServiceBuilder_keyMapDirectory;
  static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v0 + OBJC_IVAR____TtC12searchpartyd23BeaconKeyServiceBuilder_keyMapDirectory, 0);
  v14 = v0 + 176;
  swift_beginAccess(v14, v64, 0, 0);
  v51 = v14;
  sub_10000F9B8(v14, (uint64_t)&v65, &qword_101102150);
  v60 = v12;
  if (v66)
  {
    sub_10000F9FC(&v65, (uint64_t)v67);
    v15 = v68;
    v16 = v69;
    sub_10001AA44(v67, v68);
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 8);
    v18 = v16;
    v12 = v60;
    v17(v13, v15, v18);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v67);
  }
  else
  {
    sub_100004048((uint64_t)&v65, &qword_101102150);
  }
  v52 = v13;
  v19 = NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v13, 0, 0);
  DirectorySequence.next()(v19);
  v20 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v2 + 48);
  if (v20(v10, 1, v1) != 1)
  {
    v63 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
    *(_QWORD *)&v21 = 136315138;
    v57 = v21;
    v56 = (char *)&type metadata for Any + 8;
    v62 = v10;
    v58 = v20;
    v59 = v2;
    for (i = v63(v7, v10, v1); ; i = v63(v7, v27, v1))
    {
      URL.lastPathComponent.getter(i);
      v28._countAndFlagsBits = 46;
      v28._object = (void *)0xE100000000000000;
      v29 = String.hasPrefix(_:)(v28);
      swift_bridgeObjectRelease();
      if (v29)
      {
        if (qword_1010E9DD8 != -1)
          swift_once(&qword_1010E9DD8, sub_1006270D8);
        v30 = type metadata accessor for Logger(0);
        sub_10001A9E8(v30, (uint64_t)qword_101101B90);
        v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, v1);
        v32 = Logger.logObject.getter(v31);
        v33 = static os_log_type_t.default.getter(v32);
        if (os_log_type_enabled(v32, v33))
        {
          v34 = swift_slowAlloc(12, -1);
          v35 = (void *)swift_slowAlloc(32, -1);
          v67[0] = v35;
          *(_DWORD *)v34 = v57;
          v36 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v37 = dispatch thunk of CustomStringConvertible.description.getter(v1, v36);
          *(_QWORD *)(v34 + 4) = sub_100016940(v37, v38, (uint64_t *)v67);
          swift_bridgeObjectRelease();
          v25 = *(void (**)(char *, uint64_t))(v59 + 8);
          v25(v5, v1);
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "cleanup removing %s", (uint8_t *)v34, 0xCu);
          swift_arrayDestroy(v35, 1, v56);
          v39 = v35;
          v20 = v58;
          swift_slowDealloc(v39, -1, -1);
          v40 = v34;
          v2 = v59;
          swift_slowDealloc(v40, -1, -1);
        }
        else
        {
          v25 = *(void (**)(char *, uint64_t))(v2 + 8);
          v25(v5, v1);
        }

        v12 = v60;
        URL._bridgeToObjectiveC()(v41);
        v43 = v42;
        v67[0] = 0;
        v44 = objc_msgSend(v61, "removeItemAtURL:error:", v42, v67);

        v45 = v67[0];
        if (!v44)
        {
          v49 = v67[0];
          _convertNSErrorToError(_:)(v45);

          swift_willThrow(v50);
          v25(v7, v1);
          (*(void (**)(char *, uint64_t))(v54 + 8))(v12, v55);
          return;
        }
        v46 = v67[0];
      }
      else
      {
        v25 = *(void (**)(char *, uint64_t))(v2 + 8);
      }
      v26 = ((uint64_t (*)(char *, uint64_t))v25)(v7, v1);
      v27 = v62;
      DirectorySequence.next()(v26);
      if (v20(v27, 1, v1) == 1)
        break;
    }
  }
  (*(void (**)(char *, uint64_t))(v54 + 8))(v12, v55);
  v22 = v52;
  v23 = v53;
  NSFileManager.removeEmptyDirectoriesRecursively(baseURL:)(v52);
  if (v23)
  {

  }
  else
  {
    sub_10000F9B8(v51, (uint64_t)&v65, &qword_101102150);
    if (v66)
    {
      sub_10000F9FC(&v65, (uint64_t)v67);
      v47 = v68;
      v48 = v69;
      sub_10001AA44(v67, v68);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v22, v47, v48);

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v67);
    }
    else
    {

      sub_100004048((uint64_t)&v65, &qword_101102150);
    }
  }
}

uint64_t sub_1006285F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100004048(v0 + 176, &qword_101102150);
  v1 = v0 + OBJC_IVAR____TtC12searchpartyd23BeaconKeyServiceBuilder_keyMapDirectory;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100628674()
{
  return type metadata accessor for BeaconKeyServiceBuilder(0);
}

uint64_t type metadata accessor for BeaconKeyServiceBuilder(uint64_t a1)
{
  return sub_10001B630(a1, (uint64_t *)&unk_101101BF0, (uint64_t)&nominal type descriptor for BeaconKeyServiceBuilder);
}

uint64_t sub_100628690(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  v4[1] = &unk_100E46570;
  v4[2] = &unk_100E46570;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = &unk_100E46588;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[8] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100628748()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v1[4] = v0;
  v1[5] = *v0;
  v2 = type metadata accessor for UUID(0);
  v1[6] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[7] = v3;
  v1[8] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010FBA40);
  v1[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v1[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[11] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v1[12] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[13] = swift_task_alloc(v8);
  v1[14] = swift_task_alloc(v8);
  v9 = sub_10001A9A8(&qword_101101F68);
  v1[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(type metadata accessor for KeyGenerationBeaconInfo(0) - 8);
  v1[16] = v10;
  v1[17] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BeaconIdentifier(0);
  v1[18] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v1[19] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v1[20] = v13;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[21] = swift_task_alloc(v14);
  v1[22] = swift_task_alloc(v14);
  v1[23] = swift_task_alloc(v14);
  return swift_task_switch(sub_1006288A0, 0, 0);
}

uint64_t sub_1006288A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v1 = qword_1011B71A8;
  *(_QWORD *)(v0 + 192) = qword_1011B71A8;
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 200) = v3;
  *v3 = v0;
  v3[1] = sub_100628950;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100033264, v1, &type metadata for Configuration);
}

uint64_t sub_100628950()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  swift_release();
  return swift_task_switch(sub_1006289AC, 0, 0);
}

unint64_t sub_1006289AC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  int64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, unint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;

  v1 = *(_QWORD *)(v0 + 16);
  result = sub_100C1B704(v1);
  if ((result & 0x8000000000000000) != 0)
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  *(_QWORD *)(v0 + 208) = 96 * result;
  if (!is_mul_ok(result, 0x60uLL))
  {
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  result = sub_100C1B718(v1);
  if ((result & 0x8000000000000000) != 0)
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  *(_QWORD *)(v0 + 216) = 96 * result;
  if (!is_mul_ok(result, 0x60uLL))
    goto LABEL_52;
  result = sub_100C1B754(v1);
  if ((result & 0x8000000000000000) != 0)
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  *(_QWORD *)(v0 + 224) = 96 * result;
  if (is_mul_ok(result, 0x60uLL))
  {
    v3 = sub_100C1B72C(v1);
    result = swift_bridgeObjectRelease();
    if ((v3 & 0x8000000000000000) == 0)
    {
      *(_QWORD *)(v0 + 232) = 96 * v3;
      if (is_mul_ok(v3, 0x60uLL))
      {
        *(_QWORD *)(v0 + 240) = mach_continuous_time();
        v4 = sub_1006299E4();
        *(_QWORD *)(v0 + 248) = v4;
        v5 = v4;
        v6 = sub_100753E54(*(_QWORD *)(*(_QWORD *)(v0 + 32) + 144));
        *(_QWORD *)(v0 + 256) = v6;
        v7 = v6;
        swift_bridgeObjectRetain(v5);
        v9 = sub_100CA4B24(v8);
        v10 = v9;
        v11 = *(_QWORD *)(v7 + 16);
        if (v11)
        {
          v77 = v9;
          v12 = *(_QWORD *)(v0 + 152);
          v13 = *(_QWORD *)(v0 + 128);
          sub_10009AB78(0, v11, 0);
          v14 = v7 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
          v15 = *(_QWORD *)(v13 + 72);
          do
          {
            v16 = *(_QWORD *)(v0 + 184);
            v17 = *(_QWORD *)(v0 + 136);
            sub_10005972C(v14, v17, type metadata accessor for KeyGenerationBeaconInfo);
            sub_10005972C(v17, v16, type metadata accessor for BeaconIdentifier);
            sub_1000126B0(v17, type metadata accessor for KeyGenerationBeaconInfo);
            if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
              sub_10009AB78(0, _swiftEmptyArrayStorage[2] + 1, 1);
            v19 = _swiftEmptyArrayStorage[2];
            v18 = _swiftEmptyArrayStorage[3];
            if (v19 >= v18 >> 1)
              sub_10009AB78(v18 > 1, v19 + 1, 1);
            v20 = *(_QWORD *)(v0 + 184);
            _swiftEmptyArrayStorage[2] = v19 + 1;
            sub_1000126EC(v20, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v19, type metadata accessor for BeaconIdentifier);
            v14 += v15;
            --v11;
          }
          while (v11);
          v10 = v77;
        }
        v21 = sub_100CA8BF4((uint64_t)_swiftEmptyArrayStorage);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v21 + 16) <= *(_QWORD *)(v10 + 16) >> 3)
        {
          sub_10063BC9C(v21);
          result = swift_bridgeObjectRelease();
          v22 = (_BYTE *)v10;
        }
        else
        {
          v22 = sub_100640BA0(v21, v10);
          result = swift_bridgeObjectRelease();
        }
        v23 = 0;
        *(_QWORD *)(v0 + 264) = v22;
        v24 = v22[32];
        *(_BYTE *)(v0 + 336) = v24;
        v25 = 1 << v24;
        if (v25 < 64)
          v26 = ~(-1 << v25);
        else
          v26 = -1;
        v27 = v26 & *((_QWORD *)v22 + 7);
        while (1)
        {
          if (v27)
          {
            v29 = __clz(__rbit64(v27));
            v27 &= v27 - 1;
            v30 = v29 | (v23 << 6);
            v31 = *(_QWORD *)(v0 + 264);
          }
          else
          {
            v32 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_55;
            v33 = (unint64_t)((1 << *(_BYTE *)(v0 + 336)) + 63) >> 6;
            v31 = *(_QWORD *)(v0 + 264);
            if (v32 >= v33)
            {
LABEL_48:
              (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 56))(*(_QWORD *)(v0 + 120), 1, 1, *(_QWORD *)(v0 + 144));
LABEL_49:
              swift_release();
              swift_bridgeObjectRelease();
              v66 = *(_QWORD *)(v0 + 256);
              v79 = *(_OWORD *)(v0 + 224);
              v68 = *(_QWORD *)(v0 + 208);
              v67 = *(_QWORD *)(v0 + 216);
              v70 = *(_QWORD *)(v0 + 32);
              v69 = *(_QWORD *)(v0 + 40);
              v71 = swift_task_alloc(80);
              *(_QWORD *)(v0 + 312) = v71;
              *(_QWORD *)(v71 + 16) = v66;
              *(_QWORD *)(v71 + 24) = v70;
              *(_QWORD *)(v71 + 32) = v68;
              *(_QWORD *)(v71 + 40) = v67;
              *(_OWORD *)(v71 + 48) = v79;
              *(_QWORD *)(v71 + 64) = v69;
              v72 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
              *(_QWORD *)(v0 + 320) = v72;
              *v72 = v0;
              v72[1] = sub_100629724;
              return withTaskGroup<A, B>(of:returning:isolation:body:)(v72, &type metadata for () + 1, &type metadata for () + 1, 0, 0, &unk_101101F78, v71, &type metadata for () + 1);
            }
            v34 = v31 + 56;
            v35 = *(_QWORD *)(v31 + 56 + 8 * v32);
            ++v23;
            if (!v35)
            {
              v23 = v32 + 1;
              if (v32 + 1 >= v33)
                goto LABEL_48;
              v35 = *(_QWORD *)(v34 + 8 * v23);
              if (!v35)
              {
                v23 = v32 + 2;
                if (v32 + 2 >= v33)
                  goto LABEL_48;
                v35 = *(_QWORD *)(v34 + 8 * v23);
                if (!v35)
                {
                  v36 = v32 + 3;
                  if (v36 >= v33)
                    goto LABEL_48;
                  v35 = *(_QWORD *)(v34 + 8 * v36);
                  if (!v35)
                  {
                    while (1)
                    {
                      v23 = v36 + 1;
                      if (__OFADD__(v36, 1))
                        goto LABEL_56;
                      if (v23 >= v33)
                        goto LABEL_48;
                      v35 = *(_QWORD *)(v34 + 8 * v23);
                      ++v36;
                      if (v35)
                        goto LABEL_41;
                    }
                  }
                  v23 = v36;
                }
              }
            }
LABEL_41:
            v27 = (v35 - 1) & v35;
            v30 = __clz(__rbit64(v35)) + (v23 << 6);
          }
          *(_QWORD *)(v0 + 272) = v23;
          *(_QWORD *)(v0 + 280) = v27;
          v37 = *(_QWORD *)(v0 + 144);
          v38 = *(_QWORD *)(v0 + 152);
          v39 = *(_QWORD *)(v0 + 120);
          sub_10005972C(*(_QWORD *)(v31 + 48) + *(_QWORD *)(v38 + 72) * v30, v39, type metadata accessor for BeaconIdentifier);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v39, 1, v37) == 1)
            goto LABEL_49;
          v40 = *(_QWORD *)(v0 + 248);
          sub_1000126EC(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 176), type metadata accessor for BeaconIdentifier);
          if (*(_QWORD *)(v40 + 16) && (v41 = sub_1005191EC(*(_QWORD *)(v0 + 176)), (v42 & 1) != 0))
          {
            v43 = *(_QWORD *)(v0 + 80);
            v44 = *(_QWORD *)(v0 + 88);
            v45 = *(_QWORD *)(v0 + 72);
            v46 = *(void (**)(uint64_t, unint64_t, uint64_t))(v44 + 16);
            v46(v45, *(_QWORD *)(*(_QWORD *)(v0 + 248) + 56) + *(_QWORD *)(v44 + 72) * v41, v43);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v45, 0, 1, v43);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v45, 1, v43) != 1)
            {
              v48 = *(_QWORD *)(v0 + 168);
              v47 = *(_QWORD *)(v0 + 176);
              v73 = *(_QWORD *)(v0 + 152);
              v74 = *(_QWORD *)(v0 + 160);
              v50 = *(_QWORD *)(v0 + 104);
              v49 = *(_QWORD *)(v0 + 112);
              v51 = *(_QWORD *)(v0 + 88);
              v52 = *(_QWORD *)(v0 + 96);
              v53 = *(_QWORD *)(v0 + 80);
              v75 = *(_QWORD *)(v0 + 40);
              v76 = *(_QWORD *)(v0 + 64);
              v78 = *(_QWORD *)(v0 + 32);
              v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32);
              v54(v49, *(_QWORD *)(v0 + 72), v53);
              v46(v50, v49, v53);
              v55 = v47;
              v56 = v48;
              sub_10005972C(v47, v48, type metadata accessor for BeaconIdentifier);
              v57 = *(unsigned __int8 *)(v51 + 80);
              v58 = (v57 + 16) & ~v57;
              v59 = *(unsigned __int8 *)(v73 + 80);
              v60 = (v52 + v59 + v58) & ~v59;
              v61 = (v74 + v60 + 7) & 0xFFFFFFFFFFFFFFF8;
              v62 = swift_allocObject(&unk_101083C28, v61 + 8, v57 | v59 | 7);
              *(_QWORD *)(v0 + 288) = v62;
              v54(v62 + v58, v50, v53);
              v63 = sub_1000126EC(v56, v62 + v60, type metadata accessor for BeaconIdentifier);
              *(_QWORD *)(v62 + v61) = v75;
              UUID.init()(v63);
              v64 = (_QWORD *)swift_task_alloc(64);
              *(_QWORD *)(v0 + 296) = v64;
              v64[2] = v76;
              v64[3] = &unk_101101F90;
              v64[4] = v62;
              v64[5] = v78;
              v64[6] = v55;
              v65 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
              *(_QWORD *)(v0 + 304) = v65;
              *v65 = v0;
              v65[1] = sub_1006291E4;
              return withCheckedContinuation<A>(isolation:function:_:)(v65, 0, 0, 0xD000000000000027, 0x8000000100EDD750, sub_100645EC8, v64, &type metadata for () + 1);
            }
          }
          else
          {
            (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 72), 1, 1, *(_QWORD *)(v0 + 80));
          }
          v28 = *(_QWORD *)(v0 + 72);
          sub_1000126B0(*(_QWORD *)(v0 + 176), type metadata accessor for BeaconIdentifier);
          result = sub_100004048(v28, &qword_1010FBA40);
        }
      }
      goto LABEL_54;
    }
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  }
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

uint64_t sub_1006291E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 296);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 304));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100629240, 0, 0);
}

uint64_t sub_100629240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, unint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 48);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  result = sub_1000126B0(v1, type metadata accessor for BeaconIdentifier);
  v9 = *(_QWORD *)(v0 + 272);
  v10 = *(_QWORD *)(v0 + 280);
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v9 << 6);
      v14 = *(_QWORD *)(v0 + 264);
      goto LABEL_20;
    }
    v15 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    v16 = (unint64_t)((1 << *(_BYTE *)(v0 + 336)) + 63) >> 6;
    v14 = *(_QWORD *)(v0 + 264);
    if (v15 >= v16)
      goto LABEL_26;
    v17 = v14 + 56;
    v18 = *(_QWORD *)(v14 + 56 + 8 * v15);
    ++v9;
    if (!v18)
    {
      v9 = v15 + 1;
      if (v15 + 1 >= v16)
        goto LABEL_26;
      v18 = *(_QWORD *)(v17 + 8 * v9);
      if (!v18)
      {
        v9 = v15 + 2;
        if (v15 + 2 >= v16)
          goto LABEL_26;
        v18 = *(_QWORD *)(v17 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_19:
    v10 = (v18 - 1) & v18;
    v13 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_20:
    *(_QWORD *)(v0 + 272) = v9;
    *(_QWORD *)(v0 + 280) = v10;
    v20 = *(_QWORD *)(v0 + 144);
    v21 = *(_QWORD *)(v0 + 152);
    v22 = *(_QWORD *)(v0 + 120);
    sub_10005972C(*(_QWORD *)(v14 + 48) + *(_QWORD *)(v21 + 72) * v13, v22, type metadata accessor for BeaconIdentifier);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 56))(v22, 0, 1, v20);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v22, 1, v20) == 1)
      goto LABEL_27;
    v23 = *(_QWORD *)(v0 + 248);
    sub_1000126EC(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 176), type metadata accessor for BeaconIdentifier);
    if (*(_QWORD *)(v23 + 16) && (v24 = sub_1005191EC(*(_QWORD *)(v0 + 176)), (v25 & 1) != 0))
    {
      v26 = *(_QWORD *)(v0 + 80);
      v27 = *(_QWORD *)(v0 + 88);
      v28 = *(_QWORD *)(v0 + 72);
      v29 = *(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 16);
      v29(v28, *(_QWORD *)(*(_QWORD *)(v0 + 248) + 56) + *(_QWORD *)(v27 + 72) * v24, v26);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v28, 0, 1, v26);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v28, 1, v26) != 1)
      {
        v31 = *(_QWORD *)(v0 + 168);
        v30 = *(_QWORD *)(v0 + 176);
        v56 = *(_QWORD *)(v0 + 152);
        v57 = *(_QWORD *)(v0 + 160);
        v33 = *(_QWORD *)(v0 + 104);
        v32 = *(_QWORD *)(v0 + 112);
        v34 = *(_QWORD *)(v0 + 88);
        v35 = *(_QWORD *)(v0 + 96);
        v36 = *(_QWORD *)(v0 + 80);
        v61 = *(_QWORD *)(v0 + 64);
        v58 = *(_QWORD *)(v0 + 40);
        v59 = *(_QWORD *)(v0 + 32);
        v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32);
        v37(v32, *(_QWORD *)(v0 + 72), v36);
        v29(v33, v32, v36);
        v38 = v30;
        v39 = v31;
        sub_10005972C(v30, v31, type metadata accessor for BeaconIdentifier);
        v40 = *(unsigned __int8 *)(v34 + 80);
        v41 = (v40 + 16) & ~v40;
        v42 = *(unsigned __int8 *)(v56 + 80);
        v43 = (v35 + v42 + v41) & ~v42;
        v44 = (v57 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
        v45 = swift_allocObject(&unk_101083C28, v44 + 8, v40 | v42 | 7);
        *(_QWORD *)(v0 + 288) = v45;
        v37(v45 + v41, v33, v36);
        v46 = sub_1000126EC(v39, v45 + v43, type metadata accessor for BeaconIdentifier);
        *(_QWORD *)(v45 + v44) = v58;
        UUID.init()(v46);
        v47 = (_QWORD *)swift_task_alloc(64);
        *(_QWORD *)(v0 + 296) = v47;
        v47[2] = v61;
        v47[3] = &unk_101101F90;
        v47[4] = v45;
        v47[5] = v59;
        v47[6] = v38;
        v48 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
        *(_QWORD *)(v0 + 304) = v48;
        *v48 = v0;
        v48[1] = sub_1006291E4;
        return withCheckedContinuation<A>(isolation:function:_:)(v48, 0, 0, 0xD000000000000027, 0x8000000100EDD750, sub_100645EC8, v47, &type metadata for () + 1);
      }
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 72), 1, 1, *(_QWORD *)(v0 + 80));
    }
    v11 = *(_QWORD *)(v0 + 72);
    sub_1000126B0(*(_QWORD *)(v0 + 176), type metadata accessor for BeaconIdentifier);
    result = sub_100004048(v11, &qword_1010FBA40);
  }
  v19 = v15 + 3;
  if (v19 >= v16)
  {
LABEL_26:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 56))(*(_QWORD *)(v0 + 120), 1, 1, *(_QWORD *)(v0 + 144));
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    v49 = *(_QWORD *)(v0 + 256);
    v60 = *(_OWORD *)(v0 + 224);
    v51 = *(_QWORD *)(v0 + 208);
    v50 = *(_QWORD *)(v0 + 216);
    v53 = *(_QWORD *)(v0 + 32);
    v52 = *(_QWORD *)(v0 + 40);
    v54 = swift_task_alloc(80);
    *(_QWORD *)(v0 + 312) = v54;
    *(_QWORD *)(v54 + 16) = v49;
    *(_QWORD *)(v54 + 24) = v53;
    *(_QWORD *)(v54 + 32) = v51;
    *(_QWORD *)(v54 + 40) = v50;
    *(_OWORD *)(v54 + 48) = v60;
    *(_QWORD *)(v54 + 64) = v52;
    v55 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
    *(_QWORD *)(v0 + 320) = v55;
    *v55 = v0;
    v55[1] = sub_100629724;
    return withTaskGroup<A, B>(of:returning:isolation:body:)(v55, &type metadata for () + 1, &type metadata for () + 1, 0, 0, &unk_101101F78, v54, &type metadata for () + 1);
  }
  v18 = *(_QWORD *)(v17 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_19;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v16)
      goto LABEL_26;
    v18 = *(_QWORD *)(v17 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_19;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100629724()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 312);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 320));
  swift_bridgeObjectRelease();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10062978C, 0, 0);
}

uint64_t sub_10062978C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_101101F84);
  *(_QWORD *)(v0 + 328) = v1;
  *v1 = v0;
  v1[1] = sub_1006297D4;
  return sub_100627790();
}

uint64_t sub_1006297D4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 328));
  return swift_task_switch(sub_100629828, 0, 0);
}

uint64_t sub_100629828()
{
  Swift::UInt64 v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  Swift::UInt64 v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  double v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v2 = *(_QWORD *)(v1 + 240);
  v3 = mach_continuous_time();
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (v4)
  {
    v0 = convertToNanoseconds(_:)(v5);
    if (qword_1010E9DD8 == -1)
      goto LABEL_4;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010E9DD8, sub_1006270D8);
LABEL_4:
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_101101B90);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (double)v0 / 1000000.0;
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v11 = 134217984;
    *(double *)(v1 + 24) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v11 + 4, v11 + 12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "validateKeys duration: %f ms", v11, 0xCu);
    swift_slowDealloc(v11, -1, -1);
  }
  v13 = *(_QWORD *)(v1 + 176);
  v12 = *(_QWORD *)(v1 + 184);
  v14 = *(_QWORD *)(v1 + 168);
  v15 = *(_QWORD *)(v1 + 136);
  v17 = *(_QWORD *)(v1 + 112);
  v16 = *(_QWORD *)(v1 + 120);
  v18 = *(_QWORD *)(v1 + 104);
  v19 = *(_QWORD *)(v1 + 72);
  v21 = *(_QWORD *)(v1 + 64);

  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1006299E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  _QWORD *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  unsigned int v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  unsigned int v89;
  char *v90;
  uint64_t v91;
  void (*v92)(uint64_t, char *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  unint64_t v99;
  char v100;
  char v101;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  _BOOL8 v113;
  uint64_t v114;
  char v115;
  unint64_t v116;
  char v117;
  _QWORD *v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t result;
  void (*v125)(char *, char *, uint64_t);
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  char *v138;
  unsigned int (*v139)(char *, uint64_t, uint64_t);
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  __int128 v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t (*v153)(char *, char *, uint64_t);
  uint64_t v154;
  unsigned int (*v155)(char *, uint64_t, uint64_t);
  uint64_t v156;
  _QWORD *v157;

  v129 = type metadata accessor for BeaconIdentifier(0);
  v126 = *(_QWORD *)(v129 - 8);
  v1 = __chkstk_darwin(v129);
  v132 = (uint64_t)&v125 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v131 = (uint64_t)&v125 - v3;
  v4 = sub_10001A9A8(&qword_1010ED860);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v125 - v8;
  v156 = type metadata accessor for UUID(0);
  v151 = *(_QWORD *)(v156 - 8);
  v10 = __chkstk_darwin(v156);
  v130 = (char *)&v125 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v133 = (char *)&v125 - v12;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v141 = (char *)&v125 - v19;
  v20 = __chkstk_darwin(v18);
  v127 = (char *)&v125 - v21;
  v22 = __chkstk_darwin(v20);
  v143 = (char *)&v125 - v23;
  __chkstk_darwin(v22);
  v25 = (char *)&v125 - v24;
  v26 = sub_10001A9A8(&qword_1010FBA40);
  v27 = __chkstk_darwin(v26);
  v142 = (char *)&v125 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v128 = (char *)&v125 - v30;
  v31 = __chkstk_darwin(v29);
  v144 = (char *)&v125 - v32;
  __chkstk_darwin(v31);
  v34 = (char *)&v125 - v33;
  v136 = type metadata accessor for DirectorySequence(0);
  v135 = *(_QWORD *)(v136 - 8);
  v35 = __chkstk_darwin(v136);
  v145 = (char *)&v125 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v38 = (char *)&v125 - v37;
  v137 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v39 = NSFileManager.flatSequence(at:includingPropertiesForKeys:)(v0 + OBJC_IVAR____TtC12searchpartyd23BeaconKeyServiceBuilder_keyMapDirectory, 0);
  v150 = v38;
  DirectorySequence.next()(v39);
  v155 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v41 = _swiftEmptyDictionarySingleton;
  if (v155(v34, 1, v13) == 1)
    goto LABEL_44;
  v153 = *(uint64_t (**)(char *, char *, uint64_t))(v14 + 32);
  *(_QWORD *)&v40 = 136315138;
  v146 = v40;
  v140 = (char *)&type metadata for Any + 8;
  v147 = v7;
  v148 = v9;
  v152 = v34;
  v149 = v17;
  v154 = v14;
  while (1)
  {
    v134 = (uint64_t)v41;
    while (1)
    {
      v44 = v153(v25, v34, v13);
      v45 = URL.lastPathComponent.getter(v44);
      UUID.init(uuidString:)(v45, v46);
      swift_bridgeObjectRelease();
      v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v151 + 48);
      if (v47(v9, 1, v156) != 1)
        break;
      sub_100004048((uint64_t)v9, &qword_1010ED860);
      if (qword_1010E9DD8 != -1)
        swift_once(&qword_1010E9DD8, sub_1006270D8);
      v48 = type metadata accessor for Logger(0);
      sub_10001A9E8(v48, (uint64_t)qword_101101B90);
      v49 = v154;
      v50 = v149;
      v51 = (*(uint64_t (**)(char *, char *, uint64_t))(v154 + 16))(v149, v25, v13);
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.error.getter(v52);
      if (os_log_type_enabled(v52, v53))
      {
        v54 = swift_slowAlloc(12, -1);
        v55 = swift_slowAlloc(32, -1);
        v157 = (_QWORD *)v55;
        *(_DWORD *)v54 = v146;
        v56 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v57 = dispatch thunk of CustomStringConvertible.description.getter(v13, v56);
        *(_QWORD *)(v54 + 4) = sub_100016940(v57, v58, (uint64_t *)&v157);
        swift_bridgeObjectRelease();
        v42 = *(void (**)(char *, uint64_t))(v49 + 8);
        v42(v50, v13);
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Skipping unexpected folder: %s", (uint8_t *)v54, 0xCu);
        swift_arrayDestroy(v55, 1, v140);
        v59 = v55;
        v7 = v147;
        swift_slowDealloc(v59, -1, -1);
        v60 = v54;
        v9 = v148;
        swift_slowDealloc(v60, -1, -1);

      }
      else
      {

        v42 = *(void (**)(char *, uint64_t))(v49 + 8);
        v42(v50, v13);
      }
      v43 = ((uint64_t (*)(char *, uint64_t))v42)(v25, v13);
      v34 = v152;
      DirectorySequence.next()(v43);
      if (v155(v34, 1, v13) == 1)
      {
        v41 = (_QWORD *)v134;
LABEL_44:
        (*(void (**)(char *, uint64_t))(v135 + 8))(v150, v136);

        return (uint64_t)v41;
      }
    }
    v125 = *(void (**)(char *, char *, uint64_t))(v151 + 32);
    v125(v133, v9, v156);
    v61 = NSFileManager.flatSequence(at:includingPropertiesForKeys:)(v25, 0);
    v62 = v144;
    DirectorySequence.next()(v61);
    v63 = v62;
    v64 = v155(v62, 1, v13);
    v66 = (uint64_t)v142;
    v65 = v143;
    if (v64 != 1)
      break;
LABEL_12:
    (*(void (**)(char *, uint64_t))(v135 + 8))(v145, v136);
    (*(void (**)(char *, uint64_t))(v151 + 8))(v133, v156);
    v67 = (*(uint64_t (**)(char *, uint64_t))(v154 + 8))(v25, v13);
    DirectorySequence.next()(v67);
    v68 = v155(v34, 1, v13);
    v41 = (_QWORD *)v134;
    if (v68 == 1)
      goto LABEL_44;
  }
  v138 = v25;
  v139 = v47;
  while (1)
  {
    while (1)
    {
      v69 = v153(v65, v63, v13);
      v70 = URL.lastPathComponent.getter(v69);
      UUID.init(uuidString:)(v70, v71);
      swift_bridgeObjectRelease();
      if (v47(v7, 1, v156) != 1)
        break;
      sub_100004048((uint64_t)v7, &qword_1010ED860);
      if (qword_1010E9DD8 != -1)
        swift_once(&qword_1010E9DD8, sub_1006270D8);
      v72 = type metadata accessor for Logger(0);
      sub_10001A9E8(v72, (uint64_t)qword_101101B90);
      v73 = v154;
      v74 = v141;
      v75 = v143;
      v76 = (*(uint64_t (**)(char *, char *, uint64_t))(v154 + 16))(v141, v143, v13);
      v77 = Logger.logObject.getter(v76);
      v78 = static os_log_type_t.error.getter(v77);
      if (os_log_type_enabled(v77, v78))
      {
        v79 = swift_slowAlloc(12, -1);
        v80 = swift_slowAlloc(32, -1);
        v157 = (_QWORD *)v80;
        *(_DWORD *)v79 = v146;
        v81 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v82 = dispatch thunk of CustomStringConvertible.description.getter(v13, v81);
        *(_QWORD *)(v79 + 4) = sub_100016940(v82, v83, (uint64_t *)&v157);
        swift_bridgeObjectRelease();
        v84 = *(void (**)(char *, uint64_t))(v73 + 8);
        v84(v74, v13);
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "Skipping unexpected folder: %s", (uint8_t *)v79, 0xCu);
        swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
        v85 = v80;
        v7 = v147;
        swift_slowDealloc(v85, -1, -1);
        v86 = v79;
        v9 = v148;
        swift_slowDealloc(v86, -1, -1);

      }
      else
      {

        v84 = *(void (**)(char *, uint64_t))(v73 + 8);
        v84(v74, v13);
      }
      v87 = ((uint64_t (*)(char *, uint64_t))v84)(v75, v13);
      v65 = v75;
      v88 = v144;
      DirectorySequence.next()(v87);
      v63 = v88;
      v89 = v155(v88, 1, v13);
      v25 = v138;
      v66 = (uint64_t)v142;
      v34 = v152;
      v47 = v139;
      if (v89 == 1)
        goto LABEL_12;
    }
    v90 = v130;
    v91 = v156;
    v125(v130, v7, v156);
    v92 = *(void (**)(uint64_t, char *, uint64_t))(v151 + 16);
    v93 = v131;
    v92(v131, v133, v91);
    v92(v93 + *(int *)(v129 + 20), v90, v91);
    v94 = v132;
    sub_10005972C(v93, v132, type metadata accessor for BeaconIdentifier);
    v95 = v154;
    v96 = (uint64_t)v128;
    (*(void (**)(char *, char *, uint64_t))(v154 + 16))(v128, v65, v13);
    v97 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56);
    v97(v96, 0, 1, v13);
    if (v155((char *)v96, 1, v13) == 1)
    {
      sub_100004048(v96, &qword_1010FBA40);
      v98 = v134;
      swift_bridgeObjectRetain(v134);
      v99 = sub_1005191EC(v94);
      v101 = v100;
      swift_bridgeObjectRelease();
      if ((v101 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v98);
        v157 = (_QWORD *)v98;
        v103 = v98;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_100A9F8BC();
          v103 = (uint64_t)v157;
        }
        sub_1000126B0(*(_QWORD *)(v103 + 48) + *(_QWORD *)(v126 + 72) * v99, type metadata accessor for BeaconIdentifier);
        v153((char *)v66, (char *)(*(_QWORD *)(v103 + 56) + *(_QWORD *)(v154 + 72) * v99), v13);
        v134 = v103;
        sub_100107B24(v99, v103);
        swift_bridgeObjectRelease();
        v104 = 0;
        v105 = v132;
      }
      else
      {
        v104 = 1;
        v105 = v132;
      }
      v97(v66, v104, 1, v13);
      sub_1000126B0(v105, type metadata accessor for BeaconIdentifier);
      sub_100004048(v66, &qword_1010FBA40);
      v9 = v148;
      v34 = v152;
      goto LABEL_41;
    }
    v153(v127, (char *)v96, v13);
    v106 = v134;
    v107 = swift_isUniquelyReferenced_nonNull_native(v134);
    v157 = (_QWORD *)v106;
    v108 = sub_1005191EC(v94);
    v110 = v106;
    v111 = v108;
    v112 = *(_QWORD *)(v110 + 16);
    v113 = (v109 & 1) == 0;
    v114 = v112 + v113;
    if (__OFADD__(v112, v113))
      break;
    v115 = v109;
    if (*(_QWORD *)(v110 + 24) >= v114)
    {
      if ((v107 & 1) == 0)
        sub_100A9F8BC();
    }
    else
    {
      sub_100A90758(v114, v107);
      v116 = sub_1005191EC(v132);
      if ((v115 & 1) != (v117 & 1))
        goto LABEL_47;
      v111 = v116;
    }
    v118 = v157;
    if ((v115 & 1) != 0)
    {
      (*(void (**)(unint64_t, char *, uint64_t))(v154 + 40))(v157[7] + *(_QWORD *)(v154 + 72) * v111, v127, v13);
    }
    else
    {
      v157[(v111 >> 6) + 8] |= 1 << v111;
      sub_10005972C(v132, v118[6] + *(_QWORD *)(v126 + 72) * v111, type metadata accessor for BeaconIdentifier);
      v153((char *)(v118[7] + *(_QWORD *)(v154 + 72) * v111), v127, v13);
      v119 = v118[2];
      v120 = __OFADD__(v119, 1);
      v121 = v119 + 1;
      if (v120)
        goto LABEL_46;
      v118[2] = v121;
    }
    v9 = v148;
    v34 = v152;
    v134 = (uint64_t)v157;
    swift_bridgeObjectRelease();
    sub_1000126B0(v132, type metadata accessor for BeaconIdentifier);
LABEL_41:
    sub_1000126B0(v131, type metadata accessor for BeaconIdentifier);
    (*(void (**)(char *, uint64_t))(v151 + 8))(v130, v156);
    v122 = (*(uint64_t (**)(char *, uint64_t))(v154 + 8))(v65, v13);
    DirectorySequence.next()(v122);
    v63 = v144;
    v123 = v155(v144, 1, v13);
    v47 = v139;
    if (v123 == 1)
      goto LABEL_12;
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v129);
  __break(1u);
  return result;
}

uint64_t sub_10062A748(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2[8] = a1;
  v2[9] = a2;
  v3 = type metadata accessor for URL(0);
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BeaconIdentifier(0);
  v2[13] = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[14] = swift_task_alloc(v6);
  v2[15] = swift_task_alloc(v6);
  return swift_task_switch(sub_10062A7DC, 0, 0);
}

uint64_t sub_10062A7DC()
{
  uint64_t v0;
  id v1;
  NSString v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *log;
  uint64_t v41[2];

  v1 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.path.getter(v1);
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, "fileExistsAtPath:", v2);

  if (v3)
  {
    if (qword_1010E9DD8 != -1)
      swift_once(&qword_1010E9DD8, sub_1006270D8);
    v5 = *(_QWORD *)(v0 + 112);
    v4 = *(_QWORD *)(v0 + 120);
    v7 = *(_QWORD *)(v0 + 88);
    v6 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 80);
    v10 = *(_QWORD *)(v0 + 64);
    v11 = type metadata accessor for Logger(0);
    sub_10001A9E8(v11, (uint64_t)qword_101101B90);
    sub_10005972C(v9, v4, type metadata accessor for BeaconIdentifier);
    sub_10005972C(v9, v5, type metadata accessor for BeaconIdentifier);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v10, v8);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    v15 = os_log_type_enabled(v13, v14);
    v17 = *(_QWORD *)(v0 + 112);
    v16 = *(_QWORD *)(v0 + 120);
    if (v15)
    {
      log = v13;
      v18 = (uint64_t *)(v0 + 64);
      v37 = *(_QWORD *)(v0 + 96);
      v38 = *(_QWORD *)(v0 + 88);
      v36 = *(_QWORD *)(v0 + 80);
      v19 = swift_slowAlloc(52, -1);
      v39 = swift_slowAlloc(96, -1);
      v41[0] = v39;
      *(_DWORD *)v19 = 141559043;
      *(_QWORD *)(v0 + 24) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v19 + 4, v19 + 12);
      *(_WORD *)(v19 + 12) = 2081;
      v20 = type metadata accessor for UUID(0);
      v21 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of CustomStringConvertible.description.getter(v20, v21);
      *(_QWORD *)(v0 + 32) = sub_100016940(v22, v23, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v19 + 14, v19 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v16, type metadata accessor for BeaconIdentifier);
      *(_WORD *)(v19 + 22) = 2160;
      *(_QWORD *)(v0 + 40) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v19 + 24, v19 + 32);
      *(_WORD *)(v19 + 32) = 2081;
      v24 = dispatch thunk of CustomStringConvertible.description.getter(v20, v21);
      *(_QWORD *)(v0 + 48) = sub_100016940(v24, v25, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v19 + 34, v19 + 42);
      swift_bridgeObjectRelease();
      sub_1000126B0(v17, type metadata accessor for BeaconIdentifier);
      *(_WORD *)(v19 + 42) = 2080;
      v26 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v27 = dispatch thunk of CustomStringConvertible.description.getter(v36, v26);
      *(_QWORD *)(v0 + 56) = sub_100016940(v27, v28, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v19 + 44, v19 + 52);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v36);
      _os_log_impl((void *)&_mh_execute_header, log, v14, "Purging KeyMaps for %{private,mask.hash}s/%{private,mask.hash}s: %s", (uint8_t *)v19, 0x34u);
      swift_arrayDestroy(v39, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {
      v30 = *(_QWORD *)(v0 + 88);
      v29 = *(_QWORD *)(v0 + 96);
      v31 = *(_QWORD *)(v0 + 80);
      sub_1000126B0(*(_QWORD *)(v0 + 120), type metadata accessor for BeaconIdentifier);
      sub_1000126B0(v17, type metadata accessor for BeaconIdentifier);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);

      v18 = (uint64_t *)(v0 + 64);
    }
    v32 = *v18;
    sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
    static NSFileManager.removeDirectory(url:)(v32);
  }
  v33 = *(_QWORD *)(v0 + 112);
  v34 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10062AD7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v8[15] = a8;
  v8[16] = v13;
  v8[13] = a6;
  v8[14] = a7;
  v8[11] = a4;
  v8[12] = a5;
  v8[9] = a2;
  v8[10] = a3;
  v9 = *(_QWORD *)(type metadata accessor for KeyGenerationBeaconInfo(0) - 8);
  v8[17] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v8[18] = v10;
  v8[19] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F46C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[20] = swift_task_alloc(v11);
  v8[21] = swift_task_alloc(v11);
  return swift_task_switch(sub_10062AE20, 0, 0);
}

uint64_t sub_10062AE20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 136);
    v4 = *(unsigned __int8 *)(v3 + 80);
    v5 = v1 + ((v4 + 32) & ~v4);
    v40 = (v4 + 40) & ~v4;
    v41 = *(_QWORD *)(v3 + 72);
    v38 = (*(_QWORD *)(v0 + 144) + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    v39 = v4 | 7;
    v37 = (v38 + 15) & 0xFFFFFFFFFFFFFFF8;
    v36 = (v37 + 15) & 0xFFFFFFFFFFFFFFF8;
    v35 = (v36 + 15) & 0xFFFFFFFFFFFFFFF8;
    v34 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8;
    v6 = type metadata accessor for TaskPriority(0);
    v7 = *(_QWORD *)(v6 - 8);
    v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56);
    v8 = swift_bridgeObjectRetain(v1);
    while (1)
    {
      v42 = v2;
      v11 = *(_QWORD *)(v0 + 160);
      v10 = *(_QWORD *)(v0 + 168);
      v12 = *(_QWORD *)(v0 + 152);
      v45 = *(_QWORD *)(v0 + 120);
      v46 = *(_QWORD *)(v0 + 128);
      v13 = *(_QWORD *)(v0 + 96);
      v43 = *(_QWORD *)(v0 + 104);
      v44 = *(_QWORD *)(v0 + 112);
      v14 = *(_QWORD *)(v0 + 88);
      v33(v10, 1, 1, v6, v8);
      v47 = v5;
      sub_10005972C(v5, v12, type metadata accessor for KeyGenerationBeaconInfo);
      v15 = (_QWORD *)swift_allocObject(&unk_101083CC8, v34 + 8, v39);
      v15[2] = 0;
      v16 = v15 + 2;
      v15[3] = 0;
      v15[4] = v14;
      sub_1000126EC(v12, (uint64_t)v15 + v40, type metadata accessor for KeyGenerationBeaconInfo);
      *(_QWORD *)((char *)v15 + v38) = v13;
      *(_QWORD *)((char *)v15 + v37) = v43;
      *(_QWORD *)((char *)v15 + v36) = v44;
      *(_QWORD *)((char *)v15 + v35) = v45;
      *(_QWORD *)((char *)v15 + v34) = v46;
      sub_10000F9B8(v10, v11, &qword_1010F46C0);
      LODWORD(v11) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6);
      v17 = swift_retain();
      v18 = *(_QWORD *)(v0 + 160);
      if ((_DWORD)v11 == 1)
      {
        sub_100004048(*(_QWORD *)(v0 + 160), &qword_1010F46C0);
        v19 = 0;
        v20 = *v16;
        if (!*v16)
          goto LABEL_8;
      }
      else
      {
        v26 = TaskPriority.rawValue.getter(v17);
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v18, v6);
        v19 = v26;
        v20 = *v16;
        if (!*v16)
        {
LABEL_8:
          v23 = 0;
          v25 = 0;
          goto LABEL_9;
        }
      }
      v21 = v15[3];
      ObjectType = swift_getObjectType(v20);
      swift_unknownObjectRetain(v20);
      v23 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v21);
      v25 = v24;
      swift_unknownObjectRelease(v20);
LABEL_9:
      v27 = **(_QWORD **)(v0 + 72);
      v28 = swift_allocObject(&unk_101083CF0, 32, 7);
      *(_QWORD *)(v28 + 16) = &unk_101101FF8;
      *(_QWORD *)(v28 + 24) = v15;
      v29 = v25 | v23;
      if (v25 | v23)
      {
        v29 = v0 + 16;
        *(_QWORD *)(v0 + 16) = 0;
        *(_QWORD *)(v0 + 24) = 0;
        *(_QWORD *)(v0 + 32) = v23;
        *(_QWORD *)(v0 + 40) = v25;
      }
      v9 = *(_QWORD *)(v0 + 168);
      *(_QWORD *)(v0 + 48) = 1;
      *(_QWORD *)(v0 + 56) = v29;
      *(_QWORD *)(v0 + 64) = v27;
      swift_task_create(v19 | 0x3100, v0 + 48, &type metadata for () + 1, &unk_1010F4908, v28);
      swift_release();
      sub_100004048(v9, &qword_1010F46C0);
      v5 = v47 + v41;
      v2 = v42 - 1;
      if (v42 == 1)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  v30 = *(_QWORD *)(v0 + 160);
  v31 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10062B174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v8[7] = v15;
  v8[8] = v16;
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  v9 = type metadata accessor for UUID(0);
  v8[9] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[10] = v10;
  v8[11] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(type metadata accessor for KeyGenerationBeaconInfo(0) - 8);
  v8[12] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v8[13] = v12;
  v8[14] = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BeaconIdentifier(0);
  v8[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10062B22C, 0, 0);
}

uint64_t sub_10062B22C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = v0[14];
  v3 = v0[12];
  v2 = v0[13];
  v23 = v0[11];
  v24 = v0[15];
  v21 = v0[7];
  v22 = v0[8];
  v19 = v0[5];
  v20 = v0[6];
  v4 = v0[3];
  v18 = v0[4];
  v5 = v0[2];
  sub_10005972C(v4, v24, type metadata accessor for BeaconIdentifier);
  sub_10005972C(v4, v1, type metadata accessor for KeyGenerationBeaconInfo);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = (v2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = swift_allocObject(&unk_101083D18, v12 + 8, v6 | 7);
  v0[16] = v13;
  *(_QWORD *)(v13 + 16) = v5;
  sub_1000126EC(v1, v13 + v7, type metadata accessor for KeyGenerationBeaconInfo);
  *(_QWORD *)(v13 + v8) = v18;
  *(_QWORD *)(v13 + v9) = v19;
  *(_QWORD *)(v13 + v10) = v20;
  *(_QWORD *)(v13 + v11) = v21;
  *(_QWORD *)(v13 + v12) = v22;
  v14 = swift_retain();
  UUID.init()(v14);
  v15 = (_QWORD *)swift_task_alloc(64);
  v0[17] = v15;
  v15[2] = v23;
  v15[3] = &unk_101102008;
  v15[4] = v13;
  v15[5] = v5;
  v15[6] = v24;
  v16 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[18] = v16;
  *v16 = v0;
  v16[1] = sub_10062B3F4;
  return withCheckedContinuation<A>(isolation:function:_:)(v16, 0, 0, 0xD000000000000027, 0x8000000100EDD750, sub_100645EC8, v15, &type metadata for () + 1);
}

uint64_t sub_10062B3F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10062B450, 0, 0);
}

uint64_t sub_10062B450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 72);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_1000126B0(v1, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10062B4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6[10] = a5;
  v6[11] = a6;
  v6[8] = a3;
  v6[9] = a4;
  v6[6] = a1;
  v6[7] = a2;
  v8 = *(_QWORD *)(type metadata accessor for KeyGenerationBeaconInfo(0) - 8);
  v6[12] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v6[13] = v9;
  v6[14] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010F46C0);
  v6[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)swift_task_alloc(dword_101102014);
  v6[16] = v11;
  *v11 = v6;
  v11[1] = sub_10062B580;
  return sub_10062BEE0(a2);
}

uint64_t sub_10062B580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10062BD2C;
  else
    v3 = sub_10062B5E4;
  return swift_task_switch(v3, 0, 0);
}

void sub_10062B5E4()
{
  uint64_t *v0;
  BOOL v1;
  uint64_t **v2;

  if (v0[9])
    v1 = v0[8] == 0;
  else
    v1 = 1;
  if (v1)
  {
    __break(1u);
  }
  else
  {
    v2 = (uint64_t **)swift_task_alloc(dword_10110201C);
    v0[18] = (uint64_t)v2;
    *v2 = v0;
    v2[1] = (uint64_t *)sub_10062B64C;
    sub_10064A3B0(v0[7], 1, v0[8]);
  }
}

uint64_t sub_10062B64C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 144);
  *(_BYTE *)(v3 + 25) = a1;
  *(_QWORD *)(v3 + 152) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10062BB78;
  else
    v5 = sub_10062B6BC;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10062B6BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;

  v2 = v0[14];
  v1 = v0[15];
  v3 = v0[12];
  v4 = v0[13];
  v5 = v0[10];
  v18 = v0[11];
  v6 = v0[6];
  v7 = v0[7];
  static TaskPriority.background.getter();
  v8 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v1, 0, 1, v8);
  sub_10005972C(v7, v2, type metadata accessor for KeyGenerationBeaconInfo);
  v9 = *(unsigned __int8 *)(v3 + 80);
  v10 = (v9 + 40) & ~v9;
  v11 = (v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = (_QWORD *)swift_allocObject(&unk_101083D40, v12 + 8, v9 | 7);
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v6;
  sub_1000126EC(v2, (uint64_t)v13 + v10, type metadata accessor for KeyGenerationBeaconInfo);
  *(_QWORD *)((char *)v13 + v11) = v5;
  *(_QWORD *)((char *)v13 + v12) = v18;
  swift_retain();
  v14 = sub_100626BE0(v1, (uint64_t)&unk_101102028, (uint64_t)v13, (uint64_t)&type metadata for Bool);
  v0[20] = v14;
  v15 = (_QWORD *)swift_task_alloc(async function pointer to Task.result.getter[1]);
  v0[21] = v15;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v0[22] = v16;
  *v15 = v0;
  v15[1] = sub_10062B838;
  return Task.result.getter(v0 + 2, v14, &type metadata for Bool, v16, &protocol self-conformance witness table for Error);
}

uint64_t sub_10062B838()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 168));
  swift_release();
  return swift_task_switch(sub_10062B894, 0, 0);
}

uint64_t sub_10062B894()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 16);
  if (*(_BYTE *)(v0 + 24) != 1)
  {
    if (qword_1010E9DD8 != -1)
      swift_once(&qword_1010E9DD8, sub_1006270D8);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001A9E8(v11, (uint64_t)qword_101101B90);
    v5 = Logger.logObject.getter(v12);
    v13 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v13))
    {
      v14 = *(unsigned __int8 *)(v0 + 25);
      v15 = swift_slowAlloc(14, -1);
      *(_DWORD *)v15 = 67109376;
      *(_DWORD *)(v0 + 28) = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 28, v0 + 32, v15 + 4, v15 + 8);
      *(_WORD *)(v15 + 8) = 1024;
      *(_DWORD *)(v0 + 184) = v1 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 188, v15 + 10, v15 + 14);
      _os_log_impl((void *)&_mh_execute_header, v5, v13, "lowPriorityModified: %{BOOL}d highPriorityModified: %{BOOL}d", (uint8_t *)v15, 0xEu);
      swift_slowDealloc(v15, -1, -1);
    }
    goto LABEL_11;
  }
  v2 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v0 + 40) = v1;
  swift_willThrowTypedImpl(v0 + 40, v2, &protocol self-conformance witness table for Error);
  if (qword_1010E9DD8 != -1)
    swift_once(&qword_1010E9DD8, sub_1006270D8);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_101101B90);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (!os_log_type_enabled(v5, v6))
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
LABEL_11:

    goto LABEL_12;
  }
  v7 = (uint8_t *)swift_slowAlloc(12, -1);
  v8 = (uint64_t *)swift_slowAlloc(8, -1);
  *(_DWORD *)v7 = 138412290;
  v9 = _convertErrorToNSError(_:)(v1);
  *(_QWORD *)(v0 + 32) = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v7 + 4, v7 + 12);
  *v8 = v9;
  swift_errorRelease(v1);
  _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error during perform: %@", v7, 0xCu);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
  swift_arrayDestroy(v8, 1, v10);
  swift_slowDealloc(v8, -1, -1);
  swift_slowDealloc(v7, -1, -1);

  swift_errorRelease(v1);
LABEL_12:
  v16 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10062BB78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 152);
  if (qword_1010E9DD8 != -1)
    swift_once(&qword_1010E9DD8, sub_1006270D8);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_101101B90);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    v8 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 32) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error during perform: %@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v10 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10062BD2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 136);
  if (qword_1010E9DD8 != -1)
    swift_once(&qword_1010E9DD8, sub_1006270D8);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_101101B90);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    v8 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 32) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error during perform: %@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v10 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10062BEE0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2[6] = a1;
  v2[7] = v1;
  v3 = type metadata accessor for KeyGenerationBeaconInfo(0);
  v2[8] = v3;
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v4);
  v2[10] = swift_task_alloc(v4);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[11] = swift_task_alloc(v5);
  v2[12] = swift_task_alloc(v5);
  v6 = type metadata accessor for URL(0);
  v2[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[14] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[15] = swift_task_alloc(v8);
  v2[16] = swift_task_alloc(v8);
  v2[17] = swift_task_alloc(v8);
  v2[18] = swift_task_alloc(v8);
  return swift_task_switch(sub_10062BFD0, 0, 0);
}

uint64_t sub_10062BFD0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;

  v2 = v1[17];
  v4 = v1[13];
  v3 = v1[14];
  v5 = UUID.uuidString.getter(a1);
  URL.appendingPathComponent(_:)(v5, v6);
  swift_bridgeObjectRelease();
  v7 = type metadata accessor for BeaconIdentifier(0);
  v8 = UUID.uuidString.getter(v7);
  URL.appendingPathComponent(_:)(v8, v9);
  swift_bridgeObjectRelease();
  v10 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v1[19] = v10;
  v10(v2, v4);
  URL.appendingPathComponent(_:)(0x7972616D697250, 0xE700000000000000);
  if (qword_1010E9DD8 != -1)
    swift_once(&qword_1010E9DD8, sub_1006270D8);
  v12 = v1[9];
  v11 = v1[10];
  v13 = v1[6];
  v14 = type metadata accessor for Logger(0);
  sub_10001A9E8(v14, (uint64_t)qword_101101B90);
  sub_10005972C(v13, v11, type metadata accessor for KeyGenerationBeaconInfo);
  v15 = sub_10005972C(v13, v12, type metadata accessor for KeyGenerationBeaconInfo);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  v18 = os_log_type_enabled(v16, v17);
  v20 = v1[9];
  v19 = v1[10];
  if (v18)
  {
    v21 = swift_slowAlloc(42, -1);
    v31 = swift_slowAlloc(64, -1);
    v32 = v31;
    *(_DWORD *)v21 = 141558787;
    v1[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v21 + 4, v21 + 12);
    *(_WORD *)(v21 + 12) = 2081;
    v22 = type metadata accessor for UUID(0);
    v23 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
    v1[3] = sub_100016940(v24, v25, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 3, v1 + 4, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v19, type metadata accessor for KeyGenerationBeaconInfo);
    *(_WORD *)(v21 + 22) = 2160;
    v1[4] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 4, v1 + 5, v21 + 24, v21 + 32);
    *(_WORD *)(v21 + 32) = 2081;
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
    v1[5] = sub_100016940(v26, v27, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 5, v1 + 6, v21 + 34, v21 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v20, type metadata accessor for KeyGenerationBeaconInfo);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Verify file integrity for %{private,mask.hash}s/%{private,mask.hash}s", (uint8_t *)v21, 0x2Au);
    swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {
    sub_1000126B0(v1[10], type metadata accessor for KeyGenerationBeaconInfo);
    sub_1000126B0(v20, type metadata accessor for KeyGenerationBeaconInfo);

  }
  v28 = v1[16];
  v1[20] = sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
  static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v28, 0);
  v29 = (_QWORD *)swift_task_alloc(dword_10110208C);
  v1[21] = v29;
  *v29 = v1;
  v29[1] = sub_10062C3C8;
  return sub_1006473D4(v1[16]);
}

uint64_t sub_10062C3C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10062C618;
  else
    v3 = sub_10062C42C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10062C42C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;

  v1 = *(_QWORD *)(v0 + 48) + *(int *)(*(_QWORD *)(v0 + 64) + 24);
  if (*(_QWORD *)(v1 + 8) >> 60 == 15 || *(_QWORD *)(v1 + 40) >> 60 == 15)
  {
    v2 = 1;
  }
  else
  {
    URL.appendingPathComponent(_:)(0x7261646E6F636553, 0xE900000000000079);
    v2 = 0;
  }
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v5, v2, 1, v3);
  sub_10000F9B8(v5, v6, &qword_1010FBA40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3) == 1)
  {
    v7 = *(_QWORD *)(v0 + 144);
    v8 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
    v9 = *(_QWORD *)(v0 + 128);
    v10 = *(_QWORD *)(v0 + 104);
    v11 = *(_QWORD *)(v0 + 88);
    sub_100004048(*(_QWORD *)(v0 + 96), &qword_1010FBA40);
    v8(v9, v10);
    v8(v7, v10);
    sub_100004048(v11, &qword_1010FBA40);
    v12 = *(_QWORD *)(v0 + 136);
    v14 = *(_QWORD *)(v0 + 120);
    v13 = *(_QWORD *)(v0 + 128);
    v16 = *(_QWORD *)(v0 + 88);
    v15 = *(_QWORD *)(v0 + 96);
    v18 = *(_QWORD *)(v0 + 72);
    v17 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 144));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 120);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 32))(v20, *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 104));
    static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v20, 0);
    v21 = (_QWORD *)swift_task_alloc(dword_10110208C);
    *(_QWORD *)(v0 + 184) = v21;
    *v21 = v0;
    v21[1] = sub_10062C6DC;
    return sub_1006473D4(*(_QWORD *)(v0 + 120));
  }
}

uint64_t sub_10062C618()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
  v4 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v9 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 72);
  v2(v4, v6);
  v2(v1, v6);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10062C6DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10062C80C;
  else
    v3 = sub_10062C740;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10062C740()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
  v3 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  v2(*(_QWORD *)(v0 + 120), v4);
  sub_100004048(v5, &qword_1010FBA40);
  v2(v3, v4);
  v2(v1, v4);
  v6 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 128);
  v10 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10062C80C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 96);
  (*(void (**)(_QWORD, _QWORD))(v0 + 152))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
  sub_100004048(v1, &qword_1010FBA40);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
  v5 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 88);
  v12 = *(_QWORD *)(v0 + 72);
  v3(v5, v7);
  v3(v2, v7);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10062C8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch(sub_10062C910, 0, 0);
}

void sub_10062C910()
{
  uint64_t *v0;
  BOOL v1;
  uint64_t **v2;

  if (v0[6])
    v1 = v0[5] == 0;
  else
    v1 = 1;
  if (v1)
  {
    __break(1u);
  }
  else
  {
    v2 = (uint64_t **)swift_task_alloc(dword_10110201C);
    v0[7] = (uint64_t)v2;
    *v2 = v0;
    v2[1] = (uint64_t *)sub_10062C978;
    sub_10064A3B0(v0[4], 1, v0[5]);
  }
}

uint64_t sub_10062C978(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 56);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
    return (*(uint64_t (**)(void))(v6 + 8))();
  *(_BYTE *)(v4 + 64) = a1 & 1;
  return swift_task_switch(sub_10062C9F8, 0, 0);
}

uint64_t sub_10062C9F8()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_BYTE *)(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10062CA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5[15] = a4;
  v5[16] = a5;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F46C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[17] = swift_task_alloc(v7);
  v5[18] = swift_task_alloc(v7);
  v8 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v5[19] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[20] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[21] = swift_task_alloc(v10);
  v5[22] = swift_task_alloc(v10);
  v11 = sub_10001A9A8(&qword_1011020C0);
  v5[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1011091A0);
  v5[24] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[25] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[26] = swift_task_alloc(v14);
  v5[27] = swift_task_alloc(v14);
  v5[28] = swift_task_alloc(v14);
  v5[29] = swift_task_alloc(v14);
  v15 = sub_10001A9A8(&qword_1011020C8);
  v5[30] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v5[31] = v16;
  v5[32] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10062CB64, a3, 0);
}

void sub_10062CB64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  _QWORD *v42;
  int64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 112);
  swift_beginAccess(v1 + 160, v0 + 48, 0, 0);
  v2 = *(_QWORD *)(v1 + 160);
  v39 = v2 + 64;
  v38 = *(_QWORD *)(v2 + 16);
  v3 = -1;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(v2 + 64);
  v40 = (unint64_t)(63 - v4) >> 6;
  v41 = v2;
  swift_bridgeObjectRetain(v2);
  v6 = 0;
  while (1)
  {
    if (v5)
    {
      v44 = (v5 - 1) & v5;
      v43 = v6;
      v9 = __clz(__rbit64(v5)) | (v6 << 6);
      goto LABEL_23;
    }
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v10 >= v40)
      goto LABEL_31;
    v11 = *(_QWORD *)(v39 + 8 * v10);
    v12 = v6 + 1;
    if (!v11)
    {
      v12 = v6 + 2;
      if (v6 + 2 >= v40)
        goto LABEL_31;
      v11 = *(_QWORD *)(v39 + 8 * v12);
      if (!v11)
      {
        v12 = v6 + 3;
        if (v6 + 3 >= v40)
          goto LABEL_31;
        v11 = *(_QWORD *)(v39 + 8 * v12);
        if (!v11)
        {
          v12 = v6 + 4;
          if (v6 + 4 >= v40)
            goto LABEL_31;
          v11 = *(_QWORD *)(v39 + 8 * v12);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v44 = (v11 - 1) & v11;
    v43 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
    v15 = *(_QWORD *)(v0 + 136);
    v14 = *(_QWORD *)(v0 + 144);
    v17 = *(_QWORD *)(v0 + 120);
    v16 = *(_QWORD *)(v0 + 128);
    v18 = *(_QWORD *)(*(_QWORD *)(v41 + 56) + 8 * v9);
    v19 = type metadata accessor for TaskPriority(0);
    v20 = *(_QWORD *)(v19 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v14, 1, 1, v19);
    v21 = (_QWORD *)swift_allocObject(&unk_101083D90, 56, 7);
    v21[2] = 0;
    v42 = v21 + 2;
    v21[3] = 0;
    v21[4] = v17;
    v21[5] = v16;
    v21[6] = v18;
    sub_10000F9B8(v14, v15, &qword_1010F46C0);
    LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v15, 1, v19);
    swift_retain_n(v18, 2);
    v22 = sub_10012C644(v17, v16);
    v23 = *(_QWORD *)(v0 + 136);
    if ((_DWORD)v15 == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 136), &qword_1010F46C0);
      v24 = 0;
    }
    else
    {
      v25 = TaskPriority.rawValue.getter(v22);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v23, v19);
      v24 = v25;
    }
    v6 = v43;
    v26 = *v42;
    if (*v42)
    {
      v27 = v21[3];
      ObjectType = swift_getObjectType(*v42);
      swift_unknownObjectRetain(v26);
      v29 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v27);
      v31 = v30;
      swift_unknownObjectRelease(v26);
    }
    else
    {
      v29 = 0;
      v31 = 0;
    }
    v32 = **(_QWORD **)(v0 + 104);
    v33 = swift_allocObject(&unk_101083DB8, 32, 7);
    *(_QWORD *)(v33 + 16) = &unk_1011020D8;
    *(_QWORD *)(v33 + 24) = v21;
    v34 = v31 | v29;
    if (v31 | v29)
    {
      v34 = v0 + 16;
      *(_QWORD *)(v0 + 16) = 0;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = v29;
      *(_QWORD *)(v0 + 40) = v31;
    }
    v7 = *(_QWORD *)(v0 + 192);
    v8 = *(_QWORD *)(v0 + 144);
    *(_QWORD *)(v0 + 72) = 1;
    *(_QWORD *)(v0 + 80) = v34;
    *(_QWORD *)(v0 + 88) = v32;
    swift_task_create(v24 | 0x3100, v0 + 72, v7, &unk_1011020E8, v33);
    swift_release();
    swift_release();
    sub_100004048(v8, &qword_1010F46C0);
    v5 = v44;
  }
  v13 = v6 + 5;
  if (v6 + 5 >= v40)
  {
LABEL_31:
    v35 = *(_QWORD **)(v0 + 104);
    swift_release();
    v36 = sub_1007CA134(0, v38, 0, (unint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)(v0 + 264) = v36;
    *(_QWORD *)(v0 + 272) = *v35;
    swift_bridgeObjectRetain(v36);
    *(_QWORD *)(v0 + 280) = sub_1007EE788(v37);
    swift_bridgeObjectRelease();
    swift_task_switch(sub_10062CF68, 0, 0);
    return;
  }
  v11 = *(_QWORD *)(v39 + 8 * v13);
  if (v11)
  {
    v12 = v6 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v40)
      goto LABEL_31;
    v11 = *(_QWORD *)(v39 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_10062CF68()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  TaskGroup.makeAsyncIterator()(v0[34], v0[24]);
  v1 = sub_1000193A4(&qword_1011020F0, &qword_1011020C8, (const char *)&protocol conformance descriptor for TaskGroup<A>.Iterator);
  v0[36] = v1;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[37] = v2;
  *v2 = v0;
  v2[1] = sub_10062CFF8;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[23], v0[30], v1);
}

uint64_t sub_10062CFF8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 296));
  if (v0)
  {
    v4 = v2[31];
    v3 = v2[32];
    v5 = v2[30];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = (uint64_t (*)())SharingCircleWildAdvertisementKey.init(key:);
  }
  else
  {
    v2[38] = v2[35];
    v6 = sub_10062D084;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10062D084()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = v0[23];
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v0[25] + 48))(v1, 1, v0[24]) == 1)
  {
    v2 = v0[14];
    (*(void (**)(_QWORD, _QWORD))(v0[31] + 8))(v0[32], v0[30]);
    sub_100004048(v1, &qword_1011020C0);
    return swift_task_switch(sub_10062D2B4, v2, 0);
  }
  else
  {
    v4 = v0[38];
    v6 = v0[28];
    v5 = v0[29];
    sub_100005CF0(v1, v5, &qword_1011091A0);
    sub_10000F9B8(v5, v6, &qword_1011091A0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
    v8 = v0[38];
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v8 = sub_1007CA148(0, *(_QWORD *)(v8 + 16) + 1, 1, v8);
    v10 = *(_QWORD *)(v8 + 16);
    v9 = *(_QWORD *)(v8 + 24);
    if (v10 >= v9 >> 1)
      v8 = sub_1007CA148(v9 > 1, v10 + 1, 1, v8);
    v0[39] = v8;
    v11 = v0[28];
    v12 = v0[29];
    v13 = v0[25];
    *(_QWORD *)(v8 + 16) = v10 + 1;
    sub_100005CF0(v11, v8+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v10, &qword_1011091A0);
    sub_100004048(v12, &qword_1011091A0);
    v14 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    v0[40] = v14;
    *v14 = v0;
    v14[1] = sub_10062D228;
    return dispatch thunk of AsyncIteratorProtocol.next()(v0[23], v0[30], v0[36]);
  }
}

uint64_t sub_10062D228()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 320));
  if (v0)
  {
    v4 = v2[31];
    v3 = v2[32];
    v5 = v2[30];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = (uint64_t (*)())SharingCircleWildAdvertisementKey.init(key:);
  }
  else
  {
    v2[38] = v2[39];
    v6 = sub_10062D084;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10062D2B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 200);
    v4 = *(_QWORD *)(v0 + 160);
    v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v6 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    v7 = _swiftEmptyArrayStorage;
    do
    {
      v9 = *(_QWORD *)(v0 + 208);
      v8 = *(_QWORD *)(v0 + 216);
      v10 = *(_QWORD *)(v0 + 152);
      sub_10000F9B8(v5, v8, &qword_1011091A0);
      sub_100005CF0(v8, v9, &qword_1011091A0);
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v9, 1, v10);
      v12 = *(_QWORD *)(v0 + 208);
      if (v11 == 1)
      {
        sub_100004048(v12, &qword_1011091A0);
      }
      else
      {
        v14 = *(_QWORD *)(v0 + 168);
        v13 = *(_QWORD *)(v0 + 176);
        sub_1000126EC(v12, v13, type metadata accessor for BeaconKeyManager.IndexInformation);
        sub_1000126EC(v13, v14, type metadata accessor for BeaconKeyManager.IndexInformation);
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
          v7 = (_QWORD *)sub_1007CA134(0, v7[2] + 1, 1, (unint64_t)v7);
        v16 = v7[2];
        v15 = v7[3];
        if (v16 >= v15 >> 1)
          v7 = (_QWORD *)sub_1007CA134(v15 > 1, v16 + 1, 1, (unint64_t)v7);
        v17 = *(_QWORD *)(v0 + 168);
        v7[2] = v16 + 1;
        sub_1000126EC(v17, (uint64_t)v7+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v16, type metadata accessor for BeaconKeyManager.IndexInformation);
      }
      v5 += v6;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 304), 2);
  }
  else
  {
    swift_bridgeObjectRelease();
    v7 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v0 + 256);
  v20 = *(_QWORD *)(v0 + 224);
  v19 = *(_QWORD *)(v0 + 232);
  v22 = *(_QWORD *)(v0 + 208);
  v21 = *(_QWORD *)(v0 + 216);
  v24 = *(_QWORD *)(v0 + 176);
  v23 = *(_QWORD *)(v0 + 184);
  v25 = *(_QWORD *)(v0 + 168);
  v26 = *(_QWORD *)(v0 + 144);
  v28 = *(_QWORD *)(v0 + 136);
  **(_QWORD **)(v0 + 96) = v7;
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10062D4EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6[24] = a5;
  v6[25] = a6;
  v6[22] = a1;
  v6[23] = a4;
  v7 = type metadata accessor for UUID(0);
  v6[26] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[27] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[28] = swift_task_alloc(v9);
  v6[29] = swift_task_alloc(v9);
  return swift_task_switch(sub_10062D58C, 0, 0);
}

uint64_t sub_10062D58C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 192);
  if ((v1 & 0x2000000000000000) != 0)
  {
    *(_DWORD *)(v0 + 240) = 0;
    __asm { BR              X10 }
  }
  v2 = *(_QWORD *)(v0 + 184);
  sub_10001BBBC(v2, *(_QWORD *)(v0 + 192));
  v3 = sub_100D10C00(v2, v1);
  if ((v3 & 0x100000000) != 0)
  {
    v12 = *(_QWORD *)(v0 + 184);
    v13 = *(_QWORD *)(v0 + 192);
    v14 = *(_QWORD *)(v0 + 176);
    v15 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    sub_10012C494(v12, v13);
  }
  else
  {
    v4 = v3;
    v5 = *(_QWORD *)(v0 + 232);
    v6 = *(_QWORD *)(v0 + 208);
    v7 = *(_QWORD *)(v0 + 216);
    v8 = *(_QWORD *)(v0 + 200);
    v9 = OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_beaconIdentifier;
    v10 = type metadata accessor for BeaconIdentifier(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v8 + *(int *)(v10 + 20) + v9, v6);
    if (*(_BYTE *)(v8 + OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_sequence))
    {
      if (*(_BYTE *)(v8 + OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_sequence) == 1)
      {
        *(_QWORD *)(v0 + 40) = &type metadata for SecondaryIndex;
        v11 = sub_100336B24();
      }
      else
      {
        *(_QWORD *)(v0 + 40) = &type metadata for SecureLocationsIndex;
        v11 = sub_1003D155C();
      }
    }
    else
    {
      *(_QWORD *)(v0 + 40) = &type metadata for PrimaryIndex;
      v11 = sub_100336BAC();
    }
    *(_QWORD *)(v0 + 48) = v11;
    *(_QWORD *)(v0 + 16) = v4;
    v16 = *(_QWORD *)(v0 + 232);
    v17 = *(_QWORD *)(v0 + 208);
    v18 = *(_QWORD *)(v0 + 216);
    v20 = *(_QWORD *)(v0 + 184);
    v19 = *(_QWORD *)(v0 + 192);
    v21 = *(_QWORD *)(v0 + 176);
    sub_10000F9FC((__int128 *)(v0 + 16), v0 + 136);
    sub_10012C494(v20, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v21, v16, v17);
    v22 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
    sub_10000F9FC((__int128 *)(v0 + 136), v21 + *(int *)(v22 + 20));
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 0, 1, v22);
  }
  v23 = *(_QWORD *)(v0 + 224);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10062DAB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v39 = a6;
  v43 = a4;
  v44 = a5;
  v42 = a3;
  v36 = a2;
  v37 = a1;
  v6 = type metadata accessor for BeaconIdentifier(0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v7;
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v9;
  v10 = sub_10001A9A8(&qword_101108DF0);
  v11 = *(_QWORD *)(v10 - 8);
  v33 = v10;
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v34 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v17);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = v19;
  v20 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v36, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v37, v10);
  sub_10005972C(v39, (uint64_t)v9, type metadata accessor for BeaconIdentifier);
  v21 = *(unsigned __int8 *)(v14 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = (v15 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(unsigned __int8 *)(v11 + 80);
  v25 = (v24 + v23 + 16) & ~v24;
  v26 = (v12 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(unsigned __int8 *)(v40 + 80);
  v28 = (v27 + v26 + 8) & ~v27;
  v29 = swift_allocObject(&unk_101083C50, v28 + v41, v21 | v27 | v24 | 7);
  *(_QWORD *)(v29 + 16) = 0;
  *(_QWORD *)(v29 + 24) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v29 + v22, v16, v13);
  v30 = (_QWORD *)(v29 + v23);
  v31 = v43;
  *v30 = v42;
  v30[1] = v31;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v29 + v25, v34, v33);
  *(_QWORD *)(v29 + v26) = v44;
  sub_1000126EC((uint64_t)v35, v29 + v28, type metadata accessor for BeaconIdentifier);
  swift_retain();
  swift_retain();
  sub_100691AC0((uint64_t)v38, (uint64_t)&unk_101101FA0, v29);
  return swift_release();
}

uint64_t sub_10062DD40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  v8[6] = a8;
  v8[7] = v17;
  v8[4] = a6;
  v8[5] = a7;
  v8[2] = a4;
  v8[3] = a5;
  v9 = sub_10001A9A8(&qword_101108DF0);
  v8[8] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[9] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v8[10] = v11;
  v8[11] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v8[12] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[13] = v13;
  v8[14] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for BeaconKeyServiceBuilder.WorkItem(0);
  v8[15] = v14;
  v15 = (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[16] = swift_task_alloc(v15);
  v8[17] = swift_task_alloc(v15);
  return swift_task_switch(sub_10062DE10, 0, 0);
}

uint64_t sub_10062DE10()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = v0[16];
  v2 = v0[14];
  v21 = v0[15];
  v22 = v0[17];
  v4 = v0[12];
  v3 = v0[13];
  v5 = v0[11];
  v6 = v0[8];
  v7 = v0[9];
  v8 = v0[5];
  v20 = v0[4];
  v18 = v0[10];
  v19 = v0[3];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v2, v0[2], v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v8, v6);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_101083C78, v10 + v18, v9 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v11 + v10, v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v4);
  v12 = swift_allocObject(&unk_101083CA0, 32, 7);
  *(_QWORD *)(v12 + 16) = v19;
  *(_QWORD *)(v12 + 24) = v20;
  v13 = (_QWORD *)(v1 + *(int *)(v21 + 20));
  *v13 = &unk_101101FC0;
  v13[1] = v12;
  v14 = (_QWORD *)(v1 + *(int *)(v21 + 24));
  *v14 = &unk_101101FB0;
  v14[1] = v11;
  sub_1000126EC(v1, v22, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
  v15 = dword_101101FCC;
  swift_retain();
  v16 = (_QWORD *)swift_task_alloc(v15);
  v0[18] = v16;
  *v16 = v0;
  v16[1] = sub_10062DF80;
  return sub_10062E098(v0[7], v0[17]);
}

uint64_t sub_10062DF80()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  return swift_task_switch(sub_10062DFD4, 0, 0);
}

uint64_t sub_10062DFD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  sub_1000126B0(v2, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10062E040(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10062E058, 0, 0);
}

uint64_t sub_10062E058()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_10001A9A8(&qword_101108DF0);
  CheckedContinuation.resume(returning:)(v1, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10062E098(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for BeaconIdentifier(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[5] = swift_task_alloc(v4);
  v3[6] = swift_task_alloc(v4);
  return swift_task_switch(sub_10062E104, v2, 0);
}

uint64_t sub_10062E104()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[4];
  sub_10005972C(v0[2], v0[6], type metadata accessor for BeaconIdentifier);
  v2 = *(_QWORD *)(v1 + 152);
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain(v2);
  if (v3 && (v4 = sub_1005191EC(v0[6]), (v5 & 1) != 0))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v4);
    swift_retain();
  }
  else
  {
    v7 = v0[5];
    sub_10005972C(v0[2], v7, type metadata accessor for BeaconIdentifier);
    v8 = type metadata accessor for BeaconKeyServiceBuilder.QueueWorker(0);
    v6 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    swift_defaultActor_initialize(v6);
    *(_QWORD *)(v6
              + OBJC_IVAR____TtCC12searchpartyd23BeaconKeyServiceBuilderP33_8A37076506AEEBCEAD161117E4752B2811QueueWorker_queue) = _swiftEmptyArrayStorage;
    sub_1000126EC(v7, v6+ OBJC_IVAR____TtCC12searchpartyd23BeaconKeyServiceBuilderP33_8A37076506AEEBCEAD161117E4752B2811QueueWorker_identifier, type metadata accessor for BeaconIdentifier);
  }
  v0[7] = v6;
  v9 = v0[6];
  swift_bridgeObjectRelease();
  sub_1000126B0(v9, type metadata accessor for BeaconIdentifier);
  return swift_task_switch(sub_10062E210, v6, 0);
}

uint64_t sub_10062E210()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_10062E32C(*(_QWORD *)(v0 + 24));
  return swift_task_switch(sub_10062E250, v1, 0);
}

uint64_t sub_10062E250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10062E294(uint64_t a1)
{
  return sub_10062E2A0(a1, qword_101101BA8);
}

uint64_t sub_10062E2A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = type metadata accessor for Logger(0);
  sub_1000234D8(v3, a2);
  v4 = sub_10001A9E8(v3, (uint64_t)a2);
  if (qword_1010E9DE8 != -1)
    swift_once(&qword_1010E9DE8, sub_100634FF4);
  v5 = sub_10001A9E8(v3, (uint64_t)qword_1011B7388);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v4, v5, v3);
}

uint64_t sub_10062E32C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _BYTE v16[24];
  _BYTE v17[24];

  v2 = v1;
  v4 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v4);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10001A9A8(&qword_101102130);
  __chkstk_darwin(v7);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = v2
      + OBJC_IVAR____TtCC12searchpartyd23BeaconKeyServiceBuilderP33_8A37076506AEEBCEAD161117E4752B2811QueueWorker_queue;
  swift_beginAccess(v2 + OBJC_IVAR____TtCC12searchpartyd23BeaconKeyServiceBuilderP33_8A37076506AEEBCEAD161117E4752B2811QueueWorker_queue, v17, 0, 0);
  v11 = *(_QWORD *)(*(_QWORD *)v10 + 16);
  swift_beginAccess(v10, v16, 33, 0);
  sub_10005972C(a1, (uint64_t)v9, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
  sub_100775E74(0, 0, (uint64_t)v9);
  result = swift_endAccess(v16);
  if (!v11)
  {
    v13 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 1, 1, v13);
    v14 = sub_100006204(&qword_101102140, type metadata accessor for BeaconKeyServiceBuilder.QueueWorker, (uint64_t)&unk_100E46640);
    v15 = (_QWORD *)swift_allocObject(&unk_101083DE0, 40, 7);
    v15[2] = v2;
    v15[3] = v14;
    v15[4] = v2;
    swift_retain_n(v2, 2);
    sub_100626BE0((uint64_t)v6, (uint64_t)&unk_101102148, (uint64_t)v15, (uint64_t)(&type metadata for () + 1));
    return swift_release();
  }
  return result;
}

uint64_t sub_10062E4D8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_101101D74);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004C28;
  return sub_10062E520();
}

uint64_t sub_10062E520()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[9] = v0;
  v2 = sub_10001A9A8(&qword_101102128);
  v1[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for BeaconKeyServiceBuilder.WorkItem(0);
  v1[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[12] = v4;
  v1[13] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10062E5A4, v0, 0);
}

uint64_t sub_10062E5A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int **v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint8_t *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  _DWORD *v30;
  uint8_t *buf;
  uint64_t (*v32)(void);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v2 = v0 + 9;
  v1 = v0[9];
  v3 = OBJC_IVAR____TtCC12searchpartyd23BeaconKeyServiceBuilderP33_8A37076506AEEBCEAD161117E4752B2811QueueWorker_queue;
  v0[14] = OBJC_IVAR____TtCC12searchpartyd23BeaconKeyServiceBuilderP33_8A37076506AEEBCEAD161117E4752B2811QueueWorker_queue;
  v4 = (uint64_t *)(v1 + v3);
  swift_beginAccess(v1 + v3, v0 + 2, 0, 0);
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 16);
  if (v6)
  {
    v7 = v0[13];
    v8 = v0[11];
    sub_10005972C(v5+ ((*(unsigned __int8 *)(v0[12] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[12] + 80))+ *(_QWORD *)(v0[12] + 72) * (v6 - 1), v7, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
    v9 = (int **)(v7 + *(int *)(v8 + 20));
    v10 = *v9;
    v0[15] = v9[1];
    v11 = v10[1];
    v32 = (uint64_t (*)(void))((char *)v10 + *v10);
    swift_retain();
    v12 = (_QWORD *)swift_task_alloc(v11);
    v0[16] = v12;
    *v12 = v0;
    v12[1] = sub_10062E8C0;
    v13 = v32;
  }
  else
  {
    if (qword_1010E9DE0 != -1)
      swift_once(&qword_1010E9DE0, sub_10062E294);
    v14 = *v2;
    v15 = type metadata accessor for Logger(0);
    sub_10001A9E8(v15, (uint64_t)qword_101101BA8);
    v16 = swift_retain_n(v14, 2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    v19 = os_log_type_enabled(v17, v18);
    v20 = *v2;
    if (v19)
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v34 = v33;
      *(_DWORD *)v21 = 136315138;
      v22 = v21 + 12;
      v30 = v21 + 4;
      buf = v21;
      v23 = type metadata accessor for UUID(0);
      v24 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v35 = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
      v36 = v25;
      v26._countAndFlagsBits = 47;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      type metadata accessor for BeaconIdentifier(0);
      v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v0[8] = sub_100016940(v35, v36, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v30, v22);
      swift_release_n(v20, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "process queue for %s -- no more WorkItems", buf, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(buf, -1, -1);

    }
    else
    {

      swift_release_n(v20, 2);
    }
    v28 = v0[10];
    swift_task_dealloc(v0[13]);
    swift_task_dealloc(v28);
    v13 = (uint64_t (*)(void))v0[1];
  }
  return v13();
}

uint64_t sub_10062E8C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 72);
    swift_release();
    v5 = sub_10062EBB0;
    v6 = v4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 72);
    v5 = sub_10062E934;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_10062E934()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int **v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(void);

  v1 = v0[14];
  v2 = v0[13];
  v3 = v0[10];
  v4 = v0[11];
  v5 = v0[9];
  swift_release();
  swift_beginAccess(v5 + v1, v0 + 5, 33, 0);
  sub_100626670(v3);
  sub_100004048(v3, &qword_101102128);
  swift_endAccess(v0 + 5);
  v6 = (int **)(v2 + *(int *)(v4 + 24));
  v7 = *v6;
  v0[18] = v6[1];
  v8 = v7[1];
  v11 = (uint64_t (*)(void))((char *)v7 + *v7);
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc(v8);
  v0[19] = v9;
  *v9 = v0;
  v9[1] = sub_10062EA04;
  return v11();
}

uint64_t sub_10062EA04()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  swift_release();
  return swift_task_switch(sub_10062EA64, v1, 0);
}

uint64_t sub_10062EA64()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 72) + *(_QWORD *)(v0 + 112)) + 16))
  {
    v1 = (_QWORD *)swift_task_alloc(dword_101101D74);
    *(_QWORD *)(v0 + 160) = v1;
    *v1 = v0;
    v1[1] = sub_10062EAFC;
    return sub_10062E520();
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 104), type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
    v3 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10062EAFC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10062EC0C;
  else
    v4 = sub_10062EB60;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 72), 0);
}

uint64_t sub_10062EB60()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000126B0(*(_QWORD *)(v0 + 104), type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10062EBB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  sub_1000126B0(v1, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10062EC0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  sub_1000126B0(v1, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10062EC68()
{
  uint64_t v0;

  sub_1000126B0(v0+ OBJC_IVAR____TtCC12searchpartyd23BeaconKeyServiceBuilderP33_8A37076506AEEBCEAD161117E4752B2811QueueWorker_identifier, type metadata accessor for BeaconIdentifier);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_10062ECAC()
{
  return type metadata accessor for BeaconKeyServiceBuilder.QueueWorker(0);
}

uint64_t type metadata accessor for BeaconKeyServiceBuilder.QueueWorker(uint64_t a1)
{
  return sub_10001B630(a1, (uint64_t *)&unk_101101D60, (uint64_t)&nominal type descriptor for BeaconKeyServiceBuilder.QueueWorker);
}

uint64_t sub_10062ECC8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for BeaconIdentifier(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t *sub_10062ED4C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)v4 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)v4 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_retain(v12);
  }
  swift_retain(v15);
  return v4;
}

uint64_t sub_10062EDF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_10062EE4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_retain(v11);
  swift_retain(v14);
  return a1;
}

uint64_t sub_10062EECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  v11 = v8[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = v14[1];
  v16 = v13[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_retain(v15);
  swift_release(v16);
  return a1;
}

uint64_t sub_10062EF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_10062EFC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  swift_release(v8);
  v9 = *(int *)(a3 + 24);
  v10 = *(_QWORD *)(a1 + v9 + 8);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  swift_release(v10);
  return a1;
}

uint64_t sub_10062F048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10062F054);
}

uint64_t sub_10062F054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10062F0D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10062F0DC);
}

uint64_t sub_10062F0DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for BeaconKeyServiceBuilder.WorkItem(uint64_t a1)
{
  return sub_10001B630(a1, qword_101101E88, (uint64_t)&nominal type descriptor for BeaconKeyServiceBuilder.WorkItem);
}

uint64_t sub_10062F168(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for () + 64;
    v4[2] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_10062F1E0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = type metadata accessor for BeaconIdentifier(0);
    v8((_QWORD *)((char *)a1 + *(int *)(v9 + 20)), (_QWORD *)((char *)a2 + *(int *)(v9 + 20)), v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_10062F290(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v5)(uint64_t, uint64_t);

  v2 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v5(a1, v2);
  v3 = a1 + *(int *)(type metadata accessor for BeaconIdentifier(0) + 20);
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(v3, v2);
}

uint64_t sub_10062F2F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = type metadata accessor for BeaconIdentifier(0);
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10062F378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = type metadata accessor for BeaconIdentifier(0);
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10062F3FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = type metadata accessor for BeaconIdentifier(0);
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10062F480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = type metadata accessor for BeaconIdentifier(0);
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10062F504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10062F510);
}

uint64_t sub_10062F510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for BeaconIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 3)
    return v9 - 2;
  else
    return 0;
}

uint64_t sub_10062F588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10062F594);
}

uint64_t sub_10062F594(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for BeaconIdentifier(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  return result;
}

uint64_t type metadata accessor for BeaconKeyServiceBuilder.FileKey(uint64_t a1)
{
  return sub_10001B630(a1, qword_101101F20, (uint64_t)&nominal type descriptor for BeaconKeyServiceBuilder.FileKey);
}

uint64_t sub_10062F620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10064C3AC(a1, a2, a3, type metadata accessor for BeaconIdentifier, (uint64_t)&unk_100E465C0);
}

uint64_t sub_10062F634(int *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))((char *)a1 + *a1);
  v2 = (_QWORD *)swift_task_alloc(a1[1]);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100030654;
  return v4();
}

uint64_t sub_10062F68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v11;

  *(_QWORD *)(v6 + 16) = a1;
  v11 = (_QWORD *)swift_task_alloc(dword_10110204C);
  *(_QWORD *)(v6 + 24) = v11;
  *v11 = v6;
  v11[1] = sub_10062F714;
  return sub_10062F7AC(a3, a4, 0, a5, a6, 1);
}

uint64_t sub_10062F714(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
    return (*(uint64_t (**)(void))(v6 + 8))();
  *(_BYTE *)(v4 + 32) = a1 & 1;
  return swift_task_switch(sub_10062F794, 0, 0);
}

uint64_t sub_10062F794()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_BYTE *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10062F7AC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  *(_QWORD *)(v7 + 496) = a6;
  *(_QWORD *)(v7 + 504) = v6;
  *(_QWORD *)(v7 + 480) = a4;
  *(_QWORD *)(v7 + 488) = a5;
  *(_BYTE *)(v7 + 980) = a3;
  *(_QWORD *)(v7 + 464) = a1;
  *(_QWORD *)(v7 + 472) = a2;
  v8 = type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo(0);
  *(_QWORD *)(v7 + 512) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 520) = v9;
  *(_QWORD *)(v7 + 528) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for KeyGenerationBeaconInfo(0);
  *(_QWORD *)(v7 + 536) = v10;
  *(_QWORD *)(v7 + 544) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_101102050);
  *(_QWORD *)(v7 + 552) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DirectorySequence(0);
  *(_QWORD *)(v7 + 560) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v7 + 568) = v13;
  *(_QWORD *)(v7 + 576) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 584) = swift_task_alloc(v14);
  *(_QWORD *)(v7 + 592) = swift_task_alloc(v14);
  *(_QWORD *)(v7 + 600) = swift_task_alloc(v14);
  v15 = type metadata accessor for UUID(0);
  *(_QWORD *)(v7 + 608) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v7 + 616) = v16;
  *(_QWORD *)(v7 + 624) = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URL(0);
  *(_QWORD *)(v7 + 632) = v17;
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v7 + 640) = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 648) = swift_task_alloc(v19);
  *(_QWORD *)(v7 + 656) = swift_task_alloc(v19);
  *(_QWORD *)(v7 + 664) = swift_task_alloc(v19);
  return swift_task_switch(sub_10062F934, 0, 0);
}

unint64_t sub_10062F934()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(_BOOL8);
  _BOOL8 v43;
  unint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  Swift::String v86;
  uint64_t v87;
  unint64_t v88;
  Swift::String v89;
  uint64_t v90;
  Swift::String v91;
  Swift::String v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  void (*v104)(unint64_t *, uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  NSObject *v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  os_log_t log;
  os_log_t loga;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;

  v1 = (uint64_t *)(v0[59] + *(int *)(v0[67] + 24));
  v2 = *v1;
  v0[84] = *v1;
  v3 = v1[1];
  v0[85] = v3;
  v4 = v1[2];
  v0[86] = v4;
  v5 = v1[3];
  v0[87] = v5;
  v6 = v1[4];
  v0[88] = v6;
  v7 = v1[5];
  v0[89] = v7;
  if (v3 >> 60 == 15)
  {
    v8 = sub_10064B00C();
    v9 = swift_allocError(&type metadata for BeaconKeyServiceBuilder.Error, v8, 0, 0);
    *v10 = 1;
    swift_willThrow(v9);
LABEL_4:
    v33 = v0[82];
    v34 = v0[81];
    v35 = v0[78];
    v36 = v0[75];
    v37 = v0[74];
    v38 = v0[73];
    v39 = v0[72];
    v40 = v0[69];
    v41 = v0[68];
    v155 = v0[66];
    swift_task_dealloc(v0[83]);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v155);
    v42 = (uint64_t (*)(_BOOL8))v0[1];
    v43 = 0;
    return v42(v43);
  }
  v11 = v0[78];
  v12 = v0[77];
  v154 = v0;
  v140 = v0[76];
  log = (os_log_t)v0[75];
  v13 = v0[72];
  v145 = v0[71];
  v151 = v0[70];
  v141 = v0[58];
  v14 = v2;
  v15 = objc_allocWithZone((Class)NSProcessInfo);
  v137 = v14;
  v138 = v3;
  sub_10001BBBC(v14, v3);
  v148 = v4;
  sub_10001BBBC(v4, v5);
  sub_10001BD08(v6, v7);
  v16 = objc_msgSend(v15, "init");
  v17 = v5;
  v18 = objc_msgSend(v16, "processIdentifier");

  _StringGuts.grow(_:)(22);
  v19 = swift_bridgeObjectRelease();
  v158 = 46;
  v159 = 0xE100000000000000;
  v20 = UUID.init()(v19);
  v21 = v7;
  v139 = v6;
  v22 = UUID.uuidString.getter(v20);
  v24 = v23;
  v0 = v154;
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v140);
  v25._countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._object = (void *)0x8000000100EDD7A0;
  v26._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v26);
  *((_DWORD *)v154 + 244) = v18;
  v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  URL.appendingPathComponent(_:)(v158, v159);
  swift_bridgeObjectRelease();
  v28 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v29 = NSFileManager.flatSequence(at:includingPropertiesForKeys:)(v141, 0);
  DirectorySequence.next()(v29);

  (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v13, v151);
  v30 = sub_100648DE0((uint64_t)log);
  v152 = v17;
  v146 = v21;
  v45 = v154[80];
  v46 = v154[79];
  v47 = v154[75];
  v48 = v154[74];
  if ((v32 & 1) != 0)
    v49 = 0;
  else
    v49 = v31;
  if ((v32 & 1) != 0)
    v50 = 0;
  else
    v50 = v30;
  *((_OWORD *)v154 + 19) = *((_OWORD *)v154 + 30);
  sub_10000F9B8(v47, v48, &qword_1010FBA40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v48, 1, v46) == 1)
  {
    sub_100004048(v154[74], &qword_1010FBA40);
    v51 = 1;
  }
  else
  {
    v52 = v154[82];
    v53 = v154[79];
    v54 = v154[69];
    v55 = v154[64];
    v12 = *(_QWORD *)(v154[80] + 32);
    ((void (*)(uint64_t, _QWORD, uint64_t))v12)(v52, v154[74], v53);
    ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v54, v52, v53);
    v51 = 0;
    v56 = (unint64_t *)(v54 + *(int *)(v55 + 20));
    *v56 = v50;
    v56[1] = v49;
  }
  v57 = v152;
  v59 = v154[60];
  v58 = v154[61];
  v60 = *((unsigned __int8 *)v154 + 980);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v154[65] + 56))(v154[69], v51, 1, v154[64]);
  result = sub_100648F68(v50, v49, v59, v58);
  v62 = result;
  v63 = v61;
  if (v60)
  {
    if (v60 != 1)
    {
      v69 = v154[83];
      v70 = v154[80];
      v71 = v154[79];
      v72 = v154[75];
      v73 = v154[69];
      v74 = sub_10064B308();
      v75 = swift_allocError(&type metadata for BeaconKeyService.Error, v74, 0, 0);
      *v76 = 0;
      swift_willThrow(v75);
      sub_10064B29C(v137, v138, v148, v152, v139, v146);
      sub_100004048(v73, &qword_101102050);
      sub_100004048(v72, &qword_1010FBA40);
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v71);
      goto LABEL_4;
    }
    v64 = v146;
    if (v146 >> 60 == 15)
    {
      __break(1u);
      return result;
    }
    v66 = v154[60];
    v65 = v154[61];
    sub_10001BD08(v139, v146);
    v154[38] = sub_10064917C(v66, v65, v62, v63);
    v154[39] = v67;
    v59 = v139;
    v57 = v146;
    goto LABEL_31;
  }
  v68 = v61 - result;
  if (v61 < result)
  {
    v64 = v146;
    if ((uint64_t)(result - v61) >= 0)
    {
      v68 = v61 - result;
      goto LABEL_24;
    }
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v64 = v146;
  if ((uint64_t)(v61 - result) < 0)
    goto LABEL_50;
LABEL_24:
  v77 = v68 + 1;
  if (__OFADD__(v68, 1))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v12 = v61;
  v59 = v148;
  sub_10001BBBC(v148, v152);
  if (v77 >= 1345)
  {
    if (qword_1010E9DD8 == -1)
    {
LABEL_27:
      v78 = v154[68];
      v79 = v154[59];
      v80 = type metadata accessor for Logger(0);
      sub_10001A9E8(v80, (uint64_t)qword_101101B90);
      v81 = sub_10005972C(v79, v78, type metadata accessor for KeyGenerationBeaconInfo);
      v82 = Logger.logObject.getter(v81);
      v83 = static os_log_type_t.default.getter(v82);
      if (os_log_type_enabled(v82, v83))
      {
        v84 = v154[76];
        v134 = v154[68];
        v136 = v154[61];
        v135 = v154[60];
        v85 = swift_slowAlloc(52, -1);
        v142 = swift_slowAlloc(128, -1);
        v157 = v142;
        *(_DWORD *)v85 = 136447235;
        v154[48] = v62;
        v154[49] = v12;
        v154[46] = 0;
        v154[47] = 0xE000000000000000;
        v0 = v154;
        _print_unlocked<A, B>(_:_:)(v154 + 48, v154 + 46, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v86._countAndFlagsBits = 3026478;
        v86._object = (void *)0xE300000000000000;
        String.append(_:)(v86);
        _print_unlocked<A, B>(_:_:)(v154 + 49, v154 + 46, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v154[51] = sub_100016940(v154[46], v154[47], &v157);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v154 + 51, v154 + 52, v85 + 4, v85 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v85 + 12) = 2160;
        v154[52] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v154 + 52, v154 + 53, v85 + 14, v85 + 22);
        *(_WORD *)(v85 + 22) = 2081;
        v87 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v158 = dispatch thunk of CustomStringConvertible.description.getter(v84, v87);
        v159 = v88;
        v89._countAndFlagsBits = 47;
        v89._object = (void *)0xE100000000000000;
        String.append(_:)(v89);
        type metadata accessor for BeaconIdentifier(0);
        v90 = v87;
        v64 = v146;
        v91._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v84, v90);
        String.append(_:)(v91);
        swift_bridgeObjectRelease();
        v154[53] = sub_100016940(v158, v159, &v157);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v154 + 53, v154 + 54, v85 + 24, v85 + 32);
        swift_bridgeObjectRelease();
        sub_1000126B0(v134, type metadata accessor for KeyGenerationBeaconInfo);
        *(_WORD *)(v85 + 32) = 2082;
        v154[54] = v135;
        v154[55] = v136;
        v154[40] = 0;
        v154[41] = 0xE000000000000000;
        _print_unlocked<A, B>(_:_:)(v154 + 54, v154 + 40, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v92._countAndFlagsBits = 3026478;
        v92._object = (void *)0xE300000000000000;
        String.append(_:)(v92);
        _print_unlocked<A, B>(_:_:)(v154 + 55, v154 + 40, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v154[57] = sub_100016940(v154[40], v154[41], &v157);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v154 + 57, v154 + 58, v85 + 34, v85 + 42);
        swift_bridgeObjectRelease();
        *(_WORD *)(v85 + 42) = 2082;
        v154[56] = sub_100016940(0x7972616D6972702ELL, 0xE800000000000000, &v157);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v154 + 56, v154 + 57, v85 + 44, v85 + 52);
        _os_log_impl((void *)&_mh_execute_header, v82, v83, "Large hole %{public}s would be created for %{private,mask.hash}s: %{public}s - %{public}s", (uint8_t *)v85, 0x34u);
        swift_arrayDestroy(v142, 4, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v142, -1, -1);
        swift_slowDealloc(v85, -1, -1);
      }
      else
      {
        sub_1000126B0(v154[68], type metadata accessor for KeyGenerationBeaconInfo);
      }

      v49 = 0;
      v50 = 0;
      v59 = v148;
      v57 = v152;
      goto LABEL_31;
    }
LABEL_51:
    swift_once(&qword_1010E9DD8, sub_1006270D8);
    goto LABEL_27;
  }
LABEL_31:
  v0[91] = v57;
  v0[90] = v59;
  swift_beginAccess(v0 + 38, v0 + 33, 0, 0);
  v93 = sub_100649654(v50, v49, v0[38], v0[39]);
  v0[92] = v93;
  v94 = v93[2];
  v0[93] = v94;
  if (!v94)
  {
    swift_bridgeObjectRelease();
    if (qword_1010E9DD8 == -1)
    {
LABEL_35:
      v105 = type metadata accessor for Logger(0);
      v106 = sub_10001A9E8(v105, (uint64_t)qword_101101B90);
      v107 = Logger.logObject.getter(v106);
      v108 = static os_log_type_t.info.getter(v107);
      if (os_log_type_enabled(v107, v108))
      {
        v109 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v109 = 0;
        _os_log_impl((void *)&_mh_execute_header, v107, v108, "No work to be done", v109, 2u);
        swift_slowDealloc(v109, -1, -1);

        sub_10064B29C(v137, v138, v148, v152, v139, v64);
        sub_10001BC14(v59, v57);
      }
      else
      {
        sub_10001BC14(v59, v57);

        sub_10064B29C(v137, v138, v148, v152, v139, v64);
      }
      v113 = v0[83];
      v114 = v0[82];
      v115 = v0[81];
      v116 = v0[80];
      v117 = v0[79];
      v118 = v0[78];
      v119 = v0[75];
      v120 = v0[74];
      v147 = v0[73];
      v149 = v0[72];
      v121 = v0[69];
      v153 = v0[68];
      v156 = v0[66];
      sub_100004048(v121, &qword_101102050);
      sub_100004048(v119, &qword_1010FBA40);
      (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v113, v117);
      swift_task_dealloc(v113);
      swift_task_dealloc(v114);
      swift_task_dealloc(v115);
      swift_task_dealloc(v118);
      swift_task_dealloc(v119);
      swift_task_dealloc(v120);
      swift_task_dealloc(v147);
      swift_task_dealloc(v149);
      swift_task_dealloc(v121);
      swift_task_dealloc(v153);
      swift_task_dealloc(v156);
      v42 = (uint64_t (*)(_BOOL8))v0[1];
      v43 = v0[93] != 0;
      return v42(v43);
    }
LABEL_48:
    swift_once(&qword_1010E9DD8, sub_1006270D8);
    goto LABEL_35;
  }
  v95 = v0[80];
  v0[94] = 0;
  if (!v93[2])
  {
    __break(1u);
    goto LABEL_47;
  }
  v96 = v0[83];
  v97 = (unint64_t *)v0[81];
  v98 = v0[79];
  v99 = v0[75];
  v100 = v0[73];
  v101 = v0[62];
  v103 = v93[4];
  v102 = v93[5];
  v104 = *(void (**)(unint64_t *, uint64_t, uint64_t))(v95 + 16);
  v0[95] = v104;
  v104(v97, v96, v98);
  sub_10000F9B8(v99, v100, &qword_1010FBA40);
  v0[96] = sub_100633610(v97, v103, v102, v100, v101, &qword_101101FD8, &qword_101101FE0, &qword_101102068, (uint64_t (*)(char *, unint64_t, uint64_t, char *, uint64_t))sub_100635074);
  if (v103 < 2)
  {
    v122 = 0;
    v123 = 0;
    v124 = 0;
    v125 = 0xF000000000000000;
  }
  else
  {
    v110 = sub_10075887C(v154[59], v103, *(_QWORD *)(v154[63] + 144));
    v122 = v110;
    v123 = v111;
    v125 = v112;
    if (v112 >> 60 == 15)
      v124 = 0;
    else
      v124 = v110;
  }
  v154[100] = v124;
  v154[99] = v125;
  v154[98] = v123;
  v154[97] = v122;
  v126 = v154[91];
  v127 = v154[90];
  v128 = v154[85];
  v129 = v154[84];
  sub_10001BBBC(v129, v128);
  PrivateKey.publicKey.getter(v129, v128);
  v150 = v130;
  loga = v131;
  sub_10001BBBC(v127, v126);
  sub_1002B1C18(v122, v123, v125);
  sub_100736DBC(v129, v128, v150, (unint64_t)loga, v127, v126, v122, v123, v154 + 2, v125, v103);
  v154[101] = 0;
  v132 = *((_OWORD *)v154 + 1);
  *(_OWORD *)(v154 + 13) = *((_OWORD *)v154 + 2);
  v133 = *((_OWORD *)v154 + 4);
  *(_OWORD *)(v154 + 15) = *((_OWORD *)v154 + 3);
  *(_OWORD *)(v154 + 17) = v133;
  v154[19] = v154[10];
  *(_OWORD *)(v154 + 11) = v132;
  sub_1002B1C18(v122, v123, v125);
  sub_1002B1DA4(v154 + 2, (void (*)(_QWORD, _QWORD))sub_10001BD08, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
  return swift_task_switch(sub_1006309CC, 0, 0);
}

uint64_t sub_1006309CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v22;

  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 808);
    v2 = *(_QWORD *)(v0 + 800);
    *(_QWORD *)(v0 + 912) = *(_QWORD *)(v0 + 792);
    *(_OWORD *)(v0 + 896) = *(_OWORD *)(v0 + 776);
    *(_QWORD *)(v0 + 888) = v2;
    *(_QWORD *)(v0 + 880) = v1;
    v3 = sub_100630D0C;
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 144);
    v22 = *(_QWORD *)(v0 + 808);
    v5 = *(_QWORD *)(v0 + 800);
    v6 = *(_QWORD *)(v0 + 776);
    *(_OWORD *)(v0 + 832) = *(_OWORD *)(v0 + 784);
    *(_QWORD *)(v0 + 824) = v6;
    *(_QWORD *)(v0 + 816) = v5;
    v7 = *(_QWORD *)(v0 + 88);
    v8 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 104);
    v10 = *(_QWORD *)(v0 + 112);
    v11 = *(_QWORD *)(v0 + 120);
    v12 = *(_QWORD *)(v0 + 128);
    *(_QWORD *)(v0 + 848) = *(_QWORD *)(v0 + 136);
    *(_QWORD *)(v0 + 856) = v4;
    v13 = *(_QWORD *)(v0 + 152);
    *(_QWORD *)(v0 + 864) = v13;
    sub_10001BBBC(v4, v13);
    sub_10001BBBC(v4, v13);
    sub_10001BD08(v7, v8);
    sub_10001BBBC(v9, v10);
    sub_10001BBBC(v11, v12);
    sub_10001BBBC(v4, v13);
    sub_10001BD08(v7, v8);
    sub_10001BBBC(v9, v10);
    sub_1007E1B84(v7, v8, v9, v10, v4, v13, 1, (_QWORD *)(v0 + 136), (_OWORD *)(v0 + 216), (uint64_t *)(v0 + 144));
    *(_QWORD *)(v0 + 872) = v22;
    if (v22)
    {
      sub_10001BC14(v4, v13);
      sub_10001BC14(v4, v13);
      sub_10001BC14(v9, v10);
      sub_10001EF3C(v7, v8);
      sub_10001EF3C(v7, v8);
      sub_10001BC14(v9, v10);
      sub_10001BC14(v11, v12);
      v14 = sub_10001BC14(v4, v13);
      v15 = static os_log_type_t.error.getter(v14);
      if (qword_1010E9F78 != -1)
        swift_once(&qword_1010E9F78, sub_1007E28B4);
      v16 = qword_1011B77E0;
      v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v18 = swift_allocObject(v17, 72, 7);
      *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
      v19 = _convertErrorToNSError(_:)(v22);
      *(_QWORD *)(v18 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010F3060, NSError_ptr);
      *(_QWORD *)(v18 + 64) = sub_10001AC90((unint64_t *)&qword_1010EEFA8, (unint64_t *)&qword_1010F3060, NSError_ptr, (const char *)&protocol conformance descriptor for NSObject);
      *(_QWORD *)(v18 + 32) = v19;
      os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Error in TokenAsyncSequence: %@", 31, 2, v18);
      swift_bridgeObjectRelease();
      swift_errorRelease(v22);
      v3 = sub_10063268C;
    }
    else
    {
      v20 = *(_OWORD *)(v0 + 232);
      *(_OWORD *)(v0 + 920) = *(_OWORD *)(v0 + 216);
      *(_OWORD *)(v0 + 936) = v20;
      *(_OWORD *)(v0 + 952) = *(_OWORD *)(v0 + 248);
      sub_10001BC14(v4, v13);
      sub_10001BC14(v9, v10);
      sub_10001EF3C(v7, v8);
      sub_10001EF3C(v7, v8);
      sub_10001BC14(v9, v10);
      sub_10001BC14(v11, v12);
      sub_10001BC14(v4, v13);
      v3 = sub_1006318D4;
    }
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100630D0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_BOOL8);
  _BOOL8 v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t inited;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  void (*v77)(unint64_t *, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v1 = v0 + 88;
  v106 = *(_QWORD *)(v0 + 912);
  v109 = v0 + 16;
  v2 = *(_QWORD *)(v0 + 904);
  v104 = *(_QWORD *)(v0 + 896);
  v101 = *(_QWORD *)(v0 + 888);
  v3 = *(_QWORD *)(v0 + 880);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 152);
  sub_10001EF3C(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  sub_10001BC14(v4, v5);
  sub_10001BC14(v6, v7);
  sub_10001BC14(v9, v8);
  result = sub_100635C34(32, (void (*)(uint64_t, uint64_t, uint64_t *, _QWORD **, char *))sub_100636F98);
  v103 = v2;
  if (v3)
  {
    v99 = *(_QWORD *)(v0 + 784);
    v102 = *(_QWORD *)(v0 + 792);
    v11 = *(_QWORD *)(v0 + 728);
    v12 = *(_QWORD *)(v0 + 720);
    v13 = *(_QWORD *)(v0 + 712);
    v14 = *(_QWORD *)(v0 + 704);
    v15 = *(_QWORD *)(v0 + 696);
    v16 = *(_QWORD *)(v0 + 688);
    v17 = *(_QWORD *)(v0 + 680);
    v18 = *(_QWORD *)(v0 + 672);
    v97 = *(_QWORD *)(v0 + 664);
    v98 = *(_QWORD *)(v0 + 776);
    v95 = *(_QWORD *)(v0 + 640);
    v96 = *(_QWORD *)(v0 + 632);
    v93 = *(_QWORD *)(v0 + 552);
    v94 = *(_QWORD *)(v0 + 600);
    sub_1002B1DA4((_QWORD *)v109, (void (*)(_QWORD, _QWORD))sub_10001EF3C, (void (*)(uint64_t, uint64_t))sub_10001BC14);
    swift_release();
    sub_10064B29C(v18, v17, v16, v15, v14, v13);
    sub_10001BC14(v12, v11);
    sub_1002B1C34(v104, v103, v106);
    swift_bridgeObjectRelease();
    sub_100004048(v93, &qword_101102050);
    sub_100004048(v94, &qword_1010FBA40);
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v97, v96);
    sub_1002B1C34(v98, v99, v102);
    v26 = *(_QWORD *)(v0 + 656);
    v27 = *(_QWORD *)(v0 + 648);
    v28 = *(_QWORD *)(v0 + 624);
    v29 = *(_QWORD *)(v0 + 600);
    v30 = *(_QWORD *)(v0 + 592);
    v31 = *(_QWORD *)(v0 + 584);
    v32 = *(_QWORD *)(v0 + 576);
    v33 = *(_QWORD *)(v0 + 552);
    v34 = *(_QWORD *)(v0 + 544);
    v110 = *(_QWORD *)(v0 + 528);
    swift_task_dealloc(*(_QWORD *)(v0 + 664));
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v110);
    v35 = *(uint64_t (**)(_BOOL8))(v0 + 8);
    v36 = 0;
    return v35(v36);
  }
  v19 = *(_QWORD *)(v0 + 768);
  v20 = *(unsigned int *)(v19 + qword_101102590);
  v21 = *(unsigned int *)(v19 + qword_101102598);
  if (v21 < v20)
  {
    __break(1u);
    goto LABEL_24;
  }
  v22 = *(_QWORD *)(v0 + 552);
  v23 = *(_QWORD *)(v0 + 528);
  v24 = *(_QWORD *)(v0 + 512);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 760))(v23, *(_QWORD *)(v0 + 664), *(_QWORD *)(v0 + 632));
  v25 = (_QWORD *)(v23 + *(int *)(v24 + 20));
  *v25 = v20;
  v25[1] = v21;
  result = sub_100649BA4(v22, v23);
  v100 = (uint64_t *)v0;
  if (v106 >> 60 == 15)
  {
    v37 = (_QWORD *)v0;
    sub_1000126B0(*(_QWORD *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    sub_1002B1DA4((_QWORD *)v109, (void (*)(_QWORD, _QWORD))sub_10001EF3C, (void (*)(uint64_t, uint64_t))sub_10001BC14);
    goto LABEL_13;
  }
  v37 = (_QWORD *)v0;
  if (v104 < v101)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    return result;
  }
  if (v104 - v101 < 0xFA1)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
  }
  else
  {
    v38 = *(_QWORD *)(v0 + 472);
    v39 = *(_QWORD *)(*(_QWORD *)(v0 + 504) + 144);
    v40 = *(_BYTE *)(v0 + 980);
    v41 = sub_10001A9A8(&qword_1010ED1C0);
    inited = swift_initStackObject(v41, v1 + 72);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_QWORD *)(inited + 32) = v104;
    *(_QWORD *)(inited + 40) = v103;
    *(_QWORD *)(inited + 48) = v106;
    sub_10001BBBC(v103, v106);
    sub_10001BBBC(v103, v106);
    sub_100753C90(v38, v40, inited, v39);
    sub_1000126B0(v100[66], type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    sub_1002B1C34(v104, v103, v106);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for KeyGenerationHint);
  }
  sub_1002B1DA4((_QWORD *)v109, (void (*)(_QWORD, _QWORD))sub_10001EF3C, (void (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_1002B1C34(v104, v103, v106);
LABEL_13:
  v43 = v37[99];
  v44 = v37[98];
  v45 = v37[97];
  v46 = v37[94];
  v47 = v37[93];
  swift_release();
  result = sub_1002B1C34(v45, v44, v43);
  if (v46 + 1 == v47)
  {
    v48 = v37[91];
    v49 = v37[90];
    v50 = v37[89];
    v51 = v37[88];
    v52 = v37[87];
    v53 = v37[86];
    v54 = v37;
    v55 = v37[85];
    v56 = v54[84];
    sub_10001BC14(v49, v48);
    sub_10064B29C(v56, v55, v53, v52, v51, v50);
    swift_bridgeObjectRelease();
    v57 = v54[83];
    v58 = v54[82];
    v59 = v54[81];
    v60 = v54[80];
    v61 = v54[79];
    v62 = v54[78];
    v63 = v54[75];
    v64 = v54[74];
    v105 = v54[73];
    v107 = v54[72];
    v65 = v54[69];
    v111 = v54[68];
    v112 = v54[66];
    sub_100004048(v65, &qword_101102050);
    sub_100004048(v63, &qword_1010FBA40);
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v57, v61);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v105);
    swift_task_dealloc(v107);
    swift_task_dealloc(v65);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    v35 = (uint64_t (*)(_BOOL8))v54[1];
    v36 = v54[93] != 0;
    return v35(v36);
  }
  v66 = v37[94] + 1;
  v37[94] = v66;
  v67 = v37[92];
  if (v66 >= *(_QWORD *)(v67 + 16))
    goto LABEL_25;
  v68 = v37[83];
  v69 = (unint64_t *)v37[81];
  v70 = v37[79];
  v71 = v37[75];
  v72 = v37[73];
  v73 = v37[62];
  v74 = v67 + 16 * v66;
  v76 = *(_QWORD *)(v74 + 32);
  v75 = *(_QWORD *)(v74 + 40);
  v77 = *(void (**)(unint64_t *, uint64_t, uint64_t))(v37[80] + 16);
  v37[95] = v77;
  v77(v69, v68, v70);
  sub_10000F9B8(v71, v72, &qword_1010FBA40);
  v37[96] = sub_100633610(v69, v76, v75, v72, v73, &qword_101101FD8, &qword_101101FE0, &qword_101102068, (uint64_t (*)(char *, unint64_t, uint64_t, char *, uint64_t))sub_100635074);
  if (v76 < 2)
  {
    v81 = 0;
    v82 = 0;
    v83 = 0;
    v84 = 0xF000000000000000;
  }
  else
  {
    v78 = sub_10075887C(v100[59], v76, *(_QWORD *)(v100[63] + 144));
    v81 = v78;
    v82 = v79;
    v84 = v80;
    if (v80 >> 60 == 15)
      v83 = 0;
    else
      v83 = v78;
  }
  v100[100] = v83;
  v100[99] = v84;
  v100[98] = v82;
  v100[97] = v81;
  v85 = v100[91];
  v86 = v100[90];
  v87 = v100[85];
  v88 = v100[84];
  sub_10001BBBC(v88, v87);
  PrivateKey.publicKey.getter(v88, v87);
  v113 = v89;
  v108 = v90;
  sub_10001BBBC(v86, v85);
  sub_1002B1C18(v81, v82, v84);
  sub_100736DBC(v88, v87, v113, v108, v86, v85, v81, v82, (uint64_t *)v109, v84, v76);
  v100[101] = 0;
  v91 = *(_OWORD *)(v109 + 48);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(v109 + 32);
  *(_OWORD *)(v1 + 48) = v91;
  *(_QWORD *)(v1 + 64) = *(_QWORD *)(v109 + 64);
  v92 = *(_OWORD *)(v109 + 16);
  *(_OWORD *)v1 = *(_OWORD *)v109;
  *(_OWORD *)(v1 + 16) = v92;
  sub_1002B1C18(v81, v82, v84);
  sub_1002B1DA4((_QWORD *)v109, (void (*)(_QWORD, _QWORD))sub_10001BD08, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
  return swift_task_switch(sub_1006309CC, 0, 0);
}

void sub_1006318D4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_BOOL8);
  _BOOL8 v47;
  uint64_t v48;
  uint64_t v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t inited;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t (*v68)();
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  void (*v102)(unint64_t *, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  __int128 v116;
  __int128 v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;

  if (*(_QWORD *)(v0 + 848) <= *(_QWORD *)(v0 + 488))
  {
    v23 = *(_QWORD *)(v0 + 872);
    v24 = *(_QWORD *)(v0 + 864);
    v25 = *(_QWORD *)(v0 + 856);
    sub_1002B1C34(*(_QWORD *)(v0 + 824), *(_QWORD *)(v0 + 832), *(_QWORD *)(v0 + 840));
    *(_OWORD *)(v0 + 288) = *(_OWORD *)(v0 + 232);
    v26 = *(_QWORD *)(v0 + 288);
    v27 = *(_QWORD *)(v0 + 296);
    sub_10001BBBC(v25, v24);
    sub_100059DE8(v0 + 288);
    v28 = sub_1007E6F8C(v26, v27);
    if (v23)
    {
      sub_1000ADA04(v0 + 288);
      _StringGuts.grow(_:)(35);
      *(_QWORD *)(v0 + 352) = 0;
      *(_QWORD *)(v0 + 360) = 0xE000000000000000;
      v50._object = (void *)0x8000000100EC7AC0;
      v50._countAndFlagsBits = 0xD000000000000021;
      String.append(_:)(v50);
      *(_QWORD *)(v0 + 400) = v23;
      v51 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      _print_unlocked<A, B>(_:_:)(v0 + 400, v0 + 352, v51, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360), "searchpartyd/KeyRepresentable.swift", 35, 2, 256, 0);
      return;
    }
    v48 = v28;
    v49 = v29;
    sub_1000ADA04(v0 + 288);
    sub_1002F7394(v48, v49);
    v52 = *(_QWORD *)(v0 + 768);
    v54 = *(_QWORD *)(v0 + 336);
    v53 = *(_QWORD *)(v0 + 344);
    v55 = objc_autoreleasePoolPush();
    sub_100635694(v52, v54, v53);
    *(_QWORD *)(v0 + 968) = 0;
    v138 = *(_QWORD *)(v0 + 952);
    v141 = *(_QWORD *)(v0 + 960);
    v62 = *(_QWORD *)(v0 + 944);
    v63 = *(_QWORD *)(v0 + 936);
    v64 = *(_QWORD *)(v0 + 928);
    v65 = *(_QWORD *)(v0 + 920);
    v66 = *(_QWORD *)(v0 + 864);
    v67 = *(_QWORD *)(v0 + 856);
    objc_autoreleasePoolPop(v55);
    sub_10001BC14(v67, v66);
    sub_10001EF3C(v65, v64);
    sub_10001BC14(v63, v62);
    sub_10001EF3C(v138, v141);
    sub_10001BC14(v54, v53);
    v68 = sub_100633258;
    goto LABEL_15;
  }
  v136 = (uint64_t *)(v0 + 16);
  v140 = *(_QWORD *)(v0 + 960);
  v132 = *(_QWORD *)(v0 + 952);
  v127 = *(_QWORD *)(v0 + 936);
  v129 = *(_QWORD *)(v0 + 944);
  v125 = *(_QWORD *)(v0 + 928);
  v1 = *(_QWORD *)(v0 + 920);
  v2 = *(_QWORD *)(v0 + 864);
  v3 = *(_QWORD *)(v0 + 856);
  v5 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 144);
  v9 = *(_QWORD *)(v0 + 152);
  sub_10001EF3C(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  sub_10001BC14(v5, v4);
  sub_10001BC14(v6, v7);
  sub_10001BC14(v8, v9);
  sub_10001BC14(v3, v2);
  sub_10001EF3C(v1, v125);
  sub_10001BC14(v127, v129);
  sub_10001EF3C(v132, v140);
  v10 = *(_QWORD *)(v0 + 872);
  v11 = *(_QWORD *)(v0 + 840);
  v12 = *(_QWORD *)(v0 + 832);
  v13 = *(_QWORD *)(v0 + 824);
  v14 = *(_QWORD *)(v0 + 816);
  sub_100635C34(32, (void (*)(uint64_t, uint64_t, uint64_t *, _QWORD **, char *))sub_100636F98);
  v133 = v13;
  if (v10)
  {
    v128 = *(_QWORD *)(v0 + 784);
    v130 = *(_QWORD *)(v0 + 792);
    v15 = *(_QWORD *)(v0 + 728);
    v16 = *(_QWORD *)(v0 + 720);
    v17 = *(_QWORD *)(v0 + 712);
    v118 = v11;
    v119 = v12;
    v18 = *(_QWORD *)(v0 + 704);
    v19 = *(_QWORD *)(v0 + 696);
    v20 = *(_QWORD *)(v0 + 688);
    v21 = *(_QWORD *)(v0 + 680);
    v22 = *(_QWORD *)(v0 + 672);
    v124 = *(_QWORD *)(v0 + 664);
    v126 = *(_QWORD *)(v0 + 776);
    v122 = *(_QWORD *)(v0 + 640);
    v123 = *(_QWORD *)(v0 + 632);
    v120 = *(_QWORD *)(v0 + 552);
    v121 = *(_QWORD *)(v0 + 600);
    sub_1002B1DA4(v136, (void (*)(_QWORD, _QWORD))sub_10001EF3C, (void (*)(uint64_t, uint64_t))sub_10001BC14);
    swift_release();
    sub_10064B29C(v22, v21, v20, v19, v18, v17);
    sub_10001BC14(v16, v15);
    sub_1002B1C34(v133, v119, v118);
    swift_bridgeObjectRelease();
    sub_100004048(v120, &qword_101102050);
    sub_100004048(v121, &qword_1010FBA40);
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v124, v123);
    sub_1002B1C34(v126, v128, v130);
    v37 = *(_QWORD *)(v0 + 656);
    v38 = *(_QWORD *)(v0 + 648);
    v39 = *(_QWORD *)(v0 + 624);
    v40 = *(_QWORD *)(v0 + 600);
    v41 = *(_QWORD *)(v0 + 592);
    v42 = *(_QWORD *)(v0 + 584);
    v43 = *(_QWORD *)(v0 + 576);
    v44 = *(_QWORD *)(v0 + 552);
    v45 = *(_QWORD *)(v0 + 544);
    v137 = *(_QWORD *)(v0 + 528);
    swift_task_dealloc(*(_QWORD *)(v0 + 664));
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v137);
    v46 = *(void (**)(_BOOL8))(v0 + 8);
    v47 = 0;
LABEL_8:
    v46(v47);
    return;
  }
  v30 = *(_QWORD *)(v0 + 768);
  v31 = *(unsigned int *)(v30 + qword_101102590);
  v32 = *(unsigned int *)(v30 + qword_101102598);
  if (v32 < v31)
  {
    __break(1u);
    goto LABEL_29;
  }
  v33 = *(_QWORD *)(v0 + 552);
  v34 = *(_QWORD *)(v0 + 528);
  v35 = *(_QWORD *)(v0 + 512);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 760))(v34, *(_QWORD *)(v0 + 664), *(_QWORD *)(v0 + 632));
  v36 = (_QWORD *)(v34 + *(int *)(v35 + 20));
  *v36 = v31;
  v36[1] = v32;
  sub_100649BA4(v33, v34);
  if (v11 >> 60 == 15)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    sub_1002B1DA4(v136, (void (*)(_QWORD, _QWORD))sub_10001EF3C, (void (*)(uint64_t, uint64_t))sub_10001BC14);
    goto LABEL_18;
  }
  if (v133 < v14)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v133 - v14 < 0xFA1)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    sub_1002B1DA4(v136, (void (*)(_QWORD, _QWORD))sub_10001EF3C, (void (*)(uint64_t, uint64_t))sub_10001BC14);
    v69 = v133;
    v70 = v12;
  }
  else
  {
    v56 = *(_QWORD *)(v0 + 472);
    v57 = *(_QWORD *)(*(_QWORD *)(v0 + 504) + 144);
    v58 = *(_BYTE *)(v0 + 980);
    v59 = sub_10001A9A8(&qword_1010ED1C0);
    v60 = v12;
    inited = swift_initStackObject(v59, v0 + 160);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_QWORD *)(inited + 32) = v133;
    *(_QWORD *)(inited + 40) = v60;
    *(_QWORD *)(inited + 48) = v11;
    sub_10001BBBC(v60, v11);
    sub_10001BBBC(v60, v11);
    sub_100753C90(v56, v58, inited, v57);
    sub_1000126B0(*(_QWORD *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    sub_1002B1C34(v133, v60, v11);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for KeyGenerationHint);
    sub_1002B1DA4(v136, (void (*)(_QWORD, _QWORD))sub_10001EF3C, (void (*)(uint64_t, uint64_t))sub_10001BC14);
    v69 = v133;
    v70 = v60;
  }
  sub_1002B1C34(v69, v70, v11);
LABEL_18:
  v71 = *(_QWORD *)(v0 + 792);
  v72 = *(_QWORD *)(v0 + 784);
  v73 = *(_QWORD *)(v0 + 776);
  v74 = *(_QWORD *)(v0 + 752);
  v75 = *(_QWORD *)(v0 + 744);
  swift_release();
  sub_1002B1C34(v73, v72, v71);
  if (v74 + 1 == v75)
  {
    v76 = *(_QWORD *)(v0 + 712);
    v77 = *(_QWORD *)(v0 + 704);
    v78 = *(_QWORD *)(v0 + 696);
    v79 = *(_QWORD *)(v0 + 688);
    v80 = *(_QWORD *)(v0 + 680);
    v81 = *(_QWORD *)(v0 + 672);
    sub_10001BC14(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728));
    sub_10064B29C(v81, v80, v79, v78, v77, v76);
    swift_bridgeObjectRelease();
    v82 = *(_QWORD *)(v0 + 664);
    v83 = *(_QWORD *)(v0 + 656);
    v84 = *(_QWORD *)(v0 + 648);
    v85 = *(_QWORD *)(v0 + 640);
    v86 = *(_QWORD *)(v0 + 632);
    v87 = *(_QWORD *)(v0 + 624);
    v88 = *(_QWORD *)(v0 + 600);
    v89 = *(_QWORD *)(v0 + 592);
    v131 = *(_QWORD *)(v0 + 584);
    v90 = *(_QWORD *)(v0 + 552);
    v134 = *(_QWORD *)(v0 + 576);
    v139 = *(_QWORD *)(v0 + 544);
    v142 = *(_QWORD *)(v0 + 528);
    sub_100004048(v90, &qword_101102050);
    sub_100004048(v88, &qword_1010FBA40);
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v82, v86);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v131);
    swift_task_dealloc(v134);
    swift_task_dealloc(v90);
    swift_task_dealloc(v139);
    swift_task_dealloc(v142);
    v46 = *(void (**)(_BOOL8))(v0 + 8);
    v47 = *(_QWORD *)(v0 + 744) != 0;
    goto LABEL_8;
  }
  v91 = *(_QWORD *)(v0 + 752) + 1;
  *(_QWORD *)(v0 + 752) = v91;
  v92 = *(_QWORD *)(v0 + 736);
  if (v91 < *(_QWORD *)(v92 + 16))
  {
    v93 = *(_QWORD *)(v0 + 664);
    v94 = *(unint64_t **)(v0 + 648);
    v95 = *(_QWORD *)(v0 + 632);
    v96 = *(_QWORD *)(v0 + 600);
    v97 = *(_QWORD *)(v0 + 584);
    v98 = *(_QWORD *)(v0 + 496);
    v99 = v92 + 16 * v91;
    v101 = *(_QWORD *)(v99 + 32);
    v100 = *(_QWORD *)(v99 + 40);
    v102 = *(void (**)(unint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v0 + 640) + 16);
    *(_QWORD *)(v0 + 760) = v102;
    v102(v94, v93, v95);
    sub_10000F9B8(v96, v97, &qword_1010FBA40);
    *(_QWORD *)(v0 + 768) = sub_100633610(v94, v101, v100, v97, v98, &qword_101101FD8, &qword_101101FE0, &qword_101102068, (uint64_t (*)(char *, unint64_t, uint64_t, char *, uint64_t))sub_100635074);
    if (v101 < 2)
    {
      v106 = 0;
      v107 = 0;
      v108 = 0;
      v109 = 0xF000000000000000;
    }
    else
    {
      v103 = sub_10075887C(*(_QWORD *)(v0 + 472), v101, *(_QWORD *)(*(_QWORD *)(v0 + 504) + 144));
      v106 = v103;
      v107 = v104;
      v109 = v105;
      if (v105 >> 60 == 15)
        v108 = 0;
      else
        v108 = v103;
    }
    *(_QWORD *)(v0 + 800) = v108;
    *(_QWORD *)(v0 + 792) = v109;
    *(_QWORD *)(v0 + 784) = v107;
    *(_QWORD *)(v0 + 776) = v106;
    v110 = *(_QWORD *)(v0 + 728);
    v111 = *(_QWORD *)(v0 + 720);
    v112 = *(_QWORD *)(v0 + 680);
    v113 = *(_QWORD *)(v0 + 672);
    sub_10001BBBC(v113, v112);
    PrivateKey.publicKey.getter(v113, v112);
    v143 = v114;
    v135 = v115;
    sub_10001BBBC(v111, v110);
    sub_1002B1C18(v106, v107, v109);
    sub_100736DBC(v113, v112, v143, v135, v111, v110, v106, v107, v136, v109, v101);
    *(_QWORD *)(v0 + 808) = 0;
    v116 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 120) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 136) = v116;
    *(_QWORD *)(v0 + 152) = *(_QWORD *)(v0 + 80);
    v117 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 88) = *(_OWORD *)v136;
    *(_OWORD *)(v0 + 104) = v117;
    sub_1002B1C18(v106, v107, v109);
    sub_1002B1DA4(v136, (void (*)(_QWORD, _QWORD))sub_10001BD08, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
    v68 = sub_1006309CC;
LABEL_15:
    swift_task_switch(v68, 0, 0);
    return;
  }
LABEL_30:
  __break(1u);
}

uint64_t sub_10063268C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t inited;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void (*v58)(unint64_t *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v1 = v0 + 88;
  v2 = *(_QWORD *)(v0 + 840);
  v82 = v0 + 16;
  v3 = *(_QWORD *)(v0 + 832);
  v77 = *(_QWORD *)(v0 + 824);
  v75 = *(_QWORD *)(v0 + 816);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 144);
  v9 = *(_QWORD *)(v0 + 152);
  sub_10001EF3C(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  sub_10001BC14(v4, v5);
  sub_10001BC14(v6, v7);
  sub_10001BC14(v8, v9);
  result = sub_100635C34(32, (void (*)(uint64_t, uint64_t, uint64_t *, _QWORD **, char *))sub_100636F98);
  v79 = v2;
  v76 = v3;
  v11 = *(_QWORD *)(v0 + 768);
  v12 = *(unsigned int *)(v11 + qword_101102590);
  v13 = *(unsigned int *)(v11 + qword_101102598);
  if (v13 < v12)
  {
    __break(1u);
    goto LABEL_20;
  }
  v14 = *(_QWORD *)(v0 + 552);
  v15 = *(_QWORD *)(v0 + 528);
  v16 = *(_QWORD *)(v0 + 512);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 760))(v15, *(_QWORD *)(v0 + 664), *(_QWORD *)(v0 + 632));
  v17 = (_QWORD *)(v15 + *(int *)(v16 + 20));
  *v17 = v12;
  v17[1] = v13;
  result = sub_100649BA4(v14, v15);
  v74 = (uint64_t *)v0;
  if (v79 >> 60 == 15)
  {
    v18 = (_QWORD *)v0;
    sub_1000126B0(*(_QWORD *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    sub_1002B1DA4((_QWORD *)v82, (void (*)(_QWORD, _QWORD))sub_10001EF3C, (void (*)(uint64_t, uint64_t))sub_10001BC14);
    goto LABEL_9;
  }
  v18 = (_QWORD *)v0;
  if (v77 < v75)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  if (v77 - v75 < 0xFA1)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 472);
    v20 = *(_QWORD *)(*(_QWORD *)(v0 + 504) + 144);
    v21 = *(_BYTE *)(v0 + 980);
    v22 = sub_10001A9A8(&qword_1010ED1C0);
    inited = swift_initStackObject(v22, v1 + 72);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_QWORD *)(inited + 32) = v77;
    *(_QWORD *)(inited + 40) = v76;
    *(_QWORD *)(inited + 48) = v79;
    sub_10001BBBC(v76, v79);
    sub_10001BBBC(v76, v79);
    sub_100753C90(v19, v21, inited, v20);
    sub_1000126B0(v74[66], type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    sub_1002B1C34(v77, v76, v79);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for KeyGenerationHint);
  }
  sub_1002B1DA4((_QWORD *)v82, (void (*)(_QWORD, _QWORD))sub_10001EF3C, (void (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_1002B1C34(v77, v76, v79);
LABEL_9:
  v24 = v18[99];
  v25 = v18[98];
  v26 = v18[97];
  v27 = v18[94];
  v28 = v18[93];
  swift_release();
  result = sub_1002B1C34(v26, v25, v24);
  if (v27 + 1 == v28)
  {
    v29 = v18[91];
    v30 = v18[90];
    v31 = v18[89];
    v32 = v18[88];
    v33 = v18[87];
    v34 = v18[86];
    v35 = v18;
    v36 = v18[85];
    v37 = v35[84];
    sub_10001BC14(v30, v29);
    sub_10064B29C(v37, v36, v34, v33, v32, v31);
    swift_bridgeObjectRelease();
    v38 = v35[83];
    v39 = v35[82];
    v40 = v35[81];
    v41 = v35[80];
    v42 = v35[79];
    v43 = v35[78];
    v44 = v35[75];
    v45 = v35[74];
    v78 = v35[73];
    v80 = v35[72];
    v46 = v35[69];
    v83 = v35[68];
    v84 = v35[66];
    sub_100004048(v46, &qword_101102050);
    sub_100004048(v44, &qword_1010FBA40);
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v38, v42);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v46);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    return ((uint64_t (*)(BOOL))v35[1])(v35[93] != 0);
  }
  v47 = v18[94] + 1;
  v18[94] = v47;
  v48 = v18[92];
  if (v47 >= *(_QWORD *)(v48 + 16))
    goto LABEL_21;
  v49 = v18[83];
  v50 = (unint64_t *)v18[81];
  v51 = v18[79];
  v52 = v18[75];
  v53 = v18[73];
  v54 = v18[62];
  v55 = v48 + 16 * v47;
  v57 = *(_QWORD *)(v55 + 32);
  v56 = *(_QWORD *)(v55 + 40);
  v58 = *(void (**)(unint64_t *, uint64_t, uint64_t))(v18[80] + 16);
  v18[95] = v58;
  v58(v50, v49, v51);
  sub_10000F9B8(v52, v53, &qword_1010FBA40);
  v18[96] = sub_100633610(v50, v57, v56, v53, v54, &qword_101101FD8, &qword_101101FE0, &qword_101102068, (uint64_t (*)(char *, unint64_t, uint64_t, char *, uint64_t))sub_100635074);
  if (v57 < 2)
  {
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0xF000000000000000;
  }
  else
  {
    v59 = sub_10075887C(v74[59], v57, *(_QWORD *)(v74[63] + 144));
    v62 = v59;
    v63 = v60;
    v65 = v61;
    if (v61 >> 60 == 15)
      v64 = 0;
    else
      v64 = v59;
  }
  v74[100] = v64;
  v74[99] = v65;
  v74[98] = v63;
  v74[97] = v62;
  v66 = v74[91];
  v67 = v74[90];
  v68 = v74[85];
  v69 = v74[84];
  sub_10001BBBC(v69, v68);
  PrivateKey.publicKey.getter(v69, v68);
  v85 = v70;
  v81 = v71;
  sub_10001BBBC(v67, v66);
  sub_1002B1C18(v62, v63, v65);
  sub_100736DBC(v69, v68, v85, v81, v67, v66, v62, v63, (uint64_t *)v82, v65, v57);
  v74[101] = 0;
  v72 = *(_OWORD *)(v82 + 48);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(v82 + 32);
  *(_OWORD *)(v1 + 48) = v72;
  *(_QWORD *)(v1 + 64) = *(_QWORD *)(v82 + 64);
  v73 = *(_OWORD *)(v82 + 16);
  *(_OWORD *)v1 = *(_OWORD *)v82;
  *(_OWORD *)(v1 + 16) = v73;
  sub_1002B1C18(v62, v63, v65);
  sub_1002B1DA4((_QWORD *)v82, (void (*)(_QWORD, _QWORD))sub_10001BD08, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
  return swift_task_switch(sub_1006309CC, 0, 0);
}

uint64_t sub_100633258()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  uint64_t (*v3)();
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v21;

  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 968);
    *(_QWORD *)(v0 + 912) = *(_QWORD *)(v0 + 864);
    v2 = *(_OWORD *)(v0 + 848);
    *(_OWORD *)(v0 + 896) = v2;
    *(_QWORD *)(v0 + 888) = v2;
    *(_QWORD *)(v0 + 880) = v1;
    v3 = sub_100630D0C;
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 144);
    v21 = *(_QWORD *)(v0 + 968);
    *(_QWORD *)(v0 + 840) = *(_QWORD *)(v0 + 864);
    v5 = *(_OWORD *)(v0 + 848);
    *(_OWORD *)(v0 + 824) = v5;
    *(_QWORD *)(v0 + 816) = v5;
    v6 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 112);
    v10 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 128);
    *(_QWORD *)(v0 + 848) = *(_QWORD *)(v0 + 136);
    *(_QWORD *)(v0 + 856) = v4;
    v12 = *(_QWORD *)(v0 + 152);
    *(_QWORD *)(v0 + 864) = v12;
    sub_10001BBBC(v4, v12);
    sub_10001BBBC(v4, v12);
    sub_10001BD08(v6, v7);
    sub_10001BBBC(v8, v9);
    sub_10001BBBC(v10, v11);
    sub_10001BBBC(v4, v12);
    sub_10001BD08(v6, v7);
    sub_10001BBBC(v8, v9);
    sub_1007E1B84(v6, v7, v8, v9, v4, v12, 1, (_QWORD *)(v0 + 136), (_OWORD *)(v0 + 216), (uint64_t *)(v0 + 144));
    *(_QWORD *)(v0 + 872) = v21;
    if (v21)
    {
      sub_10001BC14(v4, v12);
      sub_10001BC14(v4, v12);
      sub_10001BC14(v8, v9);
      sub_10001EF3C(v6, v7);
      sub_10001EF3C(v6, v7);
      sub_10001BC14(v8, v9);
      sub_10001BC14(v10, v11);
      v13 = sub_10001BC14(v4, v12);
      v14 = static os_log_type_t.error.getter(v13);
      if (qword_1010E9F78 != -1)
        swift_once(&qword_1010E9F78, sub_1007E28B4);
      v15 = qword_1011B77E0;
      v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v17 = swift_allocObject(v16, 72, 7);
      *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
      v18 = _convertErrorToNSError(_:)(v21);
      *(_QWORD *)(v17 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010F3060, NSError_ptr);
      *(_QWORD *)(v17 + 64) = sub_10001AC90((unint64_t *)&qword_1010EEFA8, (unint64_t *)&qword_1010F3060, NSError_ptr, (const char *)&protocol conformance descriptor for NSObject);
      *(_QWORD *)(v17 + 32) = v18;
      os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "Error in TokenAsyncSequence: %@", 31, 2, v17);
      swift_bridgeObjectRelease();
      swift_errorRelease(v21);
      v3 = sub_10063268C;
    }
    else
    {
      v19 = *(_OWORD *)(v0 + 232);
      *(_OWORD *)(v0 + 920) = *(_OWORD *)(v0 + 216);
      *(_OWORD *)(v0 + 936) = v19;
      *(_OWORD *)(v0 + 952) = *(_OWORD *)(v0 + 248);
      sub_10001BC14(v4, v12);
      sub_10001BC14(v8, v9);
      sub_10001EF3C(v6, v7);
      sub_10001EF3C(v6, v7);
      sub_10001BC14(v8, v9);
      sub_10001BC14(v10, v11);
      sub_10001BC14(v4, v12);
      v3 = sub_1006318D4;
    }
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100633590(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100633610(a1, a2, a3, a4, a5, &qword_101101FD8, &qword_101101FE0, &qword_101102068, (uint64_t (*)(char *, unint64_t, uint64_t, char *, uint64_t))sub_100635074);
}

uint64_t sub_1006335D0(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100633610(a1, a2, a3, a4, a5, &qword_101102098, &qword_1011020A0, &qword_1011020A8, (uint64_t (*)(char *, unint64_t, uint64_t, char *, uint64_t))sub_100635384);
}

uint64_t sub_100633610(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, unint64_t *a7, uint64_t *a8, uint64_t (*a9)(char *, unint64_t, uint64_t, char *, uint64_t))
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;

  v33 = a7;
  v34 = a8;
  v35 = a5;
  v14 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    v24 = sub_10001A9A8(a6);
    v25 = sub_1000193A4(v33, a6, byte_100E46E40);
    v26 = swift_allocError(v24, v25, 0, 0);
    *(_DWORD *)v27 = 2;
    *(_BYTE *)(v27 + 4) = 2;
    swift_willThrow(v26);
    sub_100004048(a4, &qword_1010FBA40);
    (*(void (**)(unint64_t *, uint64_t))(v18 + 8))(a1, v17);
    return a4;
  }
  result = (*(uint64_t (**)(char *, unint64_t *, uint64_t))(v18 + 16))(v20, a1, v17);
  v22 = a3 - a2;
  if (a3 < a2)
  {
    if ((uint64_t)(a2 - a3) < 0)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    v23 = a4;
    v22 = a3 - a2;
LABEL_7:
    a4 = v22 + 1;
    if (!__OFADD__(v22, 1))
    {
      v33 = a1;
      v28 = v23;
      sub_10000F9B8(v23, (uint64_t)v16, &qword_1010FBA40);
      v29 = sub_10001A9A8(v34);
      swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
      v30 = v36;
      v31 = a9(v20, a2, a4, v16, v35);
      if (v30)
      {
        sub_100004048(v28, &qword_1010FBA40);
        (*(void (**)(unint64_t *, uint64_t))(v18 + 8))(v33, v17);
      }
      else
      {
        a4 = v31;
        sub_100004048(v28, &qword_1010FBA40);
        (*(void (**)(unint64_t *, uint64_t))(v18 + 8))(v33, v17);
      }
      return a4;
    }
    __break(1u);
    goto LABEL_14;
  }
  v23 = a4;
  if ((uint64_t)(a3 - a2) >= 0)
    goto LABEL_7;
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_100633844(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  os_log_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t handle_from_file_descriptor;
  uint64_t v36;
  int v37;
  os_log_t v38;
  void *v39;
  char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;

  v4 = type metadata accessor for BeaconIdentifier(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v36 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v36 - v11;
  v13 = sub_100633CFC(a1, a2);
  if (!v13)
    return 0;
  v14 = v13;
  v41 = a2;
  if (qword_1010E9DD8 != -1)
    swift_once(&qword_1010E9DD8, sub_1006270D8);
  v15 = type metadata accessor for Logger(0);
  sub_10001A9E8(v15, (uint64_t)qword_101101B90);
  sub_10005972C(a1, (uint64_t)v12, type metadata accessor for BeaconIdentifier);
  v16 = sub_10005972C(a1, (uint64_t)v10, type metadata accessor for BeaconIdentifier);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, (os_log_type_t)v18))
  {
    v37 = v18;
    v38 = v17;
    v39 = v14;
    v40 = v7;
    v19 = swift_slowAlloc(52, -1);
    v20 = swift_slowAlloc(96, -1);
    v36 = v20;
    *(_DWORD *)v19 = 141559043;
    v42 = 1752392040;
    v43 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    v21 = type metadata accessor for UUID(0);
    v22 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
    v42 = sub_100016940(v23, v24, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v12, type metadata accessor for BeaconIdentifier);
    *(_WORD *)(v19 + 22) = 2160;
    v42 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v19 + 24, v19 + 32);
    *(_WORD *)(v19 + 32) = 2081;
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
    v42 = sub_100016940(v25, v26, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v19 + 34, v19 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v10, type metadata accessor for BeaconIdentifier);
    *(_WORD *)(v19 + 42) = 2082;
    v27 = v41;
    if ((_BYTE)v41)
    {
      if (v41 == 1)
        v28 = 0x61646E6F6365732ELL;
      else
        v28 = 0xD000000000000010;
      if (v41 == 1)
        v29 = 0xEA00000000007972;
      else
        v29 = 0x8000000100EC6940;
    }
    else
    {
      v29 = 0xE800000000000000;
      v28 = 0x7972616D6972702ELL;
    }
    v7 = v40;
    v42 = sub_100016940(v28, v29, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v19 + 44, v19 + 52);
    swift_bridgeObjectRelease();
    v30 = v38;
    _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v37, "opened keymap: %{private,mask.hash}s/%{private,mask.hash}s/%{public}s)", (uint8_t *)v19, 0x34u);
    v31 = v36;
    swift_arrayDestroy(v36, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    v14 = v39;
  }
  else
  {
    sub_1000126B0((uint64_t)v12, type metadata accessor for BeaconIdentifier);
    sub_1000126B0((uint64_t)v10, type metadata accessor for BeaconIdentifier);

    v27 = v41;
  }
  sub_10005972C(a1, (uint64_t)v7, type metadata accessor for BeaconIdentifier);
  v32 = type metadata accessor for BeaconKeyIndexMap(0);
  v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  handle_from_file_descriptor = sp_key_index_map_create_handle_from_file_descriptor(objc_msgSend(v14, "fileDescriptor"));

  if (!handle_from_file_descriptor)
  {
    sub_1000126B0((uint64_t)v7, type metadata accessor for BeaconIdentifier);
    swift_deallocPartialClassInstance(v33, v32, *(unsigned int *)(*(_QWORD *)v33 + 48), *(unsigned __int16 *)(*(_QWORD *)v33 + 52));
    return 0;
  }
  sub_1000126EC((uint64_t)v7, v33 + OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_beaconIdentifier, type metadata accessor for BeaconIdentifier);
  *(_BYTE *)(v33 + OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_sequence) = v27;
  *(_QWORD *)(v33 + OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_mapHandle) = handle_from_file_descriptor;
  return v33;
}

id sub_100633CFC(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  NSString v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;

  v52 = type metadata accessor for BeaconIdentifier(0);
  v4 = __chkstk_darwin(v52);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v48 - v8;
  __chkstk_darwin(v7);
  v10 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = a2;
  sub_1006347F8(a2, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_100004048((uint64_t)v12, &qword_1010FBA40);
    if (qword_1010E9DD8 != -1)
      swift_once(&qword_1010E9DD8, sub_1006270D8);
    v17 = type metadata accessor for Logger(0);
    sub_10001A9E8(v17, (uint64_t)qword_101101B90);
    v18 = sub_10005972C(a1, (uint64_t)v6, type metadata accessor for BeaconIdentifier);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(32, -1);
      v22 = swift_slowAlloc(64, -1);
      v56 = v22;
      *(_DWORD *)v21 = 141558531;
      v54 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v21 + 4, v21 + 12);
      *(_WORD *)(v21 + 12) = 2081;
      v23 = type metadata accessor for UUID(0);
      v24 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v54 = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
      v55 = v25;
      v26._countAndFlagsBits = 47;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v54 = sub_100016940(v54, v55, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v21 + 14, v21 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v6, type metadata accessor for BeaconIdentifier);
      *(_WORD *)(v21 + 22) = 2082;
      if ((_BYTE)v53)
      {
        if (v53 == 1)
        {
          v28 = 0x61646E6F6365732ELL;
          v29 = 0xEA00000000007972;
        }
        else
        {
          v29 = 0x8000000100EC6940;
          v28 = 0xD000000000000010;
        }
      }
      else
      {
        v28 = 0x7972616D6972702ELL;
        v29 = 0xE800000000000000;
      }
      v54 = sub_100016940(v28, v29, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v21 + 24, v21 + 32);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "no keymap URL for identifier %{private,mask.hash}s, sequence: %{public}s", (uint8_t *)v21, 0x20u);
      swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v6, type metadata accessor for BeaconIdentifier);
    }

    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  v30 = objc_autoreleasePoolPush();
  sub_100646508((uint64_t)v16);
  objc_autoreleasePoolPop(v30);
  URL.path.getter(v31);
  v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v33 = objc_msgSend((id)objc_opt_self(NSFileHandle), "fileHandleForReadingAtPath:", v32);

  if (!v33)
  {
    if (qword_1010E9DD8 != -1)
      swift_once(&qword_1010E9DD8, sub_1006270D8);
    v34 = type metadata accessor for Logger(0);
    sub_10001A9E8(v34, (uint64_t)qword_101101B90);
    v35 = sub_10005972C(a1, (uint64_t)v9, type metadata accessor for BeaconIdentifier);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, (os_log_type_t)v37))
    {
      LODWORD(v50) = v37;
      v51 = v16;
      v38 = swift_slowAlloc(32, -1);
      v49 = swift_slowAlloc(64, -1);
      v56 = v49;
      *(_DWORD *)v38 = 141558531;
      v54 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v38 + 4, v38 + 12);
      *(_WORD *)(v38 + 12) = 2081;
      v48 = v38 + 14;
      v39 = type metadata accessor for UUID(0);
      v40 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v54 = dispatch thunk of CustomStringConvertible.description.getter(v39, v40);
      v55 = v41;
      v42._countAndFlagsBits = 47;
      v42._object = (void *)0xE100000000000000;
      String.append(_:)(v42);
      v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v39, v40);
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      v54 = sub_100016940(v54, v55, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v48, v38 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v9, type metadata accessor for BeaconIdentifier);
      *(_WORD *)(v38 + 22) = 2082;
      if ((_BYTE)v53)
      {
        if (v53 == 1)
        {
          v44 = 0x61646E6F6365732ELL;
          v45 = 0xEA00000000007972;
        }
        else
        {
          v45 = 0x8000000100EC6940;
          v44 = 0xD000000000000010;
        }
      }
      else
      {
        v44 = 0x7972616D6972702ELL;
        v45 = 0xE800000000000000;
      }
      v54 = sub_100016940(v44, v45, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v38 + 24, v38 + 32);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v50, "could not open keymap for reading identifier: %{private,mask.hash}s, sequence: %{public}s", (uint8_t *)v38, 0x20u);
      v47 = v49;
      swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v38, -1, -1);

      (*(void (**)(char *, uint64_t))(v14 + 8))(v51, v13);
    }
    else
    {

      sub_1000126B0((uint64_t)v9, type metadata accessor for BeaconIdentifier);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    }
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return v33;
}

uint64_t sub_1006347F8@<X0>(char a1@<W1>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;

  v31 = a2;
  v3 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DirectorySequence(0);
  v29 = *(_QWORD *)(v6 - 8);
  v30 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v28 - v14;
  sub_100634A9C(a1, (uint64_t)&v28 - v14);
  v16 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v28 = v15;
  NSFileManager.flatSequence(at:includingPropertiesForKeys:)(v15, 0);

  DirectorySequence.next()(v17);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v18(v5, 1, v9) == 1)
  {
LABEL_7:
    (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v30);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v28, v9);
    v25 = 1;
    v26 = v31;
  }
  else
  {
    v19 = *(uint64_t (**)(char *, char *, uint64_t))(v10 + 32);
    while (1)
    {
      v20 = v19(v13, v5, v9);
      v21 = URL.pathExtension.getter(v20);
      if (v21 == 0x70616D79656BLL && v22 == 0xE600000000000000)
        break;
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, 0x70616D79656BLL, 0xE600000000000000, 0);
      swift_bridgeObjectRelease();
      if ((v23 & 1) != 0)
        goto LABEL_9;
      v24 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      DirectorySequence.next()(v24);
      if (v18(v5, 1, v9) == 1)
        goto LABEL_7;
    }
    swift_bridgeObjectRelease();
LABEL_9:
    (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v30);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v28, v9);
    v26 = v31;
    v19(v31, v13, v9);
    v25 = 0;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v26, v25, 1, v9);
}

uint64_t sub_100634A9C@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];

  v21[1] = a2;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)v21 - v10;
  v12 = UUID.uuidString.getter(v9);
  URL.appendingPathComponent(_:isDirectory:)(v12, v13, 1);
  swift_bridgeObjectRelease();
  v14 = type metadata accessor for BeaconIdentifier(0);
  v15 = UUID.uuidString.getter(v14);
  URL.appendingPathComponent(_:isDirectory:)(v15, v16, 1);
  swift_bridgeObjectRelease();
  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v8, v4);
  if (a1)
  {
    if (a1 != 1)
    {
      URL.init(fileURLWithPath:)(0xD000000000000012, 0x8000000100EDD780);
      return ((uint64_t (*)(char *, uint64_t))v17)(v11, v4);
    }
    v18 = v2[16];
    v19 = v2[17];
  }
  else
  {
    v18 = v2[14];
    v19 = v2[15];
  }
  URL.appendingPathComponent(_:isDirectory:)(v18, v19, 1);
  return ((uint64_t (*)(char *, uint64_t))v17)(v11, v4);
}

Swift::Int sub_100634C0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  v3 = type metadata accessor for UUID(0);
  v4 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v8, v3, v4);
  type metadata accessor for BeaconIdentifier(0);
  dispatch thunk of Hashable.hash(into:)(v8, v3, v4);
  if (*(_BYTE *)(v1 + *(int *)(a1 + 20)))
  {
    if (*(_BYTE *)(v1 + *(int *)(a1 + 20)) == 1)
    {
      v5 = 0xE900000000000079;
      v6 = 0x7261646E6F636553;
    }
    else
    {
      v5 = 0xEF736E6F69746163;
      v6 = 0x6F4C657275636553;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v6 = 0x7972616D697250;
  }
  String.hash(into:)(v8, v6, v5);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100634D30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = type metadata accessor for UUID(0);
  v6 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  type metadata accessor for BeaconIdentifier(0);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  if (*(_BYTE *)(v2 + *(int *)(a2 + 20)))
  {
    if (*(_BYTE *)(v2 + *(int *)(a2 + 20)) == 1)
    {
      v7 = 0xE900000000000079;
      v8 = 0x7261646E6F636553;
    }
    else
    {
      v7 = 0xEF736E6F69746163;
      v8 = 0x6F4C657275636553;
    }
  }
  else
  {
    v7 = 0xE700000000000000;
    v8 = 0x7972616D697250;
  }
  String.hash(into:)(a1, v8, v7);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_100634E38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9);
  v4 = type metadata accessor for UUID(0);
  v5 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v9, v4, v5);
  type metadata accessor for BeaconIdentifier(0);
  dispatch thunk of Hashable.hash(into:)(v9, v4, v5);
  if (*(_BYTE *)(v2 + *(int *)(a2 + 20)))
  {
    if (*(_BYTE *)(v2 + *(int *)(a2 + 20)) == 1)
    {
      v6 = 0xE900000000000079;
      v7 = 0x7261646E6F636553;
    }
    else
    {
      v6 = 0xEF736E6F69746163;
      v7 = 0x6F4C657275636553;
    }
  }
  else
  {
    v6 = 0xE700000000000000;
    v7 = 0x7972616D697250;
  }
  String.hash(into:)(v9, v7, v6);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100634F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((static UUID.== infix(_:_:)(a1, a2) & 1) != 0
    && (v6 = type metadata accessor for BeaconIdentifier(0),
        (static UUID.== infix(_:_:)(a1 + *(int *)(v6 + 20), a2 + *(int *)(v6 + 20)) & 1) != 0))
  {
    return sub_100510B14(*(_BYTE *)(a1 + *(int *)(a3 + 20)), *(_BYTE *)(a2 + *(int *)(a3 + 20)));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100634FC8()
{
  return sub_100006204(&qword_101101F58, type metadata accessor for BeaconKeyServiceBuilder.FileKey, (uint64_t)&unk_100E465D8);
}

uint64_t sub_100634FF4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7388);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7388);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000017, 0x8000000100E46520);
}

uint64_t sub_100635074(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a5;
  v10 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v5 + qword_1011025A8) = 0;
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v29 = a1;
  v17(v5 + qword_101102580, a1, v13);
  if (!HIDWORD(a2))
  {
    *(_DWORD *)(v5 + qword_101102590) = a2;
    *(_DWORD *)(v5 + qword_101102598) = a2;
    *(_DWORD *)(v5 + qword_1011025A0) = a2;
    *(_QWORD *)(v5 + qword_101102588) = a3;
    sub_10001A9A8(&qword_101102070);
    sub_1000193A4(&qword_101102078, &qword_101102070, asc_100E46D70);
    v18 = Set.init(minimumCapacity:)(a3 / 256);
    v19 = sub_10001A9A8((uint64_t *)&unk_101108E40);
    v20 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(256, v19);
    v20[2] = 256;
    v20[4] = v18;
    v20[5] = v18;
    for (i = 6; i != 260; ++i)
    {
      v20[i] = v18;
      swift_bridgeObjectRetain(v18);
    }
    *(_QWORD *)(v5 + qword_1011025B0) = v20;
    sub_10000F9B8(a4, (uint64_t)v12, &qword_1010FBA40);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
    {
      swift_bridgeObjectRetain(v18);
      sub_100004048(a4, &qword_1010FBA40);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v29, v13);
      sub_100004048((uint64_t)v12, &qword_1010FBA40);
      return v5;
    }
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    v22 = v28;
    if (!HIDWORD(v28))
    {
      swift_bridgeObjectRetain(v18);
      v23 = v22;
      v24 = v30;
      sub_100637F40((uint64_t)v16, v23, sub_100646508, (void (*)(void *, id *, uint64_t, uint64_t))sub_100638160);
      if (v24)
        swift_release(v5);
      sub_100004048(a4, &qword_1010FBA40);
      v25 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      v25(v29, v13);
      v25((uint64_t)v16, v13);
      return v5;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  __break(1u);
  return result;
}

uint64_t sub_100635384(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a5;
  v10 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v5 + qword_1011025A8) = 0;
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v29 = a1;
  v17(v5 + qword_101102580, a1, v13);
  if (!HIDWORD(a2))
  {
    *(_DWORD *)(v5 + qword_101102590) = a2;
    *(_DWORD *)(v5 + qword_101102598) = a2;
    *(_DWORD *)(v5 + qword_1011025A0) = a2;
    *(_QWORD *)(v5 + qword_101102588) = a3;
    sub_10001A9A8(&qword_101110050);
    sub_1000193A4(&qword_1011020B0, &qword_101110050, asc_100E46D70);
    v18 = Set.init(minimumCapacity:)(a3 / 256);
    v19 = sub_10001A9A8(&qword_101109060);
    v20 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(256, v19);
    v20[2] = 256;
    v20[4] = v18;
    v20[5] = v18;
    for (i = 6; i != 260; ++i)
    {
      v20[i] = v18;
      swift_bridgeObjectRetain(v18);
    }
    *(_QWORD *)(v5 + qword_1011025B0) = v20;
    sub_10000F9B8(a4, (uint64_t)v12, &qword_1010FBA40);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
    {
      swift_bridgeObjectRetain(v18);
      sub_100004048(a4, &qword_1010FBA40);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v29, v13);
      sub_100004048((uint64_t)v12, &qword_1010FBA40);
      return v5;
    }
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    v22 = v28;
    if (!HIDWORD(v28))
    {
      swift_bridgeObjectRetain(v18);
      v23 = v22;
      v24 = v30;
      sub_100637F40((uint64_t)v16, v23, sub_10064B360, (void (*)(void *, id *, uint64_t, uint64_t))sub_1006383B4);
      if (v24)
        swift_release(v5);
      sub_100004048(a4, &qword_1010FBA40);
      v25 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      v25(v29, v13);
      v25((uint64_t)v16, v13);
      return v5;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  __break(1u);
  return result;
}

uint64_t sub_100635694(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  _QWORD *v8;
  Swift::UInt32 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE v27[24];

  v11 = *(_QWORD *)(a1 + qword_101102588);
  if (__OFSUB__(v11, 1))
  {
    __break(1u);
    goto LABEL_16;
  }
  v5 = a3;
  v6 = a2;
  v4 = a1;
  v10 = qword_1011025A8;
  if (v11 - 1 >= *(_QWORD *)(a1 + qword_1011025A8))
    goto LABEL_6;
  v3 = static os_log_type_t.error.getter(a1);
  if (qword_1010E9DF8 != -1)
    goto LABEL_20;
  while (1)
  {
    v12 = qword_1011B73B8;
    v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    result = swift_allocObject(v13, 112, 7);
    *(_OWORD *)(result + 16) = xmmword_100E22B10;
    *(_QWORD *)(result + 56) = &type metadata for Int;
    *(_QWORD *)(result + 64) = &protocol witness table for Int;
    *(_QWORD *)(result + 32) = v11;
    v15 = *(_QWORD *)(v4 + v10);
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      break;
    *(_QWORD *)(result + 96) = &type metadata for Int;
    *(_QWORD *)(result + 104) = &protocol witness table for Int;
    *(_QWORD *)(result + 72) = v17;
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v12, "Expected %ld keys but received %ld", v25, v26);
    swift_bridgeObjectRelease();
LABEL_6:
    sub_10001BBBC(v6, v5);
    LOBYTE(v3) = Data.subscript.getter(0, v6, v5);
    sub_10001BC14(v6, v5);
    v3 = v3;
    v11 = qword_1011025A0;
    v9 = *(_DWORD *)(v4 + qword_1011025A0);
    v7 = (_QWORD **)(v4 + qword_1011025B0);
    swift_beginAccess(v4 + qword_1011025B0, v27, 33, 0);
    v8 = *v7;
    sub_10001BBBC(v6, v5);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
    *v7 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
LABEL_16:
      v8 = sub_1008C5E74(v8);
      *v7 = v8;
    }
    if (v8[2] <= v3)
    {
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    v3 = (unint64_t)&v8[v3 + 4];
    sub_10001BBBC(v6, v5);
    sub_100A11D3C((uint64_t)&v25, v6, v5, v9);
    sub_10001BC14(v25, v26);
    swift_endAccess(v27);
    result = sub_10001BC14(v6, v5);
    v19 = *(_DWORD *)(v4 + v11);
    if (v19 < *(_DWORD *)(v4 + qword_101102590))
      *(_DWORD *)(v4 + qword_101102590) = v19;
    if (*(_DWORD *)(v4 + qword_101102598) < v19)
      *(_DWORD *)(v4 + qword_101102598) = v19;
    v20 = *(_DWORD *)(v4 + v11);
    v21 = __CFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_18;
    *(_DWORD *)(v4 + v11) = v22;
    v23 = *(_QWORD *)(v4 + v10);
    v16 = __OFADD__(v23, 1);
    v24 = v23 + 1;
    if (!v16)
    {
      *(_QWORD *)(v4 + v10) = v24;
      return result;
    }
LABEL_19:
    __break(1u);
LABEL_20:
    swift_once(&qword_1010E9DF8, sub_100654FE4);
  }
  __break(1u);
  return result;
}

uint64_t sub_100635910(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  _QWORD *v8;
  Swift::UInt32 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE v27[24];

  v11 = *(_QWORD *)(a1 + qword_101102588);
  if (__OFSUB__(v11, 1))
  {
    __break(1u);
    goto LABEL_16;
  }
  v5 = a3;
  v6 = a2;
  v4 = a1;
  v10 = qword_1011025A8;
  if (v11 - 1 >= *(_QWORD *)(a1 + qword_1011025A8))
    goto LABEL_6;
  v3 = static os_log_type_t.error.getter(a1);
  if (qword_1010E9DF8 != -1)
    goto LABEL_20;
  while (1)
  {
    v12 = qword_1011B73B8;
    v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    result = swift_allocObject(v13, 112, 7);
    *(_OWORD *)(result + 16) = xmmword_100E22B10;
    *(_QWORD *)(result + 56) = &type metadata for Int;
    *(_QWORD *)(result + 64) = &protocol witness table for Int;
    *(_QWORD *)(result + 32) = v11;
    v15 = *(_QWORD *)(v4 + v10);
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      break;
    *(_QWORD *)(result + 96) = &type metadata for Int;
    *(_QWORD *)(result + 104) = &protocol witness table for Int;
    *(_QWORD *)(result + 72) = v17;
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v12, "Expected %ld keys but received %ld", v25, v26);
    swift_bridgeObjectRelease();
LABEL_6:
    sub_10001BBBC(v6, v5);
    LOBYTE(v3) = Data.subscript.getter(0, v6, v5);
    sub_10001BC14(v6, v5);
    v3 = v3;
    v11 = qword_1011025A0;
    v9 = *(_DWORD *)(v4 + qword_1011025A0);
    v7 = (_QWORD **)(v4 + qword_1011025B0);
    swift_beginAccess(v4 + qword_1011025B0, v27, 33, 0);
    v8 = *v7;
    sub_10001BBBC(v6, v5);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
    *v7 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
LABEL_16:
      v8 = sub_1008C5F3C(v8);
      *v7 = v8;
    }
    if (v8[2] <= v3)
    {
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    v3 = (unint64_t)&v8[v3 + 4];
    sub_10001BBBC(v6, v5);
    sub_100A13CDC((uint64_t)&v25, v6, v5, v9);
    sub_10001BC14(v25, v26);
    swift_endAccess(v27);
    result = sub_10001BC14(v6, v5);
    v19 = *(_DWORD *)(v4 + v11);
    if (v19 < *(_DWORD *)(v4 + qword_101102590))
      *(_DWORD *)(v4 + qword_101102590) = v19;
    if (*(_DWORD *)(v4 + qword_101102598) < v19)
      *(_DWORD *)(v4 + qword_101102598) = v19;
    v20 = *(_DWORD *)(v4 + v11);
    v21 = __CFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_18;
    *(_DWORD *)(v4 + v11) = v22;
    v23 = *(_QWORD *)(v4 + v10);
    v16 = __OFADD__(v23, 1);
    v24 = v23 + 1;
    if (!v16)
    {
      *(_QWORD *)(v4 + v10) = v24;
      return result;
    }
LABEL_19:
    __break(1u);
LABEL_20:
    swift_once(&qword_1010E9DF8, sub_100654FE4);
  }
  __break(1u);
  return result;
}

uint64_t sub_100635B8C()
{
  return sub_100635C34(32, (void (*)(uint64_t, uint64_t, uint64_t *, _QWORD **, char *))sub_100636F98);
}

uint64_t sub_100635BE0()
{
  return sub_100635C34(10, (void (*)(uint64_t, uint64_t, uint64_t *, _QWORD **, char *))sub_10063776C);
}

uint64_t sub_100635C34(int a1, void (*a2)(uint64_t, uint64_t, uint64_t *, _QWORD **, char *))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  NSString v40;
  unsigned __int8 v41;
  uint64_t v42;
  NSString v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unsigned __int8 v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  id v54;
  unint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t inited;
  NSString *v62;
  NSString *v63;
  unint64_t v64;
  char *v65;
  Class isa;
  uint64_t v67;
  NSString v68;
  id v69;
  unsigned __int8 v70;
  id v71;
  id v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t *, _QWORD **, char *);
  uint64_t i;
  id v82;
  unsigned int v83;
  id v84;
  uint64_t v85;
  _QWORD *v86;
  id v87;
  void *v88;
  void *v89;
  uint64_t v90;
  void (*v91)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void (*v92)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void *v93;
  unint64_t v94;
  char *v95;
  id v96;
  uint64_t v97;
  _QWORD v98[2];
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  unint64_t v105;
  void (*v106)(char *, uint64_t);
  unint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t, uint64_t *, _QWORD **, char *);
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  int v126;
  int v127;
  int v128;
  id v129;
  unint64_t v130;
  _QWORD *v131;
  void *v132;
  uint64_t v133;
  void (*v134)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  char v135[8];
  uint64_t v136;
  unint64_t v137;

  v109 = a2;
  v4 = v2;
  v112 = type metadata accessor for URLResourceValues(0);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v113 = (char *)v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = type metadata accessor for URL(0);
  v121 = *(_QWORD **)(v122 - 8);
  v6 = __chkstk_darwin(v122);
  v110 = (char *)v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v120 = (char *)v98 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v98 - v11;
  v13 = qword_1011025A8;
  v14 = *(_QWORD *)(v2 + qword_101102588);
  if (*(_QWORD *)(v2 + qword_1011025A8) < v14)
  {
    v15 = static os_log_type_t.error.getter(v10);
    if (qword_1010E9DF8 != -1)
      swift_once(&qword_1010E9DF8, sub_100654FE4);
    v16 = qword_1011B73B8;
    v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v18 = swift_allocObject(v17, 112, 7);
    *(_OWORD *)(v18 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v18 + 56) = &type metadata for Int;
    *(_QWORD *)(v18 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v18 + 32) = v14;
    v19 = *(_QWORD *)(v4 + v13);
    *(_QWORD *)(v18 + 96) = &type metadata for Int;
    *(_QWORD *)(v18 + 104) = &protocol witness table for Int;
    *(_QWORD *)(v18 + 72) = v19;
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Expected %ld keys but only received %ld", v98[0], v98[1]);
    swift_bridgeObjectRelease();
  }
  v128 = a1;
  v20 = sub_1006264B8((uint64_t)&v128, (uint64_t)&v129);
  v22 = v21;
  v127 = *(_DWORD *)(v4 + qword_101102590);
  v23 = sub_1006264B8((uint64_t)&v127, (uint64_t)&v128);
  v25 = v24;
  v126 = *(_DWORD *)(v4 + qword_101102598);
  v26 = sub_1006264B8((uint64_t)&v126, (uint64_t)&v127);
  v28 = v27;
  v29 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v30 = __DataStorage.init(length:)(4128);
  v136 = 0x102000000000;
  v137 = v30 | 0x4000000000000000;
  Data._Representation.subscript.setter(75, 0);
  Data._Representation.subscript.setter(73, 1);
  Data._Representation.subscript.setter(77, 2);
  Data._Representation.subscript.setter(1, 3);
  v117 = v20;
  v118 = v22;
  v31 = v119;
  sub_1006458B0(v20, v22);
  v116 = v23;
  v119 = v25;
  sub_1006458B0(v23, v25);
  v114 = v26;
  v115 = v28;
  sub_1006458B0(v26, v28);
  v32 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v33 = sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
  v108 = v4;
  v34 = v4 + qword_101102580;
  URL.deletingLastPathComponent()(v33);
  static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v12, 0);
  v35 = v121;
  v36 = (uint64_t (*)(char *, uint64_t))v121[1];
  v37 = v12;
  v38 = v122;
  v39 = v36(v37, v122);
  URL.path.getter(v39);
  v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v41 = objc_msgSend(v32, "fileExistsAtPath:", v40);

  if ((v41 & 1) == 0)
  {
    URL.path.getter(v42);
    v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    objc_msgSend(v32, "createFileAtPath:contents:attributes:", v43, 0, 0);

  }
  sub_10000F4A0(0, &qword_101101FD0, NSFileHandle_ptr);
  v44 = (void (*)(char *, uint64_t, uint64_t))v35[2];
  v45 = (uint64_t)v120;
  v44(v120, v34, v38);
  v46 = (char *)sub_100636E84(v45, (SEL *)&selRef_fileHandleForUpdatingURL_error_);
  if (v31)
  {
    sub_10001BC14(v136, v137);

LABEL_9:
    sub_10001BC14(v114, v115);
    sub_10001BC14(v116, v119);
    v47 = v117;
    v48 = v118;
    return sub_10001BC14(v47, v48);
  }
  v49 = v46;
  v129 = 0;
  v50 = objc_msgSend(v46, "truncateAtOffset:error:", 0, &v129);
  v51 = v129;
  if ((v50 & 1) == 0)
  {
    v56 = v129;
    _convertNSErrorToError(_:)(v51);

    swift_willThrow(v57);
    sub_10001BC14(v114, v115);
    sub_10001BC14(v116, v119);
    sub_10001BC14(v117, v118);
LABEL_13:
    v47 = v136;
    v48 = v137;
    return sub_10001BC14(v47, v48);
  }
  v121 = v32;
  v52 = v136;
  v53 = v137;
  v129 = (id)v136;
  v130 = v137;
  v54 = v51;
  sub_10001BBBC(v52, v53);
  v55 = sub_100035530();
  NSFileHandle.write<A>(contentsOf:)(&v129, &type metadata for Data, v55);
  v107 = v55;
  sub_10001BC14(v52, v53);
  NSFileHandle.seekToEnd()();
  if (v59)
  {
    sub_10001BC14(v52, v53);

    goto LABEL_9;
  }
  v120 = v49;
  v106 = (void (*)(char *, uint64_t))v36;
  v60 = sub_10001A9A8(&qword_101102060);
  inited = swift_initStackObject(v60, v135);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = NSFileProtectionKey;
  *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
  v62 = NSFileProtectionKey;
  v63 = NSFileProtectionCompleteUntilFirstUserAuthentication;
  v64 = sub_1006B9234(inited);
  v65 = v113;
  URLResourceValues.init()(v64);
  sub_10047B07C(v64);
  swift_bridgeObjectRelease();
  type metadata accessor for FileAttributeKey(0);
  sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v67 = swift_bridgeObjectRelease();
  URL.path.getter(v67);
  v68 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v129 = 0;
  v69 = v121;
  v70 = objc_msgSend(v121, "setAttributes:ofItemAtPath:error:", isa, v68, &v129);

  v71 = v129;
  if ((v70 & 1) == 0)
  {
    v74 = v129;
    _convertNSErrorToError(_:)(v71);

    swift_willThrow(v75);
    sub_10001BC14(v114, v115);
    sub_10001BC14(v116, v119);
    sub_10001BC14(v117, v118);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v65, v112);
    goto LABEL_13;
  }
  v72 = v129;
  URLResourceValues.isExcludedFromBackup.setter(1);
  v73 = v122;
  v44(v110, v34, v122);
  URL.setResourceValues(_:)(v65);
  v76 = static Array._allocateBufferUninitialized(minimumCapacity:)(256, &type metadata for UInt64);
  *(_QWORD *)(v76 + 16) = 256;
  bzero((void *)(v76 + 32), 0x800uLL);
  v125 = (_QWORD *)v76;
  v77 = static Array._allocateBufferUninitialized(minimumCapacity:)(256, &type metadata for UInt64);
  *(_QWORD *)(v77 + 16) = 256;
  bzero((void *)(v77 + 32), 0x800uLL);
  v124 = v77;
  v78 = objc_autoreleasePoolPush();
  v79 = v108;
  v80 = v109;
  v109(v108, 0, &v124, &v125, v120);
  for (i = 1; ; ++i)
  {
    objc_autoreleasePoolPop(v78);
    if (i == 256)
      break;
    v78 = objc_autoreleasePoolPush();
    v80(v79, i, &v124, &v125, v120);
  }
  v129 = 0;
  v82 = v120;
  v83 = objc_msgSend(v120, "seekToOffset:error:", 32, &v129);
  v84 = v129;
  if (v83)
  {
    v85 = v124;
    v86 = v125;
    v87 = v129;
    v88 = objc_autoreleasePoolPush();
    v101 = v85;
    if (*(_QWORD *)(v85 + 16))
    {
      v89 = v88;
      v100 = v101 + 32;
      v99 = &v124;
      v123 = *(_QWORD *)(v101 + 32);
      if ((swift_isUniquelyReferenced_nonNull_native(v86) & 1) == 0)
        v86 = sub_1008C5E60(v86);
      v104 = v89;
      v102 = -255;
      if (v86[2])
      {
        v90 = sub_1006264B8((uint64_t)(v86 + 4), (uint64_t)(v86 + 5));
        v92 = v91;
        v93 = (void *)sub_1006264B8((uint64_t)&v123, (uint64_t)v99);
        v108 = v90;
        v133 = v90;
        v134 = v92;
        v109 = (void (*)(uint64_t, uint64_t, uint64_t *, _QWORD **, char *))v92;
        v131 = &type metadata for Data;
        v132 = &protocol witness table for Data;
        v129 = v93;
        v130 = v94;
        v105 = v94;
        v95 = (char *)&loc_10063682C + dword_100636E24[sub_10001AA44(&v129, (uint64_t)&type metadata for Data)[1] >> 62];
        v103 = 0;
        __asm { BR              X9 }
      }
      __break(1u);
    }
    __break(1u);
  }
  v96 = v129;
  _convertNSErrorToError(_:)(v84);

  swift_willThrow(v97);
  sub_10001BC14(v114, v115);
  sub_10001BC14(v116, v119);
  sub_10001BC14(v117, v118);
  v106(v110, v73);
  (*(void (**)(char *, uint64_t))(v111 + 8))(v65, v112);
  sub_10001BC14(v136, v137);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id sub_100636E34(uint64_t a1)
{
  return sub_100636E84(a1, (SEL *)&selRef_fileHandleForUpdatingURL_error_);
}

id sub_100636E84(uint64_t a1, SEL *a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v17;

  v4 = v2;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  v7 = v6;
  v17 = 0;
  v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), *a2, v6, &v17);

  v9 = v17;
  if (v8)
  {
    v10 = type metadata accessor for URL(0);
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
    v12 = v9;
    v11(a1, v10);
  }
  else
  {
    v13 = v17;
    _convertNSErrorToError(_:)(v9);

    swift_willThrow(v14);
    v15 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
  }
  return v8;
}

uint64_t sub_100636F98(__int128 *a1, unint64_t a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v4;
  __int128 *v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  const void **v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt64 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t result;
  unint64_t v41;
  int64_t v42;
  int v43;
  __int128 __dst;
  int *v45;
  __int128 *p_dst;
  _QWORD *v47;
  void *v48;
  uint64_t v49;
  __int128 *v50;
  char v51[24];

  v7 = a1;
  v8 = (uint64_t)a1 + qword_1011025B0;
  swift_beginAccess((char *)a1 + qword_1011025B0, v51, 0, 0);
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v8 + 16) > a2)
  {
    v41 = a2;
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8 * a2 + 32) + 16);
    a2 = *a3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
    *a3 = a2;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_48;
  }
  __break(1u);
LABEL_48:
  a2 = (unint64_t)sub_1008C5E60((_QWORD *)a2);
LABEL_4:
  if (*(_QWORD *)(a2 + 16) <= v41)
  {
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  *(_QWORD *)(a2 + 8 * v41 + 32) = v4;
  *a3 = a2;
  if (!v4)
  {
    a3 = a4;
    v7 = (__int128 *)*a4;
    result = swift_isUniquelyReferenced_nonNull_native(*a4);
    *a4 = (unint64_t)v7;
    if ((result & 1) != 0)
      goto LABEL_44;
    goto LABEL_53;
  }
  if (*(_QWORD *)(*(_QWORD *)v8 + 16) <= v41)
    goto LABEL_50;
  v10 = *(_QWORD *)((char *)v7 + qword_101102588);
  if ((unsigned __int128)(v10 * (__int128)28) >> 64 == (28 * v10) >> 63)
  {
    v11 = *(_QWORD *)(*(_QWORD *)v8 + 8 * v41 + 32);
    v12 = 28 * v10 / 256;
    swift_bridgeObjectRetain(v11);
    v49 = sub_100649B10(v12);
    v50 = v13;
    v14 = 1 << *(_BYTE *)(v11 + 32);
    v15 = -1;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    v16 = v15 & *(_QWORD *)(v11 + 56);
    v42 = (unint64_t)(v14 + 63) >> 6;
    swift_bridgeObjectRetain(v11);
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
LABEL_29:
      v21 = *(_QWORD *)(v11 + 48) + 24 * v17;
      v23 = *(_QWORD *)v21;
      v22 = *(_QWORD *)(v21 + 8);
      v43 = *(_DWORD *)(v21 + 16);
      v47 = &type metadata for UnsafeRawBufferPointer;
      v48 = &protocol witness table for UnsafeRawBufferPointer;
      v45 = &v43;
      p_dst = &__dst;
      v24 = (const void **)sub_10001AA44(&v45, (uint64_t)&type metadata for UnsafeRawBufferPointer);
      v25 = *v24;
      if (*v24 && (v26 = v24[1], v27 = v26 - v25, v26 != v25))
      {
        if (v27 <= 14)
        {
          *(_QWORD *)((char *)&__dst + 6) = 0;
          *(_QWORD *)&__dst = 0;
          BYTE14(__dst) = (_BYTE)v26 - (_BYTE)v25;
          memcpy(&__dst, v25, v26 - v25);
          v28 = __dst;
          v29 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
          sub_10001BBBC(v23, v22);
        }
        else
        {
          v31 = type metadata accessor for __DataStorage(0);
          swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
          sub_10001BBBC(v23, v22);
          v32 = __DataStorage.init(bytes:length:)(v25, v27);
          v33 = v32;
          if ((unint64_t)v27 >= 0x7FFFFFFF)
          {
            v34 = type metadata accessor for Data.RangeReference(0);
            v28 = swift_allocObject(v34, 32, 7);
            *(_QWORD *)(v28 + 16) = 0;
            *(_QWORD *)(v28 + 24) = v27;
            v29 = v33 | 0x8000000000000000;
          }
          else
          {
            v28 = v27 << 32;
            v29 = v32 | 0x4000000000000000;
          }
        }
      }
      else
      {
        sub_10001BBBC(v23, v22);
        v28 = 0;
        v29 = 0xC000000000000000;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v45);
      *(_QWORD *)&__dst = v23;
      *((_QWORD *)&__dst + 1) = v22;
      v47 = &type metadata for Data;
      v48 = &protocol witness table for Data;
      v45 = (int *)v28;
      p_dst = (__int128 *)v29;
      v30 = (char *)&loc_100637340 + dword_10063775C[sub_10001AA44(&v45, (uint64_t)&type metadata for Data)[1] >> 62];
      __asm { BR              X9 }
    }
    if (v42 > 1)
    {
      v18 = *(_QWORD *)(v11 + 64);
      v19 = 1;
      if (v18)
        goto LABEL_28;
      v19 = 2;
      if (v42 <= 2)
        goto LABEL_38;
      v18 = *(_QWORD *)(v11 + 72);
      if (v18)
        goto LABEL_28;
      v19 = 3;
      if (v42 <= 3)
        goto LABEL_38;
      v18 = *(_QWORD *)(v11 + 80);
      if (v18)
        goto LABEL_28;
      v19 = 4;
      if (v42 <= 4)
        goto LABEL_38;
      v18 = *(_QWORD *)(v11 + 88);
      if (v18)
        goto LABEL_28;
      v19 = 5;
      if (v42 <= 5)
        goto LABEL_38;
      v18 = *(_QWORD *)(v11 + 96);
      if (v18)
      {
LABEL_28:
        v17 = __clz(__rbit64(v18)) + (v19 << 6);
        goto LABEL_29;
      }
      v20 = 6;
      if (v42 > 6)
      {
        v18 = *(_QWORD *)(v11 + 104);
        if (v18)
        {
          v19 = 6;
          goto LABEL_28;
        }
        while (1)
        {
          v19 = v20 + 1;
          if (__OFADD__(v20, 1))
            goto LABEL_52;
          if (v19 >= v42)
            break;
          v18 = *(_QWORD *)(v11 + 56 + 8 * v19);
          ++v20;
          if (v18)
            goto LABEL_28;
        }
      }
    }
LABEL_38:
    swift_release(v11);
    swift_bridgeObjectRelease();
    v8 = v49;
    v7 = v50;
    v35 = NSFileHandle.offset()();
    if (v36)
      return sub_10001BC14(v8, (unint64_t)v7);
    a3 = (unint64_t *)v35;
    a2 = *a4;
    v37 = swift_isUniquelyReferenced_nonNull_native(*a4);
    *a4 = a2;
    if ((v37 & 1) != 0)
    {
LABEL_40:
      if (*(_QWORD *)(a2 + 16) <= (int64_t)v41)
        __break(1u);
      *(_QWORD *)(a2 + 8 * v41 + 32) = a3;
      *a4 = a2;
      v45 = (int *)v8;
      p_dst = v7;
      v38 = sub_100035530();
      NSFileHandle.write<A>(contentsOf:)(&v45, &type metadata for Data, v38);
      return sub_10001BC14(v8, (unint64_t)v7);
    }
LABEL_55:
    a2 = (unint64_t)sub_1008C5E60((_QWORD *)a2);
    goto LABEL_40;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  result = (uint64_t)sub_1008C5E60(v7);
  v7 = (__int128 *)result;
LABEL_44:
  if (*((_QWORD *)v7 + 2) <= v41)
  {
    __break(1u);
    goto LABEL_55;
  }
  *((_QWORD *)v7 + v41 + 4) = 0;
  *a3 = (unint64_t)v7;
  return result;
}

uint64_t sub_10063776C(__int128 *a1, unint64_t a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v4;
  __int128 *v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  const void **v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt64 v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t result;
  unint64_t v43;
  int64_t v44;
  int v45;
  __int128 __dst;
  int *v47;
  __int128 *p_dst;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  __int128 *v52;
  char v53[24];

  v7 = a1;
  v8 = (uint64_t)a1 + qword_1011025B0;
  swift_beginAccess((char *)a1 + qword_1011025B0, v53, 0, 0);
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v8 + 16) > a2)
  {
    v43 = a2;
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8 * a2 + 32) + 16);
    a2 = *a3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
    *a3 = a2;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_4;
    goto LABEL_48;
  }
  __break(1u);
LABEL_48:
  a2 = (unint64_t)sub_1008C5E60((_QWORD *)a2);
LABEL_4:
  if (*(_QWORD *)(a2 + 16) <= v43)
  {
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  *(_QWORD *)(a2 + 8 * v43 + 32) = v4;
  *a3 = a2;
  if (!v4)
  {
    a3 = a4;
    v7 = (__int128 *)*a4;
    result = swift_isUniquelyReferenced_nonNull_native(*a4);
    *a4 = (unint64_t)v7;
    if ((result & 1) != 0)
      goto LABEL_44;
    goto LABEL_53;
  }
  if (*(_QWORD *)(*(_QWORD *)v8 + 16) <= v43)
    goto LABEL_50;
  v10 = *(_QWORD *)((char *)v7 + qword_101102588);
  v11 = (unsigned __int128)(v10 * (__int128)6) >> 64;
  v12 = 6 * v10;
  if (v11 == v12 >> 63)
  {
    v13 = *(_QWORD *)(*(_QWORD *)v8 + 8 * v43 + 32);
    v14 = v12 / 256;
    swift_bridgeObjectRetain(v13);
    v51 = sub_100649B10(v14);
    v52 = v15;
    v16 = 1 << *(_BYTE *)(v13 + 32);
    v17 = -1;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    v18 = v17 & *(_QWORD *)(v13 + 56);
    v44 = (unint64_t)(v16 + 63) >> 6;
    swift_bridgeObjectRetain(v13);
    if (v18)
    {
      v19 = __clz(__rbit64(v18));
LABEL_29:
      v23 = *(_QWORD *)(v13 + 48) + 24 * v19;
      v25 = *(_QWORD *)v23;
      v24 = *(_QWORD *)(v23 + 8);
      v45 = *(_DWORD *)(v23 + 16);
      v49 = &type metadata for UnsafeRawBufferPointer;
      v50 = &protocol witness table for UnsafeRawBufferPointer;
      v47 = &v45;
      p_dst = &__dst;
      v26 = (const void **)sub_10001AA44(&v47, (uint64_t)&type metadata for UnsafeRawBufferPointer);
      v27 = *v26;
      if (*v26 && (v28 = v26[1], v29 = v28 - v27, v28 != v27))
      {
        if (v29 <= 14)
        {
          *(_QWORD *)((char *)&__dst + 6) = 0;
          *(_QWORD *)&__dst = 0;
          BYTE14(__dst) = (_BYTE)v28 - (_BYTE)v27;
          memcpy(&__dst, v27, v28 - v27);
          v30 = __dst;
          v31 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
          sub_10001BBBC(v25, v24);
        }
        else
        {
          v33 = type metadata accessor for __DataStorage(0);
          swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
          sub_10001BBBC(v25, v24);
          v34 = __DataStorage.init(bytes:length:)(v27, v29);
          v35 = v34;
          if ((unint64_t)v29 >= 0x7FFFFFFF)
          {
            v36 = type metadata accessor for Data.RangeReference(0);
            v30 = swift_allocObject(v36, 32, 7);
            *(_QWORD *)(v30 + 16) = 0;
            *(_QWORD *)(v30 + 24) = v29;
            v31 = v35 | 0x8000000000000000;
          }
          else
          {
            v30 = v29 << 32;
            v31 = v34 | 0x4000000000000000;
          }
        }
      }
      else
      {
        sub_10001BBBC(v25, v24);
        v30 = 0;
        v31 = 0xC000000000000000;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v47);
      *(_QWORD *)&__dst = v25;
      *((_QWORD *)&__dst + 1) = v24;
      v49 = &type metadata for Data;
      v50 = &protocol witness table for Data;
      v47 = (int *)v30;
      p_dst = (__int128 *)v31;
      v32 = (char *)&loc_100637B14
          + *((int *)qword_100637F30 + (sub_10001AA44(&v47, (uint64_t)&type metadata for Data)[1] >> 62));
      __asm { BR              X9 }
    }
    if (v44 > 1)
    {
      v20 = *(_QWORD *)(v13 + 64);
      v21 = 1;
      if (v20)
        goto LABEL_28;
      v21 = 2;
      if (v44 <= 2)
        goto LABEL_38;
      v20 = *(_QWORD *)(v13 + 72);
      if (v20)
        goto LABEL_28;
      v21 = 3;
      if (v44 <= 3)
        goto LABEL_38;
      v20 = *(_QWORD *)(v13 + 80);
      if (v20)
        goto LABEL_28;
      v21 = 4;
      if (v44 <= 4)
        goto LABEL_38;
      v20 = *(_QWORD *)(v13 + 88);
      if (v20)
        goto LABEL_28;
      v21 = 5;
      if (v44 <= 5)
        goto LABEL_38;
      v20 = *(_QWORD *)(v13 + 96);
      if (v20)
      {
LABEL_28:
        v19 = __clz(__rbit64(v20)) + (v21 << 6);
        goto LABEL_29;
      }
      v22 = 6;
      if (v44 > 6)
      {
        v20 = *(_QWORD *)(v13 + 104);
        if (v20)
        {
          v21 = 6;
          goto LABEL_28;
        }
        while (1)
        {
          v21 = v22 + 1;
          if (__OFADD__(v22, 1))
            goto LABEL_52;
          if (v21 >= v44)
            break;
          v20 = *(_QWORD *)(v13 + 56 + 8 * v21);
          ++v22;
          if (v20)
            goto LABEL_28;
        }
      }
    }
LABEL_38:
    swift_release(v13);
    swift_bridgeObjectRelease();
    v8 = v51;
    v7 = v52;
    v37 = NSFileHandle.offset()();
    if (v38)
      return sub_10001BC14(v8, (unint64_t)v7);
    a3 = (unint64_t *)v37;
    a2 = *a4;
    v39 = swift_isUniquelyReferenced_nonNull_native(*a4);
    *a4 = a2;
    if ((v39 & 1) != 0)
    {
LABEL_40:
      if (*(_QWORD *)(a2 + 16) <= (int64_t)v43)
        __break(1u);
      *(_QWORD *)(a2 + 8 * v43 + 32) = a3;
      *a4 = a2;
      v47 = (int *)v8;
      p_dst = v7;
      v40 = sub_100035530();
      NSFileHandle.write<A>(contentsOf:)(&v47, &type metadata for Data, v40);
      return sub_10001BC14(v8, (unint64_t)v7);
    }
LABEL_55:
    a2 = (unint64_t)sub_1008C5E60((_QWORD *)a2);
    goto LABEL_40;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  result = (uint64_t)sub_1008C5E60(v7);
  v7 = (__int128 *)result;
LABEL_44:
  if (*((_QWORD *)v7 + 2) <= v43)
  {
    __break(1u);
    goto LABEL_55;
  }
  *((_QWORD *)v7 + v43 + 4) = 0;
  *a3 = (unint64_t)v7;
  return result;
}

void sub_100637F40(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), void (*a4)(void *, id *, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  unsigned int v19;
  void (*v20)(void *, id *, uint64_t, uint64_t);
  unsigned int v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(void *, id *, uint64_t, uint64_t);
  id v29;

  v28 = a4;
  v7 = v4;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_autoreleasePoolPush();
  a3(a1);
  if (v5)
  {
    objc_autoreleasePoolPop(v14);
  }
  else
  {
    v16 = v15;
    objc_autoreleasePoolPop(v14);
    sub_10000F4A0(0, &qword_101101FD0, NSFileHandle_ptr);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
    v17 = sub_100636E84((uint64_t)v13, (SEL *)&selRef_fileHandleForReadingFromURL_error_);
    v18 = v17;
    if (v16 <= a2)
      v19 = a2;
    else
      v19 = v16;
    if (v19 < *(_DWORD *)(v7 + qword_101102590))
      *(_DWORD *)(v7 + qword_101102590) = v19;
    v20 = v28;
    if (*(_DWORD *)(v7 + qword_101102598) < HIDWORD(v16))
      *(_DWORD *)(v7 + qword_101102598) = HIDWORD(v16);
    v29 = 0;
    v21 = objc_msgSend(v17, "seekToOffset:error:", 4128, &v29);
    v22 = v29;
    if (v21)
    {
      LOBYTE(v29) = 0;
      v23 = v22;
      do
      {
        v24 = objc_autoreleasePoolPush();
        v20(v18, &v29, a2, v7);
        objc_autoreleasePoolPop(v24);
      }
      while ((v29 & 1) == 0);
    }
    else
    {
      v25 = v29;
      _convertNSErrorToError(_:)(v22);

      swift_willThrow(v26);
    }

  }
}

void sub_100638160(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "readDataOfLength:", 32);
  static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v3 = v2;

  __asm { BR              X10 }
}

uint64_t sub_1006381D8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  Swift::UInt32 v5;
  uint64_t result;
  Swift::UInt32 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17[3];
  _BYTE v18[24];
  uint64_t v19;
  unint64_t v20;
  Swift::UInt32 v21;

  if (BYTE6(v2) <= 0x1FuLL)
  {
    result = sub_10001BC14(v3, v2);
    *v4 = 1;
    return result;
  }
  sub_10001BBBC(v3, v2);
  sub_100638608(v3, v2);
  if (!v0)
  {
    v7 = v21;
    v8 = v19;
    v9 = v20;
    if (v21 >= v5)
    {
      sub_10001BBBC(v19, v20);
      v12 = Data.subscript.getter(0);
      sub_10001BC14(v19, v20);
      if (v21 < *(_DWORD *)(v1 + qword_101102590))
        *(_DWORD *)(v1 + qword_101102590) = v21;
      if (*(_DWORD *)(v1 + qword_101102598) < v7)
        *(_DWORD *)(v1 + qword_101102598) = v7;
      v13 = v12;
      v14 = (_QWORD *)(v1 + qword_1011025B0);
      swift_beginAccess(v14, v18, 33, 0);
      v15 = (_QWORD *)*v14;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v14);
      *v14 = v15;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v15 = sub_1008C5E74(v15);
        *v14 = v15;
      }
      if (v15[2] <= v13)
      {
        __break(1u);
        JUMPOUT(0x1006383A4);
      }
      sub_10001BBBC(v8, v9);
      sub_100A11D3C((uint64_t)v17, v8, v9, v7);
      sub_10001BC14(v17[0], v17[1]);
      swift_endAccess(v18);
      sub_10001BC14(v3, v2);
      v10 = v8;
      v11 = v9;
      return sub_10001BC14(v10, v11);
    }
    sub_10001BC14(v19, v20);
  }
  v10 = v3;
  v11 = v2;
  return sub_10001BC14(v10, v11);
}

void sub_1006383B4(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "readDataOfLength:", 10);
  static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v3 = v2;

  __asm { BR              X10 }
}

uint64_t sub_10063842C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  Swift::UInt32 v5;
  uint64_t result;
  Swift::UInt32 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17[3];
  _BYTE v18[24];
  uint64_t v19;
  unint64_t v20;
  Swift::UInt32 v21;

  if (BYTE6(v2) <= 9uLL)
  {
    result = sub_10001BC14(v3, v2);
    *v4 = 1;
    return result;
  }
  sub_10001BBBC(v3, v2);
  sub_1006389FC(v3, v2);
  if (!v0)
  {
    v7 = v21;
    v8 = v19;
    v9 = v20;
    if (v21 >= v5)
    {
      sub_10001BBBC(v19, v20);
      v12 = Data.subscript.getter(0);
      sub_10001BC14(v19, v20);
      if (v21 < *(_DWORD *)(v1 + qword_101102590))
        *(_DWORD *)(v1 + qword_101102590) = v21;
      if (*(_DWORD *)(v1 + qword_101102598) < v7)
        *(_DWORD *)(v1 + qword_101102598) = v7;
      v13 = v12;
      v14 = (_QWORD *)(v1 + qword_1011025B0);
      swift_beginAccess(v14, v18, 33, 0);
      v15 = (_QWORD *)*v14;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v14);
      *v14 = v15;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v15 = sub_1008C5F3C(v15);
        *v14 = v15;
      }
      if (v15[2] <= v13)
      {
        __break(1u);
        JUMPOUT(0x1006385F8);
      }
      sub_10001BBBC(v8, v9);
      sub_100A13CDC((uint64_t)v17, v8, v9, v7);
      sub_10001BC14(v17[0], v17[1]);
      swift_endAccess(v18);
      sub_10001BC14(v3, v2);
      v10 = v8;
      v11 = v9;
      return sub_10001BC14(v10, v11);
    }
    sub_10001BC14(v19, v20);
  }
  v10 = v3;
  v11 = v2;
  return sub_10001BC14(v10, v11);
}

void sub_100638608(uint64_t a1, unint64_t a2)
{
  sub_10001BBBC(a1, a2);
  sub_100626E70(4, a1, a2);
  __asm { BR              X10 }
}

void sub_1006389FC(uint64_t a1, unint64_t a2)
{
  sub_10001BBBC(a1, a2);
  sub_100626E70(4, a1, a2);
  __asm { BR              X10 }
}

uint64_t sub_100638DF0(unsigned int *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 && (unint64_t)(a2 - (_QWORD)a1 + 3) >= 7)
    return *a1;
  v3 = sub_10001A9A8(&qword_101101FD8);
  v4 = sub_1000193A4(&qword_101101FE0, &qword_101101FD8, byte_100E46E40);
  v5 = swift_allocError(v3, v4, 0, 0);
  *(_DWORD *)v6 = 1;
  *(_BYTE *)(v6 + 4) = 2;
  return swift_willThrow(v5);
}

uint64_t sub_100638E88(unsigned int *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 && (unint64_t)(a2 - (_QWORD)a1 + 3) >= 7)
    return *a1;
  v3 = sub_10001A9A8(&qword_101102098);
  v4 = sub_1000193A4(&qword_1011020A0, &qword_101102098, byte_100E46E40);
  v5 = swift_allocError(v3, v4, 0, 0);
  *(_DWORD *)v6 = 1;
  *(_BYTE *)(v6 + 4) = 2;
  return swift_willThrow(v5);
}

uint64_t sub_100638F20(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1002613B8;
  return v6(a1);
}

_BYTE *sub_100638F84@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_1006462A0(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_100646360((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_1006463D8((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_100638FF8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  return Data._Representation.append(contentsOf:)(v5, v11);
}

Swift::Int sub_100639088(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int result;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  Swift::Int v20;
  unint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  Swift::Int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::Int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  Swift::Int v46;
  Swift::Int v47;
  uint64_t v48;
  uint64_t v49;
  Swift::Int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  Swift::Int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  Swift::Int v121;
  char *v122;
  uint64_t v123;
  Swift::Int v124;
  uint64_t v125;
  Swift::Int v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  Swift::Int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v2 = v1;
  v136 = type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo(0);
  v4 = *(_QWORD *)(v136 - 8);
  v5 = __chkstk_darwin(v136);
  v125 = (uint64_t)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v137 = (uint64_t)&v118 - v8;
  v9 = __chkstk_darwin(v7);
  v132 = (uint64_t)&v118 - v10;
  __chkstk_darwin(v9);
  v134 = (uint64_t)&v118 - v11;
  v12 = a1[1];
  result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0)
      goto LABEL_138;
    if (v12)
      return sub_10063A144(0, v12, 1, a1);
    return result;
  }
  if (v12 >= 0)
    v14 = v12;
  else
    v14 = v12 + 1;
  if (v12 < -1)
    goto LABEL_146;
  v121 = result;
  v128 = v4;
  if (v12 < 2)
  {
    v19 = (char *)_swiftEmptyArrayStorage;
    v127 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v120 = _swiftEmptyArrayStorage;
    if (v12 != 1)
    {
      v21 = _swiftEmptyArrayStorage[2];
LABEL_104:
      v111 = v19;
      if (v21 >= 2)
      {
        v112 = *a1;
        do
        {
          v113 = v21 - 2;
          if (v21 < 2)
            goto LABEL_133;
          if (!v112)
            goto LABEL_145;
          v114 = *(_QWORD *)&v111[16 * v113 + 32];
          v115 = *(_QWORD *)&v111[16 * v21 + 24];
          sub_10063A418(v112 + *(_QWORD *)(v4 + 72) * v114, v112 + *(_QWORD *)(v4 + 72) * *(_QWORD *)&v111[16 * v21 + 16], v112 + *(_QWORD *)(v4 + 72) * v115, v127);
          if (v2)
            break;
          if (v115 < v114)
            goto LABEL_134;
          if ((swift_isUniquelyReferenced_nonNull_native(v111) & 1) == 0)
            v111 = sub_10088F088((uint64_t)v111);
          if (v113 >= *((_QWORD *)v111 + 2))
            goto LABEL_135;
          v116 = &v111[16 * v113 + 32];
          *(_QWORD *)v116 = v114;
          *((_QWORD *)v116 + 1) = v115;
          v117 = *((_QWORD *)v111 + 2);
          if (v21 > v117)
            goto LABEL_136;
          memmove(&v111[16 * v21 + 16], &v111[16 * v21 + 32], 16 * (v117 - v21));
          *((_QWORD *)v111 + 2) = v117 - 1;
          v21 = v117 - 1;
          v4 = v128;
        }
        while (v117 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v120[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v15 = v12;
    v16 = v14 >> 1;
    v17 = static Array._allocateBufferUninitialized(minimumCapacity:)(v14 >> 1, v136);
    *(_QWORD *)(v17 + 16) = v16;
    v12 = v15;
    v18 = *(unsigned __int8 *)(v4 + 80);
    v120 = (_QWORD *)v17;
    v127 = v17 + ((v18 + 32) & ~v18);
  }
  v20 = 0;
  v130 = v132 + 8;
  v131 = v134 + 8;
  v19 = (char *)_swiftEmptyArrayStorage;
  v133 = a1;
  while (1)
  {
    v22 = v20 + 1;
    v126 = v20;
    if (v20 + 1 >= v12)
    {
      v35 = v20 + 1;
    }
    else
    {
      v23 = v4;
      v24 = *a1;
      v25 = *(_QWORD *)(v23 + 72);
      sub_10005972C(*a1 + v25 * v22, v134, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      v26 = v132;
      sub_10005972C(v24 + v25 * v20, v132, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      v27 = *(int *)(v136 + 20);
      LODWORD(v135) = *(_DWORD *)(v131 + v27);
      LODWORD(v129) = *(_DWORD *)(v130 + v27);
      sub_1000126B0(v26, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      sub_1000126B0(v134, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      v139 = v12;
      v123 = v24;
      v138 = v25;
      if (v20 + 2 >= v12)
      {
        v35 = v20 + 2;
        v4 = v128;
      }
      else
      {
        v122 = v19;
        v124 = v25 * v22;
        v28 = v24;
        v29 = v20 + 2;
        v30 = v25 * (v20 + 2);
        while (1)
        {
          v31 = v135 < v129;
          v32 = v134;
          sub_10005972C(v28 + v30, v134, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          v33 = v132;
          sub_10005972C(v28 + v124, v132, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          v34 = *(_DWORD *)(v131 + *(int *)(v136 + 20)) >= *(_DWORD *)(v130 + *(int *)(v136 + 20));
          sub_1000126B0(v33, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          sub_1000126B0(v32, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          if (v31 == v34)
            break;
          v28 += v138;
          ++v29;
          v12 = v139;
          if (v139 == v29)
          {
            v35 = v139;
            v4 = v128;
            a1 = v133;
            v19 = v122;
            v20 = v126;
            goto LABEL_24;
          }
        }
        v4 = v128;
        a1 = v133;
        v19 = v122;
        v35 = v29;
        v20 = v126;
        v12 = v139;
      }
LABEL_24:
      if (v135 < v129)
      {
        if (v35 < v20)
          goto LABEL_139;
        if (v20 < v35)
        {
          v122 = v19;
          v119 = v2;
          v36 = 0;
          v37 = v138;
          v38 = v138 * (v35 - 1);
          v39 = v35 * v138;
          v40 = v20 * v138;
          do
          {
            if (v20 != v35 + v36 - 1)
            {
              v41 = v123;
              if (!v123)
                goto LABEL_144;
              v42 = v123 + v40;
              v43 = v123 + v38;
              sub_1000126EC(v123 + v40, v125, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
              if (v40 < v38 || v42 >= v41 + v39)
              {
                swift_arrayInitWithTakeFrontToBack(v41 + v40, v41 + v38, 1, v136);
                v37 = v138;
              }
              else
              {
                v37 = v138;
                if (v40 != v38)
                  swift_arrayInitWithTakeBackToFront(v42, v43);
              }
              sub_1000126EC(v125, v43, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
              v12 = v139;
            }
            ++v20;
            --v36;
            v38 -= v37;
            v39 -= v37;
            v40 += v37;
          }
          while (v20 < v35 + v36);
          v2 = v119;
          a1 = v133;
          v19 = v122;
          v4 = v128;
          v20 = v126;
        }
      }
    }
    if (v35 < v12)
    {
      if (__OFSUB__(v35, v20))
        goto LABEL_137;
      if (v35 - v20 < v121)
        break;
    }
LABEL_56:
    if (v35 < v20)
      goto LABEL_132;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
    v135 = v35;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v19 = sub_10088E710(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
    v60 = *((_QWORD *)v19 + 2);
    v59 = *((_QWORD *)v19 + 3);
    v21 = v60 + 1;
    if (v60 >= v59 >> 1)
      v19 = sub_10088E710((char *)(v59 > 1), v60 + 1, 1, v19);
    *((_QWORD *)v19 + 2) = v21;
    v61 = v19 + 32;
    v62 = &v19[16 * v60 + 32];
    v63 = v135;
    *(_QWORD *)v62 = v20;
    *((_QWORD *)v62 + 1) = v63;
    if (v60)
    {
      while (1)
      {
        v64 = v21 - 1;
        if (v21 >= 4)
        {
          v69 = &v61[16 * v21];
          v70 = *((_QWORD *)v69 - 8);
          v71 = *((_QWORD *)v69 - 7);
          v75 = __OFSUB__(v71, v70);
          v72 = v71 - v70;
          if (v75)
            goto LABEL_121;
          v74 = *((_QWORD *)v69 - 6);
          v73 = *((_QWORD *)v69 - 5);
          v75 = __OFSUB__(v73, v74);
          v67 = v73 - v74;
          v68 = v75;
          if (v75)
            goto LABEL_122;
          v76 = v21 - 2;
          v77 = &v61[16 * v21 - 32];
          v79 = *(_QWORD *)v77;
          v78 = *((_QWORD *)v77 + 1);
          v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75)
            goto LABEL_124;
          v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75)
            goto LABEL_127;
          if (v81 >= v72)
          {
            v99 = &v61[16 * v64];
            v101 = *(_QWORD *)v99;
            v100 = *((_QWORD *)v99 + 1);
            v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75)
              goto LABEL_131;
            v92 = v67 < v102;
            goto LABEL_93;
          }
        }
        else
        {
          if (v21 != 3)
          {
            v93 = *((_QWORD *)v19 + 4);
            v94 = *((_QWORD *)v19 + 5);
            v75 = __OFSUB__(v94, v93);
            v86 = v94 - v93;
            v87 = v75;
            goto LABEL_87;
          }
          v66 = *((_QWORD *)v19 + 4);
          v65 = *((_QWORD *)v19 + 5);
          v75 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          v68 = v75;
        }
        if ((v68 & 1) != 0)
          goto LABEL_123;
        v76 = v21 - 2;
        v82 = &v61[16 * v21 - 32];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v85 = __OFSUB__(v83, v84);
        v86 = v83 - v84;
        v87 = v85;
        if (v85)
          goto LABEL_126;
        v88 = &v61[16 * v64];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v75 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v75)
          goto LABEL_129;
        if (__OFADD__(v86, v91))
          goto LABEL_130;
        if (v86 + v91 >= v67)
        {
          v92 = v67 < v91;
LABEL_93:
          if (v92)
            v64 = v76;
          goto LABEL_95;
        }
LABEL_87:
        if ((v87 & 1) != 0)
          goto LABEL_125;
        v95 = &v61[16 * v64];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v75 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v75)
          goto LABEL_128;
        if (v98 < v86)
          goto LABEL_14;
LABEL_95:
        v103 = v64 - 1;
        if (v64 - 1 >= v21)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        v104 = *a1;
        if (!*a1)
          goto LABEL_143;
        v105 = v19;
        v106 = &v61[16 * v103];
        v107 = *(_QWORD *)v106;
        v108 = &v61[16 * v64];
        v109 = *((_QWORD *)v108 + 1);
        sub_10063A418(v104 + *(_QWORD *)(v128 + 72) * *(_QWORD *)v106, v104 + *(_QWORD *)(v128 + 72) * *(_QWORD *)v108, v104 + *(_QWORD *)(v128 + 72) * v109, v127);
        if (v2)
          goto LABEL_115;
        if (v109 < v107)
          goto LABEL_118;
        if (v64 > *((_QWORD *)v105 + 2))
          goto LABEL_119;
        *(_QWORD *)v106 = v107;
        *(_QWORD *)&v61[16 * v103 + 8] = v109;
        v110 = *((_QWORD *)v105 + 2);
        if (v64 >= v110)
          goto LABEL_120;
        v19 = v105;
        v21 = v110 - 1;
        memmove(&v61[16 * v64], v108 + 16, 16 * (v110 - 1 - v64));
        *((_QWORD *)v105 + 2) = v110 - 1;
        a1 = v133;
        if (v110 <= 2)
          goto LABEL_14;
      }
    }
    v21 = 1;
LABEL_14:
    v12 = a1[1];
    v20 = v135;
    v4 = v128;
    if (v135 >= v12)
      goto LABEL_104;
  }
  if (__OFADD__(v20, v121))
    goto LABEL_140;
  if (v20 + v121 >= v12)
    v44 = v12;
  else
    v44 = v20 + v121;
  if (v44 >= v20)
  {
    if (v35 != v44)
    {
      v122 = v19;
      v119 = v2;
      v45 = *(_QWORD *)(v4 + 72);
      v139 = v45 * (v35 - 1);
      v129 = v45;
      v46 = v35 * v45;
      v124 = v44;
      do
      {
        v48 = 0;
        v135 = v35;
        while (1)
        {
          v49 = *a1;
          v50 = v46;
          v51 = v46 + v48 + *a1;
          v52 = v134;
          sub_10005972C(v51, v134, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          v53 = v132;
          sub_10005972C(v139 + v48 + v49, v132, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          v54 = *(int *)(v136 + 20);
          LODWORD(v138) = *(_DWORD *)(v131 + v54);
          LODWORD(v49) = *(_DWORD *)(v130 + v54);
          sub_1000126B0(v53, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          sub_1000126B0(v52, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          if (v138 >= v49)
            break;
          v55 = *a1;
          if (!*a1)
            goto LABEL_142;
          v46 = v50;
          v56 = v55 + v50 + v48;
          v57 = v55 + v139 + v48;
          sub_1000126EC(v56, v137, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          swift_arrayInitWithTakeFrontToBack(v56, v57, 1, v136);
          sub_1000126EC(v137, v57, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          v48 -= v129;
          ++v20;
          v47 = v135;
          a1 = v133;
          if (v135 == v20)
            goto LABEL_49;
        }
        v47 = v135;
        v46 = v50;
LABEL_49:
        v35 = v47 + 1;
        v139 += v129;
        v46 += v129;
        v20 = v126;
      }
      while (v35 != v124);
      v35 = v124;
      v2 = v119;
      v19 = v122;
    }
    goto LABEL_56;
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

Swift::Int sub_100639AD4(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::Int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t *v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  unsigned int v29;
  Swift::Int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  Swift::Int v95;
  Swift::Int v96;
  uint64_t v97;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_130;
    if (v3)
      return sub_10063A3A8(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_138;
  v6 = result;
  v91 = a1;
  if (v3 < 2)
  {
    v10 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
      v13 = (char *)_swiftEmptyArrayStorage;
LABEL_96:
      v83 = v13;
      v94 = v10;
      if (v14 >= 2)
      {
        v84 = *v91;
        do
        {
          v85 = v14 - 2;
          if (v14 < 2)
            goto LABEL_125;
          if (!v84)
            goto LABEL_137;
          v86 = v83;
          v87 = *(_QWORD *)&v83[16 * v85 + 32];
          v88 = *(_QWORD *)&v83[16 * v14 + 24];
          sub_10063A934((char *)(v84 + 8 * v87), (char *)(v84 + 8 * *(_QWORD *)&v83[16 * v14 + 16]), v84 + 8 * v88, __dst);
          if (v1)
            break;
          if (v88 < v87)
            goto LABEL_126;
          if ((swift_isUniquelyReferenced_nonNull_native(v86) & 1) == 0)
            v86 = sub_10088F088((uint64_t)v86);
          if (v85 >= *((_QWORD *)v86 + 2))
            goto LABEL_127;
          v89 = &v86[16 * v85 + 32];
          *(_QWORD *)v89 = v87;
          *((_QWORD *)v89 + 1) = v88;
          v90 = *((_QWORD *)v86 + 2);
          if (v14 > v90)
            goto LABEL_128;
          memmove(&v86[16 * v14 + 16], &v86[16 * v14 + 32], 16 * (v90 - v14));
          v83 = v86;
          *((_QWORD *)v86 + 2) = v90 - 1;
          v14 = v90 - 1;
        }
        while (v90 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      v94[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v94 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = sub_10001A9A8((uint64_t *)&unk_101110060);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v94 = (_QWORD *)v9;
    __dst = (char *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v92 = *a1 - 8;
  v93 = *a1 + 16;
  v13 = (char *)_swiftEmptyArrayStorage;
  v95 = v6;
  v96 = v3;
  v97 = v12;
  while (1)
  {
    v15 = v11++;
    if (v11 < v3)
    {
      v16 = *(_DWORD *)(v12 + 8 * v11);
      v17 = *(_DWORD *)(v12 + 8 * v15);
      v11 = v15 + 2;
      if (v15 + 2 < v3)
      {
        v18 = (unsigned int *)(v93 + 8 * v15);
        v19 = v16;
        while (1)
        {
          v21 = *v18;
          v18 += 2;
          v20 = v21;
          if (v16 < v17 == v21 >= v19)
            break;
          ++v11;
          v19 = v20;
          if (v3 == v11)
          {
            v11 = v3;
            break;
          }
        }
      }
      if (v16 < v17)
      {
        if (v11 < v15)
          goto LABEL_131;
        if (v15 < v11)
        {
          v22 = (uint64_t *)(v92 + 8 * v11);
          v23 = v11;
          v24 = v15;
          v25 = (uint64_t *)(v12 + 8 * v15);
          do
          {
            if (v24 != --v23)
            {
              if (!v12)
                goto LABEL_136;
              v26 = *v25;
              *v25 = *v22;
              *v22 = v26;
            }
            ++v24;
            --v22;
            ++v25;
          }
          while (v24 < v23);
        }
      }
    }
    if (v11 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v11, v15))
      goto LABEL_129;
    if (v11 - v15 >= v6)
      goto LABEL_46;
    v27 = v15 + v6;
    if (__OFADD__(v15, v6))
      goto LABEL_132;
    if (v27 >= v3)
      v27 = v3;
    if (v27 < v15)
      break;
    if (v11 != v27)
    {
      v28 = v92 + 8 * v11;
      do
      {
        v29 = *(_DWORD *)(v12 + 8 * v11);
        v30 = v15;
        v31 = v28;
        do
        {
          if (v29 >= *(_DWORD *)v31)
            break;
          if (!v12)
            goto LABEL_134;
          v32 = *(_DWORD *)(v31 + 12);
          *(_QWORD *)(v31 + 8) = *(_QWORD *)v31;
          *(_DWORD *)v31 = v29;
          *(_DWORD *)(v31 + 4) = v32;
          v31 -= 8;
          ++v30;
        }
        while (v11 != v30);
        ++v11;
        v28 += 8;
      }
      while (v11 != v27);
      v11 = v27;
    }
LABEL_46:
    if (v11 < v15)
      goto LABEL_124;
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = sub_10088E710(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v34 = *((_QWORD *)v13 + 2);
    v33 = *((_QWORD *)v13 + 3);
    v14 = v34 + 1;
    v12 = v97;
    if (v34 >= v33 >> 1)
    {
      v82 = sub_10088E710((char *)(v33 > 1), v34 + 1, 1, v13);
      v12 = v97;
      v13 = v82;
    }
    *((_QWORD *)v13 + 2) = v14;
    v35 = v13 + 32;
    v36 = &v13[16 * v34 + 32];
    *(_QWORD *)v36 = v15;
    *((_QWORD *)v36 + 1) = v11;
    if (v34)
    {
      while (1)
      {
        v37 = v14 - 1;
        if (v14 >= 4)
        {
          v42 = &v35[16 * v14];
          v43 = *((_QWORD *)v42 - 8);
          v44 = *((_QWORD *)v42 - 7);
          v48 = __OFSUB__(v44, v43);
          v45 = v44 - v43;
          if (v48)
            goto LABEL_113;
          v47 = *((_QWORD *)v42 - 6);
          v46 = *((_QWORD *)v42 - 5);
          v48 = __OFSUB__(v46, v47);
          v40 = v46 - v47;
          v41 = v48;
          if (v48)
            goto LABEL_114;
          v49 = v14 - 2;
          v50 = &v35[16 * v14 - 32];
          v52 = *(_QWORD *)v50;
          v51 = *((_QWORD *)v50 + 1);
          v48 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          if (v48)
            goto LABEL_116;
          v48 = __OFADD__(v40, v53);
          v54 = v40 + v53;
          if (v48)
            goto LABEL_119;
          if (v54 >= v45)
          {
            v72 = &v35[16 * v37];
            v74 = *(_QWORD *)v72;
            v73 = *((_QWORD *)v72 + 1);
            v48 = __OFSUB__(v73, v74);
            v75 = v73 - v74;
            if (v48)
              goto LABEL_123;
            v65 = v40 < v75;
            goto LABEL_83;
          }
        }
        else
        {
          if (v14 != 3)
          {
            v66 = *((_QWORD *)v13 + 4);
            v67 = *((_QWORD *)v13 + 5);
            v48 = __OFSUB__(v67, v66);
            v59 = v67 - v66;
            v60 = v48;
            goto LABEL_77;
          }
          v39 = *((_QWORD *)v13 + 4);
          v38 = *((_QWORD *)v13 + 5);
          v48 = __OFSUB__(v38, v39);
          v40 = v38 - v39;
          v41 = v48;
        }
        if ((v41 & 1) != 0)
          goto LABEL_115;
        v49 = v14 - 2;
        v55 = &v35[16 * v14 - 32];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v58 = __OFSUB__(v56, v57);
        v59 = v56 - v57;
        v60 = v58;
        if (v58)
          goto LABEL_118;
        v61 = &v35[16 * v37];
        v63 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        v48 = __OFSUB__(v62, v63);
        v64 = v62 - v63;
        if (v48)
          goto LABEL_121;
        if (__OFADD__(v59, v64))
          goto LABEL_122;
        if (v59 + v64 >= v40)
        {
          v65 = v40 < v64;
LABEL_83:
          if (v65)
            v37 = v49;
          goto LABEL_85;
        }
LABEL_77:
        if ((v60 & 1) != 0)
          goto LABEL_117;
        v68 = &v35[16 * v37];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v48 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v48)
          goto LABEL_120;
        if (v71 < v59)
          goto LABEL_15;
LABEL_85:
        v76 = v37 - 1;
        if (v37 - 1 >= v14)
        {
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
          goto LABEL_133;
        }
        if (!v12)
          goto LABEL_135;
        v77 = &v35[16 * v76];
        v78 = *(_QWORD *)v77;
        v79 = &v35[16 * v37];
        v80 = *((_QWORD *)v79 + 1);
        sub_10063A934((char *)(v12 + 8 * *(_QWORD *)v77), (char *)(v12 + 8 * *(_QWORD *)v79), v12 + 8 * v80, __dst);
        if (v1)
          goto LABEL_93;
        if (v80 < v78)
          goto LABEL_110;
        if (v37 > *((_QWORD *)v13 + 2))
          goto LABEL_111;
        *(_QWORD *)v77 = v78;
        *(_QWORD *)&v35[16 * v76 + 8] = v80;
        v81 = *((_QWORD *)v13 + 2);
        if (v37 >= v81)
          goto LABEL_112;
        v14 = v81 - 1;
        memmove(&v35[16 * v37], v79 + 16, 16 * (v81 - 1 - v37));
        *((_QWORD *)v13 + 2) = v81 - 1;
        v12 = v97;
        if (v81 <= 2)
          goto LABEL_15;
      }
    }
    v14 = 1;
LABEL_15:
    v6 = v95;
    v3 = v96;
    if (v11 >= v96)
    {
      v10 = v94;
      goto LABEL_96;
    }
  }
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_10063A144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t *v49;

  v38 = a1;
  v46 = type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo(0);
  v7 = __chkstk_darwin(v46);
  v47 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v42 = (uint64_t)&v36 - v10;
  result = __chkstk_darwin(v9);
  v41 = (uint64_t)&v36 - v13;
  v45 = a3;
  v37 = a2;
  if (a3 != a2)
  {
    v14 = *(_QWORD *)(v12 + 72);
    v39 = v42 + 8;
    v40 = v41 + 8;
    v15 = v14 * (v45 - 1);
    v43 = v14;
    v16 = v14 * v45;
    v17 = type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo;
    v49 = a4;
LABEL_5:
    v18 = 0;
    v19 = v38;
    v44 = v16;
    while (1)
    {
      v21 = *v49;
      v22 = v16 + v18 + *v49;
      v23 = v41;
      sub_10005972C(v22, v41, v17);
      v24 = v15 + v18 + v21;
      v25 = v15;
      v26 = v42;
      sub_10005972C(v24, v42, v17);
      v27 = *(int *)(v46 + 20);
      v48 = *(_DWORD *)(v40 + v27);
      v28 = v17;
      v29 = *(_DWORD *)(v39 + v27);
      v30 = v26;
      v15 = v25;
      sub_1000126B0(v30, v28);
      v31 = v23;
      v16 = v44;
      result = sub_1000126B0(v31, v28);
      v32 = v48 >= v29;
      v17 = v28;
      if (v32)
      {
LABEL_4:
        v15 += v43;
        v16 += v43;
        if (++v45 == v37)
          return result;
        goto LABEL_5;
      }
      v33 = *v49;
      if (!*v49)
        break;
      v34 = v33 + v16 + v18;
      v35 = v33 + v15 + v18;
      sub_1000126EC(v34, v47, v28);
      swift_arrayInitWithTakeFrontToBack(v34, v35, 1, v46);
      v20 = v35;
      v17 = v28;
      result = sub_1000126EC(v47, v20, v28);
      v18 -= v43;
      if (v45 == ++v19)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10063A3A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 8 * a3 - 8;
LABEL_5:
    v6 = *(_DWORD *)(v4 + 8 * a3);
    v7 = result;
    v8 = v5;
    while (1)
    {
      if (v6 >= *(_DWORD *)v8)
      {
LABEL_4:
        ++a3;
        v5 += 8;
        if (a3 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v4)
        break;
      v9 = *(_DWORD *)(v8 + 12);
      *(_QWORD *)(v8 + 8) = *(_QWORD *)v8;
      *(_DWORD *)v8 = v6;
      *(_DWORD *)(v8 + 4) = v9;
      v8 -= 8;
      if (a3 == ++v7)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10063A418(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v30;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  BOOL v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t result;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;

  v53 = type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo(0);
  v8 = __chkstk_darwin(v53);
  v56 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v55 = (uint64_t)&v48 - v10;
  v12 = *(_QWORD *)(v11 + 72);
  if (!v12)
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (a2 - a1 == 0x8000000000000000 && v12 == -1)
    goto LABEL_68;
  v13 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v12 == -1)
    goto LABEL_69;
  v14 = (uint64_t)(a2 - a1) / v12;
  v59 = a1;
  v58 = a4;
  v15 = v13 / v12;
  if (v14 >= v13 / v12)
  {
    if ((v15 & 0x8000000000000000) == 0)
    {
      v18 = v15 * v12;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        v19 = v53;
        swift_arrayInitWithTakeFrontToBack(a4, a2, v15, v53);
      }
      else
      {
        v19 = v53;
        if (a4 != a2)
          swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v32 = a4 + v18;
      v57 = a4 + v18;
      v59 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v34 = -v12;
        v50 = v56 + 8;
        v51 = v55 + 8;
        v49 = a4;
        v52 = a1;
        do
        {
          v54 = a3 + v34;
          v35 = v55;
          sub_10005972C(v32 + v34, v55, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          v36 = a2 + v34;
          v37 = a3;
          v38 = v56;
          sub_10005972C(a2 + v34, v56, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          v39 = *(int *)(v19 + 20);
          v40 = *(_DWORD *)(v51 + v39);
          v41 = *(_DWORD *)(v50 + v39);
          sub_1000126B0(v38, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          sub_1000126B0(v35, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          if (v40 >= v41)
          {
            v45 = v57;
            v46 = v57 + v34;
            v57 += v34;
            a3 = v54;
            if (v37 < v45 || v54 >= v45)
            {
              v19 = v53;
              swift_arrayInitWithTakeFrontToBack(v54, v46, 1, v53);
              v36 = a2;
              v44 = v49;
              v43 = v52;
            }
            else
            {
              v43 = v52;
              v19 = v53;
              if (v37 != v45)
                swift_arrayInitWithTakeBackToFront(v54, v46);
              v36 = a2;
              v44 = v49;
            }
          }
          else
          {
            a3 = v54;
            if (v37 < a2 || v54 >= a2)
            {
              v19 = v53;
              swift_arrayInitWithTakeFrontToBack(v54, a2 + v34, 1, v53);
              v44 = v49;
              v43 = v52;
            }
            else
            {
              v42 = v37 == a2;
              v43 = v52;
              v19 = v53;
              v44 = v49;
              if (!v42)
                swift_arrayInitWithTakeBackToFront(v54, a2 + v34);
            }
            v59 += v34;
          }
          v32 = v57;
          if (v57 <= v44)
            break;
          a2 = v36;
        }
        while (v36 > v43);
      }
      goto LABEL_66;
    }
  }
  else if ((v14 & 0x8000000000000000) == 0)
  {
    v16 = v14 * v12;
    if (a4 < a1 || a1 + v16 <= a4)
    {
      v17 = v53;
      swift_arrayInitWithTakeFrontToBack(a4, a1, v14, v53);
    }
    else
    {
      v17 = v53;
      if (a4 != a1)
        swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v54 = a4 + v16;
    v57 = a4 + v16;
    if (v16 >= 1 && a2 < a3)
    {
      v52 = v56 + 8;
      v53 = v55 + 8;
      do
      {
        v21 = a3;
        v22 = v55;
        sub_10005972C(a2, v55, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        v23 = v56;
        sub_10005972C(a4, v56, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        v24 = *(int *)(v17 + 20);
        v25 = *(_DWORD *)(v53 + v24);
        v26 = *(_DWORD *)(v52 + v24);
        sub_1000126B0(v23, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        sub_1000126B0(v22, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        v27 = v59;
        if (v25 >= v26)
        {
          v30 = v58 + v12;
          if (v59 < v58 || v59 >= v30)
          {
            swift_arrayInitWithTakeFrontToBack(v59, v58, 1, v17);
            a3 = v21;
          }
          else
          {
            a3 = v21;
            if (v59 != v58)
              swift_arrayInitWithTakeBackToFront(v59, v58);
          }
          v58 = v30;
          v28 = a2;
        }
        else
        {
          v28 = a2 + v12;
          if (v59 < a2 || v59 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack(v59, a2, 1, v17);
            a3 = v21;
          }
          else
          {
            a3 = v21;
            if (v59 == a2)
              v27 = a2;
            else
              swift_arrayInitWithTakeBackToFront(v59, a2);
          }
        }
        v59 = v27 + v12;
        a4 = v58;
        if (v58 >= v54)
          break;
        a2 = v28;
      }
      while (v28 < a3);
    }
LABEL_66:
    sub_10088EC48(&v59, &v58, (uint64_t *)&v57);
    return 1;
  }
LABEL_70:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10063A934(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  unsigned int v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[8 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (char *)(a3 - 8);
        v18 = v6;
        while (1)
        {
          v19 = v17 + 8;
          v20 = *((_DWORD *)v18 - 2);
          v18 -= 8;
          if (*((_DWORD *)v16 - 2) >= v20)
          {
            v22 = v16 - 8;
            if (v19 < v16 || v17 >= v16 || v19 != v16)
              *(_QWORD *)v17 = *((_QWORD *)v16 - 1);
            v18 = v6;
            v16 -= 8;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v19 != v6 || v17 >= v6)
              *(_QWORD *)v17 = *(_QWORD *)v18;
            v24 = v18;
            if (v18 <= v7)
              goto LABEL_42;
          }
          v17 -= 8;
          v6 = v18;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_DWORD *)v6 >= *(_DWORD *)v4)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_10088E944((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10063ABAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SharedBeaconRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v13 = (char *)&v25 - v12;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v14 = *(_QWORD *)(a1 + 56);
  v26 = a1 + 56;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v18 = (unint64_t)(v15 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v19 = 0;
  while (1)
  {
    if (v17)
    {
      v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v21 = v20 | (v19 << 6);
      goto LABEL_6;
    }
    v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v18)
      return swift_release(a1);
    v23 = *(_QWORD *)(v26 + 8 * v22);
    ++v19;
    if (!v23)
    {
      v19 = v22 + 1;
      if (v22 + 1 >= v18)
        return swift_release(a1);
      v23 = *(_QWORD *)(v26 + 8 * v19);
      if (!v23)
      {
        v19 = v22 + 2;
        if (v22 + 2 >= v18)
          return swift_release(a1);
        v23 = *(_QWORD *)(v26 + 8 * v19);
        if (!v23)
        {
          v19 = v22 + 3;
          if (v22 + 3 >= v18)
            return swift_release(a1);
          v23 = *(_QWORD *)(v26 + 8 * v19);
          if (!v23)
            break;
        }
      }
    }
LABEL_23:
    v17 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v19 << 6);
LABEL_6:
    sub_10005972C(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v7 + 72) * v21, (uint64_t)v13, type metadata accessor for SharedBeaconRecord);
    sub_1000126EC((uint64_t)v13, (uint64_t)v10, type metadata accessor for SharedBeaconRecord);
    sub_100C80CE8((uint64_t)v10, (uint64_t)v5);
    sub_100004048((uint64_t)v5, (uint64_t *)&unk_1010EE180);
    result = sub_1000126B0((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
  }
  v24 = v22 + 4;
  if (v24 >= v18)
    return swift_release(a1);
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
  {
    v19 = v24;
    goto LABEL_23;
  }
  while (1)
  {
    v19 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v19 >= v18)
      return swift_release(a1);
    v23 = *(_QWORD *)(v26 + 8 * v19);
    ++v24;
    if (v23)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

void sub_10063AE08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v14 >= v7)
      goto LABEL_24;
    v15 = *(_QWORD *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      v8 = v14 + 1;
      if (v14 + 1 >= v7)
        goto LABEL_24;
      v15 = *(_QWORD *)(v3 + 8 * v8);
      if (!v15)
      {
        v8 = v14 + 2;
        if (v14 + 2 >= v7)
          goto LABEL_24;
        v15 = *(_QWORD *)(v3 + 8 * v8);
        if (!v15)
        {
          v8 = v14 + 3;
          if (v14 + 3 >= v7)
            goto LABEL_24;
          v15 = *(_QWORD *)(v3 + 8 * v8);
          if (!v15)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    sub_10001BBBC(*v11, v13);
    sub_100C812A8(v12, v13, &v17);
    sub_10001EF3C(v17, *((unint64_t *)&v17 + 1));
    sub_10001BC14(v12, v13);
  }
  v16 = v14 + 4;
  if (v16 >= v7)
  {
LABEL_24:
    swift_release();
    return;
  }
  v15 = *(_QWORD *)(v3 + 8 * v16);
  if (v15)
  {
    v8 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    v15 = *(_QWORD *)(v3 + 8 * v8);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

void sub_10063AFB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __n128 v17;
  int64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  int64_t v25;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010ED860);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v24 - v11;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v13 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(a1 + 56);
  v25 = (unint64_t)(v14 + 63) >> 6;
  v17 = swift_bridgeObjectRetain(a1);
  v18 = 0;
  if (!v16)
    goto LABEL_6;
LABEL_5:
  v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (i = v19 | (v18 << 6); ; i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v4 + 16))(v12, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v4 + 72) * i, v3, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v12, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3) == 1)
      goto LABEL_26;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v12, v3);
    sub_100C81CDC((uint64_t)v6, (uint64_t)v10);
    sub_100004048((uint64_t)v10, &qword_1010ED860);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v16)
      goto LABEL_5;
LABEL_6:
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v21 >= v25)
      goto LABEL_25;
    v22 = *(_QWORD *)(v13 + 8 * v21);
    ++v18;
    if (!v22)
    {
      v18 = v21 + 1;
      if (v21 + 1 >= v25)
        goto LABEL_25;
      v22 = *(_QWORD *)(v13 + 8 * v18);
      if (!v22)
      {
        v18 = v21 + 2;
        if (v21 + 2 >= v25)
          goto LABEL_25;
        v22 = *(_QWORD *)(v13 + 8 * v18);
        if (!v22)
        {
          v18 = v21 + 3;
          if (v21 + 3 >= v25)
            goto LABEL_25;
          v22 = *(_QWORD *)(v13 + 8 * v18);
          if (!v22)
            break;
        }
      }
    }
LABEL_21:
    v16 = (v22 - 1) & v22;
  }
  v23 = v21 + 4;
  if (v23 >= v25)
  {
LABEL_25:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56))(v12, 1, 1, v3, v17);
LABEL_26:
    swift_release();
    return;
  }
  v22 = *(_QWORD *)(v13 + 8 * v23);
  if (v22)
  {
    v18 = v23;
    goto LABEL_21;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v25)
      goto LABEL_25;
    v22 = *(_QWORD *)(v13 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_21;
  }
LABEL_29:
  __break(1u);
}

void sub_10063B264(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      goto LABEL_24;
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        goto LABEL_24;
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          goto LABEL_24;
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            goto LABEL_24;
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    sub_100C81F30(*(_BYTE *)(*(_QWORD *)(a1 + 48) + v10));
  }
  v13 = v11 + 4;
  if (v13 >= v7)
  {
LABEL_24:
    swift_release(a1);
    return;
  }
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

void sub_10063B3C4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD v31[5];

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)(v3 + 16))
      return;
LABEL_8:
    if ((a1 & 0xC000000000000001) != 0)
    {
      if (a1 < 0)
        v5 = a1;
      else
        v5 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v6 = __CocoaSet.makeIterator()(v5);
      v7 = sub_10000F4A0(0, (unint64_t *)&qword_1011100A0, SPHandle_ptr);
      v8 = sub_10001AC90(&qword_1010EE6B0, (unint64_t *)&qword_1011100A0, SPHandle_ptr, (const char *)&protocol conformance descriptor for NSObject);
      v9 = Set.Iterator.init(_cocoa:)(v31, v6, v7, v8);
      a1 = v31[0];
      v28 = v31[1];
      v10 = v31[2];
      v11 = v31[3];
      v12 = v31[4];
    }
    else
    {
      v13 = -1 << *(_BYTE *)(a1 + 32);
      v28 = a1 + 56;
      v10 = ~v13;
      v14 = -v13;
      if (v14 < 64)
        v15 = ~(-1 << v14);
      else
        v15 = -1;
      v12 = v15 & *(_QWORD *)(a1 + 56);
      swift_bridgeObjectRetain(a1);
      v11 = 0;
    }
    v16 = (unint64_t)(v10 + 64) >> 6;
    if (a1 < 0)
      goto LABEL_20;
    while (1)
    {
      if (v12)
      {
        v17 = (v12 - 1) & v12;
        v18 = __clz(__rbit64(v12)) | (v11 << 6);
        v19 = v11;
      }
      else
      {
        v24 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
          return;
        }
        if (v24 >= v16)
          goto LABEL_42;
        v25 = *(_QWORD *)(v28 + 8 * v24);
        v19 = v11 + 1;
        if (!v25)
        {
          v19 = v11 + 2;
          if (v11 + 2 >= v16)
            goto LABEL_42;
          v25 = *(_QWORD *)(v28 + 8 * v19);
          if (!v25)
          {
            v19 = v11 + 3;
            if (v11 + 3 >= v16)
              goto LABEL_42;
            v25 = *(_QWORD *)(v28 + 8 * v19);
            if (!v25)
            {
              v19 = v11 + 4;
              if (v11 + 4 >= v16)
                goto LABEL_42;
              v25 = *(_QWORD *)(v28 + 8 * v19);
              if (!v25)
              {
                v19 = v11 + 5;
                if (v11 + 5 >= v16)
                  goto LABEL_42;
                v25 = *(_QWORD *)(v28 + 8 * v19);
                if (!v25)
                {
                  v26 = v11 + 6;
                  while (v16 != v26)
                  {
                    v25 = *(_QWORD *)(v28 + 8 * v26++);
                    if (v25)
                    {
                      v19 = v26 - 1;
                      goto LABEL_38;
                    }
                  }
LABEL_42:
                  sub_10007CC38(a1);
                  return;
                }
              }
            }
          }
        }
LABEL_38:
        v17 = (v25 - 1) & v25;
        v18 = __clz(__rbit64(v25)) + (v19 << 6);
      }
      v23 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v18);
      if (!v23)
        goto LABEL_42;
      while (1)
      {
        v27 = (void *)sub_100C82618(v23);

        v11 = v19;
        v12 = v17;
        if ((a1 & 0x8000000000000000) == 0)
          break;
LABEL_20:
        v20 = __CocoaSet.Iterator.next()(v9);
        if (v20)
        {
          v21 = v20;
          v29 = v20;
          v22 = sub_10000F4A0(0, (unint64_t *)&qword_1011100A0, SPHandle_ptr);
          swift_unknownObjectRetain(v21);
          swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
          v23 = v30;
          swift_unknownObjectRelease(v21);
          v19 = v11;
          v17 = v12;
          if (v23)
            continue;
        }
        goto LABEL_42;
      }
    }
  }
  if (v3 < 0)
    v4 = *v1;
  else
    v4 = v3 & 0xFFFFFFFFFFFFFF8;
  if (__CocoaSet.count.getter(v4))
    goto LABEL_8;
}

uint64_t sub_10063B6C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, __n128);
  __n128 v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v20;
  uint64_t v21;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010ED860);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v13 = (char *)&v20 - v12;
  if (*(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    v14 = *(_QWORD *)(a1 + 16);
    v20 = a1;
    if (v14)
    {
      v15 = a1;
      v16 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      v21 = *(_QWORD *)(v4 + 72);
      v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16);
      v18 = swift_bridgeObjectRetain(v15);
      while (1)
      {
        v17(v13, v16, v3, v18);
        v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v19)(v13, 0, 1, v3);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v13, 1, v3) == 1)
          break;
        (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v13, v3);
        sub_100C81CDC((uint64_t)v6, (uint64_t)v10);
        sub_100004048((uint64_t)v10, &qword_1010ED860);
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        v16 += v21;
        if (!--v14)
          goto LABEL_8;
      }
    }
    else
    {
      v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56);
      v18 = swift_bridgeObjectRetain(a1);
LABEL_8:
      v19(v13, 1, 1, v3, v18);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_10063B88C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v15 >= v7)
      goto LABEL_24;
    v16 = *(_QWORD *)(v3 + 8 * v15);
    ++v8;
    if (!v16)
    {
      v8 = v15 + 1;
      if (v15 + 1 >= v7)
        goto LABEL_24;
      v16 = *(_QWORD *)(v3 + 8 * v8);
      if (!v16)
      {
        v8 = v15 + 2;
        if (v15 + 2 >= v7)
          goto LABEL_24;
        v16 = *(_QWORD *)(v3 + 8 * v8);
        if (!v16)
        {
          v8 = v15 + 3;
          if (v15 + 3 >= v7)
            goto LABEL_24;
          v16 = *(_QWORD *)(v3 + 8 * v8);
          if (!v16)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v16 - 1) & v16;
    v10 = __clz(__rbit64(v16)) + (v8 << 6);
LABEL_6:
    v11 = *(_QWORD *)(a1 + 48) + 24 * v10;
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(_QWORD *)(v11 + 16);
    v14 = *(_BYTE *)v11;
    swift_bridgeObjectRetain(v13);
    sub_100C82E7C(v14, v12, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v17 = v15 + 4;
  if (v17 >= v7)
  {
LABEL_24:
    swift_release();
    return;
  }
  v16 = *(_QWORD *)(v3 + 8 * v17);
  if (v16)
  {
    v8 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    v16 = *(_QWORD *)(v3 + 8 * v8);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

void sub_10063BA38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = sub_10001A9A8(&qword_1011020F8);
  __chkstk_darwin(v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CorrelationIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v24 - v11;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v13 = *(_QWORD *)(a1 + 56);
  v25 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v17 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v18 = 0;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_6;
    }
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v17)
      goto LABEL_24;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v18;
    if (!v22)
    {
      v18 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_24;
      v22 = *(_QWORD *)(v25 + 8 * v18);
      if (!v22)
      {
        v18 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_24;
        v22 = *(_QWORD *)(v25 + 8 * v18);
        if (!v22)
        {
          v18 = v21 + 3;
          if (v21 + 3 >= v17)
            goto LABEL_24;
          v22 = *(_QWORD *)(v25 + 8 * v18);
          if (!v22)
            break;
        }
      }
    }
LABEL_23:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_6:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v7 + 72) * v20, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    sub_100C8302C((uint64_t)v10, (uint64_t)v5);
    sub_100004048((uint64_t)v5, &qword_1011020F8);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  v23 = v21 + 4;
  if (v23 >= v17)
  {
LABEL_24:
    swift_release();
    return;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v18 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v17)
      goto LABEL_24;
    v22 = *(_QWORD *)(v25 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

void sub_10063BC9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __n128 v17;
  int64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  int64_t v25;

  v3 = type metadata accessor for BeaconIdentifier(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_101101F68);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v24 - v11;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v13 = *(_QWORD *)(a1 + 56);
  v24 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v25 = (unint64_t)(v14 + 63) >> 6;
  v17 = swift_bridgeObjectRetain(a1);
  v18 = 0;
  if (!v16)
    goto LABEL_6;
LABEL_5:
  v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (i = v19 | (v18 << 6); ; i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    sub_10005972C(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v4 + 72) * i, (uint64_t)v12, type metadata accessor for BeaconIdentifier);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v12, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3) == 1)
      goto LABEL_26;
    sub_1000126EC((uint64_t)v12, (uint64_t)v6, type metadata accessor for BeaconIdentifier);
    sub_100C835F8((uint64_t)v6, (uint64_t)v10);
    sub_100004048((uint64_t)v10, &qword_101101F68);
    sub_1000126B0((uint64_t)v6, type metadata accessor for BeaconIdentifier);
    if (v16)
      goto LABEL_5;
LABEL_6:
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v21 >= v25)
      goto LABEL_25;
    v22 = *(_QWORD *)(v24 + 8 * v21);
    ++v18;
    if (!v22)
    {
      v18 = v21 + 1;
      if (v21 + 1 >= v25)
        goto LABEL_25;
      v22 = *(_QWORD *)(v24 + 8 * v18);
      if (!v22)
      {
        v18 = v21 + 2;
        if (v21 + 2 >= v25)
          goto LABEL_25;
        v22 = *(_QWORD *)(v24 + 8 * v18);
        if (!v22)
        {
          v18 = v21 + 3;
          if (v21 + 3 >= v25)
            goto LABEL_25;
          v22 = *(_QWORD *)(v24 + 8 * v18);
          if (!v22)
            break;
        }
      }
    }
LABEL_21:
    v16 = (v22 - 1) & v22;
  }
  v23 = v21 + 4;
  if (v23 >= v25)
  {
LABEL_25:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56))(v12, 1, 1, v3, v17);
LABEL_26:
    swift_release();
    return;
  }
  v22 = *(_QWORD *)(v24 + 8 * v23);
  if (v22)
  {
    v18 = v23;
    goto LABEL_21;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v25)
      goto LABEL_25;
    v22 = *(_QWORD *)(v24 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_21;
  }
LABEL_29:
  __break(1u);
}

char *sub_10063BF68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t isStackAllocationSafe;
  char v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  size_t v40;
  char *v41;
  void *v42;
  char *v43;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t i;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[9];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v4);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for SharedBeaconRecord(0);
  v7 = __chkstk_darwin(v54);
  v9 = (uint64_t *)((char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v12 = (char *)&v45 - v11;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return (char *)&_swiftEmptySetSingleton;
  }
  v56 = v10;
  v52 = v6;
  v13 = *(_QWORD *)(a1 + 56);
  v14 = -1 << *(_BYTE *)(a1 + 32);
  if (-v14 < 64)
    v15 = ~(-1 << -(char)v14);
  else
    v15 = -1;
  v16 = v15 & v13;
  v59 = a1;
  v60 = a1 + 56;
  v55 = a1 + 56;
  v53 = ~v14;
  v61 = ~v14;
  v62 = 0;
  v63 = v15 & v13;
  v17 = a2 + 56;
  v18 = (unint64_t)(63 - v14) >> 6;
  v45 = v18 - 1;
  swift_bridgeObjectRetain(a1);
  v19 = 0;
  v48 = v18;
  v47 = v18 - 6;
  v46 = a1 + 104;
  for (i = a1; ; a1 = i)
  {
    v50 = v16;
    v51 = v19;
    if (v16)
    {
      v57 = (v16 - 1) & v16;
      v20 = __clz(__rbit64(v16)) | (v19 << 6);
      v21 = v19;
      v22 = (uint64_t)v52;
      v23 = v56;
LABEL_9:
      sub_10005972C(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v23 + 72) * v20, v22, type metadata accessor for SharedBeaconRecord);
      v24 = 0;
      goto LABEL_10;
    }
    v21 = v19 + 1;
    v22 = (uint64_t)v52;
    v23 = v56;
    if (__OFADD__(v19, 1))
      __break(1u);
    if (v21 >= v48)
    {
LABEL_35:
      v57 = 0;
      v24 = 1;
      v21 = v19;
      goto LABEL_10;
    }
    v32 = *(_QWORD *)(v55 + 8 * v21);
    if (v32)
      goto LABEL_19;
    v33 = v19 + 2;
    if (v19 + 2 >= v48)
    {
      v57 = 0;
      v24 = 1;
      goto LABEL_10;
    }
    v32 = *(_QWORD *)(v55 + 8 * v33);
    if (v32)
      goto LABEL_22;
    v19 += 3;
    if (v21 + 2 >= v48)
      goto LABEL_36;
    v32 = *(_QWORD *)(v55 + 8 * v19);
    if (v32)
    {
      v21 += 2;
      goto LABEL_19;
    }
    v33 = v21 + 3;
    if (v21 + 3 >= v48)
      goto LABEL_35;
    v32 = *(_QWORD *)(v55 + 8 * v33);
    if (v32)
    {
LABEL_22:
      v21 = v33;
LABEL_19:
      v57 = (v32 - 1) & v32;
      v20 = __clz(__rbit64(v32)) + (v21 << 6);
      goto LABEL_9;
    }
    v21 += 4;
    if (v21 >= v48)
    {
LABEL_36:
      v57 = 0;
      v24 = 1;
      v21 = v33;
    }
    else
    {
      v32 = *(_QWORD *)(v55 + 8 * v21);
      if (v32)
        goto LABEL_19;
      v34 = v51;
      while (v47 != v34)
      {
        v32 = *(_QWORD *)(v46 + 8 * v34++);
        if (v32)
        {
          v21 = v34 + 5;
          goto LABEL_19;
        }
      }
      v57 = 0;
      v24 = 1;
      v21 = v45;
    }
LABEL_10:
    v25 = v54;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v22, v24, 1, v54);
    v59 = a1;
    v60 = v55;
    v61 = v53;
    v62 = v21;
    v63 = v57;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v22, 1, v25) == 1)
    {
      sub_10007CC38(a1);
      sub_100004048(v22, (uint64_t *)&unk_1010EE180);
      return (char *)a2;
    }
    sub_1000126EC(v22, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
    Hasher.init(_seed:)(v58);
    sub_100D3B724((uint64_t)v58);
    v26 = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(a2 + 32);
    v28 = v26 & ~v27;
    if (((*(_QWORD *)(v17 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) != 0)
      break;
LABEL_6:
    sub_1000126B0((uint64_t)v12, type metadata accessor for SharedBeaconRecord);
    v19 = v21;
    v16 = v57;
  }
  v29 = ~v27;
  v30 = *(_QWORD *)(v56 + 72);
  while (1)
  {
    sub_10005972C(*(_QWORD *)(a2 + 48) + v30 * v28, (uint64_t)v9, type metadata accessor for SharedBeaconRecord);
    v31 = sub_100D3E924(v9, (uint64_t)v12);
    sub_1000126B0((uint64_t)v9, type metadata accessor for SharedBeaconRecord);
    if (v31)
      break;
    v28 = (v28 + 1) & v29;
    if (((*(_QWORD *)(v17 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
      goto LABEL_6;
  }
  isStackAllocationSafe = sub_1000126B0((uint64_t)v12, type metadata accessor for SharedBeaconRecord);
  v36 = *(_BYTE *)(a2 + 32);
  v37 = v36 & 0x3F;
  v38 = (1 << v36) + 63;
  v39 = v38 >> 6;
  v40 = 8 * (v38 >> 6);
  if (v37 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v38 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v45 - ((v40 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(a2 + 56), v40);
    v41 = sub_1006414FC((unint64_t *)((char *)&v45 - ((v40 + 15) & 0x3FFFFFFFFFFFFFF0)), v39, a2, v28, &v59);
    swift_release(a2);
    sub_10007CC38(v59);
    return v41;
  }
  else
  {
    v42 = (void *)swift_slowAlloc(v40, -1);
    memcpy(v42, (const void *)(a2 + 56), v40);
    v43 = sub_1006414FC((unint64_t *)v42, v39, a2, v28, &v59);
    swift_release(a2);
    sub_10007CC38(v59);
    swift_slowDealloc(v42, -1, -1);
    return v43;
  }
}

unint64_t *sub_10063C594(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::UInt v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t isStackAllocationSafe;
  uint64_t v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  size_t v36;
  unint64_t *v37;
  void *v38;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[9];
  uint64_t v46[5];

  v2 = a2;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
  v3 = *(_QWORD *)(a1 + 56);
  v42 = a1 + 56;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  v40 = ~v4;
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & v3;
  v41 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(a2 + 56);
  swift_bridgeObjectRetain(a1);
  v9 = 0;
  v43 = v8;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v44 = v9;
      v11 = v10 | (v9 << 6);
    }
    else
    {
      v12 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_44;
      }
      if (v12 >= v41)
        goto LABEL_42;
      v13 = *(_QWORD *)(v42 + 8 * v12);
      v14 = v9 + 1;
      if (!v13)
      {
        v14 = v9 + 2;
        if (v9 + 2 >= v41)
          goto LABEL_42;
        v13 = *(_QWORD *)(v42 + 8 * v14);
        if (!v13)
        {
          v14 = v9 + 3;
          if (v9 + 3 >= v41)
            goto LABEL_42;
          v13 = *(_QWORD *)(v42 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 4;
            if (v9 + 4 >= v41)
              goto LABEL_42;
            v13 = *(_QWORD *)(v42 + 8 * v14);
            if (!v13)
            {
              v15 = v9 + 5;
              if (v9 + 5 >= v41)
              {
LABEL_42:
                sub_10007CC38(v8);
                return (unint64_t *)v2;
              }
              v13 = *(_QWORD *)(v42 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  v14 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    break;
                  if (v14 >= v41)
                    goto LABEL_42;
                  v13 = *(_QWORD *)(v42 + 8 * v14);
                  ++v15;
                  if (v13)
                    goto LABEL_24;
                }
LABEL_44:
                __break(1u);
              }
              v14 = v9 + 5;
            }
          }
        }
      }
LABEL_24:
      v6 = (v13 - 1) & v13;
      v11 = __clz(__rbit64(v13)) + (v14 << 6);
      v44 = v14;
    }
    v16 = *(_QWORD *)(v8 + 48) + 24 * v11;
    v18 = *(_QWORD *)v16;
    v17 = *(_QWORD *)(v16 + 8);
    v19 = *(unsigned __int8 *)(v16 + 16);
    Hasher.init(_seed:)(v45);
    swift_bridgeObjectRetain(v17);
    String.hash(into:)(v45, v18, v17);
    Hasher._combine(_:)(v19);
    v20 = Hasher._finalize()();
    v21 = v2;
    v22 = -1 << *(_BYTE *)(v2 + 32);
    v23 = v20 & ~v22;
    if (((*(_QWORD *)&v7[(v23 >> 3) & 0xFFFFFFFFFFFFF8] >> v23) & 1) != 0)
      break;
LABEL_6:
    swift_bridgeObjectRelease();
    v2 = v21;
    v8 = v43;
    v9 = v44;
  }
  v24 = ~v22;
  v25 = *(_QWORD *)(v2 + 48);
  while (1)
  {
    v26 = v25 + 24 * v23;
    v27 = *(_QWORD *)(v26 + 8);
    v28 = *(unsigned __int8 *)(v26 + 16);
    if (*(_QWORD *)v26 == v18 && v27 == v17)
    {
      if ((_DWORD)v19 == v28)
        break;
      goto LABEL_28;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v26, v27, v18, v17, 0) & 1) != 0
      && ((v19 ^ v28) & 1) == 0)
    {
      break;
    }
LABEL_28:
    v23 = (v23 + 1) & v24;
    if (((*(_QWORD *)&v7[(v23 >> 3) & 0xFFFFFFFFFFFFF8] >> v23) & 1) == 0)
      goto LABEL_6;
  }
  v46[0] = v43;
  v46[1] = v42;
  v46[2] = v40;
  v46[3] = v44;
  v46[4] = v6;
  isStackAllocationSafe = swift_bridgeObjectRelease();
  v31 = v21;
  v32 = *(_BYTE *)(v21 + 32);
  v33 = v32 & 0x3F;
  v34 = (1 << v32) + 63;
  v35 = v34 >> 6;
  v36 = 8 * (v34 >> 6);
  if (v33 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v34 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v40 - ((v36 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v36);
    v37 = sub_100641928((unint64_t *)((char *)&v40 - ((v36 + 15) & 0x3FFFFFFFFFFFFFF0)), v35, v31, v23, v46);
    swift_release();
    sub_10007CC38(v46[0]);
  }
  else
  {
    v38 = (void *)swift_slowAlloc(v36, -1);
    memcpy(v38, v7, v36);
    v37 = sub_100641928((unint64_t *)v38, v35, v31, v23, v46);
    swift_release();
    sub_10007CC38(v46[0]);
    swift_slowDealloc(v38, -1, -1);
  }
  return v37;
}

void *sub_10063C9F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t __s1;

  v2 = a2;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  v20 = a1 + 56;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v19 = (unint64_t)(63 - v3) >> 6;
  v6 = a2 + 56;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  v21 = v7;
  while (1)
  {
    if (v5)
    {
      v22 = (v5 - 1) & v5;
      v23 = v8;
      v9 = __clz(__rbit64(v5)) | (v8 << 6);
      goto LABEL_25;
    }
    v10 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      JUMPOUT(0x10063D6ECLL);
    }
    if (v10 >= v19)
      goto LABEL_28;
    v11 = *(_QWORD *)(v20 + 8 * v10);
    v12 = v8 + 1;
    if (!v11)
    {
      v12 = v8 + 2;
      if (v8 + 2 >= v19)
        goto LABEL_28;
      v11 = *(_QWORD *)(v20 + 8 * v12);
      if (!v11)
      {
        v12 = v8 + 3;
        if (v8 + 3 >= v19)
          goto LABEL_28;
        v11 = *(_QWORD *)(v20 + 8 * v12);
        if (!v11)
        {
          v12 = v8 + 4;
          if (v8 + 4 >= v19)
            goto LABEL_28;
          v11 = *(_QWORD *)(v20 + 8 * v12);
          if (!v11)
            break;
        }
      }
    }
LABEL_24:
    v22 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
    v23 = v12;
LABEL_25:
    v14 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v9);
    v16 = *v14;
    v15 = v14[1];
    Hasher.init(_seed:)(&__s1);
    sub_10001BBBC(v16, v15);
    Data.hash(into:)(&__s1, v16, v15);
    v17 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v2 + 32));
    if (((*(_QWORD *)(v6 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
      __asm { BR              X8 }
    sub_10001BC14(v16, v15);
    v7 = v21;
    v8 = v23;
    v5 = v22;
  }
  v13 = v8 + 5;
  if (v8 + 5 >= v19)
    goto LABEL_28;
  v11 = *(_QWORD *)(v20 + 8 * v13);
  if (v11)
  {
    v12 = v8 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      __break(1u);
    if (v12 >= v19)
      break;
    v11 = *(_QWORD *)(v20 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_24;
  }
LABEL_28:
  sub_10007CC38(v7);
  return (void *)v2;
}

void *sub_10063D7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  uint64_t v43;
  char v44;
  void (*v45)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  size_t v51;
  void *v52;
  void *v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  int64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  unint64_t v66;

  v4 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v4);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v61 = (char *)&v55 - v12;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  v13 = -1 << *(_BYTE *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = ~v13;
  v16 = -v13;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v62 = a1;
  v63 = a1 + 56;
  v18 = a1;
  v19 = a1 + 56;
  v20 = v17 & v14;
  v21 = v15;
  v64 = v15;
  v65 = 0;
  v66 = v17 & v14;
  v60 = (char *)(a2 + 56);
  v22 = v18;
  v23 = swift_bridgeObjectRetain(v18);
  v24 = 0;
  v56 = v6;
  v59 = a2;
  v57 = v20;
  v58 = 0;
  if (!v20)
    goto LABEL_8;
LABEL_6:
  v25 = (v20 - 1) & v20;
  v26 = __clz(__rbit64(v20)) | (v24 << 6);
  v27 = v24;
  v28 = v19;
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t, __n128))(v8 + 16))(v6, *(_QWORD *)(v22 + 48) + *(_QWORD *)(v8 + 72) * v26, v7, v23);
  v29 = 0;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v29, 1, v7);
    v62 = v22;
    v63 = v28;
    v64 = v21;
    v65 = v27;
    v66 = v25;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_10007CC38(v22);
      sub_100004048((uint64_t)v6, &qword_1010ED860);
      return (void *)v59;
    }
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v61, v6, v7);
    v33 = v59;
    v34 = *(_QWORD *)(v59 + 40);
    v35 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v36 = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v7, v35);
    v37 = -1 << *(_BYTE *)(v33 + 32);
    v38 = v36 & ~v37;
    if (((*(_QWORD *)&v60[(v38 >> 3) & 0xFFFFFFFFFFFFF8] >> v38) & 1) != 0)
      break;
    v45 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_34:
    v45(v61, v7);
    v24 = v65;
    v20 = v66;
    v22 = v62;
    v19 = v63;
    v21 = v64;
    v6 = v56;
    v57 = v66;
    v58 = v65;
    if (v66)
      goto LABEL_6;
LABEL_8:
    v27 = v24 + 1;
    if (__OFADD__(v24, 1))
      __break(1u);
    v28 = v19;
    v30 = (unint64_t)(v21 + 64) >> 6;
    if (v27 >= v30)
      goto LABEL_26;
    v31 = *(_QWORD *)(v19 + 8 * v27);
    if (v31)
      goto LABEL_11;
    v24 += 2;
    if (v27 + 1 >= v30)
      goto LABEL_36;
    v31 = *(_QWORD *)(v19 + 8 * v24);
    if (v31)
      goto LABEL_14;
    if (v27 + 2 >= v30)
    {
LABEL_26:
      v25 = 0;
      v29 = 1;
      v27 = v24;
    }
    else
    {
      v31 = *(_QWORD *)(v19 + 8 * (v27 + 2));
      if (v31)
      {
        v27 += 2;
        goto LABEL_11;
      }
      v24 = v27 + 3;
      if (v27 + 3 >= v30)
      {
        v25 = 0;
        v29 = 1;
        v27 += 2;
      }
      else
      {
        v31 = *(_QWORD *)(v19 + 8 * v24);
        if (v31)
        {
LABEL_14:
          v27 = v24;
LABEL_11:
          v25 = (v31 - 1) & v31;
          v26 = __clz(__rbit64(v31)) + (v27 << 6);
          goto LABEL_7;
        }
        v27 += 4;
        if (v27 >= v30)
          goto LABEL_26;
        v31 = *(_QWORD *)(v19 + 8 * v27);
        if (v31)
          goto LABEL_11;
        v27 = v30 - 1;
        v32 = v58 + 6;
        while (v30 != v32)
        {
          v31 = *(_QWORD *)(v19 + 8 * v32++);
          if (v31)
          {
            v27 = v32 - 1;
            goto LABEL_11;
          }
        }
LABEL_36:
        v25 = 0;
        v29 = 1;
      }
    }
  }
  v39 = v33;
  v40 = ~v37;
  v41 = *(_QWORD *)(v8 + 72);
  v42 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v42(v11, *(_QWORD *)(v39 + 48) + v41 * v38, v7);
    v43 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v44 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v61, v7, v43);
    v45 = *(void (**)(char *, uint64_t))(v8 + 8);
    v45(v11, v7);
    if ((v44 & 1) != 0)
      break;
    v38 = (v38 + 1) & v40;
    if (((*(_QWORD *)&v60[(v38 >> 3) & 0xFFFFFFFFFFFFF8] >> v38) & 1) == 0)
      goto LABEL_34;
  }
  isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v45)(v61, v7);
  v47 = *(_BYTE *)(v39 + 32);
  v48 = v47 & 0x3F;
  v49 = (1 << v47) + 63;
  v50 = v49 >> 6;
  v51 = 8 * (v49 >> 6);
  if (v48 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v49 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v55 - ((v51 + 15) & 0x3FFFFFFFFFFFFFF0), v60, v51);
    v52 = sub_100642798((unint64_t *)((char *)&v55 - ((v51 + 15) & 0x3FFFFFFFFFFFFFF0)), v50, v39, v38, &v62);
    swift_release();
    sub_10007CC38(v62);
  }
  else
  {
    v54 = (void *)swift_slowAlloc(v51, -1);
    memcpy(v54, v60, v51);
    v52 = sub_100642798((unint64_t *)v54, v50, v39, v38, &v62);
    swift_release();
    sub_10007CC38(v62);
    swift_slowDealloc(v54, -1, -1);
  }
  return v52;
}

void *sub_10063DD94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v14;
  _QWORD v15[9];

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = (_QWORD *)(a1 + 56);
    v5 = -1 << *(_BYTE *)(a1 + 32);
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(a1 + 56);
    v14 = (unint64_t)(63 - v5) >> 6;
    swift_bridgeObjectRetain(a1);
    if (v7)
    {
      v8 = __clz(__rbit64(v7));
      goto LABEL_22;
    }
    if (v14 > 1)
    {
      v9 = v4[1];
      v10 = 1;
      if (v9)
        goto LABEL_21;
      v10 = 2;
      if (v14 > 2)
      {
        v9 = v4[2];
        if (v9)
          goto LABEL_21;
        v10 = 3;
        if (v14 > 3)
        {
          v9 = v4[3];
          if (v9)
            goto LABEL_21;
          v10 = 4;
          if (v14 > 4)
          {
            v9 = v4[4];
            if (!v9)
            {
              v11 = 5;
              if (v14 > 5)
              {
                v9 = v4[5];
                if (v9)
                {
                  v10 = 5;
                  goto LABEL_21;
                }
                while (1)
                {
                  v10 = v11 + 1;
                  if (__OFADD__(v11, 1))
                    __break(1u);
                  if (v10 >= v14)
                    break;
                  v9 = v4[v10];
                  ++v11;
                  if (v9)
                    goto LABEL_21;
                }
              }
              goto LABEL_25;
            }
LABEL_21:
            v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_22:
            v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v8);
            Hasher.init(_seed:)(v15);
            __asm { BR              X8 }
          }
        }
      }
    }
LABEL_25:
    sub_10007CC38(a1);
    return (void *)v2;
  }
  swift_release(a2);
  return &_swiftEmptySetSingleton;
}

void *sub_10063EA60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t __s1;
  uint64_t v37;
  unint64_t v38;

  v31 = type metadata accessor for OwnerSharingCircle(0);
  v24 = *(_QWORD *)(v31 - 8);
  v4 = __chkstk_darwin(v31);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v35 = (uint64_t *)((char *)&v23 - v7);
  if (*(_QWORD *)(a2 + 16))
  {
    v37 = a1;
    v8 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain(a1);
    if (v8)
    {
      v9 = 0;
      v34 = a2 + 56;
      v28 = a2;
      do
      {
        if (v9 >= v8)
        {
          __break(1u);
          JUMPOUT(0x10063F6D4);
        }
        v10 = a1 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
        v33 = *(_QWORD *)(v24 + 72);
        v38 = v9 + 1;
        v11 = v35;
        sub_10005972C(v10 + v33 * v9, (uint64_t)v35, type metadata accessor for OwnerSharingCircle);
        Hasher.init(_seed:)(&__s1);
        v12 = *v11;
        v13 = v11[1];
        sub_10001BBBC(*v11, v13);
        Data.hash(into:)(&__s1, v12, v13);
        sub_10001BC14(v12, v13);
        v14 = (int *)v31;
        v15 = (char *)v11 + *(int *)(v31 + 20);
        v16 = type metadata accessor for UUID(0);
        v17 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v30 = v15;
        dispatch thunk of Hashable.hash(into:)(&__s1, v16, v17);
        v29 = (char *)v11 + v14[6];
        dispatch thunk of Hashable.hash(into:)(&__s1, v16, v17);
        v27 = v14[7];
        Hasher._combine(_:)(*((unsigned __int8 *)v11 + v27));
        v26 = v14[8];
        v18 = *(uint64_t *)((char *)v11 + v26);
        swift_bridgeObjectRetain(v18);
        sub_100A2FEA8((uint64_t)&__s1, v18);
        swift_bridgeObjectRelease();
        v25 = v14[9];
        Hasher._combine(_:)(*((unsigned __int8 *)v11 + v25));
        v19 = Hasher._finalize()();
        v20 = -1 << *(_BYTE *)(a2 + 32);
        v21 = v19 & ~v20;
        if (((*(_QWORD *)(v34 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        {
          v32 = ~v20;
          sub_10005972C(*(_QWORD *)(a2 + 48) + v21 * v33, (uint64_t)v6, type metadata accessor for OwnerSharingCircle);
          __asm { BR              X10 }
        }
        sub_1000126B0((uint64_t)v35, type metadata accessor for OwnerSharingCircle);
        a1 = v37;
        v9 = v38;
        v8 = *(_QWORD *)(v37 + 16);
      }
      while (v38 != v8);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  return (void *)a2;
}

void *sub_10063F7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  char v28;
  uint64_t v29;
  id v30;
  char v31;
  int64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t isStackAllocationSafe;
  char v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  unint64_t v54;
  _QWORD v55[5];

  v2 = a2;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = sub_10000F4A0(0, (unint64_t *)&qword_1011100A0, SPHandle_ptr);
    v7 = sub_10001AC90(&qword_1010EE6B0, (unint64_t *)&qword_1011100A0, SPHandle_ptr, (const char *)&protocol conformance descriptor for NSObject);
    v8 = Set.Iterator.init(_cocoa:)(v55, v5, v6, v7);
    v3 = v55[0];
    v9 = v55[1];
    v11 = v55[2];
    v10 = v55[3];
    v12 = v55[4];
  }
  else
  {
    v13 = -1 << *(_BYTE *)(a1 + 32);
    v9 = a1 + 56;
    v11 = ~v13;
    v14 = -v13;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v12 = v15 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v10 = 0;
  }
  v50 = v3;
  v51 = v9;
  v52 = v11;
  v53 = v10;
  v54 = v12;
  v16 = v2 + 56;
  while (1)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v12)
      {
        v17 = (v12 - 1) & v12;
        v18 = __clz(__rbit64(v12)) | (v10 << 6);
LABEL_17:
        v19 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v18);
        v20 = v19;
        goto LABEL_18;
      }
      v32 = v10 + 1;
      if (__OFADD__(v10, 1))
        __break(1u);
      v33 = (unint64_t)(v11 + 64) >> 6;
      if (v32 >= v33)
      {
        v19 = 0;
        v17 = 0;
        goto LABEL_18;
      }
      v34 = *(_QWORD *)(v51 + 8 * v32);
      if (v34)
      {
LABEL_31:
        v17 = (v34 - 1) & v34;
        v18 = __clz(__rbit64(v34)) + (v32 << 6);
        v10 = v32;
        goto LABEL_17;
      }
      v35 = v10 + 2;
      if (v10 + 2 >= v33)
        goto LABEL_47;
      v34 = *(_QWORD *)(v51 + 8 * v35);
      if (v34)
      {
LABEL_35:
        v32 = v35;
        goto LABEL_31;
      }
      if (v10 + 3 < v33)
      {
        v34 = *(_QWORD *)(v51 + 8 * (v10 + 3));
        if (v34)
        {
          v32 = v10 + 3;
          goto LABEL_31;
        }
        v35 = v10 + 4;
        if (v10 + 4 >= v33)
        {
          v19 = 0;
          v17 = 0;
          v10 += 3;
LABEL_18:
          v53 = v10;
          v54 = v17;
          if (!v19)
            goto LABEL_56;
          goto LABEL_22;
        }
        v34 = *(_QWORD *)(v51 + 8 * v35);
        if (v34)
          goto LABEL_35;
        v32 = v10 + 5;
        if (v10 + 5 < v33)
        {
          v34 = *(_QWORD *)(v51 + 8 * v32);
          if (v34)
            goto LABEL_31;
          v32 = v33 - 1;
          v36 = v10 + 6;
          while (v33 != v36)
          {
            v34 = *(_QWORD *)(v51 + 8 * v36++);
            if (v34)
            {
              v32 = v36 - 1;
              goto LABEL_31;
            }
          }
LABEL_47:
          v19 = 0;
          v17 = 0;
          v10 = v32;
          goto LABEL_18;
        }
      }
      v19 = 0;
      v17 = 0;
      v10 = v35;
      goto LABEL_18;
    }
    v21 = __CocoaSet.Iterator.next()(v8);
    if (!v21)
      goto LABEL_57;
    v22 = v21;
    v48 = v21;
    v23 = sub_10000F4A0(0, (unint64_t *)&qword_1011100A0, SPHandle_ptr);
    swift_unknownObjectRetain(v22);
    swift_dynamicCast(&v49, &v48, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
    v19 = v49;
    swift_unknownObjectRelease(v22);
    if (!v19)
    {
LABEL_56:
      v3 = v50;
LABEL_57:
      sub_10007CC38(v3);
      return (void *)v2;
    }
LABEL_22:
    v24 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
    v25 = -1 << *(_BYTE *)(v2 + 32);
    v26 = v24 & ~v25;
    if (((*(_QWORD *)(v16 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
      goto LABEL_13;
    sub_10000F4A0(0, (unint64_t *)&qword_1011100A0, SPHandle_ptr);
    v27 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v26);
    v28 = static NSObject.== infix(_:_:)(v27, v19);

    if ((v28 & 1) != 0)
      break;
    v29 = ~v25;
    while (1)
    {
      v26 = (v26 + 1) & v29;
      if (((*(_QWORD *)(v16 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
        break;
      v30 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v26);
      v31 = static NSObject.== infix(_:_:)(v30, v19);

      if ((v31 & 1) != 0)
        goto LABEL_50;
    }
LABEL_13:

    v3 = v50;
    v11 = v52;
    v10 = v53;
    v12 = v54;
  }
LABEL_50:

  v38 = *(_BYTE *)(v2 + 32);
  v39 = v38 & 0x3F;
  v40 = (1 << v38) + 63;
  v41 = v40 >> 6;
  v42 = 8 * (v40 >> 6);
  if (v39 < 0xE
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v40 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v48 - ((v42 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v42);
    sub_10064441C((unint64_t *)((char *)&v48 - ((v42 + 15) & 0x3FFFFFFFFFFFFFF0)), v41, v2, v26, &v50);
    v44 = v43;
    swift_release();
    sub_10007CC38(v50);
  }
  else
  {
    v45 = (void *)swift_slowAlloc(v42, -1);
    memcpy(v45, (const void *)(v2 + 56), v42);
    sub_10064441C((unint64_t *)v45, v41, v2, v26, &v50);
    v44 = v46;
    swift_release();
    sub_10007CC38(v50);
    swift_slowDealloc(v45, -1, -1);
  }
  return (void *)v44;
}

unint64_t *sub_10063FD1C(uint64_t a1, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  Swift::UInt v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t isStackAllocationSafe;
  char v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  unint64_t *v36;
  void *v37;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[9];
  uint64_t v45[5];

  v2 = a2;
  if (a2[2])
  {
    v3 = *(_QWORD *)(a1 + 56);
    v41 = a1 + 56;
    v4 = -1 << *(_BYTE *)(a1 + 32);
    v39 = ~v4;
    if (-v4 < 64)
      v5 = ~(-1 << -(char)v4);
    else
      v5 = -1;
    v6 = v5 & v3;
    v40 = (unint64_t)(63 - v4) >> 6;
    v7 = (char *)(a2 + 7);
    swift_bridgeObjectRetain(a1);
    v9 = 0;
    v42 = v8;
    while (1)
    {
      if (v6)
      {
        v10 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        v43 = v9;
        v11 = v10 | (v9 << 6);
      }
      else
      {
        v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_42;
        }
        if (v12 >= v40)
          goto LABEL_39;
        v13 = *(_QWORD *)(v41 + 8 * v12);
        v14 = v9 + 1;
        if (!v13)
        {
          v14 = v9 + 2;
          if (v9 + 2 >= v40)
            goto LABEL_39;
          v13 = *(_QWORD *)(v41 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 3;
            if (v9 + 3 >= v40)
              goto LABEL_39;
            v13 = *(_QWORD *)(v41 + 8 * v14);
            if (!v13)
            {
              v14 = v9 + 4;
              if (v9 + 4 >= v40)
                goto LABEL_39;
              v13 = *(_QWORD *)(v41 + 8 * v14);
              if (!v13)
              {
                v15 = v9 + 5;
                if (v9 + 5 >= v40)
                {
LABEL_39:
                  sub_10007CC38(v8);
                  return v2;
                }
                v13 = *(_QWORD *)(v41 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    v14 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      break;
                    if (v14 >= v40)
                      goto LABEL_39;
                    v13 = *(_QWORD *)(v41 + 8 * v14);
                    ++v15;
                    if (v13)
                      goto LABEL_24;
                  }
LABEL_42:
                  __break(1u);
                }
                v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        v6 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v14 << 6);
        v43 = v14;
      }
      v16 = (unsigned __int8 *)(*(_QWORD *)(v8 + 48) + 24 * v11);
      v17 = *v16;
      v19 = *((_QWORD *)v16 + 1);
      v18 = *((_QWORD *)v16 + 2);
      Hasher.init(_seed:)(v44);
      Hasher._combine(_:)(v17);
      swift_bridgeObjectRetain_n(v18, 2);
      String.hash(into:)(v44, v19, v18);
      swift_bridgeObjectRelease();
      v20 = Hasher._finalize()();
      v21 = (uint64_t)v2;
      v22 = -1 << *((_BYTE *)v2 + 32);
      v23 = v20 & ~v22;
      if (((*(_QWORD *)&v7[(v23 >> 3) & 0xFFFFFFFFFFFFF8] >> v23) & 1) != 0)
        break;
LABEL_6:
      swift_bridgeObjectRelease();
      v8 = v42;
      v9 = v43;
      v2 = (unint64_t *)v21;
    }
    v24 = ~v22;
    v25 = v2[6];
    while (1)
    {
      v26 = (unsigned __int8 *)(v25 + 24 * v23);
      if (*v26 == (_DWORD)v17)
      {
        v27 = *((_QWORD *)v26 + 1);
        v28 = *((_QWORD *)v26 + 2);
        v29 = v27 == v19 && v28 == v18;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, v19, v18, 0) & 1) != 0)
          break;
      }
      v23 = (v23 + 1) & v24;
      if (((*(_QWORD *)&v7[(v23 >> 3) & 0xFFFFFFFFFFFFF8] >> v23) & 1) == 0)
        goto LABEL_6;
    }
    v45[0] = v42;
    v45[1] = v41;
    v45[2] = v39;
    v45[3] = v43;
    v45[4] = v6;
    isStackAllocationSafe = swift_bridgeObjectRelease();
    v31 = *(_BYTE *)(v21 + 32);
    v32 = v31 & 0x3F;
    v33 = (1 << v31) + 63;
    v34 = v33 >> 6;
    v35 = 8 * (v33 >> 6);
    if (v32 <= 0xD
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v35);
      v36 = sub_1006447A8((unint64_t *)((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0)), v34, v21, v23, v45);
      swift_release();
      sub_10007CC38(v45[0]);
      return v36;
    }
    else
    {
      v37 = (void *)swift_slowAlloc(v35, -1);
      memcpy(v37, v7, v35);
      v2 = sub_1006447A8((unint64_t *)v37, v34, v21, v23, v45);
      swift_release();
      sub_10007CC38(v45[0]);
      swift_slowDealloc(v37, -1, -1);
    }
  }
  else
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
  return v2;
}

void *sub_100640178(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  uint64_t v43;
  char v44;
  void (*v45)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  size_t v51;
  void *v52;
  void *v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  int64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  unint64_t v66;

  v4 = sub_10001A9A8(&qword_1011020F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CorrelationIdentifier(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v61 = (char *)&v55 - v12;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  v13 = -1 << *(_BYTE *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = ~v13;
  v16 = -v13;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v62 = a1;
  v63 = a1 + 56;
  v18 = a1;
  v19 = a1 + 56;
  v20 = v17 & v14;
  v21 = v15;
  v64 = v15;
  v65 = 0;
  v66 = v17 & v14;
  v60 = (char *)(a2 + 56);
  v22 = v18;
  v23 = swift_bridgeObjectRetain(v18);
  v24 = 0;
  v56 = v6;
  v59 = a2;
  v57 = v20;
  v58 = 0;
  if (!v20)
    goto LABEL_8;
LABEL_6:
  v25 = (v20 - 1) & v20;
  v26 = __clz(__rbit64(v20)) | (v24 << 6);
  v27 = v24;
  v28 = v19;
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t, __n128))(v8 + 16))(v6, *(_QWORD *)(v22 + 48) + *(_QWORD *)(v8 + 72) * v26, v7, v23);
  v29 = 0;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v29, 1, v7);
    v62 = v22;
    v63 = v28;
    v64 = v21;
    v65 = v27;
    v66 = v25;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_10007CC38(v22);
      sub_100004048((uint64_t)v6, &qword_1011020F8);
      return (void *)v59;
    }
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v61, v6, v7);
    v33 = v59;
    v34 = *(_QWORD *)(v59 + 40);
    v35 = sub_100006204((unint64_t *)&unk_10111C370, (uint64_t (*)(uint64_t))&type metadata accessor for CorrelationIdentifier, (uint64_t)&protocol conformance descriptor for CorrelationIdentifier);
    v36 = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v7, v35);
    v37 = -1 << *(_BYTE *)(v33 + 32);
    v38 = v36 & ~v37;
    if (((*(_QWORD *)&v60[(v38 >> 3) & 0xFFFFFFFFFFFFF8] >> v38) & 1) != 0)
      break;
    v45 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_34:
    v45(v61, v7);
    v24 = v65;
    v20 = v66;
    v22 = v62;
    v19 = v63;
    v21 = v64;
    v6 = v56;
    v57 = v66;
    v58 = v65;
    if (v66)
      goto LABEL_6;
LABEL_8:
    v27 = v24 + 1;
    if (__OFADD__(v24, 1))
      __break(1u);
    v28 = v19;
    v30 = (unint64_t)(v21 + 64) >> 6;
    if (v27 >= v30)
      goto LABEL_26;
    v31 = *(_QWORD *)(v19 + 8 * v27);
    if (v31)
      goto LABEL_11;
    v24 += 2;
    if (v27 + 1 >= v30)
      goto LABEL_36;
    v31 = *(_QWORD *)(v19 + 8 * v24);
    if (v31)
      goto LABEL_14;
    if (v27 + 2 >= v30)
    {
LABEL_26:
      v25 = 0;
      v29 = 1;
      v27 = v24;
    }
    else
    {
      v31 = *(_QWORD *)(v19 + 8 * (v27 + 2));
      if (v31)
      {
        v27 += 2;
        goto LABEL_11;
      }
      v24 = v27 + 3;
      if (v27 + 3 >= v30)
      {
        v25 = 0;
        v29 = 1;
        v27 += 2;
      }
      else
      {
        v31 = *(_QWORD *)(v19 + 8 * v24);
        if (v31)
        {
LABEL_14:
          v27 = v24;
LABEL_11:
          v25 = (v31 - 1) & v31;
          v26 = __clz(__rbit64(v31)) + (v27 << 6);
          goto LABEL_7;
        }
        v27 += 4;
        if (v27 >= v30)
          goto LABEL_26;
        v31 = *(_QWORD *)(v19 + 8 * v27);
        if (v31)
          goto LABEL_11;
        v27 = v30 - 1;
        v32 = v58 + 6;
        while (v30 != v32)
        {
          v31 = *(_QWORD *)(v19 + 8 * v32++);
          if (v31)
          {
            v27 = v32 - 1;
            goto LABEL_11;
          }
        }
LABEL_36:
        v25 = 0;
        v29 = 1;
      }
    }
  }
  v39 = v33;
  v40 = ~v37;
  v41 = *(_QWORD *)(v8 + 72);
  v42 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v42(v11, *(_QWORD *)(v39 + 48) + v41 * v38, v7);
    v43 = sub_100006204(&qword_101102100, (uint64_t (*)(uint64_t))&type metadata accessor for CorrelationIdentifier, (uint64_t)&protocol conformance descriptor for CorrelationIdentifier);
    v44 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v61, v7, v43);
    v45 = *(void (**)(char *, uint64_t))(v8 + 8);
    v45(v11, v7);
    if ((v44 & 1) != 0)
      break;
    v38 = (v38 + 1) & v40;
    if (((*(_QWORD *)&v60[(v38 >> 3) & 0xFFFFFFFFFFFFF8] >> v38) & 1) == 0)
      goto LABEL_34;
  }
  isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v45)(v61, v7);
  v47 = *(_BYTE *)(v39 + 32);
  v48 = v47 & 0x3F;
  v49 = (1 << v47) + 63;
  v50 = v49 >> 6;
  v51 = 8 * (v49 >> 6);
  if (v48 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v49 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v55 - ((v51 + 15) & 0x3FFFFFFFFFFFFFF0), v60, v51);
    v52 = sub_100644A80((unint64_t *)((char *)&v55 - ((v51 + 15) & 0x3FFFFFFFFFFFFFF0)), v50, v39, v38, &v62);
    swift_release();
    sub_10007CC38(v62);
  }
  else
  {
    v54 = (void *)swift_slowAlloc(v51, -1);
    memcpy(v54, v60, v51);
    v52 = sub_100644A80((unint64_t *)v54, v50, v39, v38, &v62);
    swift_release();
    sub_10007CC38(v62);
    swift_slowDealloc(v54, -1, -1);
  }
  return v52;
}

void *sub_100640734(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t, __n128);
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  size_t v34;
  void *v35;
  void *v36;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;

  v4 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v41 = (char *)&v38 - v12;
  if (*(_QWORD *)(a2 + 16))
  {
    v42 = a1;
    v43 = 0;
    v13 = *(_QWORD *)(a1 + 16);
    v14 = swift_bridgeObjectRetain(a1);
    if (v13)
    {
      v15 = 0;
      v39 = v6;
      v40 = (char *)(a2 + 56);
      while (1)
      {
        if (v15 >= v13)
          __break(1u);
        v16 = *(_QWORD *)(v8 + 72);
        v17 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v8 + 16);
        v17(v6, a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v16 * v15, v7, v14);
        v43 = v15 + 1;
        v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
        v18(v6, 0, 1, v7);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
          break;
        v38 = v18;
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v41, v6, v7);
        v19 = *(_QWORD *)(a2 + 40);
        v20 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v7, v20);
        v22 = a2;
        v23 = -1 << *(_BYTE *)(a2 + 32);
        v24 = v21 & ~v23;
        if (((*(_QWORD *)&v40[(v24 >> 3) & 0xFFFFFFFFFFFFF8] >> v24) & 1) != 0)
        {
          v25 = ~v23;
          while (1)
          {
            ((void (*)(char *, unint64_t, uint64_t))v17)(v11, *(_QWORD *)(v22 + 48) + v24 * v16, v7);
            v26 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v27 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v41, v7, v26);
            v28 = *(void (**)(char *, uint64_t))(v8 + 8);
            v28(v11, v7);
            if ((v27 & 1) != 0)
              break;
            v24 = (v24 + 1) & v25;
            if (((*(_QWORD *)&v40[(v24 >> 3) & 0xFFFFFFFFFFFFF8] >> v24) & 1) == 0)
              goto LABEL_12;
          }
          isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v28)(v41, v7);
          v30 = *(_BYTE *)(v22 + 32);
          v31 = v30 & 0x3F;
          v32 = (1 << v30) + 63;
          v33 = v32 >> 6;
          v34 = 8 * (v32 >> 6);
          if (v31 <= 0xD
            || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v32 >> 6), 8),
                (_DWORD)isStackAllocationSafe))
          {
            __chkstk_darwin(isStackAllocationSafe);
            memcpy((char *)&v38 - ((v34 + 15) & 0x3FFFFFFFFFFFFFF0), v40, v34);
            v35 = sub_100644EC4((unint64_t *)((char *)&v38 - ((v34 + 15) & 0x3FFFFFFFFFFFFFF0)), v33, v22, v24, &v42);
            swift_release(v22);
            swift_bridgeObjectRelease();
          }
          else
          {
            v36 = (void *)swift_slowAlloc(v34, -1);
            memcpy(v36, v40, v34);
            v35 = sub_100644EC4((unint64_t *)v36, v33, v22, v24, &v42);
            swift_release(v22);
            swift_bridgeObjectRelease();
            swift_slowDealloc(v36, -1, -1);
          }
          return v35;
        }
        v28 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_12:
        v28(v41, v7);
        a1 = v42;
        v15 = v43;
        v13 = *(_QWORD *)(v42 + 16);
        a2 = v22;
        v6 = v39;
        if (v43 == v13)
        {
          v38(v39, 1, 1, v7);
          break;
        }
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    }
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v6, &qword_1010ED860);
  }
  else
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  return (void *)a2;
}

void *sub_100640BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  Swift::Int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t isStackAllocationSafe;
  char v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  size_t v49;
  void *v50;
  void *v52;
  void *v53;
  _QWORD v54[2];
  int64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  _QWORD v62[9];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  unint64_t v67;

  v4 = sub_10001A9A8(&qword_101101F68);
  __chkstk_darwin(v4);
  v6 = (char *)v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BeaconIdentifier(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v13 = (char *)v54 - v12;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  v59 = v11;
  v57 = v6;
  v14 = -1 << *(_BYTE *)(a1 + 32);
  v16 = a1 + 56;
  v15 = *(_QWORD *)(a1 + 56);
  v17 = ~v14;
  v18 = -v14;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  else
    v19 = -1;
  v63 = a1;
  v64 = a1 + 56;
  v20 = v19 & v15;
  v65 = v17;
  v66 = 0;
  v67 = v19 & v15;
  v21 = (char *)(a2 + 56);
  swift_bridgeObjectRetain(a1);
  v22 = 0;
  v56 = v7;
  v58 = a2;
  while (1)
  {
    v54[1] = v20;
    v55 = v22;
    if (v20)
    {
      v23 = v17;
      v24 = v16;
      v60 = (v20 - 1) & v20;
      v61 = v22;
      v25 = __clz(__rbit64(v20)) | (v22 << 6);
LABEL_9:
      v26 = *(_QWORD *)(a1 + 48);
      v27 = a1;
      v28 = v59;
      v29 = (uint64_t)v57;
      sub_10005972C(v26 + *(_QWORD *)(v59 + 72) * v25, (uint64_t)v57, type metadata accessor for BeaconIdentifier);
      v30 = 0;
      goto LABEL_32;
    }
    v31 = v22 + 1;
    if (__OFADD__(v22, 1))
      __break(1u);
    v32 = (unint64_t)(v17 + 64) >> 6;
    if (v31 >= v32)
    {
LABEL_30:
      v23 = v17;
      v24 = v16;
      v60 = 0;
      v61 = v22;
      goto LABEL_31;
    }
    v33 = *(_QWORD *)(v16 + 8 * v31);
    if (v33)
      goto LABEL_13;
    v22 += 2;
    if (v31 + 1 >= v32)
    {
      v61 = v31;
    }
    else
    {
      v33 = *(_QWORD *)(v16 + 8 * v22);
      if (v33)
        goto LABEL_16;
      if (v31 + 2 >= v32)
        goto LABEL_30;
      v33 = *(_QWORD *)(v16 + 8 * (v31 + 2));
      if (v33)
      {
        v31 += 2;
        goto LABEL_13;
      }
      v22 = v31 + 3;
      if (v31 + 3 >= v32)
      {
        v23 = v17;
        v24 = v16;
        v60 = 0;
        v61 = v31 + 2;
        goto LABEL_31;
      }
      v33 = *(_QWORD *)(v16 + 8 * v22);
      if (v33)
      {
LABEL_16:
        v31 = v22;
LABEL_13:
        v23 = v17;
        v24 = v16;
        v60 = (v33 - 1) & v33;
        v61 = v31;
        v25 = __clz(__rbit64(v33)) + (v31 << 6);
        goto LABEL_9;
      }
      v31 += 4;
      if (v31 >= v32)
        goto LABEL_30;
      v33 = *(_QWORD *)(v16 + 8 * v31);
      if (v33)
        goto LABEL_13;
      v34 = v55 + 6;
      while (v32 != v34)
      {
        v33 = *(_QWORD *)(v16 + 8 * v34++);
        if (v33)
        {
          v31 = v34 - 1;
          goto LABEL_13;
        }
      }
      v61 = v32 - 1;
    }
    v23 = v17;
    v24 = v16;
    v60 = 0;
LABEL_31:
    v30 = 1;
    v29 = (uint64_t)v57;
    v27 = a1;
    v28 = v59;
LABEL_32:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v29, v30, 1, v7);
    v63 = v27;
    v64 = v24;
    v65 = v23;
    v66 = v61;
    v67 = v60;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v29, 1, v7) == 1)
    {
      sub_10007CC38(v27);
      sub_100004048(v29, &qword_101101F68);
      return (void *)v58;
    }
    sub_1000126EC(v29, (uint64_t)v13, type metadata accessor for BeaconIdentifier);
    v35 = v58;
    Hasher.init(_seed:)(v62);
    v36 = type metadata accessor for UUID(0);
    v37 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v62, v36, v37);
    v38 = &v13[*(int *)(v7 + 20)];
    dispatch thunk of Hashable.hash(into:)(v62, v36, v37);
    v39 = Hasher._finalize()();
    v40 = -1 << *(_BYTE *)(v35 + 32);
    v41 = v39 & ~v40;
    if (((*(_QWORD *)&v21[(v41 >> 3) & 0xFFFFFFFFFFFFF8] >> v41) & 1) != 0)
      break;
LABEL_6:
    sub_1000126B0((uint64_t)v13, type metadata accessor for BeaconIdentifier);
    v22 = v66;
    v20 = v67;
    a1 = v63;
    v16 = v64;
    v17 = v65;
  }
  v42 = ~v40;
  v43 = *(_QWORD *)(v59 + 72);
  while (1)
  {
    sub_10005972C(*(_QWORD *)(v35 + 48) + v43 * v41, (uint64_t)v10, type metadata accessor for BeaconIdentifier);
    if ((static UUID.== infix(_:_:)(v10, v13) & 1) != 0
      && (static UUID.== infix(_:_:)(&v10[*(int *)(v7 + 20)], v38) & 1) != 0)
    {
      break;
    }
    sub_1000126B0((uint64_t)v10, type metadata accessor for BeaconIdentifier);
    v41 = (v41 + 1) & v42;
    if (((*(_QWORD *)&v21[(v41 >> 3) & 0xFFFFFFFFFFFFF8] >> v41) & 1) == 0)
      goto LABEL_6;
  }
  sub_1000126B0((uint64_t)v10, type metadata accessor for BeaconIdentifier);
  isStackAllocationSafe = sub_1000126B0((uint64_t)v13, type metadata accessor for BeaconIdentifier);
  v45 = *(_BYTE *)(v35 + 32);
  v46 = v45 & 0x3F;
  v47 = (1 << v45) + 63;
  v48 = v47 >> 6;
  v49 = 8 * (v47 >> 6);
  if (v46 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v47 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)v54 - ((v49 + 15) & 0x3FFFFFFFFFFFFFF0), v21, v49);
    v50 = sub_100645270((_QWORD *)((char *)v54 - ((v49 + 15) & 0x3FFFFFFFFFFFFFF0)), v48, v58, v41, &v63);
    swift_release();
    sub_10007CC38(v63);
    return v50;
  }
  else
  {
    v52 = (void *)swift_slowAlloc(v49, -1);
    memcpy(v52, v21, v49);
    v53 = sub_100645270((unint64_t *)v52, v48, v58, v41, &v63);
    swift_release();
    sub_10007CC38(v63);
    swift_slowDealloc(v52, -1, -1);
    return v53;
  }
}

void *sub_1006411D4(uint64_t a1, uint64_t a2)
{
  return sub_10064126C(a1, a2, (uint64_t (*)(Swift::Int, uint64_t, uint64_t, uint64_t))sub_100853E3C);
}

void *sub_100641220(uint64_t a1, uint64_t a2)
{
  return sub_10064126C(a1, a2, (uint64_t (*)(Swift::Int, uint64_t, uint64_t, uint64_t))sub_100853E48);
}

void *sub_10064126C(uint64_t a1, uint64_t a2, uint64_t (*a3)(Swift::Int, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  uint64_t isStackAllocationSafe;
  uint64_t v17;
  _BYTE *v18;
  Swift::Int v19;
  void *v20;
  _BYTE v22[16];
  uint64_t v23[9];
  _QWORD v24[2];

  v3 = a2;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  v24[0] = a1;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v7 = 0;
    v8 = a2 + 56;
    do
    {
      v9 = *(unsigned __int8 *)(a1 + 32 + v7++);
      Hasher.init(_seed:)(v23);
      Hasher._combine(_:)(v9);
      v10 = Hasher._finalize()();
      v11 = -1 << *(_BYTE *)(v3 + 32);
      v12 = v10 & ~v11;
      if (((*(_QWORD *)(v8 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
      {
        v13 = *(_QWORD *)(v3 + 48);
        if (*(unsigned __int8 *)(v13 + v12) == (_DWORD)v9)
        {
LABEL_9:
          v24[1] = v7;
          v14 = (unint64_t)(63 - v11) >> 6;
          v15 = 8 * v14;
          swift_bridgeObjectRetain(a1);
          if (v14 < 0x81
            || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v15, 8), (_DWORD)isStackAllocationSafe))
          {
            __chkstk_darwin(isStackAllocationSafe);
            v18 = &v22[-v17];
            memcpy(&v22[-v17], (const void *)(v3 + 56), v15);
            v19 = sub_100645700((Swift::Int)v18, v14, v3, v12, v24, a3);
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            v20 = (void *)swift_slowAlloc(v15, -1);
            memcpy(v20, (const void *)(v3 + 56), v15);
            v19 = sub_100645700((Swift::Int)v20, v14, v3, v12, v24, a3);
            swift_release();
            swift_bridgeObjectRelease();
            swift_slowDealloc(v20, -1, -1);
          }
          return (void *)v19;
        }
        while (1)
        {
          v12 = (v12 + 1) & ~v11;
          if (((*(_QWORD *)(v8 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
            break;
          if (*(unsigned __int8 *)(v13 + v12) == (_DWORD)v9)
            goto LABEL_9;
        }
      }
    }
    while (v7 != v5);
  }
  return (void *)v3;
}

char *sub_1006414FC(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  char *result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  int64_t v42;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[10];
  uint64_t v61;

  v50 = a2;
  v54 = a3;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v9);
  v55 = (uint64_t)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for SharedBeaconRecord(0);
  v11 = *(_QWORD *)(v56 - 8);
  v12 = __chkstk_darwin(v56);
  v14 = (uint64_t *)((char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = (char *)__chkstk_darwin(v12);
  v17 = (char *)&v49 - v16;
  v18 = *(_QWORD *)(a3 + 16);
  v19 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v20 = *(unint64_t *)((char *)a1 + v19) & ((-1 << a4) - 1);
  v52 = a1;
  *(unint64_t *)((char *)a1 + v19) = v20;
  v21 = v18 - 1;
  v61 = a3 + 56;
  v53 = a5;
  while (2)
  {
    v51 = v21;
    do
    {
      while (1)
      {
        v23 = *a5;
        v22 = a5[1];
        v24 = a5[2];
        v25 = a5[3];
        v26 = a5[4];
        v58 = v24;
        v59 = v22;
        if (v26)
        {
          v57 = (v26 - 1) & v26;
          v27 = __clz(__rbit64(v26)) | (v25 << 6);
LABEL_6:
          v28 = v55;
          sub_10005972C(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v11 + 72) * v27, v55, type metadata accessor for SharedBeaconRecord);
          v29 = 0;
          goto LABEL_7;
        }
        v42 = v25 + 1;
        if (__OFADD__(v25, 1))
        {
          __break(1u);
          goto LABEL_41;
        }
        v43 = (unint64_t)(v24 + 64) >> 6;
        if (v42 >= v43)
        {
          v57 = 0;
          v29 = 1;
          v28 = v55;
          goto LABEL_7;
        }
        v44 = *(_QWORD *)(v22 + 8 * v42);
        if (v44)
          goto LABEL_16;
        if (v25 + 2 >= v43)
          goto LABEL_33;
        v44 = *(_QWORD *)(v22 + 8 * (v25 + 2));
        if (v44)
        {
          v42 = v25 + 2;
LABEL_16:
          v57 = (v44 - 1) & v44;
          v27 = __clz(__rbit64(v44)) + (v42 << 6);
          v25 = v42;
          goto LABEL_6;
        }
        if (v25 + 3 >= v43)
        {
          v57 = 0;
          v29 = 1;
          v25 += 2;
          v28 = v55;
          goto LABEL_7;
        }
        v44 = *(_QWORD *)(v22 + 8 * (v25 + 3));
        if (v44)
        {
          v42 = v25 + 3;
          goto LABEL_16;
        }
        v42 = v25 + 4;
        if (v25 + 4 < v43)
        {
          v44 = *(_QWORD *)(v22 + 8 * v42);
          if (v44)
            goto LABEL_16;
          v42 = v43 - 1;
          v47 = v25 + 5;
          while (v43 != v47)
          {
            v44 = *(_QWORD *)(v22 + 8 * v47++);
            if (v44)
            {
              v42 = v47 - 1;
              goto LABEL_16;
            }
          }
LABEL_33:
          v57 = 0;
          v29 = 1;
          v25 = v42;
          v28 = v55;
          goto LABEL_7;
        }
        v57 = 0;
        v29 = 1;
        v25 += 3;
        v28 = v55;
LABEL_7:
        v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
        v31 = v11;
        v32 = v56;
        v30(v28, v29, 1, v56);
        v33 = v59;
        *a5 = v23;
        a5[1] = v33;
        a5[2] = v58;
        a5[3] = v25;
        a5[4] = v57;
        v34 = v31;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v28, 1, v32) == 1)
        {
          sub_100004048(v28, (uint64_t *)&unk_1010EE180);
          v48 = v54;
          swift_retain();
          return sub_100852238(v52, v50, v51, v48);
        }
        sub_1000126EC(v28, (uint64_t)v17, type metadata accessor for SharedBeaconRecord);
        v35 = v54;
        Hasher.init(_seed:)(v60);
        sub_100D3B724((uint64_t)v60);
        v36 = Hasher._finalize()();
        v37 = -1 << *(_BYTE *)(v35 + 32);
        v38 = v36 & ~v37;
        if (((*(_QWORD *)(v61 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8)) >> v38) & 1) != 0)
          break;
LABEL_3:
        result = (char *)sub_1000126B0((uint64_t)v17, type metadata accessor for SharedBeaconRecord);
        a5 = v53;
        v11 = v34;
      }
      v39 = ~v37;
      v40 = *(_QWORD *)(v34 + 72);
      while (1)
      {
        sub_10005972C(*(_QWORD *)(v35 + 48) + v40 * v38, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
        v41 = sub_100D3E924(v14, (uint64_t)v17);
        sub_1000126B0((uint64_t)v14, type metadata accessor for SharedBeaconRecord);
        if (v41)
          break;
        v38 = (v38 + 1) & v39;
        if (((*(_QWORD *)(v61 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8)) >> v38) & 1) == 0)
          goto LABEL_3;
      }
      result = (char *)sub_1000126B0((uint64_t)v17, type metadata accessor for SharedBeaconRecord);
      v45 = (v38 >> 3) & 0x1FFFFFFFFFFFFFF8;
      a5 = v53;
      v46 = *(unint64_t *)((char *)v52 + v45);
      *(unint64_t *)((char *)v52 + v45) = v46 & ~(1 << v38);
      v11 = v34;
    }
    while ((v46 & (1 << v38)) == 0);
    v21 = v51 - 1;
    if (__OFSUB__(v51, 1))
    {
LABEL_41:
      __break(1u);
      return result;
    }
    if (v51 != 1)
      continue;
    return (char *)&_swiftEmptySetSingleton;
  }
}

unint64_t *sub_100641928(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::UInt v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  _QWORD v38[9];
  uint64_t v39;

  v5 = a3;
  v6 = *(_QWORD *)(a3 + 16);
  v36 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v7 = v6 - 1;
  v8 = a3 + 56;
  v39 = a3;
  v37 = a5;
LABEL_2:
  v35 = v7;
LABEL_4:
  while (2)
  {
    v10 = a5[3];
    v9 = a5[4];
    if (v9)
    {
      v11 = (v9 - 1) & v9;
      v12 = __clz(__rbit64(v9)) | (v10 << 6);
LABEL_16:
      v18 = *(_QWORD *)(*a5 + 48) + 24 * v12;
      v20 = *(_QWORD *)v18;
      v19 = *(_QWORD *)(v18 + 8);
      v21 = *(unsigned __int8 *)(v18 + 16);
      a5[3] = v10;
      a5[4] = v11;
      Hasher.init(_seed:)(v38);
      swift_bridgeObjectRetain(v19);
      String.hash(into:)(v38, v20, v19);
      Hasher._combine(_:)(v21);
      v22 = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v5 + 32);
      v24 = v22 & ~v23;
      if (((*(_QWORD *)(v8 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
      {
LABEL_3:
        result = (unint64_t *)swift_bridgeObjectRelease();
        v5 = v39;
        a5 = v37;
        continue;
      }
      v25 = ~v23;
      v26 = *(_QWORD *)(v5 + 48);
      while (1)
      {
        v27 = v26 + 24 * v24;
        v28 = *(_QWORD *)(v27 + 8);
        v29 = *(unsigned __int8 *)(v27 + 16);
        if (*(_QWORD *)v27 == v20 && v28 == v19)
        {
          if ((_DWORD)v21 == v29)
            goto LABEL_26;
        }
        else if ((_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v27, v28, v20, v19, 0) & 1) != 0
               && ((v21 ^ v29) & 1) == 0)
        {
LABEL_26:
          result = (unint64_t *)swift_bridgeObjectRelease();
          v31 = (v24 >> 3) & 0x1FFFFFFFFFFFFFF8;
          a5 = v37;
          v32 = *(unint64_t *)((char *)v36 + v31);
          *(unint64_t *)((char *)v36 + v31) = v32 & ~(1 << v24);
          v5 = v39;
          if ((v32 & (1 << v24)) != 0)
          {
            v7 = v35 - 1;
            if (__OFSUB__(v35, 1))
              goto LABEL_44;
            if (v35 == 1)
              return (unint64_t *)&_swiftEmptySetSingleton;
            goto LABEL_2;
          }
          goto LABEL_4;
        }
        v24 = (v24 + 1) & v25;
        if (((*(_QWORD *)(v8 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
          goto LABEL_3;
      }
    }
    break;
  }
  v13 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    v14 = (unint64_t)(a5[2] + 64) >> 6;
    if (v13 >= v14)
    {
      v13 = a5[3];
LABEL_40:
      a5[3] = v13;
      a5[4] = 0;
      swift_retain();
      return (unint64_t *)sub_100852254(v36, a2, v35, v5);
    }
    v15 = a5[1];
    v16 = *(_QWORD *)(v15 + 8 * v13);
    if (v16)
      goto LABEL_15;
    v17 = v10 + 2;
    if (v10 + 2 >= v14)
      goto LABEL_40;
    v16 = *(_QWORD *)(v15 + 8 * v17);
    if (!v16)
    {
      if (v10 + 3 >= v14)
        goto LABEL_41;
      v16 = *(_QWORD *)(v15 + 8 * (v10 + 3));
      if (v16)
      {
        v13 = v10 + 3;
        goto LABEL_15;
      }
      v17 = v10 + 4;
      if (v10 + 4 >= v14)
      {
        v13 = v10 + 3;
        goto LABEL_40;
      }
      v16 = *(_QWORD *)(v15 + 8 * v17);
      if (!v16)
      {
        v13 = v10 + 5;
        if (v10 + 5 >= v14)
        {
LABEL_41:
          v13 = v17;
          goto LABEL_40;
        }
        v16 = *(_QWORD *)(v15 + 8 * v13);
        if (!v16)
        {
          v13 = v14 - 1;
          v33 = v10 + 6;
          while (v14 != v33)
          {
            v16 = *(_QWORD *)(v15 + 8 * v33++);
            if (v16)
            {
              v13 = v33 - 1;
              goto LABEL_15;
            }
          }
          goto LABEL_40;
        }
        goto LABEL_15;
      }
    }
    v13 = v17;
LABEL_15:
    v11 = (v16 - 1) & v16;
    v12 = __clz(__rbit64(v16)) + (v13 << 6);
    v10 = v13;
    goto LABEL_16;
  }
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

Swift::Int sub_100641C0C(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  _QWORD __s1[9];

  v6 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v25 = a3 + 56;
  v24 = a5;
  v22 = v6 - 1;
  while (1)
  {
    v8 = a5[3];
    v7 = a5[4];
    if (v7)
    {
      v9 = (v7 - 1) & v7;
      v10 = __clz(__rbit64(v7)) | (v8 << 6);
      goto LABEL_21;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      JUMPOUT(0x1006426E0);
    }
    v12 = (unint64_t)(a5[2] + 64) >> 6;
    if (v11 >= v12)
    {
      v11 = a5[3];
      goto LABEL_24;
    }
    v13 = a5[1];
    v14 = *(_QWORD *)(v13 + 8 * v11);
    if (!v14)
      break;
LABEL_20:
    v9 = (v14 - 1) & v14;
    v10 = __clz(__rbit64(v14)) + (v11 << 6);
    v8 = v11;
LABEL_21:
    v16 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 16 * v10);
    v18 = *v16;
    v17 = v16[1];
    a5[3] = v8;
    a5[4] = v9;
    Hasher.init(_seed:)(__s1);
    sub_10001BBBC(v18, v17);
    Data.hash(into:)(__s1, v18, v17);
    v19 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a3 + 32));
    if (((*(_QWORD *)(v25 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
      __asm { BR              X8 }
    sub_10001BC14(v18, v17);
    a5 = v24;
  }
  if (v8 + 2 >= v12)
    goto LABEL_24;
  v14 = *(_QWORD *)(v13 + 8 * (v8 + 2));
  if (v14)
  {
    v11 = v8 + 2;
    goto LABEL_20;
  }
  if (v8 + 3 >= v12)
  {
    v11 = v8 + 2;
    goto LABEL_24;
  }
  v14 = *(_QWORD *)(v13 + 8 * (v8 + 3));
  if (v14)
  {
    v11 = v8 + 3;
    goto LABEL_20;
  }
  v11 = v8 + 4;
  if (v8 + 4 >= v12)
  {
    v11 = v8 + 3;
    goto LABEL_24;
  }
  v14 = *(_QWORD *)(v13 + 8 * v11);
  if (v14)
    goto LABEL_20;
  v11 = v12 - 1;
  v15 = v8 + 5;
  while (v12 != v15)
  {
    v14 = *(_QWORD *)(v13 + 8 * v15++);
    if (v14)
    {
      v11 = v15 - 1;
      goto LABEL_20;
    }
  }
LABEL_24:
  a5[3] = v11;
  a5[4] = 0;
  swift_retain();
  return sub_100852504(a1, a2, v22, a3);
}

void *sub_100642798(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, unint64_t, uint64_t);
  uint64_t v41;
  char v42;
  int64_t v43;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;

  v52 = a2;
  v9 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v9);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (void *)__chkstk_darwin(v14);
  v60 = (char *)&v51 - v18;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v21 = *(unint64_t *)((char *)a1 + v20) & ((-1 << a4) - 1);
  v54 = a1;
  v55 = v11;
  *(unint64_t *)((char *)a1 + v20) = v21;
  v22 = v19 - 1;
  v58 = a3 + 56;
  v59 = a3;
  v56 = a5;
  while (2)
  {
    v53 = v22;
    do
    {
      while (1)
      {
        v24 = *a5;
        v25 = a5[1];
        v27 = a5[2];
        v26 = a5[3];
        v28 = a5[4];
        v57 = v27;
        if (v28)
        {
          v29 = (v28 - 1) & v28;
          v30 = __clz(__rbit64(v28)) | (v26 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, *(_QWORD *)(v24 + 48) + *(_QWORD *)(v13 + 72) * v30, v12);
          v31 = 0;
          goto LABEL_8;
        }
        v43 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          goto LABEL_44;
        }
        v44 = (unint64_t)(v27 + 64) >> 6;
        if (v43 >= v44)
        {
          v29 = 0;
          v31 = 1;
          goto LABEL_8;
        }
        v45 = *(_QWORD *)(v25 + 8 * v43);
        if (v45)
          goto LABEL_17;
        v48 = v26 + 2;
        if (v26 + 2 >= v44)
          goto LABEL_35;
        v45 = *(_QWORD *)(v25 + 8 * v48);
        if (v45)
          goto LABEL_23;
        if (v26 + 3 >= v44)
          goto LABEL_36;
        v45 = *(_QWORD *)(v25 + 8 * (v26 + 3));
        if (v45)
        {
          v43 = v26 + 3;
          goto LABEL_17;
        }
        v48 = v26 + 4;
        if (v26 + 4 < v44)
        {
          v45 = *(_QWORD *)(v25 + 8 * v48);
          if (v45)
          {
LABEL_23:
            v43 = v48;
LABEL_17:
            v29 = (v45 - 1) & v45;
            v30 = __clz(__rbit64(v45)) + (v43 << 6);
            v26 = v43;
            goto LABEL_7;
          }
          v43 = v26 + 5;
          if (v26 + 5 < v44)
          {
            v45 = *(_QWORD *)(v25 + 8 * v43);
            if (v45)
              goto LABEL_17;
            v43 = v44 - 1;
            v49 = v26 + 6;
            while (v44 != v49)
            {
              v45 = *(_QWORD *)(v25 + 8 * v49++);
              if (v45)
              {
                v43 = v49 - 1;
                goto LABEL_17;
              }
            }
LABEL_35:
            v29 = 0;
            v31 = 1;
            v26 = v43;
            goto LABEL_8;
          }
LABEL_36:
          v29 = 0;
          v31 = 1;
          v26 = v48;
          goto LABEL_8;
        }
        v29 = 0;
        v31 = 1;
        v26 += 3;
LABEL_8:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v31, 1, v12);
        *a5 = v24;
        a5[1] = v25;
        a5[2] = v57;
        a5[3] = v26;
        a5[4] = v29;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
        {
          sub_100004048((uint64_t)v11, &qword_1010ED860);
          v50 = v59;
          swift_retain();
          return (void *)sub_100852214(v54, v52, v53, v50);
        }
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v60, v11, v12);
        v32 = v59;
        v33 = *(_QWORD *)(v59 + 40);
        v34 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v12, v34);
        v36 = -1 << *(_BYTE *)(v32 + 32);
        v37 = v35 & ~v36;
        if (((*(_QWORD *)(v58 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) != 0)
          break;
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
LABEL_4:
        result = (void *)v23(v60, v12);
        v11 = v55;
        a5 = v56;
      }
      v38 = ~v36;
      v39 = *(_QWORD *)(v13 + 72);
      v40 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
      while (1)
      {
        v40(v16, *(_QWORD *)(v59 + 48) + v39 * v37, v12);
        v41 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v42 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v60, v12, v41);
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
        v23(v16, v12);
        if ((v42 & 1) != 0)
          break;
        v37 = (v37 + 1) & v38;
        if (((*(_QWORD *)(v58 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
          goto LABEL_4;
      }
      result = (void *)v23(v60, v12);
      v46 = (v37 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v11 = v55;
      v47 = *(unint64_t *)((char *)v54 + v46);
      *(unint64_t *)((char *)v54 + v46) = v47 & ~(1 << v37);
      a5 = v56;
    }
    while ((v47 & (1 << v37)) == 0);
    v22 = v53 - 1;
    if (__OFSUB__(v53, 1))
    {
LABEL_44:
      __break(1u);
      return result;
    }
    if (v53 != 1)
      continue;
    return &_swiftEmptySetSingleton;
  }
}

void *sub_100642BF0(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v19;
  _QWORD v21[11];

  v6 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v21[10] = "";
  v19 = v6 - 1;
  v8 = a5[3];
  v7 = a5[4];
  if (v7)
  {
    v9 = (v7 - 1) & v7;
    v10 = __clz(__rbit64(v7)) | (v8 << 6);
    goto LABEL_19;
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    JUMPOUT(0x100643618);
  }
  v12 = (unint64_t)(a5[2] + 64) >> 6;
  if (v11 >= v12)
  {
    v11 = a5[3];
  }
  else
  {
    v13 = a5[1];
    v14 = *(_QWORD *)(v13 + 8 * v11);
    if (v14)
    {
LABEL_18:
      v9 = (v14 - 1) & v14;
      v10 = __clz(__rbit64(v14)) + (v11 << 6);
      v8 = v11;
LABEL_19:
      v16 = *(unsigned __int8 *)(*(_QWORD *)(*a5 + 48) + v10);
      a5[3] = v8;
      a5[4] = v9;
      Hasher.init(_seed:)(v21);
      __asm { BR              X8 }
    }
    if (v8 + 2 < v12)
    {
      v14 = *(_QWORD *)(v13 + 8 * (v8 + 2));
      if (v14)
      {
        v11 = v8 + 2;
        goto LABEL_18;
      }
      if (v8 + 3 >= v12)
      {
        v11 = v8 + 2;
      }
      else
      {
        v14 = *(_QWORD *)(v13 + 8 * (v8 + 3));
        if (v14)
        {
          v11 = v8 + 3;
          goto LABEL_18;
        }
        v11 = v8 + 4;
        if (v8 + 4 < v12)
        {
          v14 = *(_QWORD *)(v13 + 8 * v11);
          if (!v14)
          {
            v11 = v12 - 1;
            v15 = v8 + 5;
            do
            {
              if (v12 == v15)
                goto LABEL_21;
              v14 = *(_QWORD *)(v13 + 8 * v15++);
            }
            while (!v14);
            v11 = v15 - 1;
          }
          goto LABEL_18;
        }
        v11 = v8 + 3;
      }
    }
  }
LABEL_21:
  a5[3] = v11;
  a5[4] = 0;
  swift_retain();
  return sub_10085279C(a1, a2, v19, a3);
}

char *sub_100643718(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  char *v52;
  _QWORD __s1[9];

  v35 = a2;
  v47 = (int *)type metadata accessor for OwnerSharingCircle(0);
  v40 = *((_QWORD *)v47 - 1);
  v9 = __chkstk_darwin(v47);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v39 = (uint64_t)&v34 - v13;
  __chkstk_darwin(v12);
  v51 = (uint64_t *)((char *)&v34 - v14);
  v15 = *(_QWORD *)(a3 + 16);
  v16 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v17 = *(unint64_t *)((char *)a1 + v16) & ((-1 << a4) - 1);
  v36 = a1;
  *(unint64_t *)((char *)a1 + v16) = v17;
  v37 = v15 - 1;
  v18 = *a5;
  v19 = a5[1];
  v20 = *(_QWORD *)(*a5 + 16);
  if (v19 != v20)
  {
    v50 = a3 + 56;
    v44 = a3;
    v38 = a5;
    v52 = v11;
    do
    {
      if (v19 >= v20)
      {
        __break(1u);
        JUMPOUT(0x100644350);
      }
      v21 = v18 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
      v49 = *(_QWORD *)(v40 + 72);
      v22 = v39;
      sub_10005972C(v21 + v49 * v19, v39, type metadata accessor for OwnerSharingCircle);
      a5[1] = v19 + 1;
      v23 = v51;
      sub_1000126EC(v22, (uint64_t)v51, type metadata accessor for OwnerSharingCircle);
      Hasher.init(_seed:)(__s1);
      v24 = *v23;
      v25 = v23[1];
      sub_10001BBBC(*v23, v25);
      Data.hash(into:)(__s1, v24, v25);
      sub_10001BC14(v24, v25);
      v26 = (char *)v23 + v47[5];
      v27 = type metadata accessor for UUID(0);
      v28 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v46 = v26;
      dispatch thunk of Hashable.hash(into:)(__s1, v27, v28);
      v45 = (char *)v23 + v47[6];
      dispatch thunk of Hashable.hash(into:)(__s1, v27, v28);
      v43 = v47[7];
      Hasher._combine(_:)(*((unsigned __int8 *)v23 + v43));
      v42 = v47[8];
      v29 = *(uint64_t *)((char *)v23 + v42);
      swift_bridgeObjectRetain(v29);
      sub_100A2FEA8((uint64_t)__s1, v29);
      swift_bridgeObjectRelease();
      v41 = v47[9];
      Hasher._combine(_:)(*((unsigned __int8 *)v23 + v41));
      v30 = Hasher._finalize()();
      v31 = -1 << *(_BYTE *)(a3 + 32);
      v32 = v30 & ~v31;
      if (((*(_QWORD *)(v50 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) != 0)
      {
        v48 = ~v31;
        sub_10005972C(*(_QWORD *)(a3 + 48) + v32 * v49, (uint64_t)v11, type metadata accessor for OwnerSharingCircle);
        __asm { BR              X10 }
      }
      sub_1000126B0((uint64_t)v51, type metadata accessor for OwnerSharingCircle);
      a5 = v38;
      v18 = *v38;
      v19 = v38[1];
      v20 = *(_QWORD *)(*v38 + 16);
    }
    while (v19 != v20);
  }
  swift_retain();
  return sub_100852CD8(v36, v35, v37, a3);
}

void sub_10064441C(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  unint64_t i;
  unint64_t v26;
  id v27;
  char v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t v37;
  uint64_t v39;
  uint64_t v41;
  void *v42;

  v6 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v7 = v6 - 1;
  v39 = a3 + 56;
  while (2)
  {
    v37 = v7;
    do
    {
      while (1)
      {
        if ((*a5 & 0x8000000000000000) == 0)
        {
          v9 = a5[3];
          v8 = a5[4];
          if (v8)
          {
            v10 = (v8 - 1) & v8;
            v11 = __clz(__rbit64(v8)) | (v9 << 6);
LABEL_7:
            v12 = *(void **)(*(_QWORD *)(*a5 + 48) + 8 * v11);
            v13 = v12;
            goto LABEL_8;
          }
          v29 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            goto LABEL_49;
          }
          v30 = (unint64_t)(a5[2] + 64) >> 6;
          if (v29 >= v30)
          {
            v12 = 0;
            v10 = 0;
            goto LABEL_8;
          }
          v31 = a5[1];
          v32 = *(_QWORD *)(v31 + 8 * v29);
          if (v32)
          {
LABEL_22:
            v10 = (v32 - 1) & v32;
            v11 = __clz(__rbit64(v32)) + (v29 << 6);
            v9 = v29;
            goto LABEL_7;
          }
          v34 = v9 + 2;
          if (v9 + 2 >= v30)
            goto LABEL_41;
          v32 = *(_QWORD *)(v31 + 8 * v34);
          if (v32)
          {
LABEL_29:
            v29 = v34;
            goto LABEL_22;
          }
          if (v9 + 3 < v30)
          {
            v32 = *(_QWORD *)(v31 + 8 * (v9 + 3));
            if (v32)
            {
              v29 = v9 + 3;
              goto LABEL_22;
            }
            v34 = v9 + 4;
            if (v9 + 4 >= v30)
            {
              v12 = 0;
              v10 = 0;
              v9 += 3;
LABEL_8:
              a5[3] = v9;
              a5[4] = v10;
              if (!v12)
                goto LABEL_47;
              goto LABEL_12;
            }
            v32 = *(_QWORD *)(v31 + 8 * v34);
            if (v32)
              goto LABEL_29;
            v29 = v9 + 5;
            if (v9 + 5 < v30)
            {
              v32 = *(_QWORD *)(v31 + 8 * v29);
              if (v32)
                goto LABEL_22;
              v29 = v30 - 1;
              v35 = v9 + 6;
              while (v30 != v35)
              {
                v32 = *(_QWORD *)(v31 + 8 * v35++);
                if (v32)
                {
                  v29 = v35 - 1;
                  goto LABEL_22;
                }
              }
LABEL_41:
              v12 = 0;
              v10 = 0;
              v9 = v29;
              goto LABEL_8;
            }
          }
          v12 = 0;
          v10 = 0;
          v9 = v34;
          goto LABEL_8;
        }
        v14 = __CocoaSet.Iterator.next()(a1);
        if (!v14
          || (v15 = v14,
              v41 = v14,
              v16 = sub_10000F4A0(0, (unint64_t *)&qword_1011100A0, SPHandle_ptr),
              swift_unknownObjectRetain(v15),
              swift_dynamicCast(&v42, &v41, (char *)&type metadata for Swift.AnyObject + 8, v16, 7),
              v12 = v42,
              swift_unknownObjectRelease(v15),
              !v12))
        {
LABEL_47:
          swift_retain();
          sub_10085302C(a1, a2, v37, a3);
          return;
        }
LABEL_12:
        v17 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a3 + 40));
        v18 = -1 << *(_BYTE *)(a3 + 32);
        v19 = v17 & ~v18;
        v20 = v19 >> 6;
        v21 = 1 << v19;
        if (((1 << v19) & *(_QWORD *)(v39 + 8 * (v19 >> 6))) == 0)
          goto LABEL_3;
        sub_10000F4A0(0, (unint64_t *)&qword_1011100A0, SPHandle_ptr);
        v22 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v19);
        v23 = static NSObject.== infix(_:_:)(v22, v12);

        if ((v23 & 1) != 0)
          break;
        v24 = ~v18;
        for (i = v19 + 1; ; i = v26 + 1)
        {
          v26 = i & v24;
          if (((*(_QWORD *)(v39 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
            break;
          v27 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v26);
          v28 = static NSObject.== infix(_:_:)(v27, v12);

          if ((v28 & 1) != 0)
          {

            v20 = v26 >> 6;
            v21 = 1 << v26;
            goto LABEL_25;
          }
        }
LABEL_3:

      }
LABEL_25:
      v33 = a1[v20];
      a1[v20] = v33 & ~v21;
    }
    while ((v21 & v33) == 0);
    v7 = v37 - 1;
    if (__OFSUB__(v37, 1))
    {
LABEL_49:
      __break(1u);
      return;
    }
    if (v37 != 1)
      continue;
    break;
  }
}

unint64_t *sub_1006447A8(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v36;
  unint64_t *v37;
  _QWORD v38[9];
  uint64_t v39;

  v6 = a3;
  v7 = *(_QWORD *)(a3 + 16);
  v37 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v9 = a3 + 56;
  v39 = a3;
  while (2)
  {
    v36 = v8;
    do
    {
      while (1)
      {
        v11 = a5[3];
        v10 = a5[4];
        if (v10)
        {
          v12 = (v10 - 1) & v10;
          v13 = __clz(__rbit64(v10)) | (v11 << 6);
          goto LABEL_16;
        }
        v14 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
          goto LABEL_43;
        }
        v15 = (unint64_t)(a5[2] + 64) >> 6;
        if (v14 >= v15)
        {
          v14 = a5[3];
LABEL_39:
          a5[3] = v14;
          a5[4] = 0;
          swift_retain();
          return (unint64_t *)sub_100853038(v37, a2, v36, v6);
        }
        v16 = a5[1];
        v17 = *(_QWORD *)(v16 + 8 * v14);
        if (!v17)
        {
          v18 = v11 + 2;
          if (v11 + 2 >= v15)
            goto LABEL_39;
          v17 = *(_QWORD *)(v16 + 8 * v18);
          if (!v17)
          {
            if (v11 + 3 >= v15)
              goto LABEL_40;
            v17 = *(_QWORD *)(v16 + 8 * (v11 + 3));
            if (v17)
            {
              v14 = v11 + 3;
              goto LABEL_15;
            }
            v18 = v11 + 4;
            if (v11 + 4 >= v15)
            {
              v14 = v11 + 3;
              goto LABEL_39;
            }
            v17 = *(_QWORD *)(v16 + 8 * v18);
            if (!v17)
            {
              v14 = v11 + 5;
              if (v11 + 5 >= v15)
              {
LABEL_40:
                v14 = v18;
                goto LABEL_39;
              }
              v17 = *(_QWORD *)(v16 + 8 * v14);
              if (!v17)
              {
                v14 = v15 - 1;
                v34 = v11 + 6;
                while (v15 != v34)
                {
                  v17 = *(_QWORD *)(v16 + 8 * v34++);
                  if (v17)
                  {
                    v14 = v34 - 1;
                    goto LABEL_15;
                  }
                }
                goto LABEL_39;
              }
              goto LABEL_15;
            }
          }
          v14 = v18;
        }
LABEL_15:
        v12 = (v17 - 1) & v17;
        v13 = __clz(__rbit64(v17)) + (v14 << 6);
        v11 = v14;
LABEL_16:
        v19 = (unsigned __int8 *)(*(_QWORD *)(*a5 + 48) + 24 * v13);
        v20 = *v19;
        v21 = *((_QWORD *)v19 + 1);
        v22 = *((_QWORD *)v19 + 2);
        a5[3] = v11;
        a5[4] = v12;
        Hasher.init(_seed:)(v38);
        Hasher._combine(_:)(v20);
        swift_bridgeObjectRetain(v22);
        String.hash(into:)(v38, v21, v22);
        v23 = Hasher._finalize()();
        v24 = -1 << *(_BYTE *)(v6 + 32);
        v25 = v23 & ~v24;
        if (((*(_QWORD *)(v9 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) != 0)
          break;
LABEL_3:
        result = (unint64_t *)swift_bridgeObjectRelease();
        v6 = v39;
      }
      v26 = ~v24;
      v27 = *(_QWORD *)(v6 + 48);
      while (1)
      {
        v28 = (unsigned __int8 *)(v27 + 24 * v25);
        if (*v28 == (_DWORD)v20)
        {
          v29 = *((_QWORD *)v28 + 1);
          v30 = *((_QWORD *)v28 + 2);
          v31 = v29 == v21 && v30 == v22;
          if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, v21, v22, 0) & 1) != 0)
            break;
        }
        v25 = (v25 + 1) & v26;
        if (((*(_QWORD *)(v9 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
          goto LABEL_3;
      }
      result = (unint64_t *)swift_bridgeObjectRelease();
      v32 = (v25 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v33 = *(unint64_t *)((char *)v37 + v32);
      *(unint64_t *)((char *)v37 + v32) = v33 & ~(1 << v25);
      v6 = v39;
    }
    while ((v33 & (1 << v25)) == 0);
    v8 = v36 - 1;
    if (__OFSUB__(v36, 1))
    {
LABEL_43:
      __break(1u);
      return result;
    }
    if (v36 != 1)
      continue;
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

void *sub_100644A80(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, unint64_t, uint64_t);
  uint64_t v41;
  char v42;
  int64_t v43;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;

  v51 = a2;
  v9 = sub_10001A9A8(&qword_1011020F8);
  __chkstk_darwin(v9);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CorrelationIdentifier(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (void *)__chkstk_darwin(v14);
  v59 = (char *)&v50 - v18;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v21 = *(unint64_t *)((char *)a1 + v20) & ((-1 << a4) - 1);
  v53 = a1;
  v54 = v11;
  *(unint64_t *)((char *)a1 + v20) = v21;
  v22 = v19 - 1;
  v57 = a3 + 56;
  v58 = a3;
  v55 = a5;
  while (2)
  {
    v52 = v22;
    do
    {
      while (1)
      {
        v24 = *a5;
        v25 = a5[1];
        v27 = a5[2];
        v26 = a5[3];
        v28 = a5[4];
        v56 = v27;
        if (v28)
        {
          v29 = (v28 - 1) & v28;
          v30 = __clz(__rbit64(v28)) | (v26 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, *(_QWORD *)(v24 + 48) + *(_QWORD *)(v13 + 72) * v30, v12);
          v31 = 0;
          goto LABEL_8;
        }
        v43 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          goto LABEL_42;
        }
        v44 = (unint64_t)(v27 + 64) >> 6;
        if (v43 >= v44)
        {
          v29 = 0;
          v31 = 1;
          goto LABEL_8;
        }
        v45 = *(_QWORD *)(v25 + 8 * v43);
        if (v45)
          goto LABEL_17;
        if (v26 + 2 >= v44)
          goto LABEL_34;
        v45 = *(_QWORD *)(v25 + 8 * (v26 + 2));
        if (v45)
        {
          v43 = v26 + 2;
LABEL_17:
          v29 = (v45 - 1) & v45;
          v30 = __clz(__rbit64(v45)) + (v43 << 6);
          v26 = v43;
          goto LABEL_7;
        }
        if (v26 + 3 >= v44)
        {
          v29 = 0;
          v31 = 1;
          v26 += 2;
          goto LABEL_8;
        }
        v45 = *(_QWORD *)(v25 + 8 * (v26 + 3));
        if (v45)
        {
          v43 = v26 + 3;
          goto LABEL_17;
        }
        v43 = v26 + 4;
        if (v26 + 4 < v44)
        {
          v45 = *(_QWORD *)(v25 + 8 * v43);
          if (v45)
            goto LABEL_17;
          v43 = v44 - 1;
          v48 = v26 + 5;
          while (v44 != v48)
          {
            v45 = *(_QWORD *)(v25 + 8 * v48++);
            if (v45)
            {
              v43 = v48 - 1;
              goto LABEL_17;
            }
          }
LABEL_34:
          v29 = 0;
          v31 = 1;
          v26 = v43;
          goto LABEL_8;
        }
        v29 = 0;
        v31 = 1;
        v26 += 3;
LABEL_8:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v31, 1, v12);
        *a5 = v24;
        a5[1] = v25;
        a5[2] = v56;
        a5[3] = v26;
        a5[4] = v29;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
        {
          sub_100004048((uint64_t)v11, &qword_1011020F8);
          v49 = v58;
          swift_retain();
          return (void *)sub_1008532F4(v53, v51, v52, v49);
        }
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v59, v11, v12);
        v32 = v58;
        v33 = *(_QWORD *)(v58 + 40);
        v34 = sub_100006204((unint64_t *)&unk_10111C370, (uint64_t (*)(uint64_t))&type metadata accessor for CorrelationIdentifier, (uint64_t)&protocol conformance descriptor for CorrelationIdentifier);
        v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v12, v34);
        v36 = -1 << *(_BYTE *)(v32 + 32);
        v37 = v35 & ~v36;
        if (((*(_QWORD *)(v57 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) != 0)
          break;
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
LABEL_4:
        result = (void *)v23(v59, v12);
        v11 = v54;
        a5 = v55;
      }
      v38 = ~v36;
      v39 = *(_QWORD *)(v13 + 72);
      v40 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
      while (1)
      {
        v40(v16, *(_QWORD *)(v58 + 48) + v39 * v37, v12);
        v41 = sub_100006204(&qword_101102100, (uint64_t (*)(uint64_t))&type metadata accessor for CorrelationIdentifier, (uint64_t)&protocol conformance descriptor for CorrelationIdentifier);
        v42 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v59, v12, v41);
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
        v23(v16, v12);
        if ((v42 & 1) != 0)
          break;
        v37 = (v37 + 1) & v38;
        if (((*(_QWORD *)(v57 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
          goto LABEL_4;
      }
      result = (void *)v23(v59, v12);
      v46 = (v37 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v11 = v54;
      v47 = *(unint64_t *)((char *)v53 + v46);
      *(unint64_t *)((char *)v53 + v46) = v47 & ~(1 << v37);
      a5 = v55;
    }
    while ((v47 & (1 << v37)) == 0);
    v22 = v52 - 1;
    if (__OFSUB__(v52, 1))
    {
LABEL_42:
      __break(1u);
      return result;
    }
    if (v52 != 1)
      continue;
    return &_swiftEmptySetSingleton;
  }
}

void *sub_100644EC4(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t);
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;

  v41 = a2;
  v9 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (void *)__chkstk_darwin(v13);
  v19 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v42 = a1;
  v43 = v19 - 1;
  v20 = *a5;
  v21 = a5[1];
  v22 = *(_QWORD *)(*a5 + 16);
  if (v21 == v22)
  {
    v23 = v41;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v11, 1, 1, v12);
LABEL_22:
    sub_100004048((uint64_t)v11, &qword_1010ED860);
    swift_retain();
    return (void *)sub_100852214(v42, v23, v43, a3);
  }
  v47 = a3 + 56;
  v48 = v18;
  v24 = v18;
  v45 = v11;
  v46 = a5;
  v49 = (char *)&v40 - v17;
  while (v21 < v22)
  {
    v26 = *(_QWORD *)(v24 + 72);
    v27 = *(void (**)(char *, unint64_t, uint64_t))(v24 + 16);
    v27(v11, v20 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80)) + v26 * v21, v12);
    a5[1] = v21 + 1;
    v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
    v44(v11, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v11, 1, v12) == 1)
    {
      v23 = v41;
      goto LABEL_22;
    }
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v49, v11, v12);
    v28 = *(_QWORD *)(a3 + 40);
    v29 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v30 = dispatch thunk of Hashable._rawHashValue(seed:)(v28, v12, v29);
    v31 = a3;
    v32 = -1 << *(_BYTE *)(a3 + 32);
    v33 = v30 & ~v32;
    if (((*(_QWORD *)(v47 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
    {
      v25 = *(uint64_t (**)(char *, uint64_t))(v24 + 8);
LABEL_5:
      result = (void *)v25(v49, v12);
      a3 = v31;
      a5 = v46;
      goto LABEL_6;
    }
    v34 = ~v32;
    while (1)
    {
      v27(v15, *(_QWORD *)(v31 + 48) + v33 * v26, v12);
      v35 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v36 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v49, v12, v35);
      v25 = *(uint64_t (**)(char *, uint64_t))(v48 + 8);
      v25(v15, v12);
      if ((v36 & 1) != 0)
        break;
      v33 = (v33 + 1) & v34;
      if (((*(_QWORD *)(v47 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
        goto LABEL_5;
    }
    result = (void *)v25(v49, v12);
    v37 = (v33 >> 3) & 0x1FFFFFFFFFFFFFF8;
    v38 = *(unint64_t *)((char *)v42 + v37);
    *(unint64_t *)((char *)v42 + v37) = v38 & ~(1 << v33);
    a5 = v46;
    if ((v38 & (1 << v33)) == 0)
    {
      a3 = v31;
LABEL_6:
      v24 = v48;
      goto LABEL_7;
    }
    v39 = v43 - 1;
    v24 = v48;
    if (__OFSUB__(v43, 1))
      goto LABEL_25;
    a3 = v31;
    --v43;
    if (!v39)
      return &_swiftEmptySetSingleton;
LABEL_7:
    v20 = *a5;
    v21 = a5[1];
    v22 = *(_QWORD *)(*a5 + 16);
    v11 = v45;
    if (v21 == v22)
    {
      v23 = v41;
      v44(v45, 1, 1, v12);
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

void *sub_100645270(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  Swift::Int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD v59[10];
  uint64_t v60;

  v49 = a2;
  v57 = a5;
  v8 = sub_10001A9A8(&qword_101101F68);
  __chkstk_darwin(v8);
  v52 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for BeaconIdentifier(0);
  v10 = *(_QWORD *)(v60 - 8);
  v11 = __chkstk_darwin(v60);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (void *)__chkstk_darwin(v11);
  v16 = (char *)&v48 - v15;
  v17 = *(_QWORD *)(a3 + 16);
  v18 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v19 = *(unint64_t *)((char *)a1 + v18) & ((-1 << a4) - 1);
  v51 = a1;
  *(unint64_t *)((char *)a1 + v18) = v19;
  v20 = v17 - 1;
  v21 = a3 + 56;
  v53 = v10;
  while (2)
  {
    v50 = v20;
    do
    {
      while (1)
      {
        v22 = v57[1];
        v58 = *v57;
        v23 = v57[2];
        v24 = v57[3];
        v25 = v57[4];
        v55 = v23;
        v56 = v22;
        if (v25)
        {
          v54 = (v25 - 1) & v25;
          v26 = __clz(__rbit64(v25)) | (v24 << 6);
LABEL_6:
          v27 = v52;
          sub_10005972C(*(_QWORD *)(v58 + 48) + *(_QWORD *)(v10 + 72) * v26, v52, type metadata accessor for BeaconIdentifier);
          v28 = 0;
          goto LABEL_7;
        }
        v44 = v24 + 1;
        if (__OFADD__(v24, 1))
        {
          __break(1u);
          goto LABEL_41;
        }
        v45 = (unint64_t)(v23 + 64) >> 6;
        if (v44 >= v45)
        {
          v54 = 0;
          v28 = 1;
          v27 = v52;
          goto LABEL_7;
        }
        v46 = *(_QWORD *)(v22 + 8 * v44);
        if (v46)
          goto LABEL_18;
        if (v24 + 2 >= v45)
          goto LABEL_33;
        v46 = *(_QWORD *)(v22 + 8 * (v24 + 2));
        if (v46)
        {
          v44 = v24 + 2;
LABEL_18:
          v54 = (v46 - 1) & v46;
          v26 = __clz(__rbit64(v46)) + (v44 << 6);
          v24 = v44;
          goto LABEL_6;
        }
        if (v24 + 3 >= v45)
        {
          v54 = 0;
          v28 = 1;
          v24 += 2;
          v27 = v52;
          goto LABEL_7;
        }
        v46 = *(_QWORD *)(v22 + 8 * (v24 + 3));
        if (v46)
        {
          v44 = v24 + 3;
          goto LABEL_18;
        }
        v44 = v24 + 4;
        if (v24 + 4 < v45)
        {
          v46 = *(_QWORD *)(v22 + 8 * v44);
          if (v46)
            goto LABEL_18;
          v44 = v45 - 1;
          v47 = v24 + 5;
          while (v45 != v47)
          {
            v46 = *(_QWORD *)(v22 + 8 * v47++);
            if (v46)
            {
              v44 = v47 - 1;
              goto LABEL_18;
            }
          }
LABEL_33:
          v54 = 0;
          v28 = 1;
          v24 = v44;
          v27 = v52;
          goto LABEL_7;
        }
        v54 = 0;
        v28 = 1;
        v24 += 3;
        v27 = v52;
LABEL_7:
        v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
        v30 = v10;
        v31 = v60;
        v29(v27, v28, 1, v60);
        v32 = v57;
        v33 = v56;
        *v57 = v58;
        v32[1] = v33;
        v32[2] = v55;
        v32[3] = v24;
        v32[4] = v54;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v27, 1, v31) == 1)
        {
          sub_100004048(v27, &qword_101101F68);
          swift_retain();
          return (void *)sub_100853AF4(v51, v49, v50, a3);
        }
        sub_1000126EC(v27, (uint64_t)v16, type metadata accessor for BeaconIdentifier);
        Hasher.init(_seed:)(v59);
        v34 = type metadata accessor for UUID(0);
        v35 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v59, v34, v35);
        v36 = &v16[*(int *)(v31 + 20)];
        dispatch thunk of Hashable.hash(into:)(v59, v34, v35);
        v37 = Hasher._finalize()();
        v38 = -1 << *(_BYTE *)(a3 + 32);
        v39 = v37 & ~v38;
        if (((*(_QWORD *)(v21 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) != 0)
          break;
LABEL_3:
        result = (void *)sub_1000126B0((uint64_t)v16, type metadata accessor for BeaconIdentifier);
        v10 = v53;
      }
      v40 = ~v38;
      v41 = *(_QWORD *)(v53 + 72);
      while (1)
      {
        sub_10005972C(*(_QWORD *)(a3 + 48) + v41 * v39, (uint64_t)v13, type metadata accessor for BeaconIdentifier);
        if ((static UUID.== infix(_:_:)(v13, v16) & 1) != 0
          && (static UUID.== infix(_:_:)(&v13[*(int *)(v60 + 20)], v36) & 1) != 0)
        {
          break;
        }
        sub_1000126B0((uint64_t)v13, type metadata accessor for BeaconIdentifier);
        v39 = (v39 + 1) & v40;
        if (((*(_QWORD *)(v21 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
          goto LABEL_3;
      }
      sub_1000126B0((uint64_t)v13, type metadata accessor for BeaconIdentifier);
      result = (void *)sub_1000126B0((uint64_t)v16, type metadata accessor for BeaconIdentifier);
      v42 = (v39 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v43 = *(unint64_t *)((char *)v51 + v42);
      *(unint64_t *)((char *)v51 + v42) = v43 & ~(1 << v39);
      v10 = v53;
    }
    while ((v43 & (1 << v39)) == 0);
    v20 = v50 - 1;
    if (__OFSUB__(v50, 1))
    {
LABEL_41:
      __break(1u);
      return result;
    }
    if (v50 != 1)
      continue;
    return &_swiftEmptySetSingleton;
  }
}

Swift::Int sub_100645700(Swift::Int result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5, uint64_t (*a6)(Swift::Int, uint64_t, uint64_t, uint64_t))
{
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  Swift::UInt v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v28[9];

  v7 = result;
  v8 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v9 = v8 - 1;
  v11 = *a5;
  v10 = a5[1];
  v12 = *(_QWORD *)(*a5 + 16);
  if (v10 == v12)
  {
LABEL_2:
    swift_retain(a3);
    return a6(v7, a2, v9, a3);
  }
  else
  {
    v14 = a3 + 56;
    while ((v10 & 0x8000000000000000) == 0)
    {
      if (v10 >= v12)
        goto LABEL_20;
      v15 = *(unsigned __int8 *)(v11 + v10 + 32);
      a5[1] = v10 + 1;
      Hasher.init(_seed:)(v28);
      Hasher._combine(_:)(v15);
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(a3 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      v19 = 1 << v17;
      if (((1 << v17) & *(_QWORD *)(v14 + 8 * (v17 >> 6))) != 0)
      {
        v20 = *(_QWORD *)(a3 + 48);
        if (*(unsigned __int8 *)(v20 + v17) == (_DWORD)v15)
        {
LABEL_15:
          v23 = 8 * v18;
          v24 = *(_QWORD *)(v7 + 8 * v18);
          *(_QWORD *)(v7 + v23) = v24 & ~v19;
          if ((v19 & v24) != 0)
          {
            if (__OFSUB__(v9--, 1))
              goto LABEL_21;
            if (!v9)
              return (Swift::Int)&_swiftEmptySetSingleton;
          }
        }
        else
        {
          for (i = v17 + 1; ; i = v22 + 1)
          {
            v22 = i & ~v16;
            if (((*(_QWORD *)(v14 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
              break;
            if (*(unsigned __int8 *)(v20 + v22) == (_DWORD)v15)
            {
              v18 = v22 >> 6;
              v19 = 1 << v22;
              goto LABEL_15;
            }
          }
        }
      }
      v11 = *a5;
      v10 = a5[1];
      v12 = *(_QWORD *)(*a5 + 16);
      if (v10 == v12)
        goto LABEL_2;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  return result;
}

void sub_1006458B0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100645918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;

  v5 = v2;
  v6 = v3;
  v7 = BYTE2(v3);
  v8 = BYTE3(v3);
  v9 = BYTE4(v3);
  v10 = BYTE5(v3);
  return Data._Representation.replaceSubrange(_:with:count:)(v1, v0, &v5, BYTE6(v3));
}

uint64_t sub_100645AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_13;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  if (v11)
    v16 = v15;
  else
    v16 = 0;
  return Data._Representation.replaceSubrange(_:with:count:)(a5, a6, v11, v16);
}

uint64_t sub_100645B50(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4;
  uint64_t v5;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x100645BB0);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_100645B68 + dword_100645BB4[a4 >> 62]))(v5);
}

uint64_t sub_100645BC4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_100645BD4 + dword_100645C7C[a4 >> 62]))();
}

uint64_t sub_100645BE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x100645C74);
  }
  return ((uint64_t (*)(void))((char *)&loc_100645C24 + dword_100645C8C[a3]))();
}

uint64_t sub_100645C9C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = v2[6];
  v11 = v2[7];
  v12 = (_QWORD *)swift_task_alloc(dword_101101F74);
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_100004C28;
  return sub_10062AD7C(a1, a2, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_100645D40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for BeaconIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = ((*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v12 = type metadata accessor for UUID(0);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v0 + v9, v12);
  v13(v0 + v9 + *(int *)(v6 + 20), v12);
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_100645E1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(type metadata accessor for BeaconIdentifier(0) - 8);
  v6 = v0 + ((v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v7 = (_QWORD *)swift_task_alloc(dword_101101F8C);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100004A74;
  return sub_10062A748(v0 + v3, v6);
}

uint64_t sub_100645ECC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = sub_10001A9A8(&qword_101108DF0);
  v6 = *(_QWORD *)(v17 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v5 + v7 + 16) & ~v7;
  v9 = (*(_QWORD *)(v6 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = type metadata accessor for BeaconIdentifier(0);
  v10 = *(_QWORD *)(v16 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v11 + v9 + 8) & ~v11;
  v18 = v12 + *(_QWORD *)(v10 + 64);
  v13 = v3 | v11 | v7 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v14 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v14(v0 + v4, v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v17);
  swift_release();
  v14(v0 + v12, v1);
  v14(v0 + v12 + *(int *)(v16 + 20), v1);
  return swift_deallocObject(v0, v18, v13);
}

uint64_t sub_100646018(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(sub_10001A9A8(&qword_101108DF0) - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for BeaconIdentifier(0);
  v10 = *(_QWORD *)(v1 + 16);
  v11 = *(_QWORD *)(v1 + 24);
  v12 = v1 + v6;
  v13 = *(_QWORD *)(v1 + v6);
  v14 = *(_QWORD *)(v12 + 8);
  v15 = *(_QWORD *)(v1 + v9);
  v16 = (_QWORD *)swift_task_alloc(dword_101101F9C);
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = sub_100004A74;
  return sub_10062DD40(a1, v10, v11, v1 + v5, v13, v14, v1 + v8, v15);
}

uint64_t sub_100646138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_101108DF0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10064619C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_101108DF0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_101101FAC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  v4[2] = v3;
  return swift_task_switch(sub_10062E058, 0, 0);
}

uint64_t sub_100646218()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10064623C()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;

  v2 = *(int **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_101101FBC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  return ((uint64_t (*)(int *))((char *)&dword_101101FB8 + dword_101101FB8))(v2);
}

uint64_t sub_1006462A0(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;

  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_100646360(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = type metadata accessor for Data.RangeReference(0);
    result = swift_allocObject(v6, 32, 7);
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v3;
  }
  return result;
}

uint64_t sub_1006463D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x80000000) == 0)
    return v3 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_100646458(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = sub_10001A9A8(&qword_1010EEC18);
  v10 = sub_1000193A4(&qword_1010EEC20, &qword_1010EEC18, (const char *)&protocol conformance descriptor for <A> [A]);
  v8[0] = a1;
  v2 = sub_10001AA44(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain(a1);
  sub_100638F84(v3, v4, &v7);
  v5 = v7;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
  return v5;
}

void sub_100646508(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  unsigned __int8 v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F4A0(0, &qword_101101FD0, NSFileHandle_ptr);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v7 = sub_100636E84((uint64_t)v6, (SEL *)&selRef_fileHandleForReadingFromURL_error_);
  if (!v1)
  {
    v8 = v7;
    v18 = 0;
    v9 = objc_msgSend(v7, "seekToOffset:error:", 0, &v18);
    v10 = v18;
    if ((v9 & 1) != 0)
    {
      v11 = v18;
      v12 = objc_msgSend(v8, "readDataOfLength:", 3);
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v14 = v13;

      __asm { BR              X10 }
    }
    v15 = v18;
    _convertNSErrorToError(_:)(v10);

    swift_willThrow(v16);
  }
}

uint64_t sub_100646F88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v1 = type metadata accessor for KeyGenerationBeaconInfo(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v0 + v4, v6);
  v8 = type metadata accessor for BeaconIdentifier(0);
  v7(v0 + v4 + *(int *)(v8 + 20), v6);
  v9 = v0 + v4 + *(int *)(v1 + 20);
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (uint64_t *)(v0 + v4 + *(int *)(v1 + 24));
  v12 = v11[1];
  if (v12 >> 60 != 15)
  {
    sub_10001BC14(*v11, v12);
    sub_10001BC14(v11[2], v11[3]);
    v13 = v11[5];
    if (v13 >> 60 != 15)
      sub_10001BC14(v11[4], v13);
  }
  return swift_deallocObject(v0, ((((((((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8, v3 | 7);
}

uint64_t sub_1006470C0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v3 = *(_QWORD *)(type metadata accessor for KeyGenerationBeaconInfo(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[4];
  v10 = (uint64_t)v1 + v4;
  v11 = *(_QWORD *)((char *)v1 + v5);
  v12 = *(_QWORD *)((char *)v1 + v6);
  v13 = *(_QWORD *)((char *)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  v14 = (_QWORD *)swift_task_alloc(dword_101101FEC);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_100004A74;
  return sub_10062B174(a1, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1006471B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v1 = type metadata accessor for KeyGenerationBeaconInfo(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v0 + v4, v6);
  v8 = type metadata accessor for BeaconIdentifier(0);
  v7(v0 + v4 + *(int *)(v8 + 20), v6);
  v9 = v0 + v4 + *(int *)(v1 + 20);
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (uint64_t *)(v0 + v4 + *(int *)(v1 + 24));
  v12 = v11[1];
  if (v12 >> 60 != 15)
  {
    sub_10001BC14(*v11, v12);
    sub_10001BC14(v11[2], v11[3]);
    v13 = v11[5];
    if (v13 >> 60 != 15)
      sub_10001BC14(v11[4], v13);
  }
  return swift_deallocObject(v0, ((((((((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 8, v3 | 7);
}

uint64_t sub_1006472E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = *(_QWORD *)(type metadata accessor for KeyGenerationBeaconInfo(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v0 + 16);
  v8 = v0 + v3;
  v9 = *(_QWORD *)(v0 + v4);
  v10 = *(_QWORD *)(v0 + v5);
  v11 = *(_QWORD *)(v0 + v6);
  v12 = *(_QWORD *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  v13 = (_QWORD *)swift_task_alloc(dword_101102004);
  *(_QWORD *)(v1 + 16) = v13;
  *v13 = v1;
  v13[1] = sub_100004A74;
  return sub_10062B4D4(v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1006473C4(uint64_t a1)
{
  uint64_t *v1;

  return sub_10062DAB8(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1006473D4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1[13] = a1;
  v2 = sub_10001A9A8(&qword_101102090);
  v1[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo(0);
  v1[15] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[16] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[17] = swift_task_alloc(v5);
  v1[18] = swift_task_alloc(v5);
  v1[19] = swift_task_alloc(v5);
  v1[20] = swift_task_alloc(v5);
  v1[21] = swift_task_alloc(v5);
  v1[22] = swift_task_alloc(v5);
  v1[23] = swift_task_alloc(v5);
  v1[24] = swift_task_alloc(v5);
  v1[25] = swift_task_alloc(v5);
  v1[26] = swift_task_alloc(v5);
  v1[27] = swift_task_alloc(v5);
  v1[28] = swift_task_alloc(v5);
  v1[29] = swift_task_alloc(v5);
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[30] = swift_task_alloc(v6);
  v1[31] = swift_task_alloc(v6);
  v1[32] = swift_task_alloc(v6);
  v1[33] = swift_task_alloc(v6);
  v7 = type metadata accessor for DirectorySequence(0);
  v1[34] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[35] = v8;
  v1[36] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v1[37] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v1[38] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[39] = swift_task_alloc(v11);
  v1[40] = swift_task_alloc(v11);
  v1[41] = swift_task_alloc(v11);
  v1[42] = swift_task_alloc(v11);
  v1[43] = swift_task_alloc(v11);
  v1[44] = swift_task_alloc(v11);
  return swift_task_switch(sub_1006475F4, 0, 0);
}

uint64_t sub_1006475F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  NSURL *v42;
  void *v43;
  void *v44;
  unsigned int v45;
  void *v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(uint64_t);
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  os_log_type_t v128;
  _BOOL4 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  NSObject *v145;
  os_log_type_t v146;
  _BOOL4 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t (*v151)(uint64_t);
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  int v155;
  int v156;
  uint64_t v157;
  NSURL *v158;
  void *v159;
  void *v160;
  unsigned int v161;
  void *v162;
  uint64_t v163;
  id v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  os_log_t log;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  os_log_t v197;
  os_log_t v198;
  NSObject *v199;
  os_log_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t (*v209)(uint64_t, uint64_t, uint64_t);
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int (*v213)(uint64_t, uint64_t, uint64_t);
  uint64_t v214;
  id v215;
  void (*v216)(uint64_t, uint64_t);
  uint64_t v217;
  uint64_t (*v218)(_QWORD, _QWORD, _QWORD);
  int32x2_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223[3];

  v201 = v0 + 80;
  v215 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  if (qword_1010E9DD8 != -1)
    goto LABEL_85;
  while (1)
  {
    v1 = *(_QWORD *)(v0 + 104);
    v2 = *(_QWORD *)(v0 + 352);
    v3 = *(_QWORD *)(v0 + 296);
    v4 = *(_QWORD *)(v0 + 304);
    v5 = type metadata accessor for Logger(0);
    sub_10001A9E8(v5, (uint64_t)qword_101101B90);
    v209 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v6 = v209(v2, v1, v3);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 352);
    v12 = *(_QWORD *)(v0 + 296);
    v11 = *(_QWORD *)(v0 + 304);
    if (v9)
    {
      v13 = swift_slowAlloc(22, -1);
      v14 = swift_slowAlloc(32, -1);
      v223[0] = v14;
      *(_DWORD *)v13 = 141558275;
      *(_QWORD *)(v0 + 96) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v13 + 4, v13 + 12);
      *(_WORD *)(v13 + 12) = 2081;
      v15 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
      *(_QWORD *)(v0 + 72) = sub_100016940(v16, v17, v223);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v201, v13 + 14, v13 + 22);
      swift_bridgeObjectRelease();
      v216 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v216(v10, v12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Verify file integrity for directory: %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      v216 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v216(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 296));
    }

    v18 = *(_QWORD *)(v0 + 296);
    v19 = *(_QWORD *)(v0 + 304);
    v20 = *(_QWORD *)(v0 + 264);
    v21 = NSFileManager.flatSequence(at:includingPropertiesForKeys:)(*(_QWORD *)(v0 + 104), 0);
    DirectorySequence.next()(v21);
    v213 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
    if (v213(v20, 1, v18) == 1)
    {
      v22 = _swiftEmptyArrayStorage;
    }
    else
    {
      v22 = _swiftEmptyArrayStorage;
      log = *(os_log_t *)(v0 + 120);
      v182 = *(_QWORD *)(v0 + 128);
      v218 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 304) + 32);
      do
      {
        v206 = (unint64_t)v22;
        while (1)
        {
          v25 = v218(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 296));
          v26 = URL.pathExtension.getter(v25);
          if (v26 == 0x70616D79656BLL && v27 == 0xE600000000000000)
            break;
          v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, 0x70616D79656BLL, 0xE600000000000000, 0);
          swift_bridgeObjectRelease();
          if ((v29 & 1) != 0)
            goto LABEL_18;
          v30 = v209(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 296));
          v31 = Logger.logObject.getter(v30);
          v32 = static os_log_type_t.error.getter(v31);
          v33 = os_log_type_enabled(v31, v32);
          v34 = *(_QWORD *)(v0 + 336);
          v35 = *(_QWORD *)(v0 + 296);
          if (v33)
          {
            v36 = swift_slowAlloc(12, -1);
            v37 = swift_slowAlloc(32, -1);
            v223[0] = v37;
            *(_DWORD *)v36 = 136315138;
            v38 = URL.path.getter(v37);
            *(_QWORD *)(v36 + 4) = sub_100016940(v38, v39, v223);
            swift_bridgeObjectRelease();
            v216(v34, v35);
            _os_log_impl((void *)&_mh_execute_header, v31, v32, "Removing unexpected file: %s", (uint8_t *)v36, 0xCu);
            swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v37, -1, -1);
            swift_slowDealloc(v36, -1, -1);
          }
          else
          {
            v216(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 296));
          }

          URL._bridgeToObjectiveC()(v42);
          v44 = v43;
          *(_QWORD *)(v0 + 40) = 0;
          v45 = objc_msgSend(v215, "removeItemAtURL:error:", v43, v0 + 40);

          v46 = *(void **)(v0 + 40);
          if (v45)
          {
            v47 = v46;
          }
          else
          {
            v48 = v46;
            v49 = _convertNSErrorToError(_:)(v46);

            swift_willThrow(v50);
            swift_errorRelease(v49);
          }
          v51 = ((uint64_t (*)(_QWORD, _QWORD))v216)(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 296));
          v23 = *(_QWORD *)(v0 + 296);
          v24 = *(_QWORD *)(v0 + 264);
          DirectorySequence.next()(v51);
          if (v213(v24, 1, v23) == 1)
          {
            v22 = (_QWORD *)v206;
            goto LABEL_31;
          }
        }
        swift_bridgeObjectRelease();
LABEL_18:
        v40 = *(_QWORD *)(v0 + 344);
        v41 = objc_autoreleasePoolPush();
        sub_100646508(v40);
        v53 = v52;
        LODWORD(v40) = v54;
        v55 = *(_QWORD *)(v0 + 344);
        v56 = *(_QWORD *)(v0 + 296);
        v57 = HIDWORD(v52);
        v58 = *(_QWORD *)(v0 + 232);
        v177 = HIDWORD(v54);
        v179 = *(_QWORD *)(v0 + 224);
        objc_autoreleasePoolPop(v41);
        v209(v58, v55, v56);
        v59 = v58 + SHIDWORD(log[2].isa);
        *(_BYTE *)v59 = v53;
        *(_DWORD *)(v59 + 4) = v57;
        *(_DWORD *)(v59 + 8) = v40;
        *(_DWORD *)(v59 + 12) = v177;
        sub_10005972C(v58, v179, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        v60 = v206;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v206);
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v60 = sub_1007CA10C(0, *(_QWORD *)(v206 + 16) + 1, 1, v206);
        v63 = *(_QWORD *)(v60 + 16);
        v62 = *(_QWORD *)(v60 + 24);
        v64 = v63 + 1;
        if (v63 >= v62 >> 1)
        {
          v71 = sub_1007CA10C(v62 > 1, v63 + 1, 1, v60);
          v64 = v63 + 1;
          v60 = v71;
        }
        v65 = *(_QWORD *)(v0 + 344);
        v66 = *(_QWORD *)(v0 + 296);
        v67 = *(_QWORD *)(v0 + 264);
        v68 = *(_QWORD *)(v0 + 224);
        v69 = *(_QWORD *)(v0 + 232);
        *(_QWORD *)(v60 + 16) = v64;
        sub_1000126EC(v68, v60+ ((*(unsigned __int8 *)(v182 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v182 + 80))+ *(_QWORD *)(v182 + 72) * v63, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        sub_1000126B0(v69, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        v70 = ((uint64_t (*)(uint64_t, uint64_t))v216)(v65, v66);
        DirectorySequence.next()(v70);
        v22 = (_QWORD *)v60;
      }
      while (v213(v67, 1, v66) != 1);
    }
LABEL_31:
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 272));
    v72 = v22[2];
    v207 = v22;
    if (!v72)
      break;
    v74 = *(_QWORD *)(v0 + 120);
    v73 = *(_QWORD *)(v0 + 128);
    v223[0] = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v22);
    sub_10009B33C(0, v72, 0);
    v75 = (uint64_t)v22 + ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80));
    v76 = *(_QWORD *)(v73 + 72);
    while (1)
    {
      v77 = *(_QWORD *)(v0 + 216);
      sub_10005972C(v75, v77, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      v219 = *(int32x2_t *)(v77 + *(int *)(v74 + 20) + 8);
      if ((vcgt_u32((uint32x2_t)v219, (uint32x2_t)vdup_lane_s32(v219, 1)).u8[0] & 1) != 0)
        break;
      sub_1000126B0(*(_QWORD *)(v0 + 216), type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      v78 = (_QWORD *)v223[0];
      if ((swift_isUniquelyReferenced_nonNull_native(v223[0]) & 1) == 0)
      {
        sub_10009B33C(0, v78[2] + 1, 1);
        v78 = (_QWORD *)v223[0];
      }
      v80 = v78[2];
      v79 = v78[3];
      if (v80 >= v79 >> 1)
      {
        sub_10009B33C(v79 > 1, v80 + 1, 1);
        v78 = (_QWORD *)v223[0];
      }
      v78[2] = v80 + 1;
      v78[v80 + 4] = v219;
      v75 += v76;
      if (!--v72)
      {
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
    }
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    swift_once(&qword_1010E9DD8, sub_1006270D8);
  }
  v78 = _swiftEmptyArrayStorage;
LABEL_41:
  v223[0] = (uint64_t)v78;
  swift_bridgeObjectRetain(v78);
  sub_100627070(v223);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v223[0] + 16))
  {
    v81 = *(_QWORD *)(v0 + 200);
    v82 = *(_QWORD *)(v0 + 208);
    v220 = *(_DWORD *)(v223[0] + 32);
    v194 = *(_DWORD *)(v223[0] + 36);
    swift_release();
    v223[0] = (uint64_t)_swiftEmptyArrayStorage;
    v83 = v207[2];
    swift_bridgeObjectRetain(v207);
    if (v83)
    {
      v84 = 0;
      v201 = v82 + 8;
      v191 = v81 + 12;
      v85 = *(_QWORD *)(v0 + 120);
      v86 = *(_QWORD *)(v0 + 128);
      v197 = (os_log_t)_swiftEmptyArrayStorage;
      v87 = v207;
      while (1)
      {
        if (v84 >= v87[2])
          goto LABEL_84;
        v88 = v87;
        v89 = *(_QWORD *)(v0 + 200);
        v90 = *(_QWORD *)(v0 + 208);
        v91 = (*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80);
        v92 = *(_QWORD *)(v86 + 72);
        sub_10005972C((uint64_t)v88 + v91 + v92 * v84, v90, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        v93 = *(_DWORD *)(v201 + *(int *)(v85 + 20));
        sub_10005972C(v90, v89, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        v94 = *(_QWORD *)(v0 + 200);
        if (v93 == v220)
        {
          v95 = *(_DWORD *)(v191 + *(int *)(v85 + 20));
          sub_1000126B0(v94, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          if (v95 == v194)
          {
            sub_1000126EC(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192), type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
            if ((swift_isUniquelyReferenced_nonNull_native(v197) & 1) != 0)
            {
              v87 = v207;
              v96 = (uint64_t)v197;
            }
            else
            {
              sub_10009B310(0, (int64_t)v197[2].isa + 1, 1);
              v96 = v223[0];
              v87 = v207;
            }
            v98 = *(_QWORD *)(v96 + 16);
            v97 = *(_QWORD *)(v96 + 24);
            if (v98 >= v97 >> 1)
            {
              sub_10009B310(v97 > 1, v98 + 1, 1);
              v87 = v207;
              v96 = v223[0];
            }
            v99 = *(_QWORD *)(v0 + 192);
            *(_QWORD *)(v96 + 16) = v98 + 1;
            v197 = (os_log_t)v96;
            sub_1000126EC(v99, v96 + v91 + v98 * v92, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
            goto LABEL_46;
          }
        }
        else
        {
          sub_1000126B0(v94, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        }
        sub_1000126B0(*(_QWORD *)(v0 + 208), type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        v87 = v207;
LABEL_46:
        if (v83 == ++v84)
          goto LABEL_58;
      }
    }
    v197 = (os_log_t)_swiftEmptyArrayStorage;
LABEL_58:
    swift_bridgeObjectRelease();
    v223[0] = (uint64_t)v197;
    swift_retain();
    sub_100626FF0(v223);
    swift_release();
    if (*(_QWORD *)(v223[0] + 16))
    {
      v103 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 128) + 80);
      sub_10005972C(v223[0] + ((v103 + 32) & ~v103), *(_QWORD *)(v0 + 112), type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      v104 = 0;
    }
    else
    {
      v104 = 1;
    }
    v105 = *(_QWORD *)(v0 + 120);
    v106 = *(_QWORD *)(v0 + 128);
    v107 = *(_QWORD *)(v0 + 112);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v106 + 56))(v107, v104, 1, v105);
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v107, 1, v105) == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 112), &qword_101102090);
      v108 = 1;
    }
    else
    {
      v109 = *(_QWORD *)(v0 + 112);
      v209(*(_QWORD *)(v0 + 248), v109, *(_QWORD *)(v0 + 296));
      sub_1000126B0(v109, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
      v108 = 0;
    }
    v110 = *(_QWORD *)(v0 + 248);
    v111 = *(_QWORD *)(v0 + 256);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 304) + 56))(v110, v108, 1, *(_QWORD *)(v0 + 296));
    sub_100005CF0(v110, v111, &qword_1010FBA40);
  }
  else
  {
    v100 = *(_QWORD *)(v0 + 296);
    v101 = *(_QWORD *)(v0 + 304);
    v102 = *(_QWORD *)(v0 + 256);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v102, 1, 1, v100);
  }
  v112 = v207[2];
  if (v112)
  {
    v195 = *(_QWORD *)(v0 + 304);
    v113 = *(_QWORD *)(v0 + 128);
    v192 = *(_QWORD *)(v0 + 120);
    v114 = (uint64_t)v207
         + ((*(unsigned __int8 *)(v113 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80));
    v180 = *(_QWORD *)(v0 + 168) + 8;
    v178 = *(_QWORD *)(v0 + 160) + 12;
    v186 = *(_QWORD *)(v0 + 136) + 12;
    v188 = *(_QWORD *)(v0 + 144) + 8;
    v115 = type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo;
    v221 = *(_QWORD *)(v113 + 72);
    while (1)
    {
      v118 = *(_QWORD *)(v0 + 296);
      v119 = *(_QWORD *)(v0 + 256);
      v120 = *(_QWORD *)(v0 + 240);
      sub_10005972C(v114, *(_QWORD *)(v0 + 184), v115);
      sub_10000F9B8(v119, v120, &qword_1010FBA40);
      if (v213(v120, 1, v118) == 1)
        break;
      v121 = *(_QWORD *)(v0 + 328);
      v122 = *(_QWORD *)(v0 + 184);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v195 + 32))(v121, *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 296));
      if ((static URL.== infix(_:_:)(v122, v121) & 1) == 0)
      {
        v216(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 296));
        goto LABEL_76;
      }
      v123 = *(_QWORD *)(v0 + 184);
      v125 = *(_QWORD *)(v0 + 160);
      v124 = *(_QWORD *)(v0 + 168);
      sub_10005972C(v123, *(_QWORD *)(v0 + 176), v115);
      sub_10005972C(v123, v124, v115);
      v126 = sub_10005972C(v123, v125, v115);
      v127 = Logger.logObject.getter(v126);
      v128 = static os_log_type_t.default.getter(v127);
      v129 = os_log_type_enabled(v127, v128);
      v198 = *(os_log_t *)(v0 + 296);
      v202 = *(_QWORD *)(v0 + 328);
      v130 = *(_QWORD *)(v0 + 176);
      v131 = *(_QWORD *)(v0 + 184);
      v132 = *(_QWORD *)(v0 + 160);
      v133 = *(_QWORD *)(v0 + 168);
      if (v129)
      {
        v210 = v114;
        v134 = swift_slowAlloc(24, -1);
        v183 = v131;
        v135 = swift_slowAlloc(32, -1);
        v223[0] = v135;
        *(_DWORD *)v134 = 136315650;
        v136 = URL.path.getter(v135);
        *(_QWORD *)(v134 + 4) = sub_100016940(v136, v137, v223);
        swift_bridgeObjectRelease();
        sub_1000126B0(v130, v115);
        *(_WORD *)(v134 + 12) = 1024;
        v138 = *(_DWORD *)(v180 + *(int *)(v192 + 20));
        sub_1000126B0(v133, v115);
        *(_DWORD *)(v134 + 14) = v138;
        *(_WORD *)(v134 + 18) = 1024;
        v139 = *(_DWORD *)(v178 + *(int *)(v192 + 20));
        sub_1000126B0(v132, v115);
        *(_DWORD *)(v134 + 20) = v139;
        _os_log_impl((void *)&_mh_execute_header, v127, v128, "KEEP: %s [%u...%u]", (uint8_t *)v134, 0x18u);
        swift_arrayDestroy(v135, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v135, -1, -1);
        v140 = v134;
        v114 = v210;
        swift_slowDealloc(v140, -1, -1);

        v216(v202, (uint64_t)v198);
        v117 = v183;
      }
      else
      {
        sub_1000126B0(*(_QWORD *)(v0 + 160), v115);
        sub_1000126B0(v133, v115);

        sub_1000126B0(v130, v115);
        v216(v202, (uint64_t)v198);
        v117 = v131;
      }
LABEL_69:
      sub_1000126B0(v117, v115);
      v114 += v221;
      if (!--v112)
        goto LABEL_82;
    }
    sub_100004048(*(_QWORD *)(v0 + 240), &qword_1010FBA40);
LABEL_76:
    v141 = *(_QWORD *)(v0 + 184);
    v142 = *(_QWORD *)(v0 + 144);
    v143 = *(_QWORD *)(v0 + 136);
    sub_10005972C(v141, *(_QWORD *)(v0 + 152), v115);
    sub_10005972C(v141, v142, v115);
    v144 = sub_10005972C(v141, v143, v115);
    v145 = Logger.logObject.getter(v144);
    v146 = static os_log_type_t.default.getter(v145);
    v147 = os_log_type_enabled(v145, v146);
    v149 = *(_QWORD *)(v0 + 144);
    v148 = *(_QWORD *)(v0 + 152);
    v150 = *(_QWORD *)(v0 + 136);
    if (v147)
    {
      v199 = v145;
      v151 = v115;
      v152 = swift_slowAlloc(24, -1);
      v203 = swift_slowAlloc(32, -1);
      v223[0] = v203;
      *(_DWORD *)v152 = 136315650;
      v153 = URL.path.getter(v203);
      *(_QWORD *)(v152 + 4) = sub_100016940(v153, v154, v223);
      swift_bridgeObjectRelease();
      sub_1000126B0(v148, v151);
      *(_WORD *)(v152 + 12) = 1024;
      v155 = *(_DWORD *)(v188 + *(int *)(v192 + 20));
      sub_1000126B0(v149, v151);
      *(_DWORD *)(v152 + 14) = v155;
      *(_WORD *)(v152 + 18) = 1024;
      v156 = *(_DWORD *)(v186 + *(int *)(v192 + 20));
      sub_1000126B0(v150, v151);
      *(_DWORD *)(v152 + 20) = v156;
      _os_log_impl((void *)&_mh_execute_header, v199, v146, "TOSS: %s [%u...%u]", (uint8_t *)v152, 0x18u);
      swift_arrayDestroy(v203, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v203, -1, -1);
      v157 = v152;
      v115 = v151;
      swift_slowDealloc(v157, -1, -1);

    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 136), v115);
      sub_1000126B0(v149, v115);
      sub_1000126B0(v148, v115);

    }
    URL._bridgeToObjectiveC()(v158);
    v160 = v159;
    *(_QWORD *)(v0 + 56) = 0;
    v161 = objc_msgSend(v215, "removeItemAtURL:error:", v159, v0 + 56);

    v162 = *(void **)(v0 + 56);
    v163 = *(_QWORD *)(v0 + 184);
    if (v161)
    {
      v116 = v162;
    }
    else
    {
      v164 = v162;
      v165 = _convertNSErrorToError(_:)(v162);

      swift_willThrow(v166);
      swift_errorRelease(v165);
    }
    v117 = v163;
    goto LABEL_69;
  }
LABEL_82:
  swift_bridgeObjectRelease();
  v167 = *(_QWORD *)(v0 + 344);
  v168 = *(_QWORD *)(v0 + 352);
  v170 = *(_QWORD *)(v0 + 328);
  v169 = *(_QWORD *)(v0 + 336);
  v172 = *(_QWORD *)(v0 + 312);
  v171 = *(_QWORD *)(v0 + 320);
  v173 = *(_QWORD *)(v0 + 288);
  v175 = *(_QWORD *)(v0 + 256);
  v174 = *(_QWORD *)(v0 + 264);
  v184 = *(_QWORD *)(v0 + 248);
  v185 = *(_QWORD *)(v0 + 240);
  v187 = *(_QWORD *)(v0 + 232);
  v189 = *(_QWORD *)(v0 + 224);
  v190 = *(_QWORD *)(v0 + 216);
  v193 = *(_QWORD *)(v0 + 208);
  v196 = *(_QWORD *)(v0 + 200);
  v200 = *(os_log_t *)(v0 + 192);
  v204 = *(_QWORD *)(v0 + 184);
  v205 = *(_QWORD *)(v0 + 176);
  v208 = *(_QWORD *)(v0 + 168);
  v211 = *(_QWORD *)(v0 + 160);
  v212 = *(_QWORD *)(v0 + 152);
  v214 = *(_QWORD *)(v0 + 144);
  v217 = *(_QWORD *)(v0 + 136);
  v222 = *(_QWORD *)(v0 + 112);

  sub_100004048(v175, &qword_1010FBA40);
  swift_task_dealloc(v168);
  swift_task_dealloc(v167);
  swift_task_dealloc(v169);
  swift_task_dealloc(v170);
  swift_task_dealloc(v171);
  swift_task_dealloc(v172);
  swift_task_dealloc(v173);
  swift_task_dealloc(v174);
  swift_task_dealloc(v175);
  swift_task_dealloc(v184);
  swift_task_dealloc(v185);
  swift_task_dealloc(v187);
  swift_task_dealloc(v189);
  swift_task_dealloc(v190);
  swift_task_dealloc(v193);
  swift_task_dealloc(v196);
  swift_task_dealloc(v200);
  swift_task_dealloc(v204);
  swift_task_dealloc(v205);
  swift_task_dealloc(v208);
  swift_task_dealloc(v211);
  swift_task_dealloc(v212);
  swift_task_dealloc(v214);
  swift_task_dealloc(v217);
  swift_task_dealloc(v222);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100648DE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  void *v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;

  v3 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F9B8(a1, (uint64_t)v5, &qword_1010FBA40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_100004048((uint64_t)v5, &qword_1010FBA40);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    v11 = objc_autoreleasePoolPush();
    sub_100646508((uint64_t)v9);
    if (v1)
    {
      objc_autoreleasePoolPop(v11);
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    else
    {
      v13 = v12;
      v14 = HIDWORD(v12);
      objc_autoreleasePoolPop(v11);
      result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if (v14 < v13)
        __break(1u);
      else
        return v13;
    }
  }
  return result;
}

uint64_t sub_100648F68(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v12;
  unint64_t v13;
  BOOL v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t result;

  v12 = 0;
  v13 = a3;
  while (1)
  {
    v15 = v13 > a2;
    if (v13 >= a1)
      break;
    if (v13 > a2 || a4 == v13)
      goto LABEL_13;
    v12 = 1;
LABEL_2:
    v14 = __CFADD__(v13++, 1);
    if (v14)
    {
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
  }
  if (v13 <= a2)
  {
    if (a4 == v13)
    {
      if ((v12 & 1) != 0)
      {
        v15 = 0;
        goto LABEL_13;
      }
      return 0;
    }
    goto LABEL_2;
  }
  if ((v12 & 1) == 0)
  {
    v4 = _swiftEmptyArrayStorage;
    goto LABEL_24;
  }
  v15 = 1;
LABEL_13:
  v5 = a1 - 1;
  if (!a1)
    goto LABEL_38;
  if (v5 >= a4)
    v7 = a4;
  else
    v7 = a1 - 1;
  if (v7 < a3)
    goto LABEL_39;
  v4 = sub_1007C8D58(0, 1, 1, _swiftEmptyArrayStorage);
  v8 = v4[2];
  v13 = v4[3];
  v6 = v8 + 1;
  if (v8 < v13 >> 1)
    goto LABEL_19;
LABEL_40:
  v4 = sub_1007C8D58((_QWORD *)(v13 > 1), v6, 1, v4);
LABEL_19:
  v4[2] = v6;
  v16 = &v4[2 * v8];
  v16[4] = a3;
  v16[5] = v7;
  if (v5 > a4)
  {
    swift_bridgeObjectRelease();
    return a4 + 1;
  }
  if (!v15)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_24:
  v14 = __CFADD__(a2, 1);
  v17 = a2 + 1;
  if (v14)
  {
    __break(1u);
  }
  else
  {
    if (v17 <= a3)
      v6 = a3;
    else
      v6 = v17;
    if (v6 <= a4)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) != 0)
        goto LABEL_30;
      goto LABEL_43;
    }
  }
  __break(1u);
LABEL_43:
  v4 = sub_1007C8D58(0, v4[2] + 1, 1, v4);
LABEL_30:
  v19 = v4[2];
  v18 = v4[3];
  if (v19 >= v18 >> 1)
    v4 = sub_1007C8D58((_QWORD *)(v18 > 1), v19 + 1, 1, v4);
  v4[2] = v19 + 1;
  v20 = &v4[2 * v19];
  v20[4] = v6;
  v20[5] = a4;
  result = swift_bridgeObjectRelease();
  if (v17 >= a3)
    return 0;
  if (a3 - 1 >= v17)
  {
    if (v17 <= 1)
      return 0;
    return v17;
  }
  __break(1u);
  return result;
}

unint64_t sub_10064917C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  const char *v15;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  Swift::String v20;
  Swift::String v21;
  os_log_type_t type;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v4 = a2;
  if (!(a3 | a4))
    return a1;
  v7 = a3;
  if (a4 >= a1 && a2 >= a3)
  {
    if (qword_1010E9DD8 != -1)
      swift_once(&qword_1010E9DD8, sub_1006270D8);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001A9E8(v8, (uint64_t)qword_101101B90);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (!os_log_type_enabled(v10, v11))
      goto LABEL_9;
    v12 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(64, -1);
    v24 = 0;
    v27 = a1;
    v28 = v23;
    *(_DWORD *)v12 = 136446466;
    v25 = 0xE000000000000000;
    v26 = v4;
    _print_unlocked<A, B>(_:_:)(&v27, &v24, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    type = v11;
    v13._countAndFlagsBits = 3026478;
    v13._object = (void *)0xE300000000000000;
    String.append(_:)(v13);
    _print_unlocked<A, B>(_:_:)(&v26, &v24, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v24 = sub_100016940(v24, v25, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2082;
    v26 = a4;
    v27 = v7;
    v24 = 0;
    v25 = 0xE000000000000000;
    _print_unlocked<A, B>(_:_:)(&v27, &v24, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v14._countAndFlagsBits = 3026478;
    v14._object = (void *)0xE300000000000000;
    String.append(_:)(v14);
    _print_unlocked<A, B>(_:_:)(&v26, &v24, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v24 = sub_100016940(v24, v25, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();
    v15 = "requested [%{public}s] and hole [%{public}s] cannnot overlap!";
    goto LABEL_8;
  }
  if (a1 && a1 - 1 == a4)
  {
    if (a2 >= a3)
      return v7;
    __break(1u);
  }
  if (a2 == -1)
  {
    __break(1u);
  }
  else
  {
    if (a2 + 1 == a3)
    {
      v7 = a1;
      v4 = a4;
      if (a4 >= a1)
        return v7;
      __break(1u);
    }
    if (qword_1010E9DD8 == -1)
      goto LABEL_21;
  }
  swift_once(&qword_1010E9DD8, sub_1006270D8);
LABEL_21:
  v17 = type metadata accessor for Logger(0);
  v18 = sub_10001A9E8(v17, (uint64_t)qword_101101B90);
  v10 = Logger.logObject.getter(v18);
  v19 = static os_log_type_t.error.getter(v10);
  if (!os_log_type_enabled(v10, v19))
    goto LABEL_9;
  v12 = swift_slowAlloc(22, -1);
  v23 = swift_slowAlloc(64, -1);
  v24 = 0;
  v27 = a1;
  v28 = v23;
  *(_DWORD *)v12 = 136446466;
  v25 = 0xE000000000000000;
  v26 = v4;
  _print_unlocked<A, B>(_:_:)(&v27, &v24, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  type = v19;
  v20._countAndFlagsBits = 3026478;
  v20._object = (void *)0xE300000000000000;
  String.append(_:)(v20);
  _print_unlocked<A, B>(_:_:)(&v26, &v24, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v24 = sub_100016940(v24, v25, &v28);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v12 + 4, v12 + 12);
  swift_bridgeObjectRelease();
  *(_WORD *)(v12 + 12) = 2082;
  v26 = a4;
  v27 = v7;
  v24 = 0;
  v25 = 0xE000000000000000;
  _print_unlocked<A, B>(_:_:)(&v27, &v24, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v21._countAndFlagsBits = 3026478;
  v21._object = (void *)0xE300000000000000;
  String.append(_:)(v21);
  _print_unlocked<A, B>(_:_:)(&v26, &v24, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v24 = sub_100016940(v24, v25, &v28);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v12 + 14, v12 + 22);
  swift_bridgeObjectRelease();
  v15 = "ERROR: Unadjacent hole! requested [%{public}s] and hole [%{public}s]";
LABEL_8:
  _os_log_impl((void *)&_mh_execute_header, v10, type, v15, (uint8_t *)v12, 0x16u);
  swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v23, -1, -1);
  swift_slowDealloc(v12, -1, -1);
LABEL_9:

  return a1;
}

_QWORD *sub_100649654(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  char v12;
  unint64_t v13;
  _BOOL4 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  Swift::String v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;

  v10 = a3;
  v12 = 0;
  v13 = a3;
  while (1)
  {
    v15 = v13 > a2;
    if (v13 < a1)
    {
      if (v13 > a2 || a4 == v13)
        goto LABEL_13;
      v12 = 1;
      goto LABEL_2;
    }
    if (v13 > a2)
    {
      if ((v12 & 1) == 0)
      {
        v4 = _swiftEmptyArrayStorage;
        v23 = a2 + 1;
        if (a2 != -1)
          goto LABEL_27;
        goto LABEL_40;
      }
      v15 = 1;
LABEL_13:
      v7 = a1 - 1;
      if (a1)
      {
        if (v7 >= a4)
          v6 = a4;
        else
          v6 = a1 - 1;
        if (v6 >= a3)
        {
          v4 = sub_1007C8D58(0, 1, 1, _swiftEmptyArrayStorage);
          v8 = v4[2];
          v13 = v4[3];
          v5 = v8 + 1;
          if (v8 < v13 >> 1)
            goto LABEL_19;
          goto LABEL_46;
        }
LABEL_45:
        __break(1u);
LABEL_46:
        v4 = sub_1007C8D58((_QWORD *)(v13 > 1), v5, 1, v4);
LABEL_19:
        v4[2] = v5;
        v16 = &v4[2 * v8];
        v16[4] = v10;
        v16[5] = v6;
        if (v7 > a4)
        {
          if (qword_1010E9DD8 != -1)
            swift_once(&qword_1010E9DD8, sub_1006270D8);
          v17 = type metadata accessor for Logger(0);
          v18 = sub_10001A9E8(v17, (uint64_t)qword_101101B90);
          v19 = Logger.logObject.getter(v18);
          v20 = static os_log_type_t.default.getter(v19);
          if (os_log_type_enabled(v19, v20))
          {
            v21 = (uint8_t *)swift_slowAlloc(12, -1);
            v37 = swift_slowAlloc(32, -1);
            v38 = v7;
            v41 = a4 + 1;
            v42 = v37;
            *(_DWORD *)v21 = 136446210;
            v39 = 0;
            v40 = 0xE000000000000000;
            _print_unlocked<A, B>(_:_:)(&v41, &v39, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
            v22._countAndFlagsBits = 3026478;
            v22._object = (void *)0xE300000000000000;
            String.append(_:)(v22);
            _print_unlocked<A, B>(_:_:)(&v38, &v39, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
            v39 = sub_100016940(v39, v40, (uint64_t *)&v42);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v21 + 4, v21 + 12);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v19, v20, "Hole created %{public}s", v21, 0xCu);
            swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v37, -1, -1);
            swift_slowDealloc(v21, -1, -1);
          }

        }
        if (!v15)
          return v4;
        v23 = a2 + 1;
        if (a2 != -1)
        {
LABEL_27:
          if (v23 <= v10)
            v24 = v10;
          else
            v24 = v23;
          if (v24 > a4)
          {
            __break(1u);
          }
          else
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
              goto LABEL_32;
          }
          isUniquelyReferenced_nonNull_native = (uint64_t)sub_1007C8D58(0, v4[2] + 1, 1, v4);
          v4 = (_QWORD *)isUniquelyReferenced_nonNull_native;
LABEL_32:
          v27 = v4[2];
          v26 = v4[3];
          if (v27 >= v26 >> 1)
          {
            isUniquelyReferenced_nonNull_native = (uint64_t)sub_1007C8D58((_QWORD *)(v26 > 1), v27 + 1, 1, v4);
            v4 = (_QWORD *)isUniquelyReferenced_nonNull_native;
          }
          v4[2] = v27 + 1;
          v28 = &v4[2 * v27];
          v28[4] = v24;
          v28[5] = a4;
          if (v23 >= v10)
            return v4;
          v29 = v10 - 1;
          if (v10 - 1 < v23)
          {
            __break(1u);
          }
          else
          {
            if (v23 < 2)
              return v4;
            v10 = static os_log_type_t.default.getter(isUniquelyReferenced_nonNull_native);
            if (qword_1010E9DF8 == -1)
              goto LABEL_38;
          }
          swift_once(&qword_1010E9DF8, sub_100654FE4);
LABEL_38:
          v30 = qword_1011B73B8;
          v31 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
          v32 = swift_allocObject(v31, 72, 7);
          *(_OWORD *)(v32 + 16) = xmmword_100E22B00;
          v41 = v29;
          v42 = v23;
          v39 = 0;
          v40 = 0xE000000000000000;
          _print_unlocked<A, B>(_:_:)(&v42, &v39, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
          v33._countAndFlagsBits = 3026478;
          v33._object = (void *)0xE300000000000000;
          String.append(_:)(v33);
          _print_unlocked<A, B>(_:_:)(&v41, &v39, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
          v34 = v39;
          v35 = v40;
          *(_QWORD *)(v32 + 56) = &type metadata for String;
          *(_QWORD *)(v32 + 64) = sub_10001AA00();
          *(_QWORD *)(v32 + 32) = v34;
          *(_QWORD *)(v32 + 40) = v35;
          os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v30, "Hole created %@", 15, 2, v32);
          swift_bridgeObjectRelease();
          return v4;
        }
LABEL_40:
        __break(1u);
        return _swiftEmptyArrayStorage;
      }
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (a4 == v13)
      break;
LABEL_2:
    if (__CFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
  }
  if ((v12 & 1) != 0)
  {
    v15 = 0;
    goto LABEL_13;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100649B10(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      v2 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(capacity:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        v3 = type metadata accessor for Data.RangeReference(0);
        result = swift_allocObject(v3, 32, 7);
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100649BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  NSURL *v46;
  void *v47;
  void *v48;
  unsigned int v49;
  id v50;
  id v51;
  NSURL *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  NSURL *v58;
  void *v59;
  void *v60;
  unsigned int v61;
  id v62;
  uint64_t v63;
  id v64;
  void (*v65)(char *, uint64_t);
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  void *v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint8_t *v78;
  NSURL *v79;
  void *v80;
  void *v81;
  unsigned int v82;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(char *, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  id v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t);
  char *v104;
  uint64_t v105;
  id v106;
  uint64_t v107;

  v94 = a1;
  v3 = sub_10001A9A8(&qword_101102050);
  __chkstk_darwin(v3);
  v95 = (uint64_t)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo(0);
  v92 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v99 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v91 = (uint64_t)&v89 - v9;
  __chkstk_darwin(v8);
  v98 = (uint64_t)&v89 - v10;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v97 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v89 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v89 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v89 - v21;
  v101 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.deletingLastPathComponent()(v101);
  v93 = v5;
  v23 = *(int *)(v5 + 20);
  v102 = a2;
  v24 = a2 + v23;
  v105 = *(_QWORD *)(a2 + v23);
  v106 = (id)dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v107 = v25;
  v26._countAndFlagsBits = 45;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  v27 = *(_QWORD *)(v24 + 8);
  v28 = v11;
  v105 = v27;
  v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v100 = v22;
  URL.appendingPathComponent(_:)(v106, v107);
  swift_bridgeObjectRelease();
  v104 = v20;
  URL.appendingPathExtension(_:)(0x70616D79656BLL, 0xE600000000000000);
  v103 = *(void (**)(char *, uint64_t))(v12 + 8);
  v103(v17, v11);
  if (qword_1010E9DD8 != -1)
    swift_once(&qword_1010E9DD8, sub_1006270D8);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_10001A9E8(v30, (uint64_t)qword_101101B90);
  v32 = v98;
  sub_10005972C(v102, v98, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
  v33 = v97;
  v34 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 16))(v97, v104, v28);
  v89 = v31;
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter(v35);
  if (os_log_type_enabled(v35, v36))
  {
    v37 = swift_slowAlloc(22, -1);
    v38 = (void *)swift_slowAlloc(64, -1);
    v106 = v38;
    *(_DWORD *)v37 = 136315394;
    v90 = v28;
    v39 = URL.path.getter(v38);
    v105 = sub_100016940(v39, v40, (uint64_t *)&v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease();
    v41 = sub_1000126B0(v32, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    *(_WORD *)(v37 + 12) = 2080;
    v42 = URL.path.getter(v41);
    v105 = sub_100016940(v42, v43, (uint64_t *)&v106);
    v28 = v90;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v37 + 14, v37 + 22);
    swift_bridgeObjectRelease();
    v103(v33, v28);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Renaming %s to %s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);
  }
  else
  {
    sub_1000126B0(v32, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    v103(v33, v28);
  }

  v44 = v101;
  v45 = (uint64_t)v99;
  URL._bridgeToObjectiveC()(v46);
  v48 = v47;
  v106 = 0;
  v49 = objc_msgSend(v44, "removeItemAtURL:error:", v47, &v106);

  v50 = v106;
  if (v49)
  {
    v51 = v106;
  }
  else
  {
    v53 = v106;
    v54 = _convertNSErrorToError(_:)(v50);

    swift_willThrow(v55);
    swift_errorRelease(v54);
    v96 = 0;
  }
  URL._bridgeToObjectiveC()(v52);
  v57 = v56;
  URL._bridgeToObjectiveC()(v58);
  v60 = v59;
  v106 = 0;
  v61 = objc_msgSend(v44, "moveItemAtURL:toURL:error:", v57, v59, &v106);

  v62 = v106;
  if (v61)
  {
    v63 = v95;
    sub_10000F9B8(v94, v95, &qword_101102050);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v63, 1, v93) == 1)
    {
      v64 = v62;

      v65 = v103;
      v103(v104, v28);
      v65(v100, v28);
      return sub_100004048(v63, &qword_101102050);
    }
    v69 = v63;
    v70 = v91;
    sub_1000126EC(v69, v91, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    sub_10005972C(v70, v45, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    v71 = Logger.logObject.getter(v62);
    v72 = static os_log_type_t.default.getter(v71);
    if (os_log_type_enabled(v71, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc(12, -1);
      v74 = (void *)swift_slowAlloc(32, -1);
      v106 = v74;
      v90 = v28;
      *(_DWORD *)v73 = 136315138;
      v75 = URL.path.getter(v74);
      v105 = sub_100016940(v75, v76, (uint64_t *)&v106);
      v28 = v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v73 + 4, v73 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v45, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Deleting %s", v73, 0xCu);
      swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
      v77 = v74;
      v44 = v101;
      swift_slowDealloc(v77, -1, -1);
      v78 = v73;
      v70 = v91;
      swift_slowDealloc(v78, -1, -1);
    }
    else
    {
      sub_1000126B0(v45, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    }

    URL._bridgeToObjectiveC()(v79);
    v81 = v80;
    v106 = 0;
    v82 = objc_msgSend(v44, "removeItemAtURL:error:", v80, &v106);

    v83 = v106;
    if (v82)
    {
      v84 = v106;

    }
    else
    {
      v85 = v106;
      v86 = _convertNSErrorToError(_:)(v83);

      swift_willThrow(v87);
      swift_errorRelease(v86);
    }
    sub_1000126B0(v70, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
  }
  else
  {
    v67 = v106;
    _convertNSErrorToError(_:)(v62);

    swift_willThrow(v68);
  }
  v88 = (uint64_t (*)(char *, uint64_t))v103;
  v103(v104, v28);
  return v88(v100, v28);
}

uint64_t sub_10064A3B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4[105] = v3;
  v4[99] = a3;
  v4[93] = a2;
  v4[87] = a1;
  v5 = type metadata accessor for KeyGenerationBeaconInfo(0);
  v4[106] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[107] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[108] = v7;
  v4[109] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[110] = swift_task_alloc(v8);
  v4[111] = swift_task_alloc(v8);
  v9 = type metadata accessor for URL(0);
  v4[112] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[113] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v4[114] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[115] = swift_task_alloc(v12);
  v4[116] = swift_task_alloc(v12);
  v4[117] = swift_task_alloc(v12);
  v4[118] = swift_task_alloc(v12);
  v4[119] = swift_task_alloc(v12);
  return swift_task_switch(sub_10064A4B4, 0, 0);
}

uint64_t sub_10064A4B4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 696) + *(int *)(*(_QWORD *)(v0 + 848) + 24));
  v2 = *v1;
  *(_QWORD *)(v0 + 960) = *v1;
  v3 = v1[1];
  *(_QWORD *)(v0 + 968) = v3;
  v4 = v1[2];
  *(_QWORD *)(v0 + 976) = v4;
  v5 = v1[3];
  *(_QWORD *)(v0 + 984) = v5;
  v6 = v1[4];
  *(_QWORD *)(v0 + 992) = v6;
  v7 = v1[5];
  *(_QWORD *)(v0 + 1000) = v7;
  if (v3 >> 60 == 15)
  {
    v8 = sub_10064B00C();
    v9 = swift_allocError(&type metadata for BeaconKeyServiceBuilder.Error, v8, 0, 0);
    *v10 = 1;
    swift_willThrow(v9);
    v11 = *(_QWORD *)(v0 + 944);
    v12 = *(_QWORD *)(v0 + 936);
    v13 = *(_QWORD *)(v0 + 928);
    v14 = *(_QWORD *)(v0 + 920);
    v15 = *(_QWORD *)(v0 + 888);
    v16 = *(_QWORD *)(v0 + 880);
    v17 = *(_QWORD *)(v0 + 872);
    swift_task_dealloc(*(_QWORD *)(v0 + 952));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  v59 = v0 + 1048;
  v60 = v0 + 16;
  v19 = *(_QWORD *)(v0 + 944);
  v20 = *(_QWORD *)(v0 + 904);
  v56 = *(_QWORD *)(v0 + 896);
  sub_10001BBBC(v2, v3);
  sub_10001BBBC(v4, v5);
  v21 = sub_10001BD08(v6, v7);
  v22 = UUID.uuidString.getter(v21);
  URL.appendingPathComponent(_:)(v22, v23);
  swift_bridgeObjectRelease();
  v24 = type metadata accessor for BeaconIdentifier(0);
  v25 = UUID.uuidString.getter(v24);
  URL.appendingPathComponent(_:)(v25, v26);
  swift_bridgeObjectRelease();
  v27 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  *(_QWORD *)(v0 + 1008) = v27;
  v27(v19, v56);
  URL.appendingPathComponent(_:)(0x7972616D697250, 0xE700000000000000);
  if (v7 >> 60 != 15)
    URL.appendingPathComponent(_:)(0x7261646E6F636553, 0xE900000000000079);
  v28 = *(_QWORD *)(v0 + 936);
  v29 = *(_QWORD *)(v0 + 928);
  v30 = *(_QWORD *)(v0 + 904);
  v31 = *(_QWORD *)(v0 + 896);
  v57 = *(_QWORD *)(v0 + 888);
  v58 = *(_QWORD *)(v0 + 880);
  v32 = *(_QWORD *)(v0 + 872);
  v33 = *(_QWORD *)(v0 + 864);
  v34 = *(_QWORD *)(v0 + 856);
  v35 = *(_QWORD *)(v0 + 840);
  v55 = *(_QWORD *)(v0 + 792);
  v53 = *(_QWORD *)(v0 + 912);
  v54 = *(_QWORD *)(v0 + 744);
  v36 = *(_QWORD *)(v0 + 696);
  (*(void (**)(void))(v30 + 56))();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v29, v28, v31);
  sub_10005972C(v36, v32, type metadata accessor for KeyGenerationBeaconInfo);
  v37 = *(unsigned __int8 *)(v30 + 80);
  v38 = (v37 + 24) & ~v37;
  v39 = *(unsigned __int8 *)(v34 + 80);
  v40 = (v53 + v39 + v38) & ~v39;
  v41 = (v33 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
  v42 = swift_allocObject(&unk_101083D68, v41 + 16, v37 | v39 | 7);
  *(_QWORD *)(v0 + 1016) = v42;
  *(_QWORD *)(v42 + 16) = v35;
  v43 = v42 + v38;
  v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32);
  v44(v43, v29, v31);
  sub_1000126EC(v32, v42 + v40, type metadata accessor for KeyGenerationBeaconInfo);
  v45 = (_QWORD *)(v42 + v41);
  *v45 = v54;
  v45[1] = v55;
  swift_retain();
  swift_asyncLet_begin(v60, 0, &type metadata for Bool, &unk_101102040, v42, v59);
  sub_10000F9B8(v57, v58, &qword_1010FBA40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v58, 1, v31) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 880), &qword_1010FBA40);
    *(_BYTE *)(v0 + 1050) = 0;
    return swift_asyncLet_get_throwing(v60, v59, sub_10064AA30, v0 + 656);
  }
  v46 = *(_QWORD *)(v0 + 744);
  v44(*(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 896));
  if (v46)
  {
    v47 = *(_QWORD *)(v0 + 792);
    if (v47)
    {
      v48 = *(_QWORD *)(v0 + 744) / 0x60uLL;
      v49 = v47 / 0x60;
      if (v49 >= v48)
      {
        v50 = v48 + 1;
        v51 = v49 + 1;
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  v50 = 0;
  v51 = 0;
LABEL_12:
  v52 = (_QWORD *)swift_task_alloc(dword_10110204C);
  *(_QWORD *)(v0 + 1024) = v52;
  *v52 = v0;
  v52[1] = sub_10064A954;
  return sub_10062F7AC(*(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 696), 1, v50, v51, 1);
}

uint64_t sub_10064A954(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 1024);
  *(_QWORD *)(*v2 + 1032) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10064ABA0;
  }
  else
  {
    *(_BYTE *)(v4 + 1049) = a1 & 1;
    v6 = sub_10064A9CC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10064A9CC()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 1008))(*(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 896));
  *(_BYTE *)(v0 + 1050) = *(_BYTE *)(v0 + 1049);
  return swift_asyncLet_get_throwing(v0 + 16, v0 + 1048, sub_10064AA30, v0 + 656);
}

uint64_t sub_10064AA30()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = (_BYTE *)(v1 + 1048);
  *(_QWORD *)(v1 + 1040) = v0;
  if (v0)
  {
    v3 = v1 + 704;
    v4 = sub_10064AD18;
  }
  else
  {
    v3 = v1 + 752;
    *(_BYTE *)(v1 + 1051) = *v2;
    v4 = sub_10064AA68;
  }
  return swift_asyncLet_finish(v1 + 16, v2, v4, v3);
}

uint64_t sub_10064AA68()
{
  return swift_task_switch(sub_10064AA7C, 0, 0);
}

uint64_t sub_10064AA7C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1008);
  v2 = *(_QWORD *)(v0 + 952);
  v3 = *(_QWORD *)(v0 + 944);
  v4 = *(_QWORD *)(v0 + 936);
  v5 = *(_QWORD *)(v0 + 928);
  v6 = *(_QWORD *)(v0 + 920);
  v7 = *(_QWORD *)(v0 + 896);
  v8 = *(_QWORD *)(v0 + 888);
  v10 = *(_QWORD *)(v0 + 880);
  v11 = *(_QWORD *)(v0 + 872);
  sub_10064B29C(*(_QWORD *)(v0 + 960), *(_QWORD *)(v0 + 968), *(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 984), *(_QWORD *)(v0 + 992), *(_QWORD *)(v0 + 1000));
  sub_100004048(v8, &qword_1010FBA40);
  v1(v4, v7);
  v1(v2, v7);
  swift_release();
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))((*(_BYTE *)(v0 + 1051) | *(_BYTE *)(v0 + 1050)) & 1);
}

uint64_t sub_10064ABA0()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 1008))(*(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 896));
  return swift_asyncLet_finish(v0 + 16, v0 + 1048, sub_10064ABFC, v0 + 800);
}

uint64_t sub_10064ABFC()
{
  return swift_task_switch(sub_10064AC10, 0, 0);
}

uint64_t sub_10064AC10()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1008);
  v2 = *(_QWORD *)(v0 + 952);
  v3 = *(_QWORD *)(v0 + 936);
  v4 = *(_QWORD *)(v0 + 896);
  v5 = *(_QWORD *)(v0 + 888);
  sub_10064B29C(*(_QWORD *)(v0 + 960), *(_QWORD *)(v0 + 968), *(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 984), *(_QWORD *)(v0 + 992), *(_QWORD *)(v0 + 1000));
  sub_100004048(v5, &qword_1010FBA40);
  v1(v3, v4);
  v1(v2, v4);
  swift_release();
  v6 = *(_QWORD *)(v0 + 944);
  v7 = *(_QWORD *)(v0 + 936);
  v8 = *(_QWORD *)(v0 + 928);
  v9 = *(_QWORD *)(v0 + 920);
  v10 = *(_QWORD *)(v0 + 888);
  v11 = *(_QWORD *)(v0 + 880);
  v12 = *(_QWORD *)(v0 + 872);
  swift_task_dealloc(*(_QWORD *)(v0 + 952));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10064AD18()
{
  return swift_task_switch(sub_10064AD2C, 0, 0);
}

uint64_t sub_10064AD2C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1008);
  v2 = *(_QWORD *)(v0 + 952);
  v3 = *(_QWORD *)(v0 + 936);
  v4 = *(_QWORD *)(v0 + 896);
  v5 = *(_QWORD *)(v0 + 888);
  sub_10064B29C(*(_QWORD *)(v0 + 960), *(_QWORD *)(v0 + 968), *(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 984), *(_QWORD *)(v0 + 992), *(_QWORD *)(v0 + 1000));
  sub_100004048(v5, &qword_1010FBA40);
  v1(v3, v4);
  v1(v2, v4);
  swift_release();
  v6 = *(_QWORD *)(v0 + 944);
  v7 = *(_QWORD *)(v0 + 936);
  v8 = *(_QWORD *)(v0 + 928);
  v9 = *(_QWORD *)(v0 + 920);
  v10 = *(_QWORD *)(v0 + 888);
  v11 = *(_QWORD *)(v0 + 880);
  v12 = *(_QWORD *)(v0 + 872);
  swift_task_dealloc(*(_QWORD *)(v0 + 952));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10064AE34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v1 = type metadata accessor for KeyGenerationBeaconInfo(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v0 + v4, v6);
  v8 = type metadata accessor for BeaconIdentifier(0);
  v7(v0 + v4 + *(int *)(v8 + 20), v6);
  v9 = v0 + v4 + *(int *)(v1 + 20);
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (uint64_t *)(v0 + v4 + *(int *)(v1 + 24));
  v12 = v11[1];
  if (v12 >> 60 != 15)
  {
    sub_10001BC14(*v11, v12);
    sub_10001BC14(v11[2], v11[3]);
    v13 = v11[5];
    if (v13 >> 60 != 15)
      sub_10001BC14(v11[4], v13);
  }
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_10064AF54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(type metadata accessor for KeyGenerationBeaconInfo(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v1 + 32);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + v6);
  v10 = *(_QWORD *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc(dword_101102024);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_100004A74;
  v11[5] = v9;
  v11[6] = v10;
  v11[3] = v7;
  v11[4] = v8;
  v11[2] = a1;
  return swift_task_switch(sub_10062C910, 0, 0);
}

unint64_t sub_10064B00C()
{
  unint64_t result;

  result = qword_101102030;
  if (!qword_101102030)
  {
    result = swift_getWitnessTable(byte_100E46750, &type metadata for BeaconKeyServiceBuilder.Error);
    atomic_store(result, &qword_101102030);
  }
  return result;
}

uint64_t sub_10064B050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for KeyGenerationBeaconInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v0 + v9, v11);
  v13 = type metadata accessor for BeaconIdentifier(0);
  v12(v0 + v9 + *(int *)(v13 + 20), v11);
  v14 = v0 + v9 + *(int *)(v6 + 20);
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = (uint64_t *)(v0 + v9 + *(int *)(v6 + 24));
  v17 = v16[1];
  if (v17 >> 60 != 15)
  {
    sub_10001BC14(*v16, v17);
    sub_10001BC14(v16[2], v16[3]);
    v18 = v16[5];
    if (v18 >> 60 != 15)
      sub_10001BC14(v16[4], v18);
  }
  return swift_deallocObject(v0, ((v10 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | v8 | 7);
}

uint64_t sub_10064B1A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for KeyGenerationBeaconInfo(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v1 + v5;
  v10 = v1 + v8;
  v11 = (uint64_t *)(v1 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  v12 = *v11;
  v13 = v11[1];
  v14 = (_QWORD *)swift_task_alloc(dword_10110203C);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_100004A74;
  v14[2] = a1;
  v15 = (_QWORD *)swift_task_alloc(dword_10110204C);
  v14[3] = v15;
  *v15 = v14;
  v15[1] = sub_10062F714;
  return sub_10062F7AC(v9, v10, 0, v12, v13, 1);
}

uint64_t sub_10064B29C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2 >> 60 != 15)
  {
    sub_10001BC14(result, a2);
    sub_10001BC14(a3, a4);
    return sub_10001EF3C(a5, a6);
  }
  return result;
}

uint64_t type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo(uint64_t a1)
{
  return sub_10001B630(a1, qword_101102248, (uint64_t)&nominal type descriptor for BeaconKeyServiceBuilder.FileSwapInfo);
}

unint64_t sub_10064B308()
{
  unint64_t result;

  result = qword_101102058;
  if (!qword_101102058)
  {
    result = swift_getWitnessTable(aY_45, &type metadata for BeaconKeyService.Error);
    atomic_store(result, (unint64_t *)&qword_101102058);
  }
  return result;
}

uint64_t type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo(uint64_t a1)
{
  return sub_10001B630(a1, qword_1011021B8, (uint64_t)&nominal type descriptor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
}

void sub_10064B360(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  unsigned __int8 v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F4A0(0, &qword_101101FD0, NSFileHandle_ptr);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v7 = sub_100636E84((uint64_t)v6, (SEL *)&selRef_fileHandleForReadingFromURL_error_);
  if (!v1)
  {
    v8 = v7;
    v18 = 0;
    v9 = objc_msgSend(v7, "seekToOffset:error:", 0, &v18);
    v10 = v18;
    if ((v9 & 1) != 0)
    {
      v11 = v18;
      v12 = objc_msgSend(v8, "readDataOfLength:", 3);
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v14 = v13;

      __asm { BR              X10 }
    }
    v15 = v18;
    _convertNSErrorToError(_:)(v10);

    swift_willThrow(v16);
  }
}

uint64_t sub_10064BDE0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  sub_10012C494(v0[4], v0[5]);
  swift_release();
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10064BE14(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1011020D4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004A74;
  return sub_10062D4EC(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10064BE94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1011020E4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1011020E0 + dword_1011020E0))(a1, v4);
}

uint64_t sub_10064BF04()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10064BF30()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_10110213C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004C28;
  v2 = (_QWORD *)swift_task_alloc(dword_101101D74);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_100004C28;
  return sub_10062E520();
}

uint64_t *sub_10064BF98(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_10064C024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10064C080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  *(_DWORD *)(v8 + 4) = *(_DWORD *)(v9 + 4);
  *(_DWORD *)(v8 + 8) = *(_DWORD *)(v9 + 8);
  *(_DWORD *)(v8 + 12) = *(_DWORD *)(v9 + 12);
  return a1;
}

uint64_t sub_10064C0FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10064C158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  *(_QWORD *)(v8 + 4) = *(_QWORD *)(v9 + 4);
  *(_DWORD *)(v8 + 12) = *(_DWORD *)(v9 + 12);
  return a1;
}

uint64_t sub_10064C1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10064C1D8);
}

uint64_t sub_10064C1DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10064C1E8);
}

uint64_t sub_10064C1EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10064C3AC(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&unk_100E466A0);
}

uint64_t sub_10064C200(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_10064C234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  return a1;
}

uint64_t sub_10064C2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10064C2FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10064C308);
}

uint64_t sub_10064C30C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10064C348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10064C354);
}

uint64_t sub_10064C358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_10064C398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10064C3AC(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&unk_100E466C8);
}

uint64_t sub_10064C3AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t result;
  unint64_t v8;
  _QWORD v9[2];

  result = a4(319);
  if (v8 <= 0x3F)
  {
    v9[0] = *(_QWORD *)(result - 8) + 64;
    v9[1] = a5;
    swift_initStructMetadata(a1, 256, 2, v9, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BeaconKeyServiceBuilder.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10064C464 + 4 * byte_100E464D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10064C498 + 4 * byte_100E464D0[v4]))();
}

uint64_t sub_10064C498(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10064C4A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10064C4A8);
  return result;
}

uint64_t sub_10064C4B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10064C4BCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10064C4C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10064C4C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconKeyServiceBuilder.Error()
{
  return &type metadata for BeaconKeyServiceBuilder.Error;
}

unint64_t sub_10064C4E8()
{
  unint64_t result;

  result = qword_101102280;
  if (!qword_101102280)
  {
    result = swift_getWitnessTable(aI_25, &type metadata for BeaconKeyServiceBuilder.Error);
    atomic_store(result, (unint64_t *)&qword_101102280);
  }
  return result;
}

uint64_t sub_10064C538@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  double v39;
  void (*v40)(char *, uint64_t);
  double v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;

  v49 = a4;
  v7 = type metadata accessor for Date(0);
  v50 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v51 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v46 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v46 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v46 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v46 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v46 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v46 - v26;
  if (!a2)
  {
    v47 = a3;
    v48 = a1;
    if (qword_1010E9DF0 != -1)
      swift_once(&qword_1010E9DF0, sub_10064D97C);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_10001A9E8(v28, (uint64_t)qword_1011B73A0);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Caller attempted to calculate dateInterval for bucket 0!", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    a2 = 1;
    a3 = v47;
    a1 = v48;
  }
  v48 = v15;
  v33 = (double)a3 * 60.0;
  v34 = v33 * (double)(unint64_t)(a2 - 1);
  Date.timeIntervalSinceReferenceDate.getter(v25);
  Date.init(timeIntervalSinceReferenceDate:)(v35);
  v36 = v50;
  v37 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  v37(v21, a1, v7);
  Date.init(timeInterval:since:)(v21, v34);
  v37(v21, v27, v7);
  Date.init(timeInterval:since:)(v21, v34);
  v37(v21, v18, v7);
  v38 = Date.init(timeInterval:since:)(v21, v33);
  v39 = Date.timeIntervalSince1970.getter(v38);
  v40 = *(void (**)(char *, uint64_t))(v36 + 8);
  v40(v12, v7);
  v41 = 0.0 - v39;
  if (0.0 - v39 < INFINITY)
    *(_QWORD *)&v41 += (*(uint64_t *)&v41 >> 63) | 1;
  v42 = v48;
  Date.init(timeIntervalSince1970:)(-v41);
  if (a2 == 1)
    v43 = v24;
  else
    v43 = v18;
  v37(v21, v43, v7);
  v44 = v51;
  v37(v51, v42, v7);
  DateInterval.init(start:end:)(v21, v44);
  v40(v42, v7);
  v40(v18, v7);
  v40(v24, v7);
  return ((uint64_t (*)(char *, uint64_t))v40)(v27, v7);
}

uint64_t sub_10064C894@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, char *, uint64_t)@<X2>, uint64_t a4@<X3>, void *a5@<X4>, _QWORD *a6@<X5>, char *a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t result;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t, uint64_t);
  char *v82;
  void (*v83)(char *, char *, uint64_t);
  char *v84;
  void (*v85)(char *, uint64_t, uint64_t);
  uint64_t *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, char *, uint64_t);
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unsigned int v97;
  char *v98;
  uint64_t v99;
  unsigned int v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, uint64_t);
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  id v160;
  id v161;
  char *v162;
  uint64_t *v163;
  id v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  char *v200;
  char *v201;
  id v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t (*v212)(uint64_t, char *, uint64_t);
  char *v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  char *v218;
  id v219;
  uint64_t (*v220)(uint64_t, uint64_t);
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  void (*v226)(char *, uint64_t);
  _QWORD *v227;
  __int128 v228;
  uint64_t v229;
  id v230;

  v216 = a6;
  v219 = a5;
  v212 = a3;
  v199 = a2;
  v208 = a7;
  v9 = type metadata accessor for Calendar.Component(0);
  v214 = *(_QWORD *)(v9 - 8);
  v215 = v9;
  __chkstk_darwin(v9);
  v213 = (char *)&v190 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = type metadata accessor for Date(0);
  v217 = *(_QWORD *)(v211 - 8);
  v11 = __chkstk_darwin(v211);
  v203 = (char *)&v190 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v192 = (char *)&v190 - v14;
  v15 = __chkstk_darwin(v13);
  v198 = (char *)&v190 - v16;
  v17 = __chkstk_darwin(v15);
  v200 = (char *)&v190 - v18;
  v19 = __chkstk_darwin(v17);
  v191 = (char *)&v190 - v20;
  v21 = __chkstk_darwin(v19);
  v197 = (char *)&v190 - v22;
  v23 = __chkstk_darwin(v21);
  v201 = (char *)&v190 - v24;
  __chkstk_darwin(v23);
  v204 = (char *)&v190 - v25;
  v225 = type metadata accessor for UUID(0);
  v26 = *(_QWORD *)(v225 - 8);
  __chkstk_darwin(v225);
  v28 = (char *)&v190 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v30 = __chkstk_darwin(v29);
  v196 = (uint64_t)&v190 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v194 = (char *)&v190 - v33;
  v34 = __chkstk_darwin(v32);
  v195 = (uint64_t)&v190 - v35;
  v36 = __chkstk_darwin(v34);
  v193 = (char *)&v190 - v37;
  v38 = __chkstk_darwin(v36);
  v210 = (uint64_t)&v190 - v39;
  __chkstk_darwin(v38);
  v41 = (char *)&v190 - v40;
  v207 = type metadata accessor for Calendar(0);
  v206 = *(_QWORD *)(v207 - 8);
  v42 = __chkstk_darwin(v207);
  v218 = (char *)&v190 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = static Calendar.current.getter(v42);
  LODWORD(v224) = static os_log_type_t.default.getter(v44);
  if (qword_1010EA2E0 != -1)
    swift_once(&qword_1010EA2E0, sub_100B5E070);
  v223 = qword_1011B7DC0;
  v229 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v45 = swift_allocObject(v229, 112, 7);
  v228 = xmmword_100E22B10;
  *(_OWORD *)(v45 + 16) = xmmword_100E22B10;
  v205 = a4;
  sub_10001F674(a4, (uint64_t)v41);
  v46 = String.init<A>(describing:)(v41, v29);
  v48 = v47;
  *(_QWORD *)(v45 + 56) = &type metadata for String;
  v49 = sub_10001AA00();
  *(_QWORD *)(v45 + 64) = v49;
  *(_QWORD *)(v45 + 32) = v46;
  *(_QWORD *)(v45 + 40) = v48;
  v51 = a1[3];
  v50 = a1[4];
  v227 = sub_10001AA44(a1, v51);
  v52 = *(_QWORD *)(*(_QWORD *)(v50 + 8) + 8);
  v53 = *(uint64_t (**)(uint64_t, uint64_t))(v52 + 32);
  v54 = v53(v51, v52);
  v55 = UUID.uuidString.getter(v54);
  v57 = v56;
  v226 = *(void (**)(char *, uint64_t))(v26 + 8);
  v58 = v225;
  v226(v28, v225);
  *(_QWORD *)(v45 + 96) = &type metadata for String;
  *(_QWORD *)(v45 + 104) = v49;
  *(_QWORD *)(v45 + 72) = v55;
  *(_QWORD *)(v45 + 80) = v57;
  os_log(_:dso:log:_:_:)(v224, &_mh_execute_header, v223, "Last known good key start date %@ for beacon %@ ", 48, 2, v45);
  v59 = swift_bridgeObjectRelease();
  v60 = static os_log_type_t.default.getter(v59);
  v209 = qword_1011B7DC0;
  v61 = swift_allocObject(v229, 112, 7);
  *(_OWORD *)(v61 + 16) = v228;
  v230 = v219;
  v202 = v219;
  v62 = sub_10001A9A8(&qword_101102338);
  v63 = String.init<A>(describing:)(&v230, v62);
  *(_QWORD *)(v61 + 56) = &type metadata for String;
  *(_QWORD *)(v61 + 64) = v49;
  *(_QWORD *)(v61 + 32) = v63;
  *(_QWORD *)(v61 + 40) = v64;
  v221 = v52;
  v222 = v51;
  v220 = v53;
  v65 = v53(v51, v52);
  v66 = UUID.uuidString.getter(v65);
  v68 = v67;
  v224 = v28;
  v226(v28, v58);
  *(_QWORD *)(v61 + 96) = &type metadata for String;
  *(_QWORD *)(v61 + 104) = v49;
  v223 = v49;
  *(_QWORD *)(v61 + 72) = v66;
  *(_QWORD *)(v61 + 80) = v68;
  os_log(_:dso:log:_:_:)(v60, &_mh_execute_header, v209, "Last online location info %@ for beacon %@ ", 43, 2, v61);
  swift_bridgeObjectRelease();
  v69 = v210;
  sub_10001F674((uint64_t)v212, v210);
  v70 = v217;
  v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v217 + 48);
  v72 = v211;
  if (v71(v69, 1, v211) != 1)
  {
    v85 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 32);
    v84 = v204;
    v85(v204, v69, v72);
    v86 = sub_10001AA44(v216, v216[3]);
    v87 = sub_100C1B210(*v86);
    v88 = v213;
    v89 = v214;
    v90 = v215;
    result = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v214 + 104))(v213, enum case for Calendar.Component.minute(_:), v215);
    if (!__OFSUB__(0, v87))
    {
      v91 = (uint64_t)v193;
      Calendar.date(byAdding:value:to:wrappingComponents:)(v88, -v87, v84, 0);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v88, v90);
      v92 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
      v93 = v197;
      v92(v197, v84, v72);
      if (v71(v91, 1, v72) == 1)
      {
        v94 = v201;
        v85(v201, (uint64_t)v93, v72);
        sub_100004048(v91, (uint64_t *)&unk_1010EA690);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v70 + 8))(v93, v72);
        v94 = v201;
        v85(v201, v91, v72);
      }
      v95 = v208;
      v99 = v195;
      sub_10001F674(v205, v195);
      v100 = v71(v99, 1, v72);
      v101 = v224;
      v212 = (uint64_t (*)(uint64_t, char *, uint64_t))v85;
      if (v100 == 1)
      {
        sub_100004048(v99, (uint64_t *)&unk_1010EA690);
      }
      else
      {
        v119 = v191;
        v85(v191, v99, v72);
        if ((static Date.> infix(_:_:)(v119, v94) & 1) != 0)
        {
          v120 = ((uint64_t (*)(char *, char *, uint64_t))v92)(v95, v119, v72);
          v121 = static os_log_type_t.default.getter(v120);
          v215 = qword_1011B7DC0;
          v122 = swift_allocObject(v229, 112, 7);
          *(_OWORD *)(v122 + 16) = v228;
          v123 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v124 = dispatch thunk of CustomStringConvertible.description.getter(v72, v123);
          v125 = v223;
          *(_QWORD *)(v122 + 56) = &type metadata for String;
          *(_QWORD *)(v122 + 64) = v125;
          *(_QWORD *)(v122 + 32) = v124;
          *(_QWORD *)(v122 + 40) = v126;
          v127 = v220(v222, v221);
          v128 = UUID.uuidString.getter(v127);
          v129 = v101;
          v131 = v130;
          v226(v129, v225);
          *(_QWORD *)(v122 + 96) = &type metadata for String;
          *(_QWORD *)(v122 + 104) = v125;
          *(_QWORD *)(v122 + 72) = v128;
          *(_QWORD *)(v122 + 80) = v131;
          os_log(_:dso:log:_:_:)(v121, &_mh_execute_header, v215, "Fetch limit set to most recent key date %@ for beacon %@ ", 57, 2, v122);
          swift_bridgeObjectRelease();
          v117 = *(void (**)(char *, uint64_t))(v70 + 8);
          v117(v191, v72);
          v117(v201, v72);
LABEL_22:
          v118 = v84;
          goto LABEL_25;
        }
        (*(void (**)(char *, uint64_t))(v70 + 8))(v119, v72);
      }
      v145 = ((uint64_t (*)(char *, char *, uint64_t))v92)(v95, v94, v72);
      v146 = static os_log_type_t.default.getter(v145);
      v147 = qword_1011B7DC0;
      v148 = swift_allocObject(v229, 112, 7);
      *(_OWORD *)(v148 + 16) = v228;
      v149 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v150 = v94;
      v151 = dispatch thunk of CustomStringConvertible.description.getter(v72, v149);
      v152 = v223;
      *(_QWORD *)(v148 + 56) = &type metadata for String;
      *(_QWORD *)(v148 + 64) = v152;
      *(_QWORD *)(v148 + 32) = v151;
      *(_QWORD *)(v148 + 40) = v153;
      v154 = v220(v222, v221);
      v155 = UUID.uuidString.getter(v154);
      v156 = v101;
      v158 = v157;
      v226(v156, v225);
      *(_QWORD *)(v148 + 96) = &type metadata for String;
      *(_QWORD *)(v148 + 104) = v152;
      *(_QWORD *)(v148 + 72) = v155;
      *(_QWORD *)(v148 + 80) = v158;
      os_log(_:dso:log:_:_:)(v146, &_mh_execute_header, v147, "Fetch limit set to policy limit %@ for beacon %@ ", 49, 2, v148);
      swift_bridgeObjectRelease();
      v117 = *(void (**)(char *, uint64_t))(v217 + 8);
      v117(v150, v72);
      v118 = v204;
      goto LABEL_25;
    }
LABEL_32:
    __break(1u);
    return result;
  }
  sub_100004048(v69, (uint64_t *)&unk_1010EA690);
  v73 = sub_10001AA44(v216, v216[3]);
  v74 = sub_100C1B1D4(*v73);
  v75 = v213;
  v76 = v214;
  v77 = v215;
  result = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v214 + 104))(v213, enum case for Calendar.Component.day(_:), v215);
  if (__OFSUB__(0, v74))
  {
    __break(1u);
    goto LABEL_32;
  }
  v79 = (uint64_t)v194;
  v80 = v199;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v75, -v74, v199, 0);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v75, v77);
  v81 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
  v82 = v198;
  v81(v198, v80, v72);
  if (v71(v79, 1, v72) == 1)
  {
    v83 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
    v84 = v200;
    v83(v200, v82, v72);
    sub_100004048(v79, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v70 + 8))(v82, v72);
    v83 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
    v84 = v200;
    v83(v200, (char *)v79, v72);
  }
  v95 = v208;
  v96 = v196;
  sub_10001F674(v205, v196);
  v97 = v71(v96, 1, v72);
  v98 = v224;
  v212 = (uint64_t (*)(uint64_t, char *, uint64_t))v83;
  if (v97 == 1)
  {
    sub_100004048(v96, (uint64_t *)&unk_1010EA690);
LABEL_21:
    v132 = ((uint64_t (*)(char *, char *, uint64_t))v81)(v95, v84, v72);
    v133 = static os_log_type_t.default.getter(v132);
    v134 = qword_1011B7DC0;
    v135 = swift_allocObject(v229, 112, 7);
    *(_OWORD *)(v135 + 16) = v228;
    v136 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v137 = dispatch thunk of CustomStringConvertible.description.getter(v72, v136);
    v138 = v223;
    *(_QWORD *)(v135 + 56) = &type metadata for String;
    *(_QWORD *)(v135 + 64) = v138;
    *(_QWORD *)(v135 + 32) = v137;
    *(_QWORD *)(v135 + 40) = v139;
    v140 = v220(v222, v221);
    v141 = UUID.uuidString.getter(v140);
    v142 = v98;
    v144 = v143;
    v226(v142, v225);
    *(_QWORD *)(v135 + 96) = &type metadata for String;
    *(_QWORD *)(v135 + 104) = v138;
    *(_QWORD *)(v135 + 72) = v141;
    *(_QWORD *)(v135 + 80) = v144;
    os_log(_:dso:log:_:_:)(v133, &_mh_execute_header, v134, "Fetch limit set to longest look back %@ for beacon %@ ", 54, 2, v135);
    swift_bridgeObjectRelease();
    v117 = *(void (**)(char *, uint64_t))(v217 + 8);
    goto LABEL_22;
  }
  v102 = v192;
  v83(v192, (char *)v96, v72);
  if ((static Date.> infix(_:_:)(v102, v84) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v70 + 8))(v102, v72);
    goto LABEL_21;
  }
  v103 = ((uint64_t (*)(char *, char *, uint64_t))v81)(v95, v102, v72);
  v104 = static os_log_type_t.default.getter(v103);
  v215 = qword_1011B7DC0;
  v105 = swift_allocObject(v229, 112, 7);
  *(_OWORD *)(v105 + 16) = v228;
  v106 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v107 = dispatch thunk of CustomStringConvertible.description.getter(v72, v106);
  v108 = v84;
  v109 = v70;
  v110 = v223;
  *(_QWORD *)(v105 + 56) = &type metadata for String;
  *(_QWORD *)(v105 + 64) = v110;
  *(_QWORD *)(v105 + 32) = v107;
  *(_QWORD *)(v105 + 40) = v111;
  v112 = v220(v222, v221);
  v113 = UUID.uuidString.getter(v112);
  v114 = v98;
  v116 = v115;
  v226(v114, v225);
  *(_QWORD *)(v105 + 96) = &type metadata for String;
  *(_QWORD *)(v105 + 104) = v110;
  *(_QWORD *)(v105 + 72) = v113;
  *(_QWORD *)(v105 + 80) = v116;
  os_log(_:dso:log:_:_:)(v104, &_mh_execute_header, v215, "Fetch limit set to most recent key date %@ for beacon %@ ", 57, 2, v105);
  swift_bridgeObjectRelease();
  v117 = *(void (**)(char *, uint64_t))(v109 + 8);
  v117(v192, v72);
  v118 = v108;
LABEL_25:
  v159 = ((uint64_t (*)(char *, uint64_t))v117)(v118, v72);
  if (v219)
  {
    v160 = v202;
    v161 = objc_msgSend(v160, "timestamp");
    v162 = v203;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v161);

    LOBYTE(v161) = static Date.> infix(_:_:)(v162, v95);
    v117(v162, v72);
    if ((v161 & 1) != 0)
    {
      v163 = sub_10001AA44(v216, v216[3]);
      if ((sub_100C1B8D8(*v163) & 1) != 0)
      {
        v164 = objc_msgSend(v160, "timestamp");
        v165 = v203;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v164);

        v117(v95, v72);
        v166 = v212((uint64_t)v95, v165, v72);
        v167 = static os_log_type_t.default.getter(v166);
        v219 = (id)qword_1011B7DC0;
        v168 = swift_allocObject(v229, 112, 7);
        *(_OWORD *)(v168 + 16) = v228;
        v169 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v170 = dispatch thunk of CustomStringConvertible.description.getter(v72, v169);
        v172 = v223;
        v171 = v224;
        *(_QWORD *)(v168 + 56) = &type metadata for String;
        *(_QWORD *)(v168 + 64) = v172;
        *(_QWORD *)(v168 + 32) = v170;
        *(_QWORD *)(v168 + 40) = v173;
        v174 = v220(v222, v221);
        v175 = UUID.uuidString.getter(v174);
        v177 = v176;
        v226(v171, v225);
        *(_QWORD *)(v168 + 96) = &type metadata for String;
        *(_QWORD *)(v168 + 104) = v172;
        *(_QWORD *)(v168 + 72) = v175;
        *(_QWORD *)(v168 + 80) = v177;
        os_log(_:dso:log:_:_:)(v167, &_mh_execute_header, v219, "Fetch limit updated to last online location date %@ for beacon %@ ", 66, 2, v168);
        swift_bridgeObjectRelease();
        type metadata accessor for Transaction(0);
        static Transaction.asyncTask(name:block:)("FetchOptimisationAnalytics", 26, 2, &unk_101102340, 0);
      }
    }

  }
  v178 = static os_log_type_t.default.getter(v159);
  v179 = qword_1011B7DC0;
  v180 = swift_allocObject(v229, 112, 7);
  *(_OWORD *)(v180 + 16) = v228;
  v181 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v182 = dispatch thunk of CustomStringConvertible.description.getter(v72, v181);
  v184 = v223;
  v183 = v224;
  *(_QWORD *)(v180 + 56) = &type metadata for String;
  *(_QWORD *)(v180 + 64) = v184;
  *(_QWORD *)(v180 + 32) = v182;
  *(_QWORD *)(v180 + 40) = v185;
  v186 = v220(v222, v221);
  v187 = UUID.uuidString.getter(v186);
  v189 = v188;
  v226(v183, v225);
  *(_QWORD *)(v180 + 96) = &type metadata for String;
  *(_QWORD *)(v180 + 104) = v184;
  *(_QWORD *)(v180 + 72) = v187;
  *(_QWORD *)(v180 + 80) = v189;
  os_log(_:dso:log:_:_:)(v178, &_mh_execute_header, v179, "Adjusted location fetch start date %@ for beacon %@ ", 52, 2, v180);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v206 + 8))(v218, v207);
}

uint64_t sub_10064D88C(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  if ((a1 & 1) != 0)
    v2 = sub_100C1AE40(v5);
  else
    v2 = sub_100C1A848(v5);
  v3 = v2;
  swift_bridgeObjectRelease();
  if ((v3 & 0x8000000000000000) == 0)
    return v3;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

uint64_t sub_10064D97C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B73A0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B73A0);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x65736142656D6974, 0xED00007379654B64);
}

uint64_t TimeBasedKeySequence.description.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x61646E6F6365732ELL;
  else
    return 0x7972616D6972702ELL;
}

searchpartyd::TimeBasedKeySequence_optional __swiftcall TimeBasedKeySequence.init(rawValue:)(Swift::Int rawValue)
{
  searchpartyd::TimeBasedKeySequence_optional v1;

  if (rawValue == 2)
    v1.value = searchpartyd_TimeBasedKeySequence_secondary;
  else
    v1.value = searchpartyd_TimeBasedKeySequence_unknownDefault;
  if (rawValue == 1)
    return 0;
  else
    return v1;
}

uint64_t TimeBasedKeySequence.rawValue.getter(char a1)
{
  return (a1 & 1u) + 1;
}

Swift::Int sub_10064DA5C()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  if (v1)
    v2 = 2;
  else
    v2 = 1;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_10064DAA8()
{
  _BYTE *v0;
  Swift::UInt v1;

  if (*v0)
    v1 = 2;
  else
    v1 = 1;
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10064DADC()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  if (v1)
    v2 = 2;
  else
    v2 = 1;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

_QWORD *sub_10064DB24@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 2)
    v2 = 1;
  else
    v2 = 2;
  if (*result == 1)
    v3 = 0;
  else
    v3 = v2;
  *a2 = v3;
  return result;
}

void sub_10064DB44(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 1;
  if (*v1)
    v2 = 2;
  *a1 = v2;
}

uint64_t sub_10064DB5C()
{
  _BYTE *v0;

  if (*v0)
    return 0x61646E6F6365732ELL;
  else
    return 0x7972616D6972702ELL;
}

uint64_t sub_10064DB9C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  id v35;
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  _QWORD *v42;
  id v43;
  void *v44;
  id v45;
  unint64_t v46;
  unint64_t v47;
  id v48;
  void *v49;
  id v50;
  void *v51;
  uint64_t v52;
  id v53;
  unsigned __int8 v54;
  id v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;

  v4 = sub_10001A9A8(&qword_101102348);
  __chkstk_darwin(v4);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DateInterval(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v60 - v12;
  v14 = type metadata accessor for TimeBasedKeysCriteria(0);
  v64 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v62 = (uint64_t *)((char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  v63 = (char *)&v60 - v17;
  v18 = objc_msgSend(a1, "dateInterval");
  if (v18)
  {
    v19 = v18;
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)(v18);

    v20 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v20(v6, v11, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {

      v20(v13, v6, v7);
      v21 = v63;
      v20(v63, v13, v7);
      v22 = v21;
      v23 = v14;
      v24 = 0;
LABEL_34:
      swift_storeEnumTagMultiPayload(v22, v23, v24);
LABEL_41:
      v59 = v64;
      sub_10064FAD0((uint64_t)v21, a2);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v59 + 56))(a2, 0, 1, v14);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  sub_100004048((uint64_t)v6, &qword_101102348);
  v25 = objc_msgSend(a1, "sequence");
  if (v25)
  {
    v26 = v25;
    v27 = objc_msgSend(a1, "index");
    if (v27)
    {
      v28 = v27;
      v29 = objc_msgSend(a1, "hint");
      if (v29)
      {
        v30 = v29;
        v31 = objc_msgSend(v26, "integerValue");
        if (v31 == (id)1)
        {
          v32 = v14;
          v33 = a2;
          v34 = 0;
        }
        else
        {
          if (v31 != (id)2)
          {

            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56))(a2, 1, 1, v14);
          }
          v32 = v14;
          v33 = a2;
          v34 = 1;
        }
        v55 = objc_msgSend(v28, "unsignedLongLongValue");
        v56 = objc_msgSend(v30, "unsignedCharValue");

        v21 = v63;
        *v63 = v34;
        *((_QWORD *)v21 + 1) = v55;
        v21[16] = v56;
        v14 = v32;
        swift_storeEnumTagMultiPayload(v21, v32, 3);
        a2 = v33;
        goto LABEL_41;
      }

    }
    else
    {
      v28 = v26;
    }

  }
  v35 = objc_msgSend(a1, "indices");
  if (!v35)
  {
    v48 = objc_msgSend(a1, "index");
    if (v48)
    {
      v49 = v48;
      v50 = objc_msgSend(a1, "hint");
      if (v50)
      {
        v51 = v50;
        v52 = v14;
        v53 = objc_msgSend(v49, "unsignedLongLongValue");
        v54 = objc_msgSend(v51, "unsignedCharValue");

        v21 = v63;
        *(_QWORD *)v63 = v53;
        v14 = v52;
        v21[8] = v54;
        v22 = v21;
        v23 = v52;
        v24 = 2;
        goto LABEL_34;
      }

    }
    v21 = v63;
    v22 = v63;
    v23 = v14;
    v24 = 4;
    goto LABEL_34;
  }
  v36 = v35;
  v37 = sub_10024AFCC();
  v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v36, v37);

  if (!((unint64_t)v38 >> 62))
  {
    v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v39)
      goto LABEL_17;
LABEL_39:
    swift_bridgeObjectRelease();

    v42 = _swiftEmptyArrayStorage;
LABEL_40:
    v58 = (uint64_t)v62;
    *v62 = v42;
    swift_storeEnumTagMultiPayload(v58, v14, 1);
    v21 = v63;
    sub_10064FAD0(v58, (uint64_t)v63);
    goto LABEL_41;
  }
  if (v38 < 0)
    v57 = v38;
  else
    v57 = v38 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v38);
  v39 = _CocoaArrayWrapper.endIndex.getter(v57);
  swift_bridgeObjectRelease();
  if (!v39)
    goto LABEL_39;
LABEL_17:
  v60 = v14;
  v61 = a2;
  v65 = _swiftEmptyArrayStorage;
  result = sub_10009A32C(0, v39 & ~(v39 >> 63), 0);
  if ((v39 & 0x8000000000000000) == 0)
  {
    v41 = 0;
    v42 = v65;
    do
    {
      if ((v38 & 0xC000000000000001) != 0)
        v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41, v38);
      else
        v43 = *(id *)(v38 + 8 * v41 + 32);
      v44 = v43;
      v45 = objc_msgSend(v43, "unsignedLongLongValue");

      v65 = v42;
      v47 = v42[2];
      v46 = v42[3];
      if (v47 >= v46 >> 1)
      {
        sub_10009A32C(v46 > 1, v47 + 1, 1);
        v42 = v65;
      }
      ++v41;
      v42[2] = v47 + 1;
      v42[v47 + 4] = v45;
    }
    while (v39 != v41);
    swift_bridgeObjectRelease();

    v14 = v60;
    a2 = v61;
    goto LABEL_40;
  }
  __break(1u);
  return result;
}

void TimeBasedKeysCriteria.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for DateInterval(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for TimeBasedKeysCriteria(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10064E58C(v0, (uint64_t)v4);
  v5 = (char *)sub_10064E21C + 4 * byte_100E46790[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_10064E21C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
  *(_QWORD *)(v4 - 64) = 0;
  *(_QWORD *)(v4 - 56) = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)(v4 - 64), ".dateInterval(");
  *(_BYTE *)(v4 - 49) = -18;
  v5 = sub_100006204(&qword_1010F2168, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v5);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8 = *(_QWORD *)(v4 - 64);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  return v8;
}

uint64_t type metadata accessor for TimeBasedKeysCriteria(uint64_t a1)
{
  uint64_t result;

  result = qword_101102300;
  if (!qword_101102300)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TimeBasedKeysCriteria);
  return result;
}

uint64_t sub_10064E58C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimeBasedKeysCriteria(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10064E5D4()
{
  unint64_t result;

  result = qword_101102288;
  if (!qword_101102288)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for TimeBasedKeySequence, &type metadata for TimeBasedKeySequence);
    atomic_store(result, (unint64_t *)&qword_101102288);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TimeBasedKeySequence(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10064E668 + 4 * byte_100E4679A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10064E69C + 4 * byte_100E46795[v4]))();
}

uint64_t sub_10064E69C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10064E6A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10064E6ACLL);
  return result;
}

uint64_t sub_10064E6B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10064E6C0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10064E6C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10064E6CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TimeBasedKeySequence()
{
  return &type metadata for TimeBasedKeySequence;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeBasedKeysCriteria(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v10);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v11 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v11);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = type metadata accessor for DateInterval(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t destroy for TimeBasedKeysCriteria(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
    return swift_bridgeObjectRelease(*a1);
  if (!(_DWORD)result)
  {
    v4 = type metadata accessor for DateInterval(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

uint64_t *initializeWithCopy for TimeBasedKeysCriteria(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v8 = *a2;
    *a1 = *a2;
    swift_bridgeObjectRetain(v8);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for DateInterval(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

uint64_t *assignWithCopy for TimeBasedKeysCriteria(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_10064E990((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v8 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v8);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for DateInterval(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_10064E990(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TimeBasedKeysCriteria(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for TimeBasedKeysCriteria(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for DateInterval(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

void *assignWithTake for TimeBasedKeysCriteria(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_10064E990((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for DateInterval(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_10064EAEC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for DateInterval(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = "\t";
    v4[3] = &unk_100E468F0;
    swift_initEnumMetadataMultiPayload(a1, 256, 4, v4);
    return 0;
  }
  return result;
}

uint64_t sub_10064EB70()
{
  return swift_task_switch(sub_10064EB84, 0, 0);
}

uint64_t sub_10064EB84()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);

  v1 = type metadata accessor for AnalyticsEvent(0);
  v2 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  *(_QWORD *)(v0 + 16) = v2;
  swift_defaultActor_initialize(v2);
  v3 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v2 + 14) = v3;
  UUID.init()(v3);
  v4 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v5 = type metadata accessor for DispatchTime(0);
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v6(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v5);
  *((_QWORD *)v2 + 15) = 0xD00000000000003FLL;
  *((_QWORD *)v2 + 16) = 0x8000000100EDDA70;
  return swift_task_switch(sub_10064EC78, v2, 0);
}

uint64_t sub_10064EC78()
{
  uint64_t v0;

  sub_100CC1808(*(_QWORD *)(v0 + 16));
  return swift_task_switch(sub_10064ECD8, 0, 0);
}

uint64_t sub_10064ECD8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[3] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[4] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_10064ED44;
  return sub_100CD63AC(v0[2]);
}

uint64_t sub_10064ED44()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  swift_release();
  return swift_task_switch(sub_10064EDA0, 0, 0);
}

uint64_t sub_10064EDA0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10064EDD0(uint64_t a1, char a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  v20 = a4;
  v21 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a6 + 8) + 8) + 32))(a5);
  (*(void (**)(uint64_t, uint64_t))(a6 + 184))(a5, a6);
  if (a2)
  {
    v17 = 0;
    if (a2 != 1)
    {
LABEL_9:
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v21);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return v17;
    }
    v18 = 1;
    if (a3)
      a3 = a3 / 0x60 + 1;
    else
      a3 = 0;
  }
  else
  {
    v18 = 0;
  }
  result = sub_10064F0F8((uint64_t)v16, (uint64_t)v12, v20, v18);
  if (((result | a3) & 0x8000000000000000) == 0)
  {
    v17 = result - a3;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_10064EF44(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v23 = a3;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(v13);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, a5);
  if (!a4)
  {
    v19 = 0;
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a6 + 8) + 8) + 32))(a5);
    v20 = sub_10064F0F8((uint64_t)v15, a2, v23, v19);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, a5);
    return v20;
  }
  if (a4 == 1)
  {
    v19 = 1;
    goto LABEL_5;
  }
  v24 = 0;
  v25 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000038, 0x8000000100ED4190, "searchpartyd/TimeBasedKeys.swift", 32, 2, 146, 0);
  __break(1u);
  return result;
}

uint64_t sub_10064F0F8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  double v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t result;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[3];
  _QWORD v75[3];

  v66 = a1;
  v6 = a4 & 1;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v67 = v7;
  v68 = v8;
  __chkstk_darwin(v7);
  v69 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v70 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v61 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v61 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v61 - v20;
  v65 = v6;
  v22 = sub_10064D88C(v6);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v23 = sub_100C1A848(v74[0]);
  v24 = swift_bridgeObjectRelease();
  if (v23 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
    return result;
  }
  Date.timeIntervalSinceReferenceDate.getter(v24);
  Date.init(timeIntervalSinceReferenceDate:)(v25);
  v26 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v27 = dispatch thunk of static Comparable.>= infix(_:_:)(a2, a3, v10, v26);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
  if ((v27 & 1) != 0)
    v29 = a2;
  else
    v29 = a3;
  v28(v19, v29, v10);
  v30 = Date.timeIntervalSince(_:)(v21) / ((double)(unint64_t)v22 * 60.0);
  if ((~*(_QWORD *)&v30 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v30 <= -1.0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v30 >= 1.84467441e19)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((unint64_t)v30 == -1)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v75[0] = (unint64_t)v30 + 1;
  if (qword_1010E9DF0 != -1)
LABEL_26:
    swift_once(&qword_1010E9DF0, sub_10064D97C);
  v31 = type metadata accessor for Logger(0);
  sub_10001A9E8(v31, (uint64_t)qword_1011B73A0);
  v28(v16, a2, v10);
  v32 = v13;
  v28(v13, a3, v10);
  v34 = v68;
  v33 = v69;
  v35 = v67;
  v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 16))(v69, v66, v67);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.info.getter(v37);
  v39 = v38;
  if (os_log_type_enabled(v37, v38))
  {
    v40 = swift_slowAlloc(62, -1);
    v62 = v32;
    v41 = v40;
    v66 = swift_slowAlloc(128, -1);
    v74[0] = v66;
    *(_DWORD *)v41 = 136447491;
    v42 = v65 == 0;
    if (v65)
      v43 = 0x61646E6F6365732ELL;
    else
      v43 = 0x7972616D6972702ELL;
    v65 = v39;
    if (v42)
      v44 = 0xE800000000000000;
    else
      v44 = 0xEA00000000007972;
    v72 = sub_100016940(v43, v44, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v41 + 12) = 2048;
    swift_beginAccess(v75, &v72, 0, 0);
    v71 = v75[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v41 + 14, v41 + 22);
    *(_WORD *)(v41 + 22) = 2082;
    v64 = v21;
    v45 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v63 = v19;
    v46 = v45;
    v47 = dispatch thunk of CustomStringConvertible.description.getter(v10, v45);
    v71 = sub_100016940(v47, v48, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v41 + 24, v41 + 32);
    swift_bridgeObjectRelease();
    v49 = v35;
    v50 = *(void (**)(char *, uint64_t))(v70 + 8);
    v50(v16, v10);
    *(_WORD *)(v41 + 32) = 2082;
    v51 = v62;
    v52 = dispatch thunk of CustomStringConvertible.description.getter(v10, v46);
    v71 = sub_100016940(v52, v53, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v41 + 34, v41 + 42);
    swift_bridgeObjectRelease();
    v50(v51, v10);
    *(_WORD *)(v41 + 42) = 2160;
    v71 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v41 + 44, v41 + 52);
    *(_WORD *)(v41 + 52) = 2081;
    v54 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v55 = v69;
    v56 = dispatch thunk of CustomStringConvertible.description.getter(v49, v54);
    v71 = sub_100016940(v56, v57, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v41 + 54, v41 + 62);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v55, v49);
    _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v65, "Bucket [%{public}s] calculated to ‣%llu baseTime: %{public}s date: %{public}s  beacon: %{private,mask.hash}s.", (uint8_t *)v41, 0x3Eu);
    v58 = v66;
    swift_arrayDestroy(v66, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v41, -1, -1);

    v50(v63, v10);
    v50(v64, v10);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v34 + 8))(v33, v35);
    v59 = *(void (**)(char *, uint64_t))(v70 + 8);
    v59(v32, v10);
    v59(v16, v10);
    v59(v19, v10);
    v59(v21, v10);
  }
  swift_beginAccess(v75, v74, 0, 0);
  return v75[0];
}

unint64_t sub_10064F7BC(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  double v20;
  unint64_t v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t result;
  _BYTE v30[12];
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v31 = a4;
  v7 = type metadata accessor for UUID(0);
  v32 = *(_QWORD *)(v7 - 8);
  v33 = v7;
  __chkstk_darwin(v7);
  v9 = &v30[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v30[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = a1[3];
  v15 = a1[4];
  sub_10001AA44(a1, v14);
  v16 = 0.0;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v15 + 112))(v14, v15) & 1) != 0)
  {
    v17 = type metadata accessor for KeySyncRecord(0);
    v18 = Date.timeIntervalSince(_:)(a2 + *(int *)(v17 + 28));
    if (v18 > 0.0)
      v16 = v18 * 0.0002;
    else
      v16 = 0.0;
  }
  v19 = type metadata accessor for KeySyncRecord(0);
  v20 = Date.timeIntervalSince(_:)(a2 + *(int *)(v19 + 28));
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v21 = sub_100C1A848(v34);
  swift_bridgeObjectRelease();
  if ((v21 & 0x8000000000000000) != 0)
    goto LABEL_25;
  if (!is_mul_ok(v21, 0x3CuLL))
  {
    __break(1u);
    goto LABEL_18;
  }
  v22 = v20 / (double)(60 * v21);
  if ((~*(_QWORD *)&v22 & 0x7FF0000000000000) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v22 <= -1.0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v22 >= 1.84467441e19)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v23 = *(_QWORD *)(a2 + *(int *)(v19 + 20));
  v24 = v23 + (unint64_t)v22;
  if (__CFADD__(v23, (unint64_t)v22))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v25 = v31 & 1;
  Date.addingTimeInterval(_:)(v16);
  v27 = a1[3];
  v26 = a1[4];
  sub_10001AA44(a1, v27);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v26 + 8) + 8) + 32))(v27);
  v28 = sub_10064F0F8((uint64_t)v9, (uint64_t)v13, a3, v25);
  (*(void (**)(_BYTE *, uint64_t))(v32 + 8))(v9, v33);
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  result = v24 - v28;
  if (v24 < v28)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (__CFADD__(v24, v28))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v24 + v28 < result)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_10064FAD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimeBasedKeysCriteria(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10064FB18()
{
  double *v0;
  uint64_t v1;
  double *v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;

  if (*((_QWORD *)v0 + 6))
  {
    v1 = *((_QWORD *)v0 + 6);
  }
  else
  {
    v2 = v0;
    v3 = v0[3];
    v4 = v0[4];
    v5 = swift_allocObject(&unk_101084058, 24, 7);
    swift_weakInit(v5 + 16, v0);
    v6 = type metadata accessor for XPCScheduler();
    swift_allocObject(v6, 80, 7);
    v1 = sub_1004E52A0(0xD000000000000013, 0x8000000100EDDC10, (uint64_t)sub_100650C00, v5, v3, v4, 1.0);
    swift_release();
    *((_QWORD *)v2 + 6) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_10064FBF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    sub_10064FF3C();
    return swift_release();
  }
  return result;
}

uint64_t sub_10064FC4C(uint64_t a1)
{
  uint64_t v1;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v10;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B438(v10);
  v4 = v3;
  swift_bridgeObjectRelease();
  *(double *)(v1 + 24) = v4 * 60.0;
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B444(v10);
  v6 = v5;
  swift_bridgeObjectRelease();
  *(double *)(v1 + 32) = v6 * 60.0;
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_10001ED68(v10);
  v8 = v7;
  swift_bridgeObjectRelease();
  *(double *)(v1 + 40) = v8 * 60.0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t sub_10064FD8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;

  v0 = sub_10064FB18();
  v1 = sub_1004E4A00();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100139464, v1, *(_QWORD *)(v1 + 40), &type metadata for () + 1, &type metadata for () + 1);
  v2 = swift_release();
  v3 = static os_log_type_t.default.getter(v2);
  if (qword_1010EA2B8 != -1)
    swift_once(&qword_1010EA2B8, sub_100B5DE78);
  v4 = qword_1011B7D98;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
  swift_retain();
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v0 + 16);
  v8 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain(v8);
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 62;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  swift_release();
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 64) = sub_10001AA00();
  *(_QWORD *)(v6 + 32) = 0x656863534350583CLL;
  *(_QWORD *)(v6 + 40) = 0xEF203A72656C7564;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "Scheduling timer: %{public}@", 28, 2, v6);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10064FF3C()
{
  double *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  NSString v49;
  id v50;
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  BOOL v62;
  int v63;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double *v77;
  double v78;
  char *v79;
  uint64_t (*v80)(uint64_t);
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD aBlock[5];
  uint64_t v96;
  __int128 v97;
  _QWORD v98[5];

  v1 = type metadata accessor for WildModeAssociationRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v77 = (double *)((char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __chkstk_darwin(v3);
  v79 = (char *)&v73 - v6;
  v7 = __chkstk_darwin(v5);
  v84 = (uint64_t)&v73 - v8;
  __chkstk_darwin(v7);
  v10 = (uint64_t (*)(uint64_t))((char *)&v73 - v9);
  v90 = (_QWORD *)type metadata accessor for UnwantedTrackingUserNotification(0);
  __chkstk_darwin(v90);
  v12 = (uint64_t)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for URL(0);
  v88 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v87 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  *(_QWORD *)&v17 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA198 != -1)
    goto LABEL_48;
  while (1)
  {
    sub_100ACDAE0(0xD000000000000012, 0x8000000100EDDB40, (void *)qword_1011B7C08);
    if ((v19 & 1) != 0)
      v20 = v0[5];
    else
      v20 = (double)v18;
    v80 = v10;
    v21 = static Date.trustedNow.getter(*(uint64_t *)&v17);
    v22 = static os_log_type_t.info.getter(v21);
    if (qword_1010EA2F8 != -1)
      swift_once(&qword_1010EA2F8, sub_100B5E19C);
    v23 = qword_1011B7DD8;
    v86 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v24 = swift_allocObject(v86, 72, 7);
    v85 = xmmword_100E22B00;
    *(_OWORD *)(v24 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v24 + 56) = &type metadata for Double;
    *(_QWORD *)(v24 + 64) = &protocol witness table for Double;
    *(double *)(v24 + 32) = v20;
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "schedulerFired purgeAge: %f [seconds]", v73);
    swift_bridgeObjectRelease();
    v91 = *((_QWORD *)v0 + 2);
    v25 = sub_10081BF2C();
    __chkstk_darwin(v25);
    *(&v73 - 2) = v17;
    *(&v73 - 1) = v20;
    v27 = sub_10001CED8((uint64_t (*)(char *))sub_100650B40, (unint64_t *)&v73 - 4, v26);
    v28 = *(_QWORD *)(v27 + 16);
    if (!v28)
      break;
    v73 = v17;
    v74 = v15;
    v75 = v14;
    v78 = *(double *)&v1;
    v81 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    v29 = v27 + v81;
    v94 = *(_QWORD *)(v2 + 72);
    v92 = v27;
    swift_bridgeObjectRetain(v27);
    v83 = 0x8000000100EC5BC0;
    v82 = 0x8000000100EC5B70;
    v76 = v29;
    v93 = v28;
    v2 = v28;
    v31 = &unk_1011B7000;
    do
    {
      v32 = (_BYTE *)v12;
      v33 = static os_log_type_t.default.getter(v30);
      v34 = v31[443];
      v35 = swift_allocObject(v86, 72, 7);
      *(_OWORD *)(v35 + 16) = v85;
      v36 = UUID.uuidString.getter(v35);
      v38 = v37;
      *(_QWORD *)(v35 + 56) = &type metadata for String;
      *(_QWORD *)(v35 + 64) = sub_10001AA00();
      *(_QWORD *)(v35 + 32) = v36;
      *(_QWORD *)(v35 + 40) = v38;
      os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Purge UT record and withdraw notification with uuid %@", 54, 2, v35);
      swift_bridgeObjectRelease();
      v39 = *(_QWORD *)(v91 + 160);
      if (qword_1010E99F8 != -1)
        swift_once(&qword_1010E99F8, sub_1001D7F04);
      v40 = v89;
      v41 = sub_10001A9E8(v89, (uint64_t)qword_1011B6A48);
      v42 = v88;
      v43 = v87;
      v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v88 + 16))(v87, v41, v40);
      __chkstk_darwin(v44);
      *((_QWORD *)&v73 - 4) = v39;
      *((_QWORD *)&v73 - 3) = v29;
      *((_QWORD *)&v73 - 2) = v43;
      OS_dispatch_queue.sync<A>(execute:)(sub_100143FA8, &v73 - 6, &type metadata for Bool);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v40);
      v45 = v90;
      v12 = (uint64_t)v32;
      sub_10005972C(v29, (uint64_t)&v32[*((int *)v90 + 5)], type metadata accessor for WildModeAssociationRecord);
      *v32 = 2;
      v32[*((int *)v45 + 6)] = 66;
      v46 = v94;
      if (qword_1010EA140 != -1)
        swift_once(&qword_1010EA140, sub_100A3A528);
      v98[3] = v45;
      v98[4] = &off_10105AD10;
      v47 = sub_100018F08(v98);
      sub_10005972C((uint64_t)v32, (uint64_t)v47, type metadata accessor for UnwantedTrackingUserNotification);
      v48 = objc_allocWithZone((Class)UNUserNotificationCenter);
      v49 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v50 = objc_msgSend(v48, "initWithBundleIdentifier:", v49);

      sub_100030784((uint64_t)v98, (uint64_t)&v97);
      v51 = swift_allocObject(&unk_101084008, 64, 7);
      sub_10000F9FC(&v97, v51 + 16);
      *(_QWORD *)(v51 + 56) = v50;
      aBlock[4] = sub_100650B8C;
      v96 = v51;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100BFAAE8;
      aBlock[3] = &unk_101084020;
      v52 = _Block_copy(aBlock);
      v14 = v96;
      v53 = v50;
      swift_release();
      objc_msgSend(v53, "getDeliveredNotificationsWithCompletionHandler:", v52);
      _Block_release(v52);

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v98);
      v30 = sub_1000126B0((uint64_t)v32, type metadata accessor for UnwantedTrackingUserNotification);
      v29 += v46;
      --v2;
      v31 = (_QWORD *)&unk_1011B7000;
    }
    while (v2);
    v15 = v92;
    swift_bridgeObjectRelease();
    v0 = (double *)_swiftEmptyArrayStorage;
    aBlock[0] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v15);
    v10 = type metadata accessor for WildModeAssociationRecord;
    v12 = 250;
    v54 = v76;
    v1 = v76;
    v90 = _swiftEmptyArrayStorage;
    v17 = v78;
    v55 = (uint64_t)v80;
    do
    {
      if (v2 >= *(_QWORD *)(v15 + 16))
      {
        __break(1u);
        goto LABEL_47;
      }
      sub_10005972C(v1, v55, type metadata accessor for WildModeAssociationRecord);
      v56 = *(unsigned __int8 *)(v55 + *(int *)(*(_QWORD *)&v17 + 64));
      if (v56 == 8 || (v56 & 0xFA) == 0)
      {
        sub_1000126B0(v55, type metadata accessor for WildModeAssociationRecord);
        v14 = v94;
      }
      else
      {
        sub_100650B98(v55, v84);
        if ((swift_isUniquelyReferenced_nonNull_native(v0) & 1) == 0)
          sub_10009AEA4(0, *((_QWORD *)v0 + 2) + 1, 1);
        v0 = (double *)aBlock[0];
        v59 = *(_QWORD *)(aBlock[0] + 16);
        v58 = *(_QWORD *)(aBlock[0] + 24);
        if (v59 >= v58 >> 1)
        {
          sub_10009AEA4(v58 > 1, v59 + 1, 1);
          v0 = (double *)aBlock[0];
        }
        *((_QWORD *)v0 + 2) = v59 + 1;
        v14 = v94;
        sub_100650B98(v84, (uint64_t)v0 + v81 + v59 * v94);
        v55 = (uint64_t)v80;
        v15 = v92;
      }
      ++v2;
      v1 += v14;
    }
    while (v93 != v2);
    swift_bridgeObjectRelease();
    v2 = *(_QWORD *)(aBlock[0] + 16);
    swift_release();
    v60 = 0;
    aBlock[0] = _swiftEmptyArrayStorage;
    v10 = type metadata accessor for WildModeAssociationRecord;
    v12 = 1;
    v15 = 379;
    v0 = v77;
    v1 = (uint64_t)v79;
    while (v60 < *(_QWORD *)(v92 + 16))
    {
      sub_10005972C(v54, v1, type metadata accessor for WildModeAssociationRecord);
      v61 = *(unsigned __int8 *)(v1 + *(int *)(*(_QWORD *)&v17 + 64));
      v62 = v61 > 8;
      v63 = (1 << v61) & 0x17B;
      if (v62 || v63 == 0)
      {
        sub_100650B98(v1, (uint64_t)v0);
        v65 = v90;
        if ((swift_isUniquelyReferenced_nonNull_native(v90) & 1) == 0)
        {
          sub_10009AEA4(0, v65[2] + 1, 1);
          v0 = v77;
        }
        v66 = (_QWORD *)aBlock[0];
        v68 = *(_QWORD *)(aBlock[0] + 16);
        v67 = *(_QWORD *)(aBlock[0] + 24);
        if (v68 >= v67 >> 1)
        {
          sub_10009AEA4(v67 > 1, v68 + 1, 1);
          v0 = v77;
          v66 = (_QWORD *)aBlock[0];
        }
        v66[2] = v68 + 1;
        v90 = v66;
        sub_100650B98((uint64_t)v0, (uint64_t)v66 + v81 + v68 * v94);
        v17 = v78;
        v1 = (uint64_t)v79;
      }
      else
      {
        sub_1000126B0(v1, type metadata accessor for WildModeAssociationRecord);
      }
      ++v60;
      v54 += v94;
      if (v93 == v60)
      {
        swift_bridgeObjectRelease();
        v69 = *(_QWORD *)(aBlock[0] + 16);
        swift_release();
        if (v2)
          sub_1007F4EB8();
        v14 = v75;
        v15 = v74;
        v17 = v73;
        if (v69)
          sub_1007F77E0();
        return (*(uint64_t (**)(double, uint64_t))(v15 + 8))(COERCE_DOUBLE(*(_QWORD *)&v17), v14);
      }
    }
LABEL_47:
    __break(1u);
LABEL_48:
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  }
  v70 = swift_bridgeObjectRelease();
  v71 = static os_log_type_t.info.getter(v70);
  os_log(_:dso:log:_:_:)(v71, &_mh_execute_header, qword_1011B7DD8, "No records to purge", 19, 2, _swiftEmptyArrayStorage);
  return (*(uint64_t (**)(double, uint64_t))(v15 + 8))(COERCE_DOUBLE(*(_QWORD *)&v17), v14);
}

uint64_t sub_10065097C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v19;

  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v19 - v14;
  v16 = type metadata accessor for WildModeAssociationRecord(0);
  sub_10001F674(a1 + *(int *)(v16 + 44), (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10001F6BC((uint64_t)v8);
    Date.addingTimeInterval(_:)(a3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
    v13 = v15;
  }
  v17 = static Date.< infix(_:_:)(v13, a2);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return v17 & 1;
}

uint64_t sub_100650AF4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for WildModeAssociationManager()
{
  return objc_opt_self(_TtC12searchpartyd26WildModeAssociationManager);
}

uint64_t sub_100650B40(uint64_t a1)
{
  uint64_t v1;

  return sub_10065097C(a1, *(_QWORD *)(v1 + 16), *(double *)(v1 + 24)) & 1;
}

uint64_t sub_100650B60()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 64, 7);
}

void sub_100650B8C(unint64_t a1)
{
  uint64_t v1;

  sub_100A3A944(a1, v1 + 16, *(void **)(v1 + 56));
}

uint64_t sub_100650B98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WildModeAssociationRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100650BDC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100650C00()
{
  uint64_t v0;

  return sub_10064FBF8(v0);
}

unint64_t sub_100650C08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v41;
  _OWORD v42[2];
  __int128 v43;
  void *v44;
  unint64_t v45;

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v2);
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1006B8B10((uint64_t)_swiftEmptyArrayStorage);
  v45 = v5;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPRemoteUILostModeOwnerEmailKey);
  v8 = v7;
  v9 = (int *)type metadata accessor for LostModeAlertInfo(0);
  v10 = (uint64_t *)(v1 + v9[5]);
  v11 = v10[1];
  if (v11)
  {
    v12 = *v10;
    v44 = &type metadata for String;
    *(_QWORD *)&v43 = v12;
    *((_QWORD *)&v43 + 1) = v11;
    sub_10010F90C(&v43, v42);
    swift_bridgeObjectRetain(v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
    v41 = v5;
    v45 = 0x8000000000000000;
    sub_10010A7E4(v42, v6, v8, isUniquelyReferenced_nonNull_native);
    v45 = v41;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100103238(v6, v8, &v43);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)&v43, (uint64_t *)&unk_1010F6390);
  }
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPRemoteUILostModeOwnerPhoneKey);
  v16 = v14;
  v17 = v15;
  v18 = (uint64_t *)(v1 + v9[6]);
  v19 = v18[1];
  if (v19)
  {
    v20 = *v18;
    v44 = &type metadata for String;
    *(_QWORD *)&v43 = v20;
    *((_QWORD *)&v43 + 1) = v19;
    sub_10010F90C(&v43, v42);
    swift_bridgeObjectRetain(v19);
    v21 = v45;
    v22 = swift_isUniquelyReferenced_nonNull_native(v45);
    v41 = v21;
    v45 = 0x8000000000000000;
    sub_10010A7E4(v42, v16, v17, v22);
    v45 = v41;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100103238(v14, v15, &v43);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)&v43, (uint64_t *)&unk_1010F6390);
  }
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPRemoteUILostModeAssetURLKey);
  v25 = v24;
  sub_100027D68(v1, (uint64_t)v4);
  v26 = type metadata accessor for URL(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v4, 1, v26);
  if ((_DWORD)v28 == 1)
  {
    sub_100004048((uint64_t)v4, &qword_1010FBA40);
    sub_100103238(v23, v25, &v43);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)&v43, (uint64_t *)&unk_1010F6390);
  }
  else
  {
    v29 = URL.absoluteString.getter(v28);
    v44 = &type metadata for String;
    *(_QWORD *)&v43 = v29;
    *((_QWORD *)&v43 + 1) = v30;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v26);
    sub_10010F90C(&v43, v42);
    v31 = v45;
    v32 = swift_isUniquelyReferenced_nonNull_native(v45);
    v41 = v31;
    v45 = 0x8000000000000000;
    sub_10010A7E4(v42, v23, v25, v32);
    v45 = v41;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_BYTE *)(v1 + v9[7]) == 1)
  {
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPRemoteUILostModeDeviceTypeKey);
    v35 = v34;
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPRemoteUILostModeDeviceTypePencil);
    v44 = &type metadata for String;
    *(_QWORD *)&v43 = v36;
    *((_QWORD *)&v43 + 1) = v37;
    sub_10010F90C(&v43, v42);
    v38 = v45;
    v39 = swift_isUniquelyReferenced_nonNull_native(v45);
    v41 = v38;
    v45 = 0x8000000000000000;
    sub_10010A7E4(v42, v33, v35, v39);
    v45 = v41;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v45;
}

uint64_t *AirPodsLESendPairingStatusCommandPayload.expectedLength.unsafeMutableAddressor()
{
  return &static AirPodsLESendPairingStatusCommandPayload.expectedLength;
}

uint64_t static AirPodsLESendPairingStatusCommandPayload.expectedLength.getter()
{
  _BYTE v1[24];

  swift_beginAccess(&static AirPodsLESendPairingStatusCommandPayload.expectedLength, v1, 0, 0);
  return static AirPodsLESendPairingStatusCommandPayload.expectedLength;
}

uint64_t static AirPodsLESendPairingStatusCommandPayload.expectedLength.setter(uint64_t a1)
{
  uint64_t result;
  _BYTE v3[24];

  result = swift_beginAccess(&static AirPodsLESendPairingStatusCommandPayload.expectedLength, v3, 1, 0);
  static AirPodsLESendPairingStatusCommandPayload.expectedLength = a1;
  return result;
}

uint64_t (*static AirPodsLESendPairingStatusCommandPayload.expectedLength.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&static AirPodsLESendPairingStatusCommandPayload.expectedLength, a1, 33, 0);
  return j__swift_endAccess_0;
}

double AirPodsLESendPairingStatusCommandPayload.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_1006511C8(a1, v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1006510E4(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_1006510F0 + *((int *)qword_1006511A8 + (a2 >> 62))))();
}

uint64_t sub_100651100(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (BYTE6(a2) != 60)
  {
    __break(1u);
    JUMPOUT(0x1006511A4);
  }
  return ((uint64_t (*)(void))((char *)&loc_10065113C + *((int *)qword_1006511B8 + (a4 >> 62))))();
}

uint64_t sub_1006511C8@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v28, v5, v6);
  v7 = v29;
  v8 = v30;
  sub_10009F5D0((uint64_t)v28, v29);
  v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(60, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = v9;
    v12 = v10;
    v13 = v29;
    v14 = v30;
    sub_10009F5D0((uint64_t)v28, v29);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(4, v13, v14);
    v35 = v15;
    v17 = v29;
    v16 = v30;
    sub_10009F5D0((uint64_t)v28, v29);
    v26 = dispatch thunk of BinaryDecodingContaining.decode(length:)(100, v17, v16);
    v27 = v18;
    v19 = v29;
    v20 = v30;
    sub_10009F5D0((uint64_t)v28, v29);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v19, v20);
    sub_10001BBBC(v26, v27);
    v21 = sub_100035530();
    v22 = DataProtocol.intValue.getter(&type metadata for Data, v21);
    sub_1002F7C0C(v22, v26, v27);
    sub_10001BC14(v26, v27);
    sub_1006510E4(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    v24 = v32;
    *a2 = v31;
    a2[1] = v24;
    v25 = v34;
    a2[2] = v33;
    a2[3] = v25;
  }
  return result;
}

unint64_t sub_1006513CC(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1006513F8();
  result = sub_10065143C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1006513F8()
{
  unint64_t result;

  result = qword_101102448;
  if (!qword_101102448)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AirPodsLESendPairingStatusCommandPayload, &type metadata for AirPodsLESendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_101102448);
  }
  return result;
}

unint64_t sub_10065143C()
{
  unint64_t result;

  result = qword_101102450;
  if (!qword_101102450)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AirPodsLESendPairingStatusCommandPayload, &type metadata for AirPodsLESendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_101102450);
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLESendPairingStatusCommandPayload()
{
  return &type metadata for AirPodsLESendPairingStatusCommandPayload;
}

id sub_100651490()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = *(id *)(v0 + 16);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
    v4 = *(void **)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

uint64_t sub_1006514F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  unint64_t v80;
  __int128 v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  void *v99;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v2);
  v4 = (char *)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PairingLockCheckEndPoint(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v82 - v9;
  v11 = sub_10001A9A8(&qword_101102538);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v94 = Future.init()();
  v12 = static os_log_type_t.default.getter(v94);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v13 = qword_1011B7D88;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 64) = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = 0xD000000000000022;
  *(_QWORD *)(v15 + 40) = 0x8000000100EDDE60;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "%@", 2, 2, v15);
  swift_bridgeObjectRelease();
  sub_1002627C0((uint64_t)v10);
  v16 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v17 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v4, 1, 1, v17);
  v18 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v4);
  v19 = type metadata accessor for ServerInteractionController(0);
  v20 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  sub_10005972C((uint64_t)v10, (uint64_t)v8, type metadata accessor for PairingLockCheckEndPoint);
  v21 = (_QWORD *)sub_10041D7A0((uint64_t)v8, v18, v20);
  sub_1000126B0((uint64_t)v10, type metadata accessor for PairingLockCheckEndPoint);
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v25 = *(_QWORD *)(a1 + 16);
  v24 = *(_QWORD *)(a1 + 24);
  v26 = *(_QWORD *)(a1 + 40);
  v27 = *(_QWORD *)(a1 + 112);
  v28 = *(_QWORD *)(a1 + 120);
  v80 = *(_QWORD *)(a1 + 104);
  v79 = *(_QWORD *)(a1 + 96);
  v77 = *(_OWORD *)(a1 + 128);
  v29 = *(_QWORD *)a1;
  v93 = *(_QWORD *)(a1 + 32);
  v96 = sub_100C23E9C(v29, v23, v25, v24, v93, v26, v27, v28, v77, *((unint64_t *)&v77 + 1), v79, v80, 10);
  v97 = v30;
  v31 = sub_100651490();
  v32 = sub_100362120();

  if (v32 && (v95 = sub_100362238(), v35 = v34, v32, v35))
  {
    v82 = v21;
    v36 = Data.hexString.getter(v22, v23);
    v91 = v37;
    v92 = v36;
    v38 = Data.hexString.getter(v25, v24);
    v87 = v39;
    v88 = v38;
    v40 = *(_QWORD *)(a1 + 48);
    v89 = *(_QWORD *)(a1 + 56);
    v90 = v40;
    v41 = *(_QWORD *)(a1 + 64);
    v85 = *(_QWORD *)(a1 + 72);
    v42 = v85;
    v86 = v41;
    v44 = *(_QWORD *)(a1 + 88);
    v83 = *(_QWORD *)(a1 + 80);
    v43 = v83;
    v84 = v35;
    v45 = *(_QWORD *)(a1 + 144);
    v46 = *(_QWORD *)(a1 + 152);
    v47 = *(_QWORD *)(a1 + 160);
    v48 = *(_QWORD *)(a1 + 168);
    v49 = *(_QWORD *)(a1 + 176);
    v50 = *(_QWORD *)(a1 + 184);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v42);
    sub_10001BBBC(v43, v44);
    sub_10001BBBC(v45, v46);
    sub_10001BBBC(v47, v48);
    sub_10001BBBC(v49, v50);
    v52 = v96;
    v51 = v97;
    sub_10001BD08(v96, v97);
    *((_QWORD *)&v81 + 1) = v84;
    *(_QWORD *)&v81 = v95;
    *((_QWORD *)&v78 + 1) = v50;
    *((_QWORD *)&v76 + 1) = v48;
    *(_QWORD *)&v78 = v49;
    *((_QWORD *)&v75 + 1) = v46;
    *(_QWORD *)&v76 = v47;
    *((_QWORD *)&v74 + 1) = v44;
    *(_QWORD *)&v75 = v45;
    *(_QWORD *)&v74 = v83;
    *((_QWORD *)&v73 + 1) = v85;
    *(_QWORD *)&v73 = v86;
    sub_1008CDC9C(v92, v91, v88, v87, v93, v26, v90, v89, v73, v74, v75, v76, v78, v52, v51, v81);
    if (v53)
    {
      v56 = v53;
      v57 = v54;
      v58 = v55;
      sub_10034C030(v53, v54, v55, 0, v82);
      v59 = v94;
      swift_retain();
      Future.addFailure(block:)(sub_1006534BC, v59);
      swift_release();
      swift_release();
      swift_retain();
      Future.addSuccess(block:)(sub_1006534DC, v59);
      swift_release();
      swift_release();
      swift_release();
      sub_100153D94(v56, v57, v58);
      sub_10001EF3C(v96, v97);
    }
    else
    {
      v67 = static os_log_type_t.error.getter(0);
      os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, qword_1011B7D88, "Could not create pairing lock request", 37, 2, _swiftEmptyArrayStorage);
      type metadata accessor for SPPairingSessionError(0);
      v69 = v68;
      v98 = 1;
      v70 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v71 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
      _BridgedStoredNSError.init(_:userInfo:)(&v99, &v98, v70, v69, v71);
      v72 = v99;
      v59 = v94;
      Future.finish(error:)(v99);
      sub_10001EF3C(v96, v97);

    }
  }
  else
  {
    v60 = static os_log_type_t.error.getter(v33);
    os_log(_:dso:log:_:_:)(v60, &_mh_execute_header, qword_1011B7D88, "Unable to retrieve masked identifier", 36, 2, _swiftEmptyArrayStorage);
    type metadata accessor for SPPairingSessionError(0);
    v62 = v61;
    v98 = 1;
    v63 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v64 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&v99, &v98, v63, v62, v64);
    v65 = v99;
    v59 = v94;
    Future.finish(error:)(v99);
    sub_10001EF3C(v96, v97);

  }
  swift_release();
  return v59;
}

void sub_100651AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[5];
  uint64_t v63;

  v3 = type metadata accessor for JSONDecoder.DateDecodingStrategy(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v5);
  if (v8 == 200)
  {
    v61 = a2;
    v9 = static os_log_type_t.default.getter(200);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v10 = qword_1011B7D88;
    v60 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v11 = swift_allocObject(v60, 72, 7);
    v59 = xmmword_100E22B00;
    *(_OWORD *)(v11 + 16) = xmmword_100E22B00;
    v12 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
    v13 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
    v16 = v15;
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    *(_QWORD *)(v11 + 64) = sub_10001AA00();
    *(_QWORD *)(v11 + 32) = v14;
    *(_QWORD *)(v11 + 40) = v16;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Pairing success: %@", 19, 2, v11);
    swift_bridgeObjectRelease();
    v17 = type metadata accessor for JSONDecoder(0);
    v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    JSONDecoder.init()(v18);
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for JSONDecoder.DateDecodingStrategy.millisecondsSince1970(_:), v3);
    v19 = dispatch thunk of JSONDecoder.dateDecodingStrategy.setter(v7);
    v20 = FMNServerInteractionController.FMNResponseFields.data.getter(v19);
    v22 = v21;
    v23 = sub_1006534E4();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for PairingLockCheckResponse, v20, v22, &type metadata for PairingLockCheckResponse, v23);
    sub_10001BC14(v20, v22);
    v55 = v62[1];
    v56 = v62[2];
    v57 = v62[3];
    v58 = v62[4];
    Future.finish(result:)(v62);
    swift_release();
    sub_10001EF3C(v55, v56);
    sub_10001EF3C(v57, v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v8);
    if (*(_QWORD *)(v24 + 16) && (v25 = sub_100518DA0(0xD000000000000016, 0x8000000100EDDD90), (v26 & 1) != 0))
    {
      v27 = (uint64_t *)(*(_QWORD *)(v24 + 56) + 16 * v25);
      v29 = *v27;
      v28 = v27[1];
      swift_bridgeObjectRetain(v28);
      v30 = swift_bridgeObjectRelease();
      v31 = static os_log_type_t.error.getter(v30);
      if (qword_1010EA2A8 != -1)
        swift_once(&qword_1010EA2A8, sub_100B5DDB4);
      v32 = qword_1011B7D88;
      v33 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v34 = swift_allocObject(v33, 112, 7);
      *(_OWORD *)(v34 + 16) = xmmword_100E22B10;
      *(_QWORD *)(v34 + 56) = &type metadata for String;
      v35 = sub_10001AA00();
      *(_QWORD *)(v34 + 64) = v35;
      *(_QWORD *)(v34 + 32) = v29;
      *(_QWORD *)(v34 + 40) = v28;
      v36 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
      v37 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v38 = dispatch thunk of CustomStringConvertible.description.getter(v36, v37);
      *(_QWORD *)(v34 + 96) = &type metadata for String;
      *(_QWORD *)(v34 + 104) = v35;
      *(_QWORD *)(v34 + 72) = v38;
      *(_QWORD *)(v34 + 80) = v39;
      os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Pairing lock failed with error: %@, response: %@", 48, 2, v34);
    }
    else
    {
      v40 = swift_bridgeObjectRelease();
      v41 = static os_log_type_t.error.getter(v40);
      if (qword_1010EA2A8 != -1)
        swift_once(&qword_1010EA2A8, sub_100B5DDB4);
      v42 = qword_1011B7D88;
      v43 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v44 = swift_allocObject(v43, 72, 7);
      *(_OWORD *)(v44 + 16) = xmmword_100E22B00;
      v45 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
      v46 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v45, v46);
      v49 = v48;
      *(_QWORD *)(v44 + 56) = &type metadata for String;
      *(_QWORD *)(v44 + 64) = sub_10001AA00();
      *(_QWORD *)(v44 + 32) = v47;
      *(_QWORD *)(v44 + 40) = v49;
      os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v42, "Pairing lock failed: %@", 23, 2, v44);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for SPPairingSessionError(0);
    v51 = v50;
    v63 = 1;
    v52 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v53 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(v62, &v63, v52, v51, v53);
    v54 = (void *)v62[0];
    Future.finish(error:)(v62[0]);

  }
}

void sub_100652100(void *a1, uint64_t a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;

  v5 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v6 = qword_1011B7D88;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v8 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
  v19 = a1;
  swift_errorRetain(a1);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v10 = String.init<A>(describing:)(&v19, v9);
  v12 = v11;
  *(_QWORD *)(v8 + 56) = &type metadata for String;
  *(_QWORD *)(v8 + 64) = sub_10001AA00();
  *(_QWORD *)(v8 + 32) = v10;
  *(_QWORD *)(v8 + 40) = v12;
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, a3, 43, 2, v8);
  swift_bridgeObjectRelease();
  type metadata accessor for SPPairingSessionError(0);
  v14 = v13;
  v18 = 5;
  v15 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v16 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.init(_:userInfo:)(&v19, &v18, v15, v14, v16);
  v17 = v19;
  Future.finish(error:)(v19);

}

void sub_100652284(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v1 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(a1);
  if (v1 == 200)
  {
    v2 = static os_log_type_t.default.getter(200);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v3 = qword_1011B7D88;
    v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v5 = swift_allocObject(v4, 72, 7);
    *(_OWORD *)(v5 + 16) = xmmword_100E22B00;
    v6 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
    v7 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    v8 = dispatch thunk of CustomStringConvertible.description.getter(v6, v7);
    v10 = v9;
    *(_QWORD *)(v5 + 56) = &type metadata for String;
    v11 = sub_10001AA00();
    *(_QWORD *)(v5 + 64) = v11;
    *(_QWORD *)(v5 + 32) = v8;
    *(_QWORD *)(v5 + 40) = v10;
    os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "Ack pairing success: %@", 23, 2, v5);
    swift_bridgeObjectRelease();
    v12 = type metadata accessor for JSONDecoder(0);
    v13 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v14 = JSONDecoder.init()(v13);
    v15 = FMNServerInteractionController.FMNResponseFields.data.getter(v14);
    v17 = v16;
    v18 = sub_100653478();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for PairingLockAckResponse, v15, v17, &type metadata for PairingLockAckResponse, v18);
    v50 = sub_10001BC14(v15, v17);
    LOBYTE(v15) = v57;
    v51 = static os_log_type_t.default.getter(v50);
    v52 = qword_1011B7D88;
    v53 = swift_allocObject(v4, 72, 7);
    *(_OWORD *)(v53 + 16) = xmmword_100E22B00;
    v57 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v53);
    v54 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    *(_QWORD *)(v53 + 56) = &type metadata for String;
    *(_QWORD *)(v53 + 64) = v11;
    *(_QWORD *)(v53 + 32) = v54;
    *(_QWORD *)(v53 + 40) = v55;
    os_log(_:dso:log:_:_:)(v51, &_mh_execute_header, v52, "Ack pairing status code: %@", 27, 2, v53);
    swift_bridgeObjectRelease();
    LOBYTE(v57) = v15;
    Future.finish(result:)(&v57);
    swift_release();
  }
  else
  {
    v19 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v1);
    if (*(_QWORD *)(v19 + 16) && (v20 = sub_100518DA0(0xD000000000000016, 0x8000000100EDDD90), (v21 & 1) != 0))
    {
      v22 = (uint64_t *)(*(_QWORD *)(v19 + 56) + 16 * v20);
      v23 = *v22;
      v24 = v22[1];
      swift_bridgeObjectRetain(v24);
      v25 = swift_bridgeObjectRelease();
      v26 = static os_log_type_t.error.getter(v25);
      if (qword_1010EA2A8 != -1)
        swift_once(&qword_1010EA2A8, sub_100B5DDB4);
      v27 = qword_1011B7D88;
      v28 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v29 = swift_allocObject(v28, 112, 7);
      *(_OWORD *)(v29 + 16) = xmmword_100E22B10;
      *(_QWORD *)(v29 + 56) = &type metadata for String;
      v30 = sub_10001AA00();
      *(_QWORD *)(v29 + 64) = v30;
      *(_QWORD *)(v29 + 32) = v23;
      *(_QWORD *)(v29 + 40) = v24;
      v31 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
      v32 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v31, v32);
      *(_QWORD *)(v29 + 96) = &type metadata for String;
      *(_QWORD *)(v29 + 104) = v30;
      *(_QWORD *)(v29 + 72) = v33;
      *(_QWORD *)(v29 + 80) = v34;
      os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "Pairing lock ack failed with error: %@, response: %@", 52, 2, v29);
    }
    else
    {
      v35 = swift_bridgeObjectRelease();
      v36 = static os_log_type_t.error.getter(v35);
      if (qword_1010EA2A8 != -1)
        swift_once(&qword_1010EA2A8, sub_100B5DDB4);
      v37 = qword_1011B7D88;
      v38 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v39 = swift_allocObject(v38, 72, 7);
      *(_OWORD *)(v39 + 16) = xmmword_100E22B00;
      v40 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
      v41 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v42 = dispatch thunk of CustomStringConvertible.description.getter(v40, v41);
      v44 = v43;
      *(_QWORD *)(v39 + 56) = &type metadata for String;
      *(_QWORD *)(v39 + 64) = sub_10001AA00();
      *(_QWORD *)(v39 + 32) = v42;
      *(_QWORD *)(v39 + 40) = v44;
      os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "Pairing lock ack failed: %@", 27, 2, v39);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for SPPairingSessionError(0);
    v46 = v45;
    v56 = 1;
    v47 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v48 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&v57, &v56, v47, v46, v48);
    v49 = (void *)v57;
    Future.finish(error:)(v57);

  }
}

uint64_t sub_100652880(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v3 = qword_1011B7D88;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E22B00;
  v11 = a1;
  swift_errorRetain(a1);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v7 = String.init<A>(describing:)(&v11, v6);
  v9 = v8;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_10001AA00();
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v9;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "#Durian: Remove pairing lock command failed. Error - %@", 55, 2, v5);
  swift_bridgeObjectRelease();
  return Future.finish(error:)(a1);
}

void sub_10065299C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v1 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(a1);
  v2 = static os_log_type_t.default.getter(v1);
  if (v1 == 200)
  {
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_1011B7D88, "#Durian: Remove pairing lock was successful.", 44, 2, _swiftEmptyArrayStorage);
    LOBYTE(v15) = 1;
    Future.finish(result:)(&v15);
  }
  else
  {
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v3 = qword_1011B7D88;
    v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v5 = swift_allocObject(v4, 72, 7);
    *(_OWORD *)(v5 + 16) = xmmword_100E22B00;
    v15 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v5);
    v6 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v8 = v7;
    *(_QWORD *)(v5 + 56) = &type metadata for String;
    *(_QWORD *)(v5 + 64) = sub_10001AA00();
    *(_QWORD *)(v5 + 32) = v6;
    *(_QWORD *)(v5 + 40) = v8;
    os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "#Durian: Remove pairing lock failed. Status code - %@", 53, 2, v5);
    swift_bridgeObjectRelease();
    type metadata accessor for SPPairingSessionError(0);
    v10 = v9;
    v14 = 1;
    v11 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v12 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&v15, &v14, v11, v10, v12);
    v13 = (void *)v15;
    Future.finish(error:)(v15);

  }
}

uint64_t sub_100652B8C()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for PairingValidator()
{
  return objc_opt_self(_TtC12searchpartyd16PairingValidator);
}

uint64_t sub_100652BD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _BYTE v40[15];
  char v41;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v4);
  v6 = &v40[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for UnpairEndPoint(0);
  v8 = __chkstk_darwin(v7);
  v10 = &v40[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v12 = &v40[-v11];
  v13 = sub_10001A9A8(&qword_1010ED860);
  v14 = __chkstk_darwin(v13);
  v16 = &v40[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = static os_log_type_t.default.getter(v14);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v18 = qword_1011B7D88;
  v19 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v20 = swift_allocObject(v19, 72, 7);
  *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
  sub_1002A380C(a1, (uint64_t)v16);
  v21 = String.init<A>(describing:)(v16, v13);
  v23 = v22;
  *(_QWORD *)(v20 + 56) = &type metadata for String;
  *(_QWORD *)(v20 + 64) = sub_10001AA00();
  *(_QWORD *)(v20 + 32) = v21;
  *(_QWORD *)(v20 + 40) = v23;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "#Durian: Removing pairing lock for UUID - %@", 44, 2, v20);
  swift_bridgeObjectRelease();
  v24 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v25 = Future.init()();
  sub_100652F88(a2);
  sub_100C2337C(a2);
  if (v26)
  {
    v29 = v26;
    v30 = v27;
    v31 = v28;
    sub_100B19D8C((uint64_t)v12);
    v32 = type metadata accessor for SearchPartyURLSessionFactory(0);
    swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v33 = type metadata accessor for FMNMockingPreferences(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v6, 1, 1, v33);
    v34 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v6);
    v35 = type metadata accessor for ServerInteractionController(0);
    v36 = swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
    sub_10005972C((uint64_t)v12, (uint64_t)v10, type metadata accessor for UnpairEndPoint);
    v37 = (_QWORD *)sub_10041D784((uint64_t)v10, v34, v36);
    sub_1000126B0((uint64_t)v12, type metadata accessor for UnpairEndPoint);
    swift_bridgeObjectRetain(v29);
    sub_10001BBBC(v30, v31);
    sub_10034BDA0(v29, v30, v31, 0, v37);
    swift_release();
    sub_100153D94(v29, v30, v31);
    swift_retain();
    Future.addFailure(block:)(sub_100652FD8, v25);
    swift_release();
    swift_release();
    swift_retain();
    Future.addSuccess(block:)(sub_100652FE0, v25);
    swift_release();
    swift_release();
    swift_release();
    sub_100153D94(v29, v30, v31);
  }
  else
  {
    v38 = static os_log_type_t.error.getter(0);
    os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, qword_1011B7D88, "#Durian: Could not create unpair command", 40, 2, _swiftEmptyArrayStorage);
    v41 = 0;
    Future.finish(result:)(&v41);
  }
  return v25;
}

uint64_t *sub_100652F88(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[5];
  sub_10001BBBC(*a1, a1[1]);
  sub_10001BBBC(v2, v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_100652FD8(uint64_t a1)
{
  return sub_100652880(a1);
}

void sub_100652FE0(uint64_t a1)
{
  sub_10065299C(a1);
}

uint64_t sub_100652FE8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v2);
  v4 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PairingLockAckEndPoint(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v55 - v10;
  v12 = static os_log_type_t.default.getter(v9);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v13 = qword_1011B7D88;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 64) = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = 0xD00000000000001BLL;
  *(_QWORD *)(v15 + 40) = 0x8000000100EDDD70;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "%@", 2, 2, v15);
  swift_bridgeObjectRelease();
  v16 = sub_10001A9A8(&qword_101102528);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v66 = Future.init()();
  sub_100357ED4((uint64_t)v11);
  v17 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v18 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v4, 1, 1, v18);
  v19 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v4);
  v20 = type metadata accessor for ServerInteractionController(0);
  v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  sub_10005972C((uint64_t)v11, (uint64_t)v8, type metadata accessor for PairingLockAckEndPoint);
  v65 = (_QWORD *)sub_10041D928((uint64_t)v8, v19, v21);
  sub_1000126B0((uint64_t)v11, type metadata accessor for PairingLockAckEndPoint);
  v22 = Data.hexString.getter(*a1, a1[1]);
  v63 = v23;
  v64 = v22;
  v24 = Data.hexString.getter(a1[2], a1[3]);
  v61 = v25;
  v62 = v24;
  v27 = a1[4];
  v26 = a1[5];
  v59 = a1[6];
  v60 = v27;
  v58 = a1[7];
  v28 = a1[8];
  v29 = a1[9];
  v56 = v26;
  v57 = v28;
  v30 = a1[10];
  v31 = a1[11];
  v32 = a1[12];
  v33 = a1[13];
  v34 = a1[14];
  v35 = a1[15];
  v37 = a1[16];
  v36 = a1[17];
  v38 = a1[18];
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v38);
  sub_10001BBBC(v30, v31);
  sub_10001BBBC(v32, v33);
  sub_10001BBBC(v34, v35);
  sub_10001BBBC(v37, v36);
  *((_QWORD *)&v54 + 1) = v33;
  *(_QWORD *)&v54 = v32;
  *((_QWORD *)&v53 + 1) = v29;
  *(_QWORD *)&v53 = v57;
  sub_10074A4A0(v64, v63, v62, v61, v60, v56, v59, v58, v53, v30, v31, v54, v34, v35, v37, v36, v38);
  if (v39)
  {
    v42 = v39;
    v43 = v40;
    v44 = v41;
    sub_10034E180(v39, v40, v41, 0, v65);
    v45 = v66;
    swift_retain();
    Future.addFailure(block:)(sub_100653450, v45);
    swift_release();
    swift_release();
    swift_retain();
    Future.addSuccess(block:)(sub_100653470, v45);
    swift_release();
    swift_release();
    swift_release();
    sub_100153D94(v42, v43, v44);
  }
  else
  {
    v46 = static os_log_type_t.error.getter(0);
    os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, qword_1011B7D88, "Could not create pairing ack request", 36, 2, _swiftEmptyArrayStorage);
    type metadata accessor for SPPairingSessionError(0);
    v48 = v47;
    v67 = 1;
    v49 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v50 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v49, v48, v50);
    v51 = v68;
    v45 = v66;
    Future.finish(error:)(v68);

  }
  swift_release();
  return v45;
}

void sub_100653450(void *a1)
{
  uint64_t v1;

  sub_100652100(a1, v1, "Error in acking pairing request. Error - %@");
}

void sub_100653470(uint64_t a1)
{
  sub_100652284(a1);
}

unint64_t sub_100653478()
{
  unint64_t result;

  result = qword_101102530;
  if (!qword_101102530)
  {
    result = swift_getWitnessTable(a9_9, &type metadata for PairingLockAckResponse);
    atomic_store(result, (unint64_t *)&qword_101102530);
  }
  return result;
}

void sub_1006534BC(void *a1)
{
  uint64_t v1;

  sub_100652100(a1, v1, "Error in verify pairing request. Error - %@");
}

void sub_1006534DC(uint64_t a1)
{
  uint64_t v1;

  sub_100651AD8(a1, v1);
}

unint64_t sub_1006534E4()
{
  unint64_t result;

  result = qword_101102540;
  if (!qword_101102540)
  {
    result = swift_getWitnessTable(byte_100E3D8AC, &type metadata for PairingLockCheckResponse);
    atomic_store(result, (unint64_t *)&qword_101102540);
  }
  return result;
}

uint64_t destroy for PairingCheckData(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10001BC14(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  sub_10001BC14(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  sub_10001BC14(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120));
  sub_10001BC14(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  sub_10001BC14(*(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152));
  sub_10001BC14(*(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168));
  return sub_10001BC14(*(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184));
}

uint64_t initializeWithCopy for PairingCheckData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  v10 = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  sub_10001BBBC(v10, v11);
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = v11;
  v12 = *(_QWORD *)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 104);
  sub_10001BBBC(v12, v13);
  *(_QWORD *)(a1 + 96) = v12;
  *(_QWORD *)(a1 + 104) = v13;
  v14 = *(_QWORD *)(a2 + 112);
  v15 = *(_QWORD *)(a2 + 120);
  sub_10001BBBC(v14, v15);
  *(_QWORD *)(a1 + 112) = v14;
  *(_QWORD *)(a1 + 120) = v15;
  v16 = *(_QWORD *)(a2 + 128);
  v17 = *(_QWORD *)(a2 + 136);
  sub_10001BBBC(v16, v17);
  *(_QWORD *)(a1 + 128) = v16;
  *(_QWORD *)(a1 + 136) = v17;
  v18 = *(_QWORD *)(a2 + 144);
  v19 = *(_QWORD *)(a2 + 152);
  sub_10001BBBC(v18, v19);
  *(_QWORD *)(a1 + 144) = v18;
  *(_QWORD *)(a1 + 152) = v19;
  v20 = *(_QWORD *)(a2 + 160);
  v21 = *(_QWORD *)(a2 + 168);
  sub_10001BBBC(v20, v21);
  *(_QWORD *)(a1 + 160) = v20;
  *(_QWORD *)(a1 + 168) = v21;
  v23 = *(_QWORD *)(a2 + 176);
  v22 = *(_QWORD *)(a2 + 184);
  sub_10001BBBC(v23, v22);
  *(_QWORD *)(a1 + 176) = v23;
  *(_QWORD *)(a1 + 184) = v22;
  return a1;
}

uint64_t *assignWithCopy for PairingCheckData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001BC14(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_10001BBBC(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001BC14(v10, v11);
  a1[4] = a2[4];
  v12 = a2[5];
  a1[5] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  v13 = a2[9];
  a1[9] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease();
  v14 = a2[10];
  v15 = a2[11];
  sub_10001BBBC(v14, v15);
  v16 = a1[10];
  v17 = a1[11];
  a1[10] = v14;
  a1[11] = v15;
  sub_10001BC14(v16, v17);
  v18 = a2[12];
  v19 = a2[13];
  sub_10001BBBC(v18, v19);
  v20 = a1[12];
  v21 = a1[13];
  a1[12] = v18;
  a1[13] = v19;
  sub_10001BC14(v20, v21);
  v22 = a2[14];
  v23 = a2[15];
  sub_10001BBBC(v22, v23);
  v24 = a1[14];
  v25 = a1[15];
  a1[14] = v22;
  a1[15] = v23;
  sub_10001BC14(v24, v25);
  v26 = a2[16];
  v27 = a2[17];
  sub_10001BBBC(v26, v27);
  v28 = a1[16];
  v29 = a1[17];
  a1[16] = v26;
  a1[17] = v27;
  sub_10001BC14(v28, v29);
  v30 = a2[18];
  v31 = a2[19];
  sub_10001BBBC(v30, v31);
  v32 = a1[18];
  v33 = a1[19];
  a1[18] = v30;
  a1[19] = v31;
  sub_10001BC14(v32, v33);
  v34 = a2[20];
  v35 = a2[21];
  sub_10001BBBC(v34, v35);
  v36 = a1[20];
  v37 = a1[21];
  a1[20] = v34;
  a1[21] = v35;
  sub_10001BC14(v36, v37);
  v39 = a2[22];
  v38 = a2[23];
  sub_10001BBBC(v39, v38);
  v40 = a1[22];
  v41 = a1[23];
  a1[22] = v39;
  a1[23] = v38;
  sub_10001BC14(v40, v41);
  return a1;
}

uint64_t assignWithTake for PairingCheckData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001BC14(v10, v11);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_10001BC14(v12, v13);
  v14 = *(_QWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_10001BC14(v14, v15);
  v16 = *(_QWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  sub_10001BC14(v16, v17);
  v18 = *(_QWORD *)(a1 + 144);
  v19 = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  sub_10001BC14(v18, v19);
  v20 = *(_QWORD *)(a1 + 160);
  v21 = *(_QWORD *)(a1 + 168);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  sub_10001BC14(v20, v21);
  v22 = *(_QWORD *)(a1 + 176);
  v23 = *(_QWORD *)(a1 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  sub_10001BC14(v22, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for PairingCheckData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 192))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PairingCheckData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 192) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 192) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingCheckData()
{
  return &type metadata for PairingCheckData;
}

uint64_t destroy for PairingAckData(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10001BC14(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  sub_10001BC14(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  sub_10001BC14(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120));
  sub_10001BC14(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PairingAckData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  v10 = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  sub_10001BBBC(v10, v11);
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = v11;
  v12 = *(_QWORD *)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 104);
  sub_10001BBBC(v12, v13);
  *(_QWORD *)(a1 + 96) = v12;
  *(_QWORD *)(a1 + 104) = v13;
  v14 = *(_QWORD *)(a2 + 112);
  v15 = *(_QWORD *)(a2 + 120);
  sub_10001BBBC(v14, v15);
  *(_QWORD *)(a1 + 112) = v14;
  *(_QWORD *)(a1 + 120) = v15;
  v16 = *(_QWORD *)(a2 + 128);
  v17 = *(_QWORD *)(a2 + 136);
  sub_10001BBBC(v16, v17);
  *(_QWORD *)(a1 + 128) = v16;
  *(_QWORD *)(a1 + 136) = v17;
  v18 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v18;
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t *assignWithCopy for PairingAckData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001BC14(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_10001BBBC(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001BC14(v10, v11);
  a1[4] = a2[4];
  v12 = a2[5];
  a1[5] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  v13 = a2[9];
  a1[9] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease();
  v14 = a2[10];
  v15 = a2[11];
  sub_10001BBBC(v14, v15);
  v16 = a1[10];
  v17 = a1[11];
  a1[10] = v14;
  a1[11] = v15;
  sub_10001BC14(v16, v17);
  v18 = a2[12];
  v19 = a2[13];
  sub_10001BBBC(v18, v19);
  v20 = a1[12];
  v21 = a1[13];
  a1[12] = v18;
  a1[13] = v19;
  sub_10001BC14(v20, v21);
  v22 = a2[14];
  v23 = a2[15];
  sub_10001BBBC(v22, v23);
  v24 = a1[14];
  v25 = a1[15];
  a1[14] = v22;
  a1[15] = v23;
  sub_10001BC14(v24, v25);
  v26 = a2[16];
  v27 = a2[17];
  sub_10001BBBC(v26, v27);
  v28 = a1[16];
  v29 = a1[17];
  a1[16] = v26;
  a1[17] = v27;
  sub_10001BC14(v28, v29);
  v30 = a2[18];
  a1[18] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for PairingAckData(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for PairingAckData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001BC14(v10, v11);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_10001BC14(v12, v13);
  v14 = *(_QWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_10001BC14(v14, v15);
  v16 = *(_QWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  sub_10001BC14(v16, v17);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PairingAckData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PairingAckData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingAckData()
{
  return &type metadata for PairingAckData;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_100653DF4(uint64_t a1, uint64_t a2)
{
  Swift::String v2;
  void *object;
  Swift::String v4;
  Swift::String v5;
  void *v6;

  swift_bridgeObjectRetain(a2);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 44;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v6 = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v6);
}

uint64_t sub_100653EA8()
{
  uint64_t *v0;
  uint64_t result;

  result = *v0;
  sub_100653DF4(*v0, v0[1]);
  return result;
}

uint64_t sub_100653EB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_10065433C(a1, a2);
  *a3 = result;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

double sub_100653EDC@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

Swift::Int sub_100653EE8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v5);
  sub_100653DF4(v1, v2);
  String.hash(into:)(v5, v1, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100653F60(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  sub_100653DF4(*v1, v1[1]);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_100653FA4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v5);
  sub_100653DF4(v1, v2);
  String.hash(into:)(v5, v1, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100654018(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100330BA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100654040(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100330BA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100654068(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v2 = a1[1];
  v3 = *a2;
  v4 = a2[1];
  v5 = *a1;
  sub_100653DF4(v5, v2);
  v7 = v6;
  sub_100653DF4(v3, v4);
  if (v5 == v3 && v7 == v8)
    v10 = 1;
  else
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v3, v8, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_100654114@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_100654534(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100654140(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v2 = *v1;
  v3 = v1[1];
  v4 = a1[3];
  v5 = a1[4];
  sub_10001AA44(a1, v4);
  dispatch thunk of Encoder.singleValueContainer()(v12, v4, v5);
  sub_100653DF4(v2, v3);
  v6 = v2;
  v8 = v7;
  v9 = v13;
  v10 = v14;
  sub_10009F5D0((uint64_t)v12, v13);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v6, v8, v9, v10);
  swift_bridgeObjectRelease();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
}

uint64_t sub_100654208@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_10065433C(*a1, a1[1]);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  return result;
}

uint64_t sub_100654238@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;

  result = *v1;
  sub_100653DF4(*v1, v1[1]);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100654268()
{
  unint64_t result;

  result = qword_101102548;
  if (!qword_101102548)
  {
    result = swift_getWitnessTable(a1_20, &type metadata for FeatureSupportMatrixProductType);
    atomic_store(result, (unint64_t *)&qword_101102548);
  }
  return result;
}

unint64_t sub_1006542B0()
{
  unint64_t result;

  result = qword_101102550;
  if (!qword_101102550)
  {
    result = swift_getWitnessTable(byte_100E46B00, &type metadata for FeatureSupportMatrixProductType);
    atomic_store(result, (unint64_t *)&qword_101102550);
  }
  return result;
}

unint64_t sub_1006542F8()
{
  unint64_t result;

  result = qword_101102558;
  if (!qword_101102558)
  {
    result = swift_getWitnessTable(byte_100E46B28, &type metadata for FeatureSupportMatrixProductType);
    atomic_store(result, (unint64_t *)&qword_101102558);
  }
  return result;
}

uint64_t sub_10065433C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char v19;
  char v20;
  void (*v21)(char *, uint64_t);
  Swift::String v22;
  Swift::String_optional v23;
  char v24;
  char v25;
  uint64_t v27;

  v3 = type metadata accessor for NSScanner.NumberRepresentation(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CharacterSet(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_allocWithZone((Class)NSScanner);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v13 = objc_msgSend(v11, "initWithString:", v12);

  static CharacterSet.letters.getter();
  v14 = NSScanner.scanCharacters(from:)(v10);
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (!v16)
  {

    return 0;
  }
  v17 = enum case for NSScanner.NumberRepresentation.decimal(_:);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  v18(v6, enum case for NSScanner.NumberRepresentation.decimal(_:), v3);
  NSScanner.scanInt(representation:)(v6);
  v20 = v19;
  v21 = *(void (**)(char *, uint64_t))(v4 + 8);
  v21(v6, v3);
  if ((v20 & 1) != 0
    || (v22._countAndFlagsBits = 44,
        v22._object = (void *)0xE100000000000000,
        v23 = NSScanner.scanString(_:)(v22),
        !v23.value._object))
  {
    swift_bridgeObjectRelease(v16);

    return 0;
  }
  swift_bridgeObjectRelease(v23.value._object);
  v18(v6, v17, v3);
  NSScanner.scanInt(representation:)(v6);
  v25 = v24;

  v21(v6, v3);
  if ((v25 & 1) != 0)
  {
    swift_bridgeObjectRelease(v16);
    return 0;
  }
  return v14;
}

uint64_t sub_100654534(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()(v16, v3, v4);
  if (!v1)
  {
    v3 = v17;
    v5 = v18;
    sub_10001AA44(v16, v17);
    v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v3, v5);
    v9 = v6;
    v10 = v7;
    swift_bridgeObjectRetain(v7);
    v11 = sub_10065433C(v9, v10);
    if (v12)
    {
      v3 = v11;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return v3;
    }
    v13 = sub_10065466C();
    v14 = swift_allocError(&type metadata for FeatureSupportMatrixProductType.CodingError, v13, 0, 0);
    *v15 = v9;
    v15[1] = v10;
    swift_willThrow(v14);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v3;
}

unint64_t sub_10065466C()
{
  unint64_t result;

  result = qword_101102560;
  if (!qword_101102560)
  {
    result = swift_getWitnessTable(byte_100E46C10, &type metadata for FeatureSupportMatrixProductType.CodingError);
    atomic_store(result, (unint64_t *)&qword_101102560);
  }
  return result;
}

ValueMetadata *type metadata accessor for FeatureSupportMatrixProductType.CodingError()
{
  return &type metadata for FeatureSupportMatrixProductType.CodingError;
}

uint64_t initializeWithCopy for FeatureSupportMatrixProductType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for FeatureSupportMatrixProductType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for FeatureSupportMatrixProductType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for FeatureSupportMatrixProductType()
{
  return &type metadata for FeatureSupportMatrixProductType;
}

uint64_t sub_1006547A0(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t My;
  _QWORD *v8;
  int v9;
  char v10;
  int v11;
  _QWORD v14[5];

  v4 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  My = type metadata accessor for Feature.FindMy(0);
  v14[3] = My;
  v14[4] = sub_100654A70();
  v8 = sub_100018F08(v14);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v8, enum case for Feature.FindMy.itemSharing(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v14);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
  if ((My & 1) != 0)
  {
    v9 = *(unsigned __int8 *)(a1 + *(int *)(v4 + 64));
    sub_10024F154(a1, (uint64_t)v6);
    if (v9 == 4)
    {
      sub_10024F198((uint64_t)v6);
    }
    else
    {
      v11 = v6[*(int *)(v4 + 64)];
      sub_10024F198((uint64_t)v6);
      if (v11 != 1)
      {
        v10 = 1;
        return v10 & 1;
      }
    }
    v10 = a2 ^ 1;
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t sub_1006548BC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t, uint64_t);
  char v14;
  _BYTE v17[40];

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v2);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for SharedBeaconRecord(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 112))(v9, v10) & 1) != 0)
  {
    sub_100030784((uint64_t)a1, (uint64_t)v17);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v12 = swift_dynamicCast(v4, v17, v11, v5, 6);
    v13 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    if ((v12 & 1) != 0)
    {
      v13(v4, 0, 1, v5);
      sub_1003DE8F0((uint64_t)v4, (uint64_t)v8);
      v14 = sub_1006547A0((uint64_t)v8, 1);
      sub_10024F198((uint64_t)v8);
    }
    else
    {
      v14 = 1;
      v13(v4, 1, 1, v5);
      sub_100654A30((uint64_t)v4);
    }
  }
  else
  {
    v14 = 1;
  }
  return v14 & 1;
}

uint64_t sub_100654A30(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100654A70()
{
  unint64_t result;
  uint64_t My;

  result = qword_1010EE1B0;
  if (!qword_1010EE1B0)
  {
    My = type metadata accessor for Feature.FindMy(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Feature.FindMy, My);
    atomic_store(result, (unint64_t *)&qword_1010EE1B0);
  }
  return result;
}

uint64_t *SendPairingStatusCommandPayload.expectedLength.unsafeMutableAddressor()
{
  return &static SendPairingStatusCommandPayload.expectedLength;
}

uint64_t static SendPairingStatusCommandPayload.expectedLength.getter()
{
  _BYTE v1[24];

  swift_beginAccess(&static SendPairingStatusCommandPayload.expectedLength, v1, 0, 0);
  return static SendPairingStatusCommandPayload.expectedLength;
}

uint64_t static SendPairingStatusCommandPayload.expectedLength.setter(uint64_t a1)
{
  uint64_t result;
  _BYTE v3[24];

  result = swift_beginAccess(&static SendPairingStatusCommandPayload.expectedLength, v3, 1, 0);
  static SendPairingStatusCommandPayload.expectedLength = a1;
  return result;
}

uint64_t (*static SendPairingStatusCommandPayload.expectedLength.modify(uint64_t a1))(_QWORD)
{
  swift_beginAccess(&static SendPairingStatusCommandPayload.expectedLength, a1, 33, 0);
  return j__swift_endAccess_0;
}

double SendPairingStatusCommandPayload.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_100654D08(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_100654BC8(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_100654BD4 + *((int *)qword_100654CD8 + (a2 >> 62))))();
}

uint64_t sub_100654BE4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (BYTE6(a2) != 60)
  {
    __break(1u);
    JUMPOUT(0x100654CD4);
  }
  return ((uint64_t (*)(void))((char *)&loc_100654C20 + *((int *)qword_100654CE8 + (a4 >> 62))))();
}

uint64_t sub_100654D08@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  __int128 v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v20, v5, v6);
  v7 = v21;
  v8 = v22;
  sub_10009F5D0((uint64_t)v20, v21);
  v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(60, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = v9;
    v12 = v10;
    v13 = v21;
    v14 = v22;
    sub_10009F5D0((uint64_t)v20, v21);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(4, v13, v14);
    v26 = v15;
    v17 = v21;
    v16 = v22;
    sub_10009F5D0((uint64_t)v20, v21);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(1286, v17, v16);
    sub_100654BC8(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    v19 = v24;
    *a2 = v23;
    a2[1] = v19;
    a2[2] = v25;
  }
  return result;
}

unint64_t sub_100654E84(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100654EB0();
  result = sub_100654EF4();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100654EB0()
{
  unint64_t result;

  result = qword_101102570;
  if (!qword_101102570)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SendPairingStatusCommandPayload, &type metadata for SendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_101102570);
  }
  return result;
}

unint64_t sub_100654EF4()
{
  unint64_t result;

  result = qword_101102578;
  if (!qword_101102578)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SendPairingStatusCommandPayload, &type metadata for SendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_101102578);
  }
  return result;
}

ValueMetadata *type metadata accessor for SendPairingStatusCommandPayload()
{
  return &type metadata for SendPairingStatusCommandPayload;
}

uint64_t sub_100654F48(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[4] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_initClassMetadata2(a1, 0, 7, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100654FE4()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x70614D79656BLL, 0xE600000000000000);
  qword_1011B73B8 = result;
  return result;
}

uint64_t sub_10065503C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v10;
  _QWORD v11[2];

  v10 = *(_DWORD *)(v1 + *(int *)(a1 + 36));
  v3 = sub_1006265B8((uint64_t)&v10, (uint64_t)v11);
  v5 = v4;
  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 40))(*(_QWORD *)(a1 + 16));
  v8 = v7;
  v11[0] = v6;
  v11[1] = v7;
  sub_10001BBBC(v6, v7);
  sub_10001BBBC(v3, v5);
  sub_10078E27C(v3, v5);
  sub_10001BC14(v3, v5);
  sub_10001BC14(v6, v8);
  sub_10001BC14(v3, v5);
  return v11[0];
}

void sub_100655120(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[15];

  v11[8] = a4;
  v7 = type metadata accessor for Optional(0, a3);
  v8 = __chkstk_darwin(v7);
  v11[7] = (char *)v11 - v9;
  v11[5] = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v8);
  v11[4] = (char *)v11 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[6] = a2 >> 62;
  sub_10001BBBC(a1, a2);
  sub_100626E70(4, a1, a2);
  __asm { BR              X10 }
}

uint64_t sub_100655220()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  *(_QWORD *)(v9 - 128) = v6;
  *(_WORD *)(v9 - 120) = v5;
  *(_BYTE *)(v9 - 118) = BYTE2(v5);
  *(_BYTE *)(v9 - 117) = BYTE3(v5);
  *(_BYTE *)(v9 - 116) = BYTE4(v5);
  *(_BYTE *)(v9 - 115) = BYTE5(v5);
  sub_1006556D4((_DWORD *)(v9 - 128), v9 - 128 + BYTE6(v5), v3, v7, (_DWORD *)(v9 - 132));
  if (!v8)
  {
    *(_QWORD *)(v9 - 208) = v4;
    *(_QWORD *)(v9 - 200) = v1;
    sub_10001BC14(v6, v5);
    v10 = *(_DWORD *)(v9 - 132);
    *(_DWORD *)(*(_QWORD *)(v9 - 144)
              + *(int *)(type metadata accessor for KeyIndexMapGenerator.Record(0, v3, v7, v11) + 36)) = v10;
    __asm { BR              X10 }
  }
  sub_10001BC14(v2, v0);
  return sub_10001BC14(v6, v5);
}

uint64_t sub_100655630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v5 = a3;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 40);
  v7 = v6(a3, a4);
  v9 = v8;
  v10 = v6(v5, a4);
  v12 = v11;
  LOBYTE(v5) = static Data.< infix(_:_:)(v7, v9, v10, v11);
  sub_10001BC14(v10, v12);
  sub_10001BC14(v7, v9);
  return v5 & 1;
}

_DWORD *sub_1006556D4@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;

  if (result && (unint64_t)(a2 - (_QWORD)result + 3) >= 7)
  {
    *a5 = *result;
  }
  else
  {
    v5 = type metadata accessor for KeyIndexMapGenerator.Error(0, a3, a4, a4);
    WitnessTable = swift_getWitnessTable(byte_100E46E40, v5);
    v7 = swift_allocError(v5, WitnessTable, 0, 0);
    *(_DWORD *)v8 = 1;
    *(_BYTE *)(v8 + 4) = 2;
    return (_DWORD *)swift_willThrow(v7);
  }
  return result;
}

void sub_100655768(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  dispatch thunk of Hashable.hash(into:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24));
  Hasher._combine(_:)(*(_DWORD *)(v2 + *(int *)(a2 + 36)));
}

BOOL sub_1006557B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  if ((dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(a4 + 24) + 8)) & 1) == 0)
    return 0;
  v9 = type metadata accessor for KeyIndexMapGenerator.Record(0, a3, a4, v8);
  return *(_DWORD *)(a1 + *(int *)(v9 + 36)) == *(_DWORD *)(a2 + *(int *)(v9 + 36));
}

Swift::Int sub_10065581C(uint64_t a1)
{
  uint64_t v1;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  dispatch thunk of Hashable.hash(into:)(v4, *(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24));
  Hasher._combine(_:)(*(_DWORD *)(v1 + *(int *)(a1 + 36)));
  return Hasher._finalize()();
}

uint64_t sub_100655874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100655630(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void sub_100655890(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_100655120(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

Swift::Int sub_1006558B4(uint64_t a1, uint64_t a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  sub_100655768((uint64_t)v4, a2);
  return Hasher._finalize()();
}

BOOL sub_1006558F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1006557B0(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_100655900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + qword_101102580;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_1011025B0));
  return v0;
}

uint64_t sub_100655954()
{
  uint64_t v0;

  sub_100655900();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for KeyIndexMapGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyIndexMapGenerator);
}

uint64_t sub_100655984(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int32 + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_1006559FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = v7 & 0xFC | 3;
  v9 = v7 & 0x100000;
  if (v8 > 7 || v9 != 0 || ((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4 > 0x18)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v12 + ((v8 + 16) & ~v8));
    swift_retain(v12);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_DWORD *)(((unint64_t)v4 + v6 + 3) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFCLL);
  }
  return v4;
}

uint64_t sub_100655AAC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_100655ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a1) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a2) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t sub_100655B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a1) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a2) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t sub_100655B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a1) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a2) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t sub_100655BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a1) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a2) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t sub_100655C2C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4) & 0xFFFFFFFC) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_100655C9C + 4 * byte_100E46CE0[v8]))();
}

void sub_100655CF4(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) != 0xFFFFFFFC)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_100655DDC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_100655DE4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x100655DECLL);
}

void sub_100655E08()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_100655E10()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_100655E18(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x100655E20);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t type metadata accessor for KeyIndexMapGenerator.Record(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyIndexMapGenerator.Record);
}

uint64_t sub_100655E44(uint64_t a1)
{
  return swift_getWitnessTable(aA_36, a1);
}

uint64_t type metadata accessor for KeyIndexMapGenerator.Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyIndexMapGenerator.Error);
}

uint64_t initializeBufferWithCopyOfBuffer for DatabaseError(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t sub_100655E74(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_100655EBC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = -(char)a2;
  }
  return result;
}

uint64_t sub_100655F00(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 4) <= 1u)
    return *(unsigned __int8 *)(a1 + 4);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_100655F18(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 4) = a2;
  return result;
}

__n128 initializeBufferWithCopyOfBuffer for LocalFindableAccessoryFirmwareVersionNumber(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t type metadata accessor for KeyIndexMapGenerator.Header(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyIndexMapGenerator.Header);
}

uint64_t sub_100655F48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v16 - v7;
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v6);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011, 0x8000000100ED0480, 1);
  v9 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  v10 = v9(v6, v2);
  if (a1 == 3)
  {
    v11 = 0x646572616853;
    goto LABEL_6;
  }
  if (a1 == 2)
  {
    v12 = 0x2E65746176697250;
LABEL_11:
    v13 = 0xED00006E656B6F74;
    goto LABEL_12;
  }
  if (a1 != 1)
  {
    v14 = static os_log_type_t.error.getter(v10);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_1011B7D40, "Unknown CKDatabase.Scope!", 25, 2, _swiftEmptyArrayStorage);
    v12 = 0x2E6E776F6E6B6E55;
    goto LABEL_11;
  }
  v11 = 0x63696C627550;
LABEL_6:
  v12 = v11 & 0xFFFFFFFFFFFFLL | 0x742E000000000000;
  v13 = 0xEC0000006E656B6FLL;
LABEL_12:
  URL.appendingPathComponent(_:)(v12, v13);
  return v9(v8, v2);
}

uint64_t sub_100656124(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  void *object;
  Swift::String v24;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v7);
  URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43, 0xED0000656E6F5A2FLL, 1);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (a1 == 3)
  {
    v9 = 0x646572616853;
    v10 = 0xE600000000000000;
    goto LABEL_11;
  }
  if (a1 == 2)
  {
    v9 = 0x65746176697250;
LABEL_10:
    v10 = 0xE700000000000000;
    goto LABEL_11;
  }
  if (a1 != 1)
  {
    v11 = static os_log_type_t.error.getter(v8);
    if (qword_1010EA260 != -1)
      swift_once(&qword_1010EA260, sub_100B5DA30);
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, qword_1011B7D40, "Unknown CKDatabase.Scope!", 25, 2, _swiftEmptyArrayStorage);
    v9 = 0x6E776F6E6B6E55;
    goto LABEL_10;
  }
  v9 = 0x63696C627550;
  v10 = 0xE600000000000000;
LABEL_11:
  URL.appendPathComponent(_:)(*(Swift::String *)&v9);
  v12 = objc_msgSend(a2, "ownerName");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v16._countAndFlagsBits = v13;
  v16._object = v15;
  URL.appendPathComponent(_:)(v16);
  swift_bridgeObjectRelease(v15);
  v17 = objc_msgSend(a2, "zoneName");
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v24._countAndFlagsBits = v18;
  v24._object = v20;
  v21._countAndFlagsBits = 0x6E656B6F742ELL;
  v21._object = (void *)0xE600000000000000;
  String.append(_:)(v21);
  object = v24._object;
  URL.appendPathComponent(_:)(v24);
  return swift_bridgeObjectRelease(object);
}

uint64_t sub_100656368(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  NSURL *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void **v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;

  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.deletingLastPathComponent()();
  URL._bridgeToObjectiveC()(v10);
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v28 = 0;
  LODWORD(v8) = objc_msgSend(v9, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v12, 1, 0, &v28);

  v13 = v28;
  if (!(_DWORD)v8)
  {
    v25 = v13;
    _convertNSErrorToError(_:)(v13);

    return swift_willThrow(v26);
  }
  v14 = (void *)objc_opt_self(NSKeyedArchiver);
  v28 = 0;
  v15 = objc_msgSend(v14, "archivedDataWithRootObject:requiringSecureCoding:error:", a1, 1, &v28);
  v16 = v28;
  if (!v15)
  {
    v27 = v16;
    _convertNSErrorToError(_:)(v16);

    return swift_willThrow(v26);
  }
  v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v19 = v18;

  v20 = sub_100C54388(v17, v19, 0);
  if (!v2)
  {
    v22 = (uint64_t)v20;
    v23 = v21;
    Data.write(to:excludeFromBackup:options:)(a2, 1, 0, 1, v20, v21);
    sub_10001BC14(v22, v23);
  }
  return sub_10001BC14(v17, v19);
}

id sub_100656590()
{
  id v0;
  NSURL *v1;
  void *v2;
  void *v3;
  unsigned int v4;
  id v5;
  id v7;
  uint64_t v8;
  id v9;

  v0 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v1);
  v3 = v2;
  v9 = 0;
  v4 = objc_msgSend(v0, "removeItemAtURL:error:", v2, &v9);

  v5 = v9;
  if (v4)
    return v9;
  v7 = v9;
  _convertNSErrorToError(_:)(v5);

  return (id)swift_willThrow(v8);
}

uint64_t sub_100656674(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[5];

  v2 = type metadata accessor for CryptoError(0);
  v3 = __chkstk_darwin(v2);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  v5 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.path.getter(v5);
  v7 = v6;
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  LODWORD(v7) = objc_msgSend(v5, "fileExistsAtPath:", v8);

  result = 0;
  if ((_DWORD)v7)
  {
    v10 = Data.init(contentsOf:options:)(a1, 0);
    v12 = v11;
    v13 = sub_100C5471C(v10, v11);
    v19 = v14;
    v15 = v13;
    sub_10000F4A0(0, &qword_1011027B8, NSKeyedUnarchiver_ptr);
    v16 = sub_10001A9A8(&qword_1011027C0);
    v17 = swift_allocObject(v16, 40, 7);
    *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
    v18 = sub_10000F4A0(0, &qword_1011027C8, CKServerChangeToken_ptr);
    *(_QWORD *)(v17 + 32) = v18;
    static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(v21, v17, v15, v19);
    sub_10001BC14(v15, v19);
    sub_10001BC14(v10, v12);
    swift_bridgeObjectRelease(v17);
    if (v21[3])
    {
      if (swift_dynamicCast(&v20, v21, (char *)&type metadata for Any + 8, v18, 6))
        return v20;
      else
        return 0;
    }
    else
    {
      sub_10014785C((uint64_t)v21);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100656AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[6];

  v4 = v3;
  v29[0] = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v10 - 8);
  v31 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocationFetcher(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[1] = *(_QWORD *)(v4 + 16);
  sub_100657228(v4, (uint64_t)v16);
  v17 = *(unsigned __int8 *)(v14 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_101084890, v20 + 16, v17 | 7);
  sub_100657370((uint64_t)v16, v21 + v18);
  *(_QWORD *)(v21 + v19) = a1;
  v22 = (_QWORD *)(v21 + v20);
  *v22 = v29[0];
  v22[1] = a3;
  aBlock[4] = sub_1006573B4;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010848A8;
  v23 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  v24 = swift_retain();
  static DispatchQoS.unspecified.getter(v24);
  v33 = _swiftEmptyArrayStorage;
  v25 = sub_1006571E0();
  v26 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v27 = sub_10001371C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v26, v27, v7, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v31);
  return swift_release();
}

uint64_t sub_100656D3C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))() / 96;
}

uint64_t sub_100656D6C()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_100656D74()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t sub_100656D7C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100656D84()
{
  return sub_1003253B0() & 1;
}

uint64_t sub_100656DD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(unsigned __int8 *)(v0 + 24);
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_100656E0C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t sub_100656E14()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t sub_100656E20()
{
  return sub_1003254B4();
}

uint64_t sub_100656E68(_QWORD *a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  swift_retain();
  sub_100422A58(a2, a1, a3, a4);
  return swift_release();
}

uint64_t sub_100656EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[6];

  v24 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v25 = *(_QWORD *)(v8 - 8);
  v26 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001F6FC();
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
  v15 = (void *)static OS_dispatch_queue.global(qos:)(v14);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v16 = (_QWORD *)swift_allocObject(&unk_101084840, 40, 7);
  v16[2] = v24;
  v16[3] = a3;
  v16[4] = a1;
  aBlock[4] = sub_100016FE4;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101084858;
  v17 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(a1);
  static DispatchQoS.unspecified.getter(v18);
  v28 = _swiftEmptyArrayStorage;
  v19 = sub_1006571E0();
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v21 = sub_10001371C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v20, v21, v5, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v26);
  return swift_release();
}

uint64_t sub_100657108()
{
  return -1;
}

uint64_t sub_100657110()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = objc_msgSend(v0, "bundleIdentifier");

  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  }
  return 2;
}

uint64_t sub_1006571A0()
{
  return 0;
}

uint64_t sub_1006571B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

unint64_t sub_1006571E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F0E50;
  if (!qword_1010F0E50)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1010F0E50);
  }
  return result;
}

uint64_t sub_100657228(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationFetcher(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10065726C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for LocationFetcher(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v7 + 24));
  v8 = v7 + *(int *)(v1 + 32);
  v9 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100657370(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationFetcher(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006573B4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(type metadata accessor for LocationFetcher(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (_QWORD *)(v0 + v2);
  v5 = *(_QWORD *)(v0 + v3);
  v6 = (uint64_t *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));
  v7 = *v6;
  v8 = v6[1];
  swift_retain();
  sub_100422A58(v5, v4, v7, v8);
  return swift_release();
}

uint64_t storeEnumTagSinglePayload for DiskFetchPolicy(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100657474 + 4 * asc_100E46ECC[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100657494 + 4 * byte_100E46ED1[v4]))();
}

_BYTE *sub_100657474(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100657494(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10065749C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1006574A4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1006574AC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1006574B4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DiskFetchPolicy()
{
  return &type metadata for DiskFetchPolicy;
}

uint64_t _s13DefaultPolicyVwxx(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t _s13DefaultPolicyVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t _s13DefaultPolicyVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v10;
  return a1;
}

__n128 _s13DefaultPolicyVwtk(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t _s13DefaultPolicyVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t _s13DefaultPolicyVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 81))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s13DefaultPolicyVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 81) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s13DefaultPolicyVMa()
{
  return &_s13DefaultPolicyVN;
}

unint64_t sub_10065778C()
{
  unint64_t result;

  result = qword_1011027D0;
  if (!qword_1011027D0)
  {
    result = swift_getWitnessTable(aE_30, &type metadata for DiskFetchPolicy);
    atomic_store(result, (unint64_t *)&qword_1011027D0);
  }
  return result;
}

unint64_t sub_1006577D0(uint64_t a1)
{
  unint64_t result;

  result = sub_1006577F4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1006577F4()
{
  unint64_t result;

  result = qword_1011027D8;
  if (!qword_1011027D8)
  {
    result = swift_getWitnessTable(aM_23, &type metadata for DiskFetchPolicy);
    atomic_store(result, (unint64_t *)&qword_1011027D8);
  }
  return result;
}

unint64_t sub_100657838(uint64_t a1)
{
  unint64_t result;

  result = sub_10065785C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10065785C()
{
  unint64_t result;

  result = qword_1011027E0;
  if (!qword_1011027E0)
  {
    result = swift_getWitnessTable(byte_100E46F04, &_s13DefaultPolicyVN);
    atomic_store(result, (unint64_t *)&qword_1011027E0);
  }
  return result;
}

uint64_t sub_1006578A8()
{
  uint64_t *v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001D8A8(v0[10], v0[11]);
  sub_10001D8A8(v0[12], v0[13]);
  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for FirmwareUpdateAlert()
{
  return objc_opt_self(_TtC12searchpartyd19FirmwareUpdateAlert);
}

uint64_t destroy for FirmwareUpdateAlertService(_QWORD *a1)
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for FirmwareUpdateAlertService(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  return a1;
}

_QWORD *assignWithCopy for FirmwareUpdateAlertService(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  sub_1001BA974(a1, a2);
  a1[5] = a2[5];
  v4 = a2[6];
  a1[6] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FirmwareUpdateAlertService(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FirmwareUpdateAlertService(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FirmwareUpdateAlertService(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FirmwareUpdateAlertService()
{
  return &type metadata for FirmwareUpdateAlertService;
}

uint64_t sub_100657B00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  v6 = sub_10001A9A8(&qword_1010FAE90);
  v3[15] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[16] = v7;
  v3[17] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    ObjectType = swift_getObjectType(a1);
    v9 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, a2);
    v11 = v10;
  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  v3[18] = v9;
  v3[19] = v11;
  return swift_task_switch(sub_100657BA4, v9, v11);
}

uint64_t sub_100657BA4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v0[20] = AsyncFilterSequence.Iterator.baseIterator.modify(v0 + 2, v0[15]);
  v1 = sub_10001A9A8(&qword_1010FAE88);
  v2 = sub_1000193A4(&qword_101102CA0, &qword_1010FAE88, (const char *)&protocol conformance descriptor for AsyncStream<A>.Iterator);
  v3 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
  v0[21] = v3;
  *v3 = v0;
  v3[1] = sub_100657C50;
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 9, v0[12], v0[13], v4, v1, v2);
}

uint64_t sub_100657C50()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 168));
  if (v0)
  {
    v3 = *(_QWORD *)(v2 + 144);
    v4 = *(_QWORD *)(v2 + 152);
    v5 = sub_100657DC0;
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD))(v2 + 160))(v2 + 16, 0);
    v3 = *(_QWORD *)(v2 + 144);
    v4 = *(_QWORD *)(v2 + 152);
    v5 = sub_100657CC0;
  }
  return swift_task_switch(v5, v3, v4);
}

uint64_t sub_100657CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t);

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  if (v1)
  {
    v5 = *(_QWORD *)(v0 + 128);
    v4 = *(_QWORD *)(v0 + 136);
    v6 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)(v0 + 120);
    *(_QWORD *)(v0 + 48) = v1;
    *(_QWORD *)(v0 + 56) = v2;
    *(_QWORD *)(v0 + 64) = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v6, v7);
    v8 = (int *)AsyncFilterSequence.Iterator.isIncluded.getter(v7);
    *(_QWORD *)(v0 + 176) = v9;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v7);
    v12 = (uint64_t (*)(uint64_t))((char *)v8 + *v8);
    v10 = (_QWORD *)swift_task_alloc(v8[1]);
    *(_QWORD *)(v0 + 184) = v10;
    *v10 = v0;
    v10[1] = sub_100657E08;
    return v12(v0 + 48);
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v0 + 8))(0, v2, v3);
  }
}

uint64_t sub_100657DC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  (*(void (**)(uint64_t, uint64_t))(v0 + 160))(v0 + 16, 1);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100657E08(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_BYTE *)(*v1 + 192) = a1;
  swift_task_dealloc(v3);
  swift_release();
  return swift_task_switch(sub_100657E68, *(_QWORD *)(v2 + 144), *(_QWORD *)(v2 + 152));
}

uint64_t sub_100657E68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  if (*(_BYTE *)(v0 + 192) == 1)
  {
    v2 = *(_QWORD *)(v0 + 48);
    v1 = *(_QWORD *)(v0 + 56);
    v3 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v2, v1, v3);
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 160) = AsyncFilterSequence.Iterator.baseIterator.modify(v0 + 16, *(_QWORD *)(v0 + 120));
    v5 = sub_10001A9A8(&qword_1010FAE88);
    v6 = sub_1000193A4(&qword_101102CA0, &qword_1010FAE88, (const char *)&protocol conformance descriptor for AsyncStream<A>.Iterator);
    v7 = (_QWORD *)swift_task_alloc(_sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTjTu[1]);
    *(_QWORD *)(v0 + 168) = v7;
    *v7 = v0;
    v7[1] = sub_100657C50;
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 72, *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), v8, v5, v6);
  }
}

uint64_t sub_100657F6C@<X0>(uint64_t a1@<X8>)
{
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "objectForKey:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v9, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100005CF0((uint64_t)v9, (uint64_t)v10, (uint64_t *)&unk_1010F6390);
  if (v11)
  {
    v5 = type metadata accessor for Date(0);
    v6 = swift_dynamicCast(a1, v10, (char *)&type metadata for Any + 8, v5, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010F6390);
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t sub_1006580C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_101102948);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_101102948);
  if (qword_1010E9E08 != -1)
    swift_once(&qword_1010E9E08, sub_100664AC8);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B73C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100658150()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1006581AC, v0, 0);
}

uint64_t sub_1006581AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (qword_1010E9E00 != -1)
    swift_once(&qword_1010E9E00, sub_1006580C0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_101102948);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Starting LocalFindableLostModeDetectionService", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);

  v8 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 1, v8);
  v9 = swift_allocObject(&unk_101084D00, 24, 7);
  swift_weakInit(v9 + 16, v7);
  v10 = (_QWORD *)swift_allocObject(&unk_101084E18, 40, 7);
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v9;
  sub_100028774(v6, (uint64_t)&unk_101102CB0, (uint64_t)v10);
  swift_release();
  sub_100004048(v6, &qword_1010F46C0);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100658320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a4;
  return swift_task_switch(sub_100658338, 0, 0);
}

uint64_t sub_100658338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 48) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = (_QWORD *)swift_task_alloc(dword_101102994);
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = sub_1006583C0;
  return sub_100658478();
}

uint64_t sub_1006583C0()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  v2 = (_QWORD *)swift_task_alloc(dword_1011029AC);
  *(_QWORD *)(v1 + 64) = v2;
  *v2 = v4;
  v2[1] = sub_100658424;
  return sub_10065B2EC();
}

uint64_t sub_100658424()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  return swift_task_switch(sub_1000BB7E4, 0, 0);
}

uint64_t sub_100658478()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1[15] = v0;
  v1[16] = *v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  v1[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1006584DC, v0, 0);
}

uint64_t sub_1006584DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t (__cdecl *v9)();

  if (qword_1010E9E00 != -1)
    swift_once(&qword_1010E9E00, sub_1006580C0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_101102948);
  *(_QWORD *)(v0 + 144) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Registering notifications", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = qword_1010EA5B0;
  swift_retain();
  if (v6 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v9 = (uint64_t (__cdecl *)())((char *)&dword_1010EBD90 + dword_1010EBD90);
    v8 = (_QWORD *)swift_task_alloc(unk_1010EBD94);
    *(_QWORD *)(v0 + 152) = v8;
    *v8 = v0;
    v8[1] = sub_100658698;
    return v9();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100658698(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006586F8, v3, 0);
}

uint64_t sub_1006586F8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint8_t *v12;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 160);
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 128);
    v3 = *(_QWORD *)(v0 + 136);
    v5 = *(_QWORD *)(v0 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v6 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v3, 1, 1, v6);
    v7 = swift_allocObject(&unk_101084D00, 24, 7);
    swift_weakInit(v7 + 16, v5);
    v8 = (_QWORD *)swift_allocObject(&unk_101084D78, 56, 7);
    v8[2] = 0;
    v8[3] = 0;
    v8[4] = v2;
    v8[5] = v7;
    v8[6] = v4;
    swift_retain();
    sub_100028774(v3, (uint64_t)&unk_101102C70, (uint64_t)v8);
    swift_release();
    swift_release();
    sub_100004048(v3, &qword_1010F46C0);
  }
  else
  {
    v9 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, (os_log_type_t)v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v11, "No distritbuted notification service to monitor!", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100658874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6[8] = a5;
  v6[9] = a6;
  v6[7] = a4;
  v7 = type metadata accessor for UUID(0);
  v6[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010FAE88);
  v6[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010FAE90);
  v6[12] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[13] = v10;
  v6[14] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010FAE98);
  v6[15] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[16] = v12;
  v6[17] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010FAEA0);
  v6[18] = v13;
  v6[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010FAEA8);
  v6[20] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v6[21] = v15;
  v6[22] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1006589A0, 0, 0);
}

uint64_t sub_1006589A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;

  v1 = v0[19];
  v2 = v0[17];
  v3 = v0[18];
  v4 = v0[15];
  v5 = v0[16];
  v16 = v0[20];
  v15 = v0[11];
  v6 = v0[7];
  v17 = v0[8] + 16;
  v7 = sub_1003B8C0C((uint64_t)&off_10104D9E0);
  swift_arrayDestroy(&unk_10104DA00, 4, &type metadata for String);
  v8 = sub_10001A9A8(&qword_1010FAEB0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v2, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v4);
  AsyncStream.init(_:bufferingPolicy:_:)(v8, v2, sub_1003ED93C, v6, v8);
  v9 = swift_allocObject(&unk_101084DA0, 24, 7);
  *(_QWORD *)(v9 + 16) = v7;
  v10 = sub_1000193A4(&qword_1010FAEC0, &qword_1010FAEA0, (const char *)&protocol conformance descriptor for AsyncStream<A>);
  AsyncFilterSequence.init(_:isIncluded:)(v1, &unk_1010FAEB8, v9, v3, v10);
  AsyncFilterSequence.base.getter(v16);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v3, v10);
  v11 = AsyncFilterSequence.isIncluded.getter(v16);
  AsyncFilterSequence.Iterator.init(_:isIncluded:)(v15, v11, v12, v3, v10);
  swift_beginAccess(v17, v0 + 2, 0, 0);
  v18 = (char *)&dword_101102C78 + dword_101102C78;
  v13 = (_QWORD *)swift_task_alloc(unk_101102C7C);
  v0[23] = v13;
  *v13 = v0;
  v13[1] = sub_100658B98;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD *))v18)(0, 0, v0 + 5);
}

uint64_t sub_100658B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 184);
  v4[24] = a1;
  v4[25] = a2;
  v4[26] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_100658BF8, 0, 0);
}

uint64_t sub_100658BF8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  _QWORD *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  uint64_t (*v42)(void);
  uint64_t v43;

  if (!*(_QWORD *)(v0 + 192))
    goto LABEL_8;
  v1 = *(_QWORD *)(v0 + 208);
  Strong = swift_weakLoadStrong(*(_QWORD *)(v0 + 64) + 16);
  *(_QWORD *)(v0 + 216) = Strong;
  if (!Strong)
  {
    swift_bridgeObjectRelease();
    swift_release();
LABEL_8:
    v12 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v0 + 152);
    v13 = *(_QWORD *)(v0 + 160);
    v15 = *(_QWORD *)(v0 + 136);
    v16 = *(_QWORD *)(v0 + 112);
    v17 = *(_QWORD *)(v0 + 88);
    v18 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(v16, *(_QWORD *)(v0 + 96));
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    swift_task_dealloc(v11);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = Strong;
  v4 = qword_1010E9E00;
  swift_bridgeObjectRetain(v1);
  if (v4 != -1)
    swift_once(&qword_1010E9E00, sub_1006580C0);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_101102948);
  swift_bridgeObjectRetain_n(v1, 2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v40 = *(_QWORD *)(v0 + 200);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v43 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(v1);
    *(_QWORD *)(v0 + 48) = sub_100016940(v40, v1, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v1, 3);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Getting a notification with name %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v1, 2);
  }
  v20 = *(_QWORD *)(v0 + 200);
  if (v20 == 0xD00000000000001ELL && *(_QWORD *)(v0 + 208) == 0x8000000100EC5500
    || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v1, 0xD00000000000001ELL, 0x8000000100EC5500, 0),
        (v20 & 1) != 0)
    || (v20 = *(_QWORD *)(v0 + 200), v20 == 0xD000000000000020) && *(_QWORD *)(v0 + 208) == 0x8000000100EC5550
    || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v1, 0xD000000000000020, 0x8000000100EC5550, 0),
        (v20 & 1) != 0))
  {
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Onboarding is about to appear, so flush the queue of any pending serial number lookups", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    *(_QWORD *)(v0 + 224) = *(_QWORD *)(v3 + 136);
    v24 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue() + 1);
    v42 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue()
                            + async function pointer to dispatch thunk of WorkItemQueue.flushQueue());
    swift_retain();
    v25 = (_QWORD *)swift_task_alloc(v24);
    *(_QWORD *)(v0 + 232) = v25;
    *v25 = v0;
    v25[1] = sub_100659164;
    return v42();
  }
  else
  {
    v26 = Logger.logObject.getter(v20);
    v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Onboarding is about to disappear, so no need to flush any pending serial number lookups", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    v30 = *(_QWORD *)(v0 + 208);
    v29 = *(_QWORD *)(v0 + 216);
    v32 = *(_QWORD *)(v0 + 192);
    v31 = *(_QWORD *)(v0 + 200);
    v34 = *(_QWORD *)(v0 + 72);
    v33 = *(_QWORD *)(v0 + 80);
    type metadata accessor for WorkItemQueue.WorkItem(0);
    v35 = (_QWORD *)swift_allocObject(&unk_101084DC8, 48, 7);
    v35[2] = v31;
    v35[3] = v30;
    v35[4] = v29;
    v35[5] = v34;
    v36 = (_QWORD *)swift_allocObject(&unk_101084DF0, 48, 7);
    v36[2] = v32;
    v36[3] = v31;
    v36[4] = v30;
    v36[5] = v29;
    swift_retain_n(v29, 2);
    swift_bridgeObjectRetain(v30);
    swift_retain();
    v37 = swift_retain();
    UUID.init()(v37);
    v38 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v33, &unk_101102C88, v35, &unk_101102C98, v36);
    dispatch thunk of WorkItemQueue.enqueue(_:)(v38);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v41 = (char *)&dword_101102C78 + dword_101102C78;
    v39 = (_QWORD *)swift_task_alloc(unk_101102C7C);
    *(_QWORD *)(v0 + 184) = v39;
    *v39 = v0;
    v39[1] = sub_100658B98;
    return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v41)(0, 0, v0 + 40);
  }
}

uint64_t sub_100659164()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 232));
  swift_release();
  return swift_task_switch(sub_1006591C0, 0, 0);
}

uint64_t sub_1006591C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v13;

  v2 = v0[26];
  v1 = v0[27];
  v4 = v0[24];
  v3 = v0[25];
  v6 = v0[9];
  v5 = v0[10];
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v7 = (_QWORD *)swift_allocObject(&unk_101084DC8, 48, 7);
  v7[2] = v3;
  v7[3] = v2;
  v7[4] = v1;
  v7[5] = v6;
  v8 = (_QWORD *)swift_allocObject(&unk_101084DF0, 48, 7);
  v8[2] = v4;
  v8[3] = v3;
  v8[4] = v2;
  v8[5] = v1;
  swift_retain_n(v1, 2);
  swift_bridgeObjectRetain(v2);
  swift_retain();
  v9 = swift_retain();
  UUID.init()(v9);
  v10 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v5, &unk_101102C88, v7, &unk_101102C98, v8);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v13 = (char *)&dword_101102C78 + dword_101102C78;
  v11 = (_QWORD *)swift_task_alloc(unk_101102C7C);
  v0[23] = v11;
  *v11 = v0;
  v11[1] = sub_100658B98;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD *))v13)(0, 0, v0 + 5);
}

uint64_t sub_10065932C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return swift_task_switch(sub_100659348, 0, 0);
}

uint64_t sub_100659348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  unint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  if (v1 == 0xD00000000000001ELL && v2 == 0x8000000100EC5500
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x8000000100EC5500, v1, v2, 0) & 1) != 0)
  {
    if (qword_1010E9E00 != -1)
      swift_once(&qword_1010E9E00, sub_1006580C0);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10001A9E8(v3, (uint64_t)qword_101102948);
    *(_QWORD *)(v0 + 48) = v4;
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "FindMy onboarding started", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 40);

    v9 = sub_100659924;
    return swift_task_switch(v9, v8, 0);
  }
  v10 = *(_QWORD *)(v0 + 24);
  v11 = *(_QWORD *)(v0 + 32);
  if (v10 == 0xD000000000000021 && v11 == 0x8000000100EC5520
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x8000000100EC5520, v10, v11, 0) & 1) != 0)
  {
    if (qword_1010E9E00 != -1)
      swift_once(&qword_1010E9E00, sub_1006580C0);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10001A9E8(v12, (uint64_t)qword_101102948);
    *(_QWORD *)(v0 + 56) = v13;
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "FindMy onboarding ended", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 40);

    v9 = sub_1006599D4;
    return swift_task_switch(v9, v8, 0);
  }
  v17 = *(_QWORD *)(v0 + 24);
  v18 = *(_QWORD *)(v0 + 32);
  if (v17 == 0xD000000000000020 && v18 == 0x8000000100EC5550
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020, 0x8000000100EC5550, v17, v18, 0) & 1) != 0)
  {
    if (qword_1010E9E00 != -1)
      swift_once(&qword_1010E9E00, sub_1006580C0);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_10001A9E8(v19, (uint64_t)qword_101102948);
    *(_QWORD *)(v0 + 64) = v20;
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "PNP onboarding started", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 40);

    v9 = sub_100659A80;
    return swift_task_switch(v9, v8, 0);
  }
  v24 = *(_QWORD *)(v0 + 24);
  v25 = *(_QWORD *)(v0 + 32);
  if (v24 == 0xD000000000000023 && v25 == 0x8000000100EC5580
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x8000000100EC5580, v24, v25, 0) & 1) != 0)
  {
    if (qword_1010E9E00 != -1)
      swift_once(&qword_1010E9E00, sub_1006580C0);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_10001A9E8(v26, (uint64_t)qword_101102948);
    *(_QWORD *)(v0 + 72) = v27;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "PNP onboarding stopped", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 40);

    v9 = sub_100659B30;
    return swift_task_switch(v9, v8, 0);
  }
  if (qword_1010E9E00 != -1)
    swift_once(&qword_1010E9E00, sub_1006580C0);
  v32 = *(_QWORD *)(v0 + 32);
  v33 = type metadata accessor for Logger(0);
  sub_10001A9E8(v33, (uint64_t)qword_101102948);
  swift_bridgeObjectRetain_n(v32, 2);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.error.getter(v35);
  v37 = os_log_type_enabled(v35, v36);
  v38 = *(_QWORD *)(v0 + 32);
  if (v37)
  {
    v41 = *(_QWORD *)(v0 + 24);
    v39 = (uint8_t *)swift_slowAlloc(12, -1);
    v40 = swift_slowAlloc(32, -1);
    v42 = v40;
    *(_DWORD *)v39 = 136315138;
    swift_bridgeObjectRetain(v38);
    *(_QWORD *)(v0 + 16) = sub_100016940(v41, v38, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v39 + 4, v39 + 12);
    swift_bridgeObjectRelease_n(v38, 3);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Received a notification %s that can't be handled", v39, 0xCu);
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v39, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 32), 2);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100659924(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "System onboarding is being presented, setting onboardingIsShowing to true", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(_QWORD *)(v1 + 40);

  *(_BYTE *)(v5 + 145) = 1;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1006599D4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "System onboarding is no longer presented, setting onboardingIsShowing to false", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(_QWORD *)(v1 + 40);

  *(_BYTE *)(v5 + 145) = 0;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100659A80(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "System onboarding is being presented, setting onboardingIsShowing to true", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(_QWORD *)(v1 + 40);

  *(_BYTE *)(v5 + 145) = 1;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100659B30(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "System onboarding is no longer presented, setting onboardingIsShowing to false", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(_QWORD *)(v1 + 40);

  *(_BYTE *)(v5 + 145) = 0;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100659BDC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  char v11;
  uint64_t v12;

  v11 = a2 & 1;
  v12 = swift_task_alloc(dword_1011029A4);
  *(_QWORD *)(v6 + 16) = v12;
  *(_QWORD *)v12 = v6;
  *(_QWORD *)(v12 + 8) = sub_100004A74;
  *(_QWORD *)(v12 + 32) = a4;
  *(_QWORD *)(v12 + 40) = a5;
  *(_BYTE *)(v12 + 48) = v11;
  *(_QWORD *)(v12 + 24) = a1;
  return swift_task_switch(sub_10065AED0, a6, 0);
}

uint64_t sub_100659C64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v4 = type metadata accessor for CentralManager.State(0);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v3[12] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EF7C0);
  v3[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[14] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[15] = swift_task_alloc(v8);
  v3[16] = swift_task_alloc(v8);
  return swift_task_switch(sub_100659D04, v2, 0);
}

uint64_t sub_100659D04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;

  if (qword_1010E9E00 != -1)
    swift_once(&qword_1010E9E00, sub_1006580C0);
  v1 = v0[16];
  v2 = v0[13];
  v3 = v0[14];
  v4 = v0[8];
  v5 = type metadata accessor for Logger(0);
  v0[17] = sub_10001A9E8(v5, (uint64_t)qword_101102948);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[18] = v6;
  v7 = v6(v1, v4, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[16];
  v12 = v0[13];
  if (v10)
  {
    v25 = v0[14];
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(32, -1);
    v26 = v14;
    *(_DWORD *)v13 = 141558275;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    v15 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    v0[6] = sub_100016940(v16, v17, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    v18 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v18(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Fetching lost mode alert info (onboarding) for peripheral id %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    v18 = *(void (**)(uint64_t, uint64_t))(v0[14] + 8);
    v18(v0[16], v0[13]);
  }

  v0[19] = v18;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Awaiting CentralManager", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  v0[20] = type metadata accessor for CentralManager(0);
  v23 = (_QWORD *)swift_task_alloc(async function pointer to static CentralManager.pairingCentralManager.getter[1]);
  v0[21] = v23;
  *v23 = v0;
  v23[1] = sub_100659FC8;
  return static CentralManager.pairingCentralManager.getter();
}

uint64_t sub_100659FC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 168);
  v3[22] = a1;
  v3[23] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10065A810;
  else
    v5 = sub_10065A034;
  return swift_task_switch(v5, v3[9], 0);
}

uint64_t sub_10065A034()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[11] + 104))(v0[12], enum case for CentralManager.State.poweredOn(_:), v0[10]);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(state:)[1]);
  v0[24] = v1;
  v2 = sub_100006C64(&qword_1010EC468, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  *v1 = v0;
  v1[1] = sub_10065A0CC;
  return CentralManagerProtocol.await(state:)(v0[12], v0[20], v2);
}

uint64_t sub_10065A0CC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc(v3);
  v5 = v2[11];
  v4 = v2[12];
  v7 = v2 + 9;
  v6 = v2[9];
  (*(void (**)(uint64_t, _QWORD))(v5 + 8))(v4, v7[1]);
  if (v0)
    v8 = sub_10065A9AC;
  else
    v8 = sub_10065A140;
  return swift_task_switch(v8, v6, 0);
}

uint64_t sub_10065A140(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.info.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "CentralManager powered on", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = v1[13];

  v6 = sub_10001A9A8(&qword_1011003C0);
  v7 = type metadata accessor for UUID(0);
  v8 = swift_allocObject(v6, ((*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) | 7);
  v1[26] = v8;
  *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
  Identifier.id.getter(v5);
  v11 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                        + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
  v9 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                  + 1));
  v1[27] = v9;
  *v9 = v1;
  v9[1] = sub_10065A280;
  return v11(v8);
}

uint64_t sub_10065A280(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 216);
  v3[28] = a1;
  v3[29] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[9];
    v6 = sub_10065AB50;
  }
  else
  {
    v7 = v3[9];
    swift_bridgeObjectRelease();
    v6 = sub_10065A2FC;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

void sub_10065A2FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 224);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v4 = *(_QWORD *)(v0 + 224);
    else
      v4 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 224));
    v5 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease();
    if (v5)
      goto LABEL_3;
LABEL_11:
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 144);
    v7 = *(_QWORD *)(v0 + 120);
    v8 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 64);
    swift_bridgeObjectRelease();
    v10 = v6(v7, v9, v8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
    v15 = *(_QWORD *)(v0 + 120);
    v16 = *(_QWORD *)(v0 + 104);
    if (v13)
    {
      v17 = swift_slowAlloc(22, -1);
      v18 = swift_slowAlloc(32, -1);
      v36 = v18;
      *(_DWORD *)v17 = 141558275;
      *(_QWORD *)(v0 + 24) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v17 + 4, v17 + 12);
      *(_WORD *)(v17 + 12) = 2081;
      v19 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v20 = dispatch thunk of CustomStringConvertible.description.getter(v16, v19);
      *(_QWORD *)(v0 + 32) = sub_100016940(v20, v21, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease();
      v14(v15, v16);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "No peripheral available for id %{private,mask.hash}s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      v14(v15, v16);
    }

    v22 = sub_1006665A8();
    v23 = swift_allocError(&type metadata for LocalFindableLostModeDetectionService.InternalError, v22, 0, 0);
    *v24 = 5;
    swift_willThrow(v23);
    swift_release();
    swift_errorRetain(v23);
    v25 = swift_errorRetain(v23);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v28 = 138412290;
      swift_errorRetain(v23);
      v30 = _swift_stdlib_bridgeErrorToNSError(v23);
      *(_QWORD *)(v0 + 16) = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v28 + 4, v28 + 12);
      *v29 = v30;
      swift_errorRelease(v23);
      swift_errorRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to fetch lost mode info with error %@", v28, 0xCu);
      v31 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v29, 1, v31);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      swift_errorRelease(v23);
      swift_errorRelease(v23);
    }
    v33 = *(_QWORD *)(v0 + 120);
    v32 = *(_QWORD *)(v0 + 128);
    v34 = *(_QWORD *)(v0 + 96);

    swift_willThrow(v35);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_11;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v2 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 224));
    goto LABEL_6;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v0 + 224) + 32);
    swift_retain();
LABEL_6:
    *(_QWORD *)(v0 + 240) = v2;
    swift_bridgeObjectRelease();
    v3 = (_QWORD *)swift_task_alloc(dword_1011029C4);
    *(_QWORD *)(v0 + 248) = v3;
    *v3 = v0;
    v3[1] = sub_10065A744;
    sub_100660008(*(_QWORD *)(v0 + 56), v2);
    return;
  }
  __break(1u);
}

uint64_t sub_10065A744()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 248);
  *(_QWORD *)(*v1 + 256) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10065AD00;
  else
    v4 = sub_10065A7A8;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 72), 0);
}

uint64_t sub_10065A7A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 176));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065A810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 184);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138412290;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 16) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to fetch lost mode info with error %@", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  v10 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 128);
  v11 = *(_QWORD *)(v0 + 96);

  swift_willThrow(v12);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065A9AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_release();
  v1 = *(_QWORD *)(v0 + 200);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138412290;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 16) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to fetch lost mode info with error %@", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  v10 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 128);
  v11 = *(_QWORD *)(v0 + 96);

  swift_willThrow(v12);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065AB50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRelease();
  swift_release();
  v1 = *(_QWORD *)(v0 + 232);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138412290;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 16) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to fetch lost mode info with error %@", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  v10 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 128);
  v11 = *(_QWORD *)(v0 + 96);

  swift_willThrow(v12);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065AD00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_release();
  swift_release();
  v1 = *(_QWORD *)(v0 + 256);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138412290;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 16) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to fetch lost mode info with error %@", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  v10 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 128);
  v11 = *(_QWORD *)(v0 + 96);

  swift_willThrow(v12);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065AEB0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = a4;
  *(_BYTE *)(v5 + 48) = a2;
  *(_QWORD *)(v5 + 24) = a1;
  return swift_task_switch(sub_10065AED0, v4, 0);
}

uint64_t sub_10065AED0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  _BOOL4 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if ((*(_BYTE *)(v0 + 48) & 1) == 0)
  {
    if (qword_1010E9E00 != -1)
      swift_once(&qword_1010E9E00, sub_1006580C0);
    v1 = *(_QWORD *)(v0 + 40);
    v2 = type metadata accessor for Logger(0);
    sub_10001A9E8(v2, (uint64_t)qword_101102948);
    swift_bridgeObjectRetain_n(v1, 2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 40);
    if (v6)
    {
      v8 = *(_QWORD *)(v0 + 32);
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v29 = v10;
      *(_DWORD *)v9 = 136446210;
      swift_bridgeObjectRetain(v7);
      *(_QWORD *)(v0 + 16) = sub_100016940(v8, v7, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease_n(v7, 3);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Notification task with name %{public}s succeeded", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 40), 2);
    }
    goto LABEL_12;
  }
  v11 = (uint64_t *)(v0 + 24);
  v12 = *(_QWORD *)(v0 + 24);
  swift_errorRetain(v12);
  if (qword_1010E9E00 != -1)
    swift_once(&qword_1010E9E00, sub_1006580C0);
  v13 = *(_QWORD *)(v0 + 40);
  v14 = *(_QWORD *)(v0 + 24);
  v15 = type metadata accessor for Logger(0);
  sub_10001A9E8(v15, (uint64_t)qword_101102948);
  swift_bridgeObjectRetain(v13);
  sub_1002437C4(v14, 1);
  swift_bridgeObjectRetain(v13);
  v16 = sub_1002437C4(v14, 1);
  v4 = Logger.logObject.getter(v16);
  v17 = static os_log_type_t.default.getter(v4);
  v18 = os_log_type_enabled(v4, v17);
  v19 = *(_QWORD *)(v0 + 40);
  if (!v18)
  {
    v24 = *v11;
    sub_10010F948(*v11, 1);
    swift_bridgeObjectRelease_n(v19, 2);
    sub_10010F948(v24, 1);
    sub_10010F948(v24, 1);
LABEL_12:

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v26 = *(_QWORD *)(v0 + 32);
  v27 = *(_QWORD *)(v0 + 24);
  v20 = swift_slowAlloc(22, -1);
  v21 = (uint64_t *)swift_slowAlloc(8, -1);
  v28 = swift_slowAlloc(32, -1);
  v29 = v28;
  *(_DWORD *)v20 = 136446466;
  swift_bridgeObjectRetain(v19);
  *(_QWORD *)(v0 + 16) = sub_100016940(v26, v19, &v29);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v20 + 4, v20 + 12);
  swift_bridgeObjectRelease_n(v19, 3);
  *(_WORD *)(v20 + 12) = 2114;
  swift_errorRetain(v12);
  v22 = _swift_stdlib_bridgeErrorToNSError(v12);
  *(_QWORD *)(v0 + 16) = v22;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v20 + 14, v20 + 22);
  *v21 = v22;
  sub_10010F948(v27, 1);
  sub_10010F948(v27, 1);
  _os_log_impl((void *)&_mh_execute_header, v4, v17, "Notification task with name %{public}s failed with error %{public}@", (uint8_t *)v20, 0x16u);
  v23 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
  swift_arrayDestroy(v21, 1, v23);
  swift_slowDealloc(v21, -1, -1);
  swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v28, -1, -1);
  swift_slowDealloc(v20, -1, -1);

  sub_10010F948(v27, 1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065B2EC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1[15] = v0;
  v1[16] = *v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  v1[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10065B350, v0, 0);
}

uint64_t sub_10065B350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC18 + dword_1010EBC18);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBC1C);
    *(_QWORD *)(v0 + 144) = v3;
    *v3 = v0;
    v3[1] = sub_10065B450;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10065B450(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10065B4B0, v3, 0);
}

uint64_t sub_10065B4B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;

  v1 = *(_QWORD *)(v0 + 152);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 152);
    v4 = *(_QWORD *)(v0 + 128);
    v3 = *(_QWORD *)(v0 + 136);
    v5 = *(_QWORD *)(v0 + 120);
    v6 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v3, 1, 1, v6);
    v7 = swift_allocObject(&unk_101084D00, 24, 7);
    swift_weakInit(v7 + 16, v5);
    v8 = (_QWORD *)swift_allocObject(&unk_101084D28, 56, 7);
    v8[2] = 0;
    v8[3] = 0;
    v8[4] = v7;
    v8[5] = v2;
    v8[6] = v4;
    swift_retain();
    sub_100028774(v3, (uint64_t)&unk_101102C40, (uint64_t)v8);
    swift_release();
    swift_release();
    sub_100004048(v3, &qword_1010F46C0);
  }
  else
  {
    if (qword_1010E9E00 != -1)
      swift_once(&qword_1010E9E00, sub_1006580C0);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001A9E8(v9, (uint64_t)qword_101102948);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "No local findable pairing service to monitor!", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065B668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  v7 = type metadata accessor for UUID(0);
  v6[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EF7F0);
  v6[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[10] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v6[11] = v10;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[12] = swift_task_alloc(v11);
  v6[13] = swift_task_alloc(v11);
  v12 = sub_10001A9A8(&qword_1010EF7D0);
  v6[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010EF7E0);
  v6[15] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v6[16] = v14;
  v6[17] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010EF7D8);
  v6[18] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v6[19] = v16;
  v6[20] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10065B780, 0, 0);
}

uint64_t sub_10065B780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 168) = Strong;
  if (Strong)
    return swift_task_switch(sub_10065B84C, *(_QWORD *)(v0 + 48), 0);
  v4 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065B84C()
{
  sub_1009B76B0();
  return swift_task_switch(sub_10065B88C, 0, 0);
}

uint64_t sub_10065B88C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[16];
  v1 = v0[17];
  v3 = v0[15];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[22] = v4;
  *v4 = v0;
  v4[1] = sub_10065B918;
  return AsyncStream.Iterator.next(isolation:)(v0[14], 0, 0, v0[18]);
}

uint64_t sub_10065B918()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 176));
  return swift_task_switch(sub_10065B96C, 0, 0);
}

uint64_t sub_10065B96C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t (*v21)(void);

  v1 = *(uint64_t **)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 72);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v0 + 80) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
    swift_release();
    v3 = *(_QWORD *)(v0 + 136);
    v5 = *(_QWORD *)(v0 + 104);
    v4 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = *(_QWORD **)(v0 + 104);
    v10 = *(int *)(v2 + 48);
    *(_DWORD *)(v0 + 216) = v10;
    v11 = *v1;
    *(_QWORD *)(v0 + 184) = *v1;
    *v9 = v11;
    sub_100005CF0((uint64_t)v1 + v10, (uint64_t)v9 + v10, &qword_1010EF7C8);
    v12 = qword_1010E9E00;
    swift_retain();
    if (v12 != -1)
      swift_once(&qword_1010E9E00, sub_1006580C0);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10001A9E8(v13, (uint64_t)qword_101102948);
    *(_QWORD *)(v0 + 192) = v14;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Waiting for queue to be empty", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }
    v18 = *(_QWORD *)(v0 + 168);

    *(_QWORD *)(v0 + 200) = *(_QWORD *)(v18 + 136);
    v19 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.awaitEmpty() + 1);
    v21 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.awaitEmpty()
                            + async function pointer to dispatch thunk of WorkItemQueue.awaitEmpty());
    swift_retain();
    v20 = (_QWORD *)swift_task_alloc(v19);
    *(_QWORD *)(v0 + 208) = v20;
    *v20 = v0;
    v20[1] = sub_10065BB68;
    return v21();
  }
}

uint64_t sub_10065BB68()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 208));
  swift_release();
  return swift_task_switch(sub_10065BBC4, 0, 0);
}

uint64_t sub_10065BBC4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Queue is now empty", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(_QWORD *)(v1 + 184);
  v6 = *(int *)(v1 + 216);
  v7 = *(_QWORD *)(v1 + 168);
  v9 = *(_QWORD **)(v1 + 96);
  v8 = *(_QWORD *)(v1 + 104);
  v10 = *(_QWORD *)(v1 + 80);
  v11 = *(_QWORD *)(v1 + 88);
  v12 = *(_QWORD *)(v1 + 72);
  v23 = *(_QWORD *)(v1 + 56);
  v24 = *(_QWORD *)(v1 + 64);

  type metadata accessor for WorkItemQueue.WorkItem(0);
  v13 = (uint64_t)v9 + *(int *)(v12 + 48);
  *v9 = v5;
  sub_10000F9B8(v8 + v6, v13, &qword_1010EF7C8);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = (v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject(&unk_101084D50, v17 + 8, v14 | 7);
  sub_100005CF0((uint64_t)v9, v18 + v15, (uint64_t *)&unk_1010EF7F0);
  *(_QWORD *)(v18 + v16) = v7;
  *(_QWORD *)(v18 + v17) = v23;
  v19 = swift_retain_n(v7, 2);
  UUID.init()(v19);
  v20 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v24, &unk_101102C50, v18, &unk_101102C60, v7);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v20);
  swift_release();
  sub_100004048(v8, (uint64_t *)&unk_1010EF7F0);
  v21 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v1 + 176) = v21;
  *v21 = v1;
  v21[1] = sub_10065B918;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v1 + 112), 0, 0, *(_QWORD *)(v1 + 144));
}

uint64_t sub_10065BDC4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2[5] = a1;
  v2[6] = a2;
  v3 = sub_10001A9A8(&qword_1010EF7C0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v5);
  v2[10] = swift_task_alloc(v5);
  v2[11] = swift_task_alloc(v5);
  v6 = type metadata accessor for PencilPairingService.PeripheralDiscovery(0);
  v2[12] = v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v7);
  v2[14] = swift_task_alloc(v7);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EF7F0);
  v2[15] = v8;
  v2[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EF7C8);
  v2[17] = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v10);
  v2[19] = swift_task_alloc(v10);
  return swift_task_switch(sub_10065BED8, 0, 0);
}

uint64_t sub_10065BED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void (*v21)(_QWORD, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  _QWORD *v46;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  _QWORD *v60;
  uint64_t v61;

  v2 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(int *)(*(_QWORD *)(v0 + 120) + 48);
  v5 = *(_QWORD *)(v0 + 128) + v4;
  sub_10000F9B8(*(_QWORD *)(v0 + 40) + v4, v5, &qword_1010EF7C8);
  sub_100005CF0(v5, v1, &qword_1010EF7C8);
  sub_10000F9B8(v1, v2, &qword_1010EF7C8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v2, v3);
  v7 = *(uint64_t **)(v0 + 144);
  if (EnumCaseMultiPayload == 1)
  {
    v8 = *v7;
    if (qword_1010E9E00 != -1)
      swift_once(&qword_1010E9E00, sub_1006580C0);
    v9 = type metadata accessor for Logger(0);
    sub_10001A9E8(v9, (uint64_t)qword_101102948);
    swift_errorRetain(v8);
    v10 = swift_errorRetain(v8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v59 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v13 = 138412290;
      swift_errorRetain(v8);
      v14 = _swift_stdlib_bridgeErrorToNSError(v8);
      *(_QWORD *)(v0 + 16) = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v13 + 4, v13 + 12);
      *v59 = v14;
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Error in monitoring pencil pairing service %@", v13, 0xCu);
      v15 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v59, 1, v15);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

      swift_errorRelease(v8);
      swift_errorRelease(v8);
    }
    swift_errorRelease(v8);
    v45 = *(_QWORD *)(v0 + 152);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 104);
    v16 = *(_QWORD *)(v0 + 112);
    v18 = *(_QWORD *)(v0 + 96);
    v19 = *(_QWORD *)(v0 + 64);
    sub_1000126EC((uint64_t)v7, v16, type metadata accessor for PencilPairingService.PeripheralDiscovery);
    sub_10005972C(v16, v17, type metadata accessor for PencilPairingService.PeripheralDiscovery);
    v20 = swift_getEnumCaseMultiPayload(v17, v18);
    v21 = *(void (**)(_QWORD, uint64_t, uint64_t))(v19 + 32);
    v22 = *(_QWORD *)(v0 + 104);
    v23 = *(_QWORD *)(v0 + 56);
    if (v20 != 1)
    {
      v21(*(_QWORD *)(v0 + 88), v22, v23);
      v46 = (_QWORD *)swift_task_alloc(dword_1011029BC);
      *(_QWORD *)(v0 + 160) = v46;
      *v46 = v0;
      v46[1] = sub_10065C460;
      return sub_10065C8B4(*(_QWORD *)(v0 + 88));
    }
    v60 = (_QWORD *)(v0 + 24);
    v21(*(_QWORD *)(v0 + 80), v22, v23);
    if (qword_1010E9E00 != -1)
      swift_once(&qword_1010E9E00, sub_1006580C0);
    v25 = *(_QWORD *)(v0 + 72);
    v24 = *(_QWORD *)(v0 + 80);
    v27 = *(_QWORD *)(v0 + 56);
    v26 = *(_QWORD *)(v0 + 64);
    v28 = type metadata accessor for Logger(0);
    sub_10001A9E8(v28, (uint64_t)qword_101102948);
    v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, v24, v27);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    v32 = os_log_type_enabled(v30, v31);
    v33 = *(_QWORD *)(v0 + 152);
    v34 = *(_QWORD *)(v0 + 112);
    v35 = *(_QWORD *)(v0 + 72);
    v36 = *(_QWORD *)(v0 + 80);
    v38 = *(_QWORD *)(v0 + 56);
    v37 = *(_QWORD *)(v0 + 64);
    if (v32)
    {
      v56 = *(_QWORD *)(v0 + 64);
      v58 = *(_QWORD *)(v0 + 112);
      v39 = swift_slowAlloc(22, -1);
      v57 = v36;
      v40 = swift_slowAlloc(32, -1);
      v61 = v40;
      *(_DWORD *)v39 = 141558275;
      *v60 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v60, v0 + 32, v39 + 4, v39 + 12);
      *(_WORD *)(v39 + 12) = 2081;
      v41 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v42 = dispatch thunk of CustomStringConvertible.description.getter(v38, v41);
      *(_QWORD *)(v0 + 32) = sub_100016940(v42, v43, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v39 + 14, v39 + 22);
      swift_bridgeObjectRelease();
      v44 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
      v44(v35, v38);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Detached accessory with id %{private,mask.hash}s. Nothing to do here.", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      v44(v57, v38);
      sub_1000126B0(v58, type metadata accessor for PencilPairingService.PeripheralDiscovery);
    }
    else
    {

      v48 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
      v48(v35, v38);
      v48(v36, v38);
      sub_1000126B0(v34, type metadata accessor for PencilPairingService.PeripheralDiscovery);
    }
    v45 = v33;
  }
  sub_100004048(v45, &qword_1010EF7C8);
  v49 = *(_QWORD *)(v0 + 144);
  v50 = *(_QWORD *)(v0 + 128);
  v52 = *(_QWORD *)(v0 + 104);
  v51 = *(_QWORD *)(v0 + 112);
  v54 = *(_QWORD *)(v0 + 80);
  v53 = *(_QWORD *)(v0 + 88);
  v55 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065C460()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 160));
  return swift_task_switch(sub_10065C4B4, 0, 0);
}

uint64_t sub_10065C4B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 112);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 56));
  sub_1000126B0(v2, type metadata accessor for PencilPairingService.PeripheralDiscovery);
  sub_100004048(v1, &qword_1010EF7C8);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  v8 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065C580(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  char v6;
  uint64_t v7;

  v6 = a2 & 1;
  v7 = swift_task_alloc(dword_1011029B4);
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v7 + 8) = sub_100004A74;
  *(_BYTE *)(v7 + 32) = v6;
  *(_QWORD *)(v7 + 24) = a1;
  return swift_task_switch(sub_10065C610, a3, 0);
}

uint64_t sub_10065C5F4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 + 32) = a2;
  *(_QWORD *)(v3 + 24) = a1;
  return swift_task_switch(sub_10065C610, v2, 0);
}

uint64_t sub_10065C610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  if ((*(_BYTE *)(v0 + 32) & 1) == 0)
  {
    if (qword_1010E9E00 != -1)
      swift_once(&qword_1010E9E00, sub_1006580C0);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10001A9E8(v1, (uint64_t)qword_101102948);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Discovery succeeded", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }
    goto LABEL_11;
  }
  v6 = *(_QWORD *)(v0 + 24);
  swift_errorRetain(v6);
  if (qword_1010E9E00 != -1)
    swift_once(&qword_1010E9E00, sub_1006580C0);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_101102948);
  swift_errorRetain(v6);
  v8 = swift_errorRetain(v6);
  v3 = Logger.logObject.getter(v8);
  v9 = static os_log_type_t.error.getter(v3);
  v10 = os_log_type_enabled(v3, v9);
  v11 = *(_QWORD *)(v0 + 24);
  if (!v10)
  {
    sub_10010F948(*(_QWORD *)(v0 + 24), 1);
    sub_10010F948(v11, 1);
    swift_errorRelease(v6);
LABEL_11:

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v12 = (uint8_t *)swift_slowAlloc(12, -1);
  v13 = (uint64_t *)swift_slowAlloc(8, -1);
  *(_DWORD *)v12 = 138477827;
  swift_errorRetain(v6);
  v14 = _swift_stdlib_bridgeErrorToNSError(v6);
  *(_QWORD *)(v0 + 16) = v14;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v12 + 4, v12 + 12);
  *v13 = v14;
  sub_10010F948(v11, 1);
  sub_10010F948(v11, 1);
  _os_log_impl((void *)&_mh_execute_header, v3, v9, "Discovery failed with error %{private}@", v12, 0xCu);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
  swift_arrayDestroy(v13, 1, v15);
  swift_slowDealloc(v13, -1, -1);
  swift_slowDealloc(v12, -1, -1);

  sub_10010F948(v11, 1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065C8B4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2[46] = a1;
  v2[47] = v1;
  v3 = type metadata accessor for LostModeAlertInfo(0);
  v2[48] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CentralManager.State(0);
  v2[49] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[50] = v5;
  v2[51] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v2[52] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[53] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v2[54] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[55] = swift_task_alloc(v9);
  v2[56] = swift_task_alloc(v9);
  v2[57] = swift_task_alloc(v9);
  v2[58] = swift_task_alloc(v9);
  v2[59] = swift_task_alloc(v9);
  v2[60] = swift_task_alloc(v9);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v2[61] = v10;
  v2[62] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v2[63] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[64] = v12;
  v2[65] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010EF7C0);
  v2[66] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[67] = v14;
  v2[68] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10065CA1C, v1, 0);
}

uint64_t sub_10065CA1C()
{
  _QWORD *v0;
  __int128 *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;
  uint64_t v24;
  uint64_t (__cdecl *v25)();
  uint64_t v26;

  if (qword_1010E9E00 != -1)
    swift_once(&qword_1010E9E00, sub_1006580C0);
  v1 = (__int128 *)(v0 + 12);
  v2 = v0 + 35;
  v3 = v0[68];
  v4 = v0[67];
  v5 = v0[66];
  v6 = v0[46];
  v7 = type metadata accessor for Logger(0);
  v0[69] = sub_10001A9E8(v7, (uint64_t)qword_101102948);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = v0[68];
  v13 = v0[66];
  if (v11)
  {
    v24 = v0[67];
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(32, -1);
    v26 = v15;
    *(_DWORD *)v14 = 141558275;
    v0[44] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 44, v0 + 45, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v16 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    v0[45] = sub_100016940(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 45, v0 + 46, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Detected local findable attach with peripheral id: %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    v19 = v15;
    v2 = v0 + 35;
    swift_slowDealloc(v19, -1, -1);
    v20 = v14;
    v1 = (__int128 *)(v0 + 12);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[67] + 8))(v0[68], v0[66]);
  }

  v21 = qword_1010EA5B0;
  swift_retain();
  if (v21 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v2, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v1, &qword_1010EE220);
  if (v0[15])
  {
    sub_10000F9FC(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001AA44(v0 + 2, v0[5]);
    v25 = (uint64_t (__cdecl *)())((char *)&dword_1010EBD58 + dword_1010EBD58);
    v23 = (_QWORD *)swift_task_alloc(unk_1010EBD5C);
    v0[70] = v23;
    *v23 = v0;
    v23[1] = sub_10065CD24;
    return v25();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10065CD24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 560);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  *(_QWORD *)(*(_QWORD *)v1 + 568) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10065CD84, v3, 0);
}

uint64_t sub_10065CD84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 568);
  v2 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v3 = Logger.logObject.getter(v2);
  v4 = v3;
  if (v1)
  {
    v5 = static os_log_type_t.default.getter(v3);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Waiting for first unlock", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    v7 = (_QWORD *)swift_task_alloc(dword_1010FC394);
    *(_QWORD *)(v0 + 576) = v7;
    *v7 = v0;
    v7[1] = sub_10065CF6C;
    return sub_10044B510();
  }
  else
  {
    v9 = static os_log_type_t.error.getter(v3);
    if (os_log_type_enabled(v4, (os_log_type_t)v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, (os_log_type_t)v9, "First unlock service is not available.  Bailing", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = *(_QWORD *)(v0 + 520);
    v12 = *(_QWORD *)(v0 + 496);
    v14 = *(_QWORD *)(v0 + 472);
    v13 = *(_QWORD *)(v0 + 480);
    v16 = *(_QWORD *)(v0 + 456);
    v15 = *(_QWORD *)(v0 + 464);
    v18 = *(_QWORD *)(v0 + 440);
    v17 = *(_QWORD *)(v0 + 448);
    v19 = *(_QWORD *)(v0 + 408);
    v20 = *(_QWORD *)(v0 + 384);
    swift_task_dealloc(*(_QWORD *)(v0 + 544));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10065CF6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 376);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 576));
  return swift_task_switch(sub_10065CFC4, v1, 0);
}

uint64_t sub_10065CFC4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint8_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t (__cdecl *v29)();

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Device is now unlocked", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(_QWORD *)(v1 + 376);

  if ((*(_BYTE *)(v5 + 145) & 1) != 0)
  {
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      v10 = "Is currently going through PNP onboarding. Early return";
      v11 = v7;
      v12 = v8;
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v11, v12, v10, v9, 2u);
      swift_slowDealloc(v9, -1, -1);
      goto LABEL_10;
    }
    goto LABEL_10;
  }
  v13 = *(_BYTE *)(*(_QWORD *)(v1 + 376) + 144);
  v7 = Logger.logObject.getter(v6);
  v14 = static os_log_type_t.default.getter(v7);
  v15 = os_log_type_enabled(v7, v14);
  if ((v13 & 1) != 0)
  {
    if (v15)
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      v12 = v14;
      v10 = "Is currently presenting lost mode alert. Early return.";
      v11 = v7;
      goto LABEL_9;
    }
LABEL_10:

    swift_release();
    v16 = *(_QWORD *)(v1 + 520);
    v17 = *(_QWORD *)(v1 + 496);
    v19 = *(_QWORD *)(v1 + 472);
    v18 = *(_QWORD *)(v1 + 480);
    v21 = *(_QWORD *)(v1 + 456);
    v20 = *(_QWORD *)(v1 + 464);
    v23 = *(_QWORD *)(v1 + 440);
    v22 = *(_QWORD *)(v1 + 448);
    v24 = *(_QWORD *)(v1 + 408);
    v28 = *(_QWORD *)(v1 + 384);
    swift_task_dealloc(*(_QWORD *)(v1 + 544));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  if (v15)
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v14, "Attempting to check if there is a local beacon identifier saved.", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v1 + 176, &qword_1010EE220);
  if (*(_QWORD *)(v1 + 200))
  {
    sub_10000F9FC((__int128 *)(v1 + 176), v1 + 136);
    sub_10001AA44((_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 160));
    v29 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v27 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v1 + 584) = v27;
    *v27 = v1;
    v27[1] = sub_10065D2C8;
    return v29();
  }
  else
  {
    __break(1u);
  }
  return result;
}

